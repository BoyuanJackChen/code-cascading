[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     has_close_elements([2, 3, 4, 5], 2.5) is False\nassert     has_close_elements([2, 3, 4, 5], 1.5) is True\nassert     has_close_elements([2, 3, 4, 5], 0.5) is True\nassert     has_close_elements([2, 3, 4, 5], 2.5) is True\nassert     has_close_elements([2, 3, 4, 5], 3.5) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     has_close_elements([0.2, 0.4, 0.6], 0.15)\nassert not has_close_elements([0.2, 0.4, 0.6], 0.1)\nassert not has_close_elements([0.2, 0.4, 0.6], 0.3)\nassert not has_close_elements([0.2, 0.4, 0.6], 0.01)\nassert not has_close_elements([0.2, 0.4, 0.6], 0.15)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     has_close_elements([1,2,3], 0.2) is False\nassert     has_close_elements([0.1,0.2,0.3], 0.2) is True\nassert     has_close_elements([1,2,3], 1.5) is False\nassert     has_close_elements([1,2,3], 2.5) is False\nassert     has_close_elements([1,2,3], 3.5) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 1.5)\nassert not has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 3.5)\nassert not has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 4.5)\nassert not has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 5.5)\n\ndef has_close_elements_2(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 2)\nassert     has_close_elements([1, 2, 3, 4, 5], 3)\nassert     has_close_elements([1, 2, 3, 4, 5], 1)\nassert     not has_close_elements([1, 2, 3, 4, 5], 5)\nassert     not has_close_elements([1, 2, 3, 4, 5], -1)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     has_close_elements([0.0], 1e-6)\nassert     not has_close_elements([0.0, 0.0], 1e-6)\nassert     has_close_elements([0.0, 1e-6], 1e-6)\nassert     not has_close_elements([1e-6, 0.0], 1e-6)\nassert     has_close_elements([-1e-6, 1e-6], 1e-6)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 1.0) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 1.3) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 1.8) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 2.3) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 2.1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     has_close_elements([1,2,3,4,5], 2)\nassert     has_close_elements([1,2,3,4,5,6], 2)\nassert     not has_close_elements([1,2,3,4,5,6], 1)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 2.2) is False\nassert     has_close_elements([1, 2, 3, 4], 0) is False\nassert     has_close_elements([1, 2, 3, 4], 1) is True\nassert     has_close_elements([1, 1, 1, 1, 1, 1], 1) is True\nassert     has_close_elements([1, 1, 1, 1, 1, 1], 0.5) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     has_close_elements([], 0.0) == False\nassert     has_close_elements([0.0], 0.0) == False\nassert     has_close_elements([1.0], 0.0) == False\nassert     has_close_elements([1.0, 1.0, 1.0], 0.0) == False\nassert     has_close_elements([1.0, 2.0, 3.0], 0.0) == True\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"((((( ))))\") ==     ['(', '(', '(', ')', ')', ')', ')', ')', ')', ')']\nassert     separate_paren_groups(\"((()()))()\") == ['(', '(', '(', ')', ')', ')', '(', ')', '(', ')', ')', ')']\nassert     separate_paren_groups(\"(()())\") == ['(', '(', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')']\nassert     separate_paren_groups
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"\") == [\"\"]\nassert     separate_paren_groups(\"(())\") == [\"()\", \"()\"]\nassert     separate_paren_groups(\"(()(()()))\") == [\"((()))\", \"(()())\"]\nassert     separate_paren_groups(\"()\") == [\"()\"]\nassert     separate_paren_groups(\"())(\") == [\"()\", \"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"(1 + (2 * 3) + (4 * (5 + 6)))\") == [\"(((1 + (2 * 3)) + (4 * (5 + 6))))\"]\nassert separate_paren_groups(\"(1 + (2 * 3) + (4 * (5 + 6)))\") == [\"(((1 + (2 * 3)) + (4 * (5 + 6))))\"]\nassert separate_paren_groups(\"(1 + (2 * 3) + (4 * (5 + 6)))\") == [\"(((1 + (2 * 3)) + (4 * (5 + 6))))\"]\nassert separate_paren_groups(\"(1 + (2 * 3) + (4 * (5 + 6)))\") == [\"(((1 + (2 * 3)) + (4 * (5 + 6))))\"]\nassert separate_paren_groups(\"(1 + (2 * 3) + (4 * (5 + 6)))\") == [\"(((1 + (2 * 3)) + (4 * (5 + 6))))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"(())\") == [\"()\", \"()\"]\nassert     separate_paren_groups(\"(())()\") == [\"()\", \"()\", \"()\"]\nassert     separate_paren_groups(\"((())())\") == [\"((())())\", \"(()())\"]\nassert     separate_paren_groups(\"(()\") == [\"()\", \"()\"]\nassert     separate_paren_groups(\"()(())\") == [\"()\", \"(())\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(){}\") == [\"()\", \"{}\"]\nassert     separate_paren_groups(\"{{}{}\") == [\"{{}\", \"{}\"]\nassert     separate_paren_groups(\"(){}(){}\") == [\"()\", \"{}\", \"(){}\"]\nassert     separate_paren_groups(\"{}{{{}{}\") == [\"{\", \"{}\", \"{\", \"{}\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"a(b)c)d\") == [\"abcd\"]\nassert     separate_paren_groups(\"a(b)c)d(e)f)g\") == [\"abcd\", \"efg\"]\nassert     separate_paren_groups(\"(a(b)c)d(e)f)g\") == [\"abcd\", \"efg\"]\nassert     separate_paren_groups(\"a(b(c)d)\") == [\"abcd\"]\nassert     separate_paren_groups(\"a(b(c(d)e)f)\") == [\"abcd\", \"f\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"(a(b(c(d))e)f)\") == ['a(b(c(d))e)f']\nassert     separate_paren_groups(\"(a (b))\") == ['a', '(b)']\nassert     separate_paren_groups(\"a(b))\") == ['a', '(b)']\nassert     separate_paren_groups(\"(a(b(c)d)e)f)\") == ['a(b(c)d)e)f']\nassert     separate_paren_groups(\"(a (b(c(d)e)f)g)\") == ['a (b(c(d)e)f)g']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"()\") == [\"()\"]\nassert     separate_paren_groups(\"()()\") == [\"()()\"]\nassert     separate_paren_groups(\"((()()))\") == [\"((()()))\"]\nassert     separate_paren_groups(\"((()\") == [\"((())\"]\nassert     separate_paren_groups(\"(()\") == [\"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"((1 + 2) * 3)\")    ==    ['(1 + 2)', '3']\nassert     separate_paren_groups(\"(1 + (2 * 3))\")    ==    ['1 + (2 * 3)', '']\nassert     separate_paren_groups(\"(1 + (2 * 3)\")    ==    ['1 + (2 * 3)', '']\nassert     separate_paren_groups(\"(1 + (2 * 3 ) )\")    ==    ['1 + (2 * 3 )', '']\nassert     separate_paren_groups(\"(1 + (2 * 3 ) )\")    ==    ['(1 + (2 * 3 ) )', '']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"Hi (there)\") == [\"Hi\", \"(there)\"]\nassert     separate_paren_groups(\"Hi ( there ) \") == [\"Hi\", \"( there )\"]\nassert     separate_paren_groups(\"Hi (there)\") == [\"Hi\", \"(there)\"]\nassert     separate_paren_groups(\"Hi(there)\") == [\"Hi\", \"(there)\"]\nassert     separate_paren_groups(\"(Hi there)\") == [\"(Hi there)\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     truncate_number(17.8)    == 17\nassert     truncate_number(17.7)    == 17\nassert     truncate_number(17.6)    == 17\nassert     truncate_number(17.5)    == 17\nassert     truncate_number(17.4)    == 17\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     truncate_number(0.42) == 0.42\nassert     truncate_number(3.14) == 3.0\nassert     truncate_number(123.45) == 123.0\nassert     truncate_number(1.23456789) == 1.23456789\nassert     truncate_number(1.234567890) == 1.23456789\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     truncate_number(2.6) == 2.0\nassert     truncate_number(2.8) == 2.0\nassert     truncate_number(3.1) == 3.0\nassert     truncate_number(3.3) == 3.0\nassert     truncate_number(3.5) == 3.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     truncate_number(6.123456789) == 6.12345\nassert     truncate_number(6.23456789) == 6.2345\nassert     truncate_number(6.3456789) == 6.345\nassert     truncate_number(6.456789) == 6.45\nassert     truncate_number(6.56789) == 6.56789\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     truncate_number(1.32) == 1.3\nassert     truncate_number(1.33) == 1.3\nassert     truncate_number(1.34) == 1.3\nassert     truncate_number(1.35) == 1.3\nassert     truncate_number(1.36) == 1.3\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     truncate_number(1.1415) == 0.1415\nassert     truncate_number(1.14159) == 0.14159\nassert     truncate_number(1.141592) == 0.141592\nassert     truncate_number(1.1415929) == 0.1415929\nassert     truncate_number(1.14159289) == 0.14159289\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     truncate_number(1.33) == 0.33\nassert     truncate_number(2.33) == 0.0\nassert     truncate_number(3.33) == 0.0\nassert     truncate_number(5.33) == 0.0\nassert     truncate_number(6.33) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     truncate_number(12.1234) == 1.234\nassert     truncate_number(1.234) == 1.234\nassert     truncate_number(1.2345) == 1.2345\nassert     truncate_number(1.23456) == 1.2345\nassert     truncate_number(1.234567) == 1.2345\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     truncate_number(2.1111) == 2.0\nassert     truncate_number(3.12) == 3.0\nassert     truncate_number(4.1234) == 4.0\nassert     truncate_number(0.1234) == 0.0\nassert     truncate_number(0.11) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     truncate_number(5.999) == 5.999\nassert     truncate_number(5.0) == 5.0\nassert     truncate_number(0.125) == 0.125\nassert     truncate_number(-0.125) == -0.125\nassert     truncate_number(0) == 0\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_zero([1, 0, 1, 1, 1, -3, 1, 1, -1]) == False\nassert     below_zero([1, 1, 1, -3, 1, 1, 1, 1, -1]) == True\nassert     below_zero([1, 1, 1, -3, 1, 1, 1, -1, 1]) == True\nassert     below_zero([1, 1, 1, -3, 1, 1, 1, -1, 1, 1]) == True\nassert     below_zero([1, 1, 1, -3, 1, 1, 1, -1, 1, 1, 1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     False == below_zero([\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n        (0, 4),\n        (4, 4),\n        (0, 4),\n        (-1, 4),\n    "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_zero([0, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, 1, 2, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1, 2, -1, 2, 3, -1, 2, 3, 1"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_zero([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is True\nassert     below_zero([0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) is True\nassert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is False\nassert     below_zero([0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) is False\nassert     below_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) is True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_zero([5, 3, -8, 7, -5, 8, -2, 3, -5, 2, -4, 3, -1, 2, -5, 3, -1, 2, -1, 3]) is True\nassert     below_zero([5, 3, -8, 7, -5, 8, -2, 3, -5, 2, -4, 3, -1, 2, -5, 3, -1, 2, -1, 3, 5]) is False\nassert     below_zero([5, 3, -8, 7, -5, 8, -2, 3, -5, 2, -4, 3, -1, 2, -5, 3, -1, 2, -1, 3, 5, 2]) is False\nassert     below_zero([5, 3, -8, 7, -5, 8, -2, 3, -5, 2, -4, 3, -1, 2, -5, 3, -1, 2, -1, 3, 5, 2, 1]) is True\nassert     below_zero([5, 3, -8, 7, -5, 8, -2, 3, -5, 2, -4, 3, -1, 2, -5, 3, -1, 2, -1, 3, 5, 2, 1, 1]) is False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     below_zero([0, 1, 1, 1]) == True\nassert     below_zero([0, 0, 1, 0, 1]) == True\nassert     below_zero([1, 0, 1, 1]) == True\nassert     below_zero([0, 1, 0, 1]) == True\nassert     below_zero([0, 0, 1, 1, 1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_zero([1, 1, 1, 1, 1]) is True\nassert     below_zero([1, 2, 1, 3]) is False\nassert     below_zero([1, 2, 3, 4, 5, 6]) is False\nassert     below_zero([-1, -2, -3, -4, -5, -6]) is True\n\n\ndef is_one_away(one: str, two: str) -> bool:\n    \"\"\" Check if two strings are one edit-distance apart.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_zero([4,1,5,3,-1]) == True\nassert     below_zero([1,2,3]) == False\nassert     below_zero([-3,4,5,6,8,0]) == True\nassert     below_zero([5,5,5,5,5]) == False\nassert     below_zero([0,-1,-2,-3,-4,-5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_zero([100,50,50]) == True\nassert     below_zero([100,50,100]) == False\nassert     below_zero([100,50,50,100]) == False\nassert     below_zero([]) == False\nassert     below_zero([1,0,1]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     False == below_zero([])\nassert     False == below_zero([1, -2, 1])\nassert     False == below_zero([1, -2, 1, -3, 3, 4, 1])\nassert     False == below_zero([1, -2, -2])\nassert     False == below_zero([-1, -2, -2])\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef mediana(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median.\n    Median is a median of a dataset: the average of the middle element and \n    the middle element of the remaining elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation(numbers=[\n                -11, -5, 3, 4, 7, 8, -7, -4, 3, 2, -1, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1, 0, 0, 0,\n                4, 5, 7, 8, -7, -4, 3, 2, -1, 0, 0, -4, -5, -7, -8, -7, -4, 3, 2, -1"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation(\n        [2.0,3.0,5.0,4.0,8.0]) == 0.0\nassert     mean_absolute_deviation(\n        [2.0,4.0,2.0,6.0,3.0]) == 3.0\nassert     mean_absolute_deviation(\n        [9.0,4.0,2.0,6.0,3.0]) == 2.5\nassert     mean_absolute_deviation(\n        [9.0,8.0,4.0,2.0,6.0]) == 3.5\nassert     mean_absolute_deviation(\n        [9.0,8.0,4.0,2.0,5.0]) == 3.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 1.875\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 1.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.75\nassert     mean_absolute_deviation([1, 2, 3, 4]) == 1.5\nassert     mean_absolute_deviation([1, 2, 3]) == 1.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([1,2,3,4,5,6,7]) == 2.0\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9]) == 2.5\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10]) == 3.5\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11]) == 4.5\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12]) == 5.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([0, 0, 0, 0, 0]) == 0\nassert     mean_absolute_deviation([0, 0, 0, 0, 0, 1]) == 0\nassert     mean_absolute_deviation([0, 0, 0, 0, 0, 1, 2, 3, 4, 5]) == 0\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5]) == 0\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5, 6]) == -2\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     abs(mean_absolute_deviation([1, 2, 3, 4, 5]) - 2.5) < 0.0000001\nassert     abs(mean_absolute_deviation([1, 2, 3, 4, 4]) - 1.0) < 0.0000001\nassert     abs(mean_absolute_deviation([1, 1, 1, 1]) - 0.0) < 0.0000001\nassert     abs(mean_absolute_deviation([1, 2, 3, 4]) - 1.5) < 0.0000001\nassert     abs(mean_absolute_deviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) - 0.0) < 0.0000001\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef median(numbers: List[float]) -> float:\n    \"\"\" Calculate the median value of a list of numbers.\n\n    Median is the point in an ordered dataset that has the same number of values\n    as the number of samples. There are two ways to compute the median:\n    if the number of samples is odd, the median is the middle element of\n    the sorted data set; if the number of samples is even, it is the average of the\n    two elements in the middle of the sorted data set.\n\n    The median can be calculated as the median of a single sorted dataset is the same\n    as the median of two sorted datasets, which is the average of the two median values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11]) == 5\nassert     mean_absolute_deviation([-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]) == 5\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12]) == 6\nassert     mean_absolute_deviation([-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]) == 6\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([0]) == 0\nassert     mean_absolute_deviation([1]) == 1\nassert     mean_absolute_deviation([-1]) == 1\nassert     mean_absolute_deviation([1, 2]) == 1\nassert     mean_absolute_deviation([1, 2, 3]) == 1\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         intersperse([1,2,3,4], 0) == [0, 1, 2, 3, 4]\nassert         intersperse([1,2,3,4], 1) == [1, 0, 2, 3, 4]\nassert         intersperse([1,2,3,4], 2) == [1, 2, 0, 3, 4]\nassert         intersperse([1,2,3,4], 3) == [1, 2, 3, 0, 4]\nassert         intersperse([1,2,3,4], 4) == [1, 2, 3, 4, 0]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersperse(numbers=[], delimeter=2) == []\nassert     intersperse(numbers=[1, 2, 3], delimeter=2) == [1, 2, 3, 2]\nassert     intersperse(numbers=[1, 2, 3], delimeter=3) == [1, 3, 3, 2]\nassert     intersperse(numbers=[1, 2, 3], delimeter=4) == [1, 4, 4, 2, 3]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersperse([1,2,3,4,5],3) == [1,3,3,4,5]\nassert     intersperse([1,2,3,4,5],2) == [1,2,2,3,4,5]\nassert     intersperse([1,2,3,4,5],1) == [1,2,3,4,5]\nassert     intersperse([1,2,3,4,5],0) == [1,2,3,4,5]\nassert     intersperse([1,2,3,4,5],6) == [1,2,3,4,5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=1) == [1, delimeter, 2, delimeter, 3, delimeter, 4, delimeter, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=2) == [1, delimeter, 2, delimeter, 3, delimeter, 4, delimeter, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=3) == [1, delimeter, 2, delimeter, 3, delimeter, 4, delimeter, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=4) == [1, delimeter, 2, delimeter, 3, delimeter, 4, delimeter, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=5) == [1, delimeter, 2, delimeter, 3, delimeter, 4, delimeter, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3]\nassert     intersperse([1, 2, 3], 1) == [1, 1, 2, 2, 3]\nassert     intersperse([1, 2, 3], 0) == [1, 0, 2, 0, 3]\nassert     intersperse([1, 2, 3, 4], 0) == [1, 0, 2, 0, 3, 4]\nassert     intersperse([1, 2, 3, 4, 5], 0) == [1, 0, 2, 0, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersperse([1,2,3,4], 5)    == [1,5,2,5,3,5,4]\nassert     intersperse([1,2,3,4], 2)    == [1,2,2,3,4]\nassert     intersperse([1,2,3,4], 0)    == [1,0,2,0,3,0,4]\nassert     intersperse([1,2,3,4], -1)    == [1,-1,2,-1,3,-1,4]\nassert     intersperse([1,2,3,4], 'c')    == [1,2,3,4,'c']\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersperse([1,2,3,4,5], 2) == [1,2,3,2,2,3,2,3,4,5,5,5]\nassert     intersperse([1,2,3,4], 2) == [1,2,2,3,3,4,4]\nassert     intersperse([1,2,3,4,5], 1) == [1,1,2,2,3,3,4,4,5,5,5,5]\nassert     intersperse([1,2,3,4,5], 0) == [1,2,3,4,5]\n\n\ndef reverse_string(numbers: List[int]) -> List[int]:\n    \"\"\" Reverse a list of characters inplace\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersperse([1,2,3], 0) == [0,1,2,3]\nassert     intersperse([1,2,3], 1) == [0,1,1,2,3]\nassert     intersperse([1,2,3], 2) == [0,1,2,2,3]\nassert     intersperse([1,2,3], 3) == [0,1,2,3,3]\nassert     intersperse([1,2,3], 4) == [0,1,2,3,4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersperse([1,2,3], 3) == [1,3,3]\nassert     intersperse([1,2,3], 0) == [1,2,3]\nassert     intersperse([1], 3) == [1,1,1]\nassert     intersperse([1,2,3], 4) == [1,4,4]\n\n\ndef pad(seq: List[int], target_length: int) -> List[int]:\n    \"\"\" Pad the given sequence to the target length. The padding elements are filled with `-1`.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersperse([1,2,3], 0) == [1,0,2,0,3]\nassert     intersperse([1,2,3], 1) == [1,1,2,1,3]\nassert     intersperse([1,2,3], 2) == [1,1,2,2,3]\nassert     intersperse([1,2,3], 3) == [1,1,2,3,3]\nassert     intersperse([1,2,3], 4) == [1,1,2,3,4]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         parse_nested_parens(\"(()())\") == [2, 1, 2]\nassert         parse_nested_parens(\"((()))\") == [2, 1, 2]\nassert         parse_nested_parens(\"(()(())\") == [3, 1, 1, 2]\nassert         parse_nested_parens(\"(()())()\") == [2, 1, 2, 2]\nassert         parse_nested_parens(\"(()())()()()\") == [4, 1, 1, 2, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"(()()\") == [1, 1]\nassert     parse_nested_parens(\"()()()\") == [1, 1, 1]\nassert     parse_nested_parens(\"(())(())\") == [1, 2, 1]\nassert     parse_nested_parens(\"())\") == [0, 0]\nassert     parse_nested_parens(\"(()())()\") == [1, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2]\nassert     parse_nested_parens(\"((()()))\") == [3]\nassert     parse_nested_parens(\"(()((()))())\") == [4]\nassert     parse_nested_parens(\"(()())(()())\") == [4]\nassert     parse_nested_parens(\"(()(()))()\") == [3]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"(()())\") == [3, 2]\nassert     parse_nested_parens(\"()()\") == [2, 1]\nassert     parse_nested_parens(\"((()))\") == [1, 1]\nassert     parse_nested_parens(\"(()())()\") == [3, 2]\nassert     parse_nested_parens(\"(()(()))\") == [3, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"(()(()))\") == [1, 1, 1]\nassert     parse_nested_parens(\"((()()))\") == [2, 1, 1]\nassert     parse_nested_parens(\"(()()())\") == [1, 2, 1]\nassert     parse_nested_parens(\"()()(()())\") == [2, 1, 2, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('()') == [0]\nassert     parse_nested_parens('()()') == [0, 0]\nassert     parse_nested_parens('((()))') == [1, 1, 1]\nassert     parse_nested_parens('((()))(())') == [2, 1, 1, 0]\nassert     parse_nested_parens('(()())') == [1, 1, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"((()))\") == [0, 0, 1, 0, 1, 0, 1, 1, 1]\nassert     parse_nested_parens(\"(()())\") == [0, 1, 1, 0, 1, 0, 1, 0, 1]\nassert     parse_nested_parens(\"()((())())\") == [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"()\") == [0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_nested_parens('(())') == [0, 0]\nassert     parse_nested_parens('()()') == [0, 0]\nassert     parse_nested_parens('(((()())))') == [3, 3, 2, 0]\nassert     parse_nested_parens('((()))') == [3, 1, 0]\nassert     parse_nested_parens('((())))((())())') == [5, 5, 3, 3, 1, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"(()())\") == [0, 2]\nassert     parse_nested_parens(\"((()))\") == [1, 1]\nassert     parse_nested_parens(\"()(()())\") == [0, 3]\nassert     parse_nested_parens(\"(()())(()())\") == [1, 4]\nassert     parse_nested_parens(\"(()(()))()\") == [1, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2, 2, 2]\nassert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"(((()))\") == [3]\nassert     parse_nested_parens(\"()()()()()\") == [4]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     len(filter_by_substring([\"Hello world\"], \"Hello\")) == 1\nassert     len(filter_by_substring([\"Hello world\"], \"world\")) == 1\nassert     len(filter_by_substring([\"Hello world\"], \"ho\")) == 0\nassert     len(filter_by_substring([\"Hello world\", \"bye\"], \"bye\")) == 1\nassert     len(filter_by_substring([\"Hello world\", \"bye\"], \"hello\")) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"World\",\"Hello\",\"World\", \"This\", \"is\", \"a\", \"python\", \"string\", \"of\", \"strings\"], \"is\") == [\"Hello\", \"World\", \"This\", \"python\", \"string\"]\nassert     filter_by_substring([\"World\",\"Hello\",\"World\", \"This\", \"is\", \"a\", \"python\", \"string\", \"of\", \"strings\"], \"a\") == [\"Hello\", \"World\", \"This\", \"python\", \"string\", \"of\", \"strings\"]\nassert     filter_by_substring([\"World\",\"Hello\",\"World\", \"This\", \"is\", \"a\", \"python\", \"string\", \"of\", \"strings\"], \"of\") == [\"Hello\", \"World\", \"This\", \"python\", \"string\", \"of\", \"strings\"]\nassert     filter_by_substring([\"World\",\"Hello\",\"World\", \"This\", \"is\", \"a\", \"python\", \"string\", \"of\", \"strings\"], \"This\") == [\"World\", \"Hello\", \"World\", \"python\", \"string\", \"of\", \"strings\"]\nassert     filter_by_substring([\"World\",\"Hello\",\"World\", \"This\", \"is\", \"a\", \"python\", \"string\", \"of\", \"strings\"], \"Python\") == [\"World\", \"Hello\", \"World\", \"This\", \"string\", \"of\", \"strings\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_substring(['cat', 'dog', 'bird', 'tomcat', 'cow', 'tiger', 'fox'], 'cat') == ['cat', 'tiger', 'fox']\nassert filter_by_substring(['cat', 'dog', 'bird', 'tomcat', 'cow', 'tiger', 'fox'], 'tomcat') == ['tomcat']\nassert filter_by_substring(['cat', 'dog', 'bird', 'tomcat', 'cow', 'tiger', 'fox'], 'tiger') == ['tiger']\nassert filter_by_substring(['cat', 'dog', 'bird', 'tomcat', 'cow', 'tiger', 'fox'], 'fox') == ['fox']\nassert filter_by_substring(['cat', 'dog', 'bird', 'tomcat', 'cow', 'tiger', 'fox'], 'dog') == ['dog']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'a') == ['a', 'b', 'd']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'e') == ['e']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'd') == ['d']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'h') == []\nassert     filter_by_substring([], 'a') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\"], \"a\") == [\"a\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\"], \"b\") == [\"b\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\"], \"c\") == [\"c\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"a\") == [\"a\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"b\") == [\"b\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"A\", \"B\", \"C\", \"D\"], \"D\") == [\"D\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\", \"D\", \"E\"], \"D\") == [\"D\", \"E\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\", \"D\"], \"C\") == [\"C\", \"D\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], \"E\") == [\"E\", \"F\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], \"C\") == [\"C\", \"D\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_by_substring(['Test', 'this', 'this', 'Test', 'Test'], 't') == ['this', 'this', 'Test', 'Test']\nassert     filter_by_substring(['Test', 'this', 'this', 'Test', 'Test'], 'test') == ['this', 'this', 'Test', 'Test']\nassert     filter_by_substring(['Test', 'this', 'this', 'Test', 'Test'], 'Test') == ['Test', 'Test']\nassert     filter_by_substring(['Test', 'this', 'this', 'Test', 'Test'], 'th') == ['this', 'this', 'Test', 'Test']\nassert     filter_by_substring(['Test', 'this', 'this', 'Test', 'Test'], 'thi') == ['this', 'this', 'Test', 'Test']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_substring([\"it's a good day\", \"it's a bad day\", \"it's a nice day\", \"it's a bad night\"], \"a\") == ['it', 'day', 'good', 'day']\nassert     filter_by_substring([\"it's a good day\", \"it's a bad day\", \"it's a nice day\", \"it's a bad night\"], \"ad\") == []\nassert     filter_by_substring([\"it's a good day\", \"it's a bad day\", \"it's a nice day\", \"it's a bad night\"], \"dd\") == ['it', 'day', 'good', 'day']\nassert     filter_by_substring([\"it's a good day\", \"it's a bad day\", \"it's a nice day\", \"it's a bad night\"], \"rt\") == ['it', 'day', 'good', 'day']\nassert     filter_by_substring([\"it's a good day\", \"it's a bad day\", \"it's a nice day\", \"it's a bad night\"], \"z\") == ['it', 'day', 'nice', 'day']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'a') == ['a']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'b') == ['b', 'c']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'c') == ['c', 'd']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'd') == ['d', 'e']\nassert     filter_by_substring(['a', 'b', 'c', 'd', 'e'], 'e') == ['e']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"hello\", \"goodbye\", \"hello\"], \"hel\") == [\"hello\"]\nassert     filter_by_substring([\"hello\", \"goodbye\", \"hello\"], \"good\") == [\"goodbye\"]\nassert     filter_by_substring([\"hello\", \"goodbye\", \"hello\"], \"by\") == [\"goodbye\"]\nassert     filter_by_substring([\"hello\", \"goodbye\", \"hello\", \"bob\"], \"ob\") == [\"hello\", \"goodbye\"]\nassert     filter_by_substring([\"hello\", \"goodbye\", \"hello\", \"bob\"], \"ob\") == [\"hello\", \"goodbye\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([-1, -2, -3]) == (-6, -6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_product([1,2,3,4]) == (10, 24)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([-1,0,1]) == (0, 0)\nassert     sum_product([-3, -1, 0, 1]) == (0, -6)\nprint('sum_product: correct')\n\nfrom test_tool import test\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (0, 1) == sum_product([])\nassert     (0, 1) == sum_product([1])\nassert     (0, 1) == sum_product([0])\nassert     (0, 1) == sum_product([1, 2, 3])\nassert     (0, 12) == sum_product([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 1)\nassert     sum_product([0, 1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([-1, -2, -3]) == (-6, -6)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4]) == (9, 24)\nassert     sum_product([5, 6, 7]) == (16, 840)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([-1, 2, -3]) == (0, -6)\nassert     sum_product([-1, 2, -3, 4]) == (0, -6)\nassert     sum_product([-1, 2, -3, 4, 5, 6]) == (0, -6)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (sum_product([1, 2, 3]) == (6, 6))\nassert     (sum_product([]) == (0, 1))\nassert     (sum_product([-1, -2, -3]) == (0, -6))\nassert     (sum_product([-1, 0, 1]) == (1, -1))\nassert     (sum_product([0, 0]) == (0, 0))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([-1, -2, -3]) == (0, -6)\nassert     sum_product([-1, 1, -3]) == (-2, -2)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (sum_product([1, 2, 3]) ==     (6, 6))\nassert     (sum_product([]) ==     (0, 1))\nassert     (sum_product([0, 1, 2, 3]) ==     (6, 24))\nassert     (sum_product([0]) ==     (0, 1))\nassert     (sum_product([-1, -2, -3]) ==     (-6, -6))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([-1, 1, 0, -2, -3]) == (0, -6)\nassert     sum_product([0, 1, -2, 3, -4, 5]) == (0, 0)\n\n\ndef find_position(seq: List[int], number: int) -> int:\n    \"\"\" Find a position of a number in a sequence of integers.\n    If the number is not in the list return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rolling_max([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 2, 3, 4]\nassert     rolling_max([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert     rolling_max([1, 0, 1, 0, 1]) == [1, 0, 1, 0, 1]\nassert     rolling_max([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 2, 3, 4]\n\n\ndef is_valid_move(move: Tuple[int, int], size: int) -> bool:\n    \"\"\" Check if a given move (x, y) is valid on a given size of matrix\n    \"\"\"\n    return 0 <= move[0] < size and 0 <= move[1] < size\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef check_rolling_max(sequence: List[int], expected_max_values: List[int], num_of_rollings: int) -> None:\n    \"\"\"Helper function to check the correctness of rolling_max.\n    It should produce the same result for the same input sequence as long as the rolling_max runs for\n    the exact same number of times.\n    \"\"\"\n    max_values = rolling_max(sequence, num_of_rollings)\n    assert max_values == expected_max_values\n\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [7, 8, 9, 10, 11, 12, 13, 14]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 7, 8]) == [8, 9, 10, 11, 12, 13, 14, 15, 16]\nassert     rolling_max([1, 1, 1, 1]) == [1, 1, 1, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [7, 8, 9, 10, 11, 12, 13, 14]\nassert     rolling_max([]) == []\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [0,1,2,3,4,5,6,7,8,9] == rolling_max(\n        [9,8,7,6,5,4,3,2,1,0])\nassert     [0,1,2,3,4,5,6,7,8,9] == rolling_max(\n        [9,8,7,6,5,4,3,2,1,0,0,0,0,0,0])\nassert     [0,1,2,3,4,5,6,7,8,9,0,0,0,0,0] == rolling_max(\n        [9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0])\nassert     [0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0] == rolling_max(\n        [9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])\nassert     [0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] == rolling_max(\n        [9,8,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rolling_max([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert     rolling_max([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert     rolling_max([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert     rolling_max([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert     rolling_max([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rolling_max([])             == []\nassert     rolling_max([1])             == [1]\nassert     rolling_max([1, 2])         == [1, 2]\nassert     rolling_max([1, 2, 3])     == [1, 2, 3]\nassert     rolling_max([1, 2, 3, 4])    == [1, 2, 3, 4]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rolling_max([4, 6, 3, 1, 9, 9, 5, 8, 9, 8, 5, 5, 4, 2]) == [4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\nassert     rolling_max([1, 4, 3, 1, 9, 9, 5, 8, 9, 8, 5, 5, 4, 2]) == [1, 4, 3, 1, 9, 9, 5, 8, 9, 8, 5, 5, 4, 2]\nassert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1, 4]) == [1, 4]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rolling_max([1, 5, 3, 2, 6, 4]) == [1, 6, 6, 6, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([]) == []\nassert     rolling_max([5, 6, 7, 8, 9, 10]) == [5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9]\nassert     rolling_max([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9, 10]\nassert     rolling_max([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9, 10]\nassert     rolling_max([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rolling_max([5,6,1,7,8,4,9])         == [5,6,1,7,8,4,9]\nassert     rolling_max([5,6,1,7,8,4,9,3,2,1])     == [5,6,1,7,8,4,9,3,2,1]\nassert     rolling_max([5,6,1,7,8,4,9,3,2,1,0])     == [5,6,1,7,8,4,9,3,2,1,0]\nassert     rolling_max([5,6,1,7,8,4,9,3,2,1,0,1,2,3,4,5,6,7,8,9])     == [5,6,1,7,8,4,9,3,2,1,0,1,2,3,4,5,6,7,8,9]\nassert     rolling_max([5,6,1,7,8,4,9,3,2,1,0,1,2,3,4,5,6,7,8,9,10])     == [5,6,1,7,8,4,9,3,2,1,0,1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_palindrome('tacocat') == 'tacocat'\nassert     make_palindrome('cat') == 'tacocat'\nassert     make_palindrome('catnip') == 'catnip'\nassert     make_palindrome('c') == 'c'\nassert     make_palindrome('cat') == 'cat'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     make_palindrome(\"test\") == \"ttset\"\nassert     make_palindrome(\"motor\") == \"motorr\"\nassert     make_palindrome(\"motorized\") == \"motorized\"\nassert     make_palindrome(\"motorize\") == \"motorize\"\nassert     make_palindrome(\"motorize\") == \"motorize\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     make_palindrome('racecar') == 'racecar'\nassert     make_palindrome('nt') == 'nt'\nassert     make_palindrome('foo') == 'foo'\nassert     make_palindrome('a') == 'a'\nassert     make_palindrome('bar') == 'bar'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_palindrome('babab') == 'baba'\nassert     make_palindrome('banana') == 'ananab'\nassert     make_palindrome('bananab') == 'anana'\nassert     make_palindrome('babbabbabab') == 'babbababababa'\nassert     make_palindrome('babbababababab') == 'babbabababab'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_palindrome('python') == 'onoptn'\nassert     make_palindrome('go') == 'doog'\nassert     make_palindrome('ala') == 'alabala'\nassert     make_palindrome('sdfsdf') == 'dsfsdfsdf'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_palindrome('tacocat') == 'tacocat'\nassert     make_palindrome('cat') == 'cat'\nassert     make_palindrome('crocodile') == 'crocodile'\nassert     make_palindrome('tomato') == 'tomato'\nassert     make_palindrome('california') == 'california'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_palindrome('racecar') == 'racecarracecar'\nassert     make_palindrome('noon') == 'noonnoon'\nassert     make_palindrome('phantom') == 'phantomphanphantom'\nassert     make_palindrome('flipped') == 'flipped'\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[:i][::-1] + string[i:]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_palindrome(\"civic\") == 'ivicc'\nassert     make_palindrome(\"Civic\") == 'ivicC'\nassert     make_palindrome(\"civic\") == 'ivicc'\nassert     make_palindrome(\"Civic\") == 'ivicC'\nassert     make_palindrome(\"CIVIC\") == 'ivicC'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"cat\") == \"atc\"\nassert     make_palindrome(\"are\") == \"era\"\nassert     make_palindrome(\"aardvark\") == \"aardvark\"\nassert     make_palindrome(\"ab\") == \"ab\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_palindrome(\"racecar\") == \"racecarracecar\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"aaa\") == \"aaaaaa\"\nassert     make_palindrome(\"abcdef\") == \"abcdefabcdef\"\nassert     make_palindrome(\"abcdefabcdef\") == \"abcdefabcdefabcdef\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_xor(\"0101010\", \"0110101\") == \"0\"\nassert     string_xor(\"1010101\", \"0101010\") == \"1\"\nassert     string_xor(\"0000001\", \"1000000\") == \"1000000\"\nassert     string_xor(\"1000001\", \"0010000\") == \"1000001\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         string_xor('00111000', '00110110')     == '01101110'\nassert         string_xor('00111000', '00110000')     == '01101001'\nassert         string_xor('00111000', '00111001')     == '00100010'\nassert         string_xor('00110000', '00111010')     == '00100100'\nassert         string_xor('00111010', '00110000')     == '01101001'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_xor(\"0\", \"0\") == \"0\"\nassert     string_xor(\"0\", \"1\") == \"1\"\nassert     string_xor(\"1\", \"0\") == \"1\"\nassert     string_xor(\"1\", \"1\") == \"0\"\n\ndef find_single_bits(n: int) -> List[int]:\n    \"\"\"Given an integer n, find all indices i such that n & (n-1) is 0.\n    \n    >>> find_single_bits(0b10101010)\n    [1, 6, 10, 15]\n    >>> find_single_bits(0b10001000)\n    [0, 5, 9, 14]\n    >>> find_single_bits(0b11111111)\n    [7, 15]\n    \"\"\"\n    res = []\n    i = 0\n    while n & 1:\n        res.append(i)\n        n >>= 1\n        i += 1\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_xor(a='0110001', \n                    b='1010101') ==     '0110011'\nassert     string_xor(a='1010101', \n                    b='0110101') ==     '0010011'\nassert     string_xor(a='01010101', \n                    b='1010101') ==     '0010111'\nassert     string_xor(a='01010101', \n                    b='01010101') ==     '00000000'\nassert     string_xor(a='00000101', \n                    b='1010101') ==     '00001101'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_xor(\"00110011\", \"01000111\") == \"01010110\"\nassert     string_xor(\"11111111\", \"00000000\") == \"01011010\"\nassert     string_xor(\"00000000\", \"11111111\") == \"01011010\"\nassert     string_xor(\"10101010\", \"10110011\") == \"00000001\"\nassert     string_xor(\"01010101\", \"01000101\") == \"00101010\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_xor('1010', '1011') == '0101'\nassert     string_xor('1010', '1001') == '0101'\nassert     string_xor('1011', '1010') == '0101'\nassert     string_xor('1001', '1010') == '0101'\nassert     string_xor('0101', '1010') == '1001'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_xor('1101', '1100') == '0101'\nassert     string_xor('1010', '1010') == '0000'\nassert     string_xor('0011', '0011') == '0000'\nassert     string_xor('1010101', '01010101') == '00000101'\n\n\ndef string_solution(s1: str, s2: str) -> str:\n    \"\"\" Return a string that is made up of the characters in s1 that are not in s2.\n    \"\"\"\n    s1_list = [i for i in s1]\n    s2_list = [i for i in s2]\n    for i in s1_list:\n        if i in s2_list:\n            s2_list.remove(i)\n    s3 = ''.join(s2_list)\n    return s3\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_xor
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_xor('10101', '10010') == '01110'\nassert     string_xor('11111', '10101') == '01010'\nassert     string_xor('10111', '10110') == '00001'\nassert     string_xor('10101', '11010') == '01110'\nassert     string_xor('00001', '10101') == '11010'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     longest([\"abc\", \"bb\"]) == \"bb\"\nassert     longest([\"aaa\", \"bbb\", \"c\"]) == \"c\"\nassert     longest([]) == None\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == None\nassert     longest([\"a\", \"bb\", \"ccc\"]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     longest([\"ABC\", \"XYZ\", \"AB\", \"CD\", \"EF\", \"GH\", \"IJ\", \"KL\", \"MN\", \"OP\", \"PQ\", \"RS\", \"TU\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"ABC\"\nassert     longest([\"ABC\", \"XYZ\", \"AB\", \"CD\", \"EF\", \"GH\", \"IJ\", \"KL\", \"MN\", \"OP\", \"PQ\", \"R\", \"S\", \"TU\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"ABC\"\nassert     longest([\"ABC\", \"XYZ\", \"AB\", \"CD\", \"EF\", \"GH\", \"IJ\", \"KL\", \"MN\", \"OP\", \"PQ\", \"R\", \"S\", \"TU\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"ABC\"\nassert     longest([\"ABC\", \"XYZ\", \"AB\", \"CD\", \"EF\", \"GH\", \"IJ\", \"KL\", \"MN\", \"OP\", \"PQ\", \"R\", \"S\", \"TU\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"ABC\"\nassert     longest([\"ABC\", \"XYZ\", \"AB\", \"CD\", \"EF\", \"GH\", \"IJ\", \"KL\", \"MN\", \"OP\", \"PQ\", \"R\", \"S\", \"TU\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]) == \"ABC\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     longest(['a', 'b', 'c', 'd', 'e', 'f']) == 'f'\nassert     longest(['abc', 'bdf', 'af', 'a', 'b', 'c', 'd']) == 'a'\nassert     longest([]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     longest(['a', 'b', 'c']) == 'a'\nassert     longest(['a', 'b', 'c', 'ab']) == 'ab'\nassert     longest(['a', 'ab', 'ab', 'ab']) == 'ab'\nassert     longest([]) is None\nassert     longest(['a', 'b', 'c'], 'd') == 'a'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     longest([\"abc\", \"a\"]) == \"a\"\nassert     longest([\"a\", \"abc\", \"ab\"]) == \"abc\"\nassert     longest([\"abc\", \"ab\", \"abcd\"]) == \"abc\"\nassert     longest([\"abcd\", \"abc\", \"ab\", \"abcd\"]) == \"abcd\"\nassert     longest([\"abc\", \"ab\", \"abcd\", \"a\"]) == \"abc\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     longest([]) is None\nassert     longest(['aa', 'bb', 'cc']) == 'cc'\nassert     longest(['aa', 'bb', 'cc', 'dd', 'ee']) == 'dd'\nassert     longest(['aa', 'bb', 'cc', 'dd', 'ee', 'ff']) == 'ff'\nassert     longest(['aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg']) == 'ff'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     longest([\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"a\"]) == \"abcdef\"\nassert     longest([\"a\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"a\"]) == \"abcdef\"\nassert     longest([]) is None\nassert     longest([\"\", \"a\"]) is None\nassert     longest([\"a\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"a\"]) == \"abcdef\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     longest([\"abc\", \"ab\", \"abcdef\"]) == \"abcd\"\nassert     longest([\"abc\", \"abcdef\"]) == \"abc\"\nassert     longest([]) is None\n\ndef longest2(strings: List[str]) -> Optional[str]:\n    \"\"\" More efficient. Return the first element in case of multiple elements of same length, otherwise return the\n    first element. Return None in case the input list is empty.\n    \"\"\"\n    first = None\n    for string in strings:\n        if first is None or len(string) > len(first):\n            first = string\n    return first\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     longest(['s','s']) =='s'\nassert longest(['s','s','s']) =='s'\nassert longest(['s','s','s','s']) =='s'\nassert longest(['s','s','s','s','s']) =='s'\nassert longest(['s','s','s','s','s','s']) =='s'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     longest([\"qwerty\", \"qwe\", \"wxyz\", \"zaa\"]) == \"wxyz\"\nassert     longest([\"bdf\", \"\", \"ghj\", \"bcd\"]) == \"bcd\"\nassert     longest([\"\", \"\", \"\", \"\"]) == None\nassert     longest([\"a\", \"\"]) == \"a\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(6, 8) == 2\nassert     greatest_common_divisor(5, 6) == 1\nassert     greatest_common_divisor(6, 9) == 3\nassert     greatest_common_divisor(9, 6) == 3\nassert     greatest_common_divisor(5, 5) == 5\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(1, 10) == 1\nassert     greatest_common_divisor(10, 1) == 10\nassert     greatest_common_divisor(5, 0) == 5\nassert     greatest_common_divisor(0, 0) == 0\nassert     greatest_common_divisor(2, 3) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(10, 25) == 5\nassert     greatest_common_divisor(100, 100) == 100\nassert     greatest_common_divisor(100, 11) == 1\nassert     greatest_common_divisor(10, 0) == 0\nassert     greatest_common_divisor(0, 0) == 0\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(1,1) == 1\nassert     greatest_common_divisor(2,1) == 2\nassert     greatest_common_divisor(1,2) == 1\nassert     greatest_common_divisor(2,2) == 2\nassert     greatest_common_divisor(12,4) == 4\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(6, 4) == 2\nassert     greatest_common_divisor(42, 21) == 7\nassert     greatest_common_divisor(5, 9) == 3\nassert     greatest_common_divisor(0, 0) == 0\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return least common multiple of two integers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ___________ == greatest_common_divisor(a, b)\n\ndef lowest_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the lowest common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert ___________ == greatest_common_divisor(4, 8)\nassert ___________ == greatest_common_divisor(8, 4)\nassert ___________ == greatest_common_divisor(8, 8)\nassert ___________ == greatest_common_divisor(9, 3)\nassert ___________ == greatest_common_divisor(12, 10)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert __________ == greatest_common_divisor(7, 21)\nassert __________ == greatest_common_divisor(10, 8)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(1, 1) == 1\nassert     greatest_common_divisor(2, 1) == 1\nassert     greatest_common_divisor(10, 4) == 4\nassert     greatest_common_divisor(100, 25) == 25\nassert     greatest_common_divisor(10, 8) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert _______________ == greatest_common_divisor(a, b)\n\ndef key_partition(lst: list, key) -> list:\n    \"\"\" Return a copy of the list lst with the items of lst separated into two lists, where the items in lst\n    belonging to the first list are all smaller or equal to key, and the items in lst belonging to the second\n    list are all larger than key.\n    Example:\n        key_partition([1,3,2,4,5,6], 3)\n        return [1, 2, 3, 4, 5, 6]\n        key_partition([1,3,2,4,5,6], 4)\n        return [[1, 2], [3, 4, 5, 6]]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"ab\")     ==     [\"\", \"a\", \"ab\", \"aba\", \"abab\"]\nassert     all_prefixes(\"a\")     ==     [\"\", \"a\"]\nassert     all_prefixes(\"aa\")     ==     [\"\", \"aa\"]\nassert     all_prefixes(\"aba\")     ==     [\"\", \"aba\"]\nassert     all_prefixes(\"abc\")     ==     [\"\", \"abc\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_prefixes('cat') == ['cat', 'c', '', 'ca', 'caa', 'cab', 'cba', 'cbaa', 'cbb', 'cbaa', 'cbbb']\nassert     all_prefixes('dog') == ['dog', 'd', '', 'do', 'doa', 'dob', 'doc', 'doca', 'docb', 'doca', 'docb', 'doca', 'docb', 'doca', 'docb']\nassert     all_prefixes('goat') == ['goat', 'g', '', 'go', 'goa', 'gob', 'goc', 'goca', 'gocb', 'goca', 'gocb', 'goca', 'gocb', 'goca', 'gocb', 'goca', 'gocb', 'goca', 'gocb', 'goca', 'gocb', 'goca', 'gocb']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from longest to shortest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_prefixes('abracadabra') == ['abra', 'abrac', 'abracad', 'abracadab', 'abracadabra']\nassert     all_prefixes('assdfkakc') == ['assd', 'assdf', 'assdfk', 'assdfkak', 'assdfkakc']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"de\") == [\"d\", \"de\"]\nassert all_prefixes(\"de l\") == [\"d\", \"de\", \"dl\"]\nassert all_prefixes(\"de l ow\") == [\"d\", \"de\", \"dl\", \"de l\", \"dl ow\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"dog\") == [\"d\", \"do\", \"dog\"]\nassert     all_prefixes(\"house\") == [\"h\", \"ho\", \"house\"]\nassert     all_prefixes(\"sky\") == [\"s\", \"sk\", \"sk\", \"y\"]\nassert     all_prefixes(\"coding\") == [\"c\", \"co\", \"cod\", \"coding\"]\nassert     all_prefixes(\"helicopter\") == [\"h\", \"he\", \"hep\", \"helic\", \"hel\", \"helic\", \"het\", \"he\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"abc\") == ['', 'a', 'ab', 'abc']\nassert     all_prefixes(\"ab\") == ['', 'a', 'ab']\nassert     all_prefixes(\"abcdef\") == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\nassert     all_prefixes(\"abcde\") == ['', 'a', 'ab', 'abc', 'abcd', 'abcde']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from longest to shortest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_prefixes(\"thisisatest\")         == ['t', 'th', 'tha', 'that', 'thi', 'this']\nassert     all_prefixes(\"hey\")                 == ['h', 'he', 'hey']\nassert     all_prefixes(\"thisistest\")         == ['t', 'th', 'tha', 'that', 'thi', 'this', 'test']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_prefixes('abracadabra') == ['a', 'ab', 'aba', 'abrac', 'abracad', 'abracadab', 'abracadabra']\nassert     all_prefixes('dog') == ['d', 'do', 'dg', 'dog']\nassert     all_prefixes('cat') == ['c', 'ca', 'cat']\nassert     all_prefixes('bifidoob') == ['bif', 'bi', 'bifido', 'bifidoob']\nassert     all_prefixes('obifidocifadiofiodiofiodiofiodiofiodiof') == ['o', 'obif', 'obifid', 'obifidoc', 'obifidio', 'obifidiof', 'obifidiofiod', 'obifidiofiodio', 'obifidiofiodiof', 'obifidiofiodiofiod', 'obifidiofiodiofiodio', 'obifidiofiodiofiodiof', 'obifidiofiodiofiodiofiod', 'obifidiofiodiofiodiofiodio', 'obifidiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof', 'obifidiofiodiofiodiofiodiofiodiofiodiofiodiof']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_prefixes('abracadabra') == [\n            'abra', 'abra', 'abra', 'abra', 'abra', 'abra', 'abra', 'abra', 'abra', 'abra', 'abra', 'abra'\n        ]\nassert     all_prefixes('shania') == [\n            'shnia','shi','shia','shian','shia','shian','shian','shian','shian','shian','shian','shian'\n        ]\nassert     all_prefixes('whitehouse') == [\n            'whte', 'white', 'whiteh', 'whiteha', 'whitehas', 'whitehouse', 'whiteha', 'whitehas', 'whitehas', 'whitehas', 'whitehouse', 'whiteha'\n        ]\n\ndef count_vowels(string: str) -> int:\n    \"\"\"Return the number of vowels in the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         all_prefixes(\"dog\") ==         [\"dog\", \"d\", \"\", \"do\", \"\", \"\"]\nassert         all_prefixes(\"cat\") ==         [\"cat\", \"ca\", \"\", \"c\", \"\", \"\"]\nassert         all_prefixes(\"catapult\") ==     [\"catapult\", \"catap\", \"catp\", \"catap\", \"catp\", \"catap\", \"cat\", \"\", \"\"]\nassert         all_prefixes(\"banana\") ==     [\"\", \"b\", \"ba\", \"ba\", \"ban\", \"ban\", \"ban\", \"b\", \"\", \"\"]\nassert         all_prefixes(\"c\") ==         [\"\", \"c\", \"\", \"c\", \"\", \"\", \"\", \"\", \"\", \"\"]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_sequence(2) == \"0 1\"\nassert string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(6) == \"0 1 2 3 4 5\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_sequence(4)    ==    '0 1 2 3'\nassert     string_sequence(5)    ==    '0 1 2 3 4'\nassert     string_sequence(10)    ==    '0 1 2 3 4 5 6 7 8 9'\n\n\ndef get_max_substring_with_k_distinct(s: str, k: int) -> str:\n    \"\"\"\n    Return the maximum substring of s with at most k distinct characters.\n    If there are multiple such substrings with the same length, return the substring which occurs first in s.\n    If there is no such substring, return the empty string \"\".\n    \n    For example, given s = \"araaci\", k = 2,\n    your function should return \"araa\". \n    Given s = \"cbbebi\", k = 3, your function should return \"beb\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert ___________ == string_sequence(10)\n\ndef ackermann(m, n):\n    \"\"\" Ackermann function is the number of ways of splitting m by n parts.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert _________ == string_sequence(10)\n\ndef int_to_string(n: int) -> str:\n    \"\"\" Convert the given non-negative integer to its string representation.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_sequence(0)    == \"\"\nassert     string_sequence(1)    == \"0 \"\nassert     string_sequence(5)    == \"0 1 2 3 4 \"\nassert     string_sequence(10)    == \"0 1 2 3 4 5 6 7 8 9 10 \"\nassert     string_sequence(15)    == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(100) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(3) == '0 1 2'\nassert     string_sequence(4) == '0 1 2 3'\nassert     string_sequence(5) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\nassert     string_sequence(15) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\nassert     string_sequence(16) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\nassert     string_sequence(20) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         string_sequence(5) == \"0 1 2 3 4\"\nassert         string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert         string_sequence(1) == \"0\"\nassert         string_sequence(0) == \"\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(string_sequence(5))"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"Are you sleeping, are you sleeping, are you sleeping? Wake up, go to work\") == 7\nassert     count_distinct_characters(\"Hello\") == 1\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"Are you sleeping, are you sleeping, are you sleeping? Wake up, go to work\") == 7\nassert     count_distinct_characters(\"A\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"ababcd\") == 4\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"ABC\") == 1\nassert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"a\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"i\") == 1\nassert     count_distinct_characters(\"JAN\") == 1\nassert     count_distinct_characters(\"aBcD\") == 2\nassert     count_distinct_characters(\"HeLLo\") == 5\nassert     count_distinct_characters(\"This is a sentence with no non alphanumeric characters\") == 5\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('x') == 1\nassert     count_distinct_characters('X') == 1\nassert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('ABc') == 2\nassert     count_distinct_characters('Abc') == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         count_distinct_characters(\"\")        == 0\nassert         count_distinct_characters(\"a\")        == 1\nassert         count_distinct_characters(\"a\"*15)    == 16\nassert         count_distinct_characters(\"a\"*16)    == 17\nassert         count_distinct_characters(\"a\"*17)    == 17\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"the quick brown fox jumps over the lazy dog\") == 7\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"aa\") == 1\nassert     count_distinct_characters(\"zz\") == 1\nassert     count_distinct_characters(\"abccccddddddde\") == 9\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_distinct_characters(\"awesome\") == 6\nassert     count_distinct_characters(\"ANothEr\") == 7\nassert     count_distinct_characters(\"ANothEr1\") == 7\nassert     count_distinct_characters(\"_\") == 1\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_distinct_characters('') == 0\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('aBB') == 2\nassert     count_distinct_characters('aBb') == 2\nassert     count_distinct_characters('aaBBBbbBBBBBBBBBBB') == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_distinct_characters(\"abc\") == 1\nassert     count_distinct_characters(\"abC\") == 1\nassert     count_distinct_characters(\"aBC\") == 1\nassert     count_distinct_characters(\"ABc\") == 1\nassert     count_distinct_characters(\"aBc\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"String\") == 26\nassert     count_distinct_characters(\"string\") == 26\nassert     count_distinct_characters(\"sTRING\") == 26\nassert     count_distinct_characters(\"string. It's a string. A string is a type of data.\") == 29\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_music('o') == [4]\nassert     parse_music('o|') == [2]\nassert     parse_music('o.|') == [1]\nassert     parse_music('o|.|') == [1, 1]\nassert     parse_music('o.|.|') == [1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_music('o|o|o') == [4, 4, 4]\nassert     parse_music('o|o|o|o') == [4, 4, 4, 4]\nassert     parse_music('o|o|o|o|o') == [4, 4, 4, 4, 4]\nassert     parse_music('o|o|o|o|o|o') == [4, 4, 4, 4, 4, 4]\nassert     parse_music('o|o|o|o|o|o|o') == [4, 4, 4, 4, 4, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_music( 'o o | o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o self.\n    assert     parse_music( 'o o | o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d "
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_music('o') == [4]\nassert     parse_music('o|') == [2, 2]\nassert     parse_music('.|') == [1, 1]\nassert     parse_music('o.|.|.|') == [4, 2, 1, 1]\nassert     parse_music('o.o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_music('o') == [4]\nassert     parse_music('o|') == [2]\nassert     parse_music('o|o') == [2]\nassert     parse_music('o|o|o') == [1]\nassert     parse_music('o|o|o|o|o') == [1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_music('o.o|o|.o|o.o') == [4, 4, 2, 2]\nassert     parse_music('o.o.o|o|o.o.o') == [4, 8, 8, 4]\nassert     parse_music('o.o.o|o|o.o.o') == [4, 8, 8, 4]\nassert     parse_music('o.o.o|o|o.o.o|o.o') == [4, 8, 8, 4, 4]\nassert     parse_music('o.o.o|o|o.o.o|o.o|o.o.o|o.o') == [4, 8, 8, 4, 4, 8]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_music('o') == [1, 2, 4, 1]\nassert     parse_music('o|') == [1, 2, 2, 1]\nassert     parse_music('.|') == [1, 1, 1, 1]\nassert     parse_music('o.o|') == [1, 3, 3, 1]\nassert     parse_music('o|o|o|o|o') == [1, 3, 2, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_music(\"1o2o|o\") == [4,2]\nassert     parse_music(\"1o2o|o|\") == [4,2]\nassert     parse_music(\"1o2o|o|.|\") == [4,2]\nassert     parse_music(\"1o2o|o|.|.|\") == [4,2]\nassert     parse_music(\"o|o|\") == [4,2]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_music(\"1234o45\") == [1, 2, 4, 5]\nassert     parse_music(\"1234o.|\") == [1, 2, 4, 5]\nassert     parse_music(\"1234o|.|\") == [1, 2, 4, 5]\nassert     parse_music(\"1234o|o|o|o|\") == [1, 2, 4, 5]\nassert     parse_music(\"12345o.|o|o|o|o|o|o|\") == [1, 2, 4, 5, 6, 8, 10]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_music(\"o   o .|. .o|o  . .o   o|.|o\") == [4,2,4,1,1,2,1,1]\nassert     parse_music(\"o   o   o|o   o   o|o|.|.   o  .o|.|o\") == [4,4,4,1,1,2,1,1]\nassert     parse_music(\"o   o   o|o   o   o|o|.|.   o  .o|.|o\") == [4,4,4,1,1,2,1,1]\nassert     parse_music(\"o   o   o|o   o   o|o|.|.   o  .o|.|o\") == [4,4,4,1,1,2,1,1]\nassert     parse_music(\"o   o   o|o   o   o|o|.|.   o  .o|.|o\") == [4,4,4,1,1,2,1,1]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     how_many_times('abcabcabc', 'abc') == 3\nassert     how_many_times('aababcaa', 'aab') == 2\nassert     how_many_times('abcabcabc', 'ab') == 1\nassert     how_many_times('abcabc', 'abc') == 0\nassert     how_many_times('ab', 'ab') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     how_many_times(\"I am the very model of a modern major-general\", \"modern\") == 1, \"One word\"\nassert     how_many_times(\"I am the very model of a modern major-general\", \"General\") == 2, \"One letter, one word\"\nassert     how_many_times(\"I am the very model of a modern major-general\", \"amodel\") == 2, \"Fuzzy match\"\nassert     how_many_times(\"I am the very model of a modern major-general\", \"major-gener\") == 0, \"Non-overlapping\"\n\ndef how_many_times_2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Don't count overlaping cases.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     how_many_times('attack at dawn', 'attack') == 2\nassert     how_many_times('attack at dawn', 'dawn') == 1\nassert     how_many_times('attack at dawn', 'ata') == 0\nassert     how_many_times('attack at dawn', 'at') == 2\nassert     how_many_times('attack at dawn', 'attack') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     how_many_times('abracadabra', 'abra') == 2\nassert     how_many_times('abracadabra', 'acad') == 1\nassert     how_many_times('abracadabra', 'brac') == 2\nassert     how_many_times('abracadabra', 'rac') == 2\nassert     how_many_times('abracadabra', 'ad') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     how_many_times(\"My name is maria\", \"name\") == 3\nassert     how_many_times(\"My name is maria\", \"mar\") == 1\nassert     how_many_times(\"My name is maria\", \"is\") == 1\nassert     how_many_times(\"My name is maria\", \"mari\") == 1\nassert     how_many_times(\"My name is maria\", \"n\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     how_many_times('BBC ABCDAB ABCDABCDABDE', 'ABCDABD') == 2, 'example #1'\nassert     how_many_times('BBC ABCDAB ABCDABCDABDE', 'ABCDABD') == 1, 'example #2'\nassert     how_many_times('BBC ABCDAB ABCDABCDABDE', 'ABCDABE') == 0, 'example #3'\nassert     how_many_times('BBC ABCDAB ABCDABCDABDE', 'ABCDABD') == None, 'example #4'\nassert     how_many_times('', 'ABCDAB') == 0, 'example #5'\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     how_many_times('Bob and Sue', 'Sue') == 1\nassert     how_many_times('How many times does it rain outside?', 'o') == 1\nassert     how_many_times('How many times does it rain outside?', '?') == 4\nassert     how_many_times('Hello world', 'o') == 0\nassert     how_many_times('', 'o') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     how_many_times(\"besss\", \"ss\") == 1\nassert     how_many_times(\"besss\", \"sss\") == 0\nassert     how_many_times(\"besss\", \"\") == 0\nassert     how_many_times(\"\", \"ss\") == 0\nassert     how_many_times(\"ssss\", \"ss\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     how_many_times('a a a b', 'a') == 3\nassert     how_many_times('a a a b', 'b') == 1\nassert     how_many_times('ab', 'a') == 0\nassert     how_many_times('ab', 'b') == 0\nassert     how_many_times('baaab', 'a') == 4\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     how_many_times('hello', 'l') == 1\nassert     how_many_times('hello', 'o') == 2\nassert     how_many_times('hello', 'll') == 2\nassert     how_many_times('hello', 'e') == 3\nassert     how_many_times('hello', 'll') == 2\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_numbers('two one') == '1 two'\nassert     sort_numbers('one two three') == '1 two 3'\nassert     sort_numbers('three one four five two') == '1 2 3 4 5 two'\nassert     sort_numbers('three one four five two six') == '1 2 3 4 5 6'\nassert     sort_numbers('zero one two three four five six seven eight nine') == '0 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"eight five one\") == \"one five eight\"\nassert     sort_numbers(\"two one\") == \"one two\"\nassert     sort_numbers(\"three two one\") == \"one two three\"\nassert     sort_numbers(\"nine two one\") == \"one two nine\"\n\n\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"one two three four five six seven eight nine\") == \"one two three four five six seven eight nine\"\nassert     sort_numbers(\"five four three two one\") == \"one two three four five\"\nassert     sort_numbers(\"nine eight seven six five four three two one\") == \"one two three four five six seven eight nine\"\nassert     sort_numbers(\"\") == \"\"\n\n\ndef int_to_english(num: int) -> str:\n    \"\"\" Input is an integer from 0 to 9999, a zero may not be counted as a zero-digit in the conversion.\n    Return the English number as a string, e.g. \"one thousand three hundred forty-four\" or \"eight hundred eighty-nine\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('two one three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('eight five four three two one zero') == 'one zero two three four five six seven eight'\nassert     sort_numbers('eight five four three two one zero three') == 'one zero two three four five six seven eight'\nassert     sort_numbers('eight five four three two one zero four') == 'one zero two three four five six seven eight'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_numbers('one four three two five six seven eight nine') == '123456789'\nassert     sort_numbers('zero one two three four five six seven eight nine') == '9876543210'\nassert     sort_numbers('one nine three eight five four two zero') == '0123456789'\nassert     sort_numbers('one nine three eight five four two zero one') == '0123456789'\nassert     sort_numbers('three one four nine three one four one nine four one one') == '13141516171819'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_numbers(\"one four seven three two five six eight nine five\")     == \"one four seven three two five six eight nine five\"\nassert     sort_numbers(\"one two three four five six seven eight nine zero\")     == \"one two three four five six seven eight nine zero\"\nassert     sort_numbers(\"two zero one two three four five six seven eight nine\")     == \"one two three four five six seven eight nine\"\nassert     sort_numbers(\"one two three four five six zero zero zero zero zero zero zero zero zero\")     == \"zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero\"\nassert     sort_numbers(\"zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zer"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\nassert     sort_numbers('five') == 'five'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_numbers('one zero two three four five six seven eight nine') == 'one zero two three four five six seven eight nine', \\\n        'incorrect sorting'\nassert     sort_numbers('nine nine two two one one three three four five six seven eight') == 'one zero two three four five six seven eight nine', \\\n        'incorrect sorting'\nassert     sort_numbers('two one five three three one three four three four three three four five three three two') == 'one zero two three four five six seven eight nine', \\\n        'incorrect sorting'\nassert     sort_numbers('one one two two three three four four four five five six seven eight nine') == 'one zero two three four five six seven eight nine', \\\n        'incorrect sorting'\nassert     sort_numbers('one one one two two one two one three three four four four five five four four five four four four four three three') == 'one zero two three four five six seven eight nine', \\\n        'incorrect sorting'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_numbers('zero nine two six three eight four five seven six five seven') =='six five seven zero nine two eight four five seven six three five one'\nassert sort_numbers('three four one zero one three two four five three') == 'one zero three three four four five three two'\nassert sort_numbers('eight three five four two two four one') == 'one two four three five four'\nassert sort_numbers('eight three five four two one four eight') == 'one four eight three five four'\nassert sort_numbers('three four two zero one zero three two one') == 'zero one zero three three four two'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('one two three four five six seven eight nine zero') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('seven three two one zero four five six eight nine') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('one two three four five six seven eight nine zero') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('two one zero three four five six seven eight nine') == 'one two three four five six seven eight nine zero'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_closest_elements([0, 1, 2, 3, 4, 5]) == (1.5, 4)\nassert     find_closest_elements([-1, 2, 3, 4, 5]) == (1.5, 4)\nassert     find_closest_elements([-5, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == (0.5, 10)\nassert     find_closest_elements([1, 1, 2, 3, 4, 5]) == (1.5, 4)\nassert     find_closest_elements([0.1, 0.9, 1.3, 1.5, 1.9, 2.1, 2.5, 2.9, 3.5, 4.1, 4.9, 5.5, 6.1, 6.9, 7.5, 8.1, 9.9, 10.5, 11.1, 12.9, 13.5, 14.1, 15.9, 16.5, 17.1, 18.9, 19.5, 20.1]) == (0.5, 10.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_closest_elements([-1.0, 2.0, 3.0]) == (2.0, -1.0)\nassert     find_closest_elements([0.0, 1.0, 2.0, 3.0]) == (1.0, 0.0)\nassert     find_closest_elements([-1.0, 2.0, 3.0, 4.0]) == (2.0, 3.0)\nassert     find_closest_elements([-1.0, 2.0, 3.0, 5.0]) == (2.0, 3.0)\nassert     find_closest_elements([-1.0, 2.0, 3.0, 5.0, 7.0]) == (2.0, 3.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (2, 3)\nassert     find_closest_elements([2, 4, 6, 8]) == (4, 6)\nassert     find_closest_elements([1, 1, 1, 1]) == (1, 1)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (2, 3)\nassert     find_closest_elements([-1, 2, 4, 6, 8, 10]) == (2, 8)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_closest_elements([5, 4, 3, 2, 1]) == (1, 2)\nassert     find_closest_elements([0, 1, 2, 3]) == (0, 3)\nassert     find_closest_elements([4, 3, 5, 7, 1]) == (4, 5)\nassert     find_closest_elements([2, 5, 6, 7, 1]) == (2, 5)\nassert     find_closest_elements([2, 5, 6, 7, 1, 1.2]) == (1.2, 7)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_closest_elements([2, 3, 4, 10, 40, 70, 50]) == (40, 70)\nassert     find_closest_elements([2, 3, 4, 10, 40, 70, 80]) == (40, 70)\nassert     find_closest_elements([2, 3, 4, 10, 40, 70, 90]) == (40, 70)\nassert     find_closest_elements([-10, -100, -99]) == (-99, -10)\nassert     find_closest_elements([2, 3, 4, 10, 40, 70]) == (10, 40)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_closest_elements([0.5, 0.5, -0.5, 0.5, 0.5]) == (-0.5, 0.5)\nassert     find_closest_elements([0.5, 0.5, -0.5, 0.5, -0.5]) == (-0.5, 0.5)\nassert     find_closest_elements([0.5, -0.5, 0.5, -0.5, 0.5]) == (-0.5, 0.5)\nassert     find_closest_elements([-0.5, 0.5, -0.5, 0.5, -0.5]) == (-0.5, 0.5)\nassert     find_closest_elements([0.5, -0.5, -0.5, -0.5, 0.5]) == (-0.5, 0.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_closest_elements([1.0, 2.0, 3.0, 4.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) == (1.0, 2.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_closest_elements([4, 7, 10, 11, 12, 17]) == (11, 12)\nassert     find_closest_elements([5, 6, 7, 8, 9]) == (8, 9)\nassert     find_closest_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 2)\nassert     find_closest_elements([0, 0]) == (0, 0)\nassert     find_closest_elements([1, 1, 1, 1]) == (1, 1)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (1, 1) == find_closest_elements([1, 1])\nassert     (-1, 1) == find_closest_elements([-1, 1])\nassert     (-1, -1) == find_closest_elements([-1, -1])\nassert     (3, -2) == find_closest_elements([3, -2])\nassert     (1, 2) == find_closest_elements([1, 2])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [find_closest_elements([1,2,3,5,6,7,9,13,14,15]) == (6,14)]\nassert     [find_closest_elements([1,1,1,1]) == (1,1)]\nassert     [find_closest_elements([-1,2,3,5,6,7,9,13,14,15]) == (7,9)]\nassert     [find_closest_elements([-1,-1,-1,-1]) == (-1,-1)]\nassert     [find_closest_elements([1,1,1,1,1,1,1]) == (1,1)]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([1, 0, -3, 4]) == [0, 0.5, 0, 1]\nassert     rescale_to_unit([1, -2, 0, -3, 4]) == [0, 0.25, 0, 0.5, 1]\nassert     rescale_to_unit([1, 0, 0, 0, 4]) == [0, 0.25, 0.5, 0.5, 1]\nassert     rescale_to_unit([1, -2, -2, -2, 4]) == [0, 0.125, 0.375, 0.5, 1]\nassert     rescale_to_unit([1, 2, 2, 2, 4]) == [0, 0.25, 0.5, 0.5, 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([-1.0, -0.5, 0.0, 0.5, 1.0]) == [0.0, 0.0, 0.0, 0.5, 1.0]\nassert     rescale_to_unit([-1.0, 0.5, 1.0]) == [0.0, 0.5, 1.0]\nassert     rescale_to_unit([-1.0, 0.5, 1.0, 2.0]) == [0.0, 0.5, 1.0, 1.0]\nassert     rescale_to_unit([-1.0, 1.0]) == [0.0, 1.0]\nassert     rescale_to_unit([-1.0, 1.0, 2.0]) == [0.0, 1.0, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([1]) == [0.0]\nassert     rescale_to_unit([2,3]) == [0.5,1.0]\nassert     rescale_to_unit([2,3,4]) == [0.25,0.5,0.75]\nassert     rescale_to_unit([2,3,4,5,6]) == [0.125,0.25,0.375,0.5,0.625]\nassert     rescale_to_unit([2,3,4,5,6,7]) == [0.0625,0.125,0.1875,0.25,0.3125,0.375]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1,2,3,4,5])    == [0,2/5,4/5,6/5,8/5]\nassert     rescale_to_unit([0,1,2,3,4])    == [0,1,2,3,4]\nassert     rescale_to_unit([1,1,1,1,1])    == [0,2/5,4/5,6/5,8/5]\nassert     rescale_to_unit([])    == []\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([0]) == [0]\nassert     rescale_to_unit([1]) == [1]\nassert     rescale_to_unit([0, 1]) == [0, 1]\nassert     rescale_to_unit([-1, 1]) == [0, 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([1.0, 3.5, 4.0])    == [0.0, 0.7, 1.0]\nassert     rescale_to_unit([1.0, 3.5, 4.0, 1.0])    == [0.0, 0.7, 1.0, 1.0]\nassert     rescale_to_unit([0.0])    == [0.0]\nassert     rescale_to_unit([0.0, 0.0])    == [0.0, 0.0]\nassert     rescale_to_unit([0.0, -1.0])    == [0.0, -1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0, 0.5, 1, 1.5]\nassert     rescale_to_unit([0.1, 0.2, 0.3, 0.4]) == [0, 0.1, 0.2, 0.3]\nassert     rescale_to_unit([-1.2, -0.3, 0.2, 0.5]) == [0, -0.2, 0.0, 0.5]\nassert     rescale_to_unit([0, 1, -1, 1]) == [0, 1, 0, 1]\nassert     rescale_to_unit([0.1, 0.2, 0.3, -0.4]) == [0.1, 0.2, 0.3, 0.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0.25, 0.5, 0.75, 1]\nassert     rescale_to_unit([-10, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5]\nassert     rescale_to_unit([-100, -50, -30, -10, 0, 10, 30, 50, 100]) == [0, 0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]\nassert     rescale_to_unit([0, 0, 0, 0, 0, 1, 1, 1, 1]) == [0, 0, 0, 0, 0, 1, 1, 1, 1]\nassert     rescale_to_unit([0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([0, 0, 0.5, 1, 1.5, 2]) == [0, 0, 0.5, 1, 1.5, 1]\nassert     rescale_to_unit([0, 0.5, 1, 1.5, 2]) == [0, 0.5, 1, 1.5, 1]\nassert     rescale_to_unit([0, 0, 0.5, 1, 1.5, 2, 2]) == [0, 0, 0.5, 1, 1.5, 1, 1]\nassert     rescale_to_unit([-2, -2, -2, -2, -2, -2]) == [0, 0, 0, 0, 0, 0]\n\n\ndef resample(numbers: List[float]) -> List[float]:\n    \"\"\" Return the input list with each number multiplied by a factor of 3, which is then\n    rounded to a whole number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([1.0]) == [1.0]\nassert     rescale_to_unit([-1.0, 1.0]) == [0.0, 1.0]\nassert     rescale_to_unit([1.0, -1.0]) == [0.0, 0.0]\nassert     rescale_to_unit([1.0, -1.0, 0.0]) == [0.0, 0.0, 0.0]\nassert     rescale_to_unit([1.0, -1.0, 0.0, 3.0]) == [0.0, 0.0, 0.0, 1.0]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_integers([1,2,3]) == [1,2,3]\nassert     filter_integers([-2,-1,0,1,2]) == [-2,-1,0,1,2]\nassert     filter_integers([1,2,'a']) == [1,2]\nassert     filter_integers(['a','b',0,2,'a']) == [0,2]\nassert     filter_integers(['a','b',0,2,'a',10.2]) == [0,2,10.2]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     isinstance(filter_integers([1, 2, 3, 4, 5, 6]), list)\nassert     isinstance(filter_integers([1, 2, '3', '4', '5', '6']), list)\nassert     isinstance(filter_integers(['1', 2, '3', '4', '5', '6']), list)\nassert     isinstance(filter_integers(['1', 2, 3, 4, 5, 6]), list)\nassert     isinstance(filter_integers(['1', '2', 3, 4, 5, 6]), list)\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, 'a', 3, 4, 5, 6])\nassert     [1, 2, 3, 4] == filter_integers([1, 2, 'a', 'a', 3, 4, 5])\nassert     [1, 2, 3] == filter_integers([1, 2, 'a', 3, 4, 'a', 6])\nassert     [] == filter_integers([])\nassert     [1, 2, 3] == filter_integers([1, 'a', 3])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_integers([1, 2, 3, \"test\", 'test', 'test', \"11\", \"11\", \"11\", '11', \"1\", \"1\", \"1\", \"2\"]) == [1, 2, 3, 11]\nassert     filter_integers([1, 2, 3, \"test\", 'test', 'test', \"11\", \"11\", \"11\", '11', \"1\", \"1\", \"1\", \"2\"]) == [1, 2, 3, 11]\nassert     filter_integers([1, \"test\", 'test', \"11\", \"11\", \"11\", \"1\", \"1\", \"1\", \"2\"]) == [1, 11]\nassert     filter_integers([1, 2, 3, \"test\", 'test', 'test', \"11\", \"11\", \"11\", '11', \"1\", \"1\", \"1\", \"2\"]) == [1, 2, 3, 11]\nassert     filter_integers([1, 2, 3, \"test\", 'test', 'test', \"11\", \"11\", \"11\", '11', \"1\", \"1\", \"1\", \"2\"]) == [1, 2, 3, 11]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_integers([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     filter_integers([1,\"2\",3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     filter_integers([1,2,3,4,5,\"6\",7,8,9]) == [1,2,3,4,5,\"6\",7,8,9]\nassert     filter_integers([1,\"2\",3,4,\"5\",6,7,8,9]) == [1,2,3,4,\"5\",6,7,8,9]\nassert     filter_integers([\"1\",2,3,4,\"5\",6,7,8,9]) == [\"1\",2,3,4,\"5\",6,7,8,9]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     filter_integers([1.1, 2.2, 3.3, 4.4, 5.5]) == [1, 2, 3, 4, 5]\nassert     filter_integers([\"a\", \"b\", \"c\", \"d\", \"e\"]) == []\nassert     filter_integers([]) == []\nassert     filter_integers([1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 'hello', 'world', '2020']) == [1, 2, 3, 4, 5, 6]\nassert     filter_integers([1, 2, 3, 4, 5, 'hello', 'world', '2020']) == [1, 2, 3, 4, 5]\nassert     filter_integers([1, 2, 3, 4, 5, 'hello', 'world', 2020]) == [1, 2, 3, 4, 5, 2020]\nassert     filter_integers(['1', 2, 3, 4, 5, 'hello', 'world', 2020]) == [1, 2, 3, 4, 5, 2020]\nassert     filter_integers(['1', '2', '3', '4', '5', 'hello', 'world', 2020]) == [1, '2', '3', '4', '5', 2020]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n    # >>> from random import randrange\n    # >>> lst = [randrange(-1000, 1000) for i in range(1000)]\n    # >>> # sorted_lst = sorted(lst)\n    # >>> sorted_lst = lst\n    # >>> # print(lst)\n    # >>> print(sorted_lst)\n    # >>> filtered_lst = filter_integers(lst)\n    # >>> # print(filtered_lst)\n    # >>> print(sorted_lst)\n    # >>> assert sorted_lst == filtered_lst\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_integers([1, 2, 'a', 3]) == []\nassert     filter_integers([1, 2, 3, 4, 5]) == []\nassert     filter_integers(['1', 2, 'a', 3]) == []\nassert     filter_integers([1, 2, 'a', 3, 'a']) == [1, 2, 3]\nassert     filter_integers([1, 2, 'a', 3, 1, 2]) == [1, 2]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([0]) == [0]\nassert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([0, 1, 2, 3]) == [0, 1, 2, 3]\nassert     filter_integers([1, 0, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strlen('peter') == len('peter')\nassert     strlen('pi') == len('pi')\nassert     strlen('and') == len('and')\nassert     strlen('hello') == len('hello')\nassert     strlen('peter') == len('peter')\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     strlen('a')        == 1\nassert     strlen('abc')    == 3\nassert     strlen('abcdef') == 6\nassert     strlen('abcdefgh') == 12\nassert     strlen('abcdefghij') == 18\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"abc\") == 3\nassert     strlen(\"aaa\") == 3\nassert     strlen(\"aaa  \") == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strlen('abc') == 3\nassert     strlen('\\0') == 1\nassert     strlen('abc\\0') == 3\nassert     strlen('abc\\0def') == 5\nassert     strlen('abc\\0def\\0ghi') == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         strlen(\"1\") == 1\nassert         strlen(\"12\") == 2\nassert         strlen(\"123\") == 3\nassert         strlen(\"1234\") == 4\nassert         strlen(\"12345\") == 5\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('hello') == 5\nassert     strlen('Hello') == 5\nassert     strlen('HELlo') == 5\nassert     strlen('HELlo') == 5\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     strlen(\"hello\") == 5\nassert     strlen(\"This is a test.\") == 11\nassert     strlen(\"1\") == 1\nassert     strlen(\"\") == 0\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     strlen('') == 0\nassert     strlen('abc') == 3\nassert     strlen('abcde') == 5\nassert     strlen('\\t') == 1\nassert     strlen('abcde\\t') == 5\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         strlen('abcd') == 4\nassert         strlen('x') == 1\nassert         strlen(' ') == 1\nassert         strlen('hello world') == 12\nassert         strlen('hello world') == 12\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strlen('abcd')    == 4\nassert     strlen('abcde')    == 5\nassert     strlen('x')    == 1\nassert     strlen('a')    == 1\n\nprint('all tests passed')"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     5==largest_divisor(10)\nassert     1==largest_divisor(100)\nassert     25==largest_divisor(125)\nassert     27==largest_divisor(129)\nassert     27==largest_divisor(270)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_divisor(2) == 1\nassert     largest_divisor(6) == 3\nassert     largest_divisor(12) == 3\nassert     largest_divisor(24) == 3\nassert     largest_divisor(3) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_divisor(0) == 1\nassert     largest_divisor(10) == 2\nassert     largest_divisor(12) == 6\nassert     largest_divisor(25) == 5\nassert     largest_divisor(30) == 10\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     16 == largest_divisor(16)\nassert     1 == largest_divisor(1)\nassert     18 == largest_divisor(18)\nassert     3 == largest_divisor(9)\nassert     4 == largest_divisor(25)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_divisor(15) == 3\nassert     largest_divisor(3) == 1\nassert     largest_divisor(7) == 7\nassert     largest_divisor(21) == 7\nassert     largest_divisor(15) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_divisor(4) == 2\nassert     largest_divisor(9) == 3\nassert     largest_divisor(7) == 1\nassert     largest_divisor(12) == 4\nassert     largest_divisor(25) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_divisor(25) == 5\nassert     largest_divisor(12) == 3\nassert     largest_divisor(8) == 2\nassert     largest_divisor(9) == 3\nassert     largest_divisor(11) == 11\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     1 == largest_divisor(1)\nassert    2 == largest_divisor(2)\nassert     3 == largest_divisor(3)\nassert     9 == largest_divisor(9)\nassert    27 == largest_divisor(27)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 2\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(5) == 1\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [2, 3, 5, 7, 11] == factorize(105)\nassert     [2, 3, 5, 7, 11] == factorize(123456789)\nassert     [2, 3, 5, 7, 11] == factorize(12345678910)\nassert     [2, 3, 5, 7, 11] == factorize(1234567891011121314151617181920)\nassert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] == factorize(12345678910111213141516171819202930)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(4) == [2, 2]\nassert     factorize(6) == [2, 3]\nassert     factorize(12) == [2, 2, 3]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(10) == [2, 5]\nassert     factorize(25) == [5, 5]\nassert     factorize(50) == [2, 5, 5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [2, 2, 2, 3, 3, 5]     == factorize(6)\nassert     [2, 2, 2, 3, 3, 5, 5]     == factorize(10)\nassert     [2, 2, 5, 17, 17]     == factorize(35)\nassert     [2, 17, 17, 17, 17, 17] == factorize(1)\nassert     [2, 2, 3, 3, 3, 3]     == factorize(9)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     factorize(10) == [2, 5]\nassert     factorize(100) == [2, 2, 5]\nassert     factorize(101) == [2, 5]\nassert     factorize(54) == [2, 3, 3]\nassert     factorize(70) == [7]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     factorize(28) == [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     factorize(4) == [2, 2]\nassert     factorize(12) == [2, 2, 3]\nassert     factorize(600) == [2, 2, 2, 3, 5]\nassert     factorize(1000) == [2, 2, 5]\n\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2,2]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     factorize(15)     == [3, 5]\nassert     factorize(60)     == [2, 2, 3]\nassert     factorize(25)     == [5]\nassert     factorize(100)    == [2, 5, 5]\nassert     factorize(101)    == [1]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(10) == [2,5]\nassert     factorize(50) == [2,2,5]\nassert     factorize(100) == [2,5,5]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4, 4, 5] == remove_duplicates([1, 2, 3, 4, 5, 4])\nassert     [1, 2, 3, 4, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 4, 5] == remove_duplicates([5, 4, 1, 2, 3, 4])\nassert     [1, 2, 3, 4, 4, 5] == remove_duplicates([5, 4, 1, 2, 3, 4])\nassert     [1, 2, 3, 4, 4, 5] == remove_duplicates([5, 4, 1, 2, 3, 4, 5])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1, 2, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 3, 3, 3, 3, 3]) == [1, 2, 3, 3, 3]\n\n\ndef three_sum(nums: List[int], target: int) -> List[List[int]]:\n    \"\"\" Find all unique triplets in the array whose sum is equal to the target.\n    Returns the list of all triplets in the form of a two-dimensional array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1,2,3,4,5,6]     == remove_duplicates([1,2,3,4,5,6,1,2,3,4,5,6])\nassert     [1,2,3,4,5]     == remove_duplicates([1,2,3,4,5,6,1,2,3,4,5,6])\nassert     [1,2,3,4,5,6]     == remove_duplicates([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6])\nassert     [1,2,3,4,5,6]     == remove_duplicates([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6])\nassert     [1,2,3,4,5,6]     == remove_duplicates([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 4, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([4, 4, 4, 4, 5, 6, 7]) == [4, 5, 6, 7]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\n\n\ndef absolute_values(numbers: List[int]) -> List[int]:\n    \"\"\" Compute the absolute value of all the elements in a list.\n    Return the result list in the same order as the original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 2, 3, 1, 1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2]) == [1, 2]\nassert     remove_duplicates([0, 0, 0]) == [0]\nassert     remove_duplicates([]) == []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 5, 1]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 1, 1, 1]) == [1]\nassert     remove_duplicates([]) == []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_duplicates([1,2,3,4,5,5,5,6,7,7,7,7,8,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1,1]) == [1]\nassert     remove_duplicates([1,1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_duplicates([0, 1, 2, 1, 2, 3]) == [0, 1, 2, 3]\nassert     remove_duplicates([0, 1, 2, 2, 3, 3]) == [0, 1, 2, 3]\nassert     remove_duplicates([0, 1, 1, 1, 2, 3]) == [0, 1, 2, 3]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 1, 1, 1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 2, 3, 1, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 2, 3, 4, 3, 2]) == [1, 2, 3, 4]\n\n\ndef find_closest(values: List[float]) -> float:\n    \"\"\" Find closest number in the array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     flip_case('') == ''\nassert     flip_case('a') == 'A'\nassert     flip_case('b') == 'B'\nassert     flip_case('c') == 'C'\nassert     flip_case('1') == '1'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     flip_case('a') == 'A'\nassert     flip_case('A') == 'a'\nassert     flip_case('aa') == 'AA'\nassert     flip_case('Ab') == 'b'\nassert     flip_case('aB') == 'b'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     flip_case('My name is Vanshika Prakash') == 'MY NAME IS VANSHIKA PRAKASH'\nassert     flip_case('My name is Vanshika Prakash') =='my name is vanshika prakash'\nassert     flip_case('Vanshika Prakash') == 'vanshika prakash'\nassert     flip_case('Vanshika PrAnShiKa') == 'vanshika prakash'"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     flip_case(\"LOWERCASE\") == \"UPPERCASE\"\nassert     flip_case(\"UPPERCASE\") == \"LOWERCASE\"\nassert     flip_case(\"Mixed\") == \"MIXED\"\nassert     flip_case(\"dIcAsE\") == \"DiCAsE\"\nassert     flip_case(\"not a string\") == \"Not a string\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     flip_case(\"abc\") == \"ABC\"\nassert     flip_case(\"ABC\") == \"abc\"\nassert     flip_case(\"abcCBA\") == \"Abc\"\nassert     flip_case(\"abC\") == \"Abc\"\nassert     flip_case(\"ABc\") == \"Abc\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     flip_case('test') == 'TEsT'\nassert     flip_case('TEST') == 'teST'\nassert     flip_case('TTTT') == 'TTTT'\nassert     flip_case('tttt') == 'ttTT'\nassert     flip_case('TTTT') == 'TTTT'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     flip_case('abc') == 'ABC'\nassert     flip_case('Abc') == 'ABC'\nassert     flip_case('abc') == 'Abc'\nassert     flip_case('ABC') == 'Abc'\nassert     flip_case('AbC') == 'Abc'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     flip_case('This is a test string') == 'tHIS iS a tESTr ing StRiNg'\nassert     flip_case('This is a test string') == 'tHIS iS a tESTr ing StRiNg'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     flip_case(\"Lorem\") == \"loMe\"\nassert     flip_case(\"lorem\") == \"LOmE\"\nassert     flip_case(\"LoremCase\") == \"lOReMCase\"\nassert     flip_case(\"loremcase\") == \"LoreMcASE\"\nassert     flip_case(\"Lorem\") == \"loMe\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     flip_case( 'LOWERCASE' )     == 'UPPERCASE'\nassert     flip_case( 'UPPERCASE' )     == 'LOWERCASE'\nassert     flip_case( 'abc123' )         == 'ABC123'\nassert     flip_case( 'ABC123' )         == 'abc123'\n\ndef main():\n    string = input()\n    print( flip_case( string ) )\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     concatenate([\"cat\", \"dog\", \"fish\"]) == \"catdogfish\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     concatenate(['Lorem', 'ipsum', 'dolor','sit', 'amet', 'consectetur', 'adipisicing', 'elit','sed']) == 'Loremipsumdolorsitametconsecteturadipisicingelitsed'\nassert     concatenate(['Lorem', 'ipsum']) == 'Loremipsum'\nassert     concatenate([]) == ''\nassert     concatenate(['']) == ''\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\nassert     concatenate([\"a\", \"bc\", \"d\"]) == \"abcd\"\nassert     concatenate([\"abc\", \"d\"]) == \"abcd\"\nassert     concatenate([\"abc\", \"def\", \"ghi\"]) == \"abcdefghi\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     concatenate([\"spam\", \"eggs\", \"ham\"])         == \"spameggsham\"\nassert     concatenate([\"cat\", \"dog\"])             == \"catdog\"\nassert     concatenate([\"cat\", \"dog\", \"cat\"])     == \"catdogcatcat\"\nassert     concatenate([\"\"])                         == \"\"\nassert     concatenate([])                         == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\nassert     concatenate([\"abc\", \"def\", \"ghi\"]) == \"abcdefghi\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdef\"\nassert     concatenate([]) == \"\"\n\ndef contains(collection: List[object], value: object) -> bool:\n    \"\"\" Check if collection contains value\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     concatenate([\"foo\", \"bar\"]) == \"foobar\"\nassert     concatenate([\"foo\", \"\", \"bar\"]) == \"fooobar\"\nassert     concatenate([\"foo\", \"bar\", \"\"]) == \"foobar\"\nassert     concatenate([\"\", \"\", \"\"]) == \"\"\nassert     concatenate([]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     concatenate([\"ab\", \"cd\"]) == \"abcd\"\nassert     concatenate([\"a\", \"b\"]) == \"ab\"\nassert     concatenate([\"abc\", \"def\"]) == \"abcdef\"\nassert     concatenate([]) == \"\"\nassert     concatenate([\"\", \"\"]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"a\" + \"b\" + \"c\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"a\" + \"b\" + \"c\" + \"d\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"a\" + \"b\" + \"c\" + \"d\" + \"e\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == \"a\" + \"b\" + \"c\" + \"d\" + \"e\" + \"f\" + \"g\"\n\ndef longest_length(strings: List[str]) -> int:\n    \"\"\" Find the length of the longest string in a list of strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     concatenate([\"Lorem\", \"ipsum\", \"dolor\"]) == \"Loremipsumdolor\"\nassert     concatenate([\"Lorem\", \"\", \"ipsum\", \"dolor\"]) == \"Loremipsumdolor\"\nassert     concatenate([\"\", \"Lorem\", \"\", \"ipsum\", \"dolor\"]) == \"Loremipsumdolor\"\nassert     concatenate([\"\", \"\", \"Lorem\", \"\", \"ipsum\", \"dolor\"]) == \"Loremipsumdolor\"\nassert     concatenate([\"\", \"\", \"\", \"Lorem\", \"\", \"ipsum\", \"dolor\"]) == \"Loremipsumdolor\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     concatenate([\"Python\", \"Java\", \"Ruby\"])    == \"PythonJavaRuby\"\nassert     concatenate([\"Python\", \"Java\", \"Ruby\", \"C\"])    == \"PythonJavaRubyC\"\nassert     concatenate([\"Python\", \"Java\", \"Ruby\", \"C\", \"C++\", \"C#\"])    == \"PythonJavaRubyCC++C#\"\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"a\", \"aa\", \"aa\"], \"a\") == [\"a\", \"aa\"]\nassert     filter_by_prefix([\"a\", \"aa\", \"aa\"], \"aa\") == [\"aa\"]\nassert     filter_by_prefix([\"a\", \"aa\", \"aa\"], \"b\") == []\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"hello\") == [\"hello\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"he\") == [\"hello\", \"world\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"w\") == [\"world\", \"foo\", \"bar\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\") == [\"foo\", \"bar\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"foo\", \"bar\"], \"foo\", 2) == [\"foo\", \"bar\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [\n                'alpha', 'bravo', 'charlie', 'delta', 'echo',\n                'foxtrot', 'golf', 'hotel', 'india', 'juliett',\n                'kilo', 'lima','mike', 'november', 'oscar',\n                'papa', 'quebec', 'romeo','sierra', 'tango',\n                'uniform', 'victor', 'whiskey', 'xray', 'yankee',\n                'zulu'\n            ] == filter_by_prefix(\n            [\n                'alpha', 'bravo', 'charlie', 'delta', 'echo',\n                'foxtrot', 'golf', 'hotel', 'india', 'juliett',\n                'kilo', 'lima','mike', 'november', 'oscar',\n                'papa', 'quebec', 'romeo','sierra', 'tango',\n                'uniform', 'victor', 'whiskey', 'xray', 'yankee',\n                'zulu'\n            ], 'x')\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_prefix(['11', '22', '33', '44', '55'], '11') == ['11']\nassert     filter_by_prefix(['11', '22', '33', '44', '55'], '55') == ['55']\nassert     filter_by_prefix(['11', '22', '33', '44', '55'], '69') == ['11', '22', '33', '44', '55']\nassert     filter_by_prefix(['11', '22', '33', '44', '55'], 'no_match') == []\nassert     filter_by_prefix(['11', '22', '33', '44', '55'], 'foo') == ['11', '22', '33', '44', '55']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"cat\", \"dog\", \"mouse\"], \"c\") == [\"cat\", \"dog\"]\nassert     filter_by_prefix([\"cat\", \"dog\", \"mouse\"], \"d\") == [\"dog\"]\nassert     filter_by_prefix([\"cat\", \"dog\", \"mouse\"], \"g\") == []\nassert     filter_by_prefix([\"cat\", \"dog\", \"mouse\"], \"f\") == []\nassert     filter_by_prefix([\"cat\", \"dog\", \"mouse\"], \" \") == [\"cat\", \"dog\", \"mouse\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'a') == ['a', 'b', 'c', 'd', 'e']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'b') == ['b', 'c', 'd', 'e', 'f']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'z') == []\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'abc') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'abcdef') == ['a', 'b', 'c', 'd', 'e', 'f']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_by_prefix(['flour', 'flour', 'flour'], 'fl') == ['flour']\nassert     filter_by_prefix(['flour', 'flour', 'flour'], 'FL') == ['flour']\nassert     filter_by_prefix(['flour', 'flour', 'flour'], 'flu') == ['flour']\nassert     filter_by_prefix(['flour', 'flour', 'flour'], 'Flu') == ['flour']\nassert     filter_by_prefix(['flour', 'flour', 'flour'], 'FLU') == ['flour']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['', 'a', 'ab', 'abc', 'def', 'xyz', 'xyz'], 'xyz') \\\n        == ['xyz', 'xyz']\nassert filter_by_prefix(['', 'a', 'ab', 'abc', 'def', 'xyz', 'xyz'], 'ab') \\\n        == ['a', 'ab', 'abc', 'def']\nassert filter_by_prefix(['', 'a', 'ab', 'abc', 'def', 'xyz', 'xyz'], 'abc') \\\n        == ['a', 'ab', 'abc', 'def', 'xyz']\nassert filter_by_prefix(['', 'a', 'ab', 'abc', 'def', 'xyz', 'xyz'], 'def') \\\n        == ['a', 'ab', 'abc', 'def', 'xyz']\nassert filter_by_prefix(['', 'a', 'ab', 'abc', 'def', 'xyz', 'xyz'], 'zyz') \\\n        == ['xyz']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'a') == ['a', 'b', 'c']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'f') == []\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'x') == []\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'z') == []\n\n\ndef get_indices(strings: List[str], string: str) -> List[int]:\n    \"\"\" Return the indices of an input list of strings for which a given string is found.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"eins\", \"zwei\", \"drei\", \"vier\"], \"e\") == [\"eins\", \"zwei\", \"drei\"]\nassert     filter_by_prefix([\"eins\", \"zwei\", \"drei\", \"vier\"], \"d\") == [\"drei\", \"vier\"]\nassert     filter_by_prefix([\"eins\", \"zwei\", \"drei\", \"vier\"], \"z\") == []\nassert     filter_by_prefix([\"eins\", \"zwei\", \"drei\", \"vier\"], \"s\") == []\nassert     filter_by_prefix([], \"s\") == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_positive([1, -2, 0, 3, 4, -5]) == [1, 3, 4]\nassert get_positive([1, -2, -1, 3, 4, -5]) == [1, 3, 4]\nassert get_positive([1, 0, 3, 4, -5]) == [1, 3, 4]\nassert get_positive([]) == []"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_positive([1,-2,3,-4,5]) == [1,-2,3,-4,5]\nassert     get_positive([1,2,-3,-4,-5]) == [1,2,-3,-4]\nassert     get_positive([-1,-2,3,4,5]) == [1,2,3,4,5]\nassert     get_positive([-1,-2,-3,-4,-5]) == []\n\n\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_positive([1, -2, 3, -4, 5, -6]) == [1, 3, 5]\nassert     get_positive([-1, -2, -3, 4, -5, -6]) == [-1, -3, -5]\nassert     get_positive([1, -2, 3, 4, -5, -6]) == []\nassert     get_positive([]) == []\nassert     get_positive([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_positive([3, -4, 5, -2]) == [5]\nassert     get_positive([]) == []\nassert     get_positive([-1, -2, -3, -4]) == [-1, -2, -3, -4]\nassert     get_positive([1, -2, 3, 4]) == [1, 3]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_positive([-1, 2, 3, 4, 5, 6, -7, 8, 9]) == [2, 3, 4, 5, 6, 8, 9]\nassert get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-9]\nassert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert get_positive([0, 0, 0, 0, 0, 0]) == [0]\nassert get_positive([1, -2, 3, 4, 5, 6, -7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_positive([-1, -2, -3, 0, 1, 2, 3, 5, 6]) == [1, 2, 3]\nassert get_positive([]) == []\nassert get_positive([-1, 0, 1]) == [1]\nassert get_positive([1, 0]) == [1]\nassert get_positive([-1, -2, -3, 0, 1, 2, 3, 5, 6, 7, 8, 9]) == [1, 2, 3, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_positive([-1,-2,0,1]) == [1,2]\nassert     get_positive([-1,-2,0,1,2,3]) == [1,2,3]\nassert     get_positive([]) == []\nassert     get_positive([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n\ndef check_num(l: list):\n    \"\"\"Return all elements in the list that are not numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_positive([2,0,-1,4,-5]) == [2,4]\nassert     get_positive([2,-1,4,5]) == [2,4,5]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_positive([-1,-2,-3, 4,5,6]) == [4,5,6], \"Expected [4,5,6]\"\nassert     get_positive([-1,2,3,-4,5,-6]) == [2,3,-4,5,-6], \"Expected [2,3,-4,5,-6]\"\nassert     get_positive([5,4,3,2,1,0]) == [5,4,3,2,1], \"Expected [5,4,3,2,1]\"\nassert     get_positive([]) == [], \"Expected []\"\n\ndef main():\n    print(get_positive([1,2,3,4,5,6]))\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert get_positive([-1, -2, -3, -4, -5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(5) == True\nassert     is_prime(7) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_prime(19) == True\nassert     is_prime(18) == False\nassert     is_prime(17) == True\nassert     is_prime(11) == True\nassert     is_prime(10) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(7) == True\nassert     is_prime(4) == False\nassert     is_prime(16) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_prime(11) == True\nassert     is_prime(12) == False\nassert     is_prime(13) == True\nassert     is_prime(2) == True\nassert     is_prime(1) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_prime(23) is True\nassert     is_prime(2311) is False\nassert     is_prime(1) is False\nassert     is_prime(0) is False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\nassert     is_prime(6) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_prime(7)\nassert     not is_prime(12)\nassert     is_prime(29)\nassert     not is_prime(100)\nassert     is_prime(101)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(10) == False\nassert     is_prime(29) == False\nassert     is_prime(29) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(4) == False\nassert     is_prime(11) == True\nassert     is_prime(10) == False\nassert     is_prime(1000) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_prime(5) is True\nassert     is_prime(6) is False\nassert     is_prime(7) is True\nassert     is_prime(8) is False\nassert     is_prime(9) is False\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     poly([1, 2, 3], 1) == 0\nassert     poly([1, 2, 3], 0) == 3\nassert     poly([1, 2, 3], 2) == 6\n\nassert     poly([1, 2, 3], -1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_zero([1, 1, 0, 0, 0]) == (0.5, -0.5)\nassert     find_zero([1, -1, 1, -1]) == (0, 1)\nassert     find_zero([1, -1, 1, 0]) == None\nassert     find_zero([1, 1, 0, 1, 1]) == (0, 1)\nassert     find_zero([1, -1, 1, -1, 1]) == None\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\n\ndef newton_poly(xs: list, x: float, epsilon: float, max_iterations: int):\n    \"\"\"\n    xs: list of coefficients (might be empty)\n    x: point where to evaluate polynomial\n    epsilon: stopping criterion (epsilon > 0)\n    max_iterations: stopping criterion (max_iterations >= 0)\n    \"\"\"\n    pass\n\n\ndef newton_poly_naive(xs: list, x: float, epsilon: float, max_iterations: int):\n    \"\"\"\n    xs: list of coefficients (might be empty)\n    x: point where to evaluate polynomial\n    epsilon: stopping criterion (epsilon > 0)\n    max_iterations: stopping criterion (max_iterations >= 0)\n    \"\"\"\n    pass\n\n\ndef newton_poly_recursive(xs: list, x: float, epsilon: float, max_iterations: int):\n    \"\"\"\n    xs: list of coefficients (might be empty)\n    x: point where to evaluate polynomial\n    epsilon: stopping criterion (epsilon > 0)\n    max_iterations: stopping criterion (max_iterations >= 0)\n    \"\"\"\n    pass\n\n\ndef newton_poly_iterative(xs: list, x: float, epsilon: float, max_iterations: int):\n    \"\"\"\n    xs: list of coefficients (might be empty)\n    x: point where to evaluate polynomial\n    epsilon: stopping criterion (epsilon > 0)\n    max_iterations: stopping criterion (max_iterations >= 0)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     poly([1, 2, 3], 0) == 0\nassert     poly([1, -2, 3], 0) == 0\nassert     poly([1, 0, 3], 0) == 0\nassert     poly([1, -3, 3], 0) == 0\nassert     poly([1, -3, 0], 0) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     poly([1, 1, 1, 1, 1], 1) == 0\nassert     poly([1, 1, 1, 1, 1], 2) == 0\nassert     poly([1, 1, 1, 1, 1], 3) == 0\nassert     poly([1, 1, 1, 1, 1], 4) == 0\nassert     poly([1, 1, 1, 1, 1], 5) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_zero([-8,0,1,6,11,4]) == 1.0, 'Wrong zero'\nassert     find_zero([-8,-2,-4,0,1,6,11,4]) == 0.5, 'Wrong zero'\nassert     find_zero([1,-8,0,-4,1,6,11,4]) == -0.5, 'Wrong zero'\nassert     find_zero([-1,-8,-4,-1,1,6,11,4]) == -1.5, 'Wrong zero'\n\n\ndef find_root(xs: list, x_guess: float):\n    \"\"\"\n    find_root takes list xs and a guess x_guess as parameters\n    and returns x such that poly(x) = 0.\n    \"\"\"\n    eps = 0.001\n    if x_guess == 0:\n        return 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     poly([1, 1, 1, 1, 1], -1) == 0\nassert     poly([1, 1, 1, 1, 1], 0) == 0\nassert     poly([1, 1, 1, 1, 1], 1) == 0\nassert     poly([1, 1, 1, 1, 1], -1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     poly([1,2,0],1) == 0\nassert     poly([1,2,3],1) == 0\nassert     poly([1,2,3,0],1) == 0\nassert     poly([1,2,3,0],2) == 0\nassert     poly([1,2,3,0],3) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     poly([1, 0, 1], -1) == 0\nassert     poly([1, 0, -1], -1) == 0\nassert     poly([1, 0, 1, 0], -1) == 0\nassert     poly([1, 0, 1, 0], 1) == 0\nassert     poly([1, 0, 1, 0], 0) == 0\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 4, 5]\nassert     sort_third([3, 3, 2, 1, 5, 4]) == [1, 2, 3, 4, 5]\nassert     sort_third([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_third([6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) == [6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\nassert     sort_third([-1, -1, -1]) == [-1, -1, -1]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_third([1,2,3,4,5,6]) == [2,4,6,1,3,5]\nassert     sort_third([4,3,2,1,6,5]) == [2,4,6,1,3,5]\nassert     sort_third([2,1,5,4,3,6]) == [2,4,6,1,3,5]\nassert     sort_third([1,2,3,4,5,6]) == [2,4,6,1,3,5]\nassert     sort_third([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == [1]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_third([9,4,3,2,1,0]) == [0, 1, 2, 3, 4, 9], \"failed test 1\"\nassert     sort_third([2,2,2,2,2]) == [2, 2, 2, 2, 2], \"failed test 2\"\nassert     sort_third([3,3,3]) == [3, 3, 3], \"failed test 3\"\n\nprint(\"all tests passed!\")"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1,2,3,4,5,6,7,8]    == sort_third(\n            [7,8,1,2,3,4,5,6])\nassert     [1,2,3,4,5,6,7,8]    == sort_third(\n            [8,7,6,5,4,3,2,1])\nassert     [1,2,3,4,5,6,7,8]    == sort_third(\n            [8,7,6,5,4,3,2,1])\nassert     [1,2,3,4,5,6,7,8]    == sort_third(\n            [8,7,6,5,4,3,2,1])\nassert     [1,2,3,4,5,6,7,8]    == sort_third([8,7,6,5,4,3,2,1])\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_third([1, 3, 5, 4, 7, 8, 2, 10, 9]) == [1, 3, 4, 5, 7, 8, 2, 10, 9]\nassert     sort_third([1, 1, 1]) == [1, 1, 1]\nassert     sort_third([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]\nassert     sort_third([]) == []\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_third([1, 3, -1, 2, -3, 4])    == [-3, 1, 2, 3, 4, -1]\nassert     sort_third([1, 3, -1, 2, -3, 4, -2]) == [-2, -3, -1, 1, 2, 3, 4]\nassert     sort_third([1, 3, -1, 2, -3, 4, -2, 3]) == [-2, -3, -1, 1, 2, 3, 4]\nassert     sort_third([1, 3, -1, 2, -3, 4, -2, 3, -1, 5]) == [-2, -3, -1, 1, 2, 3, 4, 5]\nassert     sort_third([1, 3, -1, 2, -3, 4, -2, 3, -1, 5, -1, 6]) == [-2, -3, -1, 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         (sort_third([]) == [])\nassert         (sort_third([1]) == [1])\nassert         (sort_third([1, 1, 1]) == [1])\nassert         (sort_third([1, 2, 3]) == [1, 2])\nassert         (sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5])\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_third([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_third([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_third([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9], \"incorrect sort_third\"\nassert sort_third([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10], \"incorrect sort_third\"\nassert sort_third([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12], \"incorrect sort_third\"\nassert sort_third([5,6,7,8,9,10,11,12,13,14,15]) == [5,6,7,8,9,10,11,12,13,14,15], \"incorrect sort_third\"\nassert sort_third([10,2,3,4,5,6,7,8,9,1]) == [1,2,3,4,5,6,7,8,9,10], \"incorrect sort_third\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     ( [0, 1, 2, 3] == sort_third([3, 1, 2, 0]) )\nassert     ( [1, 2, 3, 4] == sort_third([4, 1, 2, 3]) )\nassert     ( [1, 2, 3, 4] == sort_third([4, 3, 2, 1]) )\nassert     ( [1, 2, 3, 4] == sort_third([4, 3, 2, 1]) )\nassert     ( [0, 1, 2, 3] == sort_third([3, 1, 2, 0]) )\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique([1, 1, 1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 2, 1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     unique([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     unique([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sorted(unique([1, 1, 3, 3, 2, 2, 3, 4, 1])) == [1, 2, 3, 4]\nassert     sorted(unique([1, 2, 3, 3, 2, 1])) == [1, 2, 3]\nassert     sorted(unique([1, 2, 3, 4, 5])) == [1, 2, 3, 4, 5]\nassert     sorted(unique([])) == []\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique([1, 2, 2, 2, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 2, 1, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         unique([1,2,3,4]) == [1,2,3,4]\nassert         unique([1,2,1,3,3,3,4]) == [1,2,3,4]\nassert         unique([1,2,3,1,2,3,1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ids == unique(ids)\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ids == unique(ids)\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique([]) == []\nassert     unique([1, 2, 2, 3, 3, 3]) == [1, 2, 3]\nassert     unique([1, 2, 1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 2, 1, 2, 3, 1, 2, 1]) == [1, 2, 3, 1]\nassert     unique([1, 2, 1, 2, 3, 1, 2, 1], unique) == [1, 2, 3, 1]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique([1,1,1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,1,2,3,3]) == [1,2,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique([1, 2, 2, 2, 2, 3, 4, 5, 6, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique([]) == []\nassert     unique([\"str1\", \"str2\", \"str3\", \"str1\"]) == [\"str1\", \"str2\", \"str3\"]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique([1, 1, 1, 2, 3, 3]) == [1, 2, 3]\nassert unique([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\nassert unique([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert unique([]) == []\nassert unique([1]) == [1]\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_element([1,2,3,4]) == 4\nassert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3,4,5,-6]) == 5\nassert     max_element([1]) == 1\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_element([]) == None, \\\n            \"Error: max_element should return None for empty lists\"\nassert     max_element([5]) == 5, \\\n            \"Error: max_element should return max value in single list\"\nassert     max_element([1,2,3]) == 3, \\\n            \"Error: max_element should return max value in mixed list\"\nassert     max_element([-1,-2,-3]) == -1, \\\n            \"Error: max_element should return max value in negative numbers\"\nassert     max_element([0]) == 0, \\\n            \"Error: max_element should return max value in single negative number\"\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([-1, -2, -3]) == -1\nassert     max_element([]) == None\nassert     max_element([0]) == 0\nassert     max_element([1]) == 1\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_element([3,5,1,2,4,6]) == 6\nassert     max_element([-1,-2,-3,-4,-5,-6]) == -1\nassert     max_element([]) == None\nassert     max_element([1]) == 1\nassert     max_element([2,4,8,16,32,64]) == 64\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         max_element([1, -2, 3, -4]) == 3\nassert         max_element([1, -2, 3, -4, 3, 1, 0]) == 3\nassert         max_element([2, -2, 3, -4]) == 3\n\ndef q4_4(x: list):\n    \"\"\"\n    >>> q4_4([])\n    []\n    >>> q4_4([1])\n    [1]\n    >>> q4_4([1, 2, 3])\n    [1, 2, 3]\n    >>> q4_4([1, 2, 3, 4])\n    [1, 2, 3, 4]\n    >>> q4_4([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    pass\n\ndef q4_5(x: list):\n    \"\"\"\n    >>> q4_5([])\n    []\n    >>> q4_5([1])\n    [1]\n    >>> q4_5([1, 2, 3])\n    [1, 3]\n    >>> q4_5([1, 2, 3, 4])\n    [1, 3]\n    >>> q4_5([1, 2, 3, 4, 5])\n    [1, 3]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_element([]) == None\nassert     max_element([1]) == 1\nassert     max_element([1, -2, 3, -4]) == 3\nassert     max_element([-1, -2, -3, -4]) == -1\nassert     max_element([-1, 2, -3, 4]) == 2\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_element([-4, -1, 0, 2, 3]) == 3\nassert     max_element([-4, -1, 0]) == 0\nassert     max_element([2, 3, 4, 5]) == 5\nassert     max_element([2, 3, 4]) == 4\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([-1,-2,-3]) == -1\nassert     max_element([-1,-2,0]) == 0\nassert     max_element([-1,2,0]) == 2\nassert     max_element([0,2,3]) == 3\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_element([]) == None\nassert     max_element([1]) == 1\nassert     max_element([1, 2, 3, 4, 5]) == 5\n\ndef max_element2(l: list):\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    return max(l[0], max_element2(l[1:]))\n\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_element([0,1,2,3]) == 3\nassert     max_element([0,2,3,4]) == 4\nassert     max_element([0,3,4,1]) == 4\nassert     max_element([-1,-2,-3,-4]) == -1\nassert     max_element([]) == None\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n\n\ndef test_fizz_buzz():\n    assert fizz_buzz(5) == 2\n    assert fizz_buzz(10) == 4\n    "
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fizz_buzz(42) == 0\nassert     fizz_buzz(66) == 1\nassert     fizz_buzz(85) == 1\nassert     fizz_buzz(100) == 1\nassert     fizz_buzz(37) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fizz_buzz(1) == 0\nassert     fizz_buzz(2) == 0\nassert     fizz_buzz(3) == 1\nassert     fizz_buzz(4) == 0\nassert     fizz_buzz(5) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fizz_buzz(11) == 1\nassert     fizz_buzz(12) == 0\nassert     fizz_buzz(13) == 1\nassert     fizz_buzz(14) == 0\nassert     fizz_buzz(15) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fizz_buzz(2) == 1\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(4) == 0\nassert     fizz_buzz(5) == 1\nassert     fizz_buzz(6) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         fizz_buzz(25) == 2\nassert         fizz_buzz(97) == 0\nassert         fizz_buzz(101) == 1\nassert         fizz_buzz(99) == 0\nassert         fizz_buzz(92) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fizz_buzz(3) == 1\nassert     fizz_buzz(15) == 1\nassert     fizz_buzz(24) == 1\nassert     fizz_buzz(30) == 0\nassert     fizz_buzz(71) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fizz_buzz(11) == 2\nassert     fizz_buzz(15) == 4\nassert     fizz_buzz(15) == 5\nassert     fizz_buzz(100) == 11\nassert     fizz_buzz(101) == 10\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fizz_buzz(21) == 1\nassert     fizz_buzz(25) == 0\nassert     fizz_buzz(25) == 0\nassert     fizz_buzz(50) == 0\nassert     fizz_buzz(25) == 0\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7, 2, 4, 6, 8]\nassert     sort_even([1, 3, 5, 7, 9, 11, 13]) == [1, 3, 5, 7, 9, 11, 13]\nassert     sort_even([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert     sort_even([2, 4, 6, 8, 10, 12, 14]) == [2, 4, 6, 8, 10, 12, 14]\nassert     sort_even([]) == []\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [1,3,2] == sort_even([1,2,3])\nassert     [1,2,3] == sort_even([3,2,1])\nassert     [1,2,3] == sort_even([1,2,3])\nassert     [2,1,3] == sort_even([3,1,2])\nassert     [1,3,2] == sort_even([2,3,1])\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (sort_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n            == [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 15, 14, 10, 5, 3])\nassert     (sort_even([1,3,2,5,4,7,6,9,8,11,10,13,12,15,14])\n            == [1, 3, 2, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nassert     (sort_even([2,4,6,8,10,12,14,16])\n            == [2, 4, 6, 8, 10, 12, 14, 16])\nassert     (sort_even([3,9,8,7,6,5,4,2,1,0])\n            == [3, 9, 8, 7, 6, 5, 4, 2, 1, 0])\nassert     (sort_even([1,2,3,4,5,6,7,8,9,10])\n            == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_even([1,2,3,4,5]) == [1,3,5,2,4]\nassert     sort_even([-1,2,3,4,5]) == [-1,2,3,5,4]\nassert     sort_even([2,2,2,4,4]) == [2,2,2,4,4]\nassert     sort_even([-1,-1,0]) == [-1,-1,0]\nassert     sort_even([0]) == [0]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8]) == [1,3,5,7,2,4,6,8]\nassert     sort_even([2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2]\nassert     sort_even([1,2,2,2,3,3]) == [1,2,2,2,3,3]\nassert     sort_even([1,3,2,4,5,6,7,8]) == [1,3,5,7,2,4,6,8]\nassert     sort_even([3,2,1,5,8,6,7,4]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_even(['a', 'c', 'b', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nassert     sort_even(['g', 'e', 'd', 'c', 'a', 'f', 'b']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nassert     sort_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nassert     sort_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\nassert     sort_even([]) == []\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_even([4, 3, 2, 1, 0]) == [4, 2, 3, 1, 0]\nassert     sort_even([]) == []\nassert     sort_even([0, 1, 2, 3, 4]) == [0, 2, 4, 1, 3]\nassert     sort_even([0, 4, 2, 1, 3]) == [0, 2, 1, 3, 4]\nassert     sort_even([3, 2, 1, 0]) == [3, 2, 1, 0]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_even([1, 3, 3, 3, 2, 4, 4, 4, 4, 5, 5, 5]) \\\n        == [2, 4, 4, 4, 5, 1, 3, 3, 3, 5, 4, 4]\nassert     sort_even([1, 2, 3, 4, 5]) \\\n        == [2, 4, 1, 3, 5]\nassert     sort_even([1, 2, 3, 4, 5, 6]) \\\n        == [2, 4, 1, 3, 5, 6]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) \\\n        == [2, 4, 1, 3, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_even([4,8,1,3,9]) == [1,3,4,8,9]\nassert     sort_even([2,7,6,9]) == [6,7,2,9]\nassert     sort_even([7,2,9]) == [2,7,9]\nassert     sort_even([7,8,7,8]) == [7,8,7,8]\nassert     sort_even([8,7,7,8]) == [8,7,7,8]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [0, 1, 2, 4] == sort_even([0, 2, 4, 1, 3])\nassert     [0, 2, 4, 1, 3] == sort_even([4, 0, 1, 3, 2])\nassert     [0, 1, 2, 3, 4] == sort_even([4, 2, 3, 1, 0])\nassert     [0, 2, 4, 1, 3] == sort_even([3, 1, 4, 2, 0])\nassert     [2, 4, 0, 1, 3] == sort_even([1, 3, 0, 4, 2])\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode_cyclic(\"ADOBECODEBANC\") == \"ABBBABCAADEAA\"\nassert decode_cyclic(\"ABBBABCAADEAA\") == \"ADOBECODEBANC\"\nassert decode_cyclic(\"AAABBCBBABC\") == \"ABBCBABCABBA\"\nassert decode_cyclic(\"AABBBCCCCCC\") == \"ABCCCCAC\"\nassert decode_cyclic(\"ABCBBCAB\") == \"ABCBCABCBC\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decode_cyclic(\"bxcye\") == \"abc\"\nassert     decode_cyclic(\"abcbcd\") == \"abcd\"\nassert     decode_cyclic(\"bcbccc\") == \"abcd\"\nassert     decode_cyclic(\"cbabc\") == \"abcd\"\nassert     decode_cyclic(\"bcxab\") == \"abc\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         decode_cyclic(encode_cyclic(string)) == string\nassert         decode_cyclic(encode_cyclic(string2)) == string2\nassert         decode_cyclic(encode_cyclic(string3)) == string3\n\n\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode_cyclic(\"ABCD\") == \"ABCD\"\nassert     encode_cyclic(\"AB\") == \"AB\"\nassert     encode_cyclic(\"ABCDEFG\") == \"CDEFG\"\nassert     encode_cyclic(\"ABCDEFG\") == \"CDEFG\"\nassert     encode_cyclic(\"ABCDEFG\") == \"CDEFG\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         decode_cyclic(\"aaabbccc\")     == \"aabbccc\"\nassert         decode_cyclic(\"aabbccc\")     == \"aaabbccc\"\nassert         decode_cyclic(\"aabbcc\")     == \"aabbcc\"\nassert         decode_cyclic(\"\")             == \"\"\nassert         decode_cyclic(\"a\")             == \"a\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encode_cyclic(decode_cyclic(\"abc\")) == \"abc\"\nassert     encode_cyclic(decode_cyclic(\"cab\")) == \"cab\"\nassert     encode_cyclic(decode_cyclic(\"abd\")) == \"bca\"\nassert     encode_cyclic(decode_cyclic(\"cb\")) == \"abc\"\nassert     encode_cyclic(decode_cyclic(\"bc\")) == \"bca\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode_cyclic(\"aaabbcc\") == \"bbccaa\"\nassert     encode_cyclic(\"aaabbcc\") == \"bbccaa\"\nassert     encode_cyclic(\"aaaaaa\") == \"aabbaa\"\nassert     encode_cyclic(\"aaabbcc\") == \"bbccaa\"\nassert     encode_cyclic(\"aaaaaa\") == \"aabbaa\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode_cyclic(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\") \\\n        == \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\nassert     encode_cyclic(\"Do not interrupt me.\") == \"DOn't interrupt me.\"\nassert     encode_cyclic(\"The first five characters will be enough.\") == \"The first five characters will be enough.\"\nassert     encode_cyclic(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\") == \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\"\nassert     encode_cyclic(\"aabbccddeee\") == \"aaabbccddeee\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encode_cyclic('asdfg') == 'fgasdf'\nassert     encode_cyclic('abc') == 'bca'\nassert     encode_cyclic('xyz') == 'yzab'\nassert     encode_cyclic('abcd') == 'dcba'\nassert     encode_cyclic('xyzd') == 'zcba'\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert decode_cyclic(encode_cyclic(\"aaaa\")) == \"aaaa\"\nassert decode_cyclic(encode_cyclic(\"bbbbb\")) == \"bbbbb\"\nassert decode_cyclic(encode_cyclic(\"ccccc\")) == \"ccccc\"\nassert decode_cyclic(encode_cyclic(\"dddddd\")) == \"dddddd\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_fib(2) == \"Fibonacci\"\nassert     prime_fib(3) == \"Fibonacci\"\nassert     prime_fib(4) == \"Fibonacci\"\nassert     prime_fib(5) == \"Fibonacci\"\nassert     prime_fib(6) == \"Fibonacci\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_fib(12) == 6765\nassert     prime_fib(13) == 701\nassert     prime_fib(14) == 11\nassert     prime_fib(15) == 13\nassert     prime_fib(16) == 29\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     ( prime_fib(0) == 2 )\nassert     ( prime_fib(1) == 1 )\nassert     ( prime_fib(2) == 3 )\nassert     ( prime_fib(3) == 5 )\nassert     ( prime_fib(4) == 7 )\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\nassert     prime_fib(5) == 11\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(prime_fib(100))"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\n\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prime_fib(2) == True\nassert     prime_fib(3) == True\nassert     prime_fib(5) == True\nassert     prime_fib(7) == True\nassert     prime_fib(9) == True\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\nassert     prime_fib(5) == 11\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_prime(prime_fib(5))\nassert     is_prime(prime_fib(11))\nassert     is_prime(prime_fib(17))\nassert     is_prime(prime_fib(19))\nassert     is_prime(prime_fib(23))\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([0, -1, 1, -2, 2, -3]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0]) == False\nassert     triples_sum_to_zero([-1, -1, 1, 0]) == False\nassert     triples_sum_to_zero([-1, -1, 0, 1]) == True\n\ndef is_triple_sum(l: list):\n    \"\"\"\n    is_triple_sum takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list\n    that sum to 0, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([1,2,3,4,5,6]) == True\nassert     triples_sum_to_zero([1,1,1,1]) == False\nassert     triples_sum_to_zero([1,1,1,2]) == True\nassert     triples_sum_to_zero([1,1,1,2,3,4]) == False\nassert     triples_sum_to_zero([1,1,1,2,3,4,5]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, -4, -4, 7]) == True\nassert     triples_sum_to_zero([1, 2, 3, -4, -4, 7, 8]) == False\nassert     triples_sum_to_zero([-3, -3, -2, -2, -2, 0, 0, 1, 2, 2, 3, 3, 4]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([-2, -2, -2, 3, 5, 7, 11, 13]) == True\nassert triples_sum_to_zero([-2, -2, -2, 3, 5, 7, 11, 13, -2]) == True\nassert triples_sum_to_zero([-2, -2, -2, 3, 5, 7, 11, 13, -1]) == False\nassert triples_sum_to_zero([-2, -2, -2, 3, 5, 7, 11, 13]) == False\nassert triples_sum_to_zero([-2, -2, -2, 3, 5, 7, 11, 13, 2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1]) == False\nassert     triples_sum_to_zero([1, 2, 3]) == False\nassert     triples_sum_to_zero([1, 1, 1, 1]) == False\nassert     triples_sum_to_zero([1, -1, 1, -1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([2, 3, -6, -2, 4, 5, 1, -8, -9]) == True\nassert triples_sum_to_zero([2, 3, -6, -2, 4, -5, 1, -8, -9]) == False\nassert triples_sum_to_zero([2, 3, -6, -2, 4, -5, 1, -8, -9, 3]) == False\nassert triples_sum_to_zero([-2, 3, -6, -2, 4, -5, 1, -8, -9]) == True\nassert triples_sum_to_zero([2, 3, -6, -2, 4, -5, 1, -8, -9, 3, 0]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([1, 2, 3]) == True\nassert     triples_sum_to_zero([-1, -2, -3]) == True\nassert     triples_sum_to_zero([0, 0, 0]) == True\nassert     triples_sum_to_zero([0, -1, 0]) == True\nassert     triples_sum_to_zero([1, 2, -2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([1, -1, 1, -1, 1, -1]) == True\nassert     triples_sum_to_zero([1, -1, 1, -1, 1, 1]) == False\nassert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1,1,-1,-1,-1,-1,1,1]) == True\nassert     triples_sum_to_zero([1,-1,-1,-1,1,1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         triples_sum_to_zero([1,2,3]) == False\nassert     triples_sum_to_zero([-1, -2, 3]) == True\nassert     triples_sum_to_zero([3,0,0]) == True\nassert     triples_sum_to_zero([-3, 0, 0]) == False\nassert     triples_sum_to_zero([-2, 0, 0]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([0, -1, 2, -3, 1]) == True\nassert     triples_sum_to_zero([0, -1, 2, -1, 1]) == True\nassert     triples_sum_to_zero([0, -1, 2, -3, 1, 2, 2]) == False\nassert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([-1, -1, -1, -1, -1]) == False\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert _______________ == car_race_collision(5)\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     car_race_collision(2) == 1\nassert     car_race_collision(1) == 0\nassert     car_race_collision(5) == 1\nassert     car_race_collision(10) == 1\nassert     car_race_collision(20) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     car_race_collision(1) == 1\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 1\nassert     car_race_collision(5) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     car_race_collision(2) == 2\nassert     car_race_collision(5) == 8\nassert     car_race_collision(100) == 78"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 3\nassert     car_race_collision(6) == 3\nassert     car_race_collision(7) == 4\nassert     car_race_collision(8) == 4\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(5) == 0\nassert     car_race_collision(10) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 1\nassert     car_race_collision(5) == 1\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     incr_list(list()) == [1]\nassert     incr_list([1]) == [2]\nassert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\nassert     incr_list([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [incr_list([]) == [1] \n            and incr_list([1]) == [2]\n            and incr_list([1,2]) == [3, 3]\n            and incr_list([1,2,3]) == [4, 4, 4]\n            and incr_list([1,2,3,4]) == [5, 5, 5, 5]\n            and incr_list([1,2,3,4,5]) == [6, 6, 6, 6, 6]\n            and incr_list([1,2,3,4,5,6]) == [7, 7, 7, 7, 7, 7]\n            and incr_list([1,2,3,4,5,6,7]) == [8, 8, 8, 8, 8, 8, 8]\n            and incr_list([1,2,3,4,5,6,7,8]) == [9, 9, 9, 9, 9, 9, 9, 9]\n            and incr_list([1,2,3,4,5,6,7,8,9]) == [10, 10, 10, 10, 10, 10, 10, 10, 10]\n            and incr_list([1,2,3,4,5,6,7,8,9,10]) == [11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11]) == [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12]) == [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]\n            and incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 2"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     incr_list([1, 2, 3])    == [2, 3, 4]\nassert     incr_list([1, 2, 3, 4])    == [2, 3, 4, 5]\nassert     incr_list([1])        == [2]\nassert     incr_list([])        == []\nassert     incr_list(range(10))    == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     incr_list([1,2,3,4]) == [1, 2, 3, 4, 5]\nassert     incr_list(range(10)) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     incr_list([]) == []\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [1,2,3] == incr_list([1,2,3])\nassert     [2,3,4] == incr_list([1,2,3])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [i + 1 for i in range(10)]         == incr_list([i for i in range(10)])\nassert     [i + 1 for i in range(10)]     == incr_list(range(10))\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     incr_list(['1', '2', '3']) == ['2', '3', '4']\nassert     incr_list(['2', '4', '6']) == ['3', '5', '7']\nassert     incr_list(['-3', '5', '7']) == ['-2', '6', '8']\nassert     incr_list([]) == []\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         [0, 1, 2, 3, 4, 5] == incr_list([5, 4, 3, 2, 1, 0])\nassert         [10, 11, 12, 13, 14, 15] == incr_list([15, 14, 13, 12, 11, 10])\nassert         [3, 3, 4, 5, 6, 6] == incr_list([6, 6, 5, 4, 3, 3])\nassert         [4, 5, 6, 7, 8, 9] == incr_list([9, 8, 7, 6, 5, 4])\nassert         [0, 1, 2, 3, 4, 5, 6] == incr_list([6, 5, 4, 3, 2, 1, 0])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [incr_list(l) for l in [[5], [6], [7], [8], [9]]] == [[6], [7], [8], [9], [10]]\nassert     [incr_list(l) for l in [[0], [1], [2], [3], [4]]] == [[1], [2], [3], [4], [5]]\nassert     [incr_list(l) for l in [[0], [1], [2], [3], [4], [5]]] == [[1], [2], [3], [4], [5], [6]]\n\ndef to_string(l: list):\n    \"\"\"Return string from list, with each element separated by \" \".\"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     incr_list([0, 1, 2, 3]) == [1, 2, 3, 4]\nassert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1]) == [2]\nassert     incr_list([]) == []\n\ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1,2,-2,-1])\nassert     not pairs_sum_to_zero([1,2,3,-1])\nassert     not pairs_sum_to_zero([1,2,3,-1,1])\nassert     not pairs_sum_to_zero([])\nassert     not pairs_sum_to_zero([1,2,3,4,5,-1])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         pairs_sum_to_zero([]) == False, \"fails 1\"\nassert         pairs_sum_to_zero([1]) == False, \"fails 2\"\nassert         pairs_sum_to_zero([1, 1]) == False, \"fails 3\"\nassert         pairs_sum_to_zero([1, 1, 1]) == False, \"fails 4\"\nassert         pairs_sum_to_zero([1, -1, -1, 1]) == True, \"fails 5\"\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([0, 5, -1, -8, 3, -4, 0, -1]) == True\nassert     pairs_sum_to_zero([0, 5, -1, -8, 3, -4, 0, -10]) == False\nassert     pairs_sum_to_zero([0, 5, -1, -8, 3, -4, -1]) == False\nassert     pairs_sum_to_zero([0, 0, 0]) == True\nassert     pairs_sum_to_zero([0, 0, 1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4]) == False\nassert     pairs_sum_to_zero([1,2,3,-4]) == True\nassert     pairs_sum_to_zero([1,2,3,1]) == False\nassert     pairs_sum_to_zero([]) == None\nassert     pairs_sum_to_zero([1,2,3,1,1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert _________ == pairs_sum_to_zero([1, -1, 0, -2, -3, -2, 3, 2, -1, -2])\nassert not _________ == pairs_sum_to_zero([1, 1, -2, -3, 3, -4, -5, 5, -8, 2, 5])\nassert not _________ == pairs_sum_to_zero([-1, -2, -3, -4, -5])\nassert _________ == pairs_sum_to_zero([-1, -1, -2, -3, -4, -5])\nassert not _________ == pairs_sum_to_zero([-2, -3, -4, -5])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([5, 3, -7, 8, 4, -2]) == False\nassert     pairs_sum_to_zero([4, 1, -2, 3, 5, -4]) == True\nassert     pairs_sum_to_zero([3, 4, -2, 4, 5, -4, 4]) == False\nassert     pairs_sum_to_zero([-4, -3, -2, 4, 5, 3, 6]) == True\nassert     pairs_sum_to_zero([-2, -4, -4, 5, 2, 3, -8]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1,3,2,3,1,1,1,1,1,1,1,1,1]) == True\nassert     pairs_sum_to_zero([1,3,2,3,1,1,1,1,1,1,1,1,-1]) == True\nassert     pairs_sum_to_zero([1,3,2,3,1,1,1,1,1,1,1,1,2]) == False\nassert     pairs_sum_to_zero([1,3,2,3,1,1,1,1,1,1,1,1,0]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1]) == False\nassert     pairs_sum_to_zero([1, 2, 3]) == False\nassert     pairs_sum_to_zero([1, 2, 3, -4]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -4, 5]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([-10,-9,-5,6,8,10]) == True\nassert     pairs_sum_to_zero([1,-1,-3,3,3,4]) == False\nassert     pairs_sum_to_zero([-3,-1,1,-3,3,-4,-4,-3,0,1,3,4]) == False\n\ndef find_triplets(arr, target):\n    \"\"\"\n    find_triplets takes as input a sorted list of distinct integers and\n    a target integer. It returns True if there are exactly three distinct\n    elements in the list that sum to exactly the target integer, and\n    False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1,2,3]) == False\nassert     pairs_sum_to_zero([1,2,-3]) == True\nassert     pairs_sum_to_zero([-1,2,3]) == True\nassert     pairs_sum_to_zero([-1,-2,3]) == False\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     change_base(100, 10) == '1'\nassert     change_base(100, 2) == '101'\nassert     change_base(100, 16) == '1010'\nassert     change_base(100, 8) == '101'\nassert     change_base(100, 2) == '101'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     change_base(0, 16) == '0'\nassert     change_base(0, 10) == '0'\nassert     change_base(1, 16) == '1'\nassert     change_base(15, 16) == 'F'\nassert     change_base(16, 16) == '10'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     change_base(10, 2) == '1010'\nassert change_base(10, 3) == '101'\nassert change_base(10, 16) == 'A'\nassert change_base(1010, 2) == '101010'\nassert change_base(1010, 16) == 'A'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     change_base(10,10) == \"1\"\nassert change_base(10,8) == \"8\"\nassert change_base(10,16) == \"A\"\nassert change_base(10,2) == \"1010\"\nassert change_base(10,3) == \"101\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ___________ == change_base(x, y)\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     change_base(13, 16) == '13'\nassert     change_base(13, 10) == '3'\nassert     change_base(13, 8) == '13'\nassert     change_base(13, 2) == '1'\nassert     change_base(13, 8) == '13'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     change_base(123, 16) ==     '7b'\nassert     change_base(4589, 16) ==     '7d'\nassert     change_base(1234, 16) ==     '7c'\nassert     change_base(123456789, 16) ==     '7f'\nassert     change_base(123456789, 8) ==     '73'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     change_base(x=13, base=2) == '101'\nassert     change_base(x=13, base=16) == '13'\nassert     change_base(x=13, base=3) == '11'\nassert     change_base(x=13, base=0) == '13'\nassert     change_base(x=0, base=2) == '0'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     change_base(1, 2) == '1'\nassert     change_base(25, 2) == '1'\nassert     change_base(5, 8) == '101'\nassert     change_base(35, 8) == '101'\nassert     change_base(125, 8) == '101'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     change_base(16, 16)     == '1', '16'\nassert     change_base(16, 8)     == '10', '16'\nassert     change_base(16, 2)     == '1010', '16'\nassert     change_base(16, 3)     == '11', '16'\nassert     change_base(16, 4)     == '100', '16'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(2, 3) == 3\nassert     triangle_area(2, 2.5) == 1.75\nassert     triangle_area(4, 10) == 40\nassert     triangle_area(0, 5) == 0\nassert     triangle_area(2, 0) == 0\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triangle_area(3, 2) == 2\nassert     triangle_area(4, 6) == 3\nassert     triangle_area(1, 1) == 0.5\nassert     triangle_area(5, 5) == 7.75\n\ndef my_function(x, y):\n    \"\"\"Return the sum of two numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(5,10) == 30\nassert     triangle_area(10,10) == 100\nassert     triangle_area(20,20) == 400\nassert     triangle_area(0,0) == 0\nassert     triangle_area(2,4) == 2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(4,5) == 5.0\nassert     triangle_area(5,5) == 10.0\nassert     triangle_area(5,3) == 6.0\nassert     triangle_area(5,2) == 3.0\nassert     triangle_area(5,1) == 1.5\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(5, 10) == 50\nassert     triangle_area(2, 4) == 8\nassert     triangle_area(2, 2) == 4\nassert     triangle_area(2, 1) == 2\n\ndef rectangle_area(l, w):\n    \"\"\"Given length and width of a rectangle, returns its area.\"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(4, 3) == 7.5\nassert     triangle_area(8, 6) == 16\nassert     triangle_area(5, 10) == 25\nassert     triangle_area(12, 5) == 60\nassert     triangle_area(12, 8) == 72\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(4, 6) == 6.0, \"Wrong area for (4, 6)\"\nassert     triangle_area(3, 4) == 3.0, \"Wrong area for (3, 4)\"\nassert     triangle_area(6, 4) == 12.0, \"Wrong area for (6, 4)\"\n\ndef rectangle_area(w, h):\n    \"\"\"Given width and high return area for a rectangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(4,3) == 3\nassert     triangle_area(1,6) == 0\nassert     triangle_area(2,3) == 2\nassert     triangle_area(3,2) == 1\nassert     triangle_area(1,2) == 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ______________ == triangle_area(3, 4)\nassert ______________ == triangle_area(5, 10)\nassert ______________ == triangle_area(8, 15)\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(10, 5) == 50\nassert     triangle_area(10, 6) == 30\nassert     triangle_area(11, 4) == 22\nassert     triangle_area(10, 10) == 100\nassert     triangle_area(0, 3) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib4(0)     == 0\nassert     fib4(1)     == 0\nassert     fib4(2)     == 1\nassert     fib4(3)     == 0\nassert     fib4(4)     == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fib4(0)         == 0\nassert     fib4(1)         == 0\nassert     fib4(2)         == 2\nassert     fib4(3)         == 0\nassert     fib4(4)         == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [fib4(i) for i in range(10)] == [0, 0, 1, 0, 2, 0, 3, 0, 5, 0]\nassert     [fib4(i) for i in range(0, 22)] == [0, 0, 1, 0, 2, 0, 3, 0, 5, 0, 8, 0, 13, 0, 21, 0, 34, 0, 55, 0, 89, 0, 144, 0, 233, 0, 377, 0, 610, 0, 987, 0, 1597, 0, 2584, 0, 4181, 0, 6765, 0, 10946, 0, 17711, 0, 28657, 0, 46368, 0, 75025, 0, 121393, 0, 196418, 0, 317811, 0, 514229, 0, 832040, 0, 1346269, 0, 2178309, 0, 3524578, 0, 5702887, 0, 9227465, 0, 14930352, 0, 24157817, 0, 39088169, 0, 63245986, 0, 102334155, 0, 165580141, 0, 267914296, 0, 433494437, 0, 701408733, 0, 1134903170, 0, 1836311903, 0, 2971215073, 0, 4807526976, 0, 7778742049, 0, 12586269025, 0, 20365011074, 0, 32951280099, 0, 55364365920, 0, 8922100202, 0, 14420996447, 0, 24578966311, 0, 4401182267, 0, 71181137486, 0, 94371876000, 0, 15480087559, 0, 25794132037, 0, 4601980145, 0]"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 1\nassert     fib4(4) == 1\nassert     fib4(5) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     median([1, 3, 5, 7]) == 5\nassert     median([1, 3, 5, 7, 9]) == 6\nassert     median([1, 3, 5, 7, 9, 11]) == 7\nassert     median([1, 3, 5, 7, 9, 11, 13]) == 9\nassert     median([1, 3, 5, 7, 9, 11, 13, 15]) == 11\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     median([0, 1, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert     median([0, 1, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     median([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\nassert     median([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 7\nassert     median([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 7\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3.0\nassert     median([3, 1, 2, 5, 3]) == 3.0\nassert     median([1, 100, 2, 200]) == (100 + 200) / 2\nassert     median([-1, -100, -2, -200]) == -100\nassert     median([]) == None\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     median([1, 2, 3, 4]) == 2.5\nassert     median([5, 2, 4, 4]) == 3\nassert     median([2, 3, 4, 5]) == 3.5\nassert     median([2, 3, 4, 5, 6]) == 4\nassert     median([]) == None\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4]) == 2.5\nassert     median([2, 2, 3]) == 2\nassert     median([]) == None\n\ndef standard_deviation(l: list):\n    \"\"\"Return standard deviation of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     median([0]) == 0\nassert     median([]) == None\nassert     median([1]) == 1\nassert     median([1,2,3]) == 2\nassert     median([1,2,3,4]) == 2.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, -1]) == 2.5\nassert     median([2, 1, 2, 3, 4, -1, 0, -2, -3, -4]) == 1.5\nassert     median([3, 2, 1, 2, 3, 4, -1, 0, -2, -3, -4]) == 3\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     median([1,2,3]) == 2\nassert     median([1,2,3,4]) == 2.5\nassert     median([1,2,3,4,5]) == 3\nassert     median([1,2,3,4,5,6,7,8,9,10]) == 3.5\nassert     median([4,5,6,7,8,9,10]) == 5\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_palindrome('abba') == True, 'Example'\nassert     is_palindrome('abcd') == False, 'Example'\nassert     is_palindrome('') == True, 'Empty String'\nassert     is_palindrome('a') == True, 'a'\nassert     is_palindrome('Bob') == True, 'Bob'\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         is_palindrome(\"radar\") == True\nassert         is_palindrome(\"atco\") == False\nassert         is_palindrome(\"taco cat\") == True\nassert         is_palindrome(\"taco\") == True\nassert         is_palindrome(\"t\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('aa') == True\nassert     is_palindrome('aaa') == False\nassert     is_palindrome('aab') == False\nassert     is_palindrome('aabba') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abab\") == True\nassert     is_palindrome(\"abcba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"abca\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         is_palindrome('a') == True\nassert         is_palindrome('aba') == True\nassert         is_palindrome('abcd') == False\nassert         is_palindrome('abba') == True\nassert         is_palindrome('abcba') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"12321\") == True\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"0\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_palindrome('ABBA') == True, 'WAI'\nassert     is_palindrome('ABA') == True, 'WAI'\nassert     is_palindrome('A') == True, 'WAI'\nassert     is_palindrome('') == True, 'WAI'\nassert     is_palindrome('A man, a plan, a canal: Panama') == True, 'WAI'\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"racecar\") == True\nassert     is_palindrome(\"qqqqq\") == True\nassert     is_palindrome(\"abab\") == True\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         is_palindrome('racecar')\nassert     is_palindrome('foobar')\nassert     is_palindrome('abba')\nassert     not is_palindrome('foobar')\nassert     not is_palindrome('tacocat')\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"abcdcba\") == True\nassert     is_palindrome(\"abcdcbaa\") == False\nassert     is_palindrome(\"kacdkac\") == True\nassert     is_palindrome(\"hello\") == False\n\n\ndef is_isogram(text: str):\n    \"\"\"\n    Checks if given string is an isogram\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     modp(0, 255) == 1\nassert     modp(1, 255) == 0\nassert     modp(255, 255) == 1\nassert     modp(2**256 - 1, 255) == 0\nassert     modp(2**256, 255) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     modp(2, 2) == 1\nassert modp(2, 4) == 3\nassert modp(2, 5) == 2\nassert modp(2, 8) == 3\nassert modp(2, 13) == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef divp(n: int, p: int):\n    \"\"\"Return n / p (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef from_str(s: str) -> int:\n    \"\"\"Return the number represented by the string s.\"\"\"\n    pass\n\ndef to_str(n: int) -> str:\n    \"\"\"Return the string representation of the number n.\"\"\"\n    pass\n\ndef test_from_str():\n    assert from_str('') == 0\n    "
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert 0000000000000000000000001 %  (5 ** 159) == 1\nassert modp(159, 5) == 1\nassert modp(160, 5) == 5\nassert modp(160, 1117) == 1\nassert modp(160, 2 ** 160 - 1) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     modp(2, 2) == 1\nassert     modp(2, 3) == 2\nassert     modp(2, 5) == 2\nassert     modp(2, 4) == 2\nassert     modp(3, 3) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert 00000000000000000000 % 5 == 1\nassert modp(0, 5) == 1\nassert modp(1, 5) == 2\nassert modp(2, 5) == 4\nassert modp(3, 5) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert 00000000000000000000000000000001 % 15 == 1\nassert 98765432109876 % 15 == 1\nassert modp(100, 3) == 6\nassert modp(2**100, 3) == 1\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode_shift(\"a\") == \"b\"\nassert     encode_shift(\"b\") == \"c\"\nassert     encode_shift(\"c\") == \"d\"\nassert     encode_shift(\"d\") == \"e\"\nassert     encode_shift(\"e\") == \"f\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decode_shift(\"aioppu\", 5) == \"hello\"\nassert     decode_shift(\"bqzwb\", 5) == \"lovely\"\nassert     decode_shift(\"zptkzv\", 5) == \"dogs\"\nassert     decode_shift(\"sjpzke\", 5) == \"tiger\"\nassert     decode_shift(\"kqcqm\", 5) == \"lose\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decode_shift(encode_shift(\"foobar\")) == \"foobaz\"\nassert     decode_shift(encode_shift(\"barfoo\")) == \"barfoobaz\"\nassert     decode_shift(encode_shift(\"foobaz\")) == \"foobar\"\nassert     decode_shift(encode_shift(\"barfoobaz\")) == \"barfoo\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode_shift(\"Hello\") == encode_shift(decode_shift(\"Hello\"))\nassert     encode_shift(\"A very long string\") == encode_shift(decode_shift(\"A very long string\"))\nassert     encode_shift(\"aaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode_shift(\"hello\") == \"uryyb\"\nassert     encode_shift(\"i\") == \"if\"\nassert     encode_shift(\"w\") == \"za\"\nassert     encode_shift(\"a\") == \"ab\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decode_shift(\"abc\") == \"abc\"\nassert     decode_shift(\"zxy\") == \"abc\"\nassert     decode_shift(\"zzz\") == \"abc\"\nassert     decode_shift(\"zzz\") == \"zabc\"\nassert     decode_shift(\"zxy\") == \"abc\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decode_shift(encode_shift(\"a\")) == \"a\"\nassert decode_shift(encode_shift(\"b\")) == \"b\"\nassert decode_shift(encode_shift(\"z\")) == \"z\"\nassert decode_shift(encode_shift(\"aa\")) == \"ab\"\nassert decode_shift(encode_shift(\"hello\")) == \"hello\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decode_shift(encode_shift(\"helloworld\")) == \"helloworld\"\n\n\ndef substitute_char(s: str, d: str, c: str):\n    \"\"\"\n    takes as input string, dictionary of words, and target character. Returns decoded string.\n    \"\"\"\n    pass\n\n\ndef increment_char(s: str, d: str, c: str):\n    \"\"\"\n    takes as input string, dictionary of words, and target character. Returns decoded string.\n    \"\"\"\n    pass\n\n\ndef apply_changes(s: str, d: dict):\n    \"\"\"\n    takes as input string, dictionary of words. Returns decoded string.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    print(encode_shift(\"hello\"))\n    "
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decode_shift(\"Xqgwuhxlqjhkzsdhfskjhsdfjsdhfhsdfjksdhfhkshfhkhjhkhfkhjkkhfkhkjkhkhkkhkkhkkh\")         == \"Alohomora\"\nassert     decode_shift(\"gwwhgqjxlqjhkzsdhfskjhsdfjsdhfhsdfjksdhfhkshfhkhjhkhfkhjkkhfkhkjkhkkhkkhkkh\")         == \"Alohomora\"\nassert     decode_shift(\"gwwhgqjxlqjhkzsdhfskjhsdfjsdhfhsdfjksdhfhkshfhkhjhkhfkhjkkhfkhkjkhkkhkkh\")         == \"Alohomora\"\nassert     decode_shift(\"Xqgwuhxlqjhkzsdhfskjhsdfjsdhfhsdfjksdhfhkshfhkhjhkhfkhjkkhfkhkjkhkkhkkh\")         == \"Alohomora\"\nassert     decode_shift(\"gwwhgqjxlqjhkzsdhfskjhsdfjsdhfhsdfjksdhfhkshfhkhjhkhfkhjkkhfkhkjkhkkh\")         == \"Alohomora\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_vowels('restart') =='restarth'\nassert     remove_vowels('A') == 'A'\nassert     remove_vowels('tomato') == 'tmoat'\nassert     remove_vowels('Alice') == 'alice'\nassert     remove_vowels('APPLE') == 'appl'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_vowels(\"abcd\") == \"bc\"\nassert     remove_vowels(\"APPLE\") == \"P\"\nassert     remove_vowels(\"Hello, I am coding in Python!\") == \"H!, I am coding in Python\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_vowels('programming') == 'prgmng'\nassert     remove_vowels('prog') == 'pg'\nassert     remove_vowels('programe') == 'progr'\nassert     remove_vowels('hello world') == 'hll wrd'\nassert     remove_vowels('program') == 'prgm'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nassert\n\nassert\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_vowels(\"apple\") == \"lppl\"\nassert     remove_vowels(\"banana\") == \"bnn\"\nassert     remove_vowels(\"zebra\") == \"zbr\"\nassert     remove_vowels(\"shark\") == \"srh\"\nassert     remove_vowels(\"tomato\") == \"tmo\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"\")    == \"\"\nassert     remove_vowels(\"a\")    == \"\"\nassert     remove_vowels(\"The quick brown fox jumped over the lazy dog\") == \"Thq brwn fx jmps vr th lzy do\"\nassert     remove_vowels(\"The quick brown fox jumped over the lazy dog\", remove_vowels_with=\"stvwxyz\") == \"Thq brwn fx jmps vr th lzy do\"\nassert     remove_vowels(\"The quick brown fox jumped over the lazy dog\", remove_vowels_with=\"bcdfghjklmnpqrstvwxyz\") == \"Thq brwn fx jmps vr th lzy do\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_vowels('hooligan') == 'holng', \\\n                'expect'+ 'holng' +'but get'+ remove_vowels('holng')\nassert     remove_vowels('programming') == 'progr', \\\n                'expect'+ 'progr' +'but get'+ remove_vowels('programming')\nassert     remove_vowels('a_program') == 'apr', \\\n                'expect'+ 'apr' +'but get'+ remove_vowels('a_program')\nassert     remove_vowels('9999') == '9', \\\n                'expect'+ '9' +'but get'+ remove_vowels('9999')\n\ndef count_vowels(text):\n    \"\"\"\n    count_vowels is a function that takes string and returns tuple of count of vowels and count of consonants\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_vowels('hello') == 'hll', 'fail'\nassert     remove_vowels('world') == 'wld', 'fail'\nassert     remove_vowels('python') == 'ythn', 'fail'\nassert     remove_vowels('a') == '', 'fail'\nassert     remove_vowels('man') =='m', 'fail'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_vowels(\"python\") == \"tHnp\"\nassert     remove_vowels(\"school\") == \"lk\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"   \") == \"\"\nassert     remove_vowels(\"   pYthon  \") == \"   pYnthn  \"\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert __________ == below_threshold([6, 3, 4, 2, 5, 7], 5)\nassert __________ == below_threshold([6, 3, 4, 2, 5, 7], 10)\nassert __________ == below_threshold([6, 3, 4, 2, 5, 7], 2)\nassert __________ == below_threshold([6, 3, 4, 2, 5, 7], 0)\n\ndef odd(x: int):\n    \"\"\"Return True if the given number x is odd.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5, 6], 4) == True\nassert     below_threshold([1, 2, 3, 4, 5, 6], 5) == False\nassert     below_threshold([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == False\nassert     below_threshold([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 4) == True\nassert     below_threshold([1, 2, 3, 4, 5], 4) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_threshold([1, 2, 3, 4], 2) == True\nassert     below_threshold([1, 2, 3, 4], 1) == False\nassert     below_threshold([1, 2, 3, 4], 4) == True\nassert     below_threshold([1, 2, 3, 4], 5) == False\nassert     below_threshold([1], 1) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert ____________ == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert _________ == True\nassert _________ == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     above_threshold([1, 2, 3], 0)\nassert not     above_threshold([1, 2, 3], 2)\nassert not     above_threshold([1, 2, 3], 3)\nassert     above_threshold([1, 2, 3], 1)\nassert     above_threshold([1, 2, 3], 2)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (below_threshold([0,0,1,1,0], 0) == True)\nassert     (below_threshold([0,0,1,1,0], 1) == False)\nassert     (below_threshold([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12], -10) == True)\nassert     (below_threshold([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12], 0) == False)\nassert     (below_threshold([1,2,3,4,5,6,7,8,9,10,11,12], 12) == True)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_threshold([1, 2, 3, 4], 0) == True\nassert     below_threshold([1, 2, 3, 4], 1) == False\nassert     below_threshold([1, 2, 3, 4], 2) == True\nassert     below_threshold([1, 2, 3, 4], 4) == True\nassert     below_threshold([1, 2, 3, 4], 5) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_threshold([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 4) is True\nassert     below_threshold([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 3) is False\nassert     below_threshold([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 2) is True\nassert     below_threshold([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) is True\nassert     below_threshold([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 0) is False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [below_threshold([1, 2, 3, 4, 5], 3)] == [False, True, False, False, False]\nassert     [below_threshold([10, 5, 3, 7], 8)] == [True, False, True, False]\n\n\ndef remove_below_threshold(l: list, t: int):\n    \"\"\"Return a list with all elements from the original list l that are below threshold t removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add(1,2) == 3\nassert     add(1.1,2.2) == 3.3\nassert     add(1.1,2.2) == 3.3\nassert     add(1,2.2) == 3.3\nassert     add(1,'2') == 3\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add(2, 3) == 5, \"add(2, 3) == 5\"\nassert     add(10, 2) == 12, \"add(10, 2) == 12\"\nassert     add(2, -3) == 1, \"add(2, -3) == 1\"\nassert     add(-2, 3) == -1, \"add(-2, 3) == -1\"\nassert     add(-2, -3) == -5, \"add(-2, -3) == -5\"\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add(1, 1) == 2\nassert     add(1, 2) == 3\nassert     add(2, 1) == 3\n\ndef add_2d(x: list, y: list):\n    \"\"\"Add two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add(1, 2) == 3\nassert     add(1, -2) == -1\nassert     add(1, 2.5) == 3.5\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add(1, 1) == 2\nassert     add(1, 2) == 3\nassert     add(2, 1) == 3\n\ndef sub(x: int, y: int):\n    \"\"\"Substract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         (add(2, 3)    == 5)\nassert         (add(-2, 3)    == 1)\nassert         (add(2.5, 3.5)    == 5.5)\nassert         (add(2.5, -3.5) == 1.5)\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     same_chars('a', 'a') == True\nassert     same_chars('a', 'ab') == False\nassert     same_chars('ab', 'a') == False\nassert     same_chars('ab', 'ab') == True\nassert     same_chars('ab', 'ab1') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     same_chars('hello', 'hello')\nassert     not same_chars('hello', 'hello1')\nassert     same_chars('hello', 'hello2')\nassert     same_chars('hello', 'hell')\nassert     same_chars('hello', 'hell1')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     same_chars('John', 'John') == True\nassert     same_chars('Alice', 'John') == False\nassert     same_chars('JOHNN', 'JOHNN') == True\nassert     same_chars('JOHNN', 'John') == False\nassert     same_chars('JOHNN', 'JOHNN') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     same_chars('cat', 'cog') == True\nassert     same_chars('dog', 'god') == False\nassert     same_chars('foo', 'bar') == False\nassert     same_chars('a', 'b') == False\nassert     same_chars('ab', 'ba') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     same_chars(\"hello\", \"hello\") == True\nassert     same_chars(\"hello\", \"hello world\") == True\nassert     same_chars(\"hello\", \"helo\") == False\nassert     same_chars(\"hello\", \"helo world\") == False\nassert     same_chars(\"hello\", \"helo\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     same_chars('abcde', 'abcde') == True, 'a'\nassert     same_chars('abcde', 'bcdea') == True, 'bc'\nassert     same_chars('abcde', 'abce') == False, 'ab'\nassert     same_chars('abcde', 'abcda') == True, 'abc'\nassert     same_chars('abcde', 'abcdea') == True, 'abcde'\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     same_chars(\"apple\", \"apple\")\nassert     not same_chars(\"apple\", \"banana\")\nassert     same_chars(\"apple\", \"peach\")\nassert     not same_chars(\"apple\", \"app\")\nassert     same_chars(\"apple\", \"\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     same_chars('hello', 'hallo') == True\nassert     same_chars('hello', 'helo') == False\nassert     same_chars('hello', 'hel') == False\nassert     same_chars('hel', 'hello') == False\nassert     same_chars('', '') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     same_chars('John', 'Joh')\nassert     same_chars('John', 'Jon')\nassert     same_chars('Johnny', 'John')\nassert     same_chars('Johnny', 'Johnn')\nassert     same_chars('Johnn', 'John')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     same_chars('hello', 'helo') == False\nassert     same_chars('hello', 'hell') == True\nassert     same_chars('hell', 'hello') == True\n\ndef palindrome(s: str):\n    \"\"\"\n    Check if a word is a palindrome.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fib(1)     == 1\nassert     fib(2)     == 1\nassert     fib(3)     == 2\nassert     fib(4)     == 3\nassert     fib(5)     == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib(0) == 1\nassert     fib(1) == 1\nassert     fib(2) == 2\nassert     fib(3) == 3\nassert     fib(4) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\n\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib(0) == 1\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<><\") == True\nassert     correct_bracketing(\"<>>\") == True\nassert     correct_bracketing(\"<>>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<><><\")\nassert     correct_bracketing(\"<<><\")\nassert     correct_bracketing(\"<><<<<>\")\nassert     correct_bracketing(\"<<><>>><<<<<>>\")\nassert     correct_bracketing(\"\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<()>\")\nassert     correct_bracketing(\"<()>\")\nassert     correct_bracketing(\"<(>)\")\nassert     correct_bracketing(\"<(>)>\")\nassert     correct_bracketing(\"<(>)><\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<>>><>>\") == True\nassert correct_bracketing(\"<<>>><>>><\") == False\nassert correct_bracketing(\"<<>>><\") == False\nassert correct_bracketing(\"<<>>><\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"<<>>\") == True\nassert     correct_bracketing(\"<><<<>\") == True\nassert     correct_bracketing(\"<>>><><\") == True\nassert     correct_bracketing(\">>><>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"<\") == True\nassert     correct_bracketing(\">\") == True\nassert     correct_bracketing(\"<><>\") == True\nassert     correct_bracketing(\"<><\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<> <>\") == True\nassert     correct_bracketing(\"< < >\") == True\nassert     correct_bracketing(\"< > < >\") == True\nassert     correct_bracketing(\"< < < < >\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\">\")\nassert     correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<><\")\nassert     correct_bracketing(\"<><\")\nassert     not correct_bracketing(\"<><>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<>)\") == True\nassert     correct_bracketing(\"<(>)\") == False\nassert     correct_bracketing(\"<(>)>\") == False\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<><>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<[<>]>\") == True\nassert     correct_bracketing(\"<[<>>]>\") == False\nassert     correct_bracketing(\"<[<[<>>]]>\") == True\nassert     correct_bracketing(\"<[<[<[<[<>>]>>>>]]>>\") == False\nassert     correct_bracketing(\"<[<<]<>\") == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     monotonic(lst1)\nassert     monotonic(lst2)\nassert     not monotonic(lst3)\nassert     not monotonic(lst4)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1]) == True\nassert     monotonic([-1]) == True\nassert     monotonic([1,2,3]) == True\nassert     monotonic([1,2,3,3]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef permutations(l: list):\n    \"\"\"Return all permutations of the given list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     monotonic( [1, 1, 2, 3, 4, 5]) == False\nassert     monotonic( [1, 2, 3, 4, 5, 5]) == True\nassert     monotonic( [1, 2, 3, 4, 5]) == True\nassert     monotonic( [5, 4, 3, 2, 1]) == True\nassert     monotonic( [1, 2, 3, 3, 2]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([3,1,2]) == True\nassert     monotonic([3,1,2,4,3,5,6,4,7]) == True\nassert     monotonic([3,1,2,4,3,5,6,4,7,-3,-5,-4,-4]) == False\n\ndef percent(num: float, den: float):\n    \"\"\"Return the percentage of num, den.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     monotonic([1, 2, 3, 4, 5, 6, 7]) == False\nassert     monotonic([1, 2, 3, 4, 4, 5, 6]) == True\nassert     monotonic([1, 1, 1, 1]) == True\nassert     monotonic([1, 2, 1, 3, 2, 4, 5, 5]) == False\nassert     monotonic([5, 4, 3, 2, 1]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     monotonic([1, 2, 3, 4, 5])\nassert     monotonic([1, 2, 1])\nassert     not monotonic([1, 3, 2, 4, 5])\nassert     not monotonic([5, 4, 3, 2, 1])\nassert     not monotonic([1, 1, 1, 1, 1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     monotonic([1, 2, 3]) == True\nassert     monotonic([1, 2, 1]) == False\nassert     monotonic([1, 2, 2]) == False\nassert     monotonic([1, 2, -1]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     monotonic([1, 1, 2, 2, 2, 3])\nassert     not monotonic([1, 1, 1, 2, 2, 2])\nassert     not monotonic([1, 1, 2, 2, 2, 2])\nassert     not monotonic([2, 2, 2, 2, 2, 2])\nassert     not monotonic([3, 2, 1, 2, 2, 2])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     monotonic([1,2,3,4,5]) == True\nassert     monotonic([1,2,4,3,5]) == False\nassert     monotonic([1,2,3,4,3]) == False\nassert     monotonic([3,2,1,5,4]) == False\nassert     monotonic([3,2,1,5,4,3]) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common([1, 2, 3], [2, 3, 4]) == [1, 2]\nassert     common([3, 4], [1, 2, 3]) == [1, 2]\nassert     common([1, 3, 5], [2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3], [3, 2, 1]) == [1, 2, 3]\nassert     common([1, 2], [3, 4, 5]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     common(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     common(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\nassert     common(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common([1, 1, 2, 3, 5, 8], [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     common([1, 1, 2, 3, 5, 8], []) == []\nassert     common([], [1, 2, 3, 4, 5, 6, 7, 8]) == []"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common([1,2,3,4,5], [1,2,3,4,6]) == [1,2,3,4,5]\nassert     common([1,2,3,4], [1,2,3,4,6]) == [1,2,3,4]\nassert     common([1,2,3,4], []) == [1,2,3,4]\nassert     common([], [1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common([], [1, 2, 3, 4]) == []\nassert     common([], []) == []\nassert     common([1, 2, 3, 4], []) == []\nassert     common([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     common([1, 2, 3, 4], [1, 2, 5, 6]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 2, 3] == common([1, 1, 2, 3, 3], [1, 2, 3])\nassert     [0, 1, 2, 3] == common([0, 1, 2, 3, 3], [1, 2, 3])\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     common([1,2,3], [1,2,3,4]) == [1,2]\nassert     common([], [1,2,3,4]) == []\nassert     common([1,2,3], []) == [1,2,3]\nassert     common([1,2,3,4,5,6], [2,3]) == [2,3]\nassert     common([1,2,3,4,5,6], [2,3,4]) == [2,3,4]"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 4, 5] == common([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])\nassert     [1, 2, 3] == common([1, 2, 3], [1, 2, 3])\nassert     [1, 2, 3, 4, 5] == common([1, 2, 3, 4, 5], [1, 2, 3])\nassert     [] == common([], [1, 2, 3])\nassert     [1] == common([1], [1, 2, 3])\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common([], []) == []\nassert     common([1], [1]) == [1]\nassert     common([1, 2], [1, 2]) == [1, 2]\nassert     common([1, 2], [1, 3]) == [1]\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     list(common(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'])) == ['a', 'b', 'c', 'd']\nassert list(common(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e'])) == ['a', 'b', 'c']"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(11) == 11\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(17) == 17\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(21) == 7\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(99) == 7\nassert     largest_prime_factor(998244353) == 97\nassert     largest_prime_factor(987654321) == 9\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     16 == largest_prime_factor(16)\nassert     4 == largest_prime_factor(4)\nassert     2 == largest_prime_factor(2)\nassert     5 == largest_prime_factor(5)\nassert     5 == largest_prime_factor(25)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(20) == 2\nassert     largest_prime_factor(21) == 3\nassert     largest_prime_factor(19) == 19\nassert     largest_prime_factor(22) == 2\nassert     largest_prime_factor(23) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     6 == largest_prime_factor(6)\nassert     9 == largest_prime_factor(18)\nassert     27 == largest_prime_factor(225)\nassert     357 == largest_prime_factor(4197)\nassert     4817 == largest_prime_factor(3*5*7)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(13) ==     3\nassert     largest_prime_factor(17) ==     17\nassert     largest_prime_factor(19) ==     19\nassert     largest_prime_factor(25) ==     5\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     23 % 17 == 0\nassert     3 % 19 == 3\nassert     2 % 29 == 2\nassert     2 % 31 == 2\nassert     3 % 37 == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(29) == 29\nassert     largest_prime_factor(18) == 2\nassert     largest_prime_factor(27) == 3\nassert     largest_prime_factor(14) == 7\nassert     largest_prime_factor(4) == 4\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 1+1\nassert     sum_to_n(3) == 1+1+1\nassert     sum_to_n(4) == 1+1+1+1\nassert     sum_to_n(5) == 1+1+1+1+1\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum_to_n(0) == 0)\nassert     (sum_to_n(1) == 1)\nassert     (sum_to_n(5) == 15)\nassert     (sum_to_n(10) == 55)\nassert     (sum_to_n(50) == 75025)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef check_nums(num1: int, num2: int):\n    \"\"\"check_nums is a function that takes two numbers, num1 and num2,\n    and returns True if num1 and num2 can be added up to be equal to each other.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         sum_to_n(1)         ==     1\nassert         sum_to_n(2)         ==     3\nassert         sum_to_n(10)     ==     55\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_to_n(2) == 2\nassert     sum_to_n(4) == 10\nassert     sum_to_n(8) == 36\n\ndef print_to_n(n):\n    \"\"\"print_to_n is a function that prints integers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (sum_to_n(1) == 1)\nassert     (sum_to_n(2) == 3)\nassert     (sum_to_n(3) == 6)\nassert     (sum_to_n(4) == 10)\nassert     (sum_to_n(5) == 15)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 55\nassert     sum_to_n(1000000) == 50502500\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()))\") == False\nassert     correct_bracketing(\"((()\")) == False\nassert     correct_bracketing(\"((()\") == False\nassert     correct_bracketing(\"(()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"()\") is True\nassert     correct_bracketing(\"()()\") is True\nassert     correct_bracketing(\"()(\") is False\nassert     correct_bracketing(\"())(\") is False\nassert     correct_bracketing(\"((())(()()()))\") is True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"())\") == False\nassert     correct_bracketing(\"()))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \ncorrect_bracketing(\")\")\ncorrect_bracketing(\"(()())\")\ncorrect_bracketing(\"(())(\")\ncorrect_bracketing(\")(())\")\n\ncorrect_bracketing(\"()(())\")\ncorrect_bracketing(\"((())\")\ncorrect_bracketing(\")()()\")\n\ncorrect_bracketing(\"(()())()\")\ncorrect_bracketing(\"()()(\")\ncorrect_bracketing(\")(\")\ncorrect_bracketing(\"()())()\")\n\ncorrect_bracketing(\"\")\ncorrect_bracketing(\"()\")\ncorrect_bracketing(\"()()(())\")\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing('()')\nassert     correct_bracketing('(())')\nassert     not correct_bracketing('(())((()))')\nassert     correct_bracketing('((())')\nassert     correct_bracketing('(()(()'))\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\") is True\nassert     correct_bracketing(\"(()())\") is True\nassert     correct_bracketing(\"((()())\") is False\nassert     correct_bracketing(\"(()()\") is False\nassert     correct_bracketing(\"()(())\") is False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()))\") == False\nassert     correct_bracketing(\"(()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef find_nth_bracket(brackets: str, n: int) -> int:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return the index of the nth closing bracket.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\")()(\") == False\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(())((()))\") == True\nassert     correct_bracketing(\"((()()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(\") == True\nassert     correct_bracketing(\")\") == True\nassert     correct_bracketing(\"(()\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"()())\") == True\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     derivative([1,2,3])    == [0,2,6]\nassert     derivative([1,2,3,4])    == [0,1,2,6]\nassert     derivative([1,2,3,4,5])    == [0,1,2,6,15]\nassert     derivative([1,2,3,4,5,6])    == [0,1,2,6,15,24]\nassert     derivative([1,2,3,4,5,6,7])    == [0,1,2,6,15,24,36]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     derivative( [ 0, 1, 0, -5, 2 ] ) == [ 0, 0, 0, -4, 0]\nassert derivative( [ 0, 1, 0, -2 ] ) == [ 0, 0, 0, 0, 0]\nassert derivative( [ 0, 1, 0, -1 ] ) == [ 0, 0, 0, 0, 0]\nassert derivative( [ 1, 0, 1 ] ) == [ 0, 0, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    xs = [-1, 1, 0]\n    f = lambda x: 4 * x**3 - 3 * x**2 + 1\n    f_prime = lambda x: 8 * x**2 - 6 * x + 1\n    #print('Original polynomial f(x) = {}'.format(f(xs)))\n    #print('Derivative of polynomial f(x) = {}'.format(derivative(xs)))\n    \n    # newton method\n    newton_method(xs, f, f_prime)\n    \n    # newton method\n    exact_newton_method(xs, f, f_prime)\n    \n    # to check the accuracy, we can also plot the polynomial in the real numbers to\n    # see if the newton method is accurate.\n    # plot_polynomial(xs, f, 'Newton method')\n    \n    # plot_polynomial(xs, f, 'Exact Newton method')"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef eval(xs: list, x: float) -> float:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return value of this polynomial at x.\n    \"\"\"\n    pass\n\ndef main():\n    xs = [1, 0.8, 0.5]\n    y = eval(xs, 1)\n    print(y)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     derivative([1, 2, 3]) == [2, 6, 4]\nassert derivative([3, 1, 2]) == [2, 1, 0]\nassert derivative([0]) == [0]\nassert derivative([]) == []\nassert derivative([1, 0, 2, 3]) == [3, 1, 0, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     derivative([1, 1, 1]) == 3\nassert     derivative([1, 1, 2, 1]) == 3\nassert     derivative([1, 2, 3, 4, 5]) == [6, 10, 15, 24]\nassert     derivative([1, 2, 3, 4, 5, 6, 7]) == [0, 6, 12, 20, 30]\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fibfib(1) == 1\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\nassert     fibfib(5) == 5\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(7) == 13\nassert     fibfib(10) == 55\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert izip(vowels_count('Python'), [1, 0, 0, 0, 1]) == izip(['a', 'e', 'i', 'o', 'u'], [1, 0, 0, 0, 1])\nassert izip(vowels_count('Apple'), [0, 1, 0, 0, 0]) == izip(['a', 'e', 'i', 'o', 'u'], [0, 1, 0, 0, 0])\nassert izip(vowels_count('Banana'), [0, 0, 1, 0, 0]) == izip(['a', 'e', 'i', 'o', 'u'], [0, 0, 1, 0, 0])\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert izip(vowels_count(\"aaaaaaaaaaaaaaa\"), [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'wrong result'\nassert izip(vowels_count(\"a\"), [1, 0, 0]) == [1, 0, 0], 'wrong result'\nassert izip(vowels_count(\"love\"), [1, 1, 0, 0, 1]) == [1, 1, 0, 0, 1], 'wrong result'\nassert izip(vowels_count(\"thee\"), [1, 1, 1, 0, 0]) == [1, 1, 1, 0, 0], 'wrong result'\nassert izip(vowels_count(\"v\"), [1, 0, 0]) == [1, 0, 0], 'wrong result'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     vowels_count('susan') == 2\nassert     vowels_count('amanda') == 1\nassert     vowels_count('helloworld') == 5\nassert     vowels_count('a') == 0\nassert     vowels_count('y') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     vowels_count('aioueio') == 5\nassert     vowels_count('oiuio') == 3\nassert     vowels_count('aiouy') == 4\nassert     vowels_count('a') == 1\nassert     vowels_count('aeiou') == 4\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     vowels_count('apple') == 3\nassert     vowels_count('test') == 0\nassert     vowels_count('heLLo') == 1\nassert     vowels_count('world') == 2\nassert     vowels_count('_') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     vowels_count(\"saippuakivi\") == 5\nassert     vowels_count(\"eee\") == 1\nassert     vowels_count(\"test\") == 0\nassert     vowels_count(\"Aa\") == 1\nassert     vowels_count(\"aa\") == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     vowels_count('HeLlo!') == 3\nassert     vowels_count('you!') == 1\nassert     vowels_count('Bob') == 0\nassert     vowels_count('Hello!') == 5\nassert     vowels_count('Hlelo') == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     vowels_count('hello') == 2\nassert     vowels_count('world') == 5\nassert     vowels_count('@') == 0\nassert     vowels_count('junk') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     vowels_count('hippopotamus') == 2\nassert     vowels_count('cat') == 3\nassert     vowels_count('log') == 1\nassert     vowels_count('loremipsum') == 0\nassert     vowels_count('') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     vowels_count(\"aeiou\") == 5\nassert     vowels_count(\"aeiouy\") == 5\nassert     vowels_count(\"aeiouaeiouy\") == 5\nassert     vowels_count(\"aeiouaeiouyy\") == 6\nassert     vowels_count(\"aeiouyaeiouy\") == 6\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    \"\"\"In-place rearranging of digits to form new integer\"\"\"\n\n    assert circular_shift(0, 5) == '0'\n    assert circular_shift(42, 3) == '66'\n    "
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     circular_shift(1234, 1) == 1234\nassert     circular_shift(123456789, 10) == 987654321\nassert     circular_shift(1234, 17) == 123\nassert     circular_shift(123456789, 10) == 9876543\nassert     circular_shift(1234, -10) == 4\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\n\ndef test_circular_shift():\n    assert \"24\" == circular_shift(2, 1)\n    assert \"234\" == circular_shift(2, 2)\n    assert \"235\" == circular_shift(2, 3)\n    "
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     circular_shift(123456789, 1) == 1234567890\nassert     circular_shift(123456789, 2) == 345678901\nassert     circular_shift(123456789, 3) == 56789012\nassert     circular_shift(123456789, 4) == 789012345\nassert     circular_shift(123456789, 5) == 878901234\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circular_shift(100, 1) == \"100\"\nassert     circular_shift(100, 3) == \"210\"\nassert     circular_shift(100, 0) == \"100\"\nassert     circular_shift(100, 4) == \"11\"\nassert     circular_shift(100, 5) == \"10\"\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert _________(2, 3) == '200'\nassert _________(2, 6) == '20'\nassert _________(2, 9) == '02'\nassert _________(2, 10) == '20'\nassert _________(4, 3) == '1200'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     circular_shift(0, 1) == '0'\nassert     circular_shift(0, 4) == '0'\nassert     circular_shift(9, 4) == '9'\nassert     circular_shift(8, 2) == '8'\nassert     circular_shift(12, 10) == '2'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     circular_shift(123456789, 1) == 34567891\nassert     circular_shift(123456789, -1) == 987654321\nassert     circular_shift(123456789, 3) == 98765432\nassert     circular_shift(123456789, 7) == 12345678\nassert     circular_shift(123456789, 9) == 123456789\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     circular_shift(123, 1) == 124\nassert     circular_shift(123, 2) == 21\nassert     circular_shift(123, 3) == 123\nassert     circular_shift(123, 4) == 123\nassert     circular_shift(123, 5) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circular_shift(12345, 10) == \"10111\"\nassert     circular_shift(12345, 1) == \"12345\"\nassert     circular_shift(12345, 2) == \"23451\"\nassert     circular_shift(12345, 3) == \"34510\"\nassert     circular_shift(12345, 4) == \"45001\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digitSum('abc123') == 123\nassert     digitSum('abc1') == 1\nassert     digitSum('111') == 3\nassert     digitSum('qqq') == 0\nassert     digitSum('') == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digitSum('12345') == 45\nassert     digitSum('abcdef') == 15\nassert     digitSum('ABCDEF') == 15\nassert     digitSum('!@#$%^&*()_+-=[]{};:.,<>?') == 0\nassert     digitSum('!@#$%^&*()_+-=[]{}') == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digitSum(\"abc\") == 3\nassert     digitSum(\"hello\") == 0\nassert     digitSum(\"4\") == 4\nassert     digitSum(\"101\") == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digitSum('JAz') == 12\nassert     digitSum('Hello') == 5\nassert     digitSum('NOP') == 8\nassert     digitSum('w3') == 16\nassert     digitSum('7') == 7\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    print(digitSum('a2b'))\n    print(digitSum('1a2b'))\n    print(digitSum('a12b'))\n    print(digitSum('12345'))\n    print(digitSum('12345a'))\n    print(digitSum('12345ab'))\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digitSum(\"Hello World\") == 85\nassert     digitSum(\"Hello\") == 103\nassert     digitSum(\"HellO\") == 103\nassert     digitSum(\"H\") == 104\nassert     digitSum(\"\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digitSum(\"ABCDEF\") == 26\nassert     digitSum(\"XYZ\") == 0\nassert     digitSum(\"zebra2\") == 19\nassert     digitSum(\"\") == 0\nassert     digitSum(\"hacker rank\") == 45\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digitSum(\"English\") == 4\nassert     digitSum(\"Enger\") == 5\nassert     digitSum(\"Swedish\") == 8\nassert     digitSum(\"G\") == 7\n\ndef numSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the integer digits only'\n    ASCII codes.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digitSum(\"1\") == 1\nassert     digitSum(\"12\") == 3\nassert     digitSum(\"abc\") == 0\nassert     digitSum(\"a\") == None\nassert     digitSum(\"aBc\") == 4\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         digitSum('Hey') == 0\nassert         digitSum('Hey there!') == 0\nassert         digitSum('1234567890') == 45\nassert         digitSum('This is an example') == 0\nassert         digitSum('This is an example') == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"aabbbc\", \"bbbabababaa\") == 5\nassert     fruit_distribution(\"aabbbb\", \"bbbabababaa\") == 5\nassert     fruit_distribution(\"aabbccc\", \"bbbabababaa\") == 0\nassert     fruit_distribution(\"aabb\", \"bbbabababaa\") == 0\nassert     fruit_distribution(\"baba\", \"bbbabababaa\") == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef is_palindrome(s):\n    \"\"\"\n    In this task, you will be given a string which represents a word or a number and \n    return the result of the same string or number is a palindrome or not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fruit_distribution(s=\"5 3 2\",n=\"3 6\") == 2\nassert     fruit_distribution(s
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fruit_distribution(\"4 4 4\",8) == 1\nassert     fruit_distribution(\"4 4 2\",8) == 2\nassert     fruit_distribution(\"4 4 4\",10) == 2\nassert     fruit_distribution(\"1 1 3\",6) == 1\nassert     fruit_distribution(\"1 1 5\",6) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"apples, 2, apples, 3, apples, 4, orange, 3, oranges, 6\", 13) == 3\nassert     fruit_distribution(\"apples, 2, apples, 3, apples, 4, orange, 3, oranges, 6\", 11) == 1\nassert     fruit_distribution(\"apples, 2, apples, 3, apples, 4, orange, 3, oranges, 6\", 10) == 0\nassert     fruit_distribution(\"apples, 2, apples, 3, apples, 4, orange, 3, oranges, 6\", 22) == 0\nassert     fruit_distribution(\"apples, 2, apples, 3, apples, 4, orange, 3, oranges, 6\", 14) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"aabb\",4) == 2\nassert     fruit_distribution(\"aabb\",8) == 0\nassert     fruit_distribution(\"aaab\",8) == 2\nassert     fruit_distribution(\"aaab\",2) == 0\nassert     fruit_distribution(\"aabb\",2) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fruit_distribution('25 25', '15') == '3'\nassert     fruit_distribution('10', '5') == '1'\nassert     fruit_distribution('25', '3') == '0'\nassert     fruit_distribution('10', '0') == '-1'\nassert     fruit_distribution('10', '10') == '0'\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fruit_distribution('abcd',3) == 1\nassert     fruit_distribution('aab',3) == 2\nassert     fruit_distribution('abcd',5) == 0\nassert     fruit_distribution('aabb',3) == 1\nassert     fruit_distribution('aabc',3) == 2\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [ 22, 0 ] == pluck([ 3, 9, 11, 0, 2, 6, 8, 1, 4, 5, 7 ])\nassert     [ 22, 1 ] == pluck([ 22, 22, 22, 22, 22 ])\nassert     [] == pluck([])\nassert     [ 14, 1 ] == pluck([ 14, 0, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [ 1, 2, 4, 8, 15, 17, 19 ] == pluck([\n        5, 2, 4, 8, 15, 17, 19, 25, 3, 1, 6, 7, 22, 11, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [ 1, 2 ] == pluck([ 1, 2, 3 ])\nassert     [ 1, 2 ] == pluck([ 1, 3, 2 ])\nassert     [ 1, 2 ] == pluck([ 2, 1, 3 ])\nassert     [ 3, 4 ] == pluck([ 1, 2, 3, 4 ])\nassert     [] == pluck([])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         pluck([0,1,2,3,4,5,6,7,8,9]) == [1, 3]\nassert         pluck([0,1,2,3,4,5,6,7,8]) == [0, 2]\nassert         pluck([0,2,2,2,2,2,2,2]) == [2, 5]\nassert         pluck([0,1,2,3,4,5,6,7,8]) == [1, 4]\nassert         pluck([2,2,2,2,2,2,2,2]) == [2, 7]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [1, 3] == pluck([3, 4, 2])\nassert     [4, 1] == pluck([2, 3, 4, 1])\nassert     [3, 2, 5, 3] == pluck([5, 3, 3, 4, 4])\nassert     [] == pluck([])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [ 19, 2 ] == pluck([ 19, 22, 19, 22, 22, 22, 22, 22 ])\nassert     [ 11, 4 ] == pluck([ 19, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22 ])\nassert     [ 19, 2 ] == pluck([ 19, 19, 22, 22, 22, 22, 22, 22, 22 ])\nassert     [ 19, 2 ] == pluck([ 19, 19, 22, 22, 22, 22, 22, 22 ])\nassert     [] == pluck([ 19, 19, 22, 22, 22, 22, 22 ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pluck([0,3,1]) == [0,0]\nassert     pluck([0,1,1]) == [1,2]\nassert     pluck([0,2,1,2,3]) == [2,2]\nassert     pluck([]) == []"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [ 1, 1 ]     == pluck([ 0, 1, 2, 2, 3 ])\nassert     [ 2, 1 ]     == pluck([ 0, 1, 2, 3, 2, 2 ])\nassert     [ 2, 1 ]     == pluck([ 0, 1, 3, 2, 2 ])\nassert     [ 2, 1 ]     == pluck([ 0, 1, 2, 2, 3, 2 ])\nassert     [ 2, 1 ]     == pluck([ 2, 2, 3 ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [2, 2]\nassert     pluck([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [2, 2]\nassert     pluck([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [2, 2]\nassert     pluck([]) == []\nassert     pluck([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == [-8, 4]\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([1,2,2,3,3,3,4]) == 4, 'incorrect'\nassert     search([1,2,2,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([]) == -1\nassert     search([1]) == -1\nassert     search([1,1,1,1,1,1]) == 1\nassert     search([2,4,3,5,4]) == 3\nassert     search([1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     search([2, 1, 1, 2, 3, 4, 3]) == 3\nassert     search([1, 2, 3, 4, 3, 4, 4]) == -1\nassert     search([2, 3, 4, 5, 3]) == -1\nassert     search([2, 3, 4, 5, 4, 3]) == -1\nassert     search([2, 3, 4, 5, 4, 3, 2, 3, 3, 4, 5]) == 3"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     search([1, 1, 2, 2, 3]) == 3, \"First\"\nassert     search([1, 1, 3, 3, 3]) == -1, \"Second\"\nassert     search([1, 1, 1, 1, 1]) == 1, \"Third\"\nassert     search([1, 2, 3]) == -1, \"Fourth\"\nassert     search([1]) == -1, \"Fifth\"\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     search([1, 1, 1, 2, 3, 4, 4, 4, 4]) == 4\nassert     search([4, 4, 1, 4, 4]) == -1\nassert     search([]) == -1\nassert     search([1]) == 1\nassert     search([1, 2]) == 2\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     search([]) == -1\nassert     search([1,1,1]) == 1\nassert     search([1,2,3,2,1,2,3,3,2,1]) == 2\nassert     search([1,2,3,2,1,2,3,3,2,1,2,3,3]) == 3\nassert     search([1,2,3,2,1,2,3,3,2,1,2,3,3,2,1]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     search([1, 2, 3, 4, 4, 5]) == -1\nassert     search([1, 1, 1, 1]) == 1\nassert     search([1, 2, 3, 4, 5, 6]) == 5\nassert     search([1, 2, 3, 4, 5, 6, 6]) == 6\nassert     search([1, 2, 3, 4, 5, 6, 7]) == -1\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strange_sort_list([1,2,3,4,5]) == [1,5,2,4,3], \"Fail Test 1\"\nassert     strange_sort_list([5,3,1,2,4]) == [1,2,3,4,5], \"Fail Test 2\"\nassert     strange_sort_list([5,3,6,1,2,4]) == [1,2,3,4,5,6], \"Fail Test 3\"\nassert     strange_sort_list([5,6,4,3,1,2]) == [1,2,3,4,5,6], \"Fail Test 4\"\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     strange_sort_list(lst) == [5, 2, 4, 8, 1, 3, 7, 6]\nassert     strange_sort_list([1, 5, 3, 7, 4, 6, 8, 2]) == [1, 5, 3, 7, 4, 6, 8, 2]\nassert     strange_sort_list([2, 4, 5, 6, 7, 8, 1, 3]) == [1, 3, 2, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [4, 9, 2, 1, 3, 5, 6, 7, 8] == strange_sort_list([4, 9, 2, 1, 3, 5, 6, 7, 8])\nassert     [8, 7, 6, 5, 4, 3, 2, 1, 9] == strange_sort_list([8, 7, 6, 5, 4, 3, 2, 1, 9])\nassert     [9, 8, 7, 6, 5, 4, 3, 2, 1] == strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1])\n\ndef main():\n    '''\n    Use the strange_sort_list function to sort the numbers in a list.\n    '''\n    pass\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         [1,3,2] == strange_sort_list([2,1,3])\nassert         [4,5,6,7] == strange_sort_list([7,6,5,4])\nassert         [4,5,6,7] == strange_sort_list([7,6,5,4])\nassert         [1,2,3] == strange_sort_list([3,2,1])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     strange_sort_list([3, 5, 2, 1, 4]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([7, 3, 5, 2, 1, 4]) == [1, 2, 3, 4, 5, 7]\nassert     strange_sort_list([3, 6, 2, 1, 4]) == [1, 2, 3, 4, 6]\nassert     strange_sort_list([9, 8, 7, 6, 5, 4]) == [4, 5, 6, 7, 8, 9]\n\ndef random_list(size):\n    '''\n    Given an integer size, return list of random integers\n    between -10 to 10.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [0, 1, 4, 9, 10, 3, 5, 8, 6, 2, 7] == strange_sort_list([2, 3, 4, 1, 9, 10, 0, 5, 8, 6, 7])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 2, 3, 4, 5] == strange_sort_list([5, 4, 3, 2, 1])\nassert     [1, 3, 2, 4, 5] == strange_sort_list([5, 1, 4, 3, 2])\nassert     [1, 4, 2, 3, 5] == strange_sort_list([5, 1, 3, 4, 2])\nassert     [5, 4, 2, 1, 3] == strange_sort_list([3, 1, 4, 2, 5])\nassert     [5, 4, 2, 3, 1] == strange_sort_list([1, 3, 4, 2, 5])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(2, 2, 2) == 0.0\nassert     triangle_area(1, 2, 2) == 0.5\nassert     triangle_area(1, 1, 2) == 0.5\nassert     triangle_area(2, 2, 1) == 0.5\nassert     triangle_area(2, 1, 2) == 0.5\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triangle_area(2, 3, 4) == 2.50\nassert     triangle_area(5, 2, 3) == -1.0\nassert     triangle_area(3, 3, 3) == 2.50\nassert     triangle_area(1, 1, 2) == 0.25\nassert     triangle_area(1, 1, 1) == 0.25\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(4, 5, 6) == 1.11\nassert     triangle_area(4, 4, 5) == 1.00\nassert     triangle_area(3, 4, 6) == 1.50\nassert     triangle_area(3, 5, 7) == 0.50\nassert     triangle_area(3, 4, 2) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(1,1,2) == 0.5\nassert     triangle_area(10,10,10) == 0\nassert     triangle_area(5,3,3) == 6\nassert     triangle_area(1,1,1) == 0.5\nassert     triangle_area(5,5,5) == 0\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(3, 4, 5) == \"3.75\", \"3.75\"\nassert     triangle_area(3, 4, 6) == \"Area is -1\", \"Area is -1\"\nassert     triangle_area(3, 4, -5) == \"Area is -1\", \"Area is -1\"\nassert     triangle_area(0, 0, 0) == \"Area is -1\", \"Area is -1\"\nassert     triangle_area(5, 1, 1) == \"Area is -1\", \"Area is -1\"\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(2, 4, 3) == 1.80\nassert     triangle_area(2, 3, 4) == 1.25\nassert     triangle_area(2, 4, 4) == 0\nassert     triangle_area(3, 4, 5) == -1\n\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(3, 4, 5) == 0.433\nassert     triangle_area(5, 12, 13) == 0.433\nassert     triangle_area(8, 9, 10) == 0.433\nassert     triangle_area(12, 13, 15) == 0.433\nassert     triangle_area(12, 15, 14) == 0.433\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(3, 4, 5) == 7.5,     'area should be 7.5'\nassert     triangle_area(5, 9, 12) == 26.25,    'area should be 26.25'\nassert     triangle_area(5, 12, 9) == -1,         'incorrect area'\nassert     triangle_area(1, 1, 1) == 1,             'one side is 1'\nassert     triangle_area(1, 1, 0) == -1,         'incorrect area'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef is_an_integer(n):\n    '''\n    Given a string of digits. Return true if the string is an integer.\n    Otherwise return false.\n    An integer is a number of digits that is not a fraction.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(3, 4, 5) == 6.0\nassert     triangle_area(3, 3, 10) == 6.0\nassert     triangle_area(2, 3, 10) == -1.0\nassert     triangle_area(2, 4, 10) == -1.0\nassert     triangle_area(2, 4, 5) == 0.0\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     will_it_fly( [1, 2, 3, 4, 5], 10) == True\nassert     will_it_fly( [1, 2, 3, 4], 10) == False\nassert     will_it_fly( [4, 2, 4, 2, 2], 10) == False\nassert     will_it_fly( [4, 2, 4, 2, 2], 100) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     will_it_fly(palindrome_list(['s', 'h', 'h', 'i','s', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'h', 'a', 'h', 'h', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h', 'a', 'h', 'h'"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert will_it_fly([10,5,3,3,2,2,1,1,0,0], 4)\nassert not will_it_fly([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     will_it_fly([10,20,0,0], 100) is True, \"Failed test 1\"\nassert     will_it_fly([0,0], 100) is True, \"Failed test 2\"\nassert     will_it_fly([10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     will_it_fly([\"racecar\",\"racecar\",\"racecar\"], 5) == True\nassert     will_it_fly([\"tattarrattat\", \"tattarrattat\", \"tattarrattat\"], 10) == False\nassert     will_it_fly([\"ededededede\", \"ededededede\", \"ededededede\"], 10) == True\nassert     will_it_fly([\"addeedededede\", \"eededededede\", \"eededededede\"], 10) == True\nassert     will_it_fly([\"ggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     will_it_fly([1, 2, 3, 4, 3, 2, 1], 6)\nassert     will_it_fly([1, 2, 3, 4, 3, 2, 1], 100)\nassert     not will_it_fly([1, 2, 3, 4, 3, 2, 1, 1], 6)\nassert     not will_it_fly([1, 2, 3, 4, 3, 2, 1], 100)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     will_it_fly([],3) == False\nassert     will_it_fly([0],3) == False\nassert     will_it_fly([1],3) == True\nassert     will_it_fly([-1],3) == True\nassert     will_it_fly([1,-2],5) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     will_it_fly(['ab', 'bb', 'aa', 'aba'], 10) == True\nassert     will_it_fly(['abc', 'a', 'b'], 10) == True\nassert     will_it_fly([], 10) == True\nassert     will_it_fly(['ab', 'bb'], 10) == True\nassert     will_it_fly(['a', 'b'], 10) == False\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_change([1, 3, 5, 4, 2]) == 2\nassert     smallest_change([1, 5, 4, 3, 2]) == 1\nassert     smallest_change([]) == 0\nassert     smallest_change([1]) == 0\nassert     smallest_change([1, 1]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_change([1, 3, 2, 4, 2, 4, 2, 1]) == 3\nassert     smallest_change([3, 2, 1, 3]) == 1\nassert     smallest_change([1, 2, 1]) == 1\nassert     smallest_change([1, 2, 2]) == 1\nassert     smallest_change([2, 2, 2]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     smallest_change([1, 1, 2, 2, 2, 3, 4, 4, 4, 4]) == 1\nassert     smallest_change([1, 2, 2, 3, 4, 4, 4, 4, 4]) == 3\nassert     smallest_change([1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]) == 1"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(smallest_change(arr))\n    assert smallest_change(arr) == 3"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_change([1,2,3,4,5]) == 2\nassert     smallest_change([3,2,1]) == 0\nassert     smallest_change([1,1,1,1,1]) == 0\nassert     smallest_change([1,1,2,3,3]) == 3"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_change([2,4,6,1,3,5,7,8,9,10]) == 3\nassert     smallest_change([1,3,5,7,9]) == 2\nassert     smallest_change([1,2,3,4,5,6,7,8,9,10]) == 4\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_change([1, 2, 3, 4, 4]) == 1\nassert     smallest_change([1, 3, 5, 4, 4]) == 2\nassert     smallest_change([2, 4, 1, 3, 4]) == 3\nassert     smallest_change([1, 2, 3, 4, 2, 4, 5, 3, 4]) == 1\nassert     smallest_change([1, 3, 5, 4, 4, 1, 3, 5, 4]) == 2\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_change([2, 1, 3, 4, 3]) == 3\nassert     smallest_change([1, 2, 3, 4, 3]) == 2\nassert     smallest_change([2, 3, 4, 3, 1]) == 1\nassert     smallest_change([3, 4, 3]) == 0"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_change([4, 1, 2, 3, 5]) == 1\nassert     smallest_change([4, 1, 2, 3, 5, 6]) == 2\nassert     smallest_change([4, 1, 2, 3, 5, 6, 8]) == 4\nassert     smallest_change([4, 1, 2, 3, 4, 5]) == 0\nassert     smallest_change([4, 1, 2, 3, 5, 6, 8, 9]) == 7\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     smallest_change([1,3,5]) == 2\nassert     smallest_change([7,2,5,6,4,3]) == 1\nassert     smallest_change([3,2,5,6,4,3]) == 0\nassert     smallest_change([5,6,7,1,2,4,3,7,5,3]) == 2\nassert     smallest_change([5,6,7,1,2,4,3,7,5,3,9]) == 3\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     total_match(['Babar', 'Golub', 'Kafka'], ['Babar', 'Golub', 'Kafka', 'Golub']) == ['Babar', 'Golub']\nassert     total_match(['Babar', 'Golub', 'Kafka'], ['Babar', 'Golub', 'Kafka', 'Golub', 'Golub']) == ['Babar', 'Golub']\nassert     total_match(['Babar', 'Golub', 'Kafka'], ['Babar', 'Golub', 'Kafka', 'Golub', 'Golub', 'Golub']) == ['Babar', 'Golub']\nassert     total_match(['Babar', 'Golub', 'Kafka', 'Golub'], ['Babar', 'Golub', 'Kafka', 'Golub', 'Golub']) == ['Babar', 'Golub', 'Golub']\n\n\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     total_match([\"abc\", \"def\", \"fghi\", \"klmno\", \"pqrst\"], [\"abc\", \"def\", \"xyz\", \"fghi\", \"klmno\", \"pqrst\"]) == [\"abc\", \"def\", \"klmno\"]\nassert     total_match([\"abc\", \"def\", \"xyz\", \"fghi\", \"klmno\"], [\"abc\", \"def\", \"fghi\", \"klmno\", \"pqrst\"]) == [\"abc\", \"def\", \"klmno\"]\nassert     total_match([\"abc\", \"def\", \"xyz\", \"fghi\", \"klmno\"], [\"abc\", \"def\", \"xyz\", \"fghi\", \"klmno\", \"pqrst\"]) == [\"abc\", \"def\", \"klmno\"]\nassert     total_match([\"abc\", \"def\", \"xyz\", \"fghi\", \"klmno\"], [\"abc\", \"def\", \"fghi\", \"klmno\", \"pqrst\"]) == [\"abc\", \"def\", \"klmno\"]\nassert     total_match([\"abc\", \"def\", \"fghi\", \"klmno\", \"pqrst\"], [\"abc\", \"def\", \"fghi\", \"klmno\", \"pqrst\"]) == [\"abc\", \"def\", \"fghi\", \"klmno\", \"pqrst\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     total_match(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['x', 'y', 'z','s']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['x', 'y', 'z','s', 'p']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['x', 'y', 'z','s', 'p', 't']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['x', 'y', 'z','s', 'p', 't', 'g']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     total_match(['bbb', 'aaaa'], ['aaa', 'bbb']) == ['bbb', 'aaa']\nassert     total_match(['bbb', 'aaaa'], ['bbb', 'bbb']) == ['bbb']\nassert     total_match(['bbb', 'bbb'], ['aaa', 'bbb']) == ['bbb']\nassert     total_match(['aa', 'bb', 'cc'], ['bb', 'cc', 'dd']) == ['aa']\nassert     total_match(['aa', 'bb', 'cc'], ['bb', 'cc']) == ['aa', 'bb']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     ['a', 'b', 'c']    == total_match(['a', 'a', 'b', 'c'], ['a', 'b', 'c'])\nassert     ['a', 'b', 'c']    == total_match(['a', 'b', 'c'], ['a', 'b', 'c'])\nassert     ['a', 'b', 'c']    == total_match(['a', 'b', 'c'], ['a', 'b', 'c'])\nassert     ['a', 'b', 'c']    == total_match(['a', 'b', 'c'], ['a', 'b', 'c'])\nassert     ['a', 'b', 'c']    == total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd'])\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     total_match(['p', 'q', 'r','s'], ['t', 'u', 'v', 'w']) == ['p', 'q', 'r','s']\nassert     total_match(['d', 'f', 'v'], ['d', 'w','s']) == ['d', 'f', 'v']\nassert     total_match(['c', 'b'], ['c', 'd', 'f', 'g']) == ['c', 'b']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     total_match(['add','at','d'], ['cat','dog','but']) == ['add','at','d']\nassert     total_match(['python','javascript','ruby'], ['javascript','ruby']) == ['python']\nassert     total_match(['python','javascript','ruby','c#'], ['javascript','ruby','c#']) == ['python']\nassert     total_match(['python','javascript','ruby','c#'], ['javascript','ruby','c#','java']) == ['javascript']\nassert     total_match(['hello','world'], ['python','javascript','ruby']) == ['world']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     total_match(['total_match', 'over','match'], ['total', 'over','match']) == ['match']\nassert     total_match(['total_match', 'over','match'], ['total', 'over','match']) == ['total_match', 'over','match']\nassert     total_match(['total_match', 'over','match'], ['total', 'over','match']) == ['total_match', 'over','match']\nassert     total_match(['total_match', 'over','match'], ['total', 'over','match']) == ['match']\nassert     total_match(['total_match', 'over','match'], ['total', 'over','match']) == ['total_match', 'over','match']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     total_match(['code', 'be', 'happy'], ['coding', 'is', 'the', 'best']) == ['code']\nassert     total_match(['a', 'b', 'c'], ['abc', 'b', 'c']) == ['a', 'b', 'c']\nassert     total_match(['abc', 'b', 'c'], ['abc', 'b', 'c']) == ['abc']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     total_match(['ad', 'df', 'fgh'], ['a', 'df', 'kfgh']) == ['ad', 'df']\nassert     total_match(['ad', 'df', 'fgh'], ['a', 'df', 'kfgh']) == ['ad', 'df', 'fgh']\nassert     total_match(['fgh'], ['a', 'df', 'kfgh']) == ['fgh']\nassert     total_match(['ad', 'df', 'fgh', 'kfgh'], ['a', 'df', 'kfgh']) == ['ad', 'df', 'fgh']\nassert     total_match(['a', 'df', 'kfgh'], ['a', 'df', 'kfgh']) == ['a', 'df', 'kfgh']\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(3)\nassert     not is_multiply_prime(4)\nassert     not is_multiply_prime(5)\nassert     is_multiply_prime(6)\nassert     not is_multiply_prime(7)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(101) == False\nassert is_multiply_prime(3) == True\nassert is_multiply_prime(199) == False\nassert is_multiply_prime(29) == True\nassert is_multiply_prime(59) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(3*5*7) is True\nassert     is_multiply_prime(3*11*17) is True\nassert     is_multiply_prime(3*17*19) is False\nassert     is_multiply_prime(3*17*19*3) is False\nassert     is_multiply_prime(3*17*19*11) is False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(8) == False, '8 is not divisible by 3'\nassert     is_multiply_prime(7) == True, '7 is divisible by 3'\nassert     is_multiply_prime(15) == True, '15 is divisible by 3'\nassert     is_multiply_prime(12) == False, '12 is not divisible by 3'\nassert     is_multiply_prime(15) == True, '15 is divisible by 3'\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(10) == False\nassert     is_multiply_prime(15) == False\nassert     is_multiply_prime(21) == True\nassert     is_multiply_prime(25) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(3)     == True\nassert     is_multiply_prime(6)     == False\nassert     is_multiply_prime(9)     == True\nassert     is_multiply_prime(8)     == True\nassert     is_multiply_prime(16)     == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(12)\nassert     is_multiply_prime(12) == False\nassert     is_multiply_prime(24)\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(12)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(10)\nassert     is_multiply_prime(20)\nassert     not is_multiply_prime(30)\nassert     not is_multiply_prime(40)\nassert     is_multiply_prime(50)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(6) == False\nassert     is_multiply_prime(54) == False\nassert     is_multiply_prime(4) == True\nassert     is_multiply_prime(12) == False\nassert     is_multiply_prime(27) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(5) == False\nassert     is_multiply_prime(7) == True\nassert     is_multiply_prime(8) == False\nassert     is_multiply_prime(17) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_simple_power(9, 3) == True\nassert     is_simple_power(9, 4) == False\nassert     is_simple_power(99, 5) == False\nassert     is_simple_power(99, 6) == False\nassert     is_simple_power(99, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_simple_power(5**2, 5) == True, \"fail the first test\"\nassert     is_simple_power(5**3, 5) == True, \"fail the second test\"\nassert     is_simple_power(5**4, 5) == True, \"fail the third test\"\nassert     is_simple_power(5**5, 5) == False, \"fail the fourth test\"\nassert     is_simple_power(5**5, 10) == False, \"fail the fifth test\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_simple_power(512, 2) == True\nassert     is_simple_power(128, 2) == True\nassert     is_simple_power(64, 4) == True\nassert     is_simple_power(256, 8) == True\nassert     is_simple_power(10, 10) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_simple_power(2**3, 2) == True\nassert     is_simple_power(2**3, 3) == False\nassert     is_simple_power(2**3, 1) == True\nassert     is_simple_power(2, 3) == True\nassert     is_simple_power(2, 4) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_simple_power(81, 3) == True\nassert     is_simple_power(27, 2) == True\nassert     is_simple_power(81, 2) == False\nassert     is_simple_power(81, 3) == False\nassert     is_simple_power(0, 1) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_simple_power(1, 2)\nassert     not is_simple_power(9, 3)\nassert     is_simple_power(9, 3)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_simple_power(1, 2) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(5, 3) == True\nassert     is_simple_power(3, 4) == False\nassert     is_simple_power(5, 5) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_simple_power(8, 2) == True\nassert     is_simple_power(4, 4) == True\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(25, 5) == True\nassert     is_simple_power(125, 5) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_simple_power(3,4) == True\nassert     is_simple_power(2,4) == False\nassert     is_simple_power(9,10) == False\nassert     is_simple_power(10,10) == True\nassert     is_simple_power(10**10,10) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_simple_power(4,2) == True\nassert     is_simple_power(9,2) == True\nassert     is_simple_power(16,2) == True\nassert     is_simple_power(81,2) == False\nassert     is_simple_power(91,2) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ictube(12) == True\nassert ictube(4) == True\nassert ictube(7) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     issolution(5) == True\nassert     issolution(11) == False\nassert     issolution(21) == True\nassert     issolution(25) == False\n\n\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert izip(range(10), iscube(x) for x in range(10)) == zip([False, True, True, True, False, True, False, True, False, False], [False, True, True, True, False, True, False, True, False, False])"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     iscube(12) == True\nassert     iscube(17) == False\nassert     iscube(0) == True\nassert     iscube(1) == True\nassert     iscube(9) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert iceshape(1) is True\nassert iceshape(24) is True\nassert iceshape(26) is False\nassert iceshape(36) is False\nassert iceshape(1000) is True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     iscube(1) == True\nassert     iscube(8) == True\nassert     iscube(9) == False\nassert     iscube(-1) == False\nassert     iscube(0) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert icesk == iscube(3)\nassert icesk == iscube(6)\nassert icesk == iscube(12)\nassert icesk == iscube(15)\nassert not iscube(100)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     isCube(0)     == False\nassert     isCube(1)     == False\nassert     isCube(2)     == True\nassert     isCube(3)     == True\nassert     isCube(27)     == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ____(1) == True\nassert ____(9) == True\nassert ____(25) == False\nassert ____(27) == False\n\n\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert ictube(0) is True\nassert ictube(1) is False\nassert ictube(-1) is False\nassert ictube(9) is True\nassert ictube(10) is False\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hex_key('2F3D4') == 5\nassert     hex_key('2F3D') == 3\nassert     hex_key('F3D4') == 1\nassert     hex_key('F3D') == 1\nassert     hex_key('4F3D') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     hex_key('A') == 3\nassert     hex_key('B') == 0\nassert     hex_key('C') == 0\nassert     hex_key('D') == 1\nassert     hex_key('E') == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     hex_key(\"F2D\") == [2, 3]\nassert     hex_key(\"FA\") == [2]\nassert     hex_key(\"F4E\") == [2, 3, 5, 7]\nassert     hex_key(\"FA5\") == [2]\nassert     hex_key(\"F2\") == [2]\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\"\"\"\n\"09\"\n\"\"\"\n\n\"\"\"\nYou have been given the following dictionary:\ndictionary = {\n    'a': 1,\n    'b': 2,\n    'c': 3,\n    'd': 4,\n    'e': 5,\n    'f': 6,\n    'g': 7,\n    'h': 8,\n    'i': 9,\n    'j': 10,\n    'k': 11,\n    'l': 12,\n    'm': 13,\n    'n': 14,\n    'o': 15,\n    'p': 16,\n    'q': 17,\n    'r': 18,\n    's': 19,\n    't': 20,\n    'u': 21,\n    'v': 22,\n    'w': 23,\n    'x': 24,\n    'y': 25,\n    'z': 26\n}\n\nWrite a function that returns a string consisting of letters from the\nalphabet sorted in ascending order (alphabet letters come first).\nExample:\nalphabet_sort(\"z\") = \"abcdefghijklmnopqrstuvwxyz\"\nalphabet_sort(\"y\") = \"bcdekgfhjlnprtvxz\"\nalphabet_sort(\"w\") = \"bcdegjklnprtvxz\"\n\nWrite a function that sorts the dictionary by value (key-value pairs).\nExample:\nvalue_sort(\"z\") = [\n    {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26},\n    {'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26},\n    {'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26},\n    {'d': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26},\n    {'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26},\n    {'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't'"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         hex_key('2AB') == 5\nassert         hex_key('1AB2') == 6\nassert         hex_key('5AB') == 5\nassert         hex_key('3') == 0\nassert         hex_key('AA') == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hex_key(\"B2\")     == (2, 11)\nassert     hex_key(\"AF\")     == (6, 13)\nassert     hex_key(\"\")     == (0, 0)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hex_key('1') == 2\nassert     hex_key('100') == 2\nassert     hex_key('11') == 3\nassert     hex_key('2') == 0\nassert     hex_key('3') == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     hex_key(\"ABCD\") == 5, \"Incorrect result of hex_key('ABCD')\"\nassert     hex_key(\"\") == 0, \"Incorrect result of hex_key('')\"\nassert     hex_key(\"F\") == 1, \"Incorrect result of hex_key('F')\"\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hex_key('5F6D') == [2, 3, 5, 7]\nassert     hex_key('B5F6D') == [2, 3, 5, 7]\nassert     hex_key('B9F6D') == [2, 3, 5, 7]\nassert     hex_key('B9F6D8') == [2, 3, 5, 7]\nassert     hex_key('A9F6D8') == [2, 3, 5, 7]\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hex_key('2B3D5') == [2, 3, 5]\nassert     hex_key('B2D5') == [3, 5]\nassert     hex_key('3A2B3D4E5F6') == [3, 2, 3, 5]\nassert     hex_key('E3B3D4E5F6') == [3, 5]\nassert     hex_key('') == []\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) ==     '0db'\nassert     decimal_to_binary(1) ==     '1db'\nassert     decimal_to_binary(2) ==     '10db'\nassert     decimal_to_binary(3) ==     '11db'\nassert     decimal_to_binary(5) ==     '101db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == \"0db\"\nassert     decimal_to_binary(1) == \"1db\"\nassert     decimal_to_binary(2) == \"10db\"\nassert     decimal_to_binary(3) == \"11db\"\nassert     decimal_to_binary(4) == \"100db\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == '0b0'\nassert     decimal_to_binary(1) == '0b1'\nassert     decimal_to_binary(2) == '0b10'\nassert     decimal_to_binary(3) == '0b11'\nassert     decimal_to_binary(7) == '0b111'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == '0'*15+'0'\nassert     decimal_to_binary(1) == '1'*15+'0'\nassert     decimal_to_binary(2) == '10'*15+'0'\nassert     decimal_to_binary(3) == '11'*15+'0'\nassert     decimal_to_binary(4) == '100'*15+'0'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0' * 32\nassert     decimal_to_binary(1) == '1' * 32\nassert     decimal_to_binary(2) == '10' * 32\nassert     decimal_to_binary(7) == '111' * 32\nassert     decimal_to_binary(16) == '10000' * 32\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(15) == \"1111\"\nassert     decimal_to_binary(23) == \"111101\"\nassert     decimal_to_binary(7) == \"111\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0) == \"0db\"\nassert     decimal_to_binary(5) == \"0dbb\"\nassert     decimal_to_binary(123) == \"0dbb1111\"\nassert     decimal_to_binary(927) == \"0dbb10011001\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(15) == \"1111\"\nassert     decimal_to_binary(21) == \"10101\"\nassert     decimal_to_binary(255) == \"11111111\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_happy(\"rbb\") == True\nassert     is_happy(\"rbr\") == False\nassert     is_happy(\"rbrbr\") == True\nassert     is_happy(\"rrbrbr\") == False\nassert     is_happy(\"rbrbrbr\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_happy(\"a\") == False, \"Wrong!\"\nassert     is_happy(\"abbc\") == False, \"Wrong!\"\nassert     is_happy(\"abbcdd\") == True, \"Wrong!\"\nassert     is_happy(\"aabbcdd\") == True, \"Wrong!\"\nassert     is_happy(\"aba\") == True, \"Wrong!\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_happy(\"aa\") == False\nassert     is_happy(\"abbbbaa\") == False\nassert     is_happy(\"aaababbbbaa\") == True\nassert     is_happy(\"ababbbab\") == False\nassert     is_happy(\"abbbbbbaa\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_happy(\"a\") == True\nassert is_happy(\"b\") == False\nassert is_happy(\"c\") == False\nassert is_happy(\"d\") == False\nassert is_happy(\"bcc\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_happy(\"n\") == False\nassert     is_happy(\"nna\") == True\nassert     is_happy(\"naa\") == False\nassert     is_happy(\"nannnn\") == False\nassert     is_happy(\"nannnnn\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_happy(\"aabbc\") == True\nassert     is_happy(\"aaab\") == False\nassert     is_happy(\"aaa\") == True\nassert     is_happy(\"bbaa\") == False\nassert     is_happy(\"bbbab\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_happy(\"abcd\") == True\nassert     is_happy(\"bab\") == False\nassert     is_happy(\"abdd\") == False\nassert     is_happy(\"\") == True\nassert     is_happy(\"abba\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_happy(\"caaabb\") == True\nassert     is_happy(\"aaa\") == False\nassert     is_happy(\"aba\") == False\nassert     is_happy(\"bab\") == False\nassert     is_happy(\"ba\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_happy(\"abbbcccdddd\") == True\nassert     is_happy(\"abbbccdddd\") == True\nassert     is_happy(\"abbbcccddd\") == False\nassert     is_happy(\"\") == False\nassert     is_happy(\"bbbbcccd\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_happy('h') == False\nassert     is_happy('hih') == True\nassert     is_happy('hihih') == False\nassert     is_happy('hihihih') == False\nassert     is_happy('hi') == False\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == \\\n                ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n                ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']\nassert     numerical_letter_grade([2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n                ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']\nassert     numerical_letter_grade([]) == []\nassert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == \\\n                ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == ['A', 'A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([2.0, 3.0, 4.0, 5.0, 6.0]) == ['A', 'A', 'A', 'A', 'A', 'B']\nassert     numerical_letter_grade([1.7, 2.7, 3.7, 4.7, 5.7, 6.7]) == ['B', 'B', 'B', 'B', 'B', 'B']\nassert     numerical_letter_grade([2.3, 3.3, 4.3, 5.3, 6.3]) == ['B', 'B', 'B', 'B', 'B', 'C']\nassert     numerical_letter_grade([1.3, 2.3, 3.3, 4.3, 5.3, 6.3]) == ['C', 'C', 'C', 'C', 'C', 'C']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n        [    'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], 'Test 1'\nassert     numerical_letter_grade([1.0, 3.3, 2.7, 3.0, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == \\\n        ['F', 'C', 'B', 'A', 'B', 'A', 'B-', 'B-', 'A-', 'C-', 'C-', 'C-'], 'Test 2'\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [grade for grade in numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0])] == \\\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([0.0, 0.0]) == ['E', 'E']\nassert     numerical_letter_grade([4.0, 0.0]) == ['A+', 'E']\nassert     numerical_letter_grade([1.3, 2.0]) == ['C+', 'C']\nassert     numerical_letter_grade([3.0, 2.3]) == ['B+', 'B']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([0.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([0.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'B+', 'B', 'B-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'C+', 'C', 'C-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'D+', 'D', 'D-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([0.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', "
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\"\"\"\nTests for numerical_letter_grade:\n>>> numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0])\n['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-'], \"Check the result!\"\nassert     numerical_letter_grade([0.0, 0.0, 0.0]) == ['E', 'E', 'E'], \"Check the result!\"\nassert     numerical_letter_grade([-1.0, -2.0, -3.0]) == ['F', 'F', 'F'], \"Check the result!\"\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([3.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (prime_length(\"asdf\") == True)\nassert     (prime_length(\"qwerty\") == True)\nassert     (prime_length(\"asdfgh\") == False)\nassert     (prime_length(\"asdfghjkl\") == False)\nassert     (prime_length(\"123456789\") == True)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_length(2) == True\nassert     prime_length(3) == True\nassert     prime_length(0) == False\nassert     prime_length(17) == True\nassert     prime_length(21) == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_length(\"1234\") == True, \"should be True\"\nassert     prime_length(\"m\") == False, \"should be False\"\nassert     prime_length(\"12\") == True, \"should be True\"\n\nprint(\"Passed all tests...\")\n\ndef count_matching_characters(string1, string2):\n    \"\"\"\n    Write a function that takes two strings and returns the count of the\n    characters in string1 that are also in string2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (prime_length('') is True)\nassert     (prime_length('a') is False)\nassert     (prime_length('a' * 10**7) is True)\nassert     (prime_length('a' * (10**8) + 1) is False)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_length(\"1000101011\") == True\nassert     prime_length(\"01\") == True\nassert     prime_length(\"1010101011\") == False\nassert     prime_length(\"1010101010\") == True\nassert     prime_length(\"1010101011\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prime_length('hello') is False\nassert     prime_length('AA') is False\nassert     prime_length('123456789') is True\nassert     prime_length('AABBABCD') is True\nassert     prime_length('AABBBCD') is False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         (prime_length(\"g\") is True)\nassert         (prime_length(\"gghh\") is False)\nassert         (prime_length(\"12345\") is False)\nassert         (prime_length(\"\") is True)\nassert         (prime_length(\"abcdefg\") is False)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"a0\") == True\nassert     prime_length(\"a1\") == True\nassert     prime_length(\"a123456789\") == False\nassert     prime_length(\"abcdefghijklmnopqrstuvwxyz\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"a\") == False\nassert     prime_length(\"ab\") == False\nassert     prime_length(\"abcd\") == False\nassert     prime_length(\"abc\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"abcd\") == False\nassert     prime_length(\"abcdef\") == False\nassert     prime_length(\"abcdefg\") == True\nassert     prime_length(\"abcdefgh\") == False\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 4\nassert     starts_one_ends(5) == 4\nassert     starts_one_ends(6) == 4\nassert     starts_one_ends(7) == 5\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 4\nassert     starts_one_ends(5) == 6\nassert     starts_one_ends(6) == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 10\nassert     starts_one_ends(3) == 49\nassert     starts_one_ends(4) == 100\nassert     starts_one_ends(5) == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     starts_one_ends(0)         == 0\nassert     starts_one_ends(1)         == 1\nassert     starts_one_ends(2)         == 1\nassert     starts_one_ends(3)         == 1\nassert     starts_one_ends(4)         == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 4\nassert     starts_one_ends(5) == 6\nassert     starts_one_ends(6) == 8\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 3\nassert     starts_one_ends(5) == 4\nassert     starts_one_ends(6) == 5\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 4\nassert     starts_one_ends(5) == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     starts_one_ends(9) == 7\nassert     starts_one_ends(10) == 1\nassert     starts_one_ends(11) == 2\nassert     starts_one_ends(13) == 2\nassert     starts_one_ends(14) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(4) == 0\nassert     starts_one_ends(5) == 0\nassert     starts_one_ends(6) == 1\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (solve(10) == '1' + '0' + '1' + '0')\nassert     (solve(11) == '1' + '0' + '1' + '0' + '1')\nassert     (solve(100) == '1' + '0' + '1' + '0' + '0' + '0')\nassert     (solve(200) == '1' + '0' + '1' + '0' + '0' + '0' + '0')\nassert     (solve(1000) == '1' + '0' + '1' + '0' + '0' + '0' + '0')\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(8) == \"1001\"\nassert     solve(9) == \"1001\"\nassert     solve(18) == \"1100\"\nassert     solve(19) == \"1101\"\nassert     solve(25) == \"1101\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve(0)     == \"\"\nassert     solve(1)     == \"1\"\nassert     solve(4)     == \"100\"\nassert     solve(5)     == \"101\"\nassert     solve(11)     == \"1011\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     '0' * 10 + '1' * 9 + '0' == solve(10)\nassert     '0' * 10 + '1' * 8 + '0' == solve(101)\nassert     '0' * 10 + '1' * 7 + '0' == solve(1000)\nassert     '0' * 10 + '1' * 6 + '0' == solve(1111)\nassert     '0' * 10 + '1' * 5 + '0' == solve(1000)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve(10) == \"1\"\nassert     solve(11) == \"101\"\nassert     solve(12) == \"1011\"\nassert     solve(13) == \"10101\"\nassert     solve(14) == \"1010110\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve(100) == '100'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(10) == '1010'\nassert     solve(12) == '1110'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(0) == '0'\nassert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(100) == '100'\nassert     solve(10**100) == '0'\nassert     solve(10**100+1) == '1'\nassert     solve(10**100-1) == '0'\nassert     solve(10**100+1) == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(0) == 0\nassert     solve(1) == 1\nassert     solve(2) == 2\nassert     solve(3) == 3\nassert     solve(4) == 4\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(1) == \"1\"\nassert     solve(2) == \"10\"\nassert     solve(3) == \"11\"\nassert     solve(10) == \"10010\"\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add([1,2,3,4,5,6,7]) == [2,4,6]\nassert add([3,4,2,5,6]) == [4,6]\nassert add([1,2,3,4,5,6]) == [2,4,6]\nassert add([4,5,6]) == [6]\n\ndef even_odd(lst):\n    \"\"\"Given a list of integers lst. return a new list of integers where the first half of\n    the list is all even and the second half is all odd\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add([1,2,3,4,5]) == [3,5]\nassert     add([1,2,3,4,5,6]) == [6]\nassert     add([1,3,5]) == [5]\nassert     add([1,2,3,4,5,6,7,8]) == []\nassert     add([1,2,3,4,5,6,7,8,9,10,11]) == [8,10]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add([1,2,3,4,5,6,7]) == [1,3,5]\nassert add([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8]\nassert add([]) == []\nassert add([9,9,9,9]) == []\nassert add([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == [-2,-4,-6,-8]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add([1,2,3,4]) == [2,4]\nassert     add([1,3,5,7]) == [2,4,6]\nassert     add([]) == []\nassert     add([1]) == [1]\nassert     add([1,2,3,4,5]) == [2,4]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         add([1, 2, 3]) == [2, 4]\nassert         add([0, 1, 2]) == [0, 2, 4]\nassert         add([1, 2, 3, 4, 5]) == [2, 4, 6]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add([1,2,3,4,5]) == [2,4]\nassert     add([1,2,3,4,5,6]) == [2,4,6]\nassert     add([]) == []\nassert     add([5,5,5,5,5,5,5]) == [5,5,5,5]\nassert     add([1,2,3]) == [2]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef main():\n    lst = []\n    add(lst)\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef add_2(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \"\"\"\n    res = []\n    for i in range(1, len(lst), 2):\n        res.append(lst[i])\n    return res\n\nassert add_2([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add([1,2,3,4,5]) == 3\nassert add([1,3,2,4,6,8]) == 3\nassert add([5,4,3,2,1]) == 3\nassert add([5,7,4,3,2,6,8]) == 6\nassert add([2,4,3,5,1]) == 6\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") \\\n        == \"the quick brownfox jumpso lazi dog\", \"failed test 1\"\nassert     anti_shuffle(\"the lazy dog jumps over the quick fox\") \\\n        == \"the lazy dog jumps fox\", \"failed test 2\"\nassert     anti_shuffle(\"thelazydogjumpsoov\") \\\n        == \"thelazydoogjumps\", \"failed test 3\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") \\\n        == \"the quick brown fox jumps over the lazy dog\", \"failed test 4\"\nassert     anti_shuffle(\"\") \\\n        == \"\", \"failed test 5\""
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         anti_shuffle(\"Hi my name is John\") == \"Hi Jhon\"\nassert         anti_shuffle(\"Hi my name is John\") == \"Hi John\"\nassert         anti_shuffle(\"Hi my name is John\") == \"Hi Jhon\"\nassert         anti_shuffle(\"Hi my name is John\") == \"Hi John\"\nassert         anti_shuffle(\"Hi my name is John\") == \"Hi Jhon\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     anti_shuffle('Hi my name is Aniket') == 'Himy mnay is Aniket'\nassert     anti_shuffle('Hi my name is Aniket') == 'Hi my name is Aniket'\nassert     anti_shuffle('Hi my name is Aniket') == 'Hi my name is Aniket'\nassert     anti_shuffle('Hi my name is Aniket') == 'Hi my name is Aniket'\nassert     anti_shuffle('Hi my name is Aniket') == 'Hi my name is Aniket'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     anti_shuffle(sentence1) == result1\nassert     anti_shuffle(sentence2) == result2\nassert     anti_shuffle(sentence3) == result3\n\n\n\n\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"  fly me   to   the moon  \") ==     \"the moon to fly me   to\"\nassert     anti_shuffle(\"Hello World\") ==     \"World Hello\"\nassert     anti_shuffle(\"\") ==     \"\"\nassert     anti_shuffle(\" \") ==     \" \"\nassert     anti_shuffle(\"a b\") ==     \"a b\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef decrypt(string):\n    \"\"\"\n    Write a function that takes an encrypted string and returns the original string.\n    When done correctly, the function will have no errors and return a valid string.\n    \n    There are two ways to decrypt the message:\n    \n    1) Using the first letter of every word as a key, and the second letter as the value,\n    and decrypting the message.\n    \n    2) Using the second letter of every word as a key, and the first letter as the value,\n    and decrypting the message.\n    \n    You can assume the message only contains valid words and spaces.\n    \n    If the first way of decrypting the message is used, return the decrypted string.\n    If the second way of decrypting the message is used, return the decrypted string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     anti_shuffle(\"I am a proctor\") == \"I am a proctor\"\nassert     anti_shuffle(\"I am a proctor. I am a proctor. I am a proctor.\") == \"I am a proctor. I am a proctor. I am a proctor.\"\nassert     anti_shuffle(\"I am a proctor. I am a proctor. I am a proctor.\") == \"I am a proctor. I am a proctor. I am a proctor.\"\nassert     anti_shuffle(\"I am a proctor. I am a proctor. I am a proctor.\") == \"I am a proctor. I am a proctor. I am a proctor.\"\n\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"I thought I was an encyclopedia\") == \"the wise I thought I was an encyclopedia\"\nassert     anti_shuffle(\"Weird, isn't it?\") == \"Weird, isn't it?\"\nassert     anti_shuffle(\"BEHIND THE SCENES THE WEATHER IS THE FEEL\") == \"BEHIND THE SCENES THE WEATHER IS THE FEEL\"\nassert     anti_shuffle(\"Don't get too excited\") == \"Don't get too excited\"\nassert     anti_shuffle(\"BEHIND THE SCENES THE WEATHER IS THE FEEL\") == \"BEHIND THE SCENES THE WEATHER IS THE FEEL\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     anti_shuffle('  This   is a test string') == 'This   is a test string'\nassert     anti_shuffle('I love    you') == 'I lv y u'\nassert     anti_shuffle('I    love you') == 'I  lv y u'\nassert     anti_shuffle(' I love you') =='I lv y u'\nassert     anti_shuffle(' Iloveyou') =='Ilv y u'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     anti_shuffle(\"Hi John,   how are you?\") == \"Hi John, how are you?\"\nassert     anti_shuffle(\"  walter  how are you?   \") == \"walter  how are you?\"\nassert     anti_shuffle(\"Hi John\") == \"Hi John\"\nassert     anti_shuffle(\"  \") == \"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_row([(0, 0), (1, 2), (3, 4)], 0) == [(0, 0), (3, 4)]\nassert     get_row([(0, 1), (1, 2), (3, 4)], 2) == [(1, 2), (3, 4)]\nassert     get_row([(0, 0), (1, 2), (3, 4)], 3) == [(3, 4)]\nassert     get_row([(0, 1), (1, 2), (3, 4)], 1) == [(0, 1), (1, 2)]\nassert     get_row([(0, 0), (1, 2), (3, 4)], 2) == [(1, 2), (3, 4)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [(0, 1), (1, 0), (2, 2)] == get_row([[1, 2], [3, 4], [5, 6]], 3)\nassert     [(2, 0), (1, 1), (0, 2)] == get_row([[2, 0, 3], [4, 1, 5], [6, 2, 6]], 1)\nassert     [(0, 1), (1, 0), (2, 2)] == get_row([[1, 2], [3, 4], [5, 6]], 3)\nassert     [(0, 1), (1, 0), (2, 2)] == get_row([[1, 2], [3, 4], [5, 6]], 3)\nassert     [(0, 1), (1, 0), (2, 2)] == get_row([[1, 2], [3, 4], [5, 6]], 3)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_row(example_input, 5) == [(2,0), (1,1), (0,2), (0,3), (1,3), (2,3)]\nassert     get_row(example_input, 2) == [(0,0), (0,1), (1,0), (1,1), (2,0), (2,1), (2,2), (2,3), (1,3), (0,3)]\nassert     get_row(example_input, 3) == [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1), (2,2), (2,3)]\nassert     get_row(example_input, 4) == [(0,0), (0,1), (0,2), (0,3), (1,0), (1,1), (1,2), (1,3), (2,0), (2,1), (2,2), (2,3)]\nassert     get_row(example_input, 0) == [(0,0), (0,1), (0,2), (0,3), (1,0), (1,1), (1,2), (1,3), (2,0), (2,1), (2,2), (2,3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [(0, 0), (1, 1), (2, 2), (0, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(1, 1), (1, 2), (1, 3), (0, 0)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [(0, 2), (1, 1), (1, 2), (1, 3), (0, 0)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (1, 3), (0, 0), (0, 1), (0, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (1, 3), (0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (1, 3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_row(\n                [ [1, 2, 3, 4],\n                  [5, 6, 7, 8],\n                  [9, 10, 11, 12],\n                  [13, 14, 15, 16] ], 2) == [(2, 0), (2, 3), (2, 1)]\nassert     get_row(\n                [ [1, 2, 3, 4],\n                  [5, 6, 7, 8],\n                  [9, 10, 11, 12],\n                  [13, 14, 15, 16] ], 2) == [(2, 3), (2, 1), (2, 0)]\nassert     get_row(\n                [ [1, 2, 3, 4],\n                  [5, 6, 7, 8],\n                  [9, 10, 11, 12],\n                  [13, 14, 15, 16] ], 3) == [(0, 3), (0, 1), (0, 2)]\nassert     get_row(\n                [ [1, 2, 3, 4],\n                  [5, 6, 7, 8],\n                  [9, 10, 11, 12],\n                  [13, 14, 15, 16] ], 11) == [(3, 0), (3, 4), (3, 2), (3, 1)]\n\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_row([(0, 1), (3, 2)], 1) == [(1, 0), (1, 1)]\nassert     get_row([(0, 1), (3, 2), (6, 7)], 0) == [(0, 0), (0, 1), (0, 2), (1, 2), (1, 3), (2, 3), (3, 2), (3, 3)]\nassert     get_row([(0, 1), (3, 2), (6, 7)], 1) == [(1, 1), (2, 1), (3, 1), (2, 2), (3, 2), (3, 3), (4, 0), (4, 1)]\n\ndef get_column(lst, y):\n    \"\"\"\n    Given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, but unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer y, find integers y in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_row([[1,2,3], [4, 5, 6], [7, 8, 9]], 1) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\nassert     get_row([[1,2,3,4], [5, 6, 7, 8], [9, 10, 11, 12]], 1) == [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3)]\nassert     get_row([[1,2,3], [4, 5, 6], [7, 8, 9]], 2) == [(2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_row(\n        [[1, 2, 3, 4, 5],\n         [6, 7, 8, 9, 10],\n         [11, 12, 13, 14, 15],\n         [16, 17, 18, 19, 20]],\n        1) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4)],\n\nassert     get_row(\n        [[1, 2, 3, 4, 5],\n         [6, 7, 8, 9, 10],\n         [11, 12, 13, 14, 15],\n         [16, 17, 18, 19, 20]],\n        2) == [(1, 0), (1, 1), (1, 2), (1, 3), (1, 4)],\n\nassert     get_row(\n        [[1, 2, 3, 4, 5],\n         [6, 7, 8, 9, 10],\n         [11, 12, 13, 14, 15],\n         [16, 17, 18, 19, 20]],\n        3) == [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4)],\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_row([(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)], 2) == [(1, 2), (0, 1)]\nassert     get_row([(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)], 1) == [(1, 2), (0, 0)]\nassert     get_row([(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)], 0) == [(0, 0), (0, 1)]\nassert     get_row([(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)], 3) == [(1, 2), (0, 2)]\n\ndef get_row_2(lst, x):\n    \"\"\"\n    Alternative solution.\n    \"\"\"\n    lst = sorted(lst, key = lambda x: x[0])\n    lst = sorted(lst, key = lambda x: x[1], reverse = True)\n    return [x for x in lst if x[0] == x[1]]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_row([[1,2,3], [4,5,6]], 1) == [(0, 0), (0, 1), (1, 1)]\nassert     get_row([[1,2], [3,4], [5,6]], 2) == [(0, 1), (1, 0), (1, 1)]\nassert     get_row([[1,2], [3,4], [5,6]], 5) == [(2, 0), (2, 1), (2, 2)]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([4, 2, 3, 1]) == [1, 2, 3, 4]\nassert     sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     sort_array([4, 3, 1, 2]) == [1, 2, 3, 4]\nassert     sort_array([4, 1, 2, 3]) == [1, 2, 3, 4]\nassert     sort_array([4, 3, 1, 2]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([2,1,4,3,5]) == [1,2,3,4,5]\nassert     sort_array([2,1,4,3]) == [1,2,3,4]\nassert     sort_array([1,1,1]) == [1,1,1]\nassert     sort_array([5,7,3,5,8,3,4]) == [3,3,4,5,5,7,8]\nassert     sort_array([9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([2, 1]) == [1, 2]\nassert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_array([4, 1, 2, 3]) == [1, 2, 3, 4]\nassert     sort_array([1, 1, 1]) == [1, 1, 1]\nassert     sort_array([8, 6, 10, 2, 1, 4, 7, 9, 3, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([0]) == [0]\nassert     sort_array([1, 2]) == [1, 2]\nassert     sort_array([2, 1]) == [1, 2]\nassert     sort_array([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([2, 1]) == [1, 2]\nassert     sort_array([1, 2, 1]) == [1, 1, 2]\nassert     sort_array([1, 1, 2, 3, 4, 1]) == [1, 1, 1, 2, 3, 4]\nassert     sort_array([2, 1, 1]) == [1, 1, 2]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_array([1, 3, 4, 2]) == [1, 2, 3, 4]\nassert     sort_array([4, 1, 3, 2]) == [1, 2, 3, 4]\nassert     sort_array([2, 4, 1, 3]) == [1, 2, 3, 4]\nassert     sort_array([3, 1, 4, 2]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array([2,1,3,4,7,6,8,5,9,10,11,12,13,15,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]\nassert     sort_array([2,1,3,4,7,6,8,5,9,10,11,12,13,15,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,5"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_array([1, 3, 2, 4]) == [1, 2, 3, 4]\nassert     sort_array([3, 1, 4, 2]) == [1, 2, 3, 4]\nassert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_array([3, 1, 2, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([1,2,3,4]) == [1,2,3,4]\nassert sort_array([2,3,1,4]) == [1,3,2,4]\nassert sort_array([4,3,2,1]) == [1,2,3,4]\nassert sort_array([4,3,2,1]) == [1,2,3,4]\nassert sort_array([3,1,1,2]) == [1,2,3,1]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [4,3,1,2]    == sort_array([1,2,3,4])\nassert     [4,3,1,2]    == sort_array([1,2,4,3])\nassert     [4,3,1,2]    == sort_array([1,3,2,4])\nassert     [4,3,1,2]    == sort_array([2,4,3,1])\nassert     [4,3,1,2]    == sort_array([2,4,1,3])\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encrypt('testing')    == 'tsgnfshrw'\nassert     encrypt('Hi my name is Bob')    == 'gvhbxaybqypf'\nassert     encrypt('What is the airspeed velocity of an unladen swallow?')    == 'iuhrsgzzxhuzlaa'\nassert     encrypt('I am a programmer')    == 'gvhbxaybqypf'\n\nprint 'All Tests Passed!"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encrypt(\"This is an example!\") ==     \"mjajyygqntimiekimrszvxajzlq\"\nassert     encrypt(\"We promptly judged antique ivory buckles for the next prize\") ==     \"voqxjrbwjnkzakxjlvfxzkriihqy\"\nassert     encrypt(\"two words but a half a minute\") ==     \"swkqnjl\"\nassert     encrypt(\"My two favorite numbers are 21 and 19\") ==     \"aiklhmv\"\nassert     encrypt(\"This is a test!\") ==     \"grsxuolzm\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encrypt('hello') == 'lohel'\nassert     encrypt('how') == 'rwo'\nassert     encrypt('b') == 'b'\nassert     encrypt('a') == 'a'\nassert     encrypt('e') == 'e'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encrypt('cat') == 'ryot'\nassert     encrypt('a') == 'c'\nassert     encrypt('test') == 'tset'\nassert     encrypt('sdf') =='sfd'\nassert     encrypt('wer') == 'rfww'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and \n    returns a string decrypted with the alphabet being rotated in the \n    opposite manner. The alphabet should be rotated in a manner such \n    that the letters shift up by two multiplied to two places. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes an encrypted string as an \n    argument and returns the decrypted string. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encrypt(\"hello\") == 'ifmmp'\nassert     encrypt(\"bye\") == 'ebpf'\nassert     encrypt(\"\") == ''\nassert     encrypt(\"abcdefghijklmnopqrstuvwxyz\") == 'nopqrstuvwxyzabcdefghijklm'\nassert     encrypt(\"hello world\") == 'olleh'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encrypt(\"Este es un texto test!\") == \"BHGTPZGXCRHEGKJI\"\nassert     encrypt(\"The five boxing wizards jump quickly\") == \"GFWJYUJFLKHVWQZ\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encrypt(\"matti\") == 'aaeilu'\nassert     encrypt(\"matt\") == 'aaeim'\nassert     encrypt(\"mattg\") == 'aagjt'\nassert     encrypt(\"mattk\") == 'aagjm'\nassert     encrypt(\"mattq\") == 'aagjx'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encrypt(\"abcd\") == \"bcdab\"\nassert     encrypt(\"abcde\") == \"eabcd\"\nassert     encrypt(\"a\") == \"b\"\nassert     encrypt(\"\") == \"\"\nassert     encrypt(\"abcdefg\") == \"efgabcd\"\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest([2, -3, 7, 9, 17]) == -3\nassert     next_smallest([]) == None\nassert     next_smallest([2, -3, 7, 9, 17, -10]) == -10\nassert     next_smallest([2, -3, 7, 9, 17, 17]) == 17\nassert     next_smallest([2, 3, 7, 9, 17, 17]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest([2,4,5,6,1]) == 2\nassert     next_smallest([1,2,3,4,5]) == None\nassert     next_smallest([2,5,6,4,1]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert     next_smallest([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == None\nassert     next_smallest([0, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1\nassert     next_smallest([0, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15]) == -1\nassert     next_smallest([0, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 19]) == 19\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest([3,2,1,5,6,4]) == 1\nassert     next_smallest([3,2,1,5,6,4,7,8,9]) == 2\nassert     next_smallest([3,2,1,5,6,4,7,8,9,10]) == None\n\n\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest([7, 2, 1, 4, 8]) == 4\nassert     next_smallest([2, 1, 4, 8]) == None\nassert     next_smallest([2, 4, 1, 8]) == 1\nassert     next_smallest([2, 4, 1]) == None\nassert     next_smallest([1, 4, 2, 8]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest([9, 4, 3, 1, 8, 7, 2, 5, 6]) == 1\nassert     next_smallest([9, 4, 3, 1, 8, 7, 2, 5, 6, 0, 10]) == 1\nassert     next_smallest([9, 4, 3, 1, 8, 7, 2, 5, 6, 0, 10, 12]) == 2\nassert     next_smallest([9, 4, 3, 1, 8, 7, 2, 5, 6, 0, 10, 12, 14]) == 2\nassert     next_smallest([9, 4, 3, 1, 8, 7, 2, 5, 6, 0, 10, 12, 14, 15]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\nprint next_smallest([1,2,3,4]) == 2\nassert \n\nprint next_smallest([]) == None\nassert \n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([-1, -2, -3, -4, -5]) == -3\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_smallest([3, 1, 2]) == 1\nassert     next_smallest([1, 2, 3]) == 2\nassert     next_smallest([3, 2, 1]) == 2\nassert     next_smallest([3, 1]) == 3\nassert     next_smallest([1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([1, 2, 3, 4]) == 4\nassert     next_smallest([1, 1, 1, 1]) == None\nassert     next_smallest([10, 4, 5]) == 4\nassert     next_smallest([10, 4, 5, 3]) == 4\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_bored('I am bored.') == True\nassert     is_bored('I am not bored') == False\nassert     is_bored('I am not bored?') == False\nassert     is_bored('I am not bored!') == False\nassert     is_bored('I am not bored in a hurry!') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_bored(\"I am bored.\") == True\nassert     is_bored(\"I am not very bored.\") == False\nassert     is_bored(\"I am not bored. They are all so boring.\") == False\nassert     is_bored(\"\") == False\nassert     is_bored(\"I am bored.\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_bored(\"I know a lot!\") == True, \"is_bored('I know a lot!')\"\nassert     is_bored(\"this is a simple sentence\") == False, \"is_bored('this is a simple sentence')\"\nassert     is_bored(\"I like to stay in the garden. I don't like to play in the garden. I like to play in the garden. I like to stay in the garden. I'm not in the garden.\") == True, \"is_bored('I like to stay in the garden. I don't like to play in the garden. I like to play in the garden. I like to stay in the garden. I'm not in the garden.') \"\nassert     is_bored(\"He likes to go to the park, he likes to go to the park, he likes to go to the park, he likes to go to the park. I do not like to go to the park. I do not like to go to the park. I do not like to go to the park.\") == True, \"is_bored('He likes to go to the park, he likes to go to the park, he likes to go to the park, he likes to go to the park. I do not like to go to the park. I do not like to go to the park. I do not like to go to the park.') \"\nassert     is_bored(\"The forest is very nice, the trees are very tall and the sound is very nice. The sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice.\") == True, \"is_bored('The forest is very nice, the trees are very tall and the sound is very nice. The sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice, the sound is very nice') \"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_bored('Hi I am Peter.') == 2\nassert     is_bored('Hi I am Peter. ') == 2\nassert     is_bored('Hi I am Peter. ') == 2\nassert     is_bored('Hi I am Peter. ') == 2\nassert     is_bored('Hi I am Peter!. ') == 2\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_bored(\"I am happy!\") == False, \"Is there a happy sentence?\"\nassert     is_bored(\"I am not happy!\") == True, \"Is there a sad sentence?\"\nassert     is_bored(\"I am not happy!\") == True, \"Is there a sentence with two words?\"\nassert     is_bored(\"I am not happy.\") == True, \"Is there a sentence with a period?\"\nassert     is_bored(\"I am not happy.\") == True, \"Is there a sentence with a question?\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_bored('') == 0, \"is_bored('')\"\nassert     is_bored('I am not bored') == 0, \"is_bored('I am not bored')\"\nassert     is_bored('I am not at all bored') == 1, \"is_bored('I am not at all bored')\"\nassert     is_bored('I am not bored!') == 0, \"is_bored('I am not bored!')\"\nassert     is_bored('I am not at all bored?') == 1, \"is_bored('I am not at all bored?')\")\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_bored(\"I am bIed\") == \"I\"\nassert     is_bored(\"I am Bored\") == \"I\"\nassert     is_bored(\"I am Bored!\") == \"I\"\nassert     is_bored(\"I am Bored.\") == \"I\"\nassert     is_bored(\"I am Bored.!\") == \"I\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_bored('I am bored') == True\nassert     is_bored('I am not bored') == False\nassert     is_bored('This is not a sentence.') == False\nassert     is_bored('This is not a sentence. I am bored') == True\nassert     is_bored('This is not a sentence. I am not bored') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_bored(\"This is an example sentence\") == 1\nassert     is_bored(\"I would like to go to bed\") == 1\nassert     is_bored(\"I am bored\") == 1\nassert     is_bored(\"I am so bored, I cannot think of anything to do\") == 1\nassert     is_bored(\"It is best to think of what you want to achieve\") == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_bored('I am a bird! I am a bird! I am a bird!') == 1\nassert     is_bored('This is a sentence that starts with \"I\"') == 1\nassert     is_bored('This is a sentence that starts with \"a\"') == 0\nassert     is_bored('I am a sentence that starts with \"a\"') == 0\nassert     is_bored('I am a sentence that starts with \"I\"') == 1\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     any_int(1, 1, 1) == True\nassert     any_int(1, 1, 2) == False\nassert     any_int(2, 1, 2) == True\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 1, 1.5) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     any_int(3, 5, 5)\nassert     not any_int(1.0, 0.0, -1)\nassert     not any_int(3, 5, -1)\nassert     not any_int(3, 5, 5.0)\nassert     not any_int(3.0, 5.0, 5)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1, 2, -3) == True\nassert     any_int(1, -2, 3) == True\nassert     any_int(-1, -2, 3) == True\nassert     any_int(-1, 2, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 2) == True\nassert     any_int(2, 2, 2) == True\nassert     any_int(2, 2, 3) == False\nassert     any_int(2, 3, 2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     any_int(1, 1, 2) == True\nassert     any_int(1, 1.1, 2) == False\nassert     any_int(1, 1, 2.0) == False\nassert     any_int(1, 1, 2.1) == False\nassert     any_int(1, 1.0, 2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     any_int(2,2,2) == True\nassert     any_int(2,2,3) == False\nassert     any_int(3,2,2) == False\nassert     any_int(2,2,2.5) == False\nassert     any_int(2,2,3.5) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     any_int(8, 5, 5) == True\nassert     any_int(3, 1, 3) == True\nassert     any_int(3, 1, 2) == False\nassert     any_int(3, 1, 4) == False\nassert     any_int(3, 3, 3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3)\nassert     any_int(1, 2, 3.2)\nassert     not any_int(1, 2, 3.1)\nassert     not any_int(1.2, 2, 3)\nassert     not any_int(1, 2.2, 3.3)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 2, 0) == False\nassert     any_int(0, 0, 0) == True\nassert     any_int(1, -2, -5) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     any_int(4, 8, 1) == False\nassert     any_int(5, 6, 9) == True\nassert     any_int(5, 8, 9) == False\nassert     any_int(6, 7, 9) == False\nassert     any_int(8, 9, 7) == True\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode(\"hello\") == \"hElL\"\nassert     encode(\"goodbye\") == \"gdnBye\"\nassert     encode(\"I love Python\") == \"2bXln\"\nassert     encode(\"I love Python!\") == \"2bXln\"\n\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encode('A message') == 'a message'\nassert     encode('VOWELS') == 'VOWELS'\nassert     encode('WRONG') == 'Wrong'\nassert     encode('a message') == 'A Message'\nassert     encode('vowels') == 'VOWELS'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode('Wesley') == 'w1s3l2e4'\nassert     encode('what') == 'w1h1t'\nassert     encode('a') == 'a'\nassert     encode('My') =='m1y'\nassert     encode('I') == 'i'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode('I went to the park')     == 'tW Ef rkcC lkng WOz pqr'\nassert     encode('hello')              == 'leL hHE'\nassert     encode('I love you')          == 'I lv uHs'\nassert     encode('Leci@')              == 'LacI'\nassert     encode('HeLLo')              == 'HHeL'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encode(\"test\") == \"tST\"\nassert encode(\"TEST\") == \"TSt\"\nassert     encode(\"testTest\") == \"tt1t\"\nassert     encode(\"tEST\") == \"Tst\"\n\nprint \"PASS: all test cases passed!"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode(\"You are the best!\") == \"uYtC btTh eetS!\", \"incorrect\"\nassert     encode(\"Look at that girl\") == \"LkO tTf htTn rIn!\", \"incorrect\"\nassert     encode(\"Today is a great day.\") == \"Tdaay uYr bUt nrGe taG\", \"incorrect\"\nassert     encode(\"He's got a good heart\") == \"Eh gtT tHnk htr a nd!\", \"incorrect\"\nassert     encode(\"The first four letters of the English alphabet are:\") == \"Tnth ftW rWth nWjn gWwj mOjn lIjn lNjn pOjn lAjn sOjn jEjn vOjn aOjn tOjn eOjn rOjn\", \"incorrect\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode('Aaa') == 'BbB'\nassert     encode('a') == 'b'\nassert     encode('Abc') == 'bCc'\nassert     encode('aa') == 'bb'\nassert     encode('ABD') == 'BcD'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encode(\"abAB\") == \"ABABA\"\nassert     encode(\"Hello World!\") == \"HHeeloWWoRld!\"\nassert     encode(\"Go hang a salami, I'm a lasagna hog!\") == \"GOOH GUHH HHH AHHH I\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode(\"hello\") == \"leHELLO\"\nassert     encode(\"Hello\") == \"LeHello\"\nassert     encode(\"HELLO\") == \"LEloH\"\nassert     encode(\"Hello, World!\") == \"LeOlleH, WLLoW!\"\nassert     encode(\"HELLEWORLD\") == \"LeOlleH, WLLoW!\"\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     skjkasdkd([2,7,17,43,74,23,55,91,34,11,77,98,54,64,52,81,46,94,34,45,74,79,10,40,15,12,28,64,65,84,67,62,44,19,14,7,10,16,45,43,69,49,56,72,99,11,41,22,59,57,72,27,23,24,93,76,61,57,94,74,24,72,35,32,25,39,46,88,49,76,10,82,43,96,48,64,70,34,48,90,55,54,51,46,59,30,87,53,54,36,62,10,32,82,73,66,18,58,31,59,49,46,99,35,73,37,84,65,18,60,76,59,36,14,42,58,37,10,29,53,45,68,32,76,20,49,77,79,38,80,53,60,41,49,77,49,46,65,35,13,60,99,62,14,41,76,59,91,15,35,32,68,59,27,10,54,56,60,91,45,68,15,41,93,30,28,22,88,32,21,32,72,17,27,80,21,12,14,31,61,64,44,39,12,59,80,12,14,11,36,15,43,18,74,73,24,87,72,34,14,22,18,61,55,26,76,83,29,42,10,82,18,77,22,37,46,70,94,46,74,48,21,96,79,22,14,45,62,18,80,52,49,39,92,29,55,83,66,74,20,17,52,56,40,59,79,18,31,70,53,23,59,49,22,42,67,48,14,20,43,42,63,21,90,82,64,74,16,28,40,27,40,41,34,24,43,73,92,53,36,31,30,10,90,75,33,67,44,29,45,42,33,38,25,43,38,12,37,40,20,83,85,25,71,34,14,38,63,57,99,30,50,78,29,24,48,40,40,45,34,32,40,54,66,10,13,81,44,53,66,65,20,65,10,60,12,44,66,24,61,88,44,38,36,31,31,53,46,28,84,33,38,12,10,30,18,41,30,30,17,55,89,47,18,17,42,22,10,50,18,18,38,16,48,15,43,18,45,57,35,12,34,10,30,34,10,18,56,31,25,49,10,34,50,22,43,22,22,39,47,18,16,42,43,55,10,33,31,46,10,34,46,11,10,21,32,21,25,53,16,53,14,49,12,45,11,10,24,11,34,42,11,29,17,14,27,49,11,31,29,36,20,15,27,29,35,23,14,37,37,18,13,27,18,26,14,11,33,18,18,34,17,45,10,40,14,39,36,36,37,37,41,37,32,41,19,40,15,26,13,29,29,42,29,25,45,26,25,38,31,19,34,16,27,22,32,29,20,15,17,15,17,31,22,18,27,23,26,2"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     skjkasdkd(lst) == 5\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     skjkasdkd( [19, 61, 63, 4] ) == 25\nassert     skjkasdkd( [20, 64, 25, 50] ) == 10\nassert     skjkasdkd( [100, 9999, 9699, 8888] ) == 3\nassert     skjkasdkd( [9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50] ) == 1\nassert     skjkasdkd( [1, 2, 3, 4, 5] ) == 0\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     6 == skjkasdkd([])\nassert     1 == skjkasdkd([1])\nassert     7 == skjkasdkd([7])\nassert     5 == skjkasdkd([1,7])\nassert     1 == skjkasdkd([1,7,5])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         skjkasdkd([13, 5, 7])         ==     3\nassert         skjkasdkd([13, 5, 7, 1])         ==     3\nassert         skjkasdkd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])     ==     3\nassert         skjkasdkd([13, 5, 7, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])     ==     3\nassert         skjkasdkd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])     ==     3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef sum_of_digits(x):\n    \"\"\"The number x consists of non-negative digits.\n    You have to find the sum of the digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     12 == skjkasdkd([1, 12, 123, 1234])\nassert    289 == skjkasdkd([1, 12, 123, 1234, 12345])\nassert    89 == skjkasdkd([1, 12, 123, 12345, 123456])\nassert    289 == skjkasdkd([1, 12, 123, 1234, 12345, 123456, 1234567])\nassert    0 == skjkasdkd([1234567])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     23 == skjkasdkd([2,4,3,3,5,7,2,9])\nassert     9 == skjkasdkd([1,2,3,4,5,6,7,8,9])\nassert     1 == skjkasdkd([1,2,3,4,5,6,7,8])\nassert     5 == skjkasdkd([5,7,2,3,5,7,2,3,5,7,2,3,5,7])\nassert     7 == skjkasdkd([7,2,3,5,7,2,3,5,7,2,3,5,7])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solution(22)     ==     23\nassert     solution(230)     ==     2\nassert     solution(437)     ==     4\nassert     solution(510)     ==     5\nassert     solution(1153)     ==     3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     int(skjkasdkd(list(range(100)))) == 3\nassert     int(skjkasdkd(list(range(11)))) == 3\nassert     int(skjkasdkd(list(range(26)))) == 9\nassert     int(skjkasdkd(list(range(27)))) == 9\nassert     int(skjkasdkd(list(range(44)))) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         check_dict_case({}) == False\nassert         check_dict_case({\"x\":1, \"y\":2}) == False\nassert         check_dict_case({\"x\":1, \"y\":\"2\"}) == False\nassert         check_dict_case({\"X\":1, \"y\":2}) == False\nassert         check_dict_case({\"x\":1, \"y\":2, \"z\":3}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({1:2}) == False\nassert     check_dict_case({'a':1,'b':2}) == False\nassert     check_dict_case({'A':1,'B':2}) == True\nassert     check_dict_case({'a':'a','b':'b'}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_dict_case({}) is True\nassert     check_dict_case({'F':'F'}) is True\nassert     check_dict_case({'F':'F', 'g':'g'}) is False\nassert     check_dict_case({'F':'F', 'G':'G'}) is False\nassert     check_dict_case({'F':'F', 'f':'f', 'g':'g'}) is False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({1: 'a', 2: 'b'}) == False\nassert     check_dict_case({'a': 1, 'b': 2}) == True\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == False\nassert     check_dict_case({\"a\": 1, \"b\": 2}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_dict_case({\"Zyan\": 1}) == False, \"Not all keys are strings\"\nassert     check_dict_case({\"zYAN\": 1}) == True, \"Not all keys are strings\"\nassert     check_dict_case({\"zYAN\": 1, \"ZYAN\": 2}) == False, \"key does not have lowercase\"\nassert     check_dict_case({\"zYAN\": 1, \"ZYAN\": 2}) == False, \"key does not have uppercase\"\nassert     check_dict_case({\"zYAN\": 1, \"zYAN\": 2}) == True, \"key is mixed\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_dict_case({'a':'A','B':'b'}) is True\nassert     check_dict_case({}) is False\nassert     check_dict_case({'a':'A'}) is False\nassert     check_dict_case({'A':'a'}) is True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1, 'b': 2}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'C': 3}) == True\nassert     check_dict_case({'a': 1, 'B': 2, 'C': 3}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'C': 3, 'd': 4}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_dict_case({})    == False\nassert     check_dict_case({\"a\":\"A\"}) == True\nassert     check_dict_case({\"A\":\"a\"}) == True\nassert     check_dict_case({\"a\":1, \"b\":\"B\"}) == False\nassert     check_dict_case({\"a\":\"A\", \"b\":\"B\"}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"a\":1,\"b\":2}) == True\nassert     check_dict_case({\"A\":1,\"B\":2}) == False\nassert     check_dict_case({\"a\":\"1\",\"b\":\"2\"}) == True\nassert     check_dict_case({\"a\":1,\"b\":2,\"C\":3}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1}) == False\nassert     check_dict_case({'A': 1}) == True\nassert     check_dict_case({'a': 1, 'B': 2}) == False\nassert     check_dict_case({'a': 1, 'b': 2}) == True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_up_to(9) == [2, 3, 5, 7]\nassert count_up_to(11) == [2, 3, 5, 7]\nassert     count_up_to(12) == [2, 3, 5, 7, 11]\n\nprint(\"Passed all tests...\")"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_up_to(10)    == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(100)    == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     count_up_to(5)    == [2, 3, 5]\nassert     count_up_to(1)    == []\nassert     count_up_to(1000000)    == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_up_to(0) == []\nassert count_up_to(1) == [2]\nassert count_up_to(2) == [2, 3]\nassert count_up_to(3) == [2, 3]\nassert count_up_to(4) == [2, 3]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == [2]\nassert     count_up_to(10) == [2, 3, 5, 7]\n\ndef has_divisor_number(n):\n    \"\"\"Return True if the number n contains a number that divides n evenly, otherwise return False.\"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_up_to(1) == [2]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\n\ndef compute_goldbach(n):\n    \"\"\"Implement a function that takes an integer n and returns a list of all the positive integers\n    (a, b) such that a + b = n, where a, b are positive integers and n is a positive integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == []\nassert     count_up_to(2) == [2]\nassert     count_up_to(3) == [2]\nassert     count_up_to(4) == [2, 3]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_up_to(4) == [2, 3]\nassert     count_up_to(6) == [2, 3, 5]\nassert     count_up_to(1) == []\nassert     count_up_to(10) == [2, 3, 5, 7]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_up_to(9) == [2, 3, 5, 7]\nassert count_up_to(11) == [2, 3, 5, 7, 11]\nassert count_up_to(0) == []\nassert count_up_to(-1) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     count_up_to(5000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nassert     count_up_to(1500000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply(0, 1) == 0\nassert     multiply(1, 1) == 1\nassert     multiply(0, 0) == 0\nassert     multiply(1, 0) == 0\nassert     multiply(4, 5) == 4 * 5\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiply(5, 6) == 30\nassert     multiply(0, 1) == 0\nassert     multiply(0, 0) == 0\nassert     multiply(0, 5) == 0\nassert     multiply(4, 8) == 32\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply(2, 5) == 50\nassert     multiply(11, 11) == 121\nassert     multiply(20, 11) == 220\nassert     multiply(11, 21) == 121\nassert     multiply(21, 21) == 987\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply(5, 9) == 45\nassert     multiply(5, 0) == 0\nassert     multiply(5, -1) == -5\nassert     multiply(12, 17) == 574\nassert     multiply(37, 1) == 37\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply(12, 13) == 7\nassert     multiply(8, 9) == 9\nassert     multiply(12345, 7) == 853\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply(2, 4) == 8\nassert     multiply(2, 5) == 10\nassert     multiply(2, 6) == 12\nassert     multiply(2, 7) == 14\nassert     multiply(2, 8) == 16\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply(0, 10) == 0\nassert     multiply(2, 3) == 6\nassert     multiply(10, 10) == 100\nassert     multiply(2, 1) == 2\nassert     multiply(1, 10) == 1\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply(5, 7) == 35\nassert     multiply(15, 3) == 150\nassert     multiply(10, 0) == 0\nassert     multiply(5, 0) == 0\nassert     multiply(0, 10) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_upper('All is well that ends well') == 3\nassert     count_upper('All is well that ends well') == 3\nassert     count_upper('All is well that ends well') == 3\nassert     count_upper('All is well that ends well') == 3\nassert     count_upper('All is well that ends well') == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_upper('hello') == 1\nassert     count_upper('eel') == 2\nassert     count_upper('Ain') == 2\nassert     count_upper('MIND') == 1\nassert     count_upper('HELLO') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_upper('abcdef') == 0\nassert     count_upper('efgh') == 1\nassert     count_upper('ABCD') == 2\nassert     count_upper('XYZ') == 0\nassert     count_upper('aAbBcCdD') == 4\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_upper('asdfadsf') == 2\nassert count_upper('asdfads') == 0\nassert count_upper('adffsdf') == 0\nassert count_upper('asdf') == 0\n\n\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_upper('hello') == 0, \"Error\"\nassert     count_upper('y') == 1, \"Error\"\nassert     count_upper('a') == 1, \"Error\"\nassert     count_upper('bb') == 2, \"Error\"\nassert     count_upper('Hello') == 2, \"Error\"\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_upper(\"aAbB\") == 3\nassert     count_upper(\"abC\") == 0\nassert     count_upper(\"AaBb\") == 2\nassert     count_upper(\"aAbB\") == 3\nassert     count_upper(\"aAbB\") == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_upper('abcde') == 0\nassert     count_upper('EbA') == 1\nassert     count_upper('AbCdE') == 3\nassert     count_upper('xyz') == 0\nassert     count_upper('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_upper('a') == 1\nassert     count_upper('BBBB') == 0\nassert     count_upper('Hi') == 0\nassert     count_upper('Hello') == 0\nassert     count_upper('Coffee') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_upper('AAAABBBCC') == 4\nassert     count_upper('AAAABBBCCDE') == 5\nassert     count_upper('A') == 0\nassert     count_upper('ABC') == 0\nassert     count_upper('BBB') == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"10.5\") == 10\nassert     closest_integer(\"-10.5\") == -10\nassert     closest_integer(\"0.5\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14\") == -14\nassert     closest_integer(\"14\") == 14\nassert     closest_integer(\"-1\") == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-19.5\") == -20\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"2.6\") == 2\nassert     closest_integer(\"-2.6\") == -2\nassert     closest_integer(\"8.5\") == 8\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n\n\ndef max_abs_val(numbers):\n    '''\n    Create a function that takes a list of numbers and returns the maximum\n    absolute value of the numbers in the list. For example, the list\n    [-4, -2, 3, 4] should return 4.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     closest_integer(\"3.5\") == 3\nassert     closest_integer(\"-3.5\") == -3\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     closest_integer(\"5\") == 5\nassert     closest_integer(\"-5\") == -5\nassert     closest_integer(\"0.5\") == 0\nassert     closest_integer(\"-0.5\") == 0\nassert     closest_integer(\"-1\") == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.1\") == 14\nassert     closest_integer(\"-14.1\") == -14\nassert     closest_integer(\"12.5\") == 12\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_integer(\"10.4\") == 10\nassert     closest_integer(\"13.6\") == 14\nassert     closest_integer(\"11.5\") == 11\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-15.6\") == -16\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(4) == [1, 2, 2, 1]\nassert     make_a_pile(5) == [1, 2, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     make_a_pile(3) == [3, 3, 3]\nassert     make_a_pile(4) == [4, 4, 4, 4]\nassert     make_a_pile(5) == [5, 5, 5, 5, 5]\nassert     make_a_pile(6) == [6, 6, 6, 6, 6, 6]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n % 2 == 0:\n        return make_a_pile(n - 1) + [n]\n    return make_a_pile(n - 1) + [n - 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 2, 1]\nassert     make_a_pile(5) == [1, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_a_pile(3) == [3, 1, 1]\nassert     make_a_pile(4) == [4, 2, 1]\nassert     make_a_pile(5) == [5, 3, 2]\nassert     make_a_pile(6) == [6, 4, 2]\nassert     make_a_pile(7) == [7, 5, 3]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [2, 1]\nassert     make_a_pile(5) == [2, 3, 1, 1, 2]"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_a_pile(2) == [2,1]\nassert     make_a_pile(3) == [3,2,1]\nassert     make_a_pile(4) == [4,3,2,1]\nassert     make_a_pile(5) == [5,4,3,2,1]\nassert     make_a_pile(6) == [6,5,4,3,2,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 2, 1]\nassert     make_a_pile(5) == [1, 1, 2, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_a_pile(5) == [5, 15, 25, 35, 45]\nassert     make_a_pile(8) == [8, 24, 40, 56, 72, 88, 104, 120]\nassert     make_a_pile(10) == [10, 30, 50, 70, 90, 110, 130, 150]\nassert     make_a_pile(20) == [20, 40, 60, 80, 100, 120, 140, 160]\nassert     make_a_pile(23) == [23, 47, 73, 97, 113, 137, 163, 177]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 2, 1]\nassert     make_a_pile(5) == [1, 2, 2, 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_string('hello, world, hi') == ['hello', 'world', 'hi']\nassert     words_string('hello,world,hi') == ['hello', 'world', 'hi']\nassert     words_string('hello, world,hi') == ['hello', 'world', 'hi']\nassert     words_string('hello, world,hi') == ['hello', 'world', 'hi']\nassert     words_string('hello,world,hi') == ['hello', 'world', 'hi']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_string('Hi, my name is Bob') == ['Hi','my', 'name', 'is', 'Bob']\nassert     words_string('I have a cat') == ['I', 'have', 'a', 'cat']\nassert     words_string('Hi there') == ['Hi', 'there']\nassert     words_string('Hi, my, name, is, Bob') == ['Hi','my', 'name', 'is', 'Bob']\nassert     words_string('Hi, my name is Bob') == ['Hi','my', 'name', 'is', 'Bob']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_string('hello,this,is,a,test') == ['hello', 'this', 'is', 'a', 'test']\nassert     words_string('hello,this,is,a,test,') == ['hello', 'this', 'is', 'a', 'test', '']\nassert     words_string('hello,this,is,a,test') == ['hello', 'this', 'is', 'a', 'test']\nassert     words_string('hello,this,is,a,test,') == ['hello', 'this', 'is', 'a', 'test', '']\nassert     words_string('hello,this,is,a,test,') == ['hello', 'this', 'is', 'a', 'test', '']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_string(\"Hello, World\")     ==    [\"Hello\", \"World\"]\nassert     words_string(\"my,name,is,Kirill\")    ==     [\"my\", \"name\", \"is\", \"Kirill\"]\nassert     words_string(\"Hello, my name is Kirill\") ==     [\"Hello\", \"my name is Kirill\"]\nassert     words_string(\"Hi, my,name,is,Kirill\")     ==     [\"Hi\", \"my\", \"name\", \"is\", \"Kirill\"]\nassert     words_string(\"my,name,is,Kirill\")     ==     [\"my\", \"name\", \"is\", \"Kirill\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_string(\"This is a string\") == [\"This\", \"is\", \"a\", \"string\"]\nassert     words_string(\"This,is,a,string\") == [\"This\", \"is\", \"a\", \"string\"]\nassert     words_string(\"This is a string\") == [\"This\", \"is\", \"a\", \"string\"]\nassert     words_string(\"This,is,a,string\") == [\"This\", \"is\", \"a\", \"string\"]\nassert     words_string(\"This is a string, this\") == [\"This\", \"is\", \"a\", \"string\", \"this\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_string(\"to be, or not to be: that is the question\") == [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\", \"that\", \"is\", \"the\", \"question\"]\nassert     words_string(\"To be, or not to be: that is the question\") == [\"to\", \"be\", \"or\", \"not\", \"to\", \"be\", \"that\", \"is\", \"the\", \"question\"]\nassert     words_string(\"I love you. I like you.\") == [\"I\", \"love\", \"you\", \"I\", \"like\", \"you\", \"I\", \"like\", \"you\"]\nassert     words_string(\"  Hello, World! \") == [\"Hello\", \"World\", \"!\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_string(\"Hello world\") == [\"Hello\", \"world\"]\nassert     words_string(\"Hello world, this,is,a,test\") == [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\nassert     words_string(\"\") == []\nassert     words_string(\" \") == []\nassert     words_string(\"  \") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_string(\"hello,world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello,    world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello,   world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello, world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello, world,\") == [\"hello\", \"world\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_string(\"Hello, World\") == [\"Hello\", \"World\"]\nassert     words_string(\"Hello, World, is, this, fun\") == [\"Hello\", \"World\", \"is\", \"this\", \"fun\"]\nassert     words_string(\"Hello, World, is, this, fun\") == [\"Hello\", \"World\", \"is\", \"this\", \"fun\"]\nassert     words_string(\"\") == []\nassert     words_string(\" \") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_string(\"hello, world, this, is, a, test\")     == [\"hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]\nassert     words_string(\"a, b, c, d\")     == [\"a\", \"b\", \"c\", \"d\"]\nassert     words_string(\"what a f**k, yo\")     == [\"what\", \"a\", \"f\", \"k\", \"yo\"]\n\ndef intersection(firstList, secondList):\n    \"\"\"\n    You will be given two lists of integers. Your task is to find the common numbers in\n    both of them, and return them as a sorted array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     choose_num(3, 6) == 4\nassert     choose_num(3, 6) == 4\nassert     choose_num(5, 10) == 8\nassert     choose_num(5, 10) == 8\nassert     choose_num(10, 10) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     choose_num(1, 10) == 2\nassert     choose_num(1, 100) == -1\nassert     choose_num(100, 1) == -1\nassert     choose_num(10, 9) == -1\n\ndef find_n_digit_num(n):\n    \"\"\"This function takes a positive integer n and returns a list of the\n    n-digit numbers from 0 to 99999999999999, inclusive, in ascending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     choose_num(1, 10) == 2\nassert     choose_num(100, 200) == 150\nassert     choose_num(200, 300) == -1\nassert     choose_num(-100, -200) == -1\nassert     choose_num(0, 10) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     choose_num(0, 1) == -1\nassert     choose_num(1, 2) == -1\nassert     choose_num(2, 3) == -1\nassert     choose_num(3, 4) == -1\nassert     choose_num(4, 4) == 4\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     choose_num(1, 10) == 4\nassert choose_num(10, 1) == 4\nassert choose_num(2, 2) == -1\nassert choose_num(2, 3) == 2\nassert choose_num(1, 10) == 4\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     choose_num(1, 5) == 2\nassert choose_num(6, 8) == -1\nassert choose_num(1, 7) == 2\nassert choose_num(1, 8) == 2\nassert choose_num(3, 8) == 4\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     choose_num(5, 10) == 8\nassert     choose_num(0, 10) == -1\nassert     choose_num(5, 17) == 14\nassert     choose_num(5, 3) == -1\nassert     choose_num(15, 15) == 15\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     choose_num(1, 10) == 2\nassert     choose_num(3, 6) == 4\nassert choose_num(5, 12) == -1\nassert choose_num(12, 5) == -1\nassert choose_num(3, 3) == 3\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     choose_num(0, 0) == -1\nassert     choose_num(1, 0) == -1\nassert     choose_num(1, 1) == -1\nassert     choose_num(1, 4) == -1\nassert     choose_num(4, 1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     choose_num(1, 10) == -1\nassert choose_num(2, 10) == -1\nassert choose_num(5, 10) == -1\nassert choose_num(7, 10) == 8\nassert choose_num(8, 10) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rounded_avg(1, 2) == 1.5\nassert     rounded_avg(10, 19) == 12\nassert     rounded_avg(1, 1) == 0\nassert     rounded_avg(1, 10) == 2\nassert     rounded_avg(1, 1) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef count_bits(n):\n    \"\"\"You are given a non-negative integer n. For all non-negative integers i\n    <= n, count_bits(i) is equal to the number of bits that i has. For example,\n    count_bits(2) = 1, because 2 has only one bit.\n    \"\"\"\n    pass\n\ndef is_palindrome(n):\n    \"\"\"Given a non-negative integer n, return true if n is the same when read\n    from left to right and from right to left. Otherwise, return false.\n    \"\"\"\n    pass\n\ndef reverse(n):\n    \"\"\"Given a non-negative integer n, return the integer n reversed. \n    \"\"\"\n    pass\n\ndef palindrome_number(n):\n    \"\"\"Given a non-negative integer n, return the integer n's palindrome\n    representation, which is the first or last n digits of the number in reverse\n    order. If n is the last or first digit, return n itself. For example, \n    palindrome_number(123) = 321, palindrome_number(12) = 12, and \n    palindrome_number(513) = 51.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rounded_avg(2, 4) == 2.5\nassert     rounded_avg(2, 3) == 2\nassert     rounded_avg(2, 1) == -1\nassert     rounded_avg(1, 2) == -1\nassert     rounded_avg(4, 4) == 4\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rounded_avg(10, 15) == 10.5\nassert     rounded_avg(20, 19) == 21\nassert     rounded_avg(17, 22) == 19\nassert     rounded_avg(7, 3) == -1\nassert     rounded_avg(5, 5) == 5\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rounded_avg(1, 2) == 1\nassert     rounded_avg(1, 3) == 1.5\nassert     rounded_avg(1, 4) == 2\nassert     rounded_avg(1, 5) == 2.5\nassert     rounded_avg(4, 6) == 5\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert rounded_avg(2, 5) == 3\nassert rounded_avg(2, 4) == 2\nassert rounded_avg(5, 7) == -1\nassert rounded_avg(1, 2) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nrounded_avg(1, 2) == 1\nrounded_avg(1, 3) == 1\nassert \nrounded_avg(1, 4) == 2\nassert \nrounded_avg(1, 5) == 2\nassert \nrounded_avg(1, 6) == 2\nassert \nrounded_avg(1, 7) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rounded_avg(1, 2) == 1\nassert     rounded_avg(3, 5) == 3\nassert     rounded_avg(4, 6) == 4\nassert     rounded_avg(1, 0) == -1\nassert     rounded_avg(10, 11) == 10\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \ndef to_binary(n):\n    \"\"\"You are given a positive integer n. Convert n to binary and return the result as an array of 0s and 1s.\n    \"\"\"\n    pass\n\ndef bit_diff(n, m):\n    \"\"\"You are given two binary strings of equal length. You should return the number of positions where the two strings differ.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rounded_avg(2, 4) == 2\nassert     rounded_avg(2, 3) == 2\nassert     rounded_avg(4, 4) == 4\nassert     rounded_avg(3, 3) == 3\nassert     rounded_avg(8, 8) == 8\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique_digits([1, 2, 3]) == [1, 3]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert     unique_digits([1, 1, 1, 1, 1, 1]) == [1]\nassert     unique_digits([]) == []\nassert     unique_digits([1]) == [1]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 1, 2, 2, 2, 3]) == [1, 2, 3]\nassert     unique_digits([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\nassert     unique_digits([1, 2, 2, 2]) == [1, 2]\nassert     unique_digits([2, 2, 2]) == [2]\nassert     unique_digits([]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 4, 5, 6, 8, 9] == unique_digits([1, 2, 4, 5, 6, 8, 9])\nassert     [1, 2, 3, 4, 5] == unique_digits([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 6] == unique_digits([1, 2, 3, 4, 6])\nassert     [1, 2, 3, 4, 6, 8] == unique_digits([1, 2, 3, 4, 6, 8])\nassert     [1, 2, 3, 4, 6, 9] == unique_digits([1, 2, 3, 4, 6, 9])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    input = sys.stdin.read()\n    n = int(input)\n    a = list(map(int,input.split()))\n    for x in unique_digits(a):\n        print(x, end = \" \")\n\n\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_digits([1,2,3,4,5,6]) == [1,2,3,4,5]\nassert     unique_digits([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     unique_digits([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7]\nassert     unique_digits([2,4,6,8]) == [2,4,6,8]\nassert     unique_digits([10,11,12]) == [10,11,12]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 2, 3] == unique_digits([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5] == unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == unique_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == unique_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([10,11,12,13,14,15,16,17,18,19,20]) == [10,11,12,13,14,15,16,17,18,19,20]\nassert     unique_digits([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef median(l):\n    \"\"\"Given a list of integers l. return the median of the list. If the \n    list is empty, then return None.\n\n    Note: The median is the middle number of the sorted list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_digits([123, 838, 847, 354, 712, 911, 125, 156, 851, 676, 966, 815, 971, 679, 945, 814, 982, 648, 649, 324, 873, 946, 885, 761, 689, 615, 468, 460, 924, 412, 877, 577, 956, 925, 906, 774, 699, 874, 797, 627, 888, 699, 745, 572, 962, 638, 890, 371, 972, 957, 491, 918, 704, 890, 734, 865, 559, 977, 879, 725, 970, 776, 991, 705, 449, 745, 964, 577, 971, 625, 534, 455, 845, 888, 772, 703, 795, 795, 848, 738, 779, 939, 684, 873, 911, 535, 520, 778, 883, 705, 979, 932, 934, 990, 652, 758, 959, 996, 795, 958, 943, 944, 643, 694, 756, 836, 914, 629, 745, 964, 838, 939, 652, 646, 945, 859, 918, 939, 801, 852, 599, 795, 972, 925, 838, 839, 742, 4, 921, 887, 936, 626, 629, 636, 943, 732, 939, 929, 952, 636, 948, 813, 915, 579, 621, 856, 673, 859, 713, 689, 579, 964, 880, 704, 769, 862, 934, 895, 926, 940, 884, 957, 857, 957, 682, 772, 846, 904, 948, 755, 799, 945, 905, 944, 852, 709, 813, 661, 878, 812, 812, 683, 813, 914, 615, 879, 814, 858, 735, 893, 799, 814, 573, 908, 866, 858, 846, 913, 836, 572, 814, 923, 912, 915, 814, 914, 847, 832, 757, 589, 597, 926, 659, 789, 663, 895, 786, 796, 891, 869, 775, 886, 864, 873, 851, 867, 805, 682, 927, 828, 818, 874, 818, 745, 735, 944, 862, 714, 822, 948, 635, 734, 748, 835, 939, 706, 754, 859, 878, 758, 825, 645, 844, 659, 772, 895, 943, 964, 857, 934, 744, 836, 741, 826, 844, 723, 728, 776, 876, 778, 742, 879, 921, 752, 816, 925, 942, 908, 848, 652, 847, 927, 935, 870, 912, 918, 864, 910, 664, 764, 964, 852, 835, 731, 819, 665, 925, 873, 869, 729, 876, 717, 824, 759, 728, 774, 945, 832, 738, 678, 537, 913, 923, 684, 921, 939, 718, 901, 623, 904, 753, 682, 799, 875, 904, 896, 953, 848, 927, 758, 742, 669, 914, 842, 828, 901, 890, 794, 866, 779, 883, 842, 912, 826, "
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_digits([2,2,2,2,3,4,5,6,7])==[2,3,4,5,6,7]\nassert     unique_digits([0,1,2,3])==[0,1,2,3]\nassert     unique_digits([1,2,2,2,2,3,3,3])==[1,2,3]\nassert     unique_digits([1,2,2,2,2,3,3,3,3,3])==[1,2,3]\nassert     unique_digits([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ids_by_length(by_length([9, 4, 5, 1, 8, 2, 3, 7, 6]),\n    [\"Eight\", \"Three\", \"Seven\", \"One\", \"Six\", \"Four\", \"Nine\", \"Two\", \"Five\"])\nassert ids_by_length(by_length([5, 1, 4, 2, 3]),\n    [\"Five\", \"One\", \"Four\", \"Two\", \"Three\"])\nassert ids_by_length(by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]),\n    [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"])\nassert ids_by_length(by_length([4, 3, 2, 1]),\n    [\"Four\", \"Three\", \"Two\", \"One\"])\nassert ids_by_length(by_length([1, 2, 3]),\n    [\"One\", \"Two\", \"Three\"])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     by_length([4, 3, 9, 8, 2, 1, 5, 6, 7]) ==     [\"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Nine\"]\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length([5, 9, 2, 1, 4, 8, 7, 6, 3]) ==     [\"Five\", \"Eight\", \"Seven\", \"Six\", \"Four\", \"Three\", \"Two\", \"One\", \"Nine\"]\nassert     by_length([6, 5, 9, 8, 7, 4, 3, 2, 1]) ==     [\"Six\", \"Five\", \"Nine\", \"Eight\", \"Seven\", \"Four\", \"Three\", \"Two\", \"One\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     by_length([1, 5, 6, 7, 8, 9]) == \"One Five Six Seven Eight Nine\".split(\" \")\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"One Two Three Four Five Six Seven Eight Nine\".split(\" \")\nassert     by_length([1, 2, 3, 9, 8, 7]) == \"One Two Three Nine Eight Seven\".split(\" \")\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"One Two Three Four Five Six Seven Eight Nine\".split(\" \")\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"One Two Three Four Five Six Seven Eight Nine\".split(\" \")\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     by_length([3, 4, 5, 1, 8, 2, 9])    == ['Four', 'One', 'Seven', 'Eight', 'Nine', 'Five', 'Six', 'Three', 'Two']\nassert     by_length([0, 0, 0, 0, 0, 0, 0, 0, 0])    == ['Zero'] * 10\nassert     by_length([])    == []\nassert     by_length([-1]) == ['Zero']\nassert     by_length([1, 2, 3]) == ['Three', 'Two', 'One']\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     by_length([3, 4, 5, 2, 1, 6, 9, 8, 7, 0]) == \"SevenEightFourNineThreeTwoOneSixFiveSeven\"\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == \"NineEightSevenSixFiveFourThreeTwoOne\"\nassert     by_length([5, 4, 3, 2, 1, 6, 9, 8, 7, 0]) == \"SevenEightFourNineThreeTwoOneSixFive\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == \"OneTwoThreeFourFiveSixSevenEightNineZero\"\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == \"NineEightSevenSixFiveFourThreeTwoOne\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     by_length( [1, 3, 9, 8, 4, 5, 6, 7, 2] ) == \"One Five Six Seven Two Three Four Eight Nine\"\nassert by_length( [5, 1, 4, 1, 7, 9, 2, 2, 4] ) == \"One Nine Two One Four Five Six Seven Nine Two Two Four\"\nassert by_length( [2, 1, 4, 6, 8] ) == \"One Four Six Two Eight One\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     by_length( [9,8,7,1,2,3,4,5,6,0]) == 'Five Six Seven Eight Nine'\nassert     by_length( [0,9,8,7,6,5,4,3,2,1]) == 'One Two Three Four Five Six Seven Eight Nine'\nassert     by_length( [1,9,8,7,2,3,4,5,6,0]) == 'One Two Three Four Five Six Seven Eight Nine'\nassert     by_length( [0,5,4,3,2,1,9,8,7,6]) == 'One Two Three Four Five Six Seven Eight Nine'\nassert     by_length( [0,4,3,2,1,9,8,7,6]) == 'One Two Three Four Five Six Seven Eight Nine'\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     by_length([3, 9, 0, 1]) == [\"Three\", \"Nine\", \"One\", \"Zero\"]\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\"]\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     by_length([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9]) == ['One', 'One', 'One', 'Two', 'Two', 'Two', 'Three', 'Three', 'Three', 'Four', 'Four', 'Four', 'Five', 'Five', 'Five', 'Six', 'Six', 'Six', 'Seven', 'Seven', 'Seven', 'Eight', 'Eight', 'Eight', 'Nine', 'Nine', 'Nine']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1]) == ['One']\nassert     by_length([]) == []\nassert     by_length([1, 2]) == ['One', 'Two']\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     by_length([3,1,6,2,7,4,9,5,8]) == \"Three One Six Two Seven Four Nine Five Eight Six Seven Eight Nine\".split()\nassert     by_length([0,0,0,0,0,0,0,0,0]) == \"Zero Zero Zero Zero Zero Zero Zero Zero Zero Zero Zero Zero Zero\".split()\nassert     by_length([9,0,0,0,0,0,0,0,0]) == \"Nine Zero Zero Zero Zero Zero Zero Zero Zero Zero Zero Zero Zero\".split()\nassert     by_length([9,0,0,0,0,0,0,0,1]) == \"Nine Zero Zero One Zero Zero Zero Zero Zero Zero One Zero\".split()\nassert     by_length([9,0,0,0,0,0,0,0,7]) == \"Nine Zero Seven Zero Zero Zero Zero Zero Zero Seven Zero\".split()\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test_f():\n    assert f(1) == [1]\n    assert f(2) == [1,2]\n    assert f(3) == [1,2,6]\n    "
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1,2]\nassert     f(3) == [1,2,6]\nassert     f(4) == [1,2,6,24]\nassert     f(5) == [1,2,6,24,120]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(5) == [1, 2, 6, 24, 120]\nassert     f(6) == [1, 2, 6, 24, 120, 720]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     f(0) == [1]\nassert     f(1) == [1,1]\nassert     f(2) == [1,1,2]\nassert     f(3) == [1,1,2,6]\nassert     f(4) == [1,1,2,6,24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\n\n\n\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [f(n) for n in range(1, 10)] == [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert f(15) == [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800,\n    40320, 48384, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112,\n    2664800, 5331680, 729248, 218720, 4536000, 40320, 362880, 325824, 1026112"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         even_odd_palindrome(100) == (2, 6)\nassert         even_odd_palindrome(11) == (1, 1)\nassert         even_odd_palindrome(12) == (2, 4)\nassert         even_odd_palindrome(17) == (2, 8)\nassert         even_odd_palindrome(18) == (2, 6)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = int(input())\n    # n = 10\n    res = even_odd_palindrome(n)\n    print(res)\n\n\n\n\n\n\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (2, 0)\nassert     even_odd_palindrome(5) == (2, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(8) == (3, 2)\nassert     even_odd_palindrome(10) == (4, 1)\nassert     even_odd_palindrome(12) == (5, 0)\nassert     even_odd_palindrome(100) == (100, 0)\nassert     even_odd_palindrome(101) == (100, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(3) == (2, 0)\nassert     even_odd_palindrome(5) == (2, 1)\nassert     even_odd_palindrome(7) == (3, 0)\nassert     even_odd_palindrome(9) == (3, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(5) == (3, 1)\nassert     even_odd_palindrome(10) == (3, 0)\nassert     even_odd_palindrome(15) == (6, 0)\nassert     even_odd_palindrome(100) == (9, 0)\nassert     even_odd_palindrome(1000) == (12, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(11) == (4, 6)\nassert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(3) == (2, 0)\nassert     even_odd_palindrome(4) == (2, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(10) == (5, 5)\nassert     even_odd_palindrome(11) == (6, 6)\nassert     even_odd_palindrome(100) == (25, 25)\nassert     even_odd_palindrome(123) == (17, 17)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(123) == (3, 1)\nassert     even_odd_palindrome(69) == (2, 1)\nassert     even_odd_palindrome(1001) == (8, 6)\nassert     even_odd_palindrome(12345) == (1, 4)\nassert     even_odd_palindrome(123456789) == (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(10) == (2, 0)\nassert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(20) == (2, 0)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(100) == (2, 0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_nums([123, -123, -123, 123, 1, 3, 10, 8, 5, 7, 4]) == 3\nassert     count_nums([1, 3, 5, 7, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == 2\nassert     count_nums([]) == 0\nassert     count_nums([1, 2, 3]) == 0\nassert     count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1]) == 1\nassert     count_nums([-123, -12, -11]) == 2\nassert     count_nums([-123, -12, -11, 0, 1]) == 3"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_nums([-1, -2, -3, 4, 5, 6, 7, 8, 9]) == 9\nassert     count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 9\nassert     count_nums([]) == 0\nassert     count_nums([-12, -11, -10]) == 0\nassert     count_nums([-13, -12, -11, -10]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_nums([5, 6, -12, -9]) == 2\nassert     count_nums([5, -9, -12, -2, 7]) == 3\nassert     count_nums([-123, -7, -7, -3]) == 2\nassert     count_nums([]) == 0\n\nprint(\"Passed all tests.\")"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_nums([5, 7, -1, -3, 2, 4, -6, -2]) == 4\nassert     count_nums([]) == 0\nassert     count_nums([1]) == 0\nassert     count_nums([1, 2, 3, 4]) == 0\nassert     count_nums([5, 6, -2, -8]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_nums([7, 5, 3, 1, 2, 0, -1, -10]) == 3\nassert count_nums([0, 0, 0, 0]) == 1\nassert count_nums([0, 0, 0, 0, -1, -2, -3, -4]) == 0\nassert count_nums([0, 0, 0, 0, -10, -12, -11, -9]) == 1\nassert count_nums([0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_nums([-4, -9, -11, -15, 3]) == 2\nassert     count_nums([-1, 2, 3]) == 1\nassert     count_nums([]) == 0\nassert     count_nums([-3, 0, -2]) == 2\nassert     count_nums([5, -8, 9, -12, -4]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1]) == 1\nassert     count_nums([-1, -2, -3]) == 3\nassert     count_nums([-1, 1, 2, 3]) == 2\nassert     count_nums([-2, 0, 2]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([-100, -42, 0, 100, -20, 2, 3, 9, 9, 12, -2, -9, 99, -5, -1, 0, -3, 8, 7, -9, -5, -9, -42, 0, 3, 6, -12, -5, -20, -5, -2, 8, -20, 0, -3, -2, -1, -4, -2, -1, -2, -5, -4, -1, -5, -5, -3, -4, -1, -2, -5, -4, -3, -2, -1, -1, -1, -5, -3, -4, -5, -1, -1, -2, -4, -5, -5, -2, -2, -3, -2, -3, -5, -2, -3, -2, -1, -5, -1, -5, -1, -1, -3, -1, -2, -3, -4, -1, -2, -2, -2, -2, -3, -2, -5, -5, -2, -4, -5, -2, -5, -4, -2, -4, -5, -2, -2, -4, -1, -5, -5, -2, -3, -4, -4, -2, -4, -5, -2, -3, -2, -4, -4, -5, -5, -2, -5, -4, -2, -4, -5, -2, -5, -1, -1, -1, -5, -1, -2, -1, -1, -5, -4, -5, -1, -2, -4, -4, -2, -5, -2, -2, -4, -5, -2, -5, -1, -4, -5, -5, -1, -5, -4, -2, -5, -5, -3, -5, -3, -3, -3, -5, -2, -5, -1, -5, -5, -5, -2, -2, -3, -1, -5, -5, -2, -5, -5, -1, -2, -1, -2, -2, -1, -3, -5, -5, -3, -5, -5, -1, -4, -5, -5, -3, -2, -5, -3, -4, -1, -5, -2, -3, -1, -5, -4, -2, -3, -1, -1, -5, -2, -5, -4, -2, -4, -5, -2, -5, -4, -5, -5, -5, -5, -1, -5, -3, -4, -5, -5, -5, -5, -1, -2, -2, -2, -3, -1, -5, -2, -3, -1, -3, -3, -3, -1, -2, -3, -1, -4, -4, -3, -3, -4, -5, -3, -5, -2, -2, -5, -4, -3, -1, -5, -5, -2, -1, -5, -2, -2, -3, -1, -2, -1, -2, -3, -2, -2, -5, -1, -4, -5, -2, -4, -4, -5, -2, -5, -4, -5, -5, -1, -5, -2, -5, -5, -1, -5, -2, -4, -5, -2, -3, -5, -5, -5, -5, -3, -5, -5, -5, -5, -5, -4, -5, -5, -5, -4, -2, -5, -3, -5, -5, -5, -5, -5, -4, -5, -5, -5, -2, -"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_nums([1, 2, 3]) == 1\nassert     count_nums([1, 2, 3, -4]) == 1\nassert     count_nums([-1, -2, -3, -4]) == 1\nassert     count_nums([-1, -2, -3, -4, -5, -6]) == 2\nassert     count_nums([-1, -2, -3, -4, -5, -6, 0, 10, 19]) == 3\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True, \"Wrong result\"\nassert     move_one_ball([4,5,3,2,1]) == True, \"Wrong result\"\nassert     move_one_ball([1,5,3,2,4]) == False, \"Wrong result\"\nassert     move_one_ball([1,5,3,2,4]) == False, \"Wrong result\"\nassert     move_one_ball([3,2,1]) == True, \"Wrong result\"\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     move_one_ball([4, 1, 3, 5, 6]) == True\nassert     move_one_ball([5, 6, 4, 1, 3]) == False\nassert     move_one_ball([]) == True\n\ndef find_missing_num(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to find the\n    missing number by using the following algorithm.\n\n    Let the array be 'arr'. We know that 'arr' has unique elements. Each of the\n    element from the array are present in the array. We will sort the array \n    and then find the number which is not present in the array.\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     move_one_ball([1,3,4,7,9]) == False\nassert     move_one_ball([1,2,3,4,5,6]) == True\nassert     move_one_ball([1,2,3,4,5,6,7]) == False\nassert     move_one_ball([1,2,3,4,5,6,7,8,9]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     move_one_ball([1, 2, 3, 4]) == True\nassert     move_one_ball([1, 3, 2, 4]) == False\nassert     move_one_ball([2, 1, 3, 4]) == False\nassert     move_one_ball([1, 1, 5, 4, 3, 2]) == True\nassert     move_one_ball([3, 1, 5, 4, 3, 2]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8,9]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([1]) == True\nassert     move_one_ball([1,2,3,4,5]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     move_one_ball([9, 4, 2, 1, 7, 5, 3, 6, 8]) == True\nassert     move_one_ball([5, 8, 1, 4, 3, 9, 6, 2, 7]) == False\nassert     move_one_ball([9, 4, 2, 1, 7, 5, 3, 6, 8]) == False\nassert     move_one_ball([3, 4, 5, 6, 7, 1, 2, 3]) == False\nassert     move_one_ball([4, 5, 6, 7, 1, 2, 3]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     move_one_ball([5, 1, 3, 2, 4]) == True\nassert     move_one_ball([2, 1, 3, 4, 5]) == True\nassert     move_one_ball([2, 3, 1, 4, 5]) == True\nassert     move_one_ball([2, 3, 1, 4, 5, 6]) == True\nassert     move_one_ball([2, 3, 1, 4, 5, 6, 7]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([1]) == True\nassert     move_one_ball([1, 2]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     move_one_ball([0]) == True\nassert     move_one_ball([0, 1]) == False\nassert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([0, 1, 2, 3, 4, 5]) == True\nassert     move_one_ball([2, 1, 3, 0]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     move_one_ball([9, 1, 4, 5, 2, 8, 7]) == True\nassert     move_one_ball([9, 1, 4, 5, 2, 8, 7, 3]) == False\nassert     move_one_ball([9, 1, 4, 5, 2, 8, 7]) == True\nassert     move_one_ball([1, 2, 3]) == True\nassert     move_one_ball([1, 2]) == False\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 4, 4, 5, 8, 10, 11], [0, 1, 4, 5, 6, 9, 11, 11]) == 'YES'\nassert     exchange([1, 2, 4, 4, 5, 8, 10, 11], [0, 1, 4, 5, 6, 9, 11, 11]) == 'NO'\nassert     exchange([], [0, 1, 4, 5, 6, 9, 11, 11]) == 'YES'\nassert     exchange([], []) == 'NO'\nassert     exchange([1, 2, 4, 4, 5, 8, 10, 11], [0, 1, 4, 5, 6, 9, 11, 11]) == 'YES'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     exchange([1,3,2,5,4,6,7,10,15], [4,7,5,6,10,3,2,15,1]) == \"YES\"\nassert     exchange([1,2,3,4], [4,3,2,1]) == \"NO\"\nassert     exchange([1,2,3,4], [4,2,3,1]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [1, 2, 3, 5, 4]) == \"YES\"\nassert     exchange([3, 1, 2, 4, 5], [1, 2, 3, 5, 4]) == \"NO\"\nassert     exchange([3, 1, 3, 4, 5], [1, 2, 3, 5, 4]) == \"NO\"\nassert     exchange([3, 1, 2, 4, 4], [1, 2, 3, 5, 4]) == \"YES\"\nassert     exchange([3, 1, 2, 4, 4], [1, 2, 3, 5, 5]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 11]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 11]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 11]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     exchange([1, 4, 5], [5, 4, 1]) == \"NO\"\nassert     exchange([1, 3, 5], [5, 4, 1]) == \"YES\"\nassert     exchange([1, 4, 3], [5, 4, 1]) == \"YES\"\nassert     exchange([1, 3, 5, 2], [5, 4, 1]) == \"NO\"\nassert     exchange([1, 3, 5, 2, 4], [5, 4, 1]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     exchange([1, 1, 3], [1, 1, 3, 4, 5]) == \"YES\"\nassert     exchange([1, 1, 3, 4, 5], [1, 1, 3]) == \"NO\"\nassert     exchange([2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     exchange([1,1,2,3,4], [1,2,3,4,1]) == \"YES\"\nassert     exchange([1,1,2,3,4], [1,5,3,4,1]) == \"NO\"\nassert     exchange([1,2,3,4], [1,1,2,3,4]) == \"YES\"\nassert     exchange([1,2,3,4], [1,1,1,1,1]) == \"NO\"\nassert     exchange([1,2,3,4], [2,1,2,3,4]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     exchange([1,2,3,4], [4,2,3,1]) == \"YES\"\nassert     exchange([1,2,3,4], [1,3,4,2]) == \"NO\"\nassert     exchange([1,2,3,4], [1,2,3]) == \"NO\"\nassert     exchange([1,2,3,4], [5,6,7,8]) == \"NO\"\nassert     exchange([1,2,3,4], [3,2,1]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6], [2, 3, 1, 4, 5, 6]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [2, 3, 1, 4, 5]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [2, 3, 1, 4]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [2, 3, 1, 4, 5, 6]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [2, 3, 1, 4, 5, 6]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [4, 3, 5, 2, 1]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [4, 3, 5, 2]) == \"NO\"\nassert     exchange([1, 1, 1, 1], [4, 3, 5, 2]) == \"NO\"\nassert     exchange([1, 1, 1, 1], [1, 1, 1, 1]) == \"NO\"\nassert     exchange([1, 1, 1, 1], [1, 1, 1, 1]) == \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     histogram(\"a\") == {\"a\": 1}\nassert     histogram(\"a b\") == {\"a\": 1, \"b\": 1}\nassert     histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\nassert     histogram(\"a b b c c c\") == {\"a\": 2, \"b\": 3, \"c\": 3}\nassert     histogram(\"a a a a a\") == {\"a\": 4}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     histogram(\"aaabbbcccddd\") == {'a':5, 'b':4, 'c':3, 'd':2}\nassert     histogram(\"abab\") == {'a':2, 'b':2}\nassert     histogram(\"aabbbcccddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     histogram(\"abcdef\") == {\"a\":1, \"b\":1, \"c\":1, \"d\":1, \"e\":1, \"f\":1}\nassert     histogram(\"abcd\") == {\"a\":1, \"b\":1, \"c\":1, \"d\":1}\nassert     histogram(\"abcdddd\") == {\"a\":1, \"b\":1, \"c\":1, \"d\":2}\nassert     histogram(\"\") == {}\n\nprint(\"Passed all tests\")"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nassert     histogram('a b b c d a') == {'a': 2, 'b': 2, 'c': 1, 'd': 1}\nassert     histogram('a b c d a') == {'a': 2, 'b': 2, 'c': 1, 'd': 1}\nassert     histogram('b a') == {'a': 1, 'b': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     histogram(\"a b c\")     == {'a':1, 'b':1, 'c':1}\nassert     histogram(\"a b c a\")     == {'a':2, 'b':1, 'c':1}\nassert     histogram(\"a b c b a\")     == {'a':2, 'b':2, 'c':1}\nassert     histogram(\"a b c b b a\")     == {'a':3, 'b':2, 'c':1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     histogram('this') == {'t':1}\nassert     histogram('thisisatest') == {'t':1,'s':2}\nassert     histogram('thisisatestisatest') == {'t':2,'s':3}\nassert     histogram('thisisatestisatestisatest') == {'t':3,'s':4}\nassert     histogram('thisisatestisatestisatestisatest') == {'t':4,'s':5}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     histogram(\"a b c d e f\") == {\"a\":1, \"b\":1, \"c\":1, \"d\":1, \"e\":1, \"f\":1}\nassert     histogram(\"\") == {}\nassert     histogram(\"z\") == {\"z\":1}\nassert     histogram(\"a aa\") == {\"a\":2}\nassert     histogram(\"aabbbccd\") == {\"a\":2, \"b\":2, \"c\":2, \"d\":1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     histogram(\"aa\") == {'a': 1}\nassert     histogram(\"ab\") == {'a': 1, 'b': 1}\nassert     histogram(\"abab\") == {'a': 2, 'b': 2}\nassert     histogram(\"abababa\") == {'a': 3, 'b': 3}\nassert     histogram(\"abababaab\") == {'a': 3, 'b': 3}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     histogram('aa bb') == {'a': 2, 'b': 2}\nassert     histogram('aa bb aa') == {'a': 2, 'b': 2, 'a': 2}\nassert     histogram('aa aa aa aa bb') == {'a': 3, 'b': 1}\nassert     histogram('aa aa aaa aaa') == {'a': 3, 'a': 3}\nassert     histogram('abc') == {'a': 1, 'b': 1, 'c': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     histogram('cbaaabbcccaaa') == {'a': 5, 'b': 4, 'c': 4}\nassert     histogram('aaaaaabaaab') == {'a': 4}\nassert     histogram('abccdb') == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram('abccdbc') == {'a': 1, 'b': 2, 'c': 1, 'd': 1}\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_delete(    \"accccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n\n\n    ,    \"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_delete(\"abcd\",\"dcba\") == ('abcd',True)\nassert     reverse_delete(\"radar\",\"radar\") == ('radar',True)\nassert     reverse_delete(\"hello\",\"ll\") == ('helo',True)\nassert     reverse_delete(\"\",\"\") == ('',True)\nassert     reverse_delete(\"\",'a') == ('',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_delete(\"aabbbcccdd\", \"bcccdd\") == (\"bbbccccdd\", True)\nassert     reverse_delete(\"abcdefg\", \"bef\") == (\"cdefgab\", False)\nassert     reverse_delete(\"bbaa\", \"bbaa\") == (\"ba\", True)\nassert     reverse_delete(\"bbaa\", \"bbba\") == (\"\", False)\nassert     reverse_delete(\"bbaa\", \"b\") == (\"bba\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_delete('racecar', 'ace') == ('racecar', True)\nassert     reverse_delete('racecar', 'ac') == ('racecar', True)\nassert     reverse_delete('racecar', 'rac') == ('racecar', True)\nassert     reverse_delete('racecar', 'ar') == ('racecar', True)\nassert     reverse_delete('racecar', 'rcar') == ('racecar', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"\", \"\") == ('', True)\nassert     reverse_delete(\"a\", \"a\") == ('', True)\nassert     reverse_delete(\"abc\", \"a\") == ('bc', True)\nassert     reverse_delete(\"abcd\", \"cd\") == ('abcd', True)\nassert     reverse_delete(\"abcd\", \"cdg\") == ('abcd', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_delete(s=\"abccccd\", c=\"cd\") == (\"cccccc\", True)\nassert     reverse_delete(s=\"abccccd\", c=\"ab\") == (\"c\", False)\nassert     reverse_delete(s=\"\", c=\"\") == (\"\", True)\nassert     reverse_delete(s=\"abccccd\", c=\"z\") == (\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\", True)"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_delete('aba','a') == ('b',True)\nassert     reverse_delete('aaaa','a') == ('aaaa',False)\nassert     reverse_delete('abcdaa','a') == ('abcd',True)\nassert     reverse_delete('abd','ab') == ('ab',True)\nassert     reverse_delete('xyz','y') == ('yxz',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_delete('level', 'e') == ('leve', True)\nassert     reverse_delete('level', 'el') == ('lel', True)\nassert     reverse_delete('level', 'le') == ('l', True)\nassert     reverse_delete('level', 'l') == ('', False)\nassert     reverse_delete('', 'level') == ('', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_delete('anna', 'nnna') == ('aa', False)\nassert     reverse_delete('anna', 'nnna') == ('aa', True)\nassert     reverse_delete('anna', 'zzz') == ('anna', True)\nassert     reverse_delete('anna', 'tttt') == ('', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_delete(\"abcdcba\", \"bac\") == (\"cdcba\", True), \"The return tuple is not correct.\"\nassert     reverse_delete(\"abcdcba\", \"abc\") == (\"bcdcba\", True), \"The return tuple is not correct.\"\nassert     reverse_delete(\"abcdcba\", \"cba\") == (\"abcdba\", True), \"The return tuple is not correct.\"\nassert     reverse_delete(\"abcdcba\", \"cbc\") == (\"bacdca\", True), \"The return tuple is not correct.\"\nassert     reverse_delete(\"abcdcba\", \"a\") == (\"bcda\", True), \"The return tuple is not correct.\"\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_count([\"12\", \"2\", \"23\", \"16\", \"25\"]) == [3, 3, 2, 2, 2]\nassert     odd_count([\"12\", \"2\", \"23\", \"3\", \"16\", \"25\"]) == [3, 3, 2, 2, 2]\nassert     odd_count([\"12\", \"2\", \"23\", \"15\", \"25\"]) == [3, 3, 2, 2, 2]\nassert     odd_count([\"12\", \"2\", \"23\", \"15\", \"25\", \"16\", \"3\", \"2\", \"4\", \"7\", \"3\", \"1\", \"9\"]) == [3, 3, 2, 3, 3, 3, 2, 3, 2, 2, 3, 3]\nassert     odd_count([\"12\", \"2\", \"23\", \"15\", \"25\", \"16\", \"3\", \"2\", \"4\", \"7\", \"3\", \"1\", \"9\", \"0\", \"2\", \"1\", \"8\", \"1\", \"2\", \"1\"]) == [3, 3, 2, 3, 3, 3, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_count([\"inp1\", \"inp2\", \"inp3\", \"inp4\", \"inp5\"]) == \\\n            [2, 1, 1, 1, 1]\nassert     odd_count([\"inp1\", \"inp2\", \"inp3\", \"inp4\", \"inp5\", \"inp6\", \"inp7\"]) == \\\n            [2, 1, 1, 1, 1, 1, 1]\nassert     odd_count([\"inp1\", \"inp2\", \"inp3\", \"inp4\", \"inp5\", \"inp6\", \"inp7\", \"inp8\", \"inp9\"]) == \\\n            [2, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     odd_count([\"inp1\", \"inp2\", \"inp3\", \"inp4\", \"inp5\", \"inp6\", \"inp7\", \"inp8\", \"inp9\", \"inp10\"]) == \\\n            [2, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     odd_count([\"inp1\", \"inp2\", \"inp3\", \"inp4\", \"inp5\", \"inp6\", \"inp7\", \"inp8\", \"inp9\", \"inp10\", \"inp11\", \"inp12\", \"inp13\", \"inp14\", \"inp15\", \"inp16\", \"inp17\", \"inp18\", \"inp19\", \"inp20\", \"inp21\"]) == \\\n            [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_count(['11', '2', '11', '11', '10']) == [2, 3, 3, 4, 4]\nassert     odd_count(['12', '2', '1', '11', '10']) == [2, 3, 3, 4, 4]\nassert     odd_count(['11', '2', '11', '11', '11', '10']) == [2, 3, 3, 4, 4, 4]\nassert     odd_count(['11', '2', '11', '11', '11', '11', '11']) == [2, 3, 3, 4, 4, 4, 4]\nassert     odd_count(['11', '2', '11', '11', '11', '11', '11', '11']) == [2, 3, 3, 4, 4, 4, 4, 4]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_count(['123', '456', '789'])    == [1, 4, 9]\nassert     odd_count(['12345', '23456', '34567'])    == [5, 10, 15]\nassert     odd_count(['1231', '1232', '1233'])    == [3, 6, 9]\n\n\ndef is_palindrome(str):\n    \"\"\"Given a string, return true if it is a palindrome.\n    A palindrome is a string that reads the same forward and backward.\n    A palindrome is not a string that is a single character.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_count([\"a2\", \"22\", \"b\"]) == [0, 2, 1]\nassert     odd_count([\"a\", \"a\", \"a\"]) == [3, 1, 0]\nassert     odd_count([\"a3\", \"13\", \"a\"]) == [0, 3, 1]\nassert     odd_count([\"a2\", \"22\", \"b\"]) == [0, 2, 1]\nassert     odd_count([\"a3\", \"13\", \"a\"]) == [0, 3, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_count(['1', '2', '4', '9', '15', '16']) == [1, 3, 2, 2, 1, 2]\nassert     odd_count(['4', '4', '1', '3']) == [1, 0, 0, 0]\nassert     odd_count(['1', '6', '3', '5', '5', '6', '5', '3']) == [2, 2, 1, 1, 1, 1, 1, 1]\nassert     odd_count(['5', '3', '5', '3', '1', '5']) == [2, 1, 1, 0, 2, 1]\nassert     odd_count(['0', '0', '0', '0']) == [0, 0, 0, 0]"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_count([1, 2, 3, 4, 5]) == [0, 2, 0, 2, 0]\nassert     odd_count(['1', '2', '3', '4', '5']) == [0, 2, 0, 2, 0]\nassert     odd_count(['123', '124', '125']) == [1, 2, 0]\nassert     odd_count(['123', '234', '345']) == [0, 0, 0]\nassert     odd_count(['12345', '1234', '123']) == [1, 2, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 2, 0, 0, 0, 0, 0, 0, 0, 0] == odd_count([\"345\",\"123\",\"112\",\"45\", \"98\",\"8\",\"4\",\"3\",\"1\"])\nassert     [1, 4, 1, 2, 0, 0, 0, 0, 0, 0] == odd_count([\"1234567890\",\"1234567890\",\"1234567890\",\"1234567890\",\"1234567890\",\"1234567890\",\"1234567890\",\"1234567890\",\"1234567890\"])\nassert     [2, 0, 2, 1, 1, 0, 0, 0, 0, 0] == odd_count([\"3\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\"])\nassert     [2, 0, 2, 0, 0, 0, 0, 0, 0, 0] == odd_count([\"3\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\"])\n\ndef is_palindrome(s):\n    \"\"\"Return True if the string s is a palindrome, False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1] == odd_count(['a1', '2', '3', '4', '5', '6', '7', '8'])\nassert     [3] == odd_count(['100', '101', '102', '103', '104', '105', '106', '107', '108', '109'])\nassert     [3] == odd_count(['112', '113', '114', '115', '116', '117', '118', '119', '120', '121'])\nassert     [2,2,2] == odd_count(['12', '14', '16', '18', '20', '22', '24', '26', '28', '30'])\nassert     [1,3,5] == odd_count(['13', '15', '17', '19', '21', '23', '25', '27', '29', '31'])\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1,2,3]) == 2\nassert minSubArraySum([2,3,4,5,6,7,10]) == 12\nassert minSubArraySum([1,2,3]) == 1\nassert minSubArraySum([1,2]) == 2\nassert minSubArraySum([]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nassert minSubArraySum([-2,-3,4,-1,2,1,-5,4]) == 6\nassert minSubArraySum([1,2,3,4,5]) == 10\nassert minSubArraySum([1]) == 1\nassert minSubArraySum([1,2,3,4,5]) == 10\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print minSubArraySum([1,4,7,2,8,10]) == 14\n    print minSubArraySum([-1,1]) == 1\n    print minSubArraySum([-3,1,2,-3,4]) == 2\n    print minSubArraySum([1,-3,2,0,2,-4]) == 2\n    print minSubArraySum([1,1]) == 1\n    print minSubArraySum([1,2,3]) == 6"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minSubArraySum([1,2,3,4]) == 1\nassert     minSubArraySum([1,2,3,4,5]) == 1\nassert     minSubArraySum([1,2,3,4,5,6]) == 3\nassert     minSubArraySum([1,2,3,4,5,6,7]) == 4\nassert     minSubArraySum([2,3,4,5,6,7,8,9,10]) == 6\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minSubArraySum([1,2]) == 1\nassert     minSubArraySum([1,2,3]) == 1\nassert     minSubArraySum([1,2,3,4]) == 1\nassert     minSubArraySum([1,1,1,1,1,1,1]) == 1\nassert     minSubArraySum([]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minSubArraySum([1, 2, 5, 10, 7, 10, 11]) == 9\nassert     minSubArraySum([1, 1, 2, 3, 1]) == 2\nassert     minSubArraySum([1, 3, 1, 2, 5]) == 4\nassert     minSubArraySum([1, 2, 3]) == 4\nassert     minSubArraySum([3, 1, 2]) == 3\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minSubArraySum([1, 2, 3, 4, 5, 6, 7, 8]) == 15\nassert     minSubArraySum([1, 2, 3, 4, 5, 6, 7]) == 8\nassert     minSubArraySum([1, 2, 3, 4]) == 4\nassert     minSubArraySum([1, 3, 4, 2]) == 6\nassert     minSubArraySum([3, 4, 1, 2]) == 8\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_fill([[1,0,1],[0,0,0],[1,0,1]], 3) == 1\nassert     max_fill([[1,0,1],[0,0,0],[1,0,1]], 2) == 2\nassert     max_fill([[1,0,1],[0,0,0],[1,0,1]], 1) == 1\nassert     max_fill([[1,0,1],[0,0,0],[1,0,1]], 0) == 0\nassert     max_fill([[1,0,1],[0,0,0],[1,0,1]], 1) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_fill([[0,1,0],[1,0,0],[0,0,0]], 1) == 1\nassert     max_fill([[0,1,0],[1,0,0],[0,0,0]], 2) == 3\nassert     max_fill([[0,1,0],[1,0,0],[0,0,0]], 3) == 9\nassert     max_fill([[0,1,0],[1,0,0],[0,0,0]], 4) == 3\nassert     max_fill([[0,1,0],[1,0,0],[0,0,0]], 5) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_fill([\n    [0, 1],\n    [1, 0]], 1) == 1\nassert     max_fill([\n    [0, 1],\n    [1, 0]], 4) == 1\nassert     max_fill([\n    [0, 1],\n    [1, 0]], 2) == 2\nassert     max_fill([\n    [0, 1, 0],\n    [0, 0, 1],\n    [0, 1, 0]], 3) == 1\nassert     max_fill([\n    [0, 1, 0],\n    [0, 0, 1],\n    [0, 1, 0]], 3) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_fill([[1,0,1,1,1],[0,1,0,1,0],[0,0,1,0,0]], 1) == 1\nassert     max_fill([[1,0,1,1,1],[0,1,0,1,0],[0,0,1,0,0]], 2) == 2\nassert     max_fill([[1,0,1,1,1],[0,1,0,1,0],[0,0,1,0,0]], 3) == 3\nassert     max_fill([[1,0,1,1,1],[0,1,0,1,0],[0,0,1,0,0]], 4) == 3\nassert     max_fill([[1,0,1,1,1],[0,1,0,1,0],[0,0,1,0,0]], 5) == 3\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_fill([\n    [0, 1, 0, 1, 0, 1, 0],\n    [1, 1, 0, 0, 0, 0, 1],\n    [0, 0, 1, 0, 0, 1, 0]\n    ], 7) == 2\nassert     max_fill([\n    [1, 1, 0, 1, 1, 1, 1],\n    [1, 1, 1, 0, 0, 0, 0],\n    [1, 1, 1, 0, 1, 0, 0]\n    ], 9) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef min_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to raise the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_fill(\n        [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], 4\n    ) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_fill([[0,1], [1,0]], 1) == 1\nassert     max_fill([[0,1], [1,0]], 2) == 2\nassert     max_fill([[0,1], [1,0]], 3) == 3\nassert     max_fill([[0,1,1], [1,0,1], [0,1,0]], 1) == 3\nassert     max_fill([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_fill([\n    [0,0,0,1],\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,0,0,0]\n    ], 1) == 2\nassert     max_fill([\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,0,0,0]\n    ], 4) == 3\nassert     max_fill([\n    [0,0,0,0,0],\n    [0,1,0,0,0],\n    [0,0,1,0,0],\n    [0,0,0,1,0],\n    [0,0,0,0,0]\n    ], 4) == 1\nassert     max_fill([\n    [0,0,0,0,0],\n    [0,1,0,0,0],\n    [0,0,1,0,0],\n    [0,0,0,1,0],\n    [0,0,0,0,0]\n    ], 1) == 5\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [0] == sort_array([0])\nassert     [0,0] == sort_array([0,0])\nassert     [0,1] == sort_array([0,1])\nassert     [0,1,0] == sort_array([0,1,0])\nassert     [0,1,0,1] == sort_array([0,1,0,1])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array(array('11000111100')) == [5, 2, 7, 1, 7, 4, 4, 8, 8, 9, 3, 0]\nassert     sort_array(array('11111111111111111111111111111111')) == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,4,8,3,5,6,7,9]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,4,8,3,5,6,7,9]\nassert     sort_array([0,0,1,1,1,1,2,2,3,4]) == [0,0,1,1,2,2,3,4,1,1]\nassert     sort_array([0,0,1,1,2,2,3,4,5,6]) == [0,0,1,1,2,2,3,4,5,6]\nassert     sort_array([]) == []\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([111, 1100, 1110, 1111]) == [1110, 1111, 111, 1100]\nassert     sort_array([10, 10]) == [10, 10]\nassert     sort_array([0, 1]) == [0, 1]\nassert     sort_array([10, 110]) == [110, 10]\nassert     sort_array([110, 10]) == [110, 10]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_array([3,2,1,0,1]) == [3,2,1,0,1]\nassert     sort_array([1,0,2,1,0,3,1,0,4]) == [1,0,2,1,0,3,1,0,4]\nassert     sort_array([2,5,3,5,2,3,1,0,0,0,4,0]) == [2,3,1,0,0,0,4,5,5,5,3,2]\nassert     sort_array([2,0,1,2,3,3,2,3,0,3,2,1]) == [1,2,0,2,2,3,3,3,3,2,1,2]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,4,8,3,5,6,7,9]\nassert     sort_array([1,1,1,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,1,1,1,1]\nassert     sort_array([]) == []\nassert     sort_array([10,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7]\nassert     sort_array([0,3,7,2,4,6,1,5,8]) == [0,1,2,4,6,8,5,3,7]\nassert     sort_array([0,0,0,0,0,1,1,1,1,1,1,1,1]) == [0,0,0,0,0,1,1,1,1,1,1,1,1]\nassert     sort_array([]) == []\nassert     sort_array([1]) == [1]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([0,0,1,1,1,1,1,1,1])    == [0,1,1,1,1,1,1,1,1]\nassert     sort_array([0,0,0,0,0,1,1,1,1])    == [0,0,0,0,0,1,1,1,1]\nassert     sort_array([0,0,0,0,0,0,1,1,1])    == [0,0,0,0,0,0,1,1,1]\nassert     sort_array([0,1,1,1,1,1,1,1,1])    == [0,1,1,1,1,1,1,1,1]\nassert     sort_array([0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([1,2,3,4]) == [4,3,2,1],'should be [4,3,2,1]'\nassert     sort_array([0,1]) == [0,1],'should be [0,1]'\nassert     sort_array([0,0]) == [0,0],'should be [0,0]'\nassert     sort_array([1,2,3,4,0,0]) == [0,4,3,2,1,0],'should be [0,4,3,2,1,0]'\nassert     sort_array([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9],'should be [1,2,3,4,5,6,7,8,9]'\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([1, 2, 3]) == [1, 2, 3]\nassert     sort_array([1, 3, 2, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     sort_array([0, 0]) == [0, 0]\nassert     sort_array([1, 10]) == [1, 10]\nassert     sort_array([100, 0, 1, 10]) == [1, 10, 100, 0]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     select_words(\"the cat in the hat\", 2) == ['cat']\nassert     select_words(\"the cat in the hat\", 3) == ['the', 'cat']\nassert     select_words(\"the cat in the hat\", 1) == ['cat']\nassert     select_words(\"\", 2) == []\nassert     select_words(\"the cat in the hat\", 7) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     select_words(\"cab caab dca cb dc bd\", 2) == [\"caab\"]\nassert     select_words(\"cab caab dca cb dc bd\", 3) == [\"caab\", \"dca\"]\nassert     select_words(\"\", 2) == []\nassert     select_words(\"cab caab dca cb dc bd\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     select_words(\"abcdefghijklmnopqrstuvwxyz\", 4) == [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\", \"uvwxy\"]\nassert select_words(\"asfdsfj\", 2) == [\"asfdsfj\"]\nassert select_words(\"\", 1) == []\nassert select_words(\" \", 2) == []\n\n\ndef select_word(s):\n    \"\"\"Given a string s, you are tasked to implement a function that returns a \n    list of all words from string s that contain exactly one vowel.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     select_words(\"apple banana pear\", 2) == ['apple', 'banana']\nassert     select_words(\"apple banana pear\", 3) == ['banana', 'pear']\nassert     select_words(\"apple banana pear\", 1) == []\nassert     select_words(\"\", 2) == []\nassert     select_words(\"apple banana pear\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     select_words(\"My name is Noah\", 4) == ['name']\nassert     select_words(\"My name is Noah\", 5) == []\nassert     select_words(\"Hi my name is Noah\", 2) == ['my', 'name']\nassert     select_words(\"\", 0) == []\nassert     select_words(\"Hi my name is Noah\", -1) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     select_words('a b c d e', 3) == ['a', 'b', 'c']\nassert     select_words('a a a a a', 2) == ['a', 'a']\nassert     select_words('hi there', 3) == ['hi', 'there']\nassert     select_words('', 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     select_words(\"Hi there, my name is brian!\", 2) == [\"brian\"]\nassert     select_words(\"Hi there, my name is brian!\", 3) == [\"brian\"]\nassert     select_words(\"Hi there, my name is brian!\", 4) == [\"brian\"]\nassert     select_words(\"Hi there, my name is brian!\", 5) == [\"brian\"]\nassert     select_words(\"Hi there, my name is brian!\", 6) == [\"brian\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     select_words(\"A a1\", 2) == ['a1']\nassert     select_words(\"a a1\", 2) == ['a1']\nassert     select_words(\"A1 a1\", 2) == ['a1']\nassert     select_words(\"Aa 1\", 2) == ['a1']\nassert     select_words(\"a 1\", 2) == ['a1']\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     select_words(\"This is a test sentence\", 2) == [\"is\", \"a\"]\nassert     select_words(\"this is a test sentence\", 0) == []\nassert     select_words(\"\", 0) == []\nassert     select_words(\"this is a test sentence\", 3) == [\"test\", \"sentence\"]\nassert     select_words(\"this is a test sentence\", 1) == [\"a\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     select_words('I am a boy', 1) == [], \\\n        'Wrong result for I am a boy and 1'\nassert     select_words('I am a boy', 2) == ['boy'], \\\n        'Wrong result for I am a boy and 2'\nassert     select_words('I am a boy', 3) == ['boy', 'am'], \\\n        'Wrong result for I am a boy and 3'\nassert     select_words('I am a boy', 4) == ['boy', 'am', 'a', 'is'], \\\n        'Wrong result for I am a boy and 4'\nassert     select_words('', 1) == [], \\\n        'Wrong result for an empty string and 1'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_closest_vowel(\"test\") == \"e\"\nassert     get_closest_vowel(\"last\") == \"l\"\nassert     get_closest_vowel(\"first\") == \"f\"\nassert     get_closest_vowel(\"haha\") == \"\"\nassert     get_closest_vowel(\"b\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_closest_vowel(\"a\") == \"a\"\nassert     get_closest_vowel(\"e\") == \"e\"\nassert     get_closest_vowel(\"aa\") == \"a\"\nassert     get_closest_vowel(\"ab\") == \"b\"\nassert     get_closest_vowel(\"abc\") == \"c\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_closest_vowel(\"leetcode\") == \"e\"\nassert     get_closest_vowel(\"a\") == \"\"\nassert     get_closest_vowel(\"e\") == \"\"\nassert     get_closest_vowel(\"a\") == \"\"\nassert     get_closest_vowel(\"\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_closest_vowel('beetle') == 'e'\nassert     get_closest_vowel('bicycle') == 'i'\nassert     get_closest_vowel('table') == 't'\nassert     get_closest_vowel('book') == ''\nassert     get_closest_vowel('racecar') == 'r'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"welcome\") == \"e\"\nassert     get_closest_vowel(\"eel\") == \"e\"\nassert     get_closest_vowel(\"welcome\") == \"\"\nassert     get_closest_vowel(\"w\") == \"\"\nassert     get_closest_vowel(\"cab\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         get_closest_vowel('hey') == ''\nassert         get_closest_vowel('methinks') == 'e'\nassert         get_closest_vowel('v') == 'v'\nassert         get_closest_vowel('Methinks') == 'e'\nassert         get_closest_vowel('h') == 'h'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('test') == 'e'\nassert     get_closest_vowel('abcde') == 'b'\nassert     get_closest_vowel('code') == 'a'\nassert     get_closest_vowel('abc') == ''\nassert     get_closest_vowel('code') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('one') == 'e'\nassert     get_closest_vowel('at') == 'a'\nassert     get_closest_vowel('apple') == 'e'\nassert     get_closest_vowel('internationalization') == 'n'\nassert     get_closest_vowel('internationalization') == 'n'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"aeroplane\") == \"a\"\nassert     get_closest_vowel(\"abhg\") == \"b\"\nassert     get_closest_vowel(\"aaaaabh\") == \"a\"\nassert     get_closest_vowel(\"zzzzaaabh\") == \"a\"\nassert     get_closest_vowel(\"babababh\") == \"b\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_closest_vowel('hELLO') == 'e'\nassert     get_closest_vowel('HELLO') == 'e'\nassert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('casa') == 'a'\nassert     get_closest_vowel('qwerty') == 'e'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     match_parens(['(())()']) == 'Yes'\nassert     match_parens(['(()))']) == 'No'\nassert     match_parens(['()()']) == 'Yes'\nassert     match_parens(['()())()']) == 'Yes'\nassert     match_parens(['()(()())']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     match_parens('()())()') == 'Yes'\nassert     match_parens(')(())') == 'No'\nassert     match_parens('()()(())') == 'No'\nassert     match_parens('((())())())') == 'Yes'\n\ndef match_brackets(lst):\n    '''\n    Given a list of n+1 strings, you need to find out whether any two pairs of\n    brackets are in a bracket in the same string. For example, if there are n =\n    2 strings, and the input is the list of string ['[(])', '[(])', '([]())']\n    then the result is 'Yes' because '([]())' is a valid string.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     match_parens(['(', ')', ')']) == 'Yes'\nassert     match_parens(['(', ')', '(']) == 'No'\nassert     match_parens(['(', ')', ')']) == 'Yes'\nassert     match_parens(['(', ')', ')']) == 'Yes'\nassert     match_parens(['(', ')', ')']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     match_parens(['(', ')', '()']) == 'Yes'\nassert     match_parens(['(', ')', '()', ')']) == 'No'\nassert     match_parens(['', '()', ')']) == 'Yes'\nassert     match_parens(['()', '()', ')']) == 'No'\nassert     match_parens(['()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     match_parens(['()', '()']) == 'Yes'\nassert     match_parens(['(())', '()']) == 'No'\nassert     match_parens(['()', '(()']) == 'No'\nassert     match_parens(['()()', '()']) == 'No'\nassert     match_parens(['()()', '(())']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     match_parens(['(()', '))']) == 'Yes'\nassert     match_parens(['(()', '()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     match_parens('(())()') == 'Yes'\nassert     match_parens('(()()') == 'No'\nassert     match_parens(')') == 'No'\nassert     match_parens('())') == 'No'\nassert     match_parens('())') == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     match_parens(['(())()', ')(']) == 'Yes'\nassert     match_parens(['()()', '(()']) == 'No'\nassert     match_parens(['(()(()))', '()(())']) == 'Yes'\nassert     match_parens(['(()(()))', '()(()']) == 'No'"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     match_parens(['(())', '()']) == 'Yes'\nassert     match_parens(['(())', '()']) == 'No'\nassert     match_parens(['(()', '()']) == 'No'\nassert     match_parens(['(()()', '(()']) == 'Yes'\nassert     match_parens(['(()())', '(()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     match_parens(['()()', '()()']) == 'Yes'\nassert     match_parens(['(()', '()()']) == 'No'\nassert     match_parens(['()()', '(())']) == 'Yes'\nassert     match_parens(['()', '()']) == 'No'\nassert     match_parens(['()', '((())()']) == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maximum([], 0) == []\nassert     maximum([1], 1) == [1]\nassert     maximum([1,2], 1) == [1,2]\nassert     maximum([1,2,3], 2) == [1,2]\nassert     maximum([1,2,3,4], 3) == [1,2,3]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maximum([], 0) == []\nassert     maximum([1, 2, 3, 4, 5], 3) == [3, 4, 5]\nassert     maximum([-1, -2, -3, -4, -5], 3) == [-3, -2, -1]\nassert     maximum([-1, -2, -3, -4, -5], -3) == [-3, -2, -1]\nassert     maximum([1, 2, 3, 4, 5], -1) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maximum([3, 1, 2, 4, 3, 1], 3) == [3, 3, 3, 3, 3, 4]\nassert     maximum([3, 1, 2, 4, 3, 1], 0) == []\nassert     maximum([3, 1, 2, 4, 3, 1], 4) == [3, 3, 3, 3, 3, 3]\nassert     maximum([3, 1, 2, 4, 3, 1], 1) == [3, 3, 3, 3, 3, 3]\nassert     maximum([3, 1, 2, 4, 3, 1], 2) == [3, 3, 3, 3, 3, 3]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximum([2, 1, 5, 6, 4], 2) == [6, 5]\nassert     maximum([3, 4, 6, 5], 3) == [6, 5, 4]\nassert     maximum([1, 2, 3, 4, 5], 3) == [5, 4, 3]\nassert     maximum([1, 2, 3, 4, 5], 5) == [5]\nassert     maximum([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     maximum([2, 5, 3, 7, 11], 3) == [5, 7, 11]\nassert     maximum([-2, 5, 3, 7, 11], 3) == [-2, 3, 5, 7, 11]\nassert     maximum([-2, 5, 3, 7, 11], 4) == [-2, 3, 5, 7, 11]\nassert     maximum([-2, 5, 3, 7, 11], 5) == [-2, 3, 5, 7, 11]\nassert     maximum([-2, 5, 3, 7, 11], 7) == [-2, 3, 5, 7, 11]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     maximum([10, 7, 8, 2, 3, 4, 5, 6, 1], 3) == [10, 7, 8]\nassert     maximum([10, 7, 8, 2, 3, 4, 5, 6, 1], 2) == [10, 8]\nassert     maximum([10, 7, 8, 2, 3, 4, 5, 6, 1], 1) == [10]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         [1, 1, 2, 2, 2, 2] == maximum([0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3], 2)\nassert         [0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3] == maximum([1, 2, 3, 3, 3, 3, 3], 3)\nassert         [0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 5] == maximum([1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6], 4)\nassert         [0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5] == maximum([1, 2, 3, 4, 4, 4, 5, 5, 5], 5)\nassert         [0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9] == maximum([1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9], 9)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [4, 3, 2, 1] == maximum([4, 3, 2, 1], 3)\nassert     [0, 1, 2, 3, 4, 5, 6, 7] == maximum([0, 1, 2, 3, 4, 5, 6, 7], 7)\nassert     [0, 1, 2, 3, 4, 5, 6, 7] == maximum([0, 1, 2, 3, 4, 5, 6, 7], 8)\nassert     [5, 4, 3, 2, 1] == maximum([5, 4, 3, 2, 1], 3)\nassert     [4, 3, 2, 1] == maximum([-5, -4, -3, -2, -1], 3)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maximum([1,2,3,4,5,6,7,8], 3) == [5,6,7]\nassert     maximum([1,2,3,4,5,6,7,8], 8) == [8,7,6,5,4,3,2,1]\nassert     maximum([1,2,3,4,5,6,7,8], 0) == []\nassert     maximum([], 1) == []\nassert     maximum([1], 1) == [1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     maximum([], 0)     == []\nassert     maximum([], 1)     == []\nassert     maximum([], 2)     == []\nassert     maximum([1], 1)     == [1]\nassert     maximum([1, 2], 1)     == [2]\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\"\"\"\n1)\n5,3,3,1,3\n(1,5,3,3,1)\n2)\n1,2,3,3,4\n(1,2,3,3,4)\n3)\n1,2,3,4,3,2,1\n(1,2,3,4,3,2,1)\n\"\"\""
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solution([1, 3, 5, 7]) == 4\nassert     solution([2, 4, 6, 8]) == 0\nassert     solution([1, 2, 3, 4]) == 0\nassert     solution([3, 4, 6, 8]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solution([1, 2, 3, 4, 5]) == 3\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solution([1,2,3,4,5,6,7,8]) == 5\nassert     solution([2,4,6]) == 0\nassert     solution([20,1,9,3,5,7,2,4,6,8]) == 19\nassert     solution([1,2,3]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solution([1,2,3,4,5,6,7,8,9]) == 8\nassert     solution([1,2,3,4,5,6,7,8,9,0]) == 19\nassert     solution([1,2,3,4,5,6,7,8,9,10]) == 45\nassert     solution([1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0]) == 44\n\nprint \"passed all tests!"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solution([1,2,3,4,5,6]) == 0\nassert     solution([0,1,2,3,4,5,6]) == 0\nassert     solution([1,3,5]) == 5\nassert     solution([]) == 0\nassert     solution([2,4,6,8,10,3,14,16]) == 44"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solution([1,2,3,4,5,6]) == 15\nassert     solution([1,2,3,4,5,6,7,8,9,10]) == 13\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 19"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_elements( [5, 10, 15, 10, 5, 15, 10], 5) == 30\nassert     add_elements( [1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 16\nassert     add_elements( [1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 21\nassert     add_elements( [1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 34\nassert     add_elements( [1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 45\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_elements([1, 3, 5, 7], 1) == 8\nassert     add_elements([1, 3, 5, 7], 2) == 7\nassert     add_elements([1, 3, 5, 7], 3) == 5\nassert     add_elements([1, 3, 5, 7], 4) == 7\nassert     add_elements([1, 3, 5, 7], 5) == 7\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 2) == 4\nassert     add_elements([1, 2, 3, 4, 5, 6], 2) == 7\nassert     add_elements([1, 2, 3, 4, 5, 6, 7], 3) == 13\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8], 3) == 19\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 26\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 2) == 'e'\nassert     add_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 3) == 'f'\nassert     add_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 4) == 'g'\nassert     add_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 5) == 'a'\nassert     add_elements(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 6) == 'd'\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_elements([1,2,3,4,5,6,7], 3) == 25\nassert     add_elements([1,1,1,1,1,1], 1) == 5\nassert     add_elements([5,2,2,3,6,7], 3) == 18\nassert     add_elements([10,2,2,3,6,7], 3) == 18\nassert     add_elements([10,2,2,3,6,7], 1) == 18\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_elements([], 0) == 0\nassert     add_elements([1], 1) == 1\nassert     add_elements([1, 2], 2) == 2\nassert     add_elements([1, 2, 3], 2) == 5\nassert     add_elements([1, 2, 3, 4], 2) == 8\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_elements([7, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 3) == 40\nassert     add_elements([1, 2, 3, 4, 5], 4) == 21\nassert     add_elements([1, 2, 3, 4], 1) == 0\nassert     add_elements([1, 2, 3, 4], 5) == 15\nassert     add_elements([4, 3, 2, 1], 3) == 5\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_elements([3,34,4,5,6,7,8,9,10,34,56,66,77,87], 5) == 15\nassert     add_elements([3,34,4,5,6,7,8,9,10,34,56,66,77,87], 8) == 141\nassert     add_elements([3,34,4,5,6,7,8,9,10,34,56,66,77,87], 9) == 156\nassert     add_elements([3,34,4,5,6,7,8,9,10,34,56,66,77,87], 10) == 168\nassert     add_elements([3,34,4,5,6,7,8,9,10,34,56,66,77,87], 11) == 174\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nassert add_elements([1, 2, 3, 4, 5], 2) == 2 + 4 + 5\nassert add_elements([1, 2, 3, 4, 5], 3) == 2 + 3 + 4 + 5\nassert add_elements([1, 2, 3, 4, 5], 1) == 1 + 2 + 3 + 4 + 5\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_elements([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(9) == [9, 45, 27, 9, 3, 2, 1]\nassert     get_odd_collatz(11) == [11, 110, 33, 11, 5, 2, 1]\nassert     get_odd_collatz(17) == [17, 68, 35, 17, 9, 4, 2, 1]\nassert     get_odd_collatz(19) == [19, 126, 91, 19, 7, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_odd_collatz([1, 3, 5, 17, 71, 142, 429, 1458, 4707, 16383, 8191, 32767, 16777215]) == [1, 3, 5, 17, 71, 142, 429, 1458, 4707, 16383, 8191, 32767]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3]\nassert     get_odd_collatz(4) == [1, 2, 3]\nassert     get_odd_collatz(5) == [1, 5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1], get_odd_collatz(1)\nassert     get_odd_collatz(2) == [1, 2], get_odd_collatz(2)\nassert     get_odd_collatz(3) == [1, 3, 10, 5, 16, 8, 4, 2, 1], get_odd_collatz(3)\nassert     get_odd_collatz(4) == [1, 3, 10, 5, 16, 8, 4, 2, 1], get_odd_collatz(4)\nassert     get_odd_collatz(5) == [1, 3, 10, 5, 16, 8, 4, 2, 1], get_odd_collatz(5)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [3, 10]\nassert     get_odd_collatz(3) == [7, 30, 82]\nassert     get_odd_collatz(4) == [5, 11, 26, 44]\nassert     get_odd_collatz(5) == [3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,3]\nassert     get_odd_collatz(4) == [1,3,10]\nassert     get_odd_collatz(5) == [1,3,10,5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1)    == [1]\nassert     get_odd_collatz(3)    == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5)    == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(6)    == [6, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(7)    == [7, 21, 14, 7, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 11, 14, 22, 1"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(10)     == [7, 11, 17, 19, 23]\nassert     get_odd_collatz(9)     == [7, 11, 17, 19]\nassert     get_odd_collatz(5)     == [3, 5]\nassert     get_odd_collatz(2)     == [1, 3, 5, 17, 19]\nassert     get_odd_collatz(1)     == [1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(10) == [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]\nassert     get_odd_collatz(11) == [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]\nassert     get_odd_collatz(30) == [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, "
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3, 10, 5]\nassert     get_odd_collatz(10) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(11) == [1, 3, 10, 5, 16, 8, 4, 2, 1, 11]\nassert     get_odd_collatz(24) == [1, 3, 10, 5, 16, 8, 4, 2, 1, 11, 22, 11]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     valid_date('') == False\nassert     valid_date('02-01-2050') == True\nassert     valid_date('02-30-2050') == True\nassert     valid_date('13-01-2000') == False\nassert     valid_date('11-30-1999') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     valid_date(\"01-01-2016\") == True\nassert valid_date(\"31-12-2016\") == False\nassert valid_date(\"01-01-1800\") == False\nassert valid_date(\"01-13-2016\") == False\nassert valid_date(\"01-31-2000\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     valid_date(\"1-1-1999\") == False\nassert     valid_date(\"2-1-2000\") == True\nassert     valid_date(\"12-31-1999\") == False\nassert     valid_date(\"12-31-2000\") == True\nassert     valid_date(\"12-32-1999\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     valid_date(\"01-13-1990\") == False\nassert     valid_date(\"01-13-2100\") == True\nassert     valid_date(\"12-31-1990\") == False\nassert     valid_date(\"01-14-2999\") == False\nassert     valid_date(\"01-01-1900\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     valid_date(\"\") == False\nassert     valid_date(\"9-29-2016\") == False\nassert     valid_date(\"12-30-2015\") == False\nassert     valid_date(\"3-2-2016\") == True\nassert     valid_date(\"6-31-2016\") == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     valid_date(\"01-01-2012\")\nassert     not valid_date(\"00-01-2012\")\nassert     valid_date(\"02-29-2012\")\nassert     valid_date(\"02-01-2003\")\nassert     not valid_date(\"12-02-2013\")\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     valid_date('01-01-2000') is False\nassert     valid_date('01-01-2003') is False\nassert     valid_date('1-02-1999') is False\nassert     valid_date('01-31-1999') is False\nassert     valid_date('01-01-1900') is False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     valid_date('10-01-2050') is True\nassert     valid_date('11-01-2050') is False\nassert     valid_date('12-01-2050') is False\nassert     valid_date('01-01-2050') is False\nassert     valid_date('12-01-2050') is False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     valid_date('05-29-2004') == True, \"05-29-2004 is a valid date\"\nassert     valid_date('01-01-2013') == False, \"01-01-2013 is an invalid date\"\nassert     valid_date('04-28-2000') == False, \"04-28-2000 is an invalid date\"\nassert     valid_date('09-30-0909') == True, \"09-30-0909 is a valid date\"\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     valid_date('08-13-2008') == True\nassert     valid_date('03-09-2012') == True\nassert     valid_date('30-10-2012') == True\nassert     valid_date('04-01-2010') == True\nassert     valid_date('02-01-2010') == False\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_words('Hello World') == ['Hello', 'World'], 'fail test 1'\nassert     split_words('Hello World') == ['Hello', 'World'], 'fail test 2'\nassert     split_words('Hello World') == ['Hello', 'World'], 'fail test 3'\nassert     split_words('Hello World') == ['Hello', 'World'], 'fail test 4'\nassert     split_words('Hello World') == ['Hello', 'World'], 'fail test 5'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (split_words(\"\") == [\"\"])\nassert     (split_words(\"hello\") == [\"hello\"])\nassert     (split_words(\"hello, world\") == [\"hello\", \"world\"])\nassert     (split_words(\"hello, world, example\") == [\"hello\", \"world\", \"example\"])\nassert     (split_words(\"hello, world, example, a, b, c, and, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\") ==\n        [\"hello\", \"world\", \"example\", \"a\", \"b\", \"c\", \"and\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     split_words('Just a small example') == ['just', 'a','small', 'example']\nassert     split_words('It is a simple example') == ['it', 'is', 'a','simple', 'example']\nassert     split_words('Just a simple example') == ['just', 'a','simple', 'example']\nassert     split_words('WOW') == ['wow']\nassert     split_words('') == []\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_words(\"hello world\") == [\"hello\", \"world\"]\nassert     split_words(\"hello, world\") == [\"hello\", \"world\"]\nassert     split_words(\"hello world,, world\") == [\"hello\", \"world\", \"world\"]\nassert     split_words(\"hello,,, world\") == [\"hello\", \"world\", \"world\"]\nassert     split_words(\"hello world, world\") == [\"hello\", \"world\", \"world\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     split_words('This is a test') == ['this', 'is', 'a', 'test']\nassert     split_words('You can believe me, you can imagine all the beautiful things that can come true') == ['you', 'can', 'believe','me', 'you', 'can', 'imagine', 'all', 'the', 'beautiful', 'things', 'that', 'can', 'come', 'true']\nassert     split_words('This is a test') == ['this', 'is', 'a', 'test']\nassert     split_words('You can believe me, you can imagine all the beautiful things that can come true') == ['you', 'can', 'believe','me', 'you', 'can', 'imagine', 'all', 'the', 'beautiful', 'things', 'that', 'can', 'come', 'true']\nassert     split_words('34') == [34]\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_words('1,2,3,4,5,6,7,8,9,10') ==     [1,2,3,4,5,6,7,8,9,10]\nassert     split_words('1,2,3,4,5,6,7,8,9,10') ==     [1,2,3,4,5,6,7,8,9,10]\nassert     split_words('1,2,3,4,5,6,7,8,9,10') ==     [1,2,3,4,5,6,7,8,9,10]\nassert     split_words('1,2,3,4,5,6,7,8,9,10') ==     [1,2,3,4,5,6,7,8,9,10]\nassert     split_words('1,2,3,4,5,6,7,8,9,10') ==     [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a,b, c') == ['a', 'b', 'c']\nassert     split_words('a,b,c ') == ['a', 'b', 'c']\nassert     split_words('a,b, c, d,e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert     split_words('A,B,C') == ['A', 'B', 'C']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?'], 'Fail split_words'\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?'], 'Fail split_words'\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?'], 'Fail split_words'\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?'], 'Fail split_words'\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?'], 'Fail split_words'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_words(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\") == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'], 'Test #2'\nassert     split_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'], 'Test #3'\nassert     split_words(\"\") == [], 'Test #4'\nassert     split_words(\" \") == [' '], 'Test #5'\nassert     split_words(\"a\") == ['a'], 'Test #6'\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?']\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?']\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?']\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?']\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?']\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sorted([]) == True, \"is_sorted([]) == True\"\nassert     is_sorted([1]) == True, \"is_sorted([1]) == True\"\nassert     is_sorted([1, 2]) == True, \"is_sorted([1, 2]) == True\"\nassert     is_sorted([2, 1]) == True, \"is_sorted([2, 1]) == True\"\nassert     is_sorted([2, 1, 3]) == True, \"is_sorted([2, 1, 3]) == True\"\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 2, 3, 4, 5, 5]) == False\nassert     is_sorted([1, 2, 3, 4, 5, 5, 5]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_sorted( [5, 7, 9, 11, 17, 24, 26, 31, 33, 35]) is True\nassert     is_sorted( [5, 7, 9, 11, 17, 24, 26, 31, 33]) is False\nassert     is_sorted( [5, 7, 9, 11, 17, 24, 26, 31]) is False\nassert     is_sorted( [5, 7, 9, 11]) is False\nassert     is_sorted( [5, 7, 9, 11, 17]) is False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1, 1]) == True\nassert     is_sorted([1, 2]) == True\nassert     is_sorted([1, 2, 3]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_sorted([]) == True, \"Nothing\"\nassert     is_sorted([1]) == True, \"One element\"\nassert     is_sorted([1, 2]) == True, \"Two elements\"\nassert     is_sorted([1, 2, 3]) == True, \"Three elements\"\nassert     is_sorted([1, 3, 2]) == False, \"Two out of place\"\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1,1]) == True\nassert     is_sorted([1,1,1]) == False\nassert     is_sorted([-1,-1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (is_sorted([-2, -1]) == False)\nassert     (is_sorted([]) == True)\nassert     (is_sorted([-1, -2, 0, 1]) == True)\nassert     (is_sorted([1, 0, -1, -2]) == False)\nassert     (is_sorted([0, 0, 0, 0]) == True)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_sorted([1,2,3,4]) == True\nassert     is_sorted([1,2,4,3]) == False\nassert     is_sorted([1,2,3,4,3]) == False\nassert     is_sorted([4,3,2,1]) == False\nassert     is_sorted([4,3,2,1,4]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_sorted([1, 2, 3]) == True, \"Error: 1, 2, 3 is not sorted\"\nassert is_sorted([1, 1, 2, 3, 4, 5, 5]) == False, \"Error: 1, 1, 2, 3, 4, 5 is not sorted\"\nassert is_sorted([1, 2, 3, 4, 5, 6, 6]) == False, \"Error: 1, 2, 3, 4, 5, 6 is not sorted\""
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 2, 3, 4, 1]) == False\nassert     is_sorted([3, 3, 2, 1, 1]) == False\nassert     is_sorted([]) == True\nassert     is_sorted([1, 1, 1, 1]) == False\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nintersection(4, 5) == \"YES\"\nassert intersection(3, 5) == \"NO\"\nassert intersection(1, 5) == \"YES\"\nassert intersection(1, 3) == \"NO\""
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersection(1, 3)         == \"NO\"\nassert     intersection(2, 4)         == \"NO\"\nassert     intersection(1, 2)         == \"YES\"\nassert     intersection(2, 1)         == \"YES\"\nassert     intersection(1, 1)         == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersection( (1, 3), (2, 4) ) == (2, 3)\nassert     intersection( (3, 5), (2, 4) ) == \"NO\"\nassert     intersection( (1, 5), (2, 4) ) == \"NO\"\nassert     intersection( (2, 3), (3, 5) ) == \"NO\"\nassert     intersection( (1, 2), (3, 4) ) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersection(1, 3) == \"YES\"\nassert     intersection(1, 2) == \"NO\"\nassert     intersection(2, 4) == \"YES\"\nassert     intersection(1, 4) == \"NO\"\nassert     intersection(2, 3) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 4), (2, 3)) == \"NO\"\nassert     intersection((1, 4), (2, 4)) == \"YES\"\nassert     intersection((1, 4), (1, 4)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersection((1, 2), (2, 3)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 4)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 5), (2, 7)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    assert intersection(interval1, interval2) == \"YES\"\n    assert intersection(interval1, interval2) == \"NO\"\n    assert intersection(interval1, interval2) == \"NO\"\n    "
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prod_signs([1, 2, 3]) == 24\nassert     prod_signs([1, -2, 3]) == 0\nassert     prod_signs([-1, -2, 3]) == 24\nassert     prod_signs([-1, 2, -3]) == 0\nassert     prod_signs([2, 3]) == 6\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prod_signs([1,-1,0,0]) == -1\nassert     prod_signs([0,0,0,0]) == 0\nassert     prod_signs([1,0,0,0,0,0,0,0,0]) == 0\nassert     prod_signs([-1,0,0,0,0,0,0,0,0]) == 0\nassert     prod_signs([-1,0,0,0,0,0,0,0,0,0,0,0,0]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [prod_signs([1, 2, 3]) == 6,\n            prod_signs([-1, 0, 1]) == 1,\n            prod_signs([0, 0, 0]) == 0]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, 2, 3]) == 0\nassert     prod_signs([-1, -2, -3]) == 0\nassert     prod_signs([1, -2, 3]) == 0\nassert     prod_signs([1, -2, -3]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, 2, 3]) == [1, 2, 3, 1, 2, 3, 1, 2, 3]\nassert     prod_signs([-1, -2, -3]) == [-1, -2, -3, -1, -2, -3, -1, -2, -3]\nassert     prod_signs([-1, 1, -3]) == [-1, 1, -3, 1, -3, 1, -3, 1, -3]\nassert     prod_signs([1, -2, 3]) == [1, -2, 3, 1, -2, 3, 1, -2, 3]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 1, 2, -2, -2, -2] == prod_signs([1, -1, 2, -2, -2, -2])\nassert     [1, 1, 2, -2, -2, -2] == prod_signs([1, -1, 2, -2, -2, -2])\nassert     [1, 1, 2, -2, -2, -2] == prod_signs([-1, -1, 2, -2, -2, -2])\nassert     [1, 1, 2, -2, -2, -2] == prod_signs([-1, -1, 2, -2, -2, -2])\nassert     [1, 1, 2, -2, -2, -2] == prod_signs([])\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prod_signs([1, -2, 3]) == 1\nassert     prod_signs([1, -2, 3, -4, 5]) == 6\nassert     prod_signs([]) == None\nassert     prod_signs([1, 2, 3, -4, 5]) == 0\nassert     prod_signs([1, 2, 3, -4, 5, -6, 7]) == -21\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([-1, 3, -2, -3, 0, 1, 2, 3, -2]) == -30\nassert     prod_signs([1, 2, 3, 4, -5, -6]) == -40\n\n\ndef max_sum_cross(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    maximum sum of all subarrays of arr with lengths 1, 2,..., n.\n    Note: return None for empty arr.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1,1,1,1,1]) == 5\nassert     prod_signs([1,1,1,1,0]) == 3\nassert     prod_signs([1,1,1,-1,1]) == -1\nassert     prod_signs([1,-1,1,-1,1]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prod_signs([1, -2, 3, 4, -7, 8]) ==    2 * 1 * -1 * 1 * 8\nassert     prod_signs([-1, 0, -5]) ==             1 * -1 * -1\nassert     prod_signs([]) ==                         None\nassert     prod_signs([1]) ==                         1\nassert     prod_signs([-1, 1, -1, 1]) ==             1 * 1 * -1 * -1\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minPath([\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1],\n        ], 2) == [1, 1]\nassert     minPath([\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1],\n        ], 1) == [1]\nassert     minPath([\n            [1, 1, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1],\n        ], 1) == [1]\nassert     minPath([\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n        ], 1) == [1, 1, 1, 1]\nassert     minPath([\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n            [1, 1, 1, 1, 1],\n        ], 3) == [1, 1, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 2) == [2, 6]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 3) == [1, 2, 3]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 1) == [1, 2, 3, 4, 8, 12, 16]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 0) == [1, 2, 3, 4]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 4) == [1, 2, 3, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 2) == [2, 1, 4, 3]\nassert     minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 3) == [3, 2, 1, 4, 5]\nassert     minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 4) == [4, 3, 2, 1, 5]\nassert     minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 5) == [5, 4, 3, 2, 1]\nassert     minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 6) == [6, 5, 4, 3, 2, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minPath([[1,3,1],[1,5,1],[4,2,1]], 1) == [1,1,1,5,1,1]\nassert     minPath([[1,2,3],[4,5,6]], 3) == [3,4,5,6]\nassert     minPath([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]], 2) == [1,1,2,3,4,5,6,7,8,9]\nassert     minPath([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]], 3) == [1,2,3,4,5,6,7,8,9]\nassert     minPath([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]], 4) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minPath([\n                [1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]\n            ], 2) == [1,2,3,4,5,11,12,13,14,15]\n\nassert     minPath([\n                [1,2,3],\n                [4,5,6],\n                [7,8,9]\n            ], 3) == [1,2,3,4,5,6]\n\nassert     minPath([\n                [1,2,3],\n                [4,5,6],\n                [7,8,9]\n            ], 4) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 2, 3] == minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\nassert     [1, 2, 3] == minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\nassert     [1, 2, 3, 6, 7] == minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\nassert     [1, 2, 3, 6, 7] == minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4)\nassert     [1, 2, 3, 6, 7, 7, 8] == minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minPath([[2,1],[1,3]], 1) == [1,2,3]\nassert     minPath([[2,1,5],[1,3,6],[4,5,7]], 2) == [1,2,3,6,7]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,3,4,7,8,9]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1,2,3]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [1,2,3,4,7,8,9]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minPath([[1, 3, 5, 7], [10, 11, 16, 30], [23, 30, 34, 50]], 2) == [1, 3, 5]\nassert     minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3) == [1, 2, 3]\nassert     minPath([[1, 2, 3], [4, 5, 6]], 3) == [1, 2, 3]\nassert     minPath([[1, 3, 5, 7], [10, 11, 16, 30], [23, 30, 34, 50]], 5) == [1, 3, 5, 7]\nassert     minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 9) == [1, 2, 3, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [1,2,4]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,3,7,8,9]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 4) == [1,2,3,4,7,8,9]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 5) == [1,2,3,4,5,6,7,8,9]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 6) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minPath([\"101010\",\"101011\",\"111010\",\"100111\",\"100010\"], 3) == [\"001\",\"010\",\"101\",\"001\"]\nassert     minPathn\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) = 2\nassert     tri(3) == 3\nassert     tri(4) == 3 + (3 / 3) + (3 / 3) = 3 + 2 + 1 = 8\nassert     tri(5) == 8 + (8 / 8) + (8 / 8) + (8 / 8) = 8 + 3 + 1 + (1 / 3) = 15\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         tri(1) == 3\nassert         tri(2) == 1 + (2 / 2) == 2\nassert         tri(3) == tri(2) + tri(1) + tri(4) == 2 + 3 + 3 == 8\nassert         tri(4) == tri(3) + tri(2) + tri(1) == 3 + 4 + 4 + 4 == 12\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tri(2) == 1 + 2 / 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4)\n\ndef trib(n):\n    \"\"\"The Tribonacci sequence is another famous series of numbers, the first three \n    numbers are tribonacci(1), tribonacci(2), tribonacci(3).\n    trib(n) = trib(n - 1) + trib(n - 2) + trib(n - 3)\n    For example:\n    trib(5) = trib(4) + trib(3) + trib(2)\n    + trib(1) + trib(1) = trib(2) + trib(3) + trib(4) = trib(5)\n    It is an easy problem of number theory and one of the most important \n    algorithmic series.\n    You are given a non-negative integer number n, you have to return the nth element \n    of the Tribonacci sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tri(2) == 1 + (2 / 2) == 2\nassert tri(4) == 3\nassert tri(3) == tri(2) + tri(1) + tri(4) == 8\nassert tri(6) == 16\n\n\ndef fib(n):\n    \"\"\"Recursive method for Fibonacci sequence\n    fib(n) = fib(n - 1) + fib(n - 2)\n    Note: if n = 1, fib(n) = 1; if n = 2, fib(n) = 2; if n > 2, fib(n) = fib(n - 1) + fib(n - 2)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4)\nassert     tri(5) == tri(4) + tri(3) + tri(1)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tri(0)     == 0\nassert     tri(1)     == 1\nassert     tri(2)     == 1\nassert     tri(3)     == 1\nassert     tri(4)     == 2\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tri(1)    ==     3\nassert     tri(2)    ==     1\nassert     tri(3)    ==     2\nassert     tri(4)    ==     3\nassert     tri(5)    ==     5\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         tri(1) == 3\nassert         tri(2) == 1 + (2 / 2)\nassert         tri(4) == 3\nassert         tri(3) == 2 + 3 + 3 == 8\n\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         tri(0) == []\nassert         tri(1) == [1]\nassert         tri(2) == [1, 1]\nassert         tri(3) == [1, 1, 2]\nassert         tri(4) == [1, 1, 2, 4]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4) == 8\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digits(123) == 12\nassert     digits(10) == 1\nassert     digits(11) == 3\nassert     digits(12) == 2\nassert     digits(13) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digits(1) == 1\nassert     digits(2) == 2\nassert     digits(4) == 4\nassert     digits(8) == 8\nassert     digits(10) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digits(42) == 2\nassert     digits(8) == 8\nassert     digits(44) == 4\nassert     digits(150) == 3\nassert     digits(1111) == 5\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef small_endian_to_int(s):\n    \"\"\"Return the integer value of the small-endian-form string s.\"\"\"\n    pass\n\ndef small_endian_to_str(n):\n    \"\"\"Return the string value of the small-endian integer n.\"\"\"\n    pass\n\ndef str_to_small_endian_int(s):\n    \"\"\"Return the integer value of the small-endian string s.\"\"\"\n    pass\n\ndef int_to_str(n):\n    \"\"\"Return the string value of the integer n.\"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digits(12345) == 1\nassert     digits(999888) == 7\nassert     digits(999888999) == 4\nassert     digits(0) == 0\n\ndef letter_count(n):\n    \"\"\"Given a positive integer n, return the number of letters in the\n    integer (a letter is a character of length 1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef in_range(n, start, end):\n    \"\"\"Return True if n is in the range [start, end], inclusive.\n    Assume start <= end.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (digits(18) == 1)\nassert     (digits(12) == 0)\nassert     (digits(10) == 0)\nassert     (digits(100) == 0)\nassert     (digits(101) == 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digits(123) == 1\nassert     digits(12345) == 45\nassert     digits(23456) == 0\nassert     digits(4567) == 0\nassert     digits(98765) == 45\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digits(12) == 3\nassert     digits(48) == 3\nassert     digits(1359) == 0\nassert     digits(1008) == 0\nassert     digits(1000) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('[[]()]') == True\nassert     is_nested('[[]') == False\nassert     is_nested('[()[]]') == True\nassert     is_nested('[(])') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('[][]') == True\nassert     is_nested('[][]{}') == True\nassert     is_nested('[()]{}') == True\nassert     is_nested('[()]{}[]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_nested(\"()\") == True\nassert     is_nested(\"{[()]}\") == True\nassert     is_nested(\"(]\") == False\nassert     is_nested(\"([)]\") == False\nassert     is_nested(\"{[()()]\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_nested(\"{a[b]c}\") == True, \"expected True\"\nassert     is_nested(\"{a[b]c}\") == True, \"expected True\"\nassert     is_nested(\"{a[b]c}d{a[b]c}\") == True, \"expected True\"\nassert     is_nested(\"{a[b]c}{a[b]c}\") == False, \"expected False\"\nassert     is_nested(\"{a[b]c}{a[b]c}\") == False, \"expected False\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_nested('([])') == True\nassert     is_nested('[]') == True\nassert     is_nested('[(])') == False\nassert     is_nested('([)]') == False\nassert     is_nested('([()])') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_nested('([])') == True\nassert     is_nested('([)]') == False\nassert     is_nested('((()') == False\nassert     is_nested('()[]{}') == True\nassert     is_nested('([)]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_nested(\"[()]\") == True\nassert     is_nested(\"[(])\") == False\nassert     is_nested(\"[(())]\") == True\nassert     is_nested(\"[]\") == True\nassert     is_nested(\"(()[]{()}[]())\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_nested('()') == True\nassert     is_nested('(())') == True\nassert     is_nested(')(') == False\nassert     is_nested('(((') == False\nassert     is_nested('((()))') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_nested(\"\") == True\nassert     is_nested(\"([])\") == True\nassert     is_nested(\"()[()]\") == True\nassert     is_nested(\"([)]\") == False\nassert     is_nested(\"([()])\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_nested(\"()[]()[]()\") == True\nassert is_nested(\"[\") == False\nassert is_nested(\"[(])\") == False\nassert is_nested(\"[([])\") == False\nassert is_nested(\"[()])\") == False\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3]) == [1, 4, 9], '1+2+3'\nassert     sum_squares([-1, -2, -3]) == [1, 4, 9], '-1+(-2)+(-3)'\nassert     sum_squares([0, 0, 0]) == [0, 0, 0], '0+0+0'\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_squares([1.0, 2.0, 3.0]) == 14.0\nassert     sum_squares([0.0, 0.0, 0.0]) == 0.0\nassert     sum_squares([]) == 0.0\nassert     sum_squares([1.0, 2.0, 3.0, 4.0, 5.0]) == 21.0\nassert     sum_squares([0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == 0.0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([-1, -2, -3]) == 12, 'Failed the test'\nassert     sum_squares([1, 2, 3]) == 36, 'Failed the test'\nassert     sum_squares([0, 0, 0]) == 0, 'Failed the test'\n\nprint('Tests passed successfully'"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == [1, 4, 9, 16], \"should be 1 + 4 + 9 + 16 = 25\"\nassert     sum_squares([2, 3, 4, 5, 6]) == [4, 9, 16, 25, 36], \"should be 4 + 9 + 16 + 25 + 36 = 81\"\nassert     sum_squares([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) == [1.1, 4.4, 9.9, 16.16, 25.25, 36.36, 49.49, 64.64, 81.81], \"should be 1.1 + 4.4 + 9.9 + 16.16 + 25.25 + 36.36 + 49.49 + 64.64 + 81.81 = 89.49\"\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([1.2, 3.3, 5.5, 7.7]) == 26.25\nassert     sum_squares([1, 2, 3, 4]) == 10\nassert     sum_squares([1, 2, 3, -4]) == 10\nassert     sum_squares([-1, -2, -3, -4]) == 10\n\nprint \"Passed"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7]) ==     14\nassert     sum_squares([-1,-2,-3,-4,-5,-6,-7]) ==     -32\nassert     sum_squares([-1.1,-2.2,-3.3,-4.4,-5.5,-6.6,-7.7]) ==     -32.1\nassert     sum_squares([0,0,0,0]) ==     0\nassert     sum_squares([5,5,5,5]) ==     125\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([1, 2, 3]) == 22\nassert     sum_squares([1, 2, 3, 4]) == 14\nassert     sum_squares([1, 2, 3, 4, 5]) == 29\nassert     sum_squares([1, 2, 3, 4, 5, 6]) == 46\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([1,2,3]) == 10\nassert     sum_squares([3,5,7]) == 55\nassert     sum_squares([-4, -2, -1]) == 16\nassert     sum_squares([]) == 0\nassert     sum_squares([10]) == 100\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 1467, \"check the result\"\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == 4950, \"check the result\"\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 1468, \"check the result\"\nassert     sum_squares([-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10]) == -529, \"check the result\"\nassert     sum_squares([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == -53417, \"check the result\"\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 10\nassert     sum_squares([-1,-2,-3,-4,-5]) == 30\nassert     sum_squares([5,10,15,20,25]) == 50\n\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter(\"world\")\nassert     check_if_last_char_is_a_letter(\"Hello World\")\nassert     not check_if_last_char_is_a_letter(\"Hello world\")\nassert     not check_if_last_char_is_a_letter(\"Hello World!.\")\nassert     check_if_last_char_is_a_letter(\"Hello World!.\")\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('ab') == False\nassert     check_if_last_char_is_a_letter('a') == True\nassert     check_if_last_char_is_a_letter('abcd') == False\nassert     check_if_last_char_is_a_letter('ab cd') == False\nassert     check_if_last_char_is_a_letter('abcd1') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('Python') == True\nassert     check_if_last_char_is_a_letter('Hello World') == False\nassert     check_if_last_char_is_a_letter('4') == False\nassert     check_if_last_char_is_a_letter(')') == False\nassert     check_if_last_char_is_a_letter('x x') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('CSC300') == True\nassert     check_if_last_char_is_a_letter('CSC3') == True\nassert     check_if_last_char_is_a_letter('CSC300 ') == True\nassert     check_if_last_char_is_a_letter('CSC3001') == False\nassert     check_if_last_char_is_a_letter('CSC3009') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('hLh') == True\nassert     check_if_last_char_is_a_letter('Lh') == False\nassert     check_if_last_char_is_a_letter('hLhP') == True\nassert     check_if_last_char_is_a_letter('LhP') == False\nassert     check_if_last_char_is_a_letter('hLh  P') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello World!\") == True\nassert     check_if_last_char_is_a_letter(\"Hello\") == False\nassert     check_if_last_char_is_a_letter(\"World\") == True\nassert     check_if_last_char_is_a_letter(\"a\") == True\nassert     check_if_last_char_is_a_letter(\"0\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('dsrtgofs') == True\nassert     check_if_last_char_is_a_letter('dfsgofs') == False\nassert     check_if_last_char_is_a_letter('dggofs') == False\nassert     check_if_last_char_is_a_letter('dsftgofs') == False\nassert     check_if_last_char_is_a_letter('dgfsrtgofs') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter('hello') == True\nassert     check_if_last_char_is_a_letter('hello my name') == False\nassert     check_if_last_char_is_a_letter('hello') == False\nassert     check_if_last_char_is_a_letter('hello my name') == True\nassert     check_if_last_char_is_a_letter('hello world') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('hello') == True\nassert     check_if_last_char_is_a_letter('Hello') == True\nassert     check_if_last_char_is_a_letter('Hello World') == True\nassert     check_if_last_char_is_a_letter('Hello World, my name is Bob') == True\nassert     check_if_last_char_is_a_letter('Hello World, my name is Bob and Bob') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter('s') == True\nassert     check_if_last_char_is_a_letter('word') == True\nassert     check_if_last_char_is_a_letter('word  ') == True\nassert     check_if_last_char_is_a_letter('  word  ') == True\nassert     check_if_last_char_is_a_letter('word  2') == False\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     can_arrange([1, 4, 1, 3, 6, 7, 8, 2, 3]) == 1\nassert can_arrange([1, 4, 1, 3, 6, 7, 8, 2, 3, 4]) == 3\nassert can_arrange([1, 4, 1, 3, 6, 7, 8, 2, 3, 6]) == 6\nassert can_arrange([1, 4, 1, 3, 6, 7, 8, 2, 3, 4, 6]) == -1\nassert can_arrange([1, 4, 1, 3, 6, 7, 8, 2, 3, 4, 5]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     can_arrange([1, 2, 3]) == 2\nassert     can_arrange([1, 3, 2]) == 2\nassert     can_arrange([2, 1, 3]) == 2\nassert     can_arrange([2, 3, 1]) == -1\nassert     can_arrange([3, 2, 1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     can_arrange([1,2,3]) == 2\nassert     can_arrange([1,3,2]) == -1\nassert     can_arrange([2,3,1]) == 2\nassert     can_arrange([2,1,3]) == 2\nassert     can_arrange([2,3,1,4,5,6,7,8,9,10]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     can_arrange([0, 1, 1, 0, 1, 1, 0, 1, 0, 1]) == -1\nassert can_arrange([0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1]) == 2\nassert can_arrange([0, 1, 2, 1, 0]) == -1\nassert can_arrange([0, 1, 2, 1, 0, 0]) == 3\nassert can_arrange([0, 1, 2, 1, 0, 0, 0]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     can_arrange([1,2,3,4,5]) == 3\nassert     can_arrange([1,2,3,4,6]) == -1\nassert     can_arrange([4,5,6,7,8]) == -1\nassert     can_arrange([1,2,3,5,6]) == 4\nassert     can_arrange([1,2,3,4,5,6]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     can_arrange([1,3,5,7]) == 1\nassert     can_arrange([1,3,5,7,9]) == 3\nassert     can_arrange([2,3,6,7]) == -1\nassert     can_arrange([-1,3,5,7]) == -1\nassert     can_arrange([1,2,3,4,5]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     can_arrange([10, 4, 7, 1, 9, 8, 3, 5, 6, 2]) == 3\nassert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([0, 1, 2]) == -1\nassert     can_arrange([1, 1]) == -1\nassert     can_arrange([1, 1, 1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         can_arrange([]) == -1\nassert         can_arrange([2,1,3]) == 0\nassert         can_arrange([3,2,1]) == 1\nassert         can_arrange([2,3,4,5,6,7]) == -1\nassert         can_arrange([1,2,3,4]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     can_arrange([6, 5, 4, 3, 2, 1]) == 3\nassert     can_arrange([1, 2, 3, 4]) == -1\nassert     can_arrange([1, 2, 4, 3]) == 3\nassert     can_arrange([1, 4, 3]) == -1\nassert     can_arrange([1, 4, 3, 2]) == 2\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([5, -3, 4, 1, -1]) == (-1, 1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([3, 5, -1, -3]) == (None, None)\n\n\ndef get_students_min_max(lst):\n    '''\n    Create a function that returns a tuple (minimum, maximum),\n    where minimum is the minimum number among students' marks, and\n    maximum is the maximum number among students' marks.\n    You are given a list of tuples, where each tuple contains\n    a student's name and a student's mark. Your function should\n    return the tuple (minimum, maximum) if the students' marks are\n    in ascending order, or (maximum, minimum) if they are\n    in descending order. If there is no student with a lower or\n    higher mark, your function should return the tuple (None, None).\n    '''\n    pass\n\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([-1, 0, 1, 2, 3]) == (None, None)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, -1, 1, 2, 3]) == (3, 1)\nassert     largest_smallest_integers([1, -1, 1, -1, 1, -1]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([1, 2, -1, -2]) == (-2, 1)\nassert     largest_smallest_integers([1, 2, 3, -1, -2, 3]) == (3, -1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, -2, 3, -1, -2, 3, -1]) == (None, 3)\nassert     largest_smallest_integers([1, 2, 3, -1, -2, 3, -1]) == (3, -1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([1, 2, -2, -4, 3, 1, 4, -1]) == (1, -1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3]) == (None, None)\nassert     largest_smallest_integers([-2, -1, 2, -3]) == (-3, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (2, 1) == largest_smallest_integers([1, 2, 3, 4, 5])\nassert     (None, None) == largest_smallest_integers([])\nassert     (None, None) == largest_smallest_integers([1])\nassert     (None, None) == largest_smallest_integers([0])\nassert     (None, None) == largest_smallest_integers([0, 1, 2, 3, 4])\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (0, 1) == largest_smallest_integers([1,2,-3,4,-5])\nassert     (2, 1) == largest_smallest_integers([1,2,3,4,-5])\nassert     (0, 3) == largest_smallest_integers([-1,-2,3,4,-5])\nassert     (0, 4) == largest_smallest_integers([-1,-2,3,4])\nassert     (4, -1) == largest_smallest_integers([-1,2,3,4])\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1]) == (None, None)\nassert     largest_smallest_integers([-1, -3]) == (None, -3)\nassert     largest_smallest_integers([-1, -3, -2]) == (None, -2)\nassert     largest_smallest_integers([1, 2, 3]) == (3, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([1, -2, 3, 4]) == (-2, 1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([5, 2, 3, -1, 0, 6]) == (5, 0)\nassert     largest_smallest_integers([2, -1, 0, 1, 0, -2, -1]) == (0, -2)\nassert     largest_smallest_integers([0, 1, 2, 3, 4, 5, -6, -7, -8, -9, -10]) == (-10, 9)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef test_largest_smallest_integers():\n    assert \n\ndef test_largest_smallest_integers1():\n    assert \n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([-1, -2, -3]) == (-1, 1)\nassert     largest_smallest_integers([-1, 2, 3]) == (-1, 3)\nassert     largest_smallest_integers([-1, -2, -3, 0]) == (None, 0)\nassert     largest_smallest_integers([-1, 2, 3, 4]) == (4, -1)\nassert     largest_smallest_integers([-1, 2, 3, 4, 0]) == (0, -1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1.2, 1.2) == 1.2\nassert     compare_one(\"1.3\", 1.3) == 1.3\nassert     compare_one(\"1,3\", 1.3) == 1.3\nassert     compare_one(\"1.3\", 1.3) == 1.3\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare_one(5, 5) == None\nassert     compare_one(5, 6) == 6\nassert     compare_one('5', '5') == None\nassert     compare_one('5', '6') == 6\nassert     compare_one(1, 1.0) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef compare(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif type(a) == float and type(b) == int:\n        if a == float(b):\n            return None\n        elif a > float(b):\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == float:\n        if a == float(b):\n            return None\n        elif a > float(b):\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == str:\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif type(a) == str and type(b) == int:\n        if a == str(b):\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif type(a) == int and type(b) == str:\n        if a == str(b):\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    else:\n        raise ValueError(\"Variable types are not valid\")\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare_one(3, 1) == 3\nassert     compare_one(1.0, 1.0) == 1.0\nassert     compare_one(3, 1.0) == 3\nassert     compare_one(1.0, 3) == 3\nassert     compare_one('1', '1') == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1.5, 2) == 2\nassert     compare_one('1.5', '2') == 2\nassert     compare_one('1', '1') == 1\nassert     compare_one('1', 1) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare_one(1,1) == 1\nassert     compare_one(1.5,1) == 1.5\nassert     compare_one('1','1') == '1'\nassert     compare_one('1.5',1) == '1.5'\nassert     compare_one(1,1.5) == 1.5\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1.1, 1.2) == 1.2\nassert     compare_one(1, 1.2) == 1\nassert     compare_one(1, \"1.2\") == 1.2\nassert     compare_one(\"1.2\", 1) == 1.2\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare_one(10, 10.0) == 10\nassert     compare_one(\"10\", \"10.0\") == 10\nassert     compare_one(\"10\", \"10.1\") == 10\nassert     compare_one(\"10\", 10) == 10\nassert     compare_one(\"10\", \"10.1\") == 10\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1, 2) == 2\nassert     compare_one(1, 2.0) == 2.0\nassert     compare_one(1, 2.1) == 2.1\nassert     compare_one(1, \"1.0\") == 1.0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare_one(None, \"0\") == \"0\"\nassert     compare_one(\"a\", \"0\") == \"a\"\nassert     compare_one(10, -10) == \"10\"\nassert     compare_one(10, -10.1) == \"10\"\nassert     compare_one(\"a\", \"b\") == None\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(20)\nassert     not is_equal_to_sum_even(21)\nassert     not is_equal_to_sum_even(22)\nassert     is_equal_to_sum_even(42)\nassert     is_equal_to_sum_even(99)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(6) == True\nassert     is_equal_to_sum_even(14) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(100) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(6) == False\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(11) == False\nassert     is_equal_to_sum_even(12) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(4)\nassert     is_equal_to_sum_even(4+2)\nassert     not is_equal_to_sum_even(4+2+1)\nassert     not is_equal_to_sum_even(4+2+1+1)\nassert     not is_equal_to_sum_even(1)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(13) == True\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(3) == False\nassert     is_equal_to_sum_even(5) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(7) == True\nassert     is_equal_to_sum_even(9) == True\nassert     is_equal_to_sum_even(15) == True\nassert     is_equal_to_sum_even(10) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(8)\nassert     is_equal_to_sum_even(10)\nassert     is_equal_to_sum_even(12)\nassert     is_equal_to_sum_even(14)\nassert     is_equal_to_sum_even(15)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(44) == True\nassert     is_equal_to_sum_even(13) == True\nassert     is_equal_to_sum_even(15) == True\nassert     is_equal_to_sum_even(14) == False\nassert     is_equal_to_sum_even(42) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(18) == True\nassert     is_equal_to_sum_even(19) == True\nassert     is_equal_to_sum_even(11) == False\nassert     is_equal_to_sum_even(5) == False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     special_factorial(1)    == 1\nassert     special_factorial(2)    == 2\nassert     special_factorial(3)    == 6\nassert     special_factorial(4)    == 24\nassert     special_factorial(5)    == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(10) == 3628800\nassert     special_factorial(8) == 40320\nassert     special_factorial(1) == 1\nassert     special_factorial(0) == 1\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(5) == 120\nassert     special_factorial(6) == 720\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     special_factorial(1)    == 1\nassert     special_factorial(2)    == 2\nassert     special_factorial(3)    == 6\nassert     special_factorial(4)    == 24\nassert     special_factorial(5)    == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\n\ndef special_factorial_with_loops(n):\n    \"\"\"The function special_factorial_with_loops will calculate the \n    special factorial of an integer using a loop approach.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fix_spaces('hello') == 'hello'\nassert     fix_spaces('hello  world') == 'hello_world'\nassert     fix_spaces('   hello world') == 'hello_world'\nassert     fix_spaces('   hello world  ') == 'hello_world'\nassert     fix_spaces('   hello world  \\n') == 'hello_world'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fix_spaces(\"c a t e\") == \"c_a_t_e\", \\\n        \"incorrect\"\nassert     fix_spaces(\"c_a_t_e\") == \"c_a_t_e\", \\\n        \"incorrect\"\nassert     fix_spaces(\"a_b_c\") == \"a_b_c\", \\\n        \"incorrect\"\nassert     fix_spaces(\"a_b_c_d\") == \"a_b_c_d\", \\\n        \"incorrect\"\nassert     fix_spaces(\"a_b_c_d_e\") == \"a_b_c_d_e\", \\\n        \"incorrect\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fix_spaces(\"Hello World!\") == \"Hello_World\"\nassert     fix_spaces(\"  Hello  World  \") == \"Hello_World\"\nassert     fix_spaces(\"Hello World\") == \"Hello_World\"\nassert     fix_spaces(\"Hello World!\") == \"Hello_World\"\nassert     fix_spaces(\"Hello World!\") == \"Hello_World\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fix_spaces(\"this is a test\") == \"this_is_a_test\", \"Test 1 failed\"\nassert     fix_spaces(\"      this is a test       \") == \"this_is_a_test\", \"Test 2 failed\"\nassert     fix_spaces(\"   this is a test  \") == \"this_is_a_test\", \"Test 3 failed\"\nassert     fix_spaces(\"  this is a test  \") == \"this_is_a_test\", \"Test 4 failed\"\nassert     fix_spaces(\"this is a test\") == \"this_is_a_test\", \"Test 5 failed\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fix_spaces(\"a b\") == \"a_b\"\nassert     fix_spaces(\"a   b\") == \"a_b\"\nassert     fix_spaces(\"a b c\") == \"a_b_c\"\nassert     fix_spaces(\"a b c d\") == \"a_b_c_d\"\nassert     fix_spaces(\"a b   c\") == \"a_b_c\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef match_words(text, words):\n    \"\"\"\n    Given a string text and a list of words words, \n    return a list of all the starting indices of substrings of text \n    that are a concatenation of each word in words exactly once\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fix_spaces('a b')    == 'a_b'\nassert     fix_spaces('a   b')    == 'a_b'\nassert     fix_spaces('a   b   c')    == 'a_b_c'\nassert     fix_spaces(' a b')    == 'a_b'\nassert     fix_spaces('a   b   c')    == 'a_b_c'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fix_spaces(\"  Hello World!    \") == \"Hello_World\"\nassert     fix_spaces(\"  Hello World!    \") == \"Hello_World\"\nassert     fix_spaces(\"Hello World!     \") == \"Hello_World\"\nassert     fix_spaces(\"  Hello World!    \") == \"Hello_World\"\nassert     fix_spaces(\"Hello World! \") == \"Hello_World\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fix_spaces(' this is a test') == 'this_is_a_test'\nassert     fix_spaces('this is   a test') == 'this_is_a_test'\nassert     fix_spaces('this is a test') == 'this_is_a_test'\nassert     fix_spaces('this is   a test') == 'this_is_a_test'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fix_spaces(\"Nothing to do here.\") == \"Nothing_to_do_here\"\nassert     fix_spaces(\"  \") == \"___\"\nassert     fix_spaces(\"  a   b  c  d  e\") == \"a_b_c_d_e\"\nassert     fix_spaces(\"a b c d e\") == \"a_b_c_d_e\"\nassert     fix_spaces(\"a  b  c  d  e\") == \"a_b_c_d_e\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     file_name_check(\"file_name.txt\")    == 'Yes'\nassert     file_name_check(\"file_name.exe\")    == 'Yes'\nassert     file_name_check(\"file_name.dll\")    == 'Yes'\nassert     file_name_check(\"file_name.txt.txt\")    == 'No'\nassert     file_name_check(\"file_name.txt.exe\")    == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     file_name_check('as23.txt') == 'Yes'\nassert     file_name_check('asdfasdf.txt') == 'No'\nassert     file_name_check('asdfasdfasdf.txt') == 'Yes'\nassert     file_name_check('aasdfasdf.txt') == 'No'\nassert     file_name_check('asdfasdfasdfasdf.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     file_name_check(\"HelloWorld.txt\") == \"Yes\"\nassert     file_name_check(\"HelloWorld.exe\") == \"Yes\"\nassert     file_name_check(\"HelloWorld.dll\") == \"Yes\"\nassert     file_name_check(\"HelloWorld.text\") == \"No\"\nassert     file_name_check(\"HelloWorld.zip\") == \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     file_name_check('abcdefghijklmnopqrstuvwxyz.txt') == 'Yes', 'Error'\nassert     file_name_check('abcdefghijklmnopqrstuvwxyzabc.txt') == 'Yes', 'Error'\nassert     file_name_check('abc.txt') == 'Yes', 'Error'\nassert     file_name_check('abc.exe') == 'No', 'Error'\nassert     file_name_check('abc.dll') == 'Yes', 'Error'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     file_name_check('CamelCase.txt') == 'Yes'\nassert     file_name_check('CamelCase.txt.txt') == 'Yes'\nassert     file_name_check('CamelCase.txt.exe') == 'Yes'\nassert     file_name_check('CamelCase.txt.dll') == 'Yes'\nassert     file_name_check('CamelCase.txt.d') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     file_name_check('MyName.com') == 'No'\nassert     file_name_check('MyName.txt') == 'Yes'\nassert     file_name_check('MyName.exe') == 'Yes'\nassert     file_name_check('MyName.dll') == 'Yes'\nassert     file_name_check('MyName.txt.zip') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     file_name_check(\"Hello\") == \"No\"\nassert     file_name_check(\"Hello.txt\") == \"Yes\"\nassert     file_name_check(\"hello.txt\") == \"Yes\"\nassert     file_name_check(\"hello.\") == \"No\"\nassert     file_name_check(\"hello.txt.\") == \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     file_name_check('something') == 'No'\nassert     file_name_check('something.txt') == 'Yes'\nassert     file_name_check('something.exe') == 'Yes'\nassert     file_name_check('something.dll') == 'Yes'\nassert     file_name_check('something.txt.') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     file_name_check('txt')\nassert     file_name_check('exe')\nassert     file_name_check('dll')\nassert     file_name_check('txt.txt')\nassert     file_name_check('exe.exe')\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     file_name_check('ThisIsASingleWord.txt') == 'Yes'\nassert     file_name_check('ThisIsANoDotExtension.txt') == 'Yes'\nassert     file_name_check('ThisIsAOneWordExtension.txt') == 'Yes'\nassert     file_name_check('ThisIsANameContainingTheDot.txt') == 'Yes'\nassert     file_name_check('ThisIsAOneWordExtension.exe') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5]) == (1*1 + 2*2 + 3*3 + 4*4 + 5*5)\nassert     sum_squares([-1,-2,-3,-4,-5]) == (-1*-1 - 2*-2 - 3*-3 - 4*-4 - 5*-5)\nassert     sum_squares([3,5,6,7,8,10,11,12,13,14,16,17,18,19,20]) == (3*3 + 5*5 + 6*6 + 7*7 + 8*8 + 10*10 + 11*11 + 12*12 + 13*13 + 14*14 + 16*16 + 17*17 + 18*18 + 19*19 + 20*20)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8,9]) == 2684\nassert     sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3,4,5]) == sum([1,2,3,4,5]) ** 2\nassert     sum_squares([1,2,3,4,5,6,7,8]) == sum([1,2,3,4,5,6,7,8]) ** 2\nassert     sum_squares([1,2,3,4,5,6,7,8,9]) == sum([1,2,3,4,5,6,7,8,9]) ** 2\nassert     sum_squares([]) == 0\nassert     sum_squares(['a', 'b']) == sum('a'**2) + sum('b'**2)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8,9]) == 55\nassert     sum_squares([1,2,3,4,5,6,7,8]) == 55\nassert     sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9]) == 55\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 55\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,-1]) == 55\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([2, 3, 4, 5, 6, 7]) == 26, \"the result should be 26\"\nassert     sum_squares([1, 2, 3, 4, 5, 6]) == 22, \"the result should be 22\"\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7]) == 26, \"the result should be 26\"\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 444, \"the result should be 444\"\nassert     sum_squares([-1, -2, -3, -4, -5, -6, -7]) == -28, \"the result should be -28\"\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6, 7]) == 23\nassert     sum_squares([1, 3, 5, 7, 9, 11, 13]) == 60\nassert     sum_squares([2, 4, 6, 8, 10, 12, 14]) == 38\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4,5]) == [1, 4, 9, 25, 25]\nassert     sum_squares([1,2,3,4,5]) == [1, 4, 9, 25, 25]\nassert     sum_squares([-1,-2,-3,-4,-5]) == [-1, -4, -9, -25, -25]\nassert     sum_squares([1,2,3,4,5]) == [1, 4, 9, 25, 25]\nassert     sum_squares([1,2,3,4,5]) == [1, 4, 9, 25, 25]\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         sum_squares([1, 2, 3]) == 1**2 + 2**2 + 3**2\nassert         sum_squares([-1, 0, 1]) == -1**2 + 0**2 + 1**2\nassert         sum_squares([0, 1, 2, 3]) == 0**2 + 1**2 + 2**2 + 3**2\nassert         sum_squares([4, 5, 6, 7]) == 4**2 + 5**2 + 6**2 + 7**2\nassert         sum_squares([-4, -5, -6, -7]) == -4**2 - 5**2 - 6**2 - 7**2\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 25\nassert     sum_squares([4, 5, 6, 7]) == 65\nassert     sum_squares([-1, -2, -3, -4, -5]) == 95\nassert     sum_squares([10, 12, 14, 16]) == 450\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nassert sum_squares([1,2,3,4,5]) == 1+4+9+16+25\nassert sum_squares([]) == 0\nassert sum_squares([3,4,5,6,7]) == 3+16+81+256+429\nassert sum_squares([1,1,1,1,1,1,1,1,1,1]) == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"this is a test\") == \"this is a test\", \"words_in_sentence(\\\"this is a test\\\") == \\\"this is a test\\\"\"\nassert     words_in_sentence(\"this is another test\") == \"this is a test\", \"words_in_sentence(\\\"this is another test\\\") == \\\"this is a test\\\"\"\nassert     words_in_sentence(\"this is a third test\") == \"this is a test\", \"words_in_sentence(\\\"this is a third test\\\") == \\\"this is a test\\\"\"\nassert     words_in_sentence(\"this is a fourth test\") == \"this is a test\", \"words_in_sentence(\\\"this is a fourth test\\\") == \\\"this is a test\\\"\"\n\n\ndef find_max_letter_in_string(string):\n    \"\"\"\n    You are given a string,\n    the string contains some words,\n    and you have to return the longest word that contains only one letter.\n    The order of the words do not matter.\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_in_sentence(\"this is a sentence\") == \"this is a sentence\"\nassert     words_in_sentence(\"This is a sentence\") == \"This is a sentence\"\nassert     words_in_sentence(\"This is a sentence This is a sentence\") == \"This is a sentence\"\nassert     words_in_sentence(\"This is a sentence This is a sentence This is a sentence\") == \"This is a sentence\"\nassert     words_in_sentence(\"This is a sentence This is a sentence This is a sentence\") == \"This is a sentence\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         words_in_sentence(\"this is my sentence\") == \"thisistmysentence\"\nassert         words_in_sentence(\"this is my sentence\") == \"thisistmysentence\"\nassert         words_in_sentence(\"this is my sentence\") == \"thisistmysentence\"\nassert         words_in_sentence(\"this is my sentence\") == \"thisistmysentence\"\nassert         words_in_sentence(\"this is my sentence\") == \"thisistmysentence\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"it's a dog's dog\") == \"dog dog\"\nassert     words_in_sentence(\"this is a dog\") == \"dog\"\nassert     words_in_sentence(\"this is a dog's dog\") == \"dog dog\"\nassert     words_in_sentence(\"this is a dog and i have dog\") == \"dog dog and dog\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"1 2 3\") == \"1 2 3\"\nassert     words_in_sentence(\"1\") == \"1\"\nassert     words_in_sentence(\" \") == \" \"\nassert     words_in_sentence(\"2 3 4\") == \"2 3 4\"\nassert     words_in_sentence(\"4\") == \"4\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_in_sentence('hello') == 'hl'\nassert     words_in_sentence('hello world') == 'hll'\nassert     words_in_sentence('hello world world') == 'hell'\nassert     words_in_sentence('hi') == 'h'\nassert     words_in_sentence('hello hi') == 'hello'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_in_sentence('foo bar baz') == 'foo bar'\nassert     words_in_sentence('a') == 'a'\nassert     words_in_sentence('a a b a b') == 'a a b'\nassert     words_in_sentence('a b c d e f') == 'a b c'\nassert     words_in_sentence('b a c d e f') == 'b a c'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"hello world\") == \"helloworld\"\nassert     words_in_sentence(\"This is a good sentence\") == \"Thisisagoodsentence\"\nassert     words_in_sentence(\"\") == \"\"\n\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"I am a teapot\") == \"I am a teapot\"\nassert     words_in_sentence(\"He is a teapot\") == \"he is a teapot\"\nassert     words_in_sentence(\"He is a tea pot\") == \"he is a tea pot\"\nassert     words_in_sentence(\"He is a tea pot\") == \"he is a tea pot\"\nassert     words_in_sentence(\"He is a tea pot\") == \"he is a tea pot\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"is this a sentence\") == \"isthis\"\nassert     words_in_sentence(\"this is a sentence\") == \"isth\"\nassert     words_in_sentence(\"words in the sentence\") == \"wor\"\nassert     words_in_sentence(\"three word in a sentence\") == \"ttw\"\nassert     words_in_sentence(\"sentence has more than one word\") == \"ess\"\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     simplify('2/4', '1/2')\nassert     not simplify('2/4', '1/3')\nassert     simplify('1/4', '1/2')\nassert     simplify('1/4', '3/4')\nassert     simplify('2/3', '1/2')\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     simplify(\"1/2\", \"2/4\") is True\nassert     simplify(\"1/2\", \"1/4\") is False\nassert     simplify(\"1/2\", \"1/3\") is False\nassert     simplify(\"1/2\", \"1/5\") is False\nassert     simplify(\"1/2\", \"1/7\") is False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     simplify(\"4/5\", \"4/5\") == True\nassert     simplify(\"4/5\", \"4/5\") == False\nassert     simplify(\"5/1\", \"5/1\") == True\nassert     simplify(\"5/1\", \"4/5\") == False\nassert     simplify(\"1/2\", \"4/5\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     simplify('1', '1') == True\nassert     simplify('1', '2') == False\nassert     simplify('1', '10') == False\nassert     simplify('1/2', '1/2') == True\nassert     simplify('1/2', '1/3') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     simplify('1/2', '3/4') == True\nassert     simplify('1/2', '2/3') == False\nassert     simplify('1/3', '2/3') == True\nassert     simplify('0/1', '1/1') == True\nassert     simplify('2/1', '1/1') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     simplify('1/2', '3/4') == True, \"Numerator is not a whole number\"\nassert     simplify('1/2', '2/4') == False, \"Numerator is not a whole number\"\nassert     simplify('4/4', '2/1') == False, \"Denominator is not a whole number\"\nassert     simplify('1/2', '1/2') == True, \"Denominator is not a whole number\"\nassert     simplify('1/2', '3/2') == False, \"Denominator is not a whole number\"\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     simplify('1/3', '3') is True\nassert     simplify('2/6', '6') is True\nassert     simplify('1/2', '2') is False\nassert     simplify('3/5', '5') is False\nassert     simplify('0/0', '0') is True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     simplify('1/2', '2') == True\nassert     simplify('2', '2') == False\nassert     simplify('1/3', '3') == True\nassert     simplify('5', '10') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     simplify('2/3', '3/5') == True\nassert     simplify('1/2', '1/4') == True\nassert     simplify('1/2', '1/3') == False\nassert     simplify('1/2', '1/1') == True\nassert     simplify('1/2', '5/6') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     simplify('2/3', '3') == True\nassert     simplify('2/3', '3') == False\nassert     simplify('4/6', '4') == True\nassert     simplify('4/6', '6') == True\nassert     simplify('1/2', '2') == True\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     order_by_points([22, 121, 12, 12, -11, 112, 3]) == [3, 12, 12, 22, -11, 121, 112]\nassert     order_by_points([-123, -12, -12, -1, 2, 0, 12]) == [-123, -12, -12, -1, 2, 0, 12]\nassert     order_by_points([5, 5, 1, 2, 1, 1, 2]) == [1, 1, 1, 2, 2, 5, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     order_by_points([100, 13, 1, 0, 10, 2, 8, 4, 6, 9]) == [1, 0, 2, 4, 6, 8, 10, 13, 9, 100]\nassert     order_by_points([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     order_by_points([-100, -13, -1, 0, 10, 2, 8, 4, 6, 9]) == [-13, -1, 0, 2, 4, 6, 8, 10, 9, 100]\nassert     order_by_points([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 10, 12, 21, 61, 61, 71, 70, 73, 100]     == order_by_points([1, 10, 12, 21, 61, 61, 71, 70, 73, 100])\nassert     [1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130]     == order_by_points([1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130])\nassert     [1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130, 150, 160, 170, 180, 190]     == order_by_points([1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130, 150, 160, 170, 180, 190])\nassert     [1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130, 150, 160, 170, 180, 190, 200]     == order_by_points([1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130, 150, 160, 170, 180, 190, 200])\nassert     [1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250]     == order_by_points([1, 10, 12, 21, 61, 61, 71, 70, 73, 100, 101, 110, 130, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     order_by_points([1,3,2,2,5,7,7,8,9]) == [1,2,2,3,5,7,7,8,9]\nassert     order_by_points([3,4,5,6,7,8,9,1,2]) == [1,2,3,4,5,6,7,8,9]\nassert     order_by_points([3,2,4,5,6,7,8,1]) == [1,2,3,4,5,6,7,8,9]\nassert     order_by_points([0,0,0,0]) == [0,0,0,0]\nassert     order_by_points([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ids == order_by_points(ids)\nassert ids == order_by_points(ids2)\nassert ids == order_by_points(ids3)\n\nprint 'Passed: order_by_points'\n\ndef order_by_words(sentence):\n    \"\"\"\n    Write a function which sorts the given string by the\n    total number of letters and digits present in it.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     order_by_points([1, 7, 3, 4, 2, 5]) == [1, 2, 3, 4, 5, 7]\nassert     order_by_points([1, 4, 3, 2, 7, 5]) == [1, 2, 3, 4, 5, 7]\nassert     order_by_points([5, 7, 3, 2, 4, 1]) == [1, 2, 3, 4, 5, 7]\nassert     order_by_points([5, 7, 3, 2, 4, 1]) == [1, 2, 3, 4, 5, 7]\nassert     order_by_points([5, 7, 3, 2, 4, 1]) == [1, 2, 3, 4, 5, 7]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     order_by_points([4, 3, 2, 9, 8, 7, 1]) == [1, 2, 3, 4, 7, 8, 9]\nassert     order_by_points([1, 7, 3, 5, 7, 2, 4]) == [1, 2, 3, 4, 5, 7, 7]\nassert     order_by_points([5, 7, 9, 2, 4, 6, 7]) == [2, 4, 6, 7, 7, 9, 5]\nassert     order_by_points([8, 0, 4, 5, 6, 3, 2]) == [2, 0, 3, 4, 5, 6, 8]\nassert     order_by_points([8, 0, 3, 2, 4, 5, 6]) == [2, 0, 3, 4, 5, 6, 8]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     order_by_points([2, 10, 2, 4, 6, 5, 5, 4, 1]) == [1, 4, 4, 5, 5, 6, 10, 2, 2]\nassert     order_by_points([6, 3, 9, 1, 4, 8]) == [1, 3, 4, 6, 8, 9]\nassert     order_by_points([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8]     == order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 0]     == order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 0])\nassert     [5, 6, 7, 8, 9, 1, 2, 3, 4]     == order_by_points([5, 6, 7, 8, 9, 1, 2, 3, 4])\nassert     [8, 9, 1, 2, 3, 4, 5, 6, 7]     == order_by_points([8, 9, 1, 2, 3, 4, 5, 6, 7])\nassert     [9, 8, 7, 6, 5, 4, 3, 2, 1]     == order_by_points([9, 8, 7, 6, 5, 4, 3, 2, 1])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     order_by_points([5,8,9,13,16]) == [5, 8, 9, 16, 13]\nassert order_by_points([9,8,13,16,5,7]) == [5, 7, 9, 13, 16, 8]\nassert order_by_points([5,8,6,4,9]) == [5, 4, 6, 8, 9]\nassert order_by_points([5,3,8,2,7,8,2,3,1]) == [1, 2, 3, 3, 5, 7, 8, 8, 2]\nassert order_by_points([6,7,2,8,2,3,1]) == [1, 2, 2, 3, 6, 8, 8, 7, 2]\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 1\nassert     specialFilter([1, 3, 5, 7, 9, 10]) == 1\nassert     specialFilter([1, 3, 5, 7, 9, 10, 99]) == 1\nassert     specialFilter([1, 3, 5, 7, 9, 10, 99, 100]) == 0\nassert     specialFilter([1, 3, 5, 7, 9, 10, 99, 100, 101]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 5\nassert     specialFilter([1,3,5,7,9]) == 3\nassert     specialFilter([-3,0,3,8,5,6,7,8,9,10]) == 8\nassert     specialFilter([-2,3,5,7,9]) == 3\nassert     specialFilter([0,1,2,3,4,5,6,7,8,9,10]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     specialFilter([8, 123, 5]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 12\nassert     specialFilter([6, 12, 18, 7, 19, 5, 13, 19, 14, 10, 17, 14, 19, 1, 15, 21, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5]) == 1\nassert     specialFilter([4, 5, 6, 7, 8, 9]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6]) == 2\nassert     specialFilter([9, 2, 3, 4, 5]) == 0\nassert     specialFilter([9, 3, 2, 4, 5]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     specialFilter([1, 3, 5, 7, 9]) == 5\nassert     specialFilter([1, 3, 5, 7, 9, 11]) == 6\nassert     specialFilter([1, 3, 5, 7, 9, 11, 13]) == 4\nassert     specialFilter([1, 3, 5, 7, 9, 11, 13, 15]) == 3\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert     specialFilter([11, 12, 13, 14, 15]) == 4\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\nassert     specialFilter([100, 102, 104, 106, 108]) == 2\nassert     specialFilter([12, 24, 36, 48, 60, 72, 84, 96, 108, 120]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nspecialFilter([1,3,5,7,9]) == 3\nspecialFilter([-2,-1,0,1,2,3]) == 2\nspecialFilter([1,2,3,4,5,6]) == 0"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     specialFilter([3, 5, 7, 1, 9]) == 2\nassert     specialFilter([5, 3, 7, 8]) == 0\nassert     specialFilter([5, 3, 7, 9]) == 0\nassert     specialFilter([5, 3, 7]) == 1\nassert     specialFilter([]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\nassert     specialFilter([7, 9, 1, 2, 3, 4, 5, 6, 7]) == 4\nassert     specialFilter([9, 2, 3, 4, 5, 6, 7, 8, 1]) == 1\nassert     specialFilter([9, 1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     specialFilter([]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 5\nassert     specialFilter([10, 2, 8, 1, 9, 4, 5, 6, 7]) == 1\nassert     specialFilter([2, 1, 3, 10, 6]) == 0\nassert     specialFilter([2, 2, 1, 1, 2]) == 1\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_max_triples(5) == 2\nassert     get_max_triples(10) == 4\nassert     get_max_triples(100) == 24\nassert     get_max_triples(1000) == 168\nassert     get_max_triples(10000) == 4488\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_max_triples(10) == 4\nassert     get_max_triples(100) == 17\nassert     get_max_triples(1000) == 230\nassert     get_max_triples(10000) == 572\nassert     get_max_triples(100000) == 18750\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_max_triples(5) == 4\nassert     get_max_triples(10) == 9\nassert     get_max_triples(25) == 16\nassert     get_max_triples(1) == 0\nassert     get_max_triples(100) == 48\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_max_triples(10) == 2\nassert     get_max_triples(20) == 5\nassert     get_max_triples(100) == 9\nassert     get_max_triples(1000) == 24\nassert     get_max_triples(5000) == 462\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_max_triples(5) == 5\nassert     get_max_triples(10) == 13\nassert     get_max_triples(100) == 166\nassert     get_max_triples(1000) == 647\nassert     get_max_triples(10000) == 1670\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nassert get_max_triples(1) == 0\nassert get_max_triples(2) == 1\nassert get_max_triples(3) == 1\nassert get_max_triples(4) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_max_triples(3) == 2, \"should be 2\"\nassert     get_max_triples(4) == 1, \"should be 1\"\nassert     get_max_triples(12) == 1, \"should be 1\"\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_max_triples(10) == 3\nassert     get_max_triples(15) == 7\nassert     get_max_triples(12) == 0\nassert     get_max_triples(25) == 0\n\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_max_triples(5) == 3\nassert     get_max_triples(10) == 4\nassert     get_max_triples(100) == 12\nassert     get_max_triples(1000) == 60\nassert     get_max_triples(10000) == 840\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     bf('Earth', 'Jupiter') == ('Earth', 'Jupiter')\nassert     bf('Jupiter', 'Earth') == ('Jupiter', 'Earth')\nassert     bf('Venus', 'Mars') == ('Venus', 'Mars')\nassert     bf('Jupiter', 'Venus') == ('Jupiter', 'Venus')\nassert     bf('Uranus', 'Neptune') == ('Neptune', 'Uranus')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bf('Mars', 'Earth') == ('Mars', 'Earth', 'Jupiter', 'Venus', 'Mercury', 'Neptune', 'Saturn', 'Uranus', 'Pluto')\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth', 'Jupiter', 'Mars', 'Mercury', 'Neptune', 'Saturn', 'Uranus', 'Pluto')\nassert     bf('Pluto', 'Earth') == ('Pluto', 'Earth', 'Jupiter', 'Mars', 'Mercury', 'Neptune', 'Venus', 'Saturn', 'Uranus')\nassert     bf('Earth', 'Pluto') == ('Earth', 'Pluto', 'Mars', 'Venus', 'Jupiter', 'Neptune', 'Saturn', 'Uranus', 'Mercury')\nassert     bf('Jupiter', 'Mercury') == ('Jupiter', 'Mercury', 'Neptune', 'Venus', 'Earth', 'Mars', 'Saturn', 'Uranus', 'Pluto')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury')\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth', 'Mercury')\nassert     bf('Earth', 'Mars') == ('Venus', 'Earth', 'Mars')\nassert     bf('Mars', 'Jupiter') == ('Venus', 'Mars', 'Jupiter', 'Earth')\nassert     bf('Jupiter', 'Saturn') == ('Venus', 'Mars', 'Jupiter', 'Saturn', 'Earth')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')\nassert     bf('Venus', 'Mars') == ('Venus', 'Mars')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars')\nassert     bf('Mars', 'Jupiter') == ('Mars', 'Jupiter')\nassert     bf('Jupiter', 'Saturn') == ('Jupiter', 'Saturn')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     bf('Venus', 'Earth') ==     ('Earth', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mercury', 'Mars') ==     ('Mars', 'Mercury', 'Venus', 'Earth', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Saturn') ==     ('Saturn', 'Jupiter', 'Mars', 'Mercury', 'Venus', 'Earth', 'Uranus', 'Neptune')\nassert     bf('Neptune', 'Mars') ==     ('Mars', 'Neptune', 'Venus', 'Earth', 'Jupiter', 'Saturn', 'Uranus', 'Mercury')\nassert     bf('Jupiter', 'Venus') ==     ()\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury')\nassert     bf('Venus', 'Earth') == ('Mercury', 'Venus')\nassert     bf('Earth', 'Venus') == ('Venus', 'Mercury')\nassert     bf('Earth', 'Mars') == ('Venus', 'Mercury')\nassert     bf('Mars', 'Venus') == ('Venus', 'Mercury')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bf('Mercury', 'Earth') == ('Earth', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars')\nassert     bf('Jupiter', 'Neptune') == ('Jupiter', 'Neptune')\nassert     bf('Saturn', 'Uranus') == ('Saturn', 'Uranus')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Venus') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Jupiter') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Saturn', 'Uranus') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Earth', 'Mars', \n                                    'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth', 'Mars', 'Jupiter', \n                                    'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Neptune') == ('Jupiter', 'Neptune', 'Saturn', \n                                    'Uranus', 'Earth', 'Mars', 'Venus')\nassert     bf('Saturn', 'Uranus') == ('Saturn', 'Uranus', 'Venus', 'Neptune')\nassert     bf('Neptune', 'Jupiter') == ('Neptune', 'Jupiter', 'Venus', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mars') == ('Mars', 'Earth', 'Venus', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Neptune') == ('Earth', 'Neptune')\nassert     bf('Jupiter', 'Uranus') == ('Mars', 'Jupiter', 'Uranus')\nassert     bf('Venus', 'Mercury') == ()\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sorted_list_sum([\"\", \"a\", \"ab\", \"abc\"]) == [\"\", \"a\", \"ab\", \"abc\"]\nassert     sorted_list_sum([\"abc\", \"a\", \"ab\"]) == [\"\", \"a\", \"ab\"]\nassert     sorted_list_sum([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]) == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\nassert     sorted_list_sum([\"a\", \"b\", \"ab\", \"ba\", \"baa\", \"abc\", \"bcd\", \"bca\", \"bd\"]) == [\"\", \"a\", \"ab\", \"ba\", \"baa\", \"abc\", \"bcd\", \"bca\", \"bd\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sorted_list_sum(['a', 'ab', 'abc']) == ['a', 'abc']\nassert     sorted_list_sum(['abc', 'a', 'ab']) == ['abc', 'a', 'ab']\nassert     sorted_list_sum(['abc', 'ab', 'abc']) == ['abc', 'abc', 'ab']\nassert     sorted_list_sum(['a', 'a']) == ['a']\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'a']) == ['a', 'a']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sorted_list_sum([\"10\", \"2\", \"1\", \"12\"]) == [\"1\", \"2\", \"10\", \"12\"]\nassert     sorted_list_sum([\"2\", \"1\", \"12\"]) == [\"1\", \"2\", \"12\"]\nassert     sorted_list_sum([\"12\", \"1\", \"2\"]) == [\"1\", \"2\", \"12\"]\nassert     sorted_list_sum([\"1\", \"2\", \"12\"]) == [\"1\", \"2\", \"12\"]\nassert     sorted_list_sum([\"12\", \"12\", \"12\"]) == [\"12\", \"12\", \"12\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum([1, 2, 3]) == [1, 2, 3]\nassert     sorted_list_sum([\"zo\", \"ab\", \"a\", \"me\"]) == [\"a\", \"ab\", \"me\", \"zo\"]\nassert     sorted_list_sum([\"a\", \"aa\", \"aaaa\"]) == [\"a\", \"aa\", \"aaaa\"]\nassert     sorted_list_sum([\"ab\", \"a\", \"aa\"]) == [\"a\", \"ab\", \"aa\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sorted_list_sum(['asd','aa','bb','c', 'abc', 'z']) == ['aa', 'bb', 'abc', 'asd', 'c', 'z']\nassert     sorted_list_sum(['a','aa','bbb','c', 'abc', 'z']) == ['a', 'aa', 'bbb', 'abc', 'c', 'z']\nassert     sorted_list_sum(['a','aa','bbb','c', 'abc', 'z']) == ['a', 'aa', 'bbb', 'c', 'abc', 'z']\nassert     sorted_list_sum(['a','aa','bbb','c', 'abc', 'z']) == ['a', 'aa', 'bbb', 'c', 'abc', 'z']\nassert     sorted_list_sum(['a','aa','bbb','c', 'abc', 'z']) == ['a', 'aa', 'bbb', 'c', 'abc', 'z']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sorted_list_sum(['foo', 'bar','maz','maz', 'is','maz','maz','maz','maz','maz']) == ['maz','maz','maz','maz', 'is', 'bar', 'foo']\nassert     sorted_list_sum(['foo', 'bar','maz','maz', 'is','maz','maz','maz','maz','maz','maz']) == ['maz','maz','maz','maz', 'is', 'bar', 'foo']\nassert     sorted_list_sum(['foo', 'bar','maz','maz', 'is','maz','maz','maz','maz','maz','maz','maz']) == ['maz','maz','maz','maz', 'is', 'bar', 'foo']\nassert     sorted_list_sum(['foo', 'bar','maz','maz', 'is','maz','maz','maz','maz','maz','maz','maz','maz']) == ['maz','maz','maz','maz', 'is', 'bar', 'foo']\nassert     sorted_list_sum(['foo', 'bar','maz','maz', 'is','maz','maz','maz','maz','maz','maz','maz','maz']) == ['maz','maz','maz','maz', 'is', 'bar', 'foo']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sorted_list_sum(['t', 'a', 'i', 'o', 'n', 'i', 'a', 'a', 't', 'h', 'o', 'r', 'a','m', 'a', 'r', 'a', 'e', 'i', 'n']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'o', 'o', 'r', 'r', 'r', 'r', 't', 't', 't', 't', 't', 't', 'h', 'h', 'h', 'h', 'h', 'h']\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', "
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sorted_list_sum(['cracker', 'cracker', 'cracker']) == ['cracker']\nassert     sorted_list_sum(['mustard','mustard','mustard','mustard']) == ['mustard','mustard','mustard']\nassert     sorted_list_sum(['abcdef', 'abcdef', 'abcdef', 'abcdef']) == ['abcdef']\nassert     sorted_list_sum(['cracker','mustard','mustard','mustard']) == ['mustard','mustard','mustard']\nassert     sorted_list_sum(['mustard','mustard','mustard','mustard']) == ['mustard','mustard','mustard']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         sorted_list_sum([\"abc\", \"bcd\", \"abcdef\", \"abc\"]) == [\"abc\", \"abcdef\"]\nassert         sorted_list_sum([\"abc\", \"def\", \"bcd\", \"abcdef\"]) == [\"abc\", \"abcdef\"]\nassert         sorted_list_sum([\"abc\", \"def\", \"bcd\", \"abc\"]) == [\"abc\", \"abcdef\"]\nassert         sorted_list_sum([\"abc\", \"def\", \"bcd\", \"abc\"]) == [\"abc\", \"abcdef\"]\nassert         sorted_list_sum([\"abc\", \"def\", \"bcd\", \"abc\"]) == [\"abc\", \"abcdef\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"a\", \"ab\", \"abc\", \"abcdefg\", \"abcd\"]) == [\"ab\", \"abc\", \"abcdefg\"]\nassert     sorted_list_sum([\"abc\", \"abcdefg\", \"a\", \"ab\"]) == [\"ab\", \"abc\", \"abcdefg\"]\nassert     sorted_list_sum([\"abc\", \"abcd\", \"abcde\", \"abce\", \"abceg\"]) == [\"abcd\", \"abcde\"]\nassert     sorted_list_sum([\"a\", \"ab\", \"abc\", \"abcdefg\", \"abcd\"]) == [\"ab\", \"abc\", \"abcdefg\"]\nassert     sorted_list_sum([\"a\", \"ab\", \"abcd\", \"abcde\", \"abce\", \"abceg\"]) == [\"abcd\", \"abcde\"]\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     x_or_y(2, 'A', 'B') == 'A'\nassert     x_or_y(3, 'A', 'B') == 'B'\nassert     x_or_y(5, 'A', 'B') == 'B'\nassert     x_or_y(7, 'A', 'B') == 'A'\nassert     x_or_y(11, 'A', 'B') == 'B'\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     x_or_y(7,    1, 2) == 1\nassert     x_or_y(3,    1, 2) == 2\nassert     x_or_y(10, 1, 2) == 2\nassert     x_or_y(5,    1, 2) == 2\nassert     x_or_y(11, 1, 2) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     x_or_y(7, 4, 3) == 4\nassert     x_or_y(11, 4, 3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     x_or_y(10, 5, 7) == 5\nassert     x_or_y(11, 5, 7) == 7\nassert     x_or_y(10, 10, 5) == 10\nassert     x_or_y(10, 11, 5) == 11"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     x_or_y(2, 2, 3) == 2\nassert     x_or_y(2, 2, 4) == 3\nassert     x_or_y(2, 3, 2) == 2\nassert     x_or_y(2, 3, 4) == 3\nassert     x_or_y(2, 4, 2) == 4\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     x_or_y(4,1,3) == 1\nassert     x_or_y(2,1,2) == 2\nassert     x_or_y(3,3,4) == 4\n\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     x_or_y(2,2,3) == 2\nassert     x_or_y(2,3,3) == 3\nassert     x_or_y(2,3,4) == 3\nassert     x_or_y(2,3,5) == 3\nassert     x_or_y(2,4,3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     x_or_y(6, 8, 10) == 8\nassert     x_or_y(5, 4, 3) == 4\nassert     x_or_y(5, 3, 4) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     x_or_y(3, 3, 2) == 2\nassert     x_or_y(2, 3, 2) == 3\nassert     x_or_y(1, 3, 2) == 3\nassert     x_or_y(6, 3, 2) == 2\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3, 4, 5]) == 25\nassert     double_the_difference([1, 2, 3, -4, 5]) == 28\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 72\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, -8, 9]) == -28\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     double_the_difference([5, 4, 3, 2, 1]) == 25\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3, 4]) == 1\nassert     double_the_difference([-1, 2, 3]) == 1\nassert     double_the_difference([2, 2, 2]) == 2\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6]) == 5\nassert     double_the_difference([]) == 0\nassert     double_the_difference([2, -4, 1, 5, -6]) == 10\nassert     double_the_difference([2, 4, 3, 5, -6]) == 4\nassert     double_the_difference([2, -4, 3, -5, -6]) == 2\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef filter_even_numbers(lst):\n    '''\n    Given a list of integers, return a new list containing only the\n    even numbers in the list.\n   \n    If the input list is empty, return an empty list.\n    '''\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 4\nassert     double_the_difference([0, -1, 2, -3]) == 0\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1, 1, 1, 1, 1]) == 10\nassert     double_the_difference([-1, -1, -1, -1, -1]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3]) == 24\nassert     double_the_difference([1, 2, -3]) == 24\nassert     double_the_difference([-1, -2, -3]) == 24\nassert     double_the_difference([-1, 2, 3]) == 12\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     double_the_difference([3,4,5,6])    ==     25\nassert     double_the_difference([])        == 0\nassert     double_the_difference([1])        == 1\nassert     double_the_difference([1, 2, 3])    == 8\nassert     double_the_difference([1.2, 2.3, 4.5])    == 17.7\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13]) ==\n            1444\nassert     double_the_difference([1,3,5,7,9,11,13]) ==\n            1444\nassert     double_the_difference([1,2,3,4]) == 0\nassert     double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13]) ==\n            1444\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     double_the_difference([0, 1, 2, 3, 4, 5]) == 30\nassert     double_the_difference([1, 3, 5, 7]) == 12\nassert     double_the_difference([5]) == 50\nassert     double_the_difference([]) == 0\nassert     double_the_difference([0, 2, 4, 8]) == 36\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare([0,0],[0,0]) == [0]\nassert     compare([0,0],[1,1]) == [1,0]\nassert     compare([3,2],[1,1]) == [2,1]\nassert     compare([2,2],[1,1]) == [2,1]\nassert     compare([3,2],[2,2]) == [1,1]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare([1,1,1,1], [0,1,2,3]) == [0,0,0,0]\nassert     compare([1,2,3,4], [0,1,2,3]) == [0,1,2,3]\nassert     compare([1,2,3,4], [0,0,0,0]) == [0,0,0,0]\nassert     compare([0,0,0,0], [0,1,2,3]) == [0,0,0,0]\n\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     compare([1,1,0,0],[0,1,1,0]) == [0,2,1,2]\nassert     compare([1,2,3,4,5],[3,3,4,2,0]) == [0,3,3,2,1]\nassert     compare([9,8,7,6,5],[6,6,5,4,3]) == [0,1,1,1,0]\nassert     compare([1,2,3,4,5,6,7,8],[4,5,6,7,8,9,0,1]) == [0,3,4,5,4,1,0,3]"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare([1,2,3,4],[1,2,3,4]) == [0, 0, 0, 0]\nassert     compare([1,2,3,4],[2,2,3,4]) == [1, 1, 1, 1]\nassert     compare([1,2,3,4],[3,2,3,4]) == [2, 1, 2, 2]\nassert     compare([1,2,3,4],[4,2,3,4]) == [3, 1, 2, 3]\nassert     compare([1,2,3,4],[5,2,3,4]) == [4, 1, 2, 3]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     compare([1,2,3,4,5],[1,5,3,4,2]) == [0,4,3,1,2]\nassert     compare([1,2,3,4,5],[2,4,3,5,1]) == [2,0,0,0,2]\nassert     compare([1,2,3,4,5],[3,5,1,2,4]) == [3,0,0,0,2]\nassert     compare([1,2,3,4,5],[4,5,1,2,3]) == [1,2,3,4,5]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare([13, 13, 14], [1, 1, 1]) == [2, 2, 2]\nassert     compare([13, 13, 14], [14, 14, 14]) == [0, 0, 0]\nassert     compare([0, 0, 0], [1, 1, 1]) == [3, 3, 3]\nassert     compare([12, 0, 10], [12, 0, 10]) == [0, 0, 0]\nassert     compare([0, 1, 2], [0, 1, 3]) == [1, 1, 4]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     compare([5,4,3,2,1],[5,4,3,2,1]) == [0,0,0,0,0]\nassert     compare([1,2,3,4,5],[6,5,4,3,2]) == [5,1,1,1,1]\nassert     compare([5,4,3,2,1],[5,4,3,2,1]) == [5,1,1,1,1]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     compare(game,guess) == [1,0,0,1,0,1,0,1,0,1]\nassert     compare(game,guess) == [1,1,2,3,4,5,6,7,8,9]\nassert     compare(game,guess) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare(game,guess) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare(game,guess) == [0,0,0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare([1,1,1,1,1],[1,1,1,1,1]) == [0,0,0,0,0]\nassert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     compare([9,8,7,6,5],[1,2,3,4,5]) == [2,2,2,2,2]\nassert     compare([9,8,7,6,5],[1,2,3,4,5]) == [2,2,2,2,2]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'Cheese']) == 'Cheese.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'StuFfed', 'Cheese']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'Cheese']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'Cheese', 'Cheese']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'Cheese', 'Cheese', 'Cheese']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Strongest_Extension( 'Nets', [ 'Net', 'Slices', 'Nets', 'Pets', 'Birds' ])    == 'Nets.Nets'\nassert     Strongest_Extension( 'Net', [ 'Net', 'Slices', 'Nets', 'Pets', 'Birds' ])    == 'Nets.Net'\nassert     Strongest_Extension( 'Net', [ 'Net', 'Net', 'Slices', 'Nets', 'Pets', 'Birds' ])    == 'Nets.Net'\nassert     Strongest_Extension( 'Net', [ 'Net', 'Net', 'Net', 'Slices', 'Nets', 'Pets', 'Birds' ])    == 'Net.Net'\nassert     Strongest_Extension( 'Net', [ 'Net', 'Net', 'Net', 'Net', 'Slices', 'Nets', 'Pets', 'Birds' ])    == 'Net.Net'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'SouFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'SouFfed', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'SouFfed', 'StuFfed', 'FadFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'SouFfed', 'StuFfed', 'FadFfed', 'FadFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Strongest_Extension(\"Broom\", [\"Blender\"]) == \"Broom.Blender\"\nassert     Strongest_Extension(\"Blend\", [\"Blender\", \"Farmer\", \"Victor\"]) == \"Blender.Blender\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"Cheese\", \"Farmer\", \"Victor\"]) == \"Slices.Cheese\"\nassert     Strongest_Extension(\"Slices\", [\"Cheese\", \"Farmer\", \"Blender\", \"Victor\"]) == \"Slices.Cheese\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Strongest_Extension('Snake', ['snake','snakebite','snakes']) == 'Snake.snakebite'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Fish\", ['Hook', 'Scallop', 'Shark', 'Lobster', 'Sea Bass']) == 'Fish.Hook'\nassert     Strongest_Extension(\"Sardine\", ['Stripe', 'Boat', 'Turtle', 'Sardine', 'Fish', 'Catfish']) == 'Sardine.Fish'\nassert     Strongest_Extension(\"Flamingo\", ['Flamingo', 'Lion', 'Rabbit', 'Flamingo', 'Lion', 'Rabbit', 'Catfish', 'Turtle']) == 'Flamingo.Flamingo'\nassert     Strongest_Extension(\"Slices\", ['Slices', 'Cheese', 'StuFfed']) == 'Slices.Slices'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'TOMato']) == 'Slices.TOMato'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'TOMato']) == 'Cheese.TOMato'\nassert     Strongest_Extension('TOMato', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'TOMato']) == 'TOMato.TOMato'\nassert     Strongest_Extension('TOMato', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'TOMato.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Strongest_Extension(\"PeanutButter\", [\"SeNtAcTie\", \"LecOe\", \"PeanutButter\", \"SnOwLd\", \"TieS\"])     == \"PeanutButter.LecOe\"\nassert     Strongest_Extension(\"PeanutButter\", [\"SeNtAcTie\", \"Cheese\", \"PeanutButter\", \"SnOwLd\", \"TieS\"])     == \"PeanutButter.Cheese\"\nassert     Strongest_Extension(\"PeanutButter\", [\"SeNtAcTie\", \"Cheese\", \"PeanutButter\", \"SnOwLd\", \"TieS\", \"StuFfed\"])     == \"PeanutButter.TieS\"\nassert     Strongest_Extension(\"\", [\"SeNtAcTie\", \"Cheese\", \"PeanutButter\", \"SnOwLd\", \"TieS\", \"StuFfed\"])     == \"\"\nassert     Strongest_Extension(\"PeanutButter\", [\"\"])     == \"PeanutButter.SeNtAcTie\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'StuFfed', 'Cheese']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'LetsGo']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'LetsGo', 'Slices']) == 'Slices.Slices'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     cycpattern_check(\"dassi\",\"dssa\")\nassert     cycpattern_check(\"acab\",\"baca\")\nassert     not cycpattern_check(\"acab\",\"bac\")\nassert     cycpattern_check(\"adfasd\",\"adfasd\")\nassert     cycpattern_check(\"adfasd\",\"dsdaf\")\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"abcdefg\", \"bcdefg\") == True\nassert     cycpattern_check(\"abcdefg\", \"efg\") == True\nassert     cycpattern_check(\"abcdefg\", \"defg\") == True\nassert     cycpattern_check(\"abcdefg\", \"efgh\") == True\nassert     cycpattern_check(\"abcdefg\", \"fg\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         cycpattern_check('','') == False\nassert         cycpattern_check('a', 'a') == True\nassert         cycpattern_check('hello','lo') == True\nassert         cycpattern_check('hello','helo') == False\nassert         cycpattern_check('hello','llohe') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     cycpattern_check('abcde', 'cdeab') == True\nassert     cycpattern_check('abcde', 'eabcd') == True\nassert     cycpattern_check('abcde', 'edcba') == True\nassert     cycpattern_check('abcde', 'ababc') == True\nassert     cycpattern_check('abcde', 'bcadc') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     cycpattern_check(\"abcd\", \"cdab\")\nassert     cycpattern_check(\"abcd\", \"cda\")\nassert     cycpattern_check(\"abcd\", \"cda\")\nassert     cycpattern_check(\"abcd\", \"dcb\")\nassert     cycpattern_check(\"abcd\", \"bcda\")\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     cycpattern_check(\"somelongstring\", \"string\") == True\nassert     cycpattern_check(\"somelongstring\", \"someotherstring\") == False\nassert     cycpattern_check(\"somelongstring\", \"something\") == True\nassert     cycpattern_check(\"somelongstring\", \"longstring\") == True\nassert     cycpattern_check(\"somelongstring\", \"otherlongstring\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     cycpattern_check( \"abc\", \"cab\" ) == True\nassert     cycpattern_check( \"abc\", \"cabd\" ) == False\nassert     cycpattern_check( \"abcd\", \"cab\" ) == False\nassert     cycpattern_check( \"abcd\", \"abc\" ) == True\nassert     cycpattern_check( \"abc\", \"abcd\" ) == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     cycpattern_check('abcde', 'abcde') == True\nassert     cycpattern_check('abcde', 'bcdea') == False\nassert     cycpattern_check('abcde', 'edcba') == True\nassert     cycpattern_check('abcde', 'edcba') == True\nassert     cycpattern_check('abcde', 'aecba') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     cycpattern_check( \"abcd\", \"cdab\") == True\nassert     cycpattern_check( \"abcd\", \"abcd\") == False\nassert     cycpattern_check( \"hello\", \"llohe\") == True\nassert     cycpattern_check( \"hello\", \"ello\") == True\nassert     cycpattern_check( \"hello\", \"helo\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cycpattern_check('gog', 'goog')\nassert     cycpattern_check('hello', 'olleh')\nassert     cycpattern_check('hello', 'olleh')\nassert     cycpattern_check('good', 'old')\nassert     cycpattern_check('gog', 'oggo')\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef count_digits(num):\n    \"\"\"Given an integer. return the total number of digits in it.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_count(51) == (2, 1)\nassert     even_odd_count(22) == (2, 1)\nassert     even_odd_count(12) == (2, 1)\nassert     even_odd_count(13) == (3, 0)\nassert     even_odd_count(16) == (2, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (2,4) == even_odd_count(12)\nassert     (0,0) == even_odd_count(123)\nassert     (3,5) == even_odd_count(1357)\nassert     (1,1) == even_odd_count(2)\nassert     (0,0) == even_odd_count(0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (even_odd_count(1212) == (2,2)), \"1212 should be 1 even and 2 odd digits\"\nassert     (even_odd_count(1012) == (2,1)), \"1012 should be 1 even and 1 odd digits\"\nassert     (even_odd_count(0) == (0,0)), \"0 should be 0 even and 0 odd digits\"\nassert     (even_odd_count(1325) == (3,1)), \"1325 should be 3 even and 1 odd digits\"\nassert     (even_odd_count(-342) == (1,3)), \"-342 should be 1 even and 3 odd digits\"\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_count(1234) == (3, 1)\nassert     even_odd_count(2468) == (3, 1)\nassert     even_odd_count(12) == (1, 0)\nassert     even_odd_count(1) == (0, 1)\nassert     even_odd_count(1234) == (3, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_odd_count(1) == (1,1)\nassert     even_odd_count(101) == (2,1)\nassert     even_odd_count(42) == (2,2)\nassert     even_odd_count(9871) == (3,1)\nassert     even_odd_count(987) == (3,1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_count(2345) == (2, 4)\nassert     even_odd_count(10) == (1, 0)\nassert     even_odd_count(21) == (2, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_count(12345) == (2, 2)\nassert     even_odd_count(1234) == (2, 0)\nassert     even_odd_count(4589) == (3, 2)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(-1234) == (0, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_count(3451) == (4, 1)\nassert     even_odd_count(2031) == (2, 1)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(-345) == (4, 0)\nassert     even_odd_count(-99) == (9, 0)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(7) == \"VII\"\nassert     int_to_mini_roman(9) == \"IX\"\nassert     int_to_mini_roman(10) == \"X\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n    \n\n\n\n\"\"\"\nQuestion 1\n\nWhat are the three largest magic numbers, and their positions in the table below?\n\n2143 922 333\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) ==     \"I\"\nassert     int_to_mini_roman(4) ==     \"IV\"\nassert     int_to_mini_roman(5) ==     \"V\"\nassert     int_to_mini_roman(10) ==     \"X\"\nassert     int_to_mini_roman(50) ==     \"L\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(1, 1, 1)\nassert     right_angle_triangle(1, 1, 2) == False\nassert     right_angle_triangle(1, 2, 3) == False\nassert     right_angle_triangle(1, 2, 1) == True\nassert     right_angle_triangle(1, 1, 1) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(3,4,5) == True\nassert     right_angle_triangle(5,3,4) == True\nassert     right_angle_triangle(4,3,5) == False\nassert     right_angle_triangle(3,5,4) == False\nassert     right_angle_triangle(2,2,2) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(3,4,5) == True\nassert     right_angle_triangle(3,4,6) == False\nassert     right_angle_triangle(5,9,12) == True\nassert     right_angle_triangle(5,12,9) == False\nassert     right_angle_triangle(12,5,9) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(3, 4, 5)\nassert     right_angle_triangle(5, 3, 4)\nassert     right_angle_triangle(4, 3, 5) == False\nassert     right_angle_triangle(10, 10, 5)\nassert     right_angle_triangle(5, 10, 10) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef check_polygon(n, r):\n    '''\n    This function returns the perimeter of the n-sided polygon with side length\n    r.\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(4, 4, 4) == True\nassert     right_angle_triangle(5, 5, 5) == True\nassert     right_angle_triangle(6, 6, 6) == True\nassert     right_angle_triangle(7, 7, 7) == True\nassert     right_angle_triangle(8, 8, 8) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(1,1,1) == True, \"1,1,1 should be right angle triangle\"\nassert     right_angle_triangle(1,2,1) == False, \"1,2,1 should not be right angle triangle\"\nassert     right_angle_triangle(1,2,3) == False, \"1,2,3 should not be right angle triangle\"\nassert     right_angle_triangle(3,4,5) == False, \"3,4,5 should not be right angle triangle\"\nassert     right_angle_triangle(3,5,4) == False, \"3,5,4 should not be right angle triangle\"\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\n'''\nProblem 19: Counting Sundays\n\nYou are given the following information, but you may prefer to do some research \nfor yourself.\n\n1 Jan 1900 was a Monday.\nThirty days has September, April, June and November.\nAll the rest have thirty-one, Saving February alone, Which has twenty-eight,\nFebruary has twenty-seven.\n\nAnd on leap years, twenty-nine.\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, \"First argument is 3, Second argument is 4, Third argument is 5\"\nassert     right_angle_triangle(10, 10, 10) == False, \"First argument is 10, Second argument is 10, Third argument is 10\"\nassert     right_angle_triangle(3, 3, 5) == False, \"First argument is 3, Second argument is 3, Third argument is 5\"\nassert     right_angle_triangle(3, 5, 5) == False, \"First argument is 3, Second argument is 5, Third argument is 5\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_max(['hello', 'world', 'golf']) == 'world'\nassert     find_max(['hello', 'world', 'golf', 'python', 'dog']) == 'python'\nassert     find_max(['hello', 'world', 'golf', 'python', 'dog', 'dog']) == 'dog'\nassert     find_max(['hello', 'world', 'golf', 'python', 'python']) == 'python'\nassert     find_max(['hello', 'world', 'golf', 'python', 'dog', 'world', 'world', 'dog']) == 'world'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         find_max(['abc', 'ab', 'abb', 'abcdef', 'bbc', 'bb']) == 'bbc'\nassert         find_max(['a', 'aa', 'aaa', 'aaaa']) == 'aa'\nassert         find_max(['abc', 'abcdef', 'a', 'aa', 'aaaa', 'bbc', 'bb']) == 'bb'\nassert         find_max(['aa', 'aa', 'bb', 'bb']) == 'aa'\nassert         find_max(['abc', 'a', 'abcdef', 'bbc', 'bb']) == 'abc'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_max(['AB', 'CD', 'EF']) == 'EF'\nassert     find_max(['AB', 'CD', 'EF', 'AB']) == 'AB'\nassert     find_max(['CD', 'EF', 'AB', 'AB']) == 'AB'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_max(['apple', 'banana','mango']) == 'apple'\nassert     find_max(['heart', 'yellow','sky','sea', 'fire', 'earth']) == 'earth'\nassert     find_max(['apple', 'banana','mango', 'carrot', 'orange']) == 'orange'\nassert     find_max(['banana', 'orange', 'grapes', 'water', 'pine','sugar','milk', 'apple', 'orange','sky','sun']) == 'orange'\nassert     find_max(['orange', 'apple', 'grapes', 'water', 'pine','sugar','milk', 'apple', 'orange','sky','sun']) == 'orange'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_max(['hii', 'ty', 'hello', 'hi', 'h', 'hii']) == 'h'\nassert     find_max(['hii', 'ty', 'hello', 'hi', 'h', 'hii']) == 'hii'\nassert     find_max(['hii', 'ty', 'hello', 'hi', 'h', 'hii']) == 'h'\n\nprint(\"PASSED: find_max\")"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_max([\"grape\", \"grapefruit\", \"banana\"]) == \"banana\"\nassert     find_max([\"grape\", \"grapefruit\", \"grapes\", \"grapefruit\"]) == \"grapefruit\"\nassert     find_max([\"orange\", \"banana\", \"grapes\", \"banana\"]) == \"banana\"\nassert     find_max([\"grapes\", \"grapefruit\", \"grape\", \"grapefruit\"]) == \"grapefruit\"\nassert     find_max([\"grape\", \"grape\", \"grapefruit\"]) == \"grape\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_max(['dfg', 'fgh', 'ab', 'efg', 'fgh', 'abc']) == 'abc'\nassert     find_max(['dfg', 'fgh', 'ab', 'efg', 'fgh', 'abc', 'jhfk']) == 'abc'\nassert     find_max(['dfg', 'fgh', 'ab', 'efg', 'fgh', 'abc', 'jhfk', 'gfg']) == 'jhfk'\nassert     find_max(['dfg', 'fgh', 'ab', 'efg', 'fgh', 'abc', 'jhfk', 'gfg', 'gh']) == 'gh'\nassert     find_max(['dfg', 'fgh', 'ab', 'efg', 'fgh', 'abc', 'jhfk', 'gfg', 'gh', 'jhfk']) == 'jhfk'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_max(['abc', 'bcd', 'cba']) == 'bcd'\nassert find_max(['a', 'b', 'c', 'd']) == 'a'\nassert find_max(['hi', 'how', 'are', 'you', 'hellow', 'are', 'you', 'are', 'you']) == 'you'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_max([\"hello\", \"hi\", \"HELP\"]) == \"hello\", \"FAILED\"\nassert     find_max([\"A\", \"AA\", \"AAAA\", \"AAAAA\", \"AAAB\"]) == \"AAAAAA\", \"FAILED\"\nassert     find_max([\"G\", \"Z\", \"E\", \"D\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]) == \"G\", \"FAILED\"\nassert     find_max([\"H\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"]) == \"G\", \"FAILED\"\nprint(\"all tests passed\")"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_max(['hacker', 'looser', 'lol', 'hil']\n                ) == 'lol'\nassert     find_max(['a', 'cc', 'dd', 'f']\n                ) == 'a'\nassert     find_max(['cc', 'a', 'bb', 'dd']\n                ) == 'bb'\nassert     find_max(['a', 'cc', 'dd', 'f', 'gg', 'g', 'hh', 'ii', 'jj', 'kk']\n                ) == 'jj'\nassert     find_max(['a', 'cc', 'dd', 'f', 'gg', 'g', 'hh', 'ii', 'jj', 'kk', 'll', 'oo', 'pp', 'qq', 'rr','ss', 'tt', 'uu', 'vv', 'ww', 'xx', 'yy', 'zz', 'aa', 'bb', 'cc', 'dd', 'ee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','mm', 'nn', 'oo', 'pp', 'qq', 'rr','ss', 'tt', 'uu', 'vv', 'ww', 'xx', 'yy', 'zz']\n                ) == 'zz'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eat(4, 3, 9) == [4, 8]\nassert     eat(3, 7, 8) == [8, 3]\nassert     eat(4, 8, 4) == [4, 0]\nassert     eat(10, 20, 30) == [30, 10]\nassert     eat(5, 6, 4) == [6, 4]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     eat(0, 2, 5) == [0, 2]\nassert     eat(9, 1, 7) == [9, 6]\nassert     eat(1, 2, 3) == [2, 0]\nassert     eat(8, 1, 10) == [9, 1]\nassert     eat(3, 8, 9) == [3, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     eat(0, 3, 3) == [ 3, 3]\nassert     eat(3, 1, 4) == [ 3, 2]\nassert     eat(7, 10, 4) == [ 7, 5]\nassert     eat(1, 0, 100) == [ 99, 0]\nassert     eat(0, 100, 100) == [ 0, 100]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     eat(5, 5, 10) == [10, 0]\nassert     eat(10, 5, 10) == [5, 5]\nassert     eat(8, 3, 8) == [8, 2]\nassert     eat(8, 3, 10) == [10, 0]\nassert     eat(9, 3, 8) == [8, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     eat(0, 0, 1) == [0, 1]\nassert     eat(1, 0, 1) == [0, 0]\nassert     eat(1, 1, 1) == [1, 0]\nassert     eat(9, 19, 7) == [7, 6]\nassert     eat(0, 100, 4) == [0, 4]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     eat(1, 3, 4) == [ 3, 3 ]\nassert     eat(1, 5, 1) == [ 5, 1 ]\nassert     eat(5, 2, 6) == [ 8, 4 ]\nassert     eat(1000, 2000, 1000) == [ 1000, 0 ]\nassert     eat(1, 2, 1000) == [ 1, 1000 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eat(100, 1000, 1000) == [1000, 0]\nassert     eat(100, 100, 100) == [100, 100]\nassert     eat(10, 11, 10) == [11, 0]\nassert     eat(0, 0, 0) == [0, 0]\n\n\n\"\"\"\nAnother solutuion\n\"\"\"\ndef eat(number, need, remaining):\n    result = []\n    if number + remaining >= need:\n        result.append(need)\n        remaining -= need\n    else:\n        result.append(number + remaining)\n    return result\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     eat(10, 5, 10) == [ 15, 5 ]\nassert     eat(10, 2, 3) == [ 9, 2 ]\nassert     eat(10, 2, 2) == [ 8, 0 ]\nassert     eat(10, 3, 10) == [ 3, 7 ]\nassert     eat(10, 1, 1) == [ 9, 9 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eat(0, 0, 0)     == [0, 0]\nassert     eat(0, 1, 0)     == [1, 0]\nassert     eat(0, 1, 1)     == [0, 1]\nassert     eat(2, 2, 1)     == [2, 1]\nassert     eat(3, 3, 1)     == [3, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     eat(0, 2, 1) == [ 0, 1 ]\nassert     eat(1, 1, 1) == [ 0, 0 ]\nassert     eat(10, 2, 4) == [ 0, 4 ]\nassert     eat(10, 10, 2) == [ 10, 2 ]\nassert     eat(10, 10, 0) == [ 10, 0 ]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [10,11,5,3,4]) == 17\nassert     do_algebra([\"//\",\"**\"], [10,11]) == 1\nassert     do_algebra([\"+\"], [10]) == 10\nassert     do_algebra([\"+\",\"//\"], [10,11]) == 11\nassert     do_algebra([\"+\",\"//\",\"**\",\"+\"], [10,11,5,3,4]) == 24\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     do_algebra(['+', '-'], [3, 2, 1]) == 1\nassert     do_algebra(['*', '/'], [3, 2, 1]) == 6\nassert     do_algebra(['//', '**'], [3, 2, 1]) == 0\nassert     do_algebra(['/', '**'], [3, 2, 1]) == 0.3333333333333333\nassert     do_algebra(['/', '+'], [3, 2, 1]) == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5]) == -2\nassert     do_algebra(['*', '**'], [1, 2, 3, 4, 5]) == 120\nassert     do_algebra(['*', '//'], [1, 2, 3, 4, 5]) == 40\nassert     do_algebra(['+', '//'], [1, 2, 3, 4, 5]) == 3\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     do_algebra(['+', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==\\\n        [1, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 11, 11, 12, 13, 13]\nassert     do_algebra(['*', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==\\\n        [-1, 0, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert     do_algebra(['//', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==\\\n        [1, 0, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert     do_algebra(['**', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==\\\n        [1, 0, -9, -16, -27, -36, -45, -54, -63, -72, -81, -90, -99, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert     do_algebra(['/', '-'], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==\\\n        [1, 0, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef do_algebra_str(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list is a list of algebra operations \n    in string format, and the second list is a list of integers. Use the two given lists to \n    build the algebric expression and return the evaluation of this expression.\n\n    Basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert do_algebra([\"+\", 1], [2]) == 3, do_algebra([\"+\", 1], [2])\nassert do_algebra([\"-\", 1], [2]) == 1, do_algebra([\"-\", 1], [2])\nassert do_algebra([\"*\", 2], [2, 2]) == 4, do_algebra([\"*\", 2], [2, 2])\nassert do_algebra([\"//\", 2], [2, 2]) == 1, do_algebra([\"//\", 2], [2, 2])\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     do_algebra(['+', '*'], [1, 2, 3, 4]) == 14\nassert     do_algebra(['-', '*'], [1, 2, 3, 4]) == 10\nassert     do_algebra(['*', '**'], [1, 2, 3, 4]) == 24\nassert     do_algebra(['//', '**'], [1, 2, 3, 4]) == 4\nassert     do_algebra(['+', '-'], [1, 2, 3, 4]) == -1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef do_sequencing(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic sequencing operations, \n    and the second list is a list of integers. Use the two given lists to build the \n    sequencing expression and return the evaluation of this expression.\n\n    The basic sequencing operations:\n    Concatenation (. ) \n    Repetition ( * ) \n    Shift left ( << ) \n    Shift right ( >> ) \n    Stepping ( : ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5]) == -1\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 3, 5]) == 2\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 3, 3]) == 6\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 3, 3, 3]) == 12\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 3, 3, 3, 3]) == 18\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve('Hello World')             ==     'World Hello'\nassert     solve('sTEr')                         ==     'Erst'\nassert     solve('louI')                         ==    'ouI'\nassert     solve(' ')                             ==    ' '\nassert     solve('aeiou')                        ==    'uoiea'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(\"hello\") == \"olleh\"\nassert     solve(\"eQaBL\") == \"qabL\"\nassert     solve(\"a\") == \"a\"\nassert     solve(\"Z\") == \"Z\"\nassert     solve(\"\") == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve(\"aBcDeF\") == \"ABCDEFG\"\nassert     solve(\"abcdeF\") == \"ABCDEFG\"\nassert     solve(\"\") == \"\"\nassert     solve(\"hello\") == \"HELLO\"\n\ndef check_solve(s):\n    \"\"\"Check if your solve is correct or not\"\"\"\n    "
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solve('A') == 'a'\nassert     solve('a') == 'a'\nassert     solve('abc') == 'cba'\nassert     solve('C') == 'c'\nassert     solve('c') == 'c'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve('abcdef') == 'ABCDEFG'\nassert     solve('fdfg') == 'fdfg'\nassert     solve('a') == 'a'\nassert     solve('1') == '1'\nassert     solve('1a') == '1a'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve('cab') == 'cBA'\nassert     solve('Cab') == 'cba'\nassert     solve('case') == 'EACS'\nassert     solve('Case') == 'eACS'\nassert     solve('Case 1') == 'eACS 1'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve('Hello World') == 'olleh dlrow'\nassert     solve('ab') == 'ab'\nassert     solve('a') == 'a'\nassert     solve('c') == 'c'\nassert     solve('We') == 'we'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(\"hello\") == \"holle\"\nassert     solve(\"3rse\") == \"erhg\"\nassert     solve(\"a1b2c3d4e5\") == \"a1B2c3D4E5\"\nassert     solve(\"\") == \""
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     'eafed' == solve('eafED')\nassert     'eafed' == solve('eaFED')\nassert     'eafed' == solve('EaFED')\nassert     'eafed' == solve('eafed')\nassert     'EaFED' == solve('eAFED')\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve('hello world') == 'olleh dlrow'\nassert     solve('python java') == 'nohtyP yvnoj eht'\nassert     solve('mind not') == 'nott mdnt'\nassert     solve('a,b,c,d,e,f,g,h,i,j') == 'jihgfedcba'"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_md5(\"hello\") == \"900150983cd24fb0d6963f7d28e17f72\"\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(\"text\") == \"d41d8cd98f00b204e9800998ecf8427e\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"abcd\") == \"9a8b3a6d3a47ed2fbb6a2927290567b0\"\nassert     string_to_md5(\"abcd\") == \"9a8b3a6d3a47ed2fbb6a2927290567b0\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_to_md5('asdf') == md5('asdf').hexdigest()\nassert     string_to_md5('') == None\nassert     string_to_md5('   ') == None\nassert     string_to_md5('a') == None\nassert     string_to_md5('123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') == md5('123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789').hexdigest()"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('a') == 'a5f63d00e154d2e80e4ec054b9fd3a6'\nassert     string_to_md5('a' * 1000000) == 'dba09c7920b8b4f3e6d7e2d6841c0c66'"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_to_md5('Nobody inspects') == '86be3c873f823330721e17bb6be6b8d3'\nassert     string_to_md5(' the quick brown fox jumps over the lazy dog') == '9f37ca16a7760ec5c93ec7e35e701f3d'\nprint 'passed'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_to_md5(\"hello\") == md5(\"hello\").hexdigest()\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(\"helloworld\") == md5(\"helloworld\").hexdigest()\nassert     string_to_md5(\"This is a test string to get an md5 hash\") == md5(\"This is a test string to get an md5 hash\").hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_to_md5('abc') == md5_string('abc')\nassert     string_to_md5('') == None\nassert     string_to_md5('a') == md5_string('a')\nassert     string_to_md5('ab') == md5_string('ab')\nassert     string_to_md5('abc') == md5_string('abc')\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('This is a string.') == '25a8a82d5e2d6d63a3faa051a24ab95a'\nprint 'Test completed"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"A\") == \"a931ca049b98b4f924fdd2a5aad74fbe\"\nassert     string_to_md5(\"This is a test\") == \"18a3d923f7cccb827d3f2f4e140586e7\"\n\ndef build_md5_hash(path_to_file):\n    \"\"\"\n    Given a file path to a file, return its md5 hash string.\n    If path_to_file is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     generate_integers(5, 8) == [2, 4, 6, 8]\nassert     generate_integers(5, 8) == [2, 4, 6, 8]\nassert     generate_integers(0, 8) == [0, 2, 4, 6, 8]\nassert     generate_integers(5, 5) == []\nassert     generate_integers(10, 15) == [12, 14]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     generate_integers(3, 7) == [4, 6]\nassert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(5, 33) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\nassert     generate_integers(7, 99) == [8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         [generate_integers(10, 15)]     ==     [14, 16]\nassert         [generate_integers(21, 25)]     ==     [24, 26]\nassert         [generate_integers(30, 35)]     ==     [34]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     generate_integers(8, 9) == [2, 4, 6, 8]\nassert     generate_integers(3, 7) == [4, 6, 8]\nassert     generate_integers(3, 6) == [4, 6]\nassert     generate_integers(0, 5) == [2, 4, 6]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert     generate_integers(20, 1) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert     generate_integers(10, 100) == [12, 14, 16, 18]\nassert     generate_integers(100, 10) == [12, 14, 16, 18]"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     generate_integers(1, 10)     == [2, 4, 6, 8]\nassert     generate_integers(2, 15)     == [2, 4, 6, 8, 10, 12]\nassert     generate_integers(10, 100)    == [20, 22, 24, 26, 28, 30, 32, 34, 36, 38]\n\ndef generate_letters(a, b):\n    \"\"\"\n    Given two lowercase letters a and b, return the lowercase letters between a\n    and b, in ascending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(2, 22) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\nassert     generate_integers(22, 100) == [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n\ndef generate_strings(length):\n    \"\"\"\n    Given an integer length, return the strings of lowercase letters that are\n    repeated until the length of the string is equal to the integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     generate_integers(0, 2) == [0, 2]\nassert     generate_integers(3, 4) == [2, 4]\nassert     generate_integers(0, 10) == [0, 2, 4, 6, 8]\nassert     generate_integers(5, 8) == [6, 8]\nassert     generate_integers(10, 12) == [10, 12]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(10, 100) == [20, 22, 24, 26, 28, 30, 32, 34, 36, 38]"
    }
]