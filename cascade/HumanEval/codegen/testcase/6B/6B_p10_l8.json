[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.1) == True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.01) == True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.001) == True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.00001) == True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.0001) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) is False\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 1.0) is True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) is False\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) is False\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 0.5) is False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3], 0.001)\nassert not has_close_elements([1, 2, 3], 0.01)\nassert not has_close_elements([1, 2, 3], 0.99)\nassert has_close_elements([1, 2, 3], 0.2)\nassert not has_close_elements([1, 2, 3], 1)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0, 4.0], 2.5) == False\nassert has_close_elements([1.0, 2.0, 3.0, 4.0], 1.0) == True\nassert has_close_elements([1.0, 2.0, 3.0, 4.0], 0.5) == False\nassert has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 2.5) == True\nassert has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 1.0) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     has_close_elements([1, 1, 1, 1, 1], 0.1) == True\nassert     has_close_elements([1, 1, 1, 1, 1], 0.5) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.5) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.3) == False\nassert     has_close_elements([-2, -1, 0, 0.5, 1], 0.5) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     has_close_elements([0.0, 2.0, 3.0, 4.0], 1.0)\nassert     not has_close_elements([0.0, 2.0, 3.0, 4.0], 0.5)\nassert     has_close_elements([0.0, 1.0, 2.0, 3.0], 1.0)\nassert     not has_close_elements([0.0, 1.0, 2.0, 3.0], 2.0)\nassert     has_close_elements([0.0, 1.0, 2.0, 3.0], 3.0)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     has_close_elements([0.1, 0.1], 0.5) == True\nassert     has_close_elements([0.1, 0.1], 0.1) == False\nassert     has_close_elements([-0.1, -0.1], 0.1) == False\nassert     has_close_elements([-0.1, -0.1], -0.1) == True\nassert     has_close_elements([0.1, 0.1, 0.1], 0.1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     has_close_elements([3.0, 2.0, 5.0, 8.0, 4.0, 1.0, 5.0, 6.0, 3.0, 2.0, 3.0], 5.0)\nassert     not has_close_elements([3.0, 2.0, 5.0, 8.0, 4.0, 1.0, 5.0, 6.0, 3.0, 2.0, 3.0], 3.0)\nassert     has_close_elements([1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 1.0)\nassert     has_close_elements([0.0, 1.0, 1.0, 1.0, 1.0, 1.0], 0.2)\nassert     has_close_elements([0.0, 1.0, 1.0, 1.0, 1.0, 1.0], 0.1)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     has_close_elements([1, 2, 3], 1) == False\nassert     has_close_elements([1, 2, 3], 2) == True\nassert     has_close_elements([1, 2, 3], 3) == False\nassert     has_close_elements([1, 2, 3], 0.1) == True\nassert     has_close_elements([1, 2, 3], 4) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     has_close_elements([0.1, 1.2, 3.4, 5.6], 0.8) == True\nassert     has_close_elements([0.1, 1.2, 3.4, 5.6], 0.9) == True\nassert     has_close_elements([0.1, 1.2, 3.4, 5.6], 1.0) == False\nassert     has_close_elements([0.1, 1.2, 3.4, 5.6], 1.1) == False\nassert     has_close_elements([0.1, 1.2, 3.4, 5.6], 2.0) == False\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"a(b(c)d)e(f(g)h)i)j\") == [\"a(b(c))d\", \"e(f(g)h)i)\", \"j\"]\nassert     separate_paren_groups(\"a(b(c)d)e(f(g))\") == [\"a(b(c)d)\", \"e(f(g))\"]\nassert     separate_paren_groups(\"a(b(c(d)e))\") == [\"a(b(c(d)e))\"]\nassert     separate_paren_groups(\"a(b(c)d)e(f(g)h)i)j\") == [\"a(b(c)d)\", \"e(f(g)h)\", \"i)j\"]\nassert     separate_paren_groups(\"a(b(c(d)e)f)g)h)i)j\") == [\"a(b(c(d)e)f)\", \"g)h)\", \"i)j\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"(())()\") == [\"()\", \"()\", \"()\"]\nassert separate_paren_groups(\"((())\") == [\"(())\"]\nassert separate_paren_groups(\"(())(())(\") == [\"((()))\", \"(())(\", \"(())\"]\nassert separate_paren_groups(\"(()())(()\") == [\"((()))\", \"(())(\", \"(())\"]\nassert separate_paren_groups(\"((()))\") == [\"((()))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"()()()\") == [\"()\",\"()\",\"()\"]\nassert     separate_paren_groups(\"()()()(()())\") == [\"((()))\",\"()\",\"()(())\"]\nassert     separate_paren_groups(\"((()))(())(())()\") == [\"((()))\",\"()((()))\",\"()\",\"()()(())\"]\nassert     separate_paren_groups(\"()(()(()))\") == [\"()\",\"((()))\",\"()(())\"]\nassert     separate_paren_groups(\"()((()))\") == [\"()\",\"((()))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"foo (bar) baz\") ==     [\"foo\", \"bar\", \"baz\"]\nassert     separate_paren_groups(\"foo (bar )baz\") ==     [\"foo\", \"bar\", \"baz\"]\nassert     separate_paren_groups(\"foo (bar) baz (bim)\") ==     [\"foo\", \"bar\", \"baz\", \"bim\"]\nassert     separate_paren_groups(\"foo(bar)baz(bim)\") ==     [\"foo\", \"bar\", \"baz\", \"bim\"]\nassert     separate_paren_groups(\"foo(bar )baz(bim)\") ==     [\"foo\", \"bar\", \"baz\", \"bim\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(a(b(c)d)\") == [\"(a(b(c)d)\"]\nassert     separate_paren_groups(\"a(b(c)d)e\") == [\"a(b(c)d)e\"]\nassert     separate_paren_groups(\"a(b(c)d)e\") == [\"a(b(c)d)e\"]\nassert     separate_paren_groups(\"a(b(c)d)e)\") == [\"a(b(c)d)e)\"]\nassert     separate_paren_groups(\"a(b(c)d)e)f)\") == [\"a(b(c)d)e)f)\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"a(b(c)d)e(f)g\") == ['a(b(c)d)e', 'f']\nassert     separate_paren_groups(\"(a(b(c)d)e)f\") == ['(a(b(c)d)e)', 'f']\nassert     separate_paren_groups(\"abc(a(b(c)d)e)f\") == ['abc(a(b(c)d)e)', 'f']\nassert     separate_paren_groups(\"abc(a(b(c(d)e)f)g)h\") == ['abc(a(b(c(d)e)f)g)h', '']\nassert     separate_paren_groups(\"(a(b(c(d)e)f)g)\") == ['(a(b(c(d)e)f)g)', '']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"(()(())\") ==     [\"(()())\", \"(())\"]\nassert     separate_paren_groups(\"((a))(b))\") ==     [\"((a))\", \"(b))\"]\nassert     separate_paren_groups(\"(()(()()()()(()()))(()(()))())\") == [\"(()()())()(()())\", \"(()()()())\"]\nassert     separate_paren_groups(\"  (a )(b))\") ==     [\"(a )(b))\", \"(  )()()\"]\nassert     separate_paren_groups(\"(  (a )(b))  \") == [\"(  (a )(b))\", \"(  )()()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('((()))') == [\"()\", \"(())\"]\nassert     separate_paren_groups('(())()') == [\"()\", \"(())\"]\nassert     separate_paren_groups('((())') == [\"((()))\"]\nassert     separate_paren_groups('())') == [\"()\"]\nassert     separate_paren_groups(')()()') == [\"()\", \"()\", \"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"(()(()())(()))\") == [\"((()))\", \"(()())\", \"(())\"]\nassert     separate_paren_groups(\"(()(()())(()))\") == [\"((()))\", \"(()())\", \"(())\"]\nassert     separate_paren_groups(\"(()()(()())(())\") == [\"((()()))\", \"(()())\", \"(()())\", \"(())\"]\nassert     separate_paren_groups(\"(()()(()()(()))\") == [\"((()()()))\", \"(()())\", \"(()()())\", \"(()())\"]\nassert     separate_paren_groups(\"(()(()()(()))\") == [\"((()()()))\", \"(()())\", \"(()())\", \"(())\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"(a(b)c)(d)\")     == [\"a(b)\", \"c)\", \"d\"]\nassert     separate_paren_groups(\"(a )( b) (c)\")     == [\"a \", \" b) \", \"c\"]\nassert     separate_paren_groups(\"(a ) ( b) ( c)\")     == [\"a \", \" b) \", \" c\"]\nassert     separate_paren_groups(\"()\")                 == [\"\"]\nassert     separate_paren_groups(\"abc (d) ef (g)\")     == [\"abc \", \" d) \", \" ef \", \" g]\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     truncate_number(0.9) == 0.9\nassert     truncate_number(0.99) == 0.99\nassert     truncate_number(1.1) == 1.0\nassert     truncate_number(1.99) == 1.0\nassert     truncate_number(2.99) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     truncate_number(2.1) == 0.1\nassert     truncate_number(3.2) == 1\nassert     truncate_number(5.3) == 3\nassert     truncate_number(10.4) == 5\nassert     truncate_number(100.6) == 10\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     truncate_number(1.23) == 0.0\nassert     truncate_number(1.24) == 0.01\nassert     truncate_number(1.25) == 0.02\nassert     truncate_number(1.26) == 0.03\nassert     truncate_number(1.27) == 0.04\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     truncate_number(12.5) == 0\nassert     truncate_number(12.0) == 0\nassert     truncate_number(11.0) == 0\nassert     truncate_number(5.0) == 1\nassert     truncate_number(25.0) == 2\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     truncate_number(3.14159) == 0.0\nassert     truncate_number(3.14159265) == 0.0\nassert     truncate_number(0.11) == 0.0\nassert     truncate_number(3.141592653) == 0.0\nassert     truncate_number(0.11) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     truncate_number(5.43) == 5.43\nassert     truncate_number(5.4345) == 5.4345\nassert     truncate_number(5.4356) == 5.4356\nassert     truncate_number(5.4345) == 5.4345\nassert     truncate_number(5.4356) == 5.4356\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     truncate_number(1.0) == 1.0\nassert     truncate_number(1.5) == 1.0\nassert     truncate_number(1.1) == 1.0\nassert     truncate_number(1.6) == 1.0\nassert     truncate_number(1.5) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     truncate_number(0.456) == 0.45\nassert     truncate_number(0.45) == 0.45\nassert     truncate_number(0.4500) == 0.45\nassert     truncate_number(0.4501) == 0.46\n\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     truncate_number(10.0)         == 0.0\nassert     truncate_number(10.2)         == 0.2\nassert     truncate_number(10.19)     == 0.19\nassert     truncate_number(10.123456) == 0.123\nassert     truncate_number(10.1234567) == 0.12345\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     truncate_number(3.14) ==     3.14\nassert     truncate_number(3.1415) ==     3.14\nassert     truncate_number(3.141526) ==     3.14\nassert     truncate_number(3.141527) ==     3.14\nassert     truncate_number(3.14159) ==     3.14\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_zero([1,1]) == False\nassert     below_zero([1,2,3]) == False\nassert     below_zero([1,2,-3]) == True\nassert     below_zero([0,1,2,3]) == False\nassert     below_zero([1,2,-3,-4,5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_zero([2, 3, 2, 3, 1]) == True, \"1st Example: below_zero([2, 3, 2, 3, 1]) == True\"\nassert     below_zero([1, 1, 1]) == False, \"1st Example: below_zero([1, 1, 1]) == False\"\nassert     below_zero([1, 2, 3, 4, 5]) == False, \"1st Example: below_zero([1, 2, 3, 4, 5]) == False\"\nassert     below_zero([5, 5, 5, 5]) == False, \"1st Example: below_zero([5, 5, 5, 5]) == False\"\nassert     below_zero([5, 5, 5, 5, 5]) == True, \"1st Example: below_zero([5, 5, 5, 5, 5]) == True\"\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_zero(    [1, 1, 1, 1]) == False\nassert     below_zero(    [1, 1, 1, -1]) == True\nassert     below_zero(    [1, 1, -1, 1]) == True\nassert     below_zero(    [1, 1, -1, -1]) == False\nassert     below_zero(    [1, -1, 1, 1]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_zero([1,1,1,1,1]) == True\nassert     below_zero([1,1,1,1,0]) == True\nassert     below_zero([1,1,1,0,1]) == True\nassert     below_zero([1,1,1,0,1,1]) == False\nassert     below_zero([1,1,1,1,1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_zero([1, 1, 1]) == True\nassert     below_zero([2, 2, 1]) == False\nassert     below_zero([3, 3, 2]) == False\nassert     below_zero([1, 2, 3]) == False\nassert     below_zero([2, 2, 2]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     below_zero([1,2,3,1]) == False\nassert     below_zero([3,2,3,1]) == False\nassert     below_zero([1,2,3,4]) == False\nassert     below_zero([1,2,3,4,5]) == False\nassert     below_zero([1,2,-3,4,5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == True, \"The result is False\"\nassert     below_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == True, \"The result is False\"\nassert     below_zero([-1, 1, 1, -1, 1, 1, -1, 1, -1, 1]) == False, \"The result is False\"\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_zero([-1,0,0,1]) == False\nassert     below_zero([-1,0,1,1]) == True\nassert     below_zero([-1,0,1,2]) == False\nassert     below_zero([1,0,1,2]) == True\nassert     below_zero([1,0,1,1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     below_zero(operations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == False\nassert     below_zero(operations = [1, 2, 3, 4, 5, 6, -7, -8, -9, 0]) == True\nassert     below_zero(operations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == False\nassert     below_zero(operations = [1, 2, 3, 4, 5, 6, 7, -8, -9, 0]) == True\nassert     below_zero(operations = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]) == False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1,1,2,3,4,5,6,7,8,9]) == 3\nassert     mean_absolute_deviation([2,3,4,5,6,7,8,9,10,11]) == 6.5\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10]) == 5.5\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9]) == 4.5\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10]) == 4.75\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     0.330000 == mean_absolute_deviation([-1, 0, 0.5, 1])\nassert     0.20000 == mean_absolute_deviation([-1, 0, 0.5, 1])\nassert     0.25000 == mean_absolute_deviation([-1, 0, 1, 1])\nassert     0.000000 == mean_absolute_deviation([-1, 0, 1, 1])\nassert     0.25000 == mean_absolute_deviation([-1, 0, 0.5, 1])\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1.25\nassert     mean_absolute_deviation([3, 2, 1, 4]) == 1.75\nassert     mean_absolute_deviation([-1, -2, -3, -4]) == -1.25\nassert     mean_absolute_deviation([-3, -2, -1, -4]) == -1.75\nassert     mean_absolute_deviation([-3, -3, -3, -3]) == -3\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([-1.23, -1.1, -0.05, 0, 0.1, 0.2, 0.4]) == 0.18\nassert     mean_absolute_deviation([-1.23, -1.1, -0.05, 0, 0.1, 0.2, 0.4, 0.8]) == 0.12\nassert     mean_absolute_deviation([-1.23, -1.1, -0.05, 0, 0.1, 0.2, 0.4, 0.8, 1.1, 1.2, 1.3, 1.6]) == 0.12\nassert     mean_absolute_deviation([-1.23, -1.1, -0.05, 0, 0.1, 0.2, 0.4, 0.8, 1.1, 1.2, 1.3, 1.6, 2.1, 2.2, 2.3, 2.4, 2.5]) == 0.12\nassert     mean_absolute_deviation([-1.23, -1.1, -0.05, 0, 0.1, 0.2, 0.4, 0.8, 1.1, 1.2, 1.3, 1.6, 2.1, 2.2, 2.3, 2.4, 2.5, 2.9]) == 0.12\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([2, 3, 4, 5, 6]) == 1\nassert     mean_absolute_deviation([1, 3, 4, 5, 7, 9]) == 1\nassert     mean_absolute_deviation([-1, -3, -4, -5, -6]) == 1\nassert     mean_absolute_deviation([-2, -3, -4, -5, -6]) == 1\nassert     mean_absolute_deviation([0.5, 1.5, 2.5, 3.5, 4.5]) == 1\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([1,2,3]) == 1\nassert     mean_absolute_deviation([2.5, 3.5, 2.5]) == 1\nassert     mean_absolute_deviation([-1, -2, -3]) == 3\nassert     mean_absolute_deviation([1, 0, -1]) == 2\nassert     mean_absolute_deviation([-2, 0, 2]) == 2\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     abs(mean_absolute_deviation([-1.0, 2.0, 3.0]) - 1.5) < 0.000001\nassert     abs(mean_absolute_deviation([1.0, -2.0, 3.0]) - 0.5) < 0.000001\nassert     abs(mean_absolute_deviation([1.0, 0.0, 3.0]) - 1.0) < 0.000001\nassert     abs(mean_absolute_deviation([1.0, 2.0, -3.0]) - 2.0) < 0.000001\nassert     abs(mean_absolute_deviation([-1.0, -2.0, -3.0]) - 3.0) < 0.000001\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         mean_absolute_deviation([]) == 0\nassert     mean_absolute_deviation([-5, -3, -1, 3, 5]) == 2.9\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 3.166666666666668\nassert     mean_absolute_deviation([-3, -4, -5, -6, -7, -8, -9, -10]) == 1.40\nassert     mean_absolute_deviation([-5, -3, -1, 3, 5, 7, 8, 9, 10]) == 4.92\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         abs(mean_absolute_deviation([1, 2, 3, 4]) - 1.5) < 0.001\nassert         abs(mean_absolute_deviation([-2, -4, 0]) - 0) < 0.001\nassert         abs(mean_absolute_deviation([-2, -4, -6, -8]) - 4) < 0.001\nassert         abs(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) - 2.0) < 0.001\nassert         abs(mean_absolute_deviation([1.0, 1.0, 1.0]) - 0.0) < 0.001\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.3\nassert     mean_absolute_deviation([5, 6, 7, 8, 9, 10]) == 4.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 5\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersperse([1, 2, 3], 1) == [1, 1, 2, 3, 3]\nassert     intersperse([1, 2, 3], 2) == [1, 2, 2, 3, 3]\nassert     intersperse([1, 2, 3], 4) == [1, 4, 4, 2, 3]\nassert     intersperse([1, 2, 3], 0) == [1, 2, 3]\n\n\ndef count_occurence(numbers: List[int], target: int) -> int:\n    \"\"\" Count how many times the target is occuring in the input list `numbers'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersperse([1, 2, 3, 4], 1) == [1, 1, 2, 3, 4, 4]\nassert     intersperse([1, 2, 3, 4], 2) == [1, 1, 2, 2, 3, 3, 4, 4]\nassert     intersperse([1, 2, 3, 4], 5) == [1, 1, 2, 2, 3, 3, 4, 4]\nassert     intersperse([1, 2, 3, 4], 100) == [1, 1, 2, 2, 3, 3, 4, 4]\n\n\ndef make_dense(numbers: List[int], factor: int) -> List[int]:\n    \"\"\" Repeat each number in list `numbers' by given factor `factor'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3, 4]\nassert     intersperse([1, 2, 3, 4], 4) == [1, 4, 2, 4, 3, 4, 4, 4]\nassert     intersperse([1, 2, 3, 4, 5], 4) == [1, 4, 2, 4, 3, 4, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5, 6], 4) == [1, 4, 2, 4, 3, 4, 4, 5, 6]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7], 4) == [1, 4, 2, 4, 3, 4, 4, 5, 6, 7]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersperse([1, 2, 3], 1) == [1, 1, 2, 3]\nassert     intersperse([1, 2, 3], 2) == [1, 2, 2, 3]\nassert     intersperse([1, 2, 3], 3) == [1, 2, 3, 3]\nassert     intersperse([1, 2, 3], 4) == [1, 2, 3, 4]\nassert     intersperse([1, 2, 3], 5) == [1, 2, 3, 5, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersperse([1,2,3,4],2) == [1,2,delimeter,3,delimeter,4]\nassert     intersperse([1,2,3,4],3) == [1,2,3,delimeter,delimeter,4]\nassert     intersperse([1,2,3,4],5) == [1,2,3,4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         [1, 2, 4, 6, 8, 10, 12, 14, 16] == intersperse([1, 2, 3, 4, 5, 6, 7, 8], 4)\nassert         [1, 2, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6] == intersperse([1, 2, 3, 4, 5, 6, 7, 8], 3)\nassert         [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6] == intersperse([1, 2, 3, 4, 5, 6, 7, 8], 2)\nassert         [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6] == intersperse([1, 2, 3, 4, 5, 6, 7, 8], 1)\nassert         [1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4] == intersperse([1, 2, 3, 4, 5, 6, 7, 8], 0)\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersperse(range(1, 5), 2) == [1, 2, 2, 3, 4, 4, 4]\nassert     intersperse(range(1, 6), 2) == [1, 2, 2, 3, 4, 5, 5]\nassert     intersperse(range(1, 6), 3) == [1, 3, 3, 4, 5, 6, 6, 6]\nassert     intersperse(range(1, 6), 1) == [1, 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 1) == [1, delimeter, 2, delimeter, 3, delimeter, 4, delimeter, 5]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [1, delimeter, 2, delimeter, 3, delimeter, 4, delimeter, 5, delimeter]\nassert     intersperse([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 7) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersperse([1,2,3], 0) == [0,1,0,2,0,3]\nassert     intersperse([1,2,3], 5) == [0,1,0,2,0,3]\nassert     intersperse([1,2,3], -1) == [0,1,0,2,0,3]\nassert     intersperse([1,2,3], 4) == [0,1,0,2,0,3]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersperse([1,2,3,4],2) == [1,2,3,4,2]\nassert     intersperse([1,2,3,4],0) == [1,2,3,4]\nassert     intersperse([1,2,3,4],1) == [1,2,3,4]\nassert     intersperse([1,2,3,4],5) == [1,2,3,4]\nassert     intersperse([1,2,3,4],6) == [1,2,3,4]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"(()())\") == [0, 0, 0]\nassert     parse_nested_parens(\"((()))\") == [1, 1, 1]\nassert     parse_nested_parens(\"((()))()\") == [2, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"((()))\") == [1, 1]\nassert     parse_nested_parens(\"(()\") == [0, 1]\nassert     parse_nested_parens(\"(())(())\") == [1, 2]\nassert     parse_nested_parens(\"(((())))\") == [2, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(()())\") == [0, 0, 0, 1, 1, 1, 0]\nassert     parse_nested_parens(\"(())\") == [0, 0, 0, 0, 1, 1]\nassert     parse_nested_parens(\"((()))\") == [0, 0, 0, 0, 0, 0, 1, 1, 1]\nassert     parse_nested_parens(\"(()(()))\") == [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]\nassert     parse_nested_parens(\"(()())(())\") == [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"(())\") == [0, 0]\nassert     parse_nested_parens(\"(()(()))\") == [2, 1, 0]\nassert     parse_nested_parens(\"(()(()())())\") == [4, 3, 2, 1, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_nested_parens('(())') == [0, 0]\nassert     parse_nested_parens('(()(()()))') == [3, 0]\nassert     parse_nested_parens('((((((())))))') == [4, 3]\nassert     parse_nested_parens('((()())(()(()()))())') == [6, 5, 4, 3]\nassert     parse_nested_parens('(((()(()())))') == [4, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"((()))\") == [2]\nassert     parse_nested_parens(\"(()(()))\") == [3]\nassert     parse_nested_parens(\"(()(()))(())\") == [5]\nassert     parse_nested_parens(\"(()(()))((()))\") == [6]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_nested_parens('(())') == [0, 0]\nassert     parse_nested_parens('(()())') == [0, 1, 0]\nassert     parse_nested_parens('((())())') == [1, 1, 2, 0]\nassert     parse_nested_parens('(()(()()))') == [1, 2, 3, 4]\nassert     parse_nested_parens('(()()(()))') == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"(()())\") == [0, 1, 0]\nassert     parse_nested_parens(\"((()))\") == [1, 1, 1]\nassert     parse_nested_parens(\"(()(()))\") == [1, 1, 2, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"(())\") == [0, 0]\nassert     parse_nested_parens(\"((()))\") == [1, 1]\nassert     parse_nested_parens(\"((()()))\") == [1, 2]\nassert     parse_nested_parens(\"((()))()\") == [1, 2]\nassert     parse_nested_parens(\"((()())(())()())\") == [5, 6]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"(())\") == [1, 1]\nassert     parse_nested_parens(\"()()\") == [0, 1, 1]\nassert     parse_nested_parens(\"((()))\") == [3, 1, 1]\nassert     parse_nested_parens(\"(())(())()\") == [4, 3, 1, 1, 1, 1]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     'apple'    == filter_by_substring(['apple', 'banana', 'orange'], 'a')\nassert     []    == filter_by_substring(['apple', 'banana', 'orange'], 'z')\nassert     ['apple', 'banana'] == filter_by_substring(['apple', 'banana', 'orange'], 'a')\nassert     ['banana', 'orange'] == filter_by_substring(['apple', 'banana', 'orange'], 'z')\nassert     ['apple', 'banana', 'orange'] == filter_by_substring(['apple', 'banana', 'orange'], 'o')\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_substring(['abc', 'a', 'b'], 'a') == ['abc', 'a']\nassert     filter_by_substring(['abc', 'a', 'b'], 'b') == ['a', 'b']\nassert     filter_by_substring(['abc', 'a', 'b'], 'c') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"flower\", \"dog\", \"cat\", \"cow\", \"ant\"], \"f\") == [\"flower\"]\nassert     filter_by_substring([\"dog\", \"cat\", \"cow\", \"ant\"], \"f\") == []\nassert     filter_by_substring([\"dog\", \"cat\", \"cow\", \"ant\"], \"c\") == [\"cow\", \"ant\"]\nassert     filter_by_substring([\"dog\", \"cat\", \"cow\", \"ant\"], \"d\") == [\"dog\", \"cat\"]\nassert     filter_by_substring([\"dog\", \"cat\", \"cow\", \"ant\"], \"l\") == [\"cow\", \"ant\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"12\", \"14\", \"15\", \"19\", \"20\", \"21\"], \"2\") == [\"12\", \"14\", \"19\", \"20\", \"21\"]\nassert     filter_by_substring([\"12\", \"14\", \"15\", \"19\", \"20\", \"21\"], \"11\") == [\"12\", \"14\", \"15\", \"19\", \"20\", \"21\"]\nassert     filter_by_substring([\"12\", \"14\", \"15\", \"19\", \"20\", \"21\"], \"25\") == [\"12\", \"14\", \"15\", \"19\", \"20\", \"21\"]\nassert     filter_by_substring([\"12\", \"14\", \"15\", \"19\", \"20\", \"21\"], \"03\") == [\"12\", \"14\", \"15\", \"19\", \"20\", \"21\"]\n\ndef filter_by_multiplier(strings: List[str], multiplier: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have the given multiplier\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_by_substring(['this', 'is', 'a', 'test'], 'a') == ['this', 'is', 'a', 'test']\nassert     filter_by_substring(['this', 'is', 'a', 'test'], 'is') == ['this', 'a', 'test']\nassert     filter_by_substring(['this', 'is', 'a', 'test'], 'xyz') == []\nassert     filter_by_substring(['this', 'is', 'a', 'test'], 't') == ['this', 'is', 'a', 'test']\nassert     filter_by_substring(['this', 'is', 'a', 'test'],'st') == ['this']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_substring(['a', 'b', 'c'], 'c') == ['c']\nassert     filter_by_substring(['a', 'b', 'c'], 'b') == ['b']\nassert     filter_by_substring(['a', 'b', 'c'], 'zz') == []\n\ndef filter_by_duplicate(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have duplicate characters\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\") == [\"a\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"b\") == [\"b\", \"d\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"c\") == [\"c\", \"d\", \"e\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"d\") == [\"d\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"e\") == [\"e\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_substring(['abcd', 'abce', 'abce', 'abce'], 'abce') == ['abce', 'abce', 'abce']\nassert filter_by_substring(['abcd', 'abce', 'abce', 'abce'], 'ab') == ['abcd', 'abce']\nassert     filter_by_substring(['abcd', 'abce', 'abce', 'abce'], 'abcd') == ['abcd', 'abcd', 'abcd']\nassert     filter_by_substring(['abcd', 'abce', 'abce', 'abce'], 'abcd123') == ['abcd', 'abcd', 'abcd']\nassert     filter_by_substring(['abcd', 'abce', 'abce', 'abce'], 'abcd12345') == ['abcd', 'abcd', 'abcd']\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1,2,3]) == (6, 6)\nassert     sum_product([-1, 1, 2, 3, 4, -5, 6]) == (-12, 120)\nassert     sum_product([-1, 1, -2, 3, 4, -5, 6]) == (-8, -120)\nassert     sum_product([-1, 1, -2, 3, -4, -5, 6]) == (4, -24)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (0, 1) == sum_product([])\nassert     (0, 10) == sum_product([1])\nassert     (0, 100) == sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     (0, 100) == sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     (0, 50) == sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_product([2, 4, 6, 8]) == (14, 48)\nassert     sum_product([3, 6, 9]) == (0, 36)\nassert     sum_product([1, 0, 0, 0]) == (0, 1)\nassert     sum_product([0, 0, 0, 0]) == (0, 1)\nassert     sum_product([]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([-1, -2, -3]) == (-6, -6)\nassert     sum_product([0, 0, 0]) == (0, 1)\nassert     sum_product([1, 1, 1]) == (3, 3)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([0, 0]) == (0, 1)\nassert     sum_product([1, 2, 3, -4]) == (3, -24)\nassert     sum_product([10]) == (10, 10)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (55, 840)"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (0, 1)     == sum_product([])\nassert     (0, 8)     == sum_product([1])\nassert     (5, 10)     == sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 1, 1, 1, 1]) == (20, 120)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == (235, 4480)\nassert     sum_product([-1, -2, -3, -4, -5]) == (0, -120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([2, 3]) == (5, 6)\nassert     sum_product([-3, -2, -1, 0, 1, 2, 3]) == (-18, -6)\nassert     sum_product([-1, 0, 1, 2, 3, 4]) == (-14, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([-1, -2, -3]) == (-6, -6)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rolling_max([1,2,3,4,5]) == [2,3,4,5,5]\nassert     rolling_max([1,2,3,4,5,4]) == [2,3,4,4,5,4]\nassert     rolling_max([1,2,3,4,5,6]) == [2,3,4,5,6,6]\nassert     rolling_max([1,2,3,4,5,6,7]) == [2,3,4,5,6,7,7]\nassert     rolling_max([-1,2,3,4,5]) == [2,3,4,5,5]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rolling_max([2, 3, 4, 1, 5, 2]) == [2, 4, 6, 5, 6, 6]\nassert     rolling_max([3, 4, 1, 5, 2]) == [3, 4, 4, 5, 4, 5]\nassert     rolling_max([4, 5, 4, 3, 2, 4, 4, 1]) == [4, 4, 4, 4, 5, 4, 5, 5]\nassert     rolling_max([1, 3, 5, 7, 9, 2, 4, 6, 8, 10, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == [1, 3, 5, 7, 9, 2, 4, 6, 8, 9, 9, 9, 10, 10, 10, 10]\n\n\ndef min_heap(array: List[int]) -> Tuple[List[int], int]:\n    \"\"\" Create a min-heap out of an array and return the root of the heap.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]\nassert     rolling_max([5,4,3,2,1]) == [5,4,3,2,1]\nassert     rolling_max([5,5,5,5,5]) == [5,5,5,5,5]\nassert     rolling_max([-5,-4,-3,-2,-1]) == [-5,-4,-3,-2,-1]\nassert     rolling_max([-5,-5,-5,-5,-5]) == [-5,-5,-5,-5,-5]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rolling_max([5, 10, 3, 7, 4, 11, 3, 6, 7, 2, 8, 7, 6, 4, 6, 1, 11, 2]) \\\n        == [5, 10, 10, 7, 7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\nassert     rolling_max([5, 10, 3, 7, 4, 11, 3, 6, 7, 2, 8, 7, 6, 4, 6, 1, 11, 2, 10]) \\\n        == [5, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\nassert     rolling_max([5, 10, 3, 7, 4, 11, 3, 6, 7, 2, 8, 7, 6, 4, 6, 1, 11, 2, 10, 7]) \\\n        == [5, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\nassert     rolling_max([5, 10, 3, 7, 4, 11, 3, 6, 7, 2, 8, 7, 6, 4, 6, 1, 11, 2, 10, 7, 8]) \\\n        == [5, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\nassert     rolling_max([5, 10, 3, 7, 4, 11, 3, 6, 7, 2, 8, 7, 6, 4, 6, 1, 11, 2, 10, 7, 8, 9]) \\\n        == [5, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [3,4,1,2,3] == rolling_max([4,3,1,2,3])\nassert     [3,4,1,2,3] == rolling_max([3,4,1,2,3])\nassert     [4,3,1,2,3] == rolling_max([4,3,1,2,3,5])\nassert     [3,4,1,2,3,5] == rolling_max([3,4,1,2,3,5,10])\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rolling_max([2, 3, 4, 5, 6, 7]) == [5, 6, 7, 6, 7, 5]\nassert     rolling_max([2, 3, 4, 5, 6, 7, 0]) == [5, 6, 7, 7, 6, 7, 5]\nassert     rolling_max([2, 3, 4, 5, 6, 7, 0, 1]) == [5, 6, 7, 7, 6, 7, 5, 7]\nassert     rolling_max([2, 3, 4, 5, 6, 7, 0, 1, 8]) == [5, 6, 7, 7, 6, 7, 5, 7, 8]\nassert     rolling_max([2, 3, 4, 5, 6, 7, 0, 1, 8, 9]) == [5, 6, 7, 7, 6, 7, 5, 7, 8, 9]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 5, 2, 3, 4, 2, 3, 6])    == [1, 5, 6, 6, 6, 6, 6]\nassert     rolling_max([1, 2, 5, 3, 4, 2, 3, 6])     == [1, 2, 5, 6, 6, 6, 6]\nassert     rolling_max([1, 2, 5, 3, 4, 2, 3, 6, 1])     == [1, 2, 5, 3, 4, 2, 3, 6, 6]\nassert     rolling_max([])                                         == []\nassert     rolling_max([0])                                        == [0]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1,2]) == [2]\nassert     rolling_max([1,2,3]) == [3]\nassert     rolling_max([1,2,3,4]) == [4]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_palindrome(\"ab\") == \"ba\"\nassert     make_palindrome(\"abcd\") == \"dcbabdc\"\nassert     make_palindrome(\"12345\") == \"12345\"\nassert     make_palindrome(\"1234567\") == \"1234567\"\nassert     make_palindrome(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome('abcba')\nassert     is_palindrome('abcda')\nassert     is_palindrome('cba')\nassert     is_palindrome('cbcb')\nassert     is_palindrome('cbbc')\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     make_palindrome('a') == 'aa'\nassert     make_palindrome('ar') == 'ara'\nassert     make_palindrome('ba') == 'baa'\nassert     make_palindrome('arab') == 'araab'\nassert     make_palindrome('aabc') == 'aabcba'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_palindrome(\"ap\") == \"app\"\nassert     make_palindrome(\"apapa\") == \"appapa\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"abcdefg\") == \"abcdefgabcd\"\nassert     make_palindrome(\"a\" * 10) == \"aaaaaaaaaaaaaaaaaaaaa\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_palindrome(\"abcd\") == \"dcbaabcd\"\nassert     make_palindrome(\"ab\") == \"ba\"\nassert     make_palindrome(\"c\") == \"c\"\nassert     make_palindrome(\"\") == \"\"\nassert     make_palindrome(\"abcdcba\") == \"abcdcbacba\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_palindrome('abab') == 'ababa'\nassert     make_palindrome('a') == 'a'\nassert     make_palindrome('aa') == 'aa'\nassert     make_palindrome('abc') == 'abcba'\nassert     make_palindrome('ab') == 'ab'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_palindrome('aba') == 'abaa'\nassert     make_palindrome('a') == 'a'\nassert     make_palindrome('aab') == 'aabaa'\nassert     make_palindrome('ab') == 'ab'\nassert     make_palindrome('abac') == 'abacab'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_palindrome('aba')\nassert     is_palindrome('abcba')\nassert     is_palindrome('baa')\nassert     is_palindrome('abbaa')\nassert     is_palindrome('abab')\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_palindrome('noon') == 'noonnoon'\nassert     make_palindrome('car') == 'racecar'\nassert     make_palindrome('tacocat') == 'tacocatactca'\nassert     make_palindrome('recreational') =='recreationallyreckar'\nassert     make_palindrome('tattoo') == 'tattooatttoo'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_palindrome(\"level\") == \"levelll\"\nassert     make_palindrome(\"racecar\") == \"racecarracecar\"\nassert     make_palindrome(\"level\") == \"levelll\"\nassert     make_palindrome(\" \") == \" \"\nassert     make_palindrome(\"a\") == \"aa\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_xor(\"001100\", \"110110\") == \"011010\"\nassert     string_xor(\"101001\", \"101110\") == \"010101\"\nassert     string_xor(\"101110\", \"101001\") == \"010101\"\nassert     string_xor(\"111010\", \"110110\") == \"110101\"\n\n\ndef hamming_distance(a: str, b: str) -> int:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Return the Hamming distance between these inputs.\n    Hamming distance is defined as the number of positions at which the two\n    strings differ.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_xor('10', '11') == '01'\nassert     string_xor('11', '10') == '01'\nassert     string_xor('1100', '0000') == '1101'\nassert     string_xor('0000', '1100') == '1101'\nassert     string_xor('0001', '1001') == '1110'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_xor('100010000', '100110101') == '010001110'\nassert     string_xor('11101100', '11100110') == '00101010'\nassert     string_xor('11111111', '00000000') == '11111111'\nassert     string_xor('00000000', '11111111') == '00000000'\nassert     string_xor('00010000', '00010001') == '00101010'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_xor('111', '1') == '0'\nassert     string_xor('100', '1') == '1'\nassert     string_xor('1101', '1') == '0110'\nassert     string_xor('0101', '1') == '1110'\nassert     string_xor('1100', '1') == '1011'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_xor(\"1\", \"0\") == \"1\"\nassert     string_xor(\"0\", \"0\") == \"0\"\nassert     string_xor(\"1\", \"1\") == \"0\"\nassert     string_xor(\"01\", \"10\") == \"01\"\nassert     string_xor(\"10\", \"01\") == \"01\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_xor( '011011101011101', '101010101010101' )     == '0101010101010101'\nassert     string_xor( '011011101011101', '101010101110101' )     == '0100000101010101'\nassert     string_xor( '011011101011101', '101010111011011' )     == '0001010101010101'\nassert     string_xor( '011011101011101', '101010101011101' )     == '00101010101010101'\nassert     string_xor( '011011101011101', '101010101010110' )     == '10001010101010101'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_xor(\n            \"00000000000000000000000000000000\",\n            \"00000000000000000000000000000000\") == \"111111111111111111111111111111111111\"\nassert     string_xor(\n            \"000000000000001000000000\",\n            \"000000000000001000000000\") == \"011011101101110110111011011101\"\nassert     string_xor(\n            \"11111111111111111111111111111111\",\n            \"11111111111111111111111111111111\") == \"00000000000000000000000000000000\"\n\n\ndef binary_to_string(binary: str) -> str:\n    \"\"\" Input is binary string of length 8 or more.\n    Output is a string of that is represented as ascii.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_xor('011010', '101001') == '010101'\nassert     string_xor('101010', '001101') == '111010'\nassert     string_xor('111101', '101001') == '001101'\nassert     string_xor('001101', '111101') == '101001'\n\ndef get_characters(s: str) -> List[str]:\n    \"\"\" Input is a string s.\n    Return a list of characters contained in the string s.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     '01010101010101010101010101010101' == string_xor('This is a test', 'wokka wokka!!!')\nassert     '1010101010101010101010101010101' == string_xor('1wwwwokka wokka!!!', '1wokka wokka!!!')\nassert     '110101010101010101010101010101' == string_xor('1wokka wokka!!!', '1wokka wokka!!!')\nassert     '110101010101010101010101010101' == string_xor('1wokka wokka!!!', '1wwokka wokka!!!')\nassert     '110101010101010101010101010101' == string_xor('1wwokka wokka!!!', '1wwokka wokka!!!')\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     longest([\"abc\", \"xyz\"]) == \"abc\"\nassert     longest([\"aaa\", \"bbb\"]) == \"aaa\"\nassert     longest([\"abc\", \"xyz\", \"aba\"]) == \"abc\"\nassert     longest([\"zyx\", \"wvu\", \"tsr\"]) == \"wvu\"\nassert     longest([\"zyx\", \"wvu\", \"tsr\", \"abc\"]) == \"wvu\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     longest(['a','b','c']) == 'a'\nassert     longest(['a','b','c','d']) == 'a'\nassert     longest(['a','b','c','d','e']) == 'a'\nassert     longest(['a','b','c','d','e','f']) == 'a'\nassert     longest(['a','b','c','d','e','f','g']) == 'a'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     longest([]) is None\nassert     longest(['a']) == 'a'\nassert     longest(['a', 'b', 'c']) == 'c'\nassert     longest(['a', 'b', 'c', 'd']) == 'd'\nassert     longest(['a', 'b', 'c', 'd', 'e']) == 'e'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     longest([]) == None\nassert     longest([\"a\", \"b\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"c\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"c\", \"d\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     longest(['bob', 'bob', 'bob', 'bob', 'bob', 'bob', 'bob', 'bob', 'bob', 'bob', 'bob', 'bob', 'bob']) == 'bob'\nassert longest(['a', 'b', 'c', 'd', 'e']) == None\nassert longest(['z']) == None\nassert longest(['w', 'w', 'w', 'w']) == 'w'\nassert longest(['x', 'y', 'z', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']) == 'x'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     longest([\"a\", \"b\", \"c\"]) == \"c\"\nassert     longest([\"a\", \"a\", \"b\"]) == \"b\"\nassert     longest([\"a\", \"a\", \"b\", \"c\", \"c\", \"d\"]) == \"c\"\nassert     longest([\"a\", \"a\", \"b\", \"c\", \"c\", \"d\", \"e\", \"e\", \"f\", \"f\", \"g\"]) == \"f\"\nassert     longest([]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     longest(['abc', 'abcd', 'abcdef', 'abcdefghi']) == 'abcdef'\nassert     longest(['', 'x', 'y', 'z']) == None\nassert     longest(['aaa', 'bbb', 'ccc', 'aaa']) == 'aaa'\nassert     longest(['aaa', 'bbb', 'ccc', 'abcd', 'zzz']) == 'zzz'\nassert     longest(['aaa', 'bbb', 'ccc', 'abcd', 'zzz', 'aaaa']) == 'aaaa'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     longest([\"zzz\", \"a\", \"b\", \"ccc\", \"dddd\"]) == \"zzz\"\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"e\"\nassert     longest([\"f\", \"ggg\", \"hh\", \"ii\", \"jj\"]) == \"jj\"\nassert     longest([\"z\", \"x\", \"y\"]) == None\nassert     longest([\"\", \"\"]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     longest([\"a\"]) == \"a\"\nassert     longest([\"a\", \"b\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"c\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"c\", \"d\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     longest([\"supercalifragilisticexpialidocious\"]) == \"supercalifragilisticexpialidocious\"\nassert     longest([\"supercalifragilisticexpialidocious\", \"supercalifragilisticexpialidocious\"]) == \"supercalifragilisticexpialidocious\"\nassert     longest([\"bobob\", \"civic\", \"supercalifragilisticexpialidocious\"]) == \"supercalifragilisticexpialidocious\"\nassert     longest([\"sdfgdsd\", \"sdgdsg\", \"gdsgdsg\", \"sgdsdgd\"]) == \"gdsgdsg\"\nassert     longest([\"sdfgdsd\", \"sdgdsg\", \"gdsgdsg\", \"sgdsdgd\"]) == \"gdsgdsg\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(4, 5) == 1\nassert     greatest_common_divisor(0, 2) == 2\nassert     greatest_common_divisor(6, 4) == 2\nassert     greatest_common_divisor(3, 9) == 1\nassert     greatest_common_divisor(2, 3) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(2, 3) == 1\nassert greatest_common_divisor(60, 24) == 12\nassert greatest_common_divisor(36, 18) == 6\n\ndef hailstone_divisor(n: int) -> list:\n    \"\"\"\n        Return a list of the divisors of an integer n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(1, 3) == 1\nassert     greatest_common_divisor(2, 3) == 1\nassert     greatest_common_divisor(3, 3) == 3\nassert     greatest_common_divisor(11, 17) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(100, 50) == 2\nassert     greatest_common_divisor(100, 9) == 1\nassert     greatest_common_divisor(1, 5) == 1\nassert     greatest_common_divisor(100, 11) == 10\nassert     greatest_common_divisor(0, 2) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(11, 22) == 1\nassert     greatest_common_divisor(10, 0) == 10\nassert     greatest_common_divisor(1, 0) == 1\nassert     greatest_common_divisor(0, 1) == 1\nassert     greatest_common_divisor(2, 3) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(2, 3) == 1\nassert     greatest_common_divisor(3, 6) == 3\nassert     greatest_common_divisor(9, 6) == 3\nassert     greatest_common_divisor(10, 10) == 10\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(2, 10) == 2\nassert     greatest_common_divisor(3, 12) == 3\nassert     greatest_common_divisor(10, 12) == 2\nassert     greatest_common_divisor(7, 5) == 1\nassert     greatest_common_divisor(1, 1) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     greatest_common_divisor(2, 6) == 2\nassert     greatest_common_divisor(8, 6) == 4\nassert     greatest_common_divisor(13, 7) == 1\nassert     greatest_common_divisor(0, 6) == 6\nassert     greatest_common_divisor(6, 0) == 6\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(1, 1) == 1\nassert     greatest_common_divisor(0, 1) == 1\nassert     greatest_common_divisor(1, 0) == 1\nassert     greatest_common_divisor(2, 3) == 2\nassert     greatest_common_divisor(2, 5) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(50, 10) == 10\nassert     greatest_common_divisor(5, 15) == 5\nassert     greatest_common_divisor(10, 50) == 10\nassert     greatest_common_divisor(100, 50) == 50\n\ndef function(arg1, arg2, arg3):\n    \"\"\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"dog\") == ['d', 'do', 'dg', 'dog']\nassert     all_prefixes(\"cat\") == ['c', 'ca', 'cat']\nassert     all_prefixes(\"marathon\") == ['m','ma','mar','mara','marathon']\nassert     all_prefixes(\"may\") == ['m','may']\nassert     all_prefixes(\"dog2\") == ['d', 'do', 'dg', 'dog', 'do']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes('ab') == ['', 'a', 'ab']\nassert     all_prefixes('abcdef') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\nassert     all_prefixes('abcd') == ['', 'a', 'ab', 'abc', 'abcd']\nassert     all_prefixes('abcdee') == ['', 'a', 'ab', 'abc', 'abcd', 'abcdee']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_prefixes(\"cherry\") == [\"c\", \"cherry\"]\nassert     all_prefixes(\"cherrystone\") == [\"cher\", \"cherrystone\"]\nassert     all_prefixes(\"cherrystone\") == [\"cher\", \"cherrystone\"]\nassert     all_prefixes(\"cherrystoneberry\") == [\"cher\", \"cherrystone\", \"cherrystoneberry\"]\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"\") == []\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"aab\") == [\"a\", \"aab\"]\nassert     all_prefixes(\"aabcc\") == [\"a\", \"aab\", \"aabcc\"]\nassert     all_prefixes(\"abc\") == [\"abc\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"\") == []\nassert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"abcdef\") == [\"a\", \"ab\", \"abc\", \"abcdef\"]\nassert     all_prefixes(\"abcdefg\") == [\"a\", \"ab\", \"abc\", \"abcdef\", \"abcdefg\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         all_prefixes('foobar') ==     ['foo', 'fo', 'foobar']\nassert         all_prefixes('bar') ==         ['bar', 'ara', 'ar']\nassert         all_prefixes('abcdef') ==     ['abc', 'ab', 'abcdef']\nassert         all_prefixes('abcdefg') ==     ['abc', 'ab', 'abcdef', 'abcdefg']\nassert         all_prefixes('abcdefgh') ==     ['abc', 'ab', 'abcdef', 'abcdefg', 'abcdefgh']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"acbd\") == [\"a\", \"ab\", \"abc\", \"acbd\"]\nassert     all_prefixes(\"aab\") == [\"a\", \"aab\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcdf\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcdf\"]\nassert     all_prefixes(\"aaaaa\") == [\"a\", \"aaa\", \"aaaa\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_prefixes(\"a\") == [\n            \"a\",\n            \"a_\",\n            \"a__\",\n            \"a___\",\n            \"a____\",\n            \"a_____\",\n            \"a______\",\n            \"a_______\",\n            \"a________\",\n            \"a_________\",\n            \"a__________\",\n            \"a____________\",\n            \"a_____________\",\n            \"a______________\",\n            \"a_______________\",\n            \"a________________\",\n            \"a_________________\",\n            \"a___________________\",\n            \"a____________________\",\n            \"a_____________________\",\n            \"a______________________\",\n            \"a_______________________\",\n            \"a________________________\",\n            \"a_________________________\",\n            \"a__________________________\",\n            \"a___________________________\",\n            \"a____________________________\",\n            \"a_____________________________\",\n            \"a______________________________\",\n            \"a_______________________________\",\n            \"a________________________________\",\n            \"a_________________________________\",\n            \"a__________________________________\",\n            \"a___________________________________\",\n            \"a____________________________________\",\n            \"a_____________________________________\",\n            \"a______________________________________\",\n            \"a_______________________________________\",\n            \"a________________________________________\",\n            \"a_________________________________________\",\n            \"a__________________________________________\",\n            \"a___________________________________________\",\n            \"a____________________________________________\",\n            \"a_____________________________________________\",\n            \"a______________________________________________\",\n            \"a_______________________________________________\",\n            \"a________________________________________________\",\n            \"a_________________________________________________\",\n            \"a__________________________________________________\",\n            \"a___________________________________________________\",\n            \"a____________________________________________________\",\n            \"a_____________________________________________________\",\n            \"a______________________________________________________\",\n            \"a_______________________________________________________\",\n            \"a________________________________________________________\",\n            \"a_________________________________________________________\",\n            \"a______________________________Statement_of_health_and_wellbeing_and_healthcare_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_health_care_and_health_care_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_healthcare_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_healthcare_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_healthcare_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_healthcare_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_healthcare_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_healthcare_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_healthcare_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual_and_physical_illness_in_healthcare_care_and_care_and_healthcare_care_and_care_and_healthcare_therapy_and_training_and_treatment_of_sexual"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_prefixes('cat') == ['cat', 'c', 'ca', 'caa', 'cab', 'cba', 'cbaa', 'cbab', 'cbaba', 'cbabb', 'cbaba', 'cbabb', 'cbaba', 'cbabb']\nassert     all_prefixes('dog') == ['dog', 'd', 'da', 'dag', 'dagb', 'dagba', 'dagbaa', 'dagbab', 'dagbaba', 'dagbabb', 'dagbaba', 'dagbabb', 'dagbaba', 'dagbabb']\nassert     all_prefixes('go') == ['go', 'goa', 'goab', 'goaba', 'goabb', 'goabba', 'goabbb', 'goabab', 'goabaa', 'goabab', 'goabaa', 'goabab', 'goabbb', 'goabaa', 'goabab']\nassert     all_prefixes('elephant') == ['elephant', 'elephant', 'eleph', 'elepha', 'elephb', 'elephba', 'elephb', 'elephbaa', 'elephbab', 'elephbaba', 'elephbabb', 'elephbaba', 'elephbabb', 'elephbaba', 'elephbabb']\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         string_sequence(4)     == '0 1 2 3'\nassert         string_sequence(5)     == '0 1 2 3 4'\nassert         string_sequence(6)     == '0 1 2 3 4 5'\nassert         string_sequence(7)     == '0 1 2 3 4 5 6'\nassert         string_sequence(8)     == '0 1 2 3 4 5 6 7'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(11) == \"0 1 2 3 4 5 6 7 8 9 10\"\n\ndef list_comprehension(n: int) -> List[int]:\n    \"\"\" Return a list containing space-delimited integers starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     '01 23 45 67 89' == string_sequence(10)\nassert     '01 23 45 67 89' == string_sequence(5)\nassert     '01 23 45 67 89' == string_sequence(9)\nassert     '0123456789' == string_sequence(1)\nassert     '0123456789' == string_sequence(0)\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_sequence(4) =='012'\nassert     string_sequence(1) == '0'\nassert     string_sequence(0) == ''\nassert     string_sequence(5) == '012345'\n\n\ndef reverse_string(str: str) -> str:\n    \"\"\" Return the reverse of the given string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(3) == '0 1 2'\nassert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     \"0 1 2 3 4 5\" == string_sequence(5)\nassert     \"0 1 2 3 4\" == string_sequence(4)\nassert     \"0 1 2 3\" == string_sequence(3)\nassert     \"0 1\" == string_sequence(2)\nassert     \"0\" == string_sequence(1)\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(6) == \"0 1 2 3 4 5\"\nassert     string_sequence(7) == \"0 1 2 3 4 5 6\"\nassert     string_sequence(8) == \"0 1 2 3 4 5 6 7\"\nassert     string_sequence(9) == \"0 1 2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(6) == \"0 1 2 3 4 5\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(8) == \"0 1 2 3 4 5 6 7\"\nassert     string_sequence(1) == \"0\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_sequence(0)     == \"\"\nassert     string_sequence(1)     == \"0\"\nassert     string_sequence(2)     == \"00\"\nassert     string_sequence(3)     == \"000\"\nassert     string_sequence(4)     == \"0000\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"HackerRank\") == 6\nassert     count_distinct_characters(\"hacker\") == 4\nassert     count_distinct_characters(\"Pratik\") == 6\nassert     count_distinct_characters(\"coding\") == 1\nassert     count_distinct_characters(\"CODING\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"Programming\") == 2\nassert     count_distinct_characters(\"Programming l\") == 2\nassert     count_distinct_characters(\"Programming L\") == 2\nassert     count_distinct_characters(\"Programming l1\") == 3\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_distinct_characters('aA') == 1\nassert     count_distinct_characters('Aaa') == 2\nassert     count_distinct_characters('AaA') == 2\nassert     count_distinct_characters('AaaA') == 3\nassert     count_distinct_characters('AaaaA') == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('aaaaaa') == 1\nassert     count_distinct_characters('HelloWorld') == 4\nassert     count_distinct_characters('Hello World') == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"ACaBC\") == 2\nassert     count_distinct_characters(\"aBcD\") == 4\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"aBCD\") == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"Cool\") == 2\nassert     count_distinct_characters(\"coOL\") == 1\nassert     count_distinct_characters(\"coLOm\") == 3\nassert     count_distinct_characters(\"COlOm\") == 2\nassert     count_distinct_characters(\"coLOM\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_distinct_characters('this is a test') == 6\nassert     count_distinct_characters('tHs iS a tESt') == 8\nassert     count_distinct_characters('Apple') == 1\nassert     count_distinct_characters('') == 0\nassert     count_distinct_characters('racecar') == 8\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_distinct_characters('Hello world!') == 6\nassert     count_distinct_characters('AaBbCc') == 4\nassert     count_distinct_characters('aBcDeFgHiJkLmNoPqRsTuVwXxYz') == 26\nassert     count_distinct_characters('a') == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_distinct_characters('') == 0\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('A') == 1\nassert     count_distinct_characters('ab') == 2\nassert     count_distinct_characters('abZ') == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"string\") == 3\nassert count_distinct_characters(\"Hello World!\") == 4\nassert count_distinct_characters(\"Hello World\") == 5\nassert count_distinct_characters(\"\") == 0\nassert count_distinct_characters(\"a\") == 1\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_music(\"o.o|.o\") == [4,2]\nassert     parse_music(\"o.o|o\") == [4,4]\nassert     parse_music(\"o.o|oo\") == [4,6]\nassert     parse_music(\"o.o|oo.o\") == [4,8]\nassert     parse_music(\"o.o|o.o.o\") == [4,12]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_music(r'o\\oo\\o|.o') == [4,1,4]\nassert     parse_music(r'o|o|o|o|o|o|o|o|o') == [8,4]\nassert     parse_music(r'o|o|o|o|o|o|o|o|o|o|o|o|o') == [16,8]\nassert     parse_music(r'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') == [32,16]\nassert     parse_music(r'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_music('4.2o|5.2o|7.2o|7.4.o|8.2o|9.2o|10.2o|10.4.o|11.2o') == [1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('4.2o|5.2o|7.2o|7.4.o|8.2o|9.2o|10.2o|10.4.o|11.2o|2.1.o|3.2o|4.2o|5.2o|7.2o|7.4.o|8.2o|9.2o|10.2o|10.4.o|11.2o') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music('4.2o|5.2o|7.2o|7.4.o|8.2o|9.2o|10.2o|10.4.o|11.2o|2.1.o|3.2o|4.2o|5.2o|7.2o|7.4.o|8.2o|9.2o|10.2o|10.4.o|11.2o|2.1.o|3.2o|4.2o|5.2o|7.2o|7.4.o|8.2o|9.2o|10.2o|10.4.o|11.2o|2.1.o|3.2o|4.2o|5.2o|7.2o|7.4.o|8.2o|9.2o|10.2o|10.4.o|11.2o|2.1.o|3.2o|4.2o|5.2o|7.2o|7.4.o|8.2o|9.2o|10.2o|10.4.o|11.2o') == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\ndef get_note_count(music_string: str) -> int:\n    \"\"\" Returns number of beats in the string \"\"\"\n    pass\n\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_music('o.o|o|o|o') == [4, 4, 4, 4]\nassert     parse_music('o.o|o|o|o|o|o|o|o|o|o|o|o') == [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]\nassert     parse_music('o.o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') == [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]\nassert     parse_music('o.o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_music('o') == [1,1,1,1]\nassert     parse_music('oo') == [1,1,1,2]\nassert     parse_music('o|') == [1,1,2,1]\nassert     parse_music('oo|') == [1,1,2,3]\nassert     parse_music('.o|') == [1,2,1,1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_music('o') == [4]\nassert     parse_music('o|') == [2, 2]\nassert     parse_music('.|') == [1, 1]\nassert     parse_music('o|.|') == [2, 1, 1]\nassert     parse_music('o|.|o|') == [2, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_music('o o| o|. o o|o.o') == [4, 3, 4, 2, 2, 2]\nassert     parse_music('o o|o o|. o| o|o.o') == [4, 3, 4, 1, 2, 2]\nassert     parse_music('o o|o o|..o|o o|o.o') == [4, 3, 4, 1, 1, 2]\nassert     parse_music('o o|o o|..o|.o|o.o') == [4, 3, 4, 1, 1, 1]\nassert     parse_music('o o|o o|..o|o o|o o..o') == [4, 3, 4, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_music('o-o-o-o') == [1, 4, 4, 4]\nassert     parse_music('o--o') == [1, 2, 2]\nassert     parse_music('o-o--o') == [1, 4, 2, 2]\nassert     parse_music('o-o|o-o') == [1, 4, 2, 1]\nassert     parse_music('o-o-o-o-o') == [1, 4, 4, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_music('o'        == [4])\nassert     parse_music('o|'        == [4, 2])\nassert     parse_music('.|'       == [4, 1])\nassert     parse_music('o|o'       == [4, 2, 2])\nassert     parse_music('o|oo'     == [4, 2, 2, 2])\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_music('o o.| o.o| o.o|.o| o.o|.o|') == [4, 4, 4, 2, 4, 2]\nassert     parse_music('o o.| o.o| o.o|.o| o.o|.o|') == [4, 4, 4, 2, 4, 2]\nassert     parse_music('o o.| o.o| o.o|.o| o.o|.o|') == [4, 4, 4, 2, 4, 2]\nassert     parse_music('o o.| o.o| o.o|.o| o.o|.o|') == [4, 4, 4, 2, 4, 2]\nassert     parse_music('o o.| o.o| o.o|.o| o.o|.o|') == [4, 4, 4, 2, 4, 2]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     how_many_times('hello', 'l') == 2\nassert     how_many_times('hello', 'o') == 1\nassert     how_many_times('hello', 'h') == 1\nassert     how_many_times('hello', 'e') == 1\nassert     how_many_times('hello', 'l') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     how_many_times(\"first_string\", \"first\") == 1\nassert     how_many_times(\"first_string\", \"second\") == 0\nassert     how_many_times(\"first_string\", \"second_string\") == 0\nassert     how_many_times(\"first_string\", \"string\") == 1\nassert     how_many_times(\"first_string\", \"string_2\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     how_many_times('aaabb', 'b') == 3, \"basic\"\nassert     how_many_times('aaabbc', 'b') == 2, \"basic #2\"\nassert     how_many_times('aaabb', 'bb') == 0, \"basic #3\"\nassert     how_many_times('aaabb', 'a') == 4, \"basic #4\"\nassert     how_many_times('aaaaaa', 'aa') == 5, \"basic #5\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     how_many_times('mouse', 'cat') == 0\nassert     how_many_times('mouse','mouse') == 1\nassert     how_many_times('mouse','mouse mouse') == 1\nassert     how_many_times('mouse','mouse mouse mouse') == 2\nassert     how_many_times('mouse','mouse mouse mouse mouse') == 3\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     how_many_times('Find the one that appear the most in this sentence','most') == 1, \"Function is not working properly\"\nassert     how_many_times('Find the one that appear the most in this sentence', 'time') == 0, \"Function is not working properly\"\nassert     how_many_times('Find the one that appear the most in this sentence', 'the') == 2, \"Function is not working properly\"\nassert     how_many_times('Find the one that appear the most in this sentence', 'is') == 1, \"Function is not working properly\"\nassert     how_many_times('Find the one that appear the most in this sentence', 'not') == 1, \"Function is not working properly\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     how_many_times('this is a test string', 't') == 1\nassert     how_many_times('this is a test string','s') == 2\nassert     how_many_times('this is a test string', 'is') == 2\nassert     how_many_times('this is a test string', 'test') == 2\n\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     how_many_times(\"Hello world\", \"Hello\") == 2, \"two times\"\nassert     how_many_times(\"Hello world\", \"world\") == 1, \"one time\"\nassert     how_many_times(\"Hello world\", \"Hello Hello\") == 0, \"no times\"\nassert     how_many_times(\"\", \"\") == 0, \"empty string\"\nassert     how_many_times(\"Hello world\", \"k\") == -1, \"substring not found\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     how_many_times('hello world', 'w') == 2\nassert     how_many_times('hello world', 'o') == 4\nassert     how_many_times('hello world','') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     how_many_times('hello', 'ell') == 1\nassert     how_many_times('hello', 'l') == 2\nassert     how_many_times('hello', 'lo') == 0\nassert     how_many_times('hello', 'h') == 1\nassert     how_many_times('hello', 'he') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     how_many_times(\"some body is coming\", \"some\") == 2\nassert     how_many_times(\"some body is coming\", \"body\") == 2\nassert     how_many_times(\"some body is coming\", \"come\") == 1\nassert     how_many_times(\"some body is coming\", \"body body\") == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_numbers('one one two two three four four five five six six seven seven eight eight eight') == 'eight seven seven six five four three two one one one'\nassert     sort_numbers('one one two two three three four four five five six six seven seven eight eight eight') == 'eight seven seven six five four three two one one one'\nassert     sort_numbers('one one two three four five six seven eight nine eight eight') == 'eight seven nine eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight'\nassert     sort_numbers('one one two three four five six seven eight nine eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eigh"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"eight seven five four three two one zero\"\nassert     sort_numbers(\"one one two three four five six seven eight nine\") == \"eight seven five four three two one one\"\nassert     sort_numbers(\"two one two three three four five five six seven eight nine\") == \"eight seven five four three two one one\"\nassert     sort_numbers(\"three one two three four five five six seven eight nine\") == \"eight seven five four three two one one\"\nassert     sort_numbers(\"four one two three four five five six seven eight nine\") == \"eight seven five four three two one one\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'one zero nine two three four five six seven eight nine', \\\n        'Expected sort_numbers(\"zero one two three four five six seven eight nine\") to be \"one zero nine two three four five six seven eight nine\" but got %s' % sort_numbers('zero one two three four five six seven eight nine')\nassert     sort_numbers('one two three four five six seven eight nine zero') == 'one two three four five six seven eight nine zero', \\\n        'Expected sort_numbers(\"one two three four five six seven eight nine zero\") to be \"one two three four five six seven eight nine zero\" but got %s' % sort_numbers('one two three four five six seven eight nine zero')\nassert     sort_numbers('one two three four five six seven eight nine one') == 'one two three four five six seven eight nine one', \\\n        'Expected sort_numbers(\"one two three four five six seven eight nine one\") to be \"one two three four five six seven eight nine one\" but got %s' % sort_numbers('one two three four five six seven eight nine one')\nassert     sort_numbers('one two three four five six seven eight nine zero zero') == 'one two three four five six seven eight nine zero zero', \\\n        'Expected sort_numbers(\"one two three four five six seven eight nine zero zero\") to be \"one two three four five six seven eight nine zero zero\" but got %s' % sort_numbers('one two three four five six seven eight nine zero zero')\nassert     sort_numbers('one two three four five six seven eight nine zero one one') == 'one two three four five six seven eight nine zero one one', \\\n        'Expected sort_numbers(\"one two three four five six seven eight nine zero one one\") to be \"one two three four five six seven eight nine zero one one\" but got %s' % sort_numbers('one two three four five six seven eight nine zero one one')\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one nine two seven eight five four three six one'\nassert     sort_numbers('three five four two one') == 'one two three five four'\nassert     sort_numbers('nine four three five two six one seven eight') == 'one seven eight four three five two six nine'\nassert     sort_numbers('nine four three five two one six seven eight') == 'one seven eight four three five two nine'\nassert     sort_numbers('eight five four two one three') == 'one three five four two eight'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine')     == 'one zero nine two eight five four seven three six two zero one'\nassert     sort_numbers('nine four two three one zero five')                 == 'one zero five four three two nine zero one'\nassert     sort_numbers('one two three four five six seven eight nine')     == 'one two three four five six seven eight nine zero one'\nassert     sort_numbers('eight three two one zero five four')                 == 'one zero four three two five eight zero eight'\nassert     sort_numbers('seven three one two zero four five six')             == 'one zero five four six three seven zero'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine ten') == 'one two three four five six seven eight nine ten'\nassert     sort_numbers('one one five five five five five five five five one one one one one') == 'one one five five five five five five five five five one one one one one'\nassert     sort_numbers('one two two three three four four four five five five six six seven eight eight nine nine ten') == 'one two three four four five five six seven eight nine ten'\nassert     sort_numbers('one two two three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three three\n\ndef is_anagram(word1, word2):\n    \"\"\"\n    Takes two strings and returns True if they are anagrams. Two words are anagrams when\n    they can be sorted the same way. Case is ignored.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_numbers('one zero two three four five six seven eight nine') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('one four two three five six seven eight nine zero') == 'one four two three five six seven eight nine zero'\nassert     sort_numbers('one two two three four five six seven eight nine zero') == 'one two two three four five six seven eight nine zero'\nassert     sort_numbers('one two two three four five six seven eight nine zero') == 'one two two three four five six seven eight nine zero'\nassert     sort_numbers('one three three four five six seven eight nine zero') == 'one three three four five six seven eight nine zero'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_numbers(\"one two three four five six seven eight nine\")    == \"one two three four five six seven eight nine\"\nassert     sort_numbers(\"five six seven eight nine four three one two\")    == \"one two three four five six seven eight nine\"\nassert     sort_numbers(\"five six four three two one\")    == \"one two four three five six\"\nassert     sort_numbers(\"five four three two one\")    == \"one two four five\"\nassert     sort_numbers(\"one two four five six three\")    == \"one two four five six\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_numbers('eight three one two five four six seven zero nine two three one') == 'one one two three two three zero five four eight nine nine'\nassert     sort_numbers('one two three four five six seven eight zero nine two three one') == 'one one two three four five six seven eight zero nine nine'\nassert     sort_numbers('eight one two three four five six seven eight zero nine two three one') == 'one one two three four five six seven eight zero nine nine'\nassert     sort_numbers('nine zero one two three four five six seven eight zero nine two three one') == 'one one two three four five six seven eight nine zero nine nine'\nassert     sort_numbers('zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zer"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_closest_elements([2, 3, 4, 1, 5, 6, 7]) == (1, 3)\nassert     find_closest_elements([1, 0, 3, 4, 5]) == (0, 3)\nassert     find_closest_elements([0, 0, 1, 1, 3, 4, 5]) == (0, 1)\nassert     find_closest_elements([0, 0, 3, 4, 5]) == (0, 3)\nassert     find_closest_elements([1, 3, 4, 5, 6]) == (3, 5)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([2, 4, 6, 8, 10]) == (4, 8)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7]) == (4, 5)\nassert     find_closest_elements([3, 5, 7, 9, 11, 13, 15]) == (7, 11)\nassert     find_closest_elements([-1, -2, -3, -4, -5, -6, -7]) == (-3, -2)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_closest_elements([2, 4, 9, 16, 25, 36, 49, 64]) == (49, 36)\nassert     find_closest_elements([-8, -3, 0, 1, 2, 5, 7]) == (-8, 1)\nassert     find_closest_elements([2, 4, 9, 16, 25, 36, 49, 64]) == (49, 36)\nassert     find_closest_elements([1, 0, -1]) == (0, -1)\nassert     find_closest_elements([1, 2, 3]) == (1, 2)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_closest_elements([1,2,3,4,5,6]) == (1,2)\nassert     find_closest_elements([1,2,3,5,4]) == (1,3)\nassert     find_closest_elements([3,4,5,6,7]) == (3,5)\nassert     find_closest_elements([2.1,2.9,3.4]) == (2.1,2.9)\nassert     find_closest_elements([-1,-2,-3,-4,-5,-6,-7,-8,-9]) == (-8,-9)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_closest_elements([1, 2, 3, 4]) == (1, 2)\nassert     find_closest_elements([1, 4, 2, 3]) == (1, 2)\nassert     find_closest_elements([3, 4, 1, 2]) == (1, 2)\nassert     find_closest_elements([4, 3, 2, 1]) == (1, 2)\nassert     find_closest_elements([2, 1, 3, 4]) == (1, 2)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_closest_elements([2.2, 3.0, 5.5, 6.1]) == (2.2, 6.1)\nassert     find_closest_elements([3.0, 5.5, 6.1, 7.0]) == (5.5, 6.1)\nassert     find_closest_elements([3.0, 3.0, 3.0, 3.0]) == (3.0, 3.0)\nassert     find_closest_elements([3.0, 3.0, 3.0, 3.0, 3.0]) == (3.0, 3.0)\nassert     find_closest_elements([3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [find_closest_elements(numbers=[5, 6, 7, 8])] == [(7, 6), (5, 7)]\nassert     [find_closest_elements(numbers=[1, 2, 5, 6, 8])] == [(2, 5), (5, 6)]\nassert     [find_closest_elements(numbers=[100, 3, 4, 5, 6, 7, 8])] == [(3, 4), (6, 7)]\n\n\ndef find_closest_elements_dict(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    min_dist = float(\"inf\")\n    closest_elem = None\n    closest_elem_pair = None\n    for i, elem in enumerate(numbers):\n        for j, elem2 in enumerate(numbers[i+1:]):\n            dist = abs(elem - elem2)\n            if dist < min_dist:\n                closest_elem = elem\n                closest_elem_pair = (elem2, elem)\n                min_dist = dist\n    return closest_elem_pair\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_closest_elements([0.0, -3.0, 4.0]) == (-3.0, 0.0)\nassert find_closest_elements([0.0, -3.0, 4.0, -10.0]) == (-3.0, 0.0)\nassert     find_closest_elements([-2.0, -3.0, 4.0, -10.0]) == (4.0, -10.0)\nassert find_closest_elements([0.0, -3.0, -4.0, -10.0]) == (0.0, -10.0)\nassert     find_closest_elements([2.0, -3.0, 4.0, -10.0]) == (2.0, -10.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_closest_elements([0.1, 0.2, 0.3, 0.4]) == (0.1, 0.2)\nassert     find_closest_elements([0.9, 0.1, 0.8, 0.2]) == (0.1, 0.9)\nassert     find_closest_elements([0.1, 0.1, 0.1, 0.1]) == (0.1, 0.1)\nassert     find_closest_elements([0.5, 0.9, 0.1]) == (0.1, 0.9)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([2, 3, 4, 5, 6, 7]) == [0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\nassert     rescale_to_unit([0.5, 1.5, 2.5, 3.5, 4.5, 5.5]) == [0.5, 0.6, 0.7, 0.8, 0.9, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([4, 4, 4]) == [0, 0, 0]\nassert     rescale_to_unit([2, 2, 2]) == [0, 0.5, 0.5]\nassert     rescale_to_unit([0, 1, 2]) == [0, 0.5, 0.5]\n\ndef convert_to_probability(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers, in which the smallest is 0, and the largest is 1,\n    return a list of probabilities corresponding to the list of numbers.\n    For each number in the input list, the corresponding index of the output list will have the same value,\n    as long as the output list is of size 2^n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([1,2,3,4]) == [0.25, 0.5, 0.75, 1.0]\nassert     rescale_to_unit([5,4,3,2,1]) == [0.2, 0.4, 0.6, 0.8, 1.0]\nassert     rescale_to_unit([1,1,1]) == [0.3333, 0.3333, 0.3333]\nassert     rescale_to_unit([0,1,2,3,4]) == [0.25, 0.5, 0.75, 1.0, 1.0]\n\n\ndef scale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), scale the numbers so the smallest number becomes 0 and the largest number becomes 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([1, 2, 3]) == [1, 2, 3]\nassert     rescale_to_unit([2, 1, 0]) == [0, 1, 2]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6]\nassert     rescale_to_unit([-1, 0, 1, 2, 3, 4]) == [-1, 0, 1, 2, 3, 4]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([0, 1]) == [0, 1]\nassert     rescale_to_unit([0, 0, 1]) == [0, 0, 1]\nassert     rescale_to_unit([0.5, 1.5]) == [0, 1]\nassert     rescale_to_unit([0, 0.5, 1.5]) == [0, 0.5, 1.5]\nassert     rescale_to_unit([0.5, 1.5, 2]) == [0, 1, 1.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([0.1]) == [1.0]\nassert     rescale_to_unit([0.01]) == [1.0]\nassert     rescale_to_unit([0.001]) == [1.0]\nassert     rescale_to_unit([0.0001]) == [1.0]\nassert     rescale_to_unit([-0.1]) == [0.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([1.0, 1.0, 1.0]) == [0.0, 0.0, 0.0]\nassert     rescale_to_unit([0.5, 0.5]) == [0.0, 0.0]\nassert     rescale_to_unit([0.5, 0.5, 0.5]) == [0.0, 0.0, 0.0]\nassert     rescale_to_unit([0.0, 1.0, 0.0]) == [0.0, 1.0, 0.0]\n\n\ndef check_perfect_squares(numbers: List[float]) -> bool:\n    \"\"\"\n    Given list of positive integers, return True if the sum of the square of each number is a perfect square\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]\nassert     rescale_to_unit([2, 3, 1]) == [0, 0.3333333333333333, 0.6666666666666666]\n\n\ndef rescale_to_unit2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n\n\ndef get_mean(numbers: List[float]) -> float:\n    \"\"\" Compute the mean of a list of numbers \"\"\"\n    pass\n\n\ndef get_variance(numbers: List[float]) -> float:\n    \"\"\" Compute the mean of a list of numbers \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([2,5]) == [0,1]\nassert     rescale_to_unit([1,2,5]) == [0,0.5,1]\nassert     rescale_to_unit([-1,2,5]) == [0,-0.5,1]\nassert     rescale_to_unit([-1,-2,5]) == [0,0.5,1]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([1.0, 2.0, 3.0]) == [0.0, 0.3333333333333333, 1.0]\nassert     rescale_to_unit([1.0, -1.0, 1.0]) == [0.0, -1.0, 1.0]\nassert     rescale_to_unit([1.0, -2.0, 1.0]) == [0.0, -1.0, 1.0]\nassert     rescale_to_unit([1.0, -2.0, -1.0]) == [0.0, -1.0, -1.0]\nassert     rescale_to_unit([1.0, 2.0, -1.0]) == [0.0, 0.3333333333333333, -1.0]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4, 5] == filter_integers([1, 2, 3, 'a', 4, 5])\nassert     [1, 2, 3, 4, 5] == filter_integers(['1', '2', 3, 'a', '4', '5'])\nassert     [1, 2, 3, 4, 5] == filter_integers(['1', 2, 3, 'a', 4, 5])\nassert     [1, 2, 3, 4, 5] == filter_integers([1, '2', 3, 'a', 4, 5])\nassert     [1, 2, 3, 4, 5] == filter_integers([1, 2, '3', 'a', 4, 5])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_integers([1, 2, \"a\", 4, 5]) == []\nassert     filter_integers([1, 2, -3, 4, 5]) == [1, 2, 4, 5]\nassert     filter_integers([\"a\", \"b\", \"c\", \"d\", \"e\"]) == []\nassert     filter_integers([1, 2, 3.14, 4, 5]) == [1, 2, 4, 5]\nassert     filter_integers([\"a\", \"b\", \"c\", \"d\", 1]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_integers([1, 2, 3, \"1\", \"2\", \"3\"])    == [1, 2, 3]\nassert     filter_integers([\"1\", \"2\", \"3\"])                == []\nassert     filter_integers([1, 2, 3])                            == []\nassert     filter_integers([\"1\", \"2\", \"3\", \"4\"])                == [\"1\", \"2\", \"3\"]\nassert     filter_integers([\"1\", 2, 3])                        == []\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1,2,3,4,5] == filter_integers([1.0, 2.0, \"3\", 4, 5])\nassert     [1,2,3,4,5] == filter_integers([\"1.0\", \"2.0\", \"3\", 4, 5])\nassert     [1,2,3,4,5] == filter_integers([\"1\", \"2\", \"3\", 4, 5])\nassert     [1,2,3,4,5] == filter_integers([\"1.0\", \"2.0\", \"3\", 4, 5])\nassert     [1,2,3,4,5] == filter_integers([\"1\", \"2\", \"3\", 4, 5])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_integers([0, 1, 2, 3, 4]) == []\nassert     filter_integers([\"0\", \"1\", \"2\", \"3\", \"4\"]) == []\nassert     filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\"]) == []\nassert     filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"0\"]) == []\nassert     filter_integers([2, \"2\", \"3\", \"4\", \"5\", \"0\"]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([1.0, 2.0, 3.0]) == [1, 2, 3]\nassert     filter_integers([\"a\", \"b\", \"c\"]) == []\nassert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3, \"a\", \"b\", \"c\"]) == [1, 2, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_integers([\"1\", \"2\", \"3\", \"4\"]) == [1,2,3,4]\nassert     filter_integers([1, 2, \"3\", 4]) == [1,2,3,4]\nassert     filter_integers([\"1\", \"2\", \"\", \"4\"]) == [1,2,4]\nassert     filter_integers([]) == []\nassert     filter_integers([1]) == [1]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([1.0, 2.0, 3.0]) == [1, 2, 3]\nassert     filter_integers([1, '2', 3]) == [1, 3]\nassert     filter_integers(['1', 2, 3]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all(isinstance(v, int) for v in filter_integers([1, 2, 3, \"4\", 5, 6, 7, 8, 9, \"10\"]))\nassert     all(isinstance(v, int) for v in filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]))\nassert     all(isinstance(v, int) for v in filter_integers([\"1\", 2, \"3\", \"4\", \"5\", 6, 7, 8, 9, 10]))\nassert     all(isinstance(v, int) for v in filter_integers([1, 2, \"3\", 4, 5, 6, 7, 8, 9, 10]))\nassert     all(isinstance(v, int) for v in filter_integers([1, 2, 3, \"4\", 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([\"1\", 2, \"3\"]) == [1, 2, 3]\nassert     filter_integers([1, \"2\", 3]) == [1, 2, 3]\nassert     filter_integers([\"a\", \"b\", \"c\"]) == []\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strlen(\"a\") == 1\nassert     strlen(\"ab\") == 2\nassert     strlen(\"abc\") == 3\nassert     strlen(\"xyz\") == 3\nassert     strlen(\" \") == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef substr(string: str, start: int, length: int) -> str:\n    \"\"\" Return a substring of the given string\n    \"\"\"\n    pass\n\nassert\n\ndef substr_compare(string: str, start: int, length: int) -> int:\n    \"\"\" Return whether the substring is an equal\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('world') == 7\nassert     strlen('h') == 1\nassert     strlen('w') == 1\nassert     strlen('ll') == 2\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strlen('') == 0\nassert     strlen('a') == 1\nassert     strlen('ab') == 2\nassert     strlen('abcd') == 4\nassert     strlen('abcdef') == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"aaaa\") == 4\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdefghijk\") == 8\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strlen('Hello') == 5\nassert     strlen('Hello World') == 11\nassert     strlen('Hello, world') == 11\nassert     strlen('') == 0\nassert     strlen(' ') == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         strlen('Hello World') == 11\nassert         strlen('Hello World!') == 11\nassert         strlen('') == 0\nassert         strlen('hello world') == 11\nassert         strlen('\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f') == 16\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"ab\") == 2\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdef\") == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     strlen(\"Hello\") == 5\nassert     strlen(\"This is a test\") == 13\nassert     strlen(\"\") == 0\nassert     strlen(\" \") == 1\nassert     strlen(\"a\") == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdef\") == 6\nassert     strlen(\"abcdefgh\") == 9\nassert     strlen(\"abcdefghi\") == 9\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(19) == 19\nassert     largest_divisor(21) == 7\nassert     largest_divisor(30) == 3\nassert     largest_divisor(33) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 2\nassert     largest_divisor(3) == 1\nassert     largest_divisor(6) == 3\nassert     largest_divisor(12) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(24) == 6\nassert     largest_divisor(49) == 7\nassert     largest_divisor(125) == 25\nassert     largest_divisor(999) == 999\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_divisor(4) == 2\nassert     largest_divisor(15) == 3\nassert     largest_divisor(24) == 3\nassert     largest_divisor(42) == 7\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_divisor(12)     == 3\nassert     largest_divisor(9)     == 3\nassert     largest_divisor(7)     == 7\nassert     largest_divisor(6)     == 3\nassert     largest_divisor(5)     == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(10) == 5\nassert     largest_divisor(25) == 5\nassert     largest_divisor(27) == 3\nassert     largest_divisor(25*2) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_divisor(17) == 17\nassert     largest_divisor(15) == 15\nassert     largest_divisor(73) == 73\nassert     largest_divisor(29) == 29\nassert     largest_divisor(10) == 10\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     6 == largest_divisor(30)\nassert     20 == largest_divisor(120)\nassert     2 == largest_divisor(6)\nassert     3 == largest_divisor(8)\nassert     16 == largest_divisor(15)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (largest_divisor(15) == 3)\nassert     (largest_divisor(20) == 5)\nassert     (largest_divisor(6) == 3)\nassert     (largest_divisor(10) == 5)\nassert     (largest_divisor(100) == 10)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [2, 2, 5] == factorize(120)\nassert     [2, 2, 2, 3] == factorize(222)\nassert     [2, 11] == factorize(11)\nassert     [11] == factorize(11)\nassert     [2] == factorize(2)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [2, 2, 5, 5] == factorize(120)\nassert     [2, 2, 2, 3] == factorize(6)\nassert     [2, 3, 3] == factorize(9)\nassert     [3, 3] == factorize(27)\nassert     [2, 2, 5] == factorize(30)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     factorize(32) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     factorize(27) == [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\nassert     factorize(15) == [3, 5, 3]\nassert     factorize(16) == [2, 2, 4]\nassert     factorize(97) == [97]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1, 2, 3, 4, 6, 8, 12] == factorize(24)\nassert     [2, 2, 2, 3, 3, 4, 4] == factorize(32)\nassert     [2, 2, 2, 2, 3, 3, 3] == factorize(36)\nassert     [2, 2, 2, 3, 3, 3, 3] == factorize(36)\nassert     [2, 2, 2, 2, 2, 3, 3, 3] == factorize(36)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert [2,3,4,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97] == factorize(2881)\nassert [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2] == factorize(858)\nassert [2,2,2,2,3,3,3,5,5,7,7,11,11,13,13,17,17,19,19,23,23,29,29,31,31,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37] == factorize(83488)\nassert [2,3,5,7,11,13,17,19,23,29,31,37,43,49,53,61,67,71,73,79,83,89,97] == factorize(983)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     factorize(120) == [2, 2, 3, 5]\nassert     factorize(12) == [2, 3]\nassert     factorize(24) == [2, 2, 3]\nassert     factorize(30) == [2, 3, 5]\nassert     factorize(40) == [2, 2, 2, 5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(6) == [2, 3]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     factorize(10) == [2, 5]\nassert     factorize(36) == [2, 2, 3]\nassert     factorize(72) == [2, 3, 3]\nassert     factorize(300) == [2, 5, 3]\nassert     factorize(20) == [2, 2, 5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [2,2,3,3,5,7,11] == factorize(9)\nassert     [2,2,2,2] == factorize(8)\nassert     [2,3,5,7] == factorize(300)\nassert     [2,3,5,7] == factorize(300)\nassert     [2,2,2,2,2] == factorize(8)\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 1, 2]) == [1, 2]\nassert     remove_duplicates([1, 1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 1, 3, 4]) == [1, 2, 1, 3, 4]\nassert     remove_duplicates([1, 1, 2, 1, 1, 3, 4]) == [1, 2, 1, 1, 3, 4]\nassert     remove_duplicates([1, 1, 2, 1, 1, 3, 1, 4]) == [1, 2, 1, 3, 4]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_duplicates([4, 3, 2, 2, 1, 1]) == [4, 3, 2, 1]\nassert remove_duplicates([0, 0, 0, 1, 2, 3]) == [0, 1, 2, 3]\nassert remove_duplicates([1, 2, 3, 4, 5, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert remove_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert remove_duplicates([]) == []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 1]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 1, 2]) == [1, 2, 3, 2]\nassert     remove_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 2]) == [1, 2]\nassert     remove_duplicates([1, 2, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2, 3, 3, 3, 3, 3]) == [1, 2, 3, 3, 3, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert remove_duplicates([1, 1, 1, 1, 1, 2, 2, 3, 3, 4]) == [1, 2, 3, 4]\nassert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert remove_duplicates([1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert remove_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2, 2, 2]) == [1, 2]\nassert     remove_duplicates([1, 2, 1, 2, 1, 2, 1]) == [1, 2, 1, 2, 1]\n\n\ndef remove_duplicates_sorted(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 22]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 22]\nassert     remove_duplicates([1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 1, 2]) == [1, 2, 3, 4, 5, 6, 7]\nassert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 2, 3, 4, 4, 4, 5, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 1, 2, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     flip_case('ABcd') == 'abcd'\nassert     flip_case('aBcD') == 'ABcd'\nassert     flip_case('aBcD') == 'abcd'\nassert     flip_case('ABcd') == 'ABcd'\nassert     flip_case('aBCd') == 'Abcd'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         flip_case('abc') == 'ABC'\nassert         flip_case('ABC') == 'abc'\nassert         flip_case('AbC') == 'aBC'\nassert         flip_case('ABCD') == 'AbCD'\nassert         flip_case('AbCd') == 'AbCD'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     flip_case(\"aS\") == \"AS\"\nassert     flip_case(\"aS\") == \"AS\"\nassert     flip_case(\"aS\") == \"AS\"\nassert     flip_case(\"aS\") == \"AS\"\nassert     flip_case(\"aS\") == \"AS\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     flip_case('a') == 'A'\nassert     flip_case('A') == 'a'\nassert     flip_case('abc') == 'ABC'\nassert     flip_case('Abc') == 'Abc'\nassert     flip_case('aBc') == 'aBC'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     flip_case('Zn8aRn') == 'zN8ARn'\nassert     flip_case('zN8aRn') == 'n8ARn'\nassert     flip_case('N8aRn') == 'n8aRn'\nassert     flip_case('n8aRn') == 'n8aRn'\nassert     flip_case('N8aRn') == 'n8aRn'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     flip_case('Hi There') == 'hI tH rE'\nassert     flip_case('WwWw123456789') == 'WWWWWW1234456789'\nassert     flip_case('ver') == 'VER'\nassert     flip_case('Ver') == 'VER'\n\nprint(\"Passed all the tests!\")"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     flip_case('Hello World') == 'hELLO wORLD'\nassert     flip_case('Python') == 'pYTHON'\nassert     flip_case('99') == '99'\nassert     flip_case('99.9') == '99.9'\nassert     flip_case('[1, 2, 3]') == '[1, 2, 3]'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     flip_case('abC') == 'ABc'\nassert     flip_case('aBC') == 'AbC'\nassert     flip_case('abC') == 'AbC'\nassert     flip_case('abc') == 'Abc'\nassert     flip_case('AbC') == 'AbC'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     flip_case('hello') == 'HELLO', 'hello'\nassert     flip_case('Hello') == 'HELLO', 'Hello'\nassert     flip_case('hElLo') == 'HELLO', 'hElLo'\nassert     flip_case('HElLo') == 'HELLO', 'HElLo'\nassert     flip_case('HELLO') == 'HELLO', 'HELLO'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     flip_case(\"hello\") == \"HELLO\"\nassert     flip_case(\"how are you?\") == \"HOW ARE YOU?\"\nassert     flip_case(\"Upper Case\") == \"upper Case\"\nassert     flip_case(\"lower Case\") == \"lower Case\"\nassert     flip_case(\"fisrt letter in lowercase\") == \"FIRST LETTER IN LOWERCASE\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     concatenate(['Hello', 'World']) == 'HelloWorld'\nassert     concatenate(['Hello', 'World', 'I', 'Love', 'Coding']) == 'HelloWorldILoveCoding'\nassert     concatenate(['This', 'is', 'an', 'example']) == 'Thisisanexample'\nassert     concatenate(['Hello', 'World', 'I', 'Love', 'Coding']) == 'HelloWorldILoveCoding'\nassert     concatenate(['Hello', 'World', 'I', 'Love', 'Coding', 'is', 'Cool']) == 'HelloWorldILoveCodingisCool'\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     concatenate(['python', 'is', 'fun']) == 'pythonisfun'\nassert     concatenate(['fun', 'is', 'awesome']) == 'funisawesome'\nassert     concatenate(['hello','', 'world']) == 'hello world'\nassert     concatenate(['hello', 'world']) == 'hello world'\nassert     concatenate([]) == ''\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"abc\", \"d\", \"ef\"]) == \"abcdef\"\nassert     concatenate([]) == \"\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     concatenate(['abcd', 'efgh']) == 'abcdefgh'\nassert concatenate(['abc', 'def']) == 'abcdef'\nassert concatenate(['abc', 'def', 'ghi']) == 'abcdefghi'\nassert concatenate(['abc', 'def', 'ghi', 'jkl']) == 'abcdefghijkl'\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Check if string s is a palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([\"a\", \"b\"]) == \"a\" + \"b\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"a\" + \"b\" + \"c\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"a\" + \"b\" + \"c\" + \"d\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     concatenate(['a', 'b', 'c', 'd', 'e']) == 'a b c d e'\nassert     concatenate(['a', 'b', 'c']) == 'a b c'\nassert     concatenate(['', 'a', 'b', 'c', 'd', 'e']) == 'a b c d e'\nassert     concatenate(['a', 'b', 'c']) == 'a b c'\nassert     concatenate([]) == ''\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     concatenate([\"s\", \"a\", \"b\", \"c\"]) == \"sabcb\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"s\"]) == \"s\"\nassert     concatenate([]) == \"\"\n\ndef reverse(string: str) -> str:\n    \"\"\" Reverse a string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     concatenate([\"pizza\", \"burgers\", \"pasta\"])    == \"pizzaburgerspasta\"\nassert     concatenate([\"pizza\", \"burgers\", \"pasta\", \"pizza\"])    == \"pizzaburgerspastapizza\"\n\ndef prefix(input_string: str) -> str:\n    \"\"\" Given a string, return the prefix of the string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     concatenate([\"a\", \"b\"]) == \"ab\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"abcde\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdef\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert     concatenate([\"hello\", \"world\", \"123\"]) == \"helloworld123\"\nassert     concatenate([\"123\", \"123\", \"123\", \"123\", \"123\"]) == \"123123123123123123123\"\nassert     concatenate
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_prefix(['abc', 'abd', 'abcde'], 'ab') == ['abc', 'abcde']\nassert     filter_by_prefix(['abc', 'abd', 'abcde'], 'abx') == ['abc']\nassert     filter_by_prefix(['abc', 'abd', 'abcde'], 'abcd') == ['abc', 'abcde']\nassert     filter_by_prefix(['abc', 'abd', 'abcde'], 'abc') == ['abc', 'abcde']\nassert     filter_by_prefix(['abc', 'abd', 'abcde'], 'abcx') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"Hello\", \"World\", \"I\", \"Love\", \"You\", \"I\", \"Love\", \"You\", \"I\", \"Love\", \"You\"], \"Hello\") == [\"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"I\", \"I\", \"I\", \"I\", \"I\", \"I\", \"I\"]\nassert     filter_by_prefix([\"Hello\", \"World\", \"I\", \"Love\", \"You\", \"I\", \"Love\", \"You\", \"I\", \"Love\", \"You\"], \"Hello\") == [\"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"I\", \"I\", \"I\", \"I\", \"I\", \"I\", \"I\"]\nassert     filter_by_prefix([\"Hello\", \"World\", \"I\", \"Love\", \"You\", \"I\", \"Love\", \"You\", \"I\", \"Love\", \"You\"], \"Hello\") == [\"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", "
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert filter_by_prefix([\"a\", \"ab\", \"abc\"], \"\") == [\"a\", \"ab\", \"abc\"]\nassert filter_by_prefix([\"a\", \"b\", \"c\"], \"a\") == [\"a\", \"ab\", \"abc\"]\nassert filter_by_prefix([\"abc\", \"a\", \"b\"], \"a\") == [\"a\", \"ab\", \"abc\"]\nassert filter_by_prefix([\"abc\", \"a\", \"b\"], \"z\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_prefix(['dog', 'cat','monkey', 'turtle', 'eagle', 'deer', 'pig', 'piglet'], 'cat') == ['cat', 'turtle', 'eagle', 'deer', 'pig']\nassert     filter_by_prefix(['cat', 'dog','monkey', 'turtle', 'eagle', 'deer', 'pig', 'piglet'], 'd') == ['dog', 'deer', 'pig', 'piglet']\nassert     filter_by_prefix(['dog', 'cat','monkey', 'turtle', 'eagle', 'deer', 'pig', 'piglet'], 't') == ['turtle', 'eagle', 'deer', 'tig']\nassert     filter_by_prefix(['dog', 'cat','monkey', 'turtle', 'eagle', 'deer', 'pig', 'piglet'], 'e') == ['eagle', 'eel', 'eel', 'eel', 'eel', 'eel', 'eel']\nassert     filter_by_prefix(['dog', 'cat','monkey', 'turtle', 'eagle', 'deer', 'pig', 'piglet'], 'g') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_prefix(['banana', 'pear', 'apple', 'berry', 'kiwi'], 'pea') == ['pear']\nassert     filter_by_prefix(['banana', 'pear', 'apple', 'berry', 'kiwi'], 'pl') == ['kiwi']\nassert     filter_by_prefix(['banana', 'pear', 'apple', 'berry', 'kiwi'], 'an') == ['banana', 'apple']\nassert     filter_by_prefix(['banana', 'pear', 'apple', 'berry', 'kiwi'], 'an') == ['banana', 'apple']\nassert     filter_by_prefix(['banana', 'pear', 'apple', 'berry', 'kiwi'], 'ban') == ['banana']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([], \"\") == []\nassert     filter_by_prefix([\"a\"], \"a\") == [\"a\"]\nassert     filter_by_prefix([\"a\", \"b\"], \"a\") == [\"a\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"a\") == [\"a\", \"b\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"b\") == [\"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [\n        \"hello\",\n        \"hello2\",\n        \"hello3\",\n    ] == filter_by_prefix([\"hello\", \"hello2\", \"hello3\"], \"he\")\nassert     [\n        \"hello\",\n        \"hello2\",\n        \"hello3\",\n    ] == filter_by_prefix([\"hello\", \"hello2\", \"hello3\"], \"hello\")\nassert     [\n        \"hello\",\n        \"hello2\",\n        \"hello3\",\n    ] == filter_by_prefix([\"hello\", \"hello2\", \"hello3\"], \"hello2\")\nassert     [\n        \"hello\",\n        \"hello2\",\n        \"hello3\",\n    ] == filter_by_prefix([\"hello\", \"hello2\", \"hello3\"], \"hello3\")\nassert     [\n        \"hello\",\n        \"hello2\",\n        \"hello3\",\n    ] == filter_by_prefix([\"hello\", \"hello2\", \"hello3\"], \"hello4\")\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nassert \nassert\nassert\nassert\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([], '') == []\nassert     filter_by_prefix([], 'a') == []\nassert     filter_by_prefix(['', 'a', 'b', 'c'], 'a') == ['a', 'b', 'c']\nassert     filter_by_prefix(['', 'a', 'b', 'c'], 'b') == ['b', 'c']\nassert     filter_by_prefix(['', 'a', 'b', 'c'], 'c') == ['c']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"], \"b\") == ['bravo', 'charlie', 'delta']\nassert     filter_by_prefix([\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"], \"Z\") == []\nassert     filter_by_prefix([\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"], \"aa\") == []\nassert     filter_by_prefix([\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"], \"\") == [\"alpha\", \"bravo\", \"charlie\", \"delta\", \"echo\"]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_positive([1,2,-3,4,-5]) == [1,2,4]\nassert     get_positive([-1,-2,-3,-4,-5]) == [-1,-2,-3,-4]\nassert     get_positive([]) == []\n\ndef reverse_list(l: list):\n    \"\"\"Return the reverse of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         [7, 8, 9] == get_positive(list(range(-5, 5)))\nassert         [7, 8, 9, -5] == get_positive(list(range(-5, 5, 2)))\nassert         [] == get_positive([])\nassert         [2, 3, 5] == get_positive([2, 3, 5])\nassert         [2, 3, 5] == get_positive([-2, 3, 5])\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_positive([3, 3, -3, 3]) == [3]\nassert     get_positive([3, 3, -3, 3, 3, -3, 3]) == [3, 3]\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         get_positive([3, -2, 3, -1, -3, 5, -2, -2, -1, 3, -2]) == [-2, 3, -1, 5]\nassert         get_positive([3, -2, -3, -1, -3, 5, -2, -2, -1, 3, -2]) == [-2, -3, -1, 5]\nassert         get_positive([]) == []\nassert         get_positive([3, -2, -3, -1, -3, 5, -2, -2, -1, 3, -2, 3, -2]) == [3, -2, -3, -1, 5]\n\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [1,2,3,4,5] == get_positive([-1,-2,-3,-4,-5])\nassert     [1,2,3,4] == get_positive([1,2,3,-4])\nassert     [1,2,3] == get_positive([1,2,3,4])\nassert     [1,2,3] == get_positive([1,2,3,4,5])\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, -2, 3, -4, 5, -6, 7, -8, 9] == get_positive([1, -2, 3, -4, 5, -6, 7, -8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1] == get_positive([1])\nassert     [1, 2] == get_positive([1, 2])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_positive([2, -1, -2, 5, 6, -7, 8, 9, -10, 11, -12]) == [2, 5, 6, 8, 9, 11, 12]\nassert     get_positive([]) == []\nassert     get_positive([2, -1, -2, 5, 6, -7, 8, 9, -10, 11, -12, -13, -14]) == [2, 5, 6, 8, 9, 11, 12, 13, 14]\nassert     get_positive([-2, -1, 0, 1, 2]) == [1, 2]\nassert     get_positive([-2, -1, 0, 1, 2, -3, -4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [x for x in range(-5, 5)] == get_positive(range(-5, 5))\nassert     [x for x in range(-5, 0)] == get_positive(range(-5, 0))\nassert     [x for x in range(0, 5)] == get_positive(range(0, 5))\nassert     [x for x in range(5, 10)] == get_positive(range(5, 10))\nassert     [x for x in range(-10, 5)] == get_positive(range(-10, 5))\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1,2,3,4,5] == get_positive([1,-2,3,4,5])\nassert     [2,3,4,5] == get_positive([-2,1,-3,4,-5])\nassert     [-2,3,4,5] == get_positive([-2,-3,-4,-5])\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_positive([3,4,-1,5,-3,0,6,7]) == [3,4,5,6,7]\nassert     get_positive([1,3,4,5]) == [1,3,4,5]\nassert     get_positive([-3,0,6,7]) == [6,7]\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (is_prime(2) == True)\nassert     (is_prime(9) == False)\nassert     (is_prime(0) == False)\nassert     (is_prime(-1) == False)\nassert     (is_prime(1) == False)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(13) == True\nassert     is_prime(21) == False\nassert     is_prime(29) == False\nassert     is_prime(8) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_prime(1) is False\nassert     is_prime(2) is True\nassert     is_prime(3) is True\nassert     is_prime(4) is False\nassert     is_prime(5) is True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_prime(17) is True\nassert     is_prime(19) is True\nassert     is_prime(21) is True\nassert     is_prime(31) is True\nassert     is_prime(37) is True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(7) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_prime(0) == False\nassert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_prime(0) == False\nassert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_prime(7) == True\nassert     is_prime(9) == False\nassert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     poly([1, 0, 1], 0) == 0\nassert     poly([1, 0, 1, -1], 0) == 0\nassert     poly([1, 0, 1, -1], 1) == 1\nassert     poly([1, 0, 1, -1], 1.1) == 1.1\nassert     poly([1, 0, 1, -1], 1.9) == 1.9\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     poly([-3, 1, -3, 2, 4], -3) == 0\nassert     poly([3, -1, 3, 2, 4], 3) == 0\nassert     poly([-3, 1, -3, 2, 4], 1) == 0\nassert     poly([-3, 1, -3, 2, 4], 2) == 0\nassert     poly([-3, 1, -3, 2, 4], 3) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     poly([1, 2, 3, -5, 6], 0) == 0\nassert     poly([0, 0, 3, 2, 1], 0) == 0\nassert     poly([0, 0, 0, 3, 2, 1], 0) == 0\nassert     poly([0, 0, 0, 0, 3, 2, 1], 0) == 0\nassert     poly([0, 0, 0, 0, 0, 3, 2, 1], 0) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     poly([1, 1], 0) == 0\nassert     poly([0, 1], 0) == 0\nassert     poly([1, -1], 0) == 0\nassert     poly([1, -1], 0.5) == 1\nassert     poly([1, -1], 1) == -1\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [3, 2, 1, 0] == find_zero([-2, 1, 0, 3])\nassert     [5, 3, -3, -1] == find_zero([-2, 3, 1, 5])\nassert     [-3, 0, 3] == find_zero([-2, 0, 3, 1])\nassert     [-3, 0, 3] == find_zero([-2, 3, 0, 1])\nassert     [-3, 0, 3, 0, -1] == find_zero([-2, 3, 0, 0, 1])\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     poly([1, 1, 1, 1, 1], -1) == 0\nassert     poly([1, 1, 1, 1], -1) == 0\nassert     poly([1, 1, 1, 1], 0) == 0\nassert     poly([1, 1, 1, 1], 1) == 0\nassert     poly([1, 1, 1, 1], 2) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     poly([1, 1, 1, 1, 1], -3) == 0\nassert     poly([1, 1, 1, 1, 1], -2) == 0\nassert     poly([1, 1, 1, 1, 1], -1) == 0\nassert     poly([1, 1, 1, 1, 1], 0) == 0\nassert     poly([1, 1, 1, 1, 1], 1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     poly([1, -2, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -2) == 0\nassert     poly([1, -2, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1) == 0\nassert     poly([1, -2, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 2) == 0\nassert     poly([1, -2, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 3) == 0\nassert     poly([1, -2, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 4) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     poly([1, 1, 1, 0, 0], -1.2) == 0\nassert     poly([1, 1, 1, 0, 0], 0) == 0\nassert     poly([0, 1, 1, 0, 0], 1.2) == 0\nassert     poly([0, 0, 1, 1, 0], 0) == 0\nassert     poly([1, 1, 0, 0, 0], 1.2) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     poly([1, 1, 1, 1], 1) == 0\nassert     poly([2, -3, 2, 1], 1) == -1\nassert     poly([2, -3, 2, 1], 2) == -2\nassert     poly([2, -3, 2, 1], 3) == -3\nassert     poly([2, -3, 2, 1], 4) == -4\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_third([]) == []\nassert     sort_third([0]) == [0]\nassert     sort_third([1, 2, 3]) == [1, 3]\nassert     sort_third([0, 3, 4, 6, 10, 12]) == [3, 0, 4, 6, 10]\nassert     sort_third([4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [sort_third([4,3,1,7])\n         == [4,3,1,7]]\nassert     [sort_third([1,2,3,4])\n         == [1,2,3,4]]\nassert     [sort_third([9,8,7,6])\n         == [9,8,7,6]]\nassert     [sort_third([9,8,7,6,5])\n         == [5,6,7,8,9]]\nassert     [sort_third([1,2,3,4,5])\n         == [1,2,3,4,5]]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_third([1, 3, 2, 4, 5, 6, 7, 8]) == [1, 3, 2, 4, 5, 6, 7, 8]\nassert     sort_third([]) == []\nassert     sort_third([1, 3, 2, 4, 5, 6, 7, 8]) == [1, 3, 2, 4, 5, 6, 7, 8]\nassert     sort_third([4, 1, 2, 3]) == [4, 1, 2, 3]\nassert     sort_third([1, 3, 2, 4, 5, 6, 7, 8]) == [1, 3, 2, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     [5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (sort_third([3, 1, 4, 7, 2]) == [1, 3, 4, 2, 7])\nassert     (sort_third([3, 3, 2, 1, 4]) == [3, 3, 2, 1, 4])\nassert     (sort_third([5, -1, -4, 0, -7, 3]) == [-1, 0, -4, -7, 5, 3])\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [sort_third(list(range(i, i+3)))\n            for i in range(0, 27, 3)] == [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 25, 26]]\n\ndef is_anagram(str1: str, str2: str) -> bool:\n    \"\"\"Return True if str1 and str2 are anagrams, False otherwise.\n    Anagrams are strings made up of the same letters, each occurring the same number of times.\n    \"\"\"\n    pass\n\ndef convert_to_numbers(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l2 such that l2 is identical to l\n    with each element in l replaced by the corresponding element of l2 (if l2 is a number)\n    or by the number of occurances of each element in l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nassert(sort_third([3,5,8,2,1,4]) == [1,2,3,4,5,8])\nassert(sort_third([5,3,4,2,1,8]) == [1,2,3,4,5,8])\nassert(sort_third([5,5,5,3,5,4]) == [3,5,5,5,5,4])\nassert(sort_third([2,3,4,1,2,3,5,4,3,5,1]) == [1,2,3,3,4,4,5,5,2,3,2])\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_third([1, 3, 2, 5, 4, 6]) == [1, 3, 2, 4, 5, 6]\nassert     sort_third([5, 3, 1, 2, 4, 6]) == [1, 3, 2, 4, 5, 6]\nassert     sort_third([6, 5, 4, 3, 2, 1]) == [1, 3, 2, 4, 5, 6]\nassert     sort_third([2, 1, 3, 4, 5, 6]) == [1, 3, 2, 4, 5, 6]\nassert     sort_third([3, 1, 2, 4, 5, 6]) == [1, 3, 2, 4, 5, 6]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_third([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == [1, 3, 5, 9, 11, 13, 15, 17, 19]\nassert sort_third([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert sort_third([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert sort_third([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     sort_third([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     sort_third([1, -2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, -2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test_unique():\n    assert unique([1,2,3,2,3,4]) == [1,2,3,4]\n    assert unique([1,2,3,2,3,4,2,3]) == [1,2,3,4]\n    assert unique([]) == []\n    "
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique([1,1,2,2,3,3,4,4,5]) == [1,2,3,4,5]\nassert     unique([]) == []\nassert     unique([1,2,2,3,3,3,4,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,1,3,3,3,4,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,2,3,3,3,4,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [2,3,4]     == unique([2,3,3,4])\nassert     [2,3,4]     == unique([2,3,3])\nassert     [2,3,4]     == unique([2,3,3,4,4])\n\ndef factorial(n: int):\n    \"\"\"Return factorial of a number\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique([1,1,1,2,2,2,3,3,3]) == [1,2,3]\nassert     unique([1,2,3,1,2,3]) == [1,2,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sorted(unique([1, 1, 1, 2, 2, 3, 3])) == [1, 2, 3]\nassert     sorted(unique([1, 2, 3, 4, 5, 5])) == [1, 2, 3, 4, 5]\nassert     sorted(unique([1, 1, 2, 2, 3, 3])) == [1, 2, 3]\nassert     sorted(unique([1, 2, 3, 4, 5, 5])) == [1, 2, 3, 4, 5]\nassert     sorted(unique([1, 2, 3, 4, 1, 2, 3])) == [1, 2, 3, 4]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique([1,2,2,3,3,3,4,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,2,2,3,3,3,3,3]) == [1,2,3]\nassert     unique([]) == []\n\ndef is_sorted(l: list):\n    \"\"\"Check if a list is sorted\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique([1,1,1,1,2,2,2,3,3,3,3]) == [1, 2, 3]\nassert     unique([1,1,1,1,2,2,2,3,3,3,3]) == [1, 2, 3]\nassert     unique([1,1,1,1,2,2,2,3,3,3,3]) == [1, 2, 3]\nassert     unique([1,1,1,1,1,2,2,2,3,3,3,3]) == [1, 2, 3]\nassert     unique([1,1,1,1,1,1,2,2,2,3,3,3,3]) == [1, 2, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef unique2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \"\"\"\n    s = set()\n    for x in l:\n        if x not in s:\n            s.add(x)\n    return sorted(s)\n\nassert unique2([1,2,2,3,3,3]) == [1,2,3]\nassert unique2([1,1,2,2,3,3,3]) == [1,2,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef unique2(l: list):\n    \"\"\"Return sorted unique elements in a list, in O(1) space\n    \"\"\"\n    pass\n\n\ndef test_unique():\n    assert \n    assert unique2([1, 2, 1, 3]) == [1, 2, 3]\n    "
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique([1, 2, 3, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 3, 4, 5, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique([\"a\", \"b\", \"a\", \"b\"]) == [\"a\", \"b\"]\n\ndef max(a: list, key=None):\n    \"\"\"\n    Return the maximum element of a list\n\n    >>> max([1, 2, 3])\n    3\n    >>> max([1, 3, 2])\n    3\n    >>> max([1, 2, 3], key=abs)\n    1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_element([3, -1, 0, 4, 1, -2, 5]) == 4\nassert     max_element([1]) == 1\nassert     max_element([]) == None\nassert     max_element([-1, -2, -3]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_element([2, 1]) == 2\nassert     max_element([-2, -1]) == -1\nassert     max_element([-1, -1, -1]) == -1\nassert     max_element([0]) == 0\nassert     max_element([0, 1, 2]) == 2\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_element(range(0, 100)) == 99\nassert     max_element([-3, 5, -1, 3, 2, 1, 2, 3, 4]) == 4\n\ndef max_element2(l: list):\n    \"\"\"Return maximum element in the list, without built-in function.\n    \"\"\"\n    maximum = l[0]\n    for i in range(len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_element([-1, 2, 3, 4, 5, -2, -1]) == 5\nassert     max_element([-1, -2, -3, -4, -5, 0]) == 0\nassert     max_element([]) == None\nassert     max_element([10, 9, 8, 7, 6]) == 10\nassert     max_element([10, 9, 8, -1, -2, -3, -4, -5, -6]) == 10\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([10,-1]) == 10\nassert     max_element([-10,-1]) == -1\nassert     max_element([]) == None\nassert     max_element(list(range(1,100,2))) == 99\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([]) == None\nassert     max_element([1,2,3,4,5,6]) == 6\nassert     max_element([\"Hello\", \"World\", \"in\", \"Python\"]) == \"in\"\nassert     max_element([[1,2,3],[4,5,6],[7,8,9]]) == 9\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         max_element(list(range(1, 5))) == 4\nassert     max_element(list(range(1, 5, 2))) == 4\nassert     max_element(list(range(2, 5))) == 4\nassert     max_element(list(range(5, 2, -1))) == 5\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_element([0,1,2,3,4,5]) == 5\nassert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3,4]) == 4\nassert     max_element([1]) == 1\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([1,2,0]) == 2\nassert     max_element([0,1,2]) == 2\nassert     max_element([0,2,1]) == 2\nassert     max_element([3,2,1]) == 3\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_element([]) == None\nassert     max_element([1]) == 1\nassert     max_element([1, 2]) == 2\nassert     max_element([1, 2, 3]) == 3\nassert     max_element([-1, -2, -3]) == -1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fizz_buzz(17) == 5\nassert     fizz_buzz(19) == 2\nassert     fizz_buzz(100) == 15\nassert     fizz_buzz(101) == 0\nassert     fizz_buzz(200) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert izip(fizz_buzz(17), [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == [(0,0),(0,0),(0,0),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]\nassert izip(fizz_buzz(100), [0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) == [(0,0),(0,0),(0,0),(0,0),(0,0),(1,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0),(0,0)]\n\ndef fizzbuzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [fizz_buzz(i) for i in [3, 15, 9, 25, 17, 26, 0, 18, 23, 17, 28, 28, 31, 29, 30, 22, 22, 25, 26, 22, 17, 28, 22, 30, 19, 26, 22, 25, 22, 22, 19, 22, 22, 19, 26, 22, 26, 22, 26, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fizz_buzz(5) == 2\nassert     fizz_buzz(10) == 4\nassert     fizz_buzz(15) == 5\nassert     fizz_buzz(20) == 6\nassert     fizz_buzz(30) == 8\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fizz_buzz(0) == 0\nassert     fizz_buzz(7) == 0\nassert     fizz_buzz(14) == 2\nassert     fizz_buzz(15) == 0\nassert     fizz_buzz(30) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert izip(range(100), fizz_buzz(100)) == [\n    (0, None),\n    (1, None),\n    (2, None),\n    (3, None),\n    (4, None),\n    (5, None),\n    (6, None),\n    (7, None),\n    (8, None),\n    (9, None),\n    (10, None),\n    (11, None),\n    (12, None),\n    (13, None),\n    (14, None),\n    (15, None),\n    (16, None),\n    (17, None),\n    (18, None),\n    (19, None),\n    (20, None),\n    (21, None),\n    (22, None),\n    (23, None),\n    (24, None),\n    (25, None),\n    (26, None),\n    (27, None),\n    (28, None),\n    (29, None),\n    (30, None),\n    (31, None),\n    (32, None),\n    (33, None),\n    (34, None),\n    (35, None),\n    (36, None),\n    (37, None),\n    (38, None),\n    (39, None),\n    (40, None),\n    (41, None),\n    (42, None),\n    (43, None),\n    (44, None),\n    (45, None),\n    (46, None),\n    (47, None),\n    (48, None),\n    (49, None),\n    (50, None),\n    (51, None),\n    (52, None),\n    (53, None),\n    (54, None),\n    (55, None),\n    (56, None),\n    (57, None),\n    (58, None),\n    (59, None),\n    (60, None),\n    (61, None),\n    (62, None),\n    (63, None),\n    (64, None),\n    (65, None),\n    (66, None),\n    (67, None),\n    (68, None),\n    (69, None),\n    (70, None),\n    (71, None),\n    (72, None),\n    (73, None),\n    (74, None),\n    (75, None),\n    (76, None),\n    (77, None),\n    (78, None),\n    (79, None),\n    (80, None),\n    (81, None),\n    (82, None),\n    (83, None),\n    (84, None),\n    (85, None),\n    (86, None),\n    (87, None),\n    (88, None),\n    (89, None),\n    (90, None),\n    (91, None),\n    (92, None),\n    (93, None),\n    (94, None),\n    (95, None),\n    (96, None),\n    (97, None),\n    (98, None),\n    (99, None),\n    (100, None),\n    (101, None),\n    (102, None),\n    (103, None),\n    (104, None),\n    (105, None),\n    (106, None),\n    (107, None),\n    (108, None),\n    (109, None),\n    (110, None),\n    (111, None),\n    (112, None),\n    (113, None),\n    (114, None),\n    (115, None),\n    (116, None),\n    (117, None),\n    (118, None),\n    (119, None),\n    (120, None),\n    (121, None),\n    (122, None),\n    (123, None),\n    (124, None),\n    (125, None),\n    (126, None),\n    (127, None),\n    (128, None),\n    (129, None),\n    (130, None),\n    (131, None),\n    (132, None),\n    (133, None),\n    (134, None),\n    (135, None),\n    (136, None),\n    (137, None),\n    (138, None),\n    (139, None),\n    (140, None),\n    (141, None),\n    (142, None),\n    (143, Non"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fizz_buzz(101) == 2\nassert     fizz_buzz(10) == 2\nassert     fizz_buzz(8) == 0\nassert     fizz_buzz(19) == 1\nassert     fizz_buzz(100) == 21\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fizz_buzz(15) == 3\nassert     fizz_buzz(30) == 6\nassert     fizz_buzz(63) == 6\nassert     fizz_buzz(100) == 25\nassert     fizz_buzz(111) == 11\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_even([1, 2, 3, 4, 5, 6]) == [1, 3, 2, 4, 6, 5]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 2, 4, 6, 7, 8, 9, 5]\nassert     sort_even([1]) == [1]\nassert     sort_even([]) == []\nassert     sort_even([0, 10, 25, 33, 42, 43, 44, 49]) == [0, 10, 25, 33, 42, 43, 44, 49]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_even([5,1,3,2,4]) == [5,3,2,4,1], 'Failed'\nassert     sort_even([5,1,2,3,4]) == [5,2,4,3,1], 'Failed'\nassert     sort_even([1,2,3,4,5]) == [1,2,3,4,5], 'Failed'\nassert     sort_even([2,1,3,4,5]) == [2,1,3,4,5], 'Failed'\n\ndef find_sparse(l: list, k: int):\n    \"\"\"Returns the index of the last occurence of k in l, or -1 if k is not in l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_even([10, 15, 17, 17, 11, 22, 33, 11, 22, 10]) == [10, 22, 17, 22, 10, 11, 11, 33, 10, 15]\nassert     sort_even([17, 11, 22, 10, 33, 22, 22, 10, 11, 17]) == [17, 22, 22, 22, 10, 11, 22, 33, 10, 22]\nassert     sort_even([10, 22, 17, 22, 10, 22, 22, 33, 10, 22]) == [10, 22, 22, 22, 22, 22, 10, 22, 10, 17]\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_even([1,4,3,2,9,8,7]) == [1,3,2,4,8,7,9]\nassert     sort_even([2,2,1,1,2,3,4]) == [1,1,2,2,3,4,2]\nassert     sort_even([6,4,2,5,6,4,5,2,2]) == [4,4,2,5,5,6,6,2,2]\nassert     sort_even([5,3,3,1,1,1,1,1,1]) == [1,1,1,3,3,1,1,1,1]\nassert     sort_even([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9,2,4,6,8]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_even([1,2,3,4,5,6,7]) == [2,4,6,1,3,5,7]\nassert     sort_even([1,3,4,5,6,7,2]) == [2,4,6,1,3,5,7]\nassert     sort_even([1,2,3,4,5,6,7,8]) == [2,4,6,1,3,5,7,8]\nassert     sort_even([1,2,3,4,5,6,7,8]) == [2,4,6,1,3,5,7,8]\n\ndef sort_large(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [0, 1, 2, 3, 4] == sort_even([4, 2, 1, 3, 0])\nassert [1, 2, 3, 4, 0] == sort_even([4, 3, 2, 1, 0])\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_even(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd'], \"Expected ['a', 'b', 'c', 'd'], got {}\".format(sort_even(['a', 'b', 'c', 'd']))\nassert     sort_even([1,2,3,4,5]) == [1,2,3,4,5], \"Expected [1,2,3,4,5], got {}\".format(sort_even([1,2,3,4,5]))\nassert     sort_even([-1,-2,-3,-4,-5]) == [-5,-4,-3,-2,-1], \"Expected [-5,-4,-3,-2,-1], got {}\".format(sort_even([-1,-2,-3,-4,-5]))\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_even([2,3,4,5,6,7,8])    == [2,6,4,8,5,7,3], \"Check the function you've written.\"\nassert     sort_even([7,8,11,15,16,19,22])    == [8,16,15,19,11,22,7], \"Check the function you've written.\"\nassert     sort_even([25,27,29,31,32,35,37,38,39,43])    == [8,16,15,19,11,22,7,29,31,35], \"Check the function you've written.\"\n\ndef reverse_pair(l: list):\n    \"\"\"This function takes a list l and returns a list l2 such that\n    l2 is identical to l in the reverse of the pairs of values,\n    but the indices of the elements in l2 are not reversed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_even([1, 2, 3, 4, 5]) == [1, 3, 5, 2, 4]\nassert     sort_even([3, 2, 1, 4, 5]) == [1, 3, 5, 2, 4]\nassert     sort_even([]) == []\nassert     sort_even([0, 1, 2, 3, 4, 5]) == [0, 2, 4, 1, 3, 5]\nassert     sort_even([1, 1, 2, 2, 3, 4, 5]) == [1, 1, 2, 2, 3, 4, 5]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([1]) == [1]\nassert     sort_even([1, 2]) == [2, 1]\nassert     sort_even([1, 2, 3]) == [2, 1, 3]\nassert     sort_even([2, 1, 3]) == [2, 1, 3]\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_cyclic(\"awaglknagawunagwkwagl\") == \"awaglknagawunagwkwagl\"\nassert     decode_cyclic(\"aabcc\") == \"aaabc\"\nassert     decode_cyclic(\"aaa\") == \"aa\"\nassert     decode_cyclic(\"aaaa\") == \"a\"\nassert     decode_cyclic(\"baabaa\") == \"baaba\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encode_cyclic(\"abcde\") == \"abcdeabcde\"\nassert     encode_cyclic(\"a\") == \"abcde\"\nassert     encode_cyclic(\"ab\") == \"abcde\"\nassert     encode_cyclic(\"bcd\") == \"abcde\"\nassert     encode_cyclic(\"cdef\") == \"abcde\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encode_cyclic(\"ABB\") == \"BBA\"\nassert     encode_cyclic(\"ABC\") == \"CAB\"\nassert     encode_cyclic(\"AB\") == \"BAB\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decode_cyclic(\"sdccc\") == \"aabcc\"\nassert     decode_cyclic(\"scsdc\") == \"aacsc\"\nassert     decode_cyclic(\"sdcsc\") == \"aacsc\"\nassert     decode_cyclic(\"scsdc\") == \"aacsc\"\nassert     decode_cyclic(\"sdcsc\") == \"aacsc\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decode_cyclic(encode_cyclic(\"ababcd\")) == \"ababcd\"\nassert decode_cyclic(encode_cyclic(\"xyx\")) == \"xyx\"\nassert decode_cyclic(encode_cyclic(\"abcdxyz\")) == \"abcdxyz\"\nassert decode_cyclic(encode_cyclic(\"\")) == \"\"\nassert decode_cyclic(encode_cyclic(\"aba\")) == \"aba\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decode_cyclic(\"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"xyz\")) == \"xyz\"\nassert     decode_cyclic(encode_cyclic(\"xyz\")) == \"xyz\"\nassert     decode_cyclic(encode_cyclic(\"xyz\")) == \"xyz\"\nassert     decode_cyclic(encode_cyclic(\"xyz\")) == \"xyz\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decode_cyclic('CABBACBACAB') == 'ABCBACAB'\nassert     decode_cyclic('XABBC') == 'ABC'\nassert     decode_cyclic('CABBABCABBA') == 'ABC'\nassert     decode_cyclic('ABABABABAB') == 'AB'\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"\nassert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"\nassert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"\nassert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decode_cyclic(\"eknqpk\") == \"hello\"\nassert decode_cyclic(\"rhqxyjd\") == \"python\"\nassert decode_cyclic(\"ssqixwf\") == \"a\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (prime_fib(5) == 13)\nassert     (prime_fib(11) == 29)\nassert     (prime_fib(37) == 131)\nassert     (prime_fib(37 + 1) == 142)\nassert     (prime_fib(51) == 193)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     isinstance(prime_fib(11), list)\nassert     isinstance(prime_fib(11), list)\nassert     isinstance(prime_fib(12), list)\nassert     isinstance(prime_fib(13), list)\nassert     isinstance(prime_fib(14), list)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_fib(0) == 2\nassert     prime_fib(1) == 3\nassert     prime_fib(2) == 5\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 11\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     int(prime_fib(5)) == 13\nassert     int(prime_fib(9)) == 61\nassert     int(prime_fib(11)) == 89\nassert     int(prime_fib(23)) == 61\nassert     int(prime_fib(31)) == 97\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_fib(5) == 11\nassert     prime_fib(6) == 13\nassert     prime_fib(7) == 17\nassert     prime_fib(8) == 19\nassert     prime_fib(9) == 23\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 5\nassert     prime_fib(5) == 7\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prime_fib(50) == 58, \"Wrong answer for 50\"\nassert     prime_fib(50) == 60, \"Wrong answer for 50\"\nassert     prime_fib(200) == 313, \"Wrong answer for 200\"\nassert     prime_fib(250) == 397, \"Wrong answer for 250\"\nassert     prime_fib(500) == 649, \"Wrong answer for 500\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_prime_fib(prime_fib(2))     == True\nassert     is_prime_fib(prime_fib(3))     == True\nassert     is_prime_fib(prime_fib(4))     == True\nassert     is_prime_fib(prime_fib(5))     == True\nassert     is_prime_fib(prime_fib(6))     == True\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\nassert     prime_fib(5) == 11\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    n = 10\n    print(prime_fib(n))\n\n    n = 100\n    print(prime_fib(n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1,2,3]) == False\nassert     triples_sum_to_zero([1,2,1]) == True\nassert     triples_sum_to_zero([-1,2,3]) == False\nassert     triples_sum_to_zero([-1,-1,-1]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([0, 0, 0, -3, -3, 0, 3, 3, 0, -3, 3, 3])\nassert     not triples_sum_to_zero([0, 0, 0, -3, -3, 3, 3, 3, 0, -3, 3, 3])\nassert     not triples_sum_to_zero([-2, -2, -2, 0, 0, 0, 0, 2, 2, 2, 2])\nassert     triples_sum_to_zero([-3, -3, -3, 0, 0, 0, 3, 3, 3, 0, -3, 3, 3])\nassert     not triples_sum_to_zero([-3, -3, -3, 0, 0, 0, 3, 3, 3, 0, -3, 3, 3])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([1,2,3,2,1]) == True\nassert     triples_sum_to_zero([1,2,3,4,5]) == False\nassert     triples_sum_to_zero([1,1,1,1]) == True\nassert     triples_sum_to_zero([-3,-2,-1,0,1,2,3]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([0,0,0]) is True\nassert     triples_sum_to_zero([0,0,1]) is False\nassert     triples_sum_to_zero([-10,3,5,0,-10,-10,-10,-10]) is True\nassert     triples_sum_to_zero([1,2,3,4]) is False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([2,3,7,10,-2,5,1,10]) == False\nassert     triples_sum_to_zero([1,0,1,1,3]) == True\nassert     triples_sum_to_zero([10,0,-3,2,1,-5]) == False\nassert     triples_sum_to_zero([1,1,1,1,-1]) == True\nassert     triples_sum_to_zero([-10,0,-3,2,1,-5]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, 3])\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, -2])\nassert     triples_sum_to_zero([0, 1, 2, 3]) == False\nassert     triples_sum_to_zero([0, -1, -2, -3]) == False\nassert     triples_sum_to_zero([0, 0, 0]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([]) == False, \"broken triples_sum_to_zero\"\nassert     triples_sum_to_zero([1, 1, 1]) == False, \"broken triples_sum_to_zero\"\nassert     triples_sum_to_zero([1, -1, 1]) == True, \"broken triples_sum_to_zero\"\nassert     triples_sum_to_zero([1, -1, -1]) == True, \"broken triples_sum_to_zero\"\nassert     triples_sum_to_zero([1, 1, -1]) == True, \"broken triples_sum_to_zero\"\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         triples_sum_to_zero([1, -3, 1])\nassert         not triples_sum_to_zero([1, -2, 1, -3])\nassert         triples_sum_to_zero([1, 1, 1, 1])\nassert         not triples_sum_to_zero([1, 1, 2, 3])\nassert         triples_sum_to_zero([0, 0, 0, 0])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, -3, 1]) is True\nassert     triples_sum_to_zero([1, 2, 3, -4, 1]) is False\nassert     triples_sum_to_zero([1, 2, 3, -3, 4]) is True\nassert     triples_sum_to_zero([1, 2, 3, -3, 4, -1]) is False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([3, -2, 1]) == True\nassert     triples_sum_to_zero([-2, -1, -3]) == True\nassert     triples_sum_to_zero([0, 1, 2]) == False\nassert     triples_sum_to_zero([3, -3, 1]) == True\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     car_race_collision(4) == 0\nassert     car_race_collision(8) == 0\nassert     car_race_collision(12) == 0\nassert     car_race_collision(25) == 0\nassert     car_race_collision(36) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     car_race_collision(10) == 0\nassert     car_race_collision(11) == 1\nassert     car_race_collision(12) == 2\nassert     car_race_collision(13) == 3\nassert     car_race_collision(14) == 4\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(8) == 8"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     car_race_collision(1) == 1\nassert     car_race_collision(2) == 2\nassert     car_race_collision(3) == 4\nassert     car_race_collision(5) == 10\nassert     car_race_collision(100) == 19720\nprint('car_race_collision seems to be correct!')"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 2\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 2\nassert     car_race_collision(6) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(5) == 0\nassert     car_race_collision(10) == 1\nassert     car_race_collision(100) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         car_race_collision(3)     == 4\nassert         car_race_collision(5)     == 6\nassert         car_race_collision(10)     == 10\nassert         car_race_collision(100)     == 100\nassert         car_race_collision(1000)     == 1000\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     car_race_collision(5) == 3\nassert     car_race_collision(10) == 6\nassert     car_race_collision(50) == 45\nassert     car_race_collision(100) == 96\nassert     car_race_collision(1000) == 625\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     car_race_collision(4) == 1\nassert car_race_collision(5) == 2\nassert car_race_collision(6) == 3\nassert car_race_collision(7) == 4\nassert car_race_collision(8) == 5\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     car_race_collision(0) == 0\nassert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(10) == 0\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [incr_list([0,1,2,3])\n         == [1,2,3,4]]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     incr_list([1, 2, 3])    ==    [2, 3, 4]\nassert     incr_list([1, 2, 3, 4]) ==    [2, 3, 4, 5]\nassert     incr_list([1, 2, 3, 4, 5]) ==    [2, 3, 4, 5, 6]\nassert     incr_list([1, 2, 3, 4, 5, 6]) ==    [2, 3, 4, 5, 6, 7]\nassert     incr_list([1, 2, 3, 4, 5, 6, 7]) ==    [2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     incr_list([2, 3, 4, 5]) == [3, 4, 5, 6]\nassert     incr_list([2, 3, 4, 5, 6]) == [3, 4, 5, 6, 7]\nassert     incr_list([2, 3, 4, 5, 6, 7]) == [3, 4, 5, 6, 7, 8]\nassert     incr_list([2, 3, 4, 5, 6, 7, 8]) == [3, 4, 5, 6, 7, 8, 9]\nassert     incr_list([2, 3, 4, 5, 6, 7, 8, 9]) == [3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     incr_list([1,2,3]) == [2, 3, 4]\nassert     incr_list([1,2,3]) == [2, 3, 4]\nassert     incr_list([1,2,3,4]) == [2, 3, 4, 5]\nassert     incr_list([1,2,3,4,5]) == [2, 3, 4, 5, 6]\nassert     incr_list([1,2,3,4,5,6]) == [2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [3,3]\nassert     incr_list([1,2,3]) == [4,4,4]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 2, 3, 4]    == incr_list([1, 2, 3, 4])\nassert     [2, 3, 4]    == incr_list([1, 2, 3])\nassert     [3, 4]    == incr_list([1, 2])\nassert     [4]    == incr_list([1])\nassert     []    == incr_list([])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     incr_list([])     ==     []\nassert     incr_list([1, 2, 3])     ==     [2, 3, 4]\nassert     incr_list([0, 0, 0])     ==     [1, 1, 1]\nassert     incr_list([1, 2, 3, 4])     ==     [2, 3, 4, 5]\nassert     incr_list([1, 2, 3, 4, 5])     ==     [2, 3, 4, 5, 6]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [incr_list(x) for x in [[1, 2, 3], [4, 5, 6]]] == [[2, 3, 4], [5, 6, 7]]\nassert     [incr_list(x) for x in [[0, 0, 0], [0, 0, 0]]] == [[1, 1, 1], [1, 1, 1]]\nassert     [incr_list(x) for x in [[], []]] == [[], []]\nassert     incr_list([1]) == [2]\nassert     incr_list([]) == []\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     incr_list([0, 1, 2, 3]) == [1, 2, 3, 4]\nassert     incr_list([0, 0, 0]) == [0, 1, 2, 3]\nassert     incr_list([]) == []\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     incr_list(['a', 'b', 'c']) == ['a', 'b', 'c', 1]\nassert     incr_list(['a', 1, 'b', 9]) == ['a', 2, 'b', 10]\nassert     incr_list([1, 'a', 'b', 9]) == [2, 'a', 'b', 10]\nassert     incr_list(['a', 'b', 9]) == ['a', 'b', 10]\nassert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ___________ == ___________\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([0, -3, -2, -1, -2, -1, -2, -3, -1, 0]) == True\nassert     pairs_sum_to_zero([0, -3, -2, -1, -1, -2, -3, -1, 0]) == False\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([-3, -2, -1, -2, -1, -2, -3, -1, 0, 3]) == True\n\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([]) == True\nassert     pairs_sum_to_zero([1,2,3]) == False\nassert     pairs_sum_to_zero([-1,-2,-3,-4]) == True\nassert     pairs_sum_to_zero([1,2,3,1]) == True\nassert     pairs_sum_to_zero([1,2,4,-1,-2,3,5,-3]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (pairs_sum_to_zero([1, -1, -1, 0, 0, 2]) == True)\nassert     (pairs_sum_to_zero([1, -1, -1, 0, 2, 2]) == False)\nassert     (pairs_sum_to_zero([2, 2, -2, 2, 2]) == True)\nassert     (pairs_sum_to_zero([1, -1, -1, -2, 0, 2]) == True)\nassert     (pairs_sum_to_zero([2, 0, 0]) == True)\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([1, -2, 3, -4, 5]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -4, 5]) == False\nassert     pairs_sum_to_zero([-1, -2, 3, -4, 5]) == True\nassert     pairs_sum_to_zero([-1, 2, 3, -4, 5]) == False\nassert     pairs_sum_to_zero([1, 2, 3, -4, 5]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, -2, -1]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == False\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1, -2, 3, -4, 5]) == True\nassert     pairs_sum_to_zero([-2, -4, -6, -8, 10]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([-1, -2, -3, -4]) == True\nassert     pairs_sum_to_zero([1, -2, 3, -4]) == True\nassert     pairs_sum_to_zero([1, 2, -3, 4]) == False\nassert     pairs_sum_to_zero([2, 3, 4, -3]) == False\nassert     pairs_sum_to_zero([1, -3, -4, -1]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([3,3]) == True\nassert     pairs_sum_to_zero([1,-2,3]) == True\nassert     pairs_sum_to_zero([-2,0,4]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([10, -10, -3, 3, 10]) == True\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([10]) == False\nassert     pairs_sum_to_zero([-10, -3, 3, 10]) == True\nassert     pairs_sum_to_zero([-10, -3, 3, 10, -10]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([-1, -2, -3, -4, -5]) == False\nassert     pairs_sum_to_zero([-3, -3, -4, -4, -5]) == True\nassert     pairs_sum_to_zero([0, -1, 1, 2, 3]) == True\nassert     pairs_sum_to_zero([1, -1, 2, 3, -4]) == True\nassert     pairs_sum_to_zero([1, -1, 2, -3, 4]) == False\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     change_base(101, 10)         == '101', \"Check the correctness of the change_base()\"\nassert     change_base(101, 2)         == '1101', \"Check the correctness of the change_base()\"\nassert     change_base(101, 16)     == 'A', \"Check the correctness of the change_base()\"\nassert     change_base(101, 26)     == 'Z', \"Check the correctness of the change_base()\"\n\ndef reverse(word: str):\n    \"\"\"Reverse a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     change_base(16, 2) == '10'\nassert     change_base(16, 8) == '2'\nassert     change_base(16, 16) == '10'\nassert     change_base(10, 16) == 'A'\nassert     change_base(16, 10) == '10'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     change_base(10, 2) == '1010', 'incorrect'\nassert change_base(10, 10) == '1010', 'incorrect'\nassert change_base(10, 16) == 'A', 'incorrect'\nassert change_base(16, 16) == 'A', 'incorrect'\n\ndef is_prime(n: int):\n    \"\"\"Check if input number is prime.\n    return True if input number is prime.\n    False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     change_base(10, 10) == '10'\nassert     change_base(10, 2) == '1010'\nassert     change_base(10, 8) == '128'\nassert     change_base(10, 16) == '100000000'\nassert     change_base(10, 16) == '100000000'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     change_base(12, 2) == \"1010\"\nassert     change_base(12, 8) == \"6\"\nassert     change_base(10, 16) == \"A\"\n\ndef f(x: int, y: int):\n    \"\"\"Return gcd(x, y)\"\"\"\n    pass\n\ndef g(x: int, y: int):\n    \"\"\"Return x // y\"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     change_base(10, 16) == \"10\"\nassert     change_base(10, 10) == \"10\"\nassert     change_base(1234, 10) == \"34\"\nassert     change_base(1234, 16) == \"0x1234\"\nassert     change_base(0x1234, 16) == \"0x1234\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (change_base(0, 8) == '0')\nassert     (change_base(12, 8) == '10')\nassert     (change_base(9, 8) == '9')\nassert     (change_base(10, 8) == 'a')\nassert     (change_base(11, 8) == 'b')\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef radix_sort(A: list, base: int):\n    \"\"\"Sort the list of integers in descending order by radix sort\n    using base number as the radix.\n    The list A is modified in-place.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     change_base(0, 16) == '0x0'\nassert     change_base(1, 16) == '0x1'\nassert     change_base(16, 16) == '0x10'\nassert     change_base(10, 16) == '0xa'\nassert     change_base(15, 16) == '0xf'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert __________ == '__________'"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(3, 3) == 1.5\nassert     triangle_area(4, 3) == 6\nassert     triangle_area(3, 4) == 3.5\nassert     triangle_area(1, 1) == 0\nassert     triangle_area(2, 1) == 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triangle_area(4, 5) == 10.0, \"incorrect result for (4,5)\"\nassert     triangle_area(10, 10) == 100, \"incorrect result for (10,10)\"\nassert     triangle_area(10, 11) == 110, \"incorrect result for (10,11)\"\n\ndef main():\n    print \"Testing is_triangle()...\",\n    assert(is_triangle(5,3,4)==True), \"Fail: (5,3,4) should be a triangle\"\n    "
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(3, 4) == 6.0\nassert     triangle_area(5, 4) == 10.0\nassert     triangle_area(6, 4) == 12.0\nassert     triangle_area(7, 4) == 14.0\nassert     triangle_area(8, 4) == 16.0\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef circle_area(r):\n    \"\"\"Given radius r return area of a circle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(10,5) == 25\nassert     triangle_area(5,10) == 25\nassert     triangle_area(5,5) == 25\nassert     triangle_area(1,2) == 1\nassert     triangle_area(5,2) == 25/2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(0, 0) == 0\nassert     triangle_area(1, 2) ==.5\nassert     triangle_area(2, 3) ==.5\nassert     triangle_area(1, 4) ==.5\n\nprint('Successful Triangle area test!')\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(1,2) == 0.5, \"incorrect\"\nassert     triangle_area(2,3) == 1.0, \"incorrect\"\nassert     triangle_area(3,4) == 1.5, \"incorrect\"\nassert     triangle_area(4,5) == 1.0, \"incorrect\"\nassert     triangle_area(5,6) == 1.0, \"incorrect\"\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(3, 4) == 9, \"3*4/2\"\nassert triangle_area(10, 10) == 100, \"10*10/2\"\nassert triangle_area(15, 5) == 75, \"15*5/2\"\nassert triangle_area(5, 10) == 50, \"5*10/2\"\nassert triangle_area(5, 5) == 25, \"5*5/2\"\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef triangle_area2(a, b, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(3,4) == 6\nassert     triangle_area(3,7) == 21\nassert     triangle_area(4,4) == 16\n\ndef find_triangle_area(x1, x2, x3):\n    \"\"\"Given three points on a plane calculate the area.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \nassert fib4(3) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         fib4(0) == 0\nassert         fib4(1) == 0\nassert         fib4(2) == 2\nassert         fib4(3) == 0\nassert         fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib4(4) == 2\nassert     fib4(5) == 3\nassert     fib4(6) == 4\nassert     fib4(7) == 5\nassert     fib4(8) == 6\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef count(l: list):\n    \"\"\"Return count of number of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3.0\nassert     median([-1, -2, -3, -4, -5]) == -3.0\nassert     median([1.2, 2.2, 3.2, 4.2, 5.2]) == 3.2\nassert     median(['a', 'b', 'c', 'd', 'e']) == 'b'\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     median([1,2,3,4,5,6]) == 3.5\nassert median([1,2,3,4,5]) == 3\nassert median([2,3,4,5,6,7]) == 4.5\nassert median([2,3,4,5,6,7,8]) == 5.5\nassert median([2,3,4,5,6,7,8,9]) == 6.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     median([2, 3, 4]) == 3.0\nassert     median([4, 2, 3]) == 3.0\nassert     median([4, 3, 1, 2]) == 3.0\nassert     median([4, 3, 2, 1]) == 3.0\nassert     median([4, 3, 2]) == 3.0\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     median([]) == None\nassert     median([1]) == 1\nassert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 3.5\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     median([1, 2, 3]) == 2\nassert     median([1, 2, 3, 4]) == 2.5\nassert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 3.5\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     median([3, 6, 7, 1, 2]) == 6\nassert median([1, 2, 3]) == 2\nassert median([1, 2, 3, 4, 5]) == 3\nassert median([3, 1, 4, 5, 3, 2]) == 3\nassert median([3, 1, 4, 5, 6, 7, 8, 9, 10, 11]) == 7\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     median([1,2,3,4,5,6,7]) == 4\nassert     median([1,2,3,4,5,6,7,8,9,10]) == 4\nassert     median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 4\nassert     median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     median([1,2,3,4,5]) == 3\nassert median([1,3,5,7,9]) == 5\nassert median([-1,-2,-3,-4,-5]) == -2\nassert median([1,3,5,7,9,-100]) == 5\nassert median([]) == None\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"racecar\") == True\nassert     is_palindrome(\"noon\") == True\nassert     is_palindrome(\"tacocat\") == True\nassert     is_palindrome(\"stressed\") == True\nassert     is_palindrome(\"level\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"aba\") == False\nassert     is_palindrome(\"stoo\") == False\nassert     is_palindrome(\"stoo\") == False\nassert     is_palindrome(\"\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"abaa\") == True\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcba\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"ad\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('aba') == True\nassert     is_palindrome('abba') == True\nassert     is_palindrome('abac') == False\nassert     is_palindrome('ab') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcba\") == True\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcdefghhgfedcba\") == True\nassert     is_palindrome(\"abcdefgh\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('aba') == True\nassert     is_palindrome('abcd') == False\nassert     is_palindrome('abcdcba') == True\nassert     is_palindrome('abcddcba') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_palindrome('racecar') is True\nassert     is_palindrome('anna') is True\nassert     is_palindrome('amanaplanacanalpanama') is True\nassert     is_palindrome('amanaplanacanalpanama') is False\nassert     is_palindrome('Hello') is False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"racecar\")\nassert     is_palindrome(\"a\")\nassert     is_palindrome(\"ab\")\nassert     is_palindrome(\"abc\")\nassert     is_palindrome(\"aba\")\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ____________ == 0\n\ndef gcd(a: int, b: int):\n    \"\"\"Return greatest common divisor of a and b.\n    \"\"\"\n    pass\n\ndef ____________(a: int, b: int):\n    \"\"\"Return a and b modulo gcd(a, b).\n    \"\"\"\n    pass\n\nassert ____________ == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     modp(2, p=3) == 1\nassert     modp(1, p=2) == 0\nassert     modp(2, p=4) == 3\nassert     modp(3, p=2) == 1\nassert     modp(2, p=5) == 4\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef modp_add(a: int, b: int, p: int):\n    \"\"\"Return a^b modulo p.\n    \"\"\"\n    pass\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return 1/n modulo p.\n    \"\"\"\n    pass\n\ndef modp_mul(a: int, b: int, p: int):\n    \"\"\"Return a^b modulo p.\n    \"\"\"\n    pass\n\ndef modp_sub(a: int, b: int, p: int):\n    \"\"\"Return a - b modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert izq(modp(0, p)) == 1\nassert izq(modp(1, p)) == 1\nassert izq(modp(2, p)) == 0\nassert izq(modp(3, p)) == 1\nassert izq(modp(4, p)) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert iz(-1, 10) == 8\nassert iz(3, 10) == 3\nassert iz(2, 10) == 4\nassert iz(1, 10) == 1\nassert iz(0, 10) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         modp(0, 1) == 1\nassert         modp(0, 2) == 1\nassert         modp(0, 3) == 1\nassert         modp(0, 4) == 1\nassert         modp(0, 5) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     modp(1,3) == 1\nassert modp(2,3) == 2\nassert modp(3,3) == 1\nassert modp(4,3) == 1\nassert modp(5,3) == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef primorial(n: int):\n    \"\"\"Return n!.\"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     modp(n=1, p=5) == 1\nassert     modp(n=2, p=5) == 3\nassert     modp(n=3, p=5) == 5\nassert     modp(n=0, p=5) == 1\nassert     modp(n=1, p=2) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     modp(2, 5) == 1\nassert     modp(6, 11) == 4\nassert     modp(6, 15) == 6\nassert     modp(7, 11) == 9\nassert     modp(8, 11) == 10\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_shift(\"bsfafaoqw\") == \"foobar\"\nassert     decode_shift(\"qwbhchfaf\") == \"foobar\"\nassert     decode_shift(\"qwbhchfa\") == \"foobar\"\nassert     decode_shift(\"qwbhchf\") == \"foobar\"\nassert     decode_shift(\"qwbhchf\") == \"foobar\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encode_shift(\"a\")     == \"b\"\nassert     encode_shift(\"b\")     == \"c\"\nassert     encode_shift(\"c\")     == \"d\"\nassert     encode_shift(\"d\")     == \"e\"\nassert     encode_shift(\"e\")     == \"f\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encode_shift(\"a\") == \"f\"\nassert     encode_shift(\"b\") == \"g\"\nassert     encode_shift(\"c\") == \"h\"\nassert     encode_shift(\"d\") == \"i\"\nassert     encode_shift(\"e\") == \"j\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"\nassert     decode_shift(encode_shift(\"hello world\")) == \"hello world\"\nassert     decode_shift(encode_shift(\"peter\")) == \"geert\"\n\ndef encode_shift_v2(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    d = {}\n    for i in range(26):\n        d[chr(ord(\"a\") + i)] = chr(ord(\"a\") + (i + 5) % 26)\n\n    return \"\".join([d[ch] for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode_shift(\"hello\") == \"dgnl\"\nassert     encode_shift(\"\") == \"\"\nassert     encode_shift(\"ab\") == \"bab\"\nassert     encode_shift(\"abc\") == \"bca\"\nassert     encode_shift(\"bba\") == \"baa\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encode_shift(\"hello\") == \"kxngbbyucz\"\nassert     encode_shift(\"abc\") == \"klqrwaqx\"\nassert     encode_shift(\"ab\") == \"kiqcaox\"\nassert     encode_shift(\"def\") == \"nteswgkc\"\nassert     encode_shift(\"gh\") == \"nzcyfgh\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode_shift(\"hello\") == \"ifmmp\"\nassert     encode_shift(\"hello\") == \"ifmmp\"\nassert     encode_shift(\"hello\") == \"ifmmp\"\nassert     encode_shift(\"hello\") == \"ifmmp\"\nassert     encode_shift(\"hello\") == \"ifmmp\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode_shift(\"a\") == \"b\"\nassert     encode_shift(\"b\") == \"c\"\nassert     encode_shift(\"c\") == \"d\"\nassert     encode_shift(\"d\") == \"e\"\nassert     encode_shift(\"e\") == \"f\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encode_shift(\"abc\")             == \"fedcba\"\nassert     encode_shift(\"xyz\")             == \"wvxyz\"\nassert     encode_shift(\"xyz\")             == \"wvxyz\"\nassert     encode_shift(\"xyz\")             == \"wvxyz\"\nassert     encode_shift(\"xyz\")             == \"wvxyz\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode_shift(\"zv zv zv\") == \"zva\"\nassert     encode_shift(\"ABC\") == \"ABC\"\nassert     encode_shift(\"ABCD\") == \"ABD\"\nassert     encode_shift(\"ABCDZ\") == \"ABCDE\"\nassert     encode_shift(\"ABCDEZ\") == \"ABCDEF\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_vowels('This is fun!') == 'Ths s f n!'\nassert     remove_vowels('We have an apple') == 'Whs at e bn!'\nassert     remove_vowels('I Love Python!') == 'Lf p y t h n!'\nassert     remove_vowels('Happy Birthday!') == 'Hpy b y rd!'\nassert     remove_vowels('Hello!') == 'Hll!'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_vowels('xyz') == 'xz', 'error in remove_vowels function'\nassert     remove_vowels('aba') == 'ab', 'error in remove_vowels function'\nassert     remove_vowels('baba') == 'ba', 'error in remove_vowels function'\nassert     remove_vowels('abcd') == 'abc', 'error in remove_vowels function'\nassert     remove_vowels('covid') == 'cxv', 'error in remove_vowels function'\nprint ('remove_vowels function is correct')\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_vowels(\"peter piper picked a peck of pickled peppers\") ==     \"eteprsp qfhpk qgkc prps\"\nassert     remove_vowels(\"a\") ==     \"a\"\nassert     remove_vowels(\"\") ==     \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_vowels('testing') =='sting'\nassert     remove_vowels('testing123testing') == 'testing123'\nassert     remove_vowels('Testing') == 'Testing'\nassert     remove_vowels('Testing1234') == 'Testing'\nassert     remove_vowels('hello testing') == 'hello'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_vowels(string) == string.replace(\"a\", \"\")\nassert     remove_vowels(string2) == string2.replace(\"a\", \"\")\nassert     remove_vowels(string3) == string3.replace(\"a\", \"\")\nassert     remove_vowels(string4) == string4.replace(\"a\", \"\")\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"world\") == \"  rd\"\nassert     remove_vowels(\"x\") == \"x\"\n\ndef remove_vowels_2(text):\n    \"\"\"\n    This is the same as remove_vowels but using list as the input parameter.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_vowels('Hello World') == 'Hll Dr'\nassert     remove_vowels('Python') == 'Py Br'\nassert     remove_vowels('Aardvark') == 'Ar Dv'\nassert     remove_vowels('aeiou') == ''\nassert     remove_vowels('aa') == ''\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert remove_vowels(\"aeiou\") == \"\"\nassert remove_vowels(\"bcdef\") == \"bcd\"\n\n\n\n\ndef solve_captcha(text):\n    \"\"\"\n    solve_captcha is a function that takes string and returns string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (remove_vowels('This is an example!') \n                == 'Ths s n xmpl!')\nassert     (remove_vowels('We will debate over whether to make the rules in ITU-T or ISO-TS 29000-5. ')\n                == 'W wn d us deb nnrs n on ISO-TS 29000-5.')\nassert     (remove_vowels('Examine the code.')\n                == 'X ks t s nd r')\nassert     (remove_vowels('Doubt is my answer.')\n                == 'D t s n m!')\nassert     (remove_vowels('Should I do it now? Ask me no questions.')\n                == 'S n d m p! n!')\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_vowels(\"Welcome to the Kiki!\") == \"W:elcome t:th thK:ki\"\nassert     remove_vowels(\"Kiki is a good girl!\") == \"W:elcome t:th thK:i a:go:d g:ood!r\"\nassert     remove_vowels(\"Kiki is a good girl!\") == \"W:elcome t:th thK:i a:go:d g:ood!r\"\nassert     remove_vowels(\"Kiki is a good girl!\") == \"W:elcome t:th thK:i a:go:d g:ood!r\"\nassert     remove_vowels(\"Kiki is a good girl!\") == \"W:elcome t:th thK:i a:go:d g:ood!r\"\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     type(below_threshold([], 1)) is bool\nassert     below_threshold([], 1) is True\nassert     below_threshold([1,2,3], 1) is False\nassert     below_threshold([3,2,1], 2) is False\nassert     below_threshold([1,2,3], 3) is True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_threshold([3, 4, 5, 6, 7, 8, 9], 4) == False\nassert     below_threshold([3, 4, 5, 6, 7, 8, 9], 3) == True\nassert     below_threshold([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == True\nassert     below_threshold([-1, -2, -3, -4, -5, -6, -7, -8, -9], -4) == True\nassert     below_threshold([-1, -2, -3, -4, -5, -6, -7, -8, -9], -3) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_threshold([], 0) == True\nassert     below_threshold([1, 2, 3], 0) == False\nassert     below_threshold([1, 2, 3], 1) == True\nassert     below_threshold([1, 2, 3], 2) == True\nassert     below_threshold([1, 2, 3], 3) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_threshold(range(-1,5), 3) == True\nassert     below_threshold(range(-1,5), -1) == True\nassert     below_threshold(range(-1,5), 5) == False\nassert     below_threshold(range(-1,5), 4) == False\nassert     below_threshold([], 3) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_threshold([0,1,2,3,4,5,6,7,8,9], 4) == True\nassert     below_threshold([0,1,2,3,4,5,6,7,8,9], 5) == False\nassert     below_threshold([10, 20, 30, 40, 50], 30) == True\nassert     below_threshold([10, 20, 30, 40, 50], 40) == False\nassert     below_threshold([], 10) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     below_threshold([], t = 0) == True, \"Test 1 failed\"\nassert     below_threshold([-1, -2, -3], t = 0) == True, \"Test 2 failed\"\nassert     below_threshold([-1, -2, -3], t = 1) == False, \"Test 3 failed\"\nassert     below_threshold([1,2,3], t = 2) == False, \"Test 4 failed\"\nassert     below_threshold([1,2,3], t = 4) == True, \"Test 5 failed\"\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_threshold([1, 2, 3, 4], 2) is True\nassert     below_threshold([1, 2, 3, 4], 1) is False\nassert     below_threshold([1, 2, 3, 4], 5) is True\nassert     below_threshold([1, 2, 3, 4], 0) is True\nassert     below_threshold([1], 0) is True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_threshold(l1, 0) == True\nassert     below_threshold(l1, 1) == False\nassert     below_threshold(l2, 1) == True\nassert     below_threshold(l2, 2) == False\nassert     below_threshold(l3, 1) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_threshold([], -1) == True\nassert     below_threshold([1, 2, 3], -1) == False\nassert     below_threshold([1, 2, 3, 4, 5], 3) == False\nassert     below_threshold([1, 2, 3, 4, 5], 4) == True\nassert     below_threshold([-1, 2, 3, 4, 5], 3) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5, 6], 3) == True\nassert     below_threshold([1, 2, 3, 4, 5, 6], 2) == False\nassert     below_threshold([5, 6, 7, 8, 9], 4) == True\nassert     below_threshold([5, 6, 7, 8, 9], 5) == False\nassert     below_threshold([], 4) == True\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract y from x\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add(5, 3) == 8, \"5 + 3 = 8\"\nassert     add(100, 22) == 122, \"100 + 22 = 122\"\nassert     add(-100, -100) == -200, \"-100 - 100 = -200\"\n\ndef str_reverse(s):\n    \"\"\"Reverse the string s\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add(1, 2) == 3\nassert     add(-1, -2) == -3\nassert     add(0, 0) == 0\nassert     add(2, -4) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add(5, 5) == 10\nassert     add(5, -5) == 0\nassert     add(5, 0) == 5\nassert     add(5, -1) == 4\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (add(1, 2) == 3)\nassert     (add(0, 10) == 10)\nassert     (add(-2, -2) == -4)\n\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add(1, 2) == 3\nassert add(0, 0) == 0\nassert add(100, 101) == 101\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add(1,2) == 3\nassert     add(2,2) == 4\nassert     add(3,2) == 5\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     same_chars('aa', 'aa') == True\nassert     same_chars('aa', 'bb') == False\nassert     same_chars('aa', 'aaaa') == False\nassert     same_chars('aa', 'aab') == True\nassert     same_chars('aa', 'aab') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     same_chars('Hi', 'Hi') == True\nassert     same_chars('Hi', 'hello') == False\nassert     same_chars('Hi', 'HiHi') == False\nassert     same_chars('Hi', 'HiHiHi') == True\nassert     same_chars('Hi', 'H1') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     same_chars('apple', 'appel') == True\nassert     same_chars('Apple', 'Appel') == True\nassert     same_chars('Apple', 'apple') == True\nassert     same_chars('apple', 'Apple') == True\nassert     same_chars('apple', 'appel') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     same_chars(\"abc\", \"abc\") == True\nassert     same_chars(\"abc\", \"abd\") == False\nassert     same_chars(\"abc\", \"abcde\") == True\nassert     same_chars(\"abc\", \"abcd\") == False\nassert     same_chars(\"abc\", \"\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     same_chars(\"Hello\", \"Hello\")\nassert     same_chars(\"Hello\", \"Hello World\")\nassert     not same_chars(\"Hello\", \"Hello Again\")\nassert     not same_chars(\"Hello\", \"Hi There\")\nassert     not same_chars(\"Hello\", \"\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     same_chars(\"pale\", \"ple\")\nassert     same_chars(\"pales\", \"pale\")\nassert     same_chars(\"pale\", \"bale\")\nassert     not same_chars(\"pale\", \"bake\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     same_chars('abc', 'cba')\nassert     same_chars('abc', 'bac')\nassert     same_chars('abc', 'acb')\nassert     not same_chars('abc', 'abc')\nassert     same_chars('abc', 'a-bc')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     same_chars(\"\", \"\") == True\nassert     same_chars(\"foo\", \"foo\") == True\nassert     same_chars(\"foo\", \"bar\") == False\nassert     same_chars(\"foo\", \"foobar\") == True\nassert     same_chars(\"\", \"foobar\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     same_chars('foo', 'foo') == True\nassert     same_chars('bar', 'bar') == True\nassert     same_chars('bar', 'foobar') == False\nassert     same_chars('bar', 'foo') == False\nassert     same_chars('bar', 'baz') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     same_chars(\"Lorena\", \"Lorena\") == True\nassert     same_chars(\"Lorena\", \"Lorena \") == False\nassert     same_chars(\"Lorena\", \"Alana\") == False\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib(4) == 3\nassert     fib(10) == 55\nassert     fib(13) == 858\nassert     fib(17) == 879\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    n = 19\n    print(fib(n))"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib(3) == 2\nassert     fib(6) == 8\nassert     fib(0) == 1\nassert     fib(9) == 34\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<\") == True\nassert     correct_bracketing(\"<>\") == False\nassert     correct_bracketing(\"<><\") == True\nassert     correct_bracketing(\"<><>\") == True\nassert     correct_bracketing(\"<><\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing('<>') == True\nassert     correct_bracketing('<()>)') == False\nassert     correct_bracketing('<[()>]>') == False\nassert     correct_bracketing('<[<()>)]') == False\nassert     correct_bracketing('<[<[()]>]>') == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<()>\") == True, \"Expected True\"\nassert     correct_bracketing(\"<(>)\") == True, \"Expected True\"\nassert     correct_bracketing(\"<[()>]\") == True, \"Expected True\"\nassert     correct_bracketing(\"<[()<)>\") == False, \"Expected False\"\nassert     correct_bracketing(\"<[()\") == False, \"Expected False\"\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<)><\") == False\nassert     correct_bracketing(\"<(>)><\") == True\n\ndef test_correct_bracketing_2():\n    assert correct_bracketing(\"(<>)><\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<(>\") == True\nassert     correct_bracketing(\"<(())>\") == True\nassert     correct_bracketing(\"<<(>>)>\") == True\nassert     correct_bracketing(\"<(>)\") == False\nassert     correct_bracketing(\"<>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         correct_bracketing(\"<><\")\nassert     correct_bracketing(\"<<>>\")\nassert     correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<>><<<>><\")\nassert not correct_bracketing(\"<<>>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketingedabit < > < > < > < > < > < > < > <\n    assert correct_bracketing(\"< > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < > < "
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"<<>\") == True\nassert     correct_bracketing(\"<[<>]>>\") == True\nassert     correct_bracketing(\"<[<[]]>\") == False\nassert     correct_bracketing(\"<[<]>\") == False\nassert     correct_bracketing(\"<[>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"><\") == False\nassert     correct_bracketing(\"<<><\") == True\nassert     correct_bracketing(\"\") == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     monotonic([1,2,3,4]) == True\nassert     monotonic([1,2,3,4,-1]) == True\nassert     monotonic([1,2,3,4,-2]) == False\nassert     monotonic([3,4,-1,2]) == True\nassert     monotonic([3,4,-1,-2]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     monotonic([])\nassert     monotonic([1])\nassert     not monotonic([1, 1])\nassert     not monotonic([1, 2])\nassert     not monotonic([1, 2, 1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     monotonic([]) is True\nassert     monotonic([1]) is True\nassert     monotonic([1,2]) is True\nassert     monotonic([1,2,1]) is False\nassert     monotonic([1,2,3,4,5,6]) is True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         monotonic([]) == True\nassert         monotonic([0,0,1,2]) == True\nassert         monotonic([1,2,3,3]) == False\nassert         monotonic([1,2,3,1]) == True\nassert         monotonic([1,2,3,-3]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     monotonic([1, 2, 3, 4])\nassert not monotonic([1, 2, 3, 4, 4])\nassert monotonic([1, 1, 2, 3, 4])\nassert not monotonic([4, 1, 2, 3, 4])\nassert monotonic([1, 1, 1, 2, 3, 4])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     monotonic([1,2,3,4,5]) is False\nassert     monotonic([5,4,3,2,1]) is True\nassert     monotonic([1,-1,1,0,1]) is False\nassert     monotonic([1,2,3,4,5,6]) is True\nassert     monotonic([5,4,3,2,1,0]) is False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     monotonic( [1,2,3,4,5] ) == True\nassert     monotonic( [5,4,3,2,1] ) == True\nassert     monotonic( [1,2,3,4,5] ) == False\nassert     monotonic( [5,4,3,2,1,5] ) == False\nassert     monotonic( [2,2,2,2] ) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     monotonic([1, 2, 3]) == True\nassert     monotonic([1, 2, 3, 4]) == False\nassert     monotonic([4, 3, 2, 1]) == False\nassert     monotonic([4, 1, 3, 2]) == True\nassert     monotonic([1, -2, 0]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         monotonic([1,2,3,4,5,6]) is True\nassert         monotonic([1,2,3,4,5,6,4]) is True\nassert         monotonic([1,2,3,4,5,6,4,3]) is True\nassert         monotonic([1,2,3,4,5,6,4,3,2]) is False\nassert         monotonic([4,4,3,2,1,0]) is True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     monotonic([1, 2, 3])\nassert not monotonic([3, 1, 2])\nassert not monotonic([2, 1, 3])\nassert monotonic([1, 1, 2, 3])\nassert not monotonic([3, 1, 1, 2])\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common(['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'], ['a', 'b', 'd']) == ['a', 'b']\nassert     common(['a', 'b', 'c'], ['a', 'b', 'd', 'c']) == ['a', 'b']\nassert     common(['a', 'b', 'c'], ['d']) == []\nassert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     common([1, 2, 3], [2, 3, 4]) == [1, 2, 3]\nassert     common([1, 2, 2, 3], [2, 3, 4]) == [2, 3]\nassert     common([1, 2, 3], []) == []\nassert     common([], [1, 2, 3]) == []\nassert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 4]\nassert     common([1, 2, 3, 4], [5, 6, 7, 8, 9]) == [1, 2, 3, 4]\nassert     common([1, 2, 3, 4], [5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4]\nassert     common([1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common([1,2,3,4,5], [4,5,6,7,8]) == [4, 5]\nassert     common([1,2,3,4,5], [3,4,5,6,7]) == [3, 4, 5]\n\ndef diff(l1: list, l2: list):\n    \"\"\"Return sorted unique elements that are in l1 but not in l2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common([1,2,3,5,6,7,8,9], [2,3,5,6,7,8,9,10]) == [2,3,5,6,7,8,9]\nassert     common([1,2,3,5,6,7,8,9], [1,3,5,6,7,8,9]) == [1,3,5,6,7,8,9]\nassert     common([1,2,3,5,6,7,8,9], []) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common([], []) == []\nassert     common([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     common(range(4), [0, 1, 2, 3]) == [0, 1, 2, 3]\nassert     common(range(4), [3, 4, 0, 1]) == [3, 4]\nassert     common([1, 2, 3, 4], [1, 2, 4, 5, 6, 7]) == [1, 2, 4]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     common([], []) == []\nassert     common([1], [1]) == [1]\nassert     common([1], []) == [1]\nassert     common([1,2], [1,2]) == [1,2]\nassert     common([1,2], [1,3]) == [1]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     common([1,1,2,3,3,3,4], [1,1,2,3,4]) == [1, 2, 3]\nassert     common([1,1,2,3,3,3,4], []) == []\nassert     common([], []) == []\nassert     common([1,1,2,3,3,3,4], [4,5,6,7,8]) == [4, 5, 6, 7, 8]\nassert     common([1,1,2,3,3,3,4], [1,1,2,3,4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common([1,1,2,2,3,4,5,6,7], [2,3,3,5,6,6,7,8]) == [2, 3, 5, 6, 7]\nassert     common([], []) == []\nassert     common([], [1]) == []\nassert     common([1,1,2,2,3,4,5,6,7], [2,3,3,5,6,6,7,8]) == [2, 3, 5, 6, 7]\nassert     common([1,1,2,2,3,4,5,6,7], [2,3,3,5,6,6,7,8]) == [2, 3, 5, 6, 7]"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     common([1, 2, 3], [1, 4, 6]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 4, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3, 4, 5]) == [1, 2, 3]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(1) == None\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(28) == 7\nassert     largest_prime_factor(29) == 29\nassert     largest_prime_factor(30) == 5\nassert     largest_prime_factor(31) == 31\nassert     largest_prime_factor(32) == 32\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     1 == largest_prime_factor(1)\nassert     2 == largest_prime_factor(2)\nassert     3 == largest_prime_factor(3)\nassert     5 == largest_prime_factor(5)\nassert     7 == largest_prime_factor(7)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(600851475143) == 6857\nassert     largest_prime_factor(600851475143) == 6857\nassert     largest_prime_factor(600851475143) == 6857\nassert     largest_prime_factor(600851475143) == 6857\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [i for i in range(2, 41) if largest_prime_factor(i) == i] == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n\n\ndef get_prime_factors(n: int):\n    \"\"\"Return a list of the prime factors of n. Assume n is positive and not a prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     9 == largest_prime_factor(9)\nassert     25 == largest_prime_factor(125)\nassert    3 == largest_prime_factor(15)\nassert    5 == largest_prime_factor(30)\nassert    5 == largest_prime_factor(35)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(21) == 3\nassert     largest_prime_factor(25) == 5\nassert     largest_prime_factor(27) == 3\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ______________ == sum_to_n(n)\nassert ______________ == sum_to_n(n*10)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_to_n(10)         == 55\nassert     sum_to_n(3)         == 2\nassert     sum_to_n(2)         == 3\nassert     sum_to_n(3)         == 5\nassert     sum_to_n(4)         == 10\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert _________ == sum_to_n(10)\nassert _________ == sum_to_n(0)\nassert _________ == sum_to_n(5)\nassert _________ == sum_to_n(10)\nassert _________ == sum_to_n(20)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_to_n(10) == 55\nassert     sum_to_n(100) == 5050\nassert     sum_to_n(0) == 0\nassert     sum_to_n(-1) == 0\nprint(\"sum_to_n function correctness passed!\")\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_to_n(5)    ==    15\nassert     sum_to_n(5)    ==    15\nassert     sum_to_n(10)    ==    17\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert _______________ == sum_to_n(5)\nassert _______________ == sum_to_n(10)\n\ndef count_to_n(n: int):\n    \"\"\"count_to_n is a function that counts the numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef largest_prime_factor(n: int):\n    \"\"\"largest_prime_factor is a function that finds the largest prime\n    factor of a number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"(\") == True\nassert     correct_bracketing(\"(()\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"(()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"()\") is True\nassert     correct_bracketing(\"(()\") is True\nassert     correct_bracketing(\"(()())\") is True\nassert     correct_bracketing(\"()()()\") is True\nassert     correct_bracketing(\"()()(()\") is False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(()(())()()\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(()(()\") == False\nassert     correct_bracketing(\"(()(()\")) == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"(())(\") is True\nassert     correct_bracketing(\"(()\") is False\nassert     correct_bracketing(\")(\") is False\nassert     correct_bracketing(\"((())\") is True\nassert     correct_bracketing(\"(())(()\") is True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"()()(\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\")()(\") == False\nassert     correct_bracketing(\"(((()())()\") == False\nassert     correct_bracketing(\"(())(\") == False\nassert     correct_bracketing(\"\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"()()\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"(\") == False, \"Not correct bracketing\"\nassert     correct_bracketing(\"()\") == True, \"Correct bracketing\"\nassert     correct_bracketing(\")()\") == True, \"Correct bracketing\"\nassert     correct_bracketing(\"()()\") == True, \"Correct bracketing\"\nassert     correct_bracketing(\"(()\") == False, \"Not correct bracketing\"\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\")(\") == True\nassert     correct_bracketing(\"()(\") == False\nassert     correct_bracketing(\"())\") == False\nassert     correct_bracketing(\"(()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \ncorrect_bracketing(\"()\") == True\ncorrect_bracketing(\"(()\") == True\ncorrect_bracketing(\"()())\") == True\ncorrect_bracketing(\"(())(\") == False\ncorrect_bracketing(\")()())\") == False\ncorrect_bracketing(\"(()\") == False\ncorrect_bracketing(\"()(\") == False\ncorrect_bracketing(\"((()\") == False\ncorrect_bracketing(\"(((\") == False\ncorrect_bracketing(\"))\") == False\ncorrect_bracketing(\"()()()\") == True\ncorrect_bracketing(\"()()()())\") == True\ncorrect_bracketing(\"((()()())\") == True\ncorrect_bracketing(\"((()())())\") == True\ncorrect_bracketing(\"(()()(()\") == False\ncorrect_bracketing(\")()()()()()()\") == True\ncorrect_bracketing(\"(()()()(()\") == False\ncorrect_bracketing(\"()((()\") == False\ncorrect_bracketing(\"()(((\") == False\ncorrect_bracketing(\"(()(((\") == False\ncorrect_bracketing(\"())(\") == False\ncorrect_bracketing(\"())(()\") == False\ncorrect_bracketing(\"())((())\") == False\ncorrect_bracketing(\"()()()()())()()\") == True\ncorrect_bracketing(\"(()()()()())(()()\") == True\ncorrect_bracketing(\"(()()()()())((()\") == False\ncorrect_bracketing(\")()()()()())(\") == False\ncorrect_bracketing(\"(()()()()())(()()\") == False\ncorrect_bracketing(\"()()()()())(()\") == False\ncorrect_bracketing(\"()()()()()((()\") == False\ncorrect_bracketing(\"(((((((((((())))))\") == True\ncorrect_bracketing(\"(()()()()()()()()(())\") == True\ncorrect_bracketing(\"()()()()()()()()())()\") == True\ncorrect_bracketing(\"(()()()()()()()())()()()(())\") == True\ncorrect_bracketing(\"(()()()()()()()())()()()((()\") == False\ncorrect_bracketing(\"((((((((((((((((((((((())))))))()))))))))()))))()\") == True\ncorrect_bracketing(\"(()()()()()()()())()()()((()\") == False\n\n\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     derivative([1, 2, 3]) == [0, 2, 6]\nassert     derivative([1, 0, 2, 3]) == [0, 0, 2, 6]\nassert     derivative([0, 1, 2, 3]) == [0, 0, 0, 0]\nassert     derivative([1, 2, 3]) == [0, 0, 0]\nassert     derivative([]) == []\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     derivative([1, 2, 3, 4, 5]) == 15\nassert     derivative([-1, -2, -3, -4, -5]) == -15\nassert     derivative([2, 4, -1]) == -3\nassert     derivative([2]) == 0\nassert     derivative([-1]) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     derivative([2,1,2,3])     == [-4, 5, -6, 6]\nassert     derivative([2,0,2,3])     == [1, 2, 1, -2]\nassert     derivative([2,0,0,3])     == [1, 1, 2, 0]\nassert     derivative([0,0,0,3])     == [0, 0, 0, 0]\n\n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     derivative([1,1,0,3]) == [0, 1, 1, 0]\nassert derivative([1,1,0,3,-5,-7]) == [0, 0, 1, 0, 0, 7]\nassert derivative([1,1,0,3,-5,-7]) == [0, 1, 0, 0, 0, -7]\nassert derivative([1,1,0,3,-5,-7]) == [0, 1, 0, 0, 0, -7]\nassert derivative([1,1,0,3,-5,-7]) == [0, 1, 0, 0, 0, -7]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(5) == 5\nassert     fibfib(10) == 55\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(5) == 5\nassert     fibfib(10) == 55\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     vowels_count('sample') == 0\nassert     vowels_count('test') == 2\nassert     vowels_count('civic') == 4\nassert     vowels_count('office') == 2\nassert     vowels_count('code') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     vowels_count(\"Krishna\") == 3\nassert     vowels_count(\"peter\") == 0\nassert     vowels_count(\"Sai\") == 2\nassert     vowels_count(\"amit\") == 4\nassert     vowels_count(\"Ravi\") == 4\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     vowels_count('ha') == 0\nassert     vowels_count('ae') == 1\nassert     vowels_count('ei') == 2\nassert     vowels_count('aei') == 2\nassert     vowels_count('aein') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     vowels_count('myvowel') == 4\nassert     vowels_count('eee') == 0\nassert     vowels_count('pie') == 0\nassert     vowels_count('qwertyuio') == 15\nassert     vowels_count('rtyuiop') == 14\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     vowels_count('aeriou') == 4\nassert     vowels_count('programming') == 4\nassert     vowels_count('grapes') == 0\nassert     vowels_count('hello world') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         vowels_count('giraffe') == 4\nassert         vowels_count('elephant') == 5\nassert         vowels_count('palm') == 1\nassert         vowels_count('ox') == 1\nassert         vowels_count('zebra') == 5\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         vowels_count(\"flourish\") == 4\nassert         vowels_count(\"cheese\") == 0\nassert         vowels_count(\"eat\") == 0\nassert         vowels_count(\"lazy\") == 2\nassert         vowels_count(\"treat\") == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         vowels_count('apple') == 2\nassert         vowels_count('diamond') == 1\nassert         vowels_count('orange') == 1\nassert         vowels_count('water') == 1\nassert         vowels_count('python') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     vowels_count('word') == 0\nassert     vowels_count('oo  w') == 0\nassert     vowels_count('  w') == 0\nassert     vowels_count('  w  ') == 0\nassert     vowels_count('  w   ') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     vowels_count('hi') == 0\nassert     vowels_count('hello') == 2\nassert     vowels_count('saeed') == 1\nassert     vowels_count('aeeaaeeell') == 5\nassert     vowels_count('aeeaeeellll') == 6\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef divisors(n):\n    \"\"\"Given a natural number n, return a list of all the divisors of n, \n    excluding n, itself, and in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     circular_shift(123, 0) == 123\nassert     circular_shift(123, 1) == 123\nassert     circular_shift(123, 2) == 2\nassert     circular_shift(123, 3) == 3\nassert     circular_shift(123, 4) == 1\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     circular_shift(12345, 7) == \"000012345\"\nassert     circular_shift(12345, 3) == \"12345\"\nassert     circular_shift(12345, 1) == \"234\"\nassert     circular_shift(12345, 2) == \"345\"\nassert     circular_shift(12345, 9) == \"1234\"\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert _______________\n\ndef test_circular_shift():\n    assert circular_shift(1234, 1) == 12345\n    assert circular_shift(1234, 3) == 4321\n    assert circular_shift(123456789, 4) == 987654321\n    "
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circular_shift(1234567890, 0) == '1234567890'\nassert     circular_shift(1234567890, 1) == '1234567891'\nassert     circular_shift(1234567890, 2) == '1234567892'\nassert     circular_shift(1234567890, 3) == '1234567893'\nassert     circular_shift(1234567890, 4) == '1234567894'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         circular_shift(12345, 3) == 345123\nassert         circular_shift(12345, 1) == 1234\nassert         circular_shift(12345, 0) == 12345\nassert         circular_shift(12345, 22) == 54321\nassert         circular_shift(12345, -1) == 12345\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     circular_shift('1234', 1) == '234'\nassert     circular_shift('1234', 2) == '345'\nassert     circular_shift('1234', 3) == '123'\nassert     circular_shift('123', 1) == '321'\nassert     circular_shift('123', 2) == '231'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     circular_shift(123, 1) == 124\nassert     circular_shift(123, 2) == 125\nassert     circular_shift(123, 3) == 123\nassert     circular_shift(123, 4) == 125\nassert     circular_shift(123, 5) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ________ == ________\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circular_shift(1234, 1) == '234'\nassert     circular_shift(1234, 2) == '3412'\nassert     circular_shift(1234, 3) == '3234'\nassert     circular_shift(1234, 4) == '3234'\nassert     circular_shift(12345, 1) == '23451'\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digitSum('one1two2three3four4five5six6seven7eight8nine9') == 55\nassert     digitSum('myidisdigit') == 4\nassert     digitSum('a1a2a3a4a5') == 15\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digitSum(\"\") == 0\nassert     digitSum(\"a\") == 1\nassert     digitSum(\"ab\") == 1\nassert     digitSum(\"abc\") == 6\nassert     digitSum(\"abc123\") == 7\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digitSum('a') == 1\nassert     digitSum('ab') == 2\nassert     digitSum('abc') == 6\nassert     digitSum('abcd') == 10\nassert     digitSum('a1b2c3d4e5') == 12\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digitSum('Hello') == 12\nassert     digitSum('Nibba') == 19\nassert     digitSum('A') == 65\nassert     digitSum('String') == 73\nassert     digitSum('bob') == 8\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digitSum(\"Fn\") == 4\nassert     digitSum(\"Vn\") == 5\nassert     digitSum(\"a\") == 97\nassert     digitSum(\"\") == 0\nassert     digitSum(\"code\") == 65\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digitSum('f1') == 1\nassert     digitSum('f2') == 2\nassert     digitSum('f3') == 3\nassert     digitSum('f4') == 4\nassert     digitSum('f5') == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digitSum(\"wuq\") == 0\nassert     digitSum(\"WQU\") == 0\nassert     digitSum(\"WQUU\") == 0\nassert     digitSum(\"WQUUX\") == 9\nassert     digitSum(\"WQUUXYY\") == 21\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digitSum(\"Hello World\") == 6\nassert     digitSum(\"Giraffe Academy\") == 24\nassert     digitSum(\"Christmas is the 25th of December\") == 22\nassert     digitSum(\"Giraffe Academy\") == 24\nassert     digitSum(\"\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digitSum('Hello') == 4\nassert     digitSum('How do you do?') == 20\nassert     digitSum('1a2b3c4d5e6f7g8h9i') == 36\nassert     digitSum('!@#$%^&*()_+') == 32\nassert     digitSum('10111213141516171819202324252627282930') == 97\nprint 'all tests passed"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digitSum(\"ABCD\") == 9\nassert     digitSum(\"hello\") == 15\nassert     digitSum(\"Hello\") == 15\nassert     digitSum(\"H3llo\") == 3\nassert     digitSum(\"\") == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fruit_distribution('hello',8) == 2\nassert     fruit_distribution('12',10) == 1\nassert     fruit_distribution('2',3) == 2\nassert     fruit_distribution('a2',10) == 1\nassert     fruit_distribution('',10) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         fruit_distribution('orange', 3)     == 1\nassert         fruit_distribution('apple', 2)     == 1\nassert         fruit_distribution('orange', 0)     == 0\nassert         fruit_distribution('apple', 5)     == 0\nassert         fruit_distribution('orange', 4)     == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fruit_distribution(\"mango orange orangemango orangemango\", \n                            \"mango orange orangemango orangemango\") == 4\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fruit_distribution( \"banana\", \"mango\") == 1\nassert     fruit_distribution( \"banana\", \"apple\") == 0\nassert     fruit_distribution( \"orange\", \"mango\") == 0\nassert     fruit_distribution( \"orange\", \"apple\") == 0\nassert     fruit_distribution( \"banana\", \"mango\" * 100) == 100\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"orange orange orange\", 3) == 1\nassert     fruit_distribution(\"banana orange mamangoes\", 7) == 1\nassert     fruit_distribution(\"mango orange\", 1) == 0\nassert     fruit_distribution(\"orange banana mamangoes\", 3) == 1\nassert     fruit_distribution(\"banana orange mango\", 1) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"2 3 2\",2) == 1\nassert     fruit_distribution(\"1 1\",1) == 1\nassert     fruit_distribution(\"1 1 2\",3) == 0\nassert     fruit_distribution(\"1 1 2 3\",2) == 2\nassert     fruit_distribution(\"2 3 4 5\",6) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\n\"\"\"\n0/5.\n\nNo.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n50"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"2 4\",    \"1 5\") == \"1\"\nassert     fruit_distribution(\"1 1\",    \"5\") == \"0\"\nassert     fruit_distribution(\"1 2\",    \"10\") == \"2\"\nassert     fruit_distribution(\"1 2\",    \"0\") == \"1\"\n\n\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nfruit_distribution(\"1 2 3 4 5\", 5) == \"5\"\nfruit_distribution(\"1 2 3 4 5 5\", 5) == \"5\"\nfruit_distribution(\"1 2 3 4 5 6\", 5) == \"6\"\nfruit_distribution(\"1 2 3 4 5 6 7\", 5) == \"3\"\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fruit_distribution(\"1 2 3\", \"1\") == \"0\"\nassert     fruit_distribution
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pluck([0, 0, 0, 1, 1, 1, 2, 2, 3, 3])     == [2, 4]\nassert     pluck([0, 0, 0, 1, 1, 1, 2, 2, 3, 3])     == [2, 4]\nassert     pluck([0, 0, 0, 1, 1, 1, 2, 2, 3, 3])     == [2, 4]\nassert     pluck([])     == []\nassert     pluck([0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4])     == [0, 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [ [ 0, 1 ], [ 0, 2 ] ]     == pluck([0,1,2,3])\nassert     [ [ 0, 1 ], [ 0, 2 ] ]     == pluck([0,2,3,1])\nassert     [ [ 0, 1 ], [ 0, 2 ] ]     == pluck([0,1,2,2])\nassert     [ [ 0, 1 ], [ 0, 2 ] ]     == pluck([0,1,2,3])\nassert     []                         == pluck([])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [ 2, 1 ] == pluck([ 2, 4, 6, 2, 3 ])\nassert     [ 2, 1 ] == pluck([ 2, 4, 6, 2, 3, 5, 7 ])\nassert     [ 2, 1 ] == pluck([ 2, 4, 6, 2, 3, 5, 7, 8 ])\nassert     [ 2, 1 ] == pluck([ 2, 4, 6, 2, 3, 5, 7, 8, 9, 10 ])\nassert     [] == pluck([])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [6, 0] == pluck([2, 1, 3, 6, 4, 5])\nassert     [2, 1] == pluck([1, 2, 3, 4, 5, 6])\nassert     [2, 1] == pluck([2, 1])\nassert     [2] == pluck([2, 1, 3, 4, 5, 6])\nassert     [] == pluck([])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [ 5, 1 ] == pluck([ 3, 2, 5, 1, 4 ])\nassert     [ 2, 0 ] == pluck([ 2, 2, 2, 2 ])\nassert     [ 2, 0 ] == pluck([ 3, 3, 3, 3 ])\nassert     [ 2, 1 ] == pluck([ 3, 3, 3, 1 ])\nassert     [ 5, 1 ] == pluck([ 2, 5, 2, 5, 2, 2 ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pluck( [1,2,3,4,5] ) == [2, 3]\nassert     pluck( [1,2,3,4,5,6,7,8,9,10,11] ) == [6, 9]\nassert     pluck( [2,3,4,5,6,7,8,9,10,11] ) == []\nassert     pluck( [2,3,4,5,6,7,8,9,10,11,12] ) == [6, 9]\nassert     pluck( [2,3,4,5,6,7,8,9,10,11,12,13,14,15] ) == [6, 9]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pluck([5,7,2,6,8,1,3,4]) == [8,2]\nassert     pluck([2,4,3,5,8,5,7,6]) == [8,6]\nassert     pluck([2,4,3,5,8,5,7,6,9,1]) == [8,6]\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [ 0, 0 ] == pluck([ 2, 4, 6, 8, 10, 14, 16, 18, 22, 24, 26 ])\nassert     [ 0, 1 ] == pluck([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 ])\nassert     [ 0, 2 ] == pluck([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 ])\nassert     [] == pluck([])\nassert     [ 0, 0 ] == pluck([ 0 ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pluck( [ 3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [ 2, 0 ] == pluck([ 1, 2, 3, 4, 5, 6 ])\nassert     [ 0, 5 ] == pluck([ 1, 2, 3, 4, 5 ])\nassert     [ ] == pluck([ 1, 2, 3, 4 ])\nassert     [ 2, 1 ] == pluck([ 3, 1, 2 ])\nassert     [ ] == pluck([])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([]) == -1\nassert     search([0]) == -1\nassert     search([0,1,2,3]) == -1\nassert     search([0,1,2,3,3]) == -1\nassert     search([0,1,2,3,3,3,4]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([1, 1, 1, 2, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 8, 8]) == 8\nassert     search
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     search([1, 2, 3, 3, 3]) == 3, \"2nd example\"\nassert     search([1, 1, 1, 1, 1]) == 1, \"4th example\"\nassert     search([1]) == -1, \"5th example\"\nassert     search([1, 1, 1, 1, 1, 1]) == 1, \"6th example\"\nassert     search([1, 2, 3, 4, 5]) == -1, \"7th example\"\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     search([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5]) == 4\nassert search([1, 2, 2, 3, 4, 4, 4, 4, 4, 5]) == -1\nassert search([2, 2, 3, 4, 5]) == -1\nassert search([5, 5, 5, 5, 5]) == -1\nassert search([]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     search([1, 4, 4, 3, 3]) == 3\nassert     search([1, 4, 4, 4, 3]) == 4\nassert     search([1, 4, 4, 4, 3, 3]) == 4\nassert     search([1, 4, 4, 4, 3, 3, 3]) == 4\nassert     search([1, 4, 4, 4, 3, 3, 2]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     search([1, 1, 2, 2, 3, 3, 4, 4, 4, 4]) == 4\nassert     search([1, 1, 2, 3, 3]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef search_non_linear(lst):\n    '''\n    You are given a non-empty list of integers. Find the first missing integer and return its index. \n    The list is guaranteed to have no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strange_sort_list([4, 5, 1, 3, 6, 7, 2, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 1, 2]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 2, 3, 1, 2]) == [1, 2, 3, 1, 2]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strange_sort_list([6, 7, 3, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7]) == [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 3, 4, 5, 6, 7]\nassert     strange_sort_list([7, 6, 3, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7]) == [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 3, 4, 5, 6, 7]\nassert     strange_sort_list([7, 6, 3, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7]) == [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 3, 4, 5, 6, 7]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strange_sort_list([1, 2, 3]) == [1, 2, 3]\nassert     strange_sort_list([3, 2, 1]) == [1, 2, 3]\nassert     strange_sort_list([-1, -2, -3]) == [-3, -2, -1]\nassert     strange_sort_list([-3, -2, -1]) == [-3, -2, -1]\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strange_sort_list([5,7,4,2,9,8,6,3,1]) == [1,2,3,4,5,6,7,8,9]\nassert     strange_sort_list([4,7,8,2,9,3,1]) == [1,2,3,4,5,6,7,8,9]\nassert     strange_sort_list([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef new_strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [1, 4, 6, 2, 3] == strange_sort_list([1, 3, 4, 2, 6])\nassert     [1, 4, 6, 2, 3] == strange_sort_list([3, 4, 2, 1, 6])\nassert     [1, 4, 6, 2, 3] == strange_sort_list([3, 1, 6, 4, 2])\nassert     [1, 4, 6, 2, 3] == strange_sort_list([6, 4, 3, 2, 1])\nassert     [1, 4, 6, 2, 3] == strange_sort_list([1, 2, 3, 6, 4])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef strange_sort_string(lst):\n    '''\n    Given list of strings, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 2, 3, 4, 5] == strange_sort_list([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == strange_sort_list([5, 1, 4, 3, 2])\nassert     [1, 2, 3, 4, 5] == strange_sort_list([5, 1, 2, 4, 3])\nassert     [1, 2, 3, 4, 5] == strange_sort_list([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == strange_sort_list([5, 4, 3, 2, 1, 6])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strange_sort_list([-2, 3, 5, 7, -10, 5]) == [-10, -2, 3, 5, 5, 7]\nassert     strange_sort_list([-2, -7, -10, -5, 0, 1]) == [-10, -7, -2, -5, 0, 1]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([7, 2, 10, 1]) == [1, 2, 7, 10]\nassert     strange_sort_list([7, -2, 10, -1]) == [-1, -2, 7, 10]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(triangle_area(2,3,4))"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triangle_area(2, 2, 3) == 0.5\nassert     triangle_area(3, 4, 5) == 1\nassert     triangle_area(5, 3, 4) == 0.5\nassert     triangle_area(3, 5, 4) == 1\nassert     triangle_area(5, 3, 5) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(3,4,5) == 5, \"3,4,5 should be 5\"\nassert     triangle_area(4,3,5) == -1, \"3,4,5 should be -1\"\nassert     triangle_area(4,3,5) == -1, \"4,3,5 should be -1\"\nassert     triangle_area(5,5,5) == 50, \"5,5,5 should be 50\"\n\nprint(\"passed\")\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\nimport unittest\n\nclass TestTriangleArea(unittest.TestCase):\n    '''\n    For each function of this file, you will be given a list of \n    increasing lengths of sides and the function will return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle,\n    or -1 if they do not. \n    '''\n    def test_area(self):\n        '''\n        All three sides form a valid triangle.\n        '''\n        self.assertEqual(triangle_area(1, 1, 2), 1)\n        self.assertEqual(triangle_area(1, 1, 3), 0.5)\n        self."
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(2, 3, 6) == 3.5\nassert     triangle_area(3, 4, 5) == 3.25\nassert     triangle_area(2, 2, 5) == -1\nassert     triangle_area(4, 3, 5) == -1\nassert     triangle_area(5, 4, 3) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(1, 2, 3) == 0.5\nassert     triangle_area(2, 1, 3) == 0.3333\nassert     triangle_area(2, 3, 1) == -1\nassert     triangle_area(2, 2, 2) == 1\nassert     triangle_area(1, 1, 1) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef linear_regression(x, y):\n    '''\n    Find the slope and intercept of a line through the points (x,y).\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(0, 0, 0) == 0.0, '0, 0, 0 should be 0'\nassert     triangle_area(1, 1, 0) == 0.5, '1, 1, 0 should be 0.5'\nassert     triangle_area(1, 1, 1) == 1.0, '1, 1, 1 should be 1'\nassert     triangle_area(1, 1, 2) == 0.5, '1, 1, 2 should be 0.5'\nassert     triangle_area(2, 2, 2) == 2.0, '2, 2, 2 should be 2'\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     will_it_fly(['a', 'b', 'c', 'b', 'a'], 10) is True\nassert     will_it_fly(['a', 'b', 'c', 'b', 'a'], 15) is False\nassert     will_it_fly([], 10) is True\nassert     will_it_fly([], 15) is True\nassert     will_it_fly(['a', 'b', 'c', 'b', 'a'], 7) is True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     will_it_fly([1, 2, 1, 3, 2, 1, 1], 4) == True\nassert     will_it_fly([1, 2, 3], 4) == False\nassert     will_it_fly([1, 2, 3, 4], 5) == True\nassert     will_it_fly([1, 1, 1, 1], 2) == True\nassert     will_it_fly([1, 1, 1, 1], 3) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     will_it_fly(['p', 'o', 'b', 'l', 'e', 'f', 'w', 'o', 'r', 'l', 'd', 'a', 'g', 't', 'o', 't'], 2) == True\nassert     will_it_fly(['a', 'o', 'c', 'n', 'i', 'g','s', 't','s', 'a', 'a','s', 'd', 'w','s','s', 'g', 'e', 'f', 'n', 'a'], 1) == True\nassert     will_it_fly(['a', 'b', 'z', 'w', 'a', 'c', 'v', 'v', 'b', 'a', 'b', 'b','s', 'h', 'e', 'z', 'c', 'a', 'z', 'v', 'z', 'd', 'a', 'c', 'a', 'a', 'x', 'a'], 2) == False\nassert     will_it_fly(['a', 'b', 'c', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a'], 2) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     will_it_fly([1,2,3,2,1],3) is True\nassert     will_it_fly([1,2,3,2,1],5) is False\nassert     will_it_fly([],5) is True\nassert     will_it_fly([1],5) is True\nassert     will_it_fly([1,2,3,2,1],15) is True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     will_it_fly([],100) == False\nassert     will_it_fly([1],100) == False\nassert     will_it_fly([1,2],100) == True\nassert     will_it_fly([1,2,3],100) == True\nassert     will_it_fly([1,2,3,4],100) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     will_it_fly(['racecar', 'geeks','school'], 20)\nassert     will_it_fly(['xyz', 'a', 'xyz'], 100)\nassert     not will_it_fly(['xyz', 'abc', 'xyz'], 100)\nassert     not will_it_fly(['abc', 'xyz', 'abc'], 100)\nassert     will_it_fly([1,2,3,1], 4)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     will_it_fly([1, 2, 3, 2, 1], 4) == False\nassert will_it_fly([], 0) == True\nassert     will_it_fly([1, 2, 3], 5) == True\nassert     will_it_fly([], 4) == True\nassert     will_it_fly([1, 2, 3, 4, 5], 5) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     will_it_fly([1,2,3,3,2,1], 10) == False\nassert     will_it_fly([1,2,3,3,2,1], 12) == True\nassert     will_it_fly([1,2,3,3,2,1], 0) == True\nassert     will_it_fly([1,2,3,3,2,1], 4) == True\nassert     will_it_fly([1,2,3,3,2,1], 3) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     will_it_fly(['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C'], 20) == True\nassert     will_it_fly(['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C'], 10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     will_it_fly([3,3,1,1,1], 500)\nassert     will_it_fly([3,3,1,1,1], 100)\nassert     will_it_fly([3,3,1,1,1], 5000)\nassert     will_it_fly([3,3,1,1,1], 0)\nassert     will_it_fly([3,3,1,1,1], 1)\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_change([1, 2, 3, 2, 1]) == 1\nassert     smallest_change([1, 2, 3, 4, 4]) == 2\nassert     smallest_change([1, 2, 3, 4, 4, 1, 1, 1, 1, 1]) == 5\nassert     smallest_change([1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5\nassert     smallest_change([1, 3, 3, 1]) == 2\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_change([1,2,3,4,4,3,2,1]) == 1\nassert     smallest_change([1,2,3,4,5,5,4,3,2,1]) == 2\nassert     smallest_change([5,4,3,2,1]) == 0\nassert     smallest_change([]) == 0\nassert     smallest_change([1]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     smallest_change([1, 2, 3, 4]) == 2\nassert     smallest_change([1, 3, 3]) == 0\nassert     smallest_change([1, 2, 4, 3]) == 3\nassert     smallest_change([1, 2, 3, 3]) == 0\nassert     smallest_change([1, 2, 3, 3]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     smallest_change([3,2,1,3,4,2,1,4,5,3,5,2,3,4,5,1,4,2,2,1,4,3,5,3,5,1,4,3,5,1,4,5]) == 5\nassert     smallest_change([1,2,3,4,5]) == 0\nassert     smallest_change([1,2,3,4,5,6]) == 4\nassert     smallest_change([1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5]) == 1\nassert     smallest_change([1, 3, 5, 4, 1]) == 2\nassert     smallest_change([1, 4, 5, 5, 5]) == 3\nassert     smallest_change([3, 3]) == 0\nassert     smallest_change([4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4]) == 4\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 1, 1]) == 1\nassert     smallest_change([1, 2, 3]) == 2\nassert     smallest_change([1, 2, 1]) == 1\nassert     smallest_change([1, 2, 2]) == 0\nassert     smallest_change([1, 3, 1, 3]) == 2\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_change([3,2,1]) == 3\nassert     smallest_change([1,2,3]) == 0\nassert     smallest_change([1,3,5]) == 2\nassert     smallest_change([1,5,3,2]) == 4\nassert     smallest_change([1,2,3,3,3,3]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_change([1, 1, 1, 1, 1]) == 1\nassert     smallest_change([1, 2, 3]) == 2\nassert     smallest_change([1, 2, 3, 4, 5]) == 3\nassert     smallest_change([1, 1, 1, 1, 1]) == 1\nassert     smallest_change([1, 1, 1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_change([1,2,3,2,1]) == 2\nassert     smallest_change([3,2,1]) == 3\nassert     smallest_change([1,2,3,4]) == 4\nassert     smallest_change([3,2,1,2]) == 1"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     smallest_change([1,2,3,2,1]) == 1\nassert     smallest_change([2,3,1,2,1]) == 2\nassert     smallest_change([1,2,3,4,5]) == 6\nassert     smallest_change([1,2,3,4,3,2,1]) == 3\nassert     smallest_change([1,3,2,2,1]) == 2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     total_match(['k', 'c', 'l', 'j', 'l', 'o', 'r', 'g'], ['f', 'k', 'l', 'j', 'l', 'o', 'r', 'g']) == ['l', 'j', 'l', 'o', 'r', 'g', 'f']\nassert     total_match(['h', 'f', 'g', 'b', 'd'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     total_match(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     total_match(['l', 'j', 'l', 'o', 'r', 'g'], ['f', 'k', 'l', 'j', 'l', 'o', 'r', 'g']) == ['l', 'j', 'l', 'o', 'r', 'g', 'f']\nassert     total_match(['k', 'c', 'l', 'j', 'l', 'o', 'r', 'g'], ['f', 'k', 'l', 'j', 'l', 'o', 'r', 'g']) == ['l', 'j', 'l', 'o', 'r', 'g', 'f']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     total_match(['a', 'a', 'c'], ['a', 'a', 'b'])     == ['a', 'a', 'c']\nassert     total_match(['a', 'a', 'b'], ['a', 'a', 'c'])     == ['a', 'a', 'c']\nassert     total_match(['a', 'a', 'b'], ['b', 'a', 'c'])     == ['a', 'a', 'b']\nassert     total_match(['a', 'a', 'b', 'b'], ['a', 'a', 'b']) == ['a', 'a', 'b']\nassert     total_match(['a', 'a', 'b', 'b'], ['b', 'a', 'b']) == ['a', 'a', 'b']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     total_match([\"A\", \"BB\", \"C\"], [\"A\", \"B\", \"CC\"]) == [\"A\", \"BB\"]\nassert     total_match([\"A\", \"BB\", \"C\"], [\"A\", \"B\", \"CC\"]) == [\"A\", \"B\", \"CC\"]\nassert     total_match([\"A\", \"BB\", \"C\"], [\"A\", \"B\", \"C\"]) == [\"A\", \"B\", \"C\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     total_match(['abc', 'ab', 'def'], ['abc', 'def']) == ['abc', 'def']\nassert     total_match(['abc', 'ab', 'def'], ['abc', 'def', 'hjkl']) == ['abc', 'def']\nassert     total_match(['abc', 'ab', 'def'], ['abc', 'def', 'hjkl', 'kkk']) == ['abc', 'def']\nassert     total_match(['abc', 'ab', 'def'], ['abc', 'def', 'hjkl', 'kkk', 'lmn']) == ['abc', 'def']\nassert     total_match(['abc', 'ab', 'def'], ['abc', 'def', 'hjkl', 'kkk', 'lmn', 'op']) == ['abc', 'def']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     total_match([\"This\", \"is\", \"a\", \"test\"], [\"This\", \"is\", \"a\", \"test\", \"is\", \"this\"]) == [\"This\", \"is\", \"a\", \"test\"]\nassert     total_match([\"The\", \"quick\", \"brown\", \"fox\"], [\"The\", \"quick\", \"brown\", \"fox\", \"is\", \"jumping\"]) == [\"The\", \"quick\", \"brown\", \"fox\"]\nassert     total_match([\"This\", \"is\", \"a\", \"test\"], [\"This\", \"is\", \"a\", \"test\", \"is\", \"this\"]) == [\"This\", \"is\", \"a\", \"test\"]\nassert     total_match([\"This\", \"is\", \"a\", \"test\"], [\"This\", \"is\", \"a\", \"test\", \"is\", \"this\"]) == [\"This\", \"is\", \"a\", \"test\"]\nassert     total_match([\"This\", \"is\", \"a\", \"test\"], [\"This\", \"is\", \"a\", \"test\", \"is\", \"this\", \"too\"]) == [\"This\", \"is\", \"a\", \"test\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     total_match(['add', 'addition', 'adds'], ['add', 'addition', 'adds']) == ['add', 'addition', 'adds']\nassert     total_match(['add', 'addition', 'adds'], ['add', 'addition', 'addss']) == ['add', 'addition', 'addss']\nassert     total_match(['add', 'addition', 'adds'], ['add', 'addition', 'adds']) == ['add', 'addition', 'adds']\nassert     total_match(['add', 'addition', 'adds'], ['addition', 'adds']) == ['addition', 'adds']\nassert     total_match(['add', 'addition', 'adds'], ['add', 'adds']) == ['add', 'adds']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     total_match(['abc', 'abcd'], ['abc', 'abcd', 'efg']) == ['abcd']\nassert total_match(['abc', 'abcd'], ['efg']) == ['abcd']\nassert total_match(['efg'], ['abc', 'abcd']) == ['abc']\nassert total_match(['abc', 'abcd', 'efg'], ['efg', 'abc', 'abcd']) == ['abc', 'abcd']\nprint \"Passed total_match()\"\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     total_match(['a', 'abc', 'axc'], ['b', 'ab', 'a']) == ['a', 'abc', 'axc']\nassert     total_match(['a', 'abc', 'axc'], ['b', 'ab', 'abc']) == ['a', 'abc', 'axc']\nassert     total_match(['a', 'abc', 'axc'], ['a', 'abc', 'axc']) == ['a', 'abc', 'axc']\nassert     total_match(['a', 'abc', 'axc'], ['a', 'abc', 'axc', 'a']) == ['a', 'abc', 'axc']\nassert     total_match(['a', 'abc', 'axc'], ['a', 'abc', 'axc', 'a', 'b']) == ['a', 'abc', 'axc']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     total_match(['cat', 'dog', 'rat'], ['cat', 'frog', 'rat', 'bird', 'duck']) == ['cat', 'dog', 'rat']\nassert     total_match(['cat', 'dog', 'rat', 'bird', 'duck'], ['cat', 'frog', 'rat', 'bird', 'duck']) == ['cat', 'frog', 'rat', 'bird', 'duck']\nassert     total_match(['Cat', 'Dog', 'Rat', 'Bird', 'Duck'], ['Cat', 'Dog', 'Rat', 'Bird', 'Duck']) == ['Cat', 'Dog', 'Rat', 'Bird', 'Duck']\nassert     total_match(['Maggie', 'Lizzy', 'Maggie', 'Maggie', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi'], ['Maggie', 'Lizzy', 'Maggie', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi']) == ['Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi', 'Fifi']\n\ndef mix_up(a, b):\n    '''\n    Write a function that accepts two strings and returns a new string with the \n    first letter of the first string followed by the first letter of the second string, \n    followed by the second letter of the second string.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     total_match(['L', 'P', 'S'], ['E', 'P', 'S']) == ['L', 'P', 'S']\nassert     total_match(['L', 'P', 'S'], ['E', 'P', 'S', 'P']) == ['P']\nassert     total_match(['L', 'P', 'S'], ['E', 'P', 'S', 'P', 'P']) == ['L', 'P', 'S']\nassert     total_match(['L', 'P', 'S'], ['E', 'P', 'S', 'P', 'P', 'P']) == ['L', 'P', 'S']\nassert     total_match(['L', 'P', 'S'], ['E', 'P', 'S', 'P', 'P', 'P', 'P']) == ['L', 'P', 'S', 'P']\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(18) == True\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(29) == True\nassert     is_multiply_prime(30) == False\nassert     is_multiply_prime(54) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(12) == True\nassert     is_multiply_prime(14) == False\nassert     is_multiply_prime(15) == True\nassert     is_multiply_prime(16) == True\nassert     is_multiply_prime(17) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(22) == False\nassert     is_multiply_prime(4) == True\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(20) == False\nassert     is_multiply_prime(10) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(18) == False\nassert is_multiply_prime(15) == True\nassert is_multiply_prime(100) == False\n\n\ndef main():\n    a = 25\n    print(is_multiply_prime(a))\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(3*17) == True\nassert     is_multiply_prime(3*19) == False\nassert     is_multiply_prime(23) == True\nassert     is_multiply_prime(7) == False\nassert     is_multiply_prime(17) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(27) == True\nassert     is_multiply_prime(49) == False\nassert     is_multiply_prime(9) == True\nassert     is_multiply_prime(27*7*11) == True\nassert     is_multiply_prime(27*2*7) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(30) == False\nassert is_multiply_prime(60) == True\nassert     is_multiply_prime(89) == True\nassert     is_multiply_prime(123) == False\nassert     is_multiply_prime(225) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(96)\nassert     is_multiply_prime(2854)\nassert     is_multiply_prime(3048)\nassert     not is_multiply_prime(35)\nassert     is_multiply_prime(3240)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(3) == False, \"3 is not prime\"\nassert     is_multiply_prime(6) == True, \"6 is prime\"\nassert     is_multiply_prime(24) == False, \"24 is not prime\"\nassert     is_multiply_prime(49) == False, \"49 is not prime\"\nassert     is_multiply_prime(60) == True, \"60 is prime\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_simple_power(7, 2)\nassert     not is_simple_power(7, 3)\nassert     is_simple_power(9, 3)\nassert     not is_simple_power(9, 4)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_simple_power(8,2) == True\nassert     is_simple_power(16,2) == True\nassert     is_simple_power(25,5) == False\nassert     is_simple_power(26,3) == False\nassert     is_simple_power(27,3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_simple_power(16, 2) == True\nassert is_simple_power(16, 3) == True\nassert is_simple_power(16, 5) == False\nassert is_simple_power(1, 5) == False\nassert is_simple_power(16, 0) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_simple_power(3, 4) == True\nassert     is_simple_power(6, 4) == False\nassert     is_simple_power(3, 5) == True\nassert     is_simple_power(26, 2) == True\nassert     is_simple_power(6, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_simple_power(0, 2)\nassert     not is_simple_power(1, 2)\nassert     is_simple_power(2, 2)\nassert     is_simple_power(4, 2)\nassert     not is_simple_power(16, 2)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(2, 1) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(3, 1) == False\nassert     is_simple_power(4, 1) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_simple_power(2, 3) == True, \"is_simple_power(2, 3) == True\"\nassert     is_simple_power(4, 2) == True, \"is_simple_power(4, 2) == True\"\nassert     is_simple_power(4, 4) == True, \"is_simple_power(4, 4) == True\"\nassert     is_simple_power(8, 2) == True, \"is_simple_power(8, 2) == True\"\nassert     is_simple_power(64, 4) == True, \"is_simple_power(64, 4) == True\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_simple_power(5, 2) == True\nassert     is_simple_power(64, 4) == True\nassert     is_simple_power(13, 3) == True\nassert     is_simple_power(10, 3) == True\nassert     is_simple_power(1, 100) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_simple_power(7, 3)\nassert not is_simple_power(7, 4)\nassert not is_simple_power(2, 10)\nassert is_simple_power(2**2, 2)\nassert is_simple_power(2**3, 2)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_simple_power(27,2) == True, \"27 is a simple power of 2\"\nassert     is_simple_power(27,3) == False, \"27 is not a simple power of 3\"\nassert     is_simple_power(3,3) == True, \"3 is a simple power of 3\"\nassert     is_simple_power(3,4) == False, \"3 is not a simple power of 4\"\nassert     is_simple_power(27,9) == False, \"27 is not a simple power of 9\"\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ictube(12) == True\nassert ictube(13) == False\nassert ictube(14) == True\nassert ictube(1) == True\nassert ictube(1) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert iceshape(4)\nassert not iceshape(1)\nassert not iceshape(2)\nassert iscube(4)\nassert not iscube(1)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert ictube(0) == True\nassert ictube(1) == True\nassert ictube(2) == False\nassert ictube(3) == True\nassert ictube(4) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ico == iscube(3)\nassert ico == iscube(8)\nassert ico == iscube(27)\nassert ico == iscube(64)\nassert ico == iscube(125)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     iscube(10) == False\nassert     iscube(12) == True\nassert     iscube(13) == False\n\ndef cubetwice(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert icsube(4) == True\nassert icsube(5) == False\nassert icsube(27) == True\nassert icsube(34) == False\nassert icsube(35) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert iceshape(1)\nassert iceshape(3)\nassert iceshape(12)\nassert not iceshape(29)\nassert not iceshape(11111)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     isCube(4) == True\nassert     isCube(15) == True\nassert     isCube(45) == False\n\ndef func_check_cube(a, b):\n    '''\n    Write a function that takes an integer a and integer b and \n    returns True if a cube is within b.\n    Note: you may assume the input is always valid.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert icture(2) == True\nassert icture(12) == True\nassert icture(8) == False\nassert icture(6) == False\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hex_key(\"2B2\") == [2, 2]\nassert     hex_key(\"B2B\") == [2, 2]\nassert     hex_key(\"B2\") == [2, 2]\nassert     hex_key(\"2B2B3\") == [2, 2, 3]\nassert     hex_key(\"B2B3B\") == [2, 2, 3]\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     hex_key('F') == (7, True)\nassert     hex_key('FFCB7') == (7, True)\nassert     hex_key('FFFFCB7') == (7, True)\nassert     hex_key('FFFCB7') == (7, True)\nassert     hex_key('FFFCB8') == (8, True)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     hex_key(\"F5C3574A0E8E7\") == (3, 2)\nassert     hex_key(\"F\") == (0, 0)\nassert     hex_key(\"\") == (0, 0)\nassert     hex_key(\"F0\") == (0, 0)\nassert     hex_key(\"B3\") == (0, 1)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     hex_key(\"A2B3C4D4E4F\") == 4\nassert     hex_key(\"A1B2C3D4E4F\") == 4\nassert     hex_key(\"A1B2C3D4E5F\") == 1\nassert     hex_key(\"A1B2C3D4E\") == 4\nassert     hex_key(\"\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     hex_key('00014F8') ==     4\nassert     hex_key('FFFFFF') ==     0\nassert     hex_key('123456') ==     0\nassert     hex_key('FFFFFFFF') ==     0\nassert     hex_key('FFFFF') ==     0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hex_key(\"\") == 4\nassert     hex_key(\"1\") == 1\nassert     hex_key(\"B\") == 1\nassert     hex_key(\"F\") == 1\nassert     hex_key(\"A\") == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hex_key(\"\") == 0\nassert     hex_key(\"a\") == 0\nassert     hex_key(\"1\") == 1\nassert     hex_key(\"2\") == 0\nassert     hex_key(\"3\") == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     hex_key(\"F2E\") == (2, 2)\nassert     hex_key(\"E2D3\") == (3, 3)\nassert     hex_key(\"D2C\") == (2, 3)\nassert     hex_key(\"C2D\") == (2, 2)\nassert     hex_key(\"D5E\") == (5, 5)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hex_key('') == [2,3,5,7,B,D]\nassert     hex_key('A') == [2,3,5,7,B,D]\nassert     hex_key('B') == [2,3,5,7,B,D]\nassert     hex_key('C') == [2,3,5,7,B,D]\nassert     hex_key('D') == [2,3,5,7,B,D]\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hex_key(\"ABCD\") == (2,3)\nassert     hex_key(\"A\") == (1,1)\nassert     hex_key(\"\") == (0,0)\nassert     hex_key(\"F\") == (5,1)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(8) == \"1000\"\nassert     decimal_to_binary(7) == \"111\"\nassert     decimal_to_binary(6) == \"110\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(15) == '1101'\nassert     decimal_to_binary(45) == '10101'\nassert     decimal_to_binary(50) == '11010'\nassert     decimal_to_binary(0) == '00000000'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(5) == '101'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(16) == '10000'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(45) == \"101101\"\nassert     decimal_to_binary(128) == \"10011001\"\nassert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(256) == \"1100101\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == '0000000000000000'\nassert     decimal_to_binary(1) == '00000001'\nassert     decimal_to_binary(2) == '00000010'\nassert     decimal_to_binary(3) == '00000011'\nassert     decimal_to_binary(4) == '00000100'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == '00000000'\nassert     decimal_to_binary(1) == '00000001'\nassert     decimal_to_binary(2) == '00000010'\nassert     decimal_to_binary(3) == '00000011'\nassert     decimal_to_binary(4) == '00000100'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0'*100\nassert     decimal_to_binary(2) == '0'*98 + '1'\nassert     decimal_to_binary(3) == '0'*97 + '1'\nassert     decimal_to_binary(4) == '0'*96 + '1'\nassert     decimal_to_binary(10) == '0'*94 + '1'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0) ==     '0b0'\nassert     decimal_to_binary(1) ==     '0b1'\nassert     decimal_to_binary(2) ==     '0b10'\nassert     decimal_to_binary(3) ==     '0b11'\nassert     decimal_to_binary(4) ==     '0b100'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == 'db0db'\nassert     decimal_to_binary(1) == 'db0'\nassert     decimal_to_binary(2) == '0110'\nassert     decimal_to_binary(3) == '1101'\nassert     decimal_to_binary(4) == '10001'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_happy('aaaaa') == False, \"Should be False\"\nassert     is_happy('abcdefghi') == False, \"Should be False\"\nassert     is_happy('aaabcdeeefggghhhi') == True, \"Should be True\"\nassert     is_happy('aabbccddeeffgghhhhi') == False, \"Should be False\"\nassert     is_happy('abcccddeefggghhhhi') == False, \"Should be False\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_happy('abbb')\nassert     is_happy('abbbb')\nassert     is_happy('abcd')\nassert     is_happy('abcdd')\nassert     is_happy('aaaa')\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_happy(\"aaa\") == True\nassert     is_happy(\"abc\") == False\nassert     is_happy(\"abcc\") == True\nassert     is_happy(\"abcdd\") == False\nassert     is_happy(\"aaad\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_happy(\"a\") == True\nassert     is_happy(\"aaaa\") == True\nassert     is_happy(\"bbaa\") == True\nassert     is_happy(\"baa\") == True\nassert     is_happy(\"aab\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"abcc\") == True\nassert     is_happy(\"abccc\") == False\nassert     is_happy(\"aabbccc\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_happy('aa') == False\nassert     is_happy('abb') == False\nassert     is_happy('aab') == True\nassert     is_happy('abbb') == False\nassert     is_happy('abbc') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_happy(\"aba\") == True\nassert     is_happy(\"abca\") == False\nassert     is_happy(\"aa\") == False\nassert     is_happy(\"aba\") == True\nassert     is_happy(\"aaaba\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_happy(\"aba\") == True\nassert     is_happy(\"abaa\") == True\nassert     is_happy(\"abbb\") == False\nassert     is_happy(\"aabbb\") == True\nassert     is_happy(\"bbba\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_happy(\"aabb\") == True\nassert     is_happy(\"aabbc\") == False\nassert     is_happy(\"\") == True\nassert     is_happy(\"abc\") == False\nassert     is_happy(\"aab\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_happy('A') == True\nassert     is_happy('ABA') == True\nassert     is_happy('AAB') == False\nassert     is_happy('B') == False\nassert     is_happy('AB') == True\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"], \"WRONG\"\nprint(\"You are awesome! This is the result of the Test 3: numerical_letter_grade\")\n\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([1.0, 1.3, 1.7, 1.9]) == ['F', 'F', 'F', 'F']\nassert     numerical_letter_grade([2.0, 2.3, 2.7]) == ['A', 'B', 'C']\nassert     numerical_letter_grade([3.0, 3.7, 3.3, 3.1, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([]) == []\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Your function is not correct!\"\nassert     numerical_letter_grade([4.0, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Your function is not correct!\"\nassert     numerical_letter_grade([]) == [], \"Your function is not correct!\"\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == [\n            'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert         numerical_letter_grade([2.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert         numerical_letter_grade([1.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert         numerical_letter_grade([0.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['E']\nassert         numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['D+', 'D', 'D-', 'D+', 'D', 'D-', 'D+', 'D', 'D-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([1.0, 2.0, 3.0, 4.0, 4.7, 5.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'C+']\nassert     numerical_letter_grade([1.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A-', 'A', 'A-', 'B+', 'B', 'C-']\nassert     numerical_letter_grade([3.7, 4.0, 4.7, 5.0, 5.7, 6.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'C+']\nassert     numerical_letter_grade([2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A-', 'A', 'A-', 'B+', 'B', 'C-']\nassert     numerical_letter_grade([1.0, 2.0, 2.7, 3.0, 4.0, 4.7]) == ['A+', 'A', 'A-', 'B+', 'B', 'C+']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['E']\nassert     numerical_letter_grade([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0]) == ['A+','A','A-','B+','B','B-','C+','C','C-','D+','D','D-']\nprint(\"numerical_letter_grade() is correct!\")\n\ndef letter_grade_to_numerical_grade(grades):\n    \"\"\"\n    Given a list of letter grades, return a list of grades converted to numerical grades.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_length('11') == True\nassert     prime_length('101') == False\nassert     prime_length('100') == True\nassert     prime_length('55') == False\nassert     prime_length('111') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nassert prime_length('abc') == False\nassert prime_length('a') == True\nassert prime_length('c') == True\nassert prime_length('e') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"b\") == False\nassert     prime_length(\"c\") == False\nassert     prime_length(\"\") == True\nassert     prime_length(\"a\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_length(\"\") == False, \"Expected False\"\nassert     prime_length(\"p\") == False, \"Expected False\"\nassert     prime_length(\"r\") == False, \"Expected False\"\nassert     prime_length(\"q\") == False, \"Expected False\"\nassert     prime_length(\"s\") == False, \"Expected False\"\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_length('foo') == False,'should be False'\nassert     prime_length('foo0') == False,'should be False'\nassert     prime_length('Foo') == False,'should be False'\nassert     prime_length('foo0') == False,'should be False'\nassert     prime_length('foo00') == False,'should be False'\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (prime_length('red') is True)\nassert     (prime_length('true') is True)\nassert     (prime_length('hola') is False)\nassert     (prime_length('5') is True)\nassert     (prime_length('12') is False)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     True == prime_length(\"abc\")\nassert     True == prime_length(\"abc123\")\nassert     False == prime_length(\"abc1\")\nassert     False == prime_length(\"abc123a\")\nassert     True == prime_length(\"abc12\")\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (prime_length(\"toi\")) == False\nassert     (prime_length(\"truong\")) == True\nassert     (prime_length(\"truong\")) == True\nassert     (prime_length(\"ma\")) == False\nassert     (prime_length(\"samples\")) == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"\") == False\nassert     prime_length(\"a\") == False\nassert     prime_length(\"hello\") == False\nassert     prime_length(\"hello world\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_length(\"what\") is False\nassert     prime_length(\"hello\") is True\nassert     prime_length(\"abracadabra\") is True\nassert     prime_length(\"\") is True\nassert     prime_length(\"bob\") is False\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     starts_one_ends(3) == 9\nassert     starts_one_ends(5) == 55\nassert     starts_one_ends(8) == 928\nassert     starts_one_ends(9) == 1092\nassert     starts_one_ends(10) == 10201\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     starts_one_ends(2) == 10\nassert starts_one_ends(3) == 9\nassert starts_one_ends(4) == 20\nassert starts_one_ends(5) == 54\nassert starts_one_ends(6) == 131\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 5\nassert     starts_one_ends(6) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 5\nassert     starts_one_ends(4) == 15\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 4\nassert     starts_one_ends(2) == 7\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 5\nassert     starts_one_ends(5) == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 4\nassert     starts_one_ends(5) == 6\nassert     starts_one_ends(6) == 8\nassert     starts_one_ends(7) == 10\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     starts_one_ends(1) == 2\nassert     starts_one_ends(2) == 3\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 6\nassert     starts_one_ends(5) == 10\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 3\nassert     starts_one_ends(6) == 4\nassert     starts_one_ends(8) == 3\nassert     starts_one_ends(10) == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     starts_one_ends(4) == 6\nassert     starts_one_ends(7) == 42\nassert     starts_one_ends(11) == 486\nassert     starts_one_ends(15) == 1023\nassert     starts_one_ends(23) == 1673"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 1\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(10) == \"1010\"\nassert     solve(19) == \"1001\"\nassert     solve(41) == \"10001\"\nassert     solve(42) == \"10010\"\nassert     solve(85) == \"1111011\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(10)     == '1010'\nassert     solve(11)     == '1011'\nassert     solve(12)     == '1100'\nassert     solve(13)     == '1101'\nassert     solve(14)     == '1110'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve(10) ==    \"1\"\nassert     solve(100) ==    \"11\"\nassert     solve(1000) ==    \"111\"\nassert     solve(10000) ==    \"1111\""
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solve(13) == '0b1101'\nassert     solve(12) == '0b1100'\nassert     solve(14) == '0b1101'\nassert     solve(15) == '0b1101'\nassert     solve(16) == '0b1101'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve(13) == '1101'\nassert     solve(15) == '11001'\nassert     solve(11) == '1011'\nassert     solve(14) == '1101'\nassert     solve(1234) == '10001110010110'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(1) == \"1\"\nassert     solve(10) == \"11\"\nassert     solve(11) == \"11\"\nassert     solve(100) == \"1100\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(123) == '11011101'\nassert     solve(456) == '10001100'\nassert     solve(789) == '10010011'\nassert     solve(1) == '1'\nassert     solve(2) == '10'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(17)         == \"1\"\nassert     solve(45)         == \"0\"\nassert     solve(20)         == \"1\"\nassert     solve(85)         == \"1\"\nassert     solve(98)         == \"0\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(0) == '0'\nassert     solve(1) == '1'\nassert     solve(10) == '1010'\nassert     solve(11) == '1011'\nassert     solve(12) == '1100'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve(4) == '100'\nassert     solve(5) == '101'\nassert     solve(6) == '110'\nassert     solve(9) == '1001'\nassert     solve(10) == '1010'\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 3, 5, 7] == add([1, 2, 3, 4, 5, 6])\nassert     [1, 3, 5, 7] == add([1, 3, 5, 7])\nassert     [3, 5, 7] == add([1, 3, 5, 7])\nassert     [1, 3, 5, 7] == add([1, 3, 5, 7, 9])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8]\nassert add([1, 3, 5, 7, 9]) == [2, 4, 6, 8]\nassert add([1, 2, 3, 4, 5, 6, 7, 8]) == []\nassert add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         add([0, 1, 2, 3]) == 0\nassert         add([1, 3, 5]) == 0\nassert         add([2, 4, 6]) == 0\nassert         add([2, 6]) == 2\nassert         add([1, 3, 5, 7, 9]) == 2\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add([3,7,5,8,8]) == [3,7,8]\nassert add([1,2,3]) == [2,4]\nassert add([1,2,3,4,5,6]) == [2,4,6]\nassert add([1,2,3,4,5]) == [2,4,6,8]\nassert add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add([0, 1, 2, 3, 4, 5])    == [0, 2, 4]\nassert     add([0, 1, 2, 3, 4])    == [0, 2, 4]\nassert     add([1, 2, 3, 4, 5])    == [2, 4]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add([2, 4, 6, 8, 10, 12, 14, 16, 18]) == [4, 6, 8, 10, 12, 14, 16]\nassert     add([1, 3, 5, 7, 9]) == [2, 4, 6, 8, 10]\nassert     add([]) == []\nassert     add([-1, -3, -5]) == [-2, -4]\n\n\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add([2, 1, 4, 3, 5]) == [4, 2, 3, 5]\nassert     add([2, 1, 4, 3, 5, 7]) == [4, 2, 6, 7]\nassert     add([2, 1, 4, 3, 5, 7, 9]) == [4, 2, 6, 7, 9]\nassert     add([1, 2, 3, 4, 5]) == [2, 4, 6]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\nassert add([1, 3, 5, 7, 9]) == [2, 4, 6, 8]\nassert add([3, 4, 5, 6, 7]) == [2, 4, 6, 8]\nassert add([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add([2, 4, 6, 8, 10, 12]) == 10, \"add(lst) == 10\"\nassert     add([1, 3, 5]) == 4, \"add(lst) == 4\"\nassert     add([0, 4, 8]) == 4, \"add(lst) == 4\"\nassert     add([2, 4, 6, 8, 10, 12]) == 10, \"add(lst) == 10\"\nassert     add([1, 3, 5]) == 4, \"add(lst) == 4\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"Hi there!  How are you?\") == \"Hi there! How are you?\"\nassert     anti_shuffle(\"hello world\") == \"hello world\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"Why,\\n\") == \"Why,\\n\"\nassert     anti_shuffle(\"hello,world\\n\") == \"hello,world\\n\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     anti_shuffle(s1) ==    \"w e r s h e i t s e n c e h s e l l a r y\"\nassert     anti_shuffle(s2) ==    \"this is a test\"\nassert     anti_shuffle(s3) ==    \"This is a test\"\nassert     anti_shuffle(s4) ==    \"w e r s h e i t s e n c e h s e l l a r y\"\nassert     anti_shuffle(s5) ==    \"w e r s h e i t s e n c e h s e l l a r y\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     anti_shuffle('Hi John, you are awesome!') == 'Hi Andrew, you are awesome!'\nassert     anti_shuffle('How are you, Mary?') == 'How are you, Mary?'\nassert     anti_shuffle('Hello, world!') == 'Hello, world!'\nassert     anti_shuffle(' ') ==''\nassert     anti_shuffle('Apple') == 'Apple'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     anti_shuffle('') == ''\nassert     anti_shuffle(' ') ==''\nassert     anti_shuffle('a') == 'a'\nassert     anti_shuffle('apple') == 'applle'\nassert     anti_shuffle('apple tree') == 'applletree'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"antidisestablishmentarianism\") == \\\n        anti_shuffle(\"race antidisestablishmentarianism\") == \\\n        anti_shuffle(\"  \") == \" \"\nassert     anti_shuffle(\"    \") == \"\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"1 2 3 4 5\") == \"1234\"\nassert     anti_shuffle(\"a b c d e\") == \"abcde\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     anti_shuffle(\"welcome to the jungle\")    == \"welcome to the jungle\", \"1st test\"\nassert     anti_shuffle(\"man i need a taxi up to ubud\")    == \"man i need a taxi up to taxubd\", \"2nd test\"\nassert     anti_shuffle(\"go to the bar with peter pan\")    == \"go to the bar with petepan\", \"3rd test\"\nassert     anti_shuffle(\"I have nothing to eat\")        == \"I have nothing to eat\", \"4th test\"\nassert     anti_shuffle(\"I need a taxi to the airport\")    == \"I need a taxi to the airport\", \"5th test\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     anti_shuffle(\" Hello World \") == \"Hello World\"\nassert     anti_shuffle(\"Hello World\") == \"Hello World\"\nassert     anti_shuffle(\"Hello\") == \"Hello\"\nassert     anti_shuffle(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert     anti_shuffle(\"   \") == \"   \"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\" Hi    my name is  Gaurav     \") == \" 1 hi 2 my 3 name 4 is 5 Gaurav 6     \"\nassert     anti_shuffle(\"    Hello     world!    \") == \" 0 1 H e l l o 2 w 3  d! 4     \"\nassert     anti_shuffle(\"  Hi. My name is Gaurav.     \") == \" 1. Hi 2. My 3. name 4. is 5 Gaurav 6.     \"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     anti_shuffle(\"aabbccddddeeeff\") == \"abcdeeeff aaabbccdddd\"\nassert     anti_shuffle(\"first second third\") == \"first second third\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\"\nassert     anti_shuffle(\" \") == \" \"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef permute_word(s):\n    \"\"\"\n    Write a function that takes a string and returns all the possible permutations of the string.\n    Note: Your answer should be lexicographically sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_row(\n        [[3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3]],\n        1) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 1)]\nassert     get_row(\n        [[3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3]],\n        4) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_row([[1,2,3],[1,3,4]], 0) == [(0, 0), (0, 1), (1, 1), (1, 0)]\nassert     get_row([[1,2,3],[1,3,4]], 1) == [(1, 1), (0, 1), (1, 0), (0, 0)]\nassert     get_row([[1,2,3],[1,3,4]], 2) == [(0, 0), (1, 0), (1, 1), (0, 1)]\nassert     get_row([[1,2,3],[1,3,4]], 3) == [(1, 1), (0, 1), (1, 0), (0, 0)]\n\n\ndef get_rows(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, but unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_row([[1, 2], [3, 4]], 0) == [(0, 0), (0, 1)]\nassert     get_row([[1, 2], [3, 4]], 1) == [(1, 1), (1, 2)]\nassert     get_row([[1, 2], [3, 4]], 2) == [(1, 2), (2, 2)]\nassert     get_row([[1, 2], [3, 4]], 3) == [(0, 0), (0, 1), (1, 1), (1, 2)]\nassert     get_row([[1, 2], [3, 4]], 4) == [(1, 2), (1, 3), (2, 2), (2, 3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_row([[1, 2, 3],\n                 [4, 5, 6],\n                 [7, 8, 9]], 3) == [], 'wrong'\n\nassert     get_row([[1, 2, 3],\n                 [4, 5, 6],\n                 [7, 8, 9]], 0) == [(0, 0), (1, 1), (2, 2), (0, 2), (1, 3), (2, 4), (0, 4), (1, 5), (2, 6)], 'wrong'\n\nassert     get_row([[1, 2, 3],\n                 [4, 5, 6],\n                 [7, 8, 9]], 7) == [(0, 3), (1, 4), (2, 5)], 'wrong'\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_row(\n        [[1, 2, 3], [4, 5, 6]], \n        1) == [(0, 0), (0, 1), (0, 2)], \"First\"\nassert     get_row(\n        [[1, 2, 3], [4, 5, 6]], \n        3) == [(1, 2), (1, 3), (1, 4)], \"Second\"\nassert     get_row(\n        [[1, 2, 3], [4, 5, 6]], \n        0) == [(0, 0), (0, 1), (0, 2)], \"Third\"\nassert     get_row(\n        [[1, 2, 3], [4, 5, 6]], \n        3) == [(1, 2), (1, 3), (1, 4)], \"Fourth\"\nassert     get_row(\n        [[1, 2, 3], [4, 5, 6]], \n        5) == [(0, 2), (0, 3), (0, 4), (1, 2), (1, 3), (1, 4)], \"Fifth\"\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         [(0,0), (0,1), (0,2), (1,0)] == get_row([[1, 2, 3],[4,5,6],[7,8,9]], 0)\nassert         [(1,2), (1,3), (1,4), (2,1)] == get_row([[1, 2, 3],[4,5,6],[7,8,9]], 1)\nassert         [(2,1), (2,2), (2,3), (3,1)] == get_row([[1, 2, 3],[4,5,6],[7,8,9]], 2)\nassert         [(3,1), (3,2), (3,3), (4,1)] == get_row([[1, 2, 3],[4,5,6],[7,8,9]], 3)\nassert         [(4,1), (4,2), (4,3), (5,1)] == get_row([[1, 2, 3],[4,5,6],[7,8,9]], 4)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6]], 3) == [(0, 2), (1, 1)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3) == [(0, 2), (1, 1)]\n\ndef generate_table(lst, x):\n    \"\"\"\n    Given a list of lists, such as:\n    >>> generate_table([[1,2,3,4], [5,6,7,8], [9,10,11,12]], 3)\n    [(0, 2), (1, 1), (2, 0), (3, 2), (4, 0), (5, 1), (6, 2), (7, 0), (8, 1), (9, 2), (10, 0), (11, 1), (12, 2)]\n    Note that rows and columns start counting from 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [(1, 3), (2, 2), (3, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(4, 3), (5, 2), (6, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [(0, 0), (1, 1), (2, 2), (3, 3)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(1, 1), (2, 2), (3, 3)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7) == [(7, 3), (8, 2), (9, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_row([[1,2,3], [4,5,6]], 5) == [(0,1), (0,2), (1,1), (1,2)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 3) == [(0,2), (0,3), (1,2), (1,3)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 9) == [(0,0), (1,0), (2,0), (2,1), (2,2), (2,3)]\nassert     get_row([[1,2,3], [4,5,6]], 10) == []"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_row([\n            [5,7],\n            [3,8],\n            [1,10],\n            [9,6]\n        ], 1) == [(1,1),(2,0),(3,1),(4,0)]\nassert     get_row([\n            [5,7],\n            [3,8],\n            [1,10],\n            [9,6]\n        ], 3) == [(4,1),(3,0),(2,1),(1,0)]\n\ndef solve_queen(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrice"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     sort_array([5, 7, 9, 0, 4, 1, 3, 2]) == [0, 1, 2, 3, 4, 5, 7, 9]\nassert     sort_array([1, 3, 0, 5, 4, 2]) == [0, 1, 2, 3, 4, 5]\nassert     sort_array([4, 2, 3, 1, 0]) == [0, 1, 2, 3, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3, 4, 5] == sort_array([5, 4, 3, 2, 1])\nassert     [5, 4, 3, 2, 1] == sort_array([5, 1, 4, 3, 2])\nassert     [5, 1, 4, 3, 2] == sort_array([5, 1, 3, 4, 2])\nassert     [5, 1, 3, 4, 2] == sort_array([5, 1, 4, 3, 2])\nassert     [5, 4, 3, 2, 1] == sort_array([5, 1, 4, 3, 2])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([-1, 2, -3, 4, 5]) == [-3, -1, 2, 4, 5]\nassert     sort_array([0, -2, -3, 4, 2]) == [-3, -2, 0, 2, 4]\nassert     sort_array([2, -3, -2, 4, 0]) == [-3, -2, 2, 4, 0]\nassert     sort_array([5, -1, 0, 2, 3]) == [-1, 0, 2, 3, 5]\nassert     sort_array([0, 0]) == [0, 0]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([1, 3, 2, 4, 6, 5]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([2, 2, 1, 3, 5, 4]) == [1, 2, 2, 3, 4, 5]\nassert     sort_array([1, 3, 2, 4, 6, 5]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([1, 1, 2, 2, 2]) == [1, 1, 2, 2, 2]\nassert     sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([4, 2, 3, 6, 7, 8]) == [4, 2, 3, 6, 7, 8]\nassert     sort_array([8, 2, 4, 3, 6, 7]) == [4, 2, 3, 6, 7, 8]\nassert     sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([6, 1, 2, 7, 5, 3]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([1, 1, 2, 2, 2, 3, 3]) == [1, 1, 1, 2, 2, 2, 3]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [2, 1, 4, 3] == sort_array([3, 1, 4, 2])\nassert     [3, 1, 4, 2] == sort_array([2, 1, 4, 3])\nassert     [4, 1, 3, 2] == sort_array([2, 1, 4, 3])\nassert     [4, 1, 3, 2] == sort_array([3, 2, 1, 4])\nassert     [2, 1, 4, 3] == sort_array([3, 2, 1, 4])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([1,2,3]) == [1,2,3]\nassert     sort_array([1,3,2]) == [1,2,3]\nassert     sort_array([2,1,3]) == [1,2,3]\nassert     sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([5, 2, 3, 4, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5]\nassert     sort_array([]) == []\nassert     sort_array([-5, -2, -3, -4, -1]) == [-1, -2, -3, -4, -5]\nassert     sort_array([-5, -3, -1, -4, -2]) == [-1, -2, -3, -4, -5]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([0, 2, 4, 5, 3]) == [0, 2, 3, 4, 5]\nassert     sort_array([0, 1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1, 0]\nassert     sort_array([0, 3, 2, 1]) == [1, 2, 3, 0]\nassert     sort_array([0, 1]) == [1, 0]\nassert     sort_array([1, 0]) == [0, 1]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encrypt(\"A\") == \"B\"\nassert     encrypt(\"C\") == \"D\"\nassert     encrypt(\"B\") == \"A\"\nassert     encrypt(\"E\") == \"F\"\nassert     encrypt(\"D\") == \"C\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert __________ == _________, \"Encryption is not correct\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encrypt(\"Hello\")    == \"Kccbr\"\nassert     encrypt(\"My name is John\")    == \"Kgubrrn\"\nassert     encrypt(\"m\")    == \"y\"\nassert     encrypt(\"M\")    == \"Y\"\nassert     encrypt(\"B\")    == \"Z\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encrypt(\"hello\") == \"hello\"\nassert     encrypt(\"hell\") == \"ell\"\nassert     encrypt(\"hell0\") == \"l0l\"\nassert     encrypt(\"hello0\") == \"hello0\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encrypt('abcd') == 'zabc'\nassert     encrypt('bc') == 'b'\nassert     encrypt('b') == 'a'\nassert     encrypt('z') == 'ab'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encrypt('b') == 'c'\nassert     encrypt('a') == 'b'\nassert     encrypt('z') == 'a'\nassert     encrypt('A') == 'B'\nassert     encrypt('Z') == 'A'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encrypt(\"hello\") == \"llohe\"\nassert     encrypt(\"a\") == \"a\"\nassert     encrypt(\"ab\") == \"ba\"\nassert     encrypt(\"abcd\") == \"bcda\"\nassert     encrypt(\"abcd efgh\") == \"bcde fgha\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encrypt(\"cat\") == \"tvg\"\nassert     encrypt(\"dog\") == \"fdz\"\nassert     encrypt(\"big\") == \"zpg\"\nassert     encrypt(\"the\") == \"ghe\"\nassert     encrypt(\"cow\") == \"zkv\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encrypt('AB') == 'AB'\nassert     encrypt('abcdefghijklmnopqrstuvwxyz') == 'bcdefghijklmnopqrstuvwxyzab'\nassert     encrypt('abcdefghijklmnopqrstuvwxyz') == 'defghijklmnopqrstuvwxyza'\nassert     encrypt('abcdefghijklmnopqrstuvwxyz') == 'ghijklmnopqrstuvwxyzab'\nassert     encrypt('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encrypt(\"bye\") == \"cby\"\nassert     encrypt(\"bye bye\") == \"cbyby\"\nassert     encrypt(\"byeee\") == \"bcby\"\nassert     encrypt(\"byeee bye\") == \"bcbyby\"\nassert     encrypt(\"bye bye bye\") == \"bbycbyb\"\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest([5, 2, 1, 4, 3]) == 2\nassert     next_smallest([5, 2, 1, 4, 3, 6]) == 2\nassert     next_smallest([5, 2, 1, 4, 3, 6, 8]) == 4\nassert     next_smallest([5, 2, 1, 4, 3, 6, 8, 9]) == 6\nassert     next_smallest([5, 2, 1, 4, 3, 6, 8, 9, 10]) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest([1,2,3]) == 1\nassert     next_smallest([1,1,2,3]) == 2\nassert     next_smallest([1,1,2,3,3]) == None\n\n\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest([2, 3, 5, 1, 4]) == 2\nassert next_smallest([2, 3, 5, 1, 4, 9]) == 1\nassert next_smallest([]) == None\nassert next_smallest([2, 1]) == 1\nassert next_smallest([2, 1, 4]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest([1, 3, 2, 4]) == 2\nassert     next_smallest([1, 2, 3, 4]) == None\nassert     next_smallest([2, 1, 3, 4]) == 2\nassert     next_smallest([2, 3, 1, 4]) == 1\nassert     next_smallest([1, 2, 3, 4, 2]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest([1, 3, 2, 4, 1]) == 3\nassert next_smallest([1, 2, 3, 4, 1]) == 2\nassert next_smallest([1, 2, 3, 4, 5]) == None\nassert next_smallest([5, 4, 3, 2, 1]) == 1\nassert next_smallest([-1, 0, 0, 0, -1, -1]) == -1\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest([]) == None\nassert     next_smallest([1]) == 1\nassert     next_smallest([1,2,3]) == 2\nassert     next_smallest([2,1,3]) == 1\nassert     next_smallest([5,4,3,2,1]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_smallest([1,2,3,4,5]) == 2\nassert     next_smallest([1,3,4,5,6]) == 3\nassert     next_smallest([1,2,3,4]) == None\nassert     next_smallest([2,3,4]) == None\nassert     next_smallest([1,2,3,4,5]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest([5, 4, 2, 10, 2]) == 5\nassert next_smallest([10, 5, 3, 2, 1]) == 3\nassert next_smallest([1, 3, 5, 7, 9]) == 5\nassert next_smallest([1, 3, 5, 7, 9]) == 7\nassert next_smallest([1, 3, 5, 7, 9]) == 9\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \ndef test_next_smallest():\n    assert next_smallest([1,2,3]) == 2\n    assert next_smallest([-1,-2,-3]) == -2\n    assert next_smallest([10,-1,-1,-2]) == -1\n    assert next_smallest([10,11,12,13,14]) == 11\n    "
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest([4, 5, 1, 2, 6, 3]) == 2\nassert     next_smallest([4, 5, 1, 2, 6, 3, 3, 3]) == 2\nassert     next_smallest([4, 5, 1, 2, 6, 3, 3]) == None\nassert     next_smallest([4, 5, 1, 2, 6, 3, 3]) == 3\nassert     next_smallest([1, 1, 1, 1]) == None\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_bored(\"I am not a bored.\") == True\nassert     is_bored(\"I am not I.\") == False\nassert     is_bored(\"I am not at all bored.\") == False\nassert     is_bored(\"I am not at all I.\") == False\nassert     is_bored(\"I am not at all I. I am.\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_bored('I am bored') == True\nassert is_bored('I am not bored') == False\nassert is_bored('I am not bored!') == False\nassert is_bored('I am not bored in this sentence') == False\nassert is_bored('I am not bored in this sentence. I am bored!') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_bored(\"Hello I am a lovely girl\") == 0\nassert     is_bored(\"Hello I am a joyful girl\") == 1\nassert     is_bored(\"Hello I am a sad girl\") == 2\nassert     is_bored(\"Hello I am a glorious girl\") == 3\nassert     is_bored(\"Hello I am a lovely girl!\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_bored(\"I am the best!\") == False\nassert     is_bored(\"I am the best!\") == False\nassert     is_bored(\"I am the best!\") == False\nassert     is_bored(\"I am the best!\") == False\nassert     is_bored(\"I am the best!\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_bored('I am happy!') == False, \"wrong answer\"\nassert     is_bored('I am not bored!') == True, \"wrong answer\"\nassert     is_bored('What is the meaning of life?') == True, \"wrong answer\"\nassert     is_bored('This is not a sentence.') == False, \"wrong answer\"\nassert     is_bored('It is not a sentence. I am bored!') == True, \"wrong answer\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_bored(\"I am bored.\") == 1\nassert     is_bored(\"I am not bored.\") == 0\nassert     is_bored(\"I am not bored.\") == 0\nassert     is_bored(\"I am not bored.\") == 0\nassert     is_bored(\"I am not bored.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_bored(\"I can't stop now\") == 1\nassert     is_bored(\"I I I I I I I I I I I\") == 0\nassert     is_bored(\"I I I I I I I I I I I I I I I I\") == 0\nassert     is_bored(\"I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I)\") == 3\nassert     is_bored(\"\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_bored('I am a happy boy!') == True\nassert     is_bored('I am bored!') == True\nassert     is_bored('I am so bored!') == True\nassert     is_bored('I am not bored!') == False\nassert     is_bored('I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I am not I a"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_bored('I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I\n) == 2\nassert     is_bored('I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I\n) == 1\nassert     is_bored('I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I\n) == 0\nassert     is_bored('I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I IB I I I I I, I I I I I I I I\n) == 1\nassert     is_bored('I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I\n) == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_bored(\"I think I'm Bored.     I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored.\")\nassert     is_bored(\"I think I'm Bored? I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored.\")\nassert     is_bored(\"I think I'm Bored? I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored.\")\nassert     is_bored(\"I think I'm Bored? I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored.\")\nassert     is_bored(\"I think I'm Bored? I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored. I think I'm Bored.\")\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(3, 1, 2) == False\nassert     any_int(2, 2, 2) == True\nassert     any_int(1, 1, 2) == False\nassert     any_int(1, 1, 1) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 1, 3) == True\nassert     any_int(1, 1, 0) == True\nassert     any_int(1, 2, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     any_int(2, 2, 2) == True\nassert     any_int(7, 2, 2) == False\nassert     any_int(8, 2, 2) == True\nassert     any_int(2, 2, 0) == False\nassert     any_int(2, 2, 1) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     any_int(1, 3, 5) == True\nassert     any_int(1, 3, 5.5) == False\nassert     any_int(2, 4, 5) == True\nassert     any_int(2, 4, 5.5) == False\nassert     any_int(-5, 5, 5) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     any_int(2, 3, 1) == False\nassert     any_int(2, 2, 4) == True\nassert     any_int(2, 1, 4) == False\nassert     any_int(2, 2, 2) == True\nassert     any_int(1, 2, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     any_int(1, 1, 2) == True\nassert     any_int(1, 2, 1) == False\nassert     any_int(1, 2, 2) == False\nassert     any_int(1, 2, 3) == True\nassert     any_int(1, 3, 2) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     any_int(1, 1, 2) == True\nassert     any_int(1, 1, 3) == False\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 2, 3) == False\nassert     any_int(1, 3, 2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     any_int(10, 10, 10)\nassert     any_int(10, 10, 11)\nassert     any_int(10, 11, 10)\nassert     any_int(10, 11, 11)\nassert     any_int(10, 0, 10)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1, 2, 0) == False\nassert     any_int(0, 0, 0) == True\nassert     any_int(-2, -2, 0) == True\nassert     any_int(0, -1, 0) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     any_int(10, 10, 10) == True\nassert     any_int(10, 10, -10) == False\nassert     any_int(10, -10, 10) == False\nassert     any_int(-10, -10, -10) == True\nassert     any_int(10, -10, -10) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode(\"This is a message\")         == \"tHs i s a mESg\"\nassert     encode(\"This is a message, but it's not very fun.\")     == \"tHs i s a mESg, but it's nOt veRn ony fun.\"\nassert     encode(\"We're gonna rock you.\")         == \"W e r g n o n u s t r i n g\"\nassert     encode(\"I don't think so\")         == \"I d n t i c t e\"\n\n\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encode(\"A\") == \"B\"\nassert     encode(\"Abc\") == \"Abc\"\nassert     encode(\"Abcd\") == \"AbcD\"\nassert     encode(\"AaBbCc\") == \"AaBcCc\"\nassert     encode(\"AbcD\") == \"AbcD\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encode(\"the quick brown fox jumped over the lazy dog\") == \\\n        \"twItq uick brOOwn oX fOX jmpEd oVE the lzAy doG\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode(\"I love You\")     == \"I 2 l o V E y\"\nassert     encode(\"Hello\")     == \"H l e l 2\"\nassert     encode(\"I\")        == \"I\"\nassert     encode(\"Aa\")        == \"A 2 a\"\nassert     encode(\"a\")         == \"a\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode('tEsnare') == 'Tune'\nassert encode('cEzcet') == 'Cez'\nassert encode('DVUY') == 'DV'\nassert encode('ThEcE') == 'Te'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         encode('Hello') == 'HeLLo'\nassert         encode('Hello There') == 'HeLThEeR'\nassert         encode('The Quick Brown Fox') == 'TThEeQCkfUH'\nassert         encode('It was a dark and stormy night') == 'tItWAs a dkNit nIty NtThEeSnItY'\nassert         encode('Algorithms') == 'AlOrtGs'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode(\"i like to code\") == \"I lk to cODe\"\nassert     encode(\"I like to code\") == \"I lk to cODe\"\nassert     encode(\"I am a teacher\") == \"I aM a tEaD\"\nassert     encode(\"I am a teacher\") == \"I aM a tEaD\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode(\"JET DAWN\") == \"jeT dAWN\"\nassert     encode(\"Big boozer\") == \"bBi gooZEr\"\nassert     encode(\"\") == \"\"\nassert     encode(\"THE END\") == \"TeEN dEND\"\nassert     encode(\"LEET the sky\") == \"LeE tHE skY\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode('Hello world') == 'heLlO wrld'\nassert     encode('This is the way!') == 'ThIs Is tHe WaY'\nassert     encode('Do A Better World') == 'Do a better world'\n\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     skjkasdkd([1,2,3,4]) == 4\nassert     skjkasdkd([1,2,3,4,5]) == 3\nassert     skjkasdkd([1,2,3,4,5,6]) == 4\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9]) == 7\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,10]) == 5\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     skjkasdkd([2,3,5,7,11,13,17]) == 17\nassert     skjkasdkd([]) == 0\nassert     skjkasdkd([11,13,17]) == 17\nassert     skjkasdkd([13,17]) == 17\nassert     skjkasdkd([13]) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (skjkasdkd([2,3,4,5,6,7,8,9,10])     ==     23)\nassert     (skjkasdkd([10,11,12,13,14,15,16,17,18])     ==     30)\nassert     (skjkasdkd([19,20,21,22,23,24,25,26,27,28,29,30,31])     ==     31)\nassert     (skjkasdkd([2,3,4,5,6,7,8,9,10])     ==     23)\nassert     (skjkasdkd([10,11,12,13,14,15,16,17,18])     ==     30)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     skjkasdkd(list(range(1000,2000))) == 12\nassert     skjkasdkd(list(range(100,200))) == 5\nassert     skjkasdkd(list(range(10,100))) == 19\nassert     skjkasdkd([]) == 0\nassert     skjkasdkd([1,2,3]) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     skjkasdkd([2, 5, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 73\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]) == 73\nassert     skjkasdkd([]) == 0\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]) == 73\nassert     skjkasdkd([15]) == 5\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     skjkasdkd([0,2,3,4,5,6,7,8,9]) == 23\nassert     skjkasdkd([0,2,3,4,5,6,7,8,9,10]) == 23\nassert     skjkasdkd([0,2,3,4,5,6,7,8,9,10,11]) == 23\nassert     skjkasdkd([0,2,3,4,5,6,7,8,9,10,11,12]) == 23\nassert     skjkasdkd([0,2,3,4,5,6,7,8,9,10,11,12,13]) == 23\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     skjkasdkd(range(10, 100, 2)) == 6\nassert skjkasdkd(range(1, 1000, 2)) == 6\nassert skjkasdkd(range(3, 1000, 2)) == 6\nassert skjkasdkd(range(1, 100, 3)) == 6\nassert skjkasdkd(range(9, 100, 2)) == 6\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     skjkasdkd([3, 2, 5, 7]) == 13\nassert     skjkasdkd([3, 2, 5, 7, 9, 11]) == 18\nassert     skjkasdkd([3, 2, 5, 7, 9, 11, 13]) == 19\nassert     skjkasdkd([3, 2, 5, 7, 9, 11, 13, 17]) == 19\nassert     skjkasdkd([3, 2, 5, 7, 9, 11, 13, 17, 19]) == 19\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1, 7, 9, 10, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199] == skjkasdkd([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199])\n\nprint skjkasdkd([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199])"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_dict_case(dict1) == True\nassert     check_dict_case(dict2) == False\nassert     check_dict_case(dict3) == False\nassert     check_dict_case(dict4) == True\nassert     check_dict_case(dict5) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) == False, \\\n            \"check_dict_case({}) should return False\"\nassert     check_dict_case({'a':1}) == True, \\\n            \"check_dict_case({'a':1}) should return True\"\nassert     check_dict_case({'a':1, 'b':2}) == False, \\\n            \"check_dict_case({'a':1, 'b':2}) should return False\"\nassert     check_dict_case({'A':1, 'b':2}) == True, \\\n            \"check_dict_case({'A':1, 'b':2}) should return True\"\n\ndef check_key_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_dict_case({\"a\": 1}) == True\nassert     check_dict_case({\"A\": 1}) == False\nassert     check_dict_case({}) == False\nassert     check_dict_case({\"a\": 1, \"b\": 2}) == True\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"a\": 1, \"b\": 2}) == False\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"C\": 3}) == False\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == True\nassert     check_dict_case({\"A\": 1, \"B\": 2, \"c\": 3}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a':1, 'b':2}) == False\nassert     check_dict_case({'a':'a', 'b':'b'}) == True\n\ndef get_value_counts(dict):\n    \"\"\"\n    Given a dictionary, return a dictionary where each key is a string in \n    lower case and each value is the count of the string in the \n    dictionary. The function should return an empty dictionary if the \n    dictionary is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_dict_case(dict1) == True\nassert     check_dict_case(dict2) == False\nassert     check_dict_case(dict3) == False\n\n\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"A\": 1}) == True\nassert     check_dict_case({\"a\": 1}) == False\nassert     check_dict_case({\"a\": 1, \"B\": 2}) == False\nassert     check_dict_case({\"a\": 1, \"B\": 2, \"C\": 3}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_dict_case({\"This\": \"Is\", \"a\": \"string\"}) is True\nassert     check_dict_case({\"this\": \"is\", \"a\": \"string\"}) is True\nassert     check_dict_case({\"this\": \"is\", \"a\": \"string\", \"b\": \"is\", \"c\": \"a\"}) is True\nassert     check_dict_case({}) is False\nassert     check_dict_case({'a': 'b'}) is False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) is False\nassert     check_dict_case({'a':1}) is False\nassert     check_dict_case({'a':1,'b':2}) is False\nassert     check_dict_case({'a':1,'b':2.0}) is False\nassert     check_dict_case({'a':'1','b':2.0}) is False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_dict_case({\"key\": \"value\"}) == False\nassert     check_dict_case({\"Key\": \"value\"}) == True\nassert     check_dict_case({\"key\": \"value\", \"Key\": \"value\"}) == True\nassert     check_dict_case({\"KEY\": \"value\"}) == False\nassert     check_dict_case({\"key\": \"value\", \"KEY\": \"value\"}) == True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_up_to(3) == [2]\nassert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(7) == [2, 3, 5, 7]\nassert     count_up_to(9) == [2, 3, 5, 7]\nassert     count_up_to(10) == [2, 3, 5, 7, 11]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_up_to(2) == [2]\nassert     count_up_to(10) == [2,3,5,7]\nassert     count_up_to(100) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\nassert     count_up_to(200) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191]\nassert     count_up_to(0) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == count_up_to(100)\nassert [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == count_up_to(100)\nassert [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == count_up_to(100)\nassert [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == count_up_to(100)\nassert [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == count_up_to(100)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == [2]\nassert     count_up_to(2) == [2, 3]\nassert     count_up_to(3) == [2, 3]\nassert     count_up_to(4) == [2, 3]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_up_to(3) == [2, 3]\nassert     count_up_to(9) == [2, 3, 5, 7]\nassert     count_up_to(10) == [2, 3, 5, 7, 11]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17]\nassert     count_up_to(99) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     count_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nprint \"all tests passed"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7, 11]\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert count_up_to(25) == [2, 3, 5, 7, 11, 13, 17, 19, 23]\nassert count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert count_up_to(10) == [2, 3, 5, 7, 11]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7, 11]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_up_to(1) == [2]\nassert     count_up_to(2) == [2, 3]\nassert     count_up_to(3) == [2, 3, 5]\nassert     count_up_to(4) == [2, 3, 5, 7]\nassert     count_up_to(5) == [2, 3, 5, 7, 11]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7, 11]\nassert count_up_to(0) == []\nassert count_up_to(1) == []\nassert count_up_to(3) == [2]\nassert count_up_to(7) == [2, 3, 5, 7]\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply(12, 2) == 24\nassert     multiply(9, 3) == 27\nassert     multiply(99, 1) == 99\nassert     multiply(4, 9) == 64\nassert     multiply(0, 2) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiply(123, 456) == 4456123\nassert     multiply(123, 4567) == 4567123\nassert     multiply(123, 45678) == 45678123\nassert     multiply(123, 456789) == 456789123\nassert     multiply(123, 45678901) == 45678901123\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply(2, 3) == 6\nassert     multiply(10, 101) == 2\nassert     multiply(2, 0) == 0\nassert     multiply(0, 0) == 0\n\ndef is_power(x, y):\n    \"\"\"Complete the function that takes two integers and returns True\n    if the first integer is a power of the second.\n    Assume the input is always valid.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiply(7, 7) == 49\nassert     multiply(5, 8) == 40\nassert     multiply(3, 3) == 9\nassert     multiply(9, 9) == 81\nassert     multiply(7, 2) == 49\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply(2, 2) == 4\nassert     multiply(2, 9) == 4\nassert     multiply(0, 9) == 0\nassert     multiply(9, 9) == 81\nassert     multiply(9, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply(5, 1) == 5\nassert     multiply(4, 9) == 4\nassert     multiply(6, 4) == 6\nassert     multiply(0, 9) == 0\nassert     multiply(9, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply(1, 3) == 3\nassert     multiply(2, 3) == 6\nassert     multiply(3, 4) == 24\nassert     multiply(5, 3) == 15\nassert     multiply(7, 9) == 63\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply(2, 3) == 6\nassert     multiply(0, 7) == 0\nassert     multiply(8, 6) == 8\nassert     multiply(7, 4) == 28\nassert     multiply(6, 2) == 24\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply(3, 9) == 27\nassert     multiply(5, 3) == 15\nassert     multiply(4, 8) == 32\nassert     multiply(9, 4) == 81\nassert     multiply(0, 4) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply(2, 9) == 2\nassert     multiply(26, 19) == 2\nassert     multiply(7, 11) == 7\nassert     multiply(16, 8) == 8\nassert     multiply(12, 1) == 12\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (count_upper(\"daBCA\") == \"BCA\")\nassert     (count_upper(\"oEe\") == \"E\")\nassert     (count_upper(\"eEe\") == \"E\")\nassert     (count_upper(\"Uu\") == \"U\")\nassert     (count_upper(\"\") == \"\")\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_upper(\"hello\") == 2, \"count_upper('hello') = 2 is wrong\"\nassert     count_upper(\"goodbye\") == 0, \"count_upper('goodbye') = 0 is wrong\"\nassert     count_upper(\"HELLO\") == 2, \"count_upper('HELLO') = 2 is wrong\"\nassert     count_upper(\"abc\") == 0, \"count_upper('abc') = 0 is wrong\"\n\n\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_upper(\"This is a test!\") == 2\nassert     count_upper(\"This is a test!\") == 2\nassert     count_upper(\"This is a test!\") == 2\nassert     count_upper(\"This is a test!\") == 2\nassert     count_upper(\"This is a test!\") == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_upper(\"Hello, my name is Caleb.\") == 0\nassert     count_upper(\"A nice day to code.\") == 1\nassert     count_upper(\"A nice day to code.\") == 0\nassert     count_upper(\"How are you today?\") == 2\nassert     count_upper(\"hEY\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_upper('aA') == 1\nassert     count_upper('AAAA') == 4\nassert     count_upper('aaaa') == 0\nassert     count_upper('12345') == 0\nassert     count_upper('AAAAABBB') == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_upper('moon') == 2\nassert     count_upper('Hello World') == 2\nassert     count_upper('my favorite movie is tahriller') == 3\nassert     count_upper('go hang a salami') == 0\nassert     count_upper('GOD') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_upper(\"aA\") == 1\nassert     count_upper(\"aAb\") == 2\nassert     count_upper(\"aAa\") == 3\nassert     count_upper(\"a\") == 0\nassert     count_upper(\"aa\") == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_upper(\"\") == 0\nassert     count_upper(\"ab\") == 0\nassert     count_upper(\"Hello\") == 0\nassert     count_upper(\"Hello World\") == 0\nassert     count_upper(\"Hello World!\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_upper('hello') == 4\nassert     count_upper('HELLO') == 2\nassert     count_upper('aaaaa') == 0\nassert     count_upper('Hello World!') == 4\nassert     count_upper('HELLO WORLD!') == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_upper(\"python\") == 2\nassert     count_upper(\"Hii\") == 0\nassert     count_upper(\"Python\") == 2\nassert     count_upper(\"Python3.6\") == 2\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (closest_integer(\"14.5\") == 15)\nassert     (closest_integer(\"-14.5\") == -15)\nassert     (closest_integer(\"14\") == 14)\nassert     (closest_integer(\"-14\") == -14)\nassert     (closest_integer(\"13.4\") == 14)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14\") == 14\nassert     closest_integer(\"-14\") == -14\nassert     closest_integer(\"12.1\") == 12\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     closest_integer(\"15.5\") == 15\nassert     closest_integer(\"-15.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     closest_integer(\"12\") == 12\nassert     closest_integer(\"7\") == 7\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-30.5\") == -35\nassert     closest_integer(\"-54.5\") == -55\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"11.5\") == 11\nassert     closest_integer(\"-11.5\") == -11\nassert     closest_integer(\"15.5\") == 16\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"17.5\") == 18\nassert     closest_integer(\"-17.5\") == -18\nassert     closest_integer(\"13.5\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"17\") == 17\nassert     closest_integer(\"-17\") == -17\nassert     closest_integer(\"-1.5\") == -2\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"1.5\") == 1\nassert     closest_integer(\"0\") == 0\nassert     closest_integer(\"12.5\") == 12\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,2]\nassert     make_a_pile(3) == [1,2,3]\nassert     make_a_pile(5) == [1,2,3,4,5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     make_a_pile(5)     == [5,6,7,8,9]\nassert     make_a_pile(2)     == [2,3,4,5,6]\nassert     make_a_pile(1)     == [1]\nassert     make_a_pile(0)     == []"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     make_a_pile(2) == [1, 1, 1]\nassert     make_a_pile(3) == [2, 2, 1]\nassert     make_a_pile(4) == [3, 2, 2, 1]\nassert     make_a_pile(5) == [4, 3, 2, 2, 1]\nassert     make_a_pile(6) == [5, 4, 3, 2, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(4) == [4, 3, 2, 1]\nassert     make_a_pile(5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [3, 3]\nassert     make_a_pile(4) == [4, 4, 4]\nassert     make_a_pile(5) == [5, 5, 5, 5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_a_pile(5)         == [5,5,5,5,5]\nassert     make_a_pile(8)         == [8,8,8,8,8,8,8,8]\nassert     make_a_pile(3)         == [3,3,3]\nassert     make_a_pile(4)         == [4,4,4,4]\nassert     make_a_pile(5)         == [5,5,5,5,5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_a_pile(1)    ==     [1]\nassert     make_a_pile(2)    ==     [2, 1]\nassert     make_a_pile(3)    ==     [2, 1, 1]\nassert     make_a_pile(4)    ==     [2, 2, 1, 1]\nassert     make_a_pile(5)    ==     [2, 2, 2, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_a_pile(3)    ==     [1, 1, 1]\nassert     make_a_pile(2)    ==     [1, 1]\nassert     make_a_pile(1)    ==    [1]\nassert     make_a_pile(0)    ==     [0]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [2, 1, 1]\nassert     make_a_pile(4) == [3, 2, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_a_pile(5) == [5, 7, 9, 11, 13]\nassert     make_a_pile(6) == [6, 8, 10, 12, 14, 16]\nassert     make_a_pile(7) == [7, 9, 11, 13, 15, 17, 19]\nassert     make_a_pile(8) == [8, 10, 12, 14, 16, 18, 20, 22]\nassert     make_a_pile(9) == [9, 11, 13, 15, 17, 19, 21, 23, 25]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_string(\"hello, world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello,   world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello,    world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello,     world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello, world\") == [\"hello\", \"world\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_string(\"Hello, World\") == [\"Hello\", \"World\"]\nassert     words_string(\"Hello, World,\") == [\"Hello\", \"World\", \",\"]\nassert     words_string(\"Hello, World,,\") == [\"Hello\", \"World\", \",\"]\nassert     words_string(\"Hello, World, World,,\") == [\"Hello\", \"World\", \"World\", \",\"]\nassert     words_string(\"Hello,\") == [\"Hello\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_string('abc,def,ghi') == ['abc', 'def', 'ghi'], 'incorrect'\nassert     words_string('a,b,c') == ['a', 'b', 'c'], 'incorrect'\nassert     words_string('a,,b, c') == ['a', 'b', 'c'], 'incorrect'\nassert     words_string('a, b, c') == ['a', 'b', 'c'], 'incorrect'\nassert     words_string('a, b c') == ['a', 'b', 'c'], 'incorrect'\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_string(\"Hello, world,     here! 123, are you ok?\") == [\"Hello\", \"world\", \"here\", \"are\", \"you\", \"ok?\"]\nassert     words_string(\"Hi, my name is John. Hi John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \".\", \"Hi\", \"John\"]\nassert     words_string(\"\") == []\n\ndef unique_words(s):\n    \"\"\"\n    Given a string of words, return the number of unique words. A word is defined as a\n    sequence of non-space characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_string('hello, world') == ['hello', 'world']\nassert     words_string('hello, world') == ['hello', 'world']\nassert     words_string('hello,world') == ['hello', 'world']\nassert     words_string('hello,world,hello') == ['hello', 'world', 'hello']\nassert     words_string('hello,hello,world') == ['hello', 'hello', 'world']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_string('all,have,fun') == ['all','have','fun']\nassert     words_string('all,have,fun,love') == ['all','have','fun','love']\nassert     words_string('all,have,fun,love,life') == ['all','have','fun','love','life']\nassert     words_string('all,have,fun,love,life,yet,i') == ['all','have','fun','love','life','yet','i']\n\ndef ascii_test():\n    \"\"\"\n    Write a function called ascii_test that takes no arguments and returns true or false\n    depending on whether the function has succeeded. Your function should return true if\n    the ASCII value of the first character of the string passed to it is greater than the\n    ASCII value of the last character of the string passed to it.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_string(\"hello, my name is sparta\") == [\"hello\", \"my\", \"name\", \"is\", \"sparta\"]\nassert     words_string(\"I am spoonerism\") == [\"I\", \"am\", \"spoonerism\"]\nassert     words_string(\"hello, my name is sparta, and you are spoonerism\") == [\"hello\", \"my\", \"name\", \"is\", \"sparta\", \"and\", \"you\", \"are\", \"spoonerism\"]\nassert     words_string(\"I,am,a,test\") == [\"I\", \"am\", \"a\", \"test\"]\nassert     words_string(\"\") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_string(\"Hello, my name is John\") == ['Hello','my', 'name', 'is', 'John']\nassert     words_string(\"Welcome to New York, NY!\") == ['Welcome', 'to', 'New', 'York', 'NY', '!']\nassert     words_string(\"The first, the second, the third\") == ['The', 'first', 'the','second', 'the', 'third']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_string('abcd, efgh, ijkl, mno, pqrs') == ['abcd', 'efgh', 'ijkl','mno', 'pqrs'], \"String was not split into words properly\"\nassert     words_string('a,b,cd') == ['a', 'b', 'cd'], \"String was not split into words properly\"\nassert     words_string('a,bc,defg,hijk') == ['a', 'bc', 'defg', 'hijk'], \"String was not split into words properly\"\n\ndef main():\n    \"\"\"\n    We are going to start a discussion on how we could define a class. For this\n    task, we will be using a function that has four parameters: a function that\n    you will implement, a class that will implement the class and the number of\n    parameters.\n    \"\"\"\n    # your code here\n    # Check the correctness of the code below\n    b = Book('title', 'author','subject', 'publisher', 'year', 'isbn')\n    print b.title\n    print b.author\n    print b.subject\n    print b.publisher\n    print b.year\n    print b.isbn\n    print b.num_of_pages\n    b.num_of_pages = 100\n    print b.num_of_pages\n    # your code here\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_string('hello,world') == ['hello', 'world']\nassert     words_string('hello, world, today') == ['hello', 'world', 'today']\nassert     words_string('hello,world,today,we') == ['hello', 'world', 'today', 'we']\nassert     words_string('hello,world,today,we,with') == ['hello', 'world', 'today', 'we', 'with']\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (choose_num(5, 10) == 8)\nassert     (choose_num(10, 10) == -1)\nassert     (choose_num(1, 100) == -1)\nassert     (choose_num(100, 1) == -1)\nassert     (choose_num(1, 1) == 1)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     choose_num(1, 3) == 2\nassert     choose_num(2, 3) == -1\nassert     choose_num(1, 2) == -1\nassert     choose_num(0, 2) == -1\nassert     choose_num(0, 1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     choose_num(1, 5) == 4\nassert     choose_num(3, 7) == 4\nassert     choose_num(5, 8) == 4\nassert     choose_num(3, 5) == -1\nassert     choose_num(3, 5) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     choose_num(3, 4) == -1\nassert choose_num(3, 2) == -1\nassert choose_num(3, 3) == 4\nassert choose_num(3, 2) == 4\nassert choose_num(4, 3) == 4\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     choose_num(0, 0) == -1\nassert     choose_num(0, 1) == 1\nassert     choose_num(1, 2) == 2\nassert     choose_num(1, 1) == 1\nassert     choose_num(1, 1) == 1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     choose_num(1, 9) == -1\nassert     choose_num(1, 0) == -1\nassert     choose_num(0, 1) == -1\nassert     choose_num(1, 1) == 1\nassert     choose_num(2, 2) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     choose_num(1, 9) == -1\nassert     choose_num(3, 9) == -1\nassert     choose_num(4, 10) == -1\nassert     choose_num(5, 10) == -1\nassert     choose_num(9, 10) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     choose_num(10, 13) == 12\nassert     choose_num(10, 10) == 10\nassert     choose_num(15, 17) == 16\nassert     choose_num(15, 18) == 18\nassert     choose_num(-1, -1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     ( choose_num(1, 5) == 2 )\nassert     ( choose_num(3, 5) == -1 )\nassert     ( choose_num(3, 5) == 4 )\nassert     ( choose_num(0, 4) == 2 )\nassert     ( choose_num(1, 5) == 2 )\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     choose_num(1, 100) == 1\nassert     choose_num(1, 3) == 2\nassert     choose_num(1, 4) == -1\nassert     choose_num(2, 5) == -1\nassert     choose_num(1, 5) == 4\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rounded_avg(1, 3) == 2\nassert     rounded_avg(1, 4) == 2\nassert     rounded_avg(1, 5) == 3\nassert     rounded_avg(1, 6) == 3\nassert     rounded_avg(2, 3) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rounded_avg(0, 1) == 0\nassert     rounded_avg(1, 2) == 1\nassert     rounded_avg(1, 1) == 1\nassert     rounded_avg(0, 0) == 0\nassert     rounded_avg(1, 1) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rounded_avg(1,3) == 2\nassert     rounded_avg(2,4) == 3\nassert     rounded_avg(2,7) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rounded_avg(1, 2) == 1\nassert     rounded_avg(1, 3) == -1\nassert     rounded_avg(2, 3) == -1\nassert     rounded_avg(3, 4) == -1\nassert     rounded_avg(6, 11) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rounded_avg(1,3) == 2\nassert     rounded_avg(3,5) == 3\nassert     rounded_avg(5,7) == 6\nassert     rounded_avg(10,10) == 10\nassert     rounded_avg(50,1000) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nrounded_avg(0, 10) == 3.5\nassert rounded_avg(3, 5) == 3.5\nassert rounded_avg(6, 7) == -1\nassert rounded_avg(10, 10) == 10\nassert rounded_avg(5, 5) == 5\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rounded_avg(2, 5) == 3\nassert     rounded_avg(1, 5) == 3\nassert     rounded_avg(0, 5) == 3\nassert     rounded_avg(1, 0) == -1\nassert     rounded_avg(0, 0) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rounded_avg(1,1) == 1\nassert     rounded_avg(1,2) == 1\nassert     rounded_avg(2,3) == 2\nassert     rounded_avg(2,4) == 2\nassert     rounded_avg(2,5) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rounded_avg(5,6) == 5.5\nassert     rounded_avg(1,2) == 1\nassert     rounded_avg(2,4) == 2.5\nassert     rounded_avg(7,8) == 7\nassert     rounded_avg(4,5) == -1\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique_digits([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     unique_digits([0, 5, 6, 7, 8]) == [0, 5, 6, 7, 8]\nassert     unique_digits([0, 5, 6, 7, 8]) == [0, 5, 6, 7, 8]\nassert     unique_digits([0, 5, 7, 8, 9]) == [0, 5, 7, 8, 9]\nassert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_digits([1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique_digits([2,2,2,3]) == [2,3]\nassert     unique_digits([7,7,7]) == [7]\nassert     unique_digits([1,1,1,3,3,3]) == [1,3]\nassert     unique_digits([1,2,2,2]) == [1,2]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     unique_digits([10, 11, 12, 13, 14]) == [10, 11, 12, 13, 14]\nassert     unique_digits([10, 9, 10, 10, 11]) == [9, 10]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([3, 4, 2, 5, 6, 3, 8, 9]) == [3, 4, 2, 5, 6, 3, 8, 9]\nassert     unique_digits([1, 6, 6, 6, 6, 6, 6, 6]) == [1, 6, 6, 6, 6, 6, 6, 6]\nassert     unique_digits([1, 2, 2, 3, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]\nassert     unique_digits([1, 2, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([1,2,3,4,5,6,8,9,10]) == [1, 2, 3, 4, 5, 6, 8, 9, 10]\nassert     unique_digits([0,1,2,3,4,5,6,7,8,9,10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique_digits([5,2,3,4,6,9,8,7,1,0,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     unique_digits([10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10]\nassert     unique_digits([2,2,2,2,2,2,2,2,2,2,2]) == [2]\nassert     unique_digits([]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_digits(    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nassert     unique_digits(    [5, 9, 12, 22, 21, 22, 25, 26]) == [5, 9, 12, 22, 21, 22, 25, 26]\nassert     unique_digits([1, 1, 2, 2, 3, 3, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [2, 3, 4, 5, 6, 7, 8, 9] == unique_digits([2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8] == unique_digits([1, 2, 3, 4, 5, 6, 7, 8])\nassert     [1, 2, 3, 4, 5, 6, 7] == unique_digits([1, 2, 3, 4, 5, 6, 7])\nassert     [1, 2, 3, 4, 5, 6] == unique_digits([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_digits([1,2,3,4,5,6]) == [1, 2, 4, 5, 6]\nassert     unique_digits([0,0,0,0,0,0]) == []\nassert     unique_digits([5,5,5,5,5,5]) == []\nassert     unique_digits([0,0,1,2,3,4]) == [0, 1, 2, 3, 4]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([100, 99, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([100, 99, 9, 8, 7, 6, 5, 4, 3, 2]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([100, 99, 9, 8, 7, 6, 5, 4, 3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     by_length([1, 1, 2, 3, 9, 9, 9, 9, 9, 9]) == \\\n        by_length([1, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == \\\n        by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == \\\n        by_length([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\nassert     by_length([1, 9, 3, 4, 5, 6, 7, 8, 2, 0]) == \\\n        by_length([2, 0, 1, 8, 7, 6, 5, 4, 3, 9])\nassert     by_length([2, 3, 4, 5, 6, 7, 8, 0, 1, 9]) == \\\n        by_length([1, 0, 2, 3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     by_length([1, 3, 4, 7, 5, 8, 2, 9])     ==    \"Two Hundred Forty-Nine\"\nassert     by_length([6, 1, 7, 1, 1, 1, 3, 9, 9])     ==     \"One Hundred And One\"\nassert     by_length([7, 3, 9, 1, 1, 6, 1, 2, 9])     ==     \"Three Hundred Forty-Six\"\nassert     by_length([3, 6, 7, 2, 1, 2, 5, 6, 7])     ==     \"Two Hundred Thirty-Six\"\nassert     by_length([9, 3, 1, 9, 9, 9, 9, 9, 9])     ==     \"One Hundred Ninety-Nine\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     by_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])    == \"OneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOne\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])    == \"OneTwoThreeFourFiveSixSevenEightNine\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])    == \"OneTwoThreeFourFiveSixSevenEightNineZero\"\nassert     by_length([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])    == \"TwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwoTwo\n\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert ids[by_length(ids)] == [\n    \"Eight\",\n    \"Nine\",\n    \"Seven\",\n    \"Six\",\n    \"Five\",\n    \"Four\",\n    \"Three\",\n    \"Two\",\n    \"One\"\n]\n\ndef by_value(arr):\n    \"\"\"\n    Given an array of numbers, sort the array such that when comparing two numbers,\n    they are sorted by their values. For example, when comparing 2 numbers, if the first\n    number has value 2 and the second number has value 3, then the array would be sorted\n    such that the first number is \"Two\" and the second number is \"Three\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     by_length([1,2,4,5,3,7,8,9]) == ['Five', 'Eight', 'Three', 'Seven', 'One', 'Four', 'Six', 'Two', 'Nine', 'Five', 'Eight', 'Three', 'Seven', 'One', 'Four', 'Six', 'Two', 'Nine']\nassert     by_length([1,2,3,4,5,6,7,8,9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length([2,6,3,1,8,4,9,7,5]) == ['Eight', 'Five', 'Two', 'One', 'Four', 'Seven', 'Six', 'Three', 'Nine', 'One', 'Eight', 'Five', 'Two', 'One', 'Four', 'Seven', 'Six', 'Three', 'Nine']\nassert     by_length([9,8,7,6,5,4,3,2,1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Nine']\nassert     by_length([7,4,1,8,3,2,9,6,5]) == ['One', 'Four', 'Seven', 'Six', 'Five', 'Three', 'Two', 'Nine', 'Eight', 'One', 'Four', 'Seven', 'Six', 'Five', 'Three', 'Two', 'Nine', 'Eight', 'One', 'Four', 'Seven', 'Six', 'Five', 'Three', 'Two', 'Nine']\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         by_length([5,2,3,4,6,7,1,8,9]) == ['Five', 'Two', 'Three', 'Four', 'Six', 'Seven', 'Eight', 'Nine', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert         by_length([-1,-2,-3,-4,-6,-7,-8,-9,1,2,3,4,5,6,7,8,9]) == ['Eight', 'Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Eight', 'Nine', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert         by_length([0,9,8,7,6,5,4,3,2,1,0]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert         by_length([0,0,0,0,0,0,0,0,0,0,0,0]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert         by_length([0,9,8,7,6,5,4,3,2,1,0]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     by_length([2, 8, 7, 1, 9, 5, 3, 4, 6]) == \"OneTwoEightSevenOneNineFiveThreeFourSix\"\nassert     by_length([7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"OneTwoEightSevenZeroNineOneTwoThreeFourFiveSixSevenEightNine\"\nassert     by_length([1, 7, 4, 2, 3, 5, 8, 6, 9]) == \"OneSevenFourTwoThreeFiveEightSixNine\"\nassert     by_length([1, 3, 4, 5, 7, 8, 9, 2, 6]) == \"OneThreeFourFiveSevenEightNineTwo\"\nassert     by_length([1, 5, 3, 4, 2, 8, 7, 6, 9]) == \"OneFiveThreeFourTwoEightSevenSixNine\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     by_length([1, 3, 4, 5, 7, 8, 9]) ==     ['Seven', 'Eight', 'Nine', 'Four', 'Five', 'Three', 'Two', 'One']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     ['Eight', 'Nine', 'Three', 'Two', 'One', 'Five', 'Four', 'Six', 'Seven']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) ==     ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Zero']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==     ['Ten', 'Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == \"OneFourSevenEightNineTwoThree\"\nassert     by_length([1,3,2,4,5,6]) == \"OneFourFiveSixTwoThreeFourFive\"\nassert     by_length([1,2,3,4,5]) == \"OneTwoThreeFourFive\"\nassert     by_length([7,6,5,4,3,2,1]) == \"SevenSixFiveFourThreeTwoOne\"\n\n\ndef rotate_digits(arr):\n    \"\"\"\n    Given an array of integers, rearrange the elements in it in such a way that the \n    first element is the smallest one and the last one is the largest one.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     by_length([2, 3, 1, 4, 5, 9, 7, 8, 6, 0, 1]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Zero', 'One']\nassert     by_length([9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == ['Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine', 'Nine']\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8]) == ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight']\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7]) == ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven']\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [f(i) for i in range(10)] == [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert f(2) == [1, 1, 2]\nassert f(3) == [1, 2, 6]\nassert f(4) == [1, 1, 2, 6]\nassert f(5) == [1, 2, 6, 24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         f(1)         == [1]\nassert         f(2)         == [1, 1]\nassert         f(3)         == [1, 1, 2]\nassert         f(4)         == [1, 1, 2, 6]\nassert         f(5)         == [1, 1, 2, 6, 24]"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     f(2) == [1, 1]\nassert     f(5) == [1, 2, 6, 24, 120]\nassert     f(8) == [1, 1, 2, 6, 24, 120, 720, 5040, 40320]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     f(5) == [1, 1, 2, 6, 24, 120], \"Check your code\"\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [ f(i) for i in range(1, 5) ] == \\\n                [ 1, 2, 6, 24, 120]\nassert     [ f(i) for i in range(1, 10) ] == \\\n                [ 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert     [ f(i) for i in range(1, 20) ] == \\\n                [ 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800,\n                  2516800, 12516800, 72036800, 5040360, 40320360, 362880360,\n                  3628800360, 251680360, 1251680360, 7203680360, 5040360360,\n                  40320360360, 362880360360, 3628800360360, 251680360360,\n                  1251680360360, 7203680360360, 5040360360360, 40320360360360,\n                  362880360360360, 3628800360360360, 251680360360360,\n                  1251680360360360, 7203680360360360, 5040360360360360,\n                  40320360360360360, 362880360360360360, 3628800360360360360,\n                  251680360360360360, 1251680360360360360, 7203680360360360360,\n                  5040360360360360360, 40320360360360360360, 362880360360360360360]\n\nprint(\"The code passed all tests\")\n\n\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     f(3) == [1, 2, 6]\nassert     f(5) == [1, 2, 6, 24, 120]\nassert     f(10) == [1, 2, 6, 24, 120, 594, 1772, 57776,\n                   2865764, 1307674368000, 20922789888000,\n                   3415500369291760]\n\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of the first i + 1 elements of the list (excluding the i-th element).\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [f(n) for n in range(1, 11)] == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     f(3)    == [1, 2, 6]\nassert     f(5)    == [1, 2, 6, 24, 120]\nassert     f(10)    == [1, 2, 6, 24, 120, 5040, 40320, 362880, 3628800, 39916800]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         even_odd_palindrome(12345) == (2, 4)\nassert         even_odd_palindrome(0) == (0, 0)\nassert         even_odd_palindrome(-12345) == (0, 0)\nassert         even_odd_palindrome(10**3) == (0, 0)\nassert         even_odd_palindrome(2*10**3) == (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(10) == (3, 3)\nassert     even_odd_palindrome(20) == (3, 2)\nassert     even_odd_palindrome(1000) == (73, 58)\nassert     even_odd_palindrome(1002) == (10, 2)\nassert     even_odd_palindrome(1003) == (10, 3)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(10) == (3, 1)\nassert     even_odd_palindrome(100) == (25, 25)\nassert     even_odd_palindrome(999) == (1024, 512)\nassert     even_odd_palindrome(1000) == (100, 50)\nassert     even_odd_palindrome(10001) == (1000, 100)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(10) == (2, 0)\nassert     even_odd_palindrome(11) == (2, 1)\nassert     even_odd_palindrome(12) == (2, 0)\nassert     even_odd_palindrome(13) == (3, 0)\nassert     even_odd_palindrome(14) == (3, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(10) == (1, 1)\nassert     even_odd_palindrome(100) == (1, 1)\nassert     even_odd_palindrome(998) == (2, 2)\nassert     even_odd_palindrome(999) == (3, 1)\nassert     even_odd_palindrome(1000) == (3, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(5) == (1, 1)\nassert     even_odd_palindrome(10) == (2, 1)\nassert     even_odd_palindrome(15) == (3, 2)\nassert     even_odd_palindrome(20) == (3, 3)\nassert     even_odd_palindrome(24) == (4, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(100) == (10, 22)\nassert     even_odd_palindrome(1000) == (163, 809)\nassert     even_odd_palindrome(100000) == (105899, 302409)\n\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(4) == (2, 2)\nassert     even_odd_palindrome(10) == (4, 2)\nassert     even_odd_palindrome(12) == (6, 4)\nassert     even_odd_palindrome(20) == (10, 4)\nassert     even_odd_palindrome(24) == (12, 6)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_nums([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     count_nums([-1,-2,-3,4,5,-6,7,8,9,10]) == 10\nassert     count_nums([1,0,1,-1,0,1,1,1,-1,0,1,-1,-1,-1,-1]) == 21\nassert     count_nums([-1,-1,-1,-1,0,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]) == 45\nassert     count_nums([1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_nums([-123, 1, -2, 4, -2]) == 1\nassert     count_nums([123, -1, -2, 4, -2]) == 2\nassert     count_nums([-123, 1, -2, 4, 2]) == 4\nassert     count_nums([]) == 0\nassert     count_nums([-123, -1, -2, 4, 2]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_nums([1,2,3,4,5]) == 5, \"Failed Test 1\"\nassert     count_nums([1,-2,3,4,5]) == 5, \"Failed Test 2\"\nassert     count_nums([-1,2,3,4,5]) == 4, \"Failed Test 3\"\nassert     count_nums([-1,-2,3,4,5]) == 5, \"Failed Test 4\"\nassert     count_nums([-1,-2,-3,-4,-5]) == 0, \"Failed Test 5\"\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_nums([123]) == 1\nassert     count_nums([4123, 6232]) == 2\nassert     count_nums([-123, -4123, -6232]) == 2\nassert     count_nums([]) == 0\nassert     count_nums([-123, -4123, -6232, -9]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_nums([1,2,3]) == 1\nassert     count_nums([-1,-2,-3]) == 3\nassert     count_nums([-1,-1,0,1,1,1,2,3]) == 1\nassert     count_nums([-1,-1,-1,0,1,1,1,2,3]) == 3\nassert     count_nums([-1,-1,-1,-1,0,1,1,1,2,3]) == 4\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_nums([-123, 234, -12, 42, 0]) == 3\nassert     count_nums([4, -2, 0, 1, -2, 1, -3, 2, -1, 0, 1]) == 1\nassert     count_nums([-42, -43, -7, -6, -1, 0, 0, 0, 1, 3, 4]) == 2\nassert     count_nums([0, 0, 0]) == 3\nassert     count_nums([-1, -2, -3, 0]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_nums([1,2,3]) == 2\nassert     count_nums([-1,2,3]) == 2\nassert     count_nums([-1,0,1,2,3]) == 2\nassert     count_nums([-1,-1,0,-1,0,1,0,-1]) == 3\nassert     count_nums([-1,1,1,1,-1,1,1,-1,-1,-1,-1]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_nums([7, -2, -5, 6, 5, 6, 7, -3, 5, -8, 5, -9, -8, -2, -5, -2, -1, -1, -7, 4, 8, -8, -5, -6, -5, 3, -2, -2, -3, 5, 6, -9, -9, -7, -4, -5, -4, -8, -4, -4, -8, -2, -6, -6, -1, -5, -1, -2, -8, -3, -9, -8, -2, -7, -3, -9, -5, -7, -6, -1, -5, -5, -2, -1, -6, -6, -5, -6, -1, -8, -4, -2, -3, -5, -5, -8, -1, -5, -2, -4, -8, -4, -2, -1, -6, -6, -4, -8, -6, -2, -2, -5, -5, -7, -8, -2, -6, -4, -3, -8, -8, -5, -6, -1, -6, -4, -1, -8, -6, -1, -4, -2, -6, -6, -5, -5, -1, -5, -2, -2, -7, -4, -1, -8, -1, -1, -5, -3, -4, -1, -5, -3, -5, -5, -8, -4, -7, -8, -9, -9, -2, -2, -5, -2, -5, -3, -7, -2, -9, -4, -1, -6, -1, -8, -4, -2, -4, -8, -1, -7, -8, -1, -7, -3, -2, -1, -6, -5, -6, -6, -4, -3, -3, -3, -3, -4, -2, -8, -1, -2, -8, -8, -7, -4, -4, -6, -2, -5, -1, -1, -6, -5, -5, -5, -3, -5, -3, -7, -4, -7, -2, -7, -4, -5, -5, -6, -5, -2, -3, -3, -4, -3, -2, -5, -5, -4, -4, -7, -1, -5, -2, -2, -4, -8, -1, -4, -2, -8, -5, -4, -1, -1, -6, -5, -3, -6, -2, -7, -3, -4, -5, -6, -4, -3, -1, -2, -5, -6, -2, -2, -2, -7, -3, -7, -5, -7, -3, -4, -5, -8, -5, -3, -6, -2, -6, -7, -6, -2, -3, -3, -7, -4, -1, -1, -4, -5, -3, -4, -5, -5, -8, -4, -4, -5, -8, -5, -2, -5, -8, -4, -3, -5, -4, -7, -3, -4, -8, -8, -1, -2, -6, -3, -5, -7, -4, -1, -8, -7, -2, -5, -4, -5, -5, -1, -8, -4, -5, -1, -4, -2, -6, -3, -4, -2, -8, -4, -6, -3, -7, -3, -1, -2, -8, -1, -2, -8, -6, -6, -5, -6, -8, -8, -6, "
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_nums([1, 2, 3, 4, 5, 6]) == 4\nassert     count_nums([-1, -2, -3, -4, -5, -6]) == 6\nassert     count_nums([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]) == 8\nassert     count_nums([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6, 7]) == 7\nassert     count_nums([]) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     move_one_ball([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert     move_one_ball([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     move_one_ball([0, 1, 2, 3]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([0, 1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     move_one_ball([]) == True, \"Wrong Output\"\nassert     move_one_ball([1,2]) == False, \"Wrong Output\"\nassert     move_one_ball([2,1]) == False, \"Wrong Output\"\nassert     move_one_ball([3,2,1]) == True, \"Wrong Output\"\nassert     move_one_ball([1,2,3]) == False, \"Wrong Output\"\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     move_one_ball([0,2,3,1,5]) == True\nassert     move_one_ball([5,3,1,2,0]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([1]) == True\nassert     move_one_ball([1,3,0]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     move_one_ball(list(range(1,10))) == False\nassert     move_one_ball(list(range(1,10))) == True\nassert     move_one_ball([1]) == True\nassert     move_one_ball([2,3,4]) == False\nassert     move_one_ball([1,2,3,4]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     move_one_ball([1,2,3]) == False\nassert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([5,4,3,2,1]) == True\nassert     move_one_ball([]) == True\nassert     move_one_ball([1,2]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert     move_one_ball([4, 3, 5, 1, 2, 6, 7, 8, 9, 10]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert     move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == False\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([1,2,3,4,5,6,7]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([1,2,3,4,5,6,7]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (move_one_ball( [1,2,3,4,5] ) == True)\nassert     (move_one_ball( [5,4,3,2,1] ) == True)\nassert     (move_one_ball( [3,2,1,4,5] ) == False)\nassert     (move_one_ball( [1,5,3,2,4] ) == False)\nassert     (move_one_ball( [] ) == True)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     move_one_ball([2, 3, 1]) is False\nassert     move_one_ball([1, 3, 2]) is True\nassert     move_one_ball([]) is True\nassert     move_one_ball([2, 3, 1, 4, 5, 6, 7]) is False"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     exchange([1,3,2,4,5], [1,2,3,4,5]) == \"NO\"\nassert     exchange([2,4,6,8], [2,4,6,8]) == \"YES\"\nassert     exchange([1,3,2,4,5], [1,2,3,4,5,6]) == \"NO\"\nassert     exchange([2,4,6,8], [2,4,6,8,10]) == \"NO\"\nassert     exchange([2,4,6,8,10], [2,4,6,8,10,12]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     exchange([1, 3, 5, 7, 9, 11, 13], [1, 4, 9, 16, 25]) == \"YES\"\nassert     exchange([1, 1, 1, 1, 1], [1, 2, 3, 4, 5]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6], [4, 3, 2, 1, 6, 7]) == \"YES\"\nassert     exchange([2, 2, 3, 4, 5, 6], [4, 3, 2, 1, 6, 7]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 6, 8, 10, 12, 14]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6], [5, 4, 3, 6, 7, 8]) == \"YES\"\nassert     exchange([5, 4, 3, 6, 7, 8], [1, 2, 3, 4, 5, 6]) == \"NO\"\nassert     exchange([2, 4, 6, 8, 10, 12], [4, 6, 8, 10, 12, 14]) == \"YES\"\nassert     exchange([4, 6, 8, 10, 12, 14], [2, 4, 6, 8, 10, 12]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [8, 7, 6, 5, 4, 3, 2, 1, 0]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"\nassert     exchange([1, 3, 5, 7], [2, 3, 5, 7]) == \"NO\"\nassert     exchange([1, 3, 5, 7], [2, 3, 5, 7, 9]) == \"NO\"\n\ndef knapsack(lst1, lst2, n):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to carry all the elements of lst2 into lst1\n    to make n a number of knapsack that each have a capacity of n.\n    The first element of lst2 is the value of the knapsack,\n    and the elements of lst2 are the weights of the items.\n    The items have been sorted from highest weight to lowest weight.\n    If it is possible to carry all the items to the knapsack to make lst1 to have a capacity\n    of n, return \"YES\".\n    Otherwise, return \"NO\".\n\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == \"YES\"\nassert     exchange([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) == \"NO\"\nassert     exchange([1, 3, 5, 7, 9, 11], [2, 4, 6, 8, 10]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     exchange([1,2,3,4,5,6,7,8,9], [2,4,6,8,10,12,14,16,18,20]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]) == \"NO\"\nassert     exchange([1,1,1,1,1], [2,4,6,8,10,12,14,16,18,20]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18,19]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6], [3, 6, 5, 2, 1, 4]) == 'YES'\nassert     exchange([2, 4, 6, 8], [4, 2, 3, 1]) == 'NO'\nassert     exchange([1, 3, 5, 7], [5, 3, 1, 2]) == 'YES'\nassert     exchange([5, 3, 7], [5, 3, 1]) == 'NO'\nassert     exchange([5, 3, 7], [3, 7, 5, 1]) == 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     exchange([1,2,3,4,5], [2,1,4,3,5]) == \"NO\"\nassert     exchange([1,2,3,4,5], [2,1,4,3,6]) == \"YES\"\nassert     exchange([2,4,6,8], [1,3,5,7,9,10]) == \"NO\"\nassert     exchange([2,4,6,8], [3,1,5,7,9,10]) == \"YES\"\nassert     exchange([2,4,6,8], [3,1,5,7]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     exchange([1, 2, 3, 4], [4, 3, 2, 1]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 6, 5]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [4, 2, 3, 1]) == \"NO\"\nassert     exchange([1, 2, 3], [4, 5, 6]) == \"NO\"\nassert     exchange([1, 2, 3], [4, 5, 6, 7]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     exchange([1,3,5,6], [1,2,5,4]) == \"YES\"\nassert     exchange([2,3,4,5], [1,3,5,6]) == \"NO\"\nassert     exchange([2,4,5,6], [1,3,5,6]) == \"NO\"\nassert     exchange([1,2,3,4], [1,2,3,4]) == \"YES\"\nassert     exchange([1,2,3,4,5], [1,2,3,4,5]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     histogram('b') == {'b': 1}\nassert     histogram('a b') == {'a': 1, 'b': 1}\nassert     histogram('a b a c') == {'a': 2, 'b': 1, 'c': 1}\nassert     histogram('b a a') == {'a': 2, 'b': 1}\nassert     histogram('b a b b a a') == {'a': 3, 'b': 3}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     histogram(\"e a t t t\")    ==    {'a': 4, 't': 4, 'e': 3}\nassert     histogram(\"e a t t e\")    ==    {'a': 4, 't': 3, 'e': 2}\nassert     histogram(\"e a t t t e\")    ==    {'a': 4, 't': 4, 'e': 3}\nassert     histogram(\"e a t t t ee a t t\")    ==    {'a': 4, 't': 4, 'e': 3}\nassert     histogram(\"e a t t t ee a t t\")    ==    {'a': 4, 't': 4, 'e': 3}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     histogram('babeba') == {'b': 3, 'a': 2, 'e': 2}\nassert     histogram('aa') == {'a': 2}\nassert     histogram('abcdef') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert     histogram('a') == {'a': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     histogram('z a b c a b b a a b c') == {'a': 2, 'b': 4, 'c': 1}\nassert     histogram('z a b c a c a b b a a b c a b b') == {'a': 2, 'b': 4, 'c': 2}\nassert     histogram('a b c a b b a a b c a b b a b c a b b a') == {'a': 2, 'b': 4, 'c': 2}\nassert     histogram('a b c a c a b b a a b c a b b a b c a b b a') == {'a': 2, 'b': 4, 'c': 2}\nassert     histogram('a a a a a a a a a a a a a a a a a a a a a a a a') == {'a': 10}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     histogram('abc def') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert     histogram('ab ac') == {'a': 2, 'b': 2}\nassert     histogram('z') == {}\n\ndef anagram(s1, s2):\n    \"\"\"Given two strings s1 and s2, write a function that returns true if s2 is an anagram of s1, and false otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     histogram(\"a b c d e\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\nassert histogram(\"a b c a\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert histogram(\"a b b\") == {'a': 2, 'b': 2}\nassert histogram(\"a b c d\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert histogram(\"\") == {}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     histogram('aa bb cc dd ee') == {'a':1, 'b':1, 'c':2, 'd':1, 'e':1}\nassert     histogram('a a a a a') == {'a':4}\nassert     histogram('a a a a a bb') == {'a':2, 'b':1}\nassert     histogram('a a a a a bb a') == {'a':4}\nassert     histogram('a a a a a bb a a') == {'a':4}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     histogram(\"a ab abc b\") == {\"a\": 3, \"b\": 2, \"c\": 1}\nassert     histogram(\"a ab abc b\") == {\"a\": 3, \"b\": 2, \"c\": 1}\nassert     histogram(\"abc\") == {\"a\": 1, \"b\": 1, \"c\": 1}\nassert     histogram(\"\") == {}\nassert     histogram(\"aaa\") == {\"a\": 3}"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (histogram('a b c d e f g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1})\nassert     (histogram('a a a a a b b') == {'a': 4, 'b': 2})\nassert     (histogram('a a a a a b b b') == {'a': 4, 'b': 2})\nassert     (histogram('a a a a a b b c') == {'a': 4, 'b': 2})\nassert     (histogram('a a a a a b b c d') == {'a': 4, 'b': 2})\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ( \"abcba\", \"b\") == reverse_delete(\"abcba\",\"b\")\nassert     ( \"abcba\", \"a\") == reverse_delete(\"abcba\",\"a\")\nassert     ( \"abcba\", \"c\") == reverse_delete(\"abcba\",\"c\")\nassert     ( \"abcba\", \"b\") == reverse_delete(\"abcba\",\"b\")\nassert     ( \"abcba\", \"a\") == reverse_delete(\"abcba\",\"a\")\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_delete(\"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc hmD7Bx7\nassert     reverse_delete(\"ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_delete(\"babad\", \"ab\") == ('bab', False)\nassert     reverse_delete(\"babad\", \"ad\") == ('bab', False)\nassert     reverse_delete(\"babad\", \"ad\") == ('ba', False)\nassert     reverse_delete(\"babad\", \"adb\") == ('b', True)\nassert     reverse_delete(\"baab\", \"b\") == ('', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_delete('hannah', 'hannah') == ('', True)\nassert     reverse_delete('hannah', 'ha') == ('a', True)\nassert     reverse_delete('hello', 'o') == ('ello', True)\nassert     reverse_delete('hannah', 'hna') == ('nannah', False)\nassert     reverse_delete('hello', 'll') == ('', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_delete('abcdc','cd') == (['d'],True)\nassert     reverse_delete('abcdc','dc') == (['c'],False)\nassert     reverse_delete('abcdc','d') == (['bcdc'],True)\nassert     reverse_delete('abcdc','c') == (['d'],False)\nassert     reverse_delete('abcdc','ab') == (['cdc'],False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_delete('a','') == ('',True)\nassert     reverse_delete('ab', 'a') == ('ba',True)\nassert     reverse_delete('abcd', 'ab') == ('bcd',True)\nassert     reverse_delete('abcd', 'cd') == ('abc',False)\nassert     reverse_delete('abcd', 'd') == ('abcd',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_delete(\"a\", \"a\") == ( \"\", False )\nassert     reverse_delete(\"a\", \"b\") == ( \"b\", True )\nassert     reverse_delete(\"ab\", \"b\") == ( \"\", False )\nassert     reverse_delete(\"abcd\", \"abc\") == ( \"cd\", True )\nassert     reverse_delete(\"abcd\", \"bcd\") == ( \"\", False )\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_delete(\"abcdebdc\", \"bcd\") == (\"bcd\", False)\nassert     reverse_delete(\"aab\", \"ab\") == (\"\", True)\nassert     reverse_delete(\"\", \"\") == (\"\", True)\nassert     reverse_delete(\"abcde\", \"cde\") == (\"bcde\", True)\nassert     reverse_delete(\"abcde\", \"bcde\") == (\"\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_delete('abcd','d') == ('dcba',True)\nassert     reverse_delete('abcd','cd') == ('dcba',False)\nassert     reverse_delete('abcd','a') == ('dcdba',True)\nassert     reverse_delete('abcd','bd') == ('dcdba',True)\nassert     reverse_delete('abcd','aa') == ('dcdba',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_delete('a', 'a') == ('', False)\nassert     reverse_delete('a', 'b') == ('a', True)\nassert     reverse_delete('ab', 'b') == ('', False)\nassert     reverse_delete('ab', 'a') == ('b', True)\nassert     reverse_delete('aab', 'b') == ('a', True)\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_count([]) == []\nassert     odd_count(['a', 'b', 'c', 'd']) == []\nassert     odd_count(['2', '4', '6', '8']) == [1, 1, 1, 1]\nassert     odd_count(['2', '4', '6', '8', '10', '0']) == [1, 2, 3, 4, 2, 0]\nassert     odd_count(['12', '13', '14', '15', '16']) == [2, 3, 4, 3, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [2,1,0,2,1,0,2,1,0] == odd_count(['foo', 'bar', 'baz'])\nassert     [0,1,0,0,0,0,0,0,0] == odd_count(['1','2','3','4','5','6','7','8','9'])\nassert     [3,2,0,0,2,0,0,2,0] == odd_count(['123','456','789'])\nassert     [0,0,0,0,0,0,0,0,0] == odd_count(['1','2','3','4','5','6','7','8','9'])\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_count(['a1', 'a1', 'a1']) == [3, 3, 3]\nassert     odd_count(['a1', 'a2', 'a1']) == [2, 4, 3]\nassert     odd_count(['a1', 'a1', 'a3']) == [3, 3, 6]\nassert     odd_count(['a1', 'a2', 'a1', 'a3', 'a1', 'a1', 'a1', 'a1']) == [1, 5, 5, 6, 2, 4, 1, 1]\nassert     odd_count(['a1', 'a2', 'a1', 'a1', 'a3', 'a1', 'a1', 'a1', 'a1']) == [1, 4, 1, 2, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_count(['', '', '']) == [0, 1, 0]\nassert     odd_count(['1234', '4321', '8901']) == [2, 3, 1]\nassert     odd_count(['a', 'b', 'c']) == [0, 0, 0]\nassert     odd_count(['a', 'a', 'a']) == [1, 1, 1]\nassert     odd_count(['1', 'a', '3', 'b', '0', '5', '1', '7', '4', '2', '0', '7', '6', '0', '0', '0']) == [4, 2, 3, 3, 2, 3, 2, 3, 2, 1, 1, 0]\nprint('The tests passed')"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_count(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) \\\n            == [1, 3, 5, 7, 9, 0, 2, 4, 6, 8]\nassert     odd_count(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) \\\n            == [1, 3, 5, 7, 9, 0, 2, 4, 6, 8, 10]\nassert     odd_count(['x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) \\\n            == [1, 3, 5, 7, 9, 0, 2, 4, 6, 8, 10, 12]\nassert     odd_count(['m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) \\\n            == [1, 3, 5, 7, 9, 0, 2, 4, 6, 8, 10, 12, 14, 16]\nassert     odd_count(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '0', '0', '0']) \\\n            == [0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 0, 1, 0, 1, 0, 1, 0] == odd_count(['123', '456', '789', '121', '897', '356', '321', '979'])\nassert     [1, 0, 1, 0, 1, 0, 1, 0] == odd_count(['123', '456', '789', '121', '789', '356', '321', '979'])\nassert     [1, 0, 1, 0, 1, 0, 1, 0] == odd_count(['123', '456', '789', '121', '789', '356', '321', '979'])\nassert     [1, 0, 1, 0, 1, 0, 1, 0] == odd_count(['123', '456', '789', '121', '789', '356', '321', '979'])\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_count([\"123\",\"231\",\"112\"]) == [1,2,3]\nassert     odd_count([\"123\",\"231\",\"112\",\"114\"]) == [1,3,4,3]\nassert     odd_count([\"123\",\"231\",\"112\",\"114\",\"231\"]) == [3,3,1,1,1]\n\ndef duplicate(lst):\n    \"\"\"Given a list of strings, return a list with all the duplicates removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_count(['123', '12345', '1234567', '123456789', '1234567890']) == [2, 3, 4, 7, 9]\nassert     odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9']) == [1, 3, 5, 7, 9]\nassert     odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']) == [1, 3, 5, 7, 9]\nassert     odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == [1, 3, 5, 7, 9]\nassert     odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '0']) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         odd_count([\"2\", \"4\", \"5\"]) == [2, 2]\nassert         odd_count([\"1\", \"10\", \"11\"]) == [1, 2]\nassert         odd_count([\"1\", \"100\", \"101\"]) == [0, 0]\nassert         odd_count([\"1\", \"101\", \"101\"]) == [0, 0]\nassert         odd_count([\"1\", \"101\", \"10\"]) == [0, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_count(['123', '124', '125', '126', '127', '128', '129']) == [1, 2, 2, 3, 3, 4, 4]\nassert     odd_count(['12', '14', '15', '16', '17', '18', '19']) == [1, 2, 2, 2, 3, 3, 3]\nassert     odd_count(['123', '1', '2', '3', '4', '5', '6']) == [2, 1, 1, 2, 2, 3, 3]\nassert     odd_count(['0', '10', '13', '16', '19', '23', '26']) == [3, 1, 1, 1, 1, 1, 1]\nassert     odd_count(['0', '10', '13', '16', '19', '23', '26']) == [3, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minSubArraySum([5,7,1,2,3,1,1,1]) == 5\nassert     minSubArraySum([-3, -2, -1, -2, -1]) == -1\nassert     minSubArraySum([-1, -1]) == -1\nassert     minSubArraySum([]) == -1\nassert     minSubArraySum([-1, 2, -3]) == -1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print minSubArraySum([1,2,5,10,11])\n    print minSubArraySum([1,2,3,4])\n    print minSubArraySum([1,2,4,5,5])"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minSubArraySum([0, 1, 2, 3, 4]) == 1\nassert     minSubArraySum([1, 2, 3, 4]) == 4\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 4\nassert     minSubArraySum([1, 2, 3, 4, 5, 6]) == 7\nassert     minSubArraySum([1, 2, 3, 4, 5, 6, 7]) == 5\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\n\"\"\"\nclass Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if sum(nums) < s:\n            return 0\n        n = len(nums)\n        right = 0\n        curr_sum = nums[0]\n        min_len = n + 1\n        for left in xrange(n):\n            while curr_sum >= s and right < n:\n                curr_sum -= nums[right]\n                right += 1\n            if curr_sum < s:\n                break\n            min_len = min(min_len, right - left)\n        return min_len\n\"\"\"\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minSubArraySum([1, 2, 3, 4, 5, 6]) == 8, \"incorrect result\"\nassert     minSubArraySum([2, 3, 4, 1]) == 2, \"incorrect result\"\nassert     minSubArraySum([1, 3, 4, 2]) == 2, \"incorrect result\"\nassert     minSubArraySum([1, 4, 4]) == 1, \"incorrect result\"\nassert     minSubArraySum([1, 2, 3, 4]) == 1, \"incorrect result\"\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1,1]) == 2\nassert     minSubArraySum([1,1,1]) == 3\nassert     minSubArraySum([1,2,3,4,5,6,7,8,9]) == 15\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minSubArraySum([1,2,3,4,5]) == 9\nassert     minSubArraySum([-1,-2,-3,-4,-5]) == -1\nassert     minSubArraySum([1,3,5,7,9,1,2,3,4,5,6,7,8,9,10]) == 10\nassert     minSubArraySum([1,2,3,4,5,6,7,8,9]) == 18\nassert     minSubArraySum([1,2,3,4,5,6,7,8,9,10,11]) == 22\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     minSubArraySum([1, -1, -2, -3, -4, -5]) == -1\nassert     minSubArraySum([-1, -2, -3]) == -1\nassert     minSubArraySum([-2,-1,4,-2]) == -2\nassert     minSubArraySum([1,-1,-2,4,-2,-1,-2,-2]) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_fill([\n                    [0,1,0,1,0,1,0,1,0,1],\n                    [0,1,0,1,0,1,0,1,0,1],\n                    [0,1,0,1,0,1,0,1,0,1],\n                    [0,1,0,1,0,1,0,1,0,1],\n                    [0,1,0,1,0,1,0,1,0,1],\n                    [0,1,0,1,0,1,0,1,0,1],\n                    [0,1,0,1,0,1,0,1,0,1],\n                    [0,1,0,1,0,1,0,1,0,1],\n                    [0,1,0,1,0,1,0,1,0,1]\n                ], 4) == 4\n\nassert     max_fill([\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0]\n                ], 1) == 3\n\nassert     max_fill([\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0],\n                    [0,0,0,0,0,0,0,0,0,0]\n                ], 5) == 4\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_fill(\n                [[1], [2], [3], [4]],\n                1\n            ) == 0\n\nassert     max_fill(\n                [[1, 1], [1, 2], [1, 3], [1, 4]],\n                1\n            ) == 1\n\nassert     max_fill(\n                [[1, 2], [2, 1], [3, 1], [4, 2]],\n                2\n            ) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_fill([[1,1,1,1,1,1,1],[1,0,1,1,1,1,1],[1,0,0,1,1,1,1],[1,0,0,0,1,1,1],[1,0,0,0,0,1,1],[1,0,0,0,0,0,1],[1,1,1,1,1,1,1]], 2) == 8\nassert     max_fill([[1,0,1],[1,0,1],[1,0,1]], 3) == 4\nassert     max_fill([[1,1,0],[1,0,1],[1,0,1]], 3) == 2\nassert     max_fill([[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]], 3) == 8\nassert     max_fill([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_fill( [[0,0,0,1,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0]], \n                    1) == 3\n\nassert     max_fill( [[0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0]], \n                    2) == 1\n\nassert     max_fill( [[0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0], \n                    [0,0,0,0,0,0]], \n                    3) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_fill([[0, 1, 0, 0, 1, 0, 0, 1, 1, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 0, 1], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 1, 0, 1, 0, 1]], 2) == 3\nassert     max_fill([[1, 1, 1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 0, 1, 0, 1]], 2) == 0\nassert     max_fill([[1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1]], 1) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         max_fill([[0, 1], [1, 0]], 2) == 1\nassert         max_fill([[0, 1], [1, 0]], 2) == 2\nassert         max_fill([[0, 1], [1, 0]], 3) == 1\nassert         max_fill([[0, 1], [1, 0]], 2) == 1\nassert         max_fill([[0, 1, 0], [1, 0, 1]], 3) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         max_fill([[0, 1, 1], [0, 0, 0], [1, 1, 1]], 2) == 0\nassert         max_fill([[0, 1, 1], [0, 0, 0], [1, 1, 1]], 3) == 1\nassert         max_fill([[0, 1, 1], [0, 0, 0], [1, 1, 1]], 4) == 2\nassert         max_fill([[0, 1, 1], [0, 0, 0], [1, 1, 1]], 6) == 3\nassert         max_fill([[0, 1, 1], [0, 0, 0], [1, 1, 1]], 7) == 4\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_fill([[1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_fill([[1,1],[1,1]], 2) == 0\nassert     max_fill([[1,1,0],[1,0,1]], 2) == 2\nassert     max_fill([[1,1],[0,1]], 2) == 2\nassert     max_fill([[1,1],[1,1]], 1) == 1\nassert     max_fill([[0,1],[1,0]], 2) == 2\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([2, 3, 2, 4]) == [2, 2, 3, 4]\nassert     sort_array([3, 2, 2, 3, 3, 4]) == [3, 3, 2, 2, 3, 4]\nassert     sort_array([2, 2, 2, 2, 3, 3, 4, 4, 4]) == [2, 2, 2, 2, 3, 3, 4, 4, 4]\nassert     sort_array([]) == []\nassert     sort_array([2, 3, 0, 3, 2, 3, 3, 3, 2]) == [3, 3, 3, 3, 2, 2, 2, 2, 3]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([0,0,0,0,1,1,1,1,1,1]) == [0,0,0,0,1,1,1,1,1,1]\nassert     sort_array([0,0,0,0,0,1,1,1,1,1]) == [0,0,0,0,0,1,1,1,1,1]\nassert     sort_array([0,0,0,0,1,1,1,1,1,1]) == [0,0,0,0,1,1,1,1,1,1]\nassert     sort_array([0,0,1,1,0,1,0,1,0,0]) == [0,0,1,1,0,0,0,1,0,0]\nassert     sort_array([0,0,1,1,0,1,1,0,1,0]) == [0,0,1,1,0,0,1,1,0,0]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([0,0,0,1,1,1,1]) == [0,0,1,1,1,1,1]\nassert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([9,9,9,9,9,9,9]) == [9,9,9,9,9,9,9]"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [1,3,5,7,9,2,4,6,8]     ==     sort_array([0,1,1,2,0,1,2,3,1,0])\nassert     [1,3,5,7,9,2,4,6,8]     ==     sort_array([0,1,1,2,0,1,2,3,1,0])\nassert     [1,3,5,7,9,2,4,6,8]     ==     sort_array([1,1,2,2,1,0,1,2,3,1,0])\nassert     [1,3,5,7,9,2,4,6,8]     ==     sort_array([0,1,1,2,0,1,2,3,1,0])\nassert     [1,3,5,7,9,2,4,6,8]     ==     sort_array([0,1,1,2,0,1,2,3,1,0])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([0,0,1,1,0,1,1])         == [0,0,0,1,1,1,1]\nassert     sort_array([1,2,3,4,5,6,7,8])         == [1,2,3,4,5,6,7,8]\nassert     sort_array([0,0,1,1,0,1,1,0])         == [0,0,0,1,1,1,1,0]\nassert     sort_array([2,2,2,2,2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2,2,2,2,2]\nassert     sort_array([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array([0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8,9,10]) == [0,1,2,4,8,3,5,6,7,9,10]\nassert     sort_array([0,0,0,0]) == [0,0,0,0]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,4,8,3,5,6,7,9]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == [0,1,2,4,8,3,5,6,7,9,10,11,12,13,14,15,16,17,18,19]\nassert     sort_array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array(0b1111) == [1, 2, 4, 8, 16, 32, 64, 128]\nassert     sort_array(0b0111) == [1, 8, 2, 4, 16, 32, 64, 128]\nassert     sort_array(0b1101) == [1, 8, 4, 2, 16, 32, 64, 128]\nassert     sort_array(0b110111) == [1, 8, 4, 2, 16, 32, 64, 128]\nassert     sort_array(0b11111111) == [1, 2, 4, 8, 16, 32, 64, 128]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     select_words(\"there is a cat in the hat and a mouse in the bat\", \n        2) == [\"bat\"]\nassert     select_words(\"tomato soup is great\", \n        3) == [\"soup\"]\nassert     select_words(\"the cat in the hat sat on the bat\", \n        2) == [\"hat\", \"sat\"]\nassert     select_words(\"i love apples\", \n        3) == [\"love\"]\nassert     select_words(\"i love apples\", \n        1) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     select_words(\"A man, a plan, a canal: Panama\", 2) == [\"canal\", \"a\"]\nassert     select_words(\"\", 2) == []\nassert     select_words(\"babababa\", 3) == [\"babababa\"]\nassert     select_words(\"babababa\", 1) == [\"babababa\"]\nassert     select_words(\"babababa\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     select_words(\"it is my fav book\", 4) == ['book', 'fav']\nassert     select_words(\"is my fav book\", 4) == ['book', 'fav']\nassert     select_words(\"is my fav book\", 0) == []\nassert     select_words(\"is my fav book\", 6) == []\n\ndef check_palindrome(s):\n    \"\"\" Given a string s, you have been tasked to implement a function that returns \n    True if s is a palindrome, and False otherwise. A palindrome is a string that\n    reads the same backward as forward.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     select_words(\"the quick brown fox jumps over the lazy dog\", 4) == [\"fox\", \"jumps\"]\nassert     select_words(\"the quick brown fox jumps over the lazy dog\", 3) == [\"fox\", \"brown\", \"jumps\"]\nassert     select_words(\"\", 3) == []\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 4) == [\"fox\", \"jumps\"]\nassert     select_words(\"fox\", 0) == [\"fox\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     select_words(\" a b c d e f g h i j k l m n o p q r s t u v w x y z\", 11) \\\n        == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert     select_words(\" abcdefghijklmnopqrstuvwxyz\", 11) \\\n        == ['abcdefghijklmnopqrstuvwxyz']\nassert     select_words(\"this is a test\", 7) \\\n        == ['this', 'is', 'a', 'test']\nassert     select_words(\"\", 7) \\\n        == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     select_words(\"Hi there\", 2) == [\"here\"]\nassert     select_words(\"Hi there\", 1) == []\nassert     select_words(\"Hi there\", 3) == [\"here\", \"there\"]\nassert     select_words(\"Hi there\", 4) == [\"here\", \"there\"]\nassert     select_words(\"Hi there\", 5) == [\"here\", \"there\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (select_words('aabc aaac', 2)    == ['aaac'])\nassert     (select_words('aabc aaac', 1)    == ['aabc', 'aaac'])\nassert     (select_words('aabc aaac', 5)    == ['aabc'])\nassert     (select_words('aabc', 1)        == ['aabc'])\nassert     (select_words('aabc', 3)        == ['aabc'])\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     select_words(\"programming languages\", 1) == [\"programming\"]\nassert     select_words(\"programming languages\", 2) == [\"programming\", \"languages\"]\nassert     select_words(\"programming languages\", 3) == [\"programming\", \"languages\", \"language\"]\nassert     select_words(\"programming languages\", 4) == [\"programming\", \"languages\", \"language\", \"languages\"]\nassert     select_words(\"\", 1) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     select_words(\"lorem ipsum dolor sit amet, consectetur adipiscing elit.\", 4) \\\n    == [\"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\", \"elit\"]\n\nassert     select_words(\"lorem ipsum dolor sit amet, consectetur adipiscing elit.\", 5) \\\n    == [\"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\", \"elit\"]\n\nassert     select_words(\"\", 2) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     select_words('a b c', 0) == []\nassert     select_words('a b c', 1) == ['a', 'b', 'c']\nassert     select_words('a b c d', 1) == ['a', 'b', 'c', 'd']\nassert     select_words('a b c d', 2) == ['a', 'b', 'c']\nassert     select_words('a b c d', 3) == ['a', 'b']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_closest_vowel(\"Example\") == \"e\"\nassert     get_closest_vowel(\"lorem\") == \"o\"\nassert     get_closest_vowel(\"loremipsum\") == \"i\"\nassert     get_closest_vowel(\"loremipsumd\") == \"i\"\nassert     get_closest_vowel(\"loremipsumde\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_closest_vowel('leetcode') == 'e'\nassert     get_closest_vowel('stream') == 'e'\nassert     get_closest_vowel('boat') == 'o'\nassert     get_closest_vowel('bob') == 'b'\nassert     get_closest_vowel('flow') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_closest_vowel(\"APPLE\") == \"E\"\nassert     get_closest_vowel(\"APPEAR\") == \"A\"\nassert     get_closest_vowel(\"APPEAL\") == \"\"\nassert     get_closest_vowel(\"APPEALING\") == \"A\"\nassert     get_closest_vowel(\"APPEALS\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_closest_vowel('queen') == 'e'\nassert     get_closest_vowel('abcb') == 'b'\nassert     get_closest_vowel('bb') == 'b'\nassert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('abc') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"hello\") == \"e\"\nassert     get_closest_vowel(\"hE\") == \"e\"\nassert     get_closest_vowel(\"hEe\") == \"e\"\nassert     get_closest_vowel(\"hEee\") == \"e\"\nassert     get_closest_vowel(\"hEE\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_closest_vowel('abc') == 'a'\nassert     get_closest_vowel('def') == ''\nassert     get_closest_vowel('dg') == 'g'\nassert     get_closest_vowel('dq') == 'q'\nassert     get_closest_vowel('gh') == 'h'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('aa') == 'a'\nassert     get_closest_vowel('abc') == 'a'\nassert     get_closest_vowel('hello') == 'a'\nassert     get_closest_vowel('a') == 'a'\nassert     get_closest_vowel('ha') == 'a'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_closest_vowel(\"mississippi\") == \"p\"\nassert     get_closest_vowel(\"aeiou\") == \"\"\nassert     get_closest_vowel(\"bcdfghjklmnpqrstvwxyz\") == \"f\"\nassert     get_closest_vowel(\"abdcefghjklmnpqrstvwxyz\") == \"a\"\nassert     get_closest_vowel(\"afjqkzcegthjmnqrstvwxyz\") == \"a\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_closest_vowel('cat') == 'a', 'cat => a'\nassert     get_closest_vowel('dog') == 'a', 'dog => a'\nassert     get_closest_vowel('bear') == 'a', 'bear => a'\nassert     get_closest_vowel('racecar') == 'a', 'racecar => a'\nassert     get_closest_vowel('race') == 'a', 'race => a'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_closest_vowel('ham') == 'a',     'Expected: a'\nassert     get_closest_vowel('hamlet') == 'e',     'Expected: e'\nassert     get_closest_vowel('hArE') == 'a',     'Expected: a'\nassert     get_closest_vowel('NoVowel') == '',     'Expected: '''\nassert     get_closest_vowel('vv') == '',         'Expected: '''\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     match_parens('()') == 'Yes'\nassert     match_parens('()(())') == 'Yes'\nassert     match_parens('(()') == 'No'\nassert     match_parens('(()))') == 'No'\nassert     match_parens('())') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     match_parens('(())()') == 'Yes'\nassert     match_parens(')()())') == 'No'\nassert     match_parens(')()()()()())') == 'No'\nassert     match_parens('()()(((()))())') == 'Yes'\nassert     match_parens('(()())()()()') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     match_parens(['(()())', '()()']) == 'Yes'\nassert     match_parens(['()()', '()()']) == 'No'\nassert     match_parens(['(())', '()()']) == 'No'\nassert     match_parens(['(())(())', '()()']) == 'No'\nassert     match_parens(['()()', '()()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     match_parens('(())') == 'Yes'\nassert     match_parens('())') == 'No'\nassert     match_parens('((()())())') == 'Yes'\nassert     match_parens('((()()()((()()))()))') == 'Yes'\nassert     match_parens('(()(()'    ) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     match_parens(['(())', '(()))']) == 'Yes'\nassert     match_parens(['(()))', '(()']) == 'No'\nassert     match_parens(['()', '(()))']) == 'No'\n\nassert     match_parens(['(())', '()()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     match_parens(['(())()', '()()']) == 'Yes'\nassert     match_parens(['(()()', '()()']) == 'No'\nassert     match_parens(['(()', '())']) == 'No'\nassert     match_parens(['()', ')(']) == 'No'\nassert     match_parens(['()', '()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     match_parens(['(())()']) == 'Yes'\nassert     match_parens(['(()']) == 'No'\nassert     match_parens(['(((', ')))']) == 'No'\nassert     match_parens(['(((', ')))']) == 'Yes'\nassert     match_parens(['((', ')))']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     match_parens('(())') == 'Yes'\nassert     match_parens('()())') == 'No'\nassert     match_parens('((()') == 'No'\nassert     match_parens(')()())') == 'No'\nassert     match_parens('()(())') == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     match_parens(['(())()', '()']) == 'Yes'\nassert     match_parens(['(())()', '()']) == 'No'\nassert     match_parens(['(()', '()']) == 'Yes'\nassert     match_parens(['(()())(()())', '()']) == 'Yes'\nassert     match_parens(['(()())(()())', '()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     match_parens(\"(()))\") == 'Yes'\nassert     match_parens(\"(()\") == 'No'\nassert     match_parens(\"(())(())\") == 'Yes'\nassert     match_parens(\"(()\") == 'No'\nassert     match_parens(\"()()()\") == 'Yes'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [3, 6, 9, 12] == maximum([3, 5, 2, 6, 8, 9], 3)\nassert     [3, 6, 9] == maximum([1, 2, 3, 4, 5], 3)\nassert     [1, 5, 9, 13] == maximum([1, 5, 9, 4, 3], 3)\nassert     [1, 5, 9] == maximum([1, 5, 9], 3)\nassert     [1] == maximum([1], 1)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maximum([], 0)        == []\nassert     maximum([1], 0)        == []\nassert     maximum([1,2], 1)    == [1]\nassert     maximum([1,2,3,4,5,6,7,8,9], 2)    == [7, 8, 9]\nassert     maximum([3, 2, 1, 5, 6, 4], 3) == [5, 6, 7]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [9, 8, 7, 6, 5, 4, 3, 2, 1] == maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 7)\nassert     [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] == maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)\nassert     [9, 8, 7, 6, 5, 4, 3, 2, 1] == maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 7)\nassert     [9, 8, 7, 6, 5, 4, 3, 2, 1] == maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 7)\nassert     [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] == maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 9)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximum([3,2,1,5,6,4], 2) == [5,6]\nassert     maximum([1,2,3,4,5], 2) == [5,4]\nassert     maximum([5,4,3,2,1], 2) == [5,4]\nassert     maximum([], 2) == []\nassert     maximum([1,2,3,4,5], 1000) == [5]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     maximum([2,1,3,4,5,6,7,8], 3)    == [7, 8, 9]\nassert     maximum([1,2,3,4,5,6,7,8], 4)     == [8, 9, 10, 11]\nassert     maximum([1,2,3,4,5,6,7,8], 9)     == [7, 8, 9, 10]\nassert     maximum([1,2,3,4,5,6,7,8], 0)     == []\nassert     maximum([], 0)             == []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -100"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6], 4) == [5, 6, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5, 6], 5) == [5, 6, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5, 6], 6) == [5, 6, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5, 6], 0) == []\nassert     maximum([1, 2, 3, 4, 5, 6], 1) == [6]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maximum([3, 2, 1], 3) == [3, 2, 1]\nassert     maximum([3, 2, 1, 5, 6, 4], 3) == [5, 6, 4]\nassert     maximum([3, 2, 1], 2) == [3, 2]\nassert     maximum([1, 2], 2) == [2, 1]\nassert     maximum([1, 2, 3], 3) == [3, 2, 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [9, 7, 5, 4, 3, 1, 0] == maximum([9, 7, 5, 4, 3, 1, 0], 3)\nassert     [9, 9, 9, 9, 9] == maximum([9, 9, 9, 9, 9], 5)\nassert     [-1, -2] == maximum([-1, -2], 2)\nassert     [-1] == maximum([-1], 1)\nassert     [1, 2] == maximum([1, 2], 2)\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solution([1, 2, 3, 4, 5]) == 0\nassert     solution([1, 3, 5]) == 0\nassert     solution([2, 4, 6, 8]) == 6\nassert     solution([1, 4, 6, 7, 10]) == 19\nassert     solution([1, 7, 11, 4, 19, 21]) == 36\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solution([2, 4, 6, 8]) == 4\nassert     solution([1, 3, 5]) == 0\nassert     solution([1, 2, 3]) == 0\nassert     solution([-2, -4, -6, -8]) == -4\nassert     solution([-2, 0, 4, 6, 8]) == 2\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solution([1,2,3,4,5,6,7]) == 0\nassert     solution([1,2,3,4,5,6,8]) == 0\nassert     solution([-1, 2, 3]) == 2\nassert     solution([-1, 2, 3, 4, 5, 6, 7]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9,10]) == 45\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solution([1,2,3,4,5])     == 0\nassert     solution([1,3,5,7,9])     == 8\nassert     solution([3,9,7,5])     == 0\nassert     solution([2,4,6,8,10])     == 10\nassert     solution([0])             == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solution([2, 4, 6, 8, 10]) == 10\nassert     solution([4, 2, 6, 8, 10]) == 8\nassert     solution([5, 2, 7, 4, 10]) == 12\nassert     solution([1, 2, 3, 4, 5]) == 0\nassert     solution([20, 10, 30, 40, 50]) == 60\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15\nassert     solution([-1, -2, -3]) == 0\nassert     solution([-1, -2, -3, -4]) == -6\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solution([2, 1, 2, 3, 4, 3, 2, 1]) == 9, \"Expected 9, Got: \" + str(solution([2, 1, 2, 3, 4, 3, 2, 1]))\nassert     solution([2, 2, 2, 1, 3]) == 3, \"Expected 3, Got: \" + str(solution([2, 2, 2, 1, 3]))\nassert     solution([]) == 0, \"Expected 0, Got: \" + str(solution([]) )\nassert     solution([1, 2, 3, 4, 5]) == 0, \"Expected 0, Got: \" + str(solution([1, 2, 3, 4, 5]))\nassert     solution([-3, 2, -1, 4, -7, 7, 8, 9, 10, -3, 4, -8, 10, 2, -3, 4, -7, 7, 8, 9, 10]) == -40, \"Expected -40, Got: \" + str(solution([-3, 2, -1, 4, -7, 7, 8, 9, 10, -3, 4, -8, 10, 2, -3, 4, -7, 7, 8, 9, 10]))\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solution([1,2,3,4,5,6]) == 0\nassert     solution([-1,0]) == -1\nassert     solution([1,2,3,4,5]) == 0\nassert     solution([1,3,5,7,9]) == 0\nassert     solution([-1,1]) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_elements([3, 2, 2, 1, 3, 9, 9, 8, 6, 9, 6], 1) == 20\nassert     add_elements([3, 2, 2, 1, 3, 9, 9, 8, 6, 9, 6], 2) == 17\nassert     add_elements([3, 2, 2, 1, 3, 9, 9, 8, 6, 9, 6], 3) == 12\nassert     add_elements([3, 2, 2, 1, 3, 9, 9, 8, 6, 9, 6], 4) == 19\nassert     add_elements([3, 2, 2, 1, 3, 9, 9, 8, 6, 9, 6], 5) == 22\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 6) == 5844\n\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_elements([1,2,3,4,5,6], 3) == 9\nassert     add_elements([1,2,3,4,5,6], 2) == 15\nassert     add_elements([1,2,3,4,5,6,7,8], 3) == 22\nassert     add_elements([1,2,3,4,5,6,7,8,9], 3) == 22\nassert     add_elements([1,2,3,4,5,6,7,8,9,10,11], 3) == 22\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_elements([2, 3, 4, 5], 3) == 9\nassert     add_elements([1, 2, 3, 4], 3) == 7\nassert     add_elements([1, 2, 3, 4], 1) == 4\nassert     add_elements([1, 2, 3, 4], 4) == 0\nassert     add_elements([1, 2, 3, 4], 0) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_elements([1,2,3,4,5],2) == 15\nassert     add_elements([7,0,6,5],4) == 7\nassert     add_elements([7,6,5,4],3) == 11\nassert     add_elements([2,1,3,4,5],5) == 15\nassert     add_elements([2,3,4,5,6,7],5) == 29\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8], 5) == 32\nassert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 33\nassert     add_elements([0, 0, 0], 1) == 0\nassert     add_elements([0, 0, 0], 2) == 0\nassert     add_elements([0, 0, 0, 0, 0], 1) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 11\nassert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 12\nassert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 17\nassert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 17\nassert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 22\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_elements([1,2,3], 2) == 3\nassert     add_elements([1,2,3,4], 2) == 5\nassert     add_elements([5,6,7,8], 2) == 14\nassert     add_elements([5,6,7,8,9,10,11,12,13], 2) == 20\nassert     add_elements([1,2,3,4], 3) == 8\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_elements([1,1,1,1], 4) == 2\nassert     add_elements([1,2,3,4,5], 3) == 4\nassert     add_elements([2,3,4,5,6,7,8], 4) == 19"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 45\nassert     add_elements([11, 22, 33, 44, 55, 66, 77, 88, 99, 100], 2) == 245\nassert     add_elements([7, 4, 5, 6, 3, 1, 2, 4, 9, 10], 4) == 15\nassert     add_elements([8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 3) == 22\nassert     add_elements([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 5) == 115\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2]\nassert     get_odd_collatz(3) == [3]\nassert     get_odd_collatz(4) == [3, 10]\nassert     get_odd_collatz(5) == [5, 16]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(get_odd_collatz(2))\n    print(get_odd_collatz(3))\n    print(get_odd_collatz(4))\n    print(get_odd_collatz(5))\n    print(get_odd_collatz(6))\n    print(get_odd_collatz(7))\n    print(get_odd_collatz(8))\n    print(get_odd_collatz(9))\n    print(get_odd_collatz(10))\n    print(get_odd_collatz(15))"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1)         == [1]\nassert     get_odd_collatz(5)         == [1,2,3,10,5]\nassert     get_odd_collatz(11)         == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(121)         == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(1211)     == [1,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1]\nassert     get_odd_collatz(3) == [1, 2]\nassert     get_odd_collatz(4) == [1, 2]\nassert     get_odd_collatz(5) == [1, 2, 3]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(12) == [7, 10, 11, 19, 26, 35]\nassert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(17) == [7, 22, 29, 35, 46, 53]\nassert     get_odd_collatz(25) == [7, 22, 29, 35, 46, 53, 59, 67, 82]\nassert     get_odd_collatz(32) == [7, 22, 29, 35, 46, 53, 59, 67, 82, 89]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2, 1]\nassert     get_odd_collatz(3) == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(4) == [4, 2, 1, 1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1, 1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3]\nassert     get_odd_collatz(4) == [1, 2, 3, 10]\nassert     get_odd_collatz(5) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(5) == [3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(17) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(27) == [3,10,5,16,8,4,2,1]\n\nif __name__ == '__main__':\n    # import sys\n    # if len(sys.argv) < 2:\n    #     print \"Usage: %s <integer>\" % sys.argv[0]\n    #     sys.exit(1)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(9)     == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(10)     == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(11)     == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(12)     == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(13)     == [3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 1]\nassert     get_odd_collatz(4) == [1, 2, 1, 2]\nassert     get_odd_collatz(5) == [1, 2, 1, 2, 1]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     valid_date(\"01-11-2012\") == False\nassert     valid_date(\"01-01-2013\") == False\nassert     valid_date(\"01-13-2013\") == False\nassert     valid_date(\"01-13-2000\") == False\nassert     valid_date(\"01-01-2014\") == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     valid_date(\"01-02-1999\") == False\nassert     valid_date(\"12-02-1999\") == False\nassert     valid_date(\"31-02-1999\") == False\nassert     valid_date(\"02-02-1999\") == True\nassert     valid_date(\"02-02-1998\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     valid_date(\"11-01-2010\") == False\nassert     valid_date(\"01-12-2010\") == False\nassert     valid_date(\"1-12-2010\") == True\nassert     valid_date(\"1-1-2010\") == False\nassert     valid_date(\"1-01-2010\") == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     valid_date(\"02-12-1998\") is False\nassert     valid_date(\"01-31-2002\") is False\nassert     valid_date(\"01-02-3\") is False\nassert     valid_date(\"08-22-2022\") is True\nassert     valid_date(\"11-31-1998\") is False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     valid_date('1-1-2016') == False\nassert     valid_date('1-31-2016') == False\nassert     valid_date('12-31-2016') == False\nassert     valid_date('1-1-2016') == False\nassert     valid_date('01-31-2016') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     valid_date('1-1-2000') == False\nassert     valid_date('1-2-2000') == False\nassert     valid_date('1-1-2000') == False\nassert     valid_date('1-31-2000') == False\nassert     valid_date('2-1-2000') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     valid_date('01-01-2001') == False\nassert     valid_date('01-01-2010') == True\nassert     valid_date('01-01-2000') == True\nassert     valid_date('00-00-2010') == False\nassert     valid_date('32-32-2010') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     valid_date(date=\"3-8-2015\") == False\nassert     valid_date(date=\"3-8-2015\") == False\nassert     valid_date(date=\"-3-8-2015\") == False\nassert     valid_date(date=\"3-8-2015\") == False\nassert     valid_date(date=\"3-8-2015\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     valid_date(12-29-1900)\nassert     not valid_date(31-12-1970)\nassert     valid_date(1-1-1900)\nassert     valid_date(31-12-1970)\nassert     valid_date(32-1-1900)\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     valid_date('1-2-1998') == False\nassert     valid_date('1-2-1999') == True\nassert     valid_date('12-31-1998') == True\nassert     valid_date('1-2-12') == True\nassert     valid_date('1-2-30') == False\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_words('blah blah, blah, blah') == ['blah', 'blah', 'blah']\nassert     split_words('blah, blah, blah') == ['blah', 'blah', 'blah']\nassert     split_words('blah blah, blah, blah') == ['blah', 'blah', 'blah']\nassert     split_words('blah, blah, blah') == ['blah', 'blah', 'blah']\nassert     split_words('blah blah, blah blah blah') == ['blah', 'blah', 'blah', 'blah', 'blah', 'blah']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split_words(\"The rain in Spain\") == [\"The\", \"rain\", \"in\", \"Spain\"]\nassert     split_words(\"It's not a scratch\") == [\"It's\", \"not\", \"a\", \"scratch\"]\nassert     split_words(\"Hemingway\") == ['Hemingway']\nassert     split_words(\"It's a scratch\") == ['It', \"'s\", 'a','scratch']\nassert     split_words(\"It's a scratch and I'm bored\") == ['It', \"'s\", 'a','scratch', 'and', 'I', \"'m\", 'bored']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     split_words(\" \") == [' ']\nassert     split_words(\"  \") == [' ','']\nassert     split_words(\"hello world\") == ['hello', 'world']\nassert     split_words(\"hello world!\") == ['hello', 'world', '!']\nassert     split_words(\"hello, world!\") == ['hello', 'world', '!']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_words('Hello,World!') == ['Hello','World']\nassert     split_words('Hello, World!') == ['Hello', 'World']\nassert     split_words('Hello, World!') == ['Hello', 'World']\nassert     split_words('1,2,3') == ['1', '2', '3']\nassert     split_words('Hello, World!') == ['Hello', 'World']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     split_words('') == []\nassert     split_words(' ') == []\nassert     split_words('a') == ['a']\nassert     split_words('Hello world') == ['Hello', 'world']\nassert     split_words('This is a test. \"Boom!\"') == ['This', 'is', 'a', 'test', '.', '\"', 'Boom!', '\"']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_words(\"The Universe is mine\") == ['The', 'universe', 'is','mine']\nassert     split_words(\"The, Universe, is, mine\") == ['The', 'universe', 'is','mine']\nassert     split_words(\"The, Universe, is, mine\") == ['The', 'universe', 'is','mine']\nassert     split_words(\"The, Universe, is, mine, a\") == ['The', 'universe', 'is','mine', 'a']\nassert     split_words(\"The, Universe, is, mine, a, b\") == ['The', 'universe', 'is','mine', 'a', 'b']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     split_words('') == []\nassert     split_words('this is a string!') == ['this', 'is', 'a','string', '!']\nassert     split_words('i, love, python!') == ['i', 'love', 'python']\nassert     split_words('My name is Simon!') == ['My', 'name', 'is', 'Simon']\nassert     split_words('Hello my friend!') == ['Hello','my', 'friend']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     split_words('I should walk!') == ['I','should', 'walk!']\nassert     split_words('I should walk, but the smile is not good.') == ['I','should', 'walk', ',', 'but', 'the','smile', 'is', 'not', 'good.']\nassert     split_words('I should walk, but the smile is not good.') == ['I','should', 'walk', ',', 'but', 'the','smile', 'is', 'not', 'good.']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_words('Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello World, Hello Worl"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_words('A man, a plan, a canal: Panama') == ['A','man', 'a', 'plan', 'a', 'canal', 'Panama']\nassert     split_words('spam, spam, eggs, bacon') == ['spam','spam', 'eggs', 'bacon']\nassert     split_words('spam') == ['spam']\nassert     split_words('spam,spam,spam,spam') == ['spam','spam','spam']\nassert     split_words('spam, spam, eggs, spam, bacon') == ['spam','spam', 'eggs','spam', 'bacon']\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sorted([1,2,3,4]) == True\nassert     is_sorted([1,3,2,4]) == False\nassert     is_sorted([1,2,3,4,4]) == True\nassert     is_sorted([1,3,4,2]) == False\nassert     is_sorted([1,2,3,4,5]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sorted([1,2,3])\nassert     is_sorted([2,1,3])\nassert     is_sorted([1,1,3])\nassert     is_sorted([3,1,1])\nassert     is_sorted([1,3,1])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5])\nassert     is_sorted([2, 3, 4, 1, 5])\nassert     not is_sorted([1, 2, 3, 4, 1])\nassert     not is_sorted([1, 2, 3, 1, 2, 3, 4, 1, 2, 3])\nassert     is_sorted([5, 2, 4, 1, 3])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (is_sorted([1,2,2,3,4,5])        == True)\nassert     (is_sorted([1,2,2,3,4,5,5])        == False)\nassert     (is_sorted([5,4,3,2,1])            == True)\nassert     (is_sorted([5,4,3,1,2])            == False)\nassert     (is_sorted(['b','a','b','b','a','a'])    == False)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_sorted(    [1,2,3]) == True\nassert     is_sorted(    [1,2,3,4,5]) == True\nassert     is_sorted(    [1,2,3,5,4]) == False\nassert     is_sorted(    [1,2,3,4,5,6]) == False\nassert     is_sorted(    [1,2,3,4,5,5]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1,1]) == True\nassert     is_sorted([1,2]) == True\nassert     is_sorted([1,2,3]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True\nassert     is_sorted([1,2,3,4,3]) == False\nassert     is_sorted([3,2,1,4]) == True\nassert     is_sorted([1,2,2,2,2,3,4]) == False\nassert     is_sorted([1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_sorted([1,2,2]) == False, 'Expect False'\nassert     is_sorted([1,2,3]) == True, 'Expect True'\nassert     is_sorted([1,2,3,4,5]) == True, 'Expect True'\nassert     is_sorted([1,2,3,4,1]) == False, 'Expect False'\nassert     is_sorted([]) == True, 'Expect True'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_sorted([1,2,3,4]) == True\nassert     is_sorted([1,2,3,5]) == False\nassert     is_sorted([1,2,2,2,3]) == False\nassert     is_sorted([]) == True\nassert     is_sorted([-1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1, 1]) == True\nassert     is_sorted([1, 1, 1]) == True\nassert     is_sorted([1, 2, 1]) == True\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersection((1, 3), (2, 4)) == 'YES'\nassert     intersection((1, 2), (2, 4)) == 'NO'\nassert     intersection((2, 3), (1, 4)) == 'NO'\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        interval1, interval2 = input().split()\n        interval1 = list(map(int, interval1.split(',')))\n        interval2 = list(map(int, interval2.split(',')))\n        print(intersection(interval1, interval2))\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nassert intersection(1, 3) == 'NO'\nassert intersection(1, 2) == 'YES'\nassert intersection(2, 4) == 'YES'\nassert intersection(1, 1) == 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert intersection((1,3), (2,4)) == \"YES\"\n    assert intersection((1,3), (3,4)) == \"NO\"\n    assert intersection((0,3), (1,4)) == \"NO\"\n    "
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((1, 2), (1, 3)) == \"NO\"\nassert     intersection((1, 3), (1, 2)) == \"NO\"\nassert     intersection((1, 2), (2, 3)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"NO\"\nassert     intersection((1, 2), (3, 5)) == \"NO\"\nassert     intersection((1, 2), (1, 3)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersection((1, 2), (2, 4)) == (2, 3)\nassert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((2, 3), (3, 4)) == \"NO\"\nassert     intersection((2, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((2, 4), (1, 3)) == \"NO\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((3, 4), (1, 2)) == \"NO\"\nassert     intersection((2, 4), (2, 2)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersection( [1,3], [2,4] ) == \"YES\"\nassert     intersection( [1,2], [2,3] ) == \"NO\"\nassert     intersection( [1,3], [1,3] ) == \"YES\"\nassert     intersection( [1,2], [2,3] ) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef non_overlapping(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    The given intervals are non-overlapping which means that they don't intersect.\n    Your task is to determine if the length of intersection of these two \n    intervals is a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, -1]) == -2\nassert     prod_signs([1, 1]) == 1\nassert     prod_signs([1, -1, 1]) == -2\nassert     prod_signs([1, 1, -1]) == -2\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, -1]) == 1\nassert     prod_signs([1, -1, 1]) == 1\nassert     prod_signs([1, -1, -1, 1]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prod_signs([1, 2, 3, 4]) == 1\nassert     prod_signs([1, -2, 3, 4]) == -1\nassert     prod_signs([]) == None\nassert     prod_signs([1, 2, -3, -4]) == 0\nassert     prod_signs([-1, 2, -3, 4]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prod_signs([2, 2, 0]) == 0\nassert     prod_signs([2, -2, -2, -2]) == -4\nassert     prod_signs([2, -2, 2, -2]) == 0\nassert     prod_signs([]) == None\nassert     prod_signs([1, 1, 1]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([-1, -1, -1, 1, 1, 1]) == 0\nassert     prod_signs([-1, -1, 1, 1, 1]) == 0\nassert     prod_signs([-1, -1, 1, 1]) == 0\nassert     prod_signs([-1, 1, 1, 1]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prod_signs([]) == None, \"prod_signs([]) == None\"\nassert     prod_signs([1]) == 1, \"prod_signs([1]) == 1\"\nassert     prod_signs([1, -1]) == 1, \"prod_signs([1, -1]) == 1\"\nassert     prod_signs([1, -1, 1]) == 3, \"prod_signs([1, -1, 1]) == 3\"\nassert     prod_signs([1, 1, -1]) == -3, \"prod_signs([1, 1, -1]) == -3\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1]) == 1\nassert     prod_signs([1, 0, 1, 0]) == 1\nassert     prod_signs([0, 1, 1, 0, 0, 1, 1]) == 1\nassert     prod_signs([1, 0, 1, 0, -1, 1, 1]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prod_signs([]) == None, 'None'\nassert     prod_signs([1]) == 1, '1'\nassert     prod_signs([1,2]) == 2, '2'\nassert     prod_signs([1,-2]) == -2, '-2'\nassert     prod_signs([-1,-2]) == -2, '-2'\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prod_signs([1, -2, 3]) == 3\nassert     prod_signs([1, 2, -3]) == -6\nassert     prod_signs([1, -2, -3]) == 6\nassert     prod_signs([]) == None\nassert     prod_signs([1, 2, -3, -4, 5]) == -28\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, -1, 3, -3]) == 22\nassert     prod_signs([1, 1, -1, -1, -1]) == 0\nassert     prod_signs([1, -1, -1, -1, 1]) == 0\nassert     prod_signs([1, 1, 1, 1, -1]) == -4\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minPath([[0,1,2,3],[0,4,5,6],[7,8,9,10],[11,12,13,14],[15,16,17,18]], 4) == [0,1,2,3]\nassert     minPath([[0,1,2,3],[0,4,5,6],[7,8,9,10],[11,12,13,14],[15,16,17,18]], 5) == [0,1,2,3,6]\nassert     minPath([[0,1,2,3],[0,4,5,6],[7,8,9,10],[11,12,13,14],[15,16,17,18]], 1) == [0,1,2,3,6,9,12,15,18]\nassert     minPath([[0,1,2,3],[0,4,5,6],[7,8,9,10],[11,12,13,14],[15,16,17,18]], 2) == [0,1,2,3,6,9]\nassert     minPath([[0,1,2,3],[0,4,5,6],[7,8,9,10],[11,12,13,14],[15,16,17,18]], 3) == [0,1,2,3,6,9,12]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minPath([[0,0,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]], 1) == [0]\nassert     minPath([[0,0,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]], 2) == [0,1]\nassert     minPath([[0,0,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]], 3) == [0,1,2]\nassert     minPath([[0,0,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]], 4) == [0,1,2,3]\nassert     minPath([[0,0,0,0,0],[0,0,1,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]], 5) == [0,1,2,3,4]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 5) == [1, 2, 4, 10]\nassert     minPath([[2, 1, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 4, 6]\nassert     minPath([[3, 4, 10, 11], [2, 1, 4, 11], [12, 13, 14, 15], [16, 17, 18, 19]], 4) == [1, 2, 4, 11]\nassert     minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 3) == [1, 2, 3]\nassert     minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 1) == [1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1, 2, 3] == minPath([[1,2,3],[4,5,6]], 2)\nassert     [1, 2, 3, 4, 5, 6] == minPath([[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 4)\nassert     [1, 2, 3, 4, 5, 6] == minPath([[1,2,3],[4,5,6]], 2)\nassert     [1, 2, 3] == minPath([[1,2,3],[4,5,6]], 1)\nassert     [1, 2, 3, 4, 5, 6] == minPath([[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18]], 5)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minPath(grid, 3) == [1,2,3,5,4,3]\nassert     minPath(grid, 1) == [1]\nassert     minPath(grid, 2) == [1,2]\nassert     minPath(grid, 4) == [1,2,3,4]\nassert     minPath(grid, 5) == [1,2,3,4,5]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minPath([[1,2,3],\n                [4,5,6],\n                [7,8,9]], 1) == [1,2,3]\nassert     minPath([[1,2,3],\n                [4,5,6],\n                [7,8,9]], 2) == [1,2,3]\nassert     minPath([[1,2,3],\n                [4,5,6],\n                [7,8,9]], 3) == [1,2,3]\nassert     minPath([[1,2,3],\n                [4,5,6],\n                [7,8,9]], 4) == [1,2,3]\nassert     minPath([[1,2,3],\n                [4,5,6],\n                [7,8,9]], 5) == [1,2,3]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minPath(\n            [[1,2,3,4,5],\n             [6,7,8,9,10],\n             [11,12,13,14,15],\n             [16,17,18,19,20]], 4) == [1,2,3,4,5,6,7,8]\nassert     minPath(\n            [[1,2,3,4,5],\n             [6,7,8,9,10],\n             [11,12,13,14,15],\n             [16,17,18,19,20]], 5) == [1,2,3,4,5,6,7,8,9,10]\nassert     minPath(\n            [[1,2,3,4,5],\n             [6,7,8,9,10],\n             [11,12,13,14,15],\n             [16,17,18,19,20]], 7) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minPath([[1, 3, 1, 1, 1], [2, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 2) == [1,1]\nassert     minPath(\n                [[1, 3, 1, 1, 1], [2, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]],\n                3) == [1,1,1]\nassert     minPath(\n                [[1, 2, 1, 3, 4, 5, 6], [7, 8, 1, 2, 3, 4, 5], [6, 5, 4, 3, 2, 1, 7], [8, 7, 6, 5, 4, 3, 2], [9, 8, 7, 6, 5, 4, 3], [10, 9, 8, 7, 6, 5, 4], [11, 10, 9, 8, 7, 6, 5]], \n                6) == [1,2,1,3,4,5,6]\n\ndef dijkstra(s, dist, reachable, grid):\n    \"\"\"\n    Given a grid with N rows and N columns, where each cell contains a positive\n    integer, the values in the grid represent the cost to travel from a cell to\n    its adjacent cells. You want to calculate the cost of travelling from the \n    cell (0, 0) to the destination, which is given in the input, reachable.\n    reachable[x][y] is True if the destination is reachable from the cell (0, 0), \n    otherwise it is False.\n    return the minimum cost to travel from the source to the destination\n    \"\"\"\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minPath([[1,3,1],[1,5,1],[4,2,1]], 1) == [1,1,1]\nassert     minPath([[1,3,1],[1,5,1],[4,2,1]], 2) == [1,1,1]\nassert     minPath([[1,3,1],[1,5,1],[4,2,1]], 3) == [1,1,1]\nassert     minPath([[1,3,1],[1,5,1],[4,2,1]], 4) == [1,1,1]\nassert     minPath([[1,3,1],[1,5,1],[4,2,1]], 5) == [1,1,1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minPath(\n                [ [2,5,1],[4,4,3],[2,4,1] ], 4) == [1,2,5,4,4,3,2,4,1]\nassert     minPath(\n                [ [1,2,3],[4,5,6],[7,8,9] ], 3) == [1,2,3,4,5,6,7,8,9]\nassert     minPath(\n                [ [1,2,3],[4,5,6],[7,8,9] ], 4) == [1,2,3,4,5,6,7,8,9]\n\ndef find_top_left_with_min_path(grid):\n    \"\"\"\n    We can see that the minPath solution is much more efficient than\n    the plain DFS or BFS solutions. The key is the following idea:\n    We can start from any cell and find the minPath with the min_path helper\n    function. And the solution of the minPath problem is to find the smallest\n    k (1 <= k <= N) cells that we can visit by starting from the top left\n    cell, and ending in the bottom right cell.\n    Note that we know that the start cell will always be in the grid, and\n    we can find the best start point by simply taking the top left cell,\n    and the second best start point is the one that is either on the right or\n    below the top left cell, and so on.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tri(0) == 0\nassert     tri(1) == 3\nassert     tri(2) == 1\nassert     tri(3) == 3\nassert     tri(4) == 8\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1\nassert     tri(3) == 2\nassert     tri(4) == 8\nassert     tri(5) == 36\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(3) == tri(2) + tri(1) + tri(3) == 2 + 3 + 3 == 8\nassert     tri(4) == tri(3) + tri(2) + tri(1) + tri(4) == 2 + 3 + 3 + 4 == 18\nassert     tri(5) == tri(4) + tri(3) + tri(2) + tri(1) + tri(5) == 2 + 3 + 3 + 4 + 5 == 35\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(3) == 3\nassert     tri(4) == 1 + (2 / 2) + (4 / 3)\nassert     tri(5) == 1 + (2 / 2) + (4 / 3) + (8 / 5)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         3 == tri(3)\nassert     8 == tri(4)\nassert     8 == tri(5)\nassert     7 == tri(6)\nassert     8 == tri(7)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tri(1) == 3\nassert tri(2) == 1 + (2 / 2) = 2\nassert tri(3) == 3\nassert tri(4) == 4\nassert tri(5) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + 2 / 2 == 2\nassert     tri(3) == tri(2) + tri(1) + tri(3)\nassert     tri(4) == tri(3) + tri(2) + tri(1)\nassert     tri(5) == tri(4) + tri(3) + tri(2)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4)\nassert     tri(5) == tri(4) + tri(3) + tri(5)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(3) == 3\nassert     tri(4) == 1 + 2 + 3\nassert     tri(5) == 4 + 3 + 3 + 4\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tri(3) == 8\nassert tri(2) == 1\nassert tri(4) == 3\nassert tri(1) == 3\nassert tri(5) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (digits(100) == 1)\nassert     (digits(12) == 1)\nassert     (digits(16) == 3)\nassert     (digits(25) == 9)\nassert     (digits(27) == 3)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digits(6) == 3\nassert     digits(13) == 13\nassert     digits(16) == 0\nassert     digits(23) == 23\nassert     digits(24) == 24\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digits(14) == 4\nassert     digits(123456789) == 0\nassert     digits(12345679) == 0\nassert     digits(1234) == 0\nassert     digits(123) == 3\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digits(1) == 1\nassert     digits(2) == 2\nassert     digits(3) == 3\nassert     digits(10) == 2\nassert     digits(11) == 3\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digits(12345) == 1*2*3*4*5\nassert     digits(1234) == 1*2*3*4\nassert     digits(98765) == 9*8*7*6*5\nassert     digits(0) == 0\nassert     digits(15) == 1*3*5\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert digits(1234) == 1\nassert digits(10) == 0\nassert digits(10000) == 1\nassert digits(999) == 9\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digits(42) == 21\nassert     digits(29) == 27\nassert     digits(13) == 3\nassert     digits(12) == 0\nassert     digits(10) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digits(0) == 0\nassert     digits(42) == 0\nassert     digits(513) == 0\nassert     digits(10 ** 3) == 0\nassert     digits(10 ** 4) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digits(7) == 7\nassert     digits(5) == 5\nassert     digits(8) == 8\nassert     digits(1) == 1\nassert     digits(0) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digits(123) == 6\nassert     digits(1000) == 36\nassert     digits(999) == 9\nassert     digits(123456789) == 45\nassert     digits(12345678910) == 30\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_nested('[])') == True\nassert     is_nested('[(])') == False\nassert     is_nested('(])') == False\nassert     is_nested('[[())') == False\nassert     is_nested('[(()[])') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_nested(\"[()]\") == True\nassert     is_nested(\"[()()]()\") == True\nassert     is_nested(\"[()()]\") == False\nassert     is_nested(\"[()]\") == False\nassert     is_nested(\"(]\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_nested('x(x)') == True\nassert     is_nested('x(y)x') == False\nassert     is_nested('(x)') == True\nassert     is_nested('(y)') == False\nassert     is_nested(')x(') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         is_nested('([[]()]{}{}())') == True\nassert         is_nested('([[]())]') == False\nassert         is_nested('[{()}]') == True\nassert         is_nested('[([]{})]') == True\nassert         is_nested('[(()[])]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_nested(\"()()()()\") == True\nassert     is_nested(\"(\") == False\nassert     is_nested(\")\") == False\nassert     is_nested(\"(((()()()()()()()())())\") == True\nassert     is_nested(\"(((((\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_nested('[()]{[]}[]') == True\nassert     is_nested('[{()}]') == True\nassert     is_nested('[({})]') == True\nassert     is_nested('[{}]') == True\nassert     is_nested('[(])[{]{)}]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_nested('[[(())])[]][[([]))[]')\nassert     is_nested('[]()')\nassert     not is_nested('[]')\nassert     not is_nested('[[()()]]')\nassert     not is_nested('[[(())(]){}{}]')\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_nested('(((([]))))') == True\nassert     is_nested('[[]') == False\nassert     is_nested(']') == False\nassert     is_nested('([])') == True\nassert     is_nested('([])([])') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         is_nested('()()') == True\nassert         is_nested('(((') == True\nassert         is_nested('(()') == False\nassert         is_nested('(()()())') == True\nassert         is_nested('))(((((') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_nested('hello') == False\nassert     is_nested('([])') == True\nassert     is_nested('(()())') == True\nassert     is_nested('([)]') == False\nassert     is_nested('(()') == False\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3]) == 25\nassert     sum_squares([-1,2,3]) == 29\nassert     sum_squares([-1,-2,-3]) == 17\nassert     sum_squares([-1,-2,-3,4,5,6,7,8,9,10]) == 1874\nassert     sum_squares([0,-1,-2,-3]) == 1\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 25\nassert     sum_squares([2, -1, 3, 4, 5]) == 30\nassert     sum_squares([1.2, -1.3, 3.4, 4.5, 5.6]) == 68.66\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4, 5]) == 55\nassert     sum_squares([-1, -2, -3, -4, -5]) == 110\nassert     sum_squares([3.4, 5.6, 1.2, -2.8]) == 39.8\nassert     sum_squares([-3.4, -5.6, -1.2, -2.8]) == 24.8\nassert     sum_squares([-3.4, -5.6, -1.2, -2.8, 8]) == 36.8\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_squares([2, 4, 6]) == 30\nassert     sum_squares([-2, -4, -6]) == 30\nassert     sum_squares([-4, -2, -6]) == 22\nassert     sum_squares([]) == 0\n\ndef smallest_difference(nums1, nums2):\n    \"\"\"You are given two lists of integers.\n    Write a function that returns the difference between the\n    smallest absolute difference between any two integers from\n    the two lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([4, 7, 12]) == 58, \"Demo 1\"\nassert     sum_squares([3, -1, 15]) == 29, \"Demo 2\"\nassert     sum_squares([]) == 0, \"Demo 3\"\nassert     sum_squares([1, 2, 3]) == 14, \"Demo 4\"\nassert     sum_squares([-3, -2, -1]) == 25, \"Demo 5\"\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (sum_squares([1, 2, 3, 4]) == 26), \"Expected 26\"\nassert     (sum_squares([-1, 0, 1, 2, 3, 4]) == 26), \"Expected 26\"\nassert     (sum_squares([1.1, 2.2, 3.3, 4.4]) == 26), \"Expected 26\"\nassert     (sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 88), \"Expected 88\"\nassert     (sum_squares([-1, -2, -3, -4, -5, -6, -7, -8]) == 88), \"Expected 88\"\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([1, 2, 3]) == 3 + 2 + 1\nassert     sum_squares([]) == 0\nassert     sum_squares([-1, -2, -3]) == -1 + -2 + -3\nassert     sum_squares([1.0, 2.0, 3.0]) == 3 + 2 + 1"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4]) == 55\nassert     sum_squares([-1, 2, -3, 4]) == 72\nassert     sum_squares([1.1, 2.2, 3.3, 4.4]) == 557.5\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4, 5]) == 30\nassert     sum_squares([-1, 0, 1, 2, 3, 4, 5]) == 84\nassert     sum_squares([-1, -0, 1, 2, 3, 4, 5]) == 84\n\nassert     sum_squares([0, 1, 2, 3]) == 14\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([0]) == 0\nassert     sum_squares([0,1]) == 1\nassert     sum_squares([1,2]) == 5\nassert     sum_squares([1,2,3]) == 14\nassert     sum_squares([-1,1]) == 10\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('')         == True\nassert     check_if_last_char_is_a_letter('abcd')     == False\nassert     check_if_last_char_is_a_letter('Hello World!')     == True\nassert     check_if_last_char_is_a_letter('Hello World![]')     == False\nassert     check_if_last_char_is_a_letter('Hello World![]!')     == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('hello') == True\nassert     check_if_last_char_is_a_letter('hello world') == True\nassert     check_if_last_char_is_a_letter('hello world today') == True\nassert     check_if_last_char_is_a_letter('Hello World') == False\nassert     check_if_last_char_is_a_letter('Hello World today') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('a') == True\nassert     check_if_last_char_is_a_letter('hi') == False\nassert     check_if_last_char_is_a_letter('the end') == False\nassert     check_if_last_char_is_a_letter('t') == True\nassert     check_if_last_char_is_a_letter('the end') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('this is my text') == False\nassert     check_if_last_char_is_a_letter('is text is my last word') == True\nassert     check_if_last_char_is_a_letter('is my word the last word') == False\nassert     check_if_last_char_is_a_letter('is my word the last word') == False\nassert     check_if_last_char_is_a_letter('is my word last word') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('m') == True\nassert     check_if_last_char_is_a_letter('milk') == False\nassert     check_if_last_char_is_a_letter('hi') == True\nassert     check_if_last_char_is_a_letter('hi my name is shobhit') == True\nassert     check_if_last_char_is_a_letter('my name is shobhit') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('Hello world') == True\nassert     check_if_last_char_is_a_letter('Hello. world') == True\nassert     check_if_last_char_is_a_letter('Hello world!') == True\nassert     check_if_last_char_is_a_letter('Hello world.!') == True\nassert     check_if_last_char_is_a_letter('Hello world!1') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('hello') == True\nassert     check_if_last_char_is_a_letter('hello world') == False\nassert     check_if_last_char_is_a_letter('hello world!!') == False\nassert     check_if_last_char_is_a_letter('123-hello-world!!') == False\nassert     check_if_last_char_is_a_letter('123-hello-world') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter('Hello World') == False\nassert     check_if_last_char_is_a_letter('Hello World!') == True\nassert     check_if_last_char_is_a_letter('Hello World!+') == True\nassert     check_if_last_char_is_a_letter('HELLO WORLD!+') == True\nassert     check_if_last_char_is_a_letter('HELLO WORLD!') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('') == True, 'fail the first test'\nassert     check_if_last_char_is_a_letter('a') == True, 'fail the second test'\nassert     check_if_last_char_is_a_letter('a ') == True, 'fail the third test'\nassert     check_if_last_char_is_a_letter('b') == False, 'fail the forth test'\nassert     check_if_last_char_is_a_letter('a b') == False, 'fail the fifth test'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"hello world\") == True, \"False\"\nassert check_if_last_char_is_a_letter(\"hello\") == False, \"False\"\nassert check_if_last_char_is_a_letter(\"hello world!\") == False, \"False\"\nassert check_if_last_char_is_a_letter(\"hello world a\") == True, \"True\"\nassert check_if_last_char_is_a_letter(\"hello worldA\") == True, \"True\"\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     can_arrange([5, 4, 3, 2, 1]) == 3\nassert     can_arrange([7, 4, 3, 5, 1]) == 4\nassert     can_arrange([2, 1, 3, 4, 5]) == -1\nassert     can_arrange([1, 4, 2, 2, 3]) == 2\nassert     can_arrange([2, 3, 4, 5, 2]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     can_arrange([10, 5, 6, 7, 1, 9]) == 3\nassert     can_arrange([10, 5, 6, 7, 1, 9, 3]) == 3\nassert     can_arrange([10, 5, 6, 7, 1, 9, 3, 8, 4]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == 1\nassert     can_arrange([1, 2, 3, 7, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 7]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef test_can_arrange():\n    assert can_arrange([1,3,2,4,5]) == 3\n    assert can_arrange([5,4,3,2,1]) == 4\n    assert can_arrange([1,4,3,2]) == -1\n    "
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     can_arrange([1,2,3,4,5]) == 3\nassert     can_arrange([1,3,5,7,9]) == -1\nassert     can_arrange([1,1,2,2]) == -1\nassert     can_arrange([1,1,1,1]) == -1\nassert     can_arrange([]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     can_arrange([0, 1, 2, 3, 4, 5, 6, 7]) == -1\nassert     can_arrange([0, 2, 4, 6, 8, 10]) == -1\nassert     can_arrange([0, 1, 3, 5, 6]) == -1\nassert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([0, 2, 4, 6, 8]) == 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         can_arrange([2, 1, 4, 3, 5]) == 3\nassert         can_arrange([10, 4, 5, 3, 2]) == -1\nassert         can_arrange([2, 1, 2, 3, 4, 5]) == -1\nassert         can_arrange([2, 1, 2, 2, 3, 4]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     can_arrange([2, 1, 3, 5, 4, 6]) == 3\nassert     can_arrange([2, 3, 4, 6, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     can_arrange([1, 2, 4, 5]) == -1\nassert     can_arrange([1, 2, 4, 5, 3]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([2, 3, 4, 5]) == -1\nassert     can_arrange([2, 3, 4, 5, 1]) == 1\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (largest_smallest_integers([]) == (None, None))\nassert     (largest_smallest_integers([1]) == (None, None))\nassert     (largest_smallest_integers([-1, 2]) == (-1, 1))\nassert     (largest_smallest_integers([1, 2, 3, 4]) == (None, None))\nassert     (largest_smallest_integers([-1, 2, 3, -4]) == (None, None))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([1, -2, 3, 4, 5, 6]) == (1, -2)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1]) == (1, 1)\nassert     largest_smallest_integers([1, -2, 3, 4, -5, 6]) == (1, -2)\nassert     largest_smallest_integers([-5, 3, 1, -2, -6, -7]) == (-7, 3)"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([3, 5, -8, -2, 6, 8]) == (-8, 6)\nassert     largest_smallest_integers([0, -1, 0]) == (None, None)\nassert     largest_smallest_integers([-10, 3, 8, 6, 0]) == (3, -10)\nassert     largest_smallest_integers([3, 5, -8, -2, 6, 8]) == (6, -2)\nassert     largest_smallest_integers([-10, -1, 0, -11]) == (None, -11)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (largest_smallest_integers([1,2,-3,4,5,6]) \n            == (None, 1))\nassert     (largest_smallest_integers([-1,-2,0,4,5,6]) \n            == (0, -1))\nassert     (largest_smallest_integers([-5,5,-3,2,5,6]) \n            == (5, -5))\nassert     (largest_smallest_integers([-5,5,-3,2,5,6]) \n            == (5, -5))\nassert     (largest_smallest_integers([5,5,-3,2,-5,6]) \n            == (5, -5))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1,2,3,4,5,6,7,8]) == (8,1)\nassert     largest_smallest_integers([3,4,5,6,7]) == (7,3)\nassert     largest_smallest_integers([-1,3,4,5,6,7]) == (-1,3)\nassert     largest_smallest_integers([-1,-2,-3,-4,-5,-6,-7,-8]) == (-8,1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         (largest_smallest_integers([2, 3, 1, 0, -1, -2]) == (-1, 1) )\nassert         (largest_smallest_integers([1, 2, 3, 4]) == (None, None) )\nassert         (largest_smallest_integers([-1, -2, -3, -4]) == (-1, None) )\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (2, 7) == largest_smallest_integers([-1, 5, -2, 7])\nassert     (None, None) == largest_smallest_integers([])\nassert     (None, None) == largest_smallest_integers([2, 2, 2, 2, -2, -2])\nassert     (4, -1) == largest_smallest_integers([1, -2, 3, -4])\nassert     (None, None) == largest_smallest_integers([0, 0, 0, 0, 0, 0])\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([5, -3, 3, 1, 2, -1, -2]) == (-1, 5)\nassert     largest_smallest_integers([]) == None\nassert     largest_smallest_integers([1, 2]) == (2, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (5, 1)\nassert     largest_smallest_integers([1, -2, 3, -4, 5]) == (1, -2)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5, 6]) == (1, 5)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (-6, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7]) == (-7, -1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8]) == (8, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-1, 5)\nassert     largest_smallest_integers([0, 1, 2, 3, 4, 5, 6]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8]) == (8, 1)\nassert     largest_smallest_integers([1, -2, 3, 4, 5, -6, 7, 8]) == (8, -2)\nassert     largest_smallest_integers([-1, -2, 3, 4, 5, 6, -7, 8]) == (6, -7)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare_one(2.0, 1) == 2\nassert     compare_one(3.0, -1) == 3\nassert     compare_one(\"4\", 1) == 4\nassert     compare_one(2, -1.0) == 2\nassert     compare_one(1, \"1\") == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare_one(3, '3') == 3\nassert     compare_one(3.3, 3) == 3.3\nassert     compare_one(3.3, 3.3) == 3.3\nassert     compare_one('3.3', 3.3) == 3.3\nassert     compare_one('3.3', '3.3') == 3.3\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1,.9) == 1\nassert     compare_one(1, \"1\") == 1\nassert     compare_one(1, 1.1) == 1\nassert     compare_one(1, 1.1) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare_one(10, '10') == 10\nassert     compare_one(10, 10.1) == 10.1\nassert     compare_one(10, 10.01) == 10.01\nassert     compare_one(10, '10.01') == 10.01\nassert     compare_one(10, '10,01') == 10.01\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\n\ndef compare_three(a, b, c):\n    \"\"\"\n    Create a function that takes three integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     compare_one(-1,1) == 1\nassert     compare_one(-1,0) == None\nassert     compare_one(1,0) == None\nassert     compare_one(\"1\",\"1\") == None\nassert     compare_one(1,1) == None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1.1, 1.1) == 1.1\nassert     compare_one(1, \"1\") == 1\nassert     compare_one(\"1\", 1) == 1\nassert     compare_one(1.1, \"1.1\") == 1.1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef format_phone_number(func):\n    \"\"\"\n    Create a function that takes a string of phone number, and returns the formatted phone number\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare_one(3, 3.0) == 3\nassert     compare_one('3', 3.0) == 3\nassert     compare_one(3.0, 3) == 3\nassert     compare_one('3', '3') == '3'\nassert     compare_one('3', 3) == '3'\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(10)\nassert     is_equal_to_sum_even(12)\nassert     is_equal_to_sum_even(101)\nassert     is_equal_to_sum_even(102)\nassert     is_equal_to_sum_even(103)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(42) == True\nassert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(6) == False\nassert     is_equal_to_sum_even(42) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(6) == False\nassert     is_equal_to_sum_even(8) == False\nassert     is_equal_to_sum_even(9) == True\nassert     is_equal_to_sum_even(12) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(5) == True\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(13) == True\nassert     is_equal_to_sum_even(18) == False\nassert     is_equal_to_sum_even(24) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(15) == False\nassert is_equal_to_sum_even(34) == True\nassert is_equal_to_sum_even(55) == True\nassert is_equal_to_sum_even(61) == False\nassert is_equal_to_sum_even(35) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(1)\nassert     is_equal_to_sum_even(2)\nassert     is_equal_to_sum_even(3)\nassert     is_equal_to_sum_even(4)\nassert     is_equal_to_sum_even(5)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(0) is True\nassert     is_equal_to_sum_even(3) is True\nassert     is_equal_to_sum_even(5) is True\nassert     is_equal_to_sum_even(3) is False\nassert     is_equal_to_sum_even(5) is False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(38) is True\nassert     is_equal_to_sum_even(48) is False\nassert     is_equal_to_sum_even(5) is True\nassert     is_equal_to_sum_even(37) is True\nassert     is_equal_to_sum_even(41) is True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(8) == False\nassert     is_equal_to_sum_even(14) == True\nassert     is_equal_to_sum_even(14) == True\nassert     is_equal_to_sum_even(16) == True\nassert     is_equal_to_sum_even(18) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(10)\nassert     not is_equal_to_sum_even(12)\nassert     not is_equal_to_sum_even(14)\nassert     is_equal_to_sum_even(16)\nassert     is_equal_to_sum_even(18)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     special_factorial(1)    == 1\nassert     special_factorial(2)    == 2\nassert     special_factorial(3)    == 6\nassert     special_factorial(4)    == 24\nassert     special_factorial(5)    == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     special_factorial(3) == special_factorial(3+1)\nassert     special_factorial(4) == special_factorial(4+1)\nassert     special_factorial(5) == special_factorial(5+1)\nassert     special_factorial(6) == special_factorial(6+1)\nassert     special_factorial(7) == special_factorial(7+1)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(1) == 1\nassert     special_factorial(0) == 1\nassert     special_factorial(7) == 5040\nassert     special_factorial(10) == 3628800\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     special_factorial(0)    == 1\nassert     special_factorial(1)    == 1\nassert     special_factorial(2)    == 2\nassert     special_factorial(3)    == 6\nassert     special_factorial(4)    == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     special_factorial(4)    == 24\nassert     special_factorial(5)    == 120\nassert     special_factorial(6)    == 720\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(1) == 1\nassert     special_factorial(0) == 1\nassert     special_factorial(5) == 120\nassert     special_factorial(10) == 3628800\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fix_spaces(\"test\") == \"test\"\nassert     fix_spaces(\"test \") == \"test_\"\nassert     fix_spaces(\"test   \") == \"test__\"\nassert     fix_spaces(\"test    \") == \"test__\"\nassert     fix_spaces(\" test \") == \"test__\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fix_spaces('hello')         == 'hello', 'Test 1'\nassert     fix_spaces('hello     ')     == 'hello', 'Test 2'\nassert     fix_spaces('hello  world')     == 'hello_world', 'Test 3'\nassert     fix_spaces('  hello  world  ')     == 'hello_world', 'Test 4'\nassert     fix_spaces('  hello   world  ')     == 'hello_world', 'Test 5'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fix_spaces(\"\") == \"\"\nassert     fix_spaces(\" \") == \"-\"\nassert     fix_spaces(\"-\") == \"-\"\nassert     fix_spaces(\"a b \") == \"a_b\"\nassert     fix_spaces(\"a b c\") == \"a_b_c\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fix_spaces(\"spaces are better than  _ \") == \"spaces_are_better_than___ \", \"first\"\nassert     fix_spaces(\"spaces      are      better    than   _  \") == \"spaces_are_better_than__ \", \"second\"\nassert     fix_spaces(\"spaces      are      better    than   _  \") == \"spaces_are_better_than__  \", \"third\"\nassert     fix_spaces(\"Spaces      are      Better    than   _  \") == \"spaces_are_better_than_  \", \"fourth\"\nassert     fix_spaces(\"spaces are better than  _  \") == \"spaces_are_better_than_  \", \"fifth\""
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fix_spaces(\"hello there\") == \"hello_there\"\nassert     fix_spaces(\"hello    there\") == \"hello_there\"\nassert     fix_spaces(\"hello there\") == \"hello_there\"\nassert     fix_spaces(\"hello  there\") == \"hello_there\"\nassert     fix_spaces(\"hello   there\") == \"hello_there\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fix_spaces(\"test\") == \"test\"\nassert     fix_spaces(\"test  test\") == \"test_test\"\nassert     fix_spaces(\"test test\") == \"test_test\"\nassert     fix_spaces(\"test  test    test\") == \"test_test_test\"\nassert     fix_spaces(\"test    test\") == \"test_test\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fix_spaces('this is a string') == 'this_is_a_string'\nassert     fix_spaces('this is another string') == 'this_is_another_string'\nassert     fix_spaces('this   is a string') == 'this_is_a_string'\nassert     fix_spaces('this is a string') == 'this_is_a_string'\nassert     fix_spaces('this  is  a string') == 'this_is_a_string'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fix_spaces('hello world') == 'hello_world'\nassert     fix_spaces('hello   world') == 'hello_world'\nassert     fix_spaces('hello   world  ') == 'hello_world'\nassert     fix_spaces(' hello world  ') == 'hello_world'\nassert     fix_spaces('   hello world   ') == 'hello_world'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fix_spaces(\"spaced out\") == \"spaced_out\"\nassert fix_spaces(\"spaced out   \") == \"spaced_out\"\nassert fix_spaces(\"spaced out   and\") == \"spaced_out_and\"\nassert fix_spaces(\"spaced out  and   \") == \"spaced_out_and\"\nassert fix_spaces(\"spaced out   and   it\") == \"spaced_out_and_it\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fix_spaces('hello') == 'hello'\nassert     fix_spaces('hello     ') == 'hello'\nassert     fix_spaces('hello   ') == 'hello'\nassert     fix_spaces('hello_  ') == 'hello_'\nassert     fix_spaces('hello    ') == 'hello_'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     file_name_check('A3.txt') == 'Yes'\nassert     file_name_check('a.txt') == 'Yes'\nassert     file_name_check('a.txt.txt') == 'Yes'\nassert     file_name_check('a.txt.txt.exe') == 'Yes'\nassert     file_name_check('a.exe.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     file_name_check('abc.123') == 'No'\nassert     file_name_check('abc.123.txt') == 'Yes'\nassert     file_name_check('abc.123.exe') == 'Yes'\nassert     file_name_check('abc.123.dll') == 'Yes'\nassert     file_name_check('abc.123.txt.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     file_name_check('A.txt') == 'Yes'\nassert     file_name_check('aa.txt') == 'Yes'\nassert     file_name_check('aaa.txt') == 'Yes'\nassert     file_name_check('aaaa.txt') == 'Yes'\nassert     file_name_check('aaaaa.txt') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     file_name_check('0') == 'No'\nassert     file_name_check('a') == 'No'\nassert     file_name_check('1') == 'No'\nassert     file_name_check('a1') == 'No'\nassert     file_name_check('a1.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     file_name_check('random_string')     == 'No'\nassert     file_name_check('random_string0')     == 'No'\nassert     file_name_check('random_string1')     == 'No'\nassert     file_name_check('random_string2')     == 'No'\nassert     file_name_check('random_string3')     == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     file_name_check('hello.txt') == 'Yes'\nassert     file_name_check('file1.exe') == 'Yes'\nassert     file_name_check('file.txt.txt') == 'Yes'\nassert     file_name_check('file.txt.exe') == 'No'\nassert     file_name_check('file.txt') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     file_name_check('a.txt') == 'Yes'\nassert     file_name_check('a.txtb') == 'Yes'\nassert     file_name_check('a.txt.txtb') == 'No'\nassert     file_name_check('a.txt.exe') == 'No'\nassert     file_name_check('a.txt.dll') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     file_name_check('f0') == 'No'\nassert     file_name_check('f0.txt') == 'Yes'\nassert     file_name_check('f0.exe') == 'Yes'\nassert     file_name_check('f0.dll') == 'Yes'\nassert     file_name_check('f1.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     file_name_check('example.txt') == 'Yes'\nassert     file_name_check('example.exe') == 'No'\nassert     file_name_check('example.dll') == 'Yes'\nassert     file_name_check('text.txt') == 'No'\nassert     file_name_check('text.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     file_name_check('file_name_check.py') == 'Yes'\nassert     file_name_check('valid_file_name.py') == 'Yes'\nassert     file_name_check('invalid_file_name.py') == 'No'\nassert     file_name_check('invalid_file_name.py') == 'No'\nassert     file_name_check('file_name_check') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([4, 1, 3, 2]) == 10\nassert     sum_squares([1, 2, 3]) == 14\nassert     sum_squares([2, 4, 6, 8]) == 40\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_squares([4,2,1,4,2,1,4]) == 16\nassert     sum_squares([0,1,2,3]) == 0\nassert     sum_squares([2,1,5,5,5,5,5,5,5,5]) == 100\nassert     sum_squares([2,1,5,5,5,5,5,5,5,5,2]) == 55\nassert     sum_squares([4,3,5,3,6,5,5,5,5,5,5]) == 45\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1596\nassert     sum_squares([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 108\nassert     sum_squares([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 108\nassert     sum_squares([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 108\nassert     sum_squares([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 108\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef sum_squares2(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([3, 10, 25, 26, 40, 41, 42, 50, 60, 70]) == 163\nassert     sum_squares([3, 10, 25, 26, 40, 41, 42, 50, 60, 70, 80, 85]) == 813\nassert     sum_squares([3, 10, 25, 26, 40, 41, 42, 50, 60, 70, 80, 85, 92]) == 2440\nassert     sum_squares([3, 10, 25, 26, 40, 41, 42, 50, 60, 70, 80, 85, 92, 99, 100, 105]) == 5081\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 25\nassert     sum_squares([6,7,8,9,10]) == 385\nassert     sum_squares([11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == 5200378094\nassert     sum_squares([3,4,5,6,7,8,9,10]) == 1728\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 5200378094\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4,5,6])    ==    35\nassert     sum_squares([2,4,6,8,10])    ==    175\nassert     sum_squares([-3,-2,-1,0,1,2,3])    ==    -18\n\n\ndef sum_squares_1(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n\n\ndef square(n):\n    \"\"\"\n    This function will take an integer n. The function shall return n * n if n is a multiple of 3, and n * n * n if n is a multiple of \n    4 and not a multiple of 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8]) == 43\nassert     sum_squares([1,2,3,4,5,6,7,8,9]) == 101\nassert     sum_squares([2,3,4,5,6,7,8]) == 41\nassert     sum_squares([2,3,4,5,6,7,8,9,10]) == 6\nassert     sum_squares([2,3,4,5,6,7,8,9,10,11]) == 7\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares( [1, 2, 3, 4, 5])        == 25\nassert     sum_squares( [1, -2, 3, -4, 5])        == 17\nassert     sum_squares( [1, -2, -3, -4, 5])        == 19\nassert     sum_squares( [-1, -2, -3, -4, 5])        == 19\n\n\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]) == 1220\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1256\nassert     sum_squares([10, 20, 30, 40, 50, 60]) == 2200\nassert     sum_squares([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1000\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"man i need a taxi\") == \"taxi\"\nassert     words_in_sentence(\"my name is alex\") == \"alex\"\nassert     words_in_sentence(\"what is the weather today\") == \"weather\"\nassert     words_in_sentence(\"the flower is beautiful\") == \"flower\"\nassert     words_in_sentence(\"i am a pet cat\") == \"pet\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_in_sentence(\"This is a test\") == \"is a test\"\nassert     words_in_sentence(\"This is a test!\") == \"is a test\"\nassert     words_in_sentence(\"The quick brown fox jumped over the lazy dog\") == \"fox\"\nassert     words_in_sentence(\"The quick brown fox jumped over the lazy dog!\") == \"fox\"\nassert     words_in_sentence(\"The quick brown fox jumped over the lazy dog!\") == \"fox\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_in_sentence('hello world') == 'lhello world'\nassert     words_in_sentence('hello   world') == 'lhello world'\nassert     words_in_sentence('hello   world') == 'lhello world'\nassert     words_in_sentence('hello   world') == 'lhello world'\nassert     words_in_sentence('hello   world') == 'lhello world'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox jumped over the lazy dog'\nassert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox jumped over the lazy dog'\nassert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox jumped over the lazy dog'\nassert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox jumped over the lazy dog'\nassert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox jumped over the lazy dog'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"The quick brown fox jumped over the lazy dog\") == \"The quick brown fox jumped over the lazy dog\"\nassert     words_in_sentence(\"Hello\") == \"Hello\"\nassert     words_in_sentence(\"a\") == \"a\"\nassert     words_in_sentence(\"Hello World\") == \"Hello\"\nassert     words_in_sentence(\"\") == \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         words_in_sentence(\"hello world\") == \"helloworld\"\nassert         words_in_sentence(\"hello world\") == \"helloworld\"\nassert         words_in_sentence(\"hello   world\") == \"helloworld\"\nassert         words_in_sentence(\"hello   world\") == \"helloworld\"\nassert         words_in_sentence(\"hello   world \") == \"helloworld\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"This is a test\") == \"This is a test\"\nassert     words_in_sentence(\"Look here we go\") == \"Look here we go\"\nassert     words_in_sentence(\"What a dog is a good boy\") == \"What a dog is a good boy\"\nassert     words_in_sentence(\"Keep a man busy\") == \"Keep a man busy\"\nassert     words_in_sentence(\"Give me my money\") == \"Give me my money\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_in_sentence('This is an example') == 'This is an example', 'wrong result'\nassert     words_in_sentence('I have been there') == 'I have been there', 'wrong result'\nassert     words_in_sentence('I am the very model of a modern major general') == 'I am the very model of a modern major general', 'wrong result'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"aaa\") == \"aaa\"\nassert     words_in_sentence(\"a b c\") == \"abc\"\nassert     words_in_sentence(\"ab aa bb\") == \"abc\"\nassert     words_in_sentence(\"a a b c\") == \"a\"\nassert     words_in_sentence(\"hello\") == \"hell\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"You are happy!\") == \"You are happy\"\nassert     words_in_sentence(\"We are happy!\") == \"We are happy\"\nassert     words_in_sentence(\"We are happy\") == \"We are happy\"\nassert     words_in_sentence(\"We are happy!\") == \"We are happy\"\nassert     words_in_sentence(\"We are happy\") == \"We are happy\"\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     simplify(\"3/4\", \"2\") == True\nassert     simplify(\"3/4\", \"1\") == False\nassert     simplify(\"3/4\", \"4\") == True\nassert     simplify(\"3/4\", \"4/8\") == True\nassert     simplify(\"3/4\", \"2/8\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     simplify(\"1/2\", \"4/4\") == True\nassert     simplify(\"3/4\", \"4/4\") == False\nassert     simplify(\"1/4\", \"4/4\") == False\nassert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1/3\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     simplify(\"1/3\", \"3\")\nassert not simplify(\"3/10\", \"1\")\nassert simplify(\"11/4\", \"22\")\n\nassert simplify(\"1/3\", \"1\")\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     simplify(\"2\", \"1/2\") == True\nassert     simplify(\"1\", \"1/2\") == True\nassert     simplify(\"5\", \"1/2\") == False\nassert     simplify(\"2\", \"3/4\") == False\nassert     simplify(\"1\", \"1/2\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     simplify('1', '2') == True\nassert     simplify('2', '3') == False\nassert     simplify('2', '4') == False\nassert     simplify('2', '1') == True\nassert     simplify('1', '1') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     simplify(\"3/2\", \"3/2\") == True\nassert     simplify(\"0/3\", \"3/2\") == False\nassert     simplify(\"2/3\", \"3/2\") == True\nassert     simplify(\"8/3\", \"3/2\") == True\nassert     simplify(\"1/2\", \"3/2\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     simplify('1/5', '1/2') == True\nassert     simplify('1/5', '2/3') == False\nassert     simplify('1/5', '1/3') == True\nassert     simplify('1/5', '5/6') == True\nassert     simplify('1/5', '1/6') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     simplify(\"2/3\", \"3/2\") == True\nassert     simplify(\"1/3\", \"3/2\") == False\nassert     simplify(\"0/3\", \"3/2\") == False\nassert     simplify(\"2/3\", \"3/1\") == False\nassert     simplify(\"2/3\", \"1/1\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     simplify('1/2', '1/2') == True\nassert     simplify('5/8', '3/4') == True\nassert     simplify('1/4', '1/4') == True\nassert     simplify('1/2', '1/4') == False\nassert     simplify('3/4', '1/2') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     simplify('4', '1') == True\nassert     simplify('4', '2') == True\nassert     simplify('3', '1') == True\nassert     simplify('0', '1') == True\nassert     simplify('1', '1') == True\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 8, 5, 6, 3, 2, 4, 7, 9] == order_by_points(\n        [100, 7, 2, 3, 8, 1, 5, 4, 9])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([9, 7, 8, 1, 0, 6, 5, 2, 3, 4])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([9, 7, 8, 1, 0, 6, 5, 2, 3, 4])\nassert     [1, 8, 5, 6, 3, 2, 4, 7, 9] == order_by_points([9, 7, 2, 3, 8, 1, 5, 4, 0])\nassert     [1, 8, 5, 6, 3, 2, 4, 7, 9] == order_by_points([9, 7, 2, 3, 8, 1, 5, 4, 0])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     order_by_points([7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7]\nassert order_by_points([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert order_by_points([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert order_by_points([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]\nassert order_by_points([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     order_by_points([3,4,8,2,1]) == [1, 2, 3, 4, 8]\nassert     order_by_points([9,7,3,2,5]) == [2, 3, 5, 7, 9]\nassert     order_by_points([0,0,0,0]) == [0, 0, 0, 0]\nassert     order_by_points([]) == []\nassert     order_by_points([9]) == [9]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [2,3,4,5,1] == order_by_points([3,4,5,1,2])\nassert     [5,4,3,2,1] == order_by_points([1,2,3,4,5])\nassert     [2,3,4,5,1] == order_by_points([1,2,3,4,5])\nassert     [1,2,3,4,5] == order_by_points([5,4,3,2,1])"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     order_by_points([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     order_by_points([3, 1, 2, 4, 3]) == [1, 2, 3, 4, 3]\nassert     order_by_points([]) == []\n\nprint \"all tests passed"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     order_by_points([1, 3, 2, 2]) == [1, 2, 2, 3]\nassert     order_by_points([5, 9, 3, 7, 4]) == [3, 5, 4, 7, 9]\nassert     order_by_points([]) == []\nassert     order_by_points([1, 3, 2]) == [1, 2, 3]\nassert     order_by_points([1, 2, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     order_by_points([13, 77, 44, 22, 66, 14, 5, 78, 8, 10]) == [5, 22, 22, 14, 13, 13, 44, 66, 77, 78]\nassert     order_by_points([13, 77, 44, 22, 66, 14, 5, 78, 8, 10]) == [5, 22, 22, 14, 13, 13, 44, 66, 77, 78]\nassert     order_by_points([13, 77, 44, 22, 66, 14, 5, 78, 8, 10, 2]) == [2, 5, 22, 22, 14, 13, 13, 44, 66, 77, 78]\nassert     order_by_points([5, 10, 3, 22, 4, 1, 2, 9, 13, 11]) == [1, 2, 3, 5, 4, 10, 13, 22, 22, 22]\nassert     order_by_points([5, 22, 22, 14, 13, 13, 44, 66, 77, 78, 2]) == [2, 5, 22, 22, 14, 13, 13, 44, 66, 77, 78]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])\nassert     (order_by_points([]) == [])\nassert     (order_by_points([1]) == [1])\nassert     (order_by_points([1, 4, 2, 9, 0]) == [0, 1, 4, 9, 2])\nassert     (order_by_points([0, 2, 5, 3, 7, 4, 6]) == [0, 2, 3, 4, 5, 6, 7])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     order_by_points([15, 16, 17, 18]) == [15, 16, 17, 18]\nassert     order_by_points([10, 2, 22, 25, 33, 39]) == [10, 2, 22, 25, 33, 39]\nassert     order_by_points([1, 11, 21, 25, 33, 35]) == [1, 11, 21, 25, 33, 35]\nassert     order_by_points([1, 3, 21, 25, 33, 35]) == [1, 3, 21, 25, 33, 35]\nassert     order_by_points([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     order_by_points([5,7,2,3,4]) == [5,7,2,4,3]\nassert order_by_points([1,2,4,7,3,9]) == [1,3,4,7,2,9]\nassert order_by_points([9,2,3,4,5,7]) == [7,2,9,5,4,3]\nassert order_by_points([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\nassert order_by_points([9,8,7,6,5,4,3,2,10]) == [10,9,8,7,6,5,4,3,2]\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\nassert     specialFilter([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 9\nassert     specialFilter([1, 22, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     specialFilter([1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 5\nassert     specialFilter([20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 0\nassert     specialFilter([20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]) == 3\nassert     specialFilter([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 58, 58, 58, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100]) == 10\n\ndef evenFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are even.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     specialFilter([5, 10, 15, 22, 26, 29, 31, 33, 34, 36, 40, 44, 45]) == 5\nassert     specialFilter([19, 21, 22, 26, 30, 35, 39, 40, 41, 44, 49, 50]) == 5\nassert     specialFilter([7, 8, 9, 12, 14, 17, 19, 21, 22, 24, 26]) == 6\nassert     specialFilter([7, 10, 12, 18, 22, 29, 30, 32, 34, 39, 43]) == 3\nassert     specialFilter([7, 9, 11, 14, 15, 19, 22, 27, 30, 31, 33, 37]) == 5\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 8\nassert     specialFilter([1,2,3,4,5,6,7,8]) == 7\nassert     specialFilter([1,2,3,4,5,6,7]) == 6\nassert     specialFilter([1,2,3,4,5,6,7]) == 5\nassert     specialFilter([1,2,3,4,5,6,7]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     specialFilter([22, 10, 30, 15, 20, 4, 2, 5, 7, 9, 1, 3, 17, 11, 13, 31, 22, 33, 17, 12, 21, 5, 29, 11, 30, 11, 22, 26, 11, 19, 19, 13, 5, 5, 7, 3, 29, 19, 21, 19, 25, 19, 11, 19, 19, 17, 27, 17, 19, 19, 21, 19, 21, 25, 19, 19, 22, 19, 22, 19, 19, 22, 19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     specialFilter([10, 33, 32, 38, 44, 42, 89, 82, 27, 8, 10, 26]) ==     5\nassert     specialFilter([8, 9, 11, 14, 21, 28, 29, 30, 31, 32]) ==     10\nassert     specialFilter([]) ==     0\nassert     specialFilter([32, 33, 28]) ==     0\nassert     specialFilter([23, 25, 30, 31, 32, 33]) ==     4\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     specialFilter([10,5,15,7,6]) == 3\nassert     specialFilter([13,11,13,13,13,13]) == 2\nassert     specialFilter([2,3,4,5,7,8,9,10,11,13]) == 0\nassert     specialFilter([10,8,8,8]) == 0\nassert     specialFilter([10,20,30,50]) == 3\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\nassert specialFilter([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\nassert specialFilter([2, 3, 4, 5, 6, 7, 8, 9, 11]) == 0\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 6\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     specialFilter([1,2,3,5,6,7,8,9,10]) == 3\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 0\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10,11]) == 0\nassert     specialFilter([10,5,3,1]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     specialFilter([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 19\nassert     specialFilter([0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 32\nassert     specialFilter([0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 6\nassert     specialFilter([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_max_triples(10) == 0\nassert     get_max_triples(15) == 3\nassert     get_max_triples(20) == 3\nassert     get_max_triples(25) == 3\nassert     get_max_triples(30) == 6\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_max_triples(3) == 2\nassert     get_max_triples(5) == 3\nassert     get_max_triples(10) == 5\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    a = []\n    count = 0\n    for i in xrange(n):\n        a.append(i * i - i + 1)\n        count += i * i - i + 1\n    return count\n\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_max_triples(5) == 7\nassert get_max_triples(10) == 4\nassert get_max_triples(100) == 16\nassert get_max_triples(300) == 64"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef num_triples_3(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    a = []\n    for i in range(1, n + 1):\n        a.append(i*i - i + 1)\n    count = 0\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] in a:\n                count += 1\n    return count\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 4\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_max_triples(1) == 1\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_max_triples(6)     == 3, 'incorrect'\nassert     get_max_triples(8)    == 5, 'incorrect'\nassert     get_max_triples(100)    == 21, 'incorrect'"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury')\nassert     bf('Venus', 'Earth') == ('Earth', 'Venus')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars')\nassert     bf('Mars', 'Jupiter') == ('Mars', 'Jupiter')\nassert     bf('Jupiter', 'Saturn') == ('Saturn', 'Jupiter')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bf('Mercury', 'Venus') ==     ('Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') ==     ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Neptune') ==     ('Mars', 'Neptune', 'Jupiter', 'Saturn', 'Uranus', 'Venus', 'Earth')\nassert     bf('Jupiter', 'Saturn') ==     ('Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Venus', 'Earth', 'Mars')\nassert     bf('Saturn', 'Uranus') ==     ('Saturn', 'Uranus', 'Neptune', 'Venus', 'Earth', 'Mars', 'Jupiter')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mercury')\nassert     bf('Earth', 'Venus') == ('Venus', 'Mercury', 'Earth')\nassert     bf('Mars', 'Mercury') == ('Mercury',)\nassert     bf('Venus', 'Mars') == ()\nassert     bf('Jupiter', 'Mercury') == ('Mercury',)\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bf('Earth', 'Venus') == ('Earth', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Venus') == ('Venus', 'Mercury', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Mercury') == ('Venus', 'Mercury', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef ap(planet1, planet2):\n    '''\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    pass\n\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Earth')\nassert     bf('Venus', 'Mercury') == ('Mercury', 'Venus', 'Earth')\nassert     bf('Venus', 'Mars') == ('Venus', 'Mars')\nassert     bf('Mars', 'Venus') == ('Venus', 'Mars')\nassert     bf('Jupiter', 'Venus') == ('Jupiter', 'Venus')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bf('mercury','venus') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert     bf('jupiter','venus') == ('jupiter','venus', 'earth','mars','saturn', 'uranus', 'neptune')\nassert     bf('saturn','venus') == ('saturn','venus', 'earth','mars', 'jupiter', 'uranus', 'neptune')\nassert     bf('uranus','venus') == ('uranus','venus', 'earth','mars', 'jupiter','saturn', 'neptune')\nassert     bf('neptune','venus') == ('neptune','venus', 'earth','mars', 'jupiter','saturn', 'uranus')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     bf('mercury', 'jupiter') == ('mercury','mercury', 'jupiter', 'jupiter', 'earth', 'earth', 'jupiter','mercury')\nassert     bf('earth','mercury') == ('mercury','mercury', 'earth', 'earth','mercury','mercury', 'earth','mercury')\nassert     bf('mercury', 'earth') == ('mercury', 'earth','mercury','mercury', 'earth', 'earth','mercury','mercury')\nassert     bf('mercury','venus') == ('mercury','mercury','venus','venus','mercury','mercury','venus','mercury')\nassert     bf('venus', 'earth') == ('earth','mercury','venus','venus', 'earth', 'earth','venus', 'earth')\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sorted_list_sum(['hello', 'world', 'python', 'python']) == ['hello', 'world', 'python', 'python']\nassert     sorted_list_sum(['hello', 'python', 'python', 'python']) == ['hello', 'python', 'python', 'python']\nassert     sorted_list_sum(['python', 'python', 'python', 'python']) == ['python', 'python', 'python', 'python']\nassert     sorted_list_sum(['python', 'world', 'python', 'python', 'hello']) == ['hello', 'python', 'python', 'world', 'python']\nassert     sorted_list_sum(['hello', 'world', 'python', 'python']) == ['hello', 'world', 'python', 'python']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([\"apple\", \"app\", \"banana\", \"banan\"]) == ['app', 'apple', 'banan', 'banana']\nassert     sorted_list_sum([\"apple\", \"apple\", \"banana\", \"banana\"]) == ['apple', 'apple', 'banana', 'banana']\nassert     sorted_list_sum([\"apple\", \"apple\", \"banana\", \"banana\", \"watermelon\"]) == ['apple', 'apple', 'banana', 'banana', 'watermelon']\nassert     sorted_list_sum([\"apple\", \"apple\", \"banana\", \"banana\", \"watermelon\", \"watermelon\"]) == ['apple', 'apple', 'banana', 'banana', 'watermelon', 'watermelon']\nassert     sorted_list_sum([]) == []\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sorted_list_sum(['aa', 'a', 'aa', 'b', 'a', 'bb', 'b', 'bb', 'bb', 'a', 'cc']) == ['a', 'aa', 'b', 'bb', 'bb', 'cc']\nassert     sorted_list_sum(['aa', 'aa', 'aa', 'a', 'a']) == ['aa', 'a']\nassert     sorted_list_sum(['aa', 'bb', 'c', 'c']) == ['aa', 'bb', 'c']\nassert     sorted_list_sum(['aa', 'bb', 'aa', 'bb', 'aa']) == ['aa', 'aa', 'bb']\nassert     sorted_list_sum([]) == []\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"hello\", \"elephant\", \"horse\", \"cat\", \"\", \"123\", \"a\"]) \\\n        == [\"hello\", \"cat\", \"123\", \"a\"]\nassert     sorted_list_sum([\"cat\", \"\", \"elephant\", \"\", \"horse\", \"123\", \"a\"]) \\\n        == [\"a\", \"cat\", \"123\", \"elephant\", \"horse\", \"a\"]\nassert     sorted_list_sum([\"\", \"\", \"\"]) == [\"\"]\nassert     sorted_list_sum([\"123\", \"\", \"\", \"\", \"\", \"\"]) == [\"123\"]\nassert     sorted_list_sum([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == [\"\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([\"a\", \"bbb\", \"c\"]) == [\"a\", \"bbb\"]\nassert     sorted_list_sum([\"a\", \"b\", \"ccccccc\"]) == [\"a\", \"b\", \"ccccccc\"]\nassert     sorted_list_sum([\"a\", \"bbb\", \"c\", \"a\"]) == [\"a\", \"bbb\", \"c\"]\nassert     sorted_list_sum([\"a\", \"a\", \"b\", \"c\", \"ccccccc\", \"d\"]) == [\"a\", \"a\", \"b\", \"c\", \"ccccccc\", \"d\"]\nassert     sorted_list_sum([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == [\"a\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sorted_list_sum(['a', 'aa', 'abc', 'abc', 'abc']) == ['abc', 'abc', 'abc', 'a', 'aa']\nassert     sorted_list_sum(['abc', 'ab', 'aa']) == ['ab', 'aa']\nassert     sorted_list_sum(['a', 'a']) == ['a', 'a']\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a']\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sorted_list_sum([\"cebola\", \"lentilha\", \"lobo\", \"rabo\", \"cachorro\", \"vaca\", \"conqueiro\", \"gato\", \"cabra\", \"chifre\", \"cavalo\"]) == ['cabra', 'cachorro', 'cavalo', 'chifre', 'conqueiro', 'cabra', 'cebola', 'conqueiro', 'cavalo', 'gato', 'lobo', 'lentilha', 'rabo', 'vaca']\nassert     sorted_list_sum([\"manga\", \"presto\", \"mortadela\", \"seca\", \"pulga\", \"mango\", \"pulga\", \"pulga\", \"pulga\", \"pulga\", \"gulosa\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'pulga', 'pulga', 'pulga','seca','mango','manga', 'presto','mortadela', 'gulosa']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sorted_list_sum([\"abc\", \"abd\", \"abc\"]) == [\"abc\", \"abd\"]\nassert     sorted_list_sum([\"abc\", \"a\", \"abc\"]) == [\"abc\", \"a\"]\nassert     sorted_list_sum([\"abc\", \"a\", \"aba\", \"abc\"]) == [\"abc\", \"a\", \"aba\"]\nassert     sorted_list_sum([\"abc\", \"a\", \"aba\", \"abd\", \"abc\"]) == [\"abc\", \"a\", \"aba\", \"abd\"]\n\ndef is_palindrome(word):\n    \"\"\"Write a function that accepts a word, and returns True if the word is a palindrome (a word that is spelled the same backwards), otherwise returns False.\n    The word will always be a string of characters, and its length will be a positive integer.\n    The function should return True if the word is a palindrome, and False if it is not.\n    For example:\n    is_palindrome(\"abcba\") -> True\n    is_palindrome(\"abc\") -> False\n    is_palindrome(\"a\") -> True\n    is_palindrome(\"a b\") -> False\n    \"\"\"\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sorted_list_sum([\n        'aa', 'ab', 'cc', 'cd', 'a', 'bb', 'bd', 'cc',\n        'aa', 'bb', 'ab', 'cd', 'bb', 'bb', 'a', 'cc',\n        'cd', 'bd']) == ['aa', 'ab', 'bb', 'cc', 'aa', 'ab', 'cd', 'bd']\n\nassert sorted_list_sum([\n        'aa', 'ab', 'cc', 'cd', 'a', 'bb', 'bd', 'cc',\n        'aa', 'bb', 'ab', 'cd', 'bb', 'bb', 'a', 'cc',\n        'cd', 'bd']) == ['aa', 'ab', 'bb', 'cc', 'aa', 'ab', 'cd', 'bd']\n\nassert sorted_list_sum([\n        'aa', 'ab', 'cc', 'cd', 'a', 'bb', 'bd', 'cc',\n        'aa', 'bb', 'ab', 'cd', 'bb', 'bb', 'a', 'cc',\n        'cd', 'bd']) == ['aa', 'ab', 'bb', 'cc', 'aa', 'ab', 'cd', 'bd']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"abcd\", \"abcde\", \"abcefg\", \"pqrstuvw\", \"yqrstu\", \"ab\"]) == [\"ab\", \"abcd\", \"abcde\", \"abcdefg\", \"abcefg\", \"pqrstuvw\", \"yqrstu\"]\nassert     sorted_list_sum([\"abcd\", \"abcde\", \"abcefg\", \"pqrstuvw\", \"yqrstu\", \"ab\", \"pqrstuvw\", \"yqrstu\", \"abcd\"]) == [\"ab\", \"abcd\", \"abcde\", \"abcdefg\", \"abcefg\", \"pqrstuvw\", \"yqrstu\"]\nassert     sorted_list_sum([\"abcd\", \"abcde\", \"abcefg\", \"pqrstuvw\", \"yqrstu\", \"ab\", \"pqrstuvw\", \"yqrstu\", \"abcd\", \"abcde\"]) == [\"ab\", \"abcd\", \"abcde\", \"abcdefg\", \"abcefg\", \"pqrstuvw\", \"yqrstu\"]\nassert     sorted_list_sum([\"abcdefgh\", \"abcde\", \"abcefg\", \"pqrstuvw\", \"yqrstu\", \"ab\", \"pqrstuvw\", \"yqrstu\", \"abcd\", \"abcde\"]) == [\"ab\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcefg\", \"pqrstuvw\", \"yqrstu\"]\nassert     sorted_list_sum([\"abcd\", \"abcde\", \"abcefg\", \"pqrstuvw\", \"yqrstu\", \"ab\", \"pqrstuvw\", \"yqrstu\", \"abcd\", \"abcde\"]) == [\"ab\", \"abcd\", \"abcde\", \"abcdefgh\", \"abcefg\", \"pqrstuvw\", \"yqrstu\"]\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     x_or_y(2, 0, 1) == 0\nassert     x_or_y(3, 0, 1) == 1\nassert     x_or_y(5, 0, 1) == 1\nassert     x_or_y(7, 0, 1) == 1\nassert     x_or_y(11, 0, 1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     x_or_y(7, 3, 4) == 3\nassert x_or_y(7, 4, 3) == 4\nassert x_or_y(3, 3, 4) == 3\nassert x_or_y(3, 4, 3) == 4\nassert x_or_y(7, 5, 6) == 6\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     x_or_y(2, 0, 1) == 0\nassert     x_or_y(3, 0, 1) == 1\nassert     x_or_y(4, 0, 1) == 1\nassert     x_or_y(5, 0, 1) == 1\nassert     x_or_y(6, 0, 1) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     x_or_y(1, 1, 1) == 1\nassert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(3, 1, 1) == 1\nassert     x_or_y(4, 1, 1) == 1\nassert     x_or_y(5, 1, 1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     x_or_y(11, 17, 20) == 17\nassert     x_or_y(11, 17, 19) == 19\nassert     x_or_y(11, 17, 17) == 17\nassert     x_or_y(11, 17, 1) == 17\nassert     x_or_y(11, 17, 9) == 17\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert xt(6, 4, 2) == 2\nassert xt(7, 5, 3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     x_or_y(1,1,1) == 1\nassert     x_or_y(2,1,1) == 2\nassert     x_or_y(3,1,1) == 2\nassert     x_or_y(4,1,1) == 2\nassert     x_or_y(5,1,1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     x_or_y(2, 1, 0) == 1\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(3, 1, 3) == 3\nassert     x_or_y(5, 1, 2) == 2\nassert     x_or_y(7, 1, 3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(4, 2, 3) == 2\nassert     x_or_y(6, 3, 5) == 3\nassert     x_or_y(8, 5, 7) == 5\nassert     x_or_y(10, 11, 13) == 11\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     double_the_difference([10, 7, 4, 2, 3]) == 100\nassert     double_the_difference([10, 7, 4, -2, -3]) == 4\nassert     double_the_difference([]) == 0\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n   \n    If the input list is empty, return 0.\n    '''\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     double_the_difference([1, 2, 3]) == 8\nassert     double_the_difference([-1, -2, -3]) == 16\nassert     double_the_difference([-1.1, -2.2, -3.3]) == 16.4\nassert     double_the_difference([1.1, 2.2, 3.3]) == 6\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     double_the_difference([10,20]) == 200\nassert double_the_difference([10,-20]) == 10\nassert double_the_difference([10,20,15]) == 150\nassert double_the_difference([10,20,15,-3]) == 150\nassert double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     double_the_difference([5,10,4,3,7,12]) == 73\nassert     double_the_difference([-3,-7,-1,2,3,5]) == 176\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1,2]) == 0\nassert     double_the_difference([-3,-7,-1,2,3,5,-5,-5]) == 292\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     double_the_difference([1,2,3]) == 14\nassert     double_the_difference([1,-2,3]) == 14\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1,2,-3]) == 14\nassert     double_the_difference([2,4,6]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     double_the_difference([5,3,2,4,6,7,8,9])     == 576\nassert     double_the_difference([])                         == 0\nassert     double_the_difference([-10,-3,-2,-4,-6,-7,-8,-9])     == -210\nassert     double_the_difference([10,3,2,4,6,7,8,9])         == 210\nassert     double_the_difference([-1,-3,-2,-4,-6,-7,-8,-9])     == -210\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1,3,5]) == 14\nassert     double_the_difference([1,2,3,4,5]) == 21\nassert     double_the_difference([1,3,5,7]) == 49\nassert     double_the_difference([1,2,3,4,5,6]) == 36\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     double_the_difference([5,2,3,4,1]) == 8\nassert     double_the_difference([3,8,7]) == 17\nassert     double_the_difference([]) == 0\nassert     double_the_difference([-5,2,-3,4,-1]) == 17\nassert     double_the_difference([-5,-2,-3,-4,-1]) == 17\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     double_the_difference([10, 5, 3, 8]) == 100\nassert     double_the_difference([0, 1, 3]) == 2\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1, 4, 5, 6, 7, 10, 11]) == 81\nassert     double_the_difference([-1, -2, 3]) == 8\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3, 4, 5, 6]) == 50\nassert     double_the_difference([-2, -1, 0, 1, 2, 3]) == 16\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7]) == 50\nassert     double_the_difference([-3, -2, -1, 0, 1, 2, 3]) == 16\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare([1,2,3,4],[1,1,1,1]) == [0,0,0,0]\nassert     compare([3,1,2,4],[2,1,1,1]) == [1,0,1,1]\nassert     compare([2,1,2,3],[2,1,1,1]) == [0,1,0,0]\nassert     compare([2,2,2,3],[2,1,1,1]) == [1,0,1,0]\nassert     compare([3,3,3,3],[3,1,1,1]) == [0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare([1, 2, 3, 4, 5], [3, 4, 1, 2, 5]) == [2, 1, 1, 0, 4]\nassert     compare([1, 2, 3, 4, 5], [1, 4, 3, 2, 5]) == [0, 1, 1, 3, 4]\nassert     compare([1, 2, 3, 4, 5], [3, 1, 4, 1, 5]) == [3, 2, 1, 0, 4]\nassert     compare([1, 2, 3, 4, 5], [2, 4, 1, 3, 5]) == [2, 1, 1, 2, 4]\nassert     compare([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [4, 3, 1, 0, 2]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef check_guess(game,guess):\n    \"\"\"Checks if a guess is correct\n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare([1,2,3],[1,2,3]) == [0,0,0]\nassert     compare([1,2,3],[2,2,3]) == [1,0,1]\nassert     compare([1,2,3],[1,3,3]) == [0,1,2]\nassert     compare([1,2,3],[4,2,3]) == [3,1,4]\nassert     compare([1,2,3],[1,2,4]) == [0,1,3]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare([0, 1, 3, 3, 4], [0, 1, 2, 3, 3]) == [0, 0, 1, 2, 2]\nassert     compare([0, 1, 3, 3, 4], [0, 1, 3, 3, 3]) == [0, 0, 1, 2, 2]\nassert     compare([0, 1, 3, 3, 4], [0, 1, 3, 3, 4]) == [0, 0, 1, 2, 3]\nassert     compare([0, 1, 3, 3, 4], [0, 1, 3, 3, 4]) == [0, 0, 1, 2, 3]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare([1,2,3,4], [1,2,3,4]) == [0,0,0,0]\nassert     compare([1,2,3,4], [1,2,3,6]) == [0,2,2,3]\nassert     compare([1,2,3,4], [1,2,3,5]) == [0,0,0,1]\nassert     compare([1,2,3,4], [1,2,3,4]) == [0,0,0,0]\nassert     compare([1,2,3,4], [1,2,3,4]) == [0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     compare([1,2,3], [1,2,3]) == [0]\nassert     compare([0,1,2], [0,1,2]) == [0]\nassert     compare([3,3,3], [1,2,3]) == [0,1,2]\nassert     compare([1,2,3], [2,1,3]) == [1,0,1]\nassert     compare([1,2,3], [3,2,1]) == [2,1,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     compare(range(10), range(10)) == [0] * 10\nassert     compare([8, 9, 11], [10, 9, 10]) == [2, 1, 0]\nassert     compare([8, 9, 11], [11, 9, 10]) == [3, 1, 0]\nassert     compare([8, 9, 11], [9, 9, 10]) == [2, 0, 1]\n\ndef sum_guesses(game,guess):\n    \"\"\"\n    Your task is to sum the score on the first place, the second place, the third place, etc.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return a single array of the same length denoting how many guesses you are off\n    the correct number.\n    Example:\n    If scores = [4,7,3,5], and guesses = [2,7,5,9], then for the first match, you are off by one place, \n    for the second match, you are off by two, and so on. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare([1,2,3],[1,2,3]) == [0]\nassert     compare([5,3,2],[3,3,2]) == [2,1,0]\nassert     compare([2,3,4],[2,3,4]) == [0]\nassert     compare([2,3,4],[1,2,3]) == [3,1,0]\nassert     compare([2,3,4],[2,3,4]) == [0]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('A', ['a', 'b', 'c']) == 'A.a'\nassert     Strongest_Extension('B', ['a', 'b', 'c', 'AB']) == 'B.AB'\nassert     Strongest_Extension('C', ['a', 'b', 'c', 'AB', 'cba']) == 'C.AB'\nassert     Strongest_Extension('D', ['a', 'b', 'c', 'AB', 'cba']) == 'D.cba'\nassert     Strongest_Extension('E', ['a', 'b', 'c', 'AB', 'cba']) == 'E.cba'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.StuFfed'\nassert     Strongest_Extension('StuFfed', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'StuFfed.StuFfed'\nassert     Strongest_Extension('StuFfed', ['StuFfed', 'Cheese', 'StuFfed']) == 'StuFfed.StuFfed'\nassert     Strongest_Extension('StuFfed', ['StuFfed', 'StuFfed', 'Cheese', 'StuFfed']) == 'StuFfed.StuFfed'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         Strongest_Extension    ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert         Strongest_Extension    ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Strojman']) == 'Strojman'\nassert         Strongest_Extension    ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheese']) == 'StuFfed'\nassert         Strongest_Extension    ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheese', 'Strojman']) == 'StuFfed'\nassert         Strongest_Extension    ('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Strojman', 'Cheese']) == 'StuFfed'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Aardvark\", \"Cheese\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Aardvark\", \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Aardvark\", \"Cheese\", \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Expected Slices.SErviNGSliCes'\nassert     Strongest_Extension('ConstrainedPath', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'ConstrainedPath.SErviNGSliCes', 'Expected ConstrainedPath.SErviNGSliCes'\nassert     Strongest_Extension('DijkstraData', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'DijkstraData.SErviNGSliCes', 'Expected DijkstraData.SErviNGSliCes'\nassert     Strongest_Extension('Graph', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Graph.SErviNGSliCes', 'Expected Graph.SErviNGSliCes'\nassert     Strongest_Extension('GraphInterface', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'GraphInterface.SErviNGSliCes', 'Expected GraphInterface.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Sweet\"]) == \"Slices.StuFfed\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Sweet\", \"Slice\"]) == \"Slices.Slice\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Sweet\", \"Slice\", \"Slices\"]) == \"Slices.Slices\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Sweet\", \"Slice\", \"Slices\", \"Cheese\"]) == \"Slices.Cheese\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('AC', ['AE', 'AC', 'CA']) == 'AC.AE'\nassert     Strongest_Extension('A', ['B', 'C', 'D', 'E']) == 'A.B'\nassert     Strongest_Extension('L', ['B', 'C', 'D', 'E']) == 'L.B'\nassert     Strongest_Extension('K', ['B', 'C', 'D', 'E']) == 'K.B'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Water\", [\"WaRe\", \"WRaiN\", \"WerNe\", \"WeRr\"]) == \"Water.WeRr\"\nassert     Strongest_Extension(\"Flower\", [\"FoR\", \"FlU\", \"FLower\", \"FLU\", \"flUer\"]) == \"Flower.FlU\"\nassert     Strongest_Extension(\"Shadow\", [\"ShaDo\", \"ShoR\", \"SOUt\", \"Shadow\", \"shADO\"]) == \"Shadow.ShaDo\"\nassert     Strongest_Extension(\"Fire\", [\"FIRE\", \"FRE\", \"FERe\", \"fERe\", \"FREe\"]) == \"Fire.FRE\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Bikes', ['Bike', 'Scooter', 'Ride']) == 'Bikes.Bike'\nassert     Strongest_Extension('Messengers', ['Messenger', 'WhatsApp', 'Telegram']) == 'Messengers.Telegram'\nassert     Strongest_Extension('Amphibians', ['Amphibian', 'Amphibians', 'Anemone', 'Anemone', 'Anemones']) == 'Amphibians.Amphibian'\nassert     Strongest_Extension('Magnetites', ['Magnetite', 'Spheroidite', 'Magnetite']) == 'Magnetites.Magnetite'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('E', ['se','se', 'ce']) == 'E.se'\nassert     Strongest_Extension('Int', ['nni', 'NOt', 'dni']) == 'Int.NOt'\nassert     Strongest_Extension('Combination', ['Comb', 'Comb', 'Combi', 'comb', 'combi', 'combi']) == 'Combination.Combi'\nassert     Strongest_Extension('Tackle', ['kack', 'tac', 'tacke', 'tack', 'tackle', 'tackl']) == 'Tackle.tack'\nassert     Strongest_Extension('Pizza', ['pizz', 'pizza', 'piz', 'piz', 'pizz', 'pizz']) == 'Pizza.piz'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cycpattern_check('abcd', 'dcab') == True\nassert     cycpattern_check('abc', 'cabc') == True\nassert     cycpattern_check('abc', 'abcabc') == True\nassert     cycpattern_check('abc', 'abcdef') == False\nassert     cycpattern_check('abc', 'defabc') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cycpattern_check(\"abcde\", \"cdeab\") == True\nassert     cycpattern_check(\"abcde\", \"bcdea\") == True\nassert     cycpattern_check(\"abcde\", \"deabc\") == True\nassert     cycpattern_check(\"abcde\", \"abcd\") == False\nassert     cycpattern_check(\"abcde\", \"abcdef\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     cycpattern_check(\"ABC\",\"ABABC\") == True\nassert     cycpattern_check(\"ABC\",\"ABBC\") == False\nassert     cycpattern_check(\"ABC\",\"AABC\") == True\nassert     cycpattern_check(\"ABC\",\"AAB\") == True\nassert     cycpattern_check(\"ABC\",\"AB\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         cycpattern_check('abcd','cdab') == True\nassert         cycpattern_check('abcd','bcdab') == True\nassert         cycpattern_check('abcd','cdbac') == True\nassert         cycpattern_check('abcd','abcd') == True\nassert         cycpattern_check('abcd','abcdc') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     cycpattern_check(\"abcd\",\"dcba\") == True\nassert     cycpattern_check(\"abcd\",\"cbad\") == True\nassert     cycpattern_check(\"abcd\",\"cdab\") == True\nassert     cycpattern_check(\"abcd\",\"dabc\") == True\nassert     cycpattern_check(\"abcd\",\"cdac\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     cycpattern_check('alice', 'lice') == True\nassert     cycpattern_check('alice', 'abcd') == False\nassert     cycpattern_check('alice', 'cde') == True\nassert     cycpattern_check('alice', 'cde') == True\nassert     cycpattern_check('alice', 'cde') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         cycpattern_check(\"ABCD\", \"ABCD\") == True\nassert         cycpattern_check(\"ABCD\", \"ACBD\") == True\nassert         cycpattern_check(\"ABCD\", \"BCDD\") == True\nassert         cycpattern_check(\"ABCD\", \"XYZD\") == True\nassert         cycpattern_check(\"ABCD\", \"XYD\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef cycpattern_sub(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cycpattern_check(\"ab\", \"ab\") == True\nassert     cycpattern_check(\"abcd\", \"abcd\") == True\nassert     cycpattern_check(\"ab\", \"abcd\") == True\nassert     cycpattern_check(\"abcd\", \"ab\") == True\nassert     cycpattern_check(\"abcd\", \"abc\") == False\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_count( 12345 )    == ( 1, 5 )\nassert     even_odd_count(  56  ) == ( 2, 0 )\nassert     even_odd_count( 0 )    == ( 0, 0 )\nassert     even_odd_count( -24 ) == ( 0, 4 )\nassert     even_odd_count( -100 ) == ( 0, 4 )\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_count(112) == (2, 1)\nassert     even_odd_count(223) == (3, 2)\nassert     even_odd_count(1234) == (4, 1)\nassert     even_odd_count(4567) == (4, 3)\nassert     even_odd_count(6789) == (5, 4)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_count(123) == (2, 1)\nassert     even_odd_count(129) == (2, 1)\nassert     even_odd_count(245) == (2, 1)\nassert     even_odd_count(3) == (1, 0)\nassert     even_odd_count(8) == (0, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_odd_count(1234) == (2, 1)\nassert     even_odd_count(456) == (4, 0)\nassert     even_odd_count(1) == (1, 1)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(-2) == (0, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_count(123456) == (6,4)\nassert     even_odd_count(21234) == (2,2)\nassert     even_odd_count(1234) == (4,0)\nassert     even_odd_count(112) == (3,1)\nassert     even_odd_count(241234) == (6,4)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n(2, 3) == even_odd_count(12)\nassert \n(1, 0) == even_odd_count(11)\nassert \n(3, 1) == even_odd_count(21)\nassert \n(2, 1) == even_odd_count(10)\nassert \n(2, 0) == even_odd_count(0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_count(1234) == (1, 4)\nassert     even_odd_count(124) == (2, 4)\nassert     even_odd_count(245) == (2, 1)\nassert     even_odd_count(12) == (1, 0)\nassert     even_odd_count(0) == (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_count(19) == (2, 9)\nassert     even_odd_count(15) == (3, 5)\nassert     even_odd_count(123) == (3, 1)\nassert     even_odd_count(59) == (1, 9)\nassert     even_odd_count(8) == (1, 8)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_count(12) == (1, 0)\nassert     even_odd_count(21) == (0, 1)\nassert     even_odd_count(0) == (1, 0)\nassert     even_odd_count(4) == (0, 1)\nassert     even_odd_count(2) == (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_count(123) == (3,1)\nassert     even_odd_count(24) == (2,0)\nassert     even_odd_count(61) == (1,1)\nassert     even_odd_count(26) == (2,0)\nassert     even_odd_count(999) == (4,0)\nprint \"passed\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) ==     'i'\nassert     int_to_mini_roman(5) ==     'v'\nassert     int_to_mini_roman(10) ==     'x'\nassert     int_to_mini_roman(50) ==     'l'\nassert     int_to_mini_roman(100) ==     'c'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(5) == 'v'\nassert     int_to_mini_roman(10) == 'x'\nassert     int_to_mini_roman(50) == 'l'\nassert     int_to_mini_roman(100) == 'c'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(0) == \"\"\nassert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         int_to_mini_roman(1) == 'i'\nassert         int_to_mini_roman(5) == 'v'\nassert         int_to_mini_roman(6) == 'vi'\nassert         int_to_mini_roman(20) == 'x'\nassert         int_to_mini_roman(34) == 'xl'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(4, 3, 5) == False\nassert     right_angle_triangle(3, 5, 4) == False\nassert     right_angle_triangle(5, 4, 3) == False\n\nprint \"Passed!\""
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(1, 3, 4) == True\nassert    right_angle_triangle(5, 9, 12) == True\nassert     right_angle_triangle(7, 8, 10) == False\nassert     right_angle_triangle(5, 12, 13) == False\nassert     right_angle_triangle(4, 8, 8) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(1, 1, 1) == True\nassert     right_angle_triangle(2, 1, 2) == False\nassert     right_angle_triangle(2, 2, 2) == True\nassert     right_angle_triangle(1, 3, 4) == False\nassert     right_angle_triangle(1, 2, 4) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert    right_angle_triangle(3, 4, 6) == False\nassert    right_angle_triangle(3, 5, 6) == False\nassert    right_angle_triangle(1, 2, 3) == True\nassert    right_angle_triangle(1, 2, 4) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(2, 3, 4) is True\nassert    right_angle_triangle(2, 3, 2) is False\nassert    right_angle_triangle(2, 4, 3) is True\nassert    right_angle_triangle(4, 3, 2) is True\nassert    right_angle_triangle(2, 3, 3) is True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(5, 3, 4) == True\nassert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(1, 5, 2) == True\nassert     right_angle_triangle(1, 2, 5) == False\nassert     right_angle_triangle(1, 2, 3) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(3,4,5) is True\nassert     right_angle_triangle(7,12,5) is False\nassert     right_angle_triangle(4,5,6) is False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5)\nassert     right_angle_triangle(3, 4, 6)\nassert     right_angle_triangle(8, 10, 2)\nassert     right_angle_triangle(5, 4, 2)\nassert     right_angle_triangle(7, 6, 3) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(1, 1, 1) == True\nassert     right_angle_triangle(1, 1, 2) == False\nassert     right_angle_triangle(2, 1, 1) == False\nassert     right_angle_triangle(2, 1, 2) == True\nassert     right_angle_triangle(2, 2, 1) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(4,4,4) == True\nassert     right_angle_triangle(5,3,4) == False\nassert     right_angle_triangle(2,2,2) == True\nassert     right_angle_triangle(3,3,3) == True\nassert     right_angle_triangle(5,3,5) == False\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_max(['word', 'word', 'word']) == 'word'\nassert     find_max(['wrd', 'word', 'wrdd']) == 'word'\nassert     find_max(['word', 'wrdd', 'wrd', 'wrd']) == 'wrdd'\nassert     find_max(['word', 'word', 'word', 'word', 'word']) == 'word'\nassert     find_max(['word', 'word', 'word', 'word', 'word', 'word']) == 'word'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\"]) == \"aaaaaaaaa\"\nassert find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\"]) == \"aaaaaa\"\nassert find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]) == \"aaaaaaa\"\nassert find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]) == \"a\"\nassert find_max([\"a\", \"aa\", \"aaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\"]) == \"a\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_max([\"book\", \"number\", \"apple\", \"laptop\", \"book\", \"book\"]) == \"laptop\"\nassert     find_max([\"book\", \"number\", \"apple\", \"laptop\", \"book\", \"book\", \"book\"]) == \"book\"\nassert     find_max([\"book\", \"number\", \"apple\", \"laptop\", \"book\"]) == \"number\"\nassert     find_max([\"book\", \"number\", \"apple\", \"laptop\", \"book\", \"book\", \"book\"]) == \"book\"\nassert     find_max([\"book\", \"number\", \"book\", \"book\", \"book\"]) == \"book\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_max(['f', 'c', 'g', 'a', 'd', 'b', 'e', 'f', 'f', 'c', 'd']) == 'c'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'a', 'b', 'e']) == 'a'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'f']) == 'f'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 'f'\nassert     find_max(['z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y']) =='m'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_max([\"sun\", \"bed\", \"car\", \"dear\", \"far\"]) == \"car\"\nassert     find_max([\"apple\", \"pear\", \"cherry\", \"kiwi\", \"grape\"]) == \"cherry\"\nassert     find_max([\"implement\", \"google\", \"facebook\", \"apple\", \"zillow\", \"com\"]) == \"zillow\"\nassert     find_max([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\"]) == \"eleven\"\nassert     find_max([\"no\", \"noise\", \"noise\"]) == \"no\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_max(['hello', 'i','so', 'how', 'are', 'you']) == 'you'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 'g'\nassert     find_max(['h', 'i', 'l', 'l', 'o']) == 'o'\nassert     find_max(['hello', 'i','so', 'how', 'are', 'you', 'good']) == 'i'\nassert     find_max(['hello', 'i','so', 'how', 'are', 'you', 'good', 'o']) == 'i'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_max([\"aa\",\"aa\",\"aa\",\"aa\",\"bb\",\"bb\",\"bb\",\"cc\",\"cc\"]) == \"aa\"\nassert     find_max([\"bbb\",\"bb\",\"bbbbb\",\"bbb\",\"bbb\",\"bbb\",\"bbbb\",\"bbbbbb\",\"bbbbb\",\"bbbbbbbb\",\"bbbbbbb\"]) == \"bbbbb\"\nassert     find_max([\"bbbb\",\"bb\",\"bbbbb\",\"bbb\",\"bbbb\",\"bbbb\",\"bbbbb\",\"bbbbbb\",\"bbbbb\",\"bbbbbbbb\",\"bbbbbbb\"]) == \"bbbb\"\nassert     find_max([\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\"]) == \"cc\"\nassert     find_max([\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\",\"cc\"]) == \"cc\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_max([\"my\", \"name\", \"is\", \"lebron\", \"james\", \"lebron\", \"james\", \"shawn\"]) == \"lebron\"\nassert find_max([\"my\", \"name\", \"is\", \"lebron\", \"james\", \"lebron\", \"james\", \"shawn\"]) == \"james\"\nassert find_max([\"lebron\", \"james\", \"shawn\", \"danny\", \"jerome\", \"lebron\", \"lebron\", \"james\"]) == \"lebron\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_max([\"charlie\", \"betty\", \"arthur\"]) == \"charlie\"\nassert     find_max([\"deedee\", \"gocobot\", \"bobobobob\"]) == \"bobobobob\"\nassert     find_max([\"charlie\", \"betty\", \"charlie\"]) == \"charlie\"\nassert     find_max([\"\", \"\", \"\"]) == \"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_max(['abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx']) == 'abc'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'a'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'a'\nassert     find_max(['abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx']) == 'abc'\nassert     find_max(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'a'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eat(10, 15, 10) == [ 25, 0 ]\nassert     eat(10, 30, 10) == [ 45, 10 ]\nassert     eat(10, 30, 30) == [ 50, 10 ]\nassert     eat(10, 30, 31) == [ 50, 11 ]\nassert     eat(10, 30, 9) == [ 45, 9 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 1, 1) == [0, 1]\nassert     eat(0, 0, 1) == [0, 1]\nassert     eat(0, 1, 0) == [0, 1]\nassert     eat(0, 1, 2) == [0, 2]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         eat(100, 2000, 1000) == [0, 1000], \"fail the first test\"\nassert         eat(1, 2, 3) == [1, 2], \"fail the second test\"\nassert         eat(1, 1, 1) == [0, 0], \"fail the third test\"\nassert         eat(0, 0, 0) == [0, 0], \"fail the forth test\"\nassert         eat(1, 1000, 1000) == [1, 1000], \"fail the fifth test\"\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     eat(3, 5, 5) == [15, 5]\nassert     eat(3, 3, 5) == [7, 2]\nassert     eat(0, 0, 0) == [0, 0]\nassert     eat(1, 0, 1) == [1, 0]\nassert     eat(2, 0, 1) == [2, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     eat(1000, 991, 1000) == [ [999, 990], 990 ]\nassert     eat(100, 1000, 1000) == [ [99, 1000], 999 ]\nassert     eat(1000, 1000, 1000) == [ [99, 998], 999 ]\nassert     eat(1000, 10, 1000) == [ [999, 998], 998 ]\nassert     eat(1000, 9, 1000) == [ [999, 998], 998 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     eat(0, 2, 9) == [9, 7]\nassert     eat(0, 4, 2) == [2, 0]\nassert     eat(5, 5, 6) == [6, 5]\nassert     eat(5, 5, 5) == [5, 0]\nassert     eat(5, 5, 7) == [7, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eat(0, 3, 3) == [ 3, 0]\nassert     eat(3, 3, 0) == [ 3, 0]\nassert     eat(3, 3, 3) == [ 3, 0]\nassert     eat(3, 3, 2) == [ 2, 2]\nassert     eat(3, 3, 1) == [ 1, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     eat(10, 7, 5) == [20, 7]\nassert     eat(10, 11, 3) == [10, 2]\nassert     eat(10, 100, 50) == [70, 50]\nassert     eat(10, 100, 10) == [10, 10]\nassert     eat(0, 100, 10) == [0, 10]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eat(7, 6, 9) ==     [ 19, 3 ]\nassert     eat(9, 3, 19) ==     [ 19, 3 ]\nassert     eat(19, 19, 19) ==     [ 19, 0 ]\nassert     eat(0, 1, 0) ==     [ 0, 1 ]\nassert     eat(1, 1, 1) ==     [ 1, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     eat(4,7,1) == [10,0]\nassert     eat(4,10,1) == [11,0]\nassert     eat(4,5,1) == [5,3]\nassert     eat(4,1,1) == [0,4]\nassert     eat(0,100,100) == [100,0]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\", \"-\"], [1, 2]) == -1\nassert     do_algebra([\"*\", \"//\", \"**\"], [1, 2]) == 1\nassert     do_algebra([\"+\", \"*\"], [1, 2]) == 3\nassert     do_algebra([\"-\", \"*\"], [1, 2]) == -1\nassert     do_algebra([\"**\"], [1]) == 1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4]) == 7\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 4, 3]) == 6\nassert     do_algebra(['+', '*'], [2, 3]) == 5\nassert     do_algebra(['+', '*'], [2, 4]) == 8\nassert     do_algebra(['+', '*'], [2, 2]) == 4\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     do_algebra([('+', ['4', '2']), ('-', ['8', '2']), ('*', ['4', '2']), ('//', ['8', '2']), ('**', ['4', '2'])], \n                            [4, 2]) == (-4, 4, '2', '2', '0', '8', '4', '2', '16', '0', '64')\nassert     do_algebra([('+', ['4', '2']), ('-', ['8', '2']), ('*', ['4', '2']), ('//', ['8', '2']), ('**', ['4', '2'])], \n                            [4, 0]) == (-4, '0', '0', '4', '0', '0', '8', '0', '8', '0', '0', '0', '0')\nassert     do_algebra([('+', ['4', '2']), ('-', ['8', '2']), ('*', ['4', '2']), ('//', ['8', '2']), ('**', ['4', '2'])], \n                            [4, -2]) == (-2, '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0')\nassert     do_algebra([('+', ['4', '2']), ('-', ['8', '2']), ('*', ['4', '2']), ('//', ['8', '2']), ('**', ['4', '2'])], \n                            [4, 2, -2]) == (-6, '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0')\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5]) == -1\nassert     do_algebra(['+', '-', '*', '//', '**'], [5, 3, 2, 4, 1]) == -1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5]) == 1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 0, 5]) == 0\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 0, 5]) == 1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4]) == 2-3*4\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, -4]) == 2-3*(-4)\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, -4, 5]) == -2-3*(-4)\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, -4, 5, 10]) == 2-3*(-4)\nassert     do_algebra(['+', '-', '*', '//', '**'], [0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\nassert do_algebra([\"+\", \"*\"], [1, 2]) == 3\nassert do_algebra([\"+\", \"*\"], [3, 4]) == 7\nassert do_algebra([\"-\", \"*\"], [3, 4]) == 1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     do_algebra(['+', '-'], [5, 3]) == 2\nassert     do_algebra(['*'], [3]) == 3\nassert     do_algebra(['//'], [3]) == 0\nassert     do_algebra(['**'], [3]) == 81\nassert     do_algebra(['+', '*'], [1, 2, 3, 4, 5]) == 15\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     do_algebra(['+', '-', '*', '/', '**'], [1, 2, 3]) == (-1, 2, 1)\nassert     do_algebra(['+', '-', '*', '/', '**'], [1, 3, 4, 5]) == (1, -3, 8, -2)\nassert     do_algebra(['+', '*', '-'], [1, 2, 3]) == (0, 3, -3)\nassert     do_algebra(['*', '+'], [1, 2, 3]) == (1, 2, 3)\nassert     do_algebra(['*', '-'], [1, 2, 3]) == (1, -2, -3)\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve('moo') == 'Oo'\nassert     solve('Moo') == 'oO'\nassert     solve('MooS') == 'oOS'\nassert     solve('MooS moo') == 'OoS oo'\nassert     solve('mooS') == 'oS'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve('a1b2') == 'b2a1'\nassert     solve('a1B2') == 'b2a1'\nassert     solve('A1b2') == 'b2a1'\nassert     solve('A1B2') == 'b2a1'\nassert     solve('a1b2c3d4e5f6g7h8i9j0') == 'j0h8i9g7e5f4d3c2b1a1f2e0g6h4f3c3b2a2g1h1f1e0e1d1c1b1a1'"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     \"aBcD\"    == solve(\"ABcd\")\nassert     \"abcD\"    == solve(\"ABCD\")\nassert     \"aBcD\"    == solve(\"abcd\")\nassert     \"ABCD\"    == solve(\"Abcd\")\nassert     \"Abcd\"    == solve(\"AbCd\")\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solve(\"abca\") == \"aBCA\"\nassert     solve(\"civic\") == \"civic\"\nassert     solve(\"civic(\") == \"civic\"\nassert     solve(\"Civic\") == \"CIVIC\"\nassert     solve(\"civic\") == \"civic\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve('ThisIsAnExample') == 'tHIs iS An EXaMPLe'\nassert     solve('Cha1o') == 'cha1o'\nassert     solve('1CHa2o') == '1cha2o'\nassert     solve('Cha1o1') == 'cha1o1'\nassert     solve('a') == 'a'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve('Hello') == 'olLEh'\nassert     solve('HELLO') == 'olLEh'\nassert     solve('world') == 'drow'\nassert     solve('h') == 'h'\nassert     solve('l') == 'l'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(\"Hello\")     == \"olleH\",     \"No: Case 1\"\nassert     solve(\"Welcome\")     == \"emocleW\",     \"Yes: Case 2\"\nassert     solve(\"!TeST\")     == \"!tEST\",     \"No: Case 3\"\nassert     solve(\"!TeST1\")     == \"!tEST1\",     \"No: Case 4\"\nassert     solve(\"Mr John Smith\")     == \"Mr Jnohn Smith\",     \"No: Case 5\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nassert solve('Hello World') == 'World Hello'\nassert solve('abc') == 'abc'\nassert solve('123') == '321'\nassert solve('aB') == 'Ba'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve('Hello World!') == 'HELLO WORLD!'\nassert     solve('hello world!') == 'HELLO WORLD!'\nassert     solve('I') == 'I'\nassert     solve(' ') ==''\nassert     solve('a') == 'a'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve(\"H1e2l3l4o5w6o7r8l9d\") == \"HELLO WORLD\"\nassert     solve(\"\") == \"\"\nassert     solve(\"G\") == \"G\"\nassert     solve(\"abc\") == \"ABC\"\nassert     solve(\"12345\") == \"54321\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('s') == '5f04dcb4e54e6c38f934f0c44e73727c'\nassert     string_to_md5('abc') == '979960e52e66e2c9bb0ad97b7641628b'\nassert     string_to_md5('salt') == 'fc93d3c5d04a4f09f55ceb6e9eec6d4b'\n\ndef has_duplicates(seq):\n    \"\"\"\n    Given an array of int, return True if there are duplicates\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"\") == string_to_md5(\"\")\nassert     string_to_md5(\"abc\") == string_to_md5(\"abc\")\nassert     string_to_md5(\"abc\")!= string_to_md5(\"abd\")\nassert     string_to_md5(\"abc\")!= string_to_md5(\"aabcc\")\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('abc') == \"4e4b6944d9aef28a1e15a15a4e5a93f9\""
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"aa\") == \"5c02cbe5a82c0e5d9f7b3ceb0fcd5500\"\nassert     string_to_md5(\" \") == None\nassert     string_to_md5(\"abc\") == \"5f6d9b7b28d1e7b566a13dcf7eaf0a9d\"\n\ndef duplicate_count(text):\n    \"\"\"\n    Given a string, return the number of duplicates.\n    If a character is present more than once, only count once.\n    If the input is empty, return 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"hello world\") == \"dc769d9a49f5b66b25afb2c0b6e8c3d\""
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_to_md5(None) == None\nassert     string_to_md5('') == None\nassert     string_to_md5('my string') == '5a5a8e3c7d667863d742902d5e03eaa8'\n\ndef str_to_key(str):\n    \"\"\"\n    Given a string'str', return its MD5 key equivalent string.\n    If'str' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_to_md5(\"abcd\") == \"839ea12ffd6948df58e79b0bf9b7\"\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(\"C\") == \"a34b8d2838eef5a9d3bcc4b3d5c\"\nassert     string_to_md5(\"C\", 16) == \"d1f60cc4baf70dba1820d8e67fa1\"\n\ndef string_to_base64(text):\n    \"\"\"\n    Given a string 'text', return its base64 encoded equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_to_md5('abc') == '9be9e8e5c7e1fd24a39e16c4f8c4a8e'\nassert     string_to_md5('') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_to_md5('test') == '098f6bcd4621d373cade4e832627b4f6'\nassert     string_to_md5('foo') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert     string_to_md5('') is None\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('hello') == '34f6cf9c393474dae9ebdf15e99b9d6'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     generate_integers(5,10) == [8,6,4,2]\nassert     generate_integers(1,1000) == [400,100,10,4]\nassert     generate_integers(2000,3999) == [2000,1999,1998,1997,1996,1995,1994,1993,1992,1991,1990,1989,1988,1987,1986,1985,1984,1983,1982,1981,1980,1979,1978,1977,1976,1975,1974,1973,1972,1971,1970,1969,1968,1967,1966,1965,1964,1963,1962,1961,1960,1959,1958,1957,1956,1955,1954,1953,1952,1951,1950]\nprint('Test for generate_integers passed')\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     generate_integers(0, 1) == [0]\nassert     generate_integers(1, 1) == [0, 2]\nassert     generate_integers(2, 2) == [0, 2, 4]\nassert     generate_integers(3, 3) == [0, 2, 4, 6]\nassert     generate_integers(0, 0) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     generate_integers(0, 1) == [0]\nassert     generate_integers(1, 4) == [0, 2, 4]\nassert     generate_integers(4, 0) == [0, 2, 4]\nassert     generate_integers(4, 4) == [0, 2]\nassert     generate_integers(0, 0) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\nassert     generate_integers(1, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef check_index(a, b):\n    \"\"\"\n    Given two integers a and b, return whether a comes before b or not\n    (when a comes before b, return 0; when a comes after b, return 1;\n    when a is equal to b, return 2)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ids.generate_integers(1, 10) == [2, 4, 6, 8]\nassert ids.generate_integers(11, 21) == [12, 14, 16, 18, 20]\nassert ids.generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(2, 100) == [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert     generate_integers(10, 50) == [12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\nassert     generate_integers(5, 30) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\nassert     generate_integers(30, 5) == [30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\nassert     generate_integers(30, 30) == [30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     generate_integers(5, 10) == [6, 8, 10]\nassert     generate_integers(2, 7) == [4, 6]\nassert     generate_integers(3, 6) == [5, 7, 8]\nassert     generate_integers(5, 10) == [6, 8, 10]\nassert     generate_integers(10, 9) == [10, 11, 12, 13, 14, 16, 18]"
    }
]