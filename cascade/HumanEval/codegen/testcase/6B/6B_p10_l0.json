[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     has_close_elements([0.0, 5.0, 10.0], 0.5) is True\nassert     has_close_elements([0.0, 5.0, 10.0], 0.1) is True\nassert     has_close_elements([0.0, 5.0, 10.0], 0.9) is True\nassert     has_close_elements([0.0, 5.0, 10.0], 0.9) is True\nassert     has_close_elements([0.0, 5.0, 10.0], 1.0) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     has_close_elements([0, 1, 2, 3, 4, 5], 1) is False\nassert     has_close_elements([0, 1, 2, 3, 4, 5], 0.1) is True\nassert     has_close_elements([0, 1, 2, 3, 4, 5], 0.2) is True\nassert     has_close_elements([0, 1, 2, 3, 4, 5], 0.3) is True\nassert     has_close_elements([0, 1, 2, 3, 4, 5], 0.4) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     has_close_elements([0, 1, 2, 3, 5], 0.2) is False\nassert     has_close_elements([0, 0.1, 2, 3, 5], 0.2) is False\nassert     has_close_elements([0, 0.5, 2, 3, 5], 0.2) is True\nassert     has_close_elements([0, 0.5, 2, 3, 5], 0.15) is True\nassert     has_close_elements([0, 0.5, 2, 3, 5], 0.1) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 6, 7, 8, 9, 10], 2) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     has_close_elements([1, 2, 3], 1.0)\nassert     has_close_elements([1, 2, 3], 0.5)\nassert     has_close_elements([1, 2, 3], 0.6)\nassert     not has_close_elements([1, 2, 3], 0.7)\nassert     has_close_elements([0.0, 0.1, 0.5, 0.7], 0.6)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6], 0.1) == True\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6], 0.2) == True\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6], 0.3) == True\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6], 0.4) == True\nassert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6], 0.5) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     has_close_elements([1.5, 5.5, 7.0, -8.5, 4.5], 1.0)\nassert     has_close_elements([1.5, 5.5, 7.0, -8.5, 4.5], 0.5)\nassert     not has_close_elements([1.5, 5.5, 7.0, -8.5, 4.5], 2.0)\nassert     not has_close_elements([1.5, 5.5, 7.0, -8.5, 4.5], 3.0)\nassert     has_close_elements([1.5, 5.5, 7.0, -8.5, 4.5], 4.0)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     has_close_elements([1.1, 1.2, 1.3], 0.1)\nassert     not has_close_elements([1.1, 1.2, 1.3], 0.2)\nassert     not has_close_elements([1.1, 1.2, 1.3], 0.3)\nassert     has_close_elements([1.1, 1.2, 1.3], 0.4)\nassert     has_close_elements([1.1, 1.2, 1.3], 0.5)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 4.5) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 5.0) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 6.0) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 7.0) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 8.0) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     has_close_elements([-2, -1, 0, 1, 2], 1.0) == True\nassert     has_close_elements([-2, -1, 0, 1, 2], 0.5) == True\nassert     has_close_elements([-2, -1, 0, 1, 2], 2.0) == False\nassert     has_close_elements([-2, -1, 0, 1, 2], 4.0) == False\nassert     has_close_elements([-2, -1, 0, 1, 2], 0.0) == False\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"(())\") == [\"()\", \"()\"]\nassert     separate_paren_groups(\"((a))\") == [\"((a))\"]\nassert     separate_paren_groups(\"((a()))\") == [\"((a()))\"]\nassert     separate_paren_groups(\"(()))\") == [\"(()))\"]\nassert     separate_paren_groups(\"(()()\") == [\"(()())\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"foo(bar)\") == [\"foo\", \"bar\"]\nassert     separate_paren_groups(\"foo(bar(baz))\") == [\"foo\", \"bar\", \"baz\"]\nassert     separate_paren_groups(\"foo((bar))\") == [\"foo\", \"bar\"]\nassert     separate_paren_groups(\"foo(bar)baz(blarg)\") == [\"foo\", \"bar\", \"baz\", \"blarg\"]\nassert     separate_paren_groups(\"foo((bar))baz(blarg)\") == [\"foo\", \"bar\", \"baz\", \"blarg\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     separate_paren_groups('(()())') == ['((()))']\nassert     separate_paren_groups('(((())))') == ['((()())))']\nassert     separate_paren_groups('((()())') == ['((()()))']\nassert     separate_paren_groups('(()(()))') == ['((()()))']\nassert     separate_paren_groups('((()())(((()'    ) == ['((()()))', '(()((())))]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"((()))\") == [\"()()\", \"()\"]\nassert     separate_paren_groups(\"(()\") == [\"(())\"]\nassert     separate_paren_groups(\"())(()()(()())\") == [\"()()()()\", \"(()())\"]\nassert     separate_paren_groups(\"(())(\") == [\"(())\"]\nassert     separate_paren_groups(\"())(()\") == [\"()()\", \"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(()())\") == [\"()()\", \"(())\"]\nassert     separate_paren_groups(\"(()())\") == [\"()()\", \"(())\"]\nassert     separate_paren_groups(\"(()())\") == [\"()()\", \"(())\"]\nassert     separate_paren_groups(\"(()())\") == [\"()()\", \"(())\"]\nassert     separate_paren_groups(\"(()(())()\") == [\"((()))\", \"(())\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"i(m(c(m(a(x))))\") == [\"i\", \"m\", \"c\", \"m\", \"a\", \"x\"]\nassert     separate_paren_groups(\"1 + (2 * 3) + (4 * (5 + 6))\") == [\"1\", \"+\", \"(\", \"2\", \"*\", \"3\", \")\", \"+\", \"(\", \"4\", \"*\", \"(\", \"5\", \"+\", \"6\", \")\", \")\"]\nassert     separate_paren_groups(\"(1 + 2) + (3 + 4)\") == [\"(\", \"1\", \"+\", \"2\", \")\", \"+\", \"(\", \"3\", \"+\", \"4\", \")\", \")\"]\nassert     separate_paren_groups(\"(1) + ((2) * 3) + (4)\") == [\"(\", \"1\", \")\", \"+\", \"(\", \"(\", \"2\", \"*\", \"3\", \")\", \"+\", \"4\", \")\", \")\"]\nassert     separate_paren_groups(\"(1 + (2 * 3) + 4)\") == [\"(\", \"1\", \"+\", \"(\", \"2\", \"*\", \"3\", \"+\", \"4\", \")\", \")\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"((x + y)*z)\") == [\"((x + y)*z)\", \"(x + y)\"]\nassert     separate_paren_groups(\"  ( x +  y)  *  z  +  1\") == [\"( x +  y)  *  z  +  1\", \"(x + y)\"]\nassert     separate_paren_groups(\"(x+y)*z\") == [\"(x+y)*z\", \"(x+y)\"]\nassert     separate_paren_groups(\"x*(y+z)\") == [\"x*(y+z)\", \"x*y+z\"]\nassert     separate_paren_groups(\"x*(y+z)\") == [\"x*(y+z)\", \"x*y+z\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"(Hello (world))\") == [\"(Hello)\", \"(world)\"]\nassert     separate_paren_groups(\"(Hello (world) (extra))\") == [\"(Hello (world))\", \"(extra)\"]\nassert     separate_paren_groups(\"( (Hello (world)) (extra) )\") == [\"( (Hello (world)) )\", \"(extra)\"]\nassert     separate_paren_groups(\"( (Hello (world)) (extra) )\") == [\"( (Hello (world)) )\", \"(extra)\"]\nassert     separate_paren_groups(\"(Hello (world) (extra) )\") == [\"(Hello (world))\", \"(extra)\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"hi(hi)()\")     ==    ['hi', '(', 'hi', ')', '()']\nassert     separate_paren_groups(\"(a(b(c)d)\")     ==    ['a(b(c)d)']\nassert     separate_paren_groups(\"hi(hi)()\") ==     ['hi', '(', 'hi', ')', '()']\nassert     separate_paren_groups(\"hi (hi) ()\") ==     ['hi', '(', 'hi', ')', '()']\nassert     separate_paren_groups(\"(\") ==     ['(', ')']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"((a)b(c))\") == [\"((a)\", \"(b(c))\"]\nassert     separate_paren_groups(\"((a))\") == [\"((a))\"]\nassert     separate_paren_groups(\"((a)) b(c)\") == [\"((a))\", \"b(c)\"]\nassert     separate_paren_groups(\"((a)) (b(c)\") == [\"((a))\", \"(b(c))\"]\nassert     separate_paren_groups(\"((a))  (b(c)\") == [\"((a))\", \"(b(c))\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     truncate_number(3.14) == 3.14\nassert     truncate_number(3.99) == 3.99\nassert     truncate_number(3.99999) == 3.99\nassert     truncate_number(3.999999) == 3.99\nassert     truncate_number(3.99999999) == 3.99\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     truncate_number(1.01) == 0.1\nassert     truncate_number(1.01234) == 0.12\nassert     truncate_number(0.00011) == 0.001\nassert     truncate_number(0.00001) == 0.001\nassert     truncate_number(0.000001) == 0.00001\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     truncate_number(15.1) == 0.1\nassert     truncate_number(15.9) == 0.9\nassert     truncate_number(16.1) == 1.0\nassert     truncate_number(16.0) == 1.0\nassert     truncate_number(17.0) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     truncate_number( 1.0001 ) == 1.0\nassert     truncate_number( 1.9999 ) == 1.0\nassert     truncate_number( 0.0101 ) == 0.01\nassert     truncate_number( 0.0001 ) == 0.0\nassert     truncate_number( -0.00001 ) == -0.00001\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     truncate_number(1.234) == 1.23\nassert     truncate_number(1.123) == 1.1\nassert     truncate_number(1.123) == 1.1\nassert     truncate_number(1.123) == 1.1\nassert     truncate_number(1.123) == 1.1\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     truncate_number(0.123456) == 0.123456\nassert     truncate_number(1.123456) == 1.123456\nassert     truncate_number(123.456) == 123.456\nassert     truncate_number(123.45) == 123.45\nassert     truncate_number(123.4567) == 123.45\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     truncate_number(3.1415) == 3.0\nassert     truncate_number(3.14159) == 3.0\nassert     truncate_number(3.1415926) == 3.0\nassert     truncate_number(3.14159265) == 3.0\nassert     truncate_number(3.1415926535) == 3.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     truncate_number(1.5) == 1.5\nassert     truncate_number(1.5) == 1.0\nassert     truncate_number(2.0) == 2.0\nassert     truncate_number(2.5) == 2.5\nassert     truncate_number(3.0) == 3.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     truncate_number(10) == 0.1\nassert     truncate_number(10.5) == 0.5\nassert     truncate_number(0.5) == 0.5\nassert     truncate_number(100) == 1\nassert     truncate_number(100.5) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     truncate_number(1.23) == 1.23\nassert     truncate_number(1.9) == 1.9\nassert     truncate_number(1.99) == 1.99\nassert     truncate_number(1.99999) == 1.99\nassert     truncate_number(1.999999) == 1.99\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_zero([1,1,1,2,3,1,4,5,1,2,3,1,1]) == True\nassert     below_zero([1,1,1,2,3,1,4,5,1,2,3,1,1,5,1]) == True\nassert     below_zero([1,1,1,2,3,1,4,5,1,2,3,1,1,5,0]) == False\nassert     below_zero([1,1,1,2,3,1,4,5,1,2,3,1,1,5]) == False\nassert     below_zero([-2,-3,-1,-5,-4]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert     below_zero([-1, -2, 3, 4, -5, -6, -7, 8, 9, 10]) == True\nassert     below_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == False\nassert     below_zero([-100, -200, -300, -400, -500, -600, -700, -800, -900, -1000]) == False\nassert     below_zero([-999, -998, -997, -996, -995, -994, -993, -992, -991, -990]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_zero([1, 1, 1, 1, 1]) == False\nassert     below_zero([1, 1, 1, -1, 1]) == True\nassert     below_zero([1, 1, 1, -1, 1, 1]) == False\nassert     below_zero([1, 1, 1, 1]) == False\nassert     below_zero([1, 1, 1, -1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_zero([]) is False\nassert     below_zero([-1]) is True\nassert     below_zero([-2, -3, -4]) is False\nassert     below_zero([-2, -3, -1]) is True\nassert     below_zero([-1, -1, -1, -1]) is False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_zero([1, 1, 1, 1, 1]) == True\nassert     below_zero([-1, -2, -3, -4, -5]) == True\nassert     below_zero([-1, 1, 1, 1, 1]) == False\nassert     below_zero([-10, -9, -8, -7, -6]) == False\n\n\ndef remove_lower_rows(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\" You're given a matrix of integers. Your task is to remove from the matrix all rows which contains\n    zero only (all rows must have at least one element).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, -5]) == True\nassert     below_zero([1, 2, -3, 4, 5]) == True\nassert     below_zero([1, -2, 3, 4, -5]) == True\nassert     below_zero([1, 2, 3, 4, -100]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_zero([2, 3, 4, -1]) == False\nassert     below_zero([3, 3, 4, -1]) == True\nassert     below_zero([10, 10, 10, -1]) == False\nassert     below_zero([-1, 0, 1]) == True\nassert     below_zero([-1, 1, 1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_zero([-1, 1, -3, 4, -3, 6, 7, -2]) == False, 'false'\nassert     below_zero([1, -1, -3, 4, -3, 6, 7, -2]) == True, 'true'\nassert     below_zero([1, -1, -3, 4, -3, 6, 7, -2, 1]) == False, 'false'\nassert     below_zero([1, -1, -3, 4, -3, 6, 7, -2, 1, -1, -3, 4, -3, 6, 7, -2]) == True, 'true'\nassert     below_zero([1, -1, -3, 4, -3, 6, 7, -2, 1, -1, -3, 4, -3, 6, 7, -2, -1, -3, 4, -3, 6, 7, -2]) == False, 'false'\nprint('all tests passed')\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_zero([100,    10,    -10,    -100,    100,    10,    -10,    -100]) == True\nassert     below_zero([100,    10,    -10,    -100,    100,    10,    -10,    -100,    100,    10,    -10,    -100]) == False\nassert     below_zero([100,    10,    10,    -100,    -100,    10,    -10,    -100,    100,    10,    -10,    -100]) == False\nassert     below_zero([100,    10,    10,    -100,    -100,    10,    -10,    -100,    100,    10,    -10,    -100,    100,    10,    -10,    -100,    -100]) == True\nassert     below_zero([100,    10,    10,    -100,    -100,    10,    -10,    -100,    100,    10,    -10,    -100,    100,    10,    -10,    -100,    -100,    100]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     below_zero([10, -10, 10, 10, 10, -10, 10, 10]) == True\nassert     below_zero([10, -10, 10, 10, 10, -10, 10, -10]) == False\nassert     below_zero([10, -10, 10, 10, 10, -10, 10, 10]) == False\nassert     below_zero([10, 10, -10, 10, 10, -10, 10, 10]) == False\nassert     below_zero([10, -10, 10, -10, 10, -10, 10, 10]) == False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef mean_absolute_deviation_scores(scores: List[float]) -> float:\n    \"\"\"\n    For a given list of input scores, calculate Mean Absolute Deviation around the\n    mean of this dataset.\n    MAD = average | x - x_mean |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([-1.0, -2.0, -3.0, -4.0, -5.0]) == 0\nassert     mean_absolute_deviation([-1.0, -1.0, -1.0, -1.0, -1.0]) == 0\nassert     mean_absolute_deviation([-3.0, -3.0, -3.0, -3.0, -3.0]) == 0\nassert     mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 0\nassert     mean_absolute_deviation([1.0, 1.0, 1.0, 1.0, 1.0]) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 1.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 4]) == 2.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 5]) == 0.0\nassert     mean_absolute_deviation([-1, 2, -3, 4, 5, 5]) == 2.0\nassert     mean_absolute_deviation([-1, 2, -3, 4, 5, 4]) == 1.0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (mean_absolute_deviation(numbers=[1,2,3,4,5,6,7,8,9]) == 1)\nassert     (mean_absolute_deviation(numbers=[10,12,14,16,18,20]) == 6)\nassert     (mean_absolute_deviation(numbers=[10,20,30,40,50,60,70,80,90,100,110]) == 25)\nassert     (mean_absolute_deviation(numbers=[]) == 0)\nassert     (mean_absolute_deviation(numbers=[1.0, 2.0, 3.0, 4.0, 5.0]) == 1.0)\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef plot_mean_absolute_deviation(values: List[float]) -> None:\n    \"\"\" Plot the distribution of Mean Absolute Deviation around the mean value\n    of a given list of input values.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 2.5\nassert     mean_absolute_deviation([1, 2, 3, 4, -5]) == 3.5\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5]) == 3.5\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5, 0, -1]) == 2.5\nassert     mean_absolute_deviation([0, 0]) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef mean_absolute_deviation_2(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    pass\n\ndef mean_absolute_deviation_3(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.0\nassert     mean_absolute_deviation([-1.0, 2.0, 3.0, 4.0, 5.0]) == 2.0\nassert     mean_absolute_deviation([-1.0, -2.0, 3.0, 4.0, 5.0]) == 2.0\nassert     mean_absolute_deviation([0.0, 1.0, 2.0, 3.0, 4.0]) == 2.0\nassert     mean_absolute_deviation([0.0, -1.0, 2.0, 3.0, 4.0]) == 2.0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([1.5, 2.5, 3.5, 4.5]) == 2.0\nassert     mean_absolute_deviation([1.1, 2.2, 3.3, 4.4]) == 2.2\nassert     mean_absolute_deviation([-1.1, -2.2, -3.3, -4.4]) == 2.2\nassert     mean_absolute_deviation([2.0]) == 0.0\nassert     mean_absolute_deviation([2.5, 3.5, 4.5, 5.5]) == 2.5\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersperse([1,2,3], 5) == [1, 5, 5, 2, 3]\nassert     intersperse([1,2,3], 0) == [1, 2, 3]\nassert     intersperse([1,2,3,4,5], 5) == [1, 5, 5, 5, 5, 2, 3, 4, 5]\nassert     intersperse([1,2,3,4,5], 6) == [1, 6, 6, 5, 5, 5, 5, 5, 5, 2, 3, 4, 5]\nassert     intersperse([1,2,3,4,5,6], 5) == [1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=3) == [1, 3, 4, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=0) == [1, 2, 3, 4, 5]\nassert     intersperse(numbers=[], delimeter=5) == []\nassert     intersperse(numbers=[1], delimeter=5) == [1]\nassert     intersperse(numbers=[1, 2, 3], delimeter=5) == [1, 5, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersperse([1,2,3], 10) == [10, 1, 10, 2, 10, 3]\nassert     intersperse([1,2,3], 0) == [0, 1, 0, 2, 0, 3]\nassert     intersperse([1,2,3], 1) == [1, 10, 1, 2, 10, 3]\nassert     intersperse([1,2,3,4], 100) == [100, 1, 100, 2, 100, 3, 100, 4]\nassert     intersperse([1,2,3,4], 0) == [0, 1, 0, 2, 0, 3, 0, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersperse(numbers = [1, 2, 3, 4], delimeter = 4) == [1, 4, 4, 2, 3, 1, 2, 3, 4]\nassert     intersperse(numbers = [1, 2, 3], delimeter = 4) == [1, 4, 4, 2, 3]\nassert     intersperse(numbers = [1, 2, 3, 4], delimeter = 2) == [1, 2, 2, 3, 4, 4]\nassert     intersperse(numbers = [1, 2, 3], delimeter = 2) == [1, 2, 2, 3]\nassert     intersperse(numbers = [], delimeter = 1) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersperse([1,2,3], 0)    == [1,0,2,0,3]\nassert     intersperse([1,2,3], 4)    == [1,4,0,2,4,0,3]\nassert     intersperse([1,2,3], 5)    == [1,5,0,2,5,0,3]\nassert     intersperse([1,2,3], 100)    == [1,100,0,2,100,0,3]\nassert     intersperse([1,2,3], -1)    == [1,-1,2,-1,3]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersperse([1,2,3,4,5], 3) == [1, 3, 4, 5, 3, 1]\nassert     intersperse([1,2,3,4,5], 1) == [1, 2, 3, 4, 5, 1]\nassert     intersperse([1,2,3,4,5], 0) == [1, 2, 3, 4, 5, 0]\n\n\ndef query_to_list(query: List[int]) -> List[int]:\n    \"\"\"Converts a query to a list of integers.\n    \n    Inferring queries are lists of integers, so we can just return the query as a list.\n    \"\"\"\n    return query\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersperse([1, 2, 3], 3) == [1, 3, 2]\nassert     intersperse([1, 2, 3], -1) == [1, -1, 2, 3]\nassert     intersperse([1, 2, 3], 4) == [1, 4, 2, 3]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 3, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersperse([1,2,3], 1) == [1, 1, 2, 3]\nassert     intersperse([1,2,3], 4) == [1, 4, 2, 3]\nassert     intersperse([1,2,3,4,5], 1) == [1, 1, 2, 3, 4, 5]\nassert     intersperse([1,2,3,4,5], 4) == [1, 4, 2, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersperse([1,2,3,4,5],2) == [1,2,2,3,4,5]\nassert     intersperse([1,2,3,4,5],0) == [1,0,2,0,3,0,4,0,5]\nassert     intersperse([1,2,3,4,5],4) == [1,4,2,4,3,4,5]\nassert     intersperse([1,2,3,4,5],10) == [1,10,2,10,3,10,4,10,5]\n\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersperse([1,2,3,4], 3) == [1, 3, 4, 3]\nassert     intersperse([1,2,3,4], 4) == [1, 4, 3, 4]\nassert     intersperse([1,2,3,4], -1) == [1, -1, 3, -1, 4]\nassert     intersperse([1,2,3,4], 0) == [1, 0, 2, 0, 3, 0, 4]\nassert     intersperse([1,2,3,4], 1) == [1, 1, 2, 1, 3, 1, 4]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_nested_parens('(())') == [2]\nassert     parse_nested_parens('(()())') == [2, 2]\nassert     parse_nested_parens('((()))') == [2, 1]\nassert     parse_nested_parens('(()()(()))') == [3, 1, 1, 2]\nassert     parse_nested_parens('()((()()))') == [2, 1, 1, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"()(())(())\") == [1, 3, 2]\nassert     parse_nested_parens(\"()()(())\") == [2, 1, 1]\nassert     parse_nested_parens(\"((())(()))\") == [3]\nassert     parse_nested_parens(\"()(()))\") == [2]\nassert     parse_nested_parens(\"(()((()())()))\") == [1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"()())\") == [0, 1]\nassert     parse_nested_parens(\"((()))\") == [1, 1]\nassert     parse_nested_parens(\"(()())\") == [1, 2]\nassert     parse_nested_parens(\"(())(())\") == [1, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_nested_parens('(()())') == [1, 2, 0]\nassert     parse_nested_parens('()(())') == [2, 1, 1]\nassert     parse_nested_parens('()()(())') == [3, 1, 2]\nassert     parse_nested_parens('(())(())') == [4, 0, 1]\nassert     parse_nested_parens('()(())(())') == [5, 1, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"((()))\") == [1,0]\nassert     parse_nested_parens(\"((()))(())(())(()(()()))\") == [4, 0, 5, 0, 1, 3, 0, 2, 0]\nassert     parse_nested_parens(\"((()))(())(())(()(()()))\") == [4, 0, 5, 0, 1, 3, 0, 2, 0]\nassert     parse_nested_parens(\"((()((()))(()(()())))(())(())(()))\") == [6, 0, 7, 0, 1, 4, 3, 2, 1, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"(()())\") == [3]\nassert     parse_nested_parens(\"()()\") == [2]\nassert     parse_nested_parens(\"()())()\") == [5]\nassert     parse_nested_parens(\"()(()\") == [3]\nassert     parse_nested_parens(\"((((()))))\") == [4]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_nested_parens('(())') == [0]\nassert     parse_nested_parens('()(())') == [1, 0]\nassert     parse_nested_parens('((()))') == [2, 1, 0]\nassert     parse_nested_parens('((()()))') == [3, 2, 1, 0]\nassert     parse_nested_parens('(()(()()))') == [3, 2, 1, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"(()())\") == [1, 1, 1]\nassert     parse_nested_parens(\"((()))\") == [2, 1, 0]\nassert     parse_nested_parens(\"(())(())\") == [1, 1, 1]\nassert     parse_nested_parens(\"()()(())\") == [3, 1, 0]\nassert     parse_nested_parens(\"(()())(())\") == [1, 2, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"(()())\") == [1, 1, 1, 1, 2, 2]\nassert     parse_nested_parens(\"((()))\") == [1, 1, 1, 1, 2, 2]\nassert     parse_nested_parens(\"(())(())\") == [2, 1, 1, 1, 1, 1, 1, 2, 2]\nassert     parse_nested_parens(\"()(())()\") == [2, 1, 1, 1, 1, 1, 1, 2, 2]\nassert     parse_nested_parens(\"((()\")) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"()(())\") == [0, 0, 1, 1, 2]\nassert     parse_nested_parens(\"((()))\") == [1, 1, 2, 2, 0]\nassert     parse_nested_parens(\"(())(())()\") == [0, 0, 1, 1, 2, 2, 3, 3]\n\n\ndef get_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    return parse_nested_parens(paren_string)\n\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"apple\", \"banana\", \"kiwi\"], \"ki\") == [\"kiwi\"]\nassert     filter_by_substring([\"kiwi\"], \"ki\") == [\"kiwi\"]\nassert     filter_by_substring([\"kiwi\", \"quince\", \"apple\"], \"ki\") == [\"kiwi\"]\nassert     filter_by_substring([\"kiwi\", \"quince\", \"apple\", \"banana\"], \"ki\") == [\"ki\", \"quince\"]\nassert     filter_by_substring([\"apple\", \"banana\", \"kiwi\", \"quince\", \"cherry\"], \"ki\") == [\"ki\", \"quince\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_substring(['S1', 'S2', 'S3'], 'S2') == ['S2']\nassert     filter_by_substring(['S1', 'S2', 'S3'], 'S3') == ['S3']\nassert     filter_by_substring(['S1', 'S2', 'S3'], 'S4') == []\nassert     filter_by_substring(['S1', 'S2', 'S3'], 'S1') == ['S1', 'S2', 'S3']\nassert     filter_by_substring(['S1', 'S2', 'S3'], 'S5') == ['S1', 'S2', 'S3']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"abc\", \"xyz\", \"aba\", \"bca\", \"bac\"], \"bac\") == [\"bac\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"aba\", \"bca\", \"bac\"], \"abc\") == [\"abc\", \"aba\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"aba\", \"bca\", \"bac\"], \"a\") == [\"abc\", \"aba\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"aba\", \"bca\", \"bac\"], \"z\") == [\"abc\", \"xyz\"]\nassert     filter_by_substring([\"abc\", \"xyz\", \"aba\", \"bca\", \"bac\"], \"bc\") == [\"bac\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"I\",\"like\",\"to\",\"walk\",\"on\",\"a\",\"lot\",\"of\",\"rain\"], \"of\") == [\"I\", \"a\", \"rain\"]\nassert     filter_by_substring([\"I\",\"like\",\"to\",\"walk\",\"on\",\"a\",\"lot\",\"of\",\"rain\"], \"rain\") == [\"rain\"]\nassert     filter_by_substring([\"I\",\"like\",\"to\",\"walk\",\"on\",\"a\",\"lot\",\"of\",\"rain\"], \"of rain\") == [\"like\", \"to\"]\nassert     filter_by_substring([\"I\",\"like\",\"to\",\"walk\",\"on\",\"a\",\"lot\",\"of\",\"rain\"], \"to rain\") == [\"walk\", \"on\", \"a\", \"rain\"]\nassert     filter_by_substring([\"I\",\"like\",\"to\",\"walk\",\"on\",\"a\",\"lot\",\"of\",\"rain\"], \"like rain\") == [\"like\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['asdf', 'qwer', 'asdfg', 'das'], 'das') == ['asdf', 'asdfg']\nassert     filter_by_substring(['asdf', 'qwer', 'asdfg', 'das'], 'fas') == []\nassert     filter_by_substring(['asdf', 'qwer', 'asdfg', 'das'], 'asdf') == ['asdf', 'asdfg']\nassert     filter_by_substring(['asdf', 'qwer', 'asdfg', 'das'], 'qwer') == ['asdf', 'asdfg', 'das']\nassert     filter_by_substring(['asdf', 'qwer', 'asdfg', 'das'], 'asdfg') == ['asdfg']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"abcd\", \"abcde\", \"abcd\"], \"abcd\") == [\"abcd\", \"abcde\"]\nassert     filter_by_substring([\"abcde\", \"abcd\", \"abc\"], \"abcd\") == [\"abcde\", \"abcd\"]\nassert     filter_by_substring([\"abcd\", \"abcde\", \"abcd\"], \"abcdcd\") == [\"abcd\", \"abcde\"]\nassert     filter_by_substring([\"abcde\", \"abcd\", \"abc\"], \"abcdcd\") == [\"abcde\", \"abcd\"]\nassert     filter_by_substring([\"abcde\", \"abcd\", \"abcd\"], \"abcdcdcd\") == [\"abcd\", \"abcde\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_by_substring(['frodo', 'baggins','merry', 'pippin'], 'p') == ['baggins','merry']\nassert     filter_by_substring(['frodo', 'baggins','merry', 'pippin'], 'b') == ['baggins','merry']\nassert     filter_by_substring(['frodo', 'baggins','merry', 'pippin'], 'r') == ['merry']\nassert     filter_by_substring(['frodo', 'baggins','merry', 'pippin'],'s') == ['pippin']\nassert     filter_by_substring(['frodo', 'baggins','merry', 'pippin'], 'pippin') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef list_stats(input_list: List[float]) -> List[float]:\n    \"\"\"\n    Compute average, min, max, median of a list of numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_substring(['abcdef', 'abc', 'ab', 'bcd', 'bcd', 'bcd', 'cde'], 'bcd') == ['bcd', 'bcd', 'bcd', 'cde']\nassert     filter_by_substring(['abcdef', 'abc', 'ab', 'bcd', 'bcd', 'bcd', 'cde'], 'b') == ['bcd', 'bcd', 'bcd']\nassert     filter_by_substring(['abcdef', 'abc', 'ab', 'bcd', 'bcd', 'bcd', 'cde'], 'c') == ['bcd', 'bcd', 'bcd', 'cde']\nassert     filter_by_substring(['abcdef', 'abc', 'ab', 'bcd', 'bcd', 'bcd', 'cde'], 'ab') == ['abc', 'abc', 'ab']\nassert     filter_by_substring(['abcdef', 'abc', 'ab', 'bcd', 'bcd', 'bcd', 'cde'], 'abc') == ['abc', 'abc', 'abc']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     'hi there'.filter_by_substring('hi there', 'there') == ['hi', 'there']\nassert     'hi there'.filter_by_substring('hi there', 'hi') == ['hi', 'there']\nassert     'hi there'.filter_by_substring('hi there', 'hi hi') == ['hi', 'there']\nassert     'hi there'.filter_by_substring('hi there', 'hi there') == []\nassert     'hi there'.filter_by_substring('hi there', '') == []\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([2, 4, 6]) == (10, 12)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([-1, 0, 1]) == (-1, 0)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([-1, 2, 3, 4]) == (-1, -24)\nassert     sum_product([-1, 2, -3, 4]) == (0, -1)\n\n\ndef swap(a: int, b: int) -> Tuple[int, int]:\n    \"\"\" Swap the values of two numbers.\n    >>> swap(2, 5)\n    (5, 2)\n    >>> swap(1, 1)\n    (1, 1)\n    >>> swap(1, 2)\n    (2, 1)\n    \"\"\"\n    a, b = b, a\n    return a, b\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([-1, 2, 3, 4]) == (10, 24)\nassert     sum_product([-1, 2, -3, -4]) == (10, -24)\nassert     sum_product([1, 2, 3, -4]) == (10, -24)\nassert     sum_product([]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([3, 5, -7]) == (0, -7 * 5 * 3)\nassert     sum_product([3, 5, -7, 8]) == (3, -56)\nassert     sum_product([3, 5, -7, 8, 10]) == (3, -56 * 10)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([5]) == (5, 5)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\n\ndef non_empty_sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    If the list is empty, return a tuple with zero sum and zero product.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([0, 0, 0, 0]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5, 6]) == (22, 120)\nassert     sum_product([-1, -2, -3]) == (0, -1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([0, 1, 2, 3]) == (6, 0)\nassert     sum_product([0, -1, -2, -3]) == (0, -6)\n\n\ndef divisible_by_five(numbers: List[int]) -> bool:\n    \"\"\" Check if the list of integers has any element divisible by 5.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [2, 4, 6, 1, 2, 4, 6, 7] == rolling_max([2, 3, 4, 5, 6, 1, 2, 3, 4, 5])\nassert     [2, 4, 6, 1, 2, 4, 6, 7] == rolling_max([2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5])\nassert     [2, 4, 6, 1, 2, 4, 6, 7] == rolling_max([2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7])\nassert     [2, 4, 6, 1, 2, 4, 6, 7] == rolling_max([2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7])\nassert     [2, 4, 6, 1, 2, 4, 6, 7] == rolling_max([2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([-1, -2, -3, -4, -5, -6]) == [-1, -2, -3, -4, -5, -6]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1, 2]) == [1, 2]\nassert     rolling_max([1, 2, 3]) == [3, 3, 3]\nassert     rolling_max([1, 2, 3, 4]) == [3, 4, 4, 4]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rolling_max([2, 8, 3, 2, 2]) == [2, 8, 3, 2, 2]\nassert     rolling_max([2, 8, 3, 2, 2, 3]) == [2, 8, 3, 2, 3, 3]\nassert     rolling_max([2, 8, 3, 2, 2, 3, 5, 2, 4]) == [2, 8, 3, 2, 2, 3, 5, 2, 4]\nassert     rolling_max([2, 8, 3, 2, 2, 3, 5, 2, 4, 5, 3, 4, 3, 2, 5, 3]) == [2, 8, 3, 2, 2, 3, 5, 2, 4, 5, 3, 4, 3, 2, 5, 3]\nassert     rolling_max([2, 8, 3, 2, 2, 3, 5, 2, 4, 5, 3, 4, 3, 2, 5, 3, 6, 4, 6, 2]) == [2, 8, 3, 2, 2, 3, 5, 2, 4, 5, 3, 4, 3, 2, 5, 3, 6, 4, 6, 2]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rolling_max([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) \\\n        == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) \\\n        == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) \\\n        == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) \\\n        == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) \\\n        == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([10]) == [10]\nassert     rolling_max([10, 3]) == [10, 3]\nassert     rolling_max([10, 3, 1]) == [10, 3, 1]\nassert     rolling_max([10, 3, 2, 1]) == [10, 3, 2, 1]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rolling_max([2, 3, 4, 5, 4, 5]) == [3, 4, 5, 5, 4, 5]\nassert     rolling_max([2, 3, 4, 5, 2]) == [3, 4, 5, 5, 2]\nassert     rolling_max([1, 2, 3, 4, 5]) == [3, 4, 5, 5, 4]\nassert     rolling_max([5, 5]) == [5, 5]\nassert     rolling_max([]) == []\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 5]) == [5, 5, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1]\nassert     rolling_max([-1, -2, -3, -4, -5, -5, -5]) == [-5, -5, -5, -5, -5, -5, -5]\nassert     rolling_max([]) == []\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rolling_max([2, 4, 3, 7, 10, 6, 1]) == [4, 3, 10, 7, 10, 7, 10]\nassert     rolling_max([2, 4, 3, 1]) == [4, 4, 4, 1]\nassert     rolling_max([2]) == [2, 2]\n\n\ndef ceiling_index(numbers: List[int], target: int) -> int:\n    \"\"\" Find the index of the ceiling element of the given target in the sequence.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rolling_max([2, 2, 3, 1, 2, 3, 5, 4, 7]) == [5, 5, 5, 7, 7, 7, 7, 7, 7]\nassert     rolling_max([2, 2, 3, 1, 2, 3, 5, 4, 7, 3]) == [5, 5, 5, 5, 7, 7, 7, 7, 7, 7]\nassert     rolling_max([2, 2, 3, 1, 2, 3, 5, 4, 7, 2]) == [5, 5, 5, 7, 7, 7, 7, 7, 7, 7]\n\n\ndef game_with_stones(\n    n: int,\n    initial_stones: List[int],\n    new_stones: List[int],\n    moves: List[Tuple[int, int]]\n) -> List[int]:\n    \"\"\"\n    Given n stones in the pile, each with a value 1 through n, and n moves\n    (each to a pile) by the player, and each player has an additional m moves\n    (each to a pile) by the opponent, determine whether the game is over\n    after these m moves.\n\n    Note: Stones are removed from the top of the pile in each move.\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_palindrome(\"abcd\") == \"dcba\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"b\") == \"bb\"\nassert     make_palindrome(\"abcdabcdab\") == \"dcba\"\nassert     make_palindrome(\"abc\") == \"abcba\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     make_palindrome('adbv') == 'davdbb'\nassert     make_palindrome('dvdf') == 'dvdfdf'\nassert     make_palindrome('wqhb') == 'wqhbwqhb'\nassert     make_palindrome('recev') == 'ecsrecev'\nassert     make_palindrome('peek') == 'eepkek'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome(\"abc\") == False\nassert     is_palindrome(\"aa\") == True\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"abcde\") == False\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_palindrome(\"abcd\") == \"dcbaabcd\"\nassert     make_palindrome(\"abcdcba\") == \"dcbaabcd\"\nassert     make_palindrome(\"abcdba\") == \"dcbaabcdba\"\nassert     make_palindrome(\"abcdc\") == \"dcbaabcd\"\nassert     make_palindrome(\"\") == \"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_palindrome(\"abc\") == \"abcabcba\"\nassert     make_palindrome(\"abcdef\") == \"abcdabcyba\"\nassert     make_palindrome(\"abacb\") == \"abacbab\"\nassert     make_palindrome(\"abacba\") == \"abacbab\"\nassert     make_palindrome(\"abacbaa\") == \"abacbaab\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_palindrome(\"bat\") == \"abat\"\nassert     make_palindrome(\"bar\") == \"aba\"\nassert     make_palindrome(\"barack\") == \"abarack\"\nassert     make_palindrome(\"bab\") == \"ba\"\nassert     make_palindrome(\"baboon\") == \"baboonaboon\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_palindrome('water') == 'waterrw'\nassert     make_palindrome('racecar') == 'racecarra'\nassert     make_palindrome('racecarx') == 'racecarxa'\nassert     make_palindrome('tat') == 'tatt'\nassert     make_palindrome('foobar') == 'foobarobar'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_palindrome('a') == 'a'\nassert     make_palindrome('aa') == 'aa'\nassert     make_palindrome('aaa') == 'aaaa'\nassert     make_palindrome('aba') == 'bba'\nassert     make_palindrome('abaab') == 'bbaabb'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_palindrome(make_palindrome(\"hannah\"))\nassert     is_palindrome(make_palindrome(\"abb\"))\nassert     is_palindrome(make_palindrome(\"abcba\"))\nassert     is_palindrome(make_palindrome(\"aba\"))\nassert     is_palindrome(make_palindrome(\"ab\"))\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_palindrome('a') == 'a'\nassert     make_palindrome('b') == 'ba'\nassert     make_palindrome('ab') == 'aba'\nassert     make_palindrome('abc') == 'abcabc'\nassert     make_palindrome('aab') == 'aaabaa'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_xor(\"0111000110\", \"0111000110\") == \"0\"\nassert     string_xor(\"1101000110\", \"0111000110\") == \"1\"\nassert     string_xor(\"0110101010\", \"0110011110\") == \"1101011101\"\nassert     string_xor(\"0110101010\", \"0111010111\") == \"1011110010\"\n\n\ndef replace_all(s: str, sub: str, replacement: str) -> str:\n    \"\"\" Replace all occurences of sub with replacement in s.\n    If no replacement is supplied, sub is replaced with \"\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_xor('111001110001010000', '1001100000110001001') == '0100010000110100010'\nassert     string_xor('001110101000110001', '0100100001100010001') == '0100110101010001001'\nassert     string_xor('0000100110111010000', '1001100000110001001') == '0001111011011101010'\nassert     string_xor('0000100110111010000', '0100100001100010001') == '1001100011011101010'\nassert     string_xor('0000100110111010000', '0000100110111010000') == '00000000000000000'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_xor(\"10011\", \"10001\") == \"01001\"\nassert     string_xor(\"01001\", \"10011\") == \"01001\"\nassert     string_xor(\"10001\", \"01001\") == \"10011\"\nassert     string_xor(\"10011\", \"01001\") == \"10001\"\nassert     string_xor(\"10001\", \"10011\") == \"10001\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_xor(\"1101\", \"1011\") == \"0101\"\nassert     string_xor(\"000110001100101\", \"0010100101001101\") == \"0010001010010101\"\nassert     string_xor(\"10000001011010\", \"000001000101100\") == \"110001011000101\"\nassert     string_xor(\"0110101011110101\", \"001100010111101\") == \"1010101011110101\"\nassert     string_xor(\"100101010110101\", \"1011010110111101\") == \"0010101010110101\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_xor('10001', '11111') == '000000'\nassert     string_xor('011010', '011100') == '10101'\nassert     string_xor('011011', '011100') == '10100'\nassert     string_xor('011011', '011101') == '10101'\nassert     string_xor('10001', '10101') == '000000'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_xor('1100', '1001') == '0011'\nassert     string_xor('1010', '0101') == '1011'\nassert     string_xor('100100110', '100100110') == ''\nassert     string_xor('100100110', '100100101') == '101000101'\n\ndef super_secure_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    Assume that a and b are equal length.\n    \"\"\"\n    "
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         string_xor(\"1101001\", \"0001101\") == \"1000011\"\nassert         string_xor(\"1100100\", \"0001101\") == \"1010001\"\nassert         string_xor(\"0101001\", \"0001101\") == \"1011001\"\nassert         string_xor(\"0011001\", \"0001101\") == \"1100011\"\nassert         string_xor(\"011001\", \"0001101\") == \"110101\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_xor(\"10101001\", \"10101001\") ==     \"01010101\"\nassert     string_xor(\"10010100\", \"10010100\") ==     \"00000101\"\nassert     string_xor(\"01101100\", \"01101100\") ==     \"00110110\"\nassert     string_xor(\"00101110\", \"00101110\") ==     \"01011101\"\nassert     string_xor(\"10101111\", \"10101111\") ==     \"01010101\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_xor('000110100', '0000011011') == '1000110001'\nassert     string_xor('0110101010', '1010110111') == '1010101010'\nassert     string_xor('1010101010', '0110101011') == '1010101010'\nassert     string_xor('0110101010', '0000010111') == '1000101010'\nassert     string_xor('000110100', '0000011002') == '1000101001'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_xor('1', '0') == '1'\nassert     string_xor('0', '1') == '1'\nassert     string_xor('11', '10') == '01'\nassert     string_xor('01', '11') == '10'\nassert     string_xor('1001', '1010') == '0101'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     longest([\"zzz\", \"dog\", \"apple\", \"cat\", \"monkey\"]) == \"monkey\"\nassert     longest([\"monk\", \"dog\", \"zzz\", \"monk\"]) == \"monk\"\nassert     longest([\"one\", \"two\", \"three\", \"four\"]) == \"four\"\nassert     longest([\"one\", \"two\", \"three\", \"four\", \"five\"]) == \"five\"\nassert     longest([\"\"]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     longest(['abc', 'bb', 'bcd', 'c', 'abcde', 'b']) == 'abc'\nassert     longest(['', 'c', '', 'b', 'bb', 'bbb']) == 'bbb'\nassert     longest(['aaa', 'b', 'c', 'd', 'aa', 'a']) == 'aa'\nassert     longest([]) is None\nassert     longest(['abc', 'bb', 'bcd', 'c', 'abcde', 'b']) == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\"\"\"\n    Implement a function that takes as input three strings and returns the longest string.\n    The input strings are not empty and are composed of only letters from a to z.\n    For example, longest(\u201cpython\u201d, \u201cis\u201d, \u201cshort\u201d) should return \u201cpython\u201d.\n    Write a function longest that takes a list of strings as input argument and returns the longest string.\n    Assume the input list will never be empty.\n    \n    \"\"\"\n\n\n\"\"\"\n    Implement a function that takes as input three strings and returns the longest string.\n    The input strings are not empty and are composed of only letters from a to z.\n    For example, longest(\u201cpython\u201d, \u201cis\u201d, \u201cshort\u201d) should return \u201cpython\u201d.\n    Write a function longest that takes a list of strings as input argument and returns the longest string.\n    Assume the input list will never be empty.\n    \n    \n    \"\"\"\n\n\n\"\"\"\n    Implement a function that takes as input three strings and returns the longest string.\n    The input strings are not empty and are composed of only letters from a to z.\n    For example, longest(\u201cpython\u201d, \u201cis\u201d, \u201cshort\u201d) should return \u201cpython\u201d.\n    Write a function longest that takes a list of strings as input argument and returns the longest string.\n    Assume the input list will never be empty.\n    \n    \"\"\"\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     longest([]) == None\nassert     longest([\"123\"]) == \"123\"\nassert     longest([\"a\", \"a\"]) == \"a\"\nassert     longest([\"b\", \"b\"]) == \"b\"\nassert     longest([\"a\", \"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == 'h'\nassert     longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 'h'\nassert     longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'p'\nassert     longest([]) == None\nassert     longest(['a']) == 'a'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         longest([\"a\", \"abc\", \"abcd\", \"abcde\"]) == \"abcde\"\nassert         longest([\"hello\", \"world\", \"test\", \"de\", \"hi\"]) == \"hello\"\nassert         longest([]) is None\nassert         longest([None]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     longest([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"e\"\nassert     longest([\"hello\", \"world\"]) == \"world\"\nassert     longest([\"\", \"\"]) == None\nassert     longest([\"hello\", \"world\", \"1234\"]) == None\nassert     longest([]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     longest([\"zero\", \"one\", \"two\", \"three\"]) == \"three\"\nassert     longest([\"foo\", \"bar\", \"spam\", \"blah\"]) == \"blah\"\nassert     longest([\"one\", \"two\", \"three\"]) == \"three\"\nassert     longest([]) is None\nassert     longest([\"zebra\", \"dog\", \"cat\"]) == \"zebra\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     longest([\"abc\", \"cab\", \"xyz\"]) == \"abc\"\nassert     longest([\"abc\", \"def\"]) == \"def\"\nassert     longest([\"abc\", \"xyz\"]) == \"abc\"\nassert     longest([\"abc\", \"cab\"]) == \"cab\"\nassert     longest([\"abc\", \"abc\"]) == \"abc\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     longest([\"abc\", \"abcdef\", \"abcdefg\", \"abcd\"]) == \"abcdef\"\nassert     longest([\"abcdefg\", \"abcd\"]) == \"abcd\"\nassert     longest([\"a\", \"b\", \"c\", \"d\"]) == None\nassert     longest([\"abcdefg\", \"abcd\", \"a\"]) == None\n\n\ndef k_longest(strings: List[str], k: int) -> List[str]:\n    \"\"\" Return the longest k strings in the list of strings. If the number of strings is less than k,\n    return them in any order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(a=11, b=6) == 1\nassert     greatest_common_divisor(a=11, b=2) == 2\nassert     greatest_common_divisor(a=11, b=3) == 3\nassert     greatest_common_divisor(a=11, b=4) == 4\nassert     greatest_common_divisor(a=11, b=5) == 5\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(4, 5) == 1\nassert     greatest_common_divisor(3, 9) == 3\nassert     greatest_common_divisor(5, 5) == 5\nassert     greatest_common_divisor(1, 2) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert ________ == greatest_common_divisor(54, 24)\nassert ________ == greatest_common_divisor(18, 12)\nassert ________ == greatest_common_divisor(5, 2)\nassert ________ == greatest_common_divisor(17, 5)\nassert ________ == greatest_common_divisor(60, 24)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(10, 6) == 2\nassert     greatest_common_divisor(9, 3) == 3\nassert     greatest_common_divisor(17, 5) == 5\nassert     greatest_common_divisor(25, 5) == 5\nassert     greatest_common_divisor(30, 6) == 6\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(25, 5) == 5\nassert     greatest_common_divisor(5, 25) == 5\nassert     greatest_common_divisor(25, 25) == 25\nassert     greatest_common_divisor(25, 9) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(8, 8) == 8\nassert     greatest_common_divisor(9, 12) == 3\nassert     greatest_common_divisor(17, 25) == 5\n\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n\n\n\n\n\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         greatest_common_divisor(2, 12) == 2\nassert         greatest_common_divisor(6, 9) == 3\nassert         greatest_common_divisor(9, 12) == 3\nassert         greatest_common_divisor(12, 15) == 3\nassert         greatest_common_divisor(12, 14) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert ______________ == greatest_common_divisor(17, 3)\nassert ______________ == greatest_common_divisor(1, 3)\nassert ______________ == greatest_common_divisor(2, 8)\nassert ______________ == greatest_common_divisor(12, 8)\nassert ______________ == greatest_common_divisor(4, 4)\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"\") == []\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcdef\") == [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\", \"cd\", \"d\", \"de\", \"e\", \"ef\", \"f\"]\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"cat\") == ['c', 'ca', 'cat']\nassert     all_prefixes(\"dog\") == ['d', 'do', 'dog']\nassert     all_prefixes(\"dogcat\") == ['d', 'do', 'dog', 'dogc', 'dogca', 'dogcat']\nassert     all_prefixes(\"dogcatfish\") == ['d', 'do', 'dog', 'dogc', 'dogca', 'dogcat', 'dogcf', 'dogca', 'dogcat', 'dogc', 'dogcatfish']\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_prefixes('ab') == ['', 'a', 'ab']\nassert     all_prefixes('a') == ['', 'a']\nassert     all_prefixes('aa') == ['', 'aa']\nassert     all_prefixes('aaa') == ['', 'aaa']\nassert     all_prefixes('aaaaa') == ['', 'aaaaa']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"abc\") == ['a', 'ab', 'abc']\nassert     all_prefixes(\"ab\") == ['a', 'ab']\nassert     all_prefixes(\"abc\") == ['a', 'ab', 'abc']\nassert     all_prefixes(\"a\") == ['a']\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"cbc\") == [\"\", \"c\", \"ca\", \"cab\", \"cbc\"]\nassert     all_prefixes(\"cbceb\") == [\"\", \"c\", \"ca\", \"cab\", \"cb\", \"cbca\", \"cbce\", \"cbceb\"]\n\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_prefixes('a') == ['a', 'a']\nassert     all_prefixes('cat') == ['c', 'ca', 'cat']\nassert     all_prefixes('cats') == ['c', 'ca', 'cat', 'cats']\nassert     all_prefixes('cat,s') == ['c', 'ca', 'cat', 'cats']\nassert     all_prefixes('cats,s') == ['c', 'ca', 'cat', 'cats', 'cats']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_prefixes('abcdef') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcd', 'abcd', 'abcd', 'abcde']\nassert     all_prefixes('abcdefg') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcd', 'abcd', 'abcd', 'abcde', 'abcd', 'abcde', 'abcd', 'abcd', 'abcde', 'abcd', 'abcde', 'abcd']\nassert     all_prefixes('abcd') == ['', 'a', 'ab', 'abc', 'abcd']\nassert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_prefixes('abcdef') ==     ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\nassert     all_prefixes('abcdefg') ==     ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg']\nassert     all_prefixes('abcdefgh') ==     ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_prefixes('abracadabra') == ['abra', 'abrac', 'abraca', 'abracad', 'abracadab', 'abracadabra']\nassert all_prefixes('sky') == ['sky','sk','skia','skyai','skyaio','skyais','skyait','skyam']\nassert all_prefixes('sky') == ['sky','sk','skia','skyai','skyaio','skyais','skyait','skyam']\nassert all_prefixes('s') == ['s','sa','sai','saiot','saio','sait','sam']\nassert all_prefixes('sa') == ['s','sa','sai','saiot','saio','sait','sam']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_prefixes('') == []\nassert     all_prefixes('a') == ['a']\nassert     all_prefixes('ab') == ['a', 'ab']\nassert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('abcd') == ['a', 'ab', 'abc', 'abcd']\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_sequence(4)     == \"01 02 03 04\", \"string_sequence(4) is not correct\"\nassert     string_sequence(5)     == \"01 02 03 04 05\", \"string_sequence(5) is not correct\"\nassert     string_sequence(6)     == \"01 02 03 04 05 06\", \"string_sequence(6) is not correct\"\nassert     string_sequence(7)     == \"01 02 03 04 05 06 07\", \"string_sequence(7) is not correct\"\nassert     string_sequence(8)     == \"01 02 03 04 05 06 07 08\", \"string_sequence(8) is not correct\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(11) == \"0 1 2 3 4 5 6 7 8 9 10\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(1) == \"0\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"00\"\nassert     string_sequence(3) == \"000\"\nassert     string_sequence(4) == \"0000\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(7) == \"0 1 2 3 4 5 6\"\n\ndef sequence(n: int) -> list:\n    \"\"\" Return a list containing the string_sequence of numbers from 0 to n inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(14) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13\"\nassert     string_sequence(20) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\nassert     string_sequence(20) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(3) == '0 1 2'\nassert     string_sequence(4) == '0 1 2 3'\nassert     string_sequence(5) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_sequence(3) == \"012\"\nassert     string_sequence(5) == \"012345\"\nassert     string_sequence(10) == \"0123456789\"\nassert     string_sequence(15) == \"0123456789012345\"\n\ndef reverse_string(s: str) -> str:\n    \"\"\"Reverse the string s in place.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     ( string_sequence(0)     == \"\"\n          , string_sequence(1)     == \"0\"\n          , string_sequence(2)     == \" 0\"\n          , string_sequence(3)     == \" 0 \"\n          , string_sequence(4)     == \" 0 \"\n          , string_sequence(5)     == \" 0 \"\n          , string_sequence(6)     == \" 0 \"\n          , string_sequence(7)     == \" 0 \"\n          , string_sequence(8)     == \" 0 \"\n          , string_sequence(9)     == \" 0 \"\n          , string_sequence(10)     == \" 0 \"\n          , string_sequence(11)     == \" 0 \"\n          , string_sequence(12)     == \" 0 \"\n          , string_sequence(13)     == \" 0 \"\n          , string_sequence(14)     == \" 0 \"\n          , string_sequence(15)     == \" 0 \"\n          , string_sequence(16)     == \" 0 \"\n          , string_sequence(17)     == \" 0 \"\n          , string_sequence(18)     == \" 0 \"\n          , string_sequence(19)     == \" 0 \"\n          , string_sequence(20)     == \" 0 \"\n          , string_sequence(21)     == \" 0 \"\n          , string_sequence(22)     == \" 0 \"\n          , string_sequence(23)     == \" 0 \"\n          , string_sequence(24)     == \" 0 \"\n          , string_sequence(25)     == \" 0 \"\n          , string_sequence(26)     == \" 0 \"\n          , string_sequence(27)     == \" 0 \"\n          , string_sequence(28)     == \" 0 \"\n          , string_sequence(29)     == \" 0 \"\n          , string_sequence(30)     == \" 0 \"\n          , string_sequence(31)     == \" 0 \"\n          , string_sequence(32)     == \" 0 \"\n          , string_sequence(33)     == \" 0 \"\n          , string_sequence(34)     == \" 0 \"\n          , string_sequence(35)     == \" 0 \"\n          , string_sequence(36)     == \" 0 \"\n          , string_sequence(37)     == \" 0 \"\n          , string_sequence(38)     == \" 0 \"\n          , string_sequence(39)     == \" 0 \"\n          , string_sequence(40)     == \" 0 \"\n          , string_sequence(41)     == \" 0 \"\n          , string_sequence(42)     == \" 0 \"\n          , string_sequence(43)     == \" 0 \"\n          , string_sequence(44)     == \" 0 \"\n          , string_sequence(45)     == \" 0 \"\n          , string_sequence(46)     == \" 0 \"\n          , string_sequence(47)     == \" 0 \"\n          , string_sequence(48)     == \" 0 \"\n          , string_sequence(49)     == \" 0 \"\n          , string_sequence(50)     == \" 0 \"\n          , string_sequence(51)     == \" 0 \"\n          , string_sequence(52)     == \" 0 \"\n          , string_sequence(53)     == \" 0 \"\n          , string_sequence(54)     == \" 0 \"\n          , string_sequence(55)     == \" 0 \"\n          , string_sequence(56)     == \" 0 \"\n          , string_sequence(57)     == \" 0 \"\n          , string_sequence(58)     == \" 0 \"\n          , string_sequence(59)     == \" 0 \"\n          , string_sequence(60)     == \" 0 \"\n          , string_sequence(61)     == \" 0 \"\n          , string_sequence(62)     == \" 0 \"\n          , string_sequence(61)     == \" 0 \"\n          "
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(7) == \"0 1 2 3 4 5 6 7\"\n\ndef max_product(n: int) -> int:\n    \"\"\" Return the maximum product of the four integers which make up the numbers in the string sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"Mr. Owl ate my metal worm\") == 3, \"expected 3\"\nassert     count_distinct_characters(\"Mississippi\") == 4, \"expected 4\"\nassert     count_distinct_characters(\"The quick brown fox jumps over the lazy dog\") == 6, \"expected 6\"\nassert     count_distinct_characters(\"\") == 0, \"expected 0\"\nassert     count_distinct_characters(\"a\") == 1, \"expected 1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_distinct_characters('string')         == 3\nassert     count_distinct_characters('hello world') == 5\nassert     count_distinct_characters('this is a test') == 8\nassert     count_distinct_characters('')             == 0\nassert     count_distinct_characters('a')         == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"aabb\") == 4\nassert     count_distinct_characters(\"aAaAa\") == 3\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"abCDE\") == 5\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('abC') == 2\nassert     count_distinct_characters('aBC') == 2\nassert     count_distinct_characters('aBc') == 3\nassert     count_distinct_characters('aBc123') == 4\n\ndef count_distinct_characters_with_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (case sensitive) does it consist of\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         count_distinct_characters(\"This is a test.\") == 3\nassert         count_distinct_characters(\"Programming\") == 6\nassert         count_distinct_characters(\"\") == 0\nassert         count_distinct_characters(\"h\") == 1\nassert         count_distinct_characters(\"aA\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"aba\") == 3\nassert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\") == 10\nassert     count_distinct_characters(\"Test\") == 1\nassert     count_distinct_characters(\"Test?\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_distinct_characters(\"abcd\") == 4\nassert     count_distinct_characters(\"abcDaBcd\") == 5\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"abcde\") == 5\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"hello\") == 5\nassert     count_distinct_characters(\"Hello\") == 5\nassert     count_distinct_characters(\"Hi\") == 2\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('aaa') == 3\nassert     count_distinct_characters('abb') == 2\nassert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('abC') == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_distinct_characters('Hello World') == 6\nassert count_distinct_characters('Hello World?') == 7\nassert count_distinct_characters('12345') == 5\nassert count_distinct_characters('1234567') == 7\nassert count_distinct_characters('123456789') == 9\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_music('o o.|.|.|.|') == [4, 3, 2, 1]\nassert     parse_music('o o.|o|o|o|') == [4, 3, 2, 1]\nassert     parse_music('o o.|o|o|o|') == [4, 3, 2, 1]\nassert     parse_music('o o.o|.|.|.|') == [4, 3, 2, 1]\nassert     parse_music('o o.o|o|o|o|') == [4, 3, 2, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_music(\"ABC\") == [1, 1, 1, 1]\nassert     parse_music(\"ABC|\") == [1, 1, 1, 1]\nassert     parse_music(\"ABC|.|\") == [1, 1, 1, 1]\nassert     parse_music(\"ABC|.|.|\") == [1, 2, 1, 1]\nassert     parse_music(\"ABC|.|.|.|\") == [1, 2, 2, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_music('o|o') == [2, 4]\nassert     parse_music('o|o|o') == [2, 4, 6]\nassert     parse_music('o|o|o|o') == [2, 4, 6, 8]\nassert     parse_music('o|o|o|o|o') == [2, 4, 6, 8, 10]\nassert     parse_music('o|o|o|o|o|o') == [2, 4, 6, 8, 10, 12]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_music('.|..|...|..|..|.|..|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|..|..|..|..|.|.|..|..|..|..|.|.|.|.|.|.|.|..|..|..|..|.|.|..|..|..|.|.|.|..|.|..|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_music(\"O\") == [1]\nassert     parse_music(\"O|\") == [1, 1]\nassert     parse_music(\"O|||\") == [1, 1, 1]\nassert     parse_music(\"O|.|\") == [1, 0, 1]\nassert     parse_music(\"O|.|.|\") == [1, 0, 0, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_music('''\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o   o   o\n        o   o   o  "
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_music('o') == [4]\nassert     parse_music('o|') == [2, 2]\nassert     parse_music('o|o') == [4, 4]\nassert     parse_music('o|o|o') == [4, 4, 4]\nassert     parse_music('o|o|o|o') == [4, 4, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_music('o|o|o|o|o') == [1, 4, 4, 4, 4]\nassert     parse_music('o|o|o|o|o') == [1, 2, 4, 4, 4]\nassert     parse_music('o|o|o|o|o') == [1, 1, 2, 4, 4]\nassert     parse_music('o|o|o|o|o') == [1, 2, 2, 4, 4]\nassert     parse_music('o|o|o|o|o') == [1, 2, 3, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_music(\"ooooooo\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music(\"ooooooo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|o|\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music(\"ooooooo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|o|\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music(\"oooooooooo\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music(\"oooooooooo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|oo|o|\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_music(\"oooo\") == [4, 4, 4]\nassert     parse_music(\"oooo|\") == [4, 2, 4]\nassert     parse_music(\"ooo.|\") == [4, 3, 4]\nassert     parse_music(\"ooo.|.o\") == [4, 3, 4, 3]\nassert     parse_music(\"o|.|o|.|\") == [4, 2, 2, 4]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     how_many_times('fghhgf', 'f') == 1\nassert     how_many_times('fghhgf', 'h') == 2\nassert     how_many_times('fghhgf', 'g') == 3\nassert     how_many_times('fghhgf', 'ff') == 4\nassert     how_many_times('fghhgf', 'fh') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     how_many_times(\"abcabcabc\", \"abc\") == 4\nassert     how_many_times(\"aaaabbbbc\", \"aa\") == 2\nassert     how_many_times(\"abacbca\", \"b\") == 1\nassert     how_many_times(\"abcdef\", \"f\") == 0\nassert     how_many_times(\"abcdef\", \"z\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     how_many_times(\"this is a test\", \"test\") == 2, how_many_times(\"this is a test\", \"test\")\nassert     how_many_times(\"this is a test\", \"this\") == 1, how_many_times(\"this is a test\", \"this\")\nassert     how_many_times(\"test string\", \"test\") == 1, how_many_times(\"test string\", \"test\")\nassert     how_many_times(\"this is a test\", \"is\") == 0, how_many_times(\"this is a test\", \"is\")\nassert     how_many_times(\"\", \"\") == 0, how_many_times(\"\", \"\")\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     how_many_times(\"abcabcabc\", \"abc\") == 4\nassert     how_many_times(\"abcabcabc\", \"bc\") == 2\nassert     how_many_times(\"abcabcabc\", \"ab\") == 3\nassert     how_many_times(\"abcabcabc\", \"a\") == 1\n\ndef count_how_many_times(string: str, substring: str) -> int:\n    \"\"\" Same as how_many_times, but return 0 if the substring is not found.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     how_many_times('Hello there', 'Hello') == 1, 'basic'\nassert     how_many_times('Hello there', 'ell') == 1, 'one character'\nassert     how_many_times('ababab', 'ab') == 4, 'basic'\nassert     how_many_times('ababab', 'ba') == 1, 'overlap'\nassert     how_many_times('ababab', 'abab') == 3, 'overlap'\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     how_many_times(\"abcdabcd\", \"cd\") == 2\nassert     how_many_times(\"aaaaabcd\", \"cd\") == 4\nassert     how_many_times(\"abcdabcdabcd\", \"cd\") == 3\nassert     how_many_times(\"abcdabcdabcd\", \"ab\") == 4\nassert     how_many_times(\"\", \"\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     how_many_times('', '') == 0\nassert     how_many_times('', 'a') == 0\nassert     how_many_times('', 'a'*10) == 0\nassert     how_many_times('a', '') == 0\nassert     how_many_times('a', 'a') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     how_many_times('this is good', 'is') == 1\nassert     how_many_times('this is good', 'good') == 2\nassert     how_many_times('this is good', 'is is') == 0\nassert     how_many_times('this is good', 'this is') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         how_many_times('', '') == 0\nassert         how_many_times('', 'A') == 0\nassert         how_many_times('', 'AA') == 0\nassert         how_many_times('', 'Aa') == 0\nassert         how_many_times('', 'AA') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     how_many_times('aaaaa', 'a') == 5\nassert     how_many_times('aaaaa', 'b') == 0\nassert     how_many_times('aaaaa', 'aa') == 1\nassert     how_many_times('aaaaa', 'aaa') == 0\nassert     how_many_times('aaa', 'a') == 3\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_numbers('2 91') == '21 91'\nassert     sort_numbers('two three one') == '13 one'\nassert     sort_numbers('three two one') == '13 one'\nassert     sort_numbers('one two three') == '13 one'\nassert     sort_numbers('nine three two one') == '13 one'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"one two three four five six seven eight nine zero\"\nassert     sort_numbers(\"nine three five two one four six zero\") == \"one two three four five six zero nine\"\nassert     sort_numbers(\"one one\") == \"one one\"\nassert     sort_numbers(\"one two\") == \"two one\"\nassert     sort_numbers(\"one one one\") == \"one one one\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"one two three four five six seven eight nine zero\") == \"012 345 678 909\"\nassert sort_numbers(\"zero one two three four five six seven eight nine\") == \"0123456789\"\nassert sort_numbers(\"six five four three two one zero\") == \"01234567\"\n\n\ndef sort_buns(buns: str) -> str:\n    \"\"\" Input is a space-delimited string of strings,\n    'buns','sandwich','sandwich', 'bun','sandwich','sandwich', 'bun'.\n    Return a space-delimited string of strings,'sandwich', 'bun','sandwich', 'bun','sandwich', 'bun','sandwich'\n    (the order of sandwiches within each bun does not matter)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine zero') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('nine one two three four five six seven eight zero') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('four four four four four four four four four four four four four') == 'four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four four\n\n\ndef sort_anagrams(words: List[str]) -> List[str]:\n    \"\"\" Input is a list of words.\n    The words are sorted lexicographically (case-insensitively) and then by length.\n    Return a list of words in the order they appeared in the original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"three four five six seven eight nine zero one two\") == \"one two three four five six seven eight nine zero one two\"\nassert     sort_numbers(\"two one one two three four five six seven eight nine zero\") == \"one two one two three four five six seven eight nine zero\"\nassert     sort_numbers(\"two one one two three four five six seven eight nine zero\") == \"one two one two three four five six seven eight nine zero\"\nassert     sort_numbers(\"nine nine two two one one one three four five six seven eight nine zero zero\") == \"one one two two three four five six seven eight nine zero zero\"\n\n\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_numbers('zero nine one two three four five six seven eight nine') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('nine one eight two three zero five four') == 'zero one two three four five four nine'\nassert     sort_numbers('two eight zero three nine one') == 'zero one three nine two'\nassert     sort_numbers('five four three two one eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('seven three two zero six one') == 'zero one two three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_numbers('one four two three six five four') == 'one four two three six five four'\nassert     sort_numbers('one four two three four five six') == 'one four two three four five six'\nassert     sort_numbers('one four two three four five six seven eight') == 'one four two three four five six seven eight'\nassert     sort_numbers('seven four two three one five six eight nine') =='seven four two three one five six eight nine'\nassert     sort_numbers('eight one three four five six seven nine') == 'eight one three four five six seven nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'one zero three two five four eight seven six nine'\nassert     sort_numbers('three two one zero four five six seven eight nine') == 'one zero three two four five six seven eight nine'\nassert     sort_numbers('six five four three two one zero nine eight') == 'one zero four five six three two eight nine'\nassert     sort_numbers('zero four one two three five six seven eight nine') == 'one zero four two three five six seven eight nine'\nassert     sort_numbers('one zero four three five two six seven eight nine') == 'one zero four three five two six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_numbers('one4seveneight') == 'one seven eight four'\nassert     sort_numbers('seven one') =='seven one one'\nassert     sort_numbers('two two') == 'two two two'\nassert     sort_numbers('one') == 'one one'\nassert     sort_numbers('eight') == 'eight eight'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine ten') == 'one two three four five six seven eight nine ten'\nassert     sort_numbers('five one two three four six seven eight nine ten') == 'one two three four five six seven eight nine ten'\nassert     sort_numbers('five one three four six seven eight nine ten') == 'one two three four five six seven eight nine ten'\nassert     sort_numbers('nine eight seven six five four three two one') == 'one two three four five six seven eight nine ten'\nassert     sort_numbers('zero nine eight seven six five four three two one') == 'one two three four five six seven eight nine ten'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (2, 4), \"basic (1, 2), (3, 4)\"\nassert     find_closest_elements([0, 1, 2, 3, 4, 5, 6, 7, 8]) == (0, 0), \"basic (0, 0), (1, 1)\"\nassert     find_closest_elements([-1, -2, -3, -4, -5, -6, -7, -8]) == (2, -2), \"basic (-1, -2), (-3, -4)\"\nassert     find_closest_elements([-1.01, -0.99, -0.98, -0.97, -0.96, -0.95, -0.94, -0.93, -0.92, -0.91, -0.9, -0.89, -0.88, -0.87, -0.86, -0.85, -0.84, -0.83, -0.82, -0.81, -0.8, -0.79, -0.78, -0.77, -0.76, -0.75, -0.74, -0.73, -0.72, -0.71, -0.7, -0.69, -0.68, -0.67, -0.66, -0.65, -0.64, -0.63, -0.62, -0.61, -0.6, -0.59, -0.58, -0.57, -0.56, -0.55, -0.54, -0.53, -0.52, -0.51, -0.5, -0.49, -0.48, -0.47, -0.46, -0.45, -0.44, -0.43, -0.42, -0.41, -0.4, -0.39, -0.38, -0.37, -0.36, -0.35, -0.34, -0.33, -0.32, -0.31, -0.3, -0.29, -0.28, -0.27, -0.26, -0.25, -0.24, -0.23, -0.22, -0.21, -0.2, -0.19, -0.18, -0.17, -0.16, -0.15, -0.14, -0.13, -0.12, -0.11, -0.1, -0.09, -0.08, -0.07, -0.06, -0.05, -0.04, -0.03, -0.02, -0.01, -0.0, 0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, "
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0]) == (0.0, 2.0)\nassert     find_closest_elements([5.0, 3.0, 1.0, 2.0, 4.0]) == (1.0, 2.0)\nassert     find_closest_elements([-5.0, 2.0, 1.0, 3.0, 4.0]) == (-5.0, 1.0)\nassert     find_closest_elements([]) == (None, None)\nassert     find_closest_elements([1.0]) == (1.0, 1.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_closest_elements([-1, 2, -3, 4, 5, 6, 7, 8, 9]) == (-1, 8)\nassert find_closest_elements([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (0, 0)\nassert find_closest_elements([-1, 2, -3, 4, -5, 6, 7, 8, 9]) == (1, 1)\nassert find_closest_elements([-1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12]) == (-1, 1)\nassert find_closest_elements([1]) == (1, 1)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_closest_elements([1,2,3,4,5]) == (2.5, 4)\nassert find_closest_elements([1,1,1,1]) == (1, 1)\nassert find_closest_elements([2,4,7,9,5,3,2,1,4,8,10]) == (1.5, 8)\nassert find_closest_elements([]) == (None, None)\n\n\ndef find_first_k_elements_from_list(numbers: List[float], k: int) -> Tuple[float, float]:\n    \"\"\" Return the smallest and largest elements in the supplied list that have indices within the range [k, len(numbers) - k].\n    The elements are in order of ascending values, so that the smallest element is the first element in the returned tuple.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (1.0, 2.0) == find_closest_elements([1.0, 1.5, 2.0])\nassert     (1.0, 2.0) == find_closest_elements([2.0, 1.0, 2.0])\nassert     (1.0, 2.0) == find_closest_elements([2.0, 1.0, 1.0])\nassert     (1.0, 2.0) == find_closest_elements([2.0, 1.5, 1.5])\nassert     (1.0, 2.0) == find_closest_elements([2.5, 1.5, 1.5])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_closest_elements([-12.2, 5.5, -8.6, -1.8, 4.2, 10.2, 11.6, 12.0, -0.4]) == (12.0, -0.4)\nassert     find_closest_elements([-12.2, 5.5, -8.6, -1.8, 4.2, 10.2, 11.6, 12.0, -0.4, 1.1, 2.1]) == (2.1, 1.1)\nassert     find_closest_elements([]) == (None, None)\nassert     find_closest_elements([-12.2, -1.1]) == (None, None)\n\ndef find_closest_elements2(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    return sorted(numbers)[:2]\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_closest_elements([9.0, 3.0, 5.0, 2.0]) == (2.0, 5.0)\nassert     find_closest_elements([0.0, 1.0, 2.0, 3.0]) == (0.0, 1.0)\nassert     find_closest_elements([0.0, 1.0, 2.0, 5.0, 7.0]) == (0.0, 1.0)\nassert     find_closest_elements([0.0, 1.0, 2.0, 5.0, 10.0, 100.0]) == (0.0, 1.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0]) == (1.0, 2.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (1, 2) == find_closest_elements([1, 2])\nassert     (1, 1) == find_closest_elements([1, 1])\nassert     (2, 2) == find_closest_elements([1, 2])\nassert     (1.25, 1) == find_closest_elements([1.5, 1])\nassert     (1.25, 2) == find_closest_elements([1.5, 2])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([1, 2, 5, 4, 3]) == (1, 2)\nassert     find_closest_elements([1, 5, 3, 4, 2]) == (1, 2)\nassert     find_closest_elements([2, 3, 4, 5, 1]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_closest_elements([12, 14, 6, 18, 19, 22, 24, 6, 16, 11, 8, 10]) == (11, 12)\nassert     find_closest_elements([12, 14, 19, 22, 24, 6, 16, 11, 8, 10]) == (11, 12)\nassert     find_closest_elements([12, 14, 19, 22, 24, 6, 16, 11, 8, 10, 5, 17, 19, 22, 24, 6, 16, 11, 8, 10]) == (11, 12)\nassert     find_closest_elements([12, 14, 19, 22, 24, 6, 16, 11, 8, 10, 5, 17, 19, 22, 24, 6, 16, 11, 8, 10, 4]) == (10, 12)\nassert     find_closest_elements([12, 14, 19, 22, 24, 6, 16, 11, 8, 10, 5, 17, 19, 22, 24, 6, 16, 11, 8, 10, 4, 1]) == (10, 12)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([1.0]) == [1.0]\nassert     rescale_to_unit([-1.0, 1.0]) == [0.0, 1.0]\nassert     rescale_to_unit([1.0, -1.0]) == [0.0, 1.0]\nassert     rescale_to_unit([0.5, 0.5]) == [0.0, 1.0]\nassert     rescale_to_unit([-0.5, -0.5]) == [0.0, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([1, 1, 1]) == [0, 0, 1]\nassert     rescale_to_unit([-1, -1, -1]) == [0, 0, 1]\nassert     rescale_to_unit([0.1, 0.1, 0.1]) == [0, 0, 1]\nassert     rescale_to_unit([0, 0, 1]) == [0, 0, 1]\nassert     rescale_to_unit([-0.1, -0.1, -0.1]) == [0, 0, 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([0.5]) == [1.0]\nassert     rescale_to_unit([0.25]) == [0.5]\nassert     rescale_to_unit([0.0]) == [0.0]\nassert     rescale_to_unit([0.5, 0.25, 0.0]) == [0.0, 0.5, 0.25]\nassert     rescale_to_unit([0.5, 1.0, 0.25]) == [0.0, 0.5, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1.0]) == [0.0]\nassert     rescale_to_unit([-1.0]) == [0.0]\nassert     rescale_to_unit([1.0, -1.0]) == [0.0, 0.0]\nassert     rescale_to_unit([-1.0, 1.0]) == [0.0, 0.0]\nassert     rescale_to_unit([0.0]) == [0.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([3, 6, 0, 7, 2]) == [0, 1, 0, 1, 0]\nassert     rescale_to_unit([3, 6, -3, 7, 2]) == [0, 1, 0, 1, 0]\nassert     rescale_to_unit([0.3, 0.6, 0, 7, 2]) == [0, 1, 0, 1, 0]\nassert     rescale_to_unit([-0.3, -0.6, 0, 7, 2]) == [0, 1, 0, 1, 0]\nassert     rescale_to_unit([-3, -6, 3, 7, 2]) == [0, 1, 0, 1, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([1.0, -1.0, 2.0, 3.0, 4.0]) == [0.0, 0.5, 1.0, 1.5, 1.0]\nassert     rescale_to_unit([-1.0, -0.5, -0.2, -0.1]) == [0.0, 0.0, 0.2, 0.4]\nassert     rescale_to_unit([0.0, 0.5, 1.0, 1.5, 1.0]) == [0.0, 0.5, 1.0, 1.5, 1.0]\nassert     rescale_to_unit([0.0, 0.0, 0.2, 0.4]) == [0.0, 0.0, 0.2, 0.4]\nassert     rescale_to_unit([0.0, 0.5, 1.0]) == [0.0, 0.5, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([0, 0.1, 0.4, 0.5, 0.9]) == [0, 0.4, 0.5, 0.9, 1]\nassert     rescale_to_unit([0, 1, 2, 4, 10]) == [0, 0.2, 0.4, 0.6, 1]\nassert     rescale_to_unit([0, 0.5, 0.8, 1]) == [0, 0.1, 0.2, 0.4]\nassert     rescale_to_unit([0.5, 0.8, 1, 0.8, 0.5]) == [0.1, 0.2, 0.4, 0.6, 0.4]\n\n\ndef apply_order_0_transformation(lst: List[float]) -> List[float]:\n    \"\"\" The main idea is to make all the numbers in the list start from 0 and end at 1\n    If there are at least two values in the list that are not within [0, 1], we return -1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5]) == [0, 1, 1.5, 2, 2.5]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0, 1, 1.5, 2, 2.5, 3]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7]) == [0, 1, 1.5, 2, 2.5, 3, 3.5]\nassert     rescale_to_unit([-1, -2, -3, -4, -5]) == [0, 0, 0, 0, 0]\nassert     rescale_to_unit([0, 1, 2, 3, 4, 5]) == [0, 1, 1.5, 2, 2.5, 3]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef mean_mismatch(numbers: List[float]) -> float:\n    \"\"\" Given a list of numbers, compute the average of the absolute difference of the numbers' mean\n    and their actual mean\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([0.25, 0.5, 1.0, 2.0, 3.0]) == [0.125, 0.25, 0.375, 0.5, 0.625]\nassert     rescale_to_unit([0.125, 0.125, 0.125, 0.125]) == [0.25, 0.25, 0.25, 0.25]\nassert     rescale_to_unit([-2.0, -1.0, 0.0, 1.0, 2.0, 3.0]) == [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]\nassert     rescale_to_unit([1.0, 1.0, 1.0, 1.0, 1.0]) == [1.0, 1.0, 1.0, 1.0, 1.0]\nassert     rescale_to_unit([0.0, 0.0, 0.0, 0.0]) == [0.0, 0.0, 0.0, 0.0]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == filter_integers([1, 2, 'a', 4, 5, 6, 7, 8, 9, 10])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == filter_integers([1, 2, 'a', 'b', 4, 5, 6, 7, 8, 9, 10])\nassert     [1, 2, 3, 'a', 4, 5, 6, 7, 8, 9, 10] == filter_integers([1, 2, 'a', 'b', 4, 5, 6, 7, 8, 9, 10])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 'a', 'b'] == filter_integers([1, 2, 'a', 4, 5, 6, 7, 8, 9, 'b', 10])\n\ndef filter_integers_with_strings(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers,\n    and each value is expected to be a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_integers([1, \"2\", \"3\", 4, 5, \"6\", 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([\"1\", 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_integers(['a', 'b', 'c', 'd', '1', '2', '3', '4', '5']) == [1, 2, 3, 4, 5]\nassert     filter_integers(['a', 'b', 'c', 'd', '0', '1', '2', '3', '4', '5']) == [0, 1, 2, 3, 4, 5]\nassert     filter_integers(['a', 'b', 'c', 'd', '-1', '-2', '-3', '-4', '-5']) == [-1, -2, -3, -4, -5]\nassert     filter_integers(['1', '2', '3', '4', '5']) == [1, 2, 3, 4, 5]\nassert     filter_integers([]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     list(filter_integers(['a', 2, 2.2, True, None, True])) == [2, 2.2, True]\nassert list(filter_integers([1, 2, 3, 4])) == [1, 2, 3, 4]\nassert list(filter_integers([1, 'a', 3, 4])) == [1, 3, 4]\nassert list(filter_integers([])) == []\nassert list(filter_integers([1, 2, 3, 4, 5])) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [10, '10', 10.5, '10.5', [1, 2, 3], (1, 2, 3)] == filter_integers(\n    [10, '10', 10.5, '10.5', [1, 2, 3], (1, 2, 3)]\n    )\nprint('filter_integers passed')\n\ndef filter_only_positive_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for positive integers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all(isinstance(x, int) for x in filter_integers([1,2,3,4,5,6]))\nassert     all(isinstance(x, int) for x in filter_integers([\"1\",2,3,4,5,6]))\nassert     all(isinstance(x, int) for x in filter_integers([1,\"2\",3,4,5,6]))\nassert     all(isinstance(x, int) for x in filter_integers([1,2,\"3\",4,5,6]))\nassert     all(isinstance(x, int) for x in filter_integers([1,\"2\",3,4,\"5\",6]))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_integers([1, 2, 3, \"a\", \"abc\"]) == [1, 2, 3]\nassert     filter_integers([\"1\", 2, 3, \"a\", \"abc\"]) == [1, 2, 3]\nassert     filter_integers([1, \"a\", \"abc\"]) == [1]\nassert     filter_integers([\"1\", 2, \"a\", \"abc\"]) == [\"1\", 2, \"abc\"]\nassert     filter_integers([\"1\", \"a\", \"abc\"]) == [\"1\"]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7] == filter_integers([1, 2, '3', 4, '5', 6, 7])\nassert     [1, 2, 3, 4, 5, 6, 7] == filter_integers(['1', '2', '3', 4, '5', 6, 7])\nassert     [1, 2, 3, 4, 5, 6, 7] == filter_integers(['1', 2, '3', 4, '5', 6, 7])\nassert     [1, 2, 3, 4, 5, 6, 7] == filter_integers([1, '2', '3', 4, '5', 6, 7])\nassert     [1, 2, 3, 4, 5, 6, 7] == filter_integers([1, '2', '3', 4, '5', 6, 7])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1] == filter_integers([1])\nassert     [1, 2, 3] == filter_integers([1, '2', 3])\nassert     [1, 2, 3] == filter_integers(['1', '2', 3])\nassert     [1, 2, 3] == filter_integers([1.0, 2.0, 3.0])\nassert     [1, 2, 3] == filter_integers([1, 2, 3.0])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_integers(['a', 'b', 'c', 'd', 1, 2, 3, '2', 'a', '2']) == [1, 2, 3, '2']\nassert     filter_integers(['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']) == []\nassert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\ndef sort_integers(values: List[Any]) -> List[Any]:\n    \"\"\" Sort given list of any python values only for integers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strlen(\"abc\") == 3\nassert     strlen(\"abcd\") == 4\nassert     strlen(\"abcdd\") == 5\nassert     strlen(\"abcddd\") == 6\nassert     strlen(\"abcdddd\") == 7\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     strlen(\"abc\") == 3\nassert     strlen(\"\") == 0\nassert     strlen(\"aaa\") == 3\nassert     strlen(\" \") == 1\nassert     strlen(\"\\n\") == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"a\" * 3) == 3\nassert     strlen(\"a\" * 300) == 300\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strlen(\"hello\")         == 5\nassert     strlen(\"hello world\")     == 10\nassert     strlen(\"helloworld\")     == 10\nassert     strlen(\"\")                 == 0\nassert     strlen(\"a\" * 100)         == 100\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strlen('') == 0\nassert     strlen('This is a string') == 13\nassert     strlen('This is a very long string') == 70\nassert     strlen('This is a very long string with symbols') == 70\n\n\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strlen('')    == 0\nassert     strlen('a')    == 1\nassert     strlen('ab') == 2\nassert     strlen('abc') == 3\nassert     strlen('abcdef') == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     strlen(\"hello world\") == 10\nassert     strlen(\"Hello\") == 5\nassert     strlen(\"This is a test\") == 13\n\ndef add_e(string: str) -> str:\n    \"\"\" Return the given string with the letter e added to the end\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     strlen('') == 0\nassert     strlen('a') == 1\nassert     strlen('abc') == 3\nassert     strlen('a'*10) == 10\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcde\") == 5\nassert     strlen(\"abcdef\") == 7\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcde\") == 5\nassert     strlen(\"abcdef\") == 6\nassert     strlen(\"abcdefgh\") == 9\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_divisor(4) == 2\nassert     largest_divisor(18) == 6\nassert     largest_divisor(21) == 3\nassert     largest_divisor(37) == 19\nassert     largest_divisor(46) == 19\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_divisor(3) == 1\nassert     largest_divisor(12) == 3\nassert     largest_divisor(15) == 3\nassert     largest_divisor(24) == 3\nassert     largest_divisor(49) == 7\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_divisor(20) == 2\nassert     largest_divisor(12) == 3\nassert     largest_divisor(15) == 3\nassert     largest_divisor(10) == 10\nassert     largest_divisor(8) == 8\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (largest_divisor(12) == 3)\nassert     (largest_divisor(6) == 3)\nassert     (largest_divisor(15) == 3)\nassert     (largest_divisor(7) == 1)\nassert     (largest_divisor(17) == 3)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_divisor(5) == 1\nassert     largest_divisor(6) == 2\nassert     largest_divisor(10) == 5\nassert     largest_divisor(12) == 12\nassert     largest_divisor(15) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_divisor(10) == 2\nassert     largest_divisor(12) == 2\nassert     largest_divisor(13) == 3\nassert     largest_divisor(14) == 2\nassert     largest_divisor(15) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_divisor(6) == 3\nassert     largest_divisor(12) == 4\nassert     largest_divisor(15) == 5\nassert     largest_divisor(1000) == 100\nassert     largest_divisor(100000) == 1000\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_divisor(28) == 7\nassert     largest_divisor(6) == 3\nassert     largest_divisor(5) == 1\nassert     largest_divisor(12) == 3\nassert     largest_divisor(7) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_divisor(7)     == 1\nassert     largest_divisor(10)     == 5\nassert     largest_divisor(13)     == 13\nassert     largest_divisor(100)     == 25\nassert     largest_divisor(50)     == 5\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     factorize(2*3*5) == [2,3,5]\nassert     factorize(12) == [2,2,3]\nassert     factorize(120) == [2,2,2,3,5]\nassert     factorize(222) == [2, 11]\nassert     factorize(1) == [1]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n: int) -> bool:\n    \"\"\" Checks if given integer is prime or not \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     factorize(2 * 3 * 5) == [2, 3, 5]\nassert     factorize(120) == [2, 2, 5, 3]\nassert     factorize(100) == [2, 5, 5]\nassert     factorize(54) == [2, 3, 3, 3]\nassert     factorize(16) == [2, 2, 2, 2]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == factorize(59)\nassert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == factorize(69)\nassert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == factorize(220)\nassert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == factorize(123456789)\nassert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] == factorize(1234567890123456789)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [2, 3, 5, 7, 11, 13, 17] == factorize(122)\nassert     [2, 3, 5, 7, 11, 13, 17] == factorize(30)\nassert     [2, 3, 5, 7, 11, 13, 17] == factorize(61)\nassert     [2, 3, 5, 7, 11, 13, 17] == factorize(84)\nassert     [2, 3, 5, 7, 11, 13, 17] == factorize(145)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     factorize(15) == [3, 5]\nassert     factorize(10) == [2, 5]\nassert     factorize(345) == [5, 11, 13]\nassert     factorize(11) == [11]\nassert     factorize(1) == []\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     factorize(120) ==     [2, 2, 3, 5]\nassert     factorize(3) ==     [3]\nassert     factorize(36) ==     [2, 2, 3, 3]\nassert     factorize(496) ==     [2, 2, 2, 2, 2, 3, 3]\nassert     factorize(123456789) ==     [123456789]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [2, 3, 5, 7, 11] == factorize(20)\nassert     [2, 3, 3, 11] == factorize(36)\nassert     [2, 3, 3, 5, 7] == factorize(70)\nassert     [2, 2, 2, 3, 5, 7] == factorize(14)\nassert     [2, 7, 11, 13] == factorize(100)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [2, 2, 5, 7, 11] == factorize(56)\nassert     [2, 2, 11, 7] == factorize(28)\nassert     [2, 17, 23] == factorize(190)\nassert     [17, 19] == factorize(11)\nassert     [19, 29, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199] == factorize(1583947)\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 3, 4, 4, 5] == remove_duplicates([1, 2, 3, 3, 4, 4, 5])\nassert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])\nassert     [1, 2, 3] == remove_duplicates([1, 2, 3])\nassert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([2]) == [2]\nassert     remove_duplicates([1, 1, 2]) == [1, 2]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_duplicates([1, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 7, 8, 9]) == [1, 2, 3, 4, 4, 5, 6, 6, 6, 6, 7, 8, 9]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 6, 7, 8, 9]) == [1, 2, 3, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 9]\n\ndef partition(s: str) -> List[str]:\n    \"\"\" Partition a string into two parts: the first part is all characters in the first position\n    (excluding the first character), the second part is all characters in the last position\n    (excluding the last character).\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 5, 7]) == [1, 2, 3, 4, 5, 7]\nassert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 1]) == [1]\n\n\ndef count_positives(numbers: List[int]) -> int:\n    \"\"\" Given a list of numbers, count the number of positive values in the list.\n    Also remove all negative values (and zeros) from the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 4, 5, 2, 3]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 2, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\n\ndef move_zeros(numbers: List[int]) -> List[int]:\n    \"\"\" Move zeros to the end of the array.\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 2, 3, 4, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\n\ndef move_zeros(array: List[int]) -> List[int]:\n    \"\"\" Given an array of integers, move all 0's to the end of the array and return the array.\n    Do not use any extra space, you must do this in place.\n    \"\"\"\n    # use two pointers: one pointing to the non-zero element and one pointing to the last non-zero element\n    i = 0\n    j = 0\n    while i < len(array):\n        if array[i]!= 0:\n            array[i], array[j] = array[j], array[i]\n            j += 1\n        i += 1\n    return array\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 1, 2, 3, 1]) == [1, 2, 3, 4]\nassert     remove_duplicates([5, 5, 5, 3, 1, 1, 2, 2, 3, 3, 3]) == [5, 3, 1, 2]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0]) == [0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nassert     remove_duplicates([]) == []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 5, 5, 5, 6, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 1, 2, 3, 3, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 5, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 1, 1, 1]) == [1]\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     flip_case('a') == 'A'\nassert     flip_case('b') == 'B'\nassert     flip_case('AB') == 'BA'\nassert     flip_case('c') == 'C'\nassert     flip_case('C') == 'c'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"aB\") == \"Ab\"\nassert     flip_case(\"AB\") == \"ab\"\nassert     flip_case(\"ab\") == \"Ab\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     flip_case(\"hello\") == \"HELLO\"\nassert     flip_case(\"Hello\") == \"HELLO\"\nassert     flip_case(\"HElLO\") == \"HELLO\"\nassert     flip_case(\"HELLO\") == \"hello\"\nassert     flip_case(\"HELLO \") == \"hello \"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"Ab\") == \"Ab\"\nassert     flip_case(\"abc\") == \"ABC\"\nassert     flip_case(\"ABC\") == \"abc\"\nassert     flip_case(\"aBc\") == \"ABc\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"C\") == \"c\"\nassert     flip_case(\"c\") == \"C\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"Z\") == \"z\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     flip_case('This is a test String')     == 'tHIS IS A tEST STRING'\nassert     flip_case('This is a test String')     == 'This is a test String'\nassert     flip_case('THIS IS A test String')     == 'This is a test String'\nassert     flip_case('ThIs Is A tEst StrIng')     == 'tHIS IS A tEST STRING'\nassert     flip_case('ThIs Is A tEst StrIng')     == 'thIs Is A tEst String'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     flip_case(\"aBiTTERCASE\") == \"ABIttErCASE\"\nassert     flip_case(\"Hiyaa\") == \"HiyaA\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"123456789\") == \"123456789\"\n\n\"\"\"\nBonus:\nWrite a function to check if a given string is a palindrome (reads the same forwards as backwards)\n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     flip_case('CamelCase') == 'CamelCase'\nassert     flip_case('camelCase') == 'camelCase'\nassert     flip_case('CamelCase') == 'CamelCase'\nassert     flip_case('Camel Case') == 'Camel Case'\nassert     flip_case('Camel') == 'Camel'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     flip_case(\"GOOGLE\") == \"gOOGLE\"\nassert     flip_case(\"flipcase\") == \"iPoSt\"\nassert     flip_case(\"FLiP\") == \"pLIP\"\nassert     flip_case(\"GooP\") == \"GooP\"\nassert     flip_case(\"gOoP\") == \"gOoP\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     flip_case('AbC') == 'aBC'\nassert     flip_case('abc') == 'ABC'\nassert     flip_case('ABC') == 'AbC'\nassert     flip_case('abC') == 'aBC'\nassert     flip_case('aBC') == 'abC'\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     concatenate([\"1\", \"2\", \"3\"]) == \"123\"\nassert     concatenate([\"A\", \"B\", \"C\"]) == \"ABC\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([]) == \"\"\nassert     concatenate([1, 2, 3]) == \"123\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     concatenate([\"foo\", \"bar\"]) == \"foobar\"\nassert     concatenate([\"foo\", \"\", \"bar\"]) == \"foobar\"\nassert     concatenate([\"foo\", \"bar\", \"baz\"]) == \"foobarbaz\"\nassert     concatenate([\"\", \"foo\", \"\", \"bar\", \"\", \"baz\"]) == \"fooobarbaz\"\nassert     concatenate([\"\", \"\", \"\", \"\"]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     concatenate([\"cat\", \"dog\", \"mouse\"])     == \"catdogmouse\"\nassert     concatenate([\"cat\", \"dog\"])         == \"catdog\"\nassert     concatenate([\"cat\"])             == \"cat\"\nassert     concatenate([])                     == \"\"\nassert     concatenate([\"\", \"\", \"\", \"\"])         == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     concatenate([]) == \"\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([\"a\", \"b\"]) == \"ab\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     concatenate([\"\", \"\"]) == \"\"\nassert     concatenate([\"\", \"hi\"]) == \"hi\"\nassert     concatenate([\"\", \"hi\", \"\"]) == \"hi\"\nassert     concatenate([\"\", \"hi\", \"there\"]) == \"hi there\"\n\ndef is_palindrome(word: str) -> bool:\n    \"\"\" Check if a string is a palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     concatenate([\"I\", \"love\", \"this\", \"course\"]) == \"I love this course\"\nassert     concatenate([\"I\", \"love\", \"this\", \"course\", \"very\"]) == \"I love this course very\"\nassert     concatenate([\"I\", \"love\", \"this\", \"course\", \"very\", \"poorly\"]) == \"I love this course very poorly\"\nassert     concatenate([\"I\", \"love\", \"this\", \"course\", \"very\", \"poorly\", \"totally\"]) == \"I love this course totally\"\nassert     concatenate([\"I\", \"love\", \"this\", \"course\", \"very\", \"poorly\", \"totally\", \"too\"]) == \"I love this course totally\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     concatenate([])        ==     \"\"\nassert     concatenate([\"\"])        ==     \"\"\nassert     concatenate([\"a\"])        ==     \"a\"\nassert     concatenate([\"ab\", \"c\"])    ==    \"abc\"\nassert     concatenate([\"a\", \"bc\", \"d\"])    ==    \"abcd\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"ab\", \"cd\"]) == \"abcd\"\nassert     concatenate([\"abc\", \"def\"]) == \"abcdef\"\nassert     concatenate([\"ab\", \"cd\", \"ef\"]) == \"abcdef\"\nassert     concatenate([\"ab\", \"cd\", \"ef\", \"ghi\"]) == \"abcdefghi\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     concatenate([\"hello\", \"world\"])\nassert     concatenate([\"\", \"\"])\nassert     concatenate([\"hello\", \" \", \"world\"])\nassert     concatenate([\"hello\", \"world\"])\nassert     concatenate([]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"1\", \"2\", \"3\"]) == \"123\"\nassert     concatenate([\"1\", \"3\", \"45\"]) == \"135\"\nassert     concatenate([\"123\", \"45\"]) == \"12345\"\nassert     concatenate([\"123\", \"45\", \"78\"]) == \"12345678\"\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         filter_by_prefix([], 'hi') == []\nassert         filter_by_prefix(['hi', 'a'], 'hi') == ['hi']\nassert         filter_by_prefix(['hi', 'hi', 'hello'], 'hi') == ['hi', 'hello']\nassert         filter_by_prefix(['hi', 'hi', 'hello'], 'hello') == ['hello']\nassert         filter_by_prefix(['hi', 'hi', 'hello'], 'h') == ['hi', 'hello']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_prefix(['cat', 'dog', 'bird', 'ostrich', 'whale', 'frog'], 'wo') == ['dog', 'whale']\nassert     filter_by_prefix(['cat', 'dog', 'bird', 'ostrich', 'whale', 'frog'], 'wo', False) == ['bird', 'ostrich']\n\n\ndef find_nth_occurrence(nth: int, target: str, string: str) -> int:\n    \"\"\" Find the nth occurrence of target in string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_prefix(['hello', 'cat', 'dog', 'banana', 'cuban','monet', 'cuban', 'dog', 'cuban', 'cuban'], 'cuban') == ['cuban', 'cuban', 'cuban']\nassert     filter_by_prefix(['hello', 'cat', 'dog', 'banana', 'cuban','monet', 'cuban', 'dog', 'cuban', 'cuban'], 'd') == []\nassert     filter_by_prefix(['hello', 'cat', 'dog', 'banana', 'cuban','monet', 'cuban', 'dog', 'cuban', 'cuban'], 'cu') == ['cuban', 'cuban', 'cuban']\nassert     filter_by_prefix([], 'b') == []\nassert     filter_by_prefix(['hello', 'cat', 'dog', 'banana', 'cuban','monet', 'cuban', 'dog', 'cuban', 'cuban'],'monet') == ['monet','monet','monet']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_prefix([\"aaa\", \"aa\", \"a\", \"bb\"], \"a\") == [\"aaa\", \"aa\"]\nassert filter_by_prefix([\"aaa\", \"aa\", \"a\", \"bb\"], \"bb\") == [\"bb\"]\nassert     filter_by_prefix([\"aaa\", \"aa\", \"a\", \"bb\"], \"c\") == []\nassert     filter_by_prefix([\"aaa\", \"aa\", \"a\", \"bb\"], \"\") == [\"aaa\", \"aa\", \"a\"]\nassert     filter_by_prefix([], \"\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [ \"hello\", \"world\" ]             == filter_by_prefix([\"hello\", \"world\"], \"h\")\nassert     [ \"hello\", \"world\" ]             == filter_by_prefix([\"hello\", \"world\"], \"l\")\nassert     [ \"hello\", \"world\" ]             == filter_by_prefix([\"hello\", \"world\"], \"o\")\nassert     [ \"hello\", \"world\" ]             == filter_by_prefix([\"hello\", \"world\"], \"w\")\nassert     [ \"hello\", \"world\" ]             == filter_by_prefix([\"hello\", \"world\"], \"w\")\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"abc\", \"abc\", \"abcdef\", \"abcdefg\", \"abcdefgh\"], \"ab\") == [\"abc\", \"abc\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]\nassert     filter_by_prefix([\"abc\", \"abcd\", \"abcd\", \"abcdef\", \"abcdefg\", \"abcdefgh\"], \"ab\") == [\"abc\", \"abcd\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]\nassert     filter_by_prefix([\"abc\", \"abc\", \"abcdef\", \"abcdefg\", \"abcdefgh\"], \"abcd\") == [\"abc\", \"abcd\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]\nassert     filter_by_prefix([\"abc\", \"abc\", \"abcdef\", \"abcdefg\", \"abcdefgh\"], \"abcdef\") == [\"abcdefg\", \"abcdefgh\"]\nassert     filter_by_prefix([\"abc\", \"abc\", \"abcdef\", \"abcdefg\", \"abcdefgh\"], \"abcdefgh\") == [\"abcdefgh\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_by_prefix([\"blah\", \"blah2\", \"blah3\"], \"blah\") == [\"blah\", \"blah2\"]\nassert     filter_by_prefix([\"blah\", \"blah2\", \"blah3\"], \"blah2\") == [\"blah2\"]\nassert     filter_by_prefix([\"blah\", \"blah2\", \"blah3\"], \"blah4\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['test', 'to', 'be', 'nested'], 'to') == ['to']\nassert     filter_by_prefix(['test', 'to', 'be', 'nested'], 'not') == ['not', 'to', 'be', 'nested']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'a') == ['a', 'b', 'c']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'z') == ['a', 'b', 'c']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'aa') == ['a', 'b']\n\n\ndef filter_by_postfix(strings: List[str], postfix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given postfix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c'], 'a') == ['a']\nassert     filter_by_prefix(['a', 'b', 'c'], 'b') == ['b']\nassert     filter_by_prefix(['a', 'b', 'c'], 'c') == ['c']\nassert     filter_by_prefix(['a', 'b', 'c'], 'd') == []\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'a') == ['a', 'b', 'c']\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, 3, 4, 5]) == [2, 3, 4, 5]\nassert get_positive([1, -2, 3, 4, 5]) == [2, 3, 4, 5]\nassert get_positive([1, -2, 3, -4, 5]) == [2, 3, -4, 5]\nassert get_positive([-1, -2, -3, -4, -5]) == [-2, -3, -4, -5]\nassert get_positive([0, 0, 0, 0, 0]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_positive([2, 3, -1, 4, -5]) == [2, 3, 4]\nassert     get_positive([-3, -1, -4, -5]) == []\n\ndef get_sum_of_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]\nassert get_positive([-1,-2,3,4,5]) == [1,2,3,4,5]\nassert get_positive([1,-2,3,4,-5]) == [1]\nassert get_positive([]) == []"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_positive([-1, 2, -3, 4, 5]) == [2, 4, 5]\nassert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     get_positive([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert     get_positive([1, 2, 3, 4, 5, -6]) == [1, 2, 3, 4, 5]\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_positive([1, -2, 3, 4, 5]) == [1, 3, 5]\nassert     get_positive([-3, -1, 0, 1, 2, 3]) == [1, 2, 3]\nassert     get_positive([-1, -2, -3]) == []\nassert     get_positive([]) == []\nassert     get_positive([-1, 0, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         [1, 2, 3]                 == get_positive([1, -2, 3, -4, 5])\nassert         [1, 2, 3]                 == get_positive([-1, 2, -3])\nassert         []                         == get_positive([])\nassert         []                         == get_positive([1, 2, -3, 4, -5, 6])"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_positive([-1, 2, 3, -4, 5]) == [2, 3, 5]\nassert     get_positive([1, 2, 3, 0, 4, -5]) == [1, 2, 3, 4]\nassert     get_positive([-5, -4, -3, -2, -1]) == []\nassert     get_positive([]) == []\n\n\ndef sum_of_first_n_positive_numbers(n: int):\n    \"\"\"Return the sum of the first n positive numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_positive([1, 2, 3, 4, 5]) == [2, 3, 4, 5], 'incorrect'\nassert     get_positive([-1, 2, 3, -4, 5]) == [2, 3, -4, 5], 'incorrect'\nassert     get_positive([1, -2, 3, -4, 5]) == [1, 3, 5], 'incorrect'\nassert     get_positive([]) == [], 'incorrect'\nassert     get_positive([-1, 0, 1, 0, -10, 10]) == [1, 10], 'incorrect'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_positive([1,-2,3,-4,5]) == [1,-2,3]\nassert     get_positive([-1,-2,3,-4,5]) == [3,-4,5]\nassert     get_positive([1,2,3,-4,5]) == [1,2,3]\nassert     get_positive([-1,-2,-3,-4,-5]) == [-5]\nassert     get_positive([]) == []"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_positive([1,2,-3,4,5,-6,7]) == [1,2,4,5,7]\nassert     get_positive([1,-2,-3,4,5,-6,7]) == [1,2,4,5,7]\nassert     get_positive([-1,-2,-3,4,5,-6,7]) == [1,2,4,5,7]\nassert     get_positive([]) == []\n\nprint(\"Passed. 4.\")\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_prime(0) == False, '0 is not prime'\nassert     is_prime(1) == False, '1 is not prime'\nassert     is_prime(2) == True, '2 is prime'\nassert     is_prime(17) == True, '17 is prime'\nassert     is_prime(9) == False, '9 is not prime'\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\nassert     is_prime(7) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_prime(11) == False\nassert is_prime(25) == True\nassert     is_prime(31) == False\nassert     is_prime(1) == False\nassert is_prime(0) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_prime(2)\nassert     not is_prime(1)\nassert     is_prime(3)\nassert     not is_prime(4)\nassert     is_prime(5)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(11) == True\nassert     is_prime(1000) == False\nassert     is_prime(24) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(10) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_prime(7) is True\nassert is_prime(2) is True\nassert     is_prime(9) is False\nassert     is_prime(11) is True\nassert is_prime(101) is False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_prime(1)    == False\nassert     is_prime(2)    == True\nassert     is_prime(3)    == True\nassert     is_prime(17)    == True\nassert     is_prime(34)    == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(5) == True\nassert     is_prime(7) == True\nassert     is_prime(11) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_prime(13) is True\nassert     is_prime(17) is True\nassert     is_prime(37) is True\nassert     is_prime(41) is False\n\ndef run_for_loop():\n    \"\"\"\n    For loop as a function that return a list of numbers\n    \"\"\"\n    return [n for n in range(5)]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     poly([1, 1, 1, 1], 1) == 0\nassert     poly([1, 2, 3, 4], 1) == 0\nassert     poly([1, 2, 3, 4, 5], 1) == 0\nassert     poly([1, 2, 3, 4, 5, 6], 1) == 0\nassert     poly([1, 2, 3, 4, 5, 6, 7], 1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     poly([1, 2, -1, 2], -2) == -2\nassert     poly([1, -2, 1, 2], -2) == -4\nassert     poly([0, 0, 0], 1) == 0\nassert     poly([0, 0, -1], 1) == 1\nassert     poly([1, 2, 3], 4) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     poly([1, -2, 3], -1) == 0\nassert     poly([1, -2, 3], 0) == 0\nassert     poly([1, -2, 3], 1) == 2\nassert     poly([1, -2, 3], 2) == 3\nassert     poly([1, -2, 3], 3) == 3\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     poly([-2, 1], 0) == -1\nassert     poly([-1, 1], 0) == 1\nassert     poly([1, 2], 0) == 2\nassert     poly([1, 1, 1], 0) == 1\nassert     poly([-1, 1, 1], 0) == -1\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     poly([1, 2, 3], 2) == -2\nassert     poly([-1, -2, -3], -2) == -6\nassert     poly([1, -2, 3], -2) == -6\nassert     poly([1, 2, -3], -2) == -6\nassert     poly([1, -2, -3], -2) == -6\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_zero([1, 2, 3]) == 1\nassert     find_zero([-1, 2, 3]) == -1\nassert     find_zero([1, 2, -3]) == -1\nassert     find_zero([-1, -2, -3]) == 1\nassert     find_zero([1, -2, 3]) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     poly([1, 0, -2, 3], 0) == 0\nassert     poly([1, 2, -3, 4], 0) == 0\nassert     poly([1, 0, -2, 0], 0) == 0\nassert     poly([1, -2, 3, 0], 0) == 0\nassert     poly([1, -2, 3, 0], -1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     poly([1,1], 0) == 1\nassert     poly([1,1], 1) == 1\nassert     poly([1,-1], 0) == -1\nassert     poly([1,1], 1.5) == -0.5\nassert     poly([1,1], 0.5) == 0.5\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef polynomial(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef roots(xs: list):\n    \"\"\"\n    Returns a list of roots of polynomial with coefficients xs.\n    The polynomial with coefficients xs is of the form:\n        f(x) = a_0 + a_1 * x + a_2 * x^2 +... a_n * x^n\n    We solve the polynomial to find its roots and return them in the list.\n    \"\"\"\n    n = len(xs)\n    # just to be safe\n    if n == 0:\n        return []\n    # check the correctness of the list\n    for i in range(n):\n        assert abs(xs[i]) < 1.0\n    # transform xs to ys\n    ys = []\n    for i in range(n):\n        ys.append(xs[i])\n    for i in range(n):\n        ys[i] *= i\n    # solve the polynomial\n    a = [1.0]\n    for i in range(n):\n        a.append(ys[i])\n    a.reverse()\n    c = [0]\n    for i in range(n):\n        c.append(a[i + 1])\n    c.reverse()\n    d = 0\n    for i in range(n):\n        d += c[i] * xs[i]\n    d /= a[0]\n    roots = []\n    for i in range(n):\n        if a[i + 1] == 0:\n            continue\n        x = -c[i] / a[i + 1]\n        roots.append(x)\n    return roots\n\n\ndef line_intersection(line1: tuple, line2: tuple):\n    \"\"\"\n    Returns the intersection point of two lines.\n    Both lines are defined by their start and end points.\n    \"\"\"\n    x1, y1, x2, y2 = line1\n    x3, y3, x4, y4 = line2\n    det = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)\n    if det == 0:\n        return None\n    # find intersection point\n    s = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4)\n    t = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4)\n    return [s / det, t / det]\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     poly([1,2,3], 0) == 0\nassert     poly([1,2,3], 1) == 1\nassert     poly([1,2,3], 2) == 1\nassert     poly([1,2,3], 3) == 1\nassert     poly([1,2,3], 4) == 1\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (sort_third(['1', '2', '3', '5', '7']) == ['1', '2', '5', '3', '7']), \"test1 for the function sort_third\"\nassert     (sort_third(['1', '3', '5', '7']) == ['1', '3', '5', '7']), \"test2 for the function sort_third\"\nassert     (sort_third(['1', '3', '7', '5']) == ['1', '3', '5', '7']), \"test3 for the function sort_third\"\nassert     (sort_third(['1', '3', '5', '7', '9']) == ['1', '3', '5', '7', '9']), \"test4 for the function sort_third\"\nassert     (sort_third([]) == []), \"test5 for the function sort_third\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_third(['hi', 'bob', 'carl', 'dee', 'fred', 'alice']) == ['hi', 'bob', 'carl', 'dee', 'fred', 'alice']\nassert sort_third(['3', '5', '2', '7', '1', '9']) == ['1', '2', '3', '5', '7', '9']\nassert sort_third([]) == []\nassert sort_third(['a', 'bb', 'ccc', 'dddd', 'e']) == ['a', 'bb', 'ccc', 'dddd', 'e']\nassert sort_third([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         sort_third([1,2,3]) == [2,3,1], \"error\"\nassert         sort_third([1,4,6,7,8,9]) == [4,7,8,9,1,6], \"error\"\nassert         sort_third([1,2,3,4]) == [1,3,2,4], \"error\"\nassert         sort_third([3,2,1]) == [1,2,3], \"error\"\nassert         sort_third([]) == [], \"error\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 3, 2, 4, 5]\nassert     sort_third([1, 3, 2, 4, 5]) == [1, 3, 2, 4, 5]\nassert     sort_third([3, 1, 2, 4, 5]) == [1, 3, 2, 4, 5]\nassert     sort_third([6, 3, 2, 4, 5]) == [3, 6, 2, 4, 5]\nassert     sort_third([1, 3, 2, 4, 5, 6]) == [1, 3, 2, 4, 5, 6]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 6, 7, 8, 9]\nassert     sort_third([4, 3, 5, 6, 7, 8, 9]) == [4, 5, 6, 7, 8, 9]\nassert     sort_third([1, 3, 5, 6, 7, 8, 9]) == [1, 3, 5, 6, 7, 8, 9]\nassert     sort_third([5, 3, 4, 1, 8, 7, 9]) == [5, 4, 1, 3, 7, 8, 9]\nassert     sort_third([9, 3, 8, 2, 1, 7, 6]) == [9, 3, 8, 2, 1, 7, 6]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_third([1,2,3,4,5]) == [1,2,4,5,3]\nassert     sort_third([3,4,5,1,2]) == [1,2,3,4,5]\nassert     sort_third([6,7,8,9]) == [6,7,8,9]\nassert     sort_third([]) == []\nassert     sort_third([6,7,8,9]) == [6,7,8,9]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_third([0,3,1,9,4,2,8,7]) == [0,9,4,2,8,7,3,1]\nassert     sort_third([]) == []\nassert     sort_third([7]) == [7]\nassert     sort_third([3,3,3,3,3,3,3,3,3,3]) == [3,3,3,3,3,3,3,3,3,3]\nassert     sort_third([3,3,3,3,3,3,3,3,3,2]) == [3,3,3,3,3,3,3,3,3,2]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [i for i in sort_third([3,3,2,1,0,0])] == [0,0,1,2,3,3]\nassert     [i for i in sort_third([5,4,3,2,1,0])] == [0,1,2,3,4,5]\nassert     [i for i in sort_third([7,6,5,4,3,2,1,0])] == [0,1,2,3,4,5,6,7]\nassert     [i for i in sort_third([9,8,7,6,5,4,3,2,1,0])] == [0,1,2,3,4,5,6,7,8,9]\nassert     [i for i in sort_third([10,9,8,7,6,5,4,3,2,1,0])] == [0,1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_third([0, 1, 2, 4, 3]) == [0, 1, 3, 4, 2]\nassert     sort_third([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\nassert     sort_third([5, 6, 7, 8, 9]) == [5, 6, 7, 8, 9]\nassert     sort_third([]) == []\nassert     sort_third([2]) == [2]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_third([]) == []\nassert     sort_third([1]) == [1]\nassert     sort_third([1,2]) == [2]\nassert     sort_third([1,2,3]) == [1,3]\nassert     sort_third([1,2,3,4]) == [1,2,4]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique([1,2,3,1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     unique([1,1,1,1,1,1,1,1,1,1,1]) == [1]\n\ndef count(elem: object, l: list) -> int:\n    \"\"\"Count the number of times an element appears in a list\n    \"\"\"\n    return 0\n\nassert count(1, [1,2,3,4,5,6,7,8,9]) == 2\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique([1,2,3,3,3,4,4,4,4,4,5,6]) == [1, 2, 3, 4, 5, 6]\nassert     unique([1,2,1,2,1,2,1,1]) == [1, 2]\nassert     unique([]) == []\nassert     unique([-1,-1,-1,0,0,0,1,1,1,1,1]) == [-1, 0, 1]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sorted(unique([1, 1, 2, 2, 3, 3, 4, 5, 6])) == [1, 2, 3, 4, 5, 6]\nassert     sorted(unique([1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3])) == [1, 2, 3]\nassert     sorted(unique([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])) == [1, 2, 3]\nassert     sorted(unique([1, 2, 3, 1, 2, 3, 1, 2, 3])) == [1, 2, 3]\nassert     sorted(unique([1, 2, 3, 1, 2, 3, 1, 2, 3])) == [1, 2, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique([1,1,2,2,2,3,3,3,4,5]) == [1,2,3,4,5]\nassert     unique([1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,5]) == [1,2,3,4,5]\nassert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1,1,2,2,2,2,3,3,3,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique([1,1,1,2,3,3,3,4,5]) == [1,2,3,4,5]\nassert     unique([\"a\", \"b\", \"c\", \"a\", \"b\", \"a\"]) == [\"a\", \"b\", \"c\"]\n\ndef count(l: list, x: object) -> int:\n    \"\"\"Count the number of occurrences of a given element in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique([1, 3, 1, 2, 3, 2, 1, 3]) == [1, 2, 3]\nassert     unique([1, 2, 3, 3, 4, 5, 6, 1]) == [1, 2, 3, 4, 5, 6]\nassert     unique([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 2, 3, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique([1,2,3,1,2,3]) == [1,2,3]\nassert     unique([1,2,3,4]) == [1,2,3,4]\nassert     unique([1,1,1]) == [1]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique([1,2,3,3,4,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,1,1,2,3,3,4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique([1,1,2,2,3,3,4,5]) == [1,2,3,4,5]\nassert     unique([1,1,1,1,1,1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique([]) == []\nassert     unique([1,1,1,1,2,3]) == [1,2,3]\nassert     unique([1,1,1,1,2,3,3,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique(range(10)) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert unique([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\nassert unique([1, 1, 1, 1, 2, 2, 2, 3, 3, 3]) == [1, 2, 3]\nassert unique(['a', 'b', 'a', 'c', 'b', 'a']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3,-4,5]) == 3\nassert     max_element([1]) == 1\nassert     max_element([]) == None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([1, 5, -4, -3]) == 5\nassert     max_element([1]) == 1\nassert     max_element([]) == None\nassert     max_element([1, 5, -4, -3]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_element([1, 2, 3, 4, 5, 6]) == 6\nassert     max_element([1, 2, -3, -4, -5, -6]) == -3\nassert     max_element([]) == None\nassert     max_element([1]) == 1\nassert     max_element([1, 2]) == 2\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_element([3,6,5,7,2,1,9]) == 9\nassert     max_element([]) == None\nassert     max_element([99,2,3,4,5,6,7]) == 99\nassert     max_element([-99,-2,-3,-4,-5,-6,-7]) == -2\nassert     max_element([99,-2,-3,-4,-5,-6,-7]) == 99\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_element([-2, -1, 0, 1, 2]) == 2\nassert     max_element([2, -1, 0, 1, 2]) == 2\nassert     max_element([0, -1, 0, 1, 2]) == 2\nassert     max_element([-1, 0, 1, 2, 0]) == 2\nassert     max_element([1, 2, 0, 0, -1]) == 2\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([3, 1, 2]) == 3\nassert     max_element([3, 4, 2, 1]) == 4\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_element([2,3,4,5]) == 5\nassert     max_element([-2,3,4,5]) == 5\nassert     max_element([]) == None\nassert     max_element([-1,-2,-3]) == -1\nassert     max_element([1.0,2.0,3.0]) == 3.0\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_element([1,2,3,4]) == 4\nassert     max_element([]) == None\nassert     max_element([-2, -3, -4]) == -2\nassert     max_element([0, -2, -3, -4]) == 0\nassert     max_element([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([-1, -2, -3, -4, -5]) == -1\nassert     max_element([-2, -3, -4, -5, -6]) == -2\nassert     max_element([-1, -2, -3, -4, -5, -6]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([-1, -2, -3]) == -1\nassert     max_element([-1, -2, -3, 0, 1, 2, 3]) == 3\nassert     max_element([-1, -2, -3, 0, 1, 2, 3, 4]) == 4\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fizz_buzz(4) == 2\nassert fizz_buzz(7) == 0\nassert fizz_buzz(11) == 1\nassert fizz_buzz(13) == 2\nassert fizz_buzz(15) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fizz_buzz(21) == 2\nassert     fizz_buzz(22) == 0\nassert     fizz_buzz(17) == 3\nassert     fizz_buzz(14) == 0\nassert     fizz_buzz(25) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert iz_fizz_buzz(100) == 1\nassert iz_fizz_buzz(1000) == 4\nassert iz_fizz_buzz(1500) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fizz_buzz(1) == 1\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(7) == 1\nassert     fizz_buzz(11) == 1\nassert     fizz_buzz(13) == 2\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fizz_buzz(100) == 2\nassert fizz_buzz(101) == 0\nassert fizz_buzz(102) == 0\nassert fizz_buzz(103) == 0\nassert fizz_buzz(104) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fizz_buzz(13) == 6\nassert fizz_buzz(15) == 4\nassert fizz_buzz(17) == 1\nassert fizz_buzz(100) == 18\n\ndef fizz_buzz_split(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fizz_buzz(10) == 2\nassert     fizz_buzz(15) == 4\nassert     fizz_buzz(100) == 20\nassert     fizz_buzz(200) == 60\nassert     fizz_buzz(1000) == 750\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fizz_buzz(13) == 1\nassert     fizz_buzz(15) == 1\nassert     fizz_buzz(21) == 1\nassert     fizz_buzz(42) == 0\nassert     fizz_buzz(100) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (fizz_buzz(100) == 40)\nassert     (fizz_buzz(5) == 0)\nassert     (fizz_buzz(15) == 4)\nassert     (fizz_buzz(15) == 4)\nassert     (fizz_buzz(5) == 0)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fizz_buzz(100) == 29\nassert     fizz_buzz(200) == 10\nassert     fizz_buzz(300) == 0\nassert     fizz_buzz(400) == 1\nassert     fizz_buzz(300) == 0\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [1, 2, 3, 4, 5] == sort_even([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == sort_even([1, 2, 5, 4, 3])\nassert     [1, 2, 3, 4, 5] == sort_even([5, 4, 3, 1, 2])\nassert     [1, 2, 3, 4, 5] == sort_even([5, 4, 3, 1, 2])\nassert     [1, 2, 3, 4, 5] == sort_even([1, 2, 3, 5, 4])\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_even([3, 2, 7, 1]) == [3, 2, 1, 7]\nassert     sort_even([9,8,7,6]) == [9,7,6,8]\nassert     sort_even([7,6,5,4,3,2,1]) == [7,6,5,4,3,2,1]\nassert     sort_even([1,2,3]) == [1,2,3]\nassert     sort_even([3,2,1]) == [3,2,1]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_even([1,2,3,4,5]) == [2,4,5,1,3], \"test 1 failed\"\nassert     sort_even([3,6,7,8,9]) == [6,8,9,3,7], \"test 2 failed\"\nassert     sort_even([5,6,7,8,9]) == [6,8,9,5,7], \"test 3 failed\"\nassert     sort_even([2,4,6,8,10]) == [4,6,8,2,10], \"test 4 failed\"\nassert     sort_even([7,2,8,4,3]) == [2,4,3,7,8], \"test 5 failed\"\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_even(list('CABEDR')) == list('CABEDR')\nassert     sort_even(list('ABCDE')) == list('ACBED')\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,9,11,2,4,6,8,10]\nassert     sort_even([0,1,2,3,4,5,6,7,8,9,10]) == [0,2,4,6,8,10,1,3,5,7,9]\nassert     sort_even([1,2,2,3,4,5,6,7,8,9,10]) == [1,2,2,3,4,5,6,7,8,9,10]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_even([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7, 2, 4, 6]\nassert sort_even([5, 3, 2, 8, 1, 4]) == [1, 3, 2, 5, 4, 8]\nassert sort_even([5, 3, 2, 8, 1, 4, 0, 6]) == [1, 3, 2, 5, 4, 8, 6, 0]\nassert sort_even([1, 2, 3, 4, 5]) == [1, 3, 5, 2, 4]\nassert sort_even([5, 3, 2, 8, 1, 4, 0, 6]) == [1, 3, 2, 5, 4, 8, 6, 0]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_even([1,2,3,4,5,6,7]) == [1, 3, 5, 7, 2, 4, 6]\nassert     sort_even([2,4,6,8,10,12]) == [2, 4, 6, 8, 10, 12]\nassert     sort_even([4,5,7]) == [4, 5, 7]\nassert     sort_even([4,5]) == [4, 5]\nassert     sort_even([4]) == [4]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_even([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 2, 4, 6, 1, 3, 5, 7]\nassert     sort_even([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 2, 4, 6, 1, 3, 5, 7]\nassert     sort_even([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert     sort_even([0, 0]) == [0, 0]\nassert     sort_even([]) == []\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_even([0, 1, 2, 3, 4, 5]) == [0, 1, 3, 4, 5, 2]\nassert     sort_even([3, 2, 1, 0, 5, 4]) == [0, 1, 2, 3, 4, 5]\nassert     sort_even([2, 1, 3, 0, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     sort_even([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     sort_even([1, 2, 3, 4, 5, 0]) == [0, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_even([1,2,3,4,5]) == [1,2,4,3,5]\nassert     sort_even([0,1,2,3,4,5]) == [0,2,4,1,3,5]\nassert     sort_even([9,2,3,4,5,6]) == [2,4,6,9,5,3]\nassert     sort_even([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode_cyclic(\"bqc\") == \"abcd\"\nassert     encode_cyclic(\"abcd\") == \"bqc\"\nassert     encode_cyclic(\"abcdqwe\") == \"abcd\"\nassert     encode_cyclic(\"abcdedcba\") == \"dedcba\"\nassert     encode_cyclic(\"dedcba\") == \"abcdedcba\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcdefgh\")) == \"abcdefgh\"\nassert     decode_cyclic(encode_cyclic(\"abbccddeeffgg\")) == \"abbccddeeffgg\"\nassert     decode_cyclic(encode_cyclic(\"aaabbccddeeffgg\")) == \"aaabbccddeeffgg\"\nassert     decode_cyclic(encode_cyclic(\"aaaabbccddeeffgg\")) == \"aaaabbccddeeffgg\"\nassert     decode_cyclic(encode_cyclic(\"aabbccddeeffgg\")) == \"aabbccddeeffgg\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decode_cyclic(\"abc\") == \"abc\"\nassert     decode_cyclic(\"aabc\") == \"abc\"\nassert     decode_cyclic(\"abcddccd\") == \"abcdccd\"\nassert     decode_cyclic(\"abcccdcdd\") == \"abccdcd\"\nassert     decode_cyclic(\"abcddccdeee\") == \"abcdccde\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode_cyclic(\"ABCD\") == \"ABCD\"\nassert     encode_cyclic(\"ABD\") == \"ABD\"\nassert     encode_cyclic(\"AECD\") == \"AED\"\nassert     encode_cyclic(\"ABD\") == \"ABD\"\nassert     encode_cyclic(\"AB\") == \"AB\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decode_cyclic(\"KcjhYTHLHQFhIjtS\") == \"IbxbqCkKjFhIjtS\"\nassert     decode_cyclic(\"KcjhYTHLHQFhIjtS\") == \"IbxbqCkKjFhIjtS\"\nassert     decode_cyclic(\"VwZnLdKsBVqxJp\") == \"WbVjZldKvBVqxJp\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decode_cyclic(encode_cyclic(\"AB\")) == \"AB\"\nassert     decode_cyclic(encode_cyclic(\"ABC\")) == \"ABC\"\nassert     decode_cyclic(encode_cyclic(\"ABXCD\")) == \"ABXCD\"\nassert     decode_cyclic(encode_cyclic(\"ABXCDX\")) == \"ABXCDX\"\nassert     decode_cyclic(encode_cyclic(\"ABXCDXA\")) == \"ABXCDXA\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         decode_cyclic(\"doctest\") == \"doctest\"\nassert         decode_cyclic(\"doctest\")!= \"doctest\"\nassert         decode_cyclic(\"doctest\") == decode_cyclic(\"doctest\")\nassert         decode_cyclic(\"aabcd\") == decode_cyclic(\"aabcd\")\nassert         decode_cyclic(\"aabcd\")!= decode_cyclic(\"caaab\")\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode_cyclic(\"A\") == \"AA\"\nassert     encode_cyclic(\"ABC\") == \"ABC\"\nassert     encode_cyclic(\"ABCD\") == \"ABCD\"\nassert     encode_cyclic(\"AB\") == \"ABA\"\nassert     encode_cyclic(\"\") == \"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encode_cyclic('abcdefghijklmnopqrstuvwxyz')     == 'abcdefghijklmnopqrstuvwxyz'\nassert     encode_cyclic('aaaaaabbbbbcccccdddddeeeeefffff')     == 'aaaaaabbbbbcccccdddddeeeeefffff'\nassert     encode_cyclic('aaaaaabbbbbcccccdddddeeeeefffff')     == 'aaaaaabbbbbcccccdddddeeeeefffff'\nassert     encode_cyclic('aaaaaabbbbbcccccdddddeeeeefffff')     == 'aaaaaabbbbbcccccdddddeeeeefffff'\nassert     encode_cyclic('aaaaaabbbbbcccccdddddeeeeefffff')     == 'aaaaaabbbbbcccccdddddeeeeefffff'\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode_cyclic(\"apple\") == \"ppaal\"\nassert     encode_cyclic(\"banana\") == \"nanaa\"\nassert     encode_cyclic(\"catharpic\") == \"tatr\"\nassert     encode_cyclic(\"deified\") == \"trdeie\"\nassert     encode_cyclic(\"mexico\") == \"coxit\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_fib(3) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009]\nassert     prime_fib(5) == [2, 3, 5, 8, 13, 21]\nassert     prime_fib(7) == [2, 3, 5, 7, 11, 17, 19]\nassert     prime_fib(11) == [2, 3, 5, 7, 11, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009]\nassert     prime_fib(13) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     isinstance(prime_fib(1), int)\nassert     isinstance(prime_fib(2), int)\nassert     isinstance(prime_fib(3), int)\nassert     isinstance(prime_fib(4), int)\nassert     isinstance(prime_fib(5), int)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_fib(7) == 5\nassert     prime_fib(10) == 17\nassert     prime_fib(11) == 29\nassert     prime_fib(12) == 47\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_fib(2) == \"5\"\nassert     prime_fib(3) == \"13\"\nassert     prime_fib(7) == \"29\"\nassert     prime_fib(10) == \"5\"\nassert     prime_fib(100) == \"5\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prime_fib(10) == 29\nassert     prime_fib(15) == 151\nassert     prime_fib(20) == 6765\nassert     prime_fib(50) == 28657\nassert     prime_fib(100) == 499947\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     3 == prime_fib(5)\nassert     5 == prime_fib(6)\nassert     9 == prime_fib(7)\nassert    15 == prime_fib(8)\nassert    30 == prime_fib(9)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prime_fib(2) == 1\nassert     prime_fib(3) == 1\nassert     prime_fib(4) == 2\nassert     prime_fib(5) == 2\nassert     prime_fib(6) == 3\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_fib(7) == 29\nassert     prime_fib(10) == 89\nassert     prime_fib(20) == 477\n\n\ndef prime_fib_old(n: int):\n    \"\"\"\n    prime_fib_old returns n-th number that is a Fibonacci number but is NOT prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([1, 1, 1, 1])\nassert     triples_sum_to_zero([1, -1, 1, 1])\nassert     triples_sum_to_zero([0, 1, 1, 1])\nassert     not triples_sum_to_zero([1, -1, 1, 1])\nassert     triples_sum_to_zero([0, 1, 1, 1])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([-10,-8,-5,-4,-2,0,2,4,6,8]) == True\nassert     triples_sum_to_zero([-10,-8,0,-5,-4,-2,0,2,4,6,8]) == False\nassert     triples_sum_to_zero([-10,-8,0,-5,0,-4,-2,0,2,4,6,8]) == False\nassert     triples_sum_to_zero([-10,-8,0,-5,0,-4,-2,0,2,4,6,8,-3]) == True\nassert     triples_sum_to_zero([-10,-8,0,-5,0,-4,-2,0,2,4,6,8,-3,-1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([0, -1, 2, -3, 1]) == True\nassert     triples_sum_to_zero([1, 2, -2, 1, 0]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0]) == True\nassert     triples_sum_to_zero([1, 2, -2]) == False\nassert     triples_sum_to_zero([1, 2, 0]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1]) == False\nassert     triples_sum_to_zero([1,2]) == False\nassert     triples_sum_to_zero([1,2,-2]) == True\nassert     triples_sum_to_zero([-1,-1,1]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([-2, -3, 4, -5, 1, 2, -7, 0, 9, 5]) == True\nassert     triples_sum_to_zero([-2, -3, 4, -5, 1, 2, -7, 0, 9, 1]) == False\nassert     triples_sum_to_zero([0, 0, 0, 0, 0, 0, 0, 0]) == True\nassert     triples_sum_to_zero([-2, -3, 4, -5, 1, 2, -7, 0]) == True\nassert     triples_sum_to_zero([-2, -3, 4, -5, 1, 2, -7, 0, 9, -5]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([3, 1, 2, -5, -4, 0, -2]) == True\nassert triples_sum_to_zero([1, 2, 3, -5, -4, 0, -2]) == False\nassert triples_sum_to_zero([0, 1, 2, -5, -4, 0, -2]) == False\nassert triples_sum_to_zero([3, 1, 2, -5, -4, 0, -2, 0]) == True\nassert triples_sum_to_zero([3, 1, 2, -5, -4, 0, -2, -3]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1]) == False\nassert     triples_sum_to_zero([1, -2, 3]) == False\nassert     triples_sum_to_zero([1, -2, 1]) == True\nassert     triples_sum_to_zero([0, -2, 1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([1,2,-2,-1])\nassert     not triples_sum_to_zero([1,2,1,-2,1])\nassert     not triples_sum_to_zero([1,2,3,4,-3])\nassert     triples_sum_to_zero([])\nassert     not triples_sum_to_zero([1,2,-2,-1])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, 4, 5, -6, -1, -5, -1, -1]) == True\nassert     triples_sum_to_zero([1, 2, 3, 4, 5, -6, -1, -2, -5, -1]) == False\nassert     triples_sum_to_zero([1, 2, 3, 4, 5, -6, -1, -2, -1, -2]) == True\n\ndef number_of_triples(l: list):\n    \"\"\"\n    number_of_triples takes a list of integers as an input.\n    it returns the number of triples that sum to zero.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, 3]) == True\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, -1]) == False\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, -1, -4]) == True\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, -1, -4, -2]) == False\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, -1, -4, -2, -1]) == False\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    Simulates n-1 races with n car.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     car_race_collision(10) == 6\nassert car_race_collision(20) == 10\nassert car_race_collision(100) == 100\nassert car_race_collision(1000) == 2500\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     car_race_collision(3) == 0, car_race_collision(3)\nassert     car_race_collision(4) == 1, car_race_collision(4)\nassert     car_race_collision(5) == 2, car_race_collision(5)\nassert     car_race_collision(6) == 3, car_race_collision(6)\nassert     car_race_collision(7) == 4, car_race_collision(7)\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 0\nassert     car_race_collision(10) == 1\nassert     car_race_collision(100) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     car_race_collision(n=3) == 0\nassert car_race_collision(n=3) == 0\nassert car_race_collision(n=5) == 1\nassert car_race_collision(n=5) == 1\nassert car_race_collision(n=10) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     car_race_collision(0) == 0\nassert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 2\nassert     car_race_collision(6) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     car_race_collision(4) == 6\nassert car_race_collision(10) == 12\nassert car_race_collision(100) == 126\nassert car_race_collision(1000) == 99876"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 3\nassert     car_race_collision(100) == 64\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([2, 3, 4]) == [3, 4, 5]\nassert     incr_list([3, 4, 5]) == [4, 5, 6]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     incr_list([1,2,3,4]) == [2,3,4,5]\nassert     incr_list([1]) == [2,1,2,1]\nassert     incr_list([1,1,1,1]) == [2,2,2,2]\nassert     incr_list([]) == [1]\nassert     incr_list([1,2,3]) == [2,3,4]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 3, 5]     == incr_list([1, 2, 3])\nassert     [1, 3, 5]     == incr_list([1, 2, 3, 4])\nassert     [1, 3, 5, 7] == incr_list([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     incr_list([1, 3, 5])    == [2, 4, 6]\nassert     incr_list([5, 8, 6])    == [6, 9, 7]\nassert     incr_list([0])         == [1]\nassert     incr_list([])         == []\nassert     incr_list([2])         == [3]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([2, 3, 4]) == [3, 4, 5]\nassert     incr_list([]) == []\nassert     incr_list([1]) == [2]\n\ndef add_nums_list(l1: list, l2: list):\n    \"\"\"Return a list with the sum of elements of l1 and l2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 2, 3] == incr_list([0, 0, 0])\nassert     [1, 2, 3] == incr_list([2, 2, 2])\nassert     [1, 2, 3] == incr_list([])\nassert     [1, 2, 3] == incr_list([1, 2, 3])\nassert     [2, 3, 4] == incr_list([1, 2, 3])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [incr_list(l) for l in [[1,2,3],[4,5,6],[7,8,9]]] == \\\n        [[2,3,4],[5,6,7],[8,9,10]]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([4,5,6]) == [5,6,7]\nassert     incr_list([7,8,9]) == [8,9,10]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\n\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\nassert     incr_list([1, -2, 3, -4, 5]) == [2, 0, 3, -4, 5]\nassert     incr_list([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6, 7]\nassert     incr_list([]) == []\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1, 2, 3, 4] == incr_list([1, 2, 3, 4])\nassert     [1, 2, 3, 4] == incr_list([1, 2, 3])\nassert     [1, 2, 3, 4] == incr_list([1, 2, 3])\nassert     [1, 2, 3, 4] == incr_list([1, 2, 3])\nassert     [1, 2, 3, 4] == incr_list([1, 2, 3])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1, -2, 3, -4, 5, -6, 7, 8, 9]) == True\nassert     pairs_sum_to_zero([1, -2, 3, -4, 5, -6, 7, -8]) == False\nassert     pairs_sum_to_zero([-1, -2, -3, -4, -5, -6, -7, -8]) == False\nassert     pairs_sum_to_zero([-1, -2, -3, -4, -5, -6, -7]) == True\nassert     pairs_sum_to_zero([-1, -2, -3, -4, -5, -6]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([1, -2, 3, 2, -5, -2, 4, 7, -8, -4, -2, 13, -7, -2, -3, -16, -8, 19, -12, 14, -4, -2, -6, -13, -12, -3, 1, -2, -2, -2, 6, -13, -4, -3, -6, -14, 19, -1, -9, -7, 17, -18, -9, -2, -8, -12, -8, -13, -4, 19, -7, -18, -5, -5, -9, -12, 19, -6, 19, 17, -10, -12, 17, -2, -1, -9, 19, -5, 14, -15, -1, -3, -2, -7, -10, 17, -18, -14, -12, -1, 1, -1, -1, -1, 1, -4, -10, -12, -19, -1, -8, -3, -9, -2, 19, -5, 19, -1, 1, -2, -17, -17, -2, 17, -18, -16, -17, -15, -2, -17, -4, -16, 19, -6, -18, -16, -1, -13, -2, -13, -1, -1, 1, -19, -14, -1, -12, 19, 17, -13, -10, -6, -1, -10, 19, -3, -18, -14, -5, -7, -17, -8, -1, -13, -5, 19, -12, -16, -15, 19, -4, -18, -11, -13, -12, -3, -11, -4, -8, 19, -1, -7, -16, -18, -15, 19, 19, -15, 19, -9, -10, -18, -13, 19, -12, -11, -18, -16, -18, -1, -11, -17, -11, -17, -9, -9, -16, -9, -13, -18, -1, -10, -18, -1, -19, -5, -16, -3, -9, -10, -18, -13, -14, -15, -8, -14, -3, -7, -11, -13, -14, -11, -4, -13, -3, -13, -11, -16, -15, -16, -9, -17, -16, 19, -1, -17, -10, -16, -9, -17, -1, -13, -17, -2, -15, -10, -18, -7, -14, -7, -11, -2, 19, -12, -1, -11, -12, -8, -13, -2, -15, -1, -9, -11, -9, -15, -16, -18, -2, -11, -18, -17, -8, -19, -11, -5, -17, -3, -10, -9, -13, -12, -17, -1, -15, -19, -16, -18, 19, -1, -16, -16, -12, -10, -11, -12, -11, 19, -1, -1, -3, -5, -7, -16, -16, -18, -12, -1, -17, -13, -14, -15, -11, -13, -14, -16, -18, -12, -5, -13, -16, -16, -15, -16, -13, -14, 19, -17, -18, -9, 19, -13, -14, -16, -14, -11, -11, -13, -10, 19, -13, -18, -15, -9, 19, -13, -15, -11, -11, -18, -19, -16, -12, -12, -17, -11, -14, -12, -16, -13, -11, -16, -12, "
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([1, 4, -1, 3, 2]) == True\nassert     pairs_sum_to_zero([1, 4, -1, 3, -2]) == False\nassert     pairs_sum_to_zero([-1, -2, -3, 4, 1]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    \"\"\"\n    Main code to test your solution\n    \"\"\"\n    # make a list of positive integers\n    test_list = [1, 3, -1, -2, 5]\n\n    # test your function\n    print \"The original list: {}\".format(test_list)\n    print \"The list after removing negative numbers: {}\".format(\n        remove_negatives(test_list))\n    print \"The list after removing duplicate elements: {}\".format(\n        remove_duplicates(test_list))\n\n    # test pairs sum to zero\n    print \"Does the list have pairs with sum to zero? {}\".format(\n        pairs_sum_to_zero(test_list))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ____________ == pairs_sum_to_zero([])\nassert ____________ == pairs_sum_to_zero([-5, 3, 1, -4, 2, -3, 4, -1, -2, -2, 0, 1, 2])\nassert ____________ == pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nassert ____________ == pairs_sum_to_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])\nassert ____________ == pairs_sum_to_zero([-2, -1, -1, 0, 1, 2, 2])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1]) == False\nassert     pairs_sum_to_zero([1, 2, 3]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -4]) == True\nassert     pairs_sum_to_zero([-1, 1, 3, 4]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -4]) == False\n\ndef fizz_buzz(n):\n    \"\"\"\n    fizz_buzz takes an integer as input.\n    it returns the fizz buzz number for the input if it is divisible by 3,\n    and the corresponding string if the number is divisible by 5.\n    If the number is divisible by both 3 and 5, the function returns the string 'FizzBuzz'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([1, -2, 3, -4, 5, -6, 7, 8, 9, -10, 11, -12]) == True\nassert     pairs_sum_to_zero([1, -2, 3, -4, 5, -6, 7, 8, 9, -10, 11]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, -8, 9, -10, 11, 12]) == False\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1, 1, 1, 1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([2, 3, 4, -1, 1]) == True\nassert     pairs_sum_to_zero([4, -1, 1, -2, 3]) == False\nassert     pairs_sum_to_zero([1, -2, 3, 4, 0]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -5, -2]) == True\n\ndef pairs_sum_to_k(l, k):\n    \"\"\"\n    pairs_sum_to_k takes a list of integers and a integer as inputs.\n    it returns True if there are two distinct elements in the list that\n    sum to k, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([5, -3, 8, -8, 4, -4, 1, -2, -5, -8])\nassert     pairs_sum_to_zero([0, -2, 4, -5, 7, 3, 0, -8, -4])\nassert     not pairs_sum_to_zero([1, -3, 5, 2, 1, 0, 2, -3])\nassert     not pairs_sum_to_zero([4, 4, 4, 4, 4, -4, -2, 4, 4])\n\nprint(\"tests passed\")"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef test_change_base():\n    assert change_base(10, 4) == '10'\n    assert change_base(10, 3) == '10'\n    assert change_base(10, 2) == '1010'\n    "
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     change_base(0,2) == \"0b0\"\nassert     change_base(3,2) == \"0b11\"\nassert     change_base(9,2) == \"0b1001\"\nassert     change_base(2,16) == \"0x4\"\nassert     change_base(10,16) == \"0xa\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     change_base(10, 4) == \"1010\"\nassert     change_base(10, 8) == \"1010\"\nassert     change_base(10, 16) == \"A\"\nassert     change_base(10, 17) == \"10A\"\nassert     change_base(10, 35) == \"10100010\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef main():\n    import sys\n    args = sys.argv\n    if len(args)!= 3:\n        print(\"Usage: \" + args[0] + \" x base\")\n        return\n    x, base = args[1:]\n    try:\n        x = int(x)\n    except ValueError:\n        print(\"Input x must be a number.\")\n        return\n    try:\n        base = int(base)\n    except ValueError:\n        print(\"Input base must be a number.\")\n        return\n    print(change_base(x, base))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     change_base(10,10) == '1'\nassert     change_base(5,10) == '5'\nassert     change_base(9,10) == '9'\nassert     change_base(1234,10) == '34'\nassert     change_base(15,10) == 'F'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     change_base(1234, 4) == '10011'\nassert     change_base(1234, 8) == '10100'\nassert     change_base(1234, 16) == '11100'\nassert     change_base(1234, 2) == '110011'\nassert     change_base(1234, 10) == '1234'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     change_base(123, 16) == 'c', 'error'\nassert     change_base(14, 16) == 'e', 'error'\nassert     change_base(16, 16) == '0', 'error'\nassert     change_base(16, 8) == '10', 'error'\nassert     change_base(16, 2) == '110', 'error'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef square_area(a):\n    \"\"\"Given side length of a square, return its area.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triangle_area(1, 2) == 0.5\nassert     triangle_area(3, 4) == 1\nassert     triangle_area(5, 7) == 1.0\nassert     triangle_area(9, 7) == 0.5\nassert     triangle_area(9, 8) == 0.5\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef rhombus_area(b, d):\n    \"\"\"Given base and height of a rhombus return area for rhombus.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef pentagon_area(a):\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(0, 0) == 0\nassert     triangle_area(1, 0) == 0\nassert     triangle_area(2, 1) == 0.5\nassert     triangle_area(10, 10) == 100\nassert     triangle_area(100, 10) == 100\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(3, 3) == 6\nassert     triangle_area(3, 3.1) == 6.1\nassert     triangle_area(3, -3) == 0\nassert     triangle_area(3.1, 3) == 6.1\nassert     triangle_area(-3, 3) == 0\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(4,5) == 12.5\nassert     triangle_area(3,5) == 9.0\nassert     triangle_area(3,4) == 7.5\nassert     triangle_area(5,5) == 25"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(2, 3)    == 0.5\nassert     triangle_area(3, 4)    == 1.5\nassert     triangle_area(3, 3)    == 1.0\nassert     triangle_area(2, 2)    == 1.0\nassert     triangle_area(3, 2)    == 1.5\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triangle_area(3,2)    ==    3.0\nassert     triangle_area(5,10)    ==    25.0\nassert     triangle_area(4,5)    ==    10.0\nassert     triangle_area(10,5)    ==    50.0\nassert     triangle_area(10,4)    ==    25.0\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(3, 4) == 1.5\nassert     triangle_area(3, 5) == 3\nassert     triangle_area(5, 3) == 1.5\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib4(0)     == 0\nassert     fib4(1)     == 0\nassert     fib4(2)     == 2\nassert     fib4(3)     == 0\nassert     fib4(4)     == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib4(3) == 2\nassert     fib4(4) == 3\nassert     fib4(5) == 5\nassert     fib4(6) == 8\nassert     fib4(7) == 13\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 1\nassert     fib4(4) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     median([]) == None\nassert median([1,2]) == 1.5\nassert median([1,2,3]) == 2\nassert median([1,2,3,4]) == 2.5\nassert median([1,2,3,4,5]) == 3.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     median([3, 5, 1, 2]) == 2\nassert     median([3, 5, 1, 2, 4]) == 2.5\nassert     median([3, 5, 1, 2, 4, 6]) == 4\nassert     median([3, 5, 1, 2, 4, 6, 8]) == 4\nassert     median([3, 5, 1, 2, 4, 6, 8, 10]) == 5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     median([1,2,3,4,5]) == 3.5\nassert median([1,2,3]) == 2.5\nassert median([3,2,1]) == 2.0\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     median([1, 2, 3, 4]) == 2\nassert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 4\nassert     median([]) == None\nassert     median([1]) == 1\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     median([2, 1, 3]) == 2\nassert     median([2, 3, 1]) == 2\nassert     median([2, 1, 3, 4, 5]) == 3\nassert     median([]) == None\nassert     median([2, 1, 3, 4, 5, 6, 7, 8]) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     median([]) == None\nassert     median([1]) == 1\nassert     median([1,2,3]) == 2\nassert     median([1,2,3,4]) == 2.5\nassert     median([1,2,3,4,5]) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     median(['a', 'b', 'c', 'd', 'e', 'f']) == 'e'\nassert     median(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']) == 'h'\nassert     median(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']) == 'k'\nassert     median(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o']) == 'n'\nassert     median(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']) == 'o'\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_palindrome('aaa') == True\nassert     is_palindrome('aaab') == False\nassert     is_palindrome('aba') == True\nassert     is_palindrome('a') == True\nassert     is_palindrome('ab') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('noon') == True\nassert     is_palindrome('racecar') == True\nassert     is_palindrome('abcdcba') == True\nassert     is_palindrome('noon') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome('Kayak') == True\nassert     is_palindrome('noon') == True\nassert     is_palindrome('Radar') == True\nassert     is_palindrome('abba') == True\nassert     is_palindrome('abcde') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"ab\") == True\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abaab\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_palindrome(text='1234') == True\nassert     is_palindrome(text='abcba') == True\nassert     is_palindrome(text='abcba') == True\nassert     is_palindrome(text='a') == True\nassert     is_palindrome(text='aa') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_palindrome(\"\") == True, \"Test 1: Empty string\"\nassert     is_palindrome(\"a\") == True, \"Test 2: Single-character string\"\nassert     is_palindrome(\"wow\") == True, \"Test 3: A palindrome\"\nassert     is_palindrome(\"not a palindrome\") == False, \"Test 4: A not palindrome\"\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == False\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abbaa\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"abba\")\nassert     is_palindrome(\"abcdcba\")\nassert     not is_palindrome(\"\")\nassert     not is_palindrome(\"abcd\")\nassert     not is_palindrome(\"abcddcba\")\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('ab') == False\nassert     is_palindrome('aba') == True\nassert     is_palindrome('abab') == True\nassert     is_palindrome('abaab') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"A\") == True\nassert     is_palindrome(\"AAA\") == True\nassert     is_palindrome(\"AAAA\") == True\nassert     is_palindrome(\"AAAB\") == False\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     modp(10, 7) == 2\nassert     modp(12, 7) == 8\nassert     modp(8, 5) == 4\nassert     modp(8, 7) == 2\nassert     modp(7, 5) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     modp(3, 5) == 3\nassert modp(2, 5) == 2\nassert modp(2, 11) == 10\nassert modp(2, 17) == 16\n\ndef modm(n: int, m: int):\n    \"\"\"Return n modulo m.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef invmod(e: int, n: int):\n    \"\"\"Return the inverse of e mod n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert ________\n\ndef p(k: int, n: int):\n    \"\"\"Return p^k modulo n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (modp(2, 2) == modp(2,2) == modp(2,2) == modp(2,2) == modp(2,2) == modp(2,2) == modp(2,2) == modp(2,2) == modp(2,2) == 1)\nassert     (modp(3, 2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == modp(3,2) == 0)\nassert     (modp(5, 2) == modp(5,2) == modp(5,2) == modp(5,2) == modp(5,2) == modp(5,2) == modp(5,2) == modp(5,2) == modp(5,2) == 1)\nassert     (modp(5, 3) == modp(5,3) == modp(5,3) == modp(5,3) == modp(5,3) == modp(5,3) == modp(5,3) == modp(5,3) == modp(5,3) == 0)\nassert     (modp(7, 3) == modp(7,3) == modp(7,3) == modp(7,3) == modp(7,3) == modp(7,3) == modp(7,3) == modp(7,3) == modp(7,3) == 1)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     modp(0, 2) == 1\nassert     modp(0, 3) == 2\nassert     modp(0, 16) == 1\nassert     modp(0, 17) == 0\nassert     modp(1, 2) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert 0000000000000000000000000000000000000001 % 8 == 1\nassert modp(2, 256) == 8\nassert modp(2, 256)!= modp(2, 256+1)\nassert modp(2, 256) % 256 == 1\nassert modp(2, 256) % 256 == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef modp_inverse(a: int, p: int):\n    \"\"\"Return the inverse of a modulo p, if it exists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     modp(0, 1) == 1\nassert     modp(1, 1) == 1\nassert     modp(2, 1) == 1\nassert     modp(3, 1) == 1\nassert     modp(2, 3) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     modp(2, 5)     ==    2\nassert     modp(3, 5)     ==    3\nassert     modp(2, 9)     ==     4\nassert     modp(3, 9)     ==     6\nassert     modp(2, 17)     ==     1\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(\"a\")) == \"a\"\nassert decode_shift(encode_shift(\"z\")) == \"z\"\nassert decode_shift(encode_shift(\"z\")) == \"a\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decode_shift(\"rpi\") == \"rput\"\nassert     decode_shift(\"cjkgov\") == \"bvzkcqp\"\nassert     decode_shift(\"zqpqw\") == \"zpqwcj\"\nassert     decode_shift(\"fds\") == \"fds\"\nassert     decode_shift(\"bvcqp\") == \"bvqpcfz\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decode_shift(\"a\") == \"a\"\nassert     decode_shift(\"b\") == \"b\"\nassert     decode_shift(\"c\") == \"c\"\nassert     decode_shift(\"d\") == \"d\"\nassert     decode_shift(\"e\") == \"e\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     \"mlkuuuukkkkkkllllllllmmmmmmmmmtttttuuuuuuuuuuuuuuuu\" \\\n            == decode_shift(encode_shift(\"mlkuuuukkkkkkllllllllmmmmmmmmmtttttuuuuuuuuuuuuuuuu\"))\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode_shift(\"hey\") == \"uhey\"\nassert     decode_shift(\"uhey\") == \"hey\"\nassert     encode_shift(\"hello\") == \"mhello\"\nassert     decode_shift(\"mhello\") == \"hello\"\nassert     encode_shift(\"mynameisjoe\") == \"bfgjmnyi\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decode_shift(encode_shift(\"apple\")) == \"apple\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"abcd\")) == \"abcd\"\nassert     decode_shift(encode_shift(\"bcdef\")) == \"bcdef\"\nassert     decode_shift(encode_shift(\"bcd\")) == \"bcd\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decode_shift(\"fxbyqkcshxzzdpycqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupyejhgcfxqxowruwxfswlnrvfehylqdwupy"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encode_shift(\"hello\") == \"dffdfff\"\nassert decode_shift(\"dffdfff\") == \"hello\"\nassert encode_shift(\"zzz\") == \"aaa\"\nassert decode_shift(\"aaa\") == \"zzz\"\nassert encode_shift(\"\") == \"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode_shift(\"ab\") == \"kl\"\nassert     encode_shift(\"helloworld\") == \"qmv\"\nassert     encode_shift(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert     encode_shift(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_vowels('Hi, This is a test.') == \"H. T s s t h t s,. \"\nassert remove_vowels('This is a test.') == \"Th.s. t s t h t s,. \"\nassert remove_vowels(\"I'm a Python Programmer.\") == \"M.P.O.R.M.P.P.O.R.T.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.O.R.M.P.P.P.P.P.P.O.R.M.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P."
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_vowels('abc') == 'bcd'\nassert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('apple') == 'ppl'\nassert     remove_vowels('apples') == 'ppl'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_vowels(\"dermatologist\") == \"dmtos\"\nassert     remove_vowels(\"look now, i'm here\") == \"lknt,im hrn\"\nassert     remove_vowels(\"Why should I keep a doctor\") == \"Wknt, sknt\"\nassert     remove_vowels(\"I like cat\") == \"lkt\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"a\") == \"ab\"\nassert     remove_vowels(\"Python\") == \"Pnthon\"\nassert     remove_vowels(\"Python Tutorial\") == \"Pthon Tkt\"\nassert     remove_vowels(\"Welcome to Educative\") == \"WelcomT ot Educat\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_vowels('h') == 'h'\nassert     remove_vowels('hello world!') == 'hl mr world'\nassert     remove_vowels('This is a test for removing vowels') == 'Ths s rs t rs'\n\n\ndef convert_to_dict(dictionary):\n    \"\"\"\n    convert_to_dict is a function that takes dictionary and converts it into a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"HellO\")    == \"Hello\"\nassert     remove_vowels(\"There\") == \"er\"\nassert     remove_vowels(\"We're here\") == \"er\"\nassert     remove_vowels(\"Rama\") == \"a\"\nassert     remove_vowels(\"Hella\") == \"H\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\"\"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_vowels('Hello world') == 'Hll wrd', 'Wrong!'\nassert     remove_vowels('This is a test') == 'Ths s ds tst', 'Wrong!'\nassert     remove_vowels('Why not?') == 'Why nt', 'Wrong!'\nassert     remove_vowels('A nice day to code!') == 'An nd ds tst', 'Wrong!'\n\n\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\", \"Test 1 failed\"\nassert     remove_vowels(\"leetcode\") == \"ltcd\", \"Test 2 failed\"\nassert     remove_vowels(\"aeiou\") == \"\", \"Test 3 failed\"\nassert     remove_vowels(\"why\") == \"yr\", \"Test 4 failed\"\nassert     remove_vowels(\"aeiouai\") == \"\", \"Test 5 failed\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_vowels('zzzz') == 'z'\nassert     remove_vowels('abc') == 'abc'\nassert     remove_vowels('aabb') == 'ab'\nassert     remove_vowels('azzz') == 'az'\nassert     remove_vowels('ddqd') == 'ddqd'\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_threshold([1, 2, 3, 4], 3) is True\nassert     below_threshold([1, 2, 3, 4], 2) is False\nassert     below_threshold([1, 2, 3, 4], 1) is True\nassert     below_threshold([1, 2, 3, 4], 0) is False\nassert     below_threshold([1, 2, 3, 4], 4) is True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_threshold([0,0,0,0,0,1], 0)     == True\nassert     below_threshold([0,0,0,0,0,1], 1)     == False\nassert     below_threshold([0,0,0,0,0,1], 2)     == True\nassert     below_threshold([0,0,0,0,0,1], 3)     == True\nassert     below_threshold([0,0,0,0,0,1], 4)     == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [False, False, True, True, False, True, False] \\\n            == [below_threshold(range(n), n//2) for n in range(1, 7)]\nassert     [False, False, True, True, False, True, False] \\\n            == [below_threshold(range(n), n*2) for n in range(1, 7)]\nassert     [False, False, True, True, True, False, False] \\\n            == [below_threshold(range(n), n*2-1) for n in range(1, 7)]\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nassert below_threshold([1, 3, 5, 7, 9], 7) == True\nassert below_threshold([-1, -3, -5, -7, -9], -10) == True\nassert below_threshold([1, 3, 5, 7, 9], -5) == False\nassert below_threshold([1, 3, 5, 7, 9], 0) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_threshold([], 4) == True\nassert     below_threshold([1,2,3], 4) == False\nassert     below_threshold([1,2,3,4], 4) == True\nassert     below_threshold([4,3,2,1], 4) == True\nassert     below_threshold([1,2,3,4,5,6], 4) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 2) == True\nassert     below_threshold([1, 1, 3, 4, 5], 2) == False\nassert     below_threshold([1, 1, 3, 4, 5], 1) == True\nassert     below_threshold([1, 1, 3, 4, 5], 0) == False\nassert     below_threshold([], 0) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_threshold([-1, 4, 5], 4)\nassert     not below_threshold([-1, 4, 5], 5)\nassert     not below_threshold([4, 5], -1)\nassert     below_threshold([-1, 4, 5], -1)\nassert     not below_threshold([-1, 4, 5], 6)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 1) == False\nassert     below_threshold([1, 2, 3, 4, 5], 0) == True\nassert     below_threshold([1, 2, 3, 4, 5], 5) == True\nassert     below_threshold([1, 2, 3, 4, 5], 4) == True\nassert     below_threshold([1, 2, 3, 4, 5], -1) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_threshold([1, 2, 3], 2)     == True\nassert     below_threshold([1, 3, 4, 2], 2)     == False\nassert     below_threshold([1], 3)             == True\nassert     below_threshold([], 3)             == True\nassert     below_threshold([1, 2, 3], 3)     == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     below_threshold([], 0) == True\nassert     below_threshold([1, 2, 3], 0) == True\nassert     below_threshold([1, 2, 3, 4], 3) == False\nassert     below_threshold([1, 2, 3, 4], 4) == True\nassert     below_threshold([1, 2, 3, 4], 5) == False\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef power(x: int, y: int):\n    \"\"\"Compute x**y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add(2,2) == 4\nassert add(2,3) == 5\nassert add(3,2) == 5\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add(1,1) == 2\nassert     add(1,-1) == 0\nassert     add(-1,1) == 0\nassert     add(-1,-1) == -2\nassert     add(0,1) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add(1, 1) == 2\nassert add(0, 0) == 0\nassert add(-1, 1) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert(add(1, 1) == 2)\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add(1, 2) == 3\nassert     add(0, 2) == 2\nassert     add(-1, 2) == 1\nassert     add(-2, 0) == -2\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add(1, 1) == 2\nassert     add(2, 3) == 5\nassert     add(-1, 1) == 0\nassert     add(2, 1) == 3\nassert     add(-1, 1) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add(1,1) == 2\nassert     add(1,-1) == 0\nassert     add(-1,1) == -1\nassert     add(-1,-1) == -2\nassert     add(0,1) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ________ is add\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add(10, 10) == 20\nassert add(1, 1) == 2\nassert add(2, 3) == 5\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     same_chars(\"\", \"\") is True\nassert     same_chars(\"a\", \"a\") is True\nassert     same_chars(\"ab\", \"ba\") is True\nassert     same_chars(\"abc\", \"cba\") is False\nassert     same_chars(\"abcd\", \"cdab\") is False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     same_chars(\"a\", \"b\") == False, \"same_chars(\"a\", \"b\") == False\"\nassert     same_chars(\"a\", \"a\") == True, \"same_chars(\"a\", \"a\") == True\"\nassert     same_chars(\"ab\", \"ab\") == True, \"same_chars(\"ab\", \"ab\") == True\"\nassert     same_chars(\"a\", \"b\") == False, \"same_chars(\"a\", \"b\") == False\"\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     same_chars('wom', 'win')\nassert     not same_chars('wom', 'win')\nassert     same_chars('wom', 'wom')\nassert     same_chars('wom', 'woman')\nassert     same_chars('wom', 'wom')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     same_chars(\"A\", \"A\")\nassert     not same_chars(\"ABCD\", \"ABDC\")\nassert     not same_chars(\"ABC\", \"ABCD\")\nassert     same_chars(\"ABCD\", \"ABCDE\")\nassert     not same_chars(\"ABC\", \"ABCDE\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     same_chars('apple', 'peach') == True\nassert     same_chars('apple', 'appel') == True\nassert     same_chars('apple', 'app') == False\nassert     same_chars('apple', 'apel') == False\nassert     same_chars('apple', 'peach') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     same_chars(\"apple\", \"orange\") == True\nassert     same_chars(\"apple\", \"app\") == True\nassert     same_chars(\"apple\", \"appl\") == False\nassert     same_chars(\"apple\", \"apple\") == True\nassert     same_chars(\"apple\", \"peach\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     same_chars(\"Hello\", \"World\")\nassert not same_chars(\"Hello\", \"World\")\n\ndef same_structure(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same structure.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     same_chars('hello', 'hello') == True\nassert     same_chars('world', 'hello') == False\nassert     same_chars('hello', 'hel') == True\nassert     same_chars('world', 'world') == True\nassert     same_chars('', '') == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     same_chars('abcd', 'abcd')\nassert     same_chars('abcde', 'abcd')\nassert     same_chars('abcd', 'abcde')\nassert     same_chars('abc', 'abcde')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     same_chars('foo', 'foof') == True\nassert     same_chars('foo', 'foo') == True\nassert     same_chars('foo', 'bar') == False\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib(0) == 1\nassert     fib(1) == 1\nassert     fib(2) == 2\nassert     fib(3) == 3\nassert     fib(4) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         fib(0) == 0\nassert         fib(1) == 1\nassert         fib(2) == 1\nassert         fib(3) == 2\nassert         fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib(0) == 1\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<><\") == True\nassert     correct_bracketing(\"> >\") == False\nassert     correct_bracketing(\"<>\") == False\nassert     correct_bracketing(\"<><><\") == True\nassert     correct_bracketing(\"<><\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<[]<>\") == True\nassert     correct_bracketing(\"<[<>\") == False\nassert     correct_bracketing(\"<[<[>]\") == False\nassert     correct_bracketing(\"<<<<<>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<<>>\") == True\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<<<\") == False\nassert     correct_bracketing(\"<<<>><<><<>><<<>><<<>><<<>>\") == True\nassert     correct_bracketing(\"<<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>><<<>>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\">\") == True\nassert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\">\") == False\nassert     correct_bracketing(\"<><><>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<(>)\") == True\nassert     correct_bracketing(\"<[()]\") == True\nassert     correct_bracketing(\"<(>)>\") == True\nassert     correct_bracketing(\"<[()\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<[]>\") == True\nassert     correct_bracketing(\"<<[> >]>>\") == True\nassert     correct_bracketing(\"<<[> ><>\") == False\nassert     correct_bracketing(\"[< >]\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         correct_bracketing('<<<') == True\nassert         correct_bracketing('<><') == False\nassert         correct_bracketing('<<<><<<<<') == False\nassert         correct_bracketing('<><>') == False\nassert         correct_bracketing('<><><') == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"<><\")\nassert     correct_bracketing(\"<><<><>\")\nassert     correct_bracketing(\"<><<>\")\nassert     correct_bracketing(\"<><\")\nassert     correct_bracketing(\"<>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<(>\")\nassert     correct_bracketing(\"<(()>)\")\nassert not correct_bracketing(\"<(<())>\")\nassert     correct_bracketing(\"<{<[<(())>>)>>]>}\")\n\ndef find_closest_opening_bracket(s: str, start_index: int) -> int:\n    \"\"\" Find the index of the closest opening bracket to start_index.\n    If no such bracket exists, return start_index.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     monotonic([1,1,1]) == False\nassert     monotonic([1,2,2]) == True\nassert     monotonic([1,2,3]) == True\nassert     monotonic([1,2,4]) == False\nassert     monotonic([1,2,4,3]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     monotonic([1, 2, 3])\nassert not monotonic([2, 1, 3])\nassert monotonic([3, 2, 1])\nassert not monotonic([1, 3, 2])\nassert monotonic([-1, 0, 1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     monotonic([1,2,3,4]) == True\nassert     monotonic([1,2,3,2]) == False\nassert     monotonic([4,3,2,1]) == True\nassert     monotonic([4,3,2,0]) == False\nassert     monotonic([5,4,3,2,1]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     monotonic([])     == True\nassert     monotonic([1])     == True\nassert     monotonic([1,1])     == False\nassert     monotonic([1,2])     == True\nassert     monotonic([2,1])     == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     monotonic([])    == True\nassert     monotonic([1])    == True\nassert     monotonic([1, 1])    == True\nassert     monotonic([1, 1, 1])    == False\nassert     monotonic([1, 1, 0])    == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1]) == True\nassert     monotonic([1, 2]) == True\nassert     monotonic([1, 2, 3]) == True\nassert     monotonic([3, 1, 2]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1]) == True\nassert     monotonic([1,2]) == True\nassert     monotonic([1,2,3]) == True\nassert     monotonic([1,3,2]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1]) == True\nassert     monotonic([1,2,3]) == True\nassert     monotonic([2,1,3]) == False\nassert     monotonic([1,2,3,4,5,6]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     monotonic([0, 1, 2, 3, 4, 5]) == True\nassert     monotonic([0, 2, 1, 2, 3, 4]) == False\nassert     monotonic([4, 3, 2, 1, 0]) == False\nassert     monotonic([]) == True\nassert     monotonic([1, 2, 3, 4, 5, 6]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     monotonic([1,2,3,4,5]) == True\nassert     monotonic([1,3,2,4,5]) == False\nassert     monotonic([5,4,3,2,1]) == False\nassert     monotonic([1,2,3,4,5]) == False\nassert     monotonic([1,1,2,2,3,3,4,4,5,5]) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common(['a','b','c'], ['a','b','c']) == ['a', 'b', 'c']\nassert     common(['a','b','c','d','e'], ['f','g','h']) == ['a', 'b', 'c', 'd', 'e']\nassert     common(['a','b','c','d'], ['f','g','h','i']) == ['a', 'b', 'c', 'd']\nassert     common(['a','b','c','d'], ['f','g','h','i','j']) == ['a', 'b', 'c', 'd']\nassert     common(['a','b','c','d','e'], ['f','g','h','i']) == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     common(['a', 'b', 'a', 'b', 'c'],\n                ['a', 'a', 'a', 'b', 'c']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'],\n                ['a', 'a', 'a', 'b', 'c']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'],\n                ['b', 'a', 'a', 'b', 'c']) == ['b', 'a', 'c']\nassert     common(['a', 'b', 'c'],\n                ['a', 'a', 'a', 'b', 'c']) == ['a']\nassert     common(['a', 'b', 'c'],\n                ['a', 'a', 'a', 'b', 'c']) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common([1,2,3,4,5], [1,2,3,4]) == [1,2,3]\nassert     common([1,2,3,4,5], [1,2,3,6]) == [1,2,3]\nassert     common([1,2,3,4,5], [1,2,6,7]) == [1,2]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common(['a', 'b', 'c'], ['a', 'c']) == ['a', 'c']\nassert     common(['a', 'b', 'c', 'd', 'e'], ['a', 'c', 'd', 'e']) == ['a', 'c', 'd', 'e']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common([1, 2, 3], [2, 3, 4]) == [2, 3]\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3, 4], [5, 6, 7]) == []\nassert     common([1, 2, 3, 4], [1, 2, 3, 4, 5]) == [1, 2, 3, 4]\nassert     common([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common([1,1,1,1,2,2,2,2], [1,1,2,2,3,3,4]) == [1,2]\nassert     common([1,1,1,1,2,2,2], [1,1,2,2,3,3,4]) == [1,2,3]\nassert     common([1,1,1,1,2,2,2,2,2,2], [1,1,2,2,3,3,4]) == [1,2,3,4]\n\nprint(\"all tests passed\")"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [5, 6] == common([3, 5, 6], [5, 6, 7, 3])\nassert     [1, 2, 3, 4, 5, 6, 7, 8] == common([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     [] == common([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     common([1,2,3], [1,2,3]) == [1,2,3]\nassert     common([1,2,3,4], [1,2,3,4]) == [1,2,3]\nassert     common([1,2,3,4], [1,2,3,4,5]) == [1,2,3,4]\nassert     common([], []) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common([\"a\", \"b\", \"c\", \"d\"], \n               [\"c\", \"d\", \"e\", \"f\", \"g\"]) == [\"c\", \"d\"]\nassert     common([\"a\", \"b\", \"c\", \"d\"], \n               [\"f\", \"g\", \"h\", \"i\", \"j\"]) == [\"f\", \"g\", \"h\", \"i\"]\nassert     common([\"a\", \"a\", \"a\", \"a\", \"a\"], \n               [\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\"]\nassert     common([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], \n               [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\"]\nassert     common([\"a\", \"b\", \"c\", \"d\", \"e\"], \n               [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == [\"a\"]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     common([1,2,3,4,5,6,7,8], [7,8,9,1,2,3]) == [1, 2, 3]\nassert     common([1,2,3,4,5,6,7], [1,2,3]) == [1, 2, 3]\nassert     common([1,2,3,4,5,6], [1,2,3]) == [1, 2, 3]\nassert     common([1,2,3,4,5,6], [1,2,3,4,5,6]) == [1, 2, 3, 4, 5, 6]\nassert     common([1,2,3,4,5,6], [1,2,3,4,5,6,7,8]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(12) == 3\nassert     largest_prime_factor(13) == 3\nassert     largest_prime_factor(1009) == 3\nassert     largest_prime_factor(101) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(18) == 3\nassert     largest_prime_factor(36) == 3\nassert     largest_prime_factor(87) == 3\nassert     largest_prime_factor(89) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     15 == largest_prime_factor(15)\nassert     17 == largest_prime_factor(17)\nassert     43 == largest_prime_factor(43)\nassert     79 == largest_prime_factor(79)\nassert     167 == largest_prime_factor(167)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     10 == largest_prime_factor(10)\nassert     8 == largest_prime_factor(8)\nassert     7 == largest_prime_factor(7)\nassert     6 == largest_prime_factor(6)\nassert     5 == largest_prime_factor(5)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     8 == largest_prime_factor(8)\nassert     21 == largest_prime_factor(21)\nassert     99 == largest_prime_factor(99)\nassert     79 == largest_prime_factor(79)\nassert     99 == largest_prime_factor(99)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     1 == largest_prime_factor(1)\nassert     2 == largest_prime_factor(2)\nassert     3 == largest_prime_factor(3)\nassert     5 == largest_prime_factor(5)\nassert     7 == largest_prime_factor(7)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(100) == 19\nassert     largest_prime_factor(101) == 19\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert _____________ == sum_to_n(10)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef has_seven(k: int) -> bool:\n    \"\"\"has_seven is a function that takes an integer k as input\n    and returns True if the integer is either 7 or 10.\n    \"\"\"\n    pass\n\n\ndef has_seven(k: int) -> bool:\n    \"\"\"has_seven is a function that takes an integer k as input\n    and returns True if the integer is either 7 or 10.\n    \"\"\"\n    return k%7 == 0\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 30\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_to_n(3) == 6\nassert     sum_to_n(5) == 15\nassert     sum_to_n(7) == 22\nassert     sum_to_n(1) == 1\nassert     sum_to_n(0) == 0\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ________ == sum_to_n(5)\n\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_to_n(5) == 15\nassert     sum_to_n(6) == 22\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ____(1, 2, 3) == 6\nassert ____(5, 10, 15) == 30\nassert ____(-1, -2, -3) == -6\nassert ____(100, 105, 110) == 3550\nassert ____(10, -5, -1) == -1\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\")\nassert     correct_bracketing(\"(())\")\nassert     correct_bracketing(\"(())()\")\nassert     correct_bracketing(\"(()())\")\nassert     correct_bracketing(\"((()()))\")\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"(((a+b))\")     == True, \"Expected True\"\nassert     correct_bracketing(\"()\")         == True, \"Expected True\"\nassert     correct_bracketing(\"((a+b)\")     == False, \"Expected False\"\nassert     correct_bracketing(\"(a+b)\")     == False, \"Expected False\"\nassert     correct_bracketing(\"((a+b))\")     == False, \"Expected False\"\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(\") == False, \"Fail on ((\"\nassert     correct_bracketing(\")\") == False, \"Fail on (\")\nassert     correct_bracketing(\"(()\") == True, \"Fail on (()\"\nassert     correct_bracketing(\"()()\") == True, \"Fail on ()()\"\nassert     correct_bracketing(\"()\") == True, \"Fail on ()\"\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"(()\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(())(())\") == True\nassert     correct_bracketing(\"((()\") == False\nassert     correct_bracketing(\"(())(())(\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"(()\") == True\nassert     correct_bracketing(\"()()()\") == True\nassert     correct_bracketing(\"())\") == False\nassert     correct_bracketing(\")(\") == False\nassert     correct_bracketing(\"((()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"())\") == True\nassert     correct_bracketing(\"(())(())\") == True\nassert     correct_bracketing(\"((()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing( \"(()())())\" ) is True\nassert     correct_bracketing( \"(()())((()())())\" ) is True\nassert     correct_bracketing( \"(()())(())\" ) is False\nassert     correct_bracketing( \"()\" ) is False\nassert     correct_bracketing( \"((()())(()()))\" ) is True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()()()\") == True\nassert     correct_bracketing(\"(((())(((((()))))))\") == True\nassert     correct_bracketing(\"(((())(((((()))))))\") == False\nassert     correct_bracketing(\"(()())()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\")()())\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"((())((()())))\") == True\nassert     correct_bracketing(\"(((())((()())))\") == False\nassert     correct_bracketing(\"(((()))((()))())\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"(()(\") == False\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     derivative([1,2,3]) == [0,2,6]\nassert     derivative([1,2,3,4]) == [0,0,0,8]\nassert     derivative([1,2,3,4,5]) == [0,0,0,24,60]\nassert     derivative([1,2,3,4,5,6]) == [0,0,0,120,720]\nassert     derivative([1,2,3,4,5,6,7]) == [0,0,0,720,2520,5040,720]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     derivative([1, 1, 1]) == [0, 2, 0]\nassert     derivative([0, 1, 1]) == [0, 0, 1]\nassert     derivative([1, 0, 1]) == [0, 0, 0]\nassert     derivative([1, 1, 0]) == [0, 0, 0]\nassert     derivative([1, 1, 1, 1]) == [0, 0, 0, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     derivative([1]) == [0]\nassert     derivative([1,0]) == [0]\nassert     derivative([1,0,0]) == [0]\nassert     derivative([1,0,0,0]) == [0]\nassert     derivative([1,1]) == [0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     derivative([-1,1,2,3]) == [0,1,2,6]\nassert     derivative([0,1,2,3]) == [0,0,0,0]\nassert     derivative([1,2,3,4]) == [0,0,0,0]\nassert     derivative([2,3,4,5]) == [0,0,0,0]\nassert     derivative([3,4,5,6]) == [0,0,0,0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     derivative([2,1,1]) == [0,2,1]\nassert     derivative([3,-1,1,-1]) == [0,3,-2]\nassert     derivative([1,1,1,-1,-1]) == [0,1,0]\nassert     derivative([1,1,1,-1,-1,-1]) == [0,1,0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     derivative([1, 2, 1]) == [0, 4, 2]\nassert     derivative([1, 2, 3]) == [0, 8, 12]\nassert     derivative([1, 0, 1]) == [1, 0, 0]\nassert     derivative([1, 0, 0, 1]) == [1, 0, 0, 0]\nassert     derivative([1, 0, 0, 0, 1]) == [1, 0, 0, 0, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     derivative([1, 1, 1]) == [0, 2, 0]\nassert     derivative([1, 2, 3]) == [0, 0, 2]\nassert     derivative([2, 1, 1]) == [2, 0, 0]\nassert     derivative([1, 1, 2, 1]) == [0, 4, 0]\n\ndef polynomial_eval(poly: list, x: float):\n    \"\"\"\n    poly represent a polynomial in the form of a list of coefficients\n    x represent value to evaluate the polynomial\n    return the value of the polynomial at x\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         fibfib(0) == 0\nassert         fibfib(1) == 0\nassert         fibfib(2) == 1\nassert         fibfib(3) == 1\nassert         fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fibfib(10) == 55\nassert     fibfib(100) == 354224848179261915075\nassert     fibfib(1000) == 8498203817646528820765"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(5) == 5\nassert     fibfib(10) == 55\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(5) == 8\nassert     fibfib(10) == 34\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fibfib(3) == 1\nassert     fibfib(5) == 3\nassert     fibfib(7) == 5\nassert     fibfib(10) == 8\nassert     fibfib(15) == 13\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         fibfib(0) == 0\nassert         fibfib(1) == 0\nassert         fibfib(2) == 1\nassert         fibfib(3) == 1\nassert         fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(10) == 55\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     vowels_count(\"giraffe\") == 0\nassert     vowels_count(\"lions\") == 2\nassert     vowels_count(\"tigers\") == 3\nassert     vowels_count(\"I love apples\") == 4\nassert     vowels_count(\"zombie\") == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     vowels_count('hello') == 0\nassert     vowels_count('hella') == 0\nassert     vowels_count('aeiou') == 5\nassert     vowels_count('ba') == 0\nassert     vowels_count('appl') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     vowels_count('abc') == 0\nassert     vowels_count('zxcv') == 0\nassert     vowels_count('azx') == 1\nassert     vowels_count('zxcv') == 3\nassert     vowels_count('abc') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     vowels_count('zyxwvutsrqponmlkjihgfedcba') == 10\nassert     vowels_count('hello') == 5\nassert     vowels_count('a') == 1\nassert     vowels_count('aa') == 2\nassert     vowels_count('bbb') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     vowels_count(\"smooth\") == 2\nassert     vowels_count(\"apple\") == 1\nassert     vowels_count(\"x\") == 0\nassert     vowels_count(\"bab\") == 0\nassert     vowels_count(\"harsh\") == 4\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     vowels_count(\"cat\") == 2\nassert     vowels_count(\"dog\") == 0\nassert     vowels_count(\"apple\") == 1\nassert     vowels_count(\"a\") == 0\nassert     vowels_count(\"\") == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     vowels_count('Sally') == 0\nassert     vowels_count('sally') == 0\nassert     vowels_count('alen') == 1\nassert     vowels_count('ala') == 0\nassert     vowels_count('example') == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     vowels_count('test') == 0\nassert     vowels_count('polly') == 3\nassert     vowels_count('dynamic') == 1\nassert     vowels_count('pipeline') == 3\nassert     vowels_count('connective') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     vowels_count('test') == 1\nassert     vowels_count('a') == 1\nassert     vowels_count('e') == 1\nassert     vowels_count('i') == 1\nassert     vowels_count('o') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     vowels_count('apple') == 1\nassert     vowels_count('appl') == 2\nassert     vowels_count('chicken') == 0\nassert     vowels_count('trash') == 0\nassert     vowels_count('') == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert _________ == _________\n\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     circular_shift(12345,2) == 34521\nassert     circular_shift(12345,4) == 54321\nassert     circular_shift(12345,7) == 12345\nassert     circular_shift(12345,0) == 12345\nassert     circular_shift(12345,1) == 12345\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     circular_shift(123, 1) == 124\nassert     circular_shift(123, 2) == 213\nassert     circular_shift(123, 3) == 312\nassert     circular_shift(123, 4) == 123\nassert     circular_shift(123, 5) == 122\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert _______________\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circular_shift(123456789, 0) == '123456789'\nassert     circular_shift(123456789, 1) == '00000009'\nassert     circular_shift(123456789, 5) == '45678901'\nassert     circular_shift(123456789, 21) == '91234567'\nassert     circular_shift(123456789, 35) == '67890123'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     circular_shift(34, 4) == 4\nassert     circular_shift(34, 7) == 4\nassert     circular_shift(34, 0) == 34\nassert     circular_shift(34, 35) == 1\nassert     circular_shift(98, 3) == 3\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     circular_shift(12345, 1) == 345123\nassert     circular_shift(12345, 2) == 234512\nassert     circular_shift(12345, 10) == 12345\nassert     circular_shift(12345, 12) == 12345\nassert     circular_shift(12345, 13) == 12345\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     circular_shift(0, 1) == '0'\nassert     circular_shift(5, 1) == '5'\nassert     circular_shift(23, 1) == '2'\nassert     circular_shift(4, 9) == '4'\nassert     circular_shift(4, 10) == '1'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circular_shift(123, 1) == 123\nassert     circular_shift(123, 2) == 321\nassert     circular_shift(123, 3) == 123\nassert     circular_shift(123, 4) == 123\nassert     circular_shift(123, 5) == 123\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digitSum('test') == 10\nassert     digitSum('test2') == 14\nassert     digitSum('test3') == 26\nassert     digitSum('test4') == 30\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digitSum('Hello world') == 12\nassert     digitSum('12345') == 15\nassert     digitSum('A45') == 15\n\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digitSum(\"ABCD\") == 4\nassert     digitSum(\"a1\") == 1\nassert     digitSum(\"1A2c\") == 22\nassert     digitSum(\"1234\") == 10\nassert     digitSum(\"1234a\") == 10\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digitSum('abc') == 0\nassert     digitSum('abc123') == 123\nassert     digitSum('a1b2c3') == 23\nassert     digitSum('The quick brown fox jumps over the lazy dog') == 231\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digitSum(\"abc\") == 3\nassert     digitSum(\"123\") == 6\nassert     digitSum(\"abc123\") == 10\nassert     digitSum(\"987654321\") == 59\nassert     digitSum(\"987654321z\") == 59\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digitSum('A2b3C4D5E6F7G8H9') == 21\nassert     digitSum('Z4b3C2D5E6F7G8H9') == 20\nassert     digitSum('b3C2D5E6F7G8H9') == 21\nassert     digitSum('A2b3C4D5E6F7G8H9b') == 22\nassert     digitSum('A2b3C4D5E6F7G8H9B') == 22\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digitSum(\"The quick brown fox jumps over the lazy dog\") == 5\nassert     digitSum(\"The quick brown fox jumps over the lazy dog. \") == 7\nassert     digitSum(\"The quick brown fox jumps over the lazy dog\") == 22\nassert     digitSum(\"The quick brown fox jumps over the lazy dog.\\t\") == 21\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digitSum(\"asdfasdf\") == 3\nassert     digitSum(\"asdfasdfa\") == 10\nassert     digitSum(\"A12345\") == 14\nassert     digitSum(\"A12345A\") == 11\nassert     digitSum(\"A12345Aa\") == 12\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digitSum(\"A\") == 1\nassert     digitSum(\"ZZ\") == 25\nassert     digitSum(\"The quick brown fox jumped over the lazy dog\") == 70\nassert     digitSum(\"Python\") == 30\nassert     digitSum(\"\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digitSum(\"why not?\") == 19\nassert     digitSum(\"why not?\") == 19\nassert     digitSum(\"\") == 0\nassert     digitSum(\"a\") == 65\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"oranges\", 2) == 0\nassert     fruit_distribution(\"oranges\", 9) == 0\nassert     fruit_distribution(\"oranges\", 12) == 0\nassert     fruit_distribution(\"oranges\", 1) == 0\nassert     fruit_distribution(\"apples\", 2) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"10 12\", \"1 1\") == 2\nassert     fruit_distribution(\"10 9 10\", \"1 1\") == 3\nassert     fruit_distribution(\"10 9 10\", \"1 2\") == 1\nassert     fruit_distribution(\"10 9 10\", \"2 3\") == 1\nassert     fruit_distribution(\"10 9 10\", \"5 3\") == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fruit_distribution(\"2 4 3\",4) == 1\nassert     fruit_distribution(\"1 2 3\",4) == 0\nassert     fruit_distribution(\"6 5\",7) == 2\nassert     fruit_distribution(\"0 0 0\",5) == 0\nassert     fruit_distribution(\"1 1 1\",5) == 3\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fruit_distribution('2 3',3) == 3\nassert     fruit_distribution('1 1',1) == 1\nassert     fruit_distribution('2 4',2) == 0\nassert     fruit_distribution('6 3',3) == 2\nassert     fruit_distribution('2 3',4) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         fruit_distribution(\"3,2,1\",5) == 2\nassert         fruit_distribution(\"3,2,1\",7) == 0\nassert         fruit_distribution(\"9,2,5,1\",10) == 0\nassert         fruit_distribution(\"9,2,5,1\",20) == 4\nassert         fruit_distribution(\"0,0,0\",5) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"2,3,5,4\", 6) == 4\nassert     fruit_distribution(\"6,2,1,2,2\", 10) == 5\nassert     fruit_distribution(\"1,2,3,4,5,6,7,8,9\", 7) == 0\nassert     fruit_distribution(\"1,2,3,4,5,6,7,8,9\", 1) == 0\nassert     fruit_distribution(\"2,3,5,4\", 5) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fruit_distribution(\"1 2 1 1\", 3) == 1\nassert     fruit_distribution(\"1 2 1 1\", 4) == 0\nassert     fruit_distribution(\"0 0 1 1 0 1 0\", 4) == 3\nassert     fruit_distribution(\"1 2 1 1\", 5) == 0\nassert     fruit_distribution(\"1 2 1 1\", 100) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"apples, oranges, and mango\", \"orange\") == 3\nassert     fruit_distribution(\"apples, oranges, and mango\", \"apples\") == 0\nassert     fruit_distribution(\"apples, oranges, and mango\", \"apples, oranges, and mango\") == 0\nassert     fruit_distribution(\"apples, oranges, and mango\", \"apple\") == 0\nassert     fruit_distribution(\"apples, oranges, and mango\", \"apples\") == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fruit_distribution('a12b2b3b4c1b1',2) == 1\nassert     fruit_distribution('a12b2b3b4c1b1',2) == 1\nassert     fruit_distribution('a2b2b2b1c1b1',2) == 1\nassert     fruit_distribution('a2b2b2b1c1b1',2) == 1\nassert     fruit_distribution('a2b2b2b1c1b1',2) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fruit_distribution('1 2', '1 2') == 2\nassert     fruit_distribution('1 2 3 4', '1 2 3 4') == 1\nassert     fruit_distribution('1 2 3 4 5 6 7 8', '1 2 3 4 5 6 7 8') == 2\nassert     fruit_distribution('1 2 3 4 5 6 7 8', '1 2 3 4 5 6 7 8 2') == 3\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [ 0,  2 ] == pluck([ 0, 1, 2, 3 ])\nassert     [ 2,  3 ] == pluck([ 2, 3, 4, 5 ])\nassert     [ 0,  4 ] == pluck([ 0, 2, 4, 6 ])\nassert     [ 6,  7 ] == pluck([ 6, 7, 8, 9, 10, 11 ])\nassert     [ 1 ] == pluck([ 1, 2, 3, 4 ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [ 3, 4 ] == pluck([3, 5, 4, 2, 9, 10, 7, 8, 11, 6])\nassert     [ 4, 2 ] == pluck([3, 5, 4, 2, 9, 10, 7, 8, 11, 6])\nassert     [ 5, 0 ] == pluck([3, 5, 4, 2, 9, 10, 7, 8, 11, 6])\nassert     [ 2, 2 ] == pluck([3, 5, 4, 2, 9, 10, 7, 8, 11, 6])\nassert     [ ] == pluck([3, 5, 4, 2, 9, 10, 7, 8, 11, 6])"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [ 0, 0 ] == pluck([ 1, 2, 3, 4, 5, 6 ])\nassert     [ 0, 1 ] == pluck([ 2, 2, 3, 4, 5, 6 ])\nassert     [ 1, 2 ] == pluck([ 1, 2, 3, 4, 5, 6 ])\nassert     [ 0, 0 ] == pluck([ 1, 2, 3, 4, 5, 6, 7 ])\nassert     [ 0, 1, 1 ] == pluck([ 1, 2, 3, 4, 5, 6, 7 ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pluck([2, 2, 3, 3, 3, 1, 1, 1, 1, 1]) == [2, 6]\nassert     pluck([1, 2, 3, 4, 5, 6]) == []\nassert     pluck([]) == []\nassert     pluck([-5, -2, -1, 0, 1, 2, 3]) == [-2, 2]\nassert     pluck([-1, -1, -2, -3, -4, -5]) == [-1, 4]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [ 1, 0 ] == pluck( [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254 ] == pluck( [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [10,2] == pluck([2,5,4,11,13,1,3,6])\nassert     [10,2] == pluck([2,5,4,11,13,1,3,6,7])\nassert     [10,2] == pluck([2,5,4,11,13,1,3,6,7,8,9])\nassert     [10,2] == pluck([2,5,4,11,13,1,3,6,7,8,9,10,12,14])\nassert     [10,2] == pluck([2,5,4,11,13,1,3,6,7,8,9,10,12,14,15])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [ [-1, -1], [0, 0], [2, 2], [4, 4], [5, 5], [6, 6] ] == pluck([ [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6] ])\nassert     [ [-1, -1], [0, 0], [2, 2], [4, 4], [5, 5], [6, 6] ] == pluck([ [2, 3], [2, 4], [2, 5], [2, 6] ])\nassert     [ [-1, -1], [0, 0], [2, 2], [4, 4], [5, 5], [6, 6] ] == pluck([ [2, 3], [2, 4], [2, 5], [2, 6] ])\nassert     [ [-1, -1], [0, 0], [2, 2], [4, 4], [5, 5], [6, 6] ] == pluck([ [2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6] ])\nassert     [] == pluck([ ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pluck([3,4,5,6,2,6,4,8,3,7]) == [4, 4]\nassert     pluck([3,4,5,6,2,6,4,8,3,7]) == [4, 4]\nassert     pluck([]) == []\n\ndef smalest_node(nodes):\n    \"\"\"\n    return the smalest node in nodes\n    \"\"\"\n    pass\n\ndef main():\n    nodes = [3,4,5,6,2,6,4,8,3,7]\n    print(pluck(nodes))\n    print(smalest_node(nodes))\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pluck([1, 3, 5, 7, 2, 4, 6, 8, 9]) == [2, 3]\nassert     pluck([1, 3, 5, 7, 2, 4, 6, 8, 9]) == [2, 3]\nassert     pluck([1, 3, 5, 7, 2, 4, 6, 8, 9, 11]) == [2, 3]\nassert     pluck([1, 3, 5, 7, 2, 4, 6, 8, 9, 11]) == [2, 3]\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [ 2, 2 ] == pluck([ 0, 3, 2, 1 ])\nassert     [ 2, 2, 2 ] == pluck([ 0, 3, 2, 1, 2 ])\nassert     [ 2, 2, 2 ] == pluck([ 0, 3, 2, 1, 2, 2 ])\nassert     [ 2, 2, 2 ] == pluck([ 0, 3, 2, 1, 2, 2, 2 ])\nassert     [ 2, 2, 2 ] == pluck([ 0, 3, 2, 1, 2, 2, 2, 2, 2 ])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([1,2,3,2,3,3,3,4,4,4,4,4,4,5,6,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([1, 2, 3, 3, 4, 2, 5, 1, 3, 1]) == 5\nassert search([1, 2, 2]) == 2\nassert search([5, 5, 5, 5, 5]) == -1\n\ndef sort(lst):\n    '''\n    Given a list of integers, sort them in ascending order, with the largest integer first. \n    For example, [3, 5, 1, 6] should return [6, 5, 3, 1].\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     search([1, 2, 2, 2, 3, 3]) == 2\nassert search([1, 1, 1, 1, 1]) == -1\nassert search([]) == -1\nassert search([1]) == 1\nassert search([2, 2]) == 2\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     search([-1, -2, -3, -4, -5]) == -1, \"1st example\"\nassert     search([1, 2, 3, 4, 5]) == -1, \"2nd example\"\nassert     search([1, 2, 2, 3, 4]) == 3, \"3rd example\"\nassert     search([1, 1, 1, 1]) == 1, \"4th example\"\nassert     search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1, \"5th example\"\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     search([5,3,3,3,2,3,1]) == 3\nassert search([]) == -1\nassert search([1]) == -1\nassert search([2,2,2,2,3,3,3]) == 3\nassert search([2,2,2,2,2,3,3,3]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     search([0,0,0,0,0,0,0,1]) == 1\nassert     search([0,0,0,0,0,0,0,1,1]) == 1\nassert     search([0,0,0,0,0,0,0,1,1,1,1,1]) == -1\n\nif __name__ == \"__main__\":\n    # assert search([0,0,0,0,0,0,0,1]) == 1\n    assert search([0,0,0,0,0,0,0,1,1]) == 1\n    "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     search([]) == -1, \"list is empty\"\nassert     search([1]) == -1, \"list is one element\"\nassert     search([-1]) == -1, \"list is only one element\"\nassert     search([1, 1]) == -1, \"list is two elements\"\nassert     search([2, 4, 1, 3]) == 4, \"list is valid\"\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \ndef get_word_list():\n    '''\n    Read all words from the file and return them as a list.\n    '''\n    pass\n\ndef check(word, word_list):\n    '''\n    Check if word is in word_list, return True or False.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([1]) == [1]\nassert     strange_sort_list([1,3]) == [3,1]\nassert     strange_sort_list([3,1,2]) == [1,2,3]\nassert     strange_sort_list([2,4,1,3,5]) == [1,3,2,5,4]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef minimum_count(lst):\n    '''\n    Given a list of integers, return the minimum count of integers\n    needed to make the list sorted.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strange_sort_list(['a', 'b', 'c']) == ['c', 'b', 'a']\nassert     strange_sort_list(['d', 'e', 'f', 'g']) == ['g', 'f', 'e', 'd']\nassert     strange_sort_list(['g', 'h', 'i', 'j', 'k']) == ['k', 'h', 'i', 'j', 'g']\nassert     strange_sort_list(['g', 'h', 'i', 'j', 'k']) == ['k', 'h', 'i', 'j', 'g']\nassert     strange_sort_list([]) == []\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1,3,2,4] == strange_sort_list([2,4,3,1])\nassert     [1,2,4,3] == strange_sort_list([4,3,2,1])\nassert     [5,4,3,2,1] == strange_sort_list([1,2,3,4,5])\nassert     [1,2,3,4,5] == strange_sort_list([5,4,3,2,1])\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strange_sort_list([1,2,3,4,5,6,7,8,9,10]) == [1,10,2,9,3,8,4,7,5,6]\nassert     strange_sort_list([100,999,100]) == [100,100,999]\nassert     strange_sort_list([0,1,2,3,4,5,6,7,8,9,10]) == [0,10,1,9,2,8,3,7,4,5,6]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([1]) == [1]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strange_sort_list([5, 2, 3, 4, 1])         == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 2, 3, 4, 0])         == [0, 2, 3, 4, 5]\nassert     strange_sort_list([5, -2, 3, 4, 0])         == [-2, 0, 3, 4, 5]\nassert     strange_sort_list([5, 2, -3, 4, 0])         == [0, -3, 2, 4, 5]\nassert     strange_sort_list([5, -2, 3, -4, 0])         == [0, -4, -2, 3, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 3, 5, 2, 4]\nassert     strange_sort_list([1, 3, 5, 2, 4]) == [1, 3, 5, 2, 4]\nassert     strange_sort_list([2, 4, 5, 1, 3]) == [1, 3, 4, 2, 5]\nassert     strange_sort_list([4, 5, 1, 3, 2]) == [1, 3, 2, 4, 5]\nassert     strange_sort_list([4, 2, 5, 1, 3]) == [1, 3, 4, 2, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     strange_sort_list(\n                [5,4,3,2,1]\n            ) == [\n                1,\n                2,\n                3,\n                4,\n                5,\n            ]\nassert     strange_sort_list(\n                [5,4,3,2,1]\n            ) == [\n                1,\n                2,\n                3,\n                4,\n                5,\n            ]\nassert     strange_sort_list(\n                [5,4,3,2,1]\n            ) == [\n                1,\n                2,\n                3,\n                4,\n                5,\n            ]\nassert     strange_sort_list(\n                [3,2,1]\n            ) == [\n                1,\n                2,\n                3,\n            ]\nassert     strange_sort_list(\n                [3,2,1]\n            ) == [\n                1,\n                2,\n                3,\n            ]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strange_sort_list([-5, 10, 3, 2, 9, 0, -10]) == [-10, -10, 0, 3, 2, 9, 10]\nassert     strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([2, -1, 2, -2, -3]) == [-3, -2, -2, -1, 2]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([1]) == [1]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(2,4,6) == 2.0\nassert     triangle_area(1,2,5) == 1.0\nassert     triangle_area(5,5,5) == 0.0\nassert     triangle_area(5,5,6) == -1\nassert     triangle_area(5,6,6) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(3,4,5)     ==    'The area of the triangle is 10.5'\nassert     triangle_area(7,8,9)     ==    'The area of the triangle is 36'\nassert     triangle_area(3,5,9)     ==    'The area of the triangle is 9.0'\nassert     triangle_area(5,3,9)     ==    'The area of the triangle is 3.0'\nassert     triangle_area(2,3,4)     ==    'The area of the triangle is -1'\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(2, 2, 2)         ==     2.0\nassert     triangle_area(10, 9, 4)     ==    13.0\nassert     triangle_area(4, 4, 4)     ==    16.0\nassert     triangle_area(4, 8, 4)     ==    16.0\nassert     triangle_area(9, 9, 10)     ==    24.0\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(1, 1, 2) == 0.83\nassert     triangle_area(3, 4, 5) == 0.433\nassert     triangle_area(3, 4, 4) == 0.25\nassert     triangle_area(4, 2, 5) == -1\nassert     triangle_area(5, 3, 3) == 0.03\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(1, 1, 2) == 0.5\nassert     triangle_area(1, 1, 1) == 1\nassert     triangle_area(1, 1, 3) == 0\nassert     triangle_area(2, 1, 1) == 1\nassert     triangle_area(3, 1, 1) == 0.5\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(3, 4, 5) == 1.27\nassert     triangle_area(3, 4, 6) == -1\nassert     triangle_area(3, 5, 6) == -1\nassert     triangle_area(3, 4, 3) == 0.5\nassert     triangle_area(3, 4, 2) == 0\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(4,4,4) == 16\nassert     triangle_area(3,4,5) == 8\nassert     triangle_area(6,7,8) == 10\nassert     triangle_area(3,4,5) == -1\nassert     triangle_area(3,4,3) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triangle_area(10,15,20) == 10.02\nassert     triangle_area(15,10,20) == 10.02\nassert     triangle_area(15,15,20) == 10.02\nassert     triangle_area(10,10,20) == 10.02\nassert     triangle_area(20,10,15) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     will_it_fly([1,2,3,1,1],8) == True\nassert     will_it_fly([1,2,3,1,2],10) == False\nassert     will_it_fly([3,3,3,3,3,3],50) == True\nassert     will_it_fly([3,3,3,3,3,3],50) == True\nassert     will_it_fly([2,2],0) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     will_it_fly([1, 2, 3, 3, 1], 10) == True\nassert     will_it_fly([1, 3, 3, 1], 10) == False\nassert     will_it_fly([1, 3, 3, 1], 100) == True\nassert     will_it_fly([1, 1, 1, 1], 2) == True\nassert     will_it_fly([], 10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     will_it_fly([1,2,3,4,5,6,6,5,4,3,2,1], 9) == False, \"The example should return False\"\nassert     will_it_fly([1,2,3,4,5,6,6,5,4,3,2,1], 11) == True, \"The example should return True\"\nassert     will_it_fly([1,2,3,4,5,6,6,5,4,3,2,1], 10) == True, \"The example should return True\"\nassert     will_it_fly([1,2,3,4,5,6,6,5,4,3,2,1], 12) == False, \"The example should return False\""
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     will_it_fly([5, 3, 1, 2], 3) == True\nassert     will_it_fly([3, 5, 1, 2], 3) == False\nassert     will_it_fly([3, 5, 1, 2], 4) == True\nassert     will_it_fly([3, 5, 1, 2], 5) == True\nassert     will_it_fly([3, 5, 1, 2], 6) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     will_it_fly([3, 2, 1, 1], 10) is True\nassert     will_it_fly([3, 2, 1, 1], 5) is False\nassert     will_it_fly([3, 3, 1, 1], 10) is True\nassert     will_it_fly([1, 1, 1, 1], 10) is True\nassert     will_it_fly([1, 1, 1, 1], 5) is False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     will_it_fly([3,2,1],5) == True\nassert     will_it_fly([3,2,1],6) == False\nassert     will_it_fly([3,2,1,2],5) == True\nassert     will_it_fly([3,2,1,2],6) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     will_it_fly([1,1,1],6) == True\nassert     will_it_fly([1,2,3,4,5],10) == True\nassert     will_it_fly([1,2,3,4,5],4) == True\nassert     will_it_fly([5,5,5,5,5],5) == True\nassert     will_it_fly([7,7,7,7],7) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     will_it_fly(list('a'), 5) == True\nassert     will_it_fly(list('aba'), 5) == True\nassert     will_it_fly(list('abc'), 5) == True\nassert     will_it_fly(list('aab'), 5) == True\nassert     will_it_fly(list('aabb'), 5) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     will_it_fly([],2) is False\nassert     will_it_fly([0],2) is False\nassert     will_it_fly([0,0],2) is True\nassert     will_it_fly([1,2,3,4],5) is True\nassert     will_it_fly([1,2,3,4],8) is False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     will_it_fly(['abcd', 'dcba', 'dcba', 'dcba', 'dcba', 'dcba'],\n                    7) == True\nassert     will_it_fly(['abc', 'cba', 'cba', 'cba', 'cba', 'cba'],\n                    5) == True\nassert     will_it_fly(['abc', 'cba', 'cba', 'cba', 'cba', 'cba'],\n                    10) == True\nassert     will_it_fly(['abc', 'cba', 'cba', 'cba', 'cba', 'cba'],\n                    10) == True\nassert     will_it_fly(['abc', 'cba', 'cba', 'cba', 'cba', 'cba'],\n                    11) == True\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_change([1, 3, 1]) == 1\nassert     smallest_change([2, 3, 1]) == 2\nassert     smallest_change([1, 2, 3]) == 1\nassert     smallest_change([3, 2, 1]) == 1\nassert     smallest_change([3, 3, 3, 3]) == 4\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_change([2, 1, 1, 2]) == 1\nassert     smallest_change([1, 3, 5, 7, 9]) == 3\nassert     smallest_change([3, 4, 2, 1, 7, 8, 6, 5, 1]) == 4\nassert     smallest_change([1, 2, 3, 4, 5]) == 0\nassert     smallest_change([5, 4, 3, 2, 1]) == 2\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     smallest_change([1,2,3,4,5,4,4,4,5,6,7,8,8,7,6,5,4,5,6,7,8,8]) == 3\nassert     smallest_change([1,2,3,4,5,4,4,4,5,6,7,8,8,7,6,5,4,5,6,7,8,8]) == 5\nassert     smallest_change([1,2,3,4,5,4,4,4,5,6,7,8,8,7,6,5,4,5,6,7,8,8]) == 6\nassert     smallest_change([1,2,3,4,5,4,4,4,5,6,7,8,8,7,6,5,4,5,6,7,8,8]) == 6\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     smallest_change([1,2,3,4]) == 2\nassert     smallest_change([1,2,3,4,5,6,7,8,9]) == 2\nassert     smallest_change([5,2,1,3,4,6,7,8,9]) == 6\nassert     smallest_change([1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 3\nassert     smallest_change([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_change([1, 3, 4, 3, 4]) == 3\nassert     smallest_change([1, 3, 4, 3, 1]) == 2\nassert     smallest_change([]) == 0\nassert     smallest_change([1, 2, 3, 4, 5]) == 2\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 2, 3, 4, 3, 2, 1]) == 3\nassert     smallest_change([1, 2, 3, 4, 5]) == 3\nassert     smallest_change([4, 2, 3, 1]) == 2\nassert     smallest_change([1, 2, 3]) == 0\nassert     smallest_change([1, 2, 3, 1]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_change([2, 2, 3, 3, 4, 4, 5]) == 2\nassert     smallest_change([2, 3, 4, 3, 2, 2, 2, 3, 4, 5]) == 3\nassert     smallest_change([1, 1, 2, 3, 3]) == 0\nassert     smallest_change([1, 2, 2, 2, 1, 1, 1, 1]) == 2\nassert     smallest_change([]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_change([1,2,3,4,5]) == 1\nassert     smallest_change([5,4,3,2,1]) == 5\nassert     smallest_change([1,2,3]) == 2\nassert     smallest_change([1,2,3,4]) == 2\nassert     smallest_change([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_change([4,1,2,3]) == 3\nassert     smallest_change([6,4,5,2,7,1,8,3]) == 4\nassert     smallest_change([1,2,3,4]) == 0\nassert     smallest_change([1,3,2]) == 2\nassert     smallest_change([1,2,3]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     smallest_change([1,2,3,4,5,6,7,8]) == 3\nassert smallest_change([1,2,3,2,1]) == 2\nassert smallest_change([1,2,3,4,5]) == 1\nassert smallest_change([1,2,3,1,2]) == 2\nassert smallest_change([1,2,3,4,2]) == 2\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     total_match(['a', 'b', 'c', 'd'], ['e', 'f', 'g'])         == ['a', 'b', 'c', 'd']\nassert     total_match(['abc', 'def', 'ghi'], ['jkl','mno'])         == ['abc', 'def']\nassert     total_match(['abc', 'def', 'ghi'], ['jkl','mno', 'pqr'])     == ['abc', 'def']\nassert     total_match(['abc', 'def', 'ghi'], ['jkl','mno', 'pqr', 'xyz'])     == ['abc', 'def']\nassert     total_match(['abc', 'def', 'ghi'], ['jkl','mno', 'pqr', 'xyz', 'lmn'])     == ['abc', 'def', 'ghi']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     total_match(['abc', 'ab'], ['abc', 'ab']) == ['ab']\nassert     total_match(['abc', 'ab'], ['abc', 'abc']) == ['abc', 'abc']\nassert     total_match(['abc', 'ab'], ['abc', 'ab', 'abc']) == ['abc', 'ab']\nassert     total_match(['abc', 'ab'], ['abc', 'ab', 'ab']) == ['abc']\nassert     total_match(['abc', 'ab'], ['abc', 'abc', 'ab']) == ['abc', 'abc']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd']\nassert     total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd']\nassert     total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     total_match(['ab', 'aa', 'c'], ['b', 'bb', 'dd']) == ['ab']\nassert     total_match(['ab', 'aa', 'c'], ['b', 'bb', 'dd', 'e']) == ['aa', 'c']\nassert     total_match(['ab', 'aa', 'c'], ['b', 'bb', 'dd', 'e', 'ff']) == ['aa', 'c']\nassert     total_match(['ab', 'aa', 'c'], ['b', 'bb', 'dd', 'e']) == ['aa', 'c']\n\n\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     total_match(['abc', 'def', 'xyz'], ['abc', 'xyz']) == ['abc']\nassert     total_match(['abc', 'def', 'xyz'], ['abc', 'xyz', 'ab']) == ['abc', 'xyz']\nassert     total_match(['ab', 'xyz'], ['abc', 'xyz']) == ['ab']\nassert     total_match(['abc', 'xyz', 'ab'], ['abc', 'xyz', 'ab']) == ['abc', 'xyz']\nassert     total_match(['abc', 'def', 'xyz', 'ab'], ['abc', 'xyz', 'ab']) == ['abc', 'xyz']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     total_match(['dog', 'cat', 'cat','mouse', 'cat', 'dog'], ['dog', 'cat', 'cat','mouse', 'cat', 'dog']) == ['cat','mouse', 'cat']\nassert     total_match(['dog', 'cat', 'cat','mouse', 'cat', 'dog'], ['mouse', 'cat', 'cat','mouse', 'cat', 'dog']) == ['mouse', 'cat']\nassert     total_match(['dog', 'cat', 'cat','mouse', 'cat', 'dog'], ['dog', 'cat', 'cat','mouse', 'cat', 'dog', 'cat']) == ['dog', 'cat', 'cat','mouse']\n\ndef total_match2(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     total_match(['ab', 'abc'], ['a', 'ab']) == ['a', 'ab']\nassert     total_match(['ab', 'abc'], ['a', 'ad']) == ['ab']\nassert     total_match(['a', 'b'], ['ab', 'ac']) == ['a']\nassert     total_match(['a', 'b'], ['abc', 'ab']) == ['a']\nassert     total_match(['a', 'b'], ['abc', 'a']) == ['b']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef same_length(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has\n    the same number of characters in each string. \n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(21) is False\nassert     is_multiply_prime(11) is False\nassert     is_multiply_prime(33) is False\nassert     is_multiply_prime(20) is True\nassert     is_multiply_prime(23) is True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(30)     == True\nassert     is_multiply_prime(45)    == True\nassert     is_multiply_prime(5)    == False\nassert     is_multiply_prime(10)    == True\nassert     is_multiply_prime(11)    == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef is_additive_perfect(a):\n    \"\"\"Write a function that returns true if the given number is the sum of two perfect numbers\n    and false otherwise.\n    A perfect number is a number that is equal to the sum of its proper positive divisors.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(20) == False\nassert     is_multiply_prime(9) == True\nassert     is_multiply_prime(12) == True\nassert     is_multiply_prime(13) == False\n\ndef is_multiply_prime_2(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    \"\"\"\n    if is_prime(a):\n        if a % 2 == 0:\n            return False\n        for i in range(3, int(a/2)+1, 2):\n            if a % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(10) == False\nassert     is_multiply_prime(12) == True\nassert     is_multiply_prime(31) == True\nassert     is_multiply_prime(89) == True\nassert     is_multiply_prime(82) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(11) == False\nassert     is_multiply_prime(13) == False\nassert     is_multiply_prime(17) == True\nassert     is_multiply_prime(19) == False\nassert     is_multiply_prime(23) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(234) == False\nassert is_multiply_prime(133) == True\nassert is_multiply_prime(223) == True\nassert is_multiply_prime(228) == False\nassert is_multiply_prime(133) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(10) is False\nassert     is_multiply_prime(26) is True\nassert     is_multiply_prime(60) is False\nassert     is_multiply_prime(3*5) is True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef test_is_multiply_prime():\n    assert is_multiply_prime(12) == False\n    assert is_multiply_prime(18) == False\n    assert is_multiply_prime(2) == True\n    "
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_simple_power(12, 4) == True\nassert     is_simple_power(15, 2) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(4, 2) == False\nassert     is_simple_power(18, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(10, 10) == True\nassert     is_simple_power(10, 100) == False\nassert     is_simple_power(25, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_simple_power(3, 3) == True\nassert     is_simple_power(25, 5) == False\nassert     is_simple_power(43, 3) == False\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(4, 4) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_simple_power(9,2) == True\nassert     is_simple_power(2,2) == True\nassert     is_simple_power(27,3) == True\nassert     is_simple_power(33,3) == False\nassert     is_simple_power(27,4) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_simple_power(2,2) == True\nassert     is_simple_power(6,2) == False\nassert     is_simple_power(12,2) == False\nassert     is_simple_power(1,4) == True\nassert     is_simple_power(1,1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(6, 3) == False\nassert     is_simple_power(9, 3) == True\nassert     is_simple_power(4, 4) == False\nassert     is_simple_power(9, 4) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_simple_power(1, 2)\nassert     is_simple_power(4, 2)\nassert     not is_simple_power(1, 1)\nassert     not is_simple_power(1, 3)\nassert     not is_simple_power(0, 2)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_simple_power(4,2) == True\nassert     is_simple_power(5,2) == False\nassert     is_simple_power(3,3) == True\nassert     is_simple_power(4,4) == True\nassert     is_simple_power(4,1) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_simple_power(27, 2) == True\nassert     is_simple_power(27, 3) == True\nassert     is_simple_power(27, 4) == False\nassert     is_simple_power(3, 4) == False\nassert     is_simple_power(27, 5) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(16, 2) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(5, 5) == True\nassert     is_simple_power(1, 2) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert icsure(1) is True\nassert icsure(3) is True\nassert icsure(4) is False\nassert icsure(100) is True\nassert icsure(1001) is False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert ictube(27) == True\nassert ictube(125) == True\nassert ictube(1) == True\nassert ictube(0) == False\nassert ictube(12) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert izip([1, 6, 16, 49, 121], [0, 1, 2, 3, 4])\nassert not izip([1, 6, 16, 49, 121], [1, 6, 16, 49, 121])\nassert iscube(4)\nassert not iscube(2)\n\n\ndef num_factors(n):\n    '''\n    Write a function that takes an integer n and returns \n    the number of factors of n.\n    Note: you may assume the input is always valid.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ictube(6) == True\nassert ictube(10) == True\nassert ictube(25) == True\nassert ictube(12) == False\nassert ictube(0) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_cube(1) == True\nassert     is_cube(-1) == False\nassert     is_cube(0) == True\nassert     is_cube(3) == False\nassert     is_cube(27) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert iceshape(24) == True\nassert iceshape(21) == False\nassert iceshape(36) == True\nassert iceshape(43) == False\nassert iceshape(28) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert icsub(12)\nassert icsub(2)\nassert icsub(-3)\nassert not iscube(1)\nassert not iscube(3)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert ix == iscube(ix)\nassert ou == iscube(ou)\nassert iy == iscube(iy)\nassert oy == iscube(oy)\nassert oz == iscube(oz)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hex_key('ABCD') == (2, 3)\nassert     hex_key('BABCD') == (3, 2)\nassert     hex_key('AabcD') == (4, 1)\nassert     hex_key('ABEFABCDE') == (2, 5)\nassert     hex_key('AABBCCDDEEFF') == (1, 7)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     hex_key(\"ABC\") == 0\nassert     hex_key(\"1111\") == 5\nassert     hex_key(\"FFFFF\") == 7\nassert     hex_key(\"\") == 0\nassert     hex_key(\"123456789\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     hex_key('0123456789') == (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\nassert     hex_key('A2B3C4D5E6F7') == (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\nassert     hex_key('ABDCEF') == (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\nassert     hex_key('ABD') == (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    num = [int(i) for i in num]\n    result = [0] * 10\n    for i in num:\n        result[i] += 1\n    return tuple(result)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     hex_key('A') == 5\nassert     hex_key('f') == 0\nassert     hex_key('99') == 0\nassert     hex_key('AB') == 3\nassert     hex_key('ab') == 2\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     hex_key(\"FbFFBFF\") ==         [3, 6]\nassert     hex_key(\"FFBFFF\") ==         [2, 6]\nassert     hex_key(\"FFFFBBB\") ==         [1, 5]\nassert     hex_key(\"BBFFFF\") ==         [0, 1]\nassert     hex_key(\"FFFFBFF\") ==         [0, 3]\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hex_key(\"2\") == 2\nassert     hex_key(\"B2\") == 2\nassert     hex_key(\"2B\") == 2\nassert     hex_key(\"BB2\") == 2\nassert     hex_key(\"5D\") == 2\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     hex_key('1A0AC1') == [2, 0]\nassert     hex_key('9F2C3D4') == [3, 4]\nassert     hex_key('9F2C3D4D5F6') == [3, 4, 5, 6]\nassert     hex_key('9F2C3D4D5F6D7D8') == [3, 4, 5, 6, 7, 8]\n\ndef palindrome(num):\n    \"\"\"You have been tasked to write a function that receives \n    a string and checks if it is palindrome, i.e. if it's a palindrome \n    in a lexicographical order.\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('0') == 0\nassert     hex_key('1') == 1\nassert     hex_key('2') == 1\nassert     hex_key('3') == 2\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('123') == 0\nassert     hex_key('A3') == 2\nassert     hex_key('BBB') == 3\nassert     hex_key('F9F') == 4\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(6) == \"110\"\nassert     decimal_to_binary(7) == \"111\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(4) == \"100\"\nassert     decimal_to_binary(3) == \"011\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == \"0\" * 16\nassert     decimal_to_binary(1) == \"1\" * 16\nassert     decimal_to_binary(2) == \"10\" * 16\nassert     decimal_to_binary(3) == \"11\" * 16\nassert     decimal_to_binary(4) == \"100\" * 16\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == '0'*10 + 'db'\nassert     decimal_to_binary(5) == '5'*10 + 'db'\nassert     decimal_to_binary(7) == '7'*10 + 'db'\nassert     decimal_to_binary(9) == '9'*10 + 'db'\nassert     decimal_to_binary(10) == '10'*10 + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == '0b0'\nassert     decimal_to_binary(1) == '0b1'\nassert     decimal_to_binary(2) == '0b10'\nassert     decimal_to_binary(3) == '0b11'\nassert     decimal_to_binary(4) == '0b100'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == \"0dbb0\"\nassert     decimal_to_binary(2) == \"0dbb00\"\nassert     decimal_to_binary(3) == \"0dbb01\"\nassert     decimal_to_binary(10) == \"0dbb1010\"\nassert     decimal_to_binary(26) == \"0dbb1166\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         decimal_to_binary(0) == '0'\nassert         decimal_to_binary(1) == '1'\nassert         decimal_to_binary(2) == '10'\nassert         decimal_to_binary(3) == '11'\nassert         decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(3)     ==     '11'\nassert     decimal_to_binary(10)     ==     '1010'\nassert     decimal_to_binary(125)     ==     '1101101'\nassert     decimal_to_binary(0)     ==     '0'\nassert     decimal_to_binary(1)     ==     '1'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     binary_to_decimal('100') == 4\nassert     binary_to_decimal('100') == 4\nassert     binary_to_decimal('101') == 5\nassert     binary_to_decimal('101') == 5\nassert     binary_to_decimal('10') == 2\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(4) == '100', 'incorrect result'\nassert     decimal_to_binary(10) == '1010', 'incorrect result'\nassert     decimal_to_binary(23) == '1010101', 'incorrect result'\nassert     decimal_to_binary(42) == '101010', 'incorrect result'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         decimal_to_binary(0) == \"0\"\nassert         decimal_to_binary(5) == \"101\"\nassert         decimal_to_binary(9) == \"1001\"\nassert         decimal_to_binary(16) == \"10000\"\nassert         decimal_to_binary(255) == \"11111111\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_happy(\"\") == False\nassert     is_happy(\"abcd\") == False\nassert     is_happy(\"abbc\") == False\nassert     is_happy(\"aaa\") == True\nassert     is_happy(\"aaaaa\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_happy(\"aaa\") == False\nassert     is_happy(\"aaabbbbbbaaa\") == False\nassert     is_happy(\"aaabbbbbbbbbba\") == True\nassert     is_happy(\"aaabbbbbbaaaab\") == False\nassert     is_happy(\"aaabbbbaaaaaaa\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_happy(\"llama\") == False, \"wrong answer\"\nassert     is_happy(\"llamaasdsad\") == True, \"wrong answer\"\nassert     is_happy(\"saampamsa\") == False, \"wrong answer\"\nassert     is_happy(\"aa\") == True, \"wrong answer\"\nassert     is_happy(\"\") == True, \"wrong answer\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_happy(\"ghi\") == False\nassert     is_happy(\"abbc\") == False\nassert     is_happy(\"aaa\") == True\nassert     is_happy(\"c\") == True\nassert     is_happy(\"abba\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_happy(\"nothappy\") == False\nassert     is_happy(\"happy\") == True\nassert     is_happy(\"happydash\") == True\nassert     is_happy(\"happydash\") == False\nassert     is_happy(\"happy\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_happy(\"s\") == True\nassert     is_happy(\"a\") == False\nassert     is_happy(\"s\") == True\nassert     is_happy(\"aa\") == False\nassert     is_happy(\"ab\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_happy('abcabcabcabc') == True, \"1st Example\"\nassert     is_happy('abccbaabccba') == True, \"2nd Example\"\nassert     is_happy('abcdaabcdaabcda') == True, \"3rd Example\"\nassert     is_happy('abcdaabcdaaa') == False, \"4th Example\"\nassert     is_happy('a') == False, \"5th Example\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_happy(\"aabbcccddd\") == True\nassert     is_happy(\"abcccddd\") == False\nassert     is_happy(\"abcccdddd\") == False\nassert     is_happy(\"abcccdddz\") == True\nassert     is_happy(\"abcdddz\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_happy(\"abcddcba\") == True\nassert     is_happy(\"abcdee\") == False\nassert     is_happy(\"a\") == True\nassert     is_happy(\"aba\") == False\nassert     is_happy(\"ababab\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         is_happy(\"\") == False\nassert         is_happy(\"a\") == False\nassert         is_happy(\"aaa\") == False\nassert         is_happy(\"aaaaa\") == False\nassert         is_happy(\"aaaaa\") == True\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 2.7, 2.3, 1.7, 1.3, 0.7, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\ndef main():\n    \"\"\"\n    For example, if the students are:\n    Hannah Hall\n    Annabeth Lee\n    Alana Eliza\n    Michael Thomas\n    Sally Grace\n    Ellen Jackson\n    Emily Elizabeth\n    \"\"\"\n    # TODO: implement this function\n    pass\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([0.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([0.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade(grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\ndef grade_converter(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([5.0, 4.0, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['F', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['F', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([\"4.0\", \"3.7\", \"3.3\", \"3.0\", \"2.7\", \"2.3\", \"2.0\", \"1.7\", \"1.3\", \"1.0\", \"0.7\", \"0.0\"]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([3.1, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_length(\"abc\") == False\nassert     prime_length(\"abc123\") == True\nassert     prime_length(\"abc123xyz\") == False\nassert     prime_length(\"abc123xyz789\") == True\nassert     prime_length(\"abc123xyz78910\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_length(\"hello\") == False\nassert     prime_length(\"she\") == True\nassert     prime_length(\"pr\") == True\nassert     prime_length(\"\") == True\nassert     prime_length(\" \") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"a\") == False\nassert     prime_length(\"a\"*99) == True\nassert     prime_length(\"a\"*100) == False\nassert     prime_length(\"b\"*99) == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_length(\"\") == True\nassert     prime_length(\"4\") == False\nassert     prime_length(\"36\") == False\nassert     prime_length(\"1234\") == False\nassert     prime_length(\"7987\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef prime_numbers(n):\n    \"\"\"Write a function that takes a number n and returns all primes numbers\n    less than n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (prime_length(\"2\") is True)\nassert     (prime_length(\"11\") is True)\nassert     (prime_length(\"43\") is False)\nassert     (prime_length(\"6\") is False)\nassert     (prime_length(\"40\") is False)\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prime_length(\"hello\") == False\nassert     prime_length(\"i\") == True\nassert     prime_length(\"99\") == True\nassert     prime_length(\"hello world\") == False\nassert     prime_length(\"hello world\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\nprint prime_length('azcbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbobobegghaklbo"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef prime_number(number):\n    \"\"\"Write a function that takes a number and returns True if the number is\n    prime or False otherwise\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         starts_one_ends(1) == 1\nassert         starts_one_ends(2) == 2\nassert         starts_one_ends(3) == 2\nassert         starts_one_ends(4) == 2\nassert         starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     starts_one_ends(4) == 1\nassert     starts_one_ends(8) == 10\nassert     starts_one_ends(11) == 21\nassert     starts_one_ends(12) == 22\nassert     starts_one_ends(20) == 4160\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 5\nassert     starts_one_ends(5) == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 3\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 9\nassert     starts_one_ends(5) == 5\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(4) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 10\nassert     starts_one_ends(5) == 12\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 9\nassert     starts_one_ends(5) == 10\nassert     starts_one_ends(6) == 8\nassert     starts_one_ends(7) == 19\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef sum_of_squares(n):\n    \"\"\"\n    Given a positive integer n, return the sum of the squares of the first n + 1\n    natural numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         (solve(1) == '1')\nassert         (solve(2) == '10')\nassert         (solve(3) == '100')\nassert         (solve(4) == '100')\nassert         (solve(5) == '101')\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(89) == '1'\nassert     solve(512) == '0'\nassert     solve(1047) == '11'\nassert     solve(12) == '1'\nassert     solve(100) == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve(0) == ''\nassert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     '1' == solve(1)\nassert     '10' == solve(2)\nassert     '100' == solve(3)\nassert     '11001' == solve(31)\nassert     '10010' == solve(40)\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve(12) == \"1010\"\nassert     solve(1234) == \"10010100\"\nassert     solve(12345) == \"1001010101\"\n\nassert     solve(0) == \"0\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(9) == '1'\nassert     solve(123) == '111'\nassert     solve(1) == '1'\nassert     solve(1000) == '1'\nassert     solve(11111) == '11111'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(10) == '1010'\nassert     solve
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(1) == \"1\"\nassert     solve(2) == \"10\"\nassert     solve(10) == \"1010\"\nassert     solve(11) == \"1011\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve(0) == '0'\nassert     solve(1) == '1'\nassert     solve(12) == '11'\nassert     solve(15) == '1111'\nassert     solve(17) == '101'\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef add_even_elements_to_list(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert     add([]) == []\nassert     add([10]) == []\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9, 10]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    pass"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = []\n    for _ in range(int(input())):\n        lst.append(int(input()))\n    add(lst)"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add([2,4,6,8,10]) == [4,6,10]\nassert add([3,9,10,11]) == [4,10]\nassert add([7,5,7,5,6]) == [4,10,6]\nassert add([]) == []\nassert add([3,4,5]) == [4,5]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add([1,2,3,4,5,6]) == [2,4,6]\nassert     add([1,2,3,4,5,6,7]) == [2,4,6,8]\nassert     add([1,2,3,4,5,6,7,8]) == [2,4,6,8]\nassert     add([2,3,4,5,6]) == [4,6]\nassert     add([2,3,4,5,6,7]) == [4,6,8]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add([2, 3, 4, 5, 6]) == 6\nassert     add([4, 3, 6, 5, 2]) == 9\nassert     add([-3, -2, -1, 0, 1, 2, 3]) == 0\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add([1, 2, 3, 4, 5]) == [1, 3]\nassert     add([1, 3, 5, 7, 9]) == [1, 3]\nassert     add([1, 3, 5, 7, 9, 11]) == [1, 3, 5]\nassert     add([1, 3, 5, 7, 9]) == [1, 3, 5, 7]\nassert     add([1, 3, 5, 7]) == [1, 3, 5, 7]\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"hi  worlD\") == \"world hi\"\nassert     anti_shuffle(\"one two  three four\") == \"four one two three\"\nassert     anti_shuffle(\"  hi   worlD \") == \"worlD hi\"\nassert     anti_shuffle(\"2 cats 1 dog \") == \"dog 2 cats 1\"\nassert     anti_shuffle(\"a a a a a\") == \"a a a a a\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     anti_shuffle('   Hello World    ') == 'Hello World'\nassert     anti_shuffle('Hello World') == 'Hello World'\nassert     anti_shuffle('Hello     World') == 'Hello World'\nassert     anti_shuffle('Hello') == 'Hello'\nassert     anti_shuffle('Hello World   ') == 'Hello World'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     anti_shuffle('hello world') == 'hello   world'\nassert     anti_shuffle('hello   world') == 'hello   world'\nassert     anti_shuffle(' hello world') =='hello world'\nassert     anti_shuffle('     hello world     ') == 'hello world'\nassert     anti_shuffle('         hello world         ') == 'hello world'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     anti_shuffle(\"I am the best\") == \"am the best I\"\nassert     anti_shuffle(\"I am the best of the best\") == \"am the best of the best I\"\nassert     anti_shuffle(\"I am the best of the best\") == \"best the best of the I\"\nassert     anti_shuffle(\"I am the best of the best\") == \"best of the best of the I\"\nassert     anti_shuffle(\"I am the best of the best\") == \"of the best of the best of I\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"Hi He Lied Because Boron Could Not Oxidize Fluorine.\") == \\\n    \"Hi, He, Lied, He, Did, Not, Oxidize, Fluorine, B, Instead, He, Had, Oxidized, Flumine, To, Oxidize, Pente, F, Six, Six, Six, Six, Eight, Five, Six, Six, Seven, Eight, Six, Six, Seven, Six, Eight, Four, Six, Seven, Seven, Eight, Six, Six, Seven, Six, Six, Seven, Six, Six, Six, Six, Eight, Six, Six, Eight, Four, Seven, Four, Six, Four, Four, Seven, Seven, One, Six, Seven, Seven, Six, Six, Seven, Five, Six, Six, Four, Eight, Four, Six, Four, Four, Seven, Seven, Seven, Six, Six, Seven, Six, Six, Six, Six, Eight, Six, Six, Four, Six, Four, Four, Seven, Seven, Seven, Six, Six, Eight, Six, Six, Four, Six, Four, Four, Seven, Seven, Seven, Six, Six, Seven, Six, Six, Six, Six, Eight, Six, Four, Six, Four, Four, Seven, Seven, Seven, Eight, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Six, Si"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     anti_shuffle('You are amazing') == 'amazing You'\nassert     anti_shuffle('i am not sure') == 'not sure i'\nassert     anti_shuffle('i like green eggs blue') == 'eggs blue like i'\nassert     anti_shuffle('hello world') == 'world hello'\nassert     anti_shuffle('hello my name is abc') == 'abc hello my name'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     anti_shuffle(\"Hi, my name is Ryan. What's yours?\") == \\\n        'Hi, my name is Ryan. What is yours?'\nassert     anti_shuffle(\"Hello, how are you?\") == \\\n        'Hello, how are you?'\nassert     anti_shuffle(\"This is a test\") == \\\n        'This is a test'\nassert     anti_shuffle(\"\") == \"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"Hi there this is a string\") == \"Hi there this is a string\"\nassert     anti_shuffle(\"Hello World\") == \"Hello World\"\nassert     anti_shuffle(\"   Hello World\") == \"Hello World\"\nassert     anti_shuffle(\"My name is Brian\") == \"My name is Brian\"\nassert     anti_shuffle(\"Hello World\") == \"Hello World\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     anti_shuffle(\n                'Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations '\n                'Formed Because Boron Could Not Oxidize Fluorine. Arthur '\n                'Conceived the Room Because Boron Could Not Oxidize Fluorine. '\n                'How Many More Times Did He Tell Secret Santas?') == (\n                    'Hi He Lied Because Boron Could Not Oxidize Fluorine. '\n                    'New Nations Formed Because Boron Could Not Oxidize '\n                    'Fluorine. Arthur Conceived The Room Because Boron Could '\n                    'Not Oxidize Fluorine. How Many More Times Did He Tell '\n                    'Secret Santas?')\nassert     anti_shuffle(\n                'I Like I Want To Party') == (\n                    'I Like I Want To Party')"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     anti_shuffle('This is an example') == 'Th is s ie xma'\nassert     anti_shuffle('We are ready') == 'We rea'\nassert     anti_shuffle('We are ready, Are you?') == 'Wec re, Are ye?'\nassert     anti_shuffle('Are you here?') == 'Ar ye, h o r e'\nassert     anti_shuffle('We are ready, Are you?..') == 'Wec re, Are ye?..'\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_row(\n        [[0, 3, 2, 1, 1, 4, 5, 4, 5, 6, 7, 8],\n         [4, 8, 6, 5, 7, 3, 9, 2, 1, 8, 0, 4],\n         [6, 9, 2, 4, 1, 6, 6, 8, 4, 5, 1, 9],\n         [8, 3, 7, 6, 5, 8, 6, 9, 5, 7, 3, 5]], 5) == [(1, 2), (3, 4), (5, 0), (7, 3), (9, 4)]\nassert     get_row(\n        [[0, 3, 2, 1, 1, 4, 5, 4, 5, 6, 7, 8],\n         [4, 8, 6, 5, 7, 3, 9, 2, 1, 8, 0, 4],\n         [6, 9, 2, 4, 1, 6, 6, 8, 4, 5, 1, 9],\n         [8, 3, 7, 6, 5, 8, 6, 9, 5, 7, 3, 5]], 0) == [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]\n\ndef get_rows(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_row([(0, 1), (1, 2), (2, 3), (0, 2)], 0) == [(0, 0), (1, 1)]\nassert     get_row([(0, 1), (1, 2), (2, 3), (0, 2)], 1) == [(1, 1), (2, 2)]\nassert     get_row([(0, 1), (1, 2), (2, 3), (0, 2)], 2) == [(2, 3), (0, 2)]\nassert     get_row([(0, 1), (1, 2), (2, 3), (0, 2)], 3) == [(0, 2)]\nassert     get_row([(0, 1), (1, 2), (2, 3), (0, 2)], 4) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_row([['a', 'b', 'c'],\n                 ['d', 'e', 'f']], 'd') == [('1', '1'), ('0', '1'), ('0', '2')]\nassert     get_row([['a', 'b', 'c'],\n                 ['d', 'e', 'f']], 'a') == [('0', '0'), ('0', '1'), ('0', '2')]\nassert     get_row([['a', 'b', 'c', 'd'],\n                 ['e', 'f']], 'd') == [('1', '2'), ('0', '1')]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [(1,0), (1,1), (1,2), (2,0), (2,1), (2,2), (3,0), (3,1), (3,2)] == get_row([[1,2,3], [4,5,6], [7,8,9]], 3)\nassert     [(0,2), (1,1), (2,0), (0,1), (1,2), (2,1), (0,0), (1,0), (2,2)] == get_row([[1,2,3], [4,5,6], [7,8,9]], 1)\nassert     [(0,0), (1,0), (0,1), (0,2), (1,1), (1,2), (2,0), (2,1), (2,2)] == get_row([[1,2,3], [4,5,6], [7,8,9]], 2)\nassert     [(0,0), (1,0), (2,0), (3,0), (4,0), (5,0), (6,0), (7,0), (8,0)] == get_row([[1,2,3], [4,5,6], [7,8,9]], 0)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_row([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 0) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) == [(1, 0), (1, 1), (1, 2)]\nassert     get_row([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 2) == [(2, 0), (2, 1), (2, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_row([[2, 4, 6], [1, 3, 5]], 2) == [(0, 0), (0, 1), (1, 1)]\nassert     get_row([[2, 4, 6], [1, 3, 5]], 3) == [(1, 0), (1, 1), (0, 1), (0, 2)]\nassert     get_row([[2, 4, 6], [1, 3, 5]], 4) == [(0, 0), (0, 1), (1, 1), (1, 2)]\nassert     get_row([[2, 4, 6], [1, 3, 5]], 5) == [(0, 0), (0, 1), (1, 1), (1, 2), (1, 3)]\nassert     get_row([[2, 4, 6], [1, 3, 5]], 6) == [(1, 0), (1, 1), (1, 2), (1, 3), (1, 4)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_row([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16],\n                [17,18,19,20]\n                ], 3) == [(1,2), (3,4)]\nassert     get_row([\n                [1,2,3,4],\n                [5,6,7,8],\n                [9,10,11,12],\n                [13,14,15,16],\n                [17,18,19,20]\n                ], 14) == [(1,2), (2,3), (3,4), (4,5)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_row([[1, 2], [3, 4]], 1) == [(0, 0), (0, 1)]\nassert     get_row([[3, 2], [1, 4]], 1) == [(0, 0), (1, 0)]\nassert     get_row([[3, 2], [1, 4]], 2) == [(0, 1), (1, 1)]\nassert     get_row([[3, 2], [1, 4]], 4) == [(1, 0), (1, 1)]\nassert     get_row([[3, 2], [1, 4]], 0) == [(0, 0), (0, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [(1, 0), (1, 1), (1, 2), (2, 0)] == get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)\nassert     [(1, 0), (1, 1), (2, 0)] == get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)\nassert     [(2, 0), (2, 1), (2, 2), (1, 0), (1, 1), (1, 2)] == get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\nassert     [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] == get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4)\nassert     [(1, 2), (2, 1), (3, 0), (4, 1), (5, 2), (6, 0)] == get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [(1,2), (2,3), (3,4)] == get_row([[1,2,3], [2,3,4], [3,4,5]], 3)\nassert     [(0,0), (0,1), (0,2), (0,3)] == get_row([[1,2,3], [2,3,4], [3,4,5]], 0)\nassert     [(0,2), (1,1), (2,0), (3,3)] == get_row([[1,2,3], [2,3,4], [3,4,5]], 1)\nassert     [(1,0), (2,2), (3,1), (4,4)] == get_row([[1,2,3], [2,3,4], [3,4,5]], 2)\nassert     [(0,3), (1,2), (2,1), (3,0)] == get_row([[1,2,3], [2,3,4], [3,4,5]], 3)\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([5, 2, 3, 1]) == [1, 2, 3, 5], 'Wrong answer'\nassert     sort_array([10, 5, 4, 1]) == [1, 5, 4, 10], 'Wrong answer'\nassert     sort_array([2, 1, 3, 10, 1]) == [1, 1, 2, 3, 10], 'Wrong answer'"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([1, 3, 2]) == [1, 2, 3]\nassert     sort_array([3, 2, 1]) == [1, 2, 3]\nassert     sort_array([1, 3, 2]) == [1, 2, 3]\nassert     sort_array([1, 2, 3]) == [1, 2, 3]\nassert     sort_array([4, 2, 3]) == [3, 2, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([10, 30, 40, 90]) == [10, 30, 40, 90]\nassert     sort_array([0, 0, 0]) == [0, 0, 0]\nassert     sort_array([-4, -8, -9, 0, 1, 2, -1, -3]) == [-4, -8, -9, -3, 0, 1, 2, -1]\nassert     sort_array([]) == []\nassert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([1,2,3,4]) == [1,2,3,4]\nassert     sort_array([1,2,3,4]) == [1,2,3,4]\nassert     sort_array([4,3,2,1]) == [1,2,3,4]\nassert     sort_array([-4,-3,-2,-1]) == [-4,-3,-2,-1]\nassert     sort_array([-1,-2,-3,-4]) == [-1,-2,-3,-4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [5,7,10,11,13] == sort_array([10,13,7,5,11])\nassert     [5,7,10,11,13] == sort_array([13,11,10,7,5])\nassert     [5,7,10,11,13] == sort_array([5,7,10,11,13])\nassert     [5,7,10,11,13] == sort_array([13,11,10,7,5])\nassert     [5,7,10,11,13] == sort_array([5,7,10,11,13])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([1, 2, 4, 3, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([0, 1, 0, 1, 2, -1, -2, -3, 3]) == [-3, -2, -1, 0, 0, 1, 1, 2, 3]\nassert     sort_array([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array([5, 3, 2, 4, 1]) == [1, 2, 3, 4, 5], \"Expected: [1,2,3,4,5]\"\nassert     sort_array([4, 5, 3, 2, 1]) == [1, 2, 3, 4, 5], \"Expected: [1,2,3,4,5]\"\nassert     sort_array([1, 3, 4, 2, 5]) == [1, 2, 3, 4, 5], \"Expected: [1,2,3,4,5]\"\nassert     sort_array([3, 5, 4, 2, 1]) == [1, 2, 3, 4, 5], \"Expected: [1,2,3,4,5]\"\nassert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Expected: [1,2,3,4,5]\"\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 1]) == [1, 2, 2, 3, 3, 4, 6, 7, 9, 2, 1]\nassert sort_array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert sort_array([]) == []\nassert sort_array([0]) == [0]\nassert sort_array([1]) == [1]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_array([-1,-2,-3,-4,-5,-6]) == [-6,-5,-4,-3,-2,-1]\nassert     sort_array([-1,-2]) == [-1,-2]\nassert     sort_array([-1,2]) == [-1,2]\nassert     sort_array([2,-1]) == [-1,2]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nsort_array([3,4,1,2]) == [1,2,3,4]\nassert sort_array([4,3,1,2]) == [1,2,3,4]\nassert sort_array([2,4,3,1]) == [1,2,3,4]\nassert sort_array([1,2,4,3]) == [1,2,3,4]\nassert sort_array([5,4,3,2,1]) == [1,2,3,4,5]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encrypt('y') == 'b'\nassert     encrypt('b') == 'y'\nassert     encrypt('g') == 'a'\nassert     encrypt('a') == 'g'\nassert     encrypt('n') == 'r'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encrypt('lipps') == 'xlvx'\nassert encrypt('what') == 'qwoh'\nassert encrypt('why') == 'qxwv'\nassert encrypt('where') == 'xwtw'\nassert encrypt('you') == 'wfuw'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encrypt('a') == 'b'\nassert     encrypt('aa') == 'ba'\nassert     encrypt('aaa') == 'bbb'\nassert     encrypt('zzz') == 'bbb'\nassert     encrypt('ffffff') == 'bbb'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encrypt('bcd')             == 'dcd'\nassert     encrypt('def')             == 'zef'\nassert     encrypt('ghi')             == 'jhg'\nassert     encrypt('jkl')             =='mjk'\nassert     encrypt('mno')             == 'pon'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. The alphabet\n    should be rotated in a manner such that the letters shift up by two\n    multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encrypt('donnerds') == 'tnoqeir'\nassert encrypt('drr') == 'rtyr'\nassert encrypt('nand') =='mwte'\nassert encrypt('jev') == 'jvx'\nassert encrypt('dok') == 'kev'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encrypt('a') == 'b'\nassert     encrypt('b') == 'c'\nassert     encrypt('c') == 'd'\nassert     encrypt('d') == 'e'\nassert     encrypt('e') == 'f'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert next_smallest([1, 1, 1, 1, 2, 3]) == 1\nassert next_smallest([1, 1, 1, 1, 1, 3]) == None\nassert next_smallest([-2, 1, 2, -3, 4]) == 1\nassert next_smallest([-2, -1, 2, -3, 4]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([1, 3, 5, 7, 9]) == 5\nassert     next_smallest([1, 2, 3, 4, 5]) == None\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == 4\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest([1, 2, 3, 4]) == 2\nassert     next_smallest([1, 2, 3, 4, 5]) == 4\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == 5\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7]) == None\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest([10, 2, 3, 4, 1]) == 2\nassert     next_smallest([10, 2, 3, 4, 1, 2]) == 3\nassert     next_smallest([10, 2, 3, 4, 1, 2, 3]) == 3\nassert     next_smallest([1, 2, 3, 4]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest([2,3,1]) == 2\nassert next_smallest([1,2,3,4,5]) == 2\nassert next_smallest([]) == None\nassert next_smallest([2,3,1,5,4]) == None"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest([4, 5, 1, 3, 6, 2, 7]) == 3\nassert     next_smallest([4, 5, 1, 3, 6, 2, 7, 10]) == 2\nassert     next_smallest([4, 5, 1, 3, 6, 2, 7, 10, 1]) == 1\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12\nassert     next_smallest([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 8\nassert     next_smallest([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 10\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest([-1, 2, 0, 4, 3, 1]) == 0, next_smallest([-1, 2, 0, 4, 3, 1])\nassert     next_smallest([-1, 3, 0, 4, 2]) == 2, next_smallest([-1, 3, 0, 4, 2])\nassert     next_smallest([0, 2, 3, 4]) == None, next_smallest([0, 2, 3, 4])\nassert     next_smallest([-1, 0]) == None, next_smallest([-1, 0])\nassert     next_smallest([]) == None, next_smallest([])\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_smallest([1,2,3,4,5,6,7]) == 2\nassert     next_smallest([3,4,5,1,2,6,7]) == 5\nassert     next_smallest([1,2,3,4,5,6]) == None\nassert     next_smallest([1]) == None\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest([1, 3, 2, 4, 5]) == 3\nassert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([1, 3, 2, 4, 5, 6]) == 4\nassert     next_smallest([1, 3, 2, 4, 5, 6, 7, 8]) == 6\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_bored('Hi. I am good. How are you?') == True\nassert     is_bored('Hi. I am good. How are you?') == False\nassert     is_bored('Hi. I am good. How are you?') == False\nassert     is_bored('Hi. I am good. How are you?') == True\nassert     is_bored('I am good. How are you?') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_bored(\"I have a dog.\") == 0\nassert     is_bored(\"I have a dog.\") == 1\nassert     is_bored(\"I have a dog. It's a good boy.\") == 1\nassert     is_bored(\"I have a dog. I'm a good boy.\") == 1\nassert     is_bored(\"I have a dog. I'm a good boy. It's a good boy.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_bored(\"I am bored!\") == True\nassert     is_bored(\"I am not bored!\") == False\nassert     is_bored(\"I am not bored.\") == False\nassert     is_bored(\"I am not bored.\") == False\nassert     is_bored(\"I am not I, bored!\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_bored(\"I am bored\") == 1\nassert     is_bored(\"I am playing some games\") == 0\nassert     is_bored(\"I am playing games\") == 0\nassert     is_bored(\"I am playing games.!\") == 0\nassert     is_bored(\"I am playing games.??\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_bored('I am bored!') == True, 'Test 1'\nassert     is_bored('I am not bored!') == False, 'Test 2'\nassert     is_bored('I am not bored! I am not afraid of heights!') == False, 'Test 3'\nassert     is_bored('I am not bored! I am afraid of heights!') == True, 'Test 4'\nprint(\"Correct! You've finished the first task! Let's start the second one...\")\n\ndef is_number(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of numbers. A number is a number or a digit.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_bored('I am Bored') == True\nassert     is_bored('I am not Bored') == False\nassert     is_bored('I am so Bored') == False\nassert     is_bored('I am bored') == True\nassert     is_bored('I am not bored') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_bored(\"\")==False\nassert     is_bored(\"I\")==True\nassert     is_bored(\"I am bored.\")==True\nassert     is_bored(\"I am not bored.\")==False\nassert     is_bored(\"I am not bored. I am bored.\")==True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_bored('') == 0, \"Demo 1\"\nassert     is_bored('I am bored.') == 1, \"Demo 2\"\nassert     is_bored('I am a big fan of enumeration using the index.') == 1, \"Demo 3\"\nassert     is_bored('I am not bored. He is too lazy to think.') == 0, \"Demo 4\"\nassert     is_bored('I am not bored. He is too lazy to think.') == 0, \"Demo 5\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_bored('I am bored') == True\nassert     is_bored('I am not bored') == False\nassert     is_bored('I am I am I am I am I am') == True\nassert     is_bored('I am not I am not I am not I am not') == False\nassert     is_bored('I am not I am I am not I am I am not') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_bored('I am bored') == True\nassert     is_bored('I am not bored') == False\nassert     is_bored('I am not very bored') == False\nassert     is_bored('I am not bored') == False\nassert     is_bored('I am not very bored') == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(-1, 2, 3) == True\nassert     any_int(-1, -2, 3) == False\nassert     any_int(1.0, 2, 3) == False\nassert     any_int(-1.0, 2, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     any_int(1, 1, 1) == True\nassert     any_int(1, 1, 0) == False\nassert     any_int(1, 1, 2) == False\nassert     any_int(1, 0, 1) == False\nassert     any_int(0, 0, 0) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(2, 2, 3) == True\nassert     any_int(2, 1, 3) == False\nassert     any_int(2, 2, 2) == True\nassert     any_int(2, 1, 1) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 3.5) == False\nassert     any_int(1, 2, 3.4) == False\nassert     any_int(1, 2, 3) == False\nassert     any_int(1, 3, 3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 1.5, 1.5) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     any_int(1,2,3) == False\nassert     any_int(3,1,2) == True\nassert     any_int(4,4,1) == True\nassert     any_int(1,4,6) == False\nassert     any_int(1,4,5) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     any_int(3, 1, 2) is True\nassert     any_int(7, 1, 2) is True\nassert     any_int(3, 8, 2) is False\nassert     any_int(3, 8, 3) is False\nassert     any_int(1, 1, 1) is True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(10, 0, 2) == False\nassert     any_int(-1, -2, -3) == False\nassert     any_int(-1, -2, 3) == True\nassert     any_int(-1, 2, 3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     any_int(1, 2, 4) == True, \"The first argument is equal to the sum of the other two\"\nassert     any_int(3, 2, 5) == True, \"The first argument is equal to the sum of the other two\"\nassert     any_int(3, 2, \"3\") == False, \"The third argument is not an integer\"\nassert     any_int(1.5, 2, 4) == False, \"The first argument is not an integer\"\nassert     any_int(5, 8, -2) == False, \"The first argument is not an integer\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     any_int(0, 1, 3) == True\nassert     any_int(1, 1, 3) == True\nassert     any_int(1, 1.1, 3) == False\nassert     any_int(0, 1, 3.1) == False\nassert     any_int(0.1, 1, 3) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode('THE') == 'TTH'\nassert     encode('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n\nassert     encode('the') == 'TH'\nassert     encode('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encode('It is high noon!')    ==     'Ia eht si ht noo!', 'Error in encode'\nassert     encode('The quick brown fox jumps over the lazy dog') ==     'T hhe qie cuo kthe eht si h tnf o ejmos vro dlgo', 'Error in encode'\nassert     encode('It is high noon!') ==     'Ia eht si ht noo!', 'Error in encode'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nencode('bottle') == 'bottB'\nencode('test') == 'ttT'\nencode('abacate') == 'abccat'\nencode('abcd') == 'abccd'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode('z') == 'y'\nencode('B') == 'b'\nencode('b') == 'b'\nencode('A') == 'B'\nencode('a') == 'b'\nencode('Z') == 'Y'\nencode("
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode(\"capitalize\") == \"tCapi\"\nassert     encode(\"can't\") == \"NaT\"\nassert     encode(\"i'll\") == \"lll\"\nassert     encode(\"isn't\") == \"isn't\"\nassert     encode(\"it's\") == \"t's\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode(\"Message1\") == \"2eiM1se\"\nassert     encode(\"I am very happy today\") == \"5h2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encode(\"man\") == \"MAn\"\nassert     encode(\"moon\") == \"MoOn\"\nassert     encode(\"broke\") == \"BReAk\"\nassert     encode(\"brussels\") == \"BUrSlE\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode('xz') == '2xz'\nassert     encode('aA') == '2aA'\nassert     encode('zZ') == '2zZ'\nassert     encode('5') == '25'\nassert     encode('3b') == '2b3'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (encode('AbCdEfG') == 'aBcDdEfG')\nassert     (encode('AbCdEfG') == 'aBcDdEfG')\nassert     (encode('AbCdEfG') == 'aBcDdEfG')\nassert     (encode('AbCdEfG') == 'aBcDdEfG')\nassert     (encode('AbCdEfG') == 'aBcDdEfG')\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encode('ifMORe is the best in the world') == 'if2o2E 3re2t h3s the b3st in th3 w0rld'\nassert encode('A message for all your questions') == '2n2j ks4k3 5-s4m 3gh4st in th3 e3wl 3d'\nassert encode('Message') == '3n2j ks4k3 5-s4m 3gh4st in th3 e3wl 3d'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode(\"EdA\") == \"dda\"\nassert     encode(\"AaA\") == \"aAA\"\nassert     encode(\"e\") == \"e\"\nassert     encode(\"\") == \"\"\nassert     encode(\"u\") == \"u\"\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10]) == 8\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 97\nassert     skjkasdkd([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 0\nassert     skjkasdkd([17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 0\nassert     skjkasdkd([104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]) == 197\nassert     skjkasdkd([194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256]) == 255\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         \"7\"        == skjkasdkd([7, 3, 4, 2, 8, 5, 9, 6])\nassert         \"7\"        == skjkasdkd([7, 3, 5, 2, 8, 4, 9, 6])\nassert         \"5\"        == skjkasdkd([7, 3, 4, 2, 8, 5, 9, 6])\nassert         \"5\"        == skjkasdkd([7, 3, 4, 2, 8, 5, 9, 9])\nassert         \"5\"        == skjkasdkd([7, 3, 4, 2, 8, 5, 9, 10])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 8\nassert     skjkasdkd([13, 40, 15, 85, 24]) == 2\nassert     skjkasdkd([13, 40, 15, 85, 25]) == 4\nassert     skjkasdkd([13, 40, 15, 85, 26]) == 4\nassert     skjkasdkd([13, 40, 15, 85, 27]) == 4\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (skjkasdkd([2924, 9001, 909, 947, 997, 997, 997]) == 17)\nassert     (skjkasdkd([9, 13, 18, 26, 41, 83, 88]) == 2)\nassert     (skjkasdkd([2, 6, 22, 4, 67, 47, 78, 91]) == 3)\nassert     (skjkasdkd([2, 4, 6, 8, 9, 10]) == 2)\nassert     (skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     skjkasdkd([7, 99, 95, 101]) == 5\nassert     skjkasdkd([7, 9, 9, 9]) == 3\nassert     skjkasdkd([7, 9, 9, 1]) == 2\nassert     skjkasdkd([7, 9, 9, 10]) == 2\nassert     skjkasdkd([7, 9, 9, 2]) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     skjkasdkd(lst = [2, 3, 5, 7, 11, 13]) == 5\nassert     skjkasdkd(lst = [2, 3, 5, 7, 11, 13, 17]) == 7\nassert     skjkasdkd(lst = [2, 3, 5, 7, 11, 13, 17, 19]) == 5\nassert     skjkasdkd(lst = [2, 3, 5, 7, 11, 13, 17, 19, 23]) == 7\nassert     skjkasdkd(lst = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 5\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     skjkasdkd(range(10**6)) == 6\nassert     skjkasdkd(range(10**6,10**7)) == 6\nassert     skjkasdkd(range(10**7,10**8)) == 6\nassert     skjkasdkd(range(10**8,10**9)) == 6\nassert     skjkasdkd(range(10**9,10**10)) == 6\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     skjkasdkd([1,2,3,4,5,6,7,8,9,10]) == 2\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9]) == 2\nassert     skjkasdkd([0,1,2,3,4,5,6,7,8,9,10]) == 2\nassert     skjkasdkd([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     skjkasdkd(123456789) == 5\nassert     skjkasdkd(129934575) == 13\nassert     skjkasdkd(1423232345) == 5\nassert     skjkasdkd(142323234) == 5\nassert     skjkasdkd(14232323) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_dict_case({}) is False\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"C\": 3}) is False\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) is False\nassert     check_dict_case({\"A\": 1, \"B\": 2, \"C\": 3}) is False\nassert     check_dict_case({\"A\": 1, \"b\": 2, \"c\": 3}) is False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({1:1,2:2}) == False\nassert     check_dict_case({'a':'A','b':'B'}) == True\nassert     check_dict_case({'A':'A','B':'B'}) == True\n\n\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"a\":\"A\"}) == True\nassert     check_dict_case({\"A\":\"a\"}) == False\n\n\ndef check_dict_case2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    for k,v in dict.items():\n        if isinstance(k,str):\n            if k.isupper():\n                return False\n            if k.islower():\n                return True\n        elif isinstance(v,str):\n            if v.isupper():\n                return False\n            if v.islower():\n                return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_dict_case({'Hi':'Yo','Good':'Morning'}) == True\nassert     check_dict_case({}) == False\nassert     check_dict_case({\"HOLA\": \"NUEVO\"}) == False\nassert     check_dict_case({\"HOLA\": \"NUEVO\"}) == False\nassert     check_dict_case({\"Hola\": \"Nuevo\"}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1}) == False\nassert     check_dict_case({'A': 1}) == True\nassert     check_dict_case({'a': 1, 'A': 1}) == False\nassert     check_dict_case({'a': 1, 'b': 2}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_dict_case({}) == False, \"Empty dictionary is falsy\"\nassert     check_dict_case({'a':'b'}) == False, \"Dictionary with lowercase string values\"\nassert     check_dict_case({'A':'b'}) == True, \"Dictionary with uppercase string values\"\n\nprint(\"Passed! <3\""
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"HELLO\":\"WORLD\"}) == False\nassert     check_dict_case({\"hello\":\"WORLD\"}) == True\nassert     check_dict_case({\"HELLO\":\"WORLD\"}) == True\nassert     check_dict_case({\"Hello\":\"World\"}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_dict_case({}) == True\nassert     check_dict_case({1:\"a\",2:\"b\",3:\"c\"}) == False\nassert     check_dict_case({\"a\":1,\"b\":2,\"c\":3}) == True\n\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the dictionary is empty.\n    \"\"\"\n    if not dict:\n        return False\n    for key, value in dict.iteritems():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, str):\n            return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_dict_case({})\nassert     check_dict_case({'a':'a', 'b':'B'})\nassert not check_dict_case({'a':1, 'b':'b'})\nassert not check_dict_case({'A':'a', 'B':'B'})\n\n\ndef check_dict_value(dict):\n    \"\"\"\n    Given a dictionary, return True if all values are strings, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == True\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'C': 3}) == False\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == False\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [count_up_to(i) for i in range(1,21)] == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     [count_up_to(i) for i in range(1,21)] == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     [count_up_to(i) for i in range(1,21)] == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     [count_up_to(i) for i in range(1,21)] == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     [count_up_to(i) for i in range(1,21)] == [2, 3, 5, 7, 11, 13, 17, 19]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_up_to(10) == [2,3,5,7]\nassert     count_up_to(11) == [2,3,5,7,11]\nassert     count_up_to(40) == [2,3,5,7,11,13,17,19,23,29]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     count_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     count_up_to(100000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_up_to(1) == []\nassert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17]\nassert     count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23]\nassert     count_up_to(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     count_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\nassert     count_up_to(10000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(15) == [2, 3, 5, 7, 11, 13]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == []\nassert     count_up_to(2) == []\nassert     count_up_to(3) == [2]\nassert     count_up_to(4) == [2, 3]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == []\nassert     count_up_to(2) == [2]\nassert     count_up_to(3) == [2]\nassert     count_up_to(4) == [2]\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply(123, 321) == 123 * 321\nassert     multiply(0, 12) == 0\nassert     multiply(9, 0) == 0\nassert     multiply(7, 2) == 14\nassert     multiply(7, 3) == 21\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiply(4, 6) == 4\nassert     multiply(23, 85) == 95\nassert     multiply(67, 9) == 9\n\n\ndef gcd(a, b):\n    \"\"\"Complete the function that takes two integers and returns their \n    greatest common divisor.\n    Assume the input is always valid.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply(1234, 5678) == 56781234\nassert     multiply(9012, 3456) == 9012123456\nassert     multiply(99, 98) == 989998\nassert     multiply(0, 0) == 0\nassert     multiply(0, 1) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply( 123, 321 ) == 45\nassert     multiply( 123, 0 ) == 0\nassert     multiply( 999, 999 ) == 9\nassert     multiply( 987, 5 ) == 75\nassert     multiply( 987, 8 ) == 68\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply(1, 3) == 3, \"The function should return 3\"\nassert     multiply(0, 5) == 0, \"The function should return 0\"\nassert     multiply(12, 17) == 48, \"The function should return 48\"\n\nprint \"Congratulations, you passed the task!\""
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply(12345, 98765) == 12345 * 98765\nassert     multiply(12345, 67876) == 12345 * 67876\nassert     multiply(12345, 1234) == 12345 * 1234\nassert     multiply(12345, 1) == 12345 * 1\nassert     multiply(12345, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply(1, 9)    == 9\nassert     multiply(8, 2)    == 16\nassert     multiply(2, 7)    == 14\nassert     multiply(2, 0)    == 0\nassert     multiply(9, 2)    == 18\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply(21, 62) == 466\nassert     multiply(24, 46) == 864\nassert     multiply(8, 7) == 28\nassert     multiply(8, 8) == 64\nassert     multiply(0, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_upper(\"ciao\") == 2\nassert     count_upper(\"Impossible\") == 5\nassert     count_upper(\"abc\") == 0\nassert     count_upper(\"aBCdefghij\") == 0\nassert     count_upper(\"\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_upper(\"\") == 0\nassert     count_upper(\"a\") == 0\nassert     count_upper(\"be\") == 1\nassert     count_upper(\"abe\") == 2\nassert     count_upper(\"abc\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_upper('abcdef') == 3, \"Test 1\"\nassert     count_upper('ag') == 0, \"Test 2\"\nassert     count_upper('bbbcccdd') == 0, \"Test 3\"\nassert     count_upper('aeiou') == 4, \"Test 4\"\nassert     count_upper('abc') == 3, \"Test 5\"\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_upper('HELLO') == 3\nassert count_upper('HELLO WORLD') == 5\nassert count_upper('HELLO WORLD HELLO') == 5\nassert count_upper('hello world') == 2\nassert count_upper('1HELLO 2WORLD') == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_upper('abc') == 0\nassert     count_upper('abcde') == 1\nassert     count_upper('aBcDeFgHiJkLmnoPqrsTuVwWxXyZz') == 1\nassert     count_upper('ABCDE') == 1\nassert     count_upper('ABcDeFgHiJkLmnoPqrsTuVwWxXyZz') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_upper('Hey there!') == 2, 'count_upper(\"Hey there!\")'\nassert     count_upper('Hello!') == 0, 'count_upper(\"Hello!\")'\nassert     count_upper('How are you?') == 2, 'count_upper(\"How are you?\")'\nassert     count_upper('What is the airspeed velocity of an unladen swallow?') == 4, 'count_upper(\"What is the airspeed velocity of an unladen swallow?\")'\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_upper(\"There are 3 friends, 2 boys and 0 girls\") == 3\nassert     count_upper(\"My name is L.A.\") == 2\nassert     count_upper(\"Hello.\") == 0\nassert     count_upper(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == 19\nassert     count_upper(\"Able was I ere I saw Elba\") == 4\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_upper('codewars') == 2\nassert     count_upper('codewar') == 2\nassert     count_upper('codew') == 2\nassert     count_upper('codewars') == 2\nassert     count_upper('codeward') == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_upper('abcde') == 0\nassert     count_upper('abcdef') == 1\nassert     count_upper('abcd') == 0\nassert     count_upper('abc') == 1\nassert     count_upper('Abcdef') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         count_upper('dwird') == 1, \"The result should be 1\"\nassert         count_upper('bab') == 0, \"The result should be 0\"\nassert         count_upper('dwird') == 1, \"The result should be 1\"\nassert         count_upper('dwird') == 1, \"The result should be 1\"\nassert         count_upper('bab') == 0, \"The result should be 0\"\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     closest_integer(\"13.5\") == 13\nassert     closest_integer(\"15\") == 15\nassert     closest_integer(\"-13.5\") == -14\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"12\") == 12\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     closest_integer(\"1.01\") == 1.0\nassert     closest_integer(\"1.49\") == 1.0\nassert     closest_integer(\"1.49\") == 1.0\nassert     closest_integer(\"-1.49\") == -1.0\nassert     closest_integer(\"1.49\") == 1.0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         closest_integer(\"14.5\")     == 15\nassert         closest_integer(\"-14.5\")     == -15\nassert         closest_integer(\"-14.6\")     == -15\nassert         closest_integer(\"-14.5999999999\")     == -15\nassert         closest_integer(\"14.5999999999\")     == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     ( closest_integer(\"14.5\") == 15 )\nassert     ( closest_integer(\"-14.5\") == -15 )\nassert     ( closest_integer(\"14.1\") == 14 )\nassert     ( closest_integer(\"-14.1\") == -14 )\n\nprint(\"closest_integer is correct!\""
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"4.5\") == 4\nassert     closest_integer(\"-4.5\") == -4\nassert     closest_integer(\"-1.5\") == -2\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"2\") == 2\nassert     closest_integer(\"0.5\") == 0\nassert     closest_integer(\"-1\") == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_a_pile(3) == [1, 2, 3]\nassert     make_a_pile(5) == [1, 2, 3, 4, 5]\nassert     make_a_pile(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     make_a_pile(15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n\ndef make_a_pile2(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    # create a list [n]\n    result = [n]\n    # loop until there are no more levels\n    while n >= 1:\n        # add a level to the list\n        result.append(n)\n        # check if there is an odd level\n        if n & 1 == 1:\n            # add 1 to n\n            n += 1\n        else:\n            # check if there is an even level\n            if n & 1 == 0:\n                # add 2 to n\n                n += 2\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     make_a_pile(3) == [1,1,1]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2,2]\nassert     make_a_pile(4) == [2,2,2,2]\nassert     make_a_pile(5) == [3,3,3,3,3]"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     make_a_pile(3)    ==    [3, 1, 1]\nassert     make_a_pile(7)    ==    [7, 3, 3, 3, 3, 3, 3]\nassert     make_a_pile(1)    ==     [1, 1]\nassert     make_a_pile(9)     ==     [9, 5, 5, 5, 5, 5, 5, 5, 5]"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(4) == [4, 3, 2, 1]\nassert     make_a_pile(5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 2, 1]\nassert     make_a_pile(5) == [1, 2, 2]\nassert     make_a_pile(6) == [1, 2, 3]\nassert     make_a_pile(7) == [1, 3, 5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(4) == [4, 3, 2, 1]\nassert     make_a_pile(5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_a_pile(3) == [3, 5]\nassert     make_a_pile(4) == [4, 6]\nassert     make_a_pile(5) == [5, 8]\nassert     make_a_pile(6) == [6, 10]\nassert     make_a_pile(7) == [7, 14]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_a_pile(4)         == [4, 4, 4, 4]\nassert     make_a_pile(5)         == [5, 4, 4, 4, 4]\nassert     make_a_pile(6)         == [6, 5, 4, 4, 4, 4]\nassert     make_a_pile(7)         == [7, 6, 5, 4, 4, 4, 4]\nassert     make_a_pile(8)         == [8, 7, 6, 5, 4, 4, 4, 4]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_a_pile(2) == [1,1]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(3) == [2,1,1]\nassert     make_a_pile(4) == [3,1,1,1]\nassert     make_a_pile(5) == [4,2,1,1,1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_string(\"This,is,a,test\") == ['This', 'is', 'a', 'test']\nassert     words_string(\"We,ate,a,cat\") == ['We', 'ate', 'a', 'cat']\nassert     words_string(\"We,ate,a,cat,the\") == ['We', 'ate', 'a', 'cat', 'the']\nassert     words_string(\"We,ate,a,cat,the,cat\") == ['We', 'ate', 'a', 'cat', 'the', 'cat']\nassert     words_string(\"\") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_string(\"a,b,c\") == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a, b, c\") == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a,b,c d\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     words_string(\"a,b, c, d\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     words_string(\"a, b, c, d\") == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_string('word') == ['word']\nassert     words_string('word, word') == ['word', 'word']\nassert     words_string('word word word') == ['word', 'word', 'word']\nassert     words_string('one, two, three') == ['one', 'two', 'three']\nassert     words_string('one,two,three') == ['one', 'two', 'three']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_string(\"my name is John\")    ==    ['my', 'name', 'is', 'John']\nassert     words_string(\"what is your name?\") ==    ['what', 'is', 'your', 'name?']\nassert     words_string(\"How are you?\")     ==    ['How', 'are', 'you?']\nassert     words_string(\"This is a sentence\") ==    ['This', 'is', 'a','sentence']\nassert     words_string(\"   \") ==         ['', '']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_string(\"this,that, and some more\")         == ['this', 'that', 'and','some','more']\nassert     words_string(\"i,am,a,test,tester\")             == ['i', 'am', 'a', 'test', 'tester']\nassert     words_string(\"hello\")                                 == ['hello']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_string(\"word, word\") == [\"word\", \"word\"]\nassert     words_string(\"one, two, three\") == [\"one\", \"two\", \"three\"]\nassert     words_string(\"one,two, three\") == [\"one\", \"two\", \"three\"]\nassert     words_string(\"one,two three\") == [\"one\", \"two\", \"three\"]\nassert     words_string(\"one, two three\") == [\"one\", \"two\", \"three\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_string(\"hello, hi, hello, good-bye\") == [\"hello\", \"hi\", \"hello\", \"good-bye\"]\nassert     words_string(\"hello, hi, hello, good-bye\") == [\"hello\", \"hi\", \"hello\", \"good-bye\"]\nassert     words_string(\"hello, a, nice, day\") == [\"hello\", \"a\", \"nice\", \"day\"]\nassert     words_string(\"\") == []\nassert     words_string(\"hello, a, nice, day, \") == [\"hello\", \"a\", \"nice\", \"day\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_string(\"   \") == ['','']\nassert     words_string(\"\") == ['','']\nassert     words_string(\"a\") == ['a','']\nassert     words_string(\"a,b\") == ['a','b']\nassert     words_string(\"a, b\") == ['a','b']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_string(\"hello, my, name, is, jack\")    ==    [\"hello\", \"my\", \"name\", \"is\", \"jack\"]\nassert     words_string(\"hello, my name, is, jack\")    ==    [\"hello\", \"my\", \"name\", \"is\", \"jack\"]\nassert     words_string(\"hello,jack\")    ==    [\"hello\", \"jack\"]\nassert     words_string(\"hello jack\")    ==    [\"hello\", \"jack\"]\nassert     words_string(\"hello jack, my name, is, jack\")    ==    [\"hello\", \"jack\", \"my\", \"name\", \"is\", \"jack\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_string('hello,  world,  python') == ['hello', 'world', 'python']\nassert     words_string('hello, python') == ['hello', 'python']\nassert     words_string('hello,   python') == ['hello', 'python']\nassert     words_string('hello, python ') == ['hello', 'python']\nassert     words_string('hello, python,') == ['hello', 'python']\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     choose_num(10, 30) == 10\nassert     choose_num(1, 4) == 2\nassert     choose_num(100, 200) == -1\nassert     choose_num(0, 1) == -1\nassert     choose_num(5, 5) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     choose_num(2, 4) == 2\nassert choose_num(2, 6) == 4\nassert choose_num(4, 6) == 4\nassert choose_num(2, 3) == -1\nassert choose_num(5, 5) == 5\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     choose_num(3, 4) == -1\nassert choose_num(7, 12) == 8\nassert choose_num(0, 2) == -1\nassert choose_num(3, 5) == 4\nassert choose_num(7, 9) == 8\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     choose_num(4, 8) == 8\nassert     choose_num(5, 8) == -1\nassert     choose_num(1, 9) == -1\nassert     choose_num(1, 5) == -1\nassert     choose_num(1, 1) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     choose_num(1, 4) == 2\nassert     choose_num(1, 2) == -1\nassert     choose_num(5, 8) == 6\nassert     choose_num(9, 22) == 11\nassert     choose_num(5, 22) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     choose_num(3, 22) == 10\nassert choose_num(5, 22) == -1\nassert choose_num(10, 21) == 20\nassert choose_num(8, 22) == -1\nassert choose_num(5, 5) == 5\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     choose_num(1, 9) == -1\nassert     choose_num(9, 9) == -1\nassert     choose_num(2, 9) == 4\nassert     choose_num(7, 9) == 8\nassert     choose_num(2, 4) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     choose_num(1, 10) == 4\nassert     choose_num(1, 100) == -1\nassert     choose_num(2, 10) == -1\nassert     choose_num(0, 10) == 4\nassert     choose_num(1, 1) == 0\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     choose_num(1, 2) == -1\nassert     choose_num(2, 2) == -1\nassert     choose_num(2, 3) == 2\nassert     choose_num(3, 4) == -1\nassert     choose_num(0, 1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     choose_num(0, 3)    == 1\nassert     choose_num(0, 2)    == -1\nassert     choose_num(4, 4)    == -1\nassert     choose_num(3, 5)    == -1\nassert     choose_num(3, 4)    == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     round(rounded_avg(1,3)    ) == 2\nassert     round(rounded_avg(5,7)    ) == 6\nassert     round(rounded_avg(9,17)    ) == 15\nassert     rounded_avg(45, 67) == -1\nassert     rounded_avg(5,8)     == 6\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rounded_avg(2, 3) == 2.5\nassert     rounded_avg(3, 5) == 4.\nassert     rounded_avg(9, 10) == 5.\nassert     rounded_avg(19, 22) == 19.5\nassert     rounded_avg(-7, 7) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rounded_avg(1, 10) == 5\nassert     rounded_avg(5, 10) == 7\nassert     rounded_avg(20, 10) == 22\nassert     rounded_avg(3, 5) == -1\nassert     rounded_avg(0, 5) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rounded_avg(10, 5) == 5\nassert     rounded_avg(10, 20) == 15\nassert     rounded_avg(10, 30) == 15\nassert     rounded_avg(10, 40) == 15\nassert     rounded_avg(10, -1) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rounded_avg(10, 15) == 13\nassert rounded_avg(17, 19) == 17\nassert rounded_avg(18, 17) == 19\nassert rounded_avg(20, 22) == -1\nassert rounded_avg(21, 21) == 21\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nrounded_avg(4, 5) == 4\nrounded_avg(1, 4) == 1\nrounded_avg(4, 1) == -1\nassert rounded_avg(4, 4) == 4\nassert rounded_avg(0, 0) == 0\nassert rounded_avg(4, 0) == -1\nassert rounded_avg(0, 4) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rounded_avg(1,2) == 1.5\nassert     rounded_avg(1,3) == 2\nassert     rounded_avg(6,7) == 5.5\nassert     rounded_avg(1,1) == 1\nassert     rounded_avg(1,2) == 1.5\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rounded_avg(1, 3) == 1\nassert     rounded_avg(1, 5) == 3\nassert     rounded_avg(1, 11) == 5\nassert     rounded_avg(5, 11) == -1\n\ndef get_fibonacci(n):\n    \"\"\"Return the nth fibonacci number, starting from 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rounded_avg(0, 5) == 1\nassert     rounded_avg(5, 6) == 2\nassert     rounded_avg(9, 10) == -1\nassert     rounded_avg(9, 9) == 0\nassert     rounded_avg(10, 11) == -1\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique_digits(xrange(10)) == [0,1,2,3,4,5,6,7,8,9]\nassert     unique_digits([10,2,3,4,2,1,5,2]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits(xrange(1000000)) == [0,1]\nassert     unique_digits(xrange(3,9000000,5)) == [3,4,5,6,7,8]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 8, 9, 10]) ==     [1, 2, 3, 4, 5, 6, 8, 9, 10]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 8, 9, 10, 12]) ==     [1, 2, 3, 4, 5, 6, 8, 9, 10, 12]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 8, 9, 10, 11]) ==     [1, 2, 3, 4, 5, 6, 8, 9, 10, 11]\nassert     unique_digits([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==     [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits([2, 4, 5, 6, 8, 9, 10, 11, 12]) ==     [2, 4, 5, 6, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_digits([12,23,123,1234,12345])==[2,3,4,5]\nassert     unique_digits([1,23,12,3,4,5])==[1,2,3,4,5]\nassert     unique_digits([123])==[1,2,3]\nassert     unique_digits([1,123])==[1,2,3]\nassert     unique_digits([])==[]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique_digits([7, 3, 1, 9]) == [1, 3, 7, 9]\nassert     unique_digits([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]) == [1,2,3,4,5,6,7,8]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,9]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_digits([12, 23, 32, 42, 41])    == [2, 3, 4, 41]\nassert     unique_digits([9, 12, 32, 42, 43])    == [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]\nassert     unique_digits([12, 22, 32, 22])    == [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]\nassert     unique_digits([12, 22, 32, 22, 32, 22])    == [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]\nassert     unique_digits([12, 22, 32, 22, 32, 22, 22])    == [2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique_digits([1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique_digits([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     unique_digits([1,2,3,5,6,7]) == [1,2,3,5,6,7]\nassert     unique_digits([1,2,3,5,6,7,8,9]) == [1,2,3,5,6,7,8,9]\nassert     unique_digits([1,2,3,5,6,7,8,9,10]) == [1,2,3,5,6,7,8,9,10]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_digits([9, 12, 18, 23, 29]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique_digits([2, 3, 6, 7, 4, 3, 7, 8, 9]) == [2, 4, 6, 7, 8, 9]\nassert     unique_digits([1, 2, 3, 4, 3, 2, 4, 1]) == [1, 2, 3, 4]\nassert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,0]) == [0]\nassert     unique_digits([10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 8, 9, 10]) == [1, 2, 4, 5, 6, 8, 9, 10]\nassert     unique_digits([1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\ndef max_prod_digits(x, y):\n    \"\"\"Find the max product of digits of the numbers x and y.\n\n    Note: All input lists are assumed to be non-negative integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     by_length([1,3,5,7,9]) == \"FiveSevenOneThreeFourEight\"\nassert by_length([4,6,5,7,8,9,3,1,2,0]) == \"FourFiveSixSevenEightNineZeroOneTwoThree\"\nassert by_length([]) == \"\"\nassert by_length([5,3,3]) == \"ThreeThreeThree\"\nassert by_length([0,0,0,0,0]) == \"ZeroZeroZeroZeroZeroZero\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [by_length([1, 3, 4, 5, 8, 2, 9, 6, 7]), \"Eighteen\", \"OneFour\", \"Seven\", \"One\", \"Three\", \"Eight\", \"Three\", \"Four\", \"Seven\"]     == [1, 3, 4, 5, 8, 2, 9, 6, 7], \"Failed by length\"\nassert     [by_length([1, 3, 4, 5, 8, 2, 9, 6, 0]), \"Eighteen\", \"OneFour\", \"Seven\", \"One\", \"Three\", \"Eight\", \"Three\", \"Four\", \"Seven\"]     == [1, 3, 4, 5, 8, 2, 9, 6, 0], \"Failed by length\"\nassert     [by_length([1, 3, 4, 5, 8, 2, 9, 6, 7]), \"Eighteen\", \"OneFour\", \"Seven\", \"One\", \"Three\", \"Eight\", \"Three\", \"Four\", \"Seven\"]     == [1, 3, 4, 5, 8, 2, 9, 6, 7], \"Failed by length\"\nassert     [by_length([0, 1, 3, 4, 5, 8, 2, 9, 6]), \"Eighteen\", \"OneFour\", \"Seven\", \"One\", \"Three\", \"Eight\", \"Three\", \"Four\", \"Seven\"]     == [0, 1, 3, 4, 5, 8, 2, 9, 6], \"Failed by length\"\nassert     [by_length([0, 1, 3, 4, 5, 8, 2, 9, 7]), \"Eighteen\", \"OneFour\", \"Seven\", \"One\", \"Three\", \"Eight\", \"Three\", \"Four\", \"Seven\"]     == [0, 1, 3, 4, 5, 8, 2, 9, 7], \"Failed by length\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     by_length([9, 2, 22, 33, 21, 5, 9, 7]) == \"Seven Eight Nine Two Six Two Five Nine Seven\"\nassert     by_length([2, 2, 2, 2, 2, 1, 1, 1, 1, 1]) == \"One One One One One One One One One One One One One One One\"\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"One Two Three Four Five Six Seven Eight Nine\"\nassert     by_length([]) == \"\"\nassert     by_length([7, 3, 3, 7, 7, 3, 3, 7]) == \"Seven Seven Three Three Three Seven Seven Seven\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    arr = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    print(by_length(arr))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     by_length([5, 4, 3, 2, 1]) == [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert by_length([9, 9, 9, 9, 9, 9]) == [\"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\"]\nassert     by_length([3, 3, 3, 3, 3, 4]) == [\"Three\", \"Three\", \"Three\", \"Three\", \"Three\", \"Four\"]\nassert     by_length([9, 7, 4, 5, 1, 0]) == [\"Nine\", \"Seven\", \"Four\", \"Five\", \"One\", \"Zero\"]\nassert     by_length([5, 4, 3, 2, 1]) == [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     by_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==     [\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\nassert     by_length([1, 5, 1, 1, 1, 1, 1, 1, 1, 1]) ==     [\"One\", \"Five\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\nassert     by_length([1, 4, 1, 1, 1, 1, 1, 1, 1, 1]) ==     [\"One\", \"Four\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\nassert     by_length([1, 3, 1, 1, 1, 1, 1, 1, 1, 1]) ==     [\"One\", \"Three\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\nassert     by_length([1, 2, 1, 1, 1, 1, 1, 1, 1, 1]) ==     [\"One\", \"Two\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     by_length([5,2,3,4,6,7,8,9,1]) == ['Five', 'Two', 'Three', 'Four', 'Six', 'Seven', 'Eight', 'Nine', 'One']\nassert     by_length([5,2,3,4,9,6,7,8,1]) == ['Five', 'Two', 'Three', 'Four', 'Nine', 'Six', 'Seven', 'Eight', 'One']\nassert     by_length([1,2,3,4,5,6,7,8,9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([9,8,7,6,5,4,3,2,1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [ByLength.__name__] == [by_length.__name__]\nassert     [[1, 9, 4, 6, 5, 7, 3, 8, 2]] == by_length([1, 9, 4, 6, 5, 7, 3, 8, 2])\nassert     [ByLength.__name__] == [by_length.__name__]\nassert     [[1, 9, 4, 6, 5, 7, 3, 8, 2]] == by_length([1, 9, 4, 6, 5, 7, 3, 8, 2])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert by_length([]) == []\nassert by_length([0,1,2,3]) == ['One', 'Two', 'Three', 'Four']\nassert by_length([0,0,0]) == ['One', 'Two', 'Three']\nassert by_length([0,9,0]) == ['Nine', 'Three', 'Two']\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n\"\"\" The next step is to write the code for the function f, as well as a function to calculate its derivative.\nYou are given the following (non-numerical) function:\n    def f(n):\n        res = []\n        for i in range(1, n+1):\n            res.append(factorial(i) if i%2 == 0 else sum(range(1, i+1)))\n        return res\n\nComplete the code for the function f above, and write a function that computes the derivative of f(n) with respect to n.\n\nWe have provided a starter function.\nWe have also provided a test function.\nYou are not allowed to use either of these functions, or any other function.\nYour task is to complete the following function, and to implement the derivative of the starter function.\n\"\"\"\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [f(1) == [1], f(2) == [2, 4], f(3) == [3, 6, 12, 24], f(4) == [4, 8, 12, 16, 24, 40, 48, 96], f(5) == [5, 10, 10, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 1163225, 67831250, 33140625, 15625390625, 78125390625, 390625390625, 1953125390625, 1163225390625, 67831250390625, 33140625390625, 15625390625390625, 78125390625390625, 390625390625390625, 1953125390625390625, 1163225390625390625, 67831250390625390625, 33140625390625390625, 15625390625390625390625, 78125390625390625390625]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1,2]\nassert     f(3) == [1,2,6]\nassert     f(4) == [1,2,6,24]\nassert     f(5) == [1,2,6,24,120]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(5) == [1, 1, 2, 6, 24, 120]\nassert     f(8) == [1, 1, 2, 6, 24, 120, 3540, 6600, 10080]\nassert     f(10) == [1, 1, 2, 6, 24, 120, 3540, 6600, 10080, 133224, 262880, 676576, 969120, 1171560, 1307674, 14324320, 17643280, 21453920, 24159456, 27720600, 30927720, 36288000, 396302400]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(5) == [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1,2,6]\nassert     f(3) == [1,2,6,24,120]\nassert     f(5) == [1,2,6,24,120,720,5040,40320,362880]\n\n\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     f(1)         == [1]\nassert     f(2)         == [1,1]\nassert     f(3)         == [1,1,2]\nassert     f(4)         == [1,1,2,6]\nassert     f(5)         == [1,1,2,6,24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     f(1)    == [1], \"f(1) == [1]\"\nassert     f(2)    == [1, 1], \"f(2) == [1, 1]\"\nassert     f(3)    == [1, 1, 2], \"f(3) == [1, 1, 2]\"\nassert     f(4)    == [1, 1, 2, 6], \"f(4) == [1, 1, 2, 6]\"\nassert     f(5)    == [1, 1, 2, 6, 24], \"f(5) == [1, 1, 2, 6, 24]\"\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10) == (2, 4)\nassert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(100) == (10, 10)\nassert     even_odd_palindrome(101) == (9, 11)\n\ndef main():\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        n = int(sys.stdin.readline())\n        print(even_odd_palindrome(n))\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(100) == (11, 13)\nassert     even_odd_palindrome(50) == (5, 7)\nassert     even_odd_palindrome(5) == (1, 1)\nassert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(1) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(11) == (3,5)\nassert     even_odd_palindrome(999) == (4,6)\nassert     even_odd_palindrome(2) == (1,1)\nassert     even_odd_palindrome(3) == (2,2)\nassert     even_odd_palindrome(4) == (2,2)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         even_odd_palindrome(1) == (0, 1)\nassert         even_odd_palindrome(2) == (1, 0)\nassert         even_odd_palindrome(3) == (2, 1)\nassert         even_odd_palindrome(10) == (4, 1)\nassert         even_odd_palindrome(11) == (5, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(2) == (0, 0)\nassert     even_odd_palindrome(3) == (0, 1)\nassert     even_odd_palindrome(4) == (1, 0)\nassert     even_odd_palindrome(5) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         even_odd_palindrome(1) == (0, 1)\nassert         even_odd_palindrome(2) == (1, 0)\nassert         even_odd_palindrome(5) == (2, 1)\nassert         even_odd_palindrome(10) == (3, 2)\nassert         even_odd_palindrome(21) == (3, 3)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(1) == (0,1)\nassert     even_odd_palindrome(2) == (0,0)\nassert     even_odd_palindrome(3) == (0,1)\nassert     even_odd_palindrome(4) == (2,1)\nassert     even_odd_palindrome(5) == (2,0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nassert even_odd_palindrome(123) == (1, 2)\nassert even_odd_palindrome(1000) == (9, 1)\nassert even_odd_palindrome(100) == (0, 0)\nassert even_odd_palindrome(11) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (5, 2) == even_odd_palindrome(10)\nassert     (5, 2) == even_odd_palindrome(99)\nassert     (5, 1) == even_odd_palindrome(99999)\nassert     (5, 2) == even_odd_palindrome(999999)\nassert     (3, 2) == even_odd_palindrome(11)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (2, 1) == even_odd_palindrome(2)\nassert     (2, 1) == even_odd_palindrome(5)\nassert     (1, 1) == even_odd_palindrome(10)\nassert     (0, 0) == even_odd_palindrome(11)"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_nums([1, 2, 3]) == 3\nassert     count_nums([1, -1, 2, -2, 3, 3]) == 4\nassert     count_nums([1, 2, 3, -1, -2, -3, -3]) == 5\nassert     count_nums([]) == 0\nassert     count_nums([1, 2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_nums([23, 1, 13, 0, 3, -11, -22, -3]) == 3\nassert count_nums([22, -11, -1, 0, 1]) == 1\nassert count_nums([22, -11, -1, 0, 1, 3]) == 2\nassert count_nums([0, 1, 1, 0, 0, 0, 1]) == 5\n\ndef inverse_dict(d):\n    \"\"\"\n    Write a function inverse_dict that takes a dictionary whose values are\n    lists of strings and returns a dictionary whose keys are the strings\n    and values are the lists of keys for which the string is a value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_nums([111,222,333]) == 3\nassert     count_nums([111,222,333,777,99,000]) == 4\nassert     count_nums([1111,2222,3333]) == 3\nassert     count_nums([-111,-222,-333,-777,-99,-000]) == 5\nassert     count_nums([]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_nums([-123, 123, 0, 1, -1, 2, 3, -123]) == 3\nassert     count_nums([0, 0, 0, 0, 0, 0]) == 0\nassert     count_nums([]) == 0\nassert     count_nums([-1, 2, 3]) == 1\nassert     count_nums([-1, 0, 3]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_nums([-123, -12, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert     count_nums([-123, -12, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\nassert     count_nums([-123, -12, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7\nassert     count_nums([-123, -12, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\nassert     count_nums([-123, -12, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_nums([-121,-1,12,123,0,-121,1,1,1,111,-1,-111,1,111]) == 3\nassert     count_nums([1,2,3,4,5,6,7,8,9]) == 0\nassert     count_nums([-1,-1,2,2,3,3,4,4,5,5]) == 0\nassert     count_nums([-1,0,0,-1,0,0,-1,1,1]) == 4\nassert     count_nums([1,2,3,4,5,6,7,8,9]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_nums([4, 1, 2, 7, 5, 3, -123, 123, 1000]) == 5\nassert     count_nums([4, 1, 2, 7, 5, 3]) == 2\nassert     count_nums([4, 1, 2, -7, 5, 3, -123, 123, 1000]) == 3\nassert     count_nums([4, 1, 2, -7, 5, 3]) == 1\nassert     count_nums([-1, 2, 3, 4, 5, 6]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_nums([1,2,3,4,5,6,7,8]) == 1\nassert     count_nums([-1,-2,-3,-4,-5,-6,-7,-8]) == 7\nassert     count_nums([-1,1,2,3,4,5,6,7,8]) == 5\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_nums([-1,2,3,4,5,6,7,8,9]) == 9\nassert     count_nums([-9,-8,-7,-6,-5,-4,-3,-2,-1]) == 10\nassert     count_nums([]) == 0\nassert     count_nums([1,2,3,4,5,6,7,8,9]) == 1\nassert     count_nums([0]) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     move_one_ball([3,2,1,3,4,4,3,2,1,3,4,5,6,7,7,6,5,4,3,2,1])==True, \"Fail: the array was not sorted\"\nassert     move_one_ball([4,1,2,3,3,3,2,1,4,4,4,4,4,4,4,4,4,4,4,4,4])==True, \"Fail: the array was not sorted\"\nassert     move_one_ball([3,2,1,3,4,4,3,2,1,3,4,5,6,7,7,6,5,4,3,2,1])==False, \"Fail: the array was sorted\"\nassert     move_one_ball([4,1,2,3,3,3,2,1,4,4,4,4,4,4,4,4,4,4,4,4,4])==False, \"Fail: the array was sorted\"\nassert     move_one_ball([3,2,1,3,4,4,3,2,1,3,4,5,6,7,7,6,5,4,3,2,1])==False, \"Fail: the array was not sorted\"\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     move_one_ball( [1,2,3,4,5]) == False\nassert     move_one_ball( [2,3,4,5,1]) == True\nassert     move_one_ball( [1,2,3,4,5,6]) == False\nassert     move_one_ball( [2,3,4,5,1]) == False\nassert     move_one_ball( [1,2,3]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     move_one_ball([]) == True\nassert     move_one_ball([1]) == True\nassert     move_one_ball([1,2,3]) == False\nassert     move_one_ball([1,2,3,4]) == False\nassert     move_one_ball([4,3,2,1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     move_one_ball([3, 2, 1, 5, 6, 4]) == True\nassert     move_one_ball([3, 2, 1, 5, 6, 4, 7]) == False\nassert     move_one_ball([3, 1]) == True\nassert     move_one_ball([3, 4, 1, 2]) == False\nassert     move_one_ball([1, 2, 3, 4, 5]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     move_one_ball(['a', 'b', 'c', 'd', 'e']) == True\nassert     move_one_ball(['c', 'b', 'd', 'e', 'a']) == False\nassert     move_one_ball(['b', 'a', 'e', 'd', 'c']) == True\nassert     move_one_ball(['a', 'b', 'e', 'd', 'c']) == False\nassert     move_one_ball(['e', 'a', 'b', 'd', 'c']) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     move_one_ball([3,2,1]) == True\nassert     move_one_ball([1,2,3]) == True\nassert     move_one_ball([3,1,2]) == False\nassert     move_one_ball([2,1]) == False\nassert     move_one_ball([]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     True == move_one_ball([2, 1, 4, 3])\nassert     True == move_one_ball([1, 2, 3, 4, 5])\nassert     False == move_one_ball([4, 3, 2, 1, 5])\nassert     False == move_one_ball([5, 4, 3, 2, 1])\nassert     True == move_one_ball([])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     move_one_ball([1, 2, 3]) == True\nassert     move_one_ball([1, 3, 5, 2, 4]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([1, 2, 3, 4]) == True\nassert     move_one_ball([1, 3, 5, 2, 4]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     move_one_ball( [2, 1, 4, 3, 6, 5] ) == True\nassert     move_one_ball( [2, 1, 4, 3, 6, 5, 7] ) == False\nassert     move_one_ball( [] ) == True\nassert     move_one_ball( [1, 2, 3, 4, 5, 6, 7, 8] ) == False\nassert     move_one_ball( [3, 1, 2, 4, 5, 6, 7] ) == True\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     exchange([1, 1, 2, 3, 4, 4, 5, 7], [2, 4, 6, 8, 10, 10, 13, 15]) == \"YES\"\nassert     exchange([1, 1, 2, 3, 4, 4, 5, 7], [2, 4, 6, 8, 10, 10, 13, 15]) == \"NO\"\nassert     exchange([1, 1, 2, 3, 4, 4, 5, 7], [2, 4, 6, 8, 10, 10, 13, 14]) == \"NO\"\nassert     exchange([1, 1, 2, 3, 4, 4, 5, 7], [2, 4, 6, 8, 10, 10, 13, 14]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 4, 5, 7], [2, 4, 6, 8, 10, 10, 13, 14]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     exchange([2, 3, 4, 5], [4, 2, 5, 6, 7]) == \"YES\"\nassert     exchange([4, 2, 5, 6, 7], [2, 3, 4, 5]) == \"YES\"\nassert     exchange([4, 2, 5, 6, 7], [2, 4, 5, 6, 7]) == \"NO\"\nassert     exchange([4, 2, 5, 6], [2, 4, 5, 6, 7]) == \"NO\"\nassert     exchange([4, 2, 5, 6], [2, 4, 5, 6, 7, 8]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     exchange([5, 4, 3, 2, 1, 0], [9, 7, 2, 6, 1, 4, 3, 5, 0]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [5, 6, 7, 8]) == \"NO\"\nassert     exchange([5, 4, 3, 2, 1], [9, 7, 2, 6, 1]) == \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [3, 5, 7, 8]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [6, 8]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [7, 8, 9, 10]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [7, 6, 5, 4, 3, 2, 1, 8]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == \"YES\"\nassert     exchange([1, 3, 5, 7], [2, 4, 6]) == \"NO\"\nassert     exchange([3, 6, 9, 12, 15], [2, 4, 6, 8, 10]) == \"YES\"\nassert     exchange([3, 6, 9, 12, 15], [2, 4, 6, 8, 10, 14]) == \"NO\"\nassert     exchange([3, 6, 9, 12, 15], [2, 4, 6, 8, 10, 14, 16]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         exchange([1,2,3,4,5], [1,2,4,3,5]) == \"YES\"\nassert         exchange([1,2,3,4,5], [1,2,5,3,4]) == \"NO\"\nassert         exchange([3,4,5], [3,4,5]) == \"YES\"\nassert         exchange([1,2,3,4,5,6], [1,2,3,4,5,6]) == \"YES\"\nassert         exchange([1,2,3,4,5,6], [1,2,3,4,5,6,7]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     exchange([1, 1, 2, 3, 4, 5], [2, 3, 5, 1, 4]) == \"YES\"\nassert     exchange([2, 4, 2, 4, 5, 9], [9, 2, 3, 4, 5, 1]) == \"YES\"\nassert     exchange([2, 3, 4, 2, 4, 5], [9, 2, 3, 5, 4, 1]) == \"NO\"\nassert     exchange([1, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == \"NO\"\nassert     exchange([5, 3, 1, 2], [5, 3, 2]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     exchange([1, 2, 3, 4], [2, 4, 6, 8]) == \"YES\"\nassert     exchange([1, 2, 3], [2, 4, 6]) == \"NO\"\nassert     exchange([1, 2, 3], [2, 1, 6]) == \"NO\"\nassert     exchange([1, 2, 3], [2, 1, 3]) == \"NO\"\nassert     exchange([1, 2, 3], [2, 1, 4]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     exchange([2, 4, 3, 7, 6], [1, 3, 5, 6, 7]) == \"YES\"\nassert     exchange([2, 4, 3, 7, 6], [1, 1, 5, 6, 7]) == \"NO\"\nassert     exchange([2, 4, 3, 7, 6], [1, 1, 3, 6, 7]) == \"YES\"\nassert     exchange([2, 4, 3, 7, 6], [3, 7, 6, 5, 4]) == \"NO\"\nassert     exchange([2, 4, 3, 7, 6], [1, 2, 3, 4, 5]) == \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     histogram('aa bb cc dd ee') == {'a': 5}\nassert     histogram('aaa bbb cc dd ee') == {'a': 5, 'b': 3, 'c': 2, 'd': 2, 'e': 2}\nassert     histogram('aaa aaa aa aa aa aa aa') == {'a': 5}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     histogram(\"Hi this is an example!\") == {'i': 2, 'h': 2,'': 3, 'a': 1, 't': 3,'s': 1, 'c': 1}\nassert     histogram(\"\") == {}\nassert     histogram(\"buzz\") == {'b': 1, 'u': 1, 'z': 1}\nassert     histogram(\"this is an example!\") == {'i': 2, 'h': 2,'': 3, 'a': 1, 't': 3,'s': 1, 'c': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     histogram(\"a a a\") == {'a':3}\nassert     histogram(\"a b b c\") == {'a':1, 'b':1, 'c':1}\nassert     histogram(\"a b c d\") == {'a':1, 'b':1, 'c':1, 'd':1}\nassert     histogram(\"a a b b c d\") == {'a':3, 'b':3, 'c':1, 'd':1}\nassert     histogram(\"\") == {}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     histogram(\"a\") == {\"a\": 1}\nassert     histogram(\"ab\") == {\"a\": 1, \"b\": 1}\nassert     histogram(\"abx\") == {\"a\": 1, \"b\": 1}\nassert     histogram(\"xabx\") == {\"a\": 1, \"b\": 2}\nassert     histogram(\"aaxx\") == {\"a\": 2}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     histogram(\"a b c\") == {'a': 1, 'b': 1, 'c': 1}\nassert     histogram(\"a a b b\") == {'a': 2, 'b': 2}\nassert     histogram(\"b a a\") == {'a': 2, 'b': 1}\nassert     histogram(\"a a a a b\") == {'a': 4, 'b': 1}\nassert     histogram(\"a a a b a\") == {'a': 4, 'b': 2}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef histogram_dict(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\n\ndef histogram(test):\n    # dictionary will be the output\n    output = {}\n    # string of letters separated by space\n    string = test.split()\n    # loop through each letter in the string\n    for letter in string:\n        # if the letter is not in the dictionary, add the letter\n        if letter not in output:\n            output[letter] = 1\n        # if the letter is in the dictionary, increment it\n        else:\n            output[letter] += 1\n    return output\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     histogram(\"a\") == {\"a\": 1}\nassert     histogram(\"aa\") == {\"a\": 2}\nassert     histogram(\"ab\") == {\"a\": 1, \"b\": 1}\nassert     histogram(\"aabb\") == {\"a\": 2, \"b\": 2}\nassert     histogram(\"aabbc\") == {\"a\": 2, \"b\": 2, \"c\": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     histogram(\"abcdef\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1}\nassert     histogram(\"bcdef\") == {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1}\nassert     histogram(\"qwertyuip\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1, \"g\": 1, \"h\": 1, \"i\": 1, \"j\": 1, \"k\": 1, \"l\": 1, \"m\": 1, \"n\": 1, \"o\": 1, \"p\": 1, \"q\": 1, \"r\": 1, \"s\": 1, \"t\": 1, \"u\": 1, \"v\": 1, \"w\": 1, \"x\": 1, \"y\": 1, \"z\": 1}\nassert     histogram(\"asdfghjkl\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1, \"g\": 1, \"h\": 1, \"i\": 1, \"j\": 1, \"k\": 1, \"l\": 1, \"m\": 1, \"n\": 1, \"o\": 1, \"p\": 1, \"q\": 1, \"r\": 1, \"s\": 1, \"t\": 1, \"u\": 1, \"v\": 1, \"w\": 1, \"x\": 1, \"y\": 1, \"z\": 1}\nassert     histogram(\"qlwtfmeip\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1, \"g\": 1, \"h\": 1, \"i\": 1, \"j\": 1, \"k\": 1, \"l\": 1, \"m\": 1, \"n\": 1, \"o\": 1, \"p\": 1, \"q\": 1, \"r\": 1, \"s\": 1, \"t\": 1, \"u\": 1, \"v\": 1, \"w\": 1, \"x\": 1, \"y\": 1, \"z\": 1}\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_delete(s, c) == 'acababa',    'Failed!'\nassert     reverse_delete(s, c) == 'acababa',    'Failed!'\nassert     reverse_delete(s, c) == 'acababa',    'Failed!'\nassert     reverse_delete(s, c) == 'acababa',    'Failed!'\nassert     reverse_delete(s, c) == 'acababa',    'Failed!'\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_delete('cba', 'ab') == ('cba',True)\nassert     reverse_delete('cba', 'abcd') == ('cba',False)\nassert     reverse_delete('a', 'b') == ('a',True)\nassert     reverse_delete('b', 'a') == ('b',False)\nassert     reverse_delete('ab', 'a') == ('b',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         reverse_delete(\"ecces\",\"cce\") == (\"ecce\", True), \"wrong\"\nassert         reverse_delete(\"abc\",\"cba\") == (\"abc\", True), \"wrong\"\nassert         reverse_delete(\"abc\",\"bca\") == (\"abc\", True), \"wrong\"\nassert         reverse_delete(\"abc\",\"ab\") == (\"cba\", False), \"wrong\"\nassert         reverse_delete(\"aab\",\"aba\") == (\"bba\", True), \"wrong\"\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_delete(\"acb\", \"ab\") == (\"b\", True)\nassert     reverse_delete(\"acb\", \"cba\") == (\"b\", True)\nassert     reverse_delete(\"\", \"b\") == (\"b\", True)\nassert     reverse_delete(\"\", \"\") == (\"\", True)\nassert     reverse_delete(\"\", \"c\") == (\"c\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"accad\", \"ad\") == (\"cc\", True)\nassert     reverse_delete(\"accad\", \"cb\") == (\"cc\", True)\nassert     reverse_delete(\"accad\", \"b\") == (\"ca\", True)\nassert     reverse_delete(\"accad\", \"ab\") == (\"c\", True)\nassert     reverse_delete(\"accad\", \"cdd\") == (\"acad\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_delete(\"abcba\",\"ac\") == ('ba',True)\nassert     reverse_delete(\"abcba\",\"b\") == ('a',False)\nassert     reverse_delete(\"abcb\",\"b\") == ('',True)\nassert     reverse_delete(\"abcb\",\"c\") == ('b',True)\nassert     reverse_delete(\"abcba\",\"ab\") == ('a',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_delete(\"hammurabi\", \"ab\") == (\"hammurab\", False)\nassert     reverse_delete(\"hammurabi\", \"abc\") == (\"hammur\", True)\nassert     reverse_delete(\"hello\", \"ll\") == (\"he\", True)\nassert     reverse_delete(\"\", \"\") == (\"\", True)\nassert     reverse_delete(\"\", \"abc\") == (\"\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_delete('abcd','ac') == ('bcd',True)\nassert     reverse_delete('redivider','ejr') == ('aider',False)\nassert     reverse_delete('kyle','kyle') == ('kyle',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_delete('babac', 'ab') == ('bba', False)\nassert     reverse_delete('abcd', 'cd') == ('dcba', True)\nassert     reverse_delete('abcd', 'a') == ('dcba', True)\nassert     reverse_delete('abcd', 'c') == ('bca', True)\nassert     reverse_delete('abcd', 'bc') == ('a', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_delete(\"abcdcbd\", \"a\") == ('dcbdcba',True)\nassert     reverse_delete(\"abcdcbd\", \"d\") == ('cdcbdcb',True)\nassert     reverse_delete(\"abcdcbd\", \"b\") == ('cdbdcba',True)\nassert     reverse_delete(\"abcdcbd\", \"c\") == ('dcdcba',True)\nassert     reverse_delete(\"abcdcbd\", \"d\") == ('dcdbca',False)\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [odd_count([\"111\", \"222\", \"101\", \"101\", \"101\"]), [3, 3, 2, 2, 1]] == [3, 3, 2, 2, 1]\nassert     [odd_count([\"111\", \"221\", \"101\", \"101\", \"101\"]), [1, 2, 1, 1, 1]] == [1, 2, 1, 1, 1]\nassert     [odd_count([\"111\", \"221\", \"101\", \"101\", \"101\"]), [1, 2, 1, 1, 1]] == [1, 2, 1, 1, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_count(['', '', '', '', '', '', '', '', '', '', '', '', '', '']) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     odd_count(['123', '12', '12', '1234', '1234', '1234', '1234', '1234', '12345', '12345', '12345', '12345', '12345', '12345', '12345', '12345', '12345', '12345']) == [7, 0, 0, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49]\nassert     odd_count(['', '', '', '', '', '', '', '', '', '', '', '', '', '']) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_count(['the','dream','tea']) == [3, 5, 4]\nassert     odd_count(['hi','bye']) == [2, 0]\nassert     odd_count(['12345']) == [1, 4, 3, 2, 5, 4, 3, 2, 1]\nassert     odd_count(['hello','world']) == [1, 4, 3, 2, 5, 4, 3, 2, 1]\nassert     odd_count(['alice','bob','carol']) == [3, 5, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \ndef is_prime(n):\n    \"\"\"Return True if n is a prime number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef sum_digits(s):\n    \"\"\"Given a string s, return the sum of the digits in s as an integer.\n    For example:\n    >>> sum_digits('abc') == 1\n    True\n    >>> sum_digits('string') == 0\n    True\n    >>> sum_digits('C1') == 1\n    True\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [1, 3, 9]\nassert     odd_count([\"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \"88\", \"99\"]) == [1, 3, 9]\nassert     odd_count([\"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \"88\", \"99\", \"0\", \"1\"]) == [3, 9, 3]\nassert     odd_count([\"11\", \"22\", \"33\", \"44\", \"55\", \"66\", \"77\", \"88\", \"99\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"]) == [9, 1, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_count([4,3,2,1,4,5]) == [2, 1, 1, 0, 2, 2]\nassert     odd_count([1,3,5,7]) == [0, 1, 3, 3]\nassert     odd_count([1,2,3,4,5,6,7,8]) == [0,1,2,3,4,6,7,8]\nassert     odd_count([9,10,11,12,13]) == [1,1,0,1,1]\nassert     odd_count([7,6,5,4,3,2,1]) == [0,0,0,1,0,0,0]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_count([\"11111111\", \"22222222\", \"33333333\", \"44444444\"])     == [4, 8, 12, 16]\nassert     odd_count([\"12345\", \"123456\", \"1234567\"])                     == [1, 1, 1]\nassert     odd_count([\"11222\", \"33333\", \"999999\", \"11222\"])             == [3, 1, 0, 3]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])                 == [1, 3, 0, 0, 1, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [odd_count(['111', 'aa1', 'bb']) == [3, 1, 1]]\nassert     [odd_count(['111', 'aa', 'bbb']) == [3, 1, 1]]\nassert     [odd_count(['', 'aa1', 'bb']) == [1, 1, 1]]\nassert     [odd_count(['', '', 'bbb']) == [0, 0, 1]]\n\n\ndef repeated_substring(lst):\n    \"\"\"Given a list of strings, find the longest string that is the same for all\n    strings in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_count(['1', '11', '111', '1111', '1111111']) == [1, 0, 1, 2, 6]\nassert     odd_count(['12', '333', '5555', '12345', '1234567']) == [2, 0, 1, 4, 7]\nassert     odd_count(['21', '21', '12', '22', '14', '22']) == [1, 1, 0, 1, 1, 1]\nassert     odd_count(['11', '1', '21', '11', '1', '21', '11', '1', '21']) == [2, 0, 0, 0, 0, 0, 2, 0, 0]\n\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1,4,4]) == 1\nassert     minSubArraySum([2,3,1,2,4,3]) == 3\nassert     minSubArraySum([1,2,3,4]) == 4\nassert     minSubArraySum([1,3,1,2,4]) == 3\nassert     minSubArraySum([1,2,3,4,1]) == 2\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minSubArraySum([1,2,5,7,9]) == 11\nassert     minSubArraySum([1,2,5]) == 9\nassert     minSubArraySum([1,2,5,10]) == 11\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef minSubArrayLen(target, nums):\n    \"\"\"\n    Given a non-negative integer target, find the minimum length of a sub-array\n    of nums that add up to target.\n    If there isn't one, return 0 instead.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minSubArraySum([1,1,1]) == 1\nassert     minSubArraySum([1,2,3,4,5]) == 10\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([-2, 1]) == 1\nassert     minSubArraySum([-2, -1]) == -1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minSubArraySum([2,1,5,7,2,8]) == 8\nassert     minSubArraySum([2,1,5,7,2,8,3]) == 8\nassert     minSubArraySum([8,7,2,5]) == 18\nassert     minSubArraySum([8,7,2,5,3]) == 17\nassert     minSubArraySum([8,7,2,5,3,1]) == 17\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nassert minSubArraySum([5,6,7,9,1,3]) == 4\nassert minSubArraySum([3,3,6,5,4]) == 8\nassert minSubArraySum([2,3,4,5,7]) == 6\nassert minSubArraySum([10,8,3,5,7,6,1,5,3,5,6]) == 8\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef moveZeroes(nums):\n    \"\"\"\n    Given an array nums, write a function to move all 0's to the end of it while\n    maintaining the relative order of the non-zero elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minSubArraySum([1, 2, 3, 4, 5]) == 7\nassert     minSubArraySum([2, 3, 4, 1]) == 4\nassert     minSubArraySum([4, 1, 4, 2, 3, 1, 0, 0, 3]) == 4\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_fill([[1, 0, 1, 0], [0, 1, 1, 0], [1, 0, 1, 0]], 3) == 6\nassert     max_fill([[0, 1, 1, 0], [1, 1, 1, 0], [0, 1, 1, 0]], 3) == 4\nassert     max_fill([[1, 0, 1, 0], [0, 1, 1, 0], [1, 1, 1, 0]], 4) == 0\nassert     max_fill([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 2) == 0\n\ndef max_sort(nums):\n    \"\"\"\n    You are given an array of n integers, nums and an array of m integers, queries.\n    Each query is one of the following:\n    * Find the first element of the array that is not less than its query.\n    * Find the last element of the array that is not greater than its query.\n    Return the answer to each query.\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_fill(grid, capacity) == 0\nassert     max_fill(grid, 6) == 0\nassert     max_fill(grid, 5) == math.floor(capacity / 2)\nassert     max_fill(grid, 8) == math.floor(capacity / 2)\nassert     max_fill(grid, 4) == math.ceil(capacity / 2)\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_fill(\n                    [[1,0,1,0,1],\n                    [1,0,1,0,1],\n                    [0,0,0,1,0],\n                    [0,0,1,0,0]],\n                    3\n                ) == 1\nassert     max_fill(\n                    [[1,0,1,0,1],\n                    [1,0,1,0,1],\n                    [0,0,0,1,0],\n                    [0,0,1,0,0]],\n                    5\n                ) == 0\nassert     max_fill(\n                    [[1,0,1,0,1],\n                    [1,0,1,0,1],\n                    [0,0,0,1,0],\n                    [0,0,1,0,0]],\n                    0\n                ) == 4\nassert     max_fill(\n                    [[1,0,1,0,1],\n                    [1,0,1,0,1],\n                    [0,0,0,1,0],\n                    [0,0,1,0,0]],\n                    1\n                ) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_fill(\n            [[1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1]],\n            1) == 0\n\nassert     max_fill(\n            [[1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1]],\n            2) == 1\nassert     max_fill(\n            [[1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1]],\n            3) == 2\nassert     max_fill(\n            [[1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1],\n             [1,1,1,1,1]],\n            4) == 3\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_fill([[0,1,1,0],[0,0,1,1]], 1) == 0\nassert     max_fill([[0,1,1,0],[0,0,1,1]], 2) == 1\nassert     max_fill([[0,1,1,0,1],[0,0,1,1,1]], 2) == 2\nassert     max_fill([[0,1,1,0,1],[0,0,1,1,1]], 3) == 1\nassert     max_fill([[0,1,1,0,1,0],[0,0,1,1,1,1]], 3) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_fill([[0,1,0,1], [0,1,1,0], [1,1,1,1], [0,0,0,0]], 0) == 3\nassert     max_fill([[0,1,0,1], [0,1,1,0], [1,1,1,1], [0,0,0,0]], 1) == 0\nassert     max_fill([[0,1,0,1], [0,1,1,0], [1,1,1,1], [0,0,0,0]], 2) == 1\nassert     max_fill([[0,0,0,0], [0,1,0,0], [0,1,0,0], [0,0,0,0]], 2) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_fill([[1,0,0], [0,1,0], [0,0,1]], 1) == 0\nassert     max_fill([[1,0,0], [0,1,0], [0,0,1]], 2) == 2\nassert     max_fill([[1,1,0], [0,1,1], [0,1,1]], 4) == 1\nassert     max_fill([[1,1,0], [0,1,1], [0,1,1]], 4) == 3\nassert     max_fill([[1,1,1,0], [0,1,1,1], [0,1,1,1]], 6) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) \\\n        == [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\nassert     sort_array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]) \\\n        == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nassert     sort_array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8])    == [1,2,3,4,5,6,7,8]\nassert     sort_array([9,9,9,9,9,9,9]) == [9,9,9,9,9,9,9]\nassert     sort_array([0,0]) == [0,0]\nassert     sort_array([]) == []\nassert     sort_array([-1,-1,0]) == [-1,-1,0]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]) == [0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]\nassert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert     sort_array([0, 0, 0]) == [0, 0, 0]\nassert     sort_array([1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert     sort_array([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [(0, 0), (1, 1), (2, 2), (3, 2), (4, 2), (5, 1), (6, 2), (7, 2), (8, 1), (9, 1)] == sort_array([9, 7, 8, 6, 1, 0, 2, 3, 4, 5])\nassert     [(0, 0), (1, 1), (2, 1), (3, 1), (4, 1), (5, 0), (6, 1), (7, 1), (8, 0), (9, 1)] == sort_array([9, 7, 8, 6, 1, 0, 2, 3, 4, 5])\nassert     [(0, 0), (1, 1), (2, 1), (3, 0), (4, 1), (5, 1), (6, 1), (7, 0), (8, 0), (9, 1)] == sort_array([9, 7, 8, 6, 1, 0, 2, 3, 4, 5])\nassert     [(0, 0), (1, 1), (2, 1), (3, 1), (4, 1), (5, 0), (6, 1), (7, 1), (8, 0), (9, 1)] == sort_array([9, 7, 8, 6, 1, 0, 2, 3, 4, 5])\nassert     [(0, 0), (1, 1), (2, 1), (3, 1), (4, 1), (5, 0), (6, 1), (7, 1), (8, 0), (9, 1)] == sort_array([9, 7, 8, 6, 1, 0, 2, 3, 4, 5])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([0, 0, 1, 1, 0, 1, 1]) == [0, 0, 1, 1, 1, 1, 0]\nassert     sort_array([0, 1, 2, 3]) == [0, 1, 2, 3]\nassert     sort_array([0, 1, 2]) == [0, 1, 2]\nassert     sort_array([3, 1, 0, 0, 0]) == [3, 1, 0, 0, 0]\nassert     sort_array([0, 0]) == [0, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array(0) == 1\nassert     sort_array(1) == 1\nassert     sort_array(2) == 1\nassert     sort_array(3) == 2\nassert     sort_array(4) == 2\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,4,8,3,5,6,7]\nassert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,4,3,8,5,6,7]\nassert     sort_array([9,0,1,2,3,4,5,6,7,8]) == [9,8,7,6,5,4,3,2,1,0]\nassert     sort_array([]) == []\nassert     sort_array([1]) == [1]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([0, 0, 0, 0, 1, 1, 1, 1, 1]) == [0, 0, 0, 0, 1, 1, 1, 1, 1]\nassert     sort_array([1, 1, 1, 1, 1, 0, 0, 0, 0]) == [0, 0, 0, 0, 1, 1, 1, 1, 1]\nassert     sort_array([0, 1, 0, 1, 0, 1, 1, 0, 1, 0]) == [0, 1, 0, 1, 0, 1, 1, 0, 1, 0]\nassert     sort_array([0, 1, 1, 1, 0, 1, 1, 0, 1, 1]) == [0, 1, 1, 1, 0, 1, 1, 0, 1, 1]\nassert     sort_array([1, 1, 1, 0, 1, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 1, 1, 1, 1, 1, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,10]) == [0,1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,0]) == [0,0,1,2,3,4,5,6,7,8,9]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,10,11]) == [0,1,2,3,4,5,6,7,8,9,10,11]"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     select_words(\"a gentleman has spotted a peacock\", 2) == ['a gentleman', 'a peacock']\nassert     select_words(\"a gentleman has spotted a peacock\", 3) == ['a gentleman', 'a peacock']\nassert     select_words(\"a gentleman has spotted a peacock\", 4) == ['a peacock']\nassert     select_words(\"a gentleman has spotted a peacock\", 5) == ['a gentleman', 'a peacock']\nassert     select_words(\"\", 2) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     select_words(\"When a bug jumps over the other bug\", 2) == \\\n            [\"bug\", \"over\", \"jump\", \"a\", \"over\", \"other\"]\nassert     select_words(\"   A short sentence\", 1) == [\"sentence\"]\nassert     select_words(\"\", 1) == []\nassert     select_words(\"Hello world\", 0) == []\nassert     select_words(\"Hello world\", 3) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     select_words(\n            'eeyiyiyi iyiyiyiy yyyyyyy',\n            2) ==     ['iyi']\nassert     select_words(\n            'it w i a i y d',\n            3) ==     ['w', 'd']\nassert     select_words(\n            'ayy',\n            2) ==     ['ayy']\nassert     select_words(\n            '',\n            2) ==     []\n\n\ndef is_valid_solution(d, s):\n    \"\"\"Given a dictionary d and a string s, you have been tasked to implement a function \n    that returns true if s can be made from only words in the dictionary, and false otherwise.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     select_words(\"a ab abc ad abd\", 2) ==     [\"a\", \"ab\"]\nassert     select_words(\"a ab abc ad abd\", 3) ==     [\"a\", \"ab\", \"abc\"]\nassert     select_words(\"a ab abc ad abd\", 0) ==     []\nassert     select_words(\"ab abc ad abd\", 0) ==     []\nassert     select_words(\"\", 0) ==     []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     select_words(\"consonants\", 2) == [\"consonants\", \"consonants\"]\nassert     select_words(\"consonants\", 1) == [\"consonants\"]\nassert     select_words(\"\", 1) == []\nassert     select_words(\"consonants\", 5) == []\nassert     select_words(\"consonants\", 0) == [\"consonants\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     select_words('Welcome to this world, this is it', 6) == ['this', 'world', 'this', 'world']\nassert     select_words('Welcome to this world, this is it', 5) == ['this', 'this', 'this', 'this', 'world']\nassert     select_words('Welcome to this world, this is it', 3) == ['this', 'this', 'this']\nassert     select_words('Welcome to this world, this is it', 7) == []\nassert     select_words('', 3) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     select_words('''cc aa bb''', 1) == []\nassert     select_words('''cc aa bb''', 2) == ['aa', 'bb']\nassert     select_words('''cc aa bb''', 3) == ['cc', 'aa', 'bb']\nassert     select_words('''cc aa bb''', 4) == ['cc', 'aa', 'bb']\nassert     select_words('''cc aa bb''', 5) == ['cc']\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     select_words(\"\", 3) == []\nassert     select_words(\"a a a b c d\", 0) == []\nassert     select_words(\"a a a b c d\", 1) == [\"a\", \"a\", \"a\", \"b\", \"c\", \"d\"]\nassert     select_words(\"a a a b c d\", 2) == [\"a\", \"a\", \"b\", \"c\", \"d\"]\nassert     select_words(\"a a a b c d\", 3) == [\"a\", \"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     select_words(\"this is a test\", 5) == ['test']\nassert     select_words(\"this is a test\", 10) == ['is', 'test']\nassert     select_words(\"this is a test\", 14) == []\nassert     select_words(\"\", 10) == []\nassert     select_words(\"test\", 2) == ['es', 'est', 'tes', 'est']\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     select_words(\"This is an exam\", 2) == ['an', 'exa']\nassert     select_words(\"This is an exam\", 1) == ['a', 'e', 'i', 'o','s', 't', 'u']\nassert     select_words(\"\", 2) == []\nassert     select_words(\"test\", 2) == [\"te\", \"st\"]\nassert     select_words(\"test\", 0) == [\"\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_closest_vowel(\"d\") == \"d\"\nassert     get_closest_vowel(\"Cab\") == \"a\"\nassert     get_closest_vowel(\"Cour\") == \"u\"\nassert     get_closest_vowel(\"Ducat\") == \"\"\nassert     get_closest_vowel(\"Cube\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('hi') == 'i'\nassert     get_closest_vowel('hello world') == 'e'\nassert     get_closest_vowel('aa') == ''\nassert     get_closest_vowel('aass') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_closest_vowel(\"abba\") == 'a'\nassert     get_closest_vowel(\"abcd\") == ''\nassert     get_closest_vowel(\"eeee\") == ''\nassert     get_closest_vowel(\"geeks\") == 'e'\nassert     get_closest_vowel(\"geek\") == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_closest_vowel(\"dog\") == \"d\"\nassert     get_closest_vowel(\"beethoven\") == \"b\"\nassert     get_closest_vowel(\"elephant\") == \"\"\nassert     get_closest_vowel(\"tom\") == \"\"\nassert     get_closest_vowel(\"\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"benchmark\") == \"b\"\nassert     get_closest_vowel(\"ben\") == \"b\"\nassert     get_closest_vowel(\"benched\") == \"b\"\nassert     get_closest_vowel(\"benchmarking\") == \"b\"\nassert     get_closest_vowel(\"benching\") == \"b\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_closest_vowel(\"hello\") == \"e\"\nassert     get_closest_vowel(\"double\") == \"o\"\nassert     get_closest_vowel(\"vowels\") == \"a\"\nassert     get_closest_vowel(\"qwerty\") == \"\"\nassert     get_closest_vowel(\"qwe\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_closest_vowel(\"Aa\") == \"a\"\nassert     get_closest_vowel(\"aAa\") == \"a\"\nassert     get_closest_vowel(\"Abc\") == \"\"\nassert     get_closest_vowel(\"\") == \"\"\nassert     get_closest_vowel(\"aA\") == \"a\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_closest_vowel(\"closer\")     == \"e\"\nassert     get_closest_vowel(\"alpha\")     == \"\"\nassert     get_closest_vowel(\"closest\")     == \"e\"\nassert     get_closest_vowel(\"alpha1\")     == \"\"\nassert     get_closest_vowel(\"closest1\")     == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"work\") == \"w\", \"test 1 error\"\nassert     get_closest_vowel(\"meaty\") == \"a\", \"test 2 error\"\nassert     get_closest_vowel(\"bacon\") == \"a\", \"test 3 error\"\nassert     get_closest_vowel(\"burger\") == \"a\", \"test 4 error\"\nassert     get_closest_vowel(\"eyes\") == \"e\", \"test 5 error\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         get_closest_vowel(\"hello\") == \"l\"\nassert         get_closest_vowel(\"world\") == \"l\"\nassert         get_closest_vowel(\"fever\") == \"v\"\nassert         get_closest_vowel(\"t\") == \"e\"\nassert         get_closest_vowel(\"breast\") == \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     match_parens(['()', '()']) == 'Yes'\nassert     match_parens(['(())', '()']) == 'Yes'\nassert     match_parens(['((()))', '()']) == 'Yes'\nassert     match_parens(['((()))', '((()))']) == 'No'\nassert     match_parens(['((())', '(()()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     match_parens(['(())()']) == 'Yes'\nassert     match_parens(['(()']) == 'No'\nassert     match_parens(['(', '))']) == 'Yes'\nassert     match_parens(['(', ')()', ')']) == 'No'\nassert     match_parens(['(', ')', '()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     match_parens(['(', ')', ')', '()', '((', '))']) == 'Yes'\nassert     match_parens(['(', ')', ')', '()', '((', ')', ')', ')', '()', '()', '(', ')']) == 'Yes'\nassert     match_parens(['(', ')', ')', '()', '((', ')', ')', ')', '()', '()', '(', ')']) == 'No'\nassert     match_parens(['(', ')', ')', '()', '())', '()', '(', ')']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     match_parens(['(', ')']) == 'Yes'\nassert     match_parens(['(', ')']) == 'No'\nassert     match_parens(['(', ')']) == 'Yes'\nassert     match_parens(['(', ')']) == 'Yes'\nassert     match_parens(['(', ')', ')']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     match_parens(['()', '()']) == 'Yes'\nassert     match_parens(['((', '()']) == 'No'\nassert     match_parens(['(', ')']) == 'No'\nassert     match_parens(['(()(()())', '()']) == 'Yes'\nassert     match_parens(['(', ')']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     match_parens(['(())()']) == 'Yes'\nassert     match_parens(['())']) == 'No'\nassert     match_parens(['(()))']) == 'No'\nassert     match_parens(['(()']) == 'No'\nassert     match_parens(['(']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     match_parens(['(())()', ')(']) == 'Yes'\nassert     match_parens(['(())()', ')()']) == 'No'\nassert     match_parens(['(())()', '))']) == 'No'\nassert     match_parens(['(())()', ')']) == 'No'\nassert     match_parens(['(())()', '()(']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     match_parens('(())()') == 'Yes'\nassert     match_parens('())') == 'No'\nassert     match_parens('())()') == 'Yes'\nassert     match_parens('()(()') == 'No'\nassert     match_parens('()()()') == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     match_parens(['(())()']) == 'Yes'\nassert     match_parens(['())']) == 'No'\nassert     match_parens(['()))']) == 'No'\nassert     match_parens(['((())(())())']) == 'Yes'\nassert     match_parens(['()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     match_parens(['(())', ')(()']) == 'Yes'\nassert     match_parens(['(())()', ')(())(']) == 'Yes'\nassert     match_parens(['()', ')(()()']) == 'No'\nassert     match_parens(['(())((())(())']) == 'Yes'\nassert     match_parens(['(()']) == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [3, 2, 1] == maximum([1, 3, 2, 6, 4, 5], 3)\nassert     [1, 2, 3, 4, 5, 6] == maximum([3, 2, 1, 6, 4, 5], 7)\nassert     [5, 4, 3, 2, 1] == maximum([4, 3, 2, 1], 4)\nassert     [5, 4, 3, 2, 1] == maximum([4, 3, 2, 1], 5)\nassert     [5, 4, 3, 2, 1] == maximum([4, 3, 2, 1], 9)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maximum([1, 3, 4, 5, 2, 3], 3) == [5, 4, 3]\nassert maximum([1, 3, 4, 5, 2, 3], 2) == [5, 4]\nassert maximum([1, 3, 4, 5, 2, 3], 1) == [5]\nassert maximum([], 0) == []\nassert maximum([1,3,4,5], 0) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximum([1, 3, 5, 7], 3) == [3, 5, 7]\nassert     maximum([0, 1, 3, 5, 7], 3) == [3, 5, 7]\nassert     maximum([-1, 3, 5, 7], 3) == [3, 5, 7]\nassert     maximum([3, 2, 1], 3) == [3, 2, 1]\nassert     maximum([1, 2, 3], 3) == [3, 2, 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         maximum([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 7]\nassert         maximum([1, 4, 2, 3, 5, 6, 7], 3) == [5, 6, 7]\nassert         maximum([1, 4, 2, 3, 5, 6, 7], 1) == [1]\nassert         maximum([1, 4, 2, 3, 5, 6, 7], 2) == [2, 5]\nassert         maximum([1, 4, 2, 3, 5, 6, 7], 3) == [3, 5, 7]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     maximum([10, 4, 6, 3, 1], 4) == [6, 10, 4, 3, 1]\nassert     maximum([1,2,3,4,5], 1) == [1]\nassert     maximum([10, 4, 6, 3, 1], 7) == [6, 10]\nassert     maximum([10, 4, 6, 3, 1], 0) == []\nassert     maximum([], 1) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     maximum([1, 3, 5, 7], 2)     == [5, 7]\nassert     maximum([1, 3, 5, 7], 3)     == [5, 7, 1]\nassert     maximum([1, 3, 5, 7], 0)     == [1, 3, 5, 7]\nassert     maximum([-1, 2, 3, 4], 2)     == [3, 4]\nassert     maximum([-1, -3, -5, -7], 2) == [-5, -7]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [6, 7, 8, 9] == maximum([1, 5, 9, 6, 7, -8, 0, 1], 3)\nassert     [9] == maximum([1, 2, 3, 4, 5], 1)\nassert     [5, 6, 7, 8, 9] == maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 7)\nassert     [] == maximum([], 3)\nassert     [-8, -7, -6, -5, -4, -3, -2, -1] == maximum([-8, -7, -6, -5, -4, -3, -2, -1], 8)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [5, 6, 7, 8, 9]\nassert     maximum([-1, -2, -3, -4, -5, -6, -7, -8, -9], 4) == [-9, -7, -6, -5]\nassert     maximum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10], 4) == [-9, -7, -6, -5, -4]\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [3,2,1] == maximum([3,2,1,4,5,6,7,8,9,10], 4)\nassert     [8,7,6,5,4,3] == maximum([2,2,1,4,3,6,7,8,9,10], 4)\nassert     [5,6,7,8] == maximum([10,9,8,7,6,5,4,3,2,1], 4)\nassert     [9,8,7,6,5,4,3,2,1] == maximum([-10,9,8,7,6,5,4,3,2,1], 4)\nassert     [1,2,3,4,5,6,7,8,9,10] == maximum([10,9,8,7,6,5,4,3,2,1], 3)\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (solution([1, 2, 3, 4, 5]) == 5)\nassert     (solution([1, 3, 5]) == 0)\nassert     (solution([1, 3, 5, 7, 9]) == 0)\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7]) == 0\nassert     solution([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solution([1,2,3,4,5,6]) == 0\nassert     solution([1,2,3,4,5]) == 0\nassert     solution([1,2,3,4,5,6,7]) == 1\nassert     solution([1,2,3,4,5,6,7,8]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solution([1, 2, 3]) == 3, \"test 1\"\nassert     solution([2, 2, 3]) == 3, \"test 2\"\nassert     solution([1, 3, 3]) == 0, \"test 3\"\nassert     solution([10, 11, 12]) == 12, \"test 4\"\nassert     solution([5, 7, 2, 4, 2, 4, 1, 0, 1, 5, 8, 10]) == 0, \"test 5\"\nprint \"all tests passed\"\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solution([1,2,3,4,5,6]) == 3\nassert     solution([2,4,6,8]) == 0\nassert     solution([2,4,6,7,8]) == 8\nassert     solution([1,2,3,4,5]) == 3\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solution([1,2,3,4,5,6]) == 9\nassert     solution([0,0,0,0]) == 0\nassert     solution([1,2,3,4,5]) == 0\nassert     solution([]) == 0\nassert     solution([1,2,3,4,5,6]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef check_solution(lst):\n    \"\"\"Checks the correctness of the solution.\n    \"\"\"\n    expected_sum = 8\n    solution_sum = solution(lst)\n    print 'Checking the solution...'\n    if solution_sum == expected_sum:\n        print 'OK'\n    else:\n        print 'The solution returned {0} instead of {1}'.format(solution_sum, expected_sum)\n\nif __name__ == '__main__':\n    lst = [1, 3, 2, 1, 2, 3, 1, 2, 1, 3]\n    check_solution(lst)\n\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    check_solution(lst)\n\n    lst = [10, 11, 2, 4, 5, 7, 0, 1, 2, 3, 4, 5]\n    check_solution(lst)\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     solution([2, 1, 3, 4, 5, 6, 7, 8]) == 10\nassert     solution([1, 3, 5]) == 0\nassert     solution([1, 3, 5, 7, 9, 11, 13, 15]) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_elements([2, 3, 5], 1) == 2\nassert     add_elements([1, 1, 1], 1) == 2\nassert     add_elements([2, 3, 5], 2) == 8\nassert     add_elements([1, 1, 1], 2) == 3\nassert     add_elements([3, 1, 4, 6, 1], 1) == 4\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_elements([], 5) == 0\nassert     add_elements([1], 5) == 1\nassert     add_elements([1, 2], 5) == 3\nassert     add_elements([1, 2, 3], 5) == 6\nassert     add_elements([1, 2, 3, 4], 5) == 10\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_elements([],0) == 0\nassert     add_elements([1,2,3],3) == 9\nassert     add_elements([1,2,3],4) == 9\nassert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13],3) == 30\n\n\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_elements([1,2,3,4,5], 0) == 0\nassert     add_elements([1,2,3,4,5], 1) == 1\nassert     add_elements([1,2,3,4,5], 2) == 3\nassert     add_elements([1,2,3,4,5], 3) == 5\nassert     add_elements([1,2,3,4,5], 4) == 7\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_elements([2, 4, 6, 8, 1, 3, 5, 9], 3) == 12\nassert     add_elements([2, 4, 6, 8, 1, 3, 5, 9], 2) == 5\nassert     add_elements([2, 4, 6, 8, 1, 3, 5, 9], 9) == 22\nassert     add_elements([2, 4, 6, 8, 1, 3, 5, 9], 10) == 22\nassert     add_elements([2, 4, 6, 8, 1, 3, 5, 9], 1) == 10\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 31\nassert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 31\nassert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 31\nassert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 31\nassert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 31\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13], 1) == 39\nassert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13], 2) == 91\nassert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13], 3) == 81\nassert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13], 4) == 75\nassert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13], 5) == 55\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) ==\n            14\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) ==\n            30\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) ==\n            9\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) ==\n            45\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) ==\n            40\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_elements([], 1) == 0\nassert     add_elements([1, 1, 1], 1) == 2\nassert     add_elements([1, 1, 1], 3) == 4\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 10) == 3812"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_elements([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"], 2) == 23\nassert     add_elements([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"], 5) == 48\nassert     add_elements([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"], 100) == 37\nassert     add_elements([\"123456789\", \"1234567890\", \"1234567891\", \"12345678901\", \"123456789012\", \"1234567890123\"], 2) == 15\n\n\ndef get_unique_elements(arr):\n    \"\"\"\n    Given a non-empty array of integers arr, return an array containing all the unique elements of the array and the number of times they appear.\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(3) == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(31) == [31, 70, 62, 29, 148, 87, 74, 37, 18, 9, 5, 2, 1]\nassert     get_odd_collatz(33) == [33, 71, 65, 35, 156, 95, 76, 47, 26, 13, 7, 3, 1]\nassert     get_odd_collatz(50) == [50, 106, 94, 47, 238, 144, 120, 77, 39, 22, 11, 7, 3, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [3, 10]\nassert     get_odd_collatz(3) == [7, 22]\nassert     get_odd_collatz(4) == [11, 44, 82]\nassert     get_odd_collatz(5) == [13, 65, 130]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(5) == [1, 2, 3, 10, 5]\nassert     get_odd_collatz(17) == [1, 3, 10, 5, 16]\nassert     get_odd_collatz(50) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(12345) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(1234567) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2]\nassert     get_odd_collatz(5) == [5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert get_odd_collatz(12) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert get_odd_collatz(8) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1)         == [1]\nassert     get_odd_collatz(2)         == [1, 2]\nassert     get_odd_collatz(3)         == [1, 3]\nassert     get_odd_collatz(4)         == [1, 2, 3, 4]\nassert     get_odd_collatz(5)         == [1, 5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef sum_list(n):\n    \"\"\"\n    Given a list of integer numbers, return the sum of all the numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_odd_collatz([1]) == [1]\nassert     get_odd_collatz([7]) == [7,13,29,61,124,248,496,832,1024,2048]\nassert     get_odd_collatz([23]) == [23,47,97,295,1153,3877,7699,15971,48449,8321,26501]\nassert     get_odd_collatz([28]) == [28,14,56,112,364,652,1232,432,1000,2000]\nassert     get_odd_collatz([22]) == [22,44,110,364,1222,1100,464,232,1000,1000]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(123) == sorted([123, 6, 3, 10, 5, 16, 8, 4, 2, 1])\nassert     get_odd_collatz(257) == sorted([257, 128, 64, 32, 16, 8, 4, 2, 1])\nassert     get_odd_collatz(48) == sorted([48, 25, 12, 6, 3, 2, 1])\nassert     get_odd_collatz(28) == sorted([28, 14, 7, 4, 2, 1])\nassert     get_odd_collatz(13) == sorted([13, 6, 3, 10, 5, 16, 8, 4, 2, 1])\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     valid_date(    \"07-03-2000\") == False\nassert     valid_date(    \"01-01-1900\") == True\nassert     valid_date(    \"31-12-1999\") == False\nassert     valid_date(    \"01-02-2000\") == True\nassert     valid_date(    \"01-13-2000\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     valid_date(date) == True\nassert     valid_date(date) == True\nassert     valid_date(date) == True\nassert     valid_date(date) == True\nassert     valid_date(date) == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     valid_date('01-01-1980') == False\nassert     valid_date('01-01-2000') == False\nassert     valid_date('01-01-2999') == False\nassert     valid_date('02-01-2000') == False\nassert     valid_date('12-31-1999') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     valid_date('10-31-2000') == True\nassert     valid_date('1-30-2014') == False\nassert     valid_date('31-01-2000') == False\nassert     valid_date('29-02-2016') == False\nassert     valid_date('10-31-1999') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     valid_date('01-10-2016') == True\nassert     valid_date('31-02-2016') == False\nassert     valid_date('02-30-2016') == False\nassert     valid_date('02-32-2016') == True\nassert     valid_date('05-13-2016') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     valid_date('12-30-2013') == False\nassert     valid_date('1-2-2013') == False\nassert     valid_date('12-13-2013') == False\nassert     valid_date('02-30-2013') == True\nassert     valid_date('12-02-2013') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     valid_date(\"1-12-2012\") == True\nassert     valid_date(\"1-1-2012\") == False\nassert     valid_date(\"31-12-2012\") == False\nassert     valid_date(\"30-12-2012\") == False\nassert     valid_date(\"1-12-2012\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     valid_date('02-31-1999') == False\nassert     valid_date('01-01-11') == False\nassert     valid_date('12-02-28') == False\nassert     valid_date('10-11-1999') == True\nassert     valid_date('10-12-89') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     valid_date(\"11-12-1970\") == False, \"11-12-1970 should be an invalid date\"\nassert     valid_date(\"1-12-1970\") == False, \"1-12-1970 should be an invalid date\"\nassert     valid_date(\"32-02-2016\") == False, \"32-02-2016 should be an invalid date\"\nassert     valid_date(\"02-02-2016\") == False, \"02-02-2016 should be an invalid date\"\nassert     valid_date(\"11-29-2016\") == False, \"11-29-2016 should be an invalid date\"\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     valid_date('2-1-2014')\nassert     not valid_date('2-13-2014')\nassert     not valid_date('-12-1-2014')\nassert     not valid_date('12-1-2014')\nassert     valid_date('2-31-2014')\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_words('Hello, world!') == ['Hello', 'world']\nassert     split_words('Hello, world!') == ['Hello', 'world']\nassert     split_words('Hello, world!') == ['Hello', 'world']\nassert     split_words('Hello, world!') == ['Hello', 'world']\nassert     split_words('Hello, world!') == ['Hello', 'world']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split_words('Hello World, how are you?') == ['Hello', 'World', 'how', 'are', 'you?'], \\\n        'Did you split the words correctly?'\nassert     split_words('Hello World') == ['Hello', 'World'], \\\n        'Did you handle a whitespace/comma issue?'\nassert     split_words('Hi') == ['Hi'], \\\n        'Did you handle a whitespace/comma issue?'\nassert     split_words('A') == ['A'], \\\n        'Did you handle a whitespace/comma issue?'\n\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     split_words(\"hello world\") == [\"hello\", \"world\"]\nassert     split_words(\"hello_world\") == [\"hello\", \"world\"]\nassert     split_words(\"hello,world\") == [\"hello\", \"world\"]\nassert     split_words(\"hello\") == [\"hello\"]\nassert     split_words(\"1,2,3,4,5\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_words(\"hello\") == ['hello']\nassert     split_words(\"hello world\") == ['hello', 'world']\nassert     split_words(\"hello,world\") == ['hello', 'world']\nassert     split_words(\"hello, world\") == ['hello', 'world']\nassert     split_words(\"Hello, world\") == ['Hello', 'world']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     split_words('Hi There') == ['Hi', 'There']\nassert     split_words('Hi There, My Friend') == ['Hi', 'There', 'My Friend']\nassert     split_words('This is a test') == ['This', 'is', 'a', 'test']\nassert     split_words('I like programming') == ['I', 'like', 'programming']\n\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_words(\"word 1 word 2 word 3\") == ['word', '1', 'word', '2', 'word', '3']\nassert     split_words(\"word 1 word 2 word 3, word 4 word 5\") == ['word', '1', 'word', '2', 'word', '3', 'word', '4', 'word', '5']\nassert     split_words(\"word 1 word 2 word 3, word 4 word 5, word 6 word 7\") == ['word', '1', 'word', '2', 'word', '3', 'word', '4', 'word', '5', 'word', '6', 'word', '7']\nassert     split_words(\"word 1 word 2 word 3, word 4 word 5, word 6 word 7, word 8 word 9\") == ['word', '1', 'word', '2', 'word', '3', 'word', '4', 'word', '5', 'word', '6', 'word', '7', 'word', '8', 'word', '9']\nassert     split_words(\"word 1 word 2 word 3, word 4 word 5, word 6 word 7, word 8 word 9\") == ['word', '1', 'word', '2', 'word', '3', 'word', '4', 'word', '5', 'word', '6', 'word', '7', 'word', '8', 'word', '9']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         split_words('hello') == ['hello']\nassert         split_words('hello, world') == ['hello', 'world']\nassert         split_words('hello, world, my, name, is, Mike') == ['hello', 'world','my', 'name', 'is', 'Mike']\nassert         split_words('1') == ['1']\nassert         split_words('a') == ['a']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     split_words(\"Hi, how are you?\") == ['Hi', ',', 'how', 'are', 'you', '?']\nassert     split_words(\"Hello, how are you?\") == ['Hello', ',', 'how', 'are', 'you', '?']\nassert     split_words(\"Hi how are you?\") == ['Hi', 'how', 'are', 'you', '?']\nassert     split_words(\"Hello, how are you?\") == ['Hello', ',', 'how', 'are', 'you', '?']\nassert     split_words(\"Hi, how are you?\") == ['Hi', ',', 'how', 'are', 'you', '?']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_words(\"This is a test string\") == ['this', 'is', 'a', 'test','string']\nassert     split_words(\"This is a test string, and you\") == ['this', 'is', 'a', 'test','string', 'and', 'you']\nassert     split_words(\"This is a test string and, you\") == ['this', 'is', 'a', 'test','string', 'and', 'you']\nassert     split_words(\"123.456.789\") == ['123', '456', '789']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_words(\"This is a test!\") ==     ['This', 'is', 'a', 'test']\nassert     split_words(\"A,B,a,b,c,d\") == ['A', 'B', 'a', 'b', 'c', 'd']\nassert     split_words(\"A,B,a,b,c,d,e,a,b,c,d,e\") == ['A', 'B', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']\nassert     split_words(\"\") ==     []\nassert     split_words(\"  \") ==     []\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1,2]) == True\nassert     is_sorted([1,2,3]) == True\nassert     is_sorted([1,2,3,4]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sorted([1,2,3,4]) == True\nassert     is_sorted([2,1,3,4]) == False\nassert     is_sorted([1,1,1,1,1]) == True\nassert     is_sorted([1,1,1,1,1,1,1,1,1]) == True\nassert     is_sorted([]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1,2]) == False\nassert     is_sorted([1,2,2]) == True\nassert     is_sorted([1,2,2,2]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True\nassert     is_sorted([1,2,3,4,5,6]) == False\nassert     is_sorted([2,1,3,4]) == False\nassert     is_sorted([2,3,1,4]) == False\nassert     is_sorted([-3,5,4,5,6,7]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([0]) == True\nassert     is_sorted([0, 0]) == True\nassert     is_sorted([0, 1]) == True\nassert     is_sorted([1, 0]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sorted([1,2,3])\nassert     is_sorted([1,2,3,4])\nassert     is_sorted([1,1,2,2,3,3,4,4])\nassert     is_sorted([1,3,2,4,3])\nassert     is_sorted([1,1,2,2,3,3,3])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 2, 3, 1]) == False\nassert     is_sorted([1, 2, 3, 4, 1]) == False\nassert     is_sorted([1, 2, 3, 3, 2]) == False\nassert     is_sorted([1, 2, 3, 3, 1, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_sorted([1,2,3,4])\nassert     is_sorted([1,1,2,3,4,4])\nassert     is_sorted([1,1,2,2,3,3]) == False\nassert     is_sorted([]) == True\nassert     is_sorted([-1,-2,-3,-4]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 2, 3, 5, 4]) == False\nassert     is_sorted([3, 1, 2, 4, 5]) == False\nassert     is_sorted([1, 2, 3, 1, 2]) == False\nassert     is_sorted([1, 3, 2, 4, 5]) == False\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersection((1, 3), (2, 4)) == (2, 3)\nassert     intersection((0, 1), (2, 3)) == (0, 1)\nassert     intersection((0, 1), (0, 2)) == (0, 1)\nassert     intersection((1, 3), (2, 4)) == (2, 3)\nassert     intersection((1, 3), (1, 2)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersection((1, 3), (2, 4)) == 'YES'\nassert     intersection((1, 3), (3, 5)) == 'NO'\nassert     intersection((1, 3), (5, 7)) == 'NO'\nassert     intersection((2, 4), (1, 3)) == 'NO'\nassert     intersection((3, 5), (1, 3)) == 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersection( (1, 3), (2, 4) ) == \"NO\"\nassert     intersection( (1, 3), (1, 4) ) == \"YES\"\nassert     intersection( (2, 4), (1, 3) ) == \"NO\"\nassert     intersection( (1, 4), (1, 3) ) == \"YES\"\nassert     intersection( (1, 4), (1, 4) ) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersection((1, 2), (3, 4)) == (2, 3)\nassert     intersection((1, 2), (2, 4)) == (2, 3)\nassert     intersection((1, 3), (2, 4)) == (2, 3)\nassert     intersection((1, 4), (2, 3)) == (2, 3)\nassert     intersection((1, 2), (3, 3)) == (3, 2)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersection(1, 2) == \"YES\"\nassert     intersection(2, 1) == \"NO\"\nassert     intersection(1, 3) == \"YES\"\nassert     intersection(1, 4) == \"NO\"\nassert     intersection(2, 3) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((1, 2), (1, 2)) == \"NO\"\nassert     intersection((2, 5), (1, 3)) == \"YES\"\n\n\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersection(interval1,interval2) == \"NO\"\nassert     intersection(interval3,interval4) == \"NO\"\nassert     intersection(interval2,interval3) == \"YES\"\nassert     intersection(interval4,interval3) == \"NO\"\n\nprint \"All tests passed successfully!\""
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [prod_signs([1, -2, 3, 4, 5]) == 31,     # positive prod\n            prod_signs([-1, 2, -3, 4, -5]) == -31, # neg prod\n            prod_signs([]) == None]                # empty arr"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prod_signs([1, 0, -1]) == 1\nassert     prod_signs([1, 2, 3, -4, -4]) == 16\nassert     prod_signs([]) == None\nassert     prod_signs([0, 0, 0]) == 0\nassert     prod_signs([1, -2, 3, 4]) == 17\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prod_signs(arr=[]) == None\nassert     prod_signs(arr=[1]) == 1\nassert     prod_signs(arr=[1, 2]) == 1\nassert     prod_signs(arr=[-1, -2]) == 1\nassert     prod_signs(arr=[1, 2, 3, 4, 5]) == -10\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prod_signs([2, -3, 1]) ==     8\nassert     prod_signs([-1, -3, -2]) ==     8\nassert     prod_signs([2, -3, 1, 5]) ==     8\nassert     prod_signs([-1, -3, -2, 3, 5]) ==     8\nassert     prod_signs([]) is None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prod_signs([]) == 0\nassert     prod_signs([1]) == 0\nassert     prod_signs([1, 3, -4, 5]) == -15\nassert     prod_signs([1, 3, -4, 5, 6, 7]) == -15\nassert     prod_signs([-5, -4, -3, -2, -1]) == -15\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prod_signs([1, 2, 3, -4, -5]) == 1*(-1)*1*(-1)*1*(-1)*1*(-1)\nassert     prod_signs([1, 2, 3, -4, -5, 10]) == -1*(-1)*1*(-1)*1*(-1)*1*(1)\nassert     prod_signs([]) == None\nassert     prod_signs([0, 0, 0, 0, 0]) == 0\nassert     prod_signs([1, 2, 3, -4, -5, 10, 12]) == 1*(-1)*1*(-1)*1*(-1)*1*(1)*1*(1)\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prod_signs([1,2,3,4]) == -48\nassert     prod_signs([-1,-2,-3,-4]) == -48\nassert     prod_signs([]) == None\nassert     prod_signs([1,2,3]) == None\nassert     prod_signs([0,-1,-2,-3]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prod_signs([])    ==     None\nassert     prod_signs([2, 3])    ==    15\nassert     prod_signs([2, -3])    ==    15\nassert     prod_signs([-2, 3])    ==    15\nassert     prod_signs([-2, -3])    ==     -15\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([-3]) == -3\nassert     prod_signs([-3, 0, 3]) == -9\nassert     prod_signs([-1, -3, 3]) == -9\nassert     prod_signs([-1, -3, 3, 0, 1]) == -9\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         prod_signs([-1, -2, 3, 4, 0, -5]) == (4 * (-1) * (-2) * 3 * 4 * 0 * -5)\nassert         prod_signs([]) == None\nassert         prod_signs([1, 1, 1, 1, 1, 1]) == 1\nassert         prod_signs([-1, -1, -1, -1, -1, -1]) == -1\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 3]\nassert     minPath([[1, 3, 1], [2, 2, 4], [3, 1, 5]], 2) == [1, 4]\nassert     minPath([[1, 3, 1], [2, 2, 4], [3, 1, 5]], 3) == [1, 2, 3, 4, 5]\nassert     minPath([[1, 3, 1], [2, 2, 4], [3, 1, 5]], 4) == [1, 3, 1, 2, 4, 5]\nassert     minPath([[1, 3, 1], [2, 2, 4], [3, 1, 5]], 5) == [1, 3, 1, 2, 4, 5]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 3, 7, 8, 9]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     minPath([[1,3,1,3,1],[2,4,2,4,2],[3,4,3,4,3]], 1) == [1]\nassert     minPath([[1,2,3,4,5],[16,17,18,19,6],[10,11,12,13,14],[15,24,25,26,27]], 4) == [1, 16, 6, 10, 15]\nassert     minPath([[0,1,2,3,4],[16,17,18,19,6],[10,11,12,13,14],[15,24,25,26,27]], 1) == [1]\nassert     minPath([[1,3,1,3,1],[2,4,2,4,2],[3,4,3,4,3]], 2) == [1, 3, 1]\nassert     minPath([[1,3,1,3,1],[2,4,2,4,2],[3,4,3,4,3]], 3) == [1, 3, 1, 3]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minPath([[1,2],[1,3]], 1) == [1]\nassert     minPath([[1,2],[1,3],[2,3]], 1) == [1]\nassert     minPath([[1,2],[1,3],[2,3],[2,4],[4,3]], 1) == [1]\nassert     minPath([[1,2],[1,3],[2,3],[2,4],[4,3]], 2) == [1,3]\nassert     minPath([[1,2],[1,3],[2,3],[2,4],[4,3]], 3) == [1,3,4]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minPath([\n                [1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]\n            ], 3) == [3, 2, 1]\nassert     minPath([\n                [1, 2],\n                [4, 5, 6]\n            ], 2) == [2, 1]\nassert     minPath([\n                [1, 2],\n                [4, 5]\n            ], 2) == [2, 1, 4]\nassert     minPath([\n                [1, 2, 3],\n                [4, 5, 6]\n            ], 4) == [3, 2, 1, 4]\nassert     minPath([\n                [1, 2, 3, 4],\n                [5, 6, 7, 8]\n            ], 2) == [2, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minPath([[1,3,1],[1,5,1],[4,2,1]], 4) == [1,2,3,1]\nassert     minPath([[1,2],[1,3]], 1) == [1,2]\nassert     minPath([[1,2],[1,3]], 2) == [1,2,3]\nassert     minPath([[1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minPath([[1,3],[2,2]], 1) == [1]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [2,3]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,3]\nassert     minPath([[1,3,2],[4,5,6],[7,8,9]], 3) == [1,2,3]\nassert     minPath([[2,3],[4,5],[6,7,8,9]], 4) == [4,5,6,7,8,9]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], 3) == [1,2,3]\nassert     minPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], 4) == [1,2,3,4]\nassert     minPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], 6) == [1,2,3,4,5,6]\nassert     minPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], 7) == [1,2,3,4,5,6,7]\nassert     minPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]], 8) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1, 4, 7]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 4, 7]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 3, 5, 8]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 4, 6]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [1, 2, 3, 4, 5, 8]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         [tri(i) for i in range(10)]        == [0, 3, 4, 7, 9, 10, 12, 15, 17, 22]\nassert         [tri(i) for i in range(10, 100)]    == [0, 1, 1, 2, 4, 7, 13, 24, 44, 81]\nassert         [tri(i) for i in range(100, 200)]    == [0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781909, 4052739537693, 6502479872879, 1216451004077, 1974049901293, 38252703657519, 61034696656376, 98717059849120, 15992381592666, 25206226223998, 41554929138289, 72522464959208, 12586269025, 19998807776135, 37779673607505, 61034696656376, 98717059849120, 15992381592666, 25206226223998, 41554929138289, 72522464959208]\n\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         tri(0) == 0\nassert         tri(1) == 3\nassert         tri(2) == 3\nassert         tri(3) == 5\nassert         tri(4) == 8\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(3) == 3\nassert     tri(4) == 3\nassert     tri(5) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4) == 2 + 3 + 3 == 8\nassert     tri(6) == tri(5) + tri(4) + tri(3) == 4 + 3 + 3 + 3 + 3 == 17\nassert     tri(10) == tri(9) + tri(8) + tri(7) == 5 + 4 + 3 + 3 + 3 + 3 + 3 == 36\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tri(1)     == [1], '1st triangle number is 1'\nassert     tri(2)     == [1, 1], '2nd triangle number is 1 + 1 = 2'\nassert     tri(3)     == [1, 1, 2], '3nd triangle number is 1 + 1 + 2 = 3'\nassert     tri(4)     == [1, 1, 2, 4], '4nd triangle number is 1 + 1 + 2 + 4 = 5'\nassert     tri(5)     == [1, 1, 2, 4, 7], '5th triangle number is 1 + 1 + 2 + 4 + 7 = 12'\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(3) == 3\nassert     tri(4) == 8\nassert     tri(5) == 34\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tri(1) == 3\nassert tri(2) == 1\nassert tri(3) == 2\nassert tri(4) == 8\nassert tri(5) == 34\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1\nassert     tri(3) == 2\nassert     tri(4) == 3\nassert     tri(5) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tri(2) == [1, 3]\nassert     tri(4) == [1, 3, 6, 10]\nassert     tri(8) == [1, 3, 6, 10, 15, 21, 28, 36]\nassert     tri(10) == [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]\nassert     tri(6) == [1, 3, 6, 10, 15, 21]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tri(2) == 2\nassert     tri(4) == 3\nassert     tri(3) == 8\nassert     tri(5) == 25\nassert     tri(7) == 44\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [digits(n) for n in [1234, 12345]] == [1, 25]\nassert     [digits(n) for n in [12345, 98765]] == [5, 125]\nassert     [digits(n) for n in [1234567891, 1234567890]] == [1, 50]\nassert     [digits(n) for n in [0, 0, 0, 0, 0]] == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef count(a,b):\n    \"\"\"Return the number of elements in the range [a, b] inclusive, where a and b are integers.\"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digits(27) == 0\nassert     digits(97) == 19\nassert     digits(99) == 19\nassert     digits(1050) == 1230\nassert     digits(9978) == 7997\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef sum_digits(n):\n    \"\"\"Given a positive integer n, return the sum of all of its digits.\n    If the sum is a teen (i.e., the value has one or more ones), add an\n    appropriate number of additional digits to make the sum a multiple of 10.\n    \"\"\"\n    pass\n\n\ndef fix_teen(n):\n    \"\"\"Given a possibly-teen integer, return the fixed integer.\"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digits(1) == 1\nassert     digits(2) == 2\nassert     digits(3) == 3\nassert     digits(4) == 4\nassert     digits(8) == 8\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digits(1) == 0\nassert     digits(2) == 0\nassert     digits(3) == 3\nassert     digits(4) == 2\nassert     digits(5) == 5\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert _______________ == _______________\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digits(789) == 3\nassert     digits(28) == 4\nassert     digits(9) == 1\nassert     digits(23) == 7\nassert     digits(4) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (digits(132) == 30)\nassert     (digits(123) == 6)\nassert     (digits(1024) == 24)\nassert     (digits(100) == 0)\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_nested(\"()\") == True,         \"basic\"\nassert     is_nested(\"(())\") == True,         \"nested\"\nassert     is_nested(\"(()(()))\") == True,     \"nested\"\nassert     is_nested(\"((a(\") == False,         \"non-nested\"\nassert     is_nested(\"((a))\") == False,     \"mismatched\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_nested('(((()))))') == True,     'Wrong output'\nassert     is_nested('([())])') == False,     'Wrong output'\nassert     is_nested('(()())') == False,     'Wrong output'\nassert     is_nested('()()()') == True,     'Wrong output'\nassert     is_nested('()()()') == True,     'Wrong output'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('[()]') == True\nassert     is_nested('[()[]{}]') == True\nassert     is_nested('[{}()]') == True\nassert     is_nested('[{}()[]{}]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_nested('((((')\nassert     not is_nested('(()')\nassert     not is_nested('((()'))\nassert     not is_nested('())')\nassert     is_nested('())')\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_nested('{}') == True\nassert     is_nested('{}[]') == True\nassert     is_nested('{[]}') == True\nassert     is_nested('{}[][]') == True\nassert     is_nested('{[]}[]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('[(])') == False\nassert     is_nested('[(]') == False\nassert     is_nested('[{}]') == True\nassert     is_nested('[](){}') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_nested('[') == False\nassert     is_nested('[()[()()[]]()()]') == True\nassert     is_nested('[()[()()[]]()()]') == False\nassert     is_nested('[()]()()') == True\nassert     is_nested('[())()]()') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_nested('{}') == True\nassert     is_nested('[{}]') == True\nassert     is_nested('[()]') == True\nassert     is_nested('[()]{}') == True\nassert     is_nested('[({}]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_nested(\"[])()\") == True, \"Expected True\"\nassert     is_nested(\"[()]()\") == True, \"Expected True\"\nassert     is_nested(\"[(])\") == False, \"Expected False\"\nassert     is_nested(\"()()[())()\") == True, \"Expected True\"\nassert     is_nested(\"()()[()])\") == False, \"Expected False\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_nested(\"[]()\") == True\nassert     is_nested(\"(()())\") == True\nassert     is_nested(\"[]()]\") == False\nassert     is_nested(\"([)]\") == False\nassert     is_nested(\"[(])\") == False\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 25\nassert     sum_squares([0.5,2.2,3.3,4.4,5.5,6.6]) == 43.4\nassert     sum_squares([-1,-2,-3,-4,-5,-6]) == 156\nassert     sum_squares([1,2,3,4,5,-1,-2,-3,-4,-5,-6]) == 4944\n\ndef sum_squares_2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    return sum(map(lambda x: int(math.ceil(x)) ** 2, lst))\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == sum([n**2 for n in [1,2,3,4,5,6,7,8,9,10]])\nassert     sum_squares([1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.0]) == sum([n**2 for n in [1.1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.0]])\nassert     sum_squares([1,2,3,4,5,6,7,8,9]) == sum([n**2 for n in [1,2,3,4,5,6,7,8,9]])\nassert     sum_squares([1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.0]) == sum([n**2 for n in [1,2.2,3.3,4.4,5.5,6.6,7.7,8.8,9.9,10.0]])\nassert     sum_squares([1,2,3,4,5.5,6.6,7.7,8.8,9.9,10]) == sum([n**2 for n in [1,2,3,4,5.5,6.6,7.7,8.8,9.9,10]])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (sum_squares([1, 2, 3, 4, 5]) == 20)\nassert     (sum_squares([2, 3, 4, 5, 6, 7, 8]) == 100)\nassert     (sum_squares([2, 3, 4, 5, 6, 7, 8, 9]) == 565)\nassert     (sum_squares([5, 4, 3, 2, 1]) == 55)\nassert     (sum_squares([4, 3, 2, 1]) == 22)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum_squares([1,2,3,4,5]) == 55)\nassert     (sum_squares([2,4,6]) == 30)\nassert     (sum_squares([-1,2,3,4]) == 79)\nassert     (sum_squares([]) == 0)\nassert     (sum_squares([1.5,2.5]) == 8.25)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (sum_squares([1,2,3,4,5])         ==     335)\nassert     (sum_squares([0.5,0.25,0.125,0.0625,0.03125])     ==     1481.0)\nassert     (sum_squares([-1,-2,-3,-4,-5])             ==     -1168)\nassert     (sum_squares([0])                         ==     0)\nassert     (sum_squares([1.1,2.2,3.3,4.4,5.5])     ==     5514.4)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [sum_squares([0]), sum_squares([1]), sum_squares([-3, -4, -5]), sum_squares([10, 2, 8, 4]), sum_squares([1, 3, 4, 6, 8, 10])]    == [0, 1, -60, 120, 400, 1000]\n\ndef sum_squares2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    pass\n\nassert     [sum_squares2([0]), sum_squares2([1]), sum_squares2([-3, -4, -5]), sum_squares2([10, 2, 8, 4]), sum_squares2([1, 3, 4, 6, 8, 10])]    == [0, 1, -60, 120, 400, 1000]\n\n\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 55\nassert     sum_squares([-1,-2,-3,-4,-5]) == 55\nassert     sum_squares([0,0,0,0]) == 0\nassert     sum_squares([-1,2,3,4,5]) == 55\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 30, \"sum_squares([1,2,3,4,5])=%d, expected 30\" % sum_squares([1,2,3,4,5])\nassert     sum_squares([1,2,3,4,-5]) == 60, \"sum_squares([1,2,3,4,-5])=%d, expected 60\" % sum_squares([1,2,3,4,-5])\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 385, \"sum_squares([1,2,3,4,5,6,7,8,9,10])=%d, expected 385\" % sum_squares([1,2,3,4,5,6,7,8,9,10])\nassert     sum_squares([-1,2,3,4,5]) == 30, \"sum_squares([-1,2,3,4,5])=%d, expected 30\" % sum_squares([-1,2,3,4,5])\nassert     sum_squares([-1,2,3,4,-5]) == 60, \"sum_squares([-1,2,3,4,-5])=%d, expected 60\" % sum_squares([-1,2,3,4,-5])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1, 2, 3]) == 14\nassert     sum_squares([-1, -2, -3]) == 14\nassert     sum_squares([1.1, 2.2, 3.3]) == 14\n\ndef solve_pe_12(lst):\n    \"\"\"You are given a list of pe.\n    The list contains pe integers.\n    Each pe is either positive or negative.\n    You are supposed to sort the list, then print the result of multiplying the first and second elements of the list.\"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([1, 2, 3]) == 13\nassert     sum_squares([-1, -2, -3]) == 13\nassert     sum_squares([1.1, 2.2, 3.3]) == 13\n\ndef foo(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return a list of two numbers (2nd and 3rd) that sum to the given list's sum.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('this is a test') == True\nassert     check_if_last_char_is_a_letter('this is a test 1') == False\nassert     check_if_last_char_is_a_letter('this is a test!') == True\nassert     check_if_last_char_is_a_letter('this is a test no, this is a test') == False\nassert     check_if_last_char_is_a_letter('this is a test or, test') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('Jazzy') == True,'should be True'\nassert     check_if_last_char_is_a_letter('Jazzy Bones') == False,'should be False'\nassert     check_if_last_char_is_a_letter('Jazzy Bones ') == False,'should be False'\nassert     check_if_last_char_is_a_letter('Jazzy Bones') == False,'should be False'\nassert     check_if_last_char_is_a_letter('Jazzy Bones 12345') == False,'should be False'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         check_if_last_char_is_a_letter('hello') == True\nassert         check_if_last_char_is_a_letter('hello world') == True\nassert         check_if_last_char_is_a_letter('hello world!') == False\nassert         check_if_last_char_is_a_letter('hello world, world') == False\nassert         check_if_last_char_is_a_letter('hello world, world!') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('Hello World') == False\nassert     check_if_last_char_is_a_letter('Hello') == True\nassert     check_if_last_char_is_a_letter('Hello World!') == True\nassert     check_if_last_char_is_a_letter('Hello') == True\nassert     check_if_last_char_is_a_letter('Hello!') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('  a  ')\nassert     check_if_last_char_is_a_letter('abc')\nassert     check_if_last_char_is_a_letter('abc!')\nassert     not check_if_last_char_is_a_letter('1!')\nassert     not check_if_last_char_is_a_letter('a')\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter(\"This is a pen\") == True\nassert     check_if_last_char_is_a_letter(\"This is not a word\") == False\nassert     check_if_last_char_is_a_letter(\"This is a pen\") == True\nassert     check_if_last_char_is_a_letter(\"This is a pen. Here is another word.\") == False\nassert     check_if_last_char_is_a_letter(\"This is a pen. Here is another word. Here is another word.\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('E') == True\nassert     check_if_last_char_is_a_letter('E') == True\nassert     check_if_last_char_is_a_letter('Ed') == False\nassert     check_if_last_char_is_a_letter('M') == False\nassert     check_if_last_char_is_a_letter('E e') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter('a')\nassert     check_if_last_char_is_a_letter('b')\nassert     check_if_last_char_is_a_letter('a b')\nassert     check_if_last_char_is_a_letter('b a')\nassert     check_if_last_char_is_a_letter('b')\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('This is a test string.') == True\nassert     check_if_last_char_is_a_letter('This is a test') == False\nassert     check_if_last_char_is_a_letter('This is not a test') == False\nassert     check_if_last_char_is_a_letter('This is not a test string') == False\nassert     check_if_last_char_is_a_letter('This is not a test string2') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter('hello') == True\nassert check_if_last_char_is_a_letter('hello world') == False\nassert check_if_last_char_is_a_letter('Hello') == True\nassert check_if_last_char_is_a_letter('Hello world') == False\nassert check_if_last_char_is_a_letter('Hello, world!') == True\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     can_arrange([1,2,3,6]) == -1\nassert     can_arrange([2,3,4,5]) == 1\nassert     can_arrange([3,4,5,6]) == 2\nassert     can_arrange([1,2,2,3,3]) == 1\nassert     can_arrange([2,2,3,3]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     can_arrange([4, 2, 1, 3, 4, 5]) == 1\nassert     can_arrange([4, 2, 1, 3, 4, 2]) == -1\nassert     can_arrange([]) == -1\nassert     can_arrange([3, 4, 1, 2, 3]) == 0\nassert     can_arrange([3, 3, 3, 3]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     can_arrange([0, 3, 8, 6, 4, 1, 2, 9, 5, 7]) == 7\nassert     can_arrange([0, 3, 8, 6, 4, 1, 2, 9, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1\nassert     can_arrange([1, 3, 8, 6, 4, 1, 2, 9, 5, 7]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([5]) == -1\nassert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([5, 1, 2, 3]) == 3\nassert     can_arrange([1, 2, 3, 4]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     can_arrange([1,2,3]) == 0\nassert     can_arrange([1,2,3,4]) == -1\nassert     can_arrange([1,3,2,4]) == 1\nassert     can_arrange([1,3,2,4,5]) == 3\nassert     can_arrange([3,1,2,4]) == 2\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     can_arrange([1, 2, 3, 4]) == 3\nassert     can_arrange([2, 1, 3, 4]) == 3\nassert     can_arrange([3, 4, 1, 2]) == 3\nassert     can_arrange([1, 3, 4, 2]) == -1\nassert     can_arrange([1, 2, 3]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     can_arrange([1,2,5]) == 2\nassert can_arrange([2,4,5,5,8]) == -1\nassert can_arrange([3,4,7,8]) == 3\nassert can_arrange([2,3,4,5,8]) == -1\nassert can_arrange([1,5,5,5,5,8]) == 0\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert can_arrange([1, 3, 4, 5]) == 2\nassert can_arrange([1, 2, 3, 4]) == -1\nassert can_arrange([1, 2, 4, 5]) == 3\nassert can_arrange([1, 2, 4, 5, 6]) == 3\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([1]) == -1\nassert     can_arrange([1,2,3,4]) == -1\nassert     can_arrange([1,2,3,3]) == -1\nassert     can_arrange([1,3,2,2]) == 2\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (largest_smallest_integers([2,1,-4,-1,3,5,6,7,0, -1, -2]) == (-1, 2))\nassert     (largest_smallest_integers([2,1,3,5,6,7,8,9,10]) == (8, 9))\nassert     (largest_smallest_integers([-2, 1, -4, -1, 3, 5, 6, 7, 8, 9, 10]) == (-1, -2))\nassert     (largest_smallest_integers([]) == (None, None))\nassert     (largest_smallest_integers([1]) == (None, None))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([-1, 5, 6, -7, 8]) == (-7, 5)\nassert     largest_smallest_integers([1, -2, 3, 4, -5, 6]) == (1, -2)\nassert     largest_smallest_integers([1, 2, 3]) == (None, None)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([4, 5, 7, -9, -8, 1, 2, 3]) == (-8, 7)\nassert     largest_smallest_integers([-5, -5, -4]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (1, 1)\nassert     largest_smallest_integers([-1, 0, 5, -2, -3]) == (-3, 5)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([1, 3, 6, -9, -7, 2, 5, -8, -9]) == (-9, 2)\nassert     largest_smallest_integers([1, 3, 6, -9, -7, 2, 5, -8]) == (None, None)\nassert     largest_smallest_integers([1, 3, 6, -9, -7, 2, 5, -8, 9]) == (9, -8)\nassert     largest_smallest_integers([1, 3, 6, -9, -7, 2, 5]) == (None, None)\nassert     largest_smallest_integers([1, 3, 6, -9, -7]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([1, -2, -3, 5, -6, 8, 4, -3, -2, 3, 2, 1]) == (-3, 3)\nassert     largest_smallest_integers([1, -2, -3, -5, -6, 8, 4, -3, -2, 3, 2, 1]) == (None, None)\nassert     largest_smallest_integers([-2, -3, -5, -6, 8, 4, -3, -2, 3, 2, 1]) == (-3, 3)\nassert     largest_smallest_integers([1, 3, -5, 6, -8, -4, 3, -2, -1, 0]) == (None, None)\nassert     largest_smallest_integers([1, 3, -5, 6, -8, -4, 3, -2, -1, 0]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3]) == (3, 1)\nassert     largest_smallest_integers([-1, -2, -3]) == (-1, 1)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (4, 1)\nassert     largest_smallest_integers([-1, 0, 1]) == (0, -1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([4, 3, -2, 2, -1, 4, -2])     == (4, -2)\nassert     largest_smallest_integers([2, 2, -2, 4, -2])     == (None, -2)\nassert     largest_smallest_integers([])         == (None, None)\nassert     largest_smallest_integers([-4, -2, -1, 1, 2, 3])     == (1, -1)\nassert     largest_smallest_integers([1, 2, 3, 4])         == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5, -7, -8, -9, -10, -11]) == (5, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, -7, 8, -9, -10, -11]) == (5, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, -7, -8, -9, -10, -11]) == (6, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, -7, 8, -9, -10, -11]) == (6, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, -7, 8, -9, -10, -11]) == (6, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([-4, 6, -7, 3, -8, -3]) == (-3, 8)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([9, -3, -2, -1, -5, -7]) == (-3, 9)\nassert     largest_smallest_integers([9, -3, -2, -1, -5, -7, 8]) == (-3, -1)\nassert     largest_smallest_integers([9, -3, -2, -1, -5, -7, 8, -3]) == (-3, -1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (None, -1)\nassert     largest_smallest_integers([0, 1, 2, 3, 4, 5, 6]) == (-1, 0)\nassert     largest_smallest_integers([-3, -2, -1, 0, 1, 2, 3]) == (-3, 0)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-1, -5)\nassert     largest_smallest_integers([]) == (None, None)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (compare_one(1, 1) is None)\nassert     (compare_one(1.1, 1) is None)\nassert     (compare_one(1, 1.1) is None)\nassert     (compare_one(1, 1) is None)\nassert     (compare_one('1', 1.1) is None)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare_one(3, 3.0) == 3\nassert     compare_one(3.0, 3) == 3\nassert     compare_one(3, \"3\") == 3\nassert     compare_one(3.0, \"3\") == 3\nassert     compare_one(\"3\", 3.0) == 3\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     compare_one(0, 0) == None\nassert     compare_one(0,.1) == 0\nassert     compare_one(0, 1.1) == 1\nassert     compare_one(0, 1.0) == 0\nassert     compare_one(0, '0') == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare_one(1, '1.0') == 1\nassert     compare_one(1, '1.0') == 1\nassert     compare_one(1, '1') == 1\nassert     compare_one(1, 1) == 1\nassert     compare_one(1, 0) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare_one(5, 6) == 5, \"5 is the correct output of compare_one\"\nassert     compare_one(5, 5) == 5, \"5 is the correct output of compare_one\"\nassert     compare_one(\"1.5\", 2.1) == 2.1, \"2.1 is the correct output of compare_one\"\nassert     compare_one(\"1.5\", 1.5) == 1.5, \"1.5 is the correct output of compare_one\"\nassert     compare_one(\"1\", \"2\") == 2, \"2 is the correct output of compare_one\"\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare_one(4, 5) == 4\nassert     compare_one(\"1\", 2) == \"1\"\nassert     compare_one(\"1.2\", 2.3) == \"1.2\"\nassert     compare_one(\"1.2\", \"2.3\") == \"1.2\"\nassert     compare_one(5, 6) == None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     compare_one(3, 3) == None\nassert     compare_one(3, 3.0) == None\nassert     compare_one('3', 3.0) == None\nassert     compare_one(3.0, '3') == None\nassert     compare_one('3', '3.0') == None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare_one(-1, 0) is None\nassert     compare_one(0, 0) == 0\nassert     compare_one(0.5, 0.5) == 0.5\nassert     compare_one('1', '1') == '1'\nassert     compare_one('1', '2') == '2'\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     compare_one(0,0.0)    == None\nassert     compare_one(0,0)        == None\nassert     compare_one(0.0,0)    == None\nassert     compare_one(0,0.1)    == 0\nassert     compare_one(0.1,0.1)    == 0.1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare_one(0, 5) == 5\nassert     compare_one(0, 1) == 1\nassert     compare_one(5, 1) == 1\nassert     compare_one('2', 2) == 2\nassert     compare_one('2', '2') == 2\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(42) == True\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(17) == True\nassert     is_equal_to_sum_even(25) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(1) == False\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(6) == False\nassert     is_equal_to_sum_even(7) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == True\nassert     is_equal_to_sum_even(6) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(6) == True\nassert     is_equal_to_sum_even(7) == False\nassert     is_equal_to_sum_even(8) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(0) == True, \"is_equal_to_sum_even(0) is \" + str(is_equal_to_sum_even(0))\nassert     is_equal_to_sum_even(2) == True, \"is_equal_to_sum_even(2) is \" + str(is_equal_to_sum_even(2))\nassert     is_equal_to_sum_even(12) == False, \"is_equal_to_sum_even(12) is \" + str(is_equal_to_sum_even(12))\nassert     is_equal_to_sum_even(18) == False, \"is_equal_to_sum_even(18) is \" + str(is_equal_to_sum_even(18))\nassert     is_equal_to_sum_even(20) == True, \"is_equal_to_sum_even(20) is \" + str(is_equal_to_sum_even(20))\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(1)         == True, \"is_equal_to_sum_even(1)\"\nassert     is_equal_to_sum_even(2)         == False, \"is_equal_to_sum_even(2)\"\nassert     is_equal_to_sum_even(4)         == True, \"is_equal_to_sum_even(4)\"\nassert     is_equal_to_sum_even(6)         == False, \"is_equal_to_sum_even(6)\"\nassert     is_equal_to_sum_even(10)         == True, \"is_equal_to_sum_even(10)\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(10)    == False\nassert     is_equal_to_sum_even(16)    == False\nassert     is_equal_to_sum_even(1)    == True\nassert     is_equal_to_sum_even(25)    == True\nassert     is_equal_to_sum_even(36)    == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(20) == True\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(7) == False\n\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(500) == True, \"incorrect result\"\nassert     is_equal_to_sum_even(500) == False, \"incorrect result\"\nassert     is_equal_to_sum_even(100) == False, \"incorrect result\"\nassert     is_equal_to_sum_even(200) == False, \"incorrect result\"\nassert     is_equal_to_sum_even(300) == True, \"incorrect result\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(17)\nassert     is_equal_to_sum_even(6)\nassert     is_equal_to_sum_even(16)\nassert     is_equal_to_sum_even(18)\nassert     is_equal_to_sum_even(23)\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(6) == 720\nassert     special_factorial(7) == 5040\n\ndef special_factorial2(n):\n    \"\"\"The special_factorial2 function returns the factorial of a natural\n    number n. The function should receive an integer as input and return the\n    factorial of this integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     special_factorial(3) == 3 * 2 * 1\nassert     special_factorial(5) == 5 * 4 * 3 * 2 * 1\nassert     special_factorial(7) == 7 * 6 * 5 * 4 * 3 * 2 * 1\nassert     special_factorial(10) == 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     special_factorial(0)         == 1\nassert     special_factorial(1)         == 1\nassert     special_factorial(2)         == 2\nassert     special_factorial(3)         == 6\nassert     special_factorial(4)         == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n    special_factorial(1) == 1\n    special_factorial(2) == 2\n    special_factorial(3) == 6\n    special_factorial(4) == 24\n    special_factorial(5) == 120\n    special_factorial(6) == 720\n    special_factorial(7) == 5040\n    special_factorial(8) == 40320\n    special_factorial(9) == 362880\n    special_factorial(10) == 3628800\n    special_factorial(11) == 39916800\n    special_factorial(12) == 479001600\n    special_factorial(13) == 6227020800\n    special_factorial(14) == 87178291200\n    special_factorial(15) == 1307674368000\n    special_factorial(16) == 20922789888000\n    special_factorial(17) == 355687428096000\n    special_factorial(18) == 6402373705728000\n    special_factorial(19) == 121645100408832000\n    special_factorial(20) == 2432902008176640000"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nspecial_factorial(2) == 2\nspecial_factorial(3) == 6\nspecial_factorial(5) == 120\nspecial_factorial(0) == 1\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fix_spaces('my test') =='my_test'\nassert     fix_spaces('my test test') =='my_test_test'\nassert     fix_spaces(' my test test ') =='my_test_test'\nassert     fix_spaces('my test test') =='my_test_test'\nassert     fix_spaces('  my test test  ') =='my_test_test'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fix_spaces('   word  ') == 'word_', 'does not work with string without spaces'\nassert     fix_spaces('   word  ') == 'word_', 'does not work with string with only spaces'\nassert     fix_spaces('   word  ') == 'word_', 'does not work with string with only spaces'\nassert     fix_spaces('   word   ') == 'word_', 'does not work with string with 2 spaces'\nassert     fix_spaces('   word   ') == 'word_', 'does not work with string with 2 spaces'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fix_spaces(\"A   B\") == \"A-B\"\nassert fix_spaces(\"A  B\") == \"A-B\"\nassert fix_spaces(\"A B\") == \"A B\"\nassert fix_spaces(\"A B   C\") == \"A B-C\"\nassert fix_spaces(\"A B   C    \") == \"A B-C\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fix_spaces('hello world') == 'hello_world', 'wrong output'\nassert     fix_spaces('hello   world') == 'hello_world', 'wrong output'\nassert     fix_spaces('   hello   world') == 'hello_world', 'wrong output'\nassert     fix_spaces('hello world') == 'hello_world', 'wrong output'\nassert     fix_spaces('hello  world') == 'hello_world', 'wrong output'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fix_spaces('   1   2    3     ')         == '1_2_3'\nassert     fix_spaces('   1    2   3    ')         == '1_2_3'\nassert     fix_spaces('  1 2 3  ')             == '1_2_3'\nassert     fix_spaces('1 2 3')                 == '1_2_3'\nassert     fix_spaces('1 2 3 4')             == '1_2_3_4'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fix_spaces(\"One day, a bunch of people went to the store and bought some apples from it\") == \"One_day-a_bunch-of_people_went_to_the_store_and_bought_some_apples_from_it\"\nassert     fix_spaces(\"1 day 1\") == \"1_day_1\"\nassert     fix_spaces(\" 1day 1\") == \"1_day_1\"\nassert     fix_spaces(\" 1 day\") == \"1_day\"\nassert     fix_spaces(\"1 day \") == \"1_day\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fix_spaces(\"Hello World\") == \"Hello_World\"\nassert     fix_spaces(\"Hello World\") == \"Hello_World\"\nassert     fix_spaces(\"Hi there!\") == \"Hi_there_!\"\nassert     fix_spaces(\"  Hi there!  \") == \"Hi_there_!\"\nassert     fix_spaces(\"\") == \"\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fix_spaces(\"a b   c\") == \"a_b_c\"\nassert     fix_spaces(\"a b c\") == \"a_b_c\"\nassert     fix_spaces(\"a b   c\") == \"a_b_c\"\nassert     fix_spaces(\"a b c\") == \"a_b_c\"\nassert     fix_spaces(\"a b   c \") == \"a_b_c\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fix_spaces('this is a test') == 'this_is_a_test'\nassert     fix_spaces('hello world') == 'hello_world'\nassert     fix_spaces('you are a good boy') == 'you_are_a_good_boy'\nassert     fix_spaces('i am  a  good boy') == 'i_am_a_good_boy'\nassert     fix_spaces('i am a good boy') == 'i_am_a_good_boy'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     'a_b  c d' == fix_spaces('a b  c d')\nassert     'a_b_c_d' == fix_spaces('a b c d')\nassert     'a_b c_d' == fix_spaces('a b c d')\nassert     'a_b c d' == fix_spaces('a b c d')\nassert     'a_b c d' == fix_spaces('a b c d')\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     file_name_check('123abc.txt') == 'Yes'\nassert     file_name_check('12.abc.txt') == 'Yes'\nassert     file_name_check('abcd.abc.exe') == 'No'\nassert     file_name_check('123.txt') == 'No'\nassert     file_name_check('abc') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     file_name_check(\"a.txt\")     == 'Yes'\nassert     file_name_check(\"A.txt\")     == 'No'\nassert     file_name_check(\"a.exe\")     == 'No'\nassert     file_name_check(\"a1.txt\")     == 'No'\nassert     file_name_check(\"a.dll\")     == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     file_name_check('hello.txt') == 'Yes'\nassert     file_name_check('hello') == 'No'\nassert     file_name_check('hello_1.txt') == 'Yes'\nassert     file_name_check('hello_11.txt') == 'Yes'\nassert     file_name_check('hello_txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     file_name_check('test.txt')     == 'Yes'\nassert     file_name_check('test')         == 'No'\nassert     file_name_check('test.exe')     == 'Yes'\nassert     file_name_check('test.txt.exe')     == 'No'\nassert     file_name_check('test.exe.txt')     == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     file_name_check('Foobar-3.9.txt') == 'Yes'\nassert     file_name_check('Foobar-3.9exe.txt') == 'Yes'\nassert     file_name_check('Foobar-3.9dll.txt') == 'No'\nassert     file_name_check('Foobar-3.9.txt') == 'Yes'\nassert     file_name_check('Foobar-3.9exe') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     file_name_check('this is a file_name.txt') == 'Yes'\nassert     file_name_check('this is a file_name.txt.') == 'Yes'\nassert     file_name_check('this is a file_name.txt.txt') == 'No'\nassert     file_name_check('this is a file_name.exe') == 'No'\nassert     file_name_check('this is a file_name.dll') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     file_name_check('abc') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.txt.exe') == 'Yes'\nassert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('abc.txt.dll') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     file_name_check('f1.txt') == 'Yes'\nassert     file_name_check('f.txt') == 'Yes'\nassert     file_name_check('f00.txt') == 'No'\nassert     file_name_check('f0.txt') == 'No'\nassert     file_name_check('f0.txt.txt') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     file_name_check('abc123.txt') == 'No'\nassert     file_name_check('abc123txt') == 'Yes'\nassert     file_name_check('abc123Exe.dll') == 'Yes'\nassert     file_name_check('abc123Exe.xls') == 'No'\nassert     file_name_check('abc123.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     file_name_check('foo.bar') == 'No', 'Expected: No'\nassert     file_name_check('foo2.txt') == 'No', 'Expected: No'\nassert     file_name_check('foo2.exe') == 'No', 'Expected: No'\nassert     file_name_check('foo2.dll') == 'No', 'Expected: No'\nassert     file_name_check('foo2.TXT') == 'No', 'Expected: No'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 32\nassert     sum_squares([1,3,5,7,9]) == 50\nassert     sum_squares([0,1,2,3,4,5,6,7,8,9]) == 45\n\n\n\ndef the_best_poker(lst):\n    \"\"\"\n    This function takes a list of cards as input. For each card in the list, the function shall count the number of times a \n    card of the same rank is found on the list. The function shall return the card that has the most counts. If two or more cards \n    have the same rank, the function shall return the card with the highest value in the list. For example, if a list contains \n    two card of the same rank, the function shall return the card with the higher value (e.g. if the value of the two cards is \n    equal, the function shall return the card with the higher value).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 12300\nassert     sum_squares([5,7,9,11,13,15,17,19,21,23]) == 83800\nassert     sum_squares([2,3,4,5,6,7,8,9]) == 285\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 5520\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11]) == 5520\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 30\nassert     sum_squares([1,4,9]) == 25\nassert     sum_squares([-3,0,1]) == 0\nassert     sum_squares([-1,2,3]) == 7\n\n\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8]) == 5040\nassert     sum_squares([1,2,3,4,5]) == 225\nassert     sum_squares([1,2,3,4]) == 10\nassert     sum_squares([]) == 0\nassert     sum_squares([-1,-2,-3,-4,-5,-6,-7,-8]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 25\nassert     sum_squares([4,5,6,7,8]) == 4500\nassert     sum_squares([2,3,4,5,6,7,8]) == 25000\nassert     sum_squares([4,5,6,7,8,9]) == 4500000\nassert     sum_squares([4,5,6,7,8,9,10,11,12,13]) == 4500000\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4, 5]) == 55\nassert     sum_squares([3, 4, 6]) == 43\nassert     sum_squares([-2, -4, -3, -8]) == -5\nassert     sum_squares([-2, 0, -3, -8]) == -5\nassert     sum_squares([0, -4, -3, -8]) == -5\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares(list(range(10)))             == 45\nassert     sum_squares(list(range(10, 0, -1)))     == 25\nassert     sum_squares(list(range(10, -1, -1)))    == 45\nassert     sum_squares(list(range(1, 11)))        == 55\nassert     sum_squares(list(range(1, 21)))        == 145\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 14\nassert     sum_squares([1, 2, 3, 4, 5, 6]) == 29\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 59\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 110\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 181\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1449\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7]) == 1649\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1649\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2049\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 221449\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 1 + 4 + 25\nassert     sum_squares([1,2,3,4,6]) == 1 + 4 + 6 + 16\nassert     sum_squares([1,2,3,4,5,6]) == 1 + 4 + 25 + 36\nassert     sum_squares([1,2,3,4,5,6,7]) == 1 + 4 + 25 + 36 + 49\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 1 + 4 + 25 + 36 + 49 + 64\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\", \"failed test\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\", \"failed test\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\", \"failed test\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\", \"failed test\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\", \"failed test\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_in_sentence(\"Hello\") == \"helo\"\nassert     words_in_sentence(\"How are you?\") == \"how are you\"\nassert     words_in_sentence(\"test\") == \"test\"\nassert     words_in_sentence(\"HelloHello\") == \"HelloHello\"\nassert     words_in_sentence(\"WorldWorldWorldWorld\") == \"WorldWorldWorld\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox'\nassert     words_in_sentence('she sells sea shells on the sea shore') =='she sell sea shell'\nassert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox'\nassert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox'\nassert     words_in_sentence('the quick brown fox jumped over the lazy dog') == 'the quick brown fox'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_in_sentence('hello world') == 'helowrd', 'helowrd'\nassert     words_in_sentence('hello') == 'helo', 'helo'\nassert     words_in_sentence('hello world') == 'helowrd', 'helowrd'\nassert     words_in_sentence('hello   world') == 'helo world', 'helo world'\nassert     words_in_sentence('Hello World') == 'Hello World', 'Hello World'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"I am a student.\") == \"am a student\"\nassert     words_in_sentence(\"I am not a student.\") == \"not a student\"\nassert     words_in_sentence(\"I am a student.\") == \"student\"\nassert     words_in_sentence(\"I am not a student.\") == \"student\""
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"this is a sentence\") == \"isthissentence\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"my name is bhargav\") == \"mynameisbhargav\"\nassert     words_in_sentence(\"i am a student\") == \"amestudent\"\nassert     words_in_sentence(\"i am a student\") == \"amestudent\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"Test Test\") == \"Test Test\"\nassert     words_in_sentence(\"Hello World\") == \"Hello World\"\nassert     words_in_sentence(\"Hello\") == \"Hello\"\nassert     words_in_sentence(\"Hello World! Test Test\") == \"Hello World! Test Test\"\nassert     words_in_sentence(\"Hello\") == \"Hello\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_in_sentence('The best way to prepare for an exam is to take a handful of tablets containing the words \"They will be given a number of minutes to complete the assignment\"') == 'They will be given a number of minutes to complete the assignment'\nassert     words_in_sentence('Hello world!') == 'Hello world!'\nassert     words_in_sentence('The quick brown fox jumps over the lazy dog') == 'The quick brown fox jumps over the lazy dog'\nassert     words_in_sentence('An apple a day keeps the doctor away') == 'An apple a day keeps the doctor away'\nassert     words_in_sentence('Once upon a time, there was a brave princess who...') == 'Once upon a time, there was a brave princess who'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"In a village of La Mancha, the name of which I have no desire to call to men is\") == \"a\"\nassert     words_in_sentence(\"My name is Michele\") == \"name\"\nassert     words_in_sentence(\"Hello world!\") == \"world\"\nassert     words_in_sentence(\"Giraffe Academy\") == \"Giraffe\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_in_sentence('The quick brown fox jumps over the lazy dog') == 'The quick brown fox jumps over the lazy dog', 'error in function words_in_sentence'\nassert     words_in_sentence('The Quick Brown Fox Jumps Over The Lazy Dog') == 'The quick brown fox jumps over the lazy dog', 'error in function words_in_sentence'\nassert     words_in_sentence('Hi I am Sam') == 'Hi', 'error in function words_in_sentence'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     simplify(\"1/3\", \"1/2\") == True\nassert     simplify(\"3/4\", \"1/2\") == False\nassert     simplify(\"1/4\", \"1/2\") == True\nassert     simplify(\"1/5\", \"1/2\") == False\nassert     simplify(\"1/7\", \"1/2\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     simplify(\"3/5\", \"5\")\nassert     simplify(\"3/5\", \"1\")\nassert     simplify(\"3/5\", \"3/5\")\nassert     not simplify(\"3/5\", \"2/3\")\nassert     not simplify(\"3/5\", \"3/2\")\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     simplify(\"4/5\", \"16/5\") == True\nassert     simplify(\"3/4\", \"8/5\") == False\nassert     simplify(\"1/8\", \"3/8\") == False\nassert     simplify(\"2/5\", \"1/10\") == True\nassert     simplify(\"6/14\", \"14/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     simplify('2', '3')\nassert     simplify('2', '4')\nassert     simplify('6', '1')\nassert     simplify('3', '1')\nassert     simplify('4', '2')\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     simplify(\"1/1\", \"2/1\") == True\nassert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"2/1\", \"1/2\") == False\nassert     simplify(\"0/2\", \"2/2\") == True\nassert     simplify(\"0/2\", \"4/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     simplify('2', '3') == True\nassert     simplify('2', '2') == False\nassert     simplify('1', '2') == True\nassert     simplify('2/3', '2/3') == False\nassert     simplify('5/2', '7/3') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     simplify(\"2/4\", \"2\") == True\nassert     simplify(\"1/4\", \"2\") == False\nassert     simplify(\"1/4\", \"4\") == True\nassert     simplify(\"1/4\", \"3\") == False\nassert     simplify(\"1/4\", \"1\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     simplify(\"3/4\", \"3\") == True\nassert     simplify(\"1/6\", \"2\") == False\nassert     simplify(\"10/20\", \"5\") == True\nassert     simplify(\"5/4\", \"2\") == False\nassert     simplify(\"4/6\", \"2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     simplify('1/2', '2') == True\nassert     simplify('1/2', '1') == False\nassert     simplify('1/2', '3') == False\nassert     simplify('1/2', '1/2') == True\nassert     simplify('1/2', '1/3') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     simplify(\"2/3\", \"1/2\")\nassert     simplify(\"1/2\", \"2/3\")\nassert     not simplify(\"0/3\", \"2/3\")\nassert     not simplify(\"2/3\", \"0/3\")\nassert     not simplify(\"2/3\", \"1/3\")\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     order_by_points([7, 8, 1, 4, 5, 9, 2, 6, 3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"error in order_by_points\"\nassert     order_by_points([9, 1, 3, 2, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"error in order_by_points\"\nassert     order_by_points([3, 2, 1, 5, 7, 6, 4]) == [1, 2, 3, 4, 5, 6, 7], \"error in order_by_points\"\nassert     order_by_points([7, 6, 4, 2, 3, 8, 1]) == [1, 2, 3, 4, 5, 6, 7], \"error in order_by_points\"\n\ndef sort_list(nums):\n    \"\"\"\n    Write a function which takes a list of integers and returns the same list,\n    but sorted in ascending order according to the sum of the digits of the\n    integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (order_by_points([]) == [])\nassert     (order_by_points([5]) == [5])\nassert     (order_by_points([5, 6, 7, 8]) == [5, 6, 8, 7])\nassert     (order_by_points([1, 5, 5, 5]) == [5, 5, 5, 1])\nassert     (order_by_points([5, 8, 4, 9, 2, 7, 8, 5, 6, 8]) == [2, 5, 5, 6, 7, 8, 8, 8, 9, 4, 5])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     order_by_points([54, 546, 548, 60])    == [54, 546, 548, 60], order_by_points([54, 546, 548, 60])\nassert     order_by_points([3, 5, 9, 5, 2, 5, 8])    == [3, 5, 9, 5, 2, 5, 8], order_by_points([3, 5, 9, 5, 2, 5, 8])\nassert     order_by_points([8, 3, 2, 4, 9, 8, 3, 2, 1])    == [8, 3, 2, 4, 9, 8, 3, 2, 1], order_by_points([8, 3, 2, 4, 9, 8, 3, 2, 1])\nassert     order_by_points([8, 3, 2, 4, 9, 8, 3, 2, 0])    == [8, 3, 2, 4, 9, 8, 3, 2, 0], order_by_points([8, 3, 2, 4, 9, 8, 3, 2, 0])\n\n\ndef order_by_dots(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [0, 2, 4, 6, 1, 3, 5] == order_by_points([0, 6, 1, 3, 5, 4, 2])\nassert     [0, 1, 2, 3, 4, 5, 6] == order_by_points([6, 5, 4, 3, 2, 1, 0])\nassert     [0, 1, 2, 3, 4, 5, 6] == order_by_points([0, 1, 2, 3, 4, 5, 6])\nassert     [0, 1, 2, 3, 4, 5, 6] == order_by_points([6, 5, 4, 3, 2, 1, 0])\nassert     [0, 1, 2, 3, 4, 5, 6] == order_by_points([6, 5, 4, 3, 2, 1, 0])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ids_with_sum_of_digits(order_by_points(ids_with_sum_of_digits(['12', '4', '9', '12', '4', '6', '8', '8', '9', '2', '4']))) == [0, 1, 2, 4, 5, 6, 8, 9, 10, 11, 12]"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1, 6, 7, 2, 9] == order_by_points([7, 2, 6, 1, 9])\nassert     [5, 2, 1, 9, 7] == order_by_points([7, 2, 6, 1, 5])\nassert     [9, 7, 5, 3, 2] == order_by_points([2, 7, 5, 3, 9])\nassert     [1, 5, 2, 6, 9] == order_by_points([9, 2, 6, 1, 5])\nassert     [3, 8, 1, 2, 9, 5, 6, 7] == order_by_points([7, 5, 2, 6, 1, 8, 3, 9])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     order_by_points([2,3,5,4,6,7,1,2]) == [1, 2, 2, 3, 4, 5, 6, 7]\nassert     order_by_points([12,3,5,7,22,3]) == [3, 5, 7, 22, 12]\nassert     order_by_points([5,7,4,3,2,1,12]) == [1, 2, 3, 4, 5, 7, 12]\nassert     order_by_points([7,6,5,4,3,2,1]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     order_by_points([3, 17, 18, 2, 5, 24, 8, 16, 2, 14]) == [3, 2, 2, 5, 8, 14, 16, 18, 24, 2]\nassert     order_by_points([5, 4, 3, 1, 2]) == [1, 2, 3, 4, 5]\nassert     order_by_points([5, 8, 3, 4, 2]) == [2, 3, 4, 5, 8]\nassert     order_by_points([1, 17, 2, 18, 3, 14, 5, 19, 6, 21]) == [1, 2, 3, 5, 6, 19, 14, 21, 18, 17]\nassert     order_by_points([3, 14, 2, 17, 19, 18, 21, 19]) == [3, 2, 14, 17, 19, 19, 18, 21, 18, 17]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     order_by_points([9,4,7,3,2,1,6,5,8,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     order_by_points([1,0,5,6,7,2,8,3,9,4]) == [0,1,2,3,4,5,6,7,8,9]\nassert     order_by_points([1,5,9,2,4,8,7,3,6,0]) == [0,1,2,3,4,5,6,7,8,9]\n\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     order_by_points([1, 2, 3]) == [1, 2, 3], order_by_points([1, 2, 3])\nassert     order_by_points([2, 2, 3, 3, 4, 5, 5, 6, 7]) == [2, 2, 3, 3, 4, 5, 5, 6, 7], order_by_points([2, 2, 3, 3, 4, 5, 5, 6, 7])\nassert     order_by_points([2, 2, 2]) == [2, 2, 2], order_by_points([2, 2, 2])\nassert     order_by_points([1, 9, 2, 3, 1, 4, 5, 2, 3, 9, 7, 6, 8, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9], order_by_points([1, 9, 2, 3, 1, 4, 5, 2, 3, 9, 7, 6, 8, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1])"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) ==     10\nassert     specialFilter([1,2,3,4,5,6,7,8,9]) ==     4\nassert     specialFilter([1,2,3,4,5,6]) ==     6\nassert     specialFilter([1,2,3,4,5]) ==     0\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10]) ==     10\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         specialFilter([2, 10, 3, 1, 5, 6, 4, 7]) == 2\nassert         specialFilter([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\nassert         specialFilter([1, 1, 1, 1, 1, 1, 1, 1]) == 0\nassert         specialFilter([5, 9, 2, 4, 8, 7, 6, 1, 3, 0]) == 0\nassert         specialFilter([7, 9, 2, 3, 8, 7, 6, 1, 3, 0]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef splitByChar(s, ch):\n    \"\"\"Write a function that takes a string and a character as input and \n    returns a list that consists of the words in the string that begin with \n    the specified character. For example, splitByChar(\"Hello World\", \"W\") \n    should return [\"Hello\", \"World\"].\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\nassert specialFilter([1, 3, 5, 7, 9]) == 2\nassert specialFilter([7, 22, 33]) == 0\nassert specialFilter([1, 3, 5, 7, 9, 22, 33]) == 3\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     specialFilter([1, 2, 3, 10, 11, 15, 22]) == 2\nassert     specialFilter([2, 3, 4, 5, 6]) == 0\nassert     specialFilter([4, 6, 8, 10]) == 2\nassert     specialFilter([-5, -4, -3]) == 3\nassert     specialFilter([5, 6, 7, 8, 9, 10]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     specialFilter([2, 4, 6, 8, 10, 12, 14, 16]) == 6\nassert     specialFilter([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 8\nassert     specialFilter([2, 4, 6, 8, 10, 12, 14, 16, 18, 19]) == 0\nassert     specialFilter([2, 4, 6, 8, 10, 12, 14, 16, 18, 19, 21]) == 2\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     specialFilter([0,1,3,5,7,9,11]) == 3\nassert     specialFilter([1,2,3,4]) == 0\nassert     specialFilter([-1,2,3,4]) == 0\nassert     specialFilter([2,2,2,2,2]) == 5\nassert     specialFilter([1,2,3,5,7,9,11]) == 3\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     specialFilter([9, 9, 13, 16, 19]) == 2\nassert     specialFilter([1, 2, 3, 4, 5]) == 0\nassert     specialFilter([1, 2, 3, 4, 8]) == 1\nassert     specialFilter([0, 0, 0, 0, 0, 0]) == 0\nassert     specialFilter([0, 0, 0, 0, 1]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==     10\nassert     specialFilter([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ==     16\nassert     specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) ==     12\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ==     0\nassert     specialFilter([]) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_max_triples(3) == 1\nassert     get_max_triples(9) == 2\nassert     get_max_triples(33) == 4\nassert     get_max_triples(999) == 1"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_max_triples(5) == 2\nassert     get_max_triples(1) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(2) == 0\nassert     get_max_triples(4) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_max_triples(5) == 2\nassert     get_max_triples(10) == 1\nassert     get_max_triples(1) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(6) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_max_triples(5) == 4\nassert get_max_triples(10) == 8\nassert get_max_triples(100) == 13\nassert get_max_triples(500) == 262\nassert get_max_triples(1000) == 624\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_max_triples(6) == 2\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\nassert     get_max_triples(10) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(5) == 0\nassert     get_max_triples(10) == 0\nassert     get_max_triples(50) == 6\nassert     get_max_triples(1000) == 168\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 1\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 0\nassert     get_max_triples(5) == 1\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     bf('Earth', 'Mars') == ('Earth', 'Mars')\nassert     bf('Mercury', 'Venus') == ('Mercury', 'Venus')\nassert     bf('Mercury', 'Jupiter') == ('Mercury', 'Jupiter')\nassert     bf('Saturn', 'Uranus') == ('Saturn', 'Uranus')\nassert     bf('Neptune', 'Pluto') == ('Neptune', 'Pluto')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Mercury') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Neptune') == ('Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Neptune', 'Jupiter') == ('Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Mercury') == ('Mercury', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars')\nassert     bf('Venus', 'Mars') == ('Mars', 'Venus', 'Earth')\nassert     bf('Earth', 'Venus') == ('Venus', 'Earth', 'Mars')\nassert     bf('Venus', 'Earth') == ('Earth')\nassert     bf('Earth', 'Mercury') == ('Mercury')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (bf('Mercury', 'Venus'))     == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     (bf('Mars', 'Earth'))     == ('Mars', 'Earth', 'Venus', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     (bf('Venus', 'Earth'))     == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     (bf('Uranus', 'Earth'))     == ('Uranus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Neptune')\nassert     (bf('Jupiter', 'Earth'))     == ('Jupiter', 'Earth', 'Mars', 'Saturn', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     bf('Mercury', 'Venus')         == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth')         == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Jupiter')         == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Saturn')     == ('Saturn', 'Uranus', 'Neptune')\nassert     bf('Saturn', 'Uranus')     == ('Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     bf('Venus', 'Mercury') == ('Venus', 'Mercury', 'Earth', 'Mars')\nassert     bf('Neptune', 'Venus') == ('Neptune', 'Venus')\nassert     bf('Venus', 'Neptune') == ('Venus', 'Neptune')\nassert     bf('Mars', 'Earth') == ('Mars', 'Earth')\nassert     bf('Earth', 'Mercury') == ('Earth', 'Mercury')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury')\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth')\nassert     bf('Earth', 'Mars') == ('Venus', 'Earth')\nassert     bf('Mars', 'Jupiter') == ('Mars', 'Jupiter')\nassert     bf('Jupiter', 'Saturn') == ('Mars', 'Jupiter')\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sorted_list_sum(['ab', 'abc', 'abcde', 'xyz', 'xyz', 'xyz']) == ['abc', 'abcde', 'xyz']\nassert     sorted_list_sum(['abcd', 'abc', 'abcde', 'xyz', 'xyz', 'xyz']) == ['abc', 'abcde', 'xyz']\nassert     sorted_list_sum(['abcd', 'abcde', 'xyz', 'xyz', 'xyz']) == ['abcde', 'xyz']\nassert     sorted_list_sum(['abc', 'abcde', 'xyz', 'xyz']) == ['abc', 'abcde', 'xyz']\nassert     sorted_list_sum(['abc', 'abcde']) == ['abc', 'abcde']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([\"a\", \"hello\", \"world\", \"apple\", \"bee\", \"potato\"]) == [\"a\", \"apple\", \"bee\", \"hello\", \"potato\", \"world\"]\nassert     sorted_list_sum([\"a\", \"hello\", \"world\", \"\", \"\"]) == [\"a\", \"\", \"hello\", \"world\"]\nassert     sorted_list_sum([\"\", \"apple\", \"bee\", \"\", \"\"]) == [\"\", \"apple\", \"bee\"]\nassert     sorted_list_sum([]) == []\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum([1]) == [1]\nassert     sorted_list_sum([1,2]) == [1,2]\nassert     sorted_list_sum([1,2,3]) == [1,2,3]\nassert     sorted_list_sum([1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum(['a']) == ['a']\nassert     sorted_list_sum(['b', 'a']) == ['a', 'b']\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'a', 'b']) == ['a', 'a', 'a', 'b']\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'a', 'b']) == ['a', 'a', 'a', 'a', 'b']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([\"cat\", \"dog\", \"bat\", \"fish\", \"cat\"]) == [\"cat\", \"cat\", \"bat\", \"dog\", \"fish\"]\nassert     sorted_list_sum([\"cat\", \"cat\", \"bat\", \"dog\", \"dog\"]) == [\"cat\", \"cat\", \"bat\", \"dog\", \"dog\"]\nassert     sorted_list_sum([\"cat\", \"cat\", \"bat\", \"cat\", \"dog\"]) == [\"cat\", \"cat\", \"bat\", \"dog\", \"cat\"]\nassert     sorted_list_sum([\"cat\", \"cat\", \"bat\", \"cat\", \"dog\", \"dog\", \"fish\", \"dog\"]) == [\"cat\", \"cat\", \"bat\", \"dog\", \"dog\", \"fish\"]\nassert     sorted_list_sum([\"cat\", \"cat\", \"bat\", \"dog\", \"dog\", \"fish\", \"dog\"]) == [\"cat\", \"cat\", \"bat\", \"dog\", \"dog\", \"fish\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sorted_list_sum(['Apple', 'Orange', 'Banana', 'Kiwi', 'Melon', 'Grape', 'Pineapple', 'Mango', 'Grapefruit', 'Tomato', 'Papaya', 'Watermelon', 'Apricot', 'Orange', 'Mandarin', 'Banana', 'Orange', 'Kiwi', 'Kiwi', 'Mango', 'Apple', 'Apple', 'Grapefruit', 'Grape', 'Orange', 'Pineapple', 'Apple', 'Banana', 'Banana', 'Pineapple', 'Kiwi', 'Melon', 'Grape', 'Mango', 'Orange', 'Mandarin', 'Apple', 'Grape', 'Kiwi', 'Mandarin', 'Grapefruit', 'Apricot', 'Orange', 'Kiwi', 'Papaya', 'Watermelon', 'Orange', 'Banana', 'Watermelon', 'Tomato', 'Papaya', 'Mango', 'Kiwi', 'Orange', 'Apple', 'Grapefruit', 'Apricot', 'Grape', 'Mango', 'Kiwi', 'Grapefruit', 'Orange', 'Banana', 'Pineapple', 'Apricot', 'Tomato', 'Apple', 'Grape', 'Pineapple', 'Mango', 'Kiwi', 'Apple', 'Pineapple', 'Orange', 'Apricot', 'Mandarin', 'Pineapple', 'Banana', 'Kiwi', 'Grapefruit', 'Kiwi', 'Grape', 'Pineapple', 'Mandarin', 'Apple', 'Pineapple', 'Apple', 'Watermelon', 'Kiwi', 'Papaya', 'Pineapple', 'Grapefruit', 'Apple', 'Orange', 'Grapefruit', 'Kiwi', 'Grape', 'Pineapple', 'Apple', 'Pineapple', 'Apple', 'Grapefruit', 'Kiwi', 'Grapefruit', 'Mango', 'Kiwi', 'Mandarin', 'Orange', 'Pineapple', 'Mandarin', 'Apple', 'Pineapple', 'Apple', 'Watermelon', 'Orange', 'Mandarin', 'Apple', 'Pineapple', 'Apple', 'Apple', 'Orange', 'Apple', 'Apple', 'Pineapple', 'Watermelon', 'Apricot', 'Banana', 'Kiwi', 'Kiwi', 'Grapefruit', 'Kiwi', 'Kiwi', 'Papaya', 'Pineapple', 'Kiwi', 'Papaya', 'Pineapple', 'Apple', 'Kiwi', 'Pineapple', 'Kiwi', 'Kiwi', 'Banana', 'Papaya', 'Banana', 'Watermelon', 'Apple', 'Pineapple', 'Banana', 'Banana', 'Orange', 'Kiwi', 'Orange', 'Kiwi', 'Banana', 'Apple', 'Orange', 'Orange', 'Kiwi', 'Orange', 'Grape', 'Orange', 'Orange', 'Watermelon', 'Kiwi', 'Pineapple', 'Banana', 'Orange', 'Kiwi', 'Orange', 'Orange', 'Banana', 'Orange', 'Banana', 'Kiwi', 'Orange', 'Pineapple', 'Orange', 'Kiwi', 'Banana', 'Orange', 'Kiwi', 'Kiwi', 'Kiwi', 'Orange', 'Orange', 'Orange', 'Kiwi', 'Pineapple', 'Banana', 'Orange', 'Kiwi', 'Banana', 'Orange', 'Orange', 'Orange', 'Kiwi', 'Grape', 'Orange', 'Orange', 'Orange', 'Kiwi', 'Grape', 'Grapefruit', 'Orange', 'Grapefruit', 'Banana', 'Banana', 'Orange', 'Banana', 'Orange', 'Kiwi', 'Banana', 'Orange', 'Orange', 'Orange', 'Banana', 'Orange', 'Banana', 'Orange', 'Pineapple', 'Orange', 'Orange', 'Kiwi', 'Orange', 'Grapefruit', 'Kiwi', 'Kiwi', 'Orange', 'Kiwi', 'Grapefruit', 'Banana', 'Kiwi', 'Grapefruit', 'Orange', 'Pineapple', 'Orange', 'Kiwi', 'Pineapple', 'Orange', 'Banana', 'Orange', 'Pineapple', 'Orange', 'Pineapple', 'Orange', 'Banana', 'Orange', 'Orange'"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sorted_list_sum([\"do\", \"re\", \"mi\", \"fa\", \"so\", \"la\", \"ti\", \"en\", \"an\"]) == [\"an\", \"la\", \"en\", \"fa\", \"so\", \"en\", \"ti\", \"la\", \"re\", \"do\"]\nassert     sorted_list_sum([\"fr\", \"hi\", \"er\", \"an\", \"nd\", \"ma\", \"si\", \"oh\", \"ni\", \"ha\"]) == [\"an\", \"hi\", \"fr\", \"ma\", \"nd\", \"oh\", \"oh\", \"ni\", \"si\", \"ha\", \"er\", \"er\"]\nassert     sorted_list_sum([\"ta\", \"ni\", \"ca\", \"nd\", \"ti\", \"nh\", \"ma\", \"hi\", \"fa\", \"en\", \"et\"]) == [\"ca\", \"hi\", \"en\", \"fa\", \"en\", \"et\", \"ma\", \"ni\", \"hi\", \"ni\", \"nd\", \"ta\", \"ti\", \"nh\"]\n\n\ndef reverse_string(s):\n    \"\"\"Write a function that accepts a string as a parameter,\n    and returns a string with the letters in reverse order.\n    The string will always be a string of characters, and you can assume that the string will always have more than zero characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sorted_list_sum([\"correspondence\", \"algebra\", \"cluster\", \"iteration\", \"forecast\", \"regression\"]) == [\"cluster\", \"algebra\", \"iteration\", \"forecast\", \"regression\"]\nassert     sorted_list_sum([\"constraints\", \"numerical\", \"science\", \"mathematics\", \"hypothesis\", \"procedure\", \"statistical\", \"probability\", \"predictive\"]) == [\"hypothesis\", \"procedure\", \"probability\", \"predictive\", \"statistical\", \"numerical\", \"science\", \"mathematics\", \"constraints\"]\nassert     sorted_list_sum([\"discipline\", \"algebra\", \"math\", \"cluster\", \"math\"]) == [\"math\", \"cluster\", \"algebra\", \"discipline\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sorted_list_sum(['a','a','a','b','b','b','b','c','c','c','d','d','d','d','d','d','d','d','e']) == 'e,d,d,c,b,b,b,a,a,a,c,c,d'\nassert     sorted_list_sum(['a','a','a','a','a','a','a','a','b','b','b','b','b','b','b','b','b','c','c','c','c','c','c','c','c','c','c','c','c','c','c','c','c','c','c','c','c','c','d','d','d','d','d','d','d','d','d','d','e','e','e','e','e','e']) == 'e,d,d,c,b,b,b,a,a,a,c,c,c,c,c,c,c,c,c,d,d,d,d,d,d,d,e'\nassert     sorted_list_sum(['a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"peter\",\"weid\"]) == ['weid', 'peter']\nassert     sorted_list_sum([\"rabbit\",\"horse\",\"bit\",\"penny\"]) == ['bit', 'rabbit', 'penny', 'horse']\nassert     sorted_list_sum([\"apple\",\"banana\",\"dog\"]) == ['apple', 'banana', 'dog']\nassert     sorted_list_sum([\"salt\",\"pepper\",\"beer\"]) == ['pepper','salt', 'beer']\nassert     sorted_list_sum([\"car\",\"dog\",\"cat\"]) == ['cat', 'car', 'dog']\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     x_or_y(2, 2, 2) == 2\nassert     x_or_y(3, 2, 2) == 2\nassert     x_or_y(4, 2, 2) == 2\nassert     x_or_y(5, 2, 2) == 2\nassert     x_or_y(6, 2, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(3, 1, 1) == 1\nassert     x_or_y(4, 1, 1) == 1\nassert     x_or_y(5, 1, 1) == 1\nassert     x_or_y(6, 1, 1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     x_or_y(2, 1, 2) == 1\nassert     x_or_y(4, 1, 2) == 2\nassert     x_or_y(1, 1, 1) == 1\nassert     x_or_y(5, 1, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     x_or_y(2, 1, 2) == 2\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(4, 1, 2) == 2\nassert     x_or_y(5, 1, 2) == 3\nassert     x_or_y(7, 1, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     x_or_y(5, 7, 17) == 17\nassert x_or_y(5, 17, 17) == 17\nassert x_or_y(5, 7, 7) == 7\nassert x_or_y(5, 17, 7) == 7\nassert x_or_y(5, 7, 17) == 17\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     x_or_y(7,2,3) == 2\nassert     x_or_y(5,2,3) == 3\nassert     x_or_y(11,2,3) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     x_or_y(11,5,6) == 5\nassert     x_or_y(7,5,6) == 6\nassert     x_or_y(11,5,5) == 5\nassert     x_or_y(11,11,6) == 6\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     x_or_y(2, 6, 6) == 6\nassert     x_or_y(2, 6, 8) == 8\nassert     x_or_y(2, 8, 6) == 6\nassert     x_or_y(2, 8, 8) == 8\nassert     x_or_y(2, 6, 1) == 6\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     x_or_y(5, x=5, y=6) == 5\nassert     x_or_y(3, x=5, y=6) == 6\nassert     x_or_y(7, x=5, y=6) == 6\nassert     x_or_y(7, x=6, y=5) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     x_or_y(5, 3, 2) == 3\nassert     x_or_y(5, 4, 2) == 4\nassert     x_or_y(2, 3, 2) == 3\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     double_the_difference([]) == 0, \"Wrong result for an empty list\"\nassert     double_the_difference([1, 2, 3, 4, 5, 6]) == 55, \"Wrong result for a list with even numbers\"\nassert     double_the_difference([-1, -2, -3, -4, -5]) == 5, \"Wrong result for a list with negative numbers\"\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55, \"Wrong result for a list with more than 10 numbers\"\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7]) == 55, \"Wrong result for a list with more than 6 numbers\"\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 4 + 25 + 36 + 49\nassert     double_the_difference([2,3,4,5,6]) == 8 + 19 + 22 + 25\nassert     double_the_difference([]) == 0\nassert     double_the_difference([-1,2,3,4,5]) == 16 + 30 + 36 + 49\nassert     double_the_difference([1,-2,-3,-4,-5]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1,2,3]) == 8\nassert     double_the_difference([0,-1,1]) == 8\nassert     double_the_difference([3,1,2]) == 9\nassert     double_the_difference([-3,-1,2]) == 9\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     double_the_difference([10, -2, 7, 4, 5, 6, -10, -10, -7, -6, -5, -4, -3, -2, -1, -0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 20\nassert     double_the_difference([10, -2, 7, 4, 5, 6, -10, -10, -7, -6, -5, -4, -3, -2, -1, -0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 40\nassert     double_the_difference([10, -2, 7, 4, 5, 6, -10, -10, -7, -6, -5, -4, -3, -2, -1, -0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 60\nassert     double_the_difference([10, -2, 7, 4, 5, 6, -10, -10, -7, -6, -5, -4, -3, -2, -1, -0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 80\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     double_the_difference([5, 8, 6, 2, 8, 3, 4, 7]) == 112\nassert     double_the_difference([0, 2, 4, 6, 8]) == 0\nassert     double_the_difference([5.5, 8.3, 6.3, 2.4, 8.1, 3.4, 4.7]) == 28.5\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3]) == 2\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef break_words(text):\n    '''\n    Given a string, break it up into as many words as possible,\n    with the first letter of each word being capitalized.\n    '''\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     double_the_difference([1,2,3,4]) == 14\nassert     double_the_difference([]) == 0\nassert     double_the_difference([2]) == 0\nassert     double_the_difference([-2, -4]) == 8\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     double_the_difference([4, 5, 6, -4, -3, 0, 1, 3, 9, 16]) == 63\nassert     double_the_difference([2, 4, 6, 8, 10]) == 130\nassert     double_the_difference([1, 2, 3, 4, 5]) == 30\nassert     double_the_difference([]) == 0\nassert     double_the_difference([-1, -2, -3, -4, -5]) == 15\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     double_the_difference([1, 2, 3]) == 2\nassert double_the_difference([0, 2, 5, 10, 14]) == 58\nassert double_the_difference([-2, -4, -6, -8, 10]) == 632\nassert double_the_difference([0, 0, -2, -4, -6, -8, 10]) == 0\n\n\ndef three_odd_numbers(numbers):\n    '''\n    Given a list of numbers, return the sum of the numbers that are three\n    odd numbers. Ignore numbers that are negative or not integers.\n   \n    If the input list is empty, return 0.\n    '''\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     double_the_difference([1,2,3,4,5,6,7,8,9]) == double_the_difference([1,2,3,4,5,6,7,8,9,10])\nassert     double_the_difference([1,2,3,4]) == double_the_difference([1,2,3,4,5])\nassert     double_the_difference([0, 1, 2, 3, 4, 5]) == double_the_difference([0, 1, 2, 3, 4, 5, 6])\nassert     double_the_difference([1,2,3,4,5,6,7,8,9,10]) == double_the_difference([10,9,8,7,6,5,4,3,2,1])\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare([3,1,3,2,2,1],[1,1,1,3,2,2]) == [1,1,1,0,1,2]\nassert     compare([1,2,3,4,5],[3,1,2,4,5]) == [2,1,0,1,0]\nassert     compare([1,2,3,4,5],[1,1,1,1,1]) == [0,0,0,1,2]\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare(game,guess)     == [0,1,1,1,1,1,2,2,2,3,3,3,4,5,7,7,8,9,9]\nassert     compare(game,guess)     == [0,1,1,1,1,1,2,2,2,3,3,3,4,5,7,7,8,9,9]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     compare([0, 0, 0, 0, 0], [0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\nassert     compare([0, 1, 2, 3, 4], [0, 1, 2, 3, 4]) == [0, 0, 0, 0, 0]\nassert     compare([0, 1, 2, 3], [1, 1, 1, 0]) == [1, 0, 1, 0]\nassert     compare([4, 3, 2, 1, 0], [1, 0, 2, 3, 4]) == [2, 1, 1, 2, 1]\nassert     compare([2, 3, 4, 5, 6], [4, 5, 6, 7, 8]) == [1, 2, 1, 1, 1]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare([0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare([0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0]) == [1,0,0,0,0,0,0,0,0,0]\nassert     compare([0,0,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0]) == [0,1,1,0,0,0,0,0,0,0]\nassert     compare([0,0,0,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0]) == [0,1,1,1,0,0,0,0,0,0]\nassert     compare([0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0]) == [0,1,1,1,1,0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\nassert     compare([1, 2, 3], [2, 3, 4]) == [1, 1, 1]\nassert     compare([1, 2, 3], [2, 1, 4]) == [1, 1, 2]\nassert     compare([1, 2, 3], [2, 1, 3]) == [1, 1, 2]\nassert     compare([2, 4, 3], [1, 2, 3]) == [1, 1, 1]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [compare(game=[1, 2, 3, 4, 5],guess=[1, 1, 3, 4, 5]) == [0, 0, 2, 0, 2], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 5]) == [0, 0, 1, 0, 3], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 7]) == [1, 0, 0, 0, 6], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 8]) == [1, 0, 0, 0, 10]], \"Wrong answers\"\nassert     [compare(game=[1, 2, 3, 4, 5],guess=[1, 1, 3, 4, 5]) == [0, 0, 2, 0, 2], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 5]) == [0, 0, 1, 0, 3], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 7]) == [1, 0, 0, 0, 6], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 8]) == [1, 0, 0, 0, 10]], \"Wrong answers\"\nassert     [compare(game=[1, 2, 3, 4, 5],guess=[1, 1, 3, 4, 5]) == [0, 0, 2, 0, 2], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 5]) == [0, 0, 1, 0, 3], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 7]) == [1, 0, 0, 0, 6], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 8]) == [1, 0, 0, 0, 10]], \"Wrong answers\"\nassert     [compare(game=[1, 2, 3, 4, 5],guess=[1, 1, 3, 4, 5]) == [0, 0, 2, 0, 2], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 5]) == [0, 0, 1, 0, 3], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 7]) == [1, 0, 0, 0, 6], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 8]) == [1, 0, 0, 0, 10]], \"Wrong answers\"\nassert     [compare(game=[1, 2, 3, 4, 5],guess=[1, 1, 3, 4, 5]) == [0, 0, 2, 0, 2], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 5]) == [0, 0, 1, 0, 3], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 7]) == [1, 0, 0, 0, 6], compare(game=[1, 1, 3, 4, 5],guess=[1, 1, 1, 1, 8]) == [1, 0, 0, 0, 10]], \"Wrong answers\"\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\nif __name__=='__main__':\n    # write your own tests here\n    assert compare([1,2,3],[1,2,3])==[0,0,0]\n    assert compare([1,2,3],[4,3,2])==[3,2,1]\n    assert compare([1,2,3,4,5,6],[7,6,5,4,3,2])==[3,2,1,0,0,0"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare([5,1,2,3,4], [2,1,3,4,5]) == [2,1,3,4,5]\nassert     compare([0,1,2,3,4], [2,1,3,4,5]) == [2,1,3,4,5]\nassert     compare([2,3,4,5], [2,1,3,4,5]) == [2,1,3,4,5]\nassert     compare([3,4,5], [2,1,3,4,5]) == [3,4,5]\nassert     compare([1,2,3,4,5], [2,1,3,4,5]) == [3,4,5]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     compare([37,35,32,32,45,44,38,34,40,40,45,36,32,32,31,45,32,35,33,42,45,32,32,36,35,34,36,42,35,32,34,34,39,45,38,39,36,39,42,39,35,38,40,39,32,36,35,37,35,35,34,44,35,35,43,35,42,39,34,35,37,36,35,39,41,34,44,41,35,39,37,36,35,39,34,39,34,37,35,36,35,34,34,39,34,34,36,35,33,41,34,37,35,36,36,37,39,39,38,37,36,36,35,34,37,35,37,37,37,37,36,35,35,35,35,37,35,37,37,37,37,36,36,34,36,36,36,34,34,36,35,35,35,34,34,37,34,38,35,35,37,35,35,35,35,35,37,35,35,37,37,37,37,37,35,34,37,36,37,35,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare([6, 7, 4, 9, 2, 6, 3], [4, 7, 5, 6, 8, 3, 2]) == [1, 2, 2, 0, -1, -1, 4]\nassert     compare([5, 6, 7, 9, 2, 3], [3, 6, 7, 2, 3, 4]) == [3, 1, -1, -2, -3, -2]\nassert     compare([2, 4, 6, 8, 1, 3], [1, 3, 4, 7, 5, 8]) == [0, 1, 1, 0, 1, 0]\nassert     compare([2, 4, 6, 8, 1, 3], [1, 3, 4, 7, 5, 8]) == [0, 1, 1, 0, 1, 0]\nassert     compare([2, 4, 6, 8, 1, 3], [1, 3, 4, 7, 5, 8]) == [0, 1, 1, 0, 1, 0]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"First\"\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.StuFfed', \"Second\"\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes', \"Third\"\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed', 'SErviNGSliCes', 'Cheese']) == 'Slices.StuFfed', \"Fourth\"\nassert     Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.StuFfed', \"Fifth\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices', 'StuFfed', 'Slices']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'StuFfed']) == 'Slices.StuFfed'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Coala', ['Coala', 'Gram', 'Smell', 'Chromat', 'Heat', 'Gum', 'Spice']) == 'Coala.Gram'\nassert     Strongest_Extension('Pony', ['Velvet', 'Mountain', 'Knife', 'Pony', 'Rats', 'Gorilla', 'Chicory']) == 'Pony.Pony'\nassert     Strongest_Extension('Swamp', ['Snake', 'Cat', 'Ant', 'Tiger', 'Rooster', 'Gorilla', 'Pony']) == 'Swamp.Ant'\nassert     Strongest_Extension('Gorilla', ['Snake', 'Cat', 'Ant', 'Tiger', 'Rooster', 'Gorilla', 'Pony']) == 'Gorilla.Gorilla'\nassert     Strongest_Extension('Cockroach', ['Scare', 'Cockroach', 'Parasite', 'Giraffe', 'Tiger', 'Gorilla', 'Cheetah']) == 'Cockroach.Parasite'"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'WuFf', 'qwerty']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Pizza', ['Pizz', 'Pie', 'PaIzA', 'ZiPz', 'Pizza1']) == 'Pizza.Pizz'\nassert     Strongest_Extension('Pizza', ['Pizza', 'Pie', 'PaIzA', 'ZiPz', 'Pizza1', 'Pizza2']) == 'Pizza.Pizza1'\nassert     Strongest_Extension('Pizza', ['Pizz', 'Pie', 'PaIzA', 'ZiPz', 'Pizza1', 'Pizza2', 'Pizza3']) == 'Pizza.Pizza2'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"Slices\", \"Cheese\", \"StuFfed\"]) == \"Slices.Slices\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"SErviNGSliCes\", \"Cheese\", \"SErviNGSliCes\"]) == \"Slices.SErviNGSliCes\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Kiyoto', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Kiyoto.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Kiyoto']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Kiyoto', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Kiyoto']) == 'Kiyoto.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(\"Beer\", ['Coke', 'Fanta', 'Pepsi', 'Sprite']) == \"Beer.Coke\"\nassert     Strongest_Extension(\"Bubbletea\", ['Hexaflav', 'Parle']) == \"Bubbletea.Parle\"\nassert     Strongest_Extension(\"Bubbletea\", ['Hexaflav', 'Coke', 'Parle']) == \"Bubbletea.Parle\"\nassert     Strongest_Extension(\"Hello\", ['Hi', 'Howdy', 'Hello', 'Bonjour', 'Hola']) == \"Hello.Hello\"\nassert     Strongest_Extension(\"Hello\", ['Hi', 'Howdy', 'Hello', 'Bonjour', 'Hola', 'HiHi']) == \"Hello.Hello\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Stewart']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Stewart', 'Lettuce']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Stewart', 'Lettuce', 'Tomato']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Stewart', 'Lettuce', 'Tomato', 'Mango']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Cheese\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Cheese\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices']) == 'Cheese.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"First\"\nassert     Strongest_Extension('Slices', ['StuFfed', 'SErviNGSliCes', 'Cheese']) == 'Slices.SErviNGSliCes', \"Second\"\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'Slices']) == 'Slices.SErviNGSliCes', \"Third\"\nassert     Strongest_Extension('Slices', ['Cheese', 'Slices', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes', \"Fourth\"\nassert     Strongest_Extension('Slices', ['Cheese', 'Cheese', 'Slices']) == 'Cheese.Slices', \"Fifth\"\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     cycpattern_check('waterbottle', 'erbottlewat') == True\nassert     cycpattern_check('foo', 'bar') == False\nassert     cycpattern_check('foobar', 'barfoo') == True\nassert     cycpattern_check('foobar', 'barfoba') == False\nassert     cycpattern_check('foobar', 'barfooo') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"abc\", \"cba\") == True\nassert     cycpattern_check(\"abc\", \"bac\") == True\nassert     cycpattern_check(\"abc\", \"dab\") == False\nassert     cycpattern_check(\"abc\", \"cab\") == True\nassert     cycpattern_check(\"abcd\", \"cdab\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cycpattern_check('ABCDEFG', 'ABCD')\nassert     cycpattern_check('ABCDEFG', 'ABCEF')\nassert     cycpattern_check('ABCDEFG', 'CDEFG')\nassert     cycpattern_check('ABCDEFG', 'DEFG')\nassert     cycpattern_check('ABCDEFG', 'EGF')\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef word_pattern_check(a, b):\n    \"\"\"You are given 2 strings. You need to return True if the 2 strings are anagrams of each other or False if they are not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     cycpattern_check( \"abcd\", \"dabc\") == True, \"Test 1\"\nassert     cycpattern_check( \"abcd\", \"cdab\") == True, \"Test 2\"\nassert     cycpattern_check( \"abcd\", \"acdc\") == True, \"Test 3\"\nassert     cycpattern_check( \"abcd\", \"adcb\") == True, \"Test 4\"\nassert     cycpattern_check( \"abcd\", \"cadb\") == True, \"Test 5\"\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     cycpattern_check( \"bob\", \"bobbob\") == True\nassert     cycpattern_check( \"bob\", \"obbobb\") == True\nassert     cycpattern_check( \"bob\", \"oobboobb\") == False\nassert     cycpattern_check( \"bob\", \"bobbob\") == True\nassert     cycpattern_check( \"bob\", \"bobob\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     cycpattern_check('cde', 'dece') is True\nassert     cycpattern_check('abc', 'cba') is True\nassert     cycpattern_check('abc', 'bac') is False\nassert     cycpattern_check('abc', 'acb') is True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     cycpattern_check(\"yoyo\", \"yoyo\") == True\nassert     cycpattern_check(\"yoyo\", \"yoy\") == False\nassert     cycpattern_check(\"yoyo\", \"yo\") == True\nassert     cycpattern_check(\"yoyo\", \"yoa\") == True\nassert     cycpattern_check(\"yoyo\", \"oyo\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     cycpattern_check('abc','abc') == True\nassert     cycpattern_check('abc','abcd') == False\nassert     cycpattern_check('abcd','abc') == True\nassert     cycpattern_check('abcd','abcd') == True\nassert     cycpattern_check('abcd','abcde') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cycpattern_check(\"waterbottle\", \"bottlewater\") == True\nassert     cycpattern_check(\"waterbottle\", \"bottlegwate\") == True\nassert     cycpattern_check(\"waterbottle\", \"bottlegwater\") == False\nassert     cycpattern_check(\"waterbottle\", \"watebottle\") == True\nassert     cycpattern_check(\"waterbottle\", \"bottlewaterbottle\") == True\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_count(15) == (2,1)\nassert     even_odd_count(42) == (2,0)\nassert     even_odd_count(77) == (2,2)\nassert     even_odd_count(99) == (2,0)\nassert     even_odd_count(119) == (3,1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_count(123) == ('3', '1')\nassert     even_odd_count(10) == ('1', '0')\nassert     even_odd_count(107) == ('7', '0')\nassert     even_odd_count(20) == ('2', '0')\nassert     even_odd_count(201) == ('2', '1')\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (1,2)    == even_odd_count(12345)\nassert     (0,2)    == even_odd_count(2)\nassert     (3,1)    == even_odd_count(13)\nassert     (2,1)    == even_odd_count(12)\nassert     (2,2)    == even_odd_count(121)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_count(11) == (1, 1)\nassert     even_odd_count(96) == (4, 6)\nassert     even_odd_count(345) == (3, 5)\n\ndef is_palindrome(num):\n    \"\"\"Given an integer. return true if it is a palindrome.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_odd_count(123456) == (2,6)\nassert     even_odd_count(124) == (1,4)\nassert     even_odd_count(1) == (1,1)\n\n\ndef absolute_value(num):\n    \"\"\"Given an integer num, return its absolute value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_count(66) == (2, 2)\nassert     even_odd_count(123) == (3, 1)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(-1) == (0, 1)\n\nprint \"Passed. 1 point.\"\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_count(12) == (1,2)\nassert     even_odd_count(121) == (2,1)\nassert     even_odd_count(7) == (1,0)\nassert     even_odd_count(28) == (0,4)\nassert     even_odd_count(2816) == (4,0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_count(101) == (1, 1)\nassert     even_odd_count(214) == (2, 4)\nassert     even_odd_count(876) == (1, 2)\nassert     even_odd_count(223) == (2, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_count(345) == (1, 3)\nassert     even_odd_count(35) == (0, 2)\nassert     even_odd_count(45) == (0, 2)\nassert     even_odd_count(40) == (1, 2)\nassert     even_odd_count(2) == (1, 0)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef mini_roman_to_int(roman_string):\n    \"\"\"\n    Given a string of roman numeral, return the integer equivalent as an integer\n    in the range 1 <= num <= 1000, and return it in the form of a string,\n    and return it in lowercase.\n    Restrictions:\n        The string contains only lowercase characters and spaces.\n        The string is not empty.\n        All numeral, and the numeral-values are in the range 1 <= num <= 1000\n    \"\"\"\n    pass\n\n\ndef test_int_to_mini_roman():\n    assert int_to_mini_roman(1) == 'I'\n    assert int_to_mini_roman(2) == 'II'\n    "
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\nassert     int_to_mini_roman(6) == 'vi'\nassert     int_to_mini_roman(7) == 'vii'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (right_angle_triangle(3, 4, 5)             == True)\nassert     (right_angle_triangle(4, 3, 5)             == False)\nassert     (right_angle_triangle(10, 10, 10)         == False)\nassert     (right_angle_triangle(1, 1, 1)             == True)\nassert     (right_angle_triangle(0, 0, 0)             == True)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, \"3, 4, 5 should be a right-angle triangle\"\nassert     right_angle_triangle(3, 4, 6) == False, \"3, 4, 6 should not be a right-angle triangle\"\nassert     right_angle_triangle(2, 2, 3) == True, \"2, 2, 3 should be a right-angle triangle\"\nassert     right_angle_triangle(3, 3, 3) == False, \"3, 3, 3 should not be a right-angle triangle\"\nassert     right_angle_triangle(2, 3, 4) == True, \"2, 3, 4 should be a right-angle triangle\"\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(5, 3, 4) == True\nassert     right_angle_triangle(3, 5, 4) == False\nassert     right_angle_triangle(5, 3, 6) == False\nassert     right_angle_triangle(3, 4, 7) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, 'Wrong answer for right_angle_triangle(3, 4, 5)'\nassert     right_angle_triangle(7, 3, 5) == True, 'Wrong answer for right_angle_triangle(7, 3, 5)'\nassert     right_angle_triangle(3, 3, 3) == False, 'Wrong answer for right_angle_triangle(3, 3, 3)'\nassert     right_angle_triangle(3, 2, 3) == False, 'Wrong answer for right_angle_triangle(3, 2, 3)'\nassert     right_angle_triangle(2, 3, 3) == False, 'Wrong answer for right_angle_triangle(2, 3, 3)'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(1, 1, 2) == True\nassert     right_angle_triangle(2, 1, 3) == False\n\n\ndef get_triangle_type(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the type of this\n    triangle based on the following:\n    - equilateral, is when a == b == c\n    - isosceles, is when b == c\n    - scalene, is when a!= b!= c\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert right_angle_triangle(3,4,5) == False\nassert right_angle_triangle(3,4,6) == True\nassert right_angle_triangle(10,4,6) == False\nassert right_angle_triangle(2,3,4) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(4, 4, 4)\nassert     not right_angle_triangle(3, 4, 5)\nassert     right_angle_triangle(5, 6, 7)\nassert     right_angle_triangle(4, 5, 7)\nassert     right_angle_triangle(4, 7, 5)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(3,4,5) == True\nassert     right_angle_triangle(3,5,4) == False\nassert     right_angle_triangle(5,3,4) == True\nassert     right_angle_triangle(5,4,3) == False\nassert     right_angle_triangle(4,4,4) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(3,4,5) == True\nassert     right_angle_triangle(3,4,6) == False\nassert     right_angle_triangle(1,3,5) == True\nassert     right_angle_triangle(3,6,8) == False\nassert     right_angle_triangle(3,4,3) == True\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_max(['abcd', 'abc', 'bcd']) == 'abcd'\nassert     find_max(['a', 'b', 'c']) == 'a'\nassert     find_max(['abcd', 'abc', 'bcd', 'bcda']) == 'abcd'\nassert     find_max(['a', 'b', 'c', 'bcd', 'abc', 'abc']) == 'abc'\nassert     find_max(['a', 'b', 'c', 'c', 'abc', 'abc', 'a', 'b', 'c']) == 'abc'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"]) == \"abc\"\nassert     find_max([\"abc\", \"abc\", \"abc\", \"def\", \"ghi\", \"ghi\", \"ghi\", \"ghi\"]) == \"abc\"\nassert     find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"z\"]) == \"z\"\nassert     find_max([\"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\"]) == \"ghi\"\nassert     find_max([\"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\", \"ghi\"]) == \"ghi\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_max([\"python\", \"python\", \"python\", \"python\"]) == \"python\"\nassert     find_max([\"geeks\", \"for\", \"geeks\"]) == \"geeks\"\nassert     find_max([\"program\", \"programming\", \"programmer\"]) == \"programmer\"\nassert     find_max([\"this\", \"is\", \"my\", \"test\"]) == \"this\"\nassert     find_max([\"this\", \"is\", \"my\", \"test\", \"python\", \"programmer\"]) == \"programmer\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_max(['python', 'python', 'python', 'python', 'python',\n    'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']) == 'c', 'incorrect'\nassert     find_max(['python', 'python', 'python', 'python', 'python',\n    'ruby', 'ruby', 'ruby', 'ruby', 'ruby', 'ruby', 'ruby', 'ruby', 'ruby']) == 'ruby', 'incorrect'\nassert     find_max(['python', 'python', 'python', 'python', 'python',\n    'c++', 'c++', 'c++', 'c++', 'c++', 'c++', 'c++', 'c++', 'c++']) == 'c++', 'incorrect'\nassert     find_max(['ruby', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']) == 'c', 'incorrect'\nassert     find_max(['ruby', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']) == 'c', 'incorrect'\nprint('all tests passed')\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_max([\"cba\", \"daf\", \"ghi\", \"jkl\", \"bmn\"]) == \"ghi\"\nassert     find_max([\"acb\", \"bac\", \"cab\", \"cba\"]) == \"bac\"\nassert     find_max([\"acb\", \"bac\", \"cab\", \"cba\", \"ab\"]) == \"cab\"\nassert     find_max([\"acb\", \"bac\", \"cab\", \"cba\", \"ab\", \"ghi\"]) == \"ghi\"\nassert     find_max([\"acb\", \"bac\", \"cab\", \"cba\", \"ab\", \"ghi\", \"jkl\"]) == \"ghi\""
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_max(['aa', 'aa', 'bb', 'bb', 'cc']) == 'aa'\nassert     find_max(['a', 'a', 'a', 'a', 'a']) == 'a'\nassert     find_max(['a', 'a', 'a', 'a', 'a', 'a']) == 'a'\nassert     find_max(['aa', 'bb', 'cc']) == 'aa'\nassert     find_max(['a', 'a', 'a', 'a', 'a', 'a', 'a']) == 'a'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_max(['ahoj', 'hello', 'hi', 'hiho']) == 'hello'\nassert     find_max(['hi', 'hello', 'ahoj', 'hi', 'hi']) == 'hi'\nassert     find_max(['hi', 'hello', 'hi', 'hi']) == 'hi'\nassert     find_max(['hihi', 'hi', 'hihi', 'hello', 'hi']) == 'hihi'\nassert     find_max(['hihi', 'hi', 'hihi', 'hello', 'hi']) == 'hi'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_max(['flower', 'flow', 'flight']) == 'flight'\nassert     find_max(['cc', 'aa', 'dd', 'bb', 'ba']) == 'bb'\nassert     find_max(['awkward', 'owl', 'wood', 'wide']) == 'wide'\nassert     find_max(['12', '123', '1234']) == '1234'\nassert     find_max(['egg', 'karate', 'code', 'loves', 'love', 'code', 'car']) == 'code'\nprint(\"Correctly completed 'find_max'\")\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         find_max(['foo', 'bar', 'baz', 'foo', 'bar', 'baz']) == 'bar'\nassert         find_max(['python', 'c', 'r', 'ruby', 'c++', 'c#']) == 'c++'\nassert         find_max(['python', 'ruby', 'c++', 'java', 'c#']) == 'python'\nassert         find_max(['c', 'c++', 'c#', 'python', 'c++', 'c#', 'java', 'c']) == 'c++'\nassert         find_max(['go', 'python', 'java', 'c', 'c++', 'c#', 'c']) == 'c'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_max(['hey', 'there', 'are', 'you', 'ok', 'bye', 'bye', 'bye', 'bye', 'bye']) == 'you'\nassert     find_max(['hey', 'there', 'are', 'you', 'ok', 'bye', 'bye', 'bye', 'bye', 'bye']) == 'bye'\nassert     find_max(['hey', 'there', 'are', 'you', 'ok', 'bye', 'bye', 'bye', 'bye', 'bye', 'bye', 'hey']) == 'hey'\nassert     find_max(['hey', 'there', 'are', 'you', 'ok', 'bye', 'bye', 'bye', 'bye', 'bye', 'bye', 'hey']) == 'hey'\nassert     find_max(['hey', 'there', 'are', 'you', 'ok', 'bye', 'bye', 'bye', 'bye', 'bye', 'bye', 'hey', 'hey']) == 'hey'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eat(50, 50, 100) == [ 50, 100 ]\nassert     eat(100, 100, 100) == [ 0, 0 ]\nassert     eat(200, 500, 1000) == [ 500, 1000 ]\nassert     eat(1000, 1000, 1000) == [ 0, 0 ]\nassert     eat(0, 0, 1000) == [ 1000, 1000 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     eat(0,3,7) == [0,3]\nassert     eat(0,2,7) == [0,2]\nassert     eat(0,1,7) == [0,1]\nassert     eat(0,0,7) == [0,0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(1, 0, 1) == [1, 1]\nassert     eat(1, 1, 2) == [2, 1]\nassert     eat(10, 2, 10) == [10, 8]\nassert     eat(1000, 1000, 1000) == [1000, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     eat(45, 7, 42) == [ 21, 7 ]\nassert     eat(49, 4, 20) == [ 13, 4 ]\nassert     eat(48, 4, 22) == [ 14, 2 ]\nassert     eat(43, 5, 33) == [ 0, 33 ]\nassert     eat(44, 5, 33) == [ 0, 33 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     eat(10, 15, 50)     == [ 5, 25 ]\nassert     eat(25, 15, 50)     == [ 0, 50 ]\nassert     eat(25, 50, 50)     == [ 0, 50 ]\nassert     eat(0, 50, 50)     == [ 0, 50 ]\nassert     eat(50, 0, 50)     == [ 0, 50 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eat(24, 25, 26) == [50, 19]\nassert     eat(26, 25, 26) == [50, 19]\nassert     eat(26, 22, 25) == [50, 19]\nassert     eat(26, 25, 26) == [50, 19]\nassert     eat(0, 0, 1000) == [0, 1000]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     eat(10, 5, 5) == [ 15, 5 ]\nassert     eat(4, 7, 3) == [ 9, 0 ]\nassert     eat(20, 2, 1) == [ 21, 1 ]\nassert     eat(0, 0, 0) == [ 0, 0 ]\nassert     eat(0, 0, 1) == [ 0, 1 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eat(10, 10, 10) == [10, 0]\nassert     eat(10, 1, 10) == [10, 9]\nassert     eat(10, 11, 10) == [10, 0]\nassert     eat(10, 0, 10) == [10, 0]\nassert     eat(10, 0, 11) == [10, 9]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     eat(3, 5, 4) == [8, 3]\nassert     eat(5, 3, 4) == [7, 2]\nassert     eat(4, 3, 4) == [8, 1]\nassert     eat(5, 4, 3) == [8, 0]\nassert     eat(7, 4, 1) == [13, 0]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     do_algebra(['+', '-', '*'], [1, 2, 3])     ==     1 - 2 * 3\nassert     do_algebra(['+', '*'], [1, 2])         ==     1 + 2 * 2\nassert     do_algebra(['+', '*', '-'], [2, 2, 2])     ==     2 - 2 * 2\nassert     do_algebra(['+', '*', '-'], [1, 2, 3])     ==     1 - 2 * 3\nassert     do_algebra(['+', '*', '-'], [2, 3, 4])     ==     2 - 3 * 4\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [2,3,4,5]) == -1\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [2,3]) == -1\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [2,3,4,5]) == -1\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [2,3,4,5,6,7]) == -1\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [2,3,4,5,6]) == -1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     do_algebra(['+'], [1, 2, 3, 4]) == 10\nassert     do_algebra(['-'], [3, 2, 1, 0]) == -2\nassert     do_algebra(['*'], [1, 2, 3, 4]) == 24\nassert     do_algebra(['//'], [4, 4, 4, 4]) == 1\nassert     do_algebra(['**'], [4, 4, 4, 4]) == 64\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert do_algebra([\"+\", 2], [5, 3]) == 8\nassert do_algebra([\"*\", 2], [5, 3]) == 10\nassert do_algebra([\"-\", 2], [5, 3]) == 3\nassert do_algebra([\"//\", 2], [5, 3]) == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     do_algebra([ \"add\", \"add\", \"add\" ], [ 1, 2, 3 ]) == 6\nassert     do_algebra([ \"sub\", \"sub\", \"sub\" ], [ 1, 2, 3 ]) == -6\nassert     do_algebra([ \"mul\", \"mul\", \"mul\" ], [ 1, 2, 3 ]) == 6\nassert     do_algebra([ \"div\", \"div\", \"div\" ], [ 1, 2, 3 ]) == 0\nassert     do_algebra([ \"exp\", \"exp\", \"exp\" ], [ 1, 2, 3 ]) == 81\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     do_algebra([1, 2, 3], [2, 3, 4]) == 6\nassert     do_algebra([1, 2], [2, 3]) == 2\nassert     do_algebra([1], [2, 3]) == 2\nassert     do_algebra([1, 3, 5], [2, 4]) == 4\nassert     do_algebra([1, 3, 5], [2, 3, 4]) == 3\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     do_algebra([\"+\", \"*\"], [2, 3, 4]) == 14\nassert     do_algebra([\"+\", \"*\"], [2, 3, 4, 5]) == 22\nassert     do_algebra([\"+\", \"*\"], [2, 3, 4, 5, 6]) == 40\nassert     do_algebra([\"+\", \"*\"], [1, 2, 3, 4, 5, 6]) == 21\nassert     do_algebra([\"-\", \"*\"], [2, 3, 4]) == 0\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [1, 2]) == 1 - 2\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 0]) == 1 + 0\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 0, 2]) == 1 + 0 + 2\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 0, 2]) == 2 - 0 + 2\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 0]) == 1 + 2 - 0\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(\"Hello World\") == \"World Hello\"\nassert     solve(\"HELLO WORLD\") == \"WORLd HELLO\"\nassert     solve(\"heLLo WoRlD\") == \"WORlD dHeLLo\"\nassert     solve(\"Hi there\") == \"There Hi\"\nassert     solve(\"123456789\") == \"987654321\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(\"abCd\") == \"dCba\"\nassert     solve(\"ABcd\") == \"CDba\"\nassert     solve(\"AbCd\") == \"Cdba\"\nassert     solve(\"\") == \"\"\nassert     solve(\"a\") == \"a\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve(\"hello\") == \"elohh\"\nassert     solve(\"THE\") == \"tHE\"\nassert     solve(\"coOL\") == \"lOc\"\nassert     solve(\"\") == \"\"\nassert     solve(\"Ox\") == \"xOx\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solve('rY lNo') == 'rY lNo'\nassert     solve('cY CRi') == 'cY CRi'\nassert     solve('lY U No') == 'lY U No'\nassert     solve('Reverse Y') == 'Reverse Y'\nassert     solve('Reversi') == 'Reversi'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve(\"Hello World\") == \"OLLEH\"\nassert     solve(\"What Is Your Name?\") == \"YOnAruH\"\nassert     solve(\"\") == \"\"\nassert     solve(\" \") == \" \"\nassert     solve(\"H\") == \"H\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\"\"\""
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(\"\") == \"\"\nassert     solve(\"It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way \u2013 in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.\".lower()) == \"it was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way \u2013 in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only.\".upper()\n\ndef solve(s):\n    s = s.lower()\n    if s == \"\":\n        return \"\"\n    s = list(s)\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if s[i] == c:\n                s[i] = c.upper()\n            else:\n                s[i] = c.lower()\n    return \"\".join(s)\n\nassert solve(\"\") == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(\"abcdef\") == \"fedcba\"\nassert     solve(\"aAbBcC\") == \"cCbaBb\"\nassert     solve(\"PqrStU\") == \"STUqPr\"\nassert     solve(\"Hello World\") == \"WorldHello\"\nassert     solve(\"This is a test\") == \"tHis si a etT\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(\"abAB\") == \"ABAB\"\nassert     solve(\"abba\") == \"abba\"\nassert     solve(\"abcd\") == \"dcba\"\nassert     solve(\"Z\") == \"Z\"\nassert     solve(\"AB\") == \"AB\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\") == \"lORem PUP sIT amET, CONsEcT iT epRSIing elIt\"\nassert     solve(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n\\n Lorem ipsum dolor sit amet, consectetur adipiscing elit.\") == \"lORem PUP sIT amET, CONsEcT iT epRSIing elIt\"\nassert     solve(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\") == \"lORem PUP sIT amET, CONsEcT iT epRSIing elIt\"\n\nassert     solve(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\") == \"lORem PUP sIT amET, CONsEcT iT epRSIing elIt\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_md5('test') == '9e107d9d372bb6826bd81d3542a419d6'\nassert     string_to_md5('') == None\nassert     string_to_md5(' ') == None\nassert     string_to_md5('a') == 'b6f5902042a290c57dae2cba9275a2ee'\nassert     string_to_md5('a b') == 'b6f5902042a290c57dae2cba9275a2ee'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_md5('a') == 'e9d1b14cc31b9b9d54b0154c31a9b8c'\nassert     string_to_md5('ab') == '93734f3e4d4c2b1d8b4ca731bba9b09'\nassert     string_to_md5('abc') == 'cdd966f8b48eee44ebeab45ef8a1441b'\nassert     string_to_md5('abcdef') == 'ab3557eb40d5ba3c4c5a2f6d6810bcaa'\nassert     string_to_md5('abcdefgh') == '64c0a0f4c3a92d12d2d9a9df8ad3c2e'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_md5('hello') == '5b3e39c7e6a973dbbf07f3cbb08bf7f'\nassert     string_to_md5('') is None\n\ndef main():\n    \"\"\"\n    Example of the hash functions.\n    \"\"\"\n    hash_functions = ['md5','sha1','sha224','sha256','sha384','sha512']\n    text = 'Hello World'\n    for hash_function in hash_functions:\n        hash_value = hash_function(text)\n        print '{0:6s} {1:12s} {2:s}'.format(hash_function, hash_value, text)\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('a') == '937e45183979241d2c781738d6e60e70'\nassert     string_to_md5('ABC') == 'bbce9f92b6ec3c944d5af7b1ab6c46e2'"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('test') == '91cf43b24a5f3d8f1c4c1fbcb58e33'\nassert     string_to_md5('helloworld') == '57e1e29d6b35ddacf3b5aabdb0b25de'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_to_md5('0123456789') == 'c792b8d4c4f0f81faf40e262961a6adc'\nassert     string_to_md5('a') == 'c792b8d4c4f0f81faf40e262961a6adc'\nassert     string_to_md5('') == None\nassert     string_to_md5('abc') == 'f8c7e9ef05b5f6c5c8c02bce5a25bfc9'\nassert     string_to_md5('abcdef') == '10fb7c47e566e2c9ecaa0c8f0b73e8f'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('abc') == '8bd3c014da8f7d0e6c564fdf6e59a3ed'\nassert     string_to_md5('abc') == string_to_md5('abc')\nassert     string_to_md5('abc') == string_to_md5('abc')\nassert     string_to_md5('abc') == string_to_md5('abc')\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_to_md5('this is a string') == 'b2d63934d3b5e90c7a3b8e3d07b07ef'\nassert     string_to_md5('') == None\nassert     string_to_md5(' ') == None\nassert     string_to_md5('a') == 'f39e7e60cd17e7d5cb4d54af3e7d7ba'\nassert     string_to_md5('test') == 'f70d1f14f094dee6a66a9e6e1a06b62'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_to_md5('')    == None\nassert     string_to_md5('foo') == 'f8b9a9ba49d6c4b2f632ee07922dca4d'\n\ndef md5_to_string(text):\n    \"\"\"\n    Given a md5 hash 'text', return its string equivalent.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert     generate_integers(1, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert     generate_integers(100, 1000) == [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\nassert     generate_integers(1, 1) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     generate_integers(2, 5) == [2, 4]\nassert     generate_integers(2, 7) == [2, 4, 6]\nassert     generate_integers(10, 13) == [10, 12]"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     generate_integers(1, 10)    == [2, 4, 6, 8]\nassert     generate_integers(10, 20)    == [10, 12, 14, 16, 18, 20]\nassert     generate_integers(100, 200)    == [100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200]\n\ndef generate_binary(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the binary digits between a and b,\n    in ascending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     generate_integers(5, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(10, 15) == [12, 14]\nassert     generate_integers(0, 22) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\nassert     generate_integers(-1, -3) == []\n\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     generate_integers(1,5) == [2, 4]\nassert     generate_integers(4,8) == [4, 6, 8]\nassert     generate_integers(1,2) == []\nassert     generate_integers(1,5) == [2, 4]\nassert     generate_integers(4,8) == [4, 6, 8]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     generate_integers(5, 10) == [4, 6, 8, 10]\nassert generate_integers(4, 6) == [6, 8, 10]\nassert generate_integers(10, 4) == [4, 8, 6]\nassert generate_integers(4, 5) == [4]\nassert generate_integers(4, 7) == [4, 6]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     generate_integers(1, 100) == list(range(2, 100, 2))\nassert     generate_integers(100, 1000) == list(range(100, 1000, 2))\nassert     generate_integers(1000, 10000) == list(range(1000, 10000, 2))\nassert     generate_integers(0, 2) == [0]\nassert     generate_integers(0, 0) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef generate_reversed_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(100, 200) == [104, 106, 108, 110, 112, 114, 116, 118, 120, 122]\nassert     generate_integers(50, 100) == [54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\nassert     generate_integers(101, 1) == [102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208]\n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    pass\n"
    }
]