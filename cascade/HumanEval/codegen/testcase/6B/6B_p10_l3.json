[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 1.0)\nassert     has_close_elements([1, 2, 3, 4, 5], 0.1)\nassert     has_close_elements([1, 2, 3, 4, 5], 0.01)\nassert     has_close_elements([1, 2, 3, 4, 5], 0.001)\nassert     not has_close_elements([1, 2, 3, 4, 5], 0.0001)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         has_close_elements([0, 0, 0, 0], 0.001) == True\nassert         has_close_elements([0, 0, 0, 0], 0.01) == False\nassert         has_close_elements([0.1, 0.2, 0.3, 0.4], 0.01) == True\nassert         has_close_elements([0.1, 0.2, 0.3, 0.4], 0.3) == True\nassert         has_close_elements([0.1, 0.2, 0.3, 0.4], 0.8) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     has_close_elements([1.0, 5.0, 3.0, 7.0, 7.0], 4.0)\nassert not has_close_elements([1.0, 5.0, 3.0, 7.0, 7.0], 5.0)\nassert not has_close_elements([1.0, 5.0, 3.0, 7.0, 7.0], 5.1)\nassert not has_close_elements([1.0, 5.0, 3.0, 7.0, 7.0], 5.2)\nassert not has_close_elements([1.0, 5.0, 3.0, 7.0, 7.0], 1.0)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     has_close_elements([-1.0, 0.0, 0.1, 0.5, 1.0], 0.2) == True\nassert     has_close_elements([-1.0, 0.0, 0.1, 0.5, 1.0], 0.0) == True\nassert     has_close_elements([-1.0, 0.0, 0.1, 0.5, 1.0], 0.01) == False\nassert     has_close_elements([-1.0, 0.0, 0.1, 0.5, 1.0], 1.0) == False\nassert     has_close_elements([-1.0, 0.0, 0.1, 0.5, 1.0], 1.1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5], 1.5)\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5], 1.4)\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5], 1.3)\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5], 1.2)\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5], 1.1)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         has_close_elements([0.1, 0.4, 0.5, 0.6], 0.2)\nassert         has_close_elements([0.1, 0.4, 0.5, 0.6], 0.5)\nassert         not has_close_elements([0.1, 0.4, 0.5, 0.6], 0.3)\nassert         not has_close_elements([0.1, 0.4, 0.5, 0.6], 0.4)\nassert         not has_close_elements([0.1, 0.4, 0.5, 0.6], 0.1)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3], 0.1) is False\nassert     has_close_elements([1, 2, 3], 0.2) is False\nassert     has_close_elements([1, 2, 3], 0.3) is False\nassert     has_close_elements([1, 2, 3], 0.4) is True\nassert     has_close_elements([1, 2, 3], 0.5) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     has_close_elements([1, 2, 3], 2)\nassert     not has_close_elements([1, 2, 3], 1)\nassert     not has_close_elements([1, 2, 3], 4)\nassert     not has_close_elements([1, 2, 3], 0)\nassert     has_close_elements([1, 2, 3], 3)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0, 4.0], 1.0)\nassert     not has_close_elements([1.0, 2.0, 3.0, 4.0], 0.5)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 2)\nassert     not has_close_elements([1, 2, 3, 4, 5], 1)\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7], 1)\nassert     not has_close_elements([1, 2, 3, 4, 5, 6, 7], 2)\nassert     not has_close_elements([1, 2, 3, 4, 5, 6, 7], 3)\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('((()))') == ['((()))']\nassert     separate_paren_groups('(())') == ['(())']\nassert     separate_paren_groups('((()))()') == ['((()))()']\nassert     separate_paren_groups('((()))  (())(())(') == ['((()))()', '(())(())(']\nassert     separate_paren_groups('(((()))))') == ['(((()))))']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"(()(())())\") == [\"(()()())\", \"(()())\"]\nassert     separate_paren_groups(\"(()()\") == [\"(()()\", \"(())\"]\nassert     separate_paren_groups(\")(((((((())((((((())()))))))))))\")) == [\"()(())\", \"()()()\", \"((()()))\", \"()()()\"]\nassert     separate_paren_groups(\"()()(()\") == [\"()\", \"()(())\"]\nassert     separate_paren_groups(\"(())((()))\") == [\"(())(()\", \"(())\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"(((abc)))\")    ==    [\"((abc))\"]\nassert     separate_paren_groups(\"(()())()\")    ==    [\"((()))\", \"(()())\"]\nassert     separate_paren_groups(\"()(()\")    ==    [\"()(())\", \"(()())\"]\nassert     separate_paren_groups(\"(()))((()\")    ==    [\"((()))\", \"(()())\"]\nassert     separate_paren_groups(\"(()\")    ==     [\"((()))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"(Hello (world))\") == [\"Hello\", \"world\"]\nassert     separate_paren_groups(\"(Hello (world))(asdf)\") == [\"Hello\", \"world\", \"asdf\"]\nassert     separate_paren_groups(\"(asdf)\") == [\"asdf\"]\nassert     separate_paren_groups(\"(Hello (world))(asdf)(a)(b)\") == [\"Hello\", \"world\", \"asdf\", \"a\", \"b\"]\nassert     separate_paren_groups(\"(Hello (world))((asdf) (cat))\") == [\"Hello\", \"world\", \"(asdf) (cat)\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     separate_paren_groups('()(()()') == ['(())', '(())']\nassert     separate_paren_groups('(()()(()') == ['(()())', '(()())']\nassert     separate_paren_groups(')()())') == ['()', '()', '()', '()', '()', '()', '()']\nassert     separate_paren_groups('())()()())') == ['(())', '(())', '()', '()', '()', '()', '()']\nassert     separate_paren_groups('(((((((()))))))') == ['(((((((()))))))']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"(a(b(c)d)e)f)\") == [\"abcd\", \"e\", \"f\"]\nassert     separate_paren_groups(\"a(b(c(d))e)f)\") == [\"abcdef\", \"e\", \"f\"]\nassert     separate_paren_groups(\"(a (b (c ) d) e)\") == [\"a \", \"b\", \"c\", \" d\", \"e\"]\nassert     separate_paren_groups(\"(a )( b (c ) d) e)\") == [\"a\", \" b\", \"c\", \" d\", \"e\"]\nassert     separate_paren_groups(\"(a(b(c(d)e)f))\") == [\"abcdef\", \"f\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"(a + (b * c))\") == [\"((a + b) * c)\", \"(a + (b * c))\"]\nassert     separate_paren_groups(\"(a + (b * c)) + (d + (e * f))\") == [\"((a + b) * c)\", \"(d + (e * f))\"]\nassert     separate_paren_groups(\"(a + (b * c)) + (d + (e * f))\") == [\"((a + b) * c)\", \"(d + (e * f))\"]\nassert     separate_paren_groups(\"(a + (b * c)) + (d + (e * f)\") == [\"((a + b) * c)\", \"(d + (e * f))\"]\nassert     separate_paren_groups(\"(a + (b * c)) + (d + (e * f))\") == [\"((a + b) * c)\", \"(d + (e * f))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"a(b(c)d)e\")    ==     [\"a(b(c)d)e\", \"a\", \"b(c)\", \"d\"]\nassert     separate_paren_groups(\"a ((b(c)d) e )\")    ==     [\"a (b(c)d) e \", \"a\", \"b(c)\", \"d\", \"e\"]\nassert     separate_paren_groups(\"a b(c)d\")        ==     [\"a b(c)d\", \"a\", \"b(c)\", \"d\"]\nassert     separate_paren_groups(\"a b (c) d\")    ==     [\"a b (c) d\", \"a\", \"b\", \"c\", \"d\"]\nassert     separate_paren_groups(\"a (b(c)d) e\")    ==     [\"a (b(c)d) e\", \"a\", \"b(c)\", \"d\", \"e\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     separate_paren_groups('ab(c)d') == ['ab(c)d']\nassert     separate_paren_groups('a(bc)d') == ['a(bc)d']\nassert     separate_paren_groups('(a(b(c)d)e)f') == ['(a(b(c)d)e)f']\nassert     separate_paren_groups('a(b(c)d)e') == ['a(b(c)d)e']\nassert     separate_paren_groups('(a(b(c)d)e)') == ['(a(b(c)d)e)']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     separate_paren_groups('a(b(c)d)e') == ['a(b(c)d)e']\nassert     separate_paren_groups('(a(b(c)d)e') == ['(a(b(c)d)e']\nassert     separate_paren_groups('(a )( b) ( c)') == ['( a) ( b) ( c)']\nassert     separate_paren_groups('((a)) ( ((b)) ) ( ((c))') == ['((a))', '( ((b)) )', '( ((c))']\nassert     separate_paren_groups('( ( a ( b ) ( c ) ) )') == ['( ( a ( b ) ( c ) ) )']\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     truncate_number(5.6) == 5.6\nassert     truncate_number(5.7) == 5.7\nassert     truncate_number(5.8) == 5.8\nassert     truncate_number(6.9) == 6.9\nassert     truncate_number(7.0) == 7.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     truncate_number(0.9) == 0.9\nassert     truncate_number(0.1) == 0.1\nassert     truncate_number(1.1) == 1.1\nassert     truncate_number(1.9) == 1.9\nassert     truncate_number(0.99) == 0.99\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     truncate_number(11.33333) == 11.33\nassert     truncate_number(11.33333) == 11\nassert     truncate_number(1.23456789) == 1.23456789\nassert     truncate_number(1.23456789) == 1.23456789\nassert     truncate_number(1.2345678901) == 1.23456789\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     truncate_number(3.14)    == 3.14\nassert     truncate_number(3.14159) == 3.14\nassert     truncate_number(4.00) == 4.0\nassert     truncate_number(4.5) == 4.5\nassert     truncate_number(4.999999) == 4.999999\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         truncate_number(9.99999) == truncate_number(9.99999)\nassert         truncate_number(9.9999) == truncate_number(9.9999)\nassert         truncate_number(9.99) == truncate_number(9.99)\nassert         truncate_number(9) == truncate_number(9)\nassert         truncate_number(0) == truncate_number(0)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     truncate_number(0.99) == 0.99\nassert     truncate_number(1.01) == 1.0\nassert     truncate_number(1.10) == 1.0\nassert     truncate_number(1.99) == 1.0\nassert     truncate_number(2.01) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     truncate_number(5.123456789) == 5.12345\nassert     truncate_number(5.5123456789) == 5.5\nassert     truncate_number(5.1234) == 5\nassert     truncate_number(5.123) == 5\nassert     truncate_number(5.12) == 5\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     truncate_number(0.1234) == 0.1234\nassert     truncate_number(0.12345) == 0.123\nassert     truncate_number(0.123456) == 0.123\nassert     truncate_number(0.123456789012345) == 0.12345\nassert     truncate_number(0.1234567890123456789012345) == 0.12345\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (truncate_number(4.23) == 4)\nassert     (truncate_number(0.00) == 0)\nassert     (truncate_number(2.14) == 2)\nassert     (truncate_number(10.0) == 10)\nassert     (truncate_number(0.7) == 0)\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     truncate_number(12.34) == 0.34\nassert     truncate_number(12.34) == 0.34\nassert     truncate_number(12.35) == 0.35\nassert     truncate_number(12.36) == 0.36\nassert     truncate_number(12.37) == 0.37\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_zero([1, 2, 3]) == False\nassert     below_zero([1, 2, -3]) == True\nassert     below_zero([3, 4, 3, 4, 3, 4, 3, 2, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_zero([-1, 1, 2, 3, 4, 5]) == True\nassert     below_zero([-1, 1, 2, -3, 4, -5]) == True\nassert     below_zero([-1, 1, 2, 3, 4, -5]) == False\nassert     below_zero([-1, -1, -1, -1, -1]) == False\n\n\ndef contains_pair_with_given_sum(arr: List[int], given_sum: int) -> bool:\n    \"\"\" Given an array of integers and a given sum, the task is to find if there is a pair of elements\n    in the array whose sum is equal to the given sum.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_zero([10, 10, 10, 0]) is True\nassert     below_zero([10, 10, 10, -1]) is False\nassert     below_zero([10, -10, 10]) is True\nassert     below_zero([10, -10, 10, 10]) is False\nassert     below_zero([10, -10, 10, -10]) is True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_zero([5, 2, 3, 2, 1, 2, 5]) == True\nassert     below_zero([5, 2, -3, 2, 1, 2, 5]) == False\nassert     below_zero([5, 2, 3, -2, 1, 2, 5]) == True\nassert     below_zero([5, 2, 3, 2, -1, 2, 5]) == False\nassert     below_zero([5, 2, 3, 2, 1, -2, 5]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_zero([10, 10, 10, 10]) == False, '10'\nassert     below_zero([10, -10, 10, 10]) == True, '-10'\nassert     below_zero([10, 10, -10, 10]) == True, '10'\nassert     below_zero([10, 10, 10, -10]) == True, '10'\nassert     below_zero([10, -10, -10, 10]) == True, '10'\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     below_zero([10, 5, 3, 4, 7, 9]) == True\nassert     below_zero([10, 5, 3, 4, 7, 8]) == False\nassert     below_zero([0]) == False\nassert     below_zero([0, 10]) == True\nassert     below_zero([-10]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) == False\nassert     below_zero([1, 2, 3, 4, -5]) == True\nassert     below_zero([1, 2, -3, 4, -5]) == True\nassert     below_zero([1, 2, 3, -4, -5]) == True\nassert     below_zero([1, -2, 3, 4, -5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_zero([100, -99, 50, 100]) == False\nassert     below_zero([100, -99, 50, -99]) == True\nassert     below_zero([100, -99, 50, 0]) == True\nassert     below_zero([100, -99, 50, 101]) == False\n\n\ndef below_zero_ii(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_zero([1,2,3,-4,5]) == False\nassert     below_zero([1,2,-3,4,5]) == True\nassert     below_zero([1,2,3,-4,-5]) == True\n\ndef above_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account increases over zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     below_zero(\n                [\n                    [0, 2, 0],\n                    [1, 1, 1],\n                    [1, 1, 1],\n                    [1, 1, 1],\n                    [1, 1, 1],\n                    [1, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, 1],\n                    [0, 1, "
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1.0]) == 0.0\nassert     mean_absolute_deviation([1.0, 2.0, 3.0]) == 1.0\nassert     mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == 1.5\nassert     mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]) == 2.5\nassert     mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]) == 3.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([1, 3, 4]) == 1.0\nassert     mean_absolute_deviation([-1, -3, -4]) == 1.0\nassert     mean_absolute_deviation([-1, 3, 4]) == -1.0\nassert     mean_absolute_deviation([0, 0, 0]) == 0.0\nassert     mean_absolute_deviation([0, -0, 0]) == 0.0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([5, 7, 9, 1, 5, 3, 3]) == 2.888888888888889\nassert     mean_absolute_deviation([5, 4, 7, 2, 6, 5]) == 3.0\nassert     mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.5\nassert     mean_absolute_deviation([2, 5, 7, 9, 1, 2, 4, 5, 6]) == 5.0\nassert     mean_absolute_deviation([2, 1, 5, 9, 3, 7, 6, 4, 2]) == 3.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     abs(mean_absolute_deviation([1, 2, 3]) - 1.5) < 0.0000001\nassert     abs(mean_absolute_deviation([2, 4, 6]) - 2.5) < 0.0000001\nassert     abs(mean_absolute_deviation([-1, -2, -3]) - 1.5) < 0.0000001\nassert     abs(mean_absolute_deviation([0, 0, 0]) - 0) < 0.0000001\nassert     abs(mean_absolute_deviation([3, 4, 5]) - 2.5) < 0.0000001\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 1.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 4.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 5.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([3.5, 2.5, 0.5, 3.5, 7.5]) == 1.9\nassert     mean_absolute_deviation([-5.5, -4.5, -3.5, -2.5, -1.5, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5]) == 2.5\nassert     mean_absolute_deviation([0.5, 1.5, 2.5, 3.5, 4.5, 5.5]) == 1.5\nassert     mean_absolute_deviation([2.5, 3.5, 4.5, 5.5]) == 1.5\nassert     mean_absolute_deviation([-5.5, -4.5, -3.5, -2.5, -1.5]) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     round(mean_absolute_deviation([-3.0, 1.0, 8.0]), 6) == 4.333333333\nassert     round(mean_absolute_deviation([-3.0, 1.0, -8.0]), 6) == 4.333333333\nassert     round(mean_absolute_deviation([1.0, 1.0, 1.0, 1.0]), 6) == 0.0\nassert     round(mean_absolute_deviation([-1.0, -1.0, -1.0, -1.0]), 6) == 0.0\nassert     round(mean_absolute_deviation([1.0, -1.0, -1.0, -1.0]), 6) == 0.0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nmean_absolute_deviation([1.0]) == 0.0\nassert \nmean_absolute_deviation([-1.0]) == 0.0\nassert \nmean_absolute_deviation([-2.0, 2.0, 2.0, 2.0, 2.0]) == 0.0\nassert \nmean_absolute_deviation([1.0, 1.0, 1.0, 1.0, 1.0]) == 0.0\nassert \nmean_absolute_deviation([-1.0, 1.0, 1.0, 1.0, 1.0]) == 0.0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 3.0\nassert     mean_absolute_deviation([2.0, 4.0, 6.0, 8.0]) == 4.0\nassert     mean_absolute_deviation([2.0, 4.0, 6.0, 8.0, 9.0, 11.0, 13.0, 15.0]) == 5.0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([1,2,3,4,5]) == 0.8189534989909551\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10]) == 0.5928255969061285\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 0.2910472164872\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 0.16761722621376193\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 0.0546452326012062\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersperse([1, 2, 3], \"*\") == [1, \"*\", 2, \"*\", 3]\nassert     intersperse([1, 2, 3], \"&\") == [1, \"&\", 2, \"&\", 3]\nassert     intersperse([1, 2, 3], \"0\") == [1, \"0\", 2, \"0\", 3]\nassert     intersperse([1, 2, 3], \"1\") == [1, \"1\", 2, \"1\", 3]\nassert     intersperse([1, 2, 3], \"2\") == [1, \"2\", 2, \"2\", 3]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersperse(numbers=[1,2,3,4,5], delimeter=10) == [1,10,2,10,3,10,4,10,5]\nassert     intersperse(numbers=[1,2,3], delimeter=10) == [1,10,2,10,3]\nassert     intersperse(numbers=[], delimeter=10) == []\nassert     intersperse(numbers=[1], delimeter=10) == [1,10]\n\n\ndef chunks(numbers: List[int], chunk_size: int) -> List[List[int]]:\n    \"\"\" Divide the input list of integers into groups of size 'chunk_size'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3, 4], 0) == [0, 1, 0, 2, 0, 3, 0, 4]\nassert     intersperse([1, 2, 3, 4], 1) == [1, 0, 2, 0, 3, 0, 4]\nassert     intersperse([1, 2, 3, 4], 2) == [1, 2, 0, 0, 3, 0, 4]\nassert     intersperse([1, 2, 3, 4], 3) == [1, 2, 3, 0, 0, 4]\nassert     intersperse([1, 2, 3, 4], 4) == [1, 2, 3, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 2, 3, 4, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 3, 4, 5, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 3) == [1, 2, 3, 3, 4, 5, 5, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4, 4, 5, 5, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5, 5, 5, 5, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersperse(numbers=[1, 2, 3], delimeter=2) == [1, 2, 3, 2, 1]\nassert     intersperse(numbers=[1, 2, 3], delimeter=4) == [1, 2, 3, 4, 3, 2, 1]\nassert     intersperse(numbers=[1, 2, 3], delimeter=0) == [1, 2, 3]\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Determines whether the string is a palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersperse([1,2,3], 0) == [1,0,2,0,3]\nassert     intersperse([1,2,3], 4) == [1,4,2,4,3]\nassert     intersperse([1,2,3], -1) == [1,2,3,3,3]\nassert     intersperse([1,2,3,4], 0) == [1,0,2,0,3,0,4]\nassert     intersperse([1,2,3,4], -1) == [1,2,3,4,4,4,4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersperse([1, 2, 3], 2) == [1, 2, 2, 3]\nassert     intersperse([1, 2, 3, 4], 2) == [1, 2, 2, 3, 4]\nassert     intersperse([1, 2, 3, 4], 1) == [1, 2, 1, 2, 3, 4]\nassert     intersperse([1, 2, 3, 4], 5) == [1, 2, 5, 2, 3, 4]\nassert     intersperse([1, 2, 3, 4], 0) == [1, 2, 0, 2, 3, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersperse([1,2,3],1) == [1,1,2,3]\nassert     intersperse([1,2,3],0) == [0,1,2,3]\nassert     intersperse([1,2,3],2) == [1,2,2,3]\nassert     intersperse([1,2,3],3) == [1,2,3,3]\nassert     intersperse([1,2,3],4) == [1,2,3,4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersperse( [1,2,3,4,5], 1) == [1,1,2,3,4,5,5]\nassert     intersperse( [1,2,3,4,5], 2) == [1,1,2,2,3,3,4,4,5,5]\nassert     intersperse( [1,2,3,4,5], 3) == [1,1,1,2,2,3,3,3,4,4,5,5]\nassert     intersperse( [1,2,3,4,5], 4) == [1,1,1,1,2,2,3,3,3,4,4,5,5]\nassert     intersperse( [1,2,3,4,5], 5) == [1,1,1,1,1,2,2,3,3,3,4,4,5,5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersperse([1, 2, 3], 1) == [1, 1, 2, 3, 3]\nassert     intersperse([1, 2, 3], 2) == [1, 2, 2, 3, 3]\nassert     intersperse([1, 2, 3], 3) == [1, 3, 3, 3]\nassert     intersperse([1, 2, 3], 4) == [1, 4, 4, 3]\nassert     intersperse([1, 2, 3], 0) == [1, 2, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_nested_parens('(()())') == [0, 0, 1]\nassert     parse_nested_parens('((()))') == [1, 1, 1]\nassert     parse_nested_parens('(((()))') == [2, 1, 1]\nassert     parse_nested_parens('(())((()))') == [0, 0, 2]\nassert     parse_nested_parens('(()())(())') == [1, 0, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_nested_parens('()') == []\nassert     parse_nested_parens('(())') == [0]\nassert     parse_nested_parens('()()') == [0, 0]\nassert     parse_nested_parens('(()())') == [0, 0, 0]\nassert     parse_nested_parens('(()())(()())') == [0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_nested_parens('(())') == [0, 0]\nassert     parse_nested_parens('(()())') == [1, 1]\nassert     parse_nested_parens('((()))') == [2, 1]\nassert     parse_nested_parens('()()(()())') == [0, 1, 1, 1]\nassert     parse_nested_parens('(()()())') == [1, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"(()())\") == [0, 1, 2, 2, 4]\nassert     parse_nested_parens(\"(()(()))\") == [0, 1, 1, 3, 3]\nassert     parse_nested_parens(\"(()(())(()))\") == [0, 1, 1, 3, 4]\nassert     parse_nested_parens(\"(()(()())(()))\") == [0, 1, 2, 3, 5]\nassert     parse_nested_parens(\"(((())(()))))\") == [0, 1, 2, 3, 5]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(())\") == [0, 0]\nassert     parse_nested_parens(\"()()\") == [0, 1]\nassert     parse_nested_parens(\"(()(()))\") == [1, 2, 0]\nassert     parse_nested_parens(\"((()(()))())\") == [2, 2, 2, 0]\nassert     parse_nested_parens(\"()((()()))()(()())\") == [0, 3, 0, 4]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('()') == [0]\nassert     parse_nested_parens('()()') == [0, 0]\nassert     parse_nested_parens('(()') == [1]\nassert     parse_nested_parens('((()))') == [3]\nassert     parse_nested_parens('(((()))())') == [5]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"(()())\") == [1, 0]\nassert     parse_nested_parens(\"((()()))\") == [2, 1]\nassert     parse_nested_parens(\"()()()\") == [0, 0, 0]\nassert     parse_nested_parens(\"()(()())\") == [1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"((()))\") == [2]\nassert     parse_nested_parens(\"((()()))\") == [3]\nassert     parse_nested_parens(\"((()())\") == [2]\nassert     parse_nested_parens(\"((())())\") == [3]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"(()(()))\") == [2]\nassert     parse_nested_parens(\"()()\") == [0]\nassert     parse_nested_parens(\"((()())(()()))\") == [4]\nassert     parse_nested_parens(\"(((()())()))\") == [2]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"(())\") == [0, 0]\nassert     parse_nested_parens(\"((()))\") == [2, 1]\nassert     parse_nested_parens(\"(((())))\") == [3, 2]\nassert     parse_nested_parens(\"((())\") == [1, 1]\nassert     parse_nested_parens(\"((()))(())\") == [3, 3]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     len(filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 'c')) == 3\nassert     len(filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 'z')) == 0\nassert     len(filter_by_substring(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 'a')) == 6\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"this\", \"is\", \"a\", \"test\"], \"is\") == [\"this\"]\nassert     filter_by_substring([\"this\", \"is\", \"a\", \"test\"], \"st\") == [\"this\", \"is\"]\nassert     filter_by_substring([\"this\", \"is\", \"a\", \"test\"], \"es\") == [\"is\"]\nassert     filter_by_substring([\"this\", \"is\", \"a\", \"test\"], \"test\") == [\"this\", \"is\", \"a\"]\nassert     filter_by_substring([\"this\", \"is\", \"a\", \"test\"], \"ds\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_substring(['python', 'c', 'python', 'js', 'c', 'js', 'c++', 'c#', 'java', 'c', 'js', 'c', 'c++', 'c#', 'java', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', 'js', 'c', 'python', "
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \ndef test_filter_by_substring() -> None:\n    assert filter_by_substring(['a', 'b', 'c', 'e', 'd', 'f'], 'b') == ['a', 'c', 'e', 'd', 'f']\n\n\n\ndef map_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Map an input list of strings only for ones that contain given substring\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['hello', 'there', 'this is my list', 'is empty'], 'this is my') == ['hello', 'this is my list']\nassert filter_by_substring(['hello', 'there', 'this is my list', 'is empty'], 'this is my list') == ['hello', 'this is my list', 'is empty']\nassert filter_by_substring(['hello', 'there', 'this is my list', 'is empty'], 'is') == ['hello', 'there', 'this is my list']\nassert filter_by_substring(['hello', 'there', 'this is my list', 'is empty'], 'this is') == ['hello', 'this is my list']\nassert filter_by_substring(['hello', 'there', 'this is my list', 'is empty'], 'empty') == ['is empty']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"Hello\", \"world\", \"Sphinx\"], \"Sphinx\") == [\"Hello\", \"world\"]\nassert     filter_by_substring([\"Hello\", \"world\", \"Sphinx\"], \"Gogo\") == []\nassert     filter_by_substring([\"Hello\", \"world\", \"Sphinx\"], \"Hello\") == [\"Hello\", \"world\"]\n\n\ndef sort_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Sort an input list of strings based on the number of occurences of given substring\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"asd\", \"asdf\", \"asdfd\", \"asdfg\", \"asdfg\", \"asdfg\"], \"dfg\") == [\"asdfg\"]\nassert     filter_by_substring([\"asd\", \"asdf\", \"asdfd\", \"asdfg\", \"asdfg\", \"asdfg\"], \"dfg\") == [\"asdfg\"]\nassert     filter_by_substring([\"asd\", \"asdf\", \"asdfd\", \"asdfg\", \"asdfg\", \"asdfg\"], \"adsdf\") == [\"asdf\", \"asdfg\"]\nassert     filter_by_substring([\"asd\", \"asdf\", \"asdfd\", \"asdfg\", \"asdfg\", \"asdfg\"], \"adsfg\") == [\"asdfg\"]\nassert     filter_by_substring([\"asd\", \"asdf\", \"asdfd\", \"asdfg\", \"asdfg\", \"asdfg\"], \"adsfg\") == [\"asdfg\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     len(filter_by_substring([\"a\",\"b\",\"c\",\"d\",\"e\"], \"a\")) == 4\nassert     len(filter_by_substring([\"a\",\"b\",\"c\",\"d\",\"e\"], \"b\")) == 3\nassert     len(filter_by_substring([\"a\",\"b\",\"c\",\"d\",\"e\"], \"c\")) == 2\nassert     len(filter_by_substring([\"a\",\"b\",\"c\",\"d\",\"e\"], \"d\")) == 1\nassert     len(filter_by_substring([\"a\",\"b\",\"c\",\"d\",\"e\"], \"e\")) == 1\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"Hello\", \"World\", \"cat\", \"dog\", \"cow\", \"lion\"], \"lion\") == [\"cow\"]\nassert     filter_by_substring([\"Hello\", \"World\", \"cat\", \"dog\", \"cow\", \"lion\"], \"l\") == [\"cow\"]\nassert     filter_by_substring([\"Hello\", \"World\", \"cat\", \"dog\", \"cow\", \"lion\"], \"i\") == [\"cow\"]\nassert     filter_by_substring([\"Hello\", \"World\", \"cat\", \"dog\", \"cow\", \"lion\"], \"h\") == [\"Hello\", \"cat\", \"dog\", \"cow\"]\nassert     filter_by_substring([\"Hello\", \"World\", \"cat\", \"dog\", \"cow\", \"lion\"], \"k\") == [\"cow\", \"lion\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_substring(['mama', 'papa','mom'],'mom') == ['mom']\nassert     filter_by_substring(['mama', 'papa','mom'],'mama') == ['mama']\nassert     filter_by_substring(['mama', 'papa','mom'],'mom&dad') == ['mom']\nassert     filter_by_substring(['mama', 'papa','mom'], 'papa') == ['papa']\nassert     filter_by_substring(['mama', 'papa','mom'],'mama&dad') == ['mama']\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([-1, -2, -3]) == (0, -6)\nassert     sum_product([0, 0, 0, 0]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (0, 1) == sum_product([])\nassert     (0, 1) == sum_product([1, 2])\nassert     (5, 50) == sum_product([1, 2, 3, 4, 5])\nassert     (0, 1) == sum_product([-1, -2, -3, -4, -5])\nassert     (0, 1) == sum_product([-1, 0, 1, 2, 3])\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([-1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([-1, 2, 3, -4, -5]) == (15, 120)\nassert     sum_product([1, 2, 3, 0, 5]) == (3, 0)\nassert     sum_product([]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 1]) == (2, 2)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 1]) == (2, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([-1, 1, 1, -3, 3]) == (0, -6)\nassert     sum_product([-1, -2, -3]) == (-6, -6)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([0, 1, 2, 3]) == (6, 0)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_product([2, 7, 3, 4, 5, 2]) == (20, 840)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4, 5, 6, 7, 8]) == (50, 1440)\nassert     sum_product([1, 0, 1, 0, 1, 0, 1, 0]) == (3, 3)\n\n\ndef sum_matrix(matrix: List[List[int]]) -> int:\n    \"\"\" For a given 2d list of integers, return the sum of all the integers in a list.\"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 1]) == (2, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_product([1,2,3]) == (6, 6)\nassert     sum_product([-1,2,3]) == (-1, -1)\nassert     sum_product([0,0,0]) == (0, 1)\nassert     sum_product([1,2,3,4,5,6]) == (21, 120)\nassert     sum_product([]) == (0, 1)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rolling_max([7, 7, 7, 7, 7, 7, 7]) == [7, 7, 7, 7, 7, 7, 7]\nassert     rolling_max([7, 7, 7, 7, 7]) == [7, 7, 7, 7, 7]\nassert     rolling_max([7, 7, 7, 7, 7, 7, 7]) == [7, 7, 7, 7, 7, 7, 7]\nassert     rolling_max([7, 7, 7, 7, 7, 7, 8]) == [7, 7, 7, 7, 8]\nassert     rolling_max([7, 7, 7, 7, 7, 8, 7]) == [7, 7, 8, 7]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n\ndef make_matrix(rows: int, columns: int, fill: object = 0) -> List[List[object]]:\n    \"\"\" Return a matrix with rows and columns filled with fill. \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rolling_max([5, 6, 2, 10, 1, 7, 4, 11, 8]) == [10, 6, 6, 11, 10, 11, 10, 11]\nassert     rolling_max([5, 6, 2, 10, 1, 7, 4, 11, 8, 3]) == [10, 6, 6, 11, 10, 11, 10, 11]\nassert     rolling_max([5, 6, 2, 10, 1, 7, 4, 11, 8, 3, 0]) == [10, 6, 6, 11, 10, 11, 10, 11]\n\n\ndef partition(numbers: List[int]) -> Tuple[List[int], List[int]]:\n    \"\"\" Given a list of integers, return a tuple of two lists,\n    where the first list contains all the even numbers, while the second one\n    contains all the odd numbers.\n    \"\"\"\n    evens = []\n    odds = []\n    for n in numbers:\n        if n % 2 == 0:\n            evens.append(n)\n        else:\n            odds.append(n)\n    return evens, odds\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rolling_max([])         == []\nassert     rolling_max([1])         == [1]\nassert     rolling_max([1, 2, 3, 4, 5])     == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7])     == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])     == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rolling_max([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\nassert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([2, 1, 1]) == [2, 1, 1]\nassert     rolling_max([5, 4, 3, 2, 1, 0, 1, 2]) == [5, 4, 3, 2, 1, 0, 1, 2]\n\ndef quickselect(numbers: List[int], index: int) -> int:\n    \"\"\"From a given list of integers and an integer index, pick the element corresponding to the\n    given index and return it.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rolling_max([5, 3, 7, 2, 9, 1, 5])    == [5, 7, 9, 9, 9, 9, 9]\nassert     rolling_max([10, 22, 9, 32, 22])    == [10, 22, 22, 22, 22]\nassert     rolling_max([100, 22, 32, 22, 9, 1, 5])    == [100, 22, 22, 22, 22, 22, 22]\nassert     rolling_max([10, 22, 22, 22, 22])    == [10, 22, 22, 22, 22]\n\n\ndef set_intersect(sets: List[set]) -> set:\n    \"\"\" Find the intersection of all sets in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rolling_max([5, 3, 1, 4, 2]) == [5, 4, 4, 4, 4]\nassert     rolling_max([5, 3, 1, 4, 2]) == [5, 4, 4, 4, 4]\nassert     rolling_max([10, 9, 8, 7, 6]) == [10, 10, 10, 10, 10]\nassert     rolling_max([10, 9, 8, 7, 6]) == [10, 10, 10, 10, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 1, 1, 1, 1])    == [1, 1, 1, 1, 1]\nassert     rolling_max([1, 1, 1, 1, 2])    == [1, 1, 1, 2, 2]\nassert     rolling_max([1, 1, 1, 1, 2, 2, 2, 3])    == [1, 1, 1, 2, 2, 3, 3, 3]\nassert     rolling_max([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 5])    == [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5]\n\n\ndef cycle_length(cycle: List[Tuple[int, int]]) -> int:\n    \"\"\" Given a list of cycles (a cycle is a path from a given vertex to another vertex which is repeated\n    exactly once), calculate the length of the longest cycle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [3, 4, 5, 6, 7, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_palindrome(\"abc\") == \"abcba\"\nassert     make_palindrome(\"caba\") == \"cabaab\"\nassert     make_palindrome(\"cba\") == \"cba\"\nassert     make_palindrome(\"ab\") == \"a\"\nassert     make_palindrome(\"a\") == \"a\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('aba') == True\nassert     is_palindrome('abaa') == False\nassert     is_palindrome('abca') == True\n\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     make_palindrome('a') == 'a'\nassert     make_palindrome('ab') == 'aba'\nassert     make_palindrome('aba') == 'ababa'\nassert     make_palindrome('aa') == 'aa'\nassert     make_palindrome('aba') == 'aba'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_palindrome('abcba') == True\nassert     is_palindrome('ababa') == True\nassert     is_palindrome('abca') == False\nassert     is_palindrome('abab') == True\nassert     is_palindrome('abc') == False\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_palindrome(\"radar\") == \"radar\"\nassert     make_palindrome(\"racecar\") == \"racecar\"\nassert     make_palindrome(\"tacocat\") == \"tacocat\"\nassert     make_palindrome(\"azaza\") == \"azaza\"\nassert     make_palindrome(\"azzzad\") == \"azzzad\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_palindrome('racecar') == 'racecarracecar'\nassert     make_palindrome('tacocat') == 'tacocat'\nassert     make_palindrome('dog') == 'dog'\nassert     make_palindrome('some') =='some'\nassert     make_palindrome('abc') == 'abc'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_palindrome('aa') == 'aba'\nassert     make_palindrome('aab') == 'aba'\nassert     make_palindrome('abc') == 'abc'\nassert     make_palindrome('abcab') == 'abacaba'\nassert     make_palindrome('abcabd') == 'abcdabdcba'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_palindrome('abcdcba') == 'dcbaabcd'\nassert     make_palindrome('abc') == 'abcba'\nassert     make_palindrome('abcdef') == 'efabcdf'\n\n\ndef is_rotation(string1: str, string2: str) -> bool:\n    \"\"\"\n    Test if string1 is a rotation of string2.\n    Algorithm idea:\n    - Use a hash table to store each character in string2 as a key, with the number of times that character appears as value.\n    - Loop through the length of string2.\n    - Check if the character in string2 is in the hash table, and if the count of that character is greater than 1.\n    - If so, then string2 is not a rotation of string1.\n    - If all characters are matched, then string2 is a rotation of string1.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_palindrome(\"qabc\") == \"qabcqabc\"\nassert     make_palindrome(\"abc\") == \"abcabc\"\nassert     make_palindrome(\"ba\") == \"baa\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"a\"*1000) == \"a\"*1000\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_palindrome(make_palindrome(\"a\")) is True\nassert     is_palindrome(make_palindrome(\"aac\")) is True\nassert     is_palindrome(make_palindrome(\"caba\")) is False\nassert     is_palindrome(make_palindrome(\"acccc\")) is True\nassert     is_palindrome(make_palindrome(\"abcd\")) is False\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_xor('10011011', '11011101') ==     '01101110'\nassert     string_xor('01101110', '11011101') ==     '10011011'\nassert     string_xor('10011011', '10011011') ==     '00'\nassert     string_xor('10011011', '11011101') ==     '11011101'\nassert     string_xor('11011101', '10011011') ==     '11011101'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_xor(\"10011\", \"10101\") == \"000000\"\nassert     string_xor(\"1010\", \"10101\") == \"10001\"\nassert     string_xor(\"11111\", \"000111\") == \"011011\"\nassert     string_xor(\"011011\", \"11111\") == \"000000\"\n\n\ndef ascii_rotate(s: str, n: int) -> str:\n    \"\"\" Input is a string of length 1.\n    Return the ASCII value of the rotated input string by n bits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_xor(\"0\", \"0\") == \"0\"\nassert     string_xor(\"0\", \"1\") == \"1\"\nassert     string_xor(\"1\", \"0\") == \"1\"\nassert     string_xor(\"1\", \"1\") == \"0\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_xor(\"10001000100010000\", \"000101011011001110\") == \"01010100110001000\"\nassert     string_xor(\"011011101100011010\", \"000101011011001110\") == \"10111101110001111\"\nassert     string_xor(\"00101101101001011\", \"000101011011001110\") == \"01011011110111011\"\n\n\ndef find_nth_sequence(string: str, seq_str: str, n: int) -> int:\n    \"\"\"\n    Find the nth sequence of a string.\n    Inputs are:\n    string: the string to search in\n    seq_str: the string to find\n    n: the nth sequence\n\n    Outputs are:\n    the index of the nth sequence of seq_str\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_xor('1101', '0000') == '000000'\nassert     string_xor('0101', '0101') == '000000'\nassert     string_xor('1011', '1101') == '1101'\nassert     string_xor('0000', '0000') == '0000'\nassert     string_xor('1111', '1111') == '0000'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_xor('00110001', '00010001') == '01011101'\nassert     string_xor('10101011', '01011101') == '01011101'\nassert     string_xor('00010001', '01011101') == '10101011'\nassert     string_xor('01011101', '00010001') == '10101011'\nassert     string_xor('00000000', '11111111') == '00000000'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n    \n\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\"\n    Input integer n and output the sum of its digits\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_xor(\"1100\", \"1101\") == \"0101\"\nassert     string_xor(\"1100\", \"1110\") == \"0110\"\nassert     string_xor(\"1100\", \"1111\") == \"0111\"\nassert     string_xor(\"1010\", \"1011\") == \"0101\"\nassert     string_xor(\"1010\", \"1100\") == \"1011\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_xor(b\"\\x00\", b\"\\x00\") == b\"\"\nassert     string_xor(b\"\\x00\", b\"\\x01\") == b\"\\x01\"\nassert     string_xor(b\"\\x01\", b\"\\x00\") == b\"\\x01\"\nassert     string_xor(b\"\\x01\", b\"\\x01\") == b\"\"\nassert     string_xor(b\"\\x01\\x01\\x01\", b\"\\x01\\x01\\x01\") == b\"\\x00\\x00\\x00\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     longest([\"abcdef\", \"uvwxyz\", \"abcd\"]) == \"abcd\"\nassert     longest([\"abcdef\", \"uvwxyz\"]) == \"uvwxyz\"\nassert     longest([\"abcd\", \"uvwxyz\"]) == \"abcd\"\nassert     longest([]) == None\nassert     longest([\"a\", \"b\", \"c\"]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     longest(['ss', 'c']) == 'c'\nassert     longest(['a','ss']) =='ss'\nassert     longest(['ss', 'asdf']) == 'asdf'\nassert     longest(['asdf','ss']) =='ss'\nassert     longest(['asdf','sdf','ss']) =='sdf'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     longest(['ab', 'abc', 'abcd']) == 'abcd'\nassert     longest(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert     longest([]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     longest([\n        \"at\",\n        \"ball\",\n        \"cat\",\n        \"dog\",\n        \"elephant\",\n        \"fish\"\n    ]) == \"fish\"\nassert     longest([\"cato\", \"catto\", \"cattacatto\"]) == \"cattacatto\"\nassert     longest([]) == None\nassert     longest([1, 2, 3, 4, 5]) == None\nassert     longest([\"\", \"\", \"\", \"\"]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     longest(['a', 'abc', 'abcd']) == 'abc'\nassert     longest(['abc', 'abcd']) == 'abc'\nassert     longest(['a', 'abc', 'abcd', 'abcd']) == 'abcd'\nassert     longest(['abc', 'a', 'abcd', 'abcd', 'abcd', 'abcd', 'abc', 'abc', 'abcd', 'abcd', 'abcd', 'abc', 'abc', 'abc']) == 'abc'\nassert     longest(['abc', 'a', 'abcd', 'abcd', 'abcd', 'abcd', 'abc', 'abc', 'abcd', 'abcd', 'abcd', 'abc', 'abc', 'abc']) == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     longest([\"apples\", \"oranges\", \"bananas\"]) == \"oranges\"\nassert     longest([\"apples\", \"oranges\", \"bananas\", \"\"]) == \"bananas\"\nassert     longest([]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\nassert longest([\"hello\", \"there\", \"hi\"]) == \"hi\"\nassert longest([\"hello\", \"there\", \"hi\", \"bye\"]) == \"bye\"\nassert longest([\"hello\", \"there\", \"hi\", \"bye\", \"goodbye\", \"hello\"]) == \"hello\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     longest([\"abc\", \"a\", \"abcdefg\", \"bcd\", \"cdefg\"]) == \"abcdefg\"\nassert     longest([\"abc\", \"a\", \"abcdefg\", \"bcd\", \"cdefg\", \"a\"]) == \"abcdefg\"\nassert     longest([\"abc\", \"a\", \"abcdefg\", \"bcd\", \"cdefg\", \"ab\", \"a\"]) == \"abcdefg\"\nassert     longest([\"abc\", \"a\", \"abcdefg\", \"bcd\", \"cdefg\", \"a\", \"ab\"]) == \"abcdefg\"\nassert     longest([\"abc\", \"a\", \"abcdefg\", \"bcd\", \"cdefg\", \"a\", \"ab\", \"a\"]) == \"abcdefg\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     longest([\"abcd\", \"dcba\", \"dcba\", \"dcba\"]) == \"dcba\"\nassert     longest([\"abcd\", \"dcba\", \"dcba\", \"dcba\", \"abcd\"]) == \"abcd\"\nassert     longest([\"abcd\", \"dcba\", \"dcba\", \"dcba\", \"dcba\", \"abcd\"]) == \"dcba\"\nassert     longest([]) is None\nassert     longest([\"abcd\", \"dcba\", \"dcba\"]) == \"dcba\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(5, 0) == 1\nassert     greatest_common_divisor(0, 5) == 1\nassert     greatest_common_divisor(3, 3) == 3\nassert     greatest_common_divisor(0, 0) == 1\nassert     greatest_common_divisor(3, 6) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(10, 30) == 10\nassert     greatest_common_divisor(7, 9) == 1\n\ndef smallest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the smallest common divisor of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert ______________ is _____________\n\ndef euler_totient(n: int) -> int:\n    \"\"\" Return the euler totient of non-negative integer n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(10, 22) == 2\nassert     greatest_common_divisor(10, 24) == 4\nassert     greatest_common_divisor(11, 22) == 1\nassert     greatest_common_divisor(12, 22) == 2\nassert     greatest_common_divisor(100, 24) == 4\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(17, 3) == 1\nassert     greatest_common_divisor(11, 11) == 11\nassert     greatest_common_divisor(100, 25) == 25\n\ndef get_greatest_common_divisor_of_integers_by_division(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert _________ == greatest_common_divisor(25, 25)\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     greatest_common_divisor(4, 4) == 4\nassert     greatest_common_divisor(2, 4) == 2\nassert     greatest_common_divisor(2, 6) == 2\nassert     greatest_common_divisor(3, 6) == 3\nassert     greatest_common_divisor(6, 3) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(7, 5) == 1\nassert     greatest_common_divisor(10, 5) == 5\nassert     greatest_common_divisor(7, 7) == 1\nassert     greatest_common_divisor(0, 0) == 0\nassert     greatest_common_divisor(7, 1) == 7\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(6, 4) == 2\nassert     greatest_common_divisor(5, 15) == 1\nassert     greatest_common_divisor(1, 1) == 1\nassert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(2, 1) == 2\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_prefixes('civic') == ['c', 'c', '', '', 'v', '', 'v', 'ic', '', 'v', '', 'c', '', '', '', '', 'v', '', '', '', '', '', '', 'ic', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', "
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"ant\") == [\"a\", \"an\", \"ant\"]\nassert     all_prefixes(\"i\") == [\"i\"]\nassert     all_prefixes(\"i \") == [\"i\"]\nassert     all_prefixes(\"i \") == [\"i\"]\nassert     all_prefixes(\"i \") == [\"i\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_prefixes(\"aaab\") == [\"a\"]\nassert     all_prefixes(\"aab\") == [\"a\", \"b\"]\nassert     all_prefixes(\"ab\") == [\"a\", \"b\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"b\", \"c\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"florida\") == ['f', 'fl', 'flor', 'flora', 'flora', 'florida']\nassert     all_prefixes(\"alaska\") == ['a', 'al', 'alaska', 'alaska', 'alaska', 'alaska']\nassert     all_prefixes(\"madagascar\") == ['m','mad','madagascar','madagascar','madagascar','madagascar']\nassert     all_prefixes(\"alabama\") == ['a', 'al', 'alabama', 'alabama', 'alabama', 'alabama']\nassert     all_prefixes(\"mississippi\") == ['m','miss','mississippi','mississippi','mississippi','mississippi']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"\") == []\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"aa\") == [\"aa\"]\nassert     all_prefixes(\"aaab\") == [\"aaab\"]\nassert     all_prefixes(\"aaabb\") == [\"aaabb\", \"aaab\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"ABC\") == ['', 'A', 'AB', 'ABC']\nassert     all_prefixes(\"AB\") == ['', 'A', 'AB']\nassert     all_prefixes(\"ABC\") == ['', 'A', 'AB', 'ABC']\nassert     all_prefixes(\"AB\") == ['', 'A', 'AB']\nassert     all_prefixes(\"ABC\") == ['', 'A', 'AB', 'ABC']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_prefixes('') == ['']\nassert     all_prefixes('a') == ['', 'a']\nassert     all_prefixes('ab') == ['', 'a', 'ab']\nassert     all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert     all_prefixes('abcdef') == ['', 'a', 'ab', 'abc', 'def']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_prefixes('hello') == ['', 'h', 'he', 'hel', 'hell', 'hello', 'hello ']\nassert     all_prefixes('world') == ['', 'w', 'wo', 'wor', 'wo r', 'worl', 'worl d', 'worl do', 'worl d o', 'worl d  ', 'worl d  o', 'worl d  o ']\nassert     all_prefixes('earth') == ['', 'e', 'ea', 'ear', 'eart', 'eart', 'art', 'arte', 'art ', 'arte ', 'art ', 'art  ', 'art  a', 'art  a ']\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_prefixes(\"H\") ==     [\"H\"]\nassert     all_prefixes(\"Hamburger\") ==     [\"H\", \"Hm\", \"Ham\", \"Hamu\", \"Hamburger\"]\nassert     all_prefixes(\"Hamburger\") ==     [\"H\", \"Hm\", \"Ham\", \"Hamu\", \"Hamburger\"]\nassert     all_prefixes(\"Hamburger\") ==     [\"H\", \"Hm\", \"Ham\", \"Hamu\", \"Hamburger\"]\nassert     all_prefixes(\"Hamburger\") ==     [\"H\", \"Hm\", \"Ham\", \"Hamu\", \"Hamburger\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_prefixes('abc')    == ['']\nassert     all_prefixes('a')    == ['', 'a']\nassert     all_prefixes('ab')    == ['', 'a', 'ab']\nassert     all_prefixes('abcdef')    == ['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\n\ndef is_power_of_2(n: int) -> bool:\n    \"\"\" Check if the given number is a power of 2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(1) == \"0\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(2) =='0, 1'\nassert     string_sequence(3) == '0, 1, 2'\nassert     string_sequence(4) == '0, 1, 2, 3'\nassert     string_sequence(5) == '0, 1, 2, 3, 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_sequence(10) == '01 02 03 04 05 06 07 08 09 0'\nassert     string_sequence(20) == '01 02 03 04 05 06 07 08 09 0'\nassert     string_sequence(30) == '01 02 03 04 05 06 07 08 09 0'\nassert     string_sequence(40) == '01 02 03 04 05 06 07 08 09 0'\nassert     string_sequence(50) == '01 02 03 04 05 06 07 08 09 0'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(0) == \"\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_sequence(5) == \" 0 1 2 3 4 \"\nassert     string_sequence(6) == \" 0 1 2 3 4 5 \"\nassert     string_sequence(7) == \" 0 1 2 3 4 5 6 \"\nassert     string_sequence(8) == \" 0 1 2 3 4 5 6 7 \"\nassert     string_sequence(9) == \" 0 1 2 3 4 5 6 7 8 \"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\nassert     string_sequence(22) == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_sequence(0)         == '0'\nassert     string_sequence(1)         == '0 1'\nassert     string_sequence(2)         == '0 1 2'\nassert     string_sequence(3)         == '0 1 2 3'\nassert     string_sequence(4)         == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_sequence(10) == \"01 02 03 04 05 06 07 08 09\"\nassert     string_sequence(100) == \"01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\"\nassert     string_sequence(200) == \"01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\"\nassert     string_sequence(300) == \"01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\"\nassert     string_sequence(400) == \"01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_distinct_characters('Hello World') == 6\nassert     count_distinct_characters('aa') == 1\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('Aa') == 2\nassert     count_distinct_characters('') == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_distinct_characters('ABC') == 3\nassert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('Abc') == 3\nassert     count_distinct_characters('aBc') == 3\nassert     count_distinct_characters('aBC') == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"cabbba\") == 3, \"cabbba\"\nassert     count_distinct_characters(\"A\") == 1, \"A\"\nassert     count_distinct_characters(\"\") == 0, \"\"\nassert     count_distinct_characters(\"\") == 0, \"\"\nassert     count_distinct_characters(\"b\") == 1, \"b\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"Hi\") == 1\nassert     count_distinct_characters(\"Iii\") == 0\nassert     count_distinct_characters(\"hello\") == 3\nassert     count_distinct_characters(\"HHELLO\") == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"hello\") == 5\nassert     count_distinct_characters(\"aabbccddee\") == 6\nassert     count_distinct_characters(\"aabbccddeeF\") == 6\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"hello\") == 6\nassert     count_distinct_characters(\"HeLLo\") == 6\nassert     count_distinct_characters(\"HELLO\") == 6\nassert     count_distinct_characters(\"HellO\") == 6\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_distinct_characters('aabbcde') == 3\nassert     count_distinct_characters('Aabbcde') == 3\nassert     count_distinct_characters('aabbcde', ignore_case=False) == 4\nassert     count_distinct_characters('Aabbcde', ignore_case=False) == 4\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    return len(set(string))\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"hello\") == 5\nassert     count_distinct_characters(\"hello\") == 5\nassert     count_distinct_characters(\"hello\") == 5\nassert     count_distinct_characters(\"HELLO\") == 5\nassert     count_distinct_characters(\"HELLO\") == 5\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_distinct_characters(string = \"cAB\") == 2\nassert     count_distinct_characters(string = \"abC\") == 1\nassert     count_distinct_characters(string = \"Abc\") == 1\nassert     count_distinct_characters(string = \"AbC\") == 1\nassert     count_distinct_characters(string = \"abc\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"AbC\") == 3\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_music('5') == [0, 5, 10, 0, 5]\nassert     parse_music('o') == [0, 1, 2, 0, 1]\nassert     parse_music('o|') == [0, 1, 2, 0, 1]\nassert     parse_music('o.|') == [0, 1, 2, 0, 1]\nassert     parse_music('o.|.|') == [0, 1, 2, 0, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_music('o') == [1]\nassert     parse_music('o|') == [1, 1]\nassert     parse_music('o|o') == [1, 1, 1]\nassert     parse_music('o|o|o') == [1, 1, 1, 1]\nassert     parse_music('o|o|o|') == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_music(\"o o|.| o o|.| o o|.|\")    == [4, 0, 2]\nassert     parse_music(\"o| o.| o o|\")    == [2, 0, 0]\nassert     parse_music(\"o o| o o| o o|\")    == [4, 2, 0]\nassert     parse_music(\"o o|.| o o|.| o o|.|\")    == [4, 0, 2]\nassert     parse_music(\"o o|.| o o|.| o o|.| o o|\")    == [4, 0, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_music(\"1o\") == [4]\nassert     parse_music(\"1o|\") == [4, 2]\nassert     parse_music(\"1o|.|\") == [4, 2, 1]\nassert     parse_music(\"1o|.|.|\") == [4, 2, 1, 1]\nassert     parse_music(\"1o|.|.|.|\") == [4, 2, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_music('o') == [1, 1, 1, 1]\nassert     parse_music('o|') == [1, 1, 1, 2]\nassert     parse_music('o|.') == [1, 1, 1, 1]\nassert     parse_music('o|o') == [1, 1, 1, 1]\nassert     parse_music('o|o|') == [1, 1, 1, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_music('o.o|.o') == [2, 2]\nassert     parse_music('o.o|o') == [2, 2]\nassert     parse_music('o.o|o.o') == [2, 3]\nassert     parse_music('o.o|o|o') == [2, 4]\nassert     parse_music('o.o|o|o.o') == [2, 5]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_music('o') == [1, 1, 1, 1, 1]\nassert     parse_music('o|') == [1, 1, 1, 1, 1]\nassert     parse_music('.o|') == [1, 1, 1, 1, 1]\nassert     parse_music('o|o') == [1, 1, 1, 1, 1]\nassert     parse_music('o|o|') == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_music(\"o.o|.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|.o.o.o|."
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_music('-o-') == [4]\nassert     parse_music('-o-|') == [2, 2]\nassert     parse_music('-o.|') == [2, 1, 1]\nassert     parse_music('-o-o-o-o-') == [1, 4, 4, 4, 4]\nassert     parse_music('-o-.|') == [2, 1, 1, 1]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     how_many_times('Hello World', 'o') == 2\nassert     how_many_times('Hello World', 'x') == 0\nassert     how_many_times('Hello World', 'll') == 3\n\n\ndef how_many_times_naive(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string, using a naive approach.\n    \"\"\"\n    if string == '' or substring == '': return 0\n\n    if string[0] == substring[0]:\n        return 1 + how_many_times_naive(string[1:], substring[1:])\n    else:\n        return how_many_times_naive(string[1:], substring)\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     how_many_times('sAaPpLe', 'a') == 2\nassert     how_many_times('sAaPpLe', 'p') == 2\nassert     how_many_times('sAaPpLe', 'P') == 1\nassert     how_many_times('sAaPpLe', 'Ppp') == 0\nassert     how_many_times('sAaPpLe','sAaPpLe') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     how_many_times('xyxyxyxyx', 'xy') == 4\nassert     how_many_times('xyxyxyxyx', 'xyx') == 4\nassert     how_many_times('xyxyxyxyx', 'x') == 2\nassert     how_many_times('xyxyxyxyx', 'y') == 1\nassert     how_many_times('xyxyxyxyx', 'xy') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     how_many_times('123456789', '123') == 1\nassert     how_many_times('123456789', '12345') == 2\nassert     how_many_times('123456789', '1234567') == 3\nassert     how_many_times('123456789', '1234') == 0\nassert     how_many_times('123456789', '1') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     how_many_times('abcd', 'b') == 1\nassert     how_many_times('abcd', 'cd') == 1\nassert     how_many_times('abcd', 'bc') == 2\nassert     how_many_times('abcd', 'c') == 2\nassert     how_many_times('abcd', 'abc') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     how_many_times('Mary had a little lamb', 'lamb') == 1\nassert     how_many_times('Mary had a little lamb', 'had') == 0\nassert     how_many_times('Mary had a little lamb', 'a') == 3\nassert     how_many_times('Mary had a little lamb', 'little') == 1\nassert     how_many_times('Mary had a little lamb', 'Mary') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     how_many_times('aaaaa', 'a') == 6\nassert     how_many_times('aaaaa', 'aa') == 3\nassert     how_many_times('aaaaa', 'b') == 0\nassert     how_many_times('aaaaa', 'x') == 0\n\ndef     get_letters_count(string: str) -> dict:\n    \"\"\" Return a dictionary with letter counts.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     how_many_times(\"\", \"\") == 0\nassert     how_many_times(\"\", \"A\") == 0\nassert     how_many_times(\"Hello\", \"h\") == 1\nassert     how_many_times(\"Hello\", \"o\") == 2\nassert     how_many_times(\"Hello\", \"l\") == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         how_many_times(\"abababa\", \"ab\") == 2\nassert         how_many_times(\"abababa\", \"ba\") == 1\nassert         how_many_times(\"abababa\", \"aba\") == 4\nassert         how_many_times(\"abababa\", \"baaba\") == 0\nassert         how_many_times(\"abababa\", \"b\") == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('one 2 three 4 five 6 seven 8 nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('one 2 three four five six seven 8 nine zero') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('one 2 three four five six seven 8 nine zero zero') == 'zero zero one two three four five six seven eight nine'\nassert     sort_numbers('one2three4five6seven8nine') == 'one two three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine')     == 'one two three four five six seven eight nine'\nassert     sort_numbers('one nine nine eight eight five five four four three two one')     == 'one nine nine eight eight five five four three two one'\nassert     sort_numbers('one zero one two three four five six seven eight nine')     == 'one zero one two three four five six seven eight nine'\nassert     sort_numbers('one ten ten one two three four five six seven eight nine')     == 'one ten ten one two three four five six seven eight nine'\nassert     sort_numbers('one two three four five six seven eight nine ten one')     == 'one two three four five six seven eight nine ten one'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('zero nine nine one') == 'one zero nine nine'\nassert     sort_numbers('one one') == 'one one'\nassert     sort_numbers('one one zero') == 'one zero one'\nassert     sort_numbers('one one zero zero') == 'zero zero one one'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one nine two three four five six seven eight nine'\nassert     sort_numbers('zero one two three four five six seven eight nine') == 'zero one nine two three four five six seven eight nine'\nassert     sort_numbers('four three one two five') == 'one four three two five'\nassert     sort_numbers('one one one one one') == 'one one one one one'\nassert     sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"one  two  three four five six seven eight nine\") == \"one  two  three four five six seven eight nine\"\nassert     sort_numbers(\"one one two two three three four four four five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five fiv"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_numbers('one one') == 'one one'\nassert     sort_numbers('nine one one') == 'one one nine'\nassert     sort_numbers('three one one') == 'one one three'\nassert     sort_numbers('two two') == 'two two'\nassert     sort_numbers('eight two two') == 'two two eight'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_numbers('one') == 'one'\nassert     sort_numbers('one three five two') == 'one two three five'\nassert     sort_numbers('seven three five two') == 'two three five seven'\nassert     sort_numbers('nine three five two') == 'two three five nine'\nassert     sort_numbers('one nine three five two') == 'one two three five nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_numbers(\"one two three four five six seven eight nine zero\") == \"0123456789\"\nassert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"0123456789\"\nassert     sort_numbers(\"nine two three one four eight five six seven six\") == \"0123456789\"\nassert     sort_numbers(\"three five four two five three\") == \"345\"\nassert     sort_numbers(\"zero one zero two one two\") == \"012\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine zero') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('one three five three five five three three one two') == 'one three five three five five three three one two'\nassert     sort_numbers('three five one two three four five zero one two one two one one three three one four') == 'one two three four five zero one one two one three three one four'\nassert     sort_numbers('one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one one = one one one one one one one one one one one one one one 0 one one one one one one one one one one\n\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('one nine three five two four six seven eight') == 'one nine three five two four six seven eight'\nassert     sort_numbers('eight seven five four two one nine three') == 'one two three four five six seven eight'\nassert     sort_numbers('nine five three two one four 7 eight') == 'one two three four five six seven eight'\nassert     sort_numbers('five four three nine two one 7 eight') == 'one two three four five six seven eight'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 3)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 5)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 8)\nassert     find_closest_elements([-1, 0, 1, 2, -3]) == (-3, -1)\nassert     find_closest_elements([]) == (None, None)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) == (4.0, 5.0)\nassert     find_closest_elements([0.0, 0.1, 0.2, 0.3]) == (0.0, 0.1)\nassert     find_closest_elements([1.0, 1.2, 1.5, 1.8]) == (1.0, 1.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) == (4.0, 5.0)\nassert     find_closest_elements([10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0]) == (4.0, 3.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_closest_elements([3, 4, 1, 2]) == (1, 4), \"incorrect result for [3, 4, 1, 2]\"\nassert     find_closest_elements([2, 4, 1, 3]) == (2, 4), \"incorrect result for [2, 4, 1, 3]\"\nassert     find_closest_elements([-1, -2, -3]) == (-1, -2), \"incorrect result for [-1, -2, -3]\"\nassert     find_closest_elements([0, 0]) == (0, 0), \"incorrect result for [0, 0]\"\nassert     find_closest_elements([1, 1, 2, 3, 4]) == (1, 2), \"incorrect result for [1, 1, 2, 3, 4]\"\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([-5, -4, -3, -2, -1]) == (-5, -4)\nassert     find_closest_elements([1, 5, 25, 35]) == (1, 5)\nassert     find_closest_elements([10, 22, 30, 32, 43, 56]) == (10, 22)\nassert     find_closest_elements([-1, -2, -3, -4, -5, -6, -7]) == (-1, -2)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]) == (0.1, 0.3)\nassert     find_closest_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0]) == (0.1, 0.3)\nassert     find_closest_elements([0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) == (0.0, 1.0)\nassert     find_closest_elements([0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]) == (0.0, 1.0)\n\ndef find_closest_elements_with_sorted_input(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Given a list of numbers, sort them in increasing order and return the two closest numbers in order (smaller\n    number, larger number).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_closest_elements([2.6, 3.5, 4.2, 6.6]) == (4.2, 6.6)\nassert     find_closest_elements([2.1, 2.9]) == (2.1, 2.9)\nassert     find_closest_elements([4.7, 3.4, 4.2, 6.6]) == (4.7, 4.2)\nassert     find_closest_elements([-1.7, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0, 0.1, 0.2, 0.3]) == (0.1, 0.2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (1, 11)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (find_closest_elements([-12, 0, 4, -6, 10, -2, 6, 4, 0, -12, -10, 0]) == (-12.0, 6.0))\nassert     (find_closest_elements([-12, 0, 4, -6, 10, -2, 6, 4, 0, -10, -12, 0]) == (-10.0, -12.0))\nassert     (find_closest_elements([12, 12, -12, -12, 12, 12]) == (12.0, 12.0))\nassert     (find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2.0, 2.0))\nassert     (find_closest_elements([1, 3, -1, -2, 5, 2, 2]) == (1.0, 3.0))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_closest_elements([1, 4, 7, 10, 19]) == (1, 4)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 2)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (2, 4)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 4)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (2, 4)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (2, 4)\nassert     find_closest_elements([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 3)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (find_closest_elements([2.1, 3.2, 5.7, 7.5, 9.1, 11.7])\n         == (7.5, 9.1))\nassert     (find_closest_elements([2.1, 3.2, 5.7, 7.5, 9.1, 11.7, 19.1, 11.1])\n         == (11.1, 19.1))\nassert     (find_closest_elements([0.1, 1.2, 2.3, 3.4, 4.5, 6.7, 7.8])\n         == (6.7, 7.8))\nassert     (find_closest_elements([-2.1, -3.2, -5.7, -7.5, -9.1, -11.7, -19.1, -11.1])\n         == (-11.1, -19.1))\nassert     (find_closest_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7])\n         == (5.5, 7.7))\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0.5, 1, 1.5, 2]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0, 0.5, 1, 1.5, 2, 2.5]\nassert     rescale_to_unit([0]) == [0]\nassert     rescale_to_unit([0, 0]) == [0, 0]\n\ndef linearize(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers (of at least two elements), return a list of the same length, \n    where each element is the average of the two that came before it in the input list\n    \"\"\"\n    "
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([0, 1]) == [0, 1]\nassert     rescale_to_unit([1, 2]) == [0.5, 1]\nassert     rescale_to_unit([0, 2]) == [0, 1]\nassert     rescale_to_unit([0.5, 1]) == [0, 1]\nassert     rescale_to_unit([0.7, 1.2]) == [0.7, 1.2]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([-1.0, 0.0, 1.0]) == [0.0, 0.0, 1.0]\nassert     rescale_to_unit([-1.0, 1.0, 1.0]) == [0.0, 1.0, 1.0]\nassert     rescale_to_unit([-0.5, 1.0, 1.5]) == [0.0, 0.5, 1.0]\nassert     rescale_to_unit([-0.5, -1.0, 0.0, -1.0]) == [0.0, -0.5, 0.0, -0.5]\nassert     rescale_to_unit([-0.5, 0.0, 0.0, -1.0]) == [0.0, 0.0, 0.0, -0.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1,2,3,4,5]) == [0,1,2,3,4]\nassert     rescale_to_unit([-1,0,1,2,3]) == [0,0,1,2,3]\nassert     rescale_to_unit([-1,0,0,0,1]) == [0,0,0,0,1]\nassert     rescale_to_unit([-1,1,2,3,4]) == [0,1,2,3,4]\nassert     rescale_to_unit([0,1,2,3,4]) == [0,1,2,3,4]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.5, 1]\nassert     rescale_to_unit([2, 3, 4]) == [0, 0.25, 0.5]\nassert     rescale_to_unit([1, 1, 1]) == [0, 0, 1]\n\n\ndef count_inversions(numbers: List[float]) -> int:\n    \"\"\" Given a list of numbers, return the number of inversions in the list \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([-1, -0.5, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0]) \\\n        == [-1.0, -0.5, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\nassert     rescale_to_unit([-2, -1, 0, 1, 2]) \\\n        == [-0.5, 0.0, 0.5, 1.0, 1.5]\n\nassert     rescale_to_unit([-1, 0, 1]) \\\n        == [0, 0.5, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([1,2,3,4,5,6,7])     == [0,1,2,3,4,5,6]\nassert     rescale_to_unit([0.25,0.5,0.75]) == [0.0,0.5,1.0]\nassert     rescale_to_unit([0.125,0.25])     == [0.0,0.25,0.5]\n\n\n\ndef dot_product(v1: List[float], v2: List[float]) -> float:\n    \"\"\" Compute the dot product between two vectors of the same length\"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([4,3,2,1]) == [0.25, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([4,3,2,0]) == [0, 0, 0, 0]\nassert     rescale_to_unit([0,0]) == [0, 0]\nassert     rescale_to_unit([4,3,2]) == [0.25, 0.5, 0.5]\nassert     rescale_to_unit([4,0]) == [0, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([1, 0.5, 2]) == [0, 0.5, 1]\nassert     rescale_to_unit([1, 1, 1]) == [0, 0.5, 1]\nassert     rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0.5, 0.75, 1, 1.25]\nassert     rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0.5, 0.75, 1, 1.25]\nassert     rescale_to_unit([1, 2, -3, 4, 5]) == [0, 0.5, -0.75, 1, 1.25]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([0.1, 0.3, 0.8]) == [0.1, 0.3, 0.8]\nassert     rescale_to_unit([0.2, 0.2, 0.8]) == [0.8, 0.8, 1.0]\nassert     rescale_to_unit([0.4, 0.8, 0.3]) == [0.3, 1.0, 0.8]\nassert     rescale_to_unit([0.4, 0.7, 0.5]) == [0.5, 0.5, 0.5]\nassert     rescale_to_unit([0.6, 0.8, 0.1]) == [0.1, 0.8, 0.6]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([1, '2', 3]) == [1, 3]\nassert     filter_integers([1, '2', '3']) == [1, 3]\nassert     filter_integers([1, 2, '3']) == [1, 2, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [1, 2, 3, 4] == filter_integers([1, 2, 3, 4])\nassert     [1, 2, 3, 4] == filter_integers([1, 2, '3', 4])\nassert     [1, 2, 3, '4'] == filter_integers([1, 2, '3', 4])\nassert     [1, 2, 3, '4'] == filter_integers([1, 2, 3, '4'])\nassert     [1, 2, 3, 4] == filter_integers([1, 2, 3, 4, '5'])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3]) == []\nassert     filter_integers(['a', 'b', 'c']) == []\nassert     filter_integers([1, 2, 'a']) == []\nassert     filter_integers([1, 'a', 3]) == [1, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1, 2, 3, 4, 5] == filter_integers([1, 2, 'a', 4, 5])\nassert     [1, 2, 3, 4, 5] == filter_integers([1, 2, 3, 'a', 5])\nassert     [1, 2, 3, 4, 5] == filter_integers([1, 2, 3, 'a', 5, 7])\nassert     [1, 2, 3, 4, 5] == filter_integers([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5] == filter_integers([1, 2, 3, 4, 5, 'a', 'b', 'c'])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, \"a\", \"b\"])    == [1, 2, 3, 4, 5, 6, 7]\nassert     filter_integers(['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'])    == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nassert     filter_integers([1, 2, 3, \"a\", \"b\"])             == [1, 2, 3]\nassert     filter_integers([1, 2, '3', 4, 5, 6, 7, 8, 9, 0])         == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nassert     filter_integers([\"a\", \"b\"])                         == [\"a\", \"b\"]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_integers([1, '1', 1.1, True, None, [1, 2, 3], (1, 2, 3), [1, 2, '3'], {1: 'a', 2: 'b'}]) == [1, 1, 1.1, True, None, [1, 2, 3], (1, 2, 3)]\nassert     filter_integers(['a', 1, 2, 3, 'abc', '', '11', '2.3', 0, 9]) == []\nassert     filter_integers([]) == []\n\n\ndef is_palindrome(value: str) -> bool:\n    \"\"\" Is the given string a palindrome?\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_integers(['123', 'foo', 'bar']) == [123, 'foo', 'bar']\nassert     filter_integers([123, 'foo', 'bar']) == [123, 'foo', 'bar']\nassert     filter_integers([123, 123, 'foo', 'bar']) == [123, 123, 'foo', 'bar']\nassert     filter_integers([123, 'foo', 123]) == [123, 'foo', 123]\nassert     filter_integers([123, 'foo', 'bar', 123]) == [123, 'foo', 'bar', 123]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([1]) == []\nassert     filter_integers([1,2]) == [2]\nassert     filter_integers([1,2,'3']) == [2]\nassert     filter_integers([1,'2',3]) == [1,3]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_integers([1, 2, 'a', 'b', 1.5, 'b']) == [1, 2, 1.5]\nassert     filter_integers([1, 2, 'a', 'b', [], 1.5, 'b']) == [1, 2, 1.5]\nassert     filter_integers([1, 2, [], 'a', 'b', 1.5, 'b']) == [1, 2, 1.5]\nassert     filter_integers([1, 2, None, 'a', 'b', 1.5, 'b']) == [1, 2, 1.5]\nassert     filter_integers([1, 2, 1.5, 'a', 'b', [], 1.5, 'b']) == [1, 2, 1.5]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1, 2, 3] == filter_integers([1, 2, '3'])\nassert     [2, 4, 6] == filter_integers([1.0, 2.0, '3.0'])\nassert     ['Hello', 'World', 10] == filter_integers([10, 'Hello', {'test': 20}])\nassert     [1, 2, 3, 4] == filter_integers(range(1, 5))\n\ndef sorter(values: List[Any]) -> List[Any]:\n    \"\"\" Sort given list of any python values\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"x\") == 1\nassert     strlen(\"hello world\") == 11\n\ndef trange(n):\n    \"\"\" Return a list of integers from 1 to n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('aaaaa') == 5\nassert     strlen('abcde') == 5\nassert     strlen('a') == 1\nassert     strlen('xyz') == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strlen(\"hello\") == 5\nassert     strlen(\"Hello world!\") == 12\nassert     strlen(\"\") == 0\nassert     strlen(\"Hello world!\") == 12\nassert     strlen(\"HackerRank\") == 8\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strlen(\"Hello World\") == len(\"Hello World\")\nassert     strlen(\"Hello\") == len(\"Hello\")\nassert     strlen(\"\") == len(\"\")\nassert     strlen(\"a\") == len(\"a\")\nassert     strlen(\"a\" * 1000) == len(\"a\" * 1000)\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strlen('string') == len('string')\nassert     strlen('string\\n') == len('string\\n')\nassert     strlen('\\nstring') == len('\\nstring')\nassert     strlen('\\n\\n\\n\\n\\n\\n\\n\\n') == len('\\n\\n\\n\\n\\n\\n\\n\\n')\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"Hello\") == 5\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     strlen(b\"Hello\") == 5\nassert     strlen(\"Hello\") == 5\nassert     strlen(b\"abc\") == 3\nassert     strlen(\"abc\") == 3\nassert     strlen(b\"abc\\0\") == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         strlen('') == 0\nassert         strlen('abc') == 3\nassert         strlen('a\\nb\\nc') == 3\nassert         strlen('a\\nb\\nc\\nd\\ne') == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"abcd\") == 4\nassert     strlen(\"Hello\") == 5\nassert     strlen(\"Hello world\") == 11\nassert     strlen(\"HELLO WORLD\") == 11\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef getchar(string: str, pos: int) -> str:\n    \"\"\" Returns the character at given position in the string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     large_divisor(6) == 3\nassert     large_divisor(5) == 1\nassert     large_divisor(10) == 2\nassert     large_divisor(9) == 3\nassert     large_divisor(11) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_divisor(6) == 1\nassert     largest_divisor(12) == 3\nassert     largest_divisor(30) == 3\nassert     largest_divisor(45) == 3\nassert     largest_divisor(5) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 2\nassert     largest_divisor(3) == 3\nassert     largest_divisor(4) == 2\nassert     largest_divisor(5) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nassert largest_divisor(1) == 1\nassert largest_divisor(5) == 5\nassert largest_divisor(11) == 11\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_divisor(15) == 3\nassert     largest_divisor(1000) == 100\nassert     largest_divisor(2500) == 25\nassert     largest_divisor(123456) == 123\nassert     largest_divisor(1234567) == 123\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, bigger than n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_divisor(0) == 0\nassert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(7) == 1\nassert     largest_divisor(100) == 100\nassert     largest_divisor(123456789) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_divisor(12) == 3\nassert     smallest_divisor(24) == 4\nassert     smallest_divisor(7) == 7\nassert     smallest_divisor(25) == 5\nassert     smallest_divisor(13) == 13\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_divisor(5) == 1\nassert     largest_divisor(7) == 1\nassert     largest_divisor(10) == 2\nassert     largest_divisor(99) == 99\nassert     largest_divisor(101) == 101\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     factorize(15) == [3, 5]\nassert     factorize(20) == [2, 2, 5]\nassert     factorize(30) == [2, 3]\nassert     factorize(100) == [2, 5, 5]\nassert     factorize(120) == [2, 2, 3, 5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2,2]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [2,2,2,5] == factorize(20)\nassert     [2,2,11] == factorize(22)\nassert     [2,5] == factorize(30)\nassert     [11] == factorize(11)\nassert     [11,11] == factorize(121)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [2, 2, 2, 3, 3, 5, 7, 11, 11, 13] == factorize(165)\nassert     [2, 3, 5, 7, 11, 13] == factorize(170)\nassert     [2, 11, 13] == factorize(171)\nassert     [2, 11, 13] == factorize(172)\nassert     [2, 3, 5] == factorize(173)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [2, 2, 3, 5]    == factorize(60)\nassert     [2, 2, 3]    == factorize(45)\nassert     [2, 3, 5]    == factorize(40)\nassert     [2, 2, 2, 3]    == factorize(120)\nassert     [2, 5]    == factorize(30)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     factorize(0) == []\nassert     factorize(1) == [1]\nassert     factorize(12) == [2,2]\nassert     factorize(25) == [5]\nassert     factorize(27) == [3,3]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [2, 2, 5, 11] == factorize(220)\nassert     [2, 2, 5, 11] == factorize(1220)\nassert     [2, 2, 2, 3, 5, 7, 11] == factorize(1260)\nassert     [2, 2, 2, 3, 5, 11] == factorize(720)\nassert     [2, 3, 5, 7, 11] == factorize(5040)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [2, 2, 2, 3, 3, 5, 7, 11] == factorize(777553)\nassert     [2, 2, 5, 7, 11] == factorize(128)\nassert     [2, 2, 2, 5] == factorize(60)\n\n\ndef count_subset_sum(summ: int, nums: List[int]) -> int:\n    \"\"\" Given array of numbers and a number S, count number of subset sum whose sum is S.\n    Array size must be equal to or greater than 2.\n    Array elements must be positive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(6) == [2, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 2, 1]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 2, 1, 2]) == [1, 2, 3, 2]\nassert     remove_duplicates([1, 2, 3, 2, 1, 2, 2]) == [1, 2, 3, 2]\nassert     remove_duplicates([1, 1, 1, 1, 1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1, 2, 3, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 1, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 2, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([2, 1, 1, 1, 2, 1, 2]) == [1, 2]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9]     == remove_duplicates([1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9]         == remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5]                 == remove_duplicates([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4]                 == remove_duplicates([1, 2, 3, 4])\nassert     [1, 2]                             == remove_duplicates([1, 2])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([2, 2]) == [2]\nassert     remove_duplicates([2, 2, 2, 2]) == [2]\nassert     remove_duplicates([2, 2, 2, 2, 2]) == [2]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_duplicates([1, 2, 3, 4, 5, 1, 2, 3]) == [1, 2, 3, 4, 5, 1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 1]\n\n\ndef find_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, find duplicates.\n    Returns a list of duplicate integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1,2,2,3,3,3,4,4] == remove_duplicates([1,2,2,3,3,3,4,4])\nassert     [1,2,3] == remove_duplicates([1,2,2,3,3,3,4,4])\nassert     [1,2,3,4] == remove_duplicates([1,2,2,3,3,3,4,4])\nassert     [1,2,3,4] == remove_duplicates([1,2,2,3,3,3,4,4,5])\nassert     [1,2,3,4,5] == remove_duplicates([1,2,2,3,3,3,4,4,5,5])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [1, 2, 3, 4, 4, 5]    == remove_duplicates([1, 2, 3, 4, 4, 5])\nassert     [1, 2, 3, 4, 5]    == remove_duplicates([1, 2, 3, 4, 5, 6])\nassert     [1, 2, 3, 4, 5, 6, 7]    == remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]    == remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]    == remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 3, 2, 1] == remove_duplicates([1, 2, 3, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7] == remove_duplicates([1, 2, 3, 4, 5, 6, 7])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] == remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] == remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_duplicates([1, 2, 3, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1,2,3,4,5,5,6,7,8,9] == remove_duplicates([1,2,3,4,5,5,5,6,7,8,9])\nassert     [1,2,3,4,5,6,7,8,9] == remove_duplicates([1,2,3,4,5,6,7,8,9])\nassert     [1,2,3,4,5,6,7,8,9,10] == remove_duplicates([1,2,3,4,5,6,7,8,9,10])\nassert     [1,2,3,4,5,6,7,8,9,10] == remove_duplicates([1,2,3,4,5,6,7,8,9,10])\nassert     [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] == remove_duplicates([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     flip_case(\"ZYxF+W-\") == \"zYxFw+W-\", \"Fail the test\"\nassert     flip_case(\"zYxFw+W-\") == \"ZYxFw+W-\", \"Fail the test\"\nassert     flip_case(\"ZYxFw+W-\") == \"zYxFw+W-\", \"Fail the test\"\nassert     flip_case(\"zYxFw+W-\") == \"ZYxFw+W-\", \"Fail the test\"\nassert     flip_case(\"ZYxFw+W-\") == \"zYxFw+W-\", \"Fail the test\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     flip_case('lowercase') == 'UPPERCASE'\nassert     flip_case('UPPERCASE') == 'lowercase'\nassert     flip_case('lowercase x') == 'UPPERCASE x'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     flip_case(\"abc\") == \"ABC\"\nassert     flip_case(\"abcD\") == \"AbcD\"\nassert     flip_case(\"The quick brown fox jumped over the lazy dog\") == \"tH the QUICk BrOWn Fox jUMPed ovEr the LAZY doG\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check whether a string is a palindrome.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     flip_case('Hello World') == 'hELLO wORLD'\nassert     flip_case('Welcome to New York') == 'welcome to nY tOS'\nassert     flip_case('uPPER sCASE') == 'UPPER sCASE'\nassert     flip_case('a') == 'a'\nassert     flip_case('We Are The World') == 'WE ARE THE WORLD'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     flip_case(\"aretheyhere\") == \"AReheyTerehREy\"\nassert     flip_case(\"They'reHere\") == \"TErEhey  bIRTHe\"\nassert     flip_case(\"hello\") == \"HELLO\"\nassert     flip_case(\"\") == \"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"w\") == \"W\"\nassert     flip_case(\"W\") == \"w\"\nassert     flip_case(\"mY\") == \"MY\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     flip_case(\"Lorem\") == \"Lorem\"\nassert     flip_case(\"lorem\") == \"Lorem\"\nassert     flip_case(\"LoReM\") == \"LoReM\"\nassert     flip_case(\"LoReM  \") == \"LoReM\"\nassert     flip_case(\"LoReM   \") == \"LoReM\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     flip_case(\"Hello World\") == \"hELLO wORLD\"\nassert     flip_case(\"12345\") == \"12345\"\n\ndef count_letters(string: str) -> dict:\n    \"\"\" Return a dictionary where each key is a lowercase letter and each value is the number of times\n        that letter appears in string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     flip_case('A') == 'a'\nassert     flip_case('a') == 'a'\nassert     flip_case('A1') == '1A'\nassert     flip_case('1A') == 'A1'\nassert     flip_case('a1') == 'a1'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     flip_case('hello world') == 'HELLO WORLD'\nassert     flip_case('HELLO WORLD') == 'hello world'\nassert     flip_case('hElL0 Wor1d') == 'hElL0 WoR1d'\nassert     flip_case('hElL0 WoR1d') == 'hElL0 WoR1d'\nassert     flip_case('HellO Wor1d') == 'HELLO WoR1d'\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     concatenate([\"\"])                 == \"\"\nassert     concatenate([\"p\", \"e\", \"r\"])     == \"pe\"\nassert     concatenate([\"\", \"e\", \"r\"])     == \"e\"\nassert     concatenate([\"a\", \"b\", \"c\"])     == \"abc\"\nassert     concatenate([\"p\", \"e\", \"r\", \"\"])     == \"pe\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     concatenate([]) == \"\"\nassert     concatenate([\"A\"]) == \"A\"\nassert     concatenate([\"ABC\", \"D\"]) == \"ABCD\"\nassert     concatenate([\"ABC\", \"D\", \"EF\", \"GH\"]) == \"ABCDEFGH\"\nassert     concatenate([\"ABC\", \"D\", \"EF\", \"GH\", \"JKL\"]) == \"ABCDEFGHJKL\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     concatenate([\"\", \"foo\", \"bar\"]) == \"foobar\"\nassert     concatenate([\"\", \"foo\", \"bar\", \"baz\"]) == \"foobarbaz\"\nassert     concatenate([\"foobar\", \"barbaz\"]) == \"foobarbarbaz\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"\", \"\"]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     concatenate([\"\"])     == \"\"\nassert     concatenate([\"a\", \"b\", \"c\"])     == \"abc\"\nassert     concatenate([\"a\", \"b\", \"\", \"c\"])     == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"])     == \"abcd\"\nassert     concatenate([\"\", \"\", \"\", \"\"])     == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\nassert     concatenate([\"Hello\", \"World\", \"I\", \"am\", \"here\"]) == \"HelloWorldIamhere\"\nassert     concatenate([\"Hello\", \"World\", \"I\", \"am\", \"here\", \"!\"]) == \"HelloWorldIamhere!\"\nassert     concatenate([\"Hello\", \"World\", \"I\", \"am\", \"here\", \"!\", \"This\", \"is\", \"me\"]) == \"HelloWorldIamhere!Thisisme\"\n\ndef reverse(strings: List[str]) -> None:\n    \"\"\" Reverse the order of the characters in each string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     concatenate([\"a\", \"b\"]) == 'ab'\nassert concatenate([\"a\", \"bc\", \"d\"]) == 'abcd'\nassert concatenate([\"abc\", \"def\"]) == 'abcdef'\nassert concatenate([\"abc\", \"def\", \"ghi\"]) == 'abcdefghi'\nassert concatenate([\"abc\", \"def\", \"ghi\", \"jkl\"]) == 'abcdefghijkl'\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     concatenate([\"Yay\", \"Yee\", \"Yah\"]) == \"YayYeeYah\", \"Wrong concatenation\"\nassert     concatenate([\"Yes\", \"yea\", \"yeah\"]) == \"Yesyeayeah\", \"Wrong concatenation\"\nassert     concatenate([\"Yee\", \"Ye\", \"ye\", \"Yeee\", \"yeah\", \"yeah\"]) == \"YeeYeYeYeYeeyeahyeah\", \"Wrong concatenation\"\nassert     concatenate([\"Yeee\", \"ye\", \"ye\", \"ye\", \"yeah\", \"yeah\"]) == \"YeYeYeYeYeYeyeahyeah\", \"Wrong concatenation\"\nassert     concatenate([\"Yee\", \"ye\", \"ye\", \"ye\", \"yeah\", \"yeah\", \"yeah\", \"yeah\"]) == \"YeYeYeYeYeYeyeahyeah\", \"Wrong concatenation\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     concatenate([\"This\", \"is\", \"a\", \"test\"]) == \"Thisisatest\", \"concatenate\"\nassert concatenate([\"This is\", \"a test\"]) == \"Thisisatest\", \"concatenate\"\nassert concatenate([\"This\", \"is\", \"a\", \"test\", \"\"]) == \"Thisisatest\", \"concatenate\"\n\ndef partition(string: str, sub: str) -> List[List[str]]:\n    \"\"\" Partition the string into a list of strings, each being a contiguous substring of the original\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     concatenate([\"\", \"\", \"\"]) == \"\"\nassert     concatenate([\"a\", \"\", \"b\"]) == \"ab\"\nassert     concatenate([\"a\", \"\", \"b\", \"\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"\", \"c\", \"\"]) == \"abc\"\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Determine whether a string is a palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     concatenate([\"abc\", \"def\"])     ==    \"abcdef\"\nassert     concatenate([\"abcd\", \"ef\"])     ==    \"abcdef\"\nassert     concatenate([\"abc\", \"defg\"])     ==    \"abcdefg\"\nassert     concatenate([\"abc\", \"def\", \"ghi\"])     ==    \"abcdefghi\"\n\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_prefix(['apples', 'oranges', 'bananas'], 'app') == ['apples', 'bananas']\nassert     filter_by_prefix(['apples', 'oranges', 'bananas'], 'apple') == ['apples']\nassert     filter_by_prefix(['apples', 'oranges', 'bananas'],'strawberry') == []\nassert     filter_by_prefix([], 'a') == []\nassert     filter_by_prefix([], '') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([], 'a') == []\nassert     filter_by_prefix([], '') == []\nassert     filter_by_prefix([], 'b') == []\nassert     filter_by_prefix(['a', 'b'], '') == ['a', 'b']\nassert     filter_by_prefix(['a', 'b', 'c'], '') == ['a', 'b', 'c']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_prefix(['hey', 'kek', 'hey', 'hi', 'hallo'], 'he') == ['hey', 'hey', 'hi']\nassert     filter_by_prefix(['hey', 'kek', 'hey', 'hi', 'hallo'], 'he', False) == ['hey', 'hey', 'hi']\nassert     filter_by_prefix(['hey', 'kek', 'hey', 'hi', 'hallo'], 'hey', True) == ['hey', 'hey', 'hi']\n\n\ndef test_filter_by_prefix_solution():\n    assert filter_by_prefix(['hey', 'kek', 'hey', 'hi', 'hallo'], 'he') == ['hey', 'hey', 'hi']\n    "
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_prefix(['ca', 'cat', 'caa', 'cba'], 'ca') == ['ca', 'caa']\nassert     filter_by_prefix(['ca', 'cat', 'caa', 'cba'], 'c') == ['ca', 'caa']\nassert     filter_by_prefix(['ca', 'cat', 'caa', 'cba'], 'caa') == ['caa']\nassert     filter_by_prefix(['ca', 'cat', 'caa', 'cba'], 'ba') == ['cba']\n\n\ndef longest_prefix(strings: List[str], prefix: str) -> str:\n    \"\"\" Find the longest prefix of a given string in a given list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_prefix(['cat', 'dog', 'cow', 'tiger'], 'cat') == ['cat']\nassert     filter_by_prefix(['cat', 'dog', 'cow', 'tiger'], 'r') == []\nassert     filter_by_prefix(['cat', 'dog', 'cow', 'tiger'], 'h') == ['cat', 'dog', 'cow']\nassert     filter_by_prefix(['cat', 'dog', 'cow', 'tiger'], 'c') == ['cat', 'dog', 'cow']\nassert     filter_by_prefix(['cat', 'dog', 'cow', 'tiger'], 'w') == ['tiger']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_prefix(['bar', 'bar1', 'bar2', 'bar3', 'bar4', 'bar5'], 'bar') == ['bar', 'bar1', 'bar2', 'bar3', 'bar4', 'bar5']\nassert     filter_by_prefix(['foo', 'foo1', 'foo2', 'foo3', 'foo4', 'foo5'], 'foo') == ['foo', 'foo1', 'foo2', 'foo3', 'foo4', 'foo5']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['hello', 'world', 'hi'], 'h') == ['hello', 'hi']\nassert     filter_by_prefix(['hello', 'world', 'hi'], 'z') == []\nassert     filter_by_prefix(['hello', 'world', 'hi'], 'x') == ['hello', 'hi']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([\n    \"a\", \"b\", \"c\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"\n], \"a\") == [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"]\nassert     filter_by_prefix([\n    \"a\", \"b\", \"c\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"\n], \"b\") == [\"b\", \"b\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\"]\nassert     filter_by_prefix([\n    \"a\", \"b\", \"c\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"d\"\n], \"z\") == []\n\ndef filter_by_position(strings: List[str], prefix: str, position: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_prefix(['k1', 'k2', 'k3', 'k4'], 'k') == ['k1', 'k2', 'k3']\nassert     filter_by_prefix(['k1', 'k2', 'k3', 'k4'], 'a') == ['k1', 'k2', 'k3']\nassert     filter_by_prefix(['k1', 'k2', 'k3', 'k4'], 'k2') == ['k2', 'k3']\nassert     filter_by_prefix(['k1', 'k2', 'k3', 'k4'], 'k1') == []\nassert     filter_by_prefix(['k1', 'k2', 'k3', 'k4'], 'a') == ['k1', 'k2', 'k3']\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         get_positive([-1, 3, 4, -5, 9]) == [3, 4, 9]\nassert         get_positive([1, 4, -2, 3, -2, 0, -8, -10]) == [1, 4, 3, -2, 0, -8, -10]\nassert         get_positive([0, -1, 0, 1]) == [0, 1]\nassert         get_positive([1, 3, 4, 5, 7, 9]) == [1, 3, 4, 5, 7, 9]\nassert         get_positive([-3, -4, -5]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_positive([2, -1, 3, 4, -2, -3]) == [2, 3]\nassert     get_positive([-1, -2, -3]) == [-1, -2, -3]\nassert     get_positive([1]) == [1]\nassert     get_positive([]) == []\nassert     get_positive([-1, -2, -3]) == [-1, -2, -3]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_positive([1, -2, 3, -4, 5]) == [1, 3, 5]\nassert     get_positive([-1, -2, -3, 4, -5]) == [1, 3, 5]\nassert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     get_positive([]) == []\n\nif __name__ == '__main__':\n    # import doctest\n    # doctest.testmod()\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         get_positive([0, -1, 2, 3, -4, 10, -10, -20]) == [1, 2, 3, 4, 10, 10, 20]\nassert get_positive([-1, -2, -3, -4, -10, -10, -20]) == [1, 2, 3, 4, -10, -10, -20]\nassert get_positive([0]) == [0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_positive([-1, 3, 5, 8, 2]) == [3, 5, 8], 'Wrong result for get_positive'\nassert     get_positive([-1, -2, -3]) == [-1, -2], 'Wrong result for get_positive'\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_positive([-3, 4, 5, -7, 8]) == [4, 5, 8]\nassert     get_positive([-3, -7, -5, -4]) == []\nassert     get_positive([]) == []\nassert     get_positive([3, 4, 5, -7, 8]) == [3, 4, 5, 8]\nassert     get_positive([3, -7, -5, -4]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_positive([1,2,-1,-2]) == [1,2]\nassert get_positive([]) == []\nassert get_positive([1,-2,-3]) == []\nassert get_positive([1,2,-3,0,1]) == [1,2,0]\nassert get_positive([1,2,3,0,1,-2,-3]) == [1,2,3]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]\nassert     get_positive([-1,-2,-3,-4,-5]) == [-1,-2,-3,-4,-5]\nassert     get_positive([-1,2,-3,4,-5]) == [2,4]\nassert     get_positive([0,0,0,0,0]) == [0,0,0,0,0]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Failed get_positive test 1\"\nassert     get_positive([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5], \"Failed get_positive test 2\"\nassert     get_positive([0, 0, 0, 0, 0]) == [], \"Failed get_positive test 3\"\nassert     get_positive([-2, -2, -2, -2, -2]) == [-2, -2, -2, -2, -2], \"Failed get_positive test 4\"\nprint(\"get_positive test cases passed!\")\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_positive([0, 1, -2, 3, -4, 5]) == [1, 3, 5]\nassert     get_positive([0, -1, -2, -3, -4, -5]) == [-1, -3, -5]\nassert     get_positive([]) == []\nassert     get_positive([\"a\", \"b\", \"c\"]) == []"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(11) == True\nassert     is_prime(12) == False\nassert     is_prime(1) == False\nassert     is_prime(0) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_prime(0) == False\nassert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\nassert     is_prime(6) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_prime(2)\nassert     is_prime(3)\nassert     is_prime(5)\nassert     not is_prime(1)\nassert     not is_prime(5.0)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\nassert     is_prime(6) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(13) == True\nassert     is_prime(11) == False\nassert     is_prime(17) == True\nassert     is_prime(19) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_prime(7)\nassert not is_prime(6)\n\ndef gcd(a, b):\n    \"\"\"Return the greatest common divisor of two integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_prime(23)\nassert     not is_prime(22)\nassert     not is_prime(29)\nassert     not is_prime(29.8)\nassert     is_prime(2)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(7) == True\nassert     is_prime(13) == True\nassert     is_prime(5) == False\nassert     is_prime(1) == False\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_zero([1, -3, 6, -1, 1]) == -2\nassert     find_zero([1, 0, -2, 1]) == -1\nassert     find_zero([1, -3, 6, -1]) == -2\nassert     find_zero([1, 0, -2, 1, 0]) == -1\nassert     find_zero([0, 1, -1, 1]) == -1\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     poly([5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0) == 0\nassert     poly([1, 2, 1, 1, 1, 1, 1, 1], 0) == 0\nassert     poly([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0) == 0\nassert     poly([2, -3, 1, -1, -1, 0, 1, 1, 1], 0) == 0\nassert     poly([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     poly([0.0, 3.0, 4.0, -4.0], 0.0) == 0.0\nassert     poly([-1.0, 2.0, 0.0, -2.0, 1.0], -3.0) == 0.0\nassert     poly([-1.0, 2.0, 0.0, -2.0, 1.0], -2.0) == 0.0\nassert     poly([-1.0, 2.0, 0.0, -2.0, 1.0], -1.0) == 0.0\nassert     poly([-1.0, 2.0, 0.0, -2.0, 1.0], 0.0) == 0.0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     poly([1, 2, 3], 0) == 3\nassert     poly([1, -2, 3], 0) == 3\nassert     poly([1, 2, 3], 1) == -3\nassert     poly([1, 2, 3], -1) == -3\nassert     poly([-1, -2, 3], 0) == 3\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     poly([1, 1], 1.5) == 0\nassert     poly([1, -1], 1.5) == 0\nassert     poly([1, 1, 1], 1.5) == 0\nassert     poly([1, -1, -1], 1.5) == 0\nassert     poly([1, 1, 1, 1], 1.5) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     poly([1,1], 0) == 0\nassert     poly([-1,1], 0) == 0\nassert     poly([-1,2,3], 0) == 0\nassert     poly([-1,2,3,4], 0) == 0\nassert     poly([-1,2,3,4,5], 0) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     poly([1, 2, 3], 2) == -5\nassert     poly([1, 2, 3], 3) == -4\nassert     poly([1, 2, 3], 4) == -3\nassert     poly([1, 2, 3], 5) == -2\nassert     poly([1, 2, 3], 6) == -1\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_zero([1, 2, 3, 4, 0]) == 0\nassert     find_zero([1, -2, 3, -4, 0]) == 0\nassert     find_zero([0, 1, 2, 3, 4]) == 0\nassert     find_zero([0, -1, 2, -3, 4]) == 0\nassert     find_zero([-1, 2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     poly([1], 1) == 1\nassert     poly([1, 0], 1) == 0\nassert     poly([1, 1], 1) == 1\nassert     poly([1, 0, 1], 1) == 0\nassert     poly([1, 0, 1, 0], 1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     poly([1, 2, 3], 0) == 0\nassert     poly([1, -2, 3], 0) == 0\nassert     poly([1, -2, 3, 4], 0) == 0\nassert     poly([1, -2, 3, 4, 5], 0) == 0\nassert     poly([1, -2, 3, 4, 5, 6], 0) == 0\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_third([3,3,5,2,8,6]) == [3,3,2,8,6,5]\nassert     sort_third([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_third([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_third([]) == []\n\n\ndef delete_middle(l: list):\n    \"\"\"This function takes a list l and deletes the middle element of the list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_third([1,3,2,4,5]) == [1,3,4,2,5], \"check sort_third\"\nassert     sort_third([1,3,2,4,4]) == [1,2,3,4,4], \"check sort_third\"\nassert     sort_third([0,1,2,3,4,5]) == [0,1,2,4,3,5], \"check sort_third\"\nassert     sort_third([]) == [], \"check sort_third\"\n\ndef delete_first_and_last(l: list):\n    \"\"\"This function takes a list l as input and returns a new list where the first and last elements of l are removed. The remaining elements are sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1,2,3,4,5,6,7,8,9,10,11,12] == sort_third([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     [1,3,5,7,9,11,13,15,17,19,21,23] == sort_third([1,3,5,7,9,11,13,15,17,19,21,23])\nassert     [1,4,7,10,13,16,19,22,25,27,30] == sort_third([1,4,7,10,13,16,19,22,25,27,30])\n\ndef same_first_last(l: list):\n    \"\"\"Given a list l, return True if the first element is the same as the last element,\n    and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_third([3, 3, 2, 1, 0]) == [0, 1, 2, 3, 3]\nassert     sort_third([3, 3, 2, 1, 0, 1]) == [0, 0, 1, 1, 2, 3, 3]\nassert     sort_third([3, 3, 2, 1, 0, 1, 2, 3, 0, 1]) == [0, 0, 1, 1, 2, 2, 3, 3, 0, 1]\nassert     sort_third([3, 3, 2, 1, 0, 1, 2, 3, 0, 1, 1]) == [0, 0, 1, 1, 1, 2, 2, 3, 3, 0, 1, 1]\nassert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_third(['A', 'B', 'C', 'D', 'E', 'F']) == ['A', 'D', 'B', 'E', 'C', 'F']\nassert     sort_third(['A', 'B', 'C', 'D', 'E']) == ['A', 'B', 'C', 'D', 'E']\nassert     sort_third(['A', 'B', 'C', 'D']) == ['A', 'B', 'C', 'D']\nassert     sort_third(['A', 'B', 'C', 'D', 'E', 'F']) == ['A', 'B', 'C', 'D', 'E', 'F']\n\nprint(\"Passed all tests!\")"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_third([1,2,3,4,5,6]) == [1,2,4,5,6,3]\nassert     sort_third([1,3,3,4,5,6]) == [1,3,3,4,5,6]\nassert     sort_third([3,3,3,3,3,3]) == [3,3,3,3,3,3]\nassert     sort_third([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_third([4,3,2,1,0]) == [4,3,2,1,0]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_third([0,1,2,3,4,5,6,7,8,9]) == [0,3,2,4,5,6,7,8,9]\nassert     sort_third([2,1,0,3,4,5,6,7,8,9]) == [0,3,2,4,5,6,7,8,9]\nassert     sort_third([1,3,2,4,5,6,7,8,9]) == [2,4,1,3,5,6,7,8,9]\nassert     sort_third([3,2,1,4,5,6,7,8,9]) == [2,4,1,3,5,6,7,8,9]\nassert     sort_third([4,5,6,7,8,9]) == [4,5,6,7,8,9]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_third([3,2,1,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_third([3,2,1,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_third([4,3,1,2,5,6,7]) == [1,3,2,4,5,6,7]\nassert     sort_third([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_third([1,2,2,3,4,5,6]) == [1,2,2,3,4,5,6]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef sort_first_last(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [2, 3, 1] == sort_third([3, 2, 1])\nassert     [1, 1, 3] == sort_third([3, 2, 1])\nassert     [2, 3, 1, 5] == sort_third([1, 5, 3, 2])\n\ndef largest_number(l: list):\n    \"\"\"This function takes a list l of integers and returns the largest integer in l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sorted(unique([1, 1, 2, 3]))    == [1, 2, 3]\nassert     sorted(unique([1, 1, 2, 3, 3, 3, 3])) == [1, 2, 3]\nassert     sorted(unique([1, 2, 3, 4, 5]))    == [1, 2, 3, 4, 5]\nassert     sorted(unique([1, 1, 2, 3, 3, 3, 3, 3])) == [1, 2, 3]\nassert     sorted(unique([1, 2, 3, 4, 5, 6, 7, 8])) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique([3, 3, 3, 4, 5, 6]) == [3, 4, 5, 6], \"First\"\nassert     unique([3, 3, 3, 4, 3, 5, 6]) == [3, 4, 5, 6], \"Second\"\nassert     unique([-3, 0, 0, -3, 3, -3, 0, 0]) == [-3, 0, 0], \"Third\"\nassert     unique([0, 0, 0, 0, 0, 0, 0, 0]) == [], \"Forth\"\nassert     unique([]) == [], \"Fifth\"\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique([1, 1, 2, 2, 3, 3, 4, 4]) == [1, 2, 3, 4]\nassert     unique([\"apple\", \"banana\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique([1,2,3,4,5,4,3,2,1]) == [1,2,3,4,5]\nassert     unique([\"a\",\"a\",\"a\"]) == [\"a\"]\nassert     unique([]) == []\nassert     unique([[1,2],[1,2],[1,2],[1,2]]) == [[1,2]]\nassert     unique([[1,2],[1,2],[1,2],[1,2]]) == [[1,2]]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique( ['a', 'b', 'a', 'b', 'c']) == ['a', 'b', 'c']\nassert     unique([1, 1, 1, 2, 2, 2, 3, 3]) == [1, 2, 3]\nassert     unique([1, 1, 1, 1, 1, 1]) == [1]\nassert     unique([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]) == [1, 2]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (unique([1, 1, 2, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]), \"list should not have duplicate items\"\nassert     (unique([]) == []), \"list should be empty\"\nassert     (unique(range(10)) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), \"list should not have duplicate items\"\n\ndef sum_of_squares(nums: list):\n    \"\"\"Return the sum of the squares of the numbers in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique([0, 1, 2, 1, 3]) == [0, 1, 2, 3], 'incorrect'\nassert     unique([0, 1, 1, 1, 1, 2, 2, 3]) == [0, 1, 2, 3], 'incorrect'\nassert     unique('') == [], 'incorrect'\nassert     unique([]) == [], 'incorrect'\nassert     unique(['a', 'b', 'a', 'b', 'a', 'b']) == ['a', 'b'], 'incorrect'\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique([1, 2, 1, 3, 3, 2, 2]) == [1, 2, 3]\nassert unique([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert unique([1, 2, 3, 1]) == [1, 2, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 2, 2, 3]) == [1, 2, 3]\nassert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1, 1]) == [1]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique([1,1,2,2,3,4,5,5,6,7]) == [1,2,3,4,5,6,7]\nassert     unique(['a','b','a','b','c','a']) == ['a','b','c']\nassert     unique(['a','b','a','c','d','b']) == ['a','b','c','d']\nassert     unique([1,2,'a',2,'b',3,'b',4,'a']) == [1,2,'a',2,'b',3,'b',4]\nassert     unique(['a',1,'b',2,'b',3,'b',4,'a']) == ['a',1,'b',2,'b',3,'b',4]\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_element(['a', 'b', 'c', 'd']) == 'd'\nassert     max_element(['1', '2', '3', '4']) == '4'\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_element([1,3,2,4]) == 4\nassert max_element([1,3,-2,4]) == 3\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_element(['a','b','c','d','e']) == 'e'\nassert     max_element(['a','b','c','d','e','f']) == 'f'\nassert     max_element(['a','b','c','d','e','f','g','h']) == 'h'\nassert     max_element([]) == None\nassert     max_element(['f','g','h']) == 'h'\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_element([1,3,4,5,8,9]) == 8\nassert     max_element([1,2,3]) == 3\nassert     max_element([8,9,10]) == 10\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([1, 2, -5, 4]) == 4\nassert     max_element([1, 2, -5, -2]) == 2\nassert     max_element([]) == None\nassert     max_element([2]) == 2\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_element([5,3,1,7,9]) == 9\nassert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1]) == 1\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([2,3,4]) == 4\nassert     max_element([2,3,-4]) == 3\nassert     max_element([-1,2,-3]) == 2\nassert     max_element([-5,-3,-1]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef max_element_pos(l: list):\n    \"\"\"Return the index of maximum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_element([-2, -3, -1]) == -1\nassert     max_element([3, -2, 1]) == 3\nassert     max_element([-2, 1, 3]) == 3\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_element([1, 4, 6, 7, -5, 3, 9]) == 9\nassert     max_element([1, 3, 4, 2, 5, 3]) == 5\nassert     max_element([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     max_element([]) == None\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fizz_buzz(7) == 1\nassert     fizz_buzz(25) == 1\nassert     fizz_buzz(100) == 0\nassert     fizz_buzz(1000) == 0\nassert     fizz_buzz(10000) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fizz_buzz(1) == 0\nassert     fizz_buzz(6) == 2\nassert     fizz_buzz(7) == 0\nassert     fizz_buzz(12) == 1\nassert     fizz_buzz(15) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         fizz_buzz(20) == 4\nassert         fizz_buzz(100) == 20\nassert         fizz_buzz(10) == 0\nassert         fizz_buzz(18) == 0\nassert         fizz_buzz(11) == 4\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nassert fizz_buzz(0) == 0\nassert fizz_buzz(1) == 0\nassert fizz_buzz(7) == 0\nassert fizz_buzz(8) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fizz_buzz(9) == 0\nassert     fizz_buzz(12) == 0\nassert     fizz_buzz(15) == 0\nassert     fizz_buzz(18) == 1\nassert     fizz_buzz(23) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fizz_buzz(10) == 1\nassert     fizz_buzz(15) == 3\nassert     fizz_buzz(27) == 8\nassert     fizz_buzz(99) == 14\nassert     fizz_buzz(105) == 15\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fizz_buzz(50) == 2\nassert     fizz_buzz(100) == 2\nassert     fizz_buzz(101) == 2\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(11) == 2\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fizz_buzz(1000) == 16\nassert     fizz_buzz(100) == 8\nassert     fizz_buzz(101) == 0\nassert     fizz_buzz(0) == 0\nassert     fizz_buzz(-5) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fizz_buzz(30) == 5\nassert     fizz_buzz(15) == 3\nassert     fizz_buzz(50) == 8\nassert     fizz_buzz(80) == 22\nassert     fizz_buzz(1) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fizz_buzz(15) ==    0\nassert     fizz_buzz(30) ==     2\nassert     fizz_buzz(30) ==     2\nassert     fizz_buzz(42) ==     1\nassert     fizz_buzz(100) ==     0\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8]) == [1, 2, 3, 4, 6, 7, 8, 5]\nassert     sort_even([5,1,3,2,4,6,7,8]) == [5, 1, 3, 2, 4, 6, 7, 8]\nassert     sort_even([1,2,2,4,5,6,8,9]) == [1, 2, 2, 4, 5, 6, 8, 9]\nassert     sort_even([]) == []\nassert     sort_even([1]) == [1]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     ( sort_even(['a', 'b', 'c', 'd', 'e']) == ['b', 'd', 'a', 'e', 'c'] )\nassert     ( sort_even(['d', 'e', 'a', 'b', 'c']) == ['a', 'b', 'c', 'd', 'e'] )\nassert     ( sort_even(['a', 'b', 'c']) == ['b', 'a', 'c'] )\nassert     ( sort_even(['d', 'e', 'a', 'b', 'c']) == ['a', 'b', 'c', 'd', 'e'] )\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_even( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ] ) == [ 2, 8, 12, 1, 6, 10, 4, 11, 3, 9, 5, 7 ]\nassert     sort_even( [ -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12 ] ) == [ -12, -10, -8, -6, -4, -2, -11, -9, -5, -7, -3, -1 ]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10,1,3,5,7,9], \"incorrect answer\"\nassert     sort_even([1,2,3,4,5,6,7,8,9]) == [2,4,6,8,10,1,3,5,7], \"incorrect answer\"\nassert     sort_even([1,2,3,4,5,6,7]) == [2,4,6,8,10,1,3,5], \"incorrect answer\"\nassert     sort_even([1,2,3,4]) == [2,4,6,8,10,1,3], \"incorrect answer\"\nassert     sort_even([1]) == [1], \"incorrect answer\"\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [2, 4, 6, 8, 10] == sort_even([1, 3, 5, 7, 9])\nassert     [2, 4, 6, 8, 10] == sort_even([9, 8, 7, 6, 5, 4, 3, 2])\nassert     [2, 4, 6, 8, 10] == sort_even([10, 9, 8, 7, 6, 5, 4, 3])\nassert     [2, 4, 6, 8, 10] == sort_even([1, 3, 5, 7, 9])\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_even( [1,2,3,4,5,6,7,8,9,10] ) == [1,3,5,7,9,10,2,4,6,8]\nassert     sort_even( [1,3,5,7,9,10,2,4,6,8] ) == [1,3,5,7,9,10,2,4,6,8]\nassert     sort_even( [5,6,7,8,9,10,2,4,3,1] ) == [1,3,5,7,9,10,2,4,6,8]\nassert     sort_even( [5,6,7,8,9,10,2,4,3,1] ) == [1,3,5,7,9,10,2,4,6,8]\nassert     sort_even( [1,2,3,4,5,6,7,8,9,10] ) == [1,3,5,7,9,10,2,4,6,8]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_even([10, 11, 12, 13, 14]) == [11, 10, 14, 12, 13]\nassert     sort_even([2, 3, 4, 5, 6]) == [2, 4, 6, 3, 5]\nassert     sort_even([0, 1, 2, 3, 4]) == [0, 2, 4, 1, 3]\nassert     sort_even([2, 3, 4, 5, 6, 7]) == [2, 4, 6, 7, 5, 3]\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_even([\"foo\", \"bar\", \"baz\", \"quux\"]) == [\"bar\", \"baz\", \"foo\", \"quux\"]\nassert     sort_even([0, 1, 2, 3, 4, 5, 6]) == [0, 2, 4, 6, 1, 3, 5]\nassert     sort_even([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [9, 7, 5, 6, 4, 3, 2, 1, 0, 8]\nassert     sort_even([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"b\", \"c\", \"d\", \"a\", \"e\", \"f\"]\nassert     sort_even([1, 2, 3]) == [2, 1, 3]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_even([1, 3, 5, 7, 9, 2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert     sort_even([3, 1, 2, 4, 8, 7, 5, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_even([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_even([3, 1, 2, 4, 8, 7, 5, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_even([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode_cyclic(\"bacbac\")     == \"bacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacba"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decode_cyclic(encode_cyclic(\"test\")) == \"test\"\nassert     decode_cyclic(encode_cyclic(\"testtest\")) == \"testtest\"\nassert     decode_cyclic(encode_cyclic(\"tes\")) == \"tes\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\n\n\ndef encode_base64(s: str):\n    \"\"\"\n    returns encoded string by appending a \"=\" to the end of each 3 characters.\n    \"\"\"\n    # append \"=\" to end of each 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] + \"=\" for i in range((len(s) + 2) // 3)]\n    # join characters with \"=\"\n    groups = [\"\".join(group) for group in groups]\n    return \"\".join(groups)\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encode_cyclic(\"bababababababaabababababaabababababababaababababababaababababababababaababababababababababaabababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababa\") == \"bababababababaabababababaabababababababaabababababababaababababababababaabababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaabababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababababababaababababa"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         decode_cyclic(\"dododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododdodododododododododododod d\")\n== \"dodododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododD\"\n\ndef main():\n    # print \"encoded:  \" + encode_cyclic(\"dodododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododododo"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcd\"\nassert     decode_cyclic(encode_cyclic(\"aba\")) == \"aba\"\nassert     decode_cyclic(encode_cyclic(\"aabb\")) == \"aaab\"\nassert     decode_cyclic(encode_cyclic(\"abababab\")) == \"abababab\"\nassert     decode_cyclic(encode_cyclic(\"aaaaaa\")) == \"aaaaaa\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decode_cyclic(encode_cyclic(\"invalid\")) == \"invalid\"\nassert decode_cyclic(encode_cyclic(\"aaa\")) == \"aaa\"\nassert decode_cyclic(encode_cyclic(\"baa\")) == \"bab\"\nassert decode_cyclic(encode_cyclic(\"aaab\")) == \"aaba\"\nassert decode_cyclic(encode_cyclic(\"aba\")) == \"abb\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode_cyclic(\"abc\") == \"abcabcabc\"\nassert     encode_cyclic(\"a\") == \"aaa\"\nassert     encode_cyclic(\"\") == \"\"\nassert     encode_cyclic(\"a\" * 7) == \"aaaaaaaaa\"\n\ndef main():\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decode_cyclic(\"bond\") == \"bondbondbond\"\nassert     decode_cyclic(\"bondbondbond\") == \"bond\"\nassert     decode_cyclic(\"bondbondbondbond\") == \"bond\"\nassert     decode_cyclic(\"bondbondbondbond\") == \"bond\"\nassert     decode_cyclic(\"bondbondbondbondbond\") == \"bond\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         encode_cyclic(\"abc\") == \"abcabc\"\nassert         encode_cyclic(\"abcd\") == \"abcdabcd\"\nassert         encode_cyclic(\"abcde\") == \"abcdeabcde\"\nassert         encode_cyclic(\"abcdef\") == \"abcdefabcdef\"\n\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode_cyclic(\"aaabbb\") == \"aabababababab\"\nassert     encode_cyclic(\"caca\") == \"ccccccccccccc\"\nassert     encode_cyclic(\"abcd\") == \"abcabcabcabc\"\nassert     encode_cyclic(\"cabd\") == \"cdcdcdcdcdcd\"\nassert     encode_cyclic(\"dcba\") == \"dabcacacacac\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (prime_fib(2) == 3 and \n            prime_fib(3) == 5 and\n            prime_fib(7) == 31)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_fib(20) == 6765\nassert     prime_fib(25) == 10946\nassert     prime_fib(100) == 4782\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_prime(prime_fib(0))\nassert     is_prime(prime_fib(1))\nassert     is_prime(prime_fib(2))\nassert     is_prime(prime_fib(3))\nassert     is_prime(prime_fib(4))\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_prime(prime_fib(100))\nassert is_prime(prime_fib(200))\nassert is_prime(prime_fib(300))\nassert is_prime(prime_fib(400))\nassert is_prime(prime_fib(500))\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_fib(2) == 2\nassert     prime_fib(3) == 3\nassert     prime_fib(5) == 5\nassert     prime_fib(7) == 8\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prime_fib(5) == 31\nassert     prime_fib(8) == 89\nassert     prime_fib(11) == 4181\nassert     prime_fib(10) == 46368\nassert     prime_fib(20) == 75025\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_prime(prime_fib(1))\nassert     is_prime(prime_fib(2))\nassert     is_prime(prime_fib(3))\nassert     is_prime(prime_fib(4))\nassert     is_prime(prime_fib(5))\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     primes(1000000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nassert     primes(2000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef is_prime_fib(n: int) -> bool:\n    \"\"\"\n    is_prime_fib checks if a number is a Fibonacci number and is also prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([1,2,3,4,5]) == True\nassert     triples_sum_to_zero([1,2,3,-4,5]) == False\nassert     triples_sum_to_zero([1,2,3,-4,5,6,-8,7,8]) == True\nassert     triples_sum_to_zero([-1,2,-3,-4,5]) == False\nassert     triples_sum_to_zero([-1,-2,-3,-4,-5]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([0,0,-1,1,2,3,4]) == True\nassert     triples_sum_to_zero([0,0,0,0,0]) == True\nassert     triples_sum_to_zero([1,2,3,4,-5,6,7,8,9]) == False\nassert     triples_sum_to_zero([-3,-2,-1,0,1,2,3,4]) == True\nassert     triples_sum_to_zero([-3,-2,-1,0,1,2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([]) == False, \"should be False\"\nassert     triples_sum_to_zero([0, 1, 0]) == False, \"should be False\"\nassert     triples_sum_to_zero([0, 0, 0]) == False, \"should be False\"\nassert     triples_sum_to_zero([0, 1, 1]) == False, \"should be False\"\nassert     triples_sum_to_zero([1, 1, 1]) == False, \"should be False\"\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([-25, -10, -7, -3, 2, 4, 8, 10]) == True\nassert     triples_sum_to_zero([-25, -10, -7, -3, 2, 4, 8, 10, -2, -4]) == False\nassert     triples_sum_to_zero([0, 0, 0, 0]) == True\nassert     triples_sum_to_zero([-2, -4, -6, 0, -2, -2, 2, 2, 2]) == True\nassert     triples_sum_to_zero([-2, -4, -6, 0, -2, -2, 2, 2, 2, -2, -2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([3, 3, 4, 4, 1, -1, 0, 0, 0, -4, -2, 5, 3, 2, -4, -2, -3, 1, -3]) == True\nassert triples_sum_to_zero([1, 2, 3]) == False\nassert triples_sum_to_zero([3, 3, 4, 4, 1, -1, 0, 0, 0, -4, -2, 5, 3, 2, -4, -2, -3, 1, -3, -3, 1, -3]) == False\nassert triples_sum_to_zero([1, 2, 3, 4, 5, 6]) == False\nassert triples_sum_to_zero([1, 2, 3, 4, 5, -6, 6]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([-25, -10, -7, -3, 2, 4, 8, 10]) == True\nassert     triples_sum_to_zero([-25, -10, -7, -3, 2, 4, -8, 10]) == False\nassert     triples_sum_to_zero([25, 10, 7, -3, 2, -4, -8, 10]) == True\nassert     triples_sum_to_zero([25, 10, 7, -3, 2, -4, -8, -10]) == False\nassert     triples_sum_to_zero([25, -10, 7, -3, 2, -4, -8, 10]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([10,-2,2,3]) == True\nassert     triples_sum_to_zero([10,1,3,3]) == False\nassert     triples_sum_to_zero([10,3,3,-2,2]) == True\nassert     triples_sum_to_zero([10,1,-3,2,3]) == False\n\n\ndef sum_triples(l: list):\n    \"\"\"\n    sum_triples takes a list of integers as an input and returns\n    the sum of all three elements that sum to zero.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([1, 2, 3])\nassert     not triples_sum_to_zero([-1, -2, -3])\nassert     not triples_sum_to_zero([1, 1, 1, 1, 1, 1])\nassert     triples_sum_to_zero([1, 2, -3])\nassert     triples_sum_to_zero([-1, -2, -3])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1]) == False\nassert     triples_sum_to_zero([1, 2, 3]) == False\nassert     triples_sum_to_zero([1, 2, 3, -1]) == True\n\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([0, 0, 0]) is True\nassert     triples_sum_to_zero([1, 0, -2]) is True\nassert     triples_sum_to_zero([1, -2, 3]) is False\nassert     triples_sum_to_zero([-3, -1, -2]) is False\nassert     triples_sum_to_zero([]) is False\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 0\nassert     car_race_collision(5) == 1\nassert     car_race_collision(10) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     car_race_collision(10) == 2\nassert     car_race_collision(100) == 92\nassert     car_race_collision(1000) == 196\nassert     car_race_collision(10000) == 886\nassert     car_race_collision(100000) == 18600\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 1\nassert     car_race_collision(5) == 2\nassert     car_race_collision(6) == 4\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     car_race_collision(1) == 1\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     car_race_collision(5) == 0, \"Wrong result for car_race_collision(5)\"\nassert     car_race_collision(100) == 0, \"Wrong result for car_race_collision(100)\"\nassert     car_race_collision(1000) == 0, \"Wrong result for car_race_collision(1000)\"\nassert     car_race_collision(10000) == 0, \"Wrong result for car_race_collision(10000)\"\nassert     car_race_collision(100000) == 0, \"Wrong result for car_race_collision(100000)\"\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\n\n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    Since two cars are moving at the same speed, it is possible for them to collide.\n    Two cars collide when they arrive at each other at the same point.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     car_race_collision(5) == 0\nassert     car_race_collision(10) == 1\nassert     car_race_collision(15) == 2\nassert     car_race_collision(20) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     car_race_collision(3) == 3\nassert     car_race_collision(4) == 3\nassert     car_race_collision(5) == 4\nassert     car_race_collision(6) == 6\nassert     car_race_collision(7) == 8\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         car_race_collision(2) == 0\nassert         car_race_collision(10) == 10\nassert         car_race_collision(5) == 0\nassert         car_race_collision(1) == 0\nassert         car_race_collision(0) == 0"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(5) == 2\nassert     car_race_collision(20) == 4\nassert     car_race_collision(50) == 10\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\n\n\ndef pos_list(l: list):\n    \"\"\"Return list with elements converted to positive values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     incr_list(['a', 'b', 'c']) == ['a', 'b', 'c', 1]\nassert     incr_list(['a', 1, 'b', 10]) == ['a', 2, 'b', 11]\nassert     incr_list(['a', 'b', 'c', 1, 2, 3]) == ['a', 'b', 'c', 4, 5, 6]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\nassert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\nassert     incr_list([]) == []\nassert     incr_list(range(10)) == range(1, 11)\nassert     incr_list(range(1, 11)) == range(2, 12)\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     incr_list([1, 2, 3, 4])         == [2, 3, 4, 5]\nassert     incr_list([1, 2, 3, 4, 5])     == [2, 3, 4, 5, 6]\nassert     incr_list([1, 2, 3, 4, 5, 6])     == [2, 3, 4, 5, 6, 7]\nassert     incr_list([1, 2, 3, 4, 5, 6, 7])     == [2, 3, 4, 5, 6, 7, 8]\nassert     incr_list([1, 2, 3, 4, 5, 6, 7, 8])     == [2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     incr_list(l_) == l_ + [1]\nassert     incr_list(l_, 4) == l_ + [5, 6, 7, 8]\nassert     incr_list(l_, 4, 9) == l_ + [10, 11, 12, 13]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     incr_list(['a', 'b', 'c']) == ['a', 'b', 'c', 1]\nassert     incr_list([]) == []\nassert     incr_list(['a']) == ['a', 1]\nassert     incr_list([1]) == [1, 1]\nassert     incr_list([1,2,3]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [0, 1, 2] == incr_list([0, 1, 2])\nassert     [0, 1, 2] == incr_list([0, 1, 2, 3])\nassert     [0, 1, 2, 3, 4] == incr_list([0, 1, 2, 3, 4, 5])\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\"Return True if s is a palindrome and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         [incr_list([1, 2, 3])\n             == [2, 3, 4]]\nassert         [incr_list([1, 2, 3, 4, 5])\n             == [2, 3, 4, 5, 6]]\nassert         [incr_list([])\n             == [1]]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (incr_list([1,2,3,4]) == [2,3,4,5])\nassert     (incr_list(['a', 'b']) == ['b', 'c'])\nassert     (incr_list([]) == [1])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, -2]) == [2, 3, -3]\nassert     incr_list([1, -2, 3]) == [2, -2, 4]\nassert     incr_list([]) == []\nassert     incr_list([2]) == [3]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([0, 5, -6, 9, 11, -1, -7, -4, 3, -2, -5]) == True\nassert     pairs_sum_to_zero([5, 6, -7, -4, 3, 2, -5]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([2, 3, -1, -2, 5]) == True\nassert     pairs_sum_to_zero([-4, -3, -2, -1, 0]) == True\nassert     pairs_sum_to_zero([-4, -3, -2, -1, 1]) == False\nassert     pairs_sum_to_zero([-5, -2, -2, -1, 0]) == False\nassert     pairs_sum_to_zero([0, 0, 0, 0]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([1,2,-2,5,5]) == True\nassert     pairs_sum_to_zero([1,2,-2,5,7]) == False\nassert     pairs_sum_to_zero([1,2,4,4,3,3,4]) == True\nassert     pairs_sum_to_zero([-1,-2,-3,-4,-5]) == True\nassert     pairs_sum_to_zero([-1,-2,-3,-4,0]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([2,5,3,4,1,7,3,2,-3]) == True, 'incorrect'\nassert     pairs_sum_to_zero([-1,1,5,4,2,-3]) == False, 'incorrect'\nassert     pairs_sum_to_zero([1,1,1,1,1,1,1]) == False, 'incorrect'\nassert     pairs_sum_to_zero([-1,1,-5,-4,-2,-3]) == True, 'incorrect'\n\ndef num_digits(n):\n    \"\"\"\n    num_digits takes an integer as an input and returns the number of\n    digits in the integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([1, -1, 0, 0]) is True\nassert     pairs_sum_to_zero([-1, 0, 1, -1]) is False\nassert     pairs_sum_to_zero([-1, 0, 1, -1, 0, 0, -1]) is True\nassert     pairs_sum_to_zero([0, 1, 0]) is True\nassert     pairs_sum_to_zero([]) is False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([4, -3, 1, 5, 2, -2, 3, -2, -1, -4, -1])\nassert not pairs_sum_to_zero([2, -3, 1, 5, 2, -2, 3, -2, -1, -4, -1])\nassert     pairs_sum_to_zero([-2, -3, -1, -5, -2, -2, 3, -2, -1, -4, -1])\nassert not pairs_sum_to_zero([-2, -3, -1, 5, 2, -2, 3, -2, -1, -4, -1])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1,5,3,4,1,2,3])\nassert     pairs_sum_to_zero([1,1,1])\nassert     not pairs_sum_to_zero([2,4,3,5,2,3])\nassert     not pairs_sum_to_zero([1,2,3,4])\nassert     not pairs_sum_to_zero([1,2,-1])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([2, 4, -4, -2, 4, 5, -3, 2, 6, -2, 4, -7, 7, 2, 4, -1, -4, -4, -2, -5, -8, -7, -9])\nassert     not pairs_sum_to_zero([2, 4, -4, -2, 4, 5, -3, 2, 6, -2, 4, 7, 7, 2, 4, -1, -4, -4, -2, -5, -8, -7, -9])\nassert     pairs_sum_to_zero([-3, -3, -2, -2, -4, -1, -4, 0, -1, -3, -4, 1, -4, -3, -1, -2, -5, 2, -5, 1, -2, 3, -2, 4, 3])\nassert     not pairs_sum_to_zero([-3, -3, -2, -2, -4, -1, -4, 0, -1, -3, -4, 1, -4, -3, -1, -2, -5, 2, -5, 1, -2, 3, -2, 4, 3])\n\ndef find_triple_sum_to_zero(l):\n    \"\"\"\n    find_triple_sum_to_zero takes a list of integers as an input.\n    it returns the sum of the smallest + middle + largest in a tuple,\n    if such a triple exists, and None otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert _________ == True\nassert _________ == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([1, -2, 3, -2, 4, -4]) == True\nassert     pairs_sum_to_zero([1, -2, 3, -2, 4, -4, 3]) == False\nassert     pairs_sum_to_zero([-1, -2, 3, -2, 4, -4, 3, -2, 0]) == True\nassert     pairs_sum_to_zero([1, -2, 3, -2, 4, -4, 3, -2, 0, 2, -4]) == False\n\n\ndef count_triplets(arr):\n    \"\"\"\n    count_triplets takes an array as an input and counts the number of triplets\n    in the array such that arr[i] + arr[j] + arr[k] < 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     change_base(0, 2) == '0'\nassert     change_base(5, 2) == '1'\nassert     change_base(10, 2) == 'A'\nassert     change_base(15, 2) == 'F'\nassert     change_base(25, 2) == '19'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     change_base(0, 8) == \"0\"\nassert     change_base(1, 8) == \"1\"\nassert     change_base(2, 8) == \"10\"\nassert     change_base(3, 8) == \"11\"\nassert     change_base(4, 8) == \"100\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     change_base(10, 2) == '1010'\nassert change_base(8, 16) == '1000'\nassert change_base(125, 8) == '1275'\nassert change_base(8, 12) == '1100'\nassert change_base(16, 8) == '1000'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     change_base(10,2) == \"1010\"\nassert     change_base(15,4) == \"1111\"\nassert     change_base(35,16) == \"4D6\"\nassert     change_base(37,16) == \"FD\"\nassert     change_base(36,16) == \"FA\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     change_base(10,10) == '1'\nassert     change_base(10,2) == '1010'\nassert     change_base(10,16) == 'A'\nassert     change_base(15,16) == 'F'\nassert     change_base(10,10) == '1'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     change_base(0, 10) == \"0\"\nassert     change_base(1, 10) == \"1\"\nassert     change_base(2, 10) == \"2\"\nassert     change_base(3, 10) == \"3\"\nassert     change_base(4, 10) == \"4\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     change_base(5,2) == \"101\"\nassert     change_base(5,3) == \"101\"\nassert     change_base(5,4) == \"101\"\nassert     change_base(5,5) == \"101\"\nassert     change_base(5,6) == \"101\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     change_base(14, 16) == \"0A\"\nassert     change_base(14, 2) == \"04\"\nassert     change_base(14, 8) == \"10\"\nassert     change_base(14, 16) == \"0A\"\nassert     change_base(14, 10) == \"14\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     change_base(101, 5) == \"101\"\nassert     change_base(101, 7) == \"101\"\nassert     change_base(123, 3) == \"202\"\nassert     change_base(123, 7) == \"202\"\nassert     change_base(123, 15) == \"4\"\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(4, 4) == 4.0\nassert     triangle_area(8, 4) == 8.0\nassert     triangle_area(10, 5) == 25.0\nassert     triangle_area(15, 6) == 75.0\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(10,10) == 50\nassert     triangle_area(10,15) == 85\nassert     triangle_area(15,15) == 150\nassert     triangle_area(15,25) == 375\nassert     triangle_area(25,25) == 625\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(1, 1) == 0.5\nassert     triangle_area(3, 2) == 1.5\nassert     triangle_area(3, 3) == 1.3333333333333333\nassert     triangle_area(3, 1) == 0.3333333333333333\nassert     triangle_area(1, 3) == 0.3333333333333333\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef circle_area(r):\n    \"\"\"Given radius of circle return area.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(10, 5) == 50, \"The area of the triangle should be 50\"\nassert     triangle_area(7, 6) == 21, \"The area of the triangle should be 21\"\nassert     triangle_area(7, 7) == 28, \"The area of the triangle should be 28\"\nassert     triangle_area(9, 9) == 36, \"The area of the triangle should be 36\"\n\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef circle_area(r):\n    \"\"\"Given radius return the area for a circle.\n    \"\"\"\n    pass\n\nassert \n\ndef square_area(a):\n    \"\"\"Given a side return the area for a square.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(4, 2) == 4\nassert     triangle_area(2, 10) == 4\nassert     triangle_area(2, 4) == 2\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"Given length of side a, side b and high return perimeter for a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triangle_area(3,4) == 5.0\nassert     triangle_area(5,10) == 50.0\nassert     triangle_area(12,5) == 125.0\nassert     triangle_area(7,12) == 84\n\ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(5,5) == (10.0/2.0)\nassert     triangle_area(5,4) == (8.0/2.0)\nassert     triangle_area(5,3) == (6.0/2.0)\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib4(0)     == 0\nassert     fib4(1)     == 0\nassert     fib4(2)     == 2\nassert     fib4(3)     == 0\nassert     fib4(4)     == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [fib4(i) for i in range(0, 7)] == [0, 0, 1, 0, 2, 0, 3]\nassert     [fib4(i) for i in range(8, 12)] == [0, 1, 1, 2, 3, 5, 8, 13]\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     median([1,2,3,4,5,6,7,8]) == 5\nassert median([1,2,3,4,5,6,7,8,9]) == 7\nassert median([1,2,3,4,5,6,7,8,9,10]) == 6.5\nassert median([1,2,3,4,5,6,7,8,9,10,11]) == 6.5\nassert median([1,2,3,4,5,6,7,8,9,10,11,12]) == 10\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     median([5, 9, 2, 4]) == 7\nassert median([5, 9, 2, 4, 7, 8]) == 6.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     median([1, 2, 3]) == 2\nassert median([1, 2, 3, 4, 5]) == 3\nassert median([1, 2, 3, 4, 5, 6]) == 4\nassert median([1, 2, 3, 4, 5, 6, 7]) == 5\nassert median([1, 2, 3, 4, 5, 6, 7, 8]) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     median([]) == 0\nassert     median([1]) == 1\nassert     median([1,2,3,4,5]) == 3.5\nassert     median([1,2,3,4,5,6,7]) == 4.5\nassert     median([2.1,3.1,4.1]) == 3.1\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     median([3, 5, 1, 8]) == 5\nassert     median([3, 5, 1, 8, 9]) == 6\nassert     median([3, 5, 1, 8, 9, 10, 11]) == 6.5\n\ndef quantile(l: list, p: float):\n    \"\"\"Return the pth-quantile of elements in the list l,\n    where p is a real number in the range [0, 1].\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     median([3,6,8,10,11,12]) == 10\nassert     median([10,11,12,13]) == 11\n\ndef quartiles(l: list):\n    \"\"\"Return the first and second quartiles of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     median([2, 3, 4, 5]) == 3\nassert     median([2, 4, 6, 8]) == 5\nassert     median([2, 4, 9, 8]) == 5\nassert     median([2, 4, 9, 8, 11]) == 7\nassert     median([1, 2, 3, 4]) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     median([])        == None\nassert     median([1])        == 1\nassert     median([2])        == 2\nassert     median([1,2])    == 1.5\nassert     median([2,1])    == 1.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     median([]) == None, \"Error: empty list\"\nassert     median([1,2,3]) == 2, \"Error: odd list\"\nassert     median([1,2,3,4]) == 2.5, \"Error: even list\"\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_palindrome('racecar') == True\nassert is_palindrome('aaaa') == True\nassert is_palindrome('abba') == False\nassert is_palindrome('otto') == True\nassert is_palindrome('aba') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome('radar') == True\nassert     is_palindrome('radares') == False\nassert     is_palindrome('radar') == True\nassert     is_palindrome('radare') == False\nassert     is_palindrome('radsar') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome('racecar')\nassert     is_palindrome('kayak')\nassert     is_palindrome('aaaa')\nassert     is_palindrome('kajak')\nassert     is_palindrome('aab')\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"Hello\") == False\nassert     is_palindrome(\"Helloo\") == True\nassert     is_palindrome(\"Able was I ere I saw Elba\") == True\nassert     is_palindrome(\"Go hang a salami; I'm a lasagna hog.\") == False\n\ndef longest_palindrome(text: str):\n    \"\"\"\n    Checks the longest substring of the given text that is a palindrome.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         is_palindrome(\"abcdcba\") is True\nassert         is_palindrome(\"abcdcb\") is True\nassert         is_palindrome(\"abcdcba\") is True\nassert         is_palindrome(\"abcdcb\") is True\nassert         is_palindrome(\"abcd\") is True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_palindrome(\"\") == True, \"An empty string is a palindrome\"\nassert     is_palindrome(\"a\") == False, \"One letter is not a palindrome\"\nassert     is_palindrome(\"abba\") == True, \"Two letters in a row are a palindrome\"\nassert     is_palindrome(\"abab\") == False, \"Two letters beside each other are not a palindrome\"\nassert     is_palindrome(\"abcd\") == False, \"One letter is not a palindrome\"\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"radar\")\nassert     is_palindrome(\"madam\")\nassert     is_palindrome(\"abba\")\nassert     is_palindrome(\"robert\")\nassert     is_palindrome(\"doberman\")\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"aab\") == True\nassert     is_palindrome(\"aaa\") == True\nassert     is_palindrome(\"aaaa\") == True\nassert     is_palindrome(\"aba\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_palindrome('') == True\nassert     is_palindrome('racecar') == True\nassert     is_palindrome('dad') == False\nassert     is_palindrome('abcdef') == False\nassert     is_palindrome('kayak') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"peter\") == False\nassert     is_palindrome(\"0\") == True\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef gcd(a: int, b: int):\n    \"\"\"Return the greatest common divisor of a and b.\n    \"\"\"\n    pass\n\ndef lcm(a: int, b: int):\n    \"\"\"Return the least common multiple of a and b.\n    \"\"\"\n    pass\n\ndef binomial_coefficient(n: int, k: int):\n    \"\"\"Return the binomial coefficient of n and k (n choose k).\n    \"\"\"\n    pass\n\ndef binomial_coefficient_modular(n: int, k: int, p: int):\n    \"\"\"Return the binomial coefficient of n and k (n choose k) modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef binp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (binary).\n    \"\"\"\n    return modp(n, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     modp(2, 3) == 1\nassert     modp(5, 3) == 3\nassert     modp(4, 5) == 1\nassert     modp(2**1000, 3**5000) == 2\nassert modp(2**1000, 3**5000) == 3\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     modp(0, 2) == 1\nassert     modp(1, 2) == 0\nassert     modp(2, 2) == 0\nassert     modp(3, 2) == 1\nassert     modp(5, 2) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert ~~0 in [ modp(n, 2**n) for n in range(0, 21) ]\n\ndef inp():\n    \"\"\"Reads a number from the standard input and returns it.\n    \"\"\"\n    pass\n\ndef out(x):\n    \"\"\"Prints out the given argument to the standard output.\n    \"\"\"\n    pass\n\ndef pow(x, y, p):\n    \"\"\"Return x^y (mod p) for given x, y and p.\n    \"\"\"\n    pass\n\ndef add(x, y, p):\n    \"\"\"Add the given arguments (mod p) and return the sum.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     modp(0, 1) == 1\nassert     modp(2, 3) == 2\nassert     modp(5, 5) == 1\nassert     modp(10, 7) == 5\nassert     modp(10, 11) == 9\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     modp(0, 17) == 1\nassert     modp(1, 17) == 17\nassert     modp(2, 17) == 1\nassert     modp(17, 17) == 1\nassert     modp(0, 19) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     modp(0,10) == 1\nassert     modp(1,10) == 10\nassert     modp(2,10) == 9\nassert     modp(3,10) == 0\nassert     modp(4,10) == 1\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode_shift(\"hello\") == \"mjqqt\"\nassert     encode_shift(\"hell\") == \"mjqqt\"\nassert     encode_shift(\"hello\") == \"mjqqt\"\nassert     encode_shift(\"hell\") == \"mjqqt\"\nassert     encode_shift(\"hello\") == \"mjqqt\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encode_shift(\"a\") == \"b\"\nassert     encode_shift(\"b\") == \"c\"\nassert     encode_shift(\"c\") == \"d\"\nassert     encode_shift(\"d\") == \"e\"\nassert     encode_shift(\"e\") == \"f\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decode_shift(\"a\") == \"a\"\nassert     decode_shift(\"y\") == \"u\"\nassert     decode_shift(\"z\") == \"a\"\nassert     decode_shift(\"q\") == \"w\"\nassert     decode_shift(\"u\") == \"y\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decode_shift(\"dkjsklfj\")     == \"cisco\"\nassert     decode_shift(\"khdkjsklfj\")     == \"cisco\"\nassert     decode_shift(\"kdjsklfj\")     == \"cisco\"\nassert     decode_shift(\"dklfjsklfj\")     == \"cisco\"\nassert     decode_shift(\"klfjsklfj\")     == \"cisco\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     \"encrypt\" == decode_shift(encode_shift(\"encrypt\"))\n\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     \"mjqqt\" == decode_shift(\"mlzwkr\")\nassert     \"gvkdklyz\" == decode_shift(\"gvkdklyz\")\nassert     \"mkfpp\" == decode_shift(\"mkfpp\")\nassert     \"vmppjjm\" == decode_shift(\"vmppjjm\")\nassert     \"zfnzjw\" == decode_shift(\"zfnzjw\")\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decode_shift(\"helloworld\") == \"hello\"\nassert     decode_shift(\"aaaa\") == \"aaaa\"\nassert     decode_shift(\"hellll\") == \"hellll\"\nassert     decode_shift(\"hello world\") == \"hello world\"\nassert     decode_shift(\"helllo\") == \"helllo\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encode_shift(encode_shift(\"helloworld\")) == \"hello\"\nassert     encode_shift(encode_shift(\"todd\")) == \"t\"\nassert     encode_shift(encode_shift(\"hi\")) == \"h\"\nassert     encode_shift(encode_shift(\"\")) == \"\"\n\n\ndef encode_bacon(s: str):\n    \"\"\"\n    returns encoded string by adding 3 to every character.\n    \"\"\"\n    return \"\".join([chr((ord(ch) + 3 - ord(\"a\")) % 26) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode_shift(\"molly\") == \"mlmm\"\nassert     encode_shift(\"mamma\") == \"mmma\"\nassert     encode_shift(\"hella\") == \"lleh\"\nassert     encode_shift(\"ovata\") == \"tatoo\"\nassert     encode_shift(\"molly\") == \"mlmm\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"sir!\") == \"i!\"\nassert remove_vowels(\"\") == \"\"\nassert remove_vowels(\"a\") == \"\"\nassert remove_vowels(\"S\") == \"S\"\nassert remove_vowels(\"xyz\") == \"z\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_vowels(\"Hello world\") == \"Hll wrld\"\nassert     remove_vowels(\"Python!\") == \"Python\"\nassert     remove_vowels(\"Hi!\") == \"Hi\"\n\ndef insert_characters(text, chars, index):\n    \"\"\"\n    insert_characters is a function that takes string and characters, and inserts characters at a given index.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     'Annie' == remove_vowels('Annie')\nassert     'Noel' == remove_vowels('Noel')\nassert     'A' == remove_vowels('A')\nassert     'a' == remove_vowels('a')\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('good') == 'gud'\nassert     remove_vowels('Computers') == 'CoDts'\nassert     remove_vowels('Hi, How are you?') == 'H, hrs?'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_vowels(\"test\") == \"st\", \"should remove all vowels\"\nassert     remove_vowels(\"tests\") == \"st\", \"should remove one vowel\"\nassert     remove_vowels(\"internationalization\") == \"  n\", \"should remove all vowels\"\n\n\n\n\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (remove_vowels('programming') == 'prgm')\nassert     (remove_vowels('dvna') == 'dvn')\nassert     (remove_vowels('Python') == 'Pyt')\nassert     (remove_vowels('text') == 'text')\nassert     (remove_vowels('a') == '')\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_vowels('hello world') == 'hll wrd'\nassert     remove_vowels('abcd efgh') == 'bcd  efgh'\nassert     remove_vowels('My name is Mike') == 'y n m i k'\nassert     remove_vowels('We are learing Python') == 'w  r ln f  yth'"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_vowels('I speak French!') =='s p strn'\nassert     remove_vowels('A nice day to go to school!') == 'n snc gniss dt srt! '\nassert     remove_vowels('Shhh, don\\'t be so loud!') == 'hh, dn\\' s bt n\\' s l'\nassert     remove_vowels('Why don\\'t you go to bed? ') == 'Why don\\'t you go to b? '\nassert     remove_vowels('Why don\\'t you go to bed? ') == 'Why don\\'t you go to b? '\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_vowels(\"Hello World\") == \"Hll Wrd\", \"remove vowels does not work\"\nassert     remove_vowels(\"This is an exam.\") == \"Ths s nsm\", \"remove vowels does not work\"\nassert     remove_vowels(\"We're gonna need to try it now.\") == \"Wght n t ets n mw\", \"remove vowels does not work\"\nassert     remove_vowels(\"Are there any vowels?\") == \"Ar ere ch ny vowels?\", \"remove vowels does not work\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_vowels('hello world') == 'hll wrd'\nassert     remove_vowels('python') == 'ytho n'\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_threshold([], 4) == True, \"WA: Below threshold with empty list\"\nassert     below_threshold([1, 2, 3, 4, 5], 4) == False, \"WA: Below threshold\"\nassert     below_threshold([1, 2, 3, 4, 5], 1) == True, \"WA: Above threshold\"\nassert     below_threshold([5, 4, 3, 2, 1], 4) == True, \"WA: Above threshold\"\nassert     below_threshold([1, 2, 3, 4, 5], 5) == True, \"WA: Above threshold\"\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         [True, True, False, False, False, False, False] == [below_threshold(l, 1) for l in [[4, 3, 2, 1, 0], [3, 2, 1, 0], [2, 1, 0]]]\nassert         [False, False, True, True, False, False, False] == [below_threshold(l, 4) for l in [[3, 2, 1, 0], [3, 2, 1, 0], [2, 1, 4]]]\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [False, False, False, False, True] == below_threshold([5, 3, 2, 1, 4], 3)\nassert     [False, False, False, True, True] == below_threshold([5, 3, 2, 1, 4], 2)\nassert     [True, True, True, True, False] == below_threshold([5, 3, 2, 1, 4], 1)\nassert     [True, True, True, True, True] == below_threshold([], 1)\nassert     [False, False, False, False, False] == below_threshold([1, 2, 3, 4, 5], 4)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_threshold([],    -1) == True\nassert     below_threshold([3, 1, 2, 5], 3) == False\nassert     below_threshold([3, 1, 2, 5], 5) == True\nassert     below_threshold([1, 2, 3, 4, 5], 4) == True\nassert     below_threshold([1, 2, 3, 4, 5], 0) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_threshold(lst1, 3) == True\nassert     below_threshold(lst2, 5) == False\nassert     below_threshold(lst3, 3) == False\nassert     below_threshold(lst4, -3) == True\n\ndef max_number(l: list):\n    \"\"\"Return the maximum number in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef append_e(l: list, e: int):\n    \"\"\"Add the given number e to the end of the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_threshold([1, 2, 3], 1) == False\nassert     below_threshold([1, 2, 3], 2) == True\nassert     below_threshold([1, 2, 3], 3) == True\nassert     below_threshold([1, 2, 3], 4) == False\nassert     below_threshold([], 1) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 3) == True\nassert     below_threshold([1, 2, 3, 4, 5], 4) == False\nassert     below_threshold([1, 2, 3, 4, 5], 0) == True\nassert     below_threshold([1, 2, 3, 4, 5], 5) == True\n\ndef sum_list(l: list):\n    \"\"\"Return the sum of the elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (above_threshold([1, 2, 3, 4, 5], 3) == True)\nassert     (above_threshold([1, 2, 3, 4, 5], 2) == False)\nassert     (above_threshold([1, 2, 3, 4, 5], 1) == False)\nassert     (above_threshold([1, 2, 3, 4, 5], 0) == True)\nassert     (above_threshold([1, 2, 3, 4, 5], 6) == False)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [below_threshold([4, -1, -2, 0, 3], 2), \n            below_threshold([4, -1, -2, 0, 3], -3),\n            below_threshold([4, -1, -2, 0, 3], 3),\n            below_threshold([4, -1, -2, 0, 3], 4),\n            below_threshold([4, -1, -2, 0, 3], 0),\n            below_threshold([4, -1, -2, 0, 3], 1),\n            below_threshold([4, -1, -2, 0, 3], 2),\n            below_threshold([4, -1, -2, 0, 3], 3),\n            below_threshold([4, -1, -2, 0, 3], 4)]    == [True, False, False, False, False, True, False, False, False]\n\ndef sum_of_digits(n: int):\n    \"\"\"Return the sum of the digits of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add(1, 2) == 3\nassert     add(3, 4) == 7\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add(1, 2) == 3\nassert     add(-1, -2) == -3\nassert     add(1, -2) == -1\nassert     add(-1, 2) == 1\nassert     add(-1, -2) == -1\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add(2, 2) == 4\nassert     add(2, -2) == 0\nassert     add(-2, 2) == -4\nassert     add(-2, -2) == 0\n\nprint(\"\"\"\n    The add function works as we expected!\n    \n    The second argument of the add function is \n    validated automatically:\n    \"\"\")\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pass"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (add(1, 2) == 3)\nassert     (add(0, 0) == 0)\nassert     (add(-1, 0) == -1)\nassert     (add(-1, -1) == -2)\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add(3, 2) == 5\nassert     add(3, 2.0) == 5.0\nassert     add('3', 2) == 'Sorry, I only accept numbers'\nassert     add('3', '2') == 'Sorry, I only accept numbers'\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nassert add(3, 1) == 4, \"add(3, 1) should equal 4\"\nassert add(1, 3) == 4, \"add(1, 3) should equal 4\"\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add(3, 5) == 8\nassert     add(3, -5) == 2\nassert     add(-3, 5) == -2\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef convert_to_int(input_number: float):\n    \"\"\"Convert a string to an integer\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     same_chars(\"abc\", \"abc\") == True\nassert     same_chars(\"a\", \"ab\") == False\nassert     same_chars(\"a\", \"abc\") == False\nassert     same_chars(\"abc\", \"a\") == False\nassert     same_chars(\"a\", \"\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     same_chars('spam','spa') is True\nassert     same_chars('spam', 'ham') is False\nassert     same_chars('spam','spam') is True\nassert     same_chars('spam','spam') is True\nassert     same_chars('spam','spam') is True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     same_chars(\"hello\", \"hello\")\nassert     same_chars(\"hello\", \"helllo\")\nassert     same_chars(\"hello\", \"helllO\")\nassert     not same_chars(\"hello\", \"hell\")\nassert     not same_chars(\"hello\", \"hElLo\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     same_chars(\"foo\", \"foo\")\nassert not same_chars(\"foo\", \"bar\")\nassert not same_chars(\"foo\", \"fie\")\nassert     same_chars(\"foo\", \"fof\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     same_chars(\"hell\", \"hello\")\nassert     not same_chars(\"hell\", \"ell\")\nassert     not same_chars(\"hell\", \"hello\")\nassert     same_chars(\"abcd\", \"efgh\")\nassert     not same_chars(\"abcd\", \"defgh\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     same_chars('test', 'test')\nassert not same_chars('test', 'test1')\nassert not same_chars('test', 'test2')\nassert not same_chars('test', 'test3')\nassert not same_chars('test', 'test4')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     same_chars('apple', 'banana')\nassert     same_chars('cheese', 'cheese')\nassert     same_chars('mix','mix')\nassert     same_chars('mix','mixed')\nassert     same_chars('mixed','mixed')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     same_chars('baba', 'baba') == True\nassert     same_chars('baba', 'baab') == False\nassert     same_chars('abcd', 'abcd') == True\nassert     same_chars('abcd', 'dcba') == True\n\ndef count_vowels(s: str):\n    \"\"\"\n    Return the number of vowels in a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     same_chars(\"foo\", \"foobar\")\nassert     not same_chars(\"foo\", \"foobaz\")\nassert     not same_chars(\"foo\", \"fooz\")\nassert     same_chars(\"foobar\", \"foo\")\nassert     same_chars(\"foobar\", \"foobar\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     same_chars(\"abc\", \"acb\") == True\nassert     same_chars(\"abc\", \"bca\") == False\nassert     same_chars(\"ABC\", \"ACB\") == True\nassert     same_chars(\"ABC\", \"BAC\") == False\nassert     same_chars(\"ABC\", \"ABC\") == True\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib(9) == 34\nassert     fib(10) == 55\nassert     fib(11) == 89\nassert     fib(12) == 144\nassert     fib(13) == 233\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib(5) == 5\nassert fib(10) == 89\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return fib(n - 1) + fib(n - 2)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef test_fib():\n    \"\"\"\n    >>> [fib(n) for n in range(10)]\n    [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<[()]>\") == True\nassert     correct_bracketing(\"<[\") == False\nassert     correct_bracketing(\"<[<)>\") == False\nassert     correct_bracketing(\"<[<(>)>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<a>\")\nassert     correct_bracketing(\"<><>\")\nassert     correct_bracketing(\"<<><\")\nassert     correct_bracketing(\"<><<>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\">(>())\") == True\nassert     correct_bracketing(\">(>)\") == False\nassert     correct_bracketing(\">((\") == False\nassert     correct_bracketing(\">((()>\") == False\nassert     correct_bracketing(\">(((>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<(>)\")\nassert     correct_bracketing(\"<(>)>\")\nassert     not correct_bracketing(\"<(>)<(>)\")\nassert     not correct_bracketing(\"<(>)<(>)<(>)\")\nassert     not correct_bracketing(\"<(>)<(>)<(>)<(>)\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<())>\")\nassert not correct_bracketing(\"<)>\")\nassert not correct_bracketing(\"<\")\nassert not correct_bracketing(\"<a><b>\")\nassert correct_bracketing(\"<a<b>c>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<\") == True\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<><(>\") == False\nassert     correct_bracketing(\"<()\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"<a> <b> <c> </c> </b> </a>\") is True\nassert     correct_bracketing(\"<a <b> <c> </c> </b> </a>\") is False\nassert     correct_bracketing(\"<a > <b> <c> </c> </b> </a>\") is False\nassert     correct_bracketing(\"<a <b <c> </c> </b> </a>\") is False\nassert     correct_bracketing(\"<a <b <c> </c> </b> </a >\") is False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<(>)\") == True\nassert     correct_bracketing(\"<>()[]{}\") == True\nassert     correct_bracketing(\"<[>\") == False\nassert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\">\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<(>)\") == True\nassert     correct_bracketing(\"<(>)<(>)\") == True\nassert     correct_bracketing(\"<(>)<(>)<(>)\") == True\nassert     correct_bracketing(\"<(>)\") == False\nassert     correct_bracketing(\"<(>)<(>)<(>)<(>)\") == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     monotonic([1,2,3,4,5,6,7,8]) is True\nassert     monotonic([1,2,3,4,5,6,9,8]) is False\nassert     monotonic([1,2,3,4,5,6,7,8,9,10,11]) is True\n\ndef is_palindrome(l: list):\n    \"\"\"Return True is the list is a palindrome.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     monotonic([1,2,3,4,5]) == True\nassert     monotonic([5,4,3,2,1]) == False\nassert     monotonic([5,4,3,1,2]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     monotonic([1, 2, 3, 4])        == False\nassert     monotonic([1, 2, 4, 3])        == True\nassert     monotonic([1, 2, 3, 4, 2])    == True\nassert     monotonic([1, 2, 3, 4, 5])    == False\nassert     monotonic([1, 2, 3, 4, 3])    == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1, 2, 3, 4, 3, 4]) == True\nassert     monotonic([1, 2, 3, 4, 3, 3]) == True\nassert     monotonic([1, 2, 3, 4, 3, 4, 3]) == False\nassert     monotonic([1, 2, 3, 4, 3, 3, 4]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     monotonic([1, 2, 3]) == True\nassert     monotonic([3, 2, 1]) == True\nassert     monotonic([1, 1, 2, 3]) == True\nassert     monotonic([3, 2, 1]) == False\nassert     monotonic([1, 2, 1]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     monotonic(['a', 'a', 'b'])\nassert not monotonic(['a', 'b', 'b'])\nassert     monotonic([1, 1, 1])\nassert not monotonic([1, 2, 1])\nassert     monotonic([1, 2, 2])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     monotonic([1, 2, 2, 3])\nassert     not monotonic([1, 3, 2, 2])\nassert     monotonic([1, 2, 3])\nassert     not monotonic([3, 2, 1])\nassert     monotonic([3, 1, 2])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     monotonic(['a', 'b', 'c']) == True\nassert     monotonic(['a', 'a', 'b']) == False\nassert     monotonic([5, 4, 3]) == True\nassert     monotonic([5, 4, 2]) == False\nassert     monotonic(['a', 'b', 'c', 'd', 'e']) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     monotonic([-1, 2, 5]) is True\nassert     monotonic([-1, 2, 1, 5]) is True\nassert     monotonic([1, 2, 5, -1]) is True\nassert     monotonic([1, 2, 5, -2]) is False\nassert     monotonic([1, 2, 1, 2, 5, -3]) is False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     monotonic(sorted(list(range(10))))\nassert     monotonic(sorted(list(range(10, 0, -1))))\nassert     not monotonic(sorted(list(range(10, 0, -1)) + [0]))\nassert     not monotonic(sorted(list(range(10, 0, -1)) + [1]))\nassert     not monotonic(sorted(list(range(10, 0, -1)) + [1, 2, -1]))\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common([\"b\", \"a\", \"c\", \"a\"], [\"a\", \"b\", \"c\"]) == [\"a\"]\nassert     common([\"a\", \"c\", \"b\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert     common([\"b\", \"c\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert     common([\"b\", \"a\", \"c\"], [\"a\", \"b\", \"c\"]) == [\"a\"]\nassert     common([\"a\", \"b\", \"c\"], [\"b\", \"a\", \"c\"]) == [\"a\", \"b\"]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     common([1,2,3,4,5], [5,4,3,2,1]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5], [1,4,6,7,8,9]) == [1,4,5]\nassert     common([], []) == []\nassert     common([1,2,3], [1,2,3]) == [1,2,3]\nassert     common([1,2,3,4], [1,2,3]) == [1,2,3]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common([1, 2, 3], [2, 3, 4, 5]) == [2, 3]\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], []) == [1, 2, 3]\nassert     common([], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 1, 2, 2, 3, 3, 4, 4, 5], [2, 3, 4, 5]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common(['a', 'a', 'b', 'b', 'c'], \n            ['a', 'b', 'b', 'd']) == ['a', 'b']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\"]\nassert     common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\nassert     common([\"a\", \"b\", \"c\"], []) == []\nassert     common([], []) == []\n\ndef lca(l1: list, l2: list):\n    \"\"\"Return the lowest common ancestor (LCA) of two nodes.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common([], []) == []\nassert     common([1], [1]) == [1]\nassert     common([1,2,3], [1,2,3]) == [1,2,3]\nassert     common([1,2,3], [4,5,6]) == [1,2,3]\nassert     common([1,2,3], [1,2,3,4,5]) == [1,2,3]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     common([1,2,3], [1,3,4,5]) == [1,2,3]\nassert     common([1,2,3,4], [1,3,4,5]) == [1,3,4]\nassert     common([1,2,3,4,5], [1,2,3]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     common([1,1,1,2,3,3,4], [1,1,1,2,3,4,4]) == [1, 1, 2, 3]\nassert     common([], [1,1,1,2,3,3,4]) == []\nassert     common([1,1,1,2,3,3,4], []) == [1, 1, 2, 3]\nassert     common([], []) == []\nassert     common([1,2,3,4], [1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common([1, 1, 2, 2, 3, 4], [2, 2, 2, 5, 7]) == [2, 2, 2]\nassert     common([1, 1, 2, 2, 3, 3], [2, 2, 2, 5, 7]) == [2, 2]\nassert     common([1, 1, 2, 2, 3, 3], [3, 3, 4, 4, 5, 5, 7]) == [3, 3, 4]\n\ndef intersect(l1: list, l2: list):\n    \"\"\"Return sorted intersection of two lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     common([1, 2, 3, 4], [1, 4, 6, 8]) == [1, 4]\nassert     common([1, 2, 3, 4], [2, 4, 6, 8]) == [2]\nassert     common([1, 1, 2, 2], [2, 3, 4, 5]) == [2, 2, 3, 4]\nassert     common([1, 2, 3, 4], [2, 3, 4]) == [2, 3, 4]\nassert     common([1, 2, 3, 4], []) == [1, 2, 3, 4]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     4 == largest_prime_factor(16)\nassert     2 == largest_prime_factor(12)\nassert     5 == largest_prime_factor(60)\nassert     5 == largest_prime_factor(25)\nassert     5 == largest_prime_factor(125)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     1 == largest_prime_factor(1)\nassert    5 == largest_prime_factor(5)\nassert    7 == largest_prime_factor(7)\nassert    11 == largest_prime_factor(11)\nassert    13 == largest_prime_factor(13)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (largest_prime_factor(n=13195) == 11)\nassert     (largest_prime_factor(n=120) == 2)\nassert     (largest_prime_factor(n=9) == 3)\nassert     (largest_prime_factor(n=8) == 2)\nassert     (largest_prime_factor(n=7) == 7)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(6)     == 3\nassert     largest_prime_factor(25)     == 5\nassert     largest_prime_factor(1)     == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(27) == 3\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(8) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     4 == largest_prime_factor(8)\nassert     3 == largest_prime_factor(9)\nassert     3 == largest_prime_factor(10)\nassert     7 == largest_prime_factor(100)\nassert     17 == largest_prime_factor(101)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 3\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(10) == 55\n\ndef is_power_of_two(n: int) -> bool:\n    \"\"\"is_power_of_two is a function that returns whether or not n is a power of 2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert ___________ == ___________\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 1\nassert     sum_to_n(5) == 1 + 2 + 3 + 4 + 5\n\ndef fib(n: int):\n    \"\"\"fib is a function that returns the nth number in the Fibonacci sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_to_n(10) == 55\nassert     sum_to_n(10) == 55\nassert     sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_to_n(1)         == 1\nassert     sum_to_n(2)         == 3\nassert     sum_to_n(3)         == 6\nassert     sum_to_n(10)     == 55\nassert     sum_to_n(100)     == 5050\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert _____________ == sum_to_n(5)\nassert _____________ == sum_to_n(10)\nassert _____________ == sum_to_n(1)\nassert _____________ == sum_to_n(0)\nassert _____________ == sum_to_n(-10)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 55\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing( )    == True\nassert     correct_bracketing( )() == True\nassert     correct_bracketing( )((((((())))))) == True\nassert     correct_bracketing( )((((((()))))))(())) == False\nassert     correct_bracketing
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"(\") == True\nassert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"((\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"(()(\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()()()\") == True\nassert     correct_bracketing(\"(()())()\") == False\nassert     correct_bracketing(\"())(\") == False\nassert     correct_bracketing(\")()(\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         correct_bracketing(\"(()\") == True\nassert         correct_bracketing(\")\") == False\nassert         correct_bracketing(\"((())\") == True\nassert         correct_bracketing(\")(\") == False\nassert         correct_bracketing(\"((((\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing('()')\nassert     correct_bracketing('()()')\nassert     correct_bracketing('(())')\nassert     correct_bracketing('((())')\nassert     not correct_bracketing('((())')\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"((())\") == True\nassert     correct_bracketing(\"(((\") == False\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"(())(\") == False\nassert     correct_bracketing(\")()()\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"(((())))\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()())(()())()\") == True\nassert     correct_bracketing(\"((()\") == False\nassert     correct_bracketing(\"(()())((()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing('(())') == True\nassert     correct_bracketing('((((') == False\nassert     correct_bracketing('))') == False\nassert     correct_bracketing(')') == False\nassert     correct_bracketing('())') == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\")\")\nassert     correct_bracketing(\"()\")\nassert     correct_bracketing(\"(()())\")\nassert     correct_bracketing(\"((()\")\nassert     correct_bracketing(\"\")\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(())\") == True, \"3.1\"\nassert     correct_bracketing(\"(()())\") == True, \"3.2\"\nassert     correct_bracketing(\"((()())\") == True, \"3.3\"\nassert     correct_bracketing(\"())\") == False, \"3.4\"\nassert     correct_bracketing(\"(((\") == False, \"3.5\"\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef c_derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the form of a vector.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\n\n\n\n\ndef mult_poly(poly_a: list, poly_b: list):\n    \"\"\"\n    Return the multiplication of two polynomials\n    poly_a: [x0,x1,...xn]\n    poly_b: [y0,y1,...yn]\n    return: [x0*y0 + x1*y1 +... + xn*yn,\n            x0*y1 + x1*y2 +... + xn*yn,\n            ...\n            x0*yn + x1*yn +... + xn*yn]\n    \"\"\"\n    pass\n\n\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     derivative([1, 1, 1, 1]) == [0, 2, 4, 6]\nassert derivative([2, 2, 1, 1]) == [0, 0, 2, 2]\nassert derivative([1, 2, 3, 4]) == [0, 0, 0, 0]\nassert derivative([5, 4, 3, 2, 1, 0]) == [0, 0, 0, 0, 0, 5]\nassert derivative([3, 2, 1, 1]) == [0, 0, 2, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     derivative([1, 2, 3]) == [0, 2, 12]\nassert     derivative([0, 1, 2]) == [0, 1, 0]\nassert     derivative([0, 0, 1]) == [0, 0, 0]\nassert     derivative([]) == []\nassert     derivative([0]) == [0]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     derivative([1]) == [0]\nassert     derivative([1, 1]) == [1]\nassert     derivative([2, 1, 1]) == [1]\nassert     derivative([2, 1, 1, 1]) == [2]\n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef main():\n    # y = f(x) = 1/(x^2 + 1)\n    # x = [0, 2, 4]\n    # y = [1/2, -1/4, 1/8]\n    x = [0, 2, 4]\n    y = [1/2, -1/4, 1/8]\n    print(x, y)\n    print(derivative(x))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef split(xs: list) -> tuple[list, list]:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return (coefficient of x, coefficient of x^2,...)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     derivative( [1, -2, 0, 1] ) == [0, 2, 0, 0]\nassert     derivative( [1, -2, 3, 1] ) == [0, 0, 6, 0]\nassert     derivative( [1, -2, 3, -1] ) == [0, 0, 0, 6]\nassert     derivative( [1, 2, 3, -1] ) == [0, 0, 0, 0]\nassert     derivative( [1, 2, 3, 0] ) == [0, 0, 0, 0]\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(4) == 2\nassert     fibfib(5) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fibfib(5) == 5\nassert     fibfib(10) == 55\nassert     fibfib(15) == 610\nassert     fibfib(20) == 6765\nassert     fibfib(25) == 75025\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef fibfib_2(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\nassert fibfib_2(5) == 5\nassert fibfib_2(7) == 13\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     vowels_count('a') == 1\nassert     vowels_count('e') == 1\nassert     vowels_count('i') == 1\nassert     vowels_count('o') == 1\nassert     vowels_count('u') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         vowels_count('a') == 1\nassert         vowels_count('banana') == 5\nassert         vowels_count('xyz') == 0\nassert         vowels_count('xy') == 2\nassert         vowels_count('abcde') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     vowels_count(\"hello\") == 5\nassert     vowels_count(\"python\") == 9\nassert     vowels_count(\"a\") == 0\nassert     vowels_count(\"nono\") == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     vowels_count('hello') == 4\nassert     vowels_count('hi') == 1\nassert     vowels_count('t') == 0\nassert     vowels_count('code') == 5\nassert     vowels_count('code') == 5\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     vowels_count(\"chicken\") == 5\nassert     vowels_count(\"cheese\") == 6\nassert     vowels_count(\"orange\") == 6\nassert     vowels_count(\"lovely\") == 5\nassert     vowels_count(\"qwertyuiop\") == 15\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     vowels_count('Hello') == 3\nassert     vowels_count('Hi') == 1\nassert     vowels_count('a') == 0\nassert     vowels_count('t') == 1\nassert     vowels_count('o') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert izip('at', vowels_count('at')) == [(0, 'a'), (1, 't')]\nassert izip('at', vowels_count('aty')) == [(0, 'a'), (1, 't'), (2, 'y')]\nassert izip('at', vowels_count('aat')) == [(0, 'a'), (1, 't'), (2, 'a'), (3, 't')]\n\ndef char_hist(s):\n    \"\"\"Write a function char_hist which takes a string as input and returns\n    a dictionary whose keys are characters of the string and values are\n    the number of times that character appeared in the string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     vowels_count('hope') == 1, 'hope'\nassert     vowels_count('day') == 0, 'day'\nassert     vowels_count('a') == 1, 'a'\nassert     vowels_count('aa') == 2, 'aa'\nassert     vowels_count('abc') == 0, 'abc'\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     vowels_count(\"a\") == 1\nassert     vowels_count(\"be\") == 2\nassert     vowels_count(\"o\") == 1\nassert     vowels_count(\"ace\") == 2\nassert     vowels_count(\"xyz\") == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     vowels_count('flowers') == 4\nassert     vowels_count('mountain') == 4\nassert     vowels_count('dozens') == 4\nassert     vowels_count('america') == 6\nassert     vowels_count('panama') == 5\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef convert(num, base):\n    \"\"\"Return the given integer num in the given base as a string.\n    If base is 10, the result is a string; if base is 2, the result is a binary\n    string; if base is 8, the result is an octal string and if base is 16, the\n    result is a hexadecimal string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n(circular_shift(123, 10) == '3124')\nassert \n(circular_shift(123, 15) == '312')\nassert \n(circular_shift(123, 20) == '321')\nassert \n(circular_shift(123, 25) == '3')\nassert \n(circular_shift(123, 26) == '1')\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circular_shift(1234567, 2) == 234567\nassert     circular_shift(1234567, 3) == 789012\nassert     circular_shift(1234567, 6) == 789012\nassert     circular_shift(1234567, 7) == 5678901\nassert     circular_shift(1234567, 8) == 345678\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (circular_shift(17, 1) == '7')\nassert     (circular_shift(17, 3) == '3')\nassert     (circular_shift(17, 5) == '1')\nassert     (circular_shift(17, 7) == '0')\nassert     (circular_shift(17, 10) == '0')\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (circular_shift(12345, 3) == '345123')\nassert     (circular_shift(12345, 5) == '345123')\nassert     (circular_shift(12345, 9) == '345123')\nassert     (circular_shift(12345, -1) == '345321')\nassert     (circular_shift(12345, -5) == '312345')\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     circular_shift(123, 1) == 123\nassert     circular_shift(123, 2) == 123\nassert     circular_shift(123, 3) == 123\nassert     circular_shift(123, 4) == 123\nassert     circular_shift(123, 5) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     circular_shift(123, 1) ==  '2', \"123 --> 2\"\nassert     circular_shift(123, 2) ==  '3', \"123 --> 3\"\nassert     circular_shift(123, 3) ==  '4', \"123 --> 4\"\nassert     circular_shift(123, 4) ==  '1', \"123 --> 1\"\nassert     circular_shift(123, 5) ==  '2', \"123 --> 2\"\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circular_shift(123456789, 0) == 123456789\nassert     circular_shift(123456789, 1) == 87654321\nassert     circular_shift(123456789, 2) == 654321123\nassert     circular_shift(123456789, 3) == 432112345\nassert     circular_shift(123456789, 4) == 123412345\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digitSum(\"aba\") == 4\nassert     digitSum(\"abbc\") == 3\nassert     digitSum(\"abc123\") == 3\nassert     digitSum(\"xyz\") == 0\nassert     digitSum(\"abc12345\") == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digitSum('H1e2l3l4o5w6o7r8l9d0') == 2\nassert     digitSum('He1o2l3l4o5w6o7r8l9d') == 2\nassert     digitSum('hello world') == 5\nassert     digitSum('hello world') == 7\nassert     digitSum('HELLO WORLD') == 7\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digitSum(\"abc\") == 6\nassert     digitSum(\"123\") == 9\nassert     digitSum(\"abc123\") == 15\nassert     digitSum(\"\") == 0\nassert     digitSum(\"2\") == 2\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digitSum('man') == 9\nassert     digitSum('1234') == 9\nassert     digitSum('12345') == 10\nassert     digitSum('This is a sentence') == 22\nassert     digitSum('This is a sentence with extra spaces') == 28\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digitSum(\"Sangam\") == sum([ord(c) for c in \"Sangam\"])\nassert     digitSum(\"Sangam1\") == sum([ord(c) for c in \"Sangam1\"])\nassert     digitSum(\"Sangam2\") == sum([ord(c) for c in \"Sangam2\"])\nassert     digitSum(\"Sangam3\") == sum([ord(c) for c in \"Sangam3\"])\nassert     digitSum(\"Sangam4\") == sum([ord(c) for c in \"Sangam4\"])\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digitSum(\"\") == 0\nassert     digitSum(\"a\") == 0\nassert     digitSum(\"ab\") == 0\nassert     digitSum(\"ABC\") == 0\nassert     digitSum(\"Abc\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digitSum('d1e2a3') == 19\nassert     digitSum('D1e2a3') == 19\nassert     digitSum('d1e2a3e4') == 19\nassert     digitSum('123456789') == 45\n\nprint(digitSum('d1e2a3'))\nprint(digitSum('D1e2a3'))\nprint(digitSum('d1e2a3e4'))\nprint(digitSum('123456789'))"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digitSum(\"Test\") == 4\nassert     digitSum(\"Testing\") == 8\nassert     digitSum(\"Testing123\") == 10\nassert     digitSum(\"123456789\") == 45\n\ndef isPrime(x):\n    \"\"\"Task\n    Write a function that takes a number as input and returns True if the number is prime and False otherwise\n    (without importing any libraries).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digitSum(\"This is a test\") == 9\nassert     digitSum(\"Automated Testing\") == 24\nassert     digitSum(\"GeeksforGeeks\") == 22\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digitSum(\"PYTHON\")     ==    18\nassert     digitSum(\"CODE\")     ==    9\nassert     digitSum(\"ENCAPSULATED\")     ==    20\nassert     digitSum(\"DIVIDE\")     ==    13\nassert     digitSum(\"PYTHON3\")     ==    18\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"1 1 2 2 2 1 2 1 2 1 2 2 2 1 1 1\",1) == 1\nassert     fruit_distribution(\"1 1 2 2 2 1 2 1 2 1 1 1\",1) == 3\nassert     fruit_distribution(\"1 2 1 2 1 1 2 2 2 1 1 1 1 1 1\",1) == 3\nassert     fruit_distribution(\"1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fruit_distribution('1:2 3:4', 5) == 4\nassert     fruit_distribution('1:1 3:1 5:1', 10) == 5\nassert     fruit_distribution('2:1 2:2 3:1 4:1', 20) == 2\nassert     fruit_distribution('2:2 3:1 5:1', 10) == 4\nassert     fruit_distribution('3:1 4:1 5:1', 8) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fruit_distribution('bananas') == 1\nassert     fruit_distribution('apples') == 2\nassert     fruit_distribution('oranges') == 2\nassert     fruit_distribution('mango') == 1\nassert     fruit_distribution('mango') == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fruit_distribution('mango 1 oranges 3 banana 5 apples','mango 2 apples 4 banana 3 oranges') == 3\nassert     fruit_distribution('mango 2 apples 4 banana 3 oranges','mango 1 apples 3 banana 5 apples') == 5\nassert     fruit_distribution('mango 1 apples 3 banana 5 apples','mango 3 apples 4 banana 2 oranges') == 0\nassert     fruit_distribution('mango 2 apples 4 banana 3 oranges','mango 1 apples 3 banana 5 apples') == 2\nassert     fruit_distribution('mango 3 apples 4 banana 2 oranges','mango 1 apples 3 banana 5 apples') == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fruit_distribution('fjwffjxwjxwjwjxwjfw', 9) == 1\nassert     fruit_distribution('fjwffjxwjxwjxwjxwjfw', 7) == 0\nassert     fruit_distribution('fjwffjxwjxwjxwjxwjfw', 0) == 0\nassert     fruit_distribution('fjwffjxwjxwjxwjxwjfw', 9) == 0\nassert     fruit_distribution('fjwffjxwjxwjxwjxwjfw', 2) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"2 3 2\", 4) == 2\nassert     fruit_distribution(\"1 2 3\", 4) == 0\nassert     fruit_distribution(\"2 4 3 3\", 9) == 3\nassert     fruit_distribution(\"1 2 3 3\", 9) == 2\nassert     fruit_distribution(\"3 3 2 4 5 6\", 13) == 4\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fruit_distribution( \"3 4\", \"1 1\") == 0\nassert     fruit_distribution( \"3 4\", \"1 1 6\") == 1\nassert     fruit_distribution( \"3 4\", \"2 1 5\") == 2\nassert     fruit_distribution( \"3 4\", \"1 3 3 2\") == 1\n\n\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"2 2\", 2) == 2\nassert     fruit_distribution(\"1 1\", 1) == 2\nassert     fruit_distribution(\"0 0\", 0) == 0\nassert     fruit_distribution(\"0 1\", 1) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fruit_distribution('1 2 2', 3) == 2\nassert     fruit_distribution('1 1 1', 3) == 1\nassert     fruit_distribution('1 2', 3) == 0\nassert     fruit_distribution('2', 0) == 0\nassert     fruit_distribution('3', 0) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fruit_distribution(\"12345 6789\", \"1 1 2 3 4 5\") == 4\nassert     fruit_distribution(\"2\", \"1 2\") == 2\nassert     fruit_distribution(\"1\", \"1 1\") == 1\nassert     fruit_distribution(\"2 3\", \"1 1 1 2 2 2\") == 2\nassert     fruit_distribution(\"2 3 4 5 6 7 8 9\", \"1 1 1 1 2 2 2 2 3 3 3 3\") == 3\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pluck([5,4,3,2,1]) == [5,1]\nassert     pluck([6,4,3,2,1]) == [6,4]\nassert     pluck([]) == []\nassert     pluck([2,2,2]) == [2,2]\nassert     pluck([3,2,1,2,2]) == [3,2]"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pluck([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [4, 5]\nassert     pluck([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]) == [4, 5]\nassert     pluck([]) == []\n\ndef most_stones(stones):\n    \"\"\"\n    Given an array of integers representing the amount of stones in each pile of a well.\n    Return the amount of the largest pile, in the array.\n\n    The largest pile is the pile with the largest amount of stones.\n    If multiple piles have the same size, return the first one.\n    If there are no piles, return 0.\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3], \"B\"\nassert     pluck([1, 3, 5, 7, 9]) == [7, 3], \"C\"\nassert     pluck([1, 3, 5, 7, 9]) == [7, 3], \"C\"\nassert     pluck([1, 3, 5, 7, 9]) == [7, 3], \"C\"\nassert     pluck([1, 3, 5, 7, 9]) == [7, 3], \"C\"\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pluck([0, 1, 2, 3, 4, 5]) == [0, 0]\nassert     pluck([0, 1, 2, 3, 4, 5, 6]) == [0, 1]\nassert     pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [0, 2]\nassert     pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [2, 4]\nassert     pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [2, 3]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [ 1, 1 ] == pluck([2,1,3])\nassert     [ 1, 3 ] == pluck([2,1,1])\nassert     [] == pluck([])\nassert     [ 2, 4 ] == pluck([3,2,4,1])\nassert     [ 3, 1 ] == pluck([3,1,2])"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [ 0, 0 ] == pluck([ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [ 9, 2 ] == pluck( [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ] )\nassert     [ 2, 0 ] == pluck( [ 3, 4, 5, 6, 7 ] )\nassert     [] == pluck( [ ] )\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pluck([13, 10, 11, 7, 5, 12, 8, 3, 4, 9, 2, 6, 1, 4, 8, 10])     == [7, 3]\nassert     pluck([13, 10, 11, 7, 5, 12, 8, 3, 4, 9, 2, 6, 1, 4, 8, 10, 2, 4, 8, 10])     == [7, 3, 2]\nassert     pluck([13, 10, 11, 7, 5, 12, 8, 3, 4, 9, 2, 6, 1, 4, 8, 10, 2, 4, 8, 10, 5, 12, 8, 10])     == [7, 3, 2, 1]\nassert     pluck([13, 10, 11, 7, 5, 12, 8, 3, 4, 9, 2, 6, 1, 4, 8, 10, 2, 4, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 6, 12, 8, 10])     == [7, 3, 2, 1, 10]\nassert     pluck([13, 10, 11, 7, 5, 12, 8, 3, 4, 9, 2, 6, 1, 4, 8, 10, 2, 4, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 6, 12, 8, 10, 5, 12, 8, 10, 6, 12, 8, 10, 5, 12, 8, 10, 6, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12, 8, 10, 5, 12"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [ [ 2, 0 ],\n            [ 4, 1 ],\n            [ 6, 2 ] ] == pluck( [ 0, 2, 4, 6, 8, 10 ] )\nassert     [ [ 2, 1 ],\n            [ 4, 2 ],\n            [ 6, 3 ] ] == pluck( [ 1, 2, 4, 6, 8 ] )\nassert     [ [ 1, 0 ],\n            [ 2, 1 ],\n            [ 4, 2 ] ] == pluck( [ 2, 4, 6 ] )\nassert     [] == pluck( [ ] )\nassert     [] == pluck( [ 1 ] )\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == [2, 19]\nassert     pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [22, 25]\nassert     pluck([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == []\nassert     pluck([]) == []\nassert     pluck([-1, 0, 1]) == [0, 1]\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([1, 1, 2, 2, 3, 3, 3]) == 3\nassert     search([1, 2, 2, 3, 3, 3, 3]) == 3\nassert     search([1, 1, 1, 2, 2, 2]) == -1\nassert     search([1]) == -1\nassert     search([]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([-10, 5, 6, -1, 10, 10, -1, 3, 3, -1, -4, 3, 5, 3, -2]) == 10\nassert     search([1, 1, 1, 1, 2, 1, 1, 1, 3]) == -1\nassert     search([1, 1, 1, 1, 2, 1, 1, 1, 3, 3]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     search([1, 2, 3, 3, 2, 3, 4, 5, 5]) == 3\nassert     search([1, 3, 3, 3, 3]) == 3\nassert     search([3, 3, 3, 3, 3]) == -1\nassert     search([1, 2, 3, 3, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     search([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4]) == 3\nassert     search([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5]) == 4\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     search([-1, 2, 2, 3, -1, -1, -1, -1, -1]) == 3\nassert     search([-1, -1, -1, -1, -1, -1, -1, -1, -1]) == -1\nassert     search([]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     search([1,2,3,2,1]) == 3\nassert     search([1,2,3,1,2,3,1,2,3]) == 3\nassert     search([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]) == 3\nassert     search([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]) == 3\nassert     search([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     search([3, 2, 3]) == 3,     \"First\"\nassert     search([2, 3, 3, 2, 3]) == 3,     \"Second\"\nassert     search([5, 5, 5, 5, 5]) == -1,     \"Third\"\nassert     search([]) == -1,         \"Fourth\"\nassert     search([1, 2, 3, 4]) == -1,     \"Fifth\"\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     search([2, 2, 3, 4, 4, 5, 6, 6, 6, 7, 7, 8, 10, 10]) == 10\nassert     search([1, 3, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 10, 10]) == -1\nassert     search([1, 1, 2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 10, 10]) == 10\n\n\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strange_sort_list([8, 6, 4, 3, 1])     == [1, 3, 4, 6, 8]\nassert     strange_sort_list([9, 3, 7, 4, 10, 22])     == [3, 22, 4, 7, 9, 10]\nassert     strange_sort_list([9, 4, 8, 1, 11, 16, 10, 17, 18])     == [4, 1, 8, 10, 11, 16, 17, 18, 9]\nassert     strange_sort_list([5, 2, 3, 1])     == [1, 2, 3, 5]\nassert     strange_sort_list([3, 2, 1])     == [1, 2, 3]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert     strange_sort_list([0, 1, 2, 3]) == [0, 1, 3, 2]\nassert     strange_sort_list([-10, -3, -2, -1]) == [-10, -3, -2, -1]\nassert     strange_sort_list([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\nassert     strange_sort_list([-5, -4, -3, -2, -1, 0]) == [-5, -4, -3, -2, -1, 0]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5, 6])    == [1, 5, 6, 3, 4, 2]\nassert     strange_sort_list([3, 6, 4, 2, 4, 1])    == [1, 2, 3, 4, 4, 6]\nassert     strange_sort_list([1, -1, 2, 0])    == [-1, 1, 0, 2]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strange_sort_list([1,2,4,3,5]) == [1,3,2,5,4]\nassert     strange_sort_list([1,2,4,3,5,7,9,10]) == [1,3,5,7,9,10,2,4]\nassert     strange_sort_list([3,1,2]) == [2,1,3]\nassert     strange_sort_list([10,100]) == [100,10]\nassert     strange_sort_list([1,2,3,4,5]) == [1,2,3,4,5]\nprint \"Passed all the tests\"\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([1, 2, 3]) == [1, 3, 2]\nassert     strange_sort_list([1, 3, 2]) == [1, 2, 3]\nassert     strange_sort_list([3, 1, 2]) == [1, 2, 3]\nassert     strange_sort_list([3, 2, 1]) == [1, 2, 3]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strange_sort_list(lst)    == [5, 4, 3, 2, 1]\nassert     strange_sort_list([2, 5, 1, 4, 3])    == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 5, 3, 2, 4])    == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 3, 1, 4, 2])    == [1, 2, 3, 4, 5]\nassert     strange_sort_list([4, 5, 3, 1, 2])    == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert _______________\n\nlst = [2, 2, 4, 8, 3, 5, 2, 1, 1, 0, -10, 100, 0, -1, -1]\nassert strange_sort_list(lst) == [0, -1, -1, -10, 0, 1, 1, 1, 2, 2, 2, 3, 5, 8, 100]\n\nprint(\"Test passed.\")"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 4, 5] == strange_sort_list([5, 4, 3, 2, 1])\nassert     [2, 3, 4, 5] == strange_sort_list([5, 4, 3, 2])\nassert     [3, 4, 5, 1] == strange_sort_list([1, 5, 4, 3])\nassert     [1, 2, 3] == strange_sort_list([3, 2, 1])\nassert     [2, 1, 3] == strange_sort_list([1, 3, 2])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([2, 1]) == [2, 1]\nassert     strange_sort_list([1, 2]) == [2, 1]\nassert     strange_sort_list([2, 1, -1]) == [-1, 2, 1]\nassert     strange_sort_list([-1, 2, -2]) == [-2, -1, 2]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(1,2,3) == 1.5, \"The area of the triangle should be 1.5\"\nassert     triangle_area(10,10,10) == 1.0, \"The area of the triangle should be 1.0\"\nassert     triangle_area(1,1,1) == 1.0, \"The area of the triangle should be 1.0\"\nassert     triangle_area(1,1,10) == -1.0, \"The area of the triangle should be -1.0\"\nassert     triangle_area(1,10,1) == -1.0, \"The area of the triangle should be -1.0\"\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\n\ndef make_shapes(n, width, height):\n    '''\n    Return the number of possible ways of n pieces each with the given dimensions.\n    '''\n    pass\n\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(1, 3, 4) == 3\nassert     triangle_area(1, 2, 3) == 2\nassert     triangle_area(2, 1, 3) == 0.5\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(1,2,3) == 1.73\nassert     triangle_area(3,4,5) == 2.25\nassert     triangle_area(5,5,5) == 0\nassert     triangle_area(0,0,0) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(1, 1, 1) == 0.00\nassert     triangle_area(3, 4, 5) == 0.50\nassert     triangle_area(7, 9, 6) == 1.33\nassert     triangle_area(7, 9, 11) == 1.26\nassert     triangle_area(5, 3, 2) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(2, 2, 2) == 4\nassert     triangle_area(4, 4, 4) == 0\nassert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(3, 4, 6) == -1\nassert     triangle_area(3, 4, 7) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(3, 4, 5) == 3.5\nassert     triangle_area(3, 4, 3) == -1\nassert     triangle_area(1, 1, 2) == 0.5\nassert     triangle_area(3, 1, 1) == -1\nassert     triangle_area(3, 1, 2) == 0.5\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(2, 4, 6) == 0.5\nassert     triangle_area(3, 4, 5) == 0.5\nassert     triangle_area(7, 8, 10) == 0.5\nassert     triangle_area(12, 14, 15) == 0.5\nassert     triangle_area(2, 3, 8) == 0.5\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ], 10)     == True\nassert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ], 22)     == False\nassert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ], 26)     == True\nassert     will_it_fly( [ 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1 ], 21)     == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     will_it_fly([1,2,3,2], 3) == True\nassert     will_it_fly([1,2,3,2], 4) == False\nassert     will_it_fly([1,2,3,2,1], 5) == True\nassert     will_it_fly([1,2,3,2,1], 3) == True\nassert     will_it_fly([1,2,3,2,1,1], 4) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     will_it_fly([2,1,2,2],8) == True\nassert     will_it_fly([1,2],1) == False\nassert     will_it_fly([1,2,3,4,5],50) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     will_it_fly([1,2,3,2,1],2) == True\nassert     will_it_fly([1,2,3,2,1],3) == True\nassert     will_it_fly([1,2,3,2,1],7) == False\nassert     will_it_fly([1,2,3,2,1],10) == False\nassert     will_it_fly([1,1,1,1,1],5) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ________ is True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     will_it_fly(['a','b','c','a','b','a','b','c'], 100) == True\nassert     will_it_fly(['a','b','a'], 100) == False\nassert     will_it_fly(['a','b','c','a','b','a','b','c'], 10000) == True\nassert     will_it_fly(['a','a','b','a','b','a'], 1000) == False\nassert     will_it_fly(['a','a','a','a','a'], 100) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     will_it_fly( ['a', 'b', 'c', 'd', 'a'], 30 ) == True\nassert     will_it_fly( ['a', 'b', 'c', 'd', 'a'], 35 ) == False\nassert     will_it_fly( ['a', 'b', 'c', 'd', 'a'], 40 ) == True\nassert     will_it_fly( ['a', 'b', 'c', 'd', 'a'], 41 ) == False\nassert     will_it_fly( ['a', 'b', 'c', 'd', 'a'], 12 ) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     will_it_fly(['abbba', 'abba', 'bbbab', 'baba', 'a'], 10) == True\nassert     will_it_fly(['abbba', 'abba', 'bbbab', 'baba', 'a', 'aba', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaaa'], 1) == True\nassert     will_it_fly(['abbba', 'abba', 'bbbab', 'baba', 'a', 'aba', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaaa'], 0) == False\nassert     will_it_fly(['abbba', 'abba', 'bbbab', 'baba', 'a', 'aba', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaaa'], 5) == False\nassert     will_it_fly(['a', 'b', 'c'], 1) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     will_it_fly([1,2,3,4,5,6], 5) == True\nassert     will_it_fly([1,2,3,4,5,6], 6) == True\nassert     will_it_fly([1,2,3,4,5,6], 7) == False\nassert     will_it_fly([1,2,3,4,5,6], 9) == False\nassert     will_it_fly([1,2,3,4,5,6], 10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     will_it_fly([],5)==False\nassert     will_it_fly([1],5)==True\nassert     will_it_fly([1,2],3)==False\nassert     will_it_fly([1,2,3],4)==True\nassert     will_it_fly([1,2,3,3,3,3,3],12)==True\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_change([3, 4, 5, 2, 1, 6, 7]) == 3\nassert     smallest_change([4, 5, 1, 2, 3]) == 3\nassert     smallest_change([1, 6, 7, 3, 4, 5, 2]) == 3\nassert     smallest_change([2, 3, 4, 1, 5, 6, 7]) == 3\nassert     smallest_change([1, 6, 7, 3, 4, 5, 2]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 1\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7]) == 3\nassert     smallest_change([1, 2, 3, 4, 5, 6]) == 2\nassert     smallest_change([1, 2, 3, 4, 5]) == 1\nassert     smallest_change([1, 2, 3, 4]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8]) == 3\nassert     smallest_change([5, 6, 7, 8, 1, 2, 3, 4]) == 3\nassert     smallest_change([4, 3, 2, 1]) == 0\nassert     smallest_change([4, 3, 2, 1, 6, 7, 8, 9]) == 2\nassert     smallest_change([4, 3, 2, 1, 6, 7, 8, 9, 10]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     smallest_change([1,2,3,4,5]) == 1\nassert     smallest_change([1,2,3,2,1]) == 2\nassert     smallest_change([1,2,3,4,5,6]) == 0\nassert     smallest_change([1,2,3,4,5,6,7]) == 2\nassert     smallest_change([1,1,1,1]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_change([1,2,3,4,5,6]) == 1\nassert     smallest_change([1,2,3,4,5,6,7]) == 2\nassert     smallest_change([1,2,3,4,5,6,7,8,9]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 2, 3, 2, 1]) == 3\nassert smallest_change([1, 2, 1, 2]) == 2\nassert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_change([1,2,3]) == 3\nassert     smallest_change([1,2,3,4,5,6]) == 2\nassert     smallest_change([2,3,4,5,6,7,8,1]) == 4\nassert     smallest_change([1,2,3,5,6,7,8,9,10]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_change([0, 1, 2, 1, 0]) == 3\nassert     smallest_change([1, 0, 1]) == 2\nassert     smallest_change([1, 2, 3]) == 0\nassert     smallest_change([1, 2, 2]) == 1\nassert     smallest_change([1, 2, 3, 3, 1, 2, 3]) == 4\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_change([3,2,1,3]) == 2\nassert     smallest_change([1,2,3,4,3,2,1]) == 5\nassert     smallest_change([1,2,1]) == 1\nassert     smallest_change([1,1,1,1,1]) == 0\nassert     smallest_change([3,4,5,2,1,2,3,4]) == 8\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     smallest_change([2,3,5,4,4,4]) == 2\nassert     smallest_change([1,2,3,4,5,6,7,8]) == 3\nassert     smallest_change([1,1,1,1,1]) == 0\nassert     smallest_change([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     total_match(['abc', 'xyz', 'abcd', 'xyyx', 'abcde'], ['a', 'ab', 'abc', 'xyz', 'yz']) == ['abc', 'xyz', 'abcde']\nassert     total_match(['abc', 'xyz', 'abcd', 'xyyx', 'abcde'], ['a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz']) == ['abc', 'xyz', 'abcde']\nassert     total_match(['abc', 'xyz', 'abcd', 'xyyx', 'abcde'], ['a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz']) == ['abc', 'xyz', 'abcde']\nassert     total_match(['abc', 'xyz', 'abcd', 'xyyx', 'abcde'], ['a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz']) == ['abc', 'xyz', 'abcde']\nassert     total_match(['abc', 'xyz', 'abcd', 'xyyx', 'abcde'], ['a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz', 'a', 'ab', 'abc', 'xyz', 'yz']) == ['abc', 'xyz', 'abcde']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     total_match(['abc', 'ab', 'def', 'de'], ['def', 'abc', 'abc']) == ['abc', 'def']\nassert     total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'f', 'g']) == ['a', 'b', 'c', 'd', 'f', 'g']\nassert     total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'f', 'g']) == ['a', 'b', 'c', 'd', 'f', 'g']\nassert     total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'f', 'g']) == ['a', 'b', 'c', 'd', 'f', 'g']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     total_match(['a','b','c'], ['d','e','f','g']) == ['a','b','c']\nassert     total_match(['a','b','c','d'], ['a','b','c','d','e']) == ['a','b','c']\nassert     total_match(['a','b','c','d','e','f','g'], ['a','b','c','d']) == ['a','b','c']\nassert     total_match(['a','b','c','d','e','f','g'], ['a','b','c','d','e']) == ['a','b','c','d','e']\nassert     total_match(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'], ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']) == ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     total_match([\"abc\",\"def\",\"def\"], [\"abc\",\"def\",\"abc\"]) == [\"abc\"]\nassert     total_match([\"abc\",\"def\"], [\"abc\",\"def\",\"def\"]) == [\"abc\",\"def\"]\nassert     total_match([\"abc\",\"def\"], [\"abc\",\"def\",\"abc\"]) == [\"abc\",\"def\"]\n\ndef diff_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list of strings that \n    have differing chars in the first list and not in the second list.\n\n    if the two lists have the same number of chars, return an empty list.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     total_match([\"a\", \"b\"], [\"c\", \"d\"]) == [\"a\", \"b\"]\nassert     total_match([\"a\", \"b\"], [\"a\", \"b\"]) == [\"a\", \"b\"]\nassert     total_match([\"a\", \"b\"], [\"a\", \"c\"]) == [\"a\", \"b\"]\nassert     total_match([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert     total_match([\"a\", \"b\", \"c\"], [\"d\", \"e\"]) == [\"a\", \"b\", \"c\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     total_match(['apple', 'app', 'ap'], ['kate', 'k', 'ke']) == ['app', 'ap']\nassert     total_match(['apple', 'app', 'ap'], ['kate', 'k', 'ke', 'kz']) == ['apple', 'app', 'ap']\nassert     total_match(['banana', 'ban', 'ba'], ['kate', 'k', 'ke']) == ['banana', 'ban', 'ba']\nassert     total_match(['banana', 'ban', 'ba'], ['kate', 'k', 'ke', 'kz']) == ['banana', 'ban', 'ba']\nassert     total_match(['banana', 'ban', 'ba'], ['kate', 'k', 'ke', 'kz']) == ['banana', 'ban', 'ba']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     total_match(['a','b','c','d','e','f'], ['g','h','i','j','k','l']) == ['a','b','c','d','e','f']\nassert     total_match(['a','b','c','d','e','f'], ['f','h','i','j','k','l']) == ['a','b','c','d','e','f']\nassert     total_match(['a','b','c','d','e','f'], ['g','h','i','j','k','l']) == ['a','b','c','d','e','f']\nassert     total_match(['a','b','c','d','e','f'], ['a','b','c','d','e','f']) == ['a','b','c','d','e','f']\nassert     total_match(['a','b','c','d','e','f'], ['a','b','c','d','e','f']) == ['a','b','c','d','e','f']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     total_match(['f', 'a', 'c', 'e'], ['h', 'a', 'b', 'x']) == ['a', 'b', 'x']\nassert     total_match(['x', 'y', 'z'], ['w', 'o', 'p', 'a']) == ['w', 'o', 'p']\nassert     total_match(['k', 'i', 'k'], ['g', 'o', 'p']) == ['k']\nassert     total_match(['g', 'i', 'k'], ['o', 'p', 'l']) == ['i', 'k']\n\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         total_match([],         ['a', 'b', 'c', 'd']) == []\nassert         total_match(['abcd', 'efgh', 'ijklm'], ['abc', 'def', 'ghi', 'jkl']) == ['abcd', 'efgh', 'ijklm']\nassert         total_match(['abcd', 'efgh', 'ijklm'], ['abcd', 'efgh', 'ijklm', 'z', 'q']) == ['abcd', 'efgh', 'ijklm']\nassert         total_match(['abc', 'def', 'ghi', 'jkl'], ['abc', 'def', 'ghi', 'jkl']) == ['abc', 'def', 'ghi', 'jkl']\nassert         total_match(['abc', 'def', 'ghi', 'jkl'], ['abc', 'def', 'ghi', 'jkl', 'z', 'q']) == ['abc', 'def', 'ghi', 'jkl']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     total_match(['ab', 'abc', 'xyz'], ['abc', 'ab', '12']) == ['abc', 'ab']\nassert     total_match(['a', 'b', 'c'], ['b', 'a', 'ab', 'abb']) == ['a', 'b']\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(8) == False\nassert     is_multiply_prime(10) == True\nassert     is_multiply_prime(14) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(15) == False\nassert     is_multiply_prime(30) == True\nassert     is_multiply_prime(37) == True\nassert     is_multiply_prime(78) == False\nassert     is_multiply_prime(101) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(15) == False\nassert     is_multiply_prime(27) == False\nassert     is_multiply_prime(25) == True\nassert     is_multiply_prime(15) == True\nassert     is_multiply_prime(45) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(13*17) == False\nassert     is_multiply_prime(17*13) == False\nassert is_multiply_prime(13*17*19) == True\nassert is_multiply_prime(19*17*13) == True"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(6) == False, 'incorrect'\nassert     is_multiply_prime(9) == False, 'incorrect'\nassert     is_multiply_prime(12) == False, 'incorrect'\nassert     is_multiply_prime(18) == False, 'incorrect'\nassert     is_multiply_prime(27) == False, 'incorrect'\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == True\nassert     is_multiply_prime(5) == False\nassert     is_multiply_prime(6) == True\nassert     is_multiply_prime(7) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(15) == False\nassert     is_multiply_prime(23) == True\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(99) == False\n\n\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(10) == False\nassert     is_multiply_prime(19) == True\nassert     is_multiply_prime(23) == True\nassert     is_multiply_prime(28) == True\nassert     is_multiply_prime(61) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(12) == False\nassert     is_multiply_prime(6) == True\nassert     is_multiply_prime(48) == True\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(4) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(18) == True\nassert     is_multiply_prime(27) == True\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(26) == False\nassert     is_multiply_prime(30) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_simple_power(8, 2) == True\nassert     is_simple_power(64, 2) == True\nassert     is_simple_power(27, 3) == True\nassert     is_simple_power(32, 2) == False\nassert     is_simple_power(13, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_simple_power(125, 5)\nassert     not is_simple_power(26, 7)\nassert     not is_simple_power(13, 10)\nassert     is_simple_power(2**7, 2)\nassert     is_simple_power(4**9, 4)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_simple_power(6, 3)\nassert     is_simple_power(4, 2)\nassert     is_simple_power(2, 3)\nassert     not is_simple_power(3, 2)\nassert     not is_simple_power(5, 3)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_simple_power(16, 2) == True, \"2**16!= 16\"\nassert     is_simple_power(4, 3) == True, \"3**4!= 4\"\nassert     is_simple_power(4, 3) == True, \"3**0!= 1\"\nassert     is_simple_power(64, 2) == True, \"2**64!= 64\"\nassert     is_simple_power(16, 2) == True, \"2**16!= 16\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_simple_power(2, 3) == True\nassert     is_simple_power(3, 2) == False\nassert     is_simple_power(9, 3) == False\nassert     is_simple_power(24, 2) == True\nassert     is_simple_power(99, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (is_simple_power(9, 2) == True)\nassert     (is_simple_power(64, 2) == True)\nassert     (is_simple_power(65, 3) == True)\nassert     (is_simple_power(64, 3) == True)\nassert     (is_simple_power(10, 2) == False)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_simple_power(16,2)\nassert not is_simple_power(11,4)\nassert is_simple_power(64,2)\nassert is_simple_power(3,4)\nassert is_simple_power(9,3)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_simple_power(27, 3) == True\nassert     is_simple_power(13, 2) == False\nassert     is_simple_power(1, 1) == True\nassert     is_simple_power(0, 0) == True\nassert     is_simple_power(16, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_simple_power(1, 5) == False\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(5, 2) == False\nassert     is_simple_power(5, 5) == True\nassert     is_simple_power(0, 10) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_simple_power(2**10, 2)\nassert     is_simple_power(2**20, 2)\nassert     not is_simple_power(2**11, 2)\nassert     not is_simple_power(2**21, 2)\nassert     not is_simple_power(2**21, 3)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ices(3)\nassert ices(15)\nassert ices(4) == True\nassert ices(16) == False\nassert ices(10**100) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert ico(1) == True\nassert ico(2) == True\nassert ico(3) == False\nassert ico(4) == True\nassert ico(5) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert icesk(8) == True\nassert icesk(8) == True\nassert icesk(12) == True\nassert icesk(27) == True\nassert icesk(100) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert ix1 == iscube(1)\nassert ix2 == iscube(2)\nassert ix3 == iscube(3)\nassert ix4 == iscube(4)\nassert ix5 == iscube(5)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert icalc.iscube(0)\nassert icalc.iscube(1)\nassert icalc.iscube(2)\nassert not icalc.iscube(3)\nassert not icalc.iscube(4)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     iscube(1) == True\nassert     iscube(16) == True\nassert     iscube(36) == True\nassert     iscube(64) == True\nassert     iscube(1000) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert icalc(2)\nassert not iscube(1)\nassert iscube(4)\nassert not iscube(9)\nassert iscube(64)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert icausbe(4)\nassert icausbe(12)\nassert not icausbe(121)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert izcube(0)\nassert izcube(1)\nassert izcube(2)\nassert izcube(3)\nassert izcube(7)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert icespride(6)\nassert not icespride(7)\nassert not icespride(11)\nassert icespride(12)\nassert icespride(24)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hex_key(\"A2\") == \"2\"\nassert     hex_key(\"D2\") == \"2\"\nassert     hex_key(\"B6\") == \"3\"\nassert     hex_key(\"D2\") == \"2\"\nassert     hex_key(\"F6\") == \"6\"\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     hex_key(\"12F\") == 2\nassert     hex_key(\"13D\") == 1\nassert     hex_key(\"14E\") == 0\nassert     hex_key(\"17\") == 4\nassert     hex_key(\"A\") == 9\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     hex_key(\"A\") == 1\nassert     hex_key(\"C\") == 1\nassert     hex_key(\"1\") == 0\nassert     hex_key(\"\") == 0\nassert     hex_key(\"AB\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     hex_key('2B3E') == (1, 2)\nassert     hex_key('2B3E9') == (1, 3)\nassert     hex_key('2B3F') == (1, 3)\nassert     hex_key('2B3E') == (1, 2)\nassert     hex_key('2B3') == (1, 2)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hex_key('2BCD') == (2, 3)\nassert     hex_key('A2B') == (2, 3)\nassert     hex_key('AA') == (2, 3)\nassert     hex_key('A1') == (2, 3)\nassert     hex_key('A') == (2, 3)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hex_key('A2') == 1, 'Wrong answer'\nassert     hex_key('B1') == 1, 'Wrong answer'\nassert     hex_key('B4') == 2, 'Wrong answer'\nassert     hex_key('B8') == 3, 'Wrong answer'\nassert     hex_key('BA') == 1, 'Wrong answer'\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     hex_key(\"A8B6A\") == 2\nassert     hex_key(\"FAB1C1D\") == 3\nassert     hex_key(\"A1B2C3D4E5F6\") == 5\nassert     hex_key
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hex_key(\"FFFFCFFL\") == 3\nassert     hex_key(\"FFFFCFFLF\") == 5\nassert     hex_key(\"FFFFCFFLFF\") == 6\nassert     hex_key(\"FFFFCFFLFFFF\") == 7\nassert     hex_key(\"FFFFCFFLFFFFF\") == 8\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('2') == 1\nassert     hex_key('3') == 1\nassert     hex_key('4') == 1\nassert     hex_key('5') == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0)     == '0' * 16\nassert     decimal_to_binary(1)     == '1' * 16\nassert     decimal_to_binary(2)     == '10' * 8\nassert     decimal_to_binary(3)     == '11' * 8\nassert     decimal_to_binary(4)     == '100' * 4\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(4) == '1100'\nassert     decimal_to_binary(3) == '1101'\nassert     decimal_to_binary(22) == '101010'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(2) == 'db10'\nassert     decimal_to_binary(3) == 'db11'\nassert     decimal_to_binary(5) == 'db101'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == \"000000000000000000000000000000000000\"\nassert     decimal_to_binary(1) == \"00000000000000000000000000000001\"\nassert     decimal_to_binary(2) == \"00000000000000000000000000000010\"\nassert     decimal_to_binary(10) == \"000000000000000000000000010000\"\nassert     decimal_to_binary(15) == \"0000000000000000000000000150000\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(5) == '101'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == '0b0'\nassert     decimal_to_binary(1) == '0b1'\nassert     decimal_to_binary(10) == '0b1010'\nassert     decimal_to_binary(16) == '0b1a'\nassert     decimal_to_binary(256) == '0b10000'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(10)    == \"1010\"\nassert     decimal_to_binary(110)     == \"10101\"\nassert     decimal_to_binary(111)     == \"10111\"\nassert     decimal_to_binary(1000)    == \"10000\"\nassert     decimal_to_binary(9999)    == \"10001\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0) == '0'*8 + 'db'\nassert     decimal_to_binary(1) == '1'*8 + 'db'\nassert     decimal_to_binary(2) == '10'*8 + 'db'\nassert     decimal_to_binary(5) == '101'*8 + 'db'\nassert     decimal_to_binary(6) == '110'*8 + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0) == '0b0'\nassert     decimal_to_binary(1) == '0b1'\nassert     decimal_to_binary(2) == '0b10'\nassert     decimal_to_binary(5) == '0b101'\nassert     decimal_to_binary(10) == '0b1010'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) ==     '0' * 8 + 'db'\nassert     decimal_to_binary(1) ==     '1' * 8 + 'db'\nassert     decimal_to_binary(2) ==     '10' * 8 + 'db'\nassert     decimal_to_binary(3) ==     '11' * 8 + 'db'\nassert     decimal_to_binary(4) ==     '100' * 8 + 'db'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_happy(\"happy\") == True\nassert     is_happy(\"hAPPY\") == True\nassert     is_happy(\"happiness\") == False\nassert     is_happy(\"happy???\") == False\nassert     is_happy(\"happienaaaaa\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_happy(\"is\") == True\nassert     is_happy(\"isn\") == False\nassert     is_happy(\"aabcccccaaa\") == True\nassert     is_happy(\"abcd\") == False\nassert     is_happy(\"abcdef\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_happy(\"\") == False\nassert     is_happy(\"baba\") == False\nassert     is_happy(\"baa\") == False\nassert     is_happy(\"baab\") == False\nassert     is_happy(\"baaba\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_happy('flqr') == True\nassert     is_happy('alb') == False\nassert     is_happy('s') == True\nassert     is_happy('qqqqqqqqq') == False\nassert     is_happy('asdfgh') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_happy('aabb') == True\nassert     is_happy('abbb') == False\nassert     is_happy('bab') == False\nassert     is_happy('baaba') == True\nassert     is_happy('bbaa') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"xyz\") == False\nassert     is_happy(\"zxy\") == False\nassert     is_happy(\"zxz\") == False\nassert     is_happy(\"zyx\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_happy('xxyxx') == True\nassert     is_happy('x') == True\nassert     is_happy('qwertasd') == False\nassert     is_happy('a') == True\nassert     is_happy('aa') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_happy(\"a\") == False\nassert     is_happy(\"abcdef\") == False\nassert     is_happy(\"abbcde\") == False\nassert     is_happy(\"abbbccc\") == False\nassert     is_happy(\"abccd\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_happy('abc') == False\nassert     is_happy('aaa') == False\nassert     is_happy('aab') == False\nassert     is_happy('aabb') == True\nassert     is_happy('aabbb') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_happy(\"ccc\") == True\nassert     is_happy(\"crcs\") == True\nassert     is_happy(\"crcc\") == False\nassert     is_happy(\"cccrc\") == False\nassert     is_happy(\"cccccccccc\") == False\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) \\\n        == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\n\n\n\n\n\n\n\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\ndef pass_grade_on_test(grades):\n    \"\"\"The teacher gave you a list of grades for a group of 10 students. They \n    have made a mistake and you have to write a function that can find the \n    passing grade of the students.\n    The teacher wants to make it as easy as possible and she has decided to \n    automatically grade the students based on their GPA. If their GPA is \n    < 2.0 then their grade is \u201cC+\u201d, then GPA is < 3.3 then they are \u201cC\u201d, GPA is < 3.7 \n    then they are \u201cC-\u201d, GPA is < 3.9 then they are \u201cB+\u201d, GPA is < 4.0 then they are \u201cB\u201d,\n    GPA is < 4.3 then they are \u201cB-\u201d, GPA is < 4.7 then they are \u201cA+\u201d, GPA is < 4.9 then they are \u201cA\u201d,\n    GPA is < 5.0 then they are \u201cA-\u201d, GPA is < 5.3 then they are \u201cS+\u201d, GPA is < 5.7 then they are \u201cS\u201d,\n    GPA is < 5.9 then they are \u201cS-\u201d, GPA is < 6.0 then they are \u201cG\u201d, GPA is < 6.3 then they are \u201cG-\u201d,\n    GPA is < 6.7 then they are \u201cF\u201d, GPA is < 6.9 then they are \u201cF-\u201d, GPA is < 7.0 then they are \u201cE\u201d,\n    and GPA is < 7.3 then they are \u201cE-\u201d, GPA is < 7.7 then they are \u201cD\u201d, GPA is < 7.9 then they are \u201cD-\u201d,\n    GPA is < 8.0 then they are \u201cC\u201d, GPA is < 8.3 then they are \u201cC-\u201d, GPA is < 8.7 then they are \u201cB\u201d,\n    GPA is < 9.0 then they are \u201cB-\u201d, GPA is < 9.3 then they are \u201cA\u201d, GPA is < 9.7 then they are \u201cA-\u201d,\n    GPA is < 10.0 then they are \u201cS\u201d, and if their GPA is > 10.0 then they are \u201cS+\u201d.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 5.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == \\\n            ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([2.0, 3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) \\\n            == ['A+', 'A', 'A-', 'A-', 'A', 'A-', 'B+', 'B', 'B-', 'B-', 'B', 'B-', 'C+', 'C', 'C-', 'C-', 'C', 'C-', 'D+', 'D', 'D-', 'D-']\nprint('Passed: test_numerical_letter_grade')\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Check your answer\"\nassert     numerical_letter_grade([5.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['E', 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Check your answer\"\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Check your answer\"\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 2.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Check your answer\"\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 2.0, 2.7, 2.3, 1.9, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Check your answer\"\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [\n    'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'\n]"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([3.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']\nassert     numerical_letter_grade([3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E']\nassert     numerical_letter_grade([3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\n                                                        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'F', 'F-'\n                                                ]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\n            'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], 'Test 01 failed'\nassert         numerical_letter_grade([5.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\n            'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'], 'Test 02 failed'\nassert         numerical_letter_grade([1.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['F', 'F', 'F', 'F', 'F', 'F'], 'Test 03 failed'\nassert         numerical_letter_grade([0.7, 0.0]) == ['F', 'F'], 'Test 04 failed'\nassert         numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\n            'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], 'Test 05 failed'\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"]\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 1.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\", \"F\"]\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 2.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\", \"E\", \"F\"]\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\", \"E\", \"F\", \"F\"]\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_length('ab') is False\nassert     prime_length('abc') is False\nassert     prime_length('abcdef') is False\nassert     prime_length('abcdefg') is True\nassert     prime_length('asdfghjkl') is True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_length(\"Hello\") == False\nassert     prime_length(\"Hellow\") == True\nassert     prime_length(\"Helloworld\") == False\nassert     prime_length(\"Helloworld!\") == True\nassert     prime_length(\"Helloworld!!\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_length('0000') == True\nassert     prime_length('12345') == True\nassert     prime_length('123456') == False\nassert     prime_length('123456789') == False\nassert     prime_length('999') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_length('hello') == False\nassert     prime_length('abc') == False\nassert     prime_length('aba') == True\nassert     prime_length('hello123') == False\nassert     prime_length('123') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"ab\") == False\nassert     prime_length(\"abc\") == False\nassert     prime_length(\"abcdef\") == True\nassert     prime_length(\"abcdefg\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef is_prime(num):\n    \"\"\"Write a function that takes a number and returns True if the number is\n    a prime number or False otherwise\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"a\") == False\nassert     prime_length(\"123\") == False\nassert     prime_length(\"a2b\") == False\nassert     prime_length(\"ab\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef count_threes(n):\n    \"\"\"Write a function that takes a number and returns the number of\n    integers that evenly divide it. For example, count_threes(3) would\n    return 0, since 3 has no evenly divisors.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_length(\"Hello\") == False\nassert     prime_length(\"prime\") == True\nassert     prime_length(\"\") == False\nassert     prime_length(\"   \") == False\nassert     prime_length(\"4\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_length(\"0123456789\") == False\nassert     prime_length(\"101\") == False\nassert     prime_length(\"1010\") == True\nassert     prime_length(\"101101\") == True\nassert     prime_length(\"2\") == True\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 10\nassert     starts_one_ends(3) == 49\nassert     starts_one_ends(4) == 437\nassert     starts_one_ends(5) == 873\nassert     starts_one_ends(6) == 1212\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 7\nassert     starts_one_ends(5) == 9\nassert     starts_one_ends(6) == 11\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     starts_one_ends(2) == 10\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 5\nassert     starts_one_ends(5) == 6\nassert     starts_one_ends(6) == 7\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     starts_one_ends(3) == 9\nassert     starts_one_ends(4) == 13\nassert     starts_one_ends(5) == 19\nassert     starts_one_ends(6) == 37\nassert     starts_one_ends(7) == 49\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 4\nassert     starts_one_ends(5) == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     starts_one_ends(5) == 2\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(10) == 1\nassert     starts_one_ends(34) == 2\nassert     starts_one_ends(123) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 9\nassert     starts_one_ends(5) == 15\nassert     starts_one_ends(6) == 25\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     starts_one_ends(1) == 10\nassert     starts_one_ends(2) == 12\nassert     starts_one_ends(3) == 6\nassert     starts_one_ends(4) == 16\nassert     starts_one_ends(5) == 26\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     starts_one_ends(1) == 2\nassert     starts_one_ends(2) == 6\nassert     starts_one_ends(3) == 5\nassert     starts_one_ends(4) == 15\nassert     starts_one_ends(5) == 25\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     starts_one_ends(12) == 3\nassert     starts_one_ends(1) == 0\nassert     starts_one_ends(9) == 1\nassert     starts_one_ends(98) == 0\nassert     starts_one_ends(100) == 0\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(0)     == \"0\"\nassert     solve(1)     == \"1\"\nassert     solve(9)     == \"1001\"\nassert     solve(10)     == \"1010\"\nassert     solve(11)     == \"1011\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(21) ==     '10111'\nassert     solve(1) ==     '1'\nassert     solve(10) ==     '1010'\nassert     solve(24) ==     '10010010'\nassert     solve(15) ==     '111101'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(1) == \"1\"\nassert     solve(2) == \"10\"\nassert     solve(3) == \"11\"\nassert     solve(4) == \"100\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef test():\n    assert solve(10) == \"1\"\n    assert solve(100) == \"1100\"\n    assert solve(1000) == \"1000000\"\n    "
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve(123) == \"0b11011110111100\"\nassert     solve(12345) == \"0b111101111101110110111100\"\nassert     solve(0) == \"0b0\"\nassert     solve(13) == \"0b10\"\nassert     solve(1234567) == \"0b110111111101111111000110110111100\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve(101)    == '0' + '1' + '1'\nassert     solve(1010)    == '0' + '10' + '1' + '0'\nassert     solve(100100)    == '0' + '100' + '0' + '0'\nassert     solve(10011)    == '0' + '10' + '1' + '1'\nassert     solve(0)    == '0'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(10) == '1'\nassert     solve(11) == '100'\nassert     solve(12) == '1100'\nassert     solve(13) == '1101'\nassert     solve(14) == '1110'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(0)                 ==     \"0b0\"\nassert     solve(1)                 ==     \"0b1\"\nassert     solve(2)                 ==     \"0b10\"\nassert     solve(3)                 ==     \"0b11\"\nassert     solve(4)                 ==     \"0b100\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(12) == '100'\nassert     solve(17) == '101'\nassert     solve(18) == '100'\nassert     solve(19) == '101'\nassert     solve(21) == '101'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve(123)         == \"1101\", \"wrong answer\"\nassert     solve(1234)         == \"110101\", \"wrong answer\"\nassert     solve(100)         == \"1100\", \"wrong answer\"\nassert     solve(1000)         == \"10000\", \"wrong answer\"\nassert     solve(111111)     == \"11111111\", \"wrong answer\"\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add([1,2,3,4,5,6]) == [2,4]\nassert add([1,2,3,4,5,6,7,8]) == [2,4]\nassert add([1,2,3,4,5,6,7,8,9,10,11]) == [2,4,6,8]\nassert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [2,4,6,8,10,12]\nassert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [2,4,6,8,10,12]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert add([1, 3, 5]) == [2, 4, 6]\nassert add([2, 4, 6]) == [1, 3, 5]\nassert add([1, 3, 5, 7, 9]) == [2, 4, 6, 8]\nassert add([5, 7, 9]) == [1, 3, 5, 7, 9]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add([1, 2, 3, 4]) == [2, 4]\nassert     add([1, 2, 3, 4, 5]) == [2, 4, 6]\nassert     add([1, 2, 3]) == [2, 4, 6]\nassert     add([]) == []\nassert     add([-1, -2]) == [-1, -2]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add([]) == []\nassert     add([1]) == []\nassert     add([1, 2, 3, 4, 5]) == [2, 4]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [4, 6, 8]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add([2, 3, 4, 5]) == [4]\nassert     add([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [6, 8]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add([1,2,3,4,5,6,7])         == [2,4,6,8]\nassert     add([1,3,5,7])             == [2,4,6]\nassert     add([0,1,2,3])             == [0,2,4]\nassert     add([])                 == []\nassert     add([1])                 == [1]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [2, 3, 4, 5, 6, 7, 8] == add([1, 2, 3, 4, 5, 6, 7])\nassert     [2, 4, 6, 8] == add([1, 3, 5, 7, 9])\nassert     [1, 3, 5, 7, 9] == add([1, 3, 5, 7, 9, 11])\nassert     [1, 3, 5, 7, 9, 11] == add([1, 3, 5, 7, 9, 11, 13])\nassert     [1, 3, 5, 7, 9, 11, 13] == add([1, 3, 5, 7, 9, 11, 13, 15])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add([1,2,3,4,5]) == [2,4,6]\nassert     add([1,3,2,5]) == [2,4,6]\nassert     add([1,3,2,5,4]) == [2,4,6]\nassert     add([1,3,2,5,4,6]) == [2,4,6]\nassert     add([1,3,2,5,4,6,9,8]) == [2,4,6]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add([1,2,3,4,5,6,7]) == [2,4,6]\nassert add([1,2,3,4,5,6,7]) == []\nassert add([1,2,3,4,5,6,7]) == [2,4,6]\nassert add([-1,0,1,2,3,4,5,6]) == [-1,0,2,4]\nassert add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add([1,2,3,4,5,6,7,8]) == [2,4,6,8]\nassert     add([1,3,5]) == [2,4,6]\nassert     add([1,2,3]) == [1,2,3]\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     anti_shuffle('a b c') == 'abc'\nassert     anti_shuffle('i am the best') == 'am the the best'\nassert     anti_shuffle('Python is the best language!') == 'Python is the best language!'\nassert     anti_shuffle('hi') == 'hi'\n\ndef anti_shuffle2(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    descending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     anti_shuffle('I am a student') == 'a I student am'\nassert     anti_shuffle('How do you do?') == 'do you how a do'\nassert     anti_shuffle('Attention, M.!') == '!.M. Attention'\nassert     anti_shuffle('Hi') == 'Hi'\nassert     anti_shuffle('Hi there!') == '!there Hi'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"   the cat in the hat\") == \"the cat in the hat\"\nassert     anti_shuffle(\"the cat in the hat\") == \"the cat in the hat\"\nassert     anti_shuffle(\"the hat in the cat\") == \"the hat in the cat\"\nassert     anti_shuffle(\"the cat in the hat\") == \"the cat in the hat\"\nassert     anti_shuffle(\"the hat in the cat\") == \"the hat in the cat\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     anti_shuffle('  HackerRank  ') == 'Hce akrneH'\nassert     anti_shuffle('Mr John Smith') == 'Mr JnhnS'\nassert     anti_shuffle('Hello') == 'Hlleo'\nassert     anti_shuffle('1 2 3 4') == '1 2 3 4'\nassert     anti_shuffle('1') == '1'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"hello world\") == \"hello   world\"\nassert     anti_shuffle(\"hello   world\") == \"hello world\"\nassert     anti_shuffle(\"hello   world     \") == \"hello   world     \"\nassert     anti_shuffle(\"     hello world \") == \"    hello world \"\nassert     anti_shuffle(\" \") == \" \"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     anti_shuffle('') == '',     \"anti_shuffle('') == ''\"\nassert     anti_shuffle('I like playing football') == 'I like playing Football', \"anti_shuffle('I like playing football') == 'I like playing Football'\"\nassert     anti_shuffle('I like playing football') == 'I like playing Football', \"anti_shuffle('I like playing football') == 'I like playing Football'\"\nassert     anti_shuffle('I like playing football') == 'I like playing Football', \"anti_shuffle('I like playing football') == 'I like playing Football'\"\nassert     anti_shuffle('I like playing football') == 'I like playing Football', \"anti_shuffle('I like playing football') == 'I like playing Football'\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     anti_shuffle('Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.') == 'Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.'\nassert     anti_shuffle('Hello World') == 'Hello World'\nassert     anti_shuffle(' 1plus1') == '1plus1'\nassert     anti_shuffle('1 plus 1') == '1 plus 1'\nassert     anti_shuffle('He came to learn programming and now he is learning to program in Python!') == 'He came to learn programming and now he is learning to program in Python!'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         anti_shuffle('   hello world') ==' hello world'\nassert         anti_shuffle('hello world   ') == 'hello world'\nassert         anti_shuffle('hello   world') == 'hello world'\nassert         anti_shuffle('hello   world   ') == 'hello world'\nassert         anti_shuffle('hello   world   hi') == 'hello world hi'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     anti_shuffle('try') == 'tir'\nassert     anti_shuffle('try hello') == 'try hle'\nassert     anti_shuffle('hello world') == 'hello wrd'\nassert     anti_shuffle('hello world bye') == 'hello bye'\nassert     anti_shuffle('this is a test') == 'this is a tes'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     anti_shuffle('hello   world') == 'hello   world'\nassert     anti_shuffle('I   am      happy') == 'I   am      happy'\nassert     anti_shuffle('I   am      happy   now') == 'I   am      happy   now'\nassert     anti_shuffle('hello   world   ') == 'hello   world   '\nassert     anti_shuffle('  hello world') ==' hello world'\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_row(lst, 2) == [(1, 3), (0, 2)]\nassert     get_row(lst, 1) == [(1, 2), (0, 1)]\nassert     get_row(lst, 0) == [(0, 0), (1, 1), (2, 2)]\nassert     get_row(lst, -1) == [(0, 1), (1, 0), (2, 0)]\n\ndef matrix(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Return a matrix in the following format:\n    [[x1, x2, x3],\n     [y1, y2, y3],\n     [z1, z2, z3]\n    ]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8) == [(0, 2), (1, 1), (2, 0)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == []\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 9) == [(1, 1), (2, 0), (3, 1), (4, 0)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 17) == []\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -1) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_row([[1, 2], [3, 4], [5, 6]], 0) == [(0, 0), (0, 1), (1, 1), (1, 0)]\nassert     get_row([[1, 2], [3, 4], [5, 6]], 1) == [(1, 1), (1, 2), (2, 1), (2, 0)]\nassert     get_row([[1, 2], [3, 4], [5, 6]], 2) == [(1, 0), (2, 0), (2, 1), (1, 1)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 1), (2, 0), (3, 2), (3, 1), (3, 0)]\nassert     get_row([[1, 2], [3, 4], [5, 6]], -1) == [(0, 0), (0, 1), (1, 1), (1, 0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_row([[1, 2, 3], [3, 4, 5], [6, 7, 8]], 1) == [(0, 0), (0, 1), (0, 2), (1, 2)]\nassert     get_row([[2, 1, 3], [4, 5, 6]], 3) == [(1, 2), (1, 3), (2, 3)]\nassert     get_row([[2, 1, 3], [4, 5, 6], [7, 8, 9]], 4) == [(2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4), (4, 2), (4, 3), (4, 4)]\n\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [(0, 0), (0, 1), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (2, 3)] == get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 1)\nassert     [(2, 0), (2, 1), (2, 2), (2, 3)] == get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 2)\nassert     [(0, 0), (0, 1), (1, 0), (1, 1)] == get_row([[1, 2, 3], [1, 2, 3]], 0)\nassert     [(1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)] == get_row([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3)\nassert     [(2, 3), (1, 3), (1, 2), (0, 2)] == get_row([[1, 2, 3], [1, 2, 3]], 3)\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_row([], 1) == [(0, 0)]\nassert     get_row([[1,2,3]], 1) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[2,3,4], [1,2,3], [5,6,7]], 5) == [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4)]\nassert     get_row([[4,5,6], [2,3,4], [8,9,7]], 8) == [(2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 0), (3, 1), (3, 2)]\nassert     get_row([[4,5,6], [2,3,4], [8,9,7]], 7) == [(3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (4, 0), (4, 1), (4, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_row([['', '', '', ''],\n                ['', '', '', ''],\n                ['', '', '', ''],\n                ['', '', '', '']], 0) == [[(0, 0), (0, 1), (0, 2), (0, 3)],\n                                        [(1, 0), (1, 1), (1, 2), (1, 3)],\n                                        [(2, 0), (2, 1), (2, 2), (2, 3)],\n                                        [(3, 0), (3, 1), (3, 2), (3, 3)]]\n\nassert     get_row([['', '', '', ''],\n                ['', '', '', ''],\n                ['', '', '', ''],\n                ['', '', '', '']], 1) == [[(0, 1), (0, 2), (0, 3), (1, 0)],\n                                        [(1, 1), (1, 2), (1, 3), (2, 0)],\n                                        [(2, 1), (2, 2), (2, 3), (3, 0)],\n                                        [(3, 1), (3, 2), (3, 3), (4, 0)]]\n\nassert     get_row([['', '', '', ''],\n                ['', '', '', ''],\n                ['', '', '', ''],\n                ['', '', '', '']], 3) == [[(0, 3), (0, 2), (0, 1), (1, 3)],\n                                        [(1, 2), (1, 1), (1, 0), (2, 3)],\n                                        [(2, 1), (2, 0), (3, 1), (3, 0)],\n                                        [(3, 0), (3, 2), (3, 3), (4, 2)]]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6]], 1) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(0, 2), (0, 1), (0, 0)]\nassert     get_row([[1, 2], [3, 4]], 1) == [(0, 1), (1, 0)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7) == [(2, 2), (1, 1), (0, 0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_row([], 0) == []\nassert     get_row([], 1) == []\nassert     get_row([[1, 2, 3], [4, 5, 6]], 0) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 1) == [(1, 2), (1, 3), (1, 4)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(0, 0), (1, 2), (2, 1), (0, 2), (1, 0)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 11) == [(2, 3), (2, 2), (1, 3), (0, 0), (1, 2), (0, 1)]\nassert     get_row([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 13) == [(0, 3), (0, 2), (0, 1), (0, 0), (1, 0), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2)]"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     sort_array([2, 3, 1, 4]) == [1, 2, 3, 4]\nassert     sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([1, 4, 2, 3, 5]) == [1, 4, 2, 3, 5]\nassert     sort_array([4, 4, 2, 3, 5, 1]) == [1, 4, 2, 3, 5, 4]\nassert     sort_array([5, 1, 4, 2, 3]) == [1, 4, 2, 3, 5]\nassert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([1,3,2,2]) == [1,2,2,3]\nassert     sort_array([1,3,2,2]) == [1,2,2,3]\nassert     sort_array([1,3,2,2]) == [1,2,2,3]\nassert     sort_array([1,2,3,4]) == [1,2,3,4]\nassert     sort_array([1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([5, 2, 3, 1]) == [1, 2, 3, 5]\nassert     sort_array([5, 1, 3, 2]) == [1, 2, 3, 5]\nassert     sort_array([4, 2, 4, 2, 2, 3]) == [4, 4, 4, 3, 2, 2]\nassert     sort_array([2, 2, 2]) == [2, 2, 2]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([4, 2, 3, 5, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([1, 3, 2, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([3, 2, 1]) == [1, 2, 3]\nassert     sort_array([4, 2, 3, 5, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     sort_array([10,9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([0,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,0]\nassert     sort_array([11,10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == sort_array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([5, 2, 3, 4, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 3, 2, 4, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([6, 2, 1, 3, 4, 5]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([5, 3, 1, 2, 4, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([5, 3, 1, 2, 4, 6, 9]) == [1, 2, 3, 4, 5, 6, 9]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([4,2,3,1]) == [1, 2, 3, 4]\nassert     sort_array([4,3,2,1]) == [1, 2, 3, 4]\nassert     sort_array([4,3,2,0]) == [0, 1, 2, 3, 4]\nassert     sort_array([4,3,2]) == [0, 1, 2, 3, 4]\nassert     sort_array([4,3,2,1,0]) == [0, 1, 2, 3, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert sort_array([15,13,12,11,10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert sort_array([15,13,12,11,10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert sort_array([15,13,12,11,10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n\ndef test_decrypt():\n    \"\"\" Create a function called test_decrypt that takes an encrypted string\n    as an argument and verifies that the function returns the original string\n    by comparing the original string to the original string. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encrypt('spam') == 'tgs'\nassert     encrypt('abc') == 'bcd'\nassert     encrypt('xyz') == 'zab'\n\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encrypt(\"\") == \"\"\nassert     encrypt(\"Hello World\") == \"DzqzvxkvF\"\nassert     encrypt(\"Hello World!\") == \"bzsjzhqhk\"\n\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encrypt('to be or not to be, that is the question') == 'bcvhmpnqgvbczjnhvkqnjbmg', \"encrypt('to be or not to be, that is the question')\"\nassert encrypt('bob') == 'boebc', \"encrypt('bob')\"\nassert encrypt('tommy') =='mtyt', \"encrypt('tommy')\"\nassert encrypt('dog') == 'dgco', \"encrypt('dog')\"\nassert encrypt('draco') == 'drachm', \"encrypt('draco')\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\n\n\n\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encrypt(\"apple\") == \"bcdefghjk\"\nassert     encrypt(\"orange\") == \"bcdefghij\"\nassert     encrypt(\"grape\") == \"bcdefghjk\"\nassert     encrypt(\"a\") == \"bcd\"\nassert     encrypt(\"b\") == \"cdef\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encrypt(\"ABCD\") == \"BCDA\"\nassert     encrypt(\"EFGH\") == \"GHFG\"\nassert     encrypt(\"JKL\") == \"LJKG\"\nassert     encrypt(\"MNO\") == \"NMOY\"\nassert     encrypt(\"PQRS\") == \"PRQS\"\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest([1,2,3,4,5,6,7]) == 5\nassert     next_smallest([1,2,3,4,5,6]) == 6\nassert     next_smallest([1,2,3,4,5]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([10, 2, 3, 4, 5]) == 2\nassert     next_smallest([10, 9, 3, 4, 5]) == 3\nassert     next_smallest([10, 9, 3, 4, 5, 7]) == 7\nassert     next_smallest([10, 9, 3, 4, 5, 6]) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7]) == 2\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == 5\nassert     next_smallest([1, 1, 1, 1]) == None\nassert     next_smallest([1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest([1,2,3,4,5]) == 2\nassert     next_smallest([1,2,3,4,5,6]) == 5\nassert     next_smallest([3,2,1]) == None\nassert     next_smallest([]) == None\nassert     next_smallest([-1, -2, -3, -4, -5, -6]) == -2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest([]) == None\nassert     next_smallest([1]) == 1\nassert     next_smallest([1, 2]) == 2\nassert     next_smallest([2, 1]) == 1\nassert     next_smallest([3, 2, 1]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest([10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\nassert     next_smallest([10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1\nassert     next_smallest([10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\nassert     next_smallest([10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3\nassert     next_smallest([10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_smallest([]) == None\nassert     next_smallest([1]) == None\nassert     next_smallest([1, 2]) == None\nassert     next_smallest([-1, 2, 3]) == 2\nassert     next_smallest([-1, -2, -3]) == -2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([1, 3, 2, 4, 5]) == 3\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == None\nassert     next_smallest([-1, -2, -3, -4, -5]) == -2\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_smallest([1, 2, 3]) == 2\nassert     next_smallest([4, 1, 2, 3]) == 2\nassert     next_smallest([4, 3, 1, 2]) == 3\nassert     next_smallest([4, 4, 3, 1, 2]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == 3\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == None\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_bored(\"I don't care.\") == True\nassert     is_bored(\"I am bored.\") == True\nassert     is_bored(\"I have a dream.\") == True\nassert     is_bored(\"I don't care I am not.\") == True\nassert     is_bored(\"I have a dream I don't.\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_bored(\"I am bored.\") == True\nassert     is_bored(\"I am not bored.\") == False\nassert     is_bored(\"I am not bIdd in a word.\") == False\nassert     is_bored(\"I am not bored.\") == False\nassert     is_bored(\"I am not bIdd in a word.\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_bored(\"\") == 0\nassert     is_bored(\"I\") == 1\nassert     is_bored(\"I.?\") == 1\nassert     is_bored(\"I I.?\") == 1\nassert     is_bored(\"I I I.?\") == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         is_bored('Hi! I am bored.') == True\nassert         is_bored('Hi! I am not bored!') == False\nassert         is_bored('Hi! I am not bored!') == False\nassert         is_bored('I am bored.') == True\nassert         is_bored('I am not bored!') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_bored(\"I am bored\") == True, \"Test1: \"\nassert     is_bored(\"is bored\") == True, \"Test2: \"\nassert     is_bored(\"isn't bored\") == True, \"Test3: \"\nassert     is_bored(\"isn't I bored\") == False, \"Test4: \"\nassert     is_bored(\"It's I not a bore\") == False, \"Test5: \"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_bored(\"I am not bored!\") == False, \"Error: 1\"\nassert     is_bored(\"I am not really bored.\") == True, \"Error: 2\"\nassert     is_bored(\"I am not really bored. So are you?\") == True, \"Error: 3\"\nassert     is_bored(\"I am not really bored. So are you? I am bored!\") == False, \"Error: 4\"\nassert     is_bored(\"I am not really bored. So are you? I am really bored.\") == True, \"Error: 5\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_bored(\"I will not get bored. I will not be bored.\") == 1\nassert is_bored(\"I will not get bored. I will not be bored.\") == 0\nassert is_bored(\"I am bored.\") == 1\nassert is_bored(\"I am not bored.\") == 0\nassert is_bored(\"I do not care what I am doing.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_bored
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_bored(\"I am bored\") == True\nassert     is_bored(\"This is not a good sentence\") == False\nassert     is_bored(\"I am bored.\") == False\nassert     is_bored(\"I am bored, not a good sentence, but.\") == True\nassert     is_bored(\"I am not bored, nor a good sentence, but.\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_bored(\"I am bored.\") == True\nassert     is_bored(\"I am not bored.\") == False\nassert     is_bored(\"I am not bored!\") == False\nassert     is_bored(\"This is not a sentence\") == False\nassert     is_bored(\"This.is.not.a.sentence\") == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     any_int(0, 0, 0)\nassert     any_int(0, 0, 1)\nassert     any_int(0, 1, 0)\nassert     any_int(0, 1, 1)\nassert     any_int(1, 0, 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1.0, 2, 3) == True\nassert     any_int(1, 2.0, 3) == False\nassert     any_int(1, 2, 3.0) == False\nassert     any_int(0, 0, 0) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     any_int(1,2,3) == False\nassert     any_int(2,2,3) == False\nassert     any_int(1,1,3) == True\nassert     any_int(-1,2,3) == False\nassert     any_int(1,2,-3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     any_int(5, 4, 2) == True, \"False\"\nassert     any_int(2, 5, 6) == True, \"False\"\nassert     any_int(2, 5, 2) == False, \"False\"\nassert     any_int(2, 2, 2) == True, \"False\"\nassert     any_int(4, 5, 5) == False, \"False\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     any_int(1, 1, 1) == True\nassert     any_int(1, 1, 2) == False\nassert     any_int(1, 2, 1) == False\nassert     any_int(5, 5, 5) == True\nassert     any_int(5, 5, 4) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     any_int(1, 2, 3)     == True,     \"any_int(1, 2, 3) should be True\"\nassert     any_int(1, 2, 3.0)     == False, \"any_int(1, 2, 3) should be False\"\nassert     any_int(1, 2, 3.2)     == True,     \"any_int(1, 2, 3) should be True\"\nassert     any_int(1, 2, 3.3)     == False, \"any_int(1, 2, 3) should be False\"\nassert     any_int(3, 2, 3)     == False, \"any_int(3, 2, 3) should be False\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 3.5) == True\nassert     any_int(1, 2, 2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3)\nassert     not any_int(2.5, 2.5, 2.5)\nassert     not any_int(1, 2.5, 3)\nassert     not any_int(2, 2.5, 3)\nassert     any_int(1, 2.5, 3.5)\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     any_int(5, 5, 5) == True\nassert     any_int(5, 7, 5) == True\nassert     any_int(5, 5, 4) == False\nassert     any_int(5, 5, 6) == False\nassert     any_int(5, 5, 7) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     any_int(0, 0, 0) == True\nassert     any_int(0, 1, 1) == True\nassert     any_int(1, 0, 1) == True\nassert     any_int(1, 1, 1) == False\nassert     any_int(0, 1, 0) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\nprint encode('civic') == 'IvCviiC'\nprint encode('CIVIC') == 'IvCviiC'\nprint encode('there') == 'TEhR'\nprint encode('Their') == 'TErhR'\nprint encode('THERE') == 'TEhR'\nprint encode('terry') == 'TErry'\nprint encode('tErry') == 'TErry'\nprint encode('TERRY') == 'TErry'\nprint encode('Test') == 'TeST'\nprint encode('TEST') == 'TeST'\nprint encode('TEst') == 'TeST'\nprint encode('tEST') == 'TeST'\nprint encode('TEST!') == 'TeST!'\nprint encode('TEST!') == 'TeST!'\nprint encode('TEst!') == 'TeST!'\nprint encode('TEST123!') == 'TeST123!'\nprint encode('TEST123!') == 'TeST123!'\nprint encode('teSt123!') == 'TeST123!'\nprint encode('TEST123!') == 'TeST123!'\n\n\n\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encode(\"LOL\") == \"lol\"\nassert     encode(\"lOL\") == \"lol\"\nassert     encode(\"loo\") == \"olu\"\nassert     encode(\"i\") == \"i\"\nassert     encode(\"a\") == \"a\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode(\"defenestrate\")     == \"deXfXnestrate\"\nassert     encode(\"Consistency\")     == \"XsCstnXs\"\nassert     encode(\"manifested\")     == \"mXfXntsXest\"\nassert     encode(\"python\")         == \"pyXntX\"\nassert     encode(\"dynamic\")         == \"dXntX\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode(\"Hello World!\") == \"2w3l1d!\", \"Encoding failed\"\nassert     encode(\"Another test\") == \"2n1t3\", \"Encoding failed\"\nassert     encode(\"SOS\") == \"2os3\", \"Encoding failed\"\nassert     encode(\"a\") == \"2\", \"Encoding failed\"\nassert     encode(\"Hello\") == \"2l1o\", \"Encoding failed\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encode('apples and bananas') == 'a.ll'\nassert     encode('strawberries and cookies') =='s.s.rs'\nassert     encode('lOve Me Do') == 'l.v.e'\nassert     encode('dAmore') == 'd.a.m'"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode('matt') =='matt'\nassert     encode('mat') == 'MAT'\nassert     encode('hello') == 'Hlo'\nassert     encode('matt') =='matt'\nassert     encode('mat') == 'MAT'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode(\"uNUG\") == \"UPNUG\"\nassert     encode(\"CODE\") == \"COOD\"\nassert     encode(\"not my cat\") == \"nMAY cOt\"\nassert     encode(\"nInCE cAsE\") == \"nINC eCSE\"\nassert     encode(\"coDE\") == \"cOdE\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nencode(\"I love Python\") == \"L v e P y t h o n\"\nencode(\"I love Python\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P y t h o n\"\nencode(\"I LOVE PYTHON\") == \"L v e P "
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max(skjkasdkd([7, 2, 3, 4, 5, 6, 10, 11, 100])) == 100\nassert     max(skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) == 12\nassert     max(skjkasdkd([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) == 12\nassert     max(skjkasdkd([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) == 14\nassert     max(skjkasdkd([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) == 15\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     skjkasdkd([2, 3, 7, 9, 11, 13]) == 13\nassert     skjkasdkd([3, 5, 7, 11, 13, 17, 19]) == 19\nassert     skjkasdkd([2, 3, 5, 7, 9, 11, 13]) == 19\nassert     skjkasdkd([2, 3, 7, 9, 11, 13]) == 19\nassert     skjkasdkd([2, 3, 5, 7, 9, 11]) == 19\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     int(skjkasdkd([12, 99, 33, 9])) == 8\nassert     int(skjkasdkd([12, 12, 33, 33])) == 1\nassert     int(skjkasdkd([98, 99, 33, 9])) == 8\nassert     int(skjkasdkd([98, 98, 33, 33])) == 1\nassert     int(skjkasdkd([98, 98, 99, 99])) == 1\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     skjkasdkd([5, 7, 9, 2, 11, 100, 5]) == 17\nassert     skjkasdkd([1, 2, 3, 4, 5, 6]) == 0\nassert     skjkasdkd([8, 19, 2, 5, 7, 9, 19, 13]) == 17\nassert     skjkasdkd([19, 13, 4, 5, 17, 17, 7, 19]) == 17\nassert     skjkasdkd([2, 19, 17, 3, 19, 19, 19]) == 19\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     int(skjkasdkd(lst)) == 3\nassert     int(skjkasdkd(lst[::-1])) == 3\nassert     int(skjkasdkd(lst[1:])) == 3\nassert     int(skjkasdkd(lst[1:100])) == 3\nassert     int(skjkasdkd(lst[100:1000])) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     19 == skjkasdkd([19, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert    36 == skjkasdkd([19, 2, 3, 4, 5, 6, 7, 8, 9, 19])\nassert     19 == skjkasdkd([19, 19, 19, 19, 19, 19, 19, 19, 19, 19])\nassert     20 == skjkasdkd([2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\nassert     9 == skjkasdkd([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     27 == skjkasdkd([7, 19, 37, 41, 73, 7, 19, 37, 41, 73])\nassert     0 == skjkasdkd([2, 4, 7, 8, 10, 11, 13, 17])\nassert     9 == skjkasdkd([27, 37, 41, 73, 7, 19, 37, 41, 73])\nassert     8 == skjkasdkd([27, 37, 41, 73, 7, 19, 37, 41, 73, 0])\nassert     8 == skjkasdkd([27, 37, 41, 73, 7, 19, 37, 41, 73, 1])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     skjkasdkd([19, 7, 13, 19]) == 17\nassert     skjkasdkd([2, 6, 7, 8]) == 13\nassert     skjkasdkd([1, 4, 6, 7, 8, 9, 10]) == 19\nassert     skjkasdkd([100, 101, 102, 103, 104]) == 17\nassert     skjkasdkd([100, 101, 102, 103, 104, 105, 106, 107, 108]) == 19\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     skjkasdkd([1,2,3,4,5,6,7,8,9,10]) == 19\nassert     skjkasdkd([2,3,4,5,6,7,8,9,10]) == 29\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,10]) == 29\nassert     skjkasdkd([2,3,5,7,11,13,17,19,23,29]) == 89\nassert     skjkasdkd([1,2,3,4,5,6,8,9,10]) == 25\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         check_dict_case({}) == False, \"test1\"\nassert         check_dict_case({'a':'A'}) == False, \"test2\"\nassert         check_dict_case({'A':'a'}) == False, \"test3\"\nassert         check_dict_case({'a':'a', 'A':'A'}) == False, \"test4\"\nassert         check_dict_case({'a':'a', 'A':'A', 'B':'b'}) == False, \"test5\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) is False, \"1st: False\"\nassert     check_dict_case({1:2, \"a\":1}) is False, \"2nd: False\"\nassert     check_dict_case({'a':1, 1:'b'}) is False, \"3rd: False\"\nassert     check_dict_case({'a':1, 1:'b'}) is True, \"4th: True\"\nassert     check_dict_case({'A':1, 'B':2}) is False, \"5th: False\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_dict_case({}) is False\nassert     check_dict_case({'A':'B'}) is False\nassert     check_dict_case({'a':'b'}) is True\nassert     check_dict_case({'a':'B','c':'D'}) is False\nassert     check_dict_case({'A':'B','C':'D'}) is True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == True\nassert     check_dict_case({\"a\":1, \"b\":2}) == False\nassert     check_dict_case({\"a\":1, \"b\":2, \"C\":3}) == True\nassert     check_dict_case({\"a\":1, \"b\":2, \"c\":3}) == False\nassert     check_dict_case({\"a\":1, \"b\":2, \"c\":3, \"D\":4}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == True\nassert     check_dict_case({'A': 1, 'B': 2, 'C': 3}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == True\nassert     check_dict_case({\"one\": \"one\", \"two\": \"two\", \"three\": \"three\"}) == False\nassert     check_dict_case({\"ONE\": \"ONE\", \"TWO\": \"TWO\", \"THREE\": \"THREE\"}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         check_dict_case({}) == False\nassert         check_dict_case({'a': 1, 'b': 2}) == False\nassert         check_dict_case({'a': 1, 'b': 2, 'C': 3}) == False\nassert         check_dict_case({'a': 1, 'b': 2, 'c': 3}) == True\nassert         check_dict_case({'a': 1, 'b': 2, 'c': 3, 'D': 4}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_dict_case({})\nassert     check_dict_case({'ABC':'a', 'aBC':'b', 'ABCD':'c', 'abCD':'d', 'abCd':'d'})\nassert     check_dict_case({'ABC':'a', 'aBC':'b', 'ABCD':'c', 'abCD':'d', 'abCd':'d'})\nassert     check_dict_case({'abc':'a', 'aBC':'b', 'ABCD':'c', 'abCD':'d', 'abCd':'d'})\nassert     check_dict_case({'abc':'a', 'aBC':'b', 'abcD':'c', 'abCD':'d', 'abCd':'d'})\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == True\nassert     check_dict_case({'A': 1, 'B': 2, 'C': 3}) == False\nassert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == False\nassert     check_dict_case(('a', 1, 'b', 2, 'c', 3)) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1}) == True\nassert     check_dict_case({'A': 1}) == False\nassert     check_dict_case({'a': 1, 'A': 1}) == True\nassert     check_dict_case({'a': 1, 'b': 2}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a':1, 'b':'a'}) == True\nassert     check_dict_case({'A':1, 'B':'a'}) == False\nassert     check_dict_case({'a':'b', 'b':'a'}) == False\nassert     check_dict_case({'a':'b', 'b':'a'}) == True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_up_to(3) == [2, 3]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ndef count_down_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_up_to(4) == [2, 3, 5]\nassert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(7) == [2, 3, 5, 7]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(1) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(8) == [2, 3, 5, 7]\nassert     count_up_to(10) == [2, 3, 5, 7, 11]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_up_to(2) == [2]\nassert     count_up_to(3) == [2, 3]\nassert     count_up_to(6) == [2, 3, 5]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(15) == [2, 3, 5, 7, 11, 13]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ndef count_up_to_and_save(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_up_to(4) == [2,3]\nassert     count_up_to(6) == [2,3,5]\nassert     count_up_to(9) == [2,3,5,7]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_up_to(5) == [2, 3, 5]\nassert count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     count_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\nassert     count_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\nassert     count_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply(123456789, 123456789) == 123456789123456789\nassert     multiply(1234, 5678) == 123456\nassert     multiply(1, 98765) == 987654\nassert     multiply(987, 6543) == 654301\nassert     multiply(23, 6789) == 678923\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     multiply(12, 23) == 23, \"Multiply test failed.\"\nassert     multiply(12, -23) == -23, \"Multiply test failed.\"\nassert     multiply(12, -12) == -12, \"Multiply test failed.\"\nassert     multiply(-12, -23) == 12, \"Multiply test failed.\"\n\nprint \"Passed. 4 unit test tests passed.\""
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply(5, 9) == 45\nassert     multiply(0, 0) == 0\nassert     multiply(1, 0) == 0\nassert     multiply(0, 1) == 0\nassert     multiply(9, 1) == 9\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiply(9, 9) == 81\nassert     multiply(4, 6) == 24\nassert     multiply(5, 9) == 25\nassert     multiply(8, 5) == 40\n\n\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply(0, 0) == 0\nassert     multiply(1, 0) == 0\nassert     multiply(2, 0) == 0\nassert     multiply(2, 1) == 0\nassert     multiply(2, 2) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply(0, 0) == 0\nassert     multiply(2, 5) == 10\nassert     multiply(2, 10) == 20\nassert     multiply(5, 10) == 50\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply(12, 17) == 6\nassert     multiply(12345, 12345) == 12345\n\n\ndef factorial(n):\n    \"\"\"Complete the function that takes a positive integer \n    and returns the factorial of it.\n    Assume the input is always valid.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply(10, 101) == 10\nassert     multiply(11, 99) == 10\nassert     multiply(12, 101) == 11\nassert     multiply(12, 98) == 10\nassert     multiply(12, 91) == 9\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply(99999, 99998) == 9999999\nassert     multiply(10101, 10102) == 1010210\nassert     multiply(24, 23) == 40\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef test_multiply():\n    assert multiply(1, 1) == 1\n    assert multiply(1, 3) == 3\n    assert multiply(2, 9) == 18\n    "
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_upper(\"d1e2a3\") == 2\nassert     count_upper(\"d1e2a3b4\") == 1\nassert     count_upper(\"D1E2a3b4\") == 1\nassert     count_upper(\"111\") == 0\nassert     count_upper(\"\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_upper('abc') == 0\nassert     count_upper('AbC') == 1\nassert     count_upper('abC') == 1\nassert     count_upper('b') == 0\nassert     count_upper('B') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_upper(\"Hello World\") == 3\nassert     count_upper(\"hi\") == 0\nassert     count_upper(\"eHhl\") == 1\nassert     count_upper(\"eHhi\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_upper('aaaaa') == 0\nassert     count_upper('aaAAaa') == 2\nassert     count_upper('Aaaa') == 0\nassert     count_upper('AAaaA') == 4\nassert     count_upper('aaaa') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_upper('Hello World') == 0\nassert     count_upper('HeLLo WorlD') == 2\nassert     count_upper('12345') == 0\n\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_upper('Hello') == 1, 'Wrong count_upper'\nassert     count_upper('hELLo') == 0, 'Wrong count_upper'\nassert     count_upper('heLLo') == 2, 'Wrong count_upper'\nassert     count_upper('hEllO') == 1, 'Wrong count_upper'\nassert     count_upper('HeLLo') == 2, 'Wrong count_upper'\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_upper(\"All lower\") == 0\nassert     count_upper(\"tIs a tEsC\") == 2\nassert     count_upper(\"It's a TeSt\") == 4\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_upper('hello world') == 0\nassert     count_upper('hello WORLD') == 0\nassert     count_upper('hello') == 2\nassert     count_upper('HELLO') == 1\nassert     count_upper('H3llo, world') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_upper(\"hello world\") == 2\nassert     count_upper(\"rhythm myths\") == 4\nassert     count_upper(\"The Edge of Seventeen\") == 17\nassert     count_upper(\"EDGE OF SEventEEN\") == 17\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (count_upper('ACAC') == 4)\nassert     (count_upper('AAAA') == 0)\nassert     (count_upper('aeiou') == 5)\nassert     (count_upper('bcdefghijklmnopqrstuvwxyz') == 26)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14\") == 14\nassert     closest_integer(\"-14\") == -14\nassert     closest_integer(\"0\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert _________ == closest_integer(\"14.5\")\nassert _________ == closest_integer(\"-14.5\")\nassert _________ == closest_integer(\"42.5\")\nassert _________ == closest_integer(\"-42.5\")\nassert _________ == closest_integer(\"100\")\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14\") == 14\nassert     closest_integer(\"-14\") == -14\nassert     closest_integer(\"14.1\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     closest_integer(\"14.5\")         == 15\nassert     closest_integer(\"-14.5\")     == -15\nassert     closest_integer(\"19.5\")     == 20\nassert     closest_integer(\"-19.5\")     == -20\nassert     closest_integer(\"0\")         == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"17\") == 17\nassert     closest_integer(\"-17\") == -17\nassert     closest_integer(\"-0\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"13.5\") == 14\nassert     closest_integer(\"-13.5\") == -14\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"1.5\") == 1\nassert     closest_integer(\"-1.5\") == -2\nassert     closest_integer(\"1.49\") == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (closest_integer(\"14.5\") == 15)\nassert     (closest_integer(\"-14.5\") == -15)\nassert     (closest_integer(\"-0.5\") == -1)\nassert     (closest_integer(\"1.5\") == 2)\nassert     (closest_integer(\"-1.5\") == -2)\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"12.5\") == 12\nassert     closest_integer(\"-12.5\") == -13\nassert     closest_integer(\"12.5\") == 12\nassert     closest_integer(\"0\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_integer('3') == 3\nassert     closest_integer('6.5') == 6\nassert     closest_integer('14.5') == 15\nassert     closest_integer('-14.5') == -15\nassert     closest_integer('-4') == -4\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_a_pile(1)    == [1]\nassert     make_a_pile(2)    == [1, 1]\nassert     make_a_pile(3)    == [1, 2, 1]\nassert     make_a_pile(4)    == [1, 3, 2, 1]\nassert     make_a_pile(5)    == [1, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     make_a_pile(0)    == []\nassert     make_a_pile(1)    == [1]\nassert     make_a_pile(2)    == [1,2]\nassert     make_a_pile(3)    == [1,2,3]\nassert     make_a_pile(4)    == [1,2,3,6]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     make_a_pile(3) == [1, 2, 3]\nassert     make_a_pile(5) == [1, 2, 3, 4, 5]\nassert     make_a_pile(8) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     make_a_pile(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_a_pile(0) == [0]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 2]\nassert     make_a_pile(3) == [2, 3]\nassert     make_a_pile(4) == [2, 3, 4]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(4) == [4, 3, 2, 1]\nassert     make_a_pile(5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 2, 2]\nassert     make_a_pile(5) == [1, 2, 3]\nassert     make_a_pile(6) == [1, 2, 3, 3, 3]\nassert     make_a_pile(7) == [1, 2, 3, 4, 5, 5, 5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,2]\nassert     make_a_pile(3) == [1,2,3]\nassert     make_a_pile(4) == [1,2,3,6]\nassert     make_a_pile(5) == [1,2,3,6,11]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 2]"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(4) == [1, 3, 2, 1]\nassert     make_a_pile(5) == [1, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_a_pile(3) == [3, 2]\nassert     make_a_pile(6) == [6, 3, 2]\nassert     make_a_pile(8) == [8, 4, 2, 1]\nassert     make_a_pile(10) == [10, 5, 3, 2, 1]\nassert     make_a_pile(15) == [15, 8, 5, 2, 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_string('hello, world, hi') == ['hello', 'world', 'hi']\nassert     words_string('hello, hi, word') == ['hello', 'hi', 'word']\nassert     words_string('hello') == ['hello']\nassert     words_string('') == []\nassert     words_string('hello, word') == ['hello', 'word']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_string(\"Hi, my name is Bob\") == ['Hi','my', 'name', 'is', 'Bob']\nassert     words_string(\"I'm a big fan of cats and dogs\") == ['I', 'a', 'big', 'fan', 'of', 'cats', 'and', 'dogs']\nassert     words_string(\"We like pizza, pizza pie, pizza pie pizza pie\") == ['We', 'like', 'pizza', 'pizza', 'pie', 'pie', 'pie', 'pie']\nassert     words_string(\"1, 2, 3, 4, 5\") == ['1', '2', '3', '4', '5']\nassert     words_string(\"Hi, my name is Bob\") == ['Hi','my', 'name', 'is', 'Bob']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_string(\"this,is,a,test\") == [\"this\", \"is\", \"a\", \"test\"]\nassert     words_string(\"is,this,a,test\") == [\"is\", \"this\", \"a\", \"test\"]\nassert     words_string(\"this,is,a, test\") == [\"this\", \"is\", \"a\", \"test\"]\nassert     words_string(\"is,this,a,test\") == [\"is\", \"this\", \"a\", \"test\"]\nassert     words_string(\"is,this,a,test\") == [\"is\", \"this\", \"a\", \"test\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_string(\"a,b,c,d\") ==     [\"a\", \"b\", \"c\", \"d\"]\nassert     words_string(\"this,that,those\") ==     [\"this\", \"that\", \"those\"]\nassert     words_string(\"Hello world, nice to meet you\") ==     [\"Hello\", \"world\", \"nice\", \"to\", \"meet\", \"you\"]\nassert     words_string(\"hello\") ==     [\"hello\"]\nassert     words_string(\"\") ==     []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_string(\"hello, there, my, name, is, Bob\") == ['hello', 'there','my', 'name', 'is', 'Bob']\nassert     words_string(\"\") == []\nassert     words_string(\"Hello\") == [\"Hello\"]\nassert     words_string(\"Hello, my name is Bob\") == [\"Hello\", \"my\", \"name\", \"is\", \"Bob\"]\n\ndef dict_words(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to return a dictionary with the first word as the key and the number of times\n    the first word occurs as the value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_string('foo,bar,baz,baz')    ==     ['foo', 'bar', 'baz', 'baz']\nassert     words_string('baz,foo,bar')    ==    ['baz', 'foo', 'bar']\nassert     words_string('a,b,a')    ==    ['a', 'b', 'a']\nassert     words_string('a,a,a,a,a,a,a,a')    ==    ['a']\nassert     words_string('a,a,a,a,a,a,a,a,a,a,a,a')    ==    ['a']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_string(\"\") == []\nassert     words_string(\"   \") == []\nassert     words_string(\"a, b, c\") == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a, b, c, d\") == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_string('hello,world') == ['hello', 'world'], \\\n        'incorrect'\nassert     words_string('hello, world') == ['hello', 'world'], \\\n        'incorrect'\nassert     words_string('hello, world') == ['hello', 'world'], \\\n        'incorrect'\nassert     words_string('hello,    world') == ['hello', 'world'], \\\n        'incorrect'\nassert     words_string('hello, world') == ['hello', 'world'], \\\n        'incorrect'\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_string(\"John,Paul,Ringo\") == ['John', 'Paul', 'Ringo']\nassert     words_string(\"John,Paul,Ringo,George\") == ['John', 'Paul', 'Ringo', 'George']\nassert     words_string(\"Bart,Homer,Lisa\") == ['Bart', 'Homer', 'Lisa']\nassert     words_string(\"John,Paul,Ringo,George\") == ['John', 'Paul', 'Ringo', 'George']\nassert     words_string(\"\") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_string(\"this, that, and\") == [\"this\", \"that\", \"and\"]\nassert     words_string(\"this, and that, but\") == [\"this\", \"and\", \"that\", \"but\"]\nassert     words_string(\"and, this, that\") == [\"and\", \"this\", \"that\"]\nassert     words_string(\"and, this, that, but\") == [\"and\", \"this\", \"that\", \"but\"]\nassert     words_string(\"\") == []\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     choose_num(1, 2) == -1\nassert     choose_num(1, 2) == -1\nassert     choose_num(3, 4) == 2\nassert     choose_num(1, 4) == 2\nassert     choose_num(2, 4) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     choose_num(10, 20) == -1\nassert choose_num(50, 60) == -1\nassert choose_num(10, 12) == -1\nassert choose_num(10, 12) == -1\nassert choose_num(3, 8) == 4\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     choose_num(1, 10) == 4\nassert     choose_num(3, 10) == -1\nassert     choose_num(0, 10) == -1\nassert     choose_num(9, 10) == -1\nassert     choose_num(-1, 10) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     choose_num(1, 2) == 2\nassert     choose_num(1, 4) == 2\nassert     choose_num(1, 8) == -1\nassert     choose_num(5, 7) == -1\nassert     choose_num(1, 3) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     choose_num(5, 10) == 8\nassert choose_num(1, 10) == -1\nassert choose_num(2, 10) == -1\nassert choose_num(0, 10) == -1\nassert choose_num(2, 0) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (choose_num(1, 10) == -1),            \"incorrect choose_num\"\nassert     (choose_num(2, 7) == -1),            \"incorrect choose_num\"\nassert     (choose_num(4, 12) == 8),            \"incorrect choose_num\"\nassert     (choose_num(6, 12) == 8),            \"incorrect choose_num\"\nassert     (choose_num(7, 12) == -1),            \"incorrect choose_num\"\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     choose_num(10, 10) == 10\nassert choose_num(8, 10) == -1\nassert choose_num(2, 10) == -1\nassert choose_num(9, 11) == 10\nassert choose_num(3, 3) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     choose_num(5, 6) == -1\nassert choose_num(4, 6) == -1\nassert choose_num(4, 5) == -1\nassert choose_num(3, 5) == -1\nassert choose_num(3, 4) == 4\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (choose_num(0, 0) == -1)\nassert     (choose_num(0, 1) == -1)\nassert     (choose_num(1, 0) == -1)\nassert     (choose_num(1, 1) == 2)\nassert     (choose_num(2, 1) == -1)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     choose_num(5, 100) == 50\nassert choose_num(100, 105) == -1\nassert choose_num(100, 100) == 100\nassert choose_num(3, 7) == -1\nassert choose_num(3, 7) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rounded_avg(1, 2) == 1.5\nassert     rounded_avg(1, 1) == 1\nassert     rounded_avg(1, 2.5) == 2\nassert     rounded_avg(1.5, 2) == 2\nassert     rounded_avg(1.5, 1) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rounded_avg(5, 7) == 4\nassert     rounded_avg(0, 0) == 0\nassert     rounded_avg(0, 3) == -1\nassert     rounded_avg(4, 6) == 5\nassert     rounded_avg(3, 4) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \nrounded_avg(7, 11) == 5\nrounded_avg(2, 8) == 2\nrounded_avg(2, 4) == -1\nrounded_avg(0, 1) == 0\nrounded_avg(3, 4) == 2\nrounded_avg(0, 0) == -1\nrounded_avg(0, 1) == -1\nrounded_avg(1, 2) == 0\nrounded_avg(1, 1) == -1\nrounded_avg(1, 2) == -1\nrounded_avg(1, 1) == -1\nrounded_avg(2, 5) == 3\nrounded_avg(2, 4) == 2\nrounded_avg(5, 6) == 4\nrounded_avg(6, 7) == 5\nrounded_avg(7, 8) == 6\nrounded_avg(8, 9) == 7\nrounded_avg(9, 10) == 8\nrounded_avg(10, 11) == 9\nrounded_avg(11, 12) == 10\nrounded_avg(12, 13) == 11\nrounded_avg(13, 14) == 12\nrounded_avg(14, 15) == 13\nrounded_avg(15, 16) == 14\nrounded_avg(16, 17) == 15\nrounded_avg(17, 18) == 16\nrounded_avg(18, 19) == 17\nrounded_avg(19, 20) == 18\nrounded_avg(20, 21) == 19\nrounded_avg(21, 22) == 20\nrounded_avg(22, 23) == 21\nrounded_avg(23, 24) == 22\nrounded_avg(24, 25) == 23\nrounded_avg(25, 26) == 24\nrounded_avg(26, 27) == 25\nrounded_avg(27, 28) == 26\nrounded_avg(28, 29) == 27\nrounded_avg(29, 30) == 28\nrounded_avg(30, 31) == 29\nrounded_avg(31, 32) == 30\nrounded_avg(32, 33) == 31\nrounded_avg(33, 34) == 32\nrounded_avg(34, 35) == 33\nrounded_avg(35, 36) == 34\nrounded_avg(36, 37) == 35\nrounded_avg(37, 38) == 36\nrounded_avg(38, 39) == 37\nrounded_avg(39, 40) == 38\nrounded_avg(40, 41) == 39\nrounded_avg(41, 42) == 40\nrounded_avg(42, 43) == 41\nrounded_avg(43, 44) == 42\nrounded_avg(44, 45) == 43\nrounded_avg(45, 46) == 44\nrounded_avg(46, 47) == 45\nrounded_avg(47, 48) == 46\nrounded_avg(48, 49) == 47\nrounded_avg(49, 50) == 48\nrounded_avg(50, 51) == 49\nrounded_avg(51, 52) == 50\nrounded_avg(52, 53) == 51\nrounded_avg(53, 54) == 52\nrounded_avg(54, 55) == 53\nrounded_avg(55, 56) == 54\nrounded_avg(56, 57) == 55\nrounded_avg(57, 58) == 56\nrounded_avg(58, 59) == 57\nrounded_avg(59, 60) == 58\nrounded_avg(60, 61) == 59\nrounded_avg(61, 62) == 60\nrounded_avg(62, 63) == 61\nrounded_avg(63, 64) == 62\nrounded_avg(64, 65) == 63\nrounded_avg(65, 66) == 64\nrounded_avg(66, 67) == 65\nrounded_avg(67, 68) == 66\nrounded_avg(68, 69) == 67\nrounded_avg(69, 70) == 68\nrounded_avg(70, 71) == 69\nrounded_avg(71, 72) == 70\nrounded_avg(72, 73) == 71\nrounded_avg(73, 74) == 72\nrounded_avg(74, 75) == 73\nrounded_avg(75, 76) == 74\nrounded_avg(76, 77"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rounded_avg(5, 7) == 3.5\nassert     rounded_avg(5, 6) == 3\nassert     rounded_avg(5, 10) == 6\nassert     rounded_avg(5, 13) == 8\nassert     rounded_avg(5, 17) == 11\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rounded_avg(0, 0) == 0\nassert     rounded_avg(2, 2) == 0\nassert     rounded_avg(1, 2) == -1\nassert     rounded_avg(0, 2) == -1\nassert     rounded_avg(5, 5) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rounded_avg(1, 1) == 1\nassert     rounded_avg(1, 2) == 1.5\nassert     rounded_avg(1, 3) == 2\nassert     rounded_avg(2, 3) == 2\nassert     rounded_avg(3, 3) == 2.5\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     round(rounded_avg(1, 5)) == 2\nassert     round(rounded_avg(1, 0)) == -1\nassert     round(rounded_avg(1, 2)) == -1\nassert     round(rounded_avg(5, 10)) == 6\nassert     round(rounded_avg(5, 6)) == 5\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rounded_avg(4, 7) == 6\nassert     rounded_avg(4, 6) == 5\nassert     rounded_avg(5, 6) == -1\nassert     rounded_avg(6, 7) == -1\nassert     rounded_avg(1, 2) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rounded_avg(3, 6) == 3\nassert     rounded_avg(0, 10) == -1\nassert     rounded_avg(3, 3) == 3\nassert     rounded_avg(5, 9) == 5\nassert     rounded_avg(9, 10) == 9\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [2, 3, 5, 7, 11, 13, 17] == unique_digits([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nassert     [3, 4, 6, 7, 10, 11, 12] == unique_digits([2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13])\nassert     [2, 4, 6, 8, 10, 12] == unique_digits([2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nassert     [3, 4, 6, 8, 10, 12] == unique_digits([2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nassert     [2, 4, 6, 8, 10, 12, 14] == unique_digits([2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([2, 3, 3, 4, 6]) == [2, 3, 4, 6]\nassert     unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert     unique_digits([2, 3, 3, 4, 5, 6, 6, 7]) == [2, 3, 4, 5, 6, 7]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_digits([1, 2, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\nassert     unique_digits([1, 4, 7, 2, 3, 6, 7, 6]) == [1, 2, 3, 6, 7]\nassert     unique_digits([1, 4, 7, 2, 3, 6, 7, 9]) == [1, 2, 3, 6, 7, 9]\nassert     unique_digits([1, 4, 7, 2, 3, 6, 7, 10]) == [1, 2, 3, 6, 7, 10]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique_digits([1,2,3,4,5,6])    == [1, 2, 3, 4, 6]\nassert     unique_digits([10,11,12,13,14,15,16]) == [10, 11, 12, 13, 16]\nassert     unique_digits([1,2,2,3,4,4,5,5,6,7])    == [1, 2, 3, 4, 6, 7]\nassert     unique_digits([0,0,0,0,0,0,0])    == [0]\nassert     unique_digits([0,1,2,3,4,5,6,7,8,9])    == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_digits([1,3,5,7,9]) == [1, 3, 5, 7, 9]\nassert     unique_digits([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([1,4,5,2,3]) == [1, 2, 3, 4, 5]\nassert     unique_digits([1,2,3,4,5,6]) == [1, 2, 3, 4, 5]\nassert     unique_digits([1,2,3,4,5,7,8,9]) == [1, 2, 3, 4, 5, 7, 8, 9]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique_digits([]) == []\nassert     unique_digits([1,2,3,4,5,6,7,8]) == []\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,11]) == [1,2,3,4,5,6,7,8,9,11]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([5,6,6,7,8,9,10]) == [5,6,7,8,9,10]\nassert     unique_digits([2,2,2,2,2,2,2,2,2,2]) == [2]\nassert     unique_digits([1,1,1,1,1,1,1,1,1,1]) == [1]\nassert     unique_digits([0,0,0,0,0,0,0,0,0,0]) == [0]"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_digits(xrange(10,20)) == [10,11,12,13,14]\nassert     unique_digits(xrange(20,30)) == [19]\nassert     unique_digits(xrange(30,40)) == [29,39]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_digits([1,1,1,2,2,2,3,3,3,4]) == [1,2,3,4]\nassert     unique_digits([]) == []\nassert     unique_digits([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\n\ndef rotate(l, n):\n    \"\"\"Given a list l and a number n, rotate the list l by n positions\n    (towards the back of the list).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n\ndef digits(n):\n    \"\"\"\n    Given a nonnegative integer, return the number of digits that make up that integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     by_length([5,4,3,2,1]) == ['Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length([1,2,3,4,5]) == ['One', 'Two', 'Three', 'Four', 'Five']\nassert     by_length([9,8,7,6,5,4,3,2,1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length([1,10,3,4,6,7,8,9]) == ['One', 'Ten', 'Three', 'Four', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1,2,3,4,5,6,7,8,9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert ids.by_length([1, 6, 7, 1, 3, 9, 7, 9, 2, 9, 7]) == \"OneTwoSevenOneThreeNineSevenSevenNineTwoNine\""
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     by_length([1, 6, 3, 5, 7, 8, 2, 4, 9]) == [\"Eight\", \"Four\", \"Nine\", \"Seven\", \"Six\", \"Three\", \"Two\", \"One\", \"Eight\"]\nassert     by_length([5, 2, 3, 1, 4, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Eight\", \"Four\", \"Six\", \"Three\", \"Two\", \"One\", \"Nine\"]\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [\"One\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"]\nassert     by_length([5, 7, 3, 1, 4, 8, 9, 2, 6]) == [\"Six\", \"Four\", \"One\", \"One\", \"Seven\", \"Eight\", \"Nine\", \"Three\", \"Two\"]\nassert     by_length([5, 7, 3, 1, 4, 8, 9, 2]) == [\"One\", \"One\", \"Seven\", \"Eight\", \"Four\", \"Three\", \"Two\", \"Two\", \"Three\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Five\", \"Eight\", \"Seven\", \"Three\", \"Two\", \"Four\", \"One\", \"Six\", \"Nine\"]\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Zero\"]\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Zero\"]\nassert     by_length([10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Zero\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     by_length([0, 1, 2, 5, 7, 9, 22, 21, 32, 44]) == 'One Two Five Seven Nine Seven Eight Twenty Two Twenty Three Four Twenty Six Two One Two Three One Two One Two'\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 'Eight Nine One Two Three Four Five Six Seven Eight Nine One Two Three Four One Two Three'\nassert     by_length([0, 0, 0, 1, 1, 1, 4, 4, 4, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, "
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])    ==    [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])    ==    [\"Ten\", \"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert     by_length([5, 10, 15, 20, 25])    ==    [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert     by_length([2, 3, 4, 5, 9])    ==    [\"Two\", \"Three\", \"Four\", \"Five\", \"Nine\"]\nassert     by_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])    ==    [\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     by_length([1, 5, 2, 4, 3, 8, 7, 6, 9]) == \\\n        \"One Five Two Four Three Eight Seven Six Nine\"\nassert     by_length([1, 5, 2, 4, 3, 8, 7, 6, 0]) == \\\n        \"One Five Two Four Three Eight Seven Six Nine Zero\"\nassert     by_length([1, 5, 2, 4, 3, 8, 7, 6, 9]) == \\\n        \"One Five Two Four Three Eight Seven Six Nine\"\nassert     by_length([1, 5, 2, 4, 3, 8, 7, 6, 0]) == \\\n        \"One Five Two Four Three Eight Seven Six Nine Zero\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \\\n        \"One Two Three Four Five Six Seven Eight Nine\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"OneTwoThreeFourFiveSixSevenEightNine\"\nassert     by_length([1, 2, 9, 4, 5, 6, 7, 8, 3]) == \"OneTwoThreeFourFiveSixSevenEightNineZero\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == \"OneTwoThreeFourFiveSixSevenEightNineZeroZero\"\nassert     by_length([1, 0, 3, 4, 5, 6, 7, 8, 9, 2]) == \"OneZeroThreeFourFiveSixSevenEightNineTwo\"\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"ZeroOneTwoThreeFourFiveSixSevenEightNine\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         by_length([1, 5, 2, 4, 3, 9, 6, 8, 7]) == \"EighteenOneFiveTwoFourSevenNineSixEight\"\nassert         by_length([2, 4, 6, 1, 5, 7, 3, 9, 8]) == \"EighteenOneFiveSevenTwoFourSixNine\"\nassert         by_length([4, 8, 3, 7, 2, 9, 1, 6, 5]) == \"EighteenOneFiveSevenTwoFourSixNineEight\"\nassert         by_length([5, 3, 8, 1, 9, 6, 7, 4, 2]) == \"EighteenOneFiveSevenTwoFourSixNineEightFourEight\"\nassert         by_length([9, 2, 7, 4, 5, 3, 1, 6, 8]) == \"EighteenOneFiveSevenTwoFourSixNineEightNineTwoSeven\"\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     f(10) == [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert     f(2) == [1, 1]\nassert     f(1) == [1]\nassert     f(0) == [1]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(5) == [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(5) == [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     f(5) == [1, 1, 2, 6, 24, 120]\nassert     f(10) == [1, 1, 2, 6, 24, 120, 864, 27648, 86400, 86400*27648, 86400**2]\nassert     f(15) == [1, 1, 2, 6, 24, 120, 864, 27648, 86400, 86400*27648, 86400**2, 87904, 87904*27648, 87904**2]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 1, 2, 6, 24]\nassert     f(5) == [1, 1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [f(i) for i in range(1, 11)] == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\nassert [f(i) for i in range(1, 11)] == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 2, 6, 24, 120] == f(5)\nassert     [1, 2, 3, 6, 24] == f(4)\nassert     [1, 2, 3, 4, 6] == f(6)\nassert     [1, 2, 3, 4, 5] == f(7)\nassert     [1, 2, 4, 6, 24] == f(8)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10) == (1, 1)\nassert     even_odd_palindrome(11) == (2, 2)\nassert     even_odd_palindrome(16) == (4, 2)\nassert     even_odd_palindrome(16) == (4, 2)\nassert     even_odd_palindrome(101) == (2, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(15) == (5, 5)\nassert     even_odd_palindrome(1) == (1, 1)\nassert     even_odd_palindrome(11) == (2, 4)\nassert     even_odd_palindrome(26) == (7, 7)\nassert     even_odd_palindrome(27) == (9, 9)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(100) == (3, 19)\nassert     even_odd_palindrome(10000) == (3, 9900)\nassert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(10) == (2, 0)\nassert     even_odd_palindrome(0) == (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(2) == (0, 2)\nassert     even_odd_palindrome(3) == (0, 2)\nassert     even_odd_palindrome(4) == (1, 2)\nassert     even_odd_palindrome(10) == (5, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1000) == (16, 36)\nassert     even_odd_palindrome(0) == (0, 0)\nassert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(7) == (4, 2)\nassert     even_odd_palindrome(100) == (13, 22)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(10) == (4, 1)\nassert     even_odd_palindrome(11) == (4, 1)\nassert     even_odd_palindrome(12) == (3, 0)\nassert     even_odd_palindrome(13) == (3, 1)\nassert     even_odd_palindrome(14) == (2, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(8) == (6, 2)\nassert     even_odd_palindrome(100) == (42, 26)\nassert     even_odd_palindrome(1000) == (224, 1104)\nassert     even_odd_palindrome(10000) == (600, 4040)\n\ndef count_even_odd_palindromes(n):\n    \"\"\"\n    Given a positive integer n, return the number of even and odd integer palindromes\n    that fall within the range(1, n), inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(100) == (15, 25)\nassert     even_odd_palindrome(25) == (4, 0)\nassert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(5) == (2, 0)\nassert     even_odd_palindrome(15) == (5, 4)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(1) == (0,0)\nassert     even_odd_palindrome(2) == (1,0)\nassert     even_odd_palindrome(4) == (2,0)\nassert     even_odd_palindrome(5) == (3,0)\nassert     even_odd_palindrome(10) == (4,0)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_nums([1, 2, 3, 4, 5, -9, -8, -7, -6, -5]) == 5\nassert     count_nums([0, 1, 2, 3, 4, 5, -9, -8, -7, -6, -5]) == 10\nassert     count_nums([-1, -2, -3, -4, -5, -9, -8, -7, -6, -5]) == 1\nassert     count_nums([-1, -2, -3, -4, -5, -9, -8, -7, -6, -5, -4]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_nums([5, 9, -2, -3]) == 2\nassert     count_nums([-9, -8, -7]) == 2\nassert     count_nums([5, 5, 5]) == 3\nassert     count_nums([-3, -2, -1, 0, 1, 2, 3]) == 6\nassert     count_nums([0, 0, 0]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_nums([1, -1, 3, 0, 1, 1]) == 3\nassert     count_nums([1, -1, 3, 0, 1, 1, 2, 3]) == 4\nassert     count_nums([-3, -2, -1, 2, 3]) == 1\nassert     count_nums([-3, -2, -1, 0, 0, 1, 2, 3]) == 1\nassert     count_nums([-3, -2, -1, -2, 2, 3, 1]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_nums([-1, -2, 3, 0, -1]) == 3\nassert     count_nums([1, 2, 3, 4, 5]) == 0\nassert     count_nums([-1, 2, 3, 4, 5]) == 0\nassert     count_nums([5, -7, 3, 2, 3, 2, -3, -4, 8]) == 4\nassert     count_nums([]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_nums([1, 2, 3, 4]) == 2\nassert     count_nums([-1, -2, -3, -4]) == 2\nassert     count_nums([-123, -2, 0, -4, 123, 2, 3, 0, 0]) == 3\nassert     count_nums([-123, -2, -3, -4, 123, 2, 3, 4]) == 3\nassert     count_nums([]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_nums([-123, 1, 2, 3]) == 3\nassert     count_nums([-123, -1, 2, 3]) == 2\nassert     count_nums([-123, -1, 2, -3]) == 1\nassert     count_nums([]) == 0\nassert     count_nums([-123, -1, 2, 3, -1, -1, -2, 3]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_nums([-1, 2, 3]) == 1\nassert     count_nums([-1, -2, -3]) == 0\nassert     count_nums([-2, -3]) == 2\nassert     count_nums([-2, 2, 3]) == 2\nassert     count_nums([1, 2, 3]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_nums([1, 2, 3, 4, 5])    == 1\nassert     count_nums([1, 2, 3, -4, 5])    == 2\nassert     count_nums([1, 2, 3, -4, 5, -6])    == 3\nassert     count_nums([-1, -2, -3, -4, -5, -6])    == 6\nassert     count_nums([])    == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_nums([-123,123,1000,-123])==2\nassert     count_nums([-123,123,1000,-123,1000,-123])==3\nassert     count_nums([1,2,3,4,5,6,7,8,9])==9\nassert     count_nums([0,1,2,3,4,5,6,7,8])==8\nassert     count_nums([-0,-1,-2,-3,-4,-5,-6,-7,-8])==8\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_nums([1,2,3,4,5]) == 2\nassert     count_nums([1,-2,3,4,5]) == 3\nassert     count_nums([-5,9,7,3,9]) == 1\nassert     count_nums([-5,9,7,3,8]) == 2\nassert     count_nums([-5,-9,7,3,8]) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     move_one_ball([0, 2, 1, 3, 5]) == False\nassert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([5, 4, 3, 2, 1]) == True\nassert     move_one_ball([3, 2, 1]) == False\nassert     move_one_ball([2, 1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     move_one_ball([]) == True, \"returned True when the given array was empty\"\nassert     move_one_ball([1,3,5,2,8,3,7,9]) == True, \"returned True when the given array was sorted\"\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10]) == False, \"returned False when the given array was not sorted\"\nassert     move_one_ball([3,8,10,1,2,5,9,0,6,4]) == False, \"returned False when the given array was not sorted\"\nassert     move_one_ball([3,2,1]) == False, \"returned False when the given array was not sorted\"\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     move_one_ball([1,3,5,7]) == True\nassert     move_one_ball([1,3,4,5,6,7]) == False\nassert     move_one_ball([3,5,7]) == True\nassert     move_one_ball([3,5]) == True\nassert     move_one_ball([5,7]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7]) == False\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (move_one_ball([1,2,3,4,5,6,7,8,9,10]) == True)\nassert     (move_one_ball([1,2,3,4,5,6,7]) == False)\nassert     (move_one_ball([3,4,5,6,7,8]) == False)\nassert     (move_one_ball([10,9,8,7,6,5,4,3,2,1]) == True)\nassert     (move_one_ball([1]) == True)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5, 6]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([1]) == True\nassert     move_one_ball([2, 1]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     True == move_one_ball([1, 2, 3, 4, 5])\nassert     False == move_one_ball([3, 4, 5, 1, 2])\nassert     True == move_one_ball([])\nassert     True == move_one_ball([5, 4, 3, 2, 1])\nassert     True == move_one_ball([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5]) == False\nassert     move_one_ball([5, 3, 1, 2, 4]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6]) == False\nassert     move_one_ball([5, 6, 4, 3, 2, 1]) == True\nassert     move_one_ball([1, 1, 1, 1, 1]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 5]) == False\nassert     move_one_ball([1, 1, 2, 2]) == True\nassert     move_one_ball([1, 2, 1, 2]) == False\nassert     move_one_ball([]) == True\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"\nassert     exchange([1, 3, 5], [2, 4, 6, 8]) == \"NO\"\nassert     exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"NO\"\nassert     exchange([2, 4, 6], [1, 3, 5, 7]) == \"YES\"\nassert     exchange([], [1]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     exchange([3,1,5], [5,3,1]) == \"YES\"\nassert     exchange([3,1,5], [2,3,1]) == \"NO\"\nassert     exchange([3,1,5], [2,4,3]) == \"NO\"\nassert     exchange([3,1,5,7], [5,3,1]) == \"YES\"\nassert     exchange([3,1,5,7], [2,3,1]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     exchange([1,2,3,4,5,6], [2,4,6,8,10]) == \"YES\"\nassert     exchange([1,2,3,4,5], [1,6,7,8,9]) == \"NO\"\nassert     exchange([1,2,3], [4,6,8,10]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     exchange([1,2,3,4,5,6], [6,5,4,3,2,1]) == \"YES\"\nassert     exchange([1,2,3,4,5], [1,2,3,4]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [1,2,3,4]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7], [5,6,7,4,3,2,1]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7], [7,6,5,4,3,2,1]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [6, 5, 4, 3, 2, 1]) == \"NO\"\nassert     exchange([], []) == \"NO\"\nassert     exchange([1], [1]) == \"NO\"\nassert     exchange([0, 1], [0, 1]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     exchange([2,3,4,5,6,7,8,9,10], [4,5,6,7,8,9,10,11,12]) == \"YES\"\nassert     exchange([3,2,1,0], [2,3,4,5,6,7,8,9,10]) == \"NO\"\nassert     exchange([3,2,1,0], [3,3,3,3,3,3,3,3,3]) == \"NO\"\nassert     exchange([3,2,1,0], [3,3,3,3,3,3,3,3,3]) == \"YES\"\nassert     exchange([3,2,1,0], [1,2,3,4,5,6,7,8,9,10]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     exchange([1, 2, 3, 4], [2, 4, 6, 8]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [2, 4, 6, 3]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [2, 4, 6, 1]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == \"NO\"\nassert     exchange([], []) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     exchange([1,2,3,4], [2,4,6]) == \"NO\"\nassert     exchange([2,4,6], [1,2,3,4]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     exchange([1,2,3,4,5], [2,3,4,5,6]) == \"YES\"\nassert     exchange([1,2,3,4,5], [2,3,4,5,6]) == \"NO\"\nassert     exchange([1,2,3,4,5], [2,3,4,5,6,7]) == \"NO\"\nassert     exchange([1,2,3,4,5], [2,3,4,5,6,7,8,9]) == \"NO\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     histogram(\"a b c d\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1}\nassert     histogram(\"a a a a a a b c d\") == {\"a\": 5, \"b\": 1, \"c\": 1, \"d\": 1}\nassert     histogram(\"a a a a a a a b c c d\") == {\"a\": 5, \"b\": 1, \"c\": 2, \"d\": 1}\nassert     histogram(\"a a a a a a a a b c c d e\") == {\"a\": 5, \"b\": 1, \"c\": 2, \"d\": 1, \"e\": 1}\n\ndef pos_neg_neutral_words(text):\n    \"\"\"Given a string, return a dictionary with words as keys,\n    and as values a list containing 1 for positive, 0 for negative and\n    1 for neutral.\n    Ignore the case for the words.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     histogram('a b c d') == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram('a a a a') == {'a': 4}\nassert     histogram('a a a a a') == {'a': 4}\nassert     histogram('a a a a a a') == {'a': 5}\nassert     histogram('a a a a a a a a a') == {'a': 6}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     histogram('a b b c d d a d e') == \\\n              {'a': 5, 'b': 2, 'c': 1, 'd': 2, 'e': 1}\nassert     histogram('a b b c d d a a') == \\\n              {'a': 5, 'b': 2, 'c': 1, 'd': 2, 'e': 1}\nassert     histogram('a b b c d d a a a b') == \\\n              {'a': 5, 'b': 2, 'c': 1, 'd': 2, 'e': 1}"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     histogram('a') == {'a': 1}\nassert     histogram('a a') == {'a': 2}\nassert     histogram('a a a') == {'a': 3}\nassert     histogram('b c d e f') == {'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert     histogram('a b c d e f') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     histogram('a') == {'a': 1}\nassert     histogram('aa') == {'a': 2}\nassert     histogram('aaa') == {'a': 3}\nassert     histogram('aaaaa') == {'a': 4}\nassert     histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     histogram(\"a a b c c c\") == {'a': 2, 'b': 2, 'c': 4}\nassert     histogram(\"a a b b c c c\") == {'a': 3, 'b': 2, 'c': 4}\nassert     histogram(\"a a b c c\") == {'a': 2, 'b': 1, 'c': 1}\nassert     histogram(\"\") == {}\nassert     histogram(\"a a a a\") == {'a': 4}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     histogram(\"abcd\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram(\"aabcd\") == {'a': 2, 'b': 2, 'c': 1, 'd': 1}\nassert     histogram(\"abcd\") == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram(\"abcd\") == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram(\"aabcd\") == {'a': 3, 'b': 2, 'c': 1, 'd': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     histogram(\"abcd\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1}\nassert     histogram(\"abcc\") == {\"a\": 2, \"b\": 1, \"c\": 2}\nassert     histogram(\"aabbccddeefgh\") == {\"a\": 5, \"b\": 3, \"c\": 2, \"d\": 2, \"e\": 3, \"f\": 1, \"g\": 1, \"h\": 1}\nassert     histogram(\"abcdabcdaabcd\") == {\"a\": 4, \"b\": 3, \"c\": 2, \"d\": 3}\nassert     histogram(\"abbcdabcd\") == {\"a\": 3, \"b\": 2, \"c\": 2}"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     histogram(\"abcdefa\") == {'a': 3}\nassert     histogram(\"a ab abc abcd\") == {'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert     histogram(\"a ab abc abcd abc\") == {'a': 3, 'b': 2, 'c': 2, 'd': 1}\nassert     histogram(\"b ab c abc\") == {'b': 1, 'c': 1}\nassert     histogram(\"a bb cccc\") == {'a': 1, 'b': 2, 'c': 4}\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_delete('de', 'd') == ('ed', True)\nassert     reverse_delete('123', '1') == ('', False)\nassert     reverse_delete('abc', 'b') == ('', False)\nassert     reverse_delete('a', 'a') == ('', False)\nassert     reverse_delete('a', 'b') == ('', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_delete('Reverse', 'erase') == ('Reverse', True)\nassert reverse_delete('REVERSE', 'ERAS') == ('REVERSE', False)\nassert reverse_delete('', 'abc') == ('', True)\nassert reverse_delete('aaa', 'abc') == ('aaa', True)\nassert reverse_delete('abc', 'abc') == ('abc', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_delete('asdf','sd') == ('sd', True)\nassert     reverse_delete('asdf','a') == ('a', True)\nassert     reverse_delete('asdf','as') == ('', True)\nassert     reverse_delete('asdf','asdf') == ('', False)\nassert     reverse_delete('', 'asdf') == ('', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_delete('abcd', 'a') == (\n            'cdba', True)\nassert     reverse_delete('abcd', 'b') == (\n            'cd', False)\nassert     reverse_delete('abcd', 'cd') == (\n            '', False)\nassert     reverse_delete('', '') == ('', True)\nassert     reverse_delete('abcd', 'd') == (\n            'abc', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"\",\"\") == (\"\",True)\nassert     reverse_delete(\"a\",\"\") == (\"\",True)\nassert     reverse_delete(\"ab\",\"a\") == (\"\",True)\nassert     reverse_delete(\"aa\",\"a\") == (\"b\",True)\nassert     reverse_delete(\"aaa\",\"a\") == (\"ba\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_delete('aabaa', 'ab') == ('baba', False)\nassert     reverse_delete('abc', 'ab') == ('bca', False)\nassert     reverse_delete('abcd', 'ab') == ('bcd', True)\nassert     reverse_delete('asdfgh', 'fgh') == ('asdf', True)\nassert     reverse_delete('asdfgh', 'fhg') == ('as', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_delete('abcde','cdea') == ('abcde', True)\nassert     reverse_delete('abcde','dea') == ('abcde', False)\nassert     reverse_delete('','a') == ('', False)\nassert     reverse_delete('aba', 'ab') == ('aba', False)\nassert     reverse_delete('aba', 'a') == ('aba', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         reverse_delete('abcd','ad') == ('dcba',True)\nassert         reverse_delete('aba','a') == ('a',True)\nassert         reverse_delete('abab','b') == ('bab',True)\nassert         reverse_delete('','a') == ('',True)\nassert         reverse_delete('ab','a') == ('',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_delete('aba', 'ab') == ('aba', True)\nassert     reverse_delete('abb', 'ab') == ('abb', False)\nassert     reverse_delete('baa', 'ab') == ('', False)\nassert     reverse_delete('', 'abc') == ('', True)\nassert     reverse_delete('a', 'a') == ('', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_delete(\"abccdeff\", \"abcd\") == ('eff', True)\nassert     reverse_delete(\"abcdefg\", \"abcd\") == ('ef', False)\nassert     reverse_delete(\"\", \"\") == ('', True)\nassert     reverse_delete(\"abcd\", \"\") == ('abcd', True)\nassert     reverse_delete(\"a\", \"a\") == ('', False)\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_count([]) == []\nassert     odd_count(['h', 'e', 'l', 'l', 'o']) == []\nassert     odd_count(['h', 'e', 'l', 'l', 'o', '1', '2']) == [3]\nassert     odd_count(['h', 'e', 'l', 'l', 'o', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == [3, 3, 3, 3, 3, 3, 3]\nassert     odd_count(['h', 'e', 'l', 'l', 'o', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-1', '0']) == [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_count([\"2\", \"22\", \"2222\", \"222222\"]) == [4, 6, 10, 16]\nassert     odd_count([\"2\", \"22\", \"2222\", \"222222\", \"2\"]) == [4, 6, 10, 16, 2]\nassert     odd_count([\"2\", \"22\", \"2222\", \"222222\", \"22\", \"2\"]) == [4, 6, 10, 16, 2, 2]\n\ndef odd_sub(lst):\n    \"\"\"Given a list of integers, where each number is in the range\n    [-1, 1], return a new list where each integer is the number of\n    sublists that the original list would create.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_count([\"123\", \"12\", \"1456\", \"1\"]) == [3, 1, 6, 1]\nassert     odd_count([\"112\", \"101\", \"1001\"]) == [2, 1, 3]\nassert     odd_count([\"1113\", \"12\"]) == [2, 0]\nassert     odd_count([\"\", \"\", \"\", \"\"]) == [0, 0, 0, 0]\n\n\"\"\"\nProblem 16\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef is_palindrome(str):\n    \"\"\"Given a string, return True if it is a palindrome, False otherwise.\n    Note that the input string can only contain lowercase letters, and must\n    not be empty.\n    \"\"\"\n    pass\n\n\ndef palindrome_permutations(str):\n    \"\"\"Given a string, return a list of all the possible permutations of that\n    string.\n    \"\"\"\n    pass\n\n\ndef digits_count(str):\n    \"\"\"Given a string, return a list of all the possible permutations of that\n    string. Each permutation is a string made up of all the letters of the\n    input string in a different order.\n    \"\"\"\n    pass\n\n\ndef count_k_in_string(str, k):\n    \"\"\"Given a string, find the substring of length k that has the maximum\n    number of occurences. If there are several substrings of maximum length,\n    return them in a list sorted alphabetically. If the string has length less\n    than k, return an empty list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_count([\"1\", \"2\", \"3\", \"4\"]) == [2, 4, 0, 0]\nassert     odd_count([\"5\", \"6\", \"7\", \"8\"]) == [1, 2, 0, 0]\nassert     odd_count([\"9\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [0, 10, 4, 0, 0, 4, 2, 2, 2, 2, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_count(['101', '10101', '1110', '10111', '10110', '11', '10', '11101', '1010111', '1010110']) \\\n        == [6, 1, 4, 3, 2, 1, 2, 1, 3, 1, 1, 1]\nassert     odd_count(['1010101', '1110101', '1110110', '1011011']) == [3, 1, 1, 2]\nassert     odd_count([]) == []\nassert     odd_count([1]) == [1]\nassert     odd_count(['101', '1011', '10', '101101', '1011010', '1011011', '10101', '1011', '1010101', '1010110']) \\\n        == [4, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_count(['12345', '1111222', '1111111'])     == [1, 3, 2]\nassert     odd_count(['92389', '1111222', '1111222']) == [1, 3, 2]\nassert     odd_count(['87896', '1111222', '1111222'])     == [2, 3, 2]\nassert     odd_count(['45789', '1111222', '1111222']) == [1, 3, 2]\nassert     odd_count(['789', '1111222', '1111222'])     == [2, 3, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_count(['111', '11', '1', '0', '111']) == [2, 1, 1, 1, 2]\nassert     odd_count(['11', '11', '11', '11']) == [3, 2, 2, 2]\nassert     odd_count(['11', '0', '11', '11', '0', '11']) == [2, 0, 2, 2, 0, 2]\nassert     odd_count(['111', '111', '111', '111']) == [4, 3, 3, 3]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_count([\"1\",\"4\",\"2\"])    == [2]\nassert     odd_count([\"12\",\"11\",\"13\",\"8\",\"6\",\"14\",\"7\",\"5\",\"3\",\"7\"]) == [6, 3, 0]\nassert     odd_count([\"11\",\"11\",\"11\",\"11\"]) == [0]\nassert     odd_count([\"22\",\"21\",\"10\",\"21\",\"12\",\"15\",\"19\",\"18\",\"18\",\"19\",\"18\",\"18\",\"18\"]) == [2,1,3,1,2,1,0,1,2,1,0,1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_count([\"3\", \"10\", \"11\"]) == [3, 1]\nassert     odd_count([\"23\", \"40\", \"25\", \"36\", \"49\", \"41\", \"34\", \"42\", \"24\", \"16\", \"37\", \"27\", \"10\", \"46\"]) == [2, 7]\nassert     odd_count([\"22\", \"30\", \"24\", \"25\", \"28\", \"29\", \"32\", \"32\", \"35\", \"36\", \"38\", \"40\", \"39\", \"41\", \"43\", \"42\", \"45\", \"47\"]) == [4, 2]\nassert     odd_count([\"21\", \"30\", \"26\", \"31\", \"34\", \"36\", \"35\", \"40\", \"39\", \"38\", \"37\", \"37\", \"36\", \"37\", \"39\", \"41\", \"41\", \"43\", \"42\", \"45\", \"46\", \"49\", \"47\", \"45\", \"42\", \"43\", \"43\", \"44\", \"41\", \"40\", \"41\", \"44\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"47\", \"45\", \"42\", \"45\", \"45\", \"46\", \"47\", \"46\", \"44\", \"45\", \"46\", \"45\", \"44\", \"41\", \"41\", \"39\", \"39\", \"39\", \"39\", \"39\", \"38\", \"38\", \"37\", \"37\", \"36\", \"36\", \"35\", \"35\", \"34\", \"34\", \"33\", \"32\", \"32\", \"31\", \"31\", \"30\", \"30\", \"29\", \"29\", \"27\", \"26\", \"26\", \"25\", \"25\", \"25\", \"23\", \"23\", \"22\", \"22\", \"22\", \"22\", \"22\", \"22\", \"22\", \"22\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"21\", \"20\", \"20\", \"20\", \"20\", \"20\", \"20\", \"19\", \"18\", \"18\", \"18\", \"18\", \"18\", \"18\", \"18\", \"17\", \"16\", \"16\", \"16\", \"16\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"15\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"14\", \"1"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1,2,3,4,5,6,7,8,9,10]) == 19\nassert     minSubArraySum([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 26\nassert     minSubArraySum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 30\nassert     minSubArraySum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 19\nassert     minSubArraySum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 72"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \nassert minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     minSubArraySum([2, 3, -5, -10]) == 3\nassert     minSubArraySum([-1, -1, -1, -1, -1]) == -1\nassert     minSubArraySum([-1, -1, 1, 1, 1]) == -1\nassert     minSubArraySum([-1]) == -1\nassert     minSubArraySum([]) == -1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minSubArraySum([2,3,10,4,7]) == 4, \"expect 4, but got \" + str(minSubArraySum([2,3,10,4,7]))\nassert     minSubArraySum([1,2,3,4]) == 8, \"expect 8, but got \" + str(minSubArraySum([1,2,3,4]))\nassert     minSubArraySum([2,2,2,1,3,3,3,3,2,2,2,1]) == 9, \"expect 9, but got \" + str(minSubArraySum([2,2,2,1,3,3,3,3,2,2,2,1]))\nassert     minSubArraySum([3,4,5,6,7]) == 12, \"expect 12, but got \" + str(minSubArraySum([3,4,5,6,7]))\nassert     minSubArraySum([1,3,5,7,9,11]) == 12, \"expect 12, but got \" + str(minSubArraySum([1,3,5,7,9,11]))\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minSubArraySum([1,2,3,4,5,8,2,3,4,5,8,9]) == 10\nassert minSubArraySum([1,2,3,4,5,8,2,3,4,5,8,9]) == 14\nassert minSubArraySum([1,2,3,4,5,8,2,3,4,5,8,9]) == 10\nassert minSubArraySum([1,2,3,4,5,8,2,3,4,5,8,9]) == 10\nassert minSubArraySum([1,2,3,4,5,8,2,3,4,5,8,9]) == 10\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minSubArraySum([1,2,3]) == 1\nassert     minSubArraySum([-1,2,3]) == 3\nassert     minSubArraySum([5,4,-1,7,8]) == 6\nassert     minSubArraySum([1,2,3,-10,-3]) == -1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minSubArraySum([10,1,2,3,4]) == 10\nassert     minSubArraySum([1,1,2]) == 2\nassert     minSubArraySum([2,5,1,4,5]) == 5\nassert     minSubArraySum([3,5,6,7,8]) == 15\nassert     minSubArraySum([-3,1,2,-3,4]) == 2\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minSubArraySum([1,3,2,2,4]) == 6\nassert minSubArraySum([1,3,2,2,4,1]) == 4\nassert minSubArraySum([1,2]) == 2\nassert minSubArraySum([]) == 0\nassert minSubArraySum([1]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\nassert     minSubArraySum([1, 1, 1]) == 3\nassert     minSubArraySum([2, -1, -3, 1]) == -1\nassert     minSubArraySum([1, 2, 3]) == 1\nassert     minSubArraySum([5, -2, -3, 4, 1, -1]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1, 1, 1, 1, 1, 1, 1, 1]) == 0\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 10\n\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_fill([[0, 0, 1, 0, 0], [0, 0, 0, 0, 0], [1, 0, 0, 1, 0], [0, 0, 1, 0, 1]], 3) == 1\nassert     max_fill([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 3) == 0\nassert     max_fill([[0, 1, 1, 0, 0], [0, 0, 0, 0, 1], [1, 0, 0, 1, 1]], 3) == 3\nassert     max_fill([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], 3) == 0\nassert     max_fill([[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], 3) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_fill( [ [0,1,0,0],[1,1,1,1],[0,1,0,0],[1,1,1,1] ], 2 ) == 3\nassert     max_fill( [ [0,1,0,0],[1,1,1,1],[0,1,0,0],[1,1,1,1] ], 1 ) == 2\nassert     max_fill( [ [0,1,0,0],[1,1,1,1],[0,1,0,0],[1,1,1,1] ], 3 ) == 1\nassert     max_fill( [ [0,1,0,0],[1,1,1,1],[0,1,0,0],[1,1,1,1] ], 4 ) == 0\nassert     max_fill( [ [0,1,0,0],[1,1,1,1],[0,1,0,0],[1,1,1,1] ], 4 ) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_fill(\n        [[1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1]],\n        2) == 3\n\nassert     max_fill(\n        [[1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1]],\n        3) == 4\n\nassert     max_fill(\n        [[1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1],\n        [1,1,1,1,1,1,1]],\n        4) == 5\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_fill([[1,0,1],[0,0,1],[0,0,0]], 2) == 1\nassert     max_fill([[0,0,1],[0,0,0]], 2) == 2\nassert     max_fill([[1,0,1,0,0],[0,0,0,0,0],[0,0,1,0,1],[0,0,0,0,0]], 4) == 1\nassert     max_fill([[0,0,1,0,0],[0,0,0,0,0],[0,0,1,0,1],[0,0,0,0,0]], 4) == 2\nassert     max_fill([[0,0,0,0,0]], 4) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_fill(\n            [[1,1,1,1,1,1],[1,2,3,3,3,2],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]],\n            2) == 3\nassert     max_fill(\n            [[1,1,1,1,1,1],[1,2,3,3,3,2],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]],\n            1) == 4\nassert     max_fill(\n            [[1,1,1,1,1,1],[1,2,3,3,3,2],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]],\n            3) == 1\nassert     max_fill(\n            [[1,1,1,1,1,1],[1,2,3,3,3,2],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]],\n            4) == 0\nassert     max_fill(\n            [[1,1,1,1,1,1],[1,2,3,3,3,2],[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]],\n            5) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_fill([[1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 0, 1, 1, 1, 0, 1],\n        [1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n        [1, 1, 1, 1, 0, 1, 1, 0, 1, 1],\n        [0, 0, 1, 1, 0, 1, 1, 1, 1, 0],\n        [0, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 2) == 9\n\nassert     max_fill([[1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 0, 1, 1, 1, 0, 1],\n        [1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n        [1, 1, 1, 1, 0, 1, 1, 0, 1, 1],\n        [0, 0, 1, 1, 0, 1, 1, 1, 1, 0],\n        [0, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 1) == 3\n\nassert     max_fill([[1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [0, 1, 1, 1, 0, 1, 1, 1, 0, 1],\n        [1, 0, 1, 1, 0, 1, 1, 0, 1, 1],\n        [1, 1, 1, 1, 0, 1, 1, 0, 1, 1],\n        [0, 0, 1, 1, 0, 1, 1, 1, 1, 0],\n        [0, 0, 0, 1, 0, 0, 1, 1, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 2) == 6\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_fill([[0,0],[0,0],[0,0],[0,0]], 1) == 0\nassert     max_fill([[1,1],[0,0],[0,0],[0,0]], 1) == 0\nassert     max_fill([[0,1],[1,0],[1,0],[0,0]], 1) == 2\nassert     max_fill([[1,1],[1,1],[1,1],[1,1]], 1) == 4\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 4, 8, 3, 5, 6, 7, 9]\nassert     sort_array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 7]) == [0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 7]\nassert     sort_array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8]) == [0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8]\nassert     sort_array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 8]) == [0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 8]\nassert     sort_array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9]) == [0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([1,2,5,3,4,8,7,6]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([1,4,3,2,8,7]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([1,10,11,12]) == [1,10,11,12]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8])    == [0,1,2,4,3,5,6,7,8]\nassert     sort_array([3,6,9,7,8])    == [3,8,6,7,9]\nassert     sort_array([7,5,7,5,4,5,4,3,4,4,3,4,4,3,3,4,3,2,4,3,5,2,4,1,2,4,2,4,2,1,4,2,3,3,3,3,3,3,2,1,2,2,2,2,2,2,1,2,2,3,2,1,2,3,2,2,3,2,1,2,2,2,3,2,2,2,3,2,1,2,2,2,3,2,2,3,2,2,3,2,1,2,1,3,2,1,3,2,3,2,3,2,2,3,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,3,2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,3,2,3,2,2,3,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,3,2,2,3,2,2,2,2,3,2,2,3,2,2,2,3,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,3,2,3,2,2,2,2,2,3,2,2,2,2,2,2,3,2,2,2,2,2,3,2,2,3,2,2,2,2,2,2,2,3,2,3,2,2,3,2,2,3,2,3,2,3,2,2,2,3,2,3,2,2,3,2,2,3,2,3,2,3,2,2,3,2,3,2,3,2,3,2,3,2,2,3,2,2,3,2,2,2,3,2,3,2,3,2,3,2,2,3,2,2,2,3,2,2,3,2,2,2,3,2,2,3,2,2,2,3,2,3,2,3,2,3,2,2,3,2,2,3,2,2,3,2,2,2,2,3,2,2,3,2,2,3,2,2,2,2,3,2,3,2,3,2,3,2,2,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([1, 2, 3]) == [1, 2, 3]\nassert     sort_array([1, 2, 3, 4]) == [1, 1, 2, 2]\nassert     sort_array([0, 0, 1, 1]) == [0, 0, 1, 1]\nassert     sort_array([0, 1, 0, 1, 1, 1, 1, 0]) == [0, 0, 0, 0, 1, 1, 1, 1]\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([42, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([10,2,5]) == [2,5,10]\nassert     sort_array([10,0,5]) == [5,10,0]\nassert     sort_array([10,1,5]) == [5,10,1]\nassert     sort_array([10,1,0]) == [0,1,10]\nassert     sort_array([10,0,0]) == [0,0,10]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [0,0,1,1,2,3,3,4,5] == sort_array([0,1,2,3,3,3,3,4,5])\nassert     [0,0,1,1,2,3,3,4,5,6] == sort_array([0,1,2,3,3,3,3,4,5,6])\nassert     [0,0,1,1,2,3,3,4,5,6,7] == sort_array([0,1,2,3,3,3,3,4,5,6,7])\nassert     [0,0,1,1,2,3,3,4,5,6,7,8] == sort_array([0,1,2,3,3,3,3,4,5,6,7,8])\nassert     [0,0,1,1,2,3,3,4,5,6,7,8,9] == sort_array([0,1,2,3,3,3,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([3,2,1])    == [1,2,3]\nassert     sort_array([0,1])    == [0,1]\nassert     sort_array([1,0])    == [0,1]\nassert     sort_array([0,0])    == [0,0]\nassert     sort_array([0,1,2])    == [0,1,2]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([0,0,0,1,1,1,2,2,3,3,4]) == [0,1,2,4,3,3,2,1,0,0,0]\nassert     sort_array([0,0,0,1,1,1,2,2,3,3,4,4]) == [0,0,0,1,1,1,2,2,3,3,4,4]\nassert     sort_array([1,1,1,1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1,1,1,1,1,1]\nassert     sort_array([]) == []\nassert     sort_array([0]) == [0]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,4,8,3,6,7,5]\nassert     sort_array([1,3,8,2,5,7,4,6]) == [1,2,4,3,5,6,7,8]\nassert     sort_array([0,0,1,2,3,4]) == [0,0,1,2,4,3]\nassert     sort_array([]) == []\nassert     sort_array([1,1]) == [1,1]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     select_words('the quick brown fox jumps over the lazy dog', \n                   2)    == ['quick', 'brown']\nassert     select_words('The quick brown fox jumps over the lazy dog', \n                   1)    == ['The']\nassert     select_words('', 0)    == []\nassert     select_words('The quick brown fox jumps over the lazy dog', \n                   2)    == ['quick', 'brown']\nassert     select_words('the quick brown fox jumps over the lazy dog', \n                   4)    == ['quick', 'brown', 'jumps']\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     select_words(\"a bc d e f g\", 2) == [\"bc\", \"f\", \"g\"]\nassert     select_words(\"a bc d e f g\", 3) == [\"bc\", \"f\", \"g\"]\nassert     select_words(\"a bc d e f g\", 4) == [\"bc\", \"f\", \"g\"]\nassert     select_words(\"a bc d e f g\", 5) == [\"bc\", \"f\", \"g\"]\n\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     select_words(s=\"\", n=1) == []\nassert     select_words(s=\"a\", n=1) == []\nassert     select_words(s=\"aa bb cc\", n=2) == [\"aa\", \"bb\"]\nassert     select_words(s=\"aa bb cc\", n=3) == [\"cc\"]\nassert     select_words(s=\"aa bb cc\", n=4) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     ['a', 'aa', 'aba', 'aba', 'ba']    == select_words('a aba ba ab', 2)\nassert     ['c', 'aba', 'a']    == select_words('a aba ba ab', 1)\nassert     []    == select_words('', 1)\nassert     ['a', 'aa', 'aba', 'aba', 'ba']    == select_words('a aba ba ab', 3)\nassert     ['c', 'aba', 'a']    == select_words('a aba ba ab', 2)\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     select_words(\"This is a test!\", 1) == [\"test\"]\nassert     select_words(\"This is a test!\", 2) == [\"a\", \"is\", \"test\"]\nassert     select_words(\"This is a test!\", 3) == [\"is\", \"a\", \"test\"]\nassert     select_words(\"\", 3) == []\nassert     select_words(\"\", 3) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     select_words(\"I like eating cheese\", 2) == [\"eat\"]\nassert     select_words(\"I like eating cheese\", 1) == [\"like\", \"cheese\"]\nassert     select_words(\"I like eating cheese\", 0) == []\nassert     select_words(\"cheese\", 2) == [\"cheese\"]\nassert     select_words(\"I like eating cheese\", 3) == [\"cheese\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     select_words(\"How are you?\", 3) == [\"you\", \"are\", \"well\"]\nassert     select_words(\"How are you?\", 1) == [\"are\"]\nassert     select_words(\"How are you?\", 0) == []\nassert     select_words(\"\", 0) == []\nassert     select_words(\"\", 3) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     select_words( \"hello world\", 3 ) == [\"world\"]\nassert     select_words( \"this is a test\", 2 ) == [\"is\", \"test\"]\nassert     select_words( \"this is a test\", 5 ) == []\nassert     select_words( \"hello world\", 0 ) == []\n\ndef test_select_words():\n    "
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     select_words(\"a,b,c,d,e\", 2) == [\"a\", \"c\"]\nassert     select_words(\"a,b,c,d,e\", 1) == []\nassert     select_words(\"a,b,c,d,e\", 3) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\nassert     select_words(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\", 9) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     select_words(\"This is a very common interview question\", 2) == [\"is\", \"common\", \"very\"]\nassert     select_words(\"You can build your happiness\", 3) == [\"You\"]\nassert     select_words(\"The most common interview question is how to select from arrays\", 3) == [\"common\", \"from\", \"arrays\"]\nassert     select_words(\"\", 3) == []\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_closest_vowel(\"apples\") == \"e\"\nassert     get_closest_vowel(\"leaves\") == \"e\"\nassert     get_closest_vowel(\"hello\") == \"l\"\nassert     get_closest_vowel(\"world\") == \"o\"\nassert     get_closest_vowel(\"happy\") == \"h\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_closest_vowel(\"Hello\") == \"o\", \"First test\"\nassert     get_closest_vowel(\"loT\") == \"T\", \"Second test\"\nassert     get_closest_vowel(\"Alphabet\") == \"\", \"Third test\"\nassert     get_closest_vowel(\"\") == \"\", \"Fourth test\"\nassert     get_closest_vowel(\"AbCdEfG\") == \"\", \"Fifth test\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('hel') == 'l'\nassert     get_closest_vowel('hell') == 'l'\nassert     get_closest_vowel('h') == ''\nassert     get_closest_vowel('hello') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_closest_vowel('decision') == 'e'\nassert     get_closest_vowel('manner') == 'a'\nassert     get_closest_vowel('boat') == 'e'\nassert     get_closest_vowel('substitution') =='s'\nassert     get_closest_vowel('courage') == 'o'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"leetcode\") == \"e\", \"should be e\"\nassert     get_closest_vowel(\"code\") == \"e\", \"should be e\"\nassert     get_closest_vowel(\"apple\") == \"e\", \"should be e\"\nassert     get_closest_vowel(\"babble\") == \"e\", \"should be e\"\nassert     get_closest_vowel(\"intention\") == \"t\", \"should be t\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_closest_vowel('cab') == 'b'\nassert     get_closest_vowel('todo') == 'o'\nassert     get_closest_vowel('example') == 'e'\nassert     get_closest_vowel('bab') == ''\nassert     get_closest_vowel('qqq') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_closest_vowel(\"The road is straight and free\") == \"e\", \"Fail on get_closest_vowel\"\nassert     get_closest_vowel(\"The Man\") == \"\", \"Fail on get_closest_vowel\"\nassert     get_closest_vowel(\"The Man should have stoped here\") == \"\", \"Fail on get_closest_vowel\"\nassert     get_closest_vowel(\"The Man was not happy\") == \"\", \"Fail on get_closest_vowel\"\nassert     get_closest_vowel(\"A test to see how I am\") == \"e\", \"Fail on get_closest_vowel\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('codewars') == 'o'\nassert     get_closest_vowel('closest') == 'e'\nassert     get_closest_vowel('coffee') == 'e'\nassert     get_closest_vowel('code') == 'e'\nassert     get_closest_vowel('aa') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"hello\") == \"e\"\nassert     get_closest_vowel(\"Alaska\") == \"a\"\nassert     get_closest_vowel(\"supercalifragilisticexpialidocious\") == \"e\"\nassert     get_closest_vowel(\"A1\") == \"\"\nassert     get_closest_vowel(\"CA\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_closest_vowel(\"car\") == \"c\"\nassert     get_closest_vowel(\"cop\") == \"c\"\nassert     get_closest_vowel(\"computer\") == \"c\"\nassert     get_closest_vowel(\"Tensor\") == \"e\"\nassert     get_closest_vowel(\"accent\") == \"e\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     match_parens('())') == 'Yes'\nassert     match_parens(')(') == 'No'\nassert     match_parens(')(') == 'No'\nassert     match_parens('((') == 'No'\nassert     match_parens('(()))') == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     match_parens('(()())') == 'Yes'\nassert     match_parens('())') == 'No'\nassert     match_parens('()((())())') == 'Yes'\nassert     match_parens('(((())))()') == 'Yes'\nassert     match_parens('(((())()))))()') == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     match_parens(\"\") == 'Yes'\nassert     match_parens(\"(())\") == 'Yes'\nassert     match_parens(\"(())(\") == 'No'\nassert     match_parens(\"())\") == 'No'\nassert     match_parens(\"(()()))()\") == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     match_parens('()') == 'Yes'\nassert     match_parens('())()') == 'Yes'\nassert     match_parens('(()()())') == 'Yes'\nassert     match_parens('()())()()') == 'Yes'\nassert     match_parens('()(()') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     match_parens(['(()())()', '()()()']) == 'Yes'\nassert     match_parens(['(())()', '()()()']) == 'No'\nassert     match_parens(['()()', '(()())']) == 'Yes'\nassert     match_parens(['()(()', '(()()']) == 'No'\nassert     match_parens(['(())', '()()()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     match_parens(['(())()', '())']) == 'Yes'\nassert     match_parens(['(())()', '()']) == 'No'\nassert     match_parens(['()()', '(()']) == 'No'\nassert     match_parens(['()()', '()()']) == 'Yes'\nassert     match_parens(['(())', '()()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     match_parens('())()') == 'Yes'\nassert     match_parens('))') == 'No'\nassert     match_parens('())') == 'No'\nassert     match_parens('(()') == 'No'\nassert     match_parens('())(()') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     match_parens(\"()()\") == \"Yes\"\nassert     match_parens(\"()()()\") == \"Yes\"\nassert     match_parens(\"(())\") == \"No\"\nassert     match_parens(\"(()(()))\") == \"Yes\"\nassert     match_parens(\"()(())(()())\") == \"Yes\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     match_parens(\"(()())()\") == \"Yes\"\nassert     match_parens(\"())()\") == \"No\"\nassert     match_parens(\"()(()())\") == \"Yes\"\nassert     match_parens(\"(())(()())\") == \"No\"\nassert     match_parens(\"()\") == \"No\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     match_parens(['(())()', ')()']) == 'Yes'\nassert     match_parens(['(()', ')(']) == 'No'\nassert     match_parens(['()(()', '()()']) == 'No'\nassert     match_parens(['(()())', '()()']) == 'Yes'\nassert     match_parens(['(', ')', '()']) == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maximum([1, 2, 3, 4], 2) == [4, 3]\nassert     maximum([1, 2, 3, 4], 1) == [4]\nassert     maximum([1, 2, 3, 4], 5) == [4]\nassert     maximum([1, 2, 3, 4, 5], 3) == [5, 4, 3]\nassert     maximum([1, 2, 3, 4, 5], 2) == [5, 4]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [9, -10, -5, -4, -3, -1, 2, 4, 5, 8]         == maximum([9, -10, -5, -4, -3, -1, 2, 4, 5, 8], 8)\nassert     [-10, -5, -3, -2, -1]                     == maximum([-10, -5, -3, -2, -1], 3)\nassert     [-10, -5, -3, -2, -1]                     == maximum([-10, -5, -3, -2, -1], 10)\nassert     [-10, -5, -3, -2, -1]                     == maximum([-10, -5, -3, -2, -1], -3)\nassert     [-10, -5, -3, -2, -1]                     == maximum([-10, -5, -3, -2, -1], 1)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maximum([-5, 3, -9, 4, 5, -7], 3) == [-9, -7, -5, 5, 3]\nassert     maximum([1, 2, 3, 4, 5], 2) == [5, 4]\nassert     maximum([9, 8, 7, 6, 5, 4, 3, 2, 1], 7) == [9, 8, 7]\nassert     maximum([-5, -4, -3, -2, -1], 4) == [-5, -4, -3, -2]\nassert     maximum([1, 2, 3, 4, 5], 0) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == []\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [9, 10, 11]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [7, 8, 9, 10]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     maximum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 3) == [10, 9, 8]\nassert     maximum([1,2,3,4,5], 2) == [5,4]\nassert     maximum([1], 1) == [1]\nassert     maximum([], 1) == []\nassert     maximum([-100, -200, -300], 2) == [-100, -200]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     maximum([5, 3, 7, 9, -1], 3) == [5, 7, 9]\nassert     maximum([-5, -3, -7, -9, -1], 3) == [-7, -9, -5]\nassert     maximum([], 3) == []\nassert     maximum([5], 1) == [5]\nassert     maximum([5, 3, 7, 9, -1], 5) == [5, 7, 9]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [5, 7, 7, 8, 8, 10, 10] == maximum([1, 2, 3, 4, 4, 6, 7, 8, 9, 10], 3)\nassert     [5, 7, 7, 8, 8, 10, 10] == maximum([1, 2, 3, 4, 4, 6, 7, 8, 9, 10], 5)\nassert     [7, 7, 7, 8, 8, 10, 10] == maximum([1, 2, 3, 4, 4, 6, 7, 8, 9, 10], 7)\nassert     [7, 7, 7, 8, 8, 10, 10] == maximum([1, 2, 3, 4, 4, 6, 7, 8, 9, 10], 8)\nassert     [7, 7, 7, 8, 8, 10, 10] == maximum([1, 2, 3, 4, 4, 6, 7, 8, 9, 10], 9)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [0] == maximum([0], 1)\nassert [0] == maximum([0], 2)\nassert [0, 1] == maximum([0, 1], 2)\nassert [0, 1] == maximum([0, 1], 2)\nassert [0, 1, 2] == maximum([0, 1, 2], 3)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     maximum([10, 3, 8, 4, 4, 4, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2], 5) == [10, 3, 8, 4, 4, 4, 4]\nassert     maximum([10, 3, 8, 4, 4, 4, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2], 8) == [10, 3, 8, 4, 4, 4, 4]\nassert     maximum([10, 3, 8, 4, 4, 4, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2], 3) == [10, 3, 8, 4]\nassert     maximum([10, 3, 8, 4, 4, 4, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2], 2) == [10, 3, 8]\nassert     maximum([10, 3, 8, 4, 4, 4, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2], 1) == [10]\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6]) == 8\nassert     solution([-1, -2, -3, -4, -5, -6]) == 0\nassert     solution([0, 0]) == 0\nassert     solution([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     solution([1, 2, 3, 4, 5, 6]) == 3\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 50\nassert     solution([1, 3, 5]) == 9\nassert     solution([0, 0]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [solution([2,1,4,3,5,6,7,8,9]) == 20, solution([2,1,4,3,5,6,7,8,9]) == 19]\nassert     [solution([2,2,1,3,4,5]) == 12, solution([2,2,1,3,4,5]) == 11]\nassert     [solution([2,2,2,3,4,5]) == 13, solution([2,2,2,3,4,5]) == 12]\nassert     [solution([2,2,2,3,4,5]) == 13, solution([2,2,2,3,4,5]) == 12]\nassert     [solution([2,2,2,3,4,5]) == 13, solution([2,2,2,3,4,5]) == 12]\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solution([10,11,12,13,14,15,16]) == 30\nassert     solution([1,2,3,4,5,6,7,8,9]) == 20\nassert     solution([13,10,15,9,12]) == 17\nassert     solution([13,10,15,9,12,8]) == 28"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solution([1,2,3,4,5,6]) == 3\nassert     solution([1,3,5]) == 0\nassert     solution([]) == 0\nassert     solution([1]) == 1\nassert     solution([1,2,3,4,5,6,7,8,9]) == 1\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         (solution([1, 2, 3, 4, 5, 6, 7, 8]) == 3)\nassert         (solution([2, 3, 6, 7, 3, 8, 9, 9]) == 0)\nassert         (solution([2, 2, 1, 5, 3, 6, 7, 8]) == 9)\nassert         (solution([2, 2, 1, 5, 3, 6, 7, 8, 2, 1, 4, 3, 6, 7, 8]) == 13)\nassert         (solution([1, 3, 5, 7, 9, 10, 11, 13]) == 18)"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     ( solution([1, 2, 3, 4, 5, 6]) == 25 )\nassert     ( solution([2, 4, 6, 8, 10]) == 22 )\nassert     ( solution([]) == 0 )\nassert     ( solution([2, 2, 2]) == 6 )\nassert     ( solution([2, 2, 3]) == 4 )\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6]) == 2\nassert     solution([1, 2, 3, 4]) == 0\nassert     solution([5, 2, 1, 4, 7]) == 6\nassert     solution([5, 2, 1, 4, 7, 8]) == 19\nassert     solution([1, 4, 3, 2, 5, 6, 7, 8, 9]) == 20\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7]) == 6\nassert     solution([2, 4, 6, 8]) == 0\nassert     solution([2, 4, 7, 8]) == 8\nassert     solution([2, 4, 6, 8, 10]) == 10\nassert     solution([1, 3, 5]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\nassert     solution([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -6\nassert     solution([-2, -3, -4]) == 0\nassert     solution([-2, -2]) == 0\nassert     solution([-2, -2, -2, -2, -2, -2]) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_elements(range(1, 10), 1) == 45\nassert     add_elements(range(1, 10), 2) == 45\nassert     add_elements(range(1, 10), 3) == 45\nassert     add_elements(range(1, 10), 4) == 45\nassert     add_elements(range(1, 10), 5) == 45\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_elements([1,2,3,4,5], 3) == 1+2+3+4+5\nassert     add_elements([1,2,3,4,5,6], 2) == 1+2+3+4+5+6\nassert     add_elements([1,2,3,4,5,6,7,8], 3) == 1+2+3+4+5+6\nassert     add_elements([0,0], 3) == 0\nassert     add_elements([], 3) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_elements([1,3,5,6,7,8], 3) == 5\nassert     add_elements([1,3,5,6,7,8], 2) == 9\nassert     add_elements([1,3,5,6,7,8], 0) == 0\nassert     add_elements([1,3,5,6,7,8], 1) == 16\nassert     add_elements([1,3,5,6,7,8], 100) == 107\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_elements([1,3,6,7], 2) == 19\nassert     add_elements([1,3,5,7], 2) == 19\nassert     add_elements([5,7,8,7], 1) == 19\nassert     add_elements([9,10,11,12], 3) == 39\nassert     add_elements([1,2,3,4,5,6], 5) == 22\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_elements([0, 0, 0, 0, 1, 1], 0) == 1\nassert     add_elements([0, 0, 0, 1, 1, 1], 0) == 1\nassert     add_elements([0, 0, 1, 1, 1, 1], 0) == 0\nassert     add_elements([0, 1, 1, 1, 1], 1) == 2\nassert     add_elements([0, 1, 1, 1], 3) == 1\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7, 8], 2) == 3\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 3\nassert     add_elements([2, 4, 3, 6, 5, 8, 7, 9], 2) == 19\nassert     add_elements([2, 4, 3, 6, 5, 8, 7, 9], 1) == 9\nassert     add_elements([2, 4, 3, 6, 5, 8, 7, 9], 10) == 23\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add_elements([1,1,1,1], 1) == 2\nassert     add_elements([9,9,9,9,9], 1) == 1\nassert     add_elements([2,3,4], 1) == 2\nassert     add_elements([1,1,2,2,3,3,4], 2) == 6\n\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7, 8], 3) == 9\nassert     add_elements([9, 9, 9, 9, 9, 9, 9, 9, 9, 9], 10) == 0\nassert     add_elements([1, 3, 5, 7, 9], 3) == 25\nassert     add_elements([3, 6, 8, 10, 15, 20], 3) == 47\nassert     add_elements([2, 4, 6, 8, 10, 15, 20], 3) == 38\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1], get_odd_collatz(1)\nassert     get_odd_collatz(2) == [1, 2], get_odd_collatz(2)\nassert     get_odd_collatz(3) == [1, 3], get_odd_collatz(3)\nassert     get_odd_collatz(7) == [1, 7, 7, 7], get_odd_collatz(7)\nassert     get_odd_collatz(9) == [1, 9, 3, 3, 3, 11], get_odd_collatz(9)\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1)    == [1]\nassert     get_odd_collatz(3)    == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5)    == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(7)    == [7, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3]\nassert     get_odd_collatz(4) == [1, 2, 3]\nassert     get_odd_collatz(5) == [1, 3, 10, 5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2, 1]\nassert     get_odd_collatz(3) == [3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert get_odd_collatz(2) == [2]\nassert get_odd_collatz(3) == [3]\nassert get_odd_collatz(8) == [8]\nassert get_odd_collatz(25) == [25]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3]\nassert     get_odd_collatz(4) == [1, 4]\nassert     get_odd_collatz(5) == [1, 5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(4) == [1,3,10,5,16,8,4,2,1]\nassert     get_odd_collatz(5) == [1,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(3) == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(4) == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5) == [3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(3) == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(7) == [7, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n\n\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(10)     == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(100)    == [43, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(200)    == [157, 142, 127, 122, 57, 35, 26, 19, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(300)    == [229, 167, 132, 107, 53, 31, 22, 17, 12, 6, 3, 1]\nassert     get_odd_collatz(400)    == [241, 171, 122, 67, 39, 26, 19, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     valid_date(\"12-02-2012\") == False\nassert     valid_date(\"-2-2-2012\") == False\nassert     valid_date(\"02-02-2012\") == True\nassert     valid_date(\"12-02-2012\") == True\nassert     valid_date(\"12-01-2012\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     valid_date('01-01-1993') == True\nassert     valid_date('01-13-1993') == False\nassert     valid_date('31-01-1993') == False\nassert     valid_date('01-01-1992') == False\nassert     valid_date('01-32-1993') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     valid_date(\"12-01-2020\") == True\nassert     valid_date(\"12-31-2020\") == False\nassert     valid_date(\"1-01-2020\") == True\nassert     valid_date(\"1-31-2020\") == False\nassert     valid_date(\"2-01-2020\") == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     valid_date('01-01-2018') == True\nassert     valid_date('01-01-18') == False\nassert     valid_date('01-01-18') == False\nassert     valid_date('01-01-18') == False\nassert     valid_date('01-01-18') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     valid_date('05-30-2018') == True\nassert     valid_date('12-30-2018') == False\nassert     valid_date('01-31-2018') == False\nassert     valid_date('1-32-2018') == False\nassert     valid_date('10-29-2018') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     valid_date(date = \"11-13-2004\")\nassert     not valid_date(date = \"11-13-2004\")\nassert     not valid_date(date = \"11-13-2004\")\nassert     valid_date(date = \"1-3-2004\")\nassert     valid_date(date = \"1-3-2004\")\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     valid_date('01-31-2001') == False\nassert     valid_date('01-31-2000') == False\nassert     valid_date('01-02-2001') == True\nassert     valid_date('01-02-2000') == True\nassert     valid_date('01-02-1234') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     valid_date(\"1-1-2013\") == False\nassert     valid_date(\"1-3-2013\") == False\nassert     valid_date(\"3-12-2013\") == False\nassert     valid_date(\"1-1-2013\") == False\nassert     valid_date(\"1-2-2013\") == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     valid_date('1-1-2010') == False, 'first date'\nassert     valid_date('29-02-2020') == False, 'invalid date'\nassert     valid_date('1-31-2010') == False, 'invalid date'\nassert     valid_date('1-32-2010') == False, 'invalid date'\nassert     valid_date('29-31-2010') == False, 'invalid date'\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     valid_date('01-02-2004') is False\nassert     valid_date('31-12-2013') is False\nassert     valid_date('01-32-2012') is False\nassert     valid_date('13-01-1234') is False\nassert     valid_date('01-32-2012') is False\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_words('hi,haha') == ['hi', 'haha']\nassert     split_words('hi,haha,lol') == ['hi', 'haha', 'lol']\nassert     split_words('hi,haha,lol,') == ['hi', 'haha', 'lol', '']\nassert     split_words('haha,haha') == ['haha', 'haha']\nassert     split_words('haha,haha,lol') == ['haha', 'haha', 'lol']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split_words('what time is it') == ['what', 'time', 'is', 'it'], split_words('what time is it')\nassert     split_words('A, B, a, B') == ['A', 'B', 'a', 'B'], split_words('A, B, a, B')\nassert     split_words('what, time, is, it') == ['what', 'time', 'is', 'it'], split_words('what, time, is, it')\nassert     split_words('what,, time, is, it') == ['what', 'time', 'is', 'it'], split_words('what,, time, is, it')\nassert     split_words('what,,, time, is, it') == ['what', 'time', 'is', 'it'], split_words('what,,, time, is, it')\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     split_words('Hi, my name is Etienne') == ['Hi','my', 'name', 'is', 'Etienne']\nassert     split_words('Hello, World!') == ['Hello', 'World', '!']\nassert     split_words('The') == ['The']\nassert     split_words('foo') == ['foo']\nassert     split_words('bar') == ['bar']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_words('Hello, how are you!') == ['Hello', 'how', 'are', 'you', '!']\nassert     split_words('Hi') == ['Hi']\nassert     split_words('Hi, how are you?') == ['Hi', 'how', 'are', 'you', '?']\nassert     split_words('') == []\nassert     split_words('1') == ['1']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     split_words(\"a,b,c,d,e\") == ['a', 'b', 'c', 'd', 'e']\nassert     split_words(\"1, 2, 3, 4, 5, 6\") == ['1', '2', '3', '4', '5', '6']\nassert     split_words(\"1, 2, 3, 4, 5, 6,7,8,9\") == ['1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert     split_words(\"hello\") == ['hello']\nassert     split_words(\"hello, world\") == ['hello', 'world']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_words('a') == [ 'a']\nassert     split_words('abc') == [ 'a', 'b', 'c']\nassert     split_words('ABC') == [ 'a', 'b', 'c']\nassert     split_words('abc123') == [ 'a', 'b', 'c', '1', '2', '3']\nassert     split_words('123abc') == [ '1', '2', '3', 'a', 'b', 'c']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a b,c d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c,d,e,f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('a,b,c,d,e,f,g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     split_words(\"The quick brown fox jumps over the lazy dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words(\"The, quick, brown, fox, jumps, over, the, lazy, dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words(\"The quick brown fox jumps over the lazy dog.\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words(\"\") == []\nassert     split_words(\"The, quick, brown, fox, jumps, over, the, lazy, dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_words('the quick brown fox jumps over the lazy dog') == ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('quick brown fox jumps over the lazy dog') == ['quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('the,quick,brown,fox,jumps,over,the,lazy,dog') == ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('the,quick,brown,fox,jumps,over,the,lazy,dog') == ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('the,quick,brown,fox,jumps,over,the,lazy,dog') == ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_words('Hi') == ['Hi']\nassert     split_words('Hi, welcome to the world of python') == ['Hi', 'welcome', 'to', 'the', 'world', 'of', 'python']\nassert     split_words('Hi, welcome to the world of python, hello!') == ['Hi', 'welcome', 'to', 'the', 'world', 'of', 'python', 'hello', '!']\nassert     split_words('Hi, welcome to the world of python, hello! world!') == ['Hi', 'welcome', 'to', 'the', 'world', 'of', 'python', 'hello', '!', 'world', '!']\nassert     split_words('Hi, welcome to the world of python, hello! world!') == ['Hi', 'welcome', 'to', 'the', 'world', 'of', 'python', 'hello', '!', 'world', '!']\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sorted([1,2,3])\nassert     is_sorted([1,2,2,3])\nassert     not is_sorted([1,2,3,1])\nassert     not is_sorted([1,3,2])\nassert     not is_sorted([])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sorted(range(100)) == True\nassert     is_sorted([-10, -100, 0, 1, 10]) == False\nassert     is_sorted([-10, -100, 1, 10]) == False\nassert     is_sorted([1, 10, -10]) == False\nassert     is_sorted([1, 2, 3, 4]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 2, 3, 4, 3, 2, 1]) == False\nassert     is_sorted([1, 2, 3, 4, 5, 5]) == True\nassert     is_sorted([5, 4, 3, 2, 1]) == True\nassert     is_sorted([1, 2, 3]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nassert is_sorted([1, 2, 2, 3]) == True\nassert is_sorted([1, 3, 2, 2]) == False\nassert is_sorted([]) == True\nassert is_sorted([1, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5])\nassert     is_sorted([1, 2, 3, 4, 2]) == False\nassert     is_sorted([1, 1, 1, 1]) == True\nassert     is_sorted([]) == True\nassert     is_sorted([1, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 5, 4, 3, 2]) == False\nassert     is_sorted([1, 2, 3, 2, 1]) == False\nassert     is_sorted([3, 2, 1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 2, 3, 3]) == True\nassert     is_sorted([1, 3, 2, 3]) == False\nassert     is_sorted([3, 2, 3, 3]) == False\nassert     is_sorted([1, 1, 1, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (is_sorted([1,2,3,4,5]) == True)\nassert     (is_sorted([1,2,3,3,4]) == False)\nassert     (is_sorted([1,1,1,1,2,2,3,3,4,4]) == False)\nassert     (is_sorted([]) == True)\nassert     (is_sorted([1,2,3,4,5,6]) == True)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_sorted([])\nassert     is_sorted([2, 1])\nassert     is_sorted([1, 2, 3])\nassert     is_sorted([1, 2, 3, 4])\nassert     is_sorted([1, 2, 2, 4, 6])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5])\nassert     is_sorted([1, 2, 2, 3, 4, 5])\nassert     is_sorted([1, 1, 2, 3, 4, 5])\nassert     is_sorted([5, 4, 3, 2, 1])\nassert     is_sorted([1, 2, 3, 4, 5, 5, 5])\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 3:\n        print \"please input two integers as input\"\n    else:\n        interval1 = tuple(map(int, sys.argv[1].split(\",\")))\n        interval2 = tuple(map(int, sys.argv[2].split(\",\")))\n        print intersection(interval1, interval2"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersection((1, 2), (3, 5)) == (2, 3)\nassert     intersection((1, 2), (1, 5)) == (1, 2)\nassert     intersection((1, 2), (5, 7)) == (NO, NO)\nassert     intersection((1, 4), (5, 7)) == (NO, NO)\nassert     intersection((5, 8), (1, 4)) == (NO, NO)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (3, 4)) == \"NO\"\nassert     intersection((1, 3), (3, 5)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"NO\"\nassert     intersection((1, 3), (1, 2)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert \nassert intersection(1, 3) == \"YES\"\nassert intersection(2, 4) == \"NO\"\nassert intersection(1, 2) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersection(2, 3) == \"YES\"\nassert     intersection(1, 4) == \"NO\"\nassert     intersection(1, 1) == \"YES\"\nassert     intersection(2, 4) == \"NO\"\nassert     intersection(2, 2) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersection(interval1 = (1, 2), interval2 = (1, 3)) == 'NO'\nassert     intersection(interval1 = (1, 3), interval2 = (2, 4)) == 'YES'\nassert     intersection(interval1 = (1, 3), interval2 = (1, 4)) == 'YES'\nassert     intersection(interval1 = (1, 3), interval2 = (2, 3)) == 'YES'\nassert     intersection(interval1 = (1, 3), interval2 = (2, 5)) == 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\"\"\"\ninput\n10\n5 10\n6 11\n7 12\n7 9\n8 8\n8 11\n9 10\n10 11\n10 9\n11 12\n\noutput\nNO\n\ninput\n10\n5 10\n6 11\n7 12\n7 9\n8 8\n8 11\n9 10\n10 11\n10 9\n11 12\n\noutput\nNO\n\ninput\n10\n5 10\n6 11\n7 12\n7 9\n8 8\n8 11\n9 10\n10 11\n10 9\n11 12\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 2)) == \"NO\"\nassert     intersection((1, 2), (1, 3)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersection((2, 3), (4, 5)) == \"YES\"\nassert     intersection((5, 6), (4, 5)) == \"NO\"\nassert     intersection((2, 3), (1, 3)) == \"NO\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 4), (2, 3)) == \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prod_signs( [1, 2, 3, 4, 5] ) == (5*1*1 + 5*1*-1 + 5*2*1 + 5*2*-1 + 5*3*1 + 5*3*-1)\nassert     prod_signs( [0, 0, 0, 0, 0] ) == (0*1*1 + 0*1*-1 + 0*2*1 + 0*2*-1 + 0*3*1 + 0*3*-1)\nassert     prod_signs( [1, -2, 3, 4, -5] ) == (5*1*1 + 5*1*-1 + 5*2*1 + 5*2*-1 + 5*3*1 + 5*3*-1)\nassert     prod_signs( [-1, 2, -3, 4, -5] ) == (5*1*1 + 5*1*-1 + 5*2*1 + 5*2*-1 + 5*3*-1 + 5*3*1)\n\nprint('The value of prod_signs is:'+ str(prod_signs( [1, 2, 3, 4, 5] )))\nprint('Successfully finished exercise 6!')\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prod_signs([3, -2, -4, -1, 2, 1]) == -13, \"Check1\"\nassert     prod_signs([]) == None, \"Check2\"\nassert     prod_signs([-2, -1, -4, -1, 1, 2]) == -13, \"Check3\"\nassert     prod_signs([0, 1, -1, 1, -1]) == -3, \"Check4\"\nassert     prod_signs([-5, -3, -1, 1, 3, 4]) == -12, \"Check5\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([-2, -1, 0, 1, 2]) == 0\nassert     prod_signs([-2, -1, 0, 1, 2]) == -4\nassert     prod_signs([-2, -1, 0, 1, 2]) == -4\nassert     prod_signs([-2, -1, 0, 1, 2]) == -4\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prod_signs([1,2,-3,4]) == 0\nassert     prod_signs([1,-2,3,4]) == 0\nassert     prod_signs([-1,2,3,4]) == 0\nassert     prod_signs([-1,-2,-3,-4]) == 0\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prod_signs([1, 2, 3]) == 1\nassert     prod_signs([1, -2, 3]) == 1\nassert     prod_signs([-1, 2, 3]) == 1\nassert     prod_signs([]) == None\nassert     prod_signs([0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, -2, 3]) == 6\nassert     prod_signs([1, -2, 3, -4, 5, 6]) == 30\nassert     prod_signs([-3, -2, -1, 0, 1, 2, 3]) == -18\n\n\ndef min_max(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    min and max of the array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prod_signs([-1, -2, -3]) == -9\nassert     prod_signs([1, 2, 3]) == -6\nassert     prod_signs([1, 2, 3, 4]) == -24\nassert     prod_signs([-1, -2, -3, -4]) == -24\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prod_signs([1,2,3,4,5]) == 15\nassert     prod_signs([-1,1,0]) == 1\nassert     prod_signs([-1,-2,3,4,5]) == -15\nassert     prod_signs([]) == None\nassert     prod_signs([1,0,0]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prod_signs([])    == None\nassert     prod_signs([1])    == 0\nassert     prod_signs([1, 2])    == 0\nassert     prod_signs([1, 2, 3])    == 0\nassert     prod_signs([-1, 2, -3])    == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prod_signs([3, -2, 1, 0]) == -3\nassert     prod_signs([-2, 0, -1]) == 0\nassert     prod_signs([-2, 3, -1]) == -3\nassert     prod_signs([3, 3, 3]) == 3\nassert     prod_signs([3, 3, 0]) == 3\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minPath(\n                [[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], \n                4) == [1, 2, 3, 4]\nassert     minPath(\n                [[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], \n                2) == [1, 2, 3, 4]\nassert     minPath(\n                [[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], \n                5) == [1, 2, 3, 4]\nassert     minPath(\n                [[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], \n                1) == [1]\nassert     minPath(\n                [[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], \n                8) == [1, 2, 3, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minPath(\n                [[1,3,1,3,1,3,1,3],\n                 [1,2,3,2,1,2,3,2],\n                 [1,2,1,2,1,2,1,2],\n                 [1,1,1,1,1,1,1,1]], 3) == [1,2,1,1,1,1,1,1]\nassert     minPath(\n                [[1,1,1,1,1,1,1,1],\n                 [1,1,1,1,1,1,1,1],\n                 [1,1,1,1,1,1,1,1],\n                 [1,1,1,1,1,1,1,1]], 1) == [1]\nassert     minPath(\n                [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,41"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 3]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 4]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minPath(grid, 3) == [3, 2, 1, 3, 2, 1, 3]\nassert     minPath(grid, 4) == [4, 3, 2, 4, 3, 2, 4]\nassert     minPath(grid, 1) == [1]\nassert     minPath(grid, 2) == [2, 1]\nassert     minPath(grid, 5) == [1, 2, 1, 3, 2, 1, 3]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minPath(grid, k) == [5, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     minPath(grid, 1) == [1]\nassert     minPath(grid, 2) == [5, 1]\nassert     minPath(grid, 3) == [5, 1, 1, 1]\nassert     minPath(grid, 4) == [5, 1, 1, 1, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minPath([[2, 1, 3], [6, 5, 4], [7, 8, 9]], 5) == [5, 4, 9]\nassert     minPath([[7, 1, 3], [6, 5, 4], [8, 2, 9]], 6) == [7, 1, 3, 6, 5, 4]\nassert     minPath([[7, 1, 3], [6, 5, 4], [8, 2, 9]], 4) == [7, 1, 3, 8]\nassert     minPath([[2, 1, 3], [6, 5, 4], [7, 8, 9]], 1) == [1, 2, 3]\nassert     minPath([[2, 1, 3], [6, 5, 4], [7, 8, 9]], 2) == [2, 1, 3, 7]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 4) == [1,2,3,4]\nassert     minPath([[2,3,4],[5,6,7],[8,9,10]], 4) == [2,3,4]\nassert     minPath([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]], 3) == [1,2,3]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,3]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 2) == [1,2]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minPath(grid = [[1,2,3,4,5],[16,17,18,19,6],[15,24,25,20,7],[14,23,22,21,8],[13,12,11,10,9]], k = 3) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\nassert     minPath(grid = [[2,1,2,3],[3,2,3,4],[4,3,4,5]], k = 2) == [1,2,2,3,3,4,4,5]\nassert     minPath(grid = [[1,2,3,4,5],[16,17,18,19,6],[15,24,25,20,7],[14,23,22,21,8],[13,12,11,10,9]], k = 6) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minPath(\n                [[1, 2, 3, 4, 5, 6], \n                [7, 8, 9, 10, 11, 12], \n                [13, 14, 15, 16, 17, 18], \n                [19, 20, 21, 22, 23, 24], \n                [25, 26, 27, 28, 29, 30]],\n                2) == [2, 6]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 3]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 3]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [1, 2, 3, 4]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tri(2) == 1\nassert     tri(3) == 2\nassert     tri(4) == 3\nassert     tri(5) == 4\nassert     tri(6) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4)\nassert     tri(7) == 8\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1\nassert     tri(3) == 2\nassert     tri(4) == 3\nassert     tri(5) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tri(1) == 3, \"Incorrect result\"\nassert     tri(2) == 1 + (2 / 2) == 2, \"Incorrect result\"\nassert     tri(3) == tri(2) + tri(1) + tri(4) == 2 + 3 + 3 == 8, \"Incorrect result\"\nassert     tri(4) == tri(3) + tri(2) + tri(1) == 8, \"Incorrect result\"\nassert     tri(5) == tri(4) + tri(3) + tri(2) == 8 + 5 + 5 == 19, \"Incorrect result\"\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1\nassert     tri(4) == 3\nassert     tri(5) == 5\nassert     tri(8) == 21\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4)\nassert     tri(5) == tri(4) + tri(3) + tri(7)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(3) == 3\nassert     tri(4) == 1 + (3 / 2) + (3 / 2) + (3 / 2) == 1 + 2 + 4 + 3 == 6\nassert     tri(5) == 1 + (5 / 2) + (5 / 2) + (5 / 2) + (5 / 2) + (5 / 2) + (5 / 2) == 2 + 5 + 8 + 15 + 22 + 32 + 42 + 50 == 50\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(3) == tri(2) + tri(1) + tri(3) == 3 + 2 + 1 == 4\nassert     tri(4) == tri(3) + tri(2) + tri(4) == 3 + 2 + 4 == 5\nassert     tri(5) == tri(4) + tri(3) + tri(5) == 5 + 4 + 3 == 8\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tri(1) == 1\nassert     tri(2) == 1\nassert     tri(3) == 2\nassert     tri(4) == 3\nassert     tri(5) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         tri(1) == 3\nassert         tri(2) == 1\nassert         tri(3) == 2\nassert         tri(4) == 3\nassert         tri(5) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digits(45) == 0\nassert     digits(12345) == 1\nassert     digits(2345) == 3\nassert     digits(1234) == 2\nassert     digits(12356) == 3\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digits(4321) == 123\nassert     digits(7) == 7\nassert     digits(2) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     1 == digits(1)\nassert     2 == digits(2)\nassert     12 == digits(12)\nassert     72 == digits(72)\nassert     600 == digits(600)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\nprint digits(12)\nassert \n\nprint digits(24)\nassert \n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digits(87) == 2\nassert     digits(59) == 6\nassert     digits(22) == 22\nassert     digits(38) == 19\nassert     digits(40) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 0\nassert     digits(4) == 0\nassert     digits(6) == 1\nassert     digits(16) == 1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digits(123) == 3\nassert     digits(2) == 0\nassert     digits(874) == 4\nassert     digits(0) == 0\n\ndef increment(n):\n    \"\"\"Return the smallest positive integer containing the same digits as n, but\n    with one more \"1\" than n.\"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digits(12) == 2\nassert     digits(123) == 6\nassert     digits(1111) == 2\nassert     digits(123456789) == 45\nassert     digits(0) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digits(9) == 1\nassert     digits(5) == 5\nassert     digits(7) == 21\nassert     digits(24) == 84\nassert     digits(29) == 59\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nassert digits(12) == 2\nassert digits(245) == 1\nassert digits(99) == 99\nassert digits(10) == 1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_nested(\"()\") == True\nassert     is_nested(\"([])\") == True\nassert     is_nested(\"([])()()()\") == True\nassert     is_nested(\"([])[])\") == False\nassert     is_nested(\"([()])\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_nested(\"(((([]))))\") == True\nassert     is_nested(\"[]]\") == False\nassert     is_nested(\"[[()]]\") == True\nassert     is_nested(\"()[]{}\") == True\nassert     is_nested(\"(]\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_nested('[]()') == True, 'is_nested(\"[]()\")'\nassert     is_nested('[]'    ) == True, 'is_nested(\"[]\")'\nassert     is_nested('()[]') == True, 'is_nested(\"()[]\")'\nassert     is_nested('(]') == False, 'is_nested(\"(]\")'\nassert     is_nested('([)]') == False, 'is_nested(\"([)]\")'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_nested('([])[]({})') == True\nassert     is_nested('[{[])') == False\nassert     is_nested('{[}([])') == False\nassert     is_nested('([)]') == False\nassert     is_nested('([)]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_nested('()()()') == True\nassert     is_nested('(())') == True\nassert     is_nested('))') == False\nassert     is_nested('())(())(') == False\nassert     is_nested('(((())))') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_nested('([]())') == True, \"Error: ()()\"\nassert     is_nested('([)]') == False, \"Error: ])\"\nassert     is_nested('((') == False, \"Error: ((\"\nassert     is_nested('[)]') == False, \"Error: [)]\"\nassert     is_nested('[[)]') == False, \"Error: [[)]\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_nested(\"[]()\") == True\nassert     is_nested(\"[()]\") == True\nassert     is_nested(\"[(])\") == False\nassert     is_nested(\"(()[])\") == True\nassert     is_nested(\"[())\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_nested('foo(bar)') == True\nassert     is_nested('a(b(c)d)') == True\nassert     is_nested('(a(b))') == True\nassert     is_nested('((a))') == True\nassert     is_nested('(((a)))') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_nested('([()])') == True, \"Test 1\"\nassert     is_nested('[()]') == False, \"Test 2\"\nassert     is_nested('[(])') == False, \"Test 3\"\nassert     is_nested('(((([()]))))') == True, \"Test 4\"\nassert     is_nested('[(()][)()]') == True, \"Test 5\"\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_nested('[()())') == True\nassert     is_nested('[())') == False\nassert     is_nested('(([]){}())') == True\nassert     is_nested('([{}])') == False\nassert     is_nested('[([])]') == False\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 55\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 33840\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4]) == 26\nassert     sum_squares([1.0,2.0,3.0,4.0]) == 26.0\nassert     sum_squares([-1,-2,-3,-4]) == 41\n\n\ndef inner_product(list_1, list_2):\n    \"\"\"You are given two lists. Each list consists of numbers.\n    You need to return the inner product of the two lists,\n    consider each list to be the vector space, and\n    that is, the vector that you are given is the inner product\n    of these two vectors.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 14\nassert     sum_squares([-1, -2, -3, -4]) == 10\nassert     sum_squares([1.1, 2.2, 3.3, 4.4]) == 14.49\nassert     sum_squares([-1.1, -2.2, -3.3, -4.4]) == 10.49\nassert     sum_squares([3.3, 4.4, 5.5, 6.6]) == 61.36\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \nassert sum_squares([1,2,3]) == 14\nassert sum_squares([1,-2,3]) == 8\nassert sum_squares([1,2,3,4,5]) == 55\nassert sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 5\nassert     sum_squares([1,2,3]) == 4\nassert     sum_squares([-1,-2,-3,-4,-5]) == -15\nassert     sum_squares([]) == 0\n\ndef main():\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([2, 3, 4]) == 25\nassert     sum_squares([1, 2, 3]) == 14\nassert     sum_squares([0]) == 0\nassert     sum_squares([]) == 0\nassert     sum_squares([-1, -2, -3]) == 55\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4]) == 25\nassert     sum_squares([-1,-2,-3,-4]) == 84\nassert     sum_squares([0,0,0]) == 0\nassert     sum_squares([5,6,7,8,9,10,11,12]) == 385\nassert     sum_squares([-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]) == 43919\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([1.5, -0.8, 0.7, 1.4]) == 1.93\nassert     sum_squares([-0.7, -0.7, -0.3, 0.3, 0.1]) == 0.33\nassert     sum_squares([0.7, -0.7, -0.3, 0.3, 0.1]) == 0.99\n\ndef main():\n    # You can use this to test your function.\n    # Any code inside this `if` statement will be ignored by the automarker.\n    if __name__ == '__main__':\n        # Call your function with first example in the question.\n        # change the values and then the function name\n        print(sum_squares([-1.5, -0.8, 0.7, 1.4]))\n        print(sum_squares([-0.7, -0.7, -0.3, 0.3, 0.1]))\n        print(sum_squares([0.7, -0.7, -0.3, 0.3, 0.1]))\n\nmain("
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([3, 4, 5]) == 29, \\\n        'sum_squares([3, 4, 5]) == 29'\nassert     sum_squares([4, 5, 6]) == 30, \\\n        'sum_squares([4, 5, 6]) == 30'\nassert     sum_squares([5, 6, 7]) == 61, \\\n        'sum_squares([5, 6, 7]) == 61'\nassert     sum_squares([6, 7, 8]) == 72, \\\n        'sum_squares([6, 7, 8]) == 72'\nassert     sum_squares([7, 8, 9]) == 81, \\\n        'sum_squares([7, 8, 9]) == 81'\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 55\nassert sum_squares([0, 1, 2, 3, 4, 5]) == 55\nassert sum_squares([-1, -2, -3, -4, -5]) == 55\nassert sum_squares([-1.1, -2.2, -3.3, -4.4, -5.5]) == 55\nassert sum_squares([]) == 0\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('xyz') == True\nassert     check_if_last_char_is_a_letter('abc def') == True\nassert     check_if_last_char_is_a_letter('a b c') == False\nassert     check_if_last_char_is_a_letter('abc') == False\nassert     check_if_last_char_is_a_letter('123') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('hello world') == True\nassert     check_if_last_char_is_a_letter('hello') == False\nassert     check_if_last_char_is_a_letter('hello world!') == False\nassert     check_if_last_char_is_a_letter('hello world.!') == False\nassert     check_if_last_char_is_a_letter('hello world!x') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('hello!') == False\nassert     check_if_last_char_is_a_letter('hello, world!') == True\nassert     check_if_last_char_is_a_letter('hello world!') == False\nassert     check_if_last_char_is_a_letter('hello, world! #!') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('Alemania is great!') == True,    'incorrect'\nassert     check_if_last_char_is_a_letter('Alemania is great!') == False,    'incorrect'\nassert     check_if_last_char_is_a_letter('#') == False,    'incorrect'\nassert     check_if_last_char_is_a_letter('Alemania is great!') == True,    'incorrect'\nassert     check_if_last_char_is_a_letter('Country!') == True,    'incorrect'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello World\") == True\nassert     check_if_last_char_is_a_letter(\"Hello World!\") == False\nassert     check_if_last_char_is_a_letter(\"Hello World. How are you?\") == False\nassert     check_if_last_char_is_a_letter(\"Hi There\") == False\nassert     check_if_last_char_is_a_letter(\"what is the meaning of life?\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('1 2 3 4 5 6 7') == False\nassert     check_if_last_char_is_a_letter('1 2 3 4 5 6 7 8') == True\nassert     check_if_last_char_is_a_letter('1 2 3 4 5 6 7 8 9') == False\nassert     check_if_last_char_is_a_letter('1 2 3 4 5 6 7 8 9 0') == True\nassert     check_if_last_char_is_a_letter('1 2 3 4 5 6 7 8 9 0 1') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('hello world') == False\nassert     check_if_last_char_is_a_letter('hello') == True\nassert     check_if_last_char_is_a_letter('hello!') == True\nassert     check_if_last_char_is_a_letter('hello.world') == False\nassert     check_if_last_char_is_a_letter('hello, world!') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter('Hello') == True\nassert     check_if_last_char_is_a_letter('Hello World') == True\nassert     check_if_last_char_is_a_letter('helloWorld') == False\nassert     check_if_last_char_is_a_letter('hello world') == False\n\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello\") == True\nassert     check_if_last_char_is_a_letter(\"Hello World\") == False\nassert     check_if_last_char_is_a_letter(\"Hello World, I'm here\") == False\nassert     check_if_last_char_is_a_letter(\"Hello World, I'm here, and hello\") == True\n\ndef get_last_word(txt):\n    '''\n    Create a function that takes a string and returns the last word in it.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello world!\") == True\nassert     check_if_last_char_is_a_letter(\"HELLO WORLD!\") == True\nassert     check_if_last_char_is_a_letter(\"This is a very simple test!\") == True\nassert     check_if_last_char_is_a_letter(\"This is a very simple test!\") == False\nassert     check_if_last_char_is_a_letter(\"This is a very simple test!\") == False\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         can_arrange([1, 1, 1, 1]) == 0\nassert         can_arrange([1, 2, 3, 4]) == -1\nassert         can_arrange([1, 2, 3, 5]) == -1\nassert         can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1\nassert         can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     can_arrange([1, 3, 3, 0, 5]) == 1\nassert     can_arrange([1, 1, 1, 1]) == -1\nassert     can_arrange([1, 5, 1, 1]) == 2\nassert     can_arrange([1, 3, 2, 5]) == 3\nassert     can_arrange([1, 3, 2, 5, 2, 1, 1]) == 4\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     can_arrange([1, 2, 3, 4, 4]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 5]) == 4\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         can_arrange([6,5,4,3,1]) == 0\nassert         can_arrange([1,2,3,4,5]) == -1\nassert         can_arrange([1,2,4,3,5]) == 1\nassert         can_arrange([1,2,3,5,4]) == 2\nassert         can_arrange([1,2,3,4,5]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     can_arrange([1,2,3,4,5]) == 1\nassert     can_arrange([1,2,4,5,3]) == -1\nassert     can_arrange([1,3,2,4,5]) == 2\nassert     can_arrange([1,3,2,4,5,6]) == -1\nassert     can_arrange([1,3,2,4,5,8]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     can_arrange([2, 1, 3, 4, 5]) == -1\nassert     can_arrange([2, 1, 4, 3, 5]) == 1\nassert     can_arrange([3, 2, 1, 4, 5]) == 2\nassert     can_arrange([3, 2, 4, 1, 5]) == 3\nassert     can_arrange([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     can_arrange([2,5,1,4,3]) == -1\nassert     can_arrange([3,4,1,6,5]) == 2\nassert     can_arrange([1,2,3,4,5,6,7,8,9]) == -1\nassert     can_arrange([1,2,3,4,5,6]) == 4\nassert     can_arrange([1,3,4,6,7,8,9]) == -1\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([-3, -2, -1, 0, 1, 2, 3, 4]) == (-3, 4)\nassert     largest_smallest_integers([0, 1, 2, 3, 4]) == (None, None)\nassert     largest_smallest_integers([4, 3, 2, 1, 0]) == (4, 0)\nassert     largest_smallest_integers([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == (None, -9)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-9, -8)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([-2, -6, -11]) == (-2, 6)\nassert     largest_smallest_integers([1, 3, 5]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6]) == (6, 1)\n\ndef smallest_greatest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the smallest of negative integers, and 'b' is the largest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    '''\n    pass\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([2, 3, 8, -5, -1]) == (-1, 2)\nassert     largest_smallest_integers([4, 5, 6, 8, 2, 3, 1]) == (2, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8]) == (8, 1)\nassert     largest_smallest_integers([]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([-2, -1, 0, 1, 2]) == (-1, 1)\nassert     largest_smallest_integers([-2, 0, -1, 1, 2]) == (None, 2)\nassert     largest_smallest_integers([-2, 1, -1, 1, 2]) == (1, -1)\nassert     largest_smallest_integers([-1, 0, -1, 1, 2]) == (None, None)\nassert     largest_smallest_integers([-1, 1, 2]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([-3, -6, -2, -2, 2, 5, 2, 2]) == (-2, 2)\nassert     largest_smallest_integers([-3, -6, -2, -2, 2, 0, 2, 2]) == (None, None)\nassert     largest_smallest_integers([-3, -6, -2, -2, 2, 0, 2, 2, 2]) == (-2, -2)\nassert     largest_smallest_integers([-3, -6, -2, -2, 2, 0, 2, 2, 5]) == (-2, 2)\nassert     largest_smallest_integers([-3, -6, -2, -2, 2, 0, 2, 2, 5, 2, 3]) == (-2, 2)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers(['abc', '-def', 'xyz']) == (None, None)\nassert     largest_smallest_integers([-123, 1, -2, 8, 4, 3]) == (-2, 1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, -7, -8, -9]) == (1, 8)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-1, 9)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([1, -2, -3, 4, 5, -6, 7, -8, 9]) == (5, -8), \"Test 1\"\nassert     largest_smallest_integers([1, -2, -3, -4, -5, -6]) == (-6, -3), \"Test 2\"\nassert     largest_smallest_integers([1, -2, -3, -4, -5]) == (None, None), \"Test 3\"\nassert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (None, None), \"Test 4\"\nassert     largest_smallest_integers([1]) == (1, 1), \"Test 5\"\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([-6, -6, -2, -7, -4, 5, 5, 2])     == (-2, 2)\nassert     largest_smallest_integers([3, 6, -2, -7, -4])                 == None\nassert     largest_smallest_integers([-7, -7, -7, -2, -2, -2, -1, -1, -1])     == (-1, -1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, 1)\nassert     largest_smallest_integers([3, 4, 5, -10, -8, -2, -1]) == (None, 10)\nassert     largest_smallest_integers([-1, -1, -2, -3, -4, -5]) == (-1, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1, 2, -3, -4, -5, 6]) == (None, -5)\nassert     largest_smallest_integers([1, -2, -3, -4, -5, 6]) == (-5, 1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([2, 5, 1, 4, 3]) == (4, 3)\nassert     largest_smallest_integers([2, 5, 1, -4, 3]) == (1, -4)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         compare_one(-1, 1) == -1\nassert         compare_one(1, 1) == 1\nassert         compare_one(-1, -1) == None\nassert         compare_one(-1, 1.1) == -1\nassert         compare_one(1.1, -1) == -1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare_one(1, 1) == None\nassert     compare_one(1.5, 1.5) == None\nassert     compare_one(1, 1.5) == 1.5\nassert     compare_one('1', 1) == 1\nassert     compare_one('1.5', 1.5) == 1.5\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare_one(1, 1.0) == 1, \"1 is equal to 1.0\"\nassert     compare_one(1, \"1\") == 1, \"1 is equal to 1\"\nassert     compare_one(1, \"2\") == 2, \"1 is less than 2\"\nassert     compare_one(1, \"10\") == 10, \"1 is greater than 10\"\nassert     compare_one(10, \"10\") == 10, \"10 is equal to 10\"\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare_one(None, 2) is None\nassert     compare_one(1, 2) == 2\nassert     compare_one(1.0, 2) == 2\nassert     compare_one('1.0', 2) == 2\nassert     compare_one('1.0', '2') == 2\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(2, 3) == 3\nassert     compare_one(1.3, 4) == 4\nassert     compare_one(2, 3.1) == 3.1\nassert     compare_one(\"1\", \"1\") == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(2.0, 2.0) == 2.0\nassert     compare_one('2', '2') == '2'\nassert     compare_one('', '') == None\nassert     compare_one(' ','') == None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare_one(10, 10) == 10\nassert     compare_one('10', '10') == 10\nassert     compare_one('10', 10) == 10\nassert     compare_one(10.1, 10.1) == 10.1\nassert     compare_one('10.1', '10.1') == 10.1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     compare_one(3, 3.0) == 3\nassert     compare_one(3, \"3\") == 3\nassert     compare_one(3.0, \"3.0\") == 3\nassert     compare_one(\"3\", 3) == 3\nassert     compare_one(\"3.0\", 3.0) == 3\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         compare_one(1, 1)         == 1\nassert         compare_one(1.0, 1.0)     == 1.0\nassert         compare_one(\"1\", 1)         == \"1\"\nassert         compare_one(1, \"1\")         == 1\nassert         compare_one(\"1.0\", 1.0)     == \"1.0\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(14) == False\nassert     is_equal_to_sum_even(16) == True\nassert     is_equal_to_sum_even(17) == False\nassert     is_equal_to_sum_even(28) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(9) == False\nassert     is_equal_to_sum_even(100) == True\nassert     is_equal_to_sum_even(101) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(9)\nassert     not is_equal_to_sum_even(10)\nassert     is_equal_to_sum_even(15)\nassert     is_equal_to_sum_even(16)\nassert     is_equal_to_sum_even(20)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(15) == False\nassert     is_equal_to_sum_even(16) == True\nassert     is_equal_to_sum_even(18) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(0) is True, \"0 is a sum of 4 even numbers\"\nassert     is_equal_to_sum_even(3) is False, \"3 is not a sum of 4 even numbers\"\nassert     is_equal_to_sum_even(4) is True, \"4 is a sum of 4 even numbers\"\nassert     is_equal_to_sum_even(5) is False, \"5 is not a sum of 4 even numbers\"\nassert     is_equal_to_sum_even(6) is True, \"6 is a sum of 4 even numbers\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(n = 7) is True\nassert     is_equal_to_sum_even(n = 9) is False\nassert     is_equal_to_sum_even(n = 11) is False\nassert     is_equal_to_sum_even(n = 13) is True\nassert     is_equal_to_sum_even(n = 17) is True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(23) == False\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(25) == True\nassert     is_equal_to_sum_even(30) == False\nassert     is_equal_to_sum_even(10) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(1) == False\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(4) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(30) == False\nassert     is_equal_to_sum_even(36) == False\nassert     is_equal_to_sum_even(49) == True\nassert     is_equal_to_sum_even(52) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(7) == True\nassert     is_equal_to_sum_even(20) == True\nassert     is_equal_to_sum_even(26) == True\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(5) == 120\nassert     special_factorial(10) == 3628800\nassert     special_factorial(100) == 3628800000"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     special_factorial(3)    == 1 * 2 * 3\nassert     special_factorial(5)    == 1 * 2 * 3 * 4 * 5\nassert     special_factorial(6)    == 1 * 2 * 3 * 4 * 5 * 6\nassert     special_factorial(10)    == 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10\nassert     special_factorial(15)    == 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(10) == 3628800\nassert     special_factorial(0) == 1\n\n\ndef special_factorial_recursive(n):\n    \"\"\"The function will receive an integer as input and should return the\n    special factorial of this integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * special_factorial_recursive(n-1)\n\n\ndef main():\n    \"\"\"A main function is required by the library to be called when the file is\n    executed. It is empty here.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     special_factorial(5) == 120, \"Special Factorial: 120\"\nassert     special_factorial(8) == 5040, \"Special Factorial: 5040\"\nassert     special_factorial(10) == 3628800, \"Special Factorial: 3628800\"\nassert     special_factorial(0) == 1, \"Special Factorial: 1\"\n\n\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     special_factorial(2) == 1\nassert     special_factorial(3) == 2\nassert     special_factorial(4) == 6\nassert     special_factorial(5) == 120\nassert     special_factorial(6) == 720\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fix_spaces(\"Hello world\") == \"Hello_world\"\nassert     fix_spaces(\"Hello   world\") == \"Hello__world\"\nassert     fix_spaces(\"Hello_world\") == \"Hello_world\"\nassert     fix_spaces(\"Hello  world\") == \"Hello_world\"\nassert     fix_spaces(\"Hi!\") == \"Hi_!\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fix_spaces(\"     \") == \"___\"\nassert     fix_spaces(\"  \") == \"__\"\nassert     fix_spaces(\"  a\") == \"a\"\nassert     fix_spaces(\"  a b\") == \"a_b\"\nassert     fix_spaces(\"  a b \") == \"a_b_\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fix_spaces(\"hello \") == \"hello_\"\nassert     fix_spaces(\"hello   \") == \"hello_\"\nassert     fix_spaces(\"hello   world\") == \"hello_world\"\nassert     fix_spaces(\" hello world\") == \"hello_world\"\nassert     fix_spaces(\"   hello world\") == \"hello_world\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fix_spaces(\"Hello World\")             == \"Hello_World\"\nassert     fix_spaces(\"Hello   World\")             == \"Hello_World\"\nassert     fix_spaces(\"Hello World     \")         == \"Hello_World\"\nassert     fix_spaces(\"Hello    World\")         == \"Hello_World\"\nassert     fix_spaces(\"Hello  World\")         == \"Hello_World\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello_world\") == \"hello_world\"\nassert     fix_spaces(\"hello   world\") == \"hello_world\"\nassert     fix_spaces(\"hello_world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (fix_spaces(\"I'm   Spaced\") == \"I_m_Spaced\")\nassert     (fix_spaces(\"I am spaced\") == \"I_am_spaced\")\nassert     (fix_spaces(\"I am  spaced\") == \"I_am_spaced\")\nassert     (fix_spaces(\"I am spaced \") == \"I_am_spaced_\")\nassert     (fix_spaces(\"I am    spaced\") == \"I_am_spaced_\")\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fix_spaces('  test') == 'test'\nassert fix_spaces('test') == 'test'\nassert fix_spaces('test   ') == 'test_'\nassert fix_spaces('test   _') == 'test__'\nassert fix_spaces(' test  ') == 'test'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fix_spaces('a b c') == 'a_b_c'\nassert     fix_spaces('a b   c') == 'a_b_c'\nassert     fix_spaces('a b   c') == 'a_b_c'\nassert     fix_spaces('a b  c') == 'a_b_c'\nassert     fix_spaces('a b  c') == 'a_b_c'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fix_spaces(\"I like pizza.\") == \"I_like_pizza.\"\nassert     fix_spaces(\"This is a test.\") == \"This_is_a_test.\"\nassert     fix_spaces(\"I like _this_.\") == \"I_like_this_.\"\nassert     fix_spaces(\"This is a test.\") == \"This_is_a_test.\"\n\ndef fix_spaces_alt(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    return text.replace(' ', '_').replace('-','').replace('_','')\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     file_name_check('abc.123') == 'No'\nassert     file_name_check('abc.123txt') == 'Yes'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.exe') == 'Yes'\nassert     file_name_check('abc.dll') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     file_name_check(\"1abc2.txt\") == \"No\"\nassert     file_name_check(\"1abc.txt\") == \"Yes\"\nassert     file_name_check(\"abc.txt\") == \"Yes\"\nassert     file_name_check(\"abc.exe\") == \"No\"\nassert     file_name_check(\"abc.dll\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     file_name_check('file_name_check_0.txt') == 'Yes'\nassert     file_name_check('file_name_check_1.txt') == 'No'\nassert     file_name_check('file_name_check_2.txt') == 'Yes'\nassert     file_name_check('file_name_check_3.txt') == 'No'\nassert     file_name_check('file_name_check_4.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     file_name_check(\"aaaaaaaa.txt\") == \"Yes\"\nassert     file_name_check(\"a1a2a3a4a5a6.txt\") == \"Yes\"\nassert     file_name_check(\"a1a2a3a4a5a6.exe\") == \"No\"\nassert     file_name_check(\"a1a2a3a4a5a6.dll\") == \"No\"\nassert     file_name_check(\"a1a2a3a4a5a6.b1b2b3b4b5b6b7b8b9b.exe\") == \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     file_name_check('program.exe')        == 'Yes'\nassert     file_name_check('program.txt')        == 'No'\nassert     file_name_check('program1.exe')    == 'No'\nassert     file_name_check('program.txt.txt')    == 'No'\nassert     file_name_check('program.exe.txt')    == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     file_name_check('hds1.txt') == 'Yes', 'Fail to pass the first test case'\nassert     file_name_check('hds2.txt') == 'Yes', 'Fail to pass the second test case'\nassert     file_name_check('hds3.txt') == 'No', 'Fail to pass the third test case'\nassert     file_name_check('hds4.txt') == 'No', 'Fail to pass the fourth test case'\nassert     file_name_check('hds5.txt') == 'No', 'Fail to pass the fifth test case'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     file_name_check('6_p1.py') == 'Yes'\nassert     file_name_check('2_p1.py') == 'No'\nassert     file_name_check('py.py') == 'No'\nassert     file_name_check('py.py2') == 'Yes'\nassert     file_name_check('12_p1.py') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     file_name_check('foo.txt') == 'Yes'\nassert     file_name_check('bar.exe') == 'Yes'\nassert     file_name_check('baz.dll') == 'Yes'\nassert     file_name_check('foo.txt.txt') == 'Yes'\nassert     file_name_check('foo.txt.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     file_name_check('1file.txt') == 'Yes'\nassert     file_name_check('file.txt') == 'Yes'\nassert     file_name_check('abc.txt') == 'No'\nassert     file_name_check('ab.txt') == 'Yes'\nassert     file_name_check('txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     file_name_check('my_file.txt') == 'Yes'\nassert     file_name_check('my_file.exe') == 'No'\nassert     file_name_check('my_file.dll') == 'Yes'\nassert     file_name_check('my_file.py') == 'No'\nassert     file_name_check('my_file.pyc') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [sum_squares(lst) for lst in [[1,2,3,4],[1,2,4,8], [1,8,9,16], [1,4,9,16]]] == [22,32,36,64]\nassert     [sum_squares(lst) for lst in [[1,2,3,4],[1,2,4,8], [1,8,9,16], [1,4,9,16],[9,16,17,18]]] == [45,108,119,162]\nassert     [sum_squares(lst) for lst in [[1,2,3,4],[1,2,4,8],[1,8,9,16], [1,4,9,16]]] == [22,32,36,64]\nassert     [sum_squares(lst) for lst in [[1,2,3,4],[1,2,4,8]]] == [22,32]\nassert     [sum_squares(lst) for lst in [[1,2,3,4],[1,2,4,8],[1,8,9,16]]] == [22,32,36,64]\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\nassert \n\nprint \"Passed all asserts\""
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 1**2 + 2**2 + 3**2 + 4**2\nassert     sum_squares([5, 6, 7, 8]) == 5**2 + 6**2 + 7**2 + 8**2\nassert     sum_squares([]) == 0\nassert     sum_squares([2]) == 2**2\nassert     sum_squares([1, 2]) == 1**2 + 2**2\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (sum_squares([2,3,4]) == 26)\nassert     (sum_squares([-1,-2,-3,-4]) == 54)\nassert     (sum_squares([3,3,3,3,3,3]) == 45)\nassert     (sum_squares([4,4,4,4,4,4,4]) == 64)\nassert     (sum_squares([1,2,3,4,5]) == 30)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [2, 3, 4, 7, 10, 19, 22, 25]     == sum_squares([int(x) for x in '1234710'])\nassert     [3, 12, 21, 18, 27, 38, 43, 50]     == sum_squares([int(x) for x in '23456738'])\nassert     [8, 30, 56, 72, 96, 108, 130, 144]     == sum_squares([int(x) for x in '34567890'])\nassert     [8, 10, 18, 28, 36, 44, 54, 64]     == sum_squares([int(x) for x in '45678910'])\n\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6]) == 21\nassert     sum_squares([-1, -2, -3, -4, -5, -6]) == -21\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 95401\nassert     sum_squares([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]) == -95401\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 41"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4, 5]) == 55\nassert     sum_squares([1, 2, 3, 4]) == 34\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 55\nassert     sum_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 55\nassert     sum_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([2,3,4,5,6,7,8,9,10,11,12]) == 1458,    \"test 1 failed\"\nassert     sum_squares([4,5,6,7,8,9,10,11,12]) == 286,    \"test 2 failed\"\nassert     sum_squares([3,4,5,6,7,8,9,10,11,12,13,14,15]) == 644,    \"test 3 failed\"\nassert     sum_squares([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400])\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1,2,3,4,5]) == (1 + 4 + 25)\nassert     sum_squares([1,2,3]) == (1 + 2 + 9)\nassert     sum_squares([1,2]) == (1 + 4)\n\nprint \"Test for sum_squares is correct!\"\n\n\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sum_squares([1,2,3,4,5,6,7,8,9,10]) == 55)\nassert     (sum_squares([1,2,3,4,5,6,7,8,9,10]) == 55)\nassert     (sum_squares([2,4,6,8]) == 59)\nassert     (sum_squares([2,4,6,8]) == 59)\nassert     (sum_squares([1,2,3,4,5,6,7,8,9,10]) == 55)\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"a b c\") == \"ab\"\nassert     words_in_sentence(\"a a a a\") == \"a\"\nassert     words_in_sentence(\"aa bb cc\") == \"abb\"\nassert     words_in_sentence(\"abc\") == \"abc\"\nassert     words_in_sentence(\"Hello world\") == \"Helo\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_in_sentence(\"Is this a sentence?\") == \"Is this a sentence\"\nassert     words_in_sentence(\"what is the purpose of life?\") == \"purpose of life\"\nassert     words_in_sentence(\"fifty five\") == \"fifty five\"\nassert     words_in_sentence(\"He likes cheese\") == \"He likes cheese\"\nassert     words_in_sentence(\"I\") == \"I\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_in_sentence(\"hello world\") == \"hello world\"\nassert     words_in_sentence(\"He was a good boy\") == \"He was a good boy\"\nassert     words_in_sentence(\"hello world, I am happy\") == \"hell world I am happy\"\nassert     words_in_sentence(\"hello\") == \"hello\"\nassert     words_in_sentence(\"hello, how are you\") == \"hello\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"what a wonderful day!\") == \"w a t w r u s h d y\"\nassert     words_in_sentence(\"hi bye bye\") == \"h i b b y\"\nassert     words_in_sentence(\"what's up\") == \"w s u p\"\nassert     words_in_sentence(\"hello\") == \"h e l l o\"\nassert     words_in_sentence(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_in_sentence('this is a test') == 'this is a test'\nassert     words_in_sentence('hello world') == 'hello world'\nassert     words_in_sentence('hello') == 'hello'\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    pass"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"hello world\") == \"helloworld\"\nassert     words_in_sentence(\"hello boy\") == \"helloboy\"\nassert     words_in_sentence(\"world hello boy\") == \"helloboyworld\"\nassert     words_in_sentence(\"hello boy hello boy\") == \"helloboyhelloboy\"\nassert     words_in_sentence(\"hello boy hello boy hello boy\") == \"helloboyhelloboyhelloboy\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"this is a sentence\") == \"is a is a sentence\"\nassert     words_in_sentence(\"this is a sentence\") == \"is a is a sentence\"\nassert     words_in_sentence(\"this is a sentence\") == \"is a is a sentence\"\nassert     words_in_sentence(\"this is a sentence\") == \"is a is a sentence\"\nassert     words_in_sentence(\"this is a sentence\") == \"is a is a sentence\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"Hey, I'm a programmer!\") == \"Hey\"\nassert     words_in_sentence(\"I am a programmer!\") == \"I\"\nassert     words_in_sentence(\"I am a programmer, not a programmer.\") == \"I\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\" \") == \" \"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"this is a sentence\") == \"this is a sentence\", \"test 1\"\nassert     words_in_sentence(\"\") == \"\", \"test 2\"\nassert     words_in_sentence(\"hi\") == \"hi\", \"test 3\"\nassert     words_in_sentence(\"a\") == \"a\", \"test 4\"\nassert     words_in_sentence(\"Is this a sentence?\") == \"Is this a sentence\", \"test 5\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"this is a test\") == \"is this a test\"\nassert     words_in_sentence(\"this is a string that is a sentence\") == \"is a string a sentence\"\nassert     words_in_sentence(\"this is a string that is a sentence, but it's very long\") == \"is a string a sentence\"\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     simplify(\"6/8\", \"8\") == True\nassert     simplify(\"4/8\", \"8\") == False\nassert     simplify(\"1/2\", \"2\") == True\nassert     simplify(\"2/2\", \"2\") == True\nassert     simplify(\"1/4\", \"4\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"5/4\", \"1/2\") == False\nassert     simplify(\"3/2\", \"1/2\") == False\nassert     simplify(\"10/2\", \"1/2\") == True\nassert     simplify(\"11/2\", \"1/2\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1/1\") == False\nassert     simplify(\"3/4\", \"1/2\") == False\nassert     simplify(\"5/8\", \"1/2\") == True\nassert     simplify(\"2/1\", \"1/3\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     simplify('2/2', '2/2') == True\nassert     simplify('2/3', '2/3') == False\nassert     simplify('4/2', '2/2') == True\nassert     simplify('2/5', '2/5') == True\nassert     simplify('1/5', '2/5') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     simplify('2', '3') == False\nassert     simplify('12', '3') == True\nassert     simplify('10', '1') == True\nassert     simplify('1', '1') == True\nassert     simplify('1/1', '1') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     simplify('1/3', '3') == True\nassert     simplify('7/5', '5') == True\nassert     simplify('2/4', '4') == False\nassert     simplify('6/4', '4') == True\nassert     simplify('15/4', '4') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     simplify(\"4/5\", \"5/7\") == True\nassert simplify(\"4/10\", \"1/3\") == False\nassert simplify(\"10/5\", \"1/5\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         simplify(\"1/2\", \"3/4\") == True\nassert         simplify(\"1/2\", \"3/4\") == False\nassert         simplify(\"1/2\", \"3/4\") == False\nassert         simplify(\"1/2\", \"1/2\") == True\nassert         simplify(\"2/2\", \"2/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     simplify(\"3/2\", \"7/5\") == True\nassert     simplify(\"3/2\", \"4/5\") == False\nassert     simplify(\"4/5\", \"9/5\") == True\nassert     simplify(\"6/5\", \"11/5\") == True\nassert     simplify(\"4/2\", \"5/3\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     simplify(\"2/3\", \"1\") == True\nassert     simplify(\"2/3\", \"2\") == False\nassert     simplify(\"2/3\", \"2/3\") == True\nassert     simplify(\"1/2\", \"2\") == False\nassert     simplify(\"1/3\", \"2/3\") == False\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     order_by_points([1, 14, 54, 754, 964, 1, 4, 2]) == [1, 1, 2, 4, 754, 964, 14, 54]\nassert     order_by_points([2, 1, 2, 5, 7, 2]) == [1, 2, 2, 2, 5, 7]\nassert     order_by_points([4, 2, 2, 4, 3, 3, 1, 4, 4, 4]) == [1, 2, 2, 3, 3, 4, 4, 4, 4, 4]\nassert     order_by_points([5, 4, 5, 2, 1, 4, 1]) == [1, 2, 4, 5, 1, 4, 5]\nassert     order_by_points([]) == []\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     order_by_points([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     order_by_points([5, 6, 7, 8, 9, 10, -1, -2, -3, -4]) == [-4, -3, -2, -1, 5, 6, 7, 8, 9, 10]\nassert     order_by_points([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     order_by_points([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] == order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nassert     [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1] == order_by_points([15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] == order_by_points([15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1] == order_by_points([5, 3, 4, 2, 7, 6, 1, 9, 8, 10, 11, 12, 13, 15, 14])\nassert     [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1] == order_by_points([5, 3, 4, 2, 7, 6, 1, 9, 8, 10, 11, 12, 13, 15, 14])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     order_by_points([6,3,1,0,2]) == [0,1,2,3,6]\nassert     order_by_points([0,2,2,2,1,1]) == [0,1,1,2,2,2]\nassert     order_by_points([9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     order_by_points([4,3,2,1,0]) == [0,1,2,3,4]\nassert     order_by_points([]) == []\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     order_by_points([3, 4, 1, 2, 0, 9, 7, 7, 8]) == [0, 1, 2, 3, 4, 7, 7, 8, 9]\nassert     order_by_points([0, 8, 5, 3, 5, 7, 2, 5, 3]) == [0, 3, 3, 5, 5, 7, 2, 8, 9]\nassert     order_by_points([]) == []\nassert     order_by_points([1]) == [1]\nassert     order_by_points([1, 1]) == [1, 1]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [3, 6, 1, 4, 2, 5]     == order_by_points([3, 6, 1, 4, 2, 5])\nassert     [3, 6, 1, 4, 2, 5]     == order_by_points([3, 6, 1, 4, 2, 5])\nassert     [3, 6, 1, 4, 2, 5]     == order_by_points([3, 6, 1, 4, 2, 5, 7, 9])\nassert     [3, 6, 1, 4, 2, 5]     == order_by_points([3, 6, 1, 4, 2, 5])\nassert     [3, 6, 1, 4, 2, 5]     == order_by_points([-1, -2, 1, 2, 3, 4, 5])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [7,9,2,4,8] == order_by_points([7,9,2,4,8])\nassert     [1,2,3] == order_by_points([3,2,1])\nassert     [5,3,7,2,8,9,1] == order_by_points([1,9,7,2,8,3,5])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     order_by_points([5, 9, 2, 4, 6, 8, 10]) == [5, 2, 4, 6, 8, 9, 10]\nassert     order_by_points([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\nassert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     order_by_points([111, 12, 111, 2, 13, 3, 111]) == [2, 3, 13, 12, 111, 111, 111]\nassert     order_by_points([3, 32, 123, 21, 1234, 0, 32]) == [0, 3, 1234, 21, 32, 32, 123]\nassert     order_by_points([9, 7, 3, 8, 5]) == [3, 5, 8, 7, 9]\nassert     order_by_points([]) == []\nassert     order_by_points([1]) == [1]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [4, 1, 2, 3] == order_by_points([3, 1, 4, 2])\nassert     [1, 3, 4, 2] == order_by_points([4, 1, 3, 2])\nassert     [1, 2, 3, 4] == order_by_points([4, 2, 3, 1])\nassert     [1, 2, 3, 4] == order_by_points([1, 4, 3, 2])\nassert     [1, 2, 3, 4] == order_by_points([4, 1, 2, 3])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     specialFilter([2, 1, 3, 5, 7, 8, 9])     == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9])     == 0\nassert     specialFilter([100, 1, 2, 3, 4, 5, 6, 7, 8, 9])     == 0\nassert     specialFilter([10, 1, 2, 3, 4, 5, 6, 7, 8, 9])     == 1\nassert     specialFilter([1, 10, 2, 3, 4, 5, 6, 7, 8, 9])     == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9, 10, 10, 10]) == 1\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8]) == 1\nassert     specialFilter([1, 3, 5, 7, 9, 10, 11, 13]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 2\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     specialFilter([8, 2, 3, 4, 5, 6, 7, 9, 1]) == 5\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     specialFilter([2, 3, 5, 7, 9, 1]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     specialFilter([2, 3, 5, 7, 9]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     specialFilter([4,2,10,2,1,3,5,7,9])         == 3\nassert     specialFilter([1,3,5,7,9])                 == 4\nassert     specialFilter([1,2,3,4,5,6,7,8,9])         == 0\nassert     specialFilter([-1,0,1,2,3,4,5,6,7,8,9])     == 5\nassert     specialFilter([-1,1,2,3,4,5,6,7,8,9])     == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef sudoku(grid):\n    \"\"\"Write a function that takes a 2D array representing a sudoku grid and \n    returns the number of cells in the grid that have a number from 1 to 9 in \n    the same row, same column, and same 3x3 box.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     specialFilter([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert     specialFilter([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     specialFilter([8,10,33,100]) == 1\nassert     specialFilter([8,10,33,100,13]) == 3\nassert     specialFilter([13,13,13]) == 3\nassert     specialFilter([33,100,13]) == 1\nassert     specialFilter([13,13,13,13]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\nassert     specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 9\nassert     specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 9\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert     specialFilter([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 5\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5]) == 2\nassert     specialFilter([1, 3, 5, 7, 9]) == 3\nassert     specialFilter([10, 11, 12, 13, 14]) == 4\nassert     specialFilter([13, 14, 15, 16, 17]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 4\nassert     specialFilter([1, 2, 3, 4]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert     specialFilter([]) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 1\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_max_triples(3) == 1\nassert     get_max_triples(5) == 2\nassert     get_max_triples(9) == 3\nassert     get_max_triples(100) == 25\nassert     get_max_triples(101) == 26\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 3\nassert     get_max_triples(4) == 6\nassert     get_max_triples(5) == 10\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 3\nassert     get_max_triples(3) == 3\nassert     get_max_triples(4) == 5\nassert     get_max_triples(5) == 8\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_max_triples(10) == 7\nassert     get_max_triples(100) == 10\nassert     get_max_triples(1000) == 24\nassert     get_max_triples(10000) == 540\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_max_triples(4) == 2\nassert     get_max_triples(9) == 3\nassert     get_max_triples(25) == 5\nassert     get_max_triples(35) == 5\nassert     get_max_triples(143) == 6\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_max_triples(5) == 2\nassert     get_max_triples(10) == 9\nassert     get_max_triples(15) == 13\nassert     get_max_triples(20) == 17\nassert     get_max_triples(25) == 19\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     bf('Venus', 'Earth') == ('Venus', 'Earth')\nassert     bf('Venus', 'Venus') == ('Venus',)\nassert     bf('Earth', 'Venus') == ('Venus',)\nassert     bf('Earth', 'Earth') == ('Earth',)\nassert     bf('Mars', 'Venus') == ('Earth', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     bf('Venus', 'Earth') == ('Venus', 'Earth', 'Mars', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars')\nassert     bf('Neptune', 'Mars') == ('Neptune', 'Mars')\nassert     bf('Jupiter', 'Saturn') == ('Jupiter', 'Saturn')\nassert     bf('Jupiter', 'Uranus') == ('Jupiter', 'Uranus')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bf('Mercury', 'Venus')     ==     ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Mercury')     ==     ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Venus')     ==     ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Venus')     ==     ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Uranus', 'Venus')     ==     ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Mercury\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Venus\", \"Earth\") == (\"Venus\", \"Earth\")\nassert     bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\")\nassert     bf(\"Mars\", \"Jupiter\") == (\"Mars\", \"Jupiter\")\nassert     bf(\"Jupiter\", \"Saturn\") == (\"Jupiter\", \"Saturn\")\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bf('Mercury', 'Venus') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Venus') == ('Mercury', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Venus') == ('Mercury', 'Earth', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Mercury') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Mercury') == ('Earth', 'Mars', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Venus\", \"Earth\", \"Mars\")\nassert     bf(\"Venus\", \"Earth\") == (\"Earth\", \"Mars\")\nassert     bf(\"Mars\", \"Jupiter\") == (\"Jupiter\", \"Saturn\")\nassert     bf(\"Jupiter\", \"Saturn\") == (\"Saturn\")\nassert     bf(\"Saturn\", \"Uranus\") == (\"Uranus\", \"Neptune\")\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     bf('mercury','venus') == ('mercury','venus')\nassert     bf('venus', 'earth') == ('venus', 'earth')\nassert     bf('earth','mars') == ('earth','mars')\nassert     bf('mars', 'jupiter') == ('mars', 'jupiter')\nassert     bf('jupiter','saturn') == ('jupiter','saturn')\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         sorted_list_sum([\"ab\", \"a\"]) == [\"a\", \"ab\"]\nassert         sorted_list_sum([\"ab\", \"a\", \"cd\"]) == [\"a\", \"ab\", \"cd\"]\nassert         sorted_list_sum([\"a\", \"ab\", \"cd\"]) == [\"a\", \"ab\", \"cd\"]\nassert         sorted_list_sum([\"ab\", \"a\", \"cd\", \"abc\", \"a\"]) == [\"a\", \"ab\", \"cd\", \"abc\", \"a\"]\nassert         sorted_list_sum([\"a\", \"ab\", \"cd\", \"abc\", \"a\", \"abcd\", \"abcdef\"]) == [\"a\", \"ab\", \"cd\", \"abc\", \"abcd\", \"abcdef\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sorted_list_sum(['a','f','e','d','b']) == ['a','b','d','e','f']\nassert     sorted_list_sum(['a','b','f','e','d']) == ['a','b','d','e','f']\nassert     sorted_list_sum(['a','b','b','a','b','b']) == ['a','b','b','a','b','b']\nassert     sorted_list_sum(['a','b','c','d','e','f']) == ['a','b','c','d','e','f']\nassert     sorted_list_sum(['c','a','e','d','b','a','b','b']) == ['a','b','a','b','c','d','e','f']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sorted_list_sum(['hi', 'how', 'are', 'you', 'bye', 'bye', 'goodbye']) == ['hi', 'how', 'are', 'you', 'bye']\nassert     sorted_list_sum(['hello', 'hi', 'how', 'are', 'you', 'bye', 'bye', 'goodbye']) == ['hello', 'hi', 'how', 'are', 'you', 'bye']\nassert     sorted_list_sum(['hello', 'hello', 'hello', 'hi', 'how', 'are', 'you', 'bye', 'bye', 'goodbye']) == ['hello', 'hello', 'hello', 'hi', 'how', 'are', 'you', 'bye']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sorted_list_sum(['test', 'test', 'test', 'test', 'test']) \\\n        == ['test', 'test', 'test', 'test', 'test']\nassert     sorted_list_sum(['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test']) \\\n        == ['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test']\nassert     sorted_list_sum(['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test']) \\\n        == ['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test']\nassert     sorted_list_sum(['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test']) \\\n        == ['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test', 'test']\nassert     sorted_list_sum(['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test']) \\\n        == ['test', 'test', 'test', 'test', 'test', 'test', 'test', 'test']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([\n                \"m\",\n                \"i\",\n                \"k\",\n                \"h\",\n                \"g\",\n                \"o\",\n                \"r\",\n                \"a\",\n                \"b\",\n                \"m\"\n            ]) == [\n                \"a\",\n                \"b\",\n                \"g\",\n                \"h\",\n                \"i\",\n                \"k\",\n                \"m\",\n                \"o\",\n                \"r\"\n            ]\nassert     sorted_list_sum([\n                \"w\",\n                \"p\",\n                \"s\",\n                \"t\",\n                \"o\",\n                \"n\",\n                \"m\",\n                \"l\",\n                \"e\",\n                \"q\",\n                \"d\"\n            ]) == [\n                \"a\",\n                \"b\",\n                \"d\",\n                \"e\",\n                \"g\",\n                \"i\",\n                \"k\",\n                \"m\",\n                \"o\",\n                \"r\",\n                \"s\",\n                \"t\",\n                \"w\",\n                \"p\",\n                \"n\",\n                \"q\"\n            ]\n\nassert     sorted_list_sum([\n                \"ab\",\n                \"ac\",\n                \"bc\",\n                \"cd\",\n                \"de\",\n                \"ef\",\n                \"fg\",\n                \"gh\",\n                \"hi\",\n                \"jk\",\n                \"kl\",\n                \"lm\",\n                \"no\",\n                \"op\",\n                \"pq\",\n                \"rs\",\n                \"tuv\",\n                \"wxy\",\n                \"yz\",\n                \"xy\",\n                \"z\",\n                \"yx\",\n                \"x\"\n            ]) == [\n                \"a\",\n                \"b\",\n                \"c\",\n                \"d\",\n                \"e\",\n                \"f\",\n                \"g\",\n                \"h\",\n                \"i\",\n                \"j\",\n                \"k\",\n                \"l\",\n                \"m\",\n                \"n\",\n                \"o\",\n                \"p\",\n                \"q\",\n                \"r\",\n                \"s\",\n                \"t\",\n                \"u\",\n                \"v\",\n                \"w\",\n                \"x\",\n                \"y\",\n                \"z\",\n                \"yx\",\n                \"xy\"\n            ]\n\n\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sorted_list_sum([ \"Matt\", \"Lilly\", \"Mike\", \"Agni\", \"Zoe\" ]) == \\\n             [ \"Agni\", \"Matt\", \"Lilly\", \"Zoe\", \"Mike\" ]\nassert     sorted_list_sum([\"Zoe\", \"Mike\", \"Matt\", \"Lilly\", \"Agni\"]) == \\\n             [ \"Agni\", \"Matt\", \"Lilly\", \"Zoe\", \"Mike\" ]\nassert     sorted_list_sum([\"Zoe\", \"Mike\", \"Matt\", \"Lilly\", \"Agni\", \"Zoe\"]) == \\\n             [ \"Agni\", \"Matt\", \"Lilly\", \"Zoe\", \"Zoe\", \"Mike\" ]\nassert     sorted_list_sum([\"Mike\", \"Lilly\", \"Agni\", \"Zoe\", \"Matt\", \"Zoe\"]) == \\\n             [ \"Agni\", \"Matt\", \"Lilly\", \"Zoe\", \"Mike\", \"Zoe\" ]\nassert     sorted_list_sum([\"Zoe\", \"Mike\", \"Lilly\", \"Agni\", \"Zoe\", \"Zoe\"]) == \\\n             [ \"Agni\", \"Matt\", \"Lilly\", \"Zoe\", \"Zoe\", \"Mike\" ]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sorted_list_sum([\"frodo\", \"front\", \"frost\"]) == [\"frodo\", \"front\"]\nassert     sorted_list_sum([\"abc\", \"ab\", \"abc\"]) == [\"abc\", \"ab\", \"abc\"]\nassert     sorted_list_sum([\"abc\", \"a\", \"abc\"]) == [\"abc\", \"a\"]\nassert     sorted_list_sum([]) == []\nassert     sorted_list_sum([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sorted_list_sum([2, 'a', 'b', 'c', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     sorted_list_sum([1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     sorted_list_sum([]) == []\nassert     sorted_list_sum(['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']) == ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']\nassert     sorted_list_sum(['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']) == ['abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc', 'abc']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sorted_list_sum(['asd', 'a', 'as', 'asd'])    == ['a', 'as', 'asd']\nassert     sorted_list_sum(['as', 'a', 'asd'])     == ['a', 'as', 'asd']\nassert     sorted_list_sum(['as', 'a', 'asd', 'asd', 'asd'])    == ['a', 'as', 'asd', 'asd', 'asd']\nassert     sorted_list_sum(['asd', 'a', 'asd', 'asd', 'asd'])    == ['a', 'as', 'asd', 'asd', 'asd']\nassert     sorted_list_sum(['asd', 'as', 'asd', 'asd', 'asd', 'as', 'asd'])    == ['a', 'as', 'asd', 'asd', 'asd', 'as', 'asd']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"a\", \"asd\", \"asdasd\", \"asdas\", \"asdasdasd\", \"asdasdasdasd\", \"asdasdsad\", \"asdasdsadasd\", \"asdasdasdsad\", \"asdasdsadasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\"]) == [\"a\", \"asd\", \"asdas\", \"asdasd\", \"asdasdasd\", \"asdasdsad\", \"asdasdsadasd\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\"]\nassert     sorted_list_sum([\"a\", \"asd\", \"asdasd\", \"asdas\", \"asdasdasd\", \"asdasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\", \"asdasdasdsad\", \"asdsadasdsad\"]) == [\"a\", \"asd\", \"asdas\", \"asdasd\", \"asdasdasd\", \"asdasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\", \"asdasdasdsad\", \"asdsadasdsad\"]\nassert     sorted_list_sum([\"a\", \"asd\", \"asdasd\", \"asdas\", \"asdasdasd\", \"asdasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\", \"asdasdasdsad\", \"asdsadasdsad\"]) == [\"a\", \"asd\", \"asdas\", \"asdasd\", \"asdasdasd\", \"asdasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\", \"asdasdasdsad\", \"asdsadasdsad\"]\nassert     sorted_list_sum([\"a\", \"asd\", \"asdasd\", \"asdas\", \"asdasdasd\", \"asdasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\", \"asdasdasdsad\", \"asdsadasdsad\"]) == [\"a\", \"asd\", \"asdas\", \"asdasd\", \"asdasdasd\", \"asdasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\", \"asdasdasdsad\", \"asdsadasdsad\"]\nassert     sorted_list_sum([\"a\", \"asd\", \"asdasd\", \"asdas\", \"asdasdasd\", \"asdasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\", \"asdasdasdsad\", \"asdsadasdsad\"]) == [\"a\", \"asd\", \"asdas\", \"asdasd\", \"asdasdasd\", \"asdasdsad\", \"asdsadsad\", \"asdsadasd\", \"asdsad\", \"asdsadasdasdasd\", \"asdasdasdsad\", \"asdsadasdsad\"]\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     x_or_y(2, -1, 1) == -1\nassert     x_or_y(4, -1, 1) == -1\nassert     x_or_y(3, -1, 1) == 1\nassert     x_or_y(5, -1, 1) == 1\nassert     x_or_y(2, 1, 1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     x_or_y(2,1,3) == 3\nassert     x_or_y(3,3,3) == 3\nassert     x_or_y(5,3,4) == 4\nassert     x_or_y(6,3,5) == 5\nassert     x_or_y(7,3,5) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     x_or_y(x, x, y) == x\nassert     x_or_y(x, y, x) == y\nassert     x_or_y(y, x, y) == y\nassert     x_or_y(y, y, y) == y\nassert     x_or_y(1, 1, 0) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     x_or_y(2, 2, 2) == 2\nassert     x_or_y(3, 2, 2) == 2\nassert     x_or_y(3, 2, 1) == 1\nassert     x_or_y(3, 2, 0) == 0\nassert     x_or_y(3, 3, 2) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     x_or_y(1, -1, 1) == -1\nassert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(3, 1, 1) == -1\nassert     x_or_y(4, 1, 1) == 1\nassert     x_or_y(5, 1, 1) == -1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     x_or_y(4, 1, 2) == 2\nassert x_or_y(2, 1, 2) == 2\nassert x_or_y(3, 1, 2) == 1\nassert x_or_y(7, 1, 2) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     x_or_y(12, 1, 3) == 1\nassert     x_or_y(42, 1, 2) == 3\nassert     x_or_y(23, 3, 2) == 3\nassert     x_or_y(49, 3, 2) == 2\nassert     x_or_y(30, 3, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     x_or_y(2, 2, 3) == 3\nassert     x_or_y(3, 2, 3) == 2\nassert     x_or_y(5, 2, 3) == 3\nassert     x_or_y(7, 2, 3) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     x_or_y(100, 3, 2) == 3\nassert     x_or_y(101, 3, 2) == 2\n\n\n\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     x_or_y(3, 3, 3) == 3\nassert     x_or_y(3, 2, 3) == 2\nassert     x_or_y(3, 3, 2) == 3\nassert     x_or_y(3, 3, 3) == 3\nassert     x_or_y(3, 3, 2) == 3\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) == 16\nassert     double_the_difference([1, 2, 3, -4]) == 12\nassert     double_the_difference([1, 2, 3, -4, 5, 6]) == 28\nassert     double_the_difference([]) == 0\nassert     double_the_difference([2.3]) == 4.8\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) == 0\nassert     double_the_difference([-1, 2, 3, 4]) == 0\nassert     double_the_difference([1, -2, 3, 4]) == 0\nassert     double_the_difference([-1, -2, 3, 4]) == 0\nassert     double_the_difference([3, 2, 1, 4]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     double_the_difference([2,3,7,8,9,10]) == 130\nassert     double_the_difference([]) == 0\nassert     double_the_difference([-1, -2, -3]) == 0\nassert     double_the_difference([2,3,5,8,9,10]) == 252\nassert     double_the_difference([2,3,5,8,9,10,13,14,17,18,19,20]) == 543\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef hello(name):\n    '''\n    Given a string name, return a greeting of the form \"Hello, <name>\".\n    '''\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 4*25\nassert     double_the_difference([1,-3,5]) == 3*25\nassert     double_the_difference([1,2,4,-5,6]) == 4*25\nassert     double_the_difference([-3,-2,-1]) == 8\nassert     double_the_difference([1,-1,1]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 14\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1,-2,-3,-4,-5]) == 70\nassert     double_the_difference([-1,-2,3,-4,-5]) == 70\nassert     double_the_difference([1,2,3,-4,-5]) == 14\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1]) == 0\nassert     double_the_difference([1,1]) == 0\nassert     double_the_difference([1,2]) == 3\nassert     double_the_difference([1,2,3]) == 2\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     double_the_difference([1,2,3,4,5])     == 30\nassert     double_the_difference([-1,2,3,4,5])     == 30\nassert     double_the_difference([1,2,3,4,-5])     == 30\nassert     double_the_difference([])                 == 0\nassert     double_the_difference([1,2,3,4,'a',5])     == 30\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 58\nassert     double_the_difference([1,-2,-3,-4,-5]) == 58\nassert     double_the_difference([]) == 0\nassert     double_the_difference([2.3,2.1,2.4]) == 22.7\nassert     double_the_difference([-1,-2,-3,-4,-5]) == 58\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1]) == 0\nassert     double_the_difference([1,2]) == 2\nassert     double_the_difference([1,2,3,4,5,6]) == 14\nassert     double_the_difference([-1,-2,-3,-4,-5,-6]) == 140\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare([5, 3, 2, 1, 4], [0, 1, 1, 0, 0]) == [0, 1, 1, 0, 1]\nassert     compare([5, 3, 2, 1, 4], [1, 0, 0, 1, 1]) == [1, 2, 2, 3, 3]\nassert     compare([1, 1, 1, 1, 1], [0, 0, 1, 0, 0]) == [0, 0, 1, 0, 0]\nassert     compare([1, 1, 1, 1, 1], [0, 0, 0, 0, 1]) == [0, 0, 0, 0, 1]\nassert     compare([1, 1, 1, 1, 1], [0, 0, 1, 0, 0]) == [0, 0, 1, 0, 0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     compare([1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\nassert     compare([1, 1, 1, 1, 1, 1], [3, 2, 1, 0, 0, 0]) == [2, 3, 4, 2, 1, 0]\nassert     compare([2, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     compare(guess=[1,1,3,4], score=[1,2,3,4]) == [0,2,1,2]\nassert     compare(guess=[1,1,3,4], score=[1,4,3,2]) == [0,1,1,3]\nassert     compare(guess=[1,1,2,3], score=[2,1,3,4]) == [1,1,1,2]\n\n\n\n\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare([1,2,3,4],[2,3,4,5]) == [1,0,0,0]\nassert     compare([1,2,3,4],[2,3,4,6]) == [1,1,1,1]\nassert     compare([1,2,3,4],[2,3,4,5]) == [1,-2,-3,-4]\nassert     compare([1,2,3,4],[2,3,4,6]) == [-2,-3,-4,-5]\nassert     compare([1,2,3,4],[2,3,4,6]) == [0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare([1,2,3],[2,2,2]) == [1,0,1]\nassert     compare([1,2,3],[1,2,3]) == [0,0,0]\nassert     compare([1,2,3],[3,2,1]) == [1,1,1]\nassert     compare([1,2,3],[2,1,3]) == [0,1,2]\n\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare([[1,2,3],[2,3,4]], [2,3]) == [1,1]\nassert     compare([[1,2,3],[2,3,4]], [3,4]) == [0,1]\nassert     compare([[0,2,3],[1,2,3]], [2,3]) == [1,0]\nassert     compare([[0,2,3],[2,3,4]], [3,4]) == [0,1]\nassert     compare([[0,2,3],[2,3,4]], [3,4]) == [0,1]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     compare([\"a\", \"a\", \"b\", \"b\"],         [\"a\", \"a\", \"a\", \"b\"]) == [0, 0, 1, 2]\nassert     compare([\"a\", \"a\", \"b\", \"c\"],         [\"a\", \"a\", \"b\", \"c\"]) == [0, 0, 1, 3]\nassert     compare([\"a\", \"a\", \"b\", \"c\"],         [\"b\", \"a\", \"a\", \"c\"]) == [1, 0, 0, 3]\nassert     compare([\"a\", \"a\", \"b\", \"c\"],         [\"c\", \"a\", \"a\", \"b\"]) == [3, 0, 0, 1]\nassert     compare([\"a\", \"a\", \"b\", \"c\"],         [\"d\", \"a\", \"a\", \"b\"]) == [3, 0, 1, 2]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare([0,1,2,3,4],[1,0,1,1,0]) == [3,3,3,3,3]\nassert     compare([4,5,1,2,3],[0,4,1,1,1]) == [0,1,1,1,3]\nassert     compare([0,1,2,3,4],[1,4,1,1,1]) == [0,1,1,1,2]\n\nprint(\"Passed! (1 points)\")\n\ndef play_game(guesses,scores):\n    \"\"\"You will know what your friend has in mind when you see his face. He also knows that\n    his level of success is linked to his ability to guess correctly.\n    Your task is to find out how many chances he has to guess the correct result.\n    Input\n    The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\n    The first line of each test case contains two space-separated integers N and M denoting the number of matches and the maximum possible number of guesses, respectively.\n    The second line contains N space-separated integers A1, A2,..., AN denoting the scores.\n    The third line contains M space-separated integers B1, B2,..., BM denoting the guesses.\n    Output\n    For each test case, output a single line containing an integer denoting the number of chances he gets to guess the correct result.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     compare([10, 20, 30, 40, 50], [10, 10, 10, 10, 10]) == [0, 0, 0, 0, 0]\nassert     compare([10, 20, 30, 40, 50], [20, 10, 10, 10, 10]) == [20, 10, 10, 10, 10]\nassert     compare([10, 20, 30, 40, 50], [30, 10, 10, 10, 10]) == [30, 30, 30, 30, 30]\nassert     compare([10, 20, 30, 40, 50], [50, 10, 10, 10, 10]) == [50, 50, 50, 50, 50]\nassert     compare([10, 20, 30, 40, 50], [40, 10, 10, 10, 10]) == [40, 10, 10, 10, 10]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare(11,     [5,8,7,6,10,8,9,9,8,10,11]) == [0,2,1,0,3,1,0,1,0,1,0]\nassert     compare(5,     [8,9,7,6,10,8,9,9,8,10,11]) == [0,0,0,1,1,1,1,2,0,0,0]\nassert     compare(8,     [8,9,7,6,10,8,9,9,8,10,11]) == [0,0,0,0,0,0,0,0,0,0,0]\nassert     compare(7,     [8,9,7,6,10,8,9,9,8,10,11]) == [0,0,0,0,0,0,0,0,0,0,0]\nassert     compare(6,     [8,9,7,6,10,8,9,9,8,10,11]) == [0,0,0,0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Hut', ['SEA', 'Cake', 'Stuff', 'Hut']) == 'Hut.Stuff'\nassert     Strongest_Extension('Campus', ['Campus', 'Gym', 'Campus', 'Campus']) == 'Campus.Campus'\nassert     Strongest_Extension('Yard', ['Sparrow', 'Yard', 'Sparrow', 'Sparrow']) == 'Sparrow.Sparrow'\nassert     Strongest_Extension('School', ['School', 'Chocolate', 'School', 'School']) == 'School.School'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Molecule', ['MolEcule', 'Compound', 'Simple']) == 'Molecule.Compound'\nassert     Strongest_Extension('Synthetic_dna', ['Synthetic_dna', 'Synthetic_RNA', 'Synthetic_RNA']) == 'Synthetic_dna.Synthetic_RNA'\n\n\n\"\"\"\n6. Given a dictionary that contains words and their counts, implement a function\nthat will return the word with the highest count.\nFor example, if the dictionary is {'foo':1, 'bar':4, 'baz':10} then your function\nshould return 'bar' with the count of 4.\n\"\"\"\ndef Highest_Count(dictionary):\n    \"\"\"You will be given a dictionary that contains words and their counts. \n    You should return the word with the highest count.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cell', ['Cell', 'Strat', 'Mother']) == 'Cell.Strat'\nassert     Strongest_Extension('Cell', ['Cell', 'Strat', 'Mother']) == 'Cell.Strat'\nassert     Strongest_Extension('Cell', ['Cell', 'Strat', 'Mother']) == 'Cell.Strat'\nassert     Strongest_Extension('Cell', ['Cell', 'Strat', 'Mother', 'Myself']) == 'Cell.Strat'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])     == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['StuFfed', 'SErviNGSliCes', 'Cheese'])     == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['StuFfed', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['StuFfed', 'Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Cheese.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"Slices\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"Slices\"]) == \"Cheese.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"Slices\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Failed'\nassert     Strongest_Extension('Slices', ['S','s','se','sew','sw', 'w']) == 'Slices.se', 'Failed'\nassert     Strongest_Extension('Slices', ['sew', 'Sw', 'W']) == 'Slices.sew', 'Failed'\nassert     Strongest_Extension('Slices', ['L', 'li', 'ls', 'lsw', 'lsw', 'lw']) == 'Slices.lw', 'Failed'\nassert     Strongest_Extension('Slices', ['SliCe', 'L', 'Li', 'lsi', 'lsi', 'li']) == 'Slices.lsi', 'Failed'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Strongest_Extension('Book', ['NOextension', 'AuMl', 'RilGin']) == 'Book.AuMl'\nassert     Strongest_Extension('Webcam', ['AuMl', 'RilGin']) == 'Webcam.AuMl'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Horse']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Horse', 'Horse']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Horse', 'Furry']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Horse', 'Furry', 'Horse']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'])     == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Shredder\", ['HectoByte', 'HighLoad', 'Quickly'])     == 'Shredder.HighLoad'\nassert     Strongest_Extension(\"Hello\", ['World', 'Houdini'])     == 'Hello.Houdini'\nassert     Strongest_Extension(\"Dots\", ['Dots', 'Dots', 'Dots'])     == 'Dots.Dots'\nassert     Strongest_Extension(\"Net\", ['Network', 'IRC', 'Mobile'])     == 'Net.Mobile'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Fish', ['Guppy', 'Big fish', 'Tiny fish']) == 'Fish.Guppy'\nassert     Strongest_Extension('Cranes', ['Cranes', 'Cranes are weak', 'Cranes', 'Cranes are not worthy']) == 'Cranes.Cranes'\nassert     Strongest_Extension('Teeth', ['Teeth', 'Tooth', 'Tooth is not worthy']) == 'Teeth.Tooth'\nassert     Strongest_Extension('Cranes', ['Tooth', 'Cranes', 'Cranes are not worthy']) == 'Cranes.Cranes'\nassert     Strongest_Extension('Cranes', ['Cranes', 'Cranes', 'Cranes are not worthy']) == 'Cranes.Cranes'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     cycpattern_check('hello', 'llohe')\nassert     cycpattern_check('hello', 'lloh')\nassert     not cycpattern_check('hello', 'llohell')\nassert     cycpattern_check('hello', 'helloo')\nassert     cycpattern_check('hello', 'helloh')\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"he is\", \"he\")\nassert     cycpattern_check(\"hello\", \"oellh\")\nassert     cycpattern_check(\"hello\", \"hello\")\nassert     cycpattern_check(\"hello\", \"helol\")\nassert     cycpattern_check(\"hexa\", \"hexa\")\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cycpattern_check('abcd', 'cdab') == True\nassert     cycpattern_check('abcd', 'bcad') == True\nassert     cycpattern_check('abcd', 'cddb') == True\nassert     cycpattern_check('abcd', 'cdb') == False\nassert     cycpattern_check('abcd', 'cd') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     cycpattern_check('', 'a') == False\nassert     cycpattern_check('a', 'a') == True\nassert     cycpattern_check('a', 'ab') == True\nassert     cycpattern_check('', 'b') == False\nassert     cycpattern_check('b', 'b') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     cycpattern_check('ana','kana') == True\nassert     cycpattern_check('kana','ana') == True\nassert     cycpattern_check('kana','kanak') == False\nassert     cycpattern_check('kana','karak') == False\nassert     cycpattern_check('kana','anak') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     cycpattern_check('hi', 'h') == True\nassert     cycpattern_check('hi', 'hi') == False\nassert     cycpattern_check('hi', 'i') == True\nassert     cycpattern_check('hi', 'hihi') == True\nassert     cycpattern_check('hi', 'hiyhi') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"dictionary\", \"dictonary\")\nassert     cycpattern_check(\"\", \"\")\nassert     cycpattern_check(\"programming\", \"programming\")\nassert     cycpattern_check(\"cycpattern\", \"pattern\")\nassert     cycpattern_check(\"pattern\", \"cycpattern\")\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     cycpattern_check('cat', 'cat') == True\nassert     cycpattern_check('', 'cat') == False\nassert     cycpattern_check('cat', '') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     cycpattern_check('hacker', 'hack') == True\nassert     cycpattern_check('abcd', 'bcda') == False\nassert     cycpattern_check('abcd', 'cdab') == True\nassert     cycpattern_check('abcd', 'bcd') == True\nassert     cycpattern_check('abcd', 'abcd') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cycpattern_check('python','typhon') == False\nassert     cycpattern_check('python','rot') == True\nassert     cycpattern_check('python','rotor') == True\nassert     cycpattern_check('python','ypthon') == False\nassert     cycpattern_check('python','yphon') == True\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (5, 2) == even_odd_count(325)\nassert     (4, 1) == even_odd_count(1234)\nassert     (3, 0) == even_odd_count(7)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_count(12) == (0, 2)\nassert     even_odd_count(345) == (2, 1)\nassert     even_odd_count(876) == (1, 3)\nassert     even_odd_count(1578) == (1, 3)\nassert     even_odd_count(14) == (1, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_count(1234) == (4, 2)\nassert     even_odd_count(13579) == (3, 7)\nassert     even_odd_count(578) == (2, 6)\nassert     even_odd_count(123456789) == (7, 1)\n\n\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_odd_count(13)    == (2, 1)\nassert     even_odd_count(222)    == (4, 2)\nassert     even_odd_count(22334)    == (4, 2)\nassert     even_odd_count(123456789)    == (7, 6)\nassert     even_odd_count(1)    == (1, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_count(4) == (0,2)\nassert     even_odd_count(6) == (1,2)\nassert     even_odd_count(633) == (2,0)\nassert     even_odd_count(1155) == (2,0)\nassert     even_odd_count(5777) == (2,1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (even_odd_count(45225) == (1, 5))\nassert     (even_odd_count(2468) == (2, 4))\nassert     (even_odd_count(0) == (0, 0))\n\ndef is_pandigital(num):\n    \"\"\"Given an integer, check if it is a pandigital number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_count(11) == (1, 1)\nassert     even_odd_count(2) == (1, 0)\nassert     even_odd_count(3) == (0, 2)\nassert     even_odd_count(6) == (1, 2)\nassert     even_odd_count(7) == (0, 3)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_count(1112) == (2,2)\nassert     even_odd_count(1234) == (1,2)\nassert     even_odd_count(5678) == (3,2)\nassert     even_odd_count(4) == (1,0)\nassert     even_odd_count(1) == (0,0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (even_odd_count(555) == (2, 2))\nassert     (even_odd_count(12345) == (3, 1))\nassert     (even_odd_count(50000) == (2, 4))\nassert     (even_odd_count(1555) == (1, 3))\nassert     (even_odd_count(1234567) == (7, 1))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (even_odd_count(423) == (2, 1))\nassert     (even_odd_count(0) == (0, 0))\nassert     (even_odd_count(121) == (1, 1))\nassert     (even_odd_count(0) == (0, 0))\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(6) == \"VI\"\nassert     int_to_mini_roman(12) == \"XII\"\nassert     int_to_mini_roman(90) == \"XC\"\nassert     int_to_mini_roman(99) == \"XCIX\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(7) == \"VII\"\nassert     int_to_mini_roman(10) == \"X\"\nassert     int_to_mini_roman(61) == \"LXXI\"\nassert     int_to_mini_roman(66) == \"LVI\"\nassert     int_to_mini_roman(99) == \"XCIX\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(4) == 'ii'\nassert     int_to_mini_roman(10) == 'xi'\nassert     int_to_mini_roman(100) == 'c'\nassert     int_to_mini_roman(500) == 'l'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1)     == 'I'\nassert     int_to_mini_roman(2)     == 'II'\nassert     int_to_mini_roman(3)     == 'III'\nassert     int_to_mini_roman(4)     == 'IV'\nassert     int_to_mini_roman(5)     == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(0) == \"\", \"should be empty\"\nassert     int_to_mini_roman(1) == \"I\", \"should be I\"\nassert     int_to_mini_roman(2) == \"II\", \"should be II\"\nassert     int_to_mini_roman(3) == \"III\", \"should be III\"\nassert     int_to_mini_roman(4) == \"IV\", \"should be IV\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(10) == \"X\"\nassert     int_to_mini_roman(100) == \"C\"\nassert     int_to_mini_roman(500) == \"D\"\nassert     int_to_mini_roman(1000) == \"M\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) ==     'i'\nassert     int_to_mini_roman(2) ==     'ii'\nassert     int_to_mini_roman(3) ==     'iii'\nassert     int_to_mini_roman(4) ==     'iv'\nassert     int_to_mini_roman(5) ==     'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(5) == \"v\"\nassert     int_to_mini_roman(9) == \"ix\"\nassert     int_to_mini_roman(10) == \"x\"\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(3,4,5) == True\nassert     right_angle_triangle(3,5,4) == False\nassert     right_angle_triangle(10,5,4) == True\nassert     right_angle_triangle(1,1,1) == True\nassert     right_angle_triangle(1,1,10) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(3, 4, 5)\nassert     right_angle_triangle(5, 3, 4)\nassert     right_angle_triangle(4, 4, 5)\nassert     right_angle_triangle(7, 4, 2)\nassert     not right_angle_triangle(4, 4, 4)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(7, 12, 5) == False\nassert     right_angle_triangle(1, 2, 3) == True\nassert     right_angle_triangle(1, 2, 4) == False\nassert     right_angle_triangle(2, 3, 4) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(5, 3, 4) == True\nassert     right_angle_triangle(7, 6, 8) == False\n\n\n\n\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(5,5,5) == True\nassert     right_angle_triangle(1,1,1) == True\nassert     right_angle_triangle(3,4,5) == False\nassert     right_angle_triangle(2,3,4) == False\nassert     right_angle_triangle(5,2,4) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(5, 12, 13) is False\nassert     right_angle_triangle(5, 5, 7) is True\nassert     right_angle_triangle(5, 7, 11) is True\nassert     right_angle_triangle(5, 12, 5) is False\nassert     right_angle_triangle(5, 12, 6) is False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(5, 6, 7) == True, '5, 6, 7 is a right-angled triangle'\nassert     right_angle_triangle(3, 4, 5) == False, '3, 4, 5 is not a right-angled triangle'\nassert     right_angle_triangle(3, 5, 4) == False, '3, 5, 4 is not a right-angled triangle'\nassert     right_angle_triangle(3, 4, 5) == False, '3, 4, 5 is not a right-angled triangle'\nassert     right_angle_triangle(7, 8, 9) == True, '7, 8, 9 is a right-angled triangle'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3,4,5) == True\nassert     right_angle_triangle(3,4,6) == False\nassert     right_angle_triangle(6,8,10) == True\nassert     right_angle_triangle(7,14,21) == False\nassert     right_angle_triangle(2,4,4) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(2, 2, 2) == True\nassert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(4, 5, 6) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, \"3, 4, 5 is a right angled triangle\"\nassert     right_angle_triangle(5, 12, 13) == False, \"5, 12, 13 is not a right angled triangle\"\nassert     right_angle_triangle(5, 10, 8) == False, \"5, 10, 8 is not a right angled triangle\"\nassert     right_angle_triangle(2, 6, 8) == False, \"2, 6, 8 is not a right angled triangle\"\nassert     right_angle_triangle(5, 12, 5) == False, \"5, 12, 5 is not a right angled triangle\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_max(['a','abc','def','ghi','abcdef']) == 'abc'\nassert     find_max(['a','def','ghi','abcdef']) == 'abcdef'\nassert     find_max(['a','abc','def','ghi']) == 'a'\nassert     find_max(['abc','def','ghi','abcdef']) == 'abc'\nassert     find_max(['abc','def','ghi','abcdef','ghi']) == 'ghi'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_max(['abc', 'def', 'hij']) == 'abc'\nassert     find_max(['aabb', 'abcd', 'aabbc']) == 'aabb'\nassert     find_max(['cat', 'dog', 'bird', 'nope']) == 'cat'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_max([\"abc\", \"a\", \"ab\", \"aba\"]) == \"a\"\nassert     find_max([\"aba\", \"abc\", \"a\", \"ab\"]) == \"aba\"\nassert     find_max([\"aba\", \"abc\", \"a\", \"ab\", \"abcd\"]) == \"aba\"\nassert     find_max([\"ab\", \"abc\", \"a\", \"b\", \"ba\"]) == \"ab\"\n\nif __name__ == \"__main__\":\n    print(find_max([\"aba\", \"abc\", \"a\", \"ab\"]))\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_max(['the', 'boy', 'and', 'the', 'girl']) == 'and'\nassert     find_max(['a', 'b', 'c', 'd', 'c', 'e', 'b']) == 'b'\nassert     find_max(['c', 'c', 'c', 'c', 'c', 'c', 'c']) == 'c'\nassert     find_max(['c', 'd', 'c', 'd', 'c', 'e', 'c', 'e']) == 'c'\nassert     find_max(['c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']) == 'c'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_max(['peter', 'peter', 'peter']) == 'peter'\nassert     find_max(['gene', 'gene', 'gene']) == 'gene'\nassert     find_max(['glider', 'glider', 'glider', 'glider', 'glider', 'glider', 'glider', 'glider', 'glider']) == 'glider'\nassert     find_max(['matrix','matrix','matrix','matrix']) =='matrix'\nassert     find_max(['zebra', 'zebra', 'zebra', 'zebra', 'zebra', 'zebra', 'zebra', 'zebra', 'zebra']) == 'zebra'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_max(['a', 'b', 'c', 'a', 'b', 'c']) == 'a'\nassert     find_max(['abc', 'b', 'baa', 'ab']) == 'abc'\nassert     find_max
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_max(['abc', 'xyz', 'aba']) == 'xyz'\nassert     find_max(['abc', 'xyz', 'xyz']) == 'xyz'\nassert     find_max(['abc', 'xyz', 'aba', 'baa', 'aaaaa']) == 'aba'\nassert     find_max(['abc', 'xyz', 'aba', 'baa', 'aaaaa', 'aaaaaa']) == 'aba'\nassert     find_max(['abc', 'xyz', 'aba', 'baa', 'aaaaa', 'aaaaaa', 'aab']) == 'abc'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_max([\"a\", \"b\", \"c\"]) == \"a\"\nassert     find_max([\"z\", \"a\", \"c\", \"b\", \"a\"]) == \"a\"\nassert     find_max([\"a\", \"c\", \"c\", \"a\", \"b\", \"a\", \"a\"]) == \"a\"\nassert     find_max([\"a\", \"b\", \"c\", \"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_max(['gfd', 'gy', 'zj', 'gj', 'gff', 'gg', 'g']) == 'gj'\nassert     find_max(['r', 'r', 'rr', 'rr', 'rrr', 'rrr']) == 'rr'\nassert     find_max(['z', 'z', 'zz', 'zz', 'zzz', 'zzz']) == 'z'\nassert     find_max(['z', 'z', 'z', 'z', 'zz', 'zzz']) == 'z'\nassert     find_max(['gfd', 'g', 'g', 'z', 'zz', 'zzz']) == 'z'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_max(['Pete', 'Henry', 'Debbie', 'Florence', 'Aline']) == 'Pete'\nassert     find_max(['Aline', 'Henry', 'Debbie', 'Florence', 'Pete']) == 'Pete'\nassert     find_max(['Aline', 'Henry', 'Debbie', 'Florence', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Henry', 'Henry', 'Debbie', 'Raj', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henry', 'Pete', 'Raj', 'Debbie', 'Henr"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eat(5, 7, 10) == [7, 4]\nassert     eat(5, 9, 10) == [10, 0]\nassert     eat(5, 7, 0) == [0, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     eat(0, 5, 3) == [ 0, 3]\nassert     eat(0, 1, 3) == [ 0, 2]\nassert     eat(0, 3, 3) == [ 3, 0]\nassert     eat(0, 0, 3) == [ 3, 0]\nassert     eat(0, 3, 3) == [ 3, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     eat(1000, 500, 500) == [1000, 500]\nassert     eat(500, 1000, 500) == [500, 0]\nassert     eat(1000, 1000, 1000) == [1000, 0]\nassert     eat(0, 0, 0) == [0, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     eat(5, 2, 3) == [5, 2]\nassert     eat(5, 6, 4) == [5, 4]\nassert     eat(5, 5, 1) == [5, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     eat(0, 4, 4) == [0, 4]\nassert     eat(1, 4, 4) == [0, 3]\nassert     eat(2, 4, 4) == [0, 2]\nassert     eat(3, 4, 4) == [0, 1]\nassert     eat(4, 4, 4) == [0, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eat(7,7,10) == [14, 3]\nassert     eat(7,10,10) == [14, 0]\nassert     eat(10,10,10) == [0,10]\nassert     eat(20,20,10) == [40, 0]\nassert     eat(30,30,10) == [40, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         eat(2, 2, 3) == [2, 1]\nassert         eat(1, 3, 2) == [3, 1]\nassert         eat(2, 4, 3) == [0, 3]\nassert         eat(1, 1, 1) == [1, 0]\nassert         eat(2, 0, 1) == [0, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eat(1000, 1000, 1000) == [1000, 999]\nassert     eat(500, 700, 1000) == [700, 500]\nassert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 0, 1) == [0, 1]\nassert     eat(0, 1, 0) == [0, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     eat(0, 3, 5) == [3, 4]\nassert     eat(4, 3, 5) == [1, 0]\nassert     eat(4, 0, 5) == [0, 5]\nassert     eat(5, 0, 5) == [0, 4]\nassert     eat(2, 4, 6) == [1, 2]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\"], [1,2,3]) == 6\nassert     do_algebra([\"+\",\"*\"], [1,2,3]) == 6\nassert     do_algebra([\"+\",\"*\",\"//\",\"%\",\"**\"], [1,2,3,4,5]) == 3\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"%\",\"**\"], [1,2,3,4,5,6]) == 1\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"%\",\"**\"], [1,2,3,4,5,6,7]) == -4\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     do_algebra(['+', '-'], [1, 2]) == -1\nassert     do_algebra(['*', '-'], [1, 2]) == -2\nassert     do_algebra(['/', '-'], [1, 2]) == -0.5\nassert     do_algebra(['/', '-'], [1, 2, 3]) == -0.333333\nassert     do_algebra(['**', '-'], [1, 2, 3]) == -8\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     do_algebra(['+', '*'], [3, 4]) == 8\nassert     do_algebra(['+', '*'], [2, 1]) == 3\nassert     do_algebra(['+', '*'], [2, 0]) == 2\nassert     do_algebra(['+', '*'], [2, -1]) == 1\nassert     do_algebra(['+', '*'], [2, -5]) == -1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     do_algebra([1, 2], [1, 2, 3]) == 6\nassert     do_algebra([1, 3], [2, 2, 3]) == 4\nassert     do_algebra([2, 3], [2, 2, 3]) == 2\nassert     do_algebra([1, 2, 3], [2, 2, 3]) == 6\nassert     do_algebra([2, 3, 4], [2, 2, 3]) == 24\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     do_algebra(['+', '-'], [1, 2, 3, 4, 5]) == -1\nassert     do_algebra(['+', '-'], [1, 2, 3, 4]) == -3\nassert     do_algebra(['+', '-'], [1, 2]) == -3\nassert     do_algebra(['+', '-'], [1, 2, 3]) == -3\nassert     do_algebra(['*', '-'], [1, 2, 3, 4, 5]) == -120\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     do_algebra([ '+', '-', '*', '//', '**' ], [ 5, 8, 3, 2, 5, 4, 5, 2, 6, 5, 5, 6, 5, 2, 6, 4, 3, 2, 4, 3, 2, 5, 6, 5, 3, 2, 7, 4, 2, 1, 5, 1, 5, 3, 1, 7, 7, 1, 3, 7, 5, 5, 5, 6, 5, 1, 6, 4, 6, 5, 6, 6, 1, 3, 7, 2, 2, 3, 4, 4, 4, 2, 7, 4, 2, 5, 2, 7, 7, 7, 2, 5, 4, 5, 2, 6, 2, 2, 5, 5, 4, 6, 6, 4, 4, 4, 4, 7, 5, 5, 5, 4, 3, 7, 7, 6, 7, 6, 6, 5, 3, 1, 3, 2, 4, 6, 6, 3, 5, 3, 7, 5, 6, 7, 2, 4, 4, 2, 7, 5, 2, 6, 4, 5, 6, 7, 3, 1, 6, 7, 2, 1, 4, 4, 1, 6, 4, 1, 6, 7, 6, 3, 7, 1, 7, 7, 4, 7, 5, 4, 5, 2, 3, 2, 5, 6, 3, 6, 5, 2, 4, 4, 4, 3, 5, 7, 6, 7, 4, 6, 4, 1, 7, 6, 7, 1, 1, 7, 6, 2, 6, 7, 1, 7, 7, 1, 4, 5, 6, 2, 7, 1, 7, 7, 1, 6, 6, 1, 1, 7, 5, 6, 7, 1, 7, 6, 5, 2, 7, 7, 6, 7, 4, 6, 2, 6, 7, 4, 7, 3, 7, 6, 7, 6, 2, 7, 7, 6, 4, 7, 5, 5, 7, 3, 1, 7, 5, 7, 6, 7, 7, 7, 7, 5, 5, 7, 7, 6, 6, 7, 6, 7, 5, 2, 7, 4, 5, 7, 7, 5, 5, 3, 4, 7, 6, 7, 3, 6, 6, 5, 2, 7, 5, 7, 4, 7, 7, 6, 6, 4, 7, 4, 7, 7, 6, 4, 5, 7, 7, 5, 6, 5, 6, 7, 7, 6, 6, 7, 5, 7, 7, 4, 7, 5, 7, 7, 6, 4, 6, 7, 6, 7, 3, 7, 7, 6, 7, 5, 5, 7, 7, 4, 7, 7, 7, 7, 7, 4, 7, 7, 7, 5, 7, 4, 7, 6, 7, 7, 7, 5, 5, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 6, 7, 5, 7, 7, 7, 5, 7, 7, 7, 7, 4, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 6, 7, 5, 7, 7, 7, 5, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 6, 7, 5, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 6, 7, 7, 6, 7, 7, 5, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 7, "
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef sort_num(nums):\n    \"\"\"\n    Given a list of integers, write a function that moves all the negative numbers to the \n    beginning of the list and move all the positive numbers to the end of the list. \n    You should do this in place, do not allocate extra space for another array, and \n    may assume the list contains distinct positive and negative numbers.\n\n    Example:\n    Given [1,2,3,4,5,6,7], return [1,2,3,4,5,6,7].\n\n    Note:\n    The array should be changed in place, do not allocate extra space for another array.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     do_algebra([ '+', '-', '*', '//', '**' ], [ 1, 2, 3, 4, 5 ]) ==     1 - 2 * 3 // 4 ** 5\nassert     do_algebra([ '+', '-', '*', '//', '**' ], [ 1, 2, 3, 4, -5 ]) ==     1 - 2 * 3 // 4 ** -5\nassert     do_algebra([ '+', '-', '*', '//', '**' ], [ 1, 2, 3, 4, 0 ]) ==     1 - 2 * 3 // 4 ** 0\nassert     do_algebra([ '+', '-', '*', '//', '**' ], [ 1, 2, 3, -4, -5 ]) ==     1 - 2 * -3 // -4 ** -5\nassert     do_algebra([ '+', '-', '*', '//', '**' ], [ 1, -2, 3, -4, -5 ]) ==     1 + -2 * -3 // -4 ** -5\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     do_algebra(['+', '*', '-', '//', '**'], [1,2,3]) == 6\nassert do_algebra(['+', '*', '-', '//', '**'], [1,1,1,1,1]) == 1\nassert do_algebra(['+', '*', '-', '//', '**'], [2,2,2,2,2]) == 2\nassert do_algebra(['+', '*', '-', '//', '**'], [3,3,3,3,3]) == 3\nassert do_algebra(['+', '*', '-', '//', '**'], [1,2,3,4,5]) == 1 + 2*3**4\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5]) == 7\nassert     do_algebra(['+', '*'], [1, 4]) == 5\nassert     do_algebra(['//', '**'], [4, 4]) == 16\nassert     do_algebra(['*', '**'], [1, 4]) == 1\n\ndef run():\n    return do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5])\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(\"aPp\") == \"ApP\"\nassert     solve(\"ApP\") == \"aPp\"\nassert     solve(\"\") == \"\"\nassert     solve(\"a\") == \"a\"\nassert     solve(\"a1\") == \"a1\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve('djfkhsdfjhsdf') == 'hfsdhjdshf'\nassert     solve('fdjkasdfjksdfjkfdj') == 'jkfdjkasdfjksdfj'\nassert     solve('dfjkfhksdfjkshdf') == 'hfksdhjkdsfj'\nassert     solve('sdfjkfhksdfjkshdf') == 'fhksdhjkdsfj'\nassert     solve('sdfjkfhksdfjkshdf') == 'fhksdhjkdsfj'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     'aA' == solve('aA')\nassert    'aB' == solve('aB')\nassert    'aBB' == solve('aBB')\nassert    'aBBB' == solve('aBBB')\nassert    'a' == solve('a')\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solve(\"Hello\") == \"olLEH\"\nassert     solve(\"We are Team\") == \"eWTaeM\"\nassert     solve(\"\") == \"\"\nassert     solve(\"W\") == \"W\"\nassert     solve(\"WE\") == \"ew\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve(\"abc\") == \"Abc\"\nassert     solve(\"Abc\") == \"abc\"\nassert     solve(\"abc\") == \"abc\"\nassert     solve(\"abc\") == \"abc\"\nassert     solve(\"AbC\") == \"AbC\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve('this is a test') == 'This is a test'\nassert     solve('HOHOHO') == 'OHOHOH'\nassert     solve('123456123456') == '123456123456'\nassert     solve('eefgg') == 'fggee'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(\"aBc\") == \"cba\"\nassert     solve(\"Hi There\") == \"here is a\"\nassert     solve(\"   \") == \"\"\nassert     solve(\"123456789\") == \"987654321\"\n\nif __name__ == \"__main__\":\n    for test in sys.stdin:\n        print(solve(test))"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(\"Hello World\")    == \"OLLEH WORLD\"\nassert     solve(\"Python\")    == \"nohtyP\"\nassert     solve(\"a\")    == \"a\"\nassert     solve(\"aa\")    == \"aa\"\nassert     solve(\"\")    == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(\"If a man, a plan, a canoe, pasta, heros, eights, ladders, \"\n                     \"cloops, gash, and the holy grail, \"\n                     \"when in desert, he was come upon \"\n                     \"a small river. There, there he found two monsters \"\n                     \"that attacked his fish, and did not try to flee; \"\n                     \"they were in close range and will go mad, \"\n                     \"because of their search. He ended up in a small \"\n                     \"dock at the end of the river. \"\n                     \"He was attacked by a dusker... and he was attacked by \"\n                     \"another dusker, and the two duskers are killed one after \"\n                     \"another. \"\n                     \"Then he stood in the middle of the river, and \"\n                     \"the other dusker entered his trap, and killed the two \"\n                     \"duskers in a single attack. \"\n                     \"Then he was attacked by a triceratops, and the triceratops \"\n                     \"killed both duskers and he was killed. \"\n                     \"Then he was attacked by a troll, and he was killed. \"\n                     \"Then he went back to his dock, and when he saw his \"\n                     \"dusker, he ran away, and the two duskers went back to \"\n                     \"the river, and the triceratops were the last two \"\n                     \"monsters, and killed them. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left. \"\n                     \"So the river ended up being the last little dock, \"\n                     \"and the troll was the only monster left, and the \"\n                     \"dusker was the only thing left, and the two duskers \"\n                     \"were the only things left"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve('a') == 'a'\nassert     solve('Is this a test?') == 'eht si taht eosi'\nassert     solve('HELLO') == 'HELLO'\nassert     solve('hello world') == 'hello world'\nassert     solve('hello world') == 'hello world'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_md5(\"foo\") == string_to_md5(\"foo\")\nassert     string_to_md5(\"\") == string_to_md5(\"\")\nassert     string_to_md5(\"bar\")!= string_to_md5(\"foo\")\nassert     string_to_md5(\"bar\")!= string_to_md5(\"foobar\")\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_md5('Text1') == 'de5bb38a00b8350d8445a9b1e97dfe04'\nassert     string_to_md5('Text2') == '37fca99d5b48bffc3c0c3d66e8d5280'\nassert     string_to_md5('Text3') == '0b1355fceb1d81eea4b0c0b91a99e0b8'\nassert     string_to_md5('Text4') == '0028f9f4d53c9f1258b2288b66d6b42d'\nassert     string_to_md5('') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_md5('abc') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert     string_to_md5('abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq') == 'd1e9b8d5f846e0e0f2b6b7f54b65d1e8f59c5bfe8'\nassert     string_to_md5('') == None\n\ndef sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_to_md5('xyz') == md5('xyz').hexdigest()\nassert     string_to_md5('abc') == md5('abc').hexdigest()\nassert     string_to_md5(' ') == md5(' ').hexdigest()\nassert     string_to_md5('abc') == md5('abc').hexdigest()\nassert     string_to_md5('xyz') == md5('xyz').hexdigest()\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_md5('pass') == '2f3c5a2e52b9bbf5f859e3f47cff7d37'\nassert     string_to_md5('pass') == '2f3c5a2e52b9bbf5f859e3f47cff7d37'\nassert     string_to_md5('pass') == '2f3c5a2e52b9bbf5f859e3f47cff7d37'\nassert     string_to_md5('pass') == '2f3c5a2e52b9bbf5f859e3f47cff7d37'\nassert     string_to_md5('pass') == '2f3c5a2e52b9bbf5f859e3f47cff7d37'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         string_to_md5(\"\") == None\nassert         string_to_md5(\"abc\") == \"9d1f57a74c2d97c1e03b3ea4d1f3e2f\"\nassert         string_to_md5(\"ABC\") == \"0e917a0f4317c21b7bf8b27f4e84b0d\"\nassert         string_to_md5(\"ABCD\") == \"8e10502222b95e88f11dd0e18bf6b8a\"\nassert         string_to_md5(\"1234567890\") == \"b2b0f23f46b8b8d9f88acac6e00a23a\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('0') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\nassert     string_to_md5('abc') == 'b2b2839d5a7c7785558f4e2d5cd5c9c5'\nassert     string_to_md5('abcdef') == '79e66a0aab5ab1ccc2ffa1eeaa4b5ce8'\n\ndef md5_to_string(hash):\n    \"\"\"\n    Given a string 'hash', return its md5 hash equivalent string.\n    If 'hash' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_to_md5('1') == '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824'\nassert     string_to_md5('2') == '5f7f7fe9fc6a81a9b11c1a52e59c00d9790160e9d93723576a54f9ffb9d46f1'\nassert     string_to_md5('3') == '958ccd4e276623de3fcaef5d6b067b827d29d3e1d5b765e96426a5c47d1d15b'\nassert     string_to_md5('4') == '8894a9b6fcf0a5518094a44c7d74cc6a12d921b0b6a81d934e13d96b2f30b0a'\nassert     string_to_md5('5') == '7d2a1c292a9e8a01a3b6d9d9d3d16d8f4a5e1a4a1f3e04ccb23e79f40c6'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         string_to_md5(\"123\") == \"2a31fc69e2a81114b7b095f2684e2f2\"\nassert         string_to_md5(\"\") is None\nassert         string_to_md5(\"1234567890123456789012345678901234567890123456789012345678901234567890\") == \"0c03bf3b90a8fea1a2e43dae88f2bc30\"\nassert         string_to_md5(\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\") == \"3f8b1a16a18dda4e24bc1b873f2d8466\"\nassert         string_to_md5(\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\") == \"3f8b1a16a18dda4e24bc1b873f2d8466\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('e141390b') == 'e141390b'\nassert     string_to_md5('e141390bcd') == '26e12f4c'\nassert     string_to_md5('e141390bcd00') == '26e12f4c00'\nassert     string_to_md5('e141390bcd000') == '26e12f4c'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     generate_integers(0, 100) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nassert     generate_integers(100, 200) == [100, 200]\nassert     generate_integers(0, -100) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 0]\nassert     generate_integers(200, -1) == [200, 200]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     generate_integers(1, 10) ==     [2, 4, 6, 8]\nassert     generate_integers(10, 20) ==     [12, 14, 16, 18]\nassert     generate_integers(20, 10) ==     [22, 24, 26, 28]\nassert     generate_integers(100, 400) ==     [202, 204, 206, 208,\n                                                     2, 4, 6, 8,\n                                                     10, 12, 14, 16,\n                                                     18, 20, 22, 24,\n                                                     26, 28]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     generate_integers(1, 12) == [2, 4, 6, 8, 10, 12]\nassert     generate_integers(10, 22) == [10, 12, 14, 16, 18, 20, 22]\nassert     generate_integers(11, 22) == [12, 14, 16, 18, 20, 22]\nassert     generate_integers(11, 22) == [12, 14, 16, 18, 20, 22]\nassert     generate_integers(11, 22) == [12, 14, 16, 18, 20, 22]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     generate_integers(1, 2) == [2]\nassert     generate_integers(1, 3) == [2]\nassert     generate_integers(1, 5) == [2]\nassert     generate_integers(1, 8) == [2, 4, 6]\nassert     generate_integers(2, 3) == [2]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     generate_integers(2, 7) == [4, 6]\nassert     generate_integers(2, 11) == [4, 8, 10]\nassert     generate_integers(5, 7) == [8]\nassert     generate_integers(5, 12) == [8, 10]\nassert     generate_integers(2, 12) == [8, 10, 12]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     generate_integers(0, 0) == []\nassert     generate_integers(0, 1) == []\nassert     generate_integers(10, 10) == []\nassert     generate_integers(10, 11) == []\nassert     generate_integers(10, 100) == [10, 12, 22, 32, 42, 52, 62, 72, 82, 92]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(10, 100) == [12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n\nprint(\"Passed. (Add more tests to be more sure!)\""
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef digit_string_to_number(s):\n    \"\"\"\n    Return an integer that corresponds to the given digit string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert generate_integers(10, 22) == [12, 14, 16, 18, 20, 22]\nassert generate_integers(10, 2) == [10]\nassert generate_integers(10, 1) == []\nassert generate_integers(10, 22) == [12, 14, 16, 18, 20, 22]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96]\nassert     generate_integers(1, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700]\nassert     generate_integers(2, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 8"
    }
]