[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     has_close_elements([1,2,3,4,5], 1)\nassert     not has_close_elements([1,2,3,4,5], 2)\nassert     not has_close_elements([1,2,3,4,5], 0)\nassert     has_close_elements([1,2,3,4,5], 0.5)\nassert     has_close_elements([1,2,3,4,5], 1.5)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     has_close_elements(numbers=[1, 2, 3], threshold=0.1) == False\nassert     has_close_elements(numbers=[1, 2, 3], threshold=0.2) == True\nassert     has_close_elements(numbers=[1, 2, 3], threshold=0.3) == True\nassert     has_close_elements(numbers=[1, 2, 3], threshold=0.4) == False\nassert     has_close_elements(numbers=[1, 2, 3], threshold=0.5) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0], 0.0) == False\nassert     has_close_elements([1.0, 2.0, 3.0], 1.0) == True\nassert     has_close_elements([1.0, 2.0, 3.0], 2.0) == False\nassert     has_close_elements([1.0, 2.0, 3.0], 3.0) == True\nassert     has_close_elements([1.0, 2.0, 3.0], 4.0) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     has_close_elements([2.0, 1.0, 0.0], 0.5)\nassert     not has_close_elements([2.0, 1.0, 0.0], 1.5)\nassert     has_close_elements([1.0, 1.0, 1.0], 0.5)\nassert     not has_close_elements([1.0, 1.0, 1.0], 1.5)\nassert     has_close_elements([1.0, 2.0, 3.0], 0.5)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         has_close_elements([1.1, 1.2, 1.3], 1.1) is False\nassert         has_close_elements([1.1, 1.2, 1.3], 1.2) is True\nassert         has_close_elements([1.1, 1.2, 1.3], 1.3) is True\nassert         has_close_elements([1.1, 1.2, 1.3], 0.01) is True\nassert         has_close_elements([1.1, 1.2, 1.3], 0.1) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5], 0.2) == True\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5], 0.1) == False\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.4, 1.5], 0.4) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 1) == False\nassert     has_close_elements([1, 2, 3, 4], 0.1) == False\nassert     has_close_elements([1, 2, 3, 4], 0.25) == True\nassert     has_close_elements([1, 2, 3, 4], 0.3) == True\nassert     has_close_elements([1, 2, 3, 4], 0.35) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     has_close_elements([0.5, 0.7, 0.8, 1.3, 1.7], 0.5) is False\nassert     has_close_elements([0.5, 0.7, 0.8, 1.3, 1.7], 0.6) is False\nassert     has_close_elements([0.5, 0.7, 0.8, 1.3, 1.7], 0.8) is True\nassert     has_close_elements([0.5, 0.7, 0.8, 1.3, 1.7], 0.9) is True\nassert     has_close_elements([0.5, 0.7, 0.8, 1.3, 1.7], 1.0) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     has_close_elements([1.0, 4.0, 5.0, 6.0], 3.0)\nassert     not has_close_elements([1.0, 4.0, 5.0, 6.0], 2.0)\nassert     has_close_elements([-1.0, 2.0, 3.0], -0.5)\nassert     not has_close_elements([-1.0, 2.0, 3.0], 0.5)\nassert     has_close_elements([-1.0, 2.0, 3.0], 1.0)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1)\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],.5)\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1.25)\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1.5)\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"x(a(b)c)x\") == [\"x(a(b))x\", \"x(c)x\"]\nassert     separate_paren_groups(\"x((a(b)c))x\") == [\"x((a(b))c)\", \"xx\"]\nassert     separate_paren_groups(\"x((a )(b)c)x\") == [\"x((a )(b))x\", \"xx\"]\nassert     separate_paren_groups(\"x(a(b(c))))x\") == [\"x(a(b(c)))x\", \"x\"]\nassert     separate_paren_groups(\"(a(b))\") == [\"(a(b))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     separate_paren_groups('()()()') == ['()', '()', '()']\nassert separate_paren_groups('(())') == ['(())']\nassert separate_paren_groups(')()') == ['(())']\nassert separate_paren_groups('(()(()()))') == ['((()))', '(())']\nassert separate_paren_groups('(()') == ['()', '()']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"a((b)c(d)e)f\") == [\"a(b)\", \"c(d)\", \"e)\", \"f\"]\nassert     separate_paren_groups(\"b)a(c))d)e)f\") == [\"b)\", \"a(c))\", \"d)\", \"e)\", \"f\"]\nassert     separate_paren_groups(\"(a)b(c)d)e)f\") == [\"(a)\", \"b(c)\", \"d)\", \"e)\", \"f\"]\nassert     separate_paren_groups(\"a(b(c(d)e)f)g)h(i(j(k(l(m)n)o)p)q)r(s(t(u(v(w)x)y)z))\") == \\\n            [\"a(b(c(d)e)f)g)\", \"h(i(j(k(l(m)n)o)p)q)r(s(t(u(v(w)x)y)z))\"]\nassert     separate_paren_groups(\"(a(b(c(d)e)f)g)h(i(j(k(l(m)n)o)p)q)r(s(t(u(v(w)x)y)z)))\") == \\\n            [\"(a(b(c(d)e)f)g)\", \"(h(i(j(k(l(m)n)o)p)q)r(s(t(u(v(w)x)y)z)))\" ]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"a(b(c)d)e\") == [\"a\", \"b(c)\", \"d\", \"e\"]\nassert     separate_paren_groups(\"(a(b(c)d)e)\") == [\"(a(b(c)d)e)\"]\nassert     separate_paren_groups(\"(a ) (b ) ( (c ) )\") == [\"(a ) (b ) ( (c ) )\"]\nassert     separate_paren_groups(\"((a(b(c)d)e) )\") == [\"((a(b(c)d)e) )\"]\nassert     separate_paren_groups(\"a (b (c) d) e\") == [\"a (b (c) d) e\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     separate_paren_groups('((())())') == ['((())())', '(()())', '()()()', '()()()']\nassert     separate_paren_groups('(()()())') == ['(()())', '(()())', '(()())', '(()())']\nassert     separate_paren_groups('()()()') == ['()()()', '()()()']\nassert     separate_paren_groups('(()') == ['(()', '()']\nassert     separate_paren_groups('(())(())(()(()))') == ['(())(())(()(()))', '(())(())(()(()))']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"{{{(())}}}\") == ['{{{', '(())', '}', '}}']\nassert     separate_paren_groups(\"{{(())}}\") == ['{{', '(())', '}', '}}']\nassert     separate_paren_groups(\"{{{(()})}}\") == ['{{', '(()', '})', '}}']\nassert     separate_paren_groups(\"{{{(())}\") == ['{{', '(())', '}', '}}']\nassert     separate_paren_groups(\"{{{(())}\") == ['{{', '(())', '}', '}}']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"(()())\") == [\"()()()\", \"(())()\"]\nassert     separate_paren_groups(\"()()(()()()())\") == [\"()()()()()\", \"(())()()()\", \"(()())()()\", \"(()()())(())\", \"(()()())()\"]\nassert     separate_paren_groups(\"(()(())(())\") == [\"(())()\", \"(())()\", \"(())()\"]\nassert     separate_paren_groups(\"(()()\") == [\"()()\"]\nassert     separate_paren_groups(\"(()\") == [\"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"() (1+2)\") == [\"()\", \"(1+2)\"]\nassert     separate_paren_groups(\"(())\") == [\"()\", \"()\"]\nassert     separate_paren_groups(\"(()\") == [\"(\", \"())\"]\nassert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"(\") == [\"(\", \")\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     separate_paren_groups('a (b(c)) d') == ['a', '(b(c))', 'd']\nassert     separate_paren_groups('a (b(c)) d') == ['a', '(b(c))', 'd']\nassert     separate_paren_groups('(a(b(c))) d') == ['(a(b(c)))', 'd']\nassert     separate_paren_groups('a (b(c) d)') == ['a', '(b(c) d)']\nassert     separate_paren_groups('a (b(c) d) e') == ['a', '(b(c) d)', 'e']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"(a(b))\") == [\"(a(b))\"]\nassert     separate_paren_groups(\"a(b)(c)d\") == [\"a(b)(c)d\"]\nassert     separate_paren_groups(\"(a(b)(c)d)\") == [\"(a(b)(c)d)\"]\nassert     separate_paren_groups(\"(a )(b )(c)\") == [\"(a )(b )(c)\"]\nassert     separate_paren_groups(\"(a )(b )(c) d\") == [\"(a )(b )(c) d\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     truncate_number(4.0) == 4.0\nassert     truncate_number(4.1) == 4.0\nassert     truncate_number(4.9) == 4.0\nassert     truncate_number(4.99) == 4.0\nassert     truncate_number(4.999) == 4.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     truncate_number(0.0001) == 0.0\nassert     truncate_number(0.00001) == 0.0\nassert     truncate_number(1.1) == 1.0\nassert     truncate_number(1.00) == 1.0\nassert     truncate_number(1.01) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     truncate_number(0.1) == 0.1\nassert     truncate_number(0.25) == 0.25\nassert     truncate_number(0.5) == 0.5\nassert     truncate_number(0.75) == 0.75\nassert     truncate_number(1.0) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     truncate_number(12.2) == 1.2\nassert     truncate_number(12.3) == 1.3\nassert     truncate_number(12.6) == 1.6\nassert     truncate_number(12.9) == 1.9\nassert     truncate_number(12.0) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     truncate_number(99.999) == 0.999\nassert     truncate_number(9.999) == 0.999\nassert     truncate_number(999.999) == 0.999\nassert     truncate_number(99.99) == 1.0\nassert     truncate_number(99.0) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     truncate_number(1.23456789123456789) == 1.23456789123456789\nassert     truncate_number(1.0) == 1.0\nassert     truncate_number(1.23456789123456789123456789) == 1.23456789123456789\nassert     truncate_number(1.0e-4) == 0\nassert     truncate_number(1.0e-10) == 0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     truncate_number(1.1) == 1.0\nassert     truncate_number(1.5) == 0.5\nassert     truncate_number(1.5999) == 0.5999\nassert     truncate_number(2.0) == 0.0\nassert     truncate_number(0.1) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     truncate_number(25.00) == 25.0\nassert     truncate_number(25.99) == 26.0\nassert     truncate_number(26.05) == 26.0\nassert     truncate_number(26.00) == 26.0\nassert     truncate_number(26.12) == 26.1\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     truncate_number(1.12) == 0.12\nassert     truncate_number(1.123) == 0.123\nassert     truncate_number(1.12345) == 0.12345\nassert     truncate_number(1.123456) == 0.1234\nassert     truncate_number(1.1234567) == 0.12345\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     truncate_number(12.34567) == 0.34567\nassert     truncate_number(.1234567) == 0.1234567\nassert     truncate_number(.123456789) == 0.123456789\nassert     truncate_number(.000000001) == 0.0\nassert     truncate_number(.00000001) == 0.0\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_zero([10, 10]) == True\nassert     below_zero([10, -10]) == False\nassert     below_zero([10, -10, 10]) == True\nassert     below_zero([10, 10, 10]) == False\n\ndef break_words(s: str) -> List[str]:\n    \"\"\" you will be given a string that you must break into individual words (separated by a space).\n    Return a list of the words\n    \"\"\"\n    return s.split(' ')\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\nassert     below_zero([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\nassert     not below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\nassert     below_zero([0, 1, 1, 1, 1, 1, 1, 1, 1, 1])\nassert     below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_zero([\n                    [0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 1, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 1, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0]\n                ]) == True\nassert     below_zero([\n                    [0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 1, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 1, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0, 0]\n                ]) == False\n\ndef jumping_on_clouds(clouds: List[int]) -> int:\n    \"\"\" You are in the middle of a jungle. You receive a list of trees with height and if they can reach you\n    return the height of your path. Else return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_zero([-2, 0, 3, -2, 3, -3, 3, -3, 3]) == False\nassert     below_zero([-2, 0, 3, -2, 3, -3, 3, -3, 3, -2]) == True\nassert     below_zero([-2, 3, -2, 3, -3, 3, -3, 3, -3, 3, -2]) == False\n\n\ndef repeated_digits(number: int) -> int:\n    \"\"\" Detects if number contains more than one digit that repeats itself.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     False == below_zero([0, 3, 4, 5])\nassert     True == below_zero([0, 5, 5, 2, 3, 3, 3, 3, 3])\nassert     False == below_zero([5, 3, 3, 3, 3, 3, 3, 3, 3])\nassert     True == below_zero([5, 3, 3, 3, 3, 3, 3, 3, 5])\nassert     False == below_zero([3, 3, 3, 3, 3, 3, 3, 3, 3])\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_zero([0,0,0,0,0,0,0]) is False\nassert     below_zero([-2,0,0,3,0,-3]) is False\nassert     below_zero([0,-2,0,0,0,-1]) is True\nassert     below_zero([0,-2,-1,0,0,-1]) is False\nassert     below_zero([0,0,0,0,0,-3]) is True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_zero([1, 0, 1]) == True\nassert     below_zero([-1, -1]) == True\nassert     below_zero([0, 1]) == False\nassert     below_zero([-1, 0]) == False\nassert     below_zero([-1, -1, 0]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_zero([3, 1, 2, 3, 4, 3, 5, 3, 3])\nassert     not below_zero([3, 1, 2, 3, 4, 3, 5, 3, 3])\nassert     not below_zero([-3, -1, 2, 3, 4, 3, 5, 3, 3])\nassert     not below_zero([1, -2, 3, -4, 5, 3, -6, 3, -3])\nassert     below_zero([-3, -1, 2, 3, 4, 3, 5, 3, 3])\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     below_zero([-1, 1, 1, -1]) == True\nassert     below_zero([1, 1, 1, -1]) == False\nassert     below_zero([-1, 1, 1, -1, 1, -1]) == False\nassert     below_zero([-1, 1, -1, 1, -1]) == False\nassert     below_zero([-1, 1, 1, 1, -1]) == False\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.3\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 2.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 3.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([5.5, 4.5, 4.5, 3.5]) == 1.85\nassert     mean_absolute_deviation([3.3, 4.5, 4.5, 3.5, 4.5, 3.5]) == 2.45\nassert     mean_absolute_deviation([3.3, 4.5, 4.5, 3.5, 4.5, 3.5, 3.3]) == 1.58\n\nassert     mean_absolute_deviation([4.5, 3.5, 3.5, 4.5]) == 2.25\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     0.0 == mean_absolute_deviation([-1, 0, 1, 2, 3])\nassert     0.5 == mean_absolute_deviation([-1, 0, 1, 2, 3, 4, 5])\nassert     1.0 == mean_absolute_deviation([0.0, 1.0, 2.0, 3.0])\nassert     1.0 == mean_absolute_deviation([-0.5, 0.0, 0.5, 1.0])\nassert     1.0 == mean_absolute_deviation([0.0, 0.0, 0.0, 0.0])\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 3.0\nassert     mean_absolute_deviation([1, 3, 5, 7, 9]) == 4.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 4.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 1.0825\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 1.9975\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2.8425\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3.6025\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 4.5875\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 2\nassert     mean_absolute_deviation([-1, -2, -3, -4]) == 2\nassert     mean_absolute_deviation([]) == 0\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5]) == 4\nassert     mean_absolute_deviation([-1, 1, 3, -4]) == 2\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([-2.5, 1, 2.5, 3, 4]) == 1.9\nassert     mean_absolute_deviation([-2.5, -1, 2.5, 3, 4]) == 1.5\nassert     mean_absolute_deviation([2.5, 1, 2.5, 3, 4]) == 1.5\nassert     mean_absolute_deviation([2.5, 2, 2.5, 3, 4]) == 1.5\nassert     mean_absolute_deviation([3.5, 4, 2.5, 3, 4]) == 2.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([0, 0, 0, 1, 1, 2, 4]) == 1.5\nassert     mean_absolute_deviation([-1.5, -0.5, 0.5, 1.5, 2.5]) == 1.5\nassert     mean_absolute_deviation([-1.0, -0.5, 0.5, 1.0, 2.0]) == 1.0\nassert     mean_absolute_deviation([-0.5, -0.5, 0.5, 0.5, 1.5]) == 0.5\nassert     mean_absolute_deviation([-1.5, -0.5, 0.5, 1.5, 2.5, 4.5]) == 1.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1, 2, 3]) == 1.5\nassert     mean_absolute_deviation([2, 4, 6]) == 2.5\nassert     mean_absolute_deviation([9, 8, 7]) == 7.5\nassert     mean_absolute_deviation([10, 13, 8]) == 9.5\nassert     mean_absolute_deviation([-1, 3, 4]) == 3.5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 2.25\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 3.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6.5\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 2, 3, 4, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [1, 1, 2, 2, 3, 3, 4, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 5) == [1, 1, 2, 2, 3, 3, 4, 4, 5]\nassert     intersperse([1, 2, 3, 4, 5], 0) == [1, 1, 2, 2, 3, 3, 4, 4, 5]\n\n\ndef qs(numbers: List[int], lo: int, hi: int) -> List[int]:\n    \"\"\" Find the index of the median of the sorted list of numbers\n    [lo, hi) as defined by the sequence to be sorted\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersperse([1,2,3,4,5], 2) == [1, 2, 2, 3, 4, 5]\nassert     intersperse([1,2,3,4,5], 3) == [1, 3, 4, 5]\nassert     intersperse([1,2,3,4,5], 6) == [1, 6, 2, 3, 4, 5]\nassert     intersperse([1,2,3,4,5], -1) == [1, 2, 3, 4, 5]\nassert     intersperse([1,2,3,4,5], 4) == [1, 4, 2, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=1) == [1, 1, 2, 3, 4, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=2) == [1, 2, 1, 2, 3, 4, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=5) == [1, 2, 3, 4, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=10) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersperse([1,2,3], 4) == [1, 4, 2, 3, 4]\nassert     intersperse([1,2,3,4], 4) == [1, 4, 2, 3, 4]\nassert     intersperse([1,2,3,4], 0) == [1, 2, 3, 4]\nassert     intersperse([1,2,3,4], 1) == [1, 2, 3, 4, 1]\nassert     intersperse([1,2,3,4], 5) == [1, 5, 2, 3, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersperse([1,2,3,4], 3) == [1,3,3,4,3]\nassert     intersperse([1,2,3,4], 1) == [1,1,2,3,3,4]\nassert     intersperse([1,2,3,4], 5) == [1,5,5,2,3,3,4]\nassert     intersperse([1,2,3,4], 0) == [1,0,2,0,3,0,4]\nassert     intersperse([1,2,3,4], -1) == [1,2,3,4,3,2,1]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 5) == [1, 5, 5, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 2, 2]\nassert     intersperse([1, 2, 3, 4, 5], 0) == [0, 0, 0, 0, 0]\nassert     intersperse([1, 2, 3, 4, 5], 4) == [1, 4, 4, 4, 4]\nassert     intersperse([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersperse([1, 2, 3], 2) == [1, 2, 2, 3]\nassert     intersperse([1, 2, 3, 4], 4) == [1, 2, 3, 4]\nassert     intersperse([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n\n\ndef reverse_string(s: str) -> str:\n    \"\"\"Reverse a string `s` in-place\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=2) == [1, 2, 2, 3, 4, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=1) == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=0) == [1, 2, 3, 4, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=5) == [1, 2, 3, 4, 5]\nassert     intersperse(numbers=[1, 2, 3, 4, 5], delimeter=6) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersperse([], 2) == []\nassert     intersperse([1], 2) == [1]\nassert     intersperse([1, 2, 3], 2) == [1, 2, 2, 3]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 3, 4, 4, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 3) == [1, 2, 3, 3, 4, 4, 4, 5, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersperse([0, 1, 2, 3, 4, 5, 6], 3) == [0, 3, 6, 3, 6, 3, 6]\nassert     intersperse([0, 1, 2, 3, 4, 5, 6], 6) == [0, 6, 6, 6, 6, 6, 6]\nassert     intersperse([0, 1, 2, 3, 4, 5, 6], 0) == [0, 0, 1, 2, 3, 4, 5, 6]\nassert     intersperse([0, 1, 2, 3, 4, 5, 6], -1) == [0, 1, 2, 3, 4, 5, 6]\nassert     intersperse([], 0) == []\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"()(())(())\") == [2, 1, 0]\nassert     parse_nested_parens(\"((()))\") == [2]\nassert     parse_nested_parens(\"(()\") == [0]\nassert     parse_nested_parens(\"(())(\") == [1]\nassert     parse_nested_parens(\"())(())(\") == [2, 0, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"(()()))\") == [3, 2, 1, 0]\nassert     parse_nested_parens(\"(())()\") == [2, 1, 0, 0]\nassert     parse_nested_parens(\"()(())\") == [1, 0, 0, 1]\nassert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"(((())))\") == [4]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_nested_parens('((()'    ) == [0, 0, 1]\nassert     parse_nested_parens('(()(()()())())'    ) == [0, 0, 1, 2, 4]\nassert     parse_nested_parens(')())()()()()()()()()()()()(()())') == [10, 7, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     parse_nested_parens('()(()()()()()()()()()())()()()()()()(())()())') == [10, 7, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     parse_nested_parens('()(())()()()()()()()()())()()()()()()(())()())') == [10, 7, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"(())\") == [0,0]\nassert     parse_nested_parens(\"(()())\") == [0,0,0]\nassert     parse_nested_parens(\"((()\")) == [1,0]\nassert     parse_nested_parens(\"(()(())\") == [2,1,0]\nassert     parse_nested_parens(\"((())(())\") == [3,2,1,0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(()())\") == [3]\nassert     parse_nested_parens(\"((()))\") == [2]\nassert     parse_nested_parens(\"((()()))\") == [4]\nassert     parse_nested_parens(\"(()())\") == [3]\nassert     parse_nested_parens(\"(()())\") == [3]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2,2,0]\nassert     parse_nested_parens(\"(())\") == [2,0]\nassert     parse_nested_parens(\"(()())\") == [2,2,0]\nassert     parse_nested_parens(\"(((())))\") == [4,1,0]\nassert     parse_nested_parens(\"(\") == [0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_nested_parens('(())') == [0, 0]\nassert     parse_nested_parens('(()(()()))') == [3, 6]\nassert     parse_nested_parens('((()())())') == [5, 10]\nassert     parse_nested_parens('(()(()()))') == [5, 10]\nassert     parse_nested_parens('(((((((((((((())))))))))))))') == [10, 17]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_nested_parens('(()())') == [1, 1, 1, 1]\nassert     parse_nested_parens('(((()))())') == [3, 1, 1, 1, 1]\nassert     parse_nested_parens('()(()()()()(()))') == [1, 1, 2, 1, 1, 1, 1, 1, 1, 1]\n\n\ndef find_word_horizontal(board: List[List[str]], word: str) -> bool:\n    \"\"\" Find a word horizontally in the board. \n    Do not use the `find_word_vertically` function.\n    \"\"\"\n    rows = len(board)\n    cols = len(board[0])\n\n    for row in range(rows):\n        for col in range(cols):\n            if board[row][col] == word[0]:\n                if find_word_vertical(board, word, row, col):\n                    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_nested_parens('()') == [0]\nassert     parse_nested_parens('((()))') == [2]\nassert     parse_nested_parens('((()))') == [2]\nassert     parse_nested_parens('((((()))))') == [4]\nassert     parse_nested_parens('(((((((())))))') == [4]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_nested_parens('()()') == [0, 0]\nassert     parse_nested_parens('()()()') == [0, 0, 0]\nassert     parse_nested_parens('(())') == [1, 1]\nassert     parse_nested_parens('()()(())') == [2, 0, 0]\nassert     parse_nested_parens('(((())))') == [3, 0, 0]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"hello\", \"hey\", \"there\", \"hola\", \"goodbye\", \"hey there\"], \"hey\") == [\"hey\", \"hey there\"]\nassert     filter_by_substring([\"hello\", \"hey\", \"there\", \"hola\", \"goodbye\", \"hey there\"], \"there\") == [\"there\", \"hey there\"]\nassert     filter_by_substring([\"hello\", \"hey\", \"there\", \"hola\", \"goodbye\", \"hey there\"], \"test\") == []\nassert     filter_by_substring([\"hello\", \"hey\", \"there\", \"hola\", \"goodbye\", \"hey there\"], \"hello\") == [\"hello\", \"hey\", \"hey there\"]\nassert     filter_by_substring([\"hello\", \"hey\", \"there\", \"hola\", \"goodbye\", \"hey there\"], \"hell\") == [\"hello\", \"hey\", \"hey there\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"ABC\", \"AAA\", \"BAB\", \"CBA\"], \"AB\") == [\"ABC\", \"AAA\"]\nassert     filter_by_substring([\"ABC\", \"AAA\", \"BAB\", \"CBA\"], \"A\") == [\"AAA\", \"BAB\", \"CBA\"]\nassert     filter_by_substring([\"ABC\", \"AAA\", \"BAB\", \"CBA\"], \"C\") == [\"CBA\"]\nassert     filter_by_substring([\"ABC\", \"AAA\", \"BAB\", \"CBA\"], \"AB\") == [\"ABC\", \"AAA\"]\nassert     filter_by_substring([\"ABC\", \"AAA\", \"BAB\", \"CBA\"], \"B\") == [\"BAB\", \"CBA\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"k\", \"j\", \"k\", \"m\", \"k\"], \"k\") == [\"k\", \"k\"]\nassert     filter_by_substring([\"k\", \"j\", \"k\", \"m\", \"k\"], \"j\") == [\"j\"]\nassert     filter_by_substring([\"k\", \"j\", \"k\", \"m\", \"k\"], \"j\") == [\"j\"]\nassert     filter_by_substring([\"k\", \"j\", \"k\", \"m\", \"k\"], \"x\") == []\nassert     filter_by_substring([\"k\", \"j\", \"k\", \"m\", \"k\", \"j\", \"k\"], \"k\") == [\"k\", \"k\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef filter_by_multiple_substrings(strings: List[str],\n    substrings: List[str]\n) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain any of the given substring\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['abracadabra', 'alakazam', 'alakazam', 'alakazam', 'zebra-camel', 'pinkie', 'pinkie','mississippi'],'s') == ['alakazam', 'pinkie','mississippi']\nassert filter_by_substring(['abracadabra', 'alakazam', 'alakazam', 'alakazam', 'zebra-camel', 'pinkie', 'pinkie','mississippi'], 'z') == ['zebra-camel', 'zebra-camel', 'zebra-camel', 'zebra-camel']\nassert filter_by_substring(['abracadabra', 'alakazam', 'alakazam', 'alakazam', 'zebra-camel', 'pinkie', 'pinkie','mississippi'], 'ra') == ['abracadabra', 'alakazam', 'alakazam', 'alakazam', 'zebra-camel', 'pinkie', 'pinkie','mississippi']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_substring(\n        [\"hello\", \"hi\", \"world\", \"hey\"],\n        \"hello\"\n    ) == [\"hello\", \"hi\", \"world\"]\nassert     filter_by_substring(\n        [\"hello\", \"hi\", \"world\"],\n        \"hello\"\n    ) == [\"hello\", \"hi\", \"world\"]\nassert     filter_by_substring(\n        [\"hello\", \"hi\", \"world\"],\n        \"help\"\n    ) == []\nassert     filter_by_substring(\n        [\"hello\", \"hi\", \"world\"],\n        \"hell\"\n    ) == [\"hello\"]\nassert     filter_by_substring(\n        [\"hello\", \"hi\", \"world\"],\n        \"wor\"\n    ) == [\"world\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"Paula\", \"Brian\", \"Diana\", \"Paolo\", \"Mauro\"], \"P\") == [\"Paula\", \"Paolo\"]\nassert     filter_by_substring([\"Paula\", \"Brian\", \"Diana\", \"Paolo\", \"Mauro\"], \"D\") == [\"Diana\", \"Mauro\"]\nassert     filter_by_substring([\"Paula\", \"Brian\", \"Diana\", \"Paolo\", \"Mauro\"], \"B\") == [\"Brian\", \"Paolo\"]\nassert     filter_by_substring([\"Paula\", \"Brian\", \"Diana\", \"Paolo\", \"Mauro\"], \"P\") == [\"Paula\", \"Brian\", \"Paolo\", \"Mauro\"]\nassert     filter_by_substring([\"Paula\", \"Brian\", \"Diana\", \"Paolo\", \"Mauro\"], \"r\") == [\"Paula\", \"Diana\", \"Paolo\", \"Mauro\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_substring([\"Test\", \"sample test\", \"Test3\", \"Test4\"], \"Test\") == [\"Test\", \"Test3\"]\nassert     filter_by_substring([\"Test\", \"sample test\", \"Test3\", \"Test4\"], \"Test3\") == [\"Test3\"]\nassert     filter_by_substring([\"Test\", \"sample test\", \"Test3\", \"Test4\"], \"Test1\") == []\nassert     filter_by_substring([\"Test\", \"sample test\", \"Test3\", \"Test4\"], \"Test2\") == []\nassert     filter_by_substring([\"Test\", \"sample test\", \"Test3\", \"Test4\"], \"Test4\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\"], \"ab\") == [\"b\", \"c\"]\nassert filter_by_substring([\"a\", \"b\", \"c\"], \"c\") == [\"c\"]\nassert filter_by_substring([\"a\", \"b\", \"c\"], \"b\") == [\"b\"]\nassert filter_by_substring([\"a\", \"b\", \"c\"], \"d\") == []\n\n\ndef filter_by_lower_bound(strings: List[str], lower_bound: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain at least given number of characters\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_substring(['Cat', 'Dog', 'Pig', 'Goat', 'Tiger'], 'Dog') == ['Dog', 'Pig']\nassert     filter_by_substring(['Cat', 'Dog', 'Pig', 'Goat', 'Tiger'], 'Goat') == ['Goat']\nassert     filter_by_substring(['Cat', 'Dog', 'Pig', 'Goat', 'Tiger'], 'Foobar') == []\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([-1, -2, -3, -4]) == (-8, 24)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 1]) == (2, 1)\nassert     sum_product([-1, -1]) == (-2, -1)\nassert     sum_product([-1, 1]) == (0, -1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n\n\ndef search_and_replace(s: str, old_str: str, new_str: str) -> str:\n    \"\"\" For a given string, return a new string that is obtained by replacing the old_str with the new_str.\n    If the old_str is not present in the string, return the original string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 1]) == (2, 1)\nassert     sum_product([-1, 1]) == (-1, 1)\nassert     sum_product([-1, -1]) == (-2, -1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1,2,3,4]) == (10, 24)\n\n\ndef sum_nth_list(lst: List[int], n: int) -> int:\n    \"\"\" For a given list of integers, return the sum of the integers from index 0 to n (excluding n) \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([-1, 0, 1]) == (0, 0)\nassert     sum_product([-1, 1, -2]) == (1, -6)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sum_product([]) == (0, 1))\nassert     (sum_product([1]) == (1, 1))\nassert     (sum_product([1, 2]) == (3, 2))\nassert     (sum_product([1, 2, 3]) == (6, 6))\nassert     (sum_product([1, 2, 3, 4]) == (10, 24))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([-1, -2, -3, -4]) == (0, -24)\nassert     sum_product([1.1, 2.2, 3.3, 4.4]) == (14.5, 48.0)\n\n\ndef sum_product_different_types(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([3, 4, -1, 3, 6, 7, 8]) == [3, 4, -1, 3, 6, 7, 8]\nassert     rolling_max([3, 4, 5, -2, 3, 4, -1, 1, -2, 2, 2]) == [3, 4, 5, -2, 3, 4, -1, 1, -2, 2, 2]\n\n\ndef hanoi(number_of_disks: int, source_position: int, destination_position: int, intermediate_position: int) -> List[str]:\n    \"\"\"\n    Compute the movement of the disks from the source pole to the destination pole\n    (assuming that the source pole is always the last pole)\n    using the intermediate pole.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rolling_max([3, 2, 1]) == [3, 3, 2]\nassert     rolling_max([1, 2, 3]) == [3, 3, 3]\nassert     rolling_max([1, 2, 3, 4]) == [3, 3, 4, 4]\nassert     rolling_max([1, 2, 3, 4, 5]) == [3, 4, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [6, 6, 6, 6, 6, 6]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 1, 2, 3, 4, 5, 7, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rolling_max([10, 5, 3, 7, 8, 6, 4]) == [10, 10, 10, 10, 10, 10, 10]\nassert     rolling_max([10, 5, 3, 4]) == [10, 10, 10, 10]\nassert     rolling_max([10, 5, 3, 4, 1]) == [10, 10, 10, 10, 10]\n\n\ndef rolling_max_unroll(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    max_list = []\n    for i in range(len(numbers)):\n        max_list.append(max(numbers[i:]))\n    return max_list\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7]    == rolling_max([0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7])\nassert     [0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7]    == rolling_max([0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7])\nassert     [0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7]    == rolling_max([0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7])\nassert     [0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7]    == rolling_max([0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7])\nassert     [0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7]    == rolling_max([0, 3, 3, 3, 3, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1,2]) == [2,1]\nassert     rolling_max([1,2,3]) == [3,2,1]\nassert     rolling_max([1,2,3,4,5]) == [5,4,3,2,1]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rolling_max([3, 2, 1, 0]) == [3, 2, 1, 0]\nassert     rolling_max([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([3, 1, 4, 4, 4, 1]) == [3, 1, 4, 4, 4, 1]\nassert     rolling_max([4, 2, 1, 1, 4, 4, 1]) == [4, 2, 1, 1, 4, 4, 1]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     rolling_max([2, 1, 2, 3, 1, 1, 1, 1]) == [2, 2, 3, 3, 3, 3, 3, 3]\nassert     rolling_max([2, 1, 2, 3, 1, 1, 1, 1, 1]) == [2, 2, 3, 3, 3, 3, 3, 3, 3]\nassert     rolling_max([2, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1]\nassert     rolling_max([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == [-2, 1, -2, 4, -1, 2, 2, 1, 4]\nassert     rolling_max([1]) == [1]\nassert     rolling_max([]) == []\n\ndef count_inversions(array: List[int]) -> int:\n    \"\"\" Count the number of inversions in a sequence of numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nassert rolling_max([5, 1, 2, 3, 4]) == [5, 5, 1, 2, 3]\nassert rolling_max([5, 1, 2, 3, 4, 1]) == [5, 5, 1, 2, 3, 4]\nassert rolling_max([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\nassert rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_palindrome('abcd') == 'dcbabcd'\nassert     make_palindrome('ab') == 'bab'\nassert     make_palindrome('aa') == 'aa'\nassert     make_palindrome('aaa') == 'aaa'\nassert     make_palindrome('abcba') == 'cbaaabcba'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome('a')\nassert     is_palindrome('ab')\nassert     is_palindrome('aba')\nassert     is_palindrome('abac')\nassert     is_palindrome('abaa')\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome(\"racecar\")\nassert     is_palindrome(\"abab\")\nassert     make_palindrome(\"abab\") == \"racecar\"\nassert     make_palindrome(\"abab\") == \"ababab\"\nassert     make_palindrome(\"racecar\") == \"racecar\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_palindrome(\"abcdcba\") == \"abcdcba\", \"Test 1 failed\"\nassert     make_palindrome(\"abcdcba\") == \"abcdcba\", \"Test 2 failed\"\nassert     make_palindrome(\"abcdcbb\") == \"abcdcb\", \"Test 3 failed\"\nassert     make_palindrome(\"abcdcba\") == \"abcdcba\", \"Test 4 failed\"\nassert     make_palindrome(\"abcdcb\") == \"abcdcb\", \"Test 5 failed\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_palindrome(\"abac\") == True\nassert     is_palindrome(\"abacaba\") == True\nassert     is_palindrome(\"abacabaabacaba\") == True\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"a\"*15) == True\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_palindrome('abdbcdbba') == 'abdbcdbba', 'error'\nassert     make_palindrome('abdc') == 'abdcba', 'error'\nassert     make_palindrome('abc') == 'abcba', 'error'\nassert     make_palindrome('abcba') == 'abcba', 'error'\nassert     make_palindrome('abcba') == 'abcba', 'error'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_palindrome('noon') == True\nassert     is_palindrome('noonasdfasdf') == False\nassert     is_palindrome('noonamana') == False\nassert     is_palindrome('noon') == True\nassert     is_palindrome('noona') == True\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_palindrome(\"abcd\") == \"dcbaabcd\"\nassert     make_palindrome(\"abcdabcd\") == \"dcbaabcdba\"\nassert     make_palindrome(\"abcdabcdab\") == \"dcbaabcdbaabcd\"\nassert     make_palindrome(\"abcdabcdabcd\") == \"dcbaabcdbaabcdabcd\"\nassert     make_palindrome(\"abcdabcdabcdabcd\") == \"dcbaabcdbaabcdabcdabcd\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_palindrome(\"test\") == \"testestest\"\nassert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"ab\") == \"aab\"\nassert     make_palindrome(\"tac\") == \"tacttac\"\nassert     make_palindrome(\"abb\") == \"aabab\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_palindrome(\"abcd\") == \"dcbaabcd\"\nassert     make_palindrome(\"abcdef\") == \"fdfddfeabcdef\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"aab\") == \"bbabaa\"\nassert     make_palindrome(\"z\") == \"z\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_xor(\"1100010100011101000110001000101111000100111010100111111000110001110100011000100011110100\",\n                    \"10001000100011101000110001000101111000100111010100111111000110001110100011000100011110100\") == \\\n            \"1101000100011101000110001000101111000100111010100111111000110001110100011000100011110100\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_xor(\"1110101\", \"1110111\") ==     \"0110100\"\nassert     string_xor(\"1110101\", \"1100011\") ==     \"0101110\"\nassert     string_xor(\"1111111\", \"1101011\") ==     \"0110111\"\nassert     string_xor(\"0001100\", \"0000100\") ==     \"1000010\"\nassert     string_xor(\"0101100\", \"1110111\") ==     \"1000010\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_xor(\"11000101\", \"01111001\") == \"00000001\"\nassert     string_xor(\"1\", \"1\") == \"0\"\nassert     string_xor(\"0\", \"0\") == \"0\"\nassert     string_xor(\"1\", \"0\") == \"1\"\nassert     string_xor(\"11010101\", \"10101011\") == \"10001010\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_xor(\"0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_xor( '', '' ) == ''\nassert     string_xor( '0', '0' ) == '0'\nassert     string_xor( '1', '0' ) == '1'\nassert     string_xor( '0', '1' ) == '1'\nassert     string_xor( '1', '1' ) == '0'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_xor('1', '0') == '1'\nassert     string_xor('0', '1') == '1'\nassert     string_xor('00001101', '00000101') == '00000010'\nassert     string_xor('01010101', '01010101') == '00000000'\n\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_xor('10', '0001') == '0101'\nassert     string_xor('10000', '1') == '0000'\nassert     string_xor('00010000', '1111110000') == '1111110101'\nassert     string_xor('101011101', '10101') == '0101011101'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     '0'*5 + '1'*5 == string_xor('1'*5, '0'*5)\nassert     '1'*5 + '0'*5 == string_xor('0'*5, '1'*5)\nassert     '0'*5 + '1'*5 == string_xor('0'*5, '0'*5)\nassert     '0'*5 + '1'*5 == string_xor('1'*5, '1'*5)\n\n\ndef array_plus(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two arrays of numbers.\n    Return an array consisting of the numbers that are in a and b, but not both.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_xor('110010101000110100', '110010101000110101') ==         '01101010111010100'\nassert     string_xor('110010101000110100', '110010101000110101') ==         '10101010111010101'\nassert     string_xor('110010101000110100', '110010101000110101') ==         '110010101000110100'\nassert     string_xor('110010101000110100', '110010101000110101') ==         '01101010111010100'\nassert     string_xor('110010101000110100', '110010101000110101') ==         '10101010111010101'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_xor(\"10101010\", \"01101101\") == \"10101011\"\nassert     string_xor(\"10010100\", \"01101101\") == \"00101011\"\nassert     string_xor(\"10010100\", \"10110101\") == \"01101101\"\nassert     string_xor(\"10010100\", \"10111101\") == \"11011101\"\nassert     string_xor(\"10010100\", \"11110101\") == \"10001010\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     longest([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"e\"\nassert     longest([\"a\", \"b\", \"c\"]) == \"c\"\nassert     longest([\"a\", \"b\"]) == \"a\"\nassert     longest([]) is None\nassert     longest([\"\", \"\", \"\"]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     longest([\"abcdefg\", \"abcdefg\", \"abcdefg\"]) == \"abcdefg\"\nassert     longest([\"abc\", \"abc\", \"abc\"]) == \"abc\"\nassert     longest([\"ab\", \"abc\", \"abc\"]) == \"abc\"\nassert     longest([\"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\"\nassert     longest([\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]) == \"abc\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         longest(['a', 'a']) is None\nassert         longest(['a', 'a', 'b']) == 'b'\nassert         longest(['a', 'b', 'c']) == 'c'\nassert         longest(['a', 'b', 'c', 'd']) == 'c'\nassert         longest(['a', 'b', 'c', 'd', 'e']) == 'e'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     longest(['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == 'abcdef'\nassert     longest(['', 'abc', 'abcdef']) == 'abc'\nassert     longest([]) == None\nassert     longest(['a', 'ab', 'abc']) == 'ab'\nassert     longest(['abc', 'abcdef']) == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     longest([\"abc\", \"xyz\", \"aba\", \"1221\"]) == \"abc\"\nassert     longest([\"bob\", \"joe\", \"joe\", \"joe\", \"james\"]) == \"joe\"\nassert     longest([]) is None\nassert     longest([\"abc\", \"xyz\", \"aba\", \"1221\"]) == \"abc\"\nassert     longest([\"bob\", \"joe\", \"joe\", \"joe\", \"james\"]) == \"joe\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     longest(['abcdef', 'abcde', 'abc']) == 'abcdef', \"First\"\nassert     longest(['a', 'ab', 'abc', 'cd', 'bcd', 'abcd']) == 'abcd', \"Second\"\nassert     longest(['a', '', 'abc', 'cd', 'bcd', 'abcd']) == 'abcd', \"Third\"\nassert     longest(['a', 'ab', '', 'cd', 'bcd', 'abcd']) == 'abcd', \"Fourth\"\nassert     longest(['', '', '']) == None, \"Fifth\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     longest([\"abc\", \"abcdef\", \"abcef\", \"abcefgh\"]) == \"abcdef\"\nassert longest([\"abc\", \"abcdef\", \"abcef\", \"abcefgh\", \"abcefghi\"]) == \"abcefghi\"\nassert longest([\"abcef\", \"abcefgh\", \"abcefghi\"]) == \"abcefghi\"\nassert longest([\"abcef\", \"abcefgh\", \"abcefghi\", \"abcefghj\"]) == \"abcefghi\"\nassert longest([\"abcef\", \"abcefgh\", \"abcefghi\", \"abcefghj\", \"abcefghk\"]) == \"abcefghi\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     longest([\"apple\", \"banana\", \"carrot\"]) == \"carrot\"\nassert     longest([\"a\", \"b\", \"c\"]) == \"a\"\nassert     longest([]) is None\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"a\"\nassert     longest([\"a\", \"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     longest([\"Python\", \"Java\", \"PHP\", \"Scala\", \"C\", \"Haskell\", \"Ruby\"]) == \"Haskell\"\nassert     longest([\"Lisp\", \"Python\", \"Go\", \"Java\", \"PHP\", \"Haskell\", \"Ruby\"]) == \"Ruby\"\nassert     longest([\"Javascript\", \"HTML\", \"CSS\", \"Python\", \"Haskell\", \"Ruby\"]) == \"Python\"\nassert     longest([]) is None\nassert     longest([\"\", \"\", \"\", \"\"]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     longest([\"Hello\", \"World\"]) == \"Hello\"\nassert     longest([\"Hello\", \"World\", \"Zombies\", \"Pandas\", \"Sloth\"]) == \"Pandas\"\nassert longest([\"Zombies\", \"Pandas\", \"Sloth\"]) == \"Pandas\"\nassert longest([\"Hello\", \"World\", \"Zombies\", \"Pandas\", \"Sloth\"]) == \"Zombies\"\nassert longest([]) is None\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef make_anonymous_factorial():\n    \"\"\" Return an anonymous function\n    that computes factorial, and make\n    an instance of that anonymous function.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(5, 6) == 1\nassert     greatest_common_divisor(5, 5) == 5\nassert     greatest_common_divisor(8, 4) == 4\nassert     greatest_common_divisor(12, 8) == 4\nassert     greatest_common_divisor(24, 12) == 6\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(7, 14) == 1\nassert greatest_common_divisor(0, 14) == 14\nassert greatest_common_divisor(7, 0) == 7\nassert greatest_common_divisor(0, 0) == 0\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(12, 8) == 4\nassert     greatest_common_divisor(6, 3) == 3\nassert     greatest_common_divisor(3, 6) == 3\nassert     greatest_common_divisor(0, 9) == 9\nassert     greatest_common_divisor(9, 0) == 9\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(5, 3) == 1\nassert     greatest_common_divisor(3, 5) == 1\nassert     greatest_common_divisor(6, 4) == 2\nassert     greatest_common_divisor(12, 10) == 6\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(10, 10) == 10\nassert     greatest_common_divisor(4, 8) == 4\nassert     greatest_common_divisor(4, 9) == 1\nassert     greatest_common_divisor(12, 8) == 4\nassert     greatest_common_divisor(9, 12) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(12, 15) == 3\nassert greatest_common_divisor(6, 12) == 6\nassert greatest_common_divisor(6, 8) == 6\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef calc_shannon_entropy(text: str) -> float:\n    \"\"\" Return shannon entropy of a string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(1, 1) == 1\nassert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(2, 1) == 1\nassert     greatest_common_divisor(2, 2) == 2\nassert     greatest_common_divisor(3, 1) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(4,8)    ==    4\nassert     greatest_common_divisor(8,4)    ==    4\nassert     greatest_common_divisor(8,8)    ==    8\nassert     greatest_common_divisor(4,0)    ==    0\nassert     greatest_common_divisor(0,0)    ==    0\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"abcd\") == ['', 'a', 'ab', 'abc', 'abcd']\nassert     all_prefixes(\"ac\") == ['', 'a', 'ac']\nassert     all_prefixes(\"\") == ['', '']\nassert     all_prefixes(\"b\") == ['', 'b']\nassert     all_prefixes(\"abcdef\") == ['', 'abc', 'abcd', 'abcde', 'abcdef']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"abcd\") ==     ['ab', 'abc', 'abcd']\nassert     all_prefixes(\"abcdx\") ==     ['ab', 'abc', 'abcd', 'abcx', 'abcdx']\nassert     all_prefixes(\"abcdy\") ==     ['ab', 'abc', 'abcd', 'abcx', 'abcdx']\nassert     all_prefixes(\"abcde\") ==     ['ab', 'abc', 'abcd', 'abcde']\nassert     all_prefixes(\"xyz\") ==     ['xyz']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_prefixes('foobar') == ['f', 'foo', 'fo', 'fob', 'foo', 'foobar']\nassert     all_prefixes('bar') == ['', 'b', 'ba', 'bar']\nassert     all_prefixes('barfoobar') == ['', 'b', 'ba', 'bar', 'bar', 'barfoobar']\nassert     all_prefixes('barfoobarbaz') == ['', 'b', 'ba', 'bar', 'bar', 'barfoobar', 'barfoobarbaz']\nassert     all_prefixes('barfoobaz') == ['', 'b', 'ba', 'bar', 'bar', 'barfoobaz']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_prefixes('dog') == ['do', 'd', '', 'dog']\nassert     all_prefixes('cat') == ['ca', 'c', '', 'cat']\nassert     all_prefixes('c') == ['', 'c']\nassert     all_prefixes('') == ['']\nassert     all_prefixes('car') == ['', 'c', 'ca', 'car']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_prefixes('abcd') == ['', 'a', 'ab', 'abc', 'abcd']\nassert     all_prefixes('abce') == ['', 'a', 'ab', 'abc', 'abce']\nassert     all_prefixes('abf') == ['', 'a', 'ab', 'abc', 'abf']\nassert     all_prefixes('abfghi') == ['', 'a', 'ab', 'abc', 'abf', 'abfghi']\nassert     all_prefixes('abcdefgh') == ['', 'a', 'ab', 'abc', 'abd', 'abcdef', 'abcdefg', 'abcdefgh']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_prefixes('abc') == ['']\nassert     all_prefixes('a') == ['a']\nassert     all_prefixes('ab') == ['a', 'ab']\nassert     all_prefixes('abcdef') == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_prefixes('test') == ['t', 'te', 'tes', 'test']\nassert all_prefixes('test') == ['test']\nassert all_prefixes('word') == ['', 'w', 'wo', 'word', 'wo', 'wor', 'word', 'wo', 'wor', 'word', 'wo', 'wor', 'word', 'wo', 'wor']\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Checks whether the string is a palindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_prefixes(\"codewars\") == ['c', 'co', 'cod', 'coe', 'code']\nassert     all_prefixes(\"toffee\") == ['to', 't', 'toe', 'toe']\nassert     all_prefixes(\"level\") == ['l', 'le', 'lev', 'levl', 'l']\nassert     all_prefixes(\"university\") == ['u', 'un', 'univ', 'univn', 'uni', 'univ']\nassert     all_prefixes(\"school\") == ['s','sch','schl','scholl','scho','sch']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_prefixes(\"ab\") == [\"\", \"a\", \"ab\"]\nassert all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcd\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\"]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_prefixes(\"lorem\") == ['l', 'lo', 'orem']\nassert     all_prefixes(\"lorem\") == ['l', 'lo', 'orem']\nassert     all_prefixes(\"lorem\") == ['l', 'lo', 'orem']\nassert     all_prefixes(\"lorem\") == ['l', 'lo', 'orem']\nassert     all_prefixes(\"lorem\") == ['l', 'lo', 'orem']\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_sequence(3) == '0 1 2'\nassert     string_sequence(4) == '0 1 2 3'\nassert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(6) == '0 1 2 3 4 5'\nassert     string_sequence(7) == '0 1 2 3 4 5 6'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_sequence(0)    == \"\"\nassert     string_sequence(1)    == \"0\"\nassert     string_sequence(2)    == \"0 1\"\nassert     string_sequence(3)    == \"0 1 2\"\nassert     string_sequence(4)    == \"0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_sequence(1)                 == \"0\"\nassert     string_sequence(3)                 == \"00 01 02\"\nassert     string_sequence(5)                 == \"0000 01 02 03 04\"\nassert     string_sequence(5)                 == \"0000 01 02 03 04\"\nassert     string_sequence(10)             == \"000000000001 00000 00000 00000 00000 00000 00000 00000\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         string_sequence(0) == \"\"\nassert         string_sequence(1) == \"0\"\nassert         string_sequence(2) == \"0 1\"\nassert         string_sequence(3) == \"0 1 2\"\nassert         string_sequence(4) == \"0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_sequence(10) =='0 1 2 3 4 5 6 7 8 9'\nassert     string_sequence(11) =='0 1 2 3 4 5 6 7 8 9 10'\nassert     string_sequence(12) =='0 1 2 3 4 5 6 7 8 9 10 11'\nassert     string_sequence(13) =='0 1 2 3 4 5 6 7 8 9 10 11 12'\nassert     string_sequence(14) =='0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_sequence(0)        == \"\"\nassert     string_sequence(1)        == \"0\"\nassert     string_sequence(3)        == \"0 1 2\"\nassert     string_sequence(5)        == \"0 1 2 3 4\"\nassert     string_sequence(7)        == \"0 1 2 3 4 5 6\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0 \"\nassert     string_sequence(2) == \"0 1 \"\nassert     string_sequence(3) == \"0 1 2 \"\nassert     string_sequence(4) == \"0 1 2 3 \"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(3) == '0 1 2'\nassert     string_sequence(4) == '0 1 2 3'\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_sequence(4) == '01 02 03 04'\nassert     string_sequence(5) == '01 02 03 04 05'\nassert     string_sequence(6) == '01 02 03 04 05 06'\nassert     string_sequence(10) == '01 02 03 04 05 06 07 08 09 10'\nassert     string_sequence(11) == '01 02 03 04 05 06 07 08 09 10 11'\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_distinct_characters('aaA') == 2\nassert     count_distinct_characters('aaa') == 1\nassert     count_distinct_characters('aaAAbbb') == 4\nassert     count_distinct_characters('Hello World') == 6\nassert     count_distinct_characters('a') == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"Hi!\") == 2\nassert     count_distinct_characters(\"Hello\") == 5\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"HELLO\") == 5\nassert     count_distinct_characters(\"hElLo\") == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_distinct_characters('ABC') == 1\nassert     count_distinct_characters('aBc') == 2\nassert     count_distinct_characters('aBcDeF') == 3\nassert     count_distinct_characters('aBcDeFGH') == 4\nassert     count_distinct_characters('ABCDEFG') == 5\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('e') == 1\nassert     count_distinct_characters('Hello World!') == 10\nassert     count_distinct_characters('aBcD') == 3\nassert     count_distinct_characters('aBcD') == 3\nassert     count_distinct_characters('aBcD') == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"Hello World\") == 5\nassert     count_distinct_characters(\"what a wonderful world\") == 6\nassert     count_distinct_characters(\"Aa\") == 1\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\") == 6\nassert count_distinct_characters(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\") == 6\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"aA\") == 2\nassert     count_distinct_characters(\"aAb\") == 3\nassert     count_distinct_characters(\"aAbB\") == 4\nassert     count_distinct_characters(\"aAbBc\") == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_distinct_characters('Programming') == 6\nassert     count_distinct_characters('aAbBcC') == 3\nassert     count_distinct_characters('dD') == 1\nassert     count_distinct_characters('aA') == 1\nassert     count_distinct_characters('') == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_distinct_characters('hello') == 5\nassert     count_distinct_characters('hello world') == 6\nassert     count_distinct_characters('Hello world') == 6\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('aA') == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"hello\") == 6\nassert     count_distinct_characters(\"HELLO\") == 6\nassert     count_distinct_characters(\"HEllo\") == 6\nassert     count_distinct_characters(\"HELLo\") == 6\nassert     count_distinct_characters(\"HELLO WORLD\") == 11\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_music(\"o o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_music('o|.|.|o|o')    ==    [4, 2, 4, 2]\nassert     parse_music('o|o|o|o|o|o|o|o') ==    [8, 8, 8, 8, 8, 8, 8]\nassert     parse_music('o|.|o|o|o|o')    ==    [4, 4, 4, 4]\nassert     parse_music('o|o|o|o|o') ==    [4, 4, 4, 4]\nassert     parse_music('o|o|o|o|o|o|o') ==    [8, 8, 8, 8, 8, 8, 8]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_music('o|') == [4]\nassert     parse_music('o|o|o|o|o') == [4,4,4,4,4]\nassert     parse_music('o|o|o|o|o|o|o|o|o') == [4,4,4,4,4,4,4,4,4]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o') == [4,4,4,4,4,4,4,4,4,4,4,4,4]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o') == [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_music('o-o-o|o-o-o|o-o-o|o-o-o|o-o-o|o-o-o|o-o-o|o-o-o|o-o-o|o-o-o') == [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_music('0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o0o"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_music('o.o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_music('o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o') == [2,2,2,2,2,2,2,2,2,2]\nassert     parse_music('o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|o.o|"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_music('') == []\nassert     parse_music('o') == [4]\nassert     parse_music('o|') == [2]\nassert     parse_music('.|') == [1]\nassert     parse_music('o|o') == [4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_music(\"\"\"o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o    \"\"\") == [1, 1, 2, 4, 1, 1, 4, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_music('o')     == [4]\nassert     parse_music('o|')     == [2, 4]\nassert     parse_music('o|o')     == [2, 2, 4]\nassert     parse_music('o|o|o')     == [2, 2, 2, 4]\nassert     parse_music('o|o|o|o')     == [2, 2, 2, 2, 4]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test_how_many_times():\n    assert how_many_times(\"FooBar\", \"Foo\") == 1\n    assert how_many_times(\"FooBar\", \"Bar\") == 2\n    assert how_many_times(\"FooBar\", \"FooBar\") == 1\n    "
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     how_many_times('I like it', 'like') == 2\nassert     how_many_times('I like it', 'like') == 2\nassert     how_many_times('I like it', 'like') == 2\nassert     how_many_times('I like it', 'like') == 2\nassert     how_many_times('I like it', 'like') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     how_many_times('test', 't') == 1\nassert     how_many_times('test', 'est') == 2\nassert     how_many_times('test', 'tes') == 1\nassert     how_many_times('test', 'tester') == 1\nassert     how_many_times('test', 'testert') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     how_many_times(\"what a beautiful day\", \"beautiful\") == 3\nassert     how_many_times(\"what a beautiful day\", \"day\") == 1\nassert     how_many_times(\"what a beautiful day\", \"beauti\") == 2\nassert     how_many_times(\"what a beautiful day\", \"dayy\") == 0\n\ndef count_overlap(string: str, substrings: list) -> int:\n    \"\"\" Find how many times a given list of substrings can be found in the original string. Count overlaping cases.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     how_many_times('abcabc', 'abc') == 3\nassert     how_many_times('abcabc', 'abcab') == 3\nassert     how_many_times('abcabc', 'a') == 3\nassert     how_many_times('abcabc', 'b') == 2\nassert     how_many_times('abcabc', 'c') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     how_many_times(\"hello\", \"ll\") == 2\nassert     how_many_times(\"hello\", \"he\") == 1\nassert     how_many_times(\"hello\", \"x\") == 0\nassert     how_many_times(\"hello\", \"\") == 0\nassert     how_many_times(\"hello\", \"lo\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     how_many_times(\"Hello World\", \"Hello\") == 1\nassert     how_many_times(\"Hello World\", \"World\") == 1\nassert     how_many_times(\"Hello World\", \"Hello World\") == 1\nassert     how_many_times(\"Hello World\", \"Hello World Hello\") == 2\nassert     how_many_times(\"Hello World\", \"Hello World Hello World\") == 3\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     how_many_times('raj', 'r') == 2\nassert     how_many_times('raja', 'raja') == 3\nassert     how_many_times('raja', 'raja') == 3\nassert     how_many_times('raja', 'raj') == 0\nassert     how_many_times('raja', 'raj') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     how_many_times('abcdcd', 'cd') == 2\nassert     how_many_times('aabcddddddd', 'dddddd') == 3\nassert     how_many_times('abc', 'cd') == 0\nassert     how_many_times('', 'cd') == 0\nassert     how_many_times('abc', '') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert ___________ == how_many_times(string, substring)\n\ndef how_many_times2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    if string == substring:\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'one zero four three five two seven six eight nine'\nassert     sort_numbers('four four five five four four four four four four') == 'one four five four four four four four four'\nassert     sort_numbers('one one one two two two two') == 'one two one two two'\nassert     sort_numbers('one one two two two two') == 'one two one two'\nassert     sort_numbers('one one two two two one two two') == 'one two one two'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"one1\") == \"111\"\nassert     sort_numbers(\"two2\") == \"22\"\nassert     sort_numbers(\"three3\") == \"333\"\nassert     sort_numbers(\"four4\") == \"444\"\nassert     sort_numbers(\"five5\") == \"55\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_numbers('two zero three one') == 'one two three zero one'\nassert     sort_numbers('three five two zero seven eight nine') == 'zero one two three five seven eight nine'\nassert     sort_numbers('nine one two zero five') == 'zero one two five nine'\nassert     sort_numbers('zero one two three four five six seven eight') == 'one two three four five six seven eight'\nassert     sort_numbers('zero three one four') == 'zero one four three'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\nassert     sort_numbers('five') == 'five'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_numbers('nine nine one one') == 'one one one one nine nine nine'\nassert     sort_numbers('one two five three') == 'one two three five three'\nassert     sort_numbers('one two five three four five four') == 'one two four five four five four'\nassert     sort_numbers('two one three five four five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five five fiv"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_numbers('1 2 3 4 5 6 7 8 9') == '1 2 3 4 5 6 7 8 9'\nassert     sort_numbers('2 5 3 4 0 1 7 9') == '0 1 2 3 4 5 7 9'\nassert     sort_numbers('1 9 2 4 7 3 5 6 8') == '0 1 2 3 4 5 6 7 8'\nassert     sort_numbers('5 7 2 9 1 4 3 6 8') == '0 1 2 3 4 5 6 7 8'\nassert     sort_numbers('2 2 5 2 4 1 4 4 1 1 1') == '1 1 2 2 2 4 4 5 5 6 7 8 9'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_numbers('one') == 'one'\nassert     sort_numbers('three three') == 'three three'\nassert     sort_numbers('one two') == 'one two'\nassert     sort_numbers('one two three four five') == 'one two three four five'\nassert     sort_numbers('one nine nine three three three five') == 'one three three five nine nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine zero') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('five four three two one zero') == 'zero one two three four five'\nassert     sort_numbers('two one zero three four five six seven eight') == 'zero one two three four five six seven eight'\nassert     sort_numbers('seven eight nine ten eleven twelve thirteen') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('eight nine ten eleven twelve thirteen') == 'zero one two three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_numbers('zero zero one one two three four five six seven eight nine nine') == 'one one zero one two three four five six seven eight nine nine zero'\nassert     sort_numbers('one one') == 'one one'\nassert     sort_numbers('eight eight eight eight eight eight eight eight eight eight eight') == 'eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eight eigh"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == (4.0, 5.0)\nassert     find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0]) == (-6.0, -5.0)\nassert     find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]) == (1.0, 0.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]) == (4.0, 5.0)\nassert     find_closest_elements([-1.0, -2.0, -3.0, -4.0, -5.0, -6.0, -7.0, -8.0]) == (-8.0, -7.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) == (2.0, 3.0)\nassert     find_closest_elements([-1.0, -2.0, 0.0, 1.0, 2.0, 3.0]) == (-1.0, 0.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0]) == (2.0, 3.0)\nassert     find_closest_elements([0.0, 1.0, 2.0, 3.0, 4.0, 5.0]) == (1.0, 2.0)\nassert     find_closest_elements([2.0, 1.0, 0.0, -1.0, -2.0, -3.0]) == (0.0, -1.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_closest_elements([2, 3, 5, 6, 9, 11, 15, 22, 25, 28, 29]) == (2, 28)\nassert find_closest_elements([2, 3, 5, 6, 9, 11, 15, 22, 25, 30]) == (2, 22)\nassert find_closest_elements([2, 3, 5, 6, 9, 11, 15, 22, 25, 30]) == (22, 22)\nassert find_closest_elements([2, 3, 5, 6, 9, 11, 15, 22, 25, 30]) == (22, 22)\nassert find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (2, 11)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_closest_elements([1, 2, 3]) == (1, 2)\nassert     find_closest_elements([-1, 2, 3]) == (-1, 3)\nassert     find_closest_elements([1, 2, 3, 4]) == (1, 2)\nassert     find_closest_elements([-1, 2, 3, 4]) == (-1, 2)\nassert     find_closest_elements([2, 3, 4, 5]) == (2, 3)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (find_closest_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 0))\nassert     (find_closest_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (1, 0))\nassert     (find_closest_elements([10, 11, 12, 13, 14, 15]) == (12, 10))\nassert     (find_closest_elements([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == (11, 10))\nassert     (find_closest_elements([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == (12, 11))\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_closest_elements([0.5, -1, 1.5, 2, -0.5, -0.5]) == (-0.5, 1.5)\nassert     find_closest_elements([-1, 1.5, 2, -0.5, -0.5]) == (-0.5, 1.5)\nassert     find_closest_elements([0.5, 0.5, 1.5, 2, -0.5, -0.5]) == (0.5, 1.5)\nassert     find_closest_elements([0.5, -1, 1.5, 2, -0.5, -0.5, 0.5]) == (-0.5, 1.5)\nassert     find_closest_elements([-1, 0.5, 1.5, 2, -0.5, -0.5]) == (-0.5, 1.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (2, 3), 'incorrect'\nassert     find_closest_elements([2, 4, 6, 8, 10]) == (4, 6), 'incorrect'\nassert     find_closest_elements([5, 12, 13, -1]) == (-1, 12), 'incorrect'\nassert     find_closest_elements([10, -100, 2, 45]) == (-100, 10), 'incorrect'\nassert     find_closest_elements([]) == (None, None), 'incorrect'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_closest_elements([0.5, 3.5, 2.5, 10.5]) == (2.5, 10.5)\nassert     find_closest_elements([0.5, 3.5, 2.5, 10.5, 3.7]) == (2.5, 3.7)\nassert     find_closest_elements([0.5, 3.5, 2.5, 10.5, 3.7, 7.8]) == (3.7, 3.7)\nassert     find_closest_elements([0.5, 3.5, 2.5, 10.5, 3.7, 7.8, 8.9]) == (3.7, 8.9)\nassert     find_closest_elements([0.5, 3.5, 2.5, 10.5, 3.7, 7.8, 9.9, 11.1]) == (3.7, 9.9)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 2] == find_closest_elements([1, 3, 6, 8, 9])\nassert     [1, 2] == find_closest_elements([1, 2, 3, 4, 5])\nassert     [1, 2] == find_closest_elements([1, 2, 3, 4, 5, 6, 7])\nassert     [1, 2] == find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8])\nassert     [1, 2] == find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_closest_elements([1.1,2.2,3.3,4.4,5.5]) == (1.1, 2.2)\nassert     find_closest_elements([5.6,3.3,4.4,6.6,3.5]) == (3.5,4.4)\nassert     find_closest_elements([1.1,1.1,1.1,1.1]) == (1.1, 1.1)\nassert     find_closest_elements([]) == (None, None)\nassert     find_closest_elements([1.1,1.2,1.3]) == (1.1, 1.2)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([0.0]) == [0.0]\nassert     rescale_to_unit([0.2, 0.8]) == [0.4, 1.0]\nassert     rescale_to_unit([0.2, 0.8, 0.0]) == [0.4, 1.0, 0.0]\nassert     rescale_to_unit([0.2, 0.8, 0.0, 0.0]) == [0.4, 1.0, 0.0, 0.0]\nassert     rescale_to_unit([0.2, 0.8, 0.0, 0.0, 0.0]) == [0.4, 1.0, 0.0, 0.0, 0.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([-4.01, -3.02, -2.03, -1.04, 0.05, 1.06, 2.07, 3.08]) == [0.0, 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0]\nassert     rescale_to_unit([-3.01, -2.02, -1.03, -0.04, 0.05, 1.06, 2.07, 3.08]) == [0.0, 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0]\nassert     rescale_to_unit([-2.01, -1.02, -0.03, 0.04, 0.05, 1.06, 2.07, 3.08]) == [0.0, 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0]\nassert     rescale_to_unit([-1.01, 0.02, 0.03, 0.04, 0.05, 1.06, 2.07, 3.08]) == [0.0, 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0]\nassert     rescale_to_unit([0.01, 0.02, 0.03, 0.04, 0.05, 1.06, 2.07, 3.08]) == [0.0, 0.0, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([-2, -1, 0, 1, 2]) == [0, 0, 0, 1, 1]\nassert     rescale_to_unit([1, 2, 3]) == [0.3333, 0.6666, 1]\nassert     rescale_to_unit([1, -2, -3, 0]) == [0, 0, 0, 0]\nassert     rescale_to_unit([]) == []\nassert     rescale_to_unit([-1, -2, -3, 0]) == [0, 0, 0, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([5, 3, 6, 7, 10]) == [0.2, 0.3, 0.4, 0.5, 0.6]\nassert     rescale_to_unit([5, 3, 6, 7, 10, 15, 22]) == [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 1]\nassert     rescale_to_unit([1, 2, 3]) == [0.3333333333333333, 0.6666666666666666, 1]\nassert     rescale_to_unit([0, 2]) == [0, 0.5]\nassert     rescale_to_unit([-3, -2, -1, 0, 1, 2, 3]) == [-0.3333333333333333, -0.6666666666666666, -0.2, 0, 0.3333333333333333, 0.6666666666666666, 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([2, 0]) == [0, 1]\nassert     rescale_to_unit([3, 2, 1, 0]) == [0, 0.5, 1, 1]\nassert     rescale_to_unit([2, 1, 0, 3]) == [0, 0.5, 1, 1]\n\n\ndef average(numbers: List[float]) -> float:\n    \"\"\" Given list of numbers, compute the average of those numbers.\n    Note that the average is the mean, not the geometric mean.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([1,2,3,4,5]) == [0,2,4,6,8]\nassert     rescale_to_unit([1,2,3,4]) == [0,1,2,3]\nassert     rescale_to_unit([5,4,3,2,1]) == [1,2,3,4,5]\nassert     rescale_to_unit([-1,-2,-3,-4,-5]) == [0,0,0,0,0]\nassert     rescale_to_unit([-5,0,1,2,3]) == [0,0,1,2,3]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0] == rescale_to_unit([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nassert     [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0] == rescale_to_unit([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0])\nassert     [0.0, 1.0, 2.0, 3.0, 4.0, 5.0] == rescale_to_unit([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])\nassert     [0.0, 2.0, 3.0, 4.0, 5.0] == rescale_to_unit([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, 4.0, 5.0])\nassert     [0.0, 3.0, 4.0, 5.0] == rescale_to_unit([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0])\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0, 0.3333333333333333, 0.6666666666666666]\nassert     rescale_to_unit([1.0, 2.0, 3.0]) == [0.0, 0.3333333333333333, 0.6666666666666666]\nassert     rescale_to_unit([0, 1, 2]) == [0, 0.3333333333333333, 0.6666666666666666]\n\ndef mod_one_hundred(numbers: List[float]) -> List[float]:\n    \"\"\" For each number in a list, if it's greater than 100, then it gets replaced by 100-that number.\n    If it's less than 100, then it gets replaced by 100 - (100-number)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\nassert     rescale_to_unit([-1, -2, -3, -4, -5, -6, -7]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\nassert     rescale_to_unit([-1.1, -2.1, -3.1, -4.1, -5.1, -6.1, -7.1]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([1,2,3,4]) == [0.25,0.5,0.75,1.0]\nassert     rescale_to_unit([1,2,3,4,5,6,7,8]) == [0.125,0.25,0.375,0.5,0.625,0.75,0.875,1.0]\nassert     rescale_to_unit([-1,-2,-3,-4,-5,-6,-7,-8]) == [-0.125,-0.25,-0.375,-0.5,-0.625,-0.75,-0.875,-1.0]\nassert     rescale_to_unit([-1,1,2,3,4,5,6,7,8,9]) == [-0.125,0.125,0.25,0.375,0.5,0.625,0.75,0.875,1.0,1.125]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     filter_integers([1, \"2\", 3, 4]) == [1, 3, 4]\nassert     filter_integers([1, \"2\", \"3\", 4]) == [1, \"2\", \"3\", 4]\nassert     filter_integers([1, 2, \"3\", 4]) == [1, 2, \"3\", 4]\nassert     filter_integers([\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     type(filter_integers([1, 2, 3, 4, 'test', 6, 7]))     == list\nassert     type(filter_integers([1, 2, 3, 4, 'test', 6, 7]))     == list\nassert     type(filter_integers(['1', '2', '3', '4', 'test', 6, 7]))     == list\nassert     type(filter_integers(['1', '2', '3', '4', 'test', 6, '7']))     == list\nassert     type(filter_integers(['1', '2', '3', '4', 'test', '6', 7]))     == list\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3] == filter_integers(['1', '2', '3'])\nassert     [1, 2, 3] == filter_integers(['1', 2, 3])\nassert     [1, 2, 3] == filter_integers([1, '2', 3])\nassert     [1, 2, 3] == filter_integers([1, '2', '3'])\nassert     [1, 2, 3] == filter_integers([1, '2', 3.0])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_integers(['a', 'b', 'c', 'd', 1, 'b']) == [1, 'b']\nassert     filter_integers([1, 2, 3, 'b', 'a', 'b', 4, 'c']) == [1, 2, 3, 4]\nassert     filter_integers([1, 2, 3, 'b', 'a', 'b', 4, 'c', 'a', 'b', 'c', 'a', 'b', 'c']) == [1, 2, 3, 4]\n\n\"\"\"\n    On a given list of numbers, remove all elements that are not multiple of 3 or 5.\n    Return the resulting list.\n\"\"\"\ndef filter_not_multiple_of_3_or_5(numbers: List[int]) -> List[int]:\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_integers([1, 2, 'a', 'b']) == [1, 2]\nassert     filter_integers([1, 2, 3, 'a', 'b']) == [1, 2, 3]\nassert     filter_integers([1, 2, 3.0, 'a', 'b']) == [1, 2, 3.0]\nassert     filter_integers([1, 2, '3', 'a', 'b']) == [1, 2, '3']\nassert     filter_integers([1, 2, [], 'a', 'b']) == [1, 2]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_integers(['a', '5', 'a', '4', '1']) == [5, 4, 1]\nassert     filter_integers([1, 5, 4, 3, 'a']) == [1, 5, 4, 3]\nassert     filter_integers([]) == []\nassert     filter_integers([1]) == [1]\nassert     filter_integers([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_integers([1, 2, 3, 'hello', 'world', 5]) == [1, 2, 3, 5]\nassert     filter_integers(['1', '2', 'hello', 'world', '5']) == [1, 2, 5]\nassert     filter_integers([1, 2, 3, 'hello', 'world', '5']) == [1, 2, 3, 5]\nassert     filter_integers([]) == []\nassert     filter_integers([1, 2, 'hello', 'world', 5]) == [1, 2, 5]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [2, 5, 10] == filter_integers([1.5, 2.2, 'abc', 5, 10])\nassert     [2] == filter_integers([1.5, 2.2, 'abc', 'b', 5, 10])\nassert     [] == filter_integers([])\nassert     [1, 2, 3, 4, 5] == filter_integers([1, 2, 3, 'abc', 'b', 5, 10])\nassert     [1, 2, 3] == filter_integers([1, 2, 3, 'abc', 'b', 5, 10, 'a'])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1,2,3,4,5] == filter_integers([1.1,2.1,3.1,4.1,5.1])\nassert     [0,0,0,0,0] == filter_integers([0,0,0,0,0])\nassert     [10,11] == filter_integers([10,11])\n\ndef list_with_filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, '3', 4, '5', 6])\nassert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, '3', '4', '5', 6])\nassert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, 3, '4', 5, 6])\nassert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, 3.0, 4, 5, 6])\nassert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, 3.0, '4', 5, 6])\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('hello world') == 11\nassert     strlen('') == 0\nassert     strlen(' ') == 1\nassert     strlen('a') == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         strlen('Hello World') == 11\nassert         strlen(' ') == 1\nassert         strlen('abcdefghijklmnopqrstuvwxyz') == 26\nassert         strlen('a') == 1\nassert         strlen('abc') == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strlen(\"abc\") == 3\nassert     strlen(\"\") == 0\nassert     strlen(\"abc \") == 3\nassert     strlen(\"abc\\t\") == 3\nassert     strlen(\"abcd\") == 4\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strlen('Dummy string') == len('Dummy string')\nassert     strlen('1') == len('1')\nassert     strlen('10') == len('10')\nassert     strlen('9') == len('9')\nassert     strlen('999') == len('999')\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strlen(None) == 0\nassert     strlen('') == 0\nassert     strlen('a') == 1\nassert     strlen('ab') == 2\nassert     strlen('abc') == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strlen(\"\"\"\n\"\"\") == 0\nassert     strlen(\"\"\"\nHi, world!\n\"\"\") == 10\nassert     strlen(\"\"\"\nHi, world!\n\"\"\") == 10\nassert     strlen(\"\"\"\nHi, world!\n\"\"\") == 10\nassert     strlen(\"\"\"\nHi, world!\n\"\"\") == 10\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     strlen('abc')         == 3, 'incorrect implementation of strlen'\nassert     strlen('a')         == 1, 'incorrect implementation of strlen'\nassert     strlen('abcdef')     == 6, 'incorrect implementation of strlen'\nassert     strlen('a' * 100)     == 100, 'incorrect implementation of strlen'"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         strlen('asdf')        == 4\nassert         strlen('12345')    == 5\nassert         strlen('123456789')    == 9\nassert         strlen('1234567890')    == 10\nassert         strlen('123456789012345')    == 16\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     strlen('Hello') == 5\nassert     strlen('Hello World') == 10\nassert     strlen('Hello World!') == 11\nassert     strlen('!') == 1\nassert     strlen('Hello World!'.lstrip('!')) == 10\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strlen('a') == 1\nassert     strlen('abc') == 3\nassert     strlen('abc123') == 5\n\ndef islower(char: str) -> bool:\n    \"\"\" Check if a char is lowercase\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 2\nassert     largest_divisor(3) == 1\nassert     largest_divisor(7) == 1\nassert     largest_divisor(4) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (largest_divisor(4) == 1)\nassert     (largest_divisor(12) == 3)\nassert     (largest_divisor(37) == 19)\nassert     (largest_divisor(543) == 1)\nassert     (largest_divisor(8) == 8)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef smallest_multiple(n: int) -> int:\n    \"\"\" Find the smallest number that is a multiple of all the integers <= n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(28) == 7\nassert     largest_divisor(30) == 5\nassert     largest_divisor(1) == 1\nassert     largest_divisor(24) == 6\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_divisor(9) == 3\nassert     largest_divisor(45) == 5\nassert     largest_divisor(36) == 6\nassert     largest_divisor(99) == 3\nassert     largest_divisor(65) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     3 == largest_divisor(3)\nassert     3 == largest_divisor(6)\nassert     3 == largest_divisor(7)\nassert     3 == largest_divisor(9)\nassert     3 == largest_divisor(11)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     1 == largest_divisor(6)\nassert     2 == largest_divisor(4)\nassert     3 == largest_divisor(9)\nassert     4 == largest_divisor(9)\nassert     5 == largest_divisor(12)\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_divisor(5) == 1\nassert     largest_divisor(10) == 2\nassert     largest_divisor(27) == 3\nassert     largest_divisor(20) == 5\nassert     largest_divisor(1) == 1\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     factorize(1)    == [1]\nassert     factorize(2)    == [2]\nassert     factorize(3)    == [3]\nassert     factorize(4)    == [2,2]\nassert     factorize(5)    == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [2,2,2,5,7,11,13] == factorize(148)\nassert     [2,2,5,7] == factorize(390)\nassert     [2,2,5] == factorize(30)\nassert     [2,5,5,5] == factorize(625)\nassert     [7,11,13] == factorize(666)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     factorize(10) == [2, 5]\nassert     factorize(100) == [2, 2, 5]\nassert     factorize(1024) == [2, 2, 2, 4]\nassert     factorize(18) == [2, 3]\nassert     factorize(2) == [2]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     factorize(25) == [5,5]\nassert     factorize(10) == [2,5]\nassert     factorize(30) == [2,5,5]\nassert     factorize(15) == [3,5]\nassert     factorize(20) == [2,2,5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [2, 3, 5, 7, 11, 13]    == factorize(22)\nassert     [2, 2, 11]    == factorize(6)\nassert     [2, 3, 3]    == factorize(9)\nassert     [11, 11]    == factorize(11)\nassert     [3, 5, 7]    == factorize(35)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     factorize(10) == [2, 5]\nassert     factorize(100) == [2, 2, 5, 5]\nassert     factorize(64) == [2, 2, 2, 2, 2, 2, 2]\nassert     factorize(70) == [2, 5, 7]\nassert     factorize(6435) == [2, 3, 5, 7, 11, 13, 17, 19, 23]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [2, 2, 2, 3, 5] == factorize(120)\nassert     [2, 2, 3, 5] == factorize(120)\nassert     [2, 2, 7] == factorize(140)\nassert     [2, 11] == factorize(154)\nassert     [11] == factorize(11)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [2, 2, 5, 3] == factorize(60)\nassert     [2, 2, 5, 3] == factorize(120)\nassert     [2, 2, 3, 3, 5] == factorize(140)\nassert     [2, 5] == factorize(15)\nassert     [2, 3] == factorize(12)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     factorize(0) == [0]\nassert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2,2]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     factorize(25) == [5, 5]\nassert     factorize(9) == [3, 3]\nassert     factorize(11) == [11]\nassert     factorize(2563) == [3, 11, 743]\nassert     factorize(4763) == [4763]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_duplicates([]) == []\nassert remove_duplicates([1]) == [1]\nassert remove_duplicates([1, 2, 3, 1, 4]) == [1, 2, 3, 4]\nassert remove_duplicates([1, 2, 3, 1, 4, 3, 2]) == [1, 2, 3, 4]\nassert remove_duplicates([1, 1, 1, 1, 1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 1, 2, 3, 3, 3, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([]) == []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 3, 2, 1, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 4, 3, 2, 1, 1]) == [1, 2, 3, 4]\nassert     remove_duplicates([2, 4, 6, 8, 10, 12, 14, 16]) == [2, 4, 6, 8, 10, 12, 14, 16]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([]) == []\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 1, 1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([3, 1, 2, 3, 1, 2]) == [1, 2, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [3, 4, 5, 6, 7, 8, 9, 1] == remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == remove_duplicates([1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == remove_duplicates([1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == remove_duplicates([1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == remove_duplicates([1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([2, 2, 2, 2]) == [2]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 1, 1, 1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_duplicates([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1,1,1]) == [1]\nassert     remove_duplicates([1,1,1,1,1,1]) == [1]\nassert     remove_duplicates([1,1,1,1,2,2,2,2,2,2]) == [1,2]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 1, 2, 2, 2]) == [1, 2]\nassert     remove_duplicates([1, 1, 2, 2]) == [1, 2]\nassert     remove_duplicates([1, 1, 1, 2, 2]) == [1, 2]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     flip_case(None) == None\nassert     flip_case(\"heLLo WorlD\") == \"hELLO wORLD\"\nassert     flip_case(\"camelCase\") == \"CAMELcASE\"\nassert     flip_case(\"eLse_flip\") == \"ELSEDFIP\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     flip_case('Camel') == 'camel'\nassert     flip_case('CamelCase') == 'camelCASE'\nassert     flip_case('CamelCase') == 'camelCase'\nassert     flip_case(''.join(random.choices(string.ascii_uppercase, k=100))) == ''.join(random.choices(string.ascii_lowercase, k=100))\nassert     flip_case(''.join(random.choices(string.ascii_lowercase, k=100))) == ''.join(random.choices(string.ascii_uppercase, k=100))"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     flip_case('a') == 'a'\nassert     flip_case('Ab') == 'Ab'\nassert     flip_case('aB') == 'aB'\nassert     flip_case('AbC') == 'AbC'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     flip_case('code') == 'eoCde'\nassert     flip_case('EDUCATION') == 'eoCecnUaD'\nassert     flip_case('a') == 'a'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     flip_case(\"LEETCODE\") == \"leetcode\"\nassert     flip_case(\"LEetCOde\") == \"LEetcOde\"\nassert     flip_case(\"lEOetCOde\") == \"LEetcOde\"\nassert     flip_case(\"LEETCODe\") == \"LEetcOde\"\nassert     flip_case(\"LEetcODe\") == \"LEetcOde\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     flip_case('The Quick Brown Fox') == 'tH The qUick BrOW nFox'\nassert flip_case('USA') == 'uS a'\nassert flip_case('Treehouse') == 'TREhoussE'\nassert flip_case('e2e') == 'E2E'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"Z\") == \"z\"\nassert     flip_case(\"z\") == \"Z\"\nassert     flip_case(\"1\") == \"1\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"aB\") == \"AB\"\nassert     flip_case(\"aBc\") == \"Abc\"\nassert     flip_case(\"aBcD\") == \"AbcD\"\nassert     flip_case(\"ABcD\") == \"abcd\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     flip_case(\"hello world\")    == \"HELLO WORLD\"\nassert     flip_case(\"hello World\")    == \"HELLO world\"\nassert     flip_case(\"HOLA\")        == \"hola\"\nassert     flip_case(\"HeLLo\")        == \"HeLLo\"\nassert     flip_case(\"HELLO\")        == \"HELLO\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     'BbZ' == flip_case('bBzZ')\nassert     'Bbz' == flip_case('bBaZ')\nassert     'BbZ' == flip_case('BbzZ')\nassert     'bBaZ' == flip_case('BbzZ')\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     concatenate(['Hello', 'world']) == 'Helloworld'\nassert     concatenate(['', 'world']) == 'world'\nassert     concatenate(['Hello', '']) == 'Hello'\nassert     concatenate([]) == ''\n\ndef choose(n: int, k: int) -> int:\n    \"\"\"\n    Choose n among k\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     concatenate(['', '', '']) == ''\nassert     concatenate(['', 'a', 'b']) == 'ab'\nassert     concatenate(['', 'a', 'b', 'c']) == 'abc'\nassert     concatenate(['', '', 'a', 'b']) == 'a'\nassert     concatenate(['', 'a', 'b', '', 'c']) == 'abc'\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert     concatenate([\"hello\", \"world\", \"and\", \"how\", \"are\", \"you\"]) == \"helloworldandhowareyou\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\"]) == \"ab\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\nassert     concatenate([\"1\", \"2\", \"3\", \"4\"]) == \"12345\"\n\ndef clean_string(string: str) -> str:\n    \"\"\" remove any leading or trailing spaces\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     concatenate([\"ab\", \"cd\"])     == \"abcd\"\nassert     concatenate([\"ab\", \"cd\", \"ef\"])     == \"abcdef\"\nassert     concatenate([\"a\", \"bc\", \"d\"])     == \"abcdd\"\nassert     concatenate([\"a\", \"bc\", \"d\", \"e\"])     == \"abcde\"\n\n\ndef get_queries(query_strings: List[str], index_dict: dict, queries: List[str]) -> List[str]:\n    \"\"\"\n        Convert queries in string form to integer indices\n    \"\"\"\n    query_indices = []\n    for query in queries:\n        query_indices.append(index_dict[query])\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     concatenate([\"foo\", \"bar\"])     == \"foobar\"\nassert     concatenate([\"f\", \"o\", \"o\", \"b\", \"a\"])     == \"foboa\"\nassert     concatenate([\"1\", \"2\", \"3\"])     == \"123\"\nassert     concatenate([\"123\", \"45\"])         == \"12345\"\nassert     concatenate([\"123\", \"45\", \"67\"])     == \"1234567\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     concatenate([]) == \"\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([\"a\", \"b\"]) == \"ab\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     concatenate(['aba', 'xyz', 'aa'])    ==    'aabbxyzaa'\nassert     concatenate(['abc', 'xyz'])            ==    'abcxyz'\nassert     concatenate(['a', 'b', 'c'])            ==    'abc'\nassert     concatenate(['z', 'x'])                ==    'zx'\nassert     concatenate([])                        ==    ''\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     concatenate([\"cat\", \"dog\"]) == \"catdog\"\nassert     concatenate([\"cat\", \"a\", \"dog\"]) == \"cataodog\"\nassert     concatenate([\"cat\", \" \", \"a\", \"dog\"]) == \"cat aodog\"\nassert     concatenate([\"cat\", \"a\", \"dog\"]) == \"cataodog\"\nassert     concatenate([\"cat\", \"\", \"a\", \"dog\"]) == \"cat aodog\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     concatenate([\"\", \"\", \"\", \"\", \"\"]) == \"\"\nassert     concatenate([\"Hello\", \"\", \"World\", \"\", \"\"]) == \"HelloWorld\"\nassert     concatenate([\"a\", \"\", \"\", \"b\", \"\", \"\", \"c\", \"\", \"\", \"\", \"\", \"d\"]) == \"abcd\"\nassert     concatenate([]) == \"\"\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], \"0\") == []\nassert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], \"1\") == [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], \"2\") == [\"3\", \"4\", \"5\", \"6\", \"7\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], \"3\") == [\"4\", \"5\", \"6\", \"7\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], \"4\") == [\"5\", \"6\", \"7\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c', 'd'], 'a') == ['a', 'b', 'c']\nassert     filter_by_prefix(['a', 'b', 'c', 'd'], 'b') == ['b', 'c']\nassert     filter_by_prefix(['a', 'b', 'c', 'd'], 'c') == ['c', 'd']\nassert     filter_by_prefix(['a', 'b', 'c', 'd'], 'd') == []\n\n\ndef count_by_prefix(strings: List[str], prefix: str) -> int:\n    \"\"\" Count the number of times a prefix appears in the given list of strings.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_prefix(['cat', 'dog','mouse', 'elephant', 'cheetah'], 'cat') == ['cat']\nassert     filter_by_prefix(['cat', 'dog','mouse', 'elephant', 'cheetah'], 'c') == ['cat', 'dog','mouse']\nassert     filter_by_prefix(['cat', 'dog','mouse', 'elephant', 'cheetah'], 'd') == ['dog','mouse', 'elephant']\nassert     filter_by_prefix(['cat', 'dog','mouse', 'elephant', 'cheetah'], 'dog') == ['dog','mouse', 'elephant']\nassert     filter_by_prefix(['cat', 'dog','mouse', 'elephant', 'cheetah'], 'elephant') == ['elephant', 'cheetah']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_prefix([\"a\", \"bc\", \"c\"], \"a\") == [\"a\"]\nassert     filter_by_prefix([\"a\", \"bc\", \"c\"], \"b\") == [\"bc\"]\nassert     filter_by_prefix([\"a\", \"bc\", \"c\"], \"c\") == [\"c\"]\nassert     filter_by_prefix([\"a\", \"bc\", \"c\"], \"d\") == []\nassert     filter_by_prefix([\"a\", \"bc\", \"c\"], \"h\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"AB\", \"CD\", \"EF\"], \"A\") == [\"AB\"]\nassert     filter_by_prefix([\"AB\", \"CD\", \"EF\"], \"B\") == [\"CD\", \"EF\"]\nassert     filter_by_prefix([\"AB\", \"CD\", \"EF\"], \"C\") == []\nassert     filter_by_prefix([\"AB\", \"CD\", \"EF\"], \"D\") == []\nassert     filter_by_prefix([\"AB\", \"CD\", \"EF\"], \"E\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef validate_html(html: str) -> bool:\n    \"\"\" Check that the input string is well-formed HTML.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['abcd', 'efgh', 'xyz'], 'ab') == ['abcd', 'xyz']\nassert     filter_by_prefix(['abcd', 'efgh', 'xyz'], 'cd') == ['abcd']\nassert     filter_by_prefix(['abcd', 'efgh', 'xyz'], 'xy') == ['xyz']\nassert     filter_by_prefix([], 'xyz') == []\n\n\ndef filter_by_sum(nums: List[int], k: int) -> List[int]:\n    \"\"\" Filter a list of integers to only contain the elements whose sum equals to k.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nfilter_by_prefix([\"my\", \"dog\", \"car\", \"cat\", \"camel\"], \"my\") == [\"my\", \"my\", \"my\"]\nfilter_by_prefix([\"my\", \"dog\", \"car\", \"cat\", \"camel\"], \"my\", \"d\") == [\"my\", \"my\"]\nfilter_by_prefix([\"my\", \"dog\", \"car\", \"cat\", \"camel\"], \"my\", \"dog\") == [\"my\", \"my\", \"my\"]\nfilter_by_prefix([\"my\", \"dog\", \"car\", \"cat\", \"camel\"], \"my\", \"dog\", \"cat\") == [\"my\", \"my\", \"my\"]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_prefix(['abc', 'abc1', 'abc2'], 'abc') == ['abc', 'abc1', 'abc2']\nassert     filter_by_prefix(['abc', 'abc1', 'abc2'], 'abc1') == ['abc1', 'abc2']\nassert     filter_by_prefix(['abc', 'abc1', 'abc2'], 'abc2') == ['abc']\nassert     filter_by_prefix(['abc', 'abc1', 'abc2'], 'abc') == ['abc', 'abc1', 'abc2']\nassert     filter_by_prefix(['abc', 'abc1', 'abc2'], 'abc3') == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_positive([1,-2,3,-4])    == [1,-2,3]\nassert     get_positive([1,2,3,-4])     == [1,2,3]\nassert     get_positive([])             == []\nassert     get_positive([-1,2,3,-4])     == [2,3]\nassert     get_positive([1,2,-3,-4])     == [1,2]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_positive([1, -2, 3, 4, -5, 6]) == [1, 3, 4]\nassert     get_positive([1, -2, -3, 4, -5, 6]) == [1, 4]\nassert     get_positive([-1, -2, 3, 4, -5, 6]) == [1, 3, 4]\nassert     get_positive([1, -2, -3, -4, -5, 6]) == [1, -3, -4]\nassert     get_positive([0, -1, 2, 3, 4, -5]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([1]) == [1]\nassert     get_positive([1, 2, 3, -1, -4]) == [1, 2, 3]\nassert     get_positive([1, 2, -1, -4]) == [1, 2]\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [3, -2, 1] == get_positive([3, -2, 1])\nassert     [3, -2] == get_positive([-3, -2, 1])\nassert     [-3, -2] == get_positive([-3, 2, 1])\nassert     [-3, -2] == get_positive([3, -2])\nassert     [3] == get_positive([3])\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_positive([-1, 2, 3, -2, -3]) == [2, 3]\nassert     get_positive([-1, -2, -3]) == [-1, -2, -3]\nassert     get_positive([1, 2, -3]) == [1, 2]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == [1, 2, 3, 4, 5]\nassert     get_positive([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert     get_positive([]) == []\nassert     get_positive([5, 2, 3, 4, -1, -2, -3, -4, -5]) == [5, 2, 3, 4, -1, -2, -3, -4, -5]\nassert     get_positive([-1, -2, -3, -4, -5]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_positive(list(range(-5, 5)))        == [1, 2, 3, 4]\nassert     get_positive([-5, -4, -3, -2, -1])        == [-1, -2, -3, -4, -5]\nassert     get_positive([-5, 4, 3, 2, 1])        == [-5, 4, 3, 2, 1]\nassert     get_positive([])                        == []\nassert     get_positive(list(range(1, 5)))        == [1, 2, 3, 4]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_positive([1,2,-5,5]) == [1,2,5]\nassert     get_positive([1,-2,5,0,0,6]) == [1,5,6]\nassert     get_positive([-1,-2,5,0,0,6]) == [1,5,6]\nassert     get_positive([-1,-2,5,6]) == []\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, -1, -2, -3, -4]) == [1, 2, 3, 4, 5]\nassert     get_positive([-1, -2, -3, -4]) == [-1, -2, -3, -4]\nassert     get_positive([]) == []\nassert     get_positive([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == [1, 2, 3, 4, 5]\nassert     get_positive([1, -2, -3, -4]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert     get_positive([-1, -2, -3, -4, -5, -6]) == [-1, -2, -3, -4, -5]\nassert     get_positive([-1, 0, 1, 2, 3, 4, -5]) == [-5]\nassert     get_positive([]) == []\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(8) == False\nassert     is_prime(7) == True\nassert     is_prime(0) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\nassert     is_prime(6) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_prime(7)\nassert     not is_prime(8)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_prime(7)\nassert     is_prime(11)\nassert     is_prime(17)\nassert     is_prime(31)\nassert     not is_prime(3)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(4) == True\nassert     is_prime(25) == True\nassert     is_prime(14) == False\nassert     is_prime(13) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_prime(5)\nassert     is_prime(7)\nassert     not is_prime(3)\nassert     not is_prime(31)\nassert     not is_prime(19)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_prime(2)\nassert     not is_prime(3)\nassert     not is_prime(5)\nassert     not is_prime(8)\nassert     not is_prime(0)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(11) == True\nassert     is_prime(13) == False\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     poly([1, 1], 1) == 0\nassert     poly([1, 1, 1, 1], 1) == 0\nassert     poly([1, 1, 1, 1, 1, 1], 1) == 0\nassert     poly([1, 1, 1, 1, 1, 1, 1, 1], 1) == 0\n\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     poly([1, 2, 3, 4], -1) == 0\nassert     poly([1, 2, 3, 4], 0) == 0\nassert     poly([1, 2, 3, 4], 1) == 0\nassert     poly([0, 1, 2, 3, 4], -1) == 0\nassert     poly([0, 1, 2, 3, 4], 0) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef int_poly(xs: list, x: int):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n    \"\"\"\n    pass\n\ndef find_zero_int(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero_int find x such that poly(x) = 0.\n    find_zero_int returns only only zero point, even if there are many.\n    Moreover, find_zero_int only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef polynomials_with_zeros(xs: list, max_zero_point: int):\n    \"\"\"\n    Returns list of polynomials with zero points.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_zero([5, 3, 2, 1, 0, -1]) == -2\nassert     find_zero([2, 1, 0, -1]) == -2\nassert     find_zero([5, 3, -1, -2]) == -2\nassert     find_zero([-5, 3, -1, -2]) == -2\nassert     find_zero([5, 3, -2, -1]) == -2\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     poly([1, 0, 1], 0) == 0\nassert     poly([1, -1, 1], 0) == 0\nassert     poly([1, -1, 1, 1], 0) == 0\nassert     poly([1, 1, 1, 1], 1) == 0\nassert     poly([1, 1, 1, 1, 1], 1) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     poly([1, 2, 3], -1) == 0\nassert     poly([1, 2, 3], 0) == 0\nassert     poly([1, 2, 3], 1) == 0\nassert     poly([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 0\nassert     poly([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     poly([2, 3, 4, 5, 6], 0) == 0\nassert     poly([2, 3, 4, 5, 6], 1) == 6\nassert     poly([2, 3, 4, 5, 6], 2) == -54\nassert     poly([2, 3, 4, 5, 6], 3) == 464\nassert     poly([2, 3, 4, 5, 6], 4) == -2984\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     poly([3, 7, 1, 1], 4) == 0\nassert     poly([2, 1, 1, 1], 4) == 0\nassert     poly([1, 1, 2, 1], 4) == 0\nassert     poly([2, 1, 1, 2], 4) == 0\nassert     poly([2, 1, 1, 1], 4) == 0\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_third(list(range(10))) == list(range(10)), \"Failed first test\"\nassert     sort_third([1, 1, 1, 2, 2, 3, 3, 3, 3]) == [1, 1, 2, 2, 3, 3, 3, 3, 3], \"Failed second test\"\nassert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Failed third test\"\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"Failed forth test\"\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \"Failed fifth test\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_third(l) == list(range(1, 22, 3))\nassert     sort_third([]) == []\nassert     sort_third(range(100, 0, -3)) == list(range(100, -1, -3))\n\n\ndef sort_second(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by two, while its values at the indicies that are divisible by two are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_third([1,2,3,4,5]) == [1,4,3,2,5]\nassert     sort_third([1,3,2,4,5]) == [1,4,2,3,5]\nassert     sort_third([1,2,3,4,5,6]) == [1,3,2,4,5,6]\nassert     sort_third([1,2,3,4,5,6,7]) == [1,4,3,2,5,6,7]\nassert     sort_third([1,2,3,4,5,6,7,8]) == [1,3,5,7,2,4,6,8]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([]) == []\nassert     sort_third([2, 3, 4, 5, 6, 7, 8, 9]) == [2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_third([5, 1, 4, 2, 3, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_third([1,3,2,4,5]) == [1,3,4,2,5], \"incorrect\"\nassert     sort_third([5,3,2,4,1]) == [5,3,4,2,1], \"incorrect\"\nassert     sort_third([5,3,1,2,4]) == [1,2,3,4,5], \"incorrect\"\nassert     sort_third([3,5,2,1,4]) == [3,5,1,2,4], \"incorrect\"\nassert     sort_third([6,4,3,2,1]) == [1,2,3,4,6], \"incorrect\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ____________ == sort_third(l_1)\nassert ____________ == sort_third(l_2)\nassert ____________ == sort_third(l_3)\nassert ____________ == sort_third(l_4)\nassert ____________ == sort_third(l_5)\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_third([1, 4, 3, 2, 5]) == [1, 4, 2, 3, 5]\nassert     sort_third([1, 3, 3, 1, 3, 3, 3, 3, 3]) == [1, 3, 3, 3, 3, 3, 3, 3, 3]\nassert     sort_third([1, 2, 1, 2, 3, 1, 2, 3, 2, 3, 3]) == [1, 2, 1, 2, 2, 1, 3, 1, 2, 3, 3]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\ndef sort_second(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by two, while its values at the indicies that are divisible by two are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_third([3, 3, 2, 1, 3, 2]) == [1, 2, 2, 3, 3, 3]\nassert     sort_third([3, 1, 3, 2, 1, 3, 3, 3]) == [1, 1, 3, 3, 3, 3, 3, 3]\nassert     sort_third([2, 1, 1, 2, 1, 3]) == [1, 1, 1, 2, 2, 3]\nassert     sort_third([1, 1, 1, 2, 1, 3]) == [1, 1, 1, 1, 2, 3]\n\ndef most_common(lst: list):\n    \"\"\"This function takes a list lst and returns a list of the three most common values in lst\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_third([1,2,3,4])     == [1,2,3,4], \"should return [1,2,3,4]\"\nassert     sort_third([4,3,2,1])     == [1,2,3,4], \"should return [1,2,3,4]\"\nassert     sort_third([2,4,3,1])     == [1,2,3,4], \"should return [1,2,3,4]\"\nassert     sort_third([2,3,4,1])     == [1,2,3,4], \"should return [1,2,3,4]\"\nassert     sort_third([4,2,3,1])     == [1,2,3,4], \"should return [1,2,3,4]\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_third(['a','b','c'])     == ['c','b','a']\nassert     sort_third(['d','e','f'])     == ['f','d','e']\nassert     sort_third(['z','x','c'])     == ['c','x','z']\nassert     sort_third(['o','n','g'])     == ['g','o','n']\nassert     sort_third(['b','f','j'])     == ['f','b','j']\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nassert \nassert \nassert\nassert \n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique([1,2,2,2,3,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,7]) == [1,2,3,4,5,6,7]\n\ndef unique2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \"\"\"\n    res = []\n    for x in l:\n        if x not in res:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique(['a','b','c','b','c','a','d','d']) == ['a','b','c','d']\nassert     unique(['a','b','c','b','c','a','b','a']) == ['a','b','c']\nassert     unique([5,5,5,5,5,5,5,5]) == [5]\nassert     unique([5,6,7,5,5,5,5]) == [5,6,7]\n\ndef count_unique(l: list):\n    \"\"\"Return the number of unique elements in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique([1,2,3,1,1,3]) == [1,2,3]\nassert     unique([1,2,3,1,2,3]) == [1,2,3]\nassert     unique([1,2,3,1,2,3,1,2,3,1,2,3]) == [1,2,3]\nassert     unique([1,2,3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\nassert     unique([1,2,3,1,2,3,1,2,3,1,2,3]) == [1,2,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique([1,2,3,1,2,3]) == [1,2,3]\nassert     unique([1,2,3,1,2,3,2,3,3]) == [1,2,3]\nassert     unique([1,2,3,1,2,3,2,3,3,2,3,1,2,3]) == [1,2,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef longest_substring(s: str):\n    \"\"\"Return the length of the longest substring that contains at\n    least one occurrence of each of the characters in the string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     list(unique([1,2,2,2,3,3,3,3,3,3])) == [1,2,3]\n\ndef unique_in_order(iterable):\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique( [ 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 4 ] ) == [ 1, 2, 3, 4 ]\nassert     unique( [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ] ) == [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\nassert     unique( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 9 ] ) == [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\nassert     unique( [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ) == [ 1 ]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\nassert     unique(['a', 'b', 'c', 'a', 'b', 'c']) == ['a', 'b', 'c']\nassert     unique([1, 2, 3, 1, 2, 3, [1, 2, 3]]) == [1, 2, 3, [1, 2, 3]]\nassert     unique([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [[1, 2, 3]]\nassert     unique(['a', 'a', 'b', 'b']) == ['a', 'b']\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique([1, 1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5], \"incorrect\"\nassert     unique([1, 2, 2, 4, 4, 4, 5]) == [1, 2, 4, 5], \"incorrect\"\nassert     unique(['a', 'a', 'b', 'b', 'c', 'd', 'd']) == ['a', 'b', 'c', 'd'], \"incorrect\"\nassert     unique(['python', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']) == ['python'], \"incorrect\"\nassert     unique([1, 2, 3, 4, 4]) == [1, 2, 3, 4], \"incorrect\"\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([5,4,3]) == 5\nassert     max_element([5,4]) == 4\nassert     max_element([5]) == 5\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([1, 2, 3, -4, 5]) == 5\nassert     max_element([1, -2, 3, 4, -5]) == 1\nassert     max_element([]) == None\nassert     max_element([-1]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_element([10, 7, 3, 4]) == 10\nassert     max_element([8, 2, 4, 6]) == 8\nassert     max_element([-2, -10, -8, -4]) == -2\nassert     max_element([]) == None\n\ndef is_sorted(l: list):\n    \"\"\"Check if the list is sorted.\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_element( [2,3,4,5] ) == 5\nassert     max_element( [0,1,2,3] ) == 3\nassert     max_element( [3,3,3,3] ) == 3\nassert     max_element( [1,2,3] ) == 3\nassert     max_element( [1,2,3,1] ) == 3\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_element([0, 1, 2, 3, 4]) == 4\nassert     max_element([-1, 2, 3, 4, -2]) == 4\nassert     max_element([1, 2, -2, -1]) == 2\nassert     max_element([-1, -2, -3, -4]) == -1\nassert     max_element([-1, -2, 3, -4]) == 3\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([10,7,2]) == 10\nassert     max_element([1,2,3,5,7]) == 7\nassert     max_element([2,3,4,5,6]) == 6\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_element( [1, 2, 3, 4] ) == 4, max_element( [1, 2, 3, 4] )\nassert     max_element( [1, 2, 3, 4, 5] ) == 5, max_element( [1, 2, 3, 4, 5] )\nassert     max_element( [1] ) == 1, max_element( [1] )\nassert     max_element( [] ) == None, max_element( [] )\n\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_element([]) == None\nassert     max_element([1]) == 1\nassert     max_element([1, 2]) == 2\nassert     max_element([2, 1]) == 2\nassert     max_element([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         max_element([1, 2, 3, 4, 5]) == 5\nassert         max_element([4, 2, 3, 1, 5]) == 5\nassert         max_element([4, 3, 2, 1, 5]) == 5\nassert         max_element([]) == None\nassert         max_element([-1, 0, 1, 10]) == 10\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef max_element_helper(l: list):\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0], max_element_helper(l[1:]))\n\ndef test_max_element_helper():\n    assert max_element_helper([5, 7, 3, 9, 1]) == 9\n    assert max_element_helper([1]) == 1\n    "
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fizz_buzz(100) == 22\nassert     fizz_buzz(101) == 22\nassert     fizz_buzz(1000000) == 2\nassert     fizz_buzz(100000) == 0\nassert     fizz_buzz(0) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fizz_buzz(15)    == 3\nassert     fizz_buzz(20)    == 6\nassert     fizz_buzz(22)    == 9\nassert     fizz_buzz(27)    == 12\nassert     fizz_buzz(99)    == 18\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fizz_buzz(1) == 0\nassert     fizz_buzz(4) == 1\nassert     fizz_buzz(15) == 2\nassert     fizz_buzz(27) == 3\nassert     fizz_buzz(30) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert iz_fizz_buzz(3) == 0\nassert iz_fizz_buzz(9) == 0\nassert iz_fizz_buzz(12) == 2\nassert iz_fizz_buzz(15) == 3\nassert iz_fizz_buzz(18) == 4\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\n\ndef lucky_number(n: int):\n    \"\"\"Return the lucky number which is the smallest number that can be divided by each of the numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert izip(fizz_buzz(50), range(50)) == list(\n    (7, 0), (0, 1), (2, 2), (3, 2), (5, 2), (7, 1), (11, 1), (13, 1), (14, 0))"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fizz_buzz(15) == 4\nassert     fizz_buzz(7) == 1\nassert     fizz_buzz(26) == 4\nassert     fizz_buzz(28) == 0\nassert     fizz_buzz(29) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fizz_buzz(0) == 0\nassert     fizz_buzz(1) == 0\nassert     fizz_buzz(10) == 0\nassert     fizz_buzz(15) == 0\nassert     fizz_buzz(25) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fizz_buzz(20)    ==    4\nassert     fizz_buzz(30)    ==    6\nassert     fizz_buzz(100)    ==    1\nassert     fizz_buzz(1000)    ==    1\nassert     fizz_buzz(10000)    ==    1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (sort_even([9,7,5,3,1,2,4,6,8]) == [9,7,5,3,1,2,4,6,8])\nassert     (sort_even([1,2,3,4,5,6]) == [1,2,3,4,5,6])\nassert     (sort_even([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8])\nassert     (sort_even([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9])\nassert     (sort_even([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10])\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([3, 6, 9, 4, 1]) == [3, 6, 4, 9, 1]\nassert     sort_even([2, 4, 3, 6, 1, 9, 8]) == [2, 4, 6, 1, 3, 9, 8]\nassert     sort_even([3, 8, 3, 7, 2, 8, 1]) == [3, 8, 2, 3, 7, 8, 1]\nassert     sort_even([3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_even([3, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == \\\n        [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 7, 7, 7]\nassert sort_even([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == \\\n        [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 7]\nassert sort_even([9, 12, 13, 15, 17, 18, 19, 21, 22, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == \\\n        [9, 12, 13, 15, 17, 18, 19, 21, 22, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_even(list(range(10))) == [1, 3, 5, 7, 9]\nassert     sort_even(list(range(1, 10, 2))) == [1, 3, 5, 7, 9]\nassert     sort_even(list(range(10, 1, -2))) == [9, 7, 5, 3, 1]\nassert     sort_even(list(range(1, 10, 3))) == [1, 4, 7, 10]\nassert     sort_even(list(range(1, 10, 3))) == [1, 4, 7, 10]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == ['a', 'b', 'd', 'e', 'h', 'i', 'j', 'c', 'f', 'g'], 'incorrect'\nassert     sort_even(['b', 'a', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == ['b', 'a', 'c', 'd', 'e', 'h', 'i', 'j', 'f', 'g'], 'incorrect'\nassert     sort_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) == ['a', 'b', 'c', 'd', 'e', 'h', 'i', 'j', 'k', 'f', 'g'], 'incorrect'\nassert     sort_even(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'], 'incorrect'\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_even([3, 2, 4, 1, 9, 0]) == [3, 4, 2, 1, 0, 9]\nassert     sort_even([9, 8, 7, 6]) == [9, 8, 7, 6]\nassert     sort_even([0, 0]) == [0, 0]\nassert     sort_even([1, 10, 2]) == [1, 2, 10]\nassert     sort_even([3, 2, 4, 1, 9, 0]) == [3, 4, 2, 1, 0, 9]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_even([1, 3, 2, 4, 5]) == [1, 3, 2, 4, 5]\nassert     sort_even([1, 3, 2, 3, 5]) == [1, 3, 2, 3, 5]\nassert     sort_even([1, 3, 2, 3, 2]) == [1, 2, 3, 2, 3]\nassert     sort_even([1, 3, 2, 2, 5]) == [1, 2, 2, 3, 5]\nassert     sort_even([1, 3, 3, 2, 5]) == [1, 2, 3, 3, 5]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_even([2, 1, 3, 4, 5]) == [2, 4, 1, 3, 5]\nassert     sort_even([3, 1, 2, 4, 5]) == [3, 2, 1, 4, 5]\nassert     sort_even([5, 1, 3, 4, 2]) == [5, 4, 3, 2, 1]\nassert     sort_even([5, 1, 3, 4, 2, 6]) == [5, 4, 3, 2, 6, 1]\nassert     sort_even([]) == []\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (sort_even([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9]) == [1, 3, 2, 4, 5, 5, 6, 7, 8, 9, 9, 9, 9])\nassert     (sort_even([5, 3, 2, 7, 1, 8, 5, 3, 2]) == [1, 2, 3, 3, 5, 5, 7, 8, 8, 8])\nassert     (sort_even([9, 1, 4, 4, 5, 1, 4, 6]) == [1, 1, 4, 4, 4, 5, 6, 6])\nassert     (sort_even([7, 4, 9, 1, 7, 4]) == [1, 4, 4, 7, 7, 7])\nassert     (sort_even([8, 7, 2, 2, 9, 3, 8]) == [2, 2, 2, 9, 8, 8, 8])\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_cyclic(\"zwzvwzw\") == \"abc\"\nassert     decode_cyclic(\"wvwvwvw\") == \"cde\"\nassert     decode_cyclic(\"wwvvwwv\") == \"fdg\"\nassert     decode_cyclic(\"zvzvzv\") == \"ghi\"\nassert     decode_cyclic(\"vwvwvw\") == \"jkl\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decode_cyclic('cccabc') == 'abcabcabc'\nassert     decode_cyclic('ccbabc') == 'abcabcabc'\nassert     decode_cyclic('ccbbca') == 'abcabcabc'\nassert     decode_cyclic('cbcbca') == 'abcabcabc'\nassert     decode_cyclic('cbcbcb') == 'abcabcabc'\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decode_cyclic(\"aab\") == \"aabb\"\nassert     decode_cyclic(\"aabb\") == \"aab\"\nassert     decode_cyclic(\"a\") == \"a\"\nassert     decode_cyclic(\"\") == \"\"\nassert     decode_cyclic(\"ab\") == \"ab\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decode_cyclic(encode_cyclic(\"AB\")) == \"ABC\"\nassert     decode_cyclic(encode_cyclic(\"AC\")) == \"ACB\"\nassert     decode_cyclic(encode_cyclic(\"AD\")) == \"ABCD\"\nassert     decode_cyclic(encode_cyclic(\"BC\")) == \"ABC\"\nassert     decode_cyclic(encode_cyclic(\"CD\")) == \"ABC\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decode_cyclic(\"aabbbc\") == \"abcabcabc\"\nassert     decode_cyclic(\"abcabcabc\") == \"abcabcabc\"\nassert     decode_cyclic(\"abbcabc\") == \"abababab\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decode_cyclic(\"abc\") == \"abc\"\nassert     decode_cyclic(\"aaba\") == \"aaba\"\nassert     decode_cyclic(\"aaa\") == \"aaa\"\nassert     decode_cyclic(\"abcabc\") == \"abcabcabc\"\nassert     decode_cyclic(\"aabb\") == \"ababa\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode_cyclic(\"abc\") == \"abcabc\"\nassert     encode_cyclic(\"abcdef\") == \"abcdefabcdef\"\nassert     encode_cyclic(\"abcdefgh\") == \"abcdefghabcdefgh\"\nassert     encode_cyclic(\"abcdefghij\") == \"abcdefghijabcdefgh\"\nassert     encode_cyclic(\"abcdefghijkl\") == \"abcdefghijklabcdefgh\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcd\")) == \"abcdef\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"ab\")) == \"ab\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\n\ndef test_encode_cyclic():\n    "
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decode_cyclic(encode_cyclic(\"aaabbc\")) == \"aaabbc\"\nassert     decode_cyclic(encode_cyclic(\"aabbcc\")) == \"aabbcc\"\nassert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"aabc\")) == \"aabc\"\nassert     decode_cyclic(encode_cyclic(\"ababab\")) == \"ababab\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decode_cyclic('h3ll0w')     == 'hello'\nassert     decode_cyclic('h3ll0w0')     == 'hello0'\nassert     decode_cyclic('h3ll0w00')     == 'hello00'\nassert     decode_cyclic('h3ll0w000')     == 'hello000'\nassert     decode_cyclic('h3ll0w0000')     == 'hello0000'\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_fib(5) == 22\nassert     prime_fib(14) == 47\nassert     prime_fib(100) == 112"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\n\"\"\"\nExercise 2:\n    Implement a function that is called is_vowel. It should take a string as input and return True if the string\n    contains a vowel and False otherwise. \n    \n    E.g:\n        is_vowel('google') == True\n        is_vowel('google1') == False\n    \n    Function should ignore case.\n\"\"\"\n\ndef is_vowel(str):\n    \"\"\"\n    Returns True if the str contains a vowel and False otherwise\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (prime_fib(4) == 13)\nassert     (prime_fib(5) == 29)\nassert     (prime_fib(6) == 61)\nassert     (prime_fib(7) == 89)\nassert     (prime_fib(8) == 107)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_fib(10) == 25, \"Incorrect answer\"\nassert     prime_fib(20) == 6765, \"Incorrect answer\"\nassert     prime_fib(30) == 8321, \"Incorrect answer\"\nassert     prime_fib(40) == 104729, \"Incorrect answer\"\nassert     prime_fib(50) == 142913828922, \"Incorrect answer\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_fib(6) == 10\nassert     prime_fib(11) == 17\nassert     prime_fib(13) == 29\nassert     prime_fib(16) == 61\nassert     prime_fib(17) == 89\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prime_fib(9) == 89\nassert     prime_fib(12) == 4782\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (prime_fib(11) == \"11 is not a Fibonacci number\")\nassert     (prime_fib(11) == \"11 is not a prime number\")\nassert     (prime_fib(10) == \"10 is the last prime number\")\nassert     (prime_fib(13) == \"13 is not a Fibonacci number\")\nassert     (prime_fib(15) == \"15 is a Fibonacci number\")\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_fib(3) == 2\nassert     prime_fib(5) == 5\nassert     prime_fib(7) == 13\nassert     prime_fib(9) == 29\nassert     prime_fib(11) == 89\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_fib(11) == 89\nassert     prime_fib(12) == 89\nassert     prime_fib(13) == 89\nassert     prime_fib(14) == 89\nassert     prime_fib(15) == 89\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([]) is True, \"should be True\"\nassert     triples_sum_to_zero([0]) is False, \"should be False\"\nassert     triples_sum_to_zero([0,0]) is False, \"should be False\"\nassert     triples_sum_to_zero([0,0,0]) is False, \"should be False\"\nassert     triples_sum_to_zero([0,0,0,-2]) is True, \"should be True\"\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([1, -1, 0, 2, -3, 3, 3, 6, 6]) == True\nassert triples_sum_to_zero([1, -1, 0, 2, -3, 3]) == False\nassert triples_sum_to_zero([1, -1, 0, 2, -3, 3, 3]) == False\nassert triples_sum_to_zero([1, -1, 0, 2, -3, 3, 3, 6]) == False\nassert triples_sum_to_zero([1, -1, 0, 2, -3, 3, 3, 6, 6]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([1,2,3]) == True\nassert     triples_sum_to_zero([1,-2,3]) == True\nassert     triples_sum_to_zero([-1,2,3]) == False\nassert     triples_sum_to_zero([1,2,-3]) == False\nassert     triples_sum_to_zero([1,2,3,4]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([1, -1, -1, 0, 1, -1, 1, -1]) == True\nassert     triples_sum_to_zero([1, -1, -1, 0, 1, -1, 1, -1, -2]) == False\nassert     triples_sum_to_zero([1, -1, 1, -1, -1, 0, 1, -1]) == True\nassert     triples_sum_to_zero([1, -1, -1, 0, 1, -1, 1, -1, 2]) == False\nassert     triples_sum_to_zero([]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ___________ == triples_sum_to_zero([1, -1, 0, 2, -3, -4, 0, 0, -2, -5])\nassert ___________ == triples_sum_to_zero([-1, 0, 1])\nassert ___________ == triples_sum_to_zero([])\nassert ___________ == triples_sum_to_zero([0, 1])\nassert ___________ == triples_sum_to_zero([1, -1, 0])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([1, 0, -1, 0, -2, 2])\nassert     triples_sum_to_zero([1, -2, 3, -4, 5]) == False\nassert     triples_sum_to_zero([1, 2, -2, -2, 2, 0]) == True\nassert     triples_sum_to_zero([-1, -2, -3, -4, -5]) == True\nassert     triples_sum_to_zero([2, 2, -2, -2, 2, 0]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([2, 3, 1, 2, -2, 1]) is True\nassert     triples_sum_to_zero([-3, -3, -4]) is True\nassert     triples_sum_to_zero([1, 2, 3, -1, 2, -3]) is True\nassert     triples_sum_to_zero([-1, -1, -1, 1, 1, 1]) is True\nassert     triples_sum_to_zero([1, 1, 1, 1, 1, 1]) is False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([0, 0, 0]) == True, \"triples_sum_to_zero([0, 0, 0])\"\nassert     triples_sum_to_zero([1, -1, 0]) == True, \"triples_sum_to_zero([1, -1, 0])\"\nassert     triples_sum_to_zero([0, 0, 0, 0]) == False, \"triples_sum_to_zero([0, 0, 0, 0])\"\nassert     triples_sum_to_zero([0, 0, 1, -1]) == False, \"triples_sum_to_zero([0, 0, 1, -1])\"\nassert     triples_sum_to_zero([1, -1, 1, -1]) == False, \"triples_sum_to_zero([1, -1, 1, -1])\"\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert _________ == triples_sum_to_zero([4, 0, -2, 3, 3, -2, 4, 0, -2, 4])\nassert not _________ == triples_sum_to_zero([4, 0, -2, 3, 3, -2, 4, 0, -2, -4])\nassert _________ == triples_sum_to_zero([])\nassert not _________ == triples_sum_to_zero([3, 3, 3])\nassert not _________ == triples_sum_to_zero([-2, 0, 2, 3, 4])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([])    == False\nassert     triples_sum_to_zero([0])    == False\nassert     triples_sum_to_zero([0,0])    == False\nassert     triples_sum_to_zero([0,-2,3])    == True\nassert     triples_sum_to_zero([0,0,0])    == False\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     car_race_collision(3) == 4\nassert     car_race_collision(6) == 10\nassert     car_race_collision(50) == 1263\nassert     car_race_collision(100) == 3392\nassert     car_race_collision(1000) == 91905961\nprint(\"car_race_collision is correct.\")\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 0\nassert     car_race_collision(5) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     car_race_collision(2) == 0, car_race_collision(2)\nassert     car_race_collision(3) == 0, car_race_collision(3)\nassert     car_race_collision(4) == 1, car_race_collision(4)\nassert     car_race_collision(5) == 2, car_race_collision(5)\nassert     car_race_collision(6) == 3, car_race_collision(6)\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     car_race_collision(2)     == 0\nassert     car_race_collision(3)     == 0\nassert     car_race_collision(10)     == 0\nassert     car_race_collision(15)     == 0\nassert     car_race_collision(1)     == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 3\nassert     car_race_collision(10) == 4"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert ______________ == car_race_collision(2)\nassert ______________ == car_race_collision(3)\nassert ______________ == car_race_collision(4)\nassert ______________ == car_race_collision(5)\nassert ______________ == car_race_collision(6)\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     car_race_collision(5) == 0\nassert     car_race_collision(10) == 0\nassert     car_race_collision(20) == 0\nassert     car_race_collision(50) == 0\nassert     car_race_collision(100) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 3\nassert     car_race_collision(6) == 4\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     car_race_collision(10) == 2\nassert     car_race_collision(5) == 0\nassert     car_race_collision(1000) == 0\nassert     car_race_collision(1) == 0\n\nprint(\"Correct implementation!\""
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     incr_list( [1, 2, 3, 4, 5] ) == [2, 3, 4, 5, 6]\nassert     incr_list( [1, 2, 3, 4, 5] ) == [2, 3, 4, 5, 6]\nassert     incr_list( [1, 2, 3, 4] ) == [2, 3, 4, 5]\nassert     incr_list( [1, 2, 3] ) == [2, 3, 4]\n\ndef decr_list(l: list):\n    \"\"\"Return list with elements decremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\nassert     incr_list([1,2,3,4,5,6,7]) == [2,3,4,5,6,7,8]\nassert     incr_list([1,2,3,4,5,6,7,8]) == [2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [incr_list([0, 1, 2, 3, 4]) == [1, 2, 3, 4, 5]\n            , incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\n            , incr_list([10, 11, 12, 13, 14]) == [11, 12, 13, 14, 15]\n            , incr_list([10, 11, 12]) == [11, 12, 13, 14, 15]\n            , incr_list([1]) == [2]\n            , incr_list([]) == []\n            , incr_list([1, 2, 3]) == [2, 3, 4]\n            , incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\n            , incr_list([0, 0, 0, 0, 0, 0]) == [1, 1, 1, 1, 1, 1]\n            , incr_list([0, 0, 0, 0]) == [1, 1, 1, 1]\n            , incr_list([]) == []\n            , incr_list([1, 1, 1, 1, 1, 1, 1]) == [2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1, 1, 1, 1, 1]) == [2, 2, 2, 2, 2]\n            , incr_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([1, 2, 3, 4, 5, 6, 7]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([1, 2, 3, 4]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([1, 2, 3]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([1, 2]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([1]) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n            , incr_list([]) == []\n            , incr_list([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [2, 2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1, 1, 1, 1, 1, 1, 1, 1]) == [2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1, 1, 1, 1, 1, 1, 1]) == [2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1, 1, 1, 1, 1, 1]) == [2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1, 1, 1, 1, 1]) == [2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1, 1, 1, 1]) == [2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1, 1, 1]) == [2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1, 1]) == [2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([1]) == [2, 2, 2, 2, 2, 2, 2, 2]\n            , incr_list([]) == []\n            , incr_lis"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1,2,3]) == [1,2,3]\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3]) == [3,4,5]\n\ndef multiply_list(l: list):\n    \"\"\"Return list with elements multiplied by 2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [2, 4, 6] == incr_list([1, 2, 3])\nassert     [2, 4, 6, 8] == incr_list([1, 2, 3, 4])\n\ndef summation(n: int, term: int) -> int:\n    \"\"\"Return the sum of the first n terms in the sequence defined by term.\n    Implement using recursion!\n    \"\"\"\n    pass\n\ndef factorial(n: int) -> int:\n    \"\"\"Return n factorial for non-negative integers.\n    Implement using recursion!\n    \"\"\"\n    pass\n\ndef fibonacci(n: int) -> int:\n    \"\"\"Return the nth number in the Fibonacci sequence,\n    using only O(1) space (constant space).\n    Implement using recursion!\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\nassert     incr_list([]) == [1]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([]) == []\nassert     incr_list([2,3,4,5]) == [3,4,5,6]\nassert     incr_list([1,2]) == [2,3]\nassert     incr_list([1]) == [2]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [0, 1, 2, 3] == incr_list([1, 2, 3, 4])\nassert     [0, 1, 2, 3, 4] == incr_list([1, 2, 3])\nassert     [0, 1, 2, 3, 4] == incr_list([1, 2, 3])\nassert     [0, 1, 2, 3, 4] == incr_list([1, 2, 3])\nassert     [0, 1, 2, 3, 4] == incr_list([1, 2, 3])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2]) == [2,3]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     incr_list([1,2,3,4,5]) == [2, 3, 4, 5, 6]\nassert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,1,1]) == [2,2,2]\nassert     incr_list([1,2,3,4,5,6]) == [2,3,4,5,6,7]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == True\nassert     pairs_sum_to_zero([10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1]) == False\nassert     pairs_sum_to_zero([10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]) == False\nassert     pairs_sum_to_zero([-1, -1]) == True\nassert     pairs_sum_to_zero([1, 1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,5]) == True\nassert     pairs_sum_to_zero([1,2,-2,4,5]) == False\nassert     pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,10]) == False\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([1, 1, -1, 1, -1]) == True, \"testing for pairs_sum_to_zero([1, 1, -1, 1, -1])\"\nassert     pairs_sum_to_zero([-1, -1, -1, -1, -1]) == False, \"testing for pairs_sum_to_zero([-1, -1, -1, -1, -1])\"\nassert     pairs_sum_to_zero([1, 1]) == False, \"testing for pairs_sum_to_zero([1, 1])\"\nassert     pairs_sum_to_zero([]) == False, \"testing for pairs_sum_to_zero([])\"\n\ndef print_pairs_sum_to_zero(l):\n    \"\"\"\n    print_pairs_sum_to_zero takes a list of integers as an input.\n    it prints the pairs of integers that sum to zero.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([3, 1, -4, -3, 2]) == True\nassert     pairs_sum_to_zero([3, 1, -4, -3, 2, 4]) == False\nassert     pairs_sum_to_zero([3, 1, -4, -3, 2, 4, -5, 6]) == True\nassert     pairs_sum_to_zero([3, 1, -4, -3, 2, 4, 5, -6]) == False"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, -4, -3, -2, 5, -8, 2, 3, -1]) is True\nassert     pairs_sum_to_zero([1, 2, 3, -4, -3, -2, 5, -8, -1]) is False\nassert     pairs_sum_to_zero([1, 1, 1, -2, -2, 2, 2]) is False\nassert     pairs_sum_to_zero([-1, -2, -3, -4, -3, -2, 1, 2, 3]) is True\nassert     pairs_sum_to_zero([]) is False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         pairs_sum_to_zero([10,-3,3,2,-5,1,4,-2,4,-3,7]) == True\nassert         pairs_sum_to_zero([0,0,0,0]) == True\nassert         pairs_sum_to_zero([5,8,-2,3,-1,4]) == False\nassert         pairs_sum_to_zero([]) == False\nassert         pairs_sum_to_zero([5,8,-2,-5,3,7,0,2]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert     pairs_sum_to_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\nassert     pairs_sum_to_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == False\nassert     pairs_sum_to_zero([2, -2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert ______________ == pairs_sum_to_zero([1, -2, 3, -2, 5])\nassert ______________ == pairs_sum_to_zero([-1, 2, 3, -2, 5])\nassert ______________ == pairs_sum_to_zero([1, -2, 3, 4, 5])\nassert ______________ == pairs_sum_to_zero([1, -2, 3, -2, -5])\nassert not ______________ == pairs_sum_to_zero([-1, -2, 3, -2, -5])\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == True\nassert     pairs_sum_to_zero([-1, -2, -3, -4, -5]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 1]) == False\nassert     pairs_sum_to_zero([-1, -2, -3, -4, 1]) == False\nassert     pairs_sum_to_zero([1, 2, -3, 4, 1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,-5]) == False\nassert     pairs_sum_to_zero([1,2,3,4,-1]) == True\nassert     pairs_sum_to_zero([1,2,3,4,4,-5]) == False\nassert     pairs_sum_to_zero([1,-1]) == True\nassert     pairs_sum_to_zero([]) == False\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     change_base(10, 2) == \"1010\"\nassert     change_base(10, 3) == \"101\"\nassert     change_base(10, 16) == \"A\"\n\ndef base_conversion(x: int, base: int):\n    \"\"\"Convert x to a number in base of input base.\n    return a list of integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     change_base(16, 16) == \"1\"\nassert     change_base(10, 16) == \"A\"\nassert     change_base(11, 16) == \"B\"\nassert     change_base(12, 16) == \"C\"\nassert     change_base(13, 16) == \"D\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     change_base(12345, 2) == \"1011011\"\nassert     change_base(1234, 8) == \"1011\"\nassert     change_base(1234, 16) == \"4\"\nassert     change_base(1234, 10) == \"1234\"\nassert     change_base(1234, 3) == \"1234\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     change_base(0, 2) == \"0b0\"\nassert     change_base(1, 2) == \"0b10\"\nassert     change_base(2, 2) == \"0b01\"\nassert     change_base(3, 2) == \"0b11\"\nassert     change_base(4, 2) == \"0b100\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nchange_base(1000, 10) == '10'\nchange_base(1000, 100) == '100'\nchange_base(1000, 1000) == '1000'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     change_base(0,1) == '0'\nassert change_base(1,2) == '1'\nassert change_base(16,16) == '10'\nassert change_base(10,10) == '10'\nassert change_base(25,16) == '1a'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     change_base(3, 8) == '11'\nassert change_base(22, 17) == '12'\nassert change_base(4, 16) == '10'\n\ndef factorial(x: int):\n    \"\"\"Return factorial of input number x.\n    >>> factorial(2)\n    2\n    >>> factorial(3)\n    6\n    \"\"\"\n    pass\n\ndef change_base2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     change_base(123, 2) == \"1011101\"\nassert change_base(1234, 8) == \"1834\"\nassert change_base(1234, 16) == \"c0\"\nassert change_base(1234, 17) == \"1100001\"\nassert change_base(1234, 10) == \"1234\"\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(3,2) == 1.5\nassert     triangle_area(10,5) == 25\nassert     triangle_area(1,10) == 1\nassert     triangle_area(2,2) == 2\n\ndef triangle_perimeter(a,h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triangle_area(5, 3) == 10\nassert     triangle_area(4, 3) == 7.5\nassert     triangle_area(7, 3) == 18\n\ndef square_perimeter(a):\n    \"\"\"Given side length of a square return perimeter.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(5, 5) == 25\nassert     triangle_area(7, 2) == 14\nassert     triangle_area(10, 2) == 26.00\nassert     triangle_area(10, 10) == 100\n\ndef rectangle_area(w, l):\n    \"\"\"Given width and length of a rectangle return area for the rectangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(3, 4) == 6.0\nassert     triangle_area(4, 3) == 6.0\nassert     triangle_area(5, 5) == 25.0\nassert     triangle_area(8, 8) == 64.0\nassert     triangle_area(10, 12) == 110.0\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert ________(________, ________) == ________\n\n\ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(5,10) == 10\nassert     triangle_area(5,5) == 10\nassert     triangle_area(5,3) == 12.5\nassert     triangle_area(3,5) == 12.5\nassert     triangle_area(5,7) == 22.5\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(2, 3) == 1\nassert     triangle_area(3, 2) == 1\nassert     triangle_area(3, 3) == 2\nassert     triangle_area(5, 3) == 4.5\nassert     triangle_area(5, 7) == 22.5\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(4, 5) == 2.5\nassert     triangle_area(6, 7) == 10.5\nassert     triangle_area(8, 9) == 17.5\nassert     triangle_area(10, 11) == 22.5\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triangle_area(10, 4)    ==    20\nassert     triangle_area(6, 5)    ==    36\nassert     triangle_area(10, 6)    ==    50\nassert     triangle_area(7, 7)    ==    49\nassert     triangle_area(9, 10)    ==    72\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(10, 5) == 5\nassert     triangle_area(15, 10) == 50\nassert     triangle_area(5, 5) == 10\nassert     triangle_area(10, 10) == 100\nassert     triangle_area(30, 10) == 450\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [fib4(0), fib4(1), fib4(2), fib4(3), fib4(4), fib4(5), fib4(6), fib4(7)] == [0, 0, 1, 1, 2, 3, 5, 8, 13]\nassert     [fib4(1), fib4(2), fib4(3), fib4(4), fib4(5), fib4(6), fib4(7), fib4(8), fib4(9), fib4(10)] == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib4(0)     == 0\nassert     fib4(1)     == 0\nassert     fib4(2)     == 2\nassert     fib4(3)     == 0\nassert     fib4(4)     == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib4(0)    == 0\nassert     fib4(1)    == 0\nassert     fib4(2)    == 2\nassert     fib4(3)    == 0\nassert     fib4(4)    == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     median([1,2,3,4,5,6,7]) == 4\nassert     median([1,2,3,4]) == 2.5\nassert     median([1]) == 1\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     median([1, 2, 3, 4, 5, 6]) == 3\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     median([1,2,3,4,5]) == 3.5\nassert     median([]) == None\nassert     median([-1,-2,-3,-4,-5]) == -2.5\nassert     median([1,2,3,4,5,-1,-2,-3,-4,-5]) == -1.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     median([]) == 0\nassert median([1]) == 1\nassert median([2, 1]) == 1\nassert median([2, 1, 3]) == 2\nassert median([2, 1, 3, 4]) == 2.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     median([5, 4, 3, 2, 1]) == 2\nassert     median([3, 4, 5]) == 3\nassert     median([1]) == 1\n\ndef quartile(l: list):\n    \"\"\"Return quartile of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     median([0])     == 0\nassert     median([0, 0])     == 0\nassert     median([0, 0, 0])     == 0\nassert     median([0, 1, 2, 3, 4])     == 2.5\nassert     median([3, 3, 3, 3, 3])     == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     median([0, 1, 2, 3, 4]) == 2.5\nassert     median([1, 2, 3, 4, 5]) == 3\nassert     median([0, 0, 0, 0]) == 0\nassert     median([]) == None\nassert     median([3, 4, 5]) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     median([1, 2, 3, 4]) == 2.5\nassert     median([1, 2, 3, 4, 5]) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     median([1, 2, 3, 4]) == 3.0\nassert     median([1, 2, 3, 4, 5]) == 3.5\nassert     median([]) == None\nassert     median([10]) == 10.0\nassert     median(list(range(10))) == 4.5"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     median([]) == None\nassert     median([1,2,3]) == 2\nassert     median([2,3,4,5,6,7,8]) == 5\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_palindrome('radar') == True\nassert     is_palindrome('radars') == True\nassert     is_palindrome('radar') == True\nassert     is_palindrome('radars') == True\nassert     is_palindrome('radars') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"radar\") == True\nassert     is_palindrome(\"radar!@#\") == True\nassert     is_palindrome(\"radar?\") == False\nassert     is_palindrome(\"radar!\") == False\nassert     is_palindrome(\"radar\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome('') == True\nassert     is_palindrome('a') == True\nassert     is_palindrome('ab') == True\nassert     is_palindrome('abba') == True\nassert     is_palindrome('abcd') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"abcdcba\")\nassert     not is_palindrome(\"abcdcbaa\")\nassert     is_palindrome(\"abcdcbaedcba\")\nassert     not is_palindrome(\"abcdcbaedcbaa\")\nassert     is_palindrome(\"abcdcbaedcbaedcba\")\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_palindrome(\"Able was I ere I saw Elba\")\nassert     is_palindrome(\"No lemon, no melon\")\nassert     is_palindrome(\"Able was I ere I saw Elba\") == False\nassert     is_palindrome(\"Able was I ere I saw Elba\".replace(\" \", \"\")) == False\nassert     is_palindrome(\"Able was I ere I saw Elba\".replace(\" \", \"\")) == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_palindrome('Hello') == True\nassert     is_palindrome('Radar') == True\nassert     is_palindrome('A man, a plan, a canal: Panama') == True\nassert     is_palindrome('Testing, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0') == True\nassert     is_palindrome('racecar') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"ab\") == False\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"abba\")\nassert not is_palindrome(\"abcd\")\nassert is_palindrome(\"kayak\")\nassert is_palindrome(\"madam\")\nassert is_palindrome(\"abcd\")\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('ab') == False\nassert     is_palindrome('abba') == True\nassert     is_palindrome('abcba') == True\n\ndef is_pallindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a pallindrome\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_palindrome('') == True\nassert     is_palindrome('a') == True\nassert     is_palindrome('ab') == False\nassert     is_palindrome('aba') == True\nassert     is_palindrome('amanaplanacanalpanama') == True\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ~~~\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     modp(4, 5) == modp(4, 5) == modp(4, p=5) == modp(4, p=5)\nassert     modp(3, 5) == modp(3, 5) == modp(3, p=5) == modp(3, p=5)\nassert     modp(2, 5) == modp(2, 5) == modp(2, p=5) == modp(2, p=5)\nassert     modp(1, 5) == modp(1, 5) == modp(1, p=5) == modp(1, p=5)\nassert     modp(0, 5) == modp(0, 5) == modp(0, p=5) == modp(0, p=5)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     modp(15, 2) == 1\nassert modp(17, 3) == 2\nassert modp(19, 11) == 6\nassert modp(21, 17) == 3\nassert modp(23, 11) == 8\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert ________ == modp(a, p)\nassert ________ == modp(a, p)\nassert ________ == modp(a, p)\nassert ________ == modp(a, p)\nassert ________ == modp(a, p)\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef addmod(n: int, p: int):\n    \"\"\"Return (n+1) modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ~~~\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     modp(0, 3) == 1\nassert modp(1, 3) == 3\nassert modp(2, 3) == 1\nassert modp(3, 3) == 3\nassert modp(4, 3) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     modp(2,11) == 2\nassert     modp(3,11) == 5\nassert     modp(5,11) == 7\nassert     modp(11,11) == 11\nassert     modp(15,11) == 5\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert ___________ == modp(______, ___________)\n\ndef modp_inv(n: int, p: int):\n    \"\"\"Return n^(-1) mod p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_shift(\"eeeoqyb\") == \"uberhack\"\nassert     decode_shift(\"bhbccyq\") == \"uberhack\"\nassert     decode_shift(\"gkdzmgk\") == \"uberhack\"\nassert     decode_shift(\"zdkzmz\") == \"uberhack\"\nassert     decode_shift(\"xxfqmz\") == \"uberhack\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         decode_shift(\"stefan\") == \"stefan\"\nassert         decode_shift(\"stefan\")!= \"steffan\"\nassert         decode_shift(\"stefan\")!= \"steffan\"\nassert         decode_shift(\"stefan\")!= \"steffan\"\nassert         decode_shift(\"stefan\")!= \"steffan\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"\nassert     decode_shift(encode_shift(\"H\")) == \"H\"\nassert     decode_shift(encode_shift(\"\")) == \"\"\nassert     decode_shift(encode_shift(\"Czesc\")) == \"Czesc\"\nassert     decode_shift(encode_shift(\"Hello\")) == \"Hello\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode_shift(\"Hello\") == \"Mjqqt\"\nassert decode_shift(\"Mjqqt\") == \"Hello\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode_shift(\"code\") == \"newdex\"\nassert     encode_shift(\"erle\") == \"lewrd\"\nassert     encode_shift(\"foaad\") == \"tdfao\"\nassert     encode_shift(\"admin\") == \"zmneb\"\nassert     encode_shift(\"bab\") == \"bhjm\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     \"hello\" == decode_shift(encode_shift(\"hello\"))\nassert     \"nice to meet you\" == decode_shift(encode_shift(\"nice to meet you\"))\nassert     \"goodbye\" == decode_shift(encode_shift(\"goodbye\"))\nassert     \"a\" == decode_shift(encode_shift(\"a\"))\nassert     \"z\" == decode_shift(encode_shift(\"z\"))\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode_shift(\"Hello World\") ==         \"Mjqqt btwqrq\"\nassert     encode_shift(\"Python\") ==                 \"Mthtt bqyqm\"\nassert     encode_shift(\"a\") ==                         \"a\"\nassert     encode_shift(\"Z\") ==                         \"Y\"\nassert     encode_shift(\"aa\") ==                         \"b\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decode_shift(\"bbllklljjw\") == \"hello\"\nassert decode_shift(\"bbaaababaababbbaaa\") == \"abc\"\nassert decode_shift(\"bbllllllllllllllll\") == \"abc\"\nassert decode_shift(\"abab\") == \"abab\"\n\n\ndef caesar_cipher_encrypt(s: str, key: int):\n    \"\"\"\n    takes as input a string and an integer key. The function returns the encrypted string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(encode_shift(\"Hello world!\"))\n    print(encode_shift(\"Secret message!\"))\n    print(decode_shift(\"Hello world!\"))\n    print(decode_shift(\"Wvqbzgivatr vpgqovczhbf emhugcgjvxizjgclhv\"))"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     \"Hello\" == decode_shift(encode_shift(\"Hello\"))\nassert \"Hello World\" == decode_shift(encode_shift(\"Hello World\"))\nassert     \"a\" == decode_shift(encode_shift(\"a\"))\n\nif __name__ == \"__main__\":\n    with open(\"data/data.txt\") as f:\n        data = f.read()\n    data = data.strip()\n    print(decode_shift(data))"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"abcd\") == \"bcd\"\nassert     remove_vowels(\"Python!\") == \"hPn!\"\nassert     remove_vowels(\"a b c d\") == \" \"\nassert     remove_vowels(\"x\") == \"x\"\nassert     remove_vowels(\"\") == \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_vowels(\"abbbcdddeeee\") == \"bcd\"\nassert     remove_vowels(\"This is a test\") == \"st\"\nassert     remove_vowels(\"I am testing\") == \"st\"\nassert     remove_vowels(\"I am testing.\") == \"st.\"\nassert     remove_vowels(\"I am testing, please\") == \"st, please\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"hello world\")    == \"hll wrd\",    \"remove_vowels('hello world') is not correct\"\nassert     remove_vowels(\"\")    == \"\",    \"remove_vowels('hello world') is not correct\"\nassert     remove_vowels(\"aeiou\")    == \"\",    \"remove_vowels('aeiou') is not correct\"\nassert     remove_vowels(\"aei\")    == \"\",    \"remove_vowels('aei') is not correct\"\nassert     remove_vowels(\"aeiouaeiou\")    == \"\",    \"remove_vowels('aeiouaeiou') is not correct\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_vowels(\"happy\") == \"ypph\"\nassert     remove_vowels(\"Xyz\") == \"z\"\nassert     remove_vowels(\"ABCD\") == \"ABCD\"\nassert     remove_vowels(\"Xyz\") == \"z\"\nassert     remove_vowels(\"ABCD\") == \"ABCD\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_vowels('This is good') == 'Ths s dg good'\nassert     remove_vowels('A great day to learn Python.') == 'Ths g dn r dn ln Python'\nassert     remove_vowels('We love Python!') == 'W lv Pythn'\nassert     remove_vowels('Python is a great language!') == 'Ths gn r dn ln Pythn'\n\n\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     'cease' == remove_vowels('cease')\nassert     'cease' == remove_vowels('scease')\nassert     'cease' == remove_vowels('Scease')\nassert     'cease' == remove_vowels('CEASE')\nassert     'cease' == remove_vowels('casdce')\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"Python\") == \"ythn\"\nassert     remove_vowels(\"A\") == \"A\"\nassert     remove_vowels(\"\") == \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_vowels(\"Hello\") == \"Hll\"\nassert     remove_vowels(\"Sjdnfkjsdnf\") == \"Sdffkfd\"\nassert     remove_vowels(\"Sjdnfkjsdnfknf\") == \"Sdffkfd\"\nassert     remove_vowels(\"Sjdnfkjsdnfknfsd\") == \"Sdffkfd\"\nassert     remove_vowels(\"Sjdnfkjsdnfknfsdkj\") == \"Sdffkfd\"\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_threshold([3, 4, 5, 6], 4) is True\nassert     below_threshold([3, 4, 5, 6], 3) is True\nassert     below_threshold([3, 4, 5, 6], 6) is False\nassert     below_threshold([3, 4, 5, 6], 5) is False\nassert     below_threshold([3, 4, 5, 6], 2) is True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (below_threshold([1,2,3,4,5], 3) == True)\nassert     (below_threshold([1,2,3,4,5], 2) == False)\nassert     (below_threshold([1,2,3,4,5], 0) == True)\n\ndef swap_elements(l: list, i: int, j: int):\n    \"\"\"Swap the elements at positions i and j in list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_threshold([1, 2, 3, 4], 1) == True\nassert     below_threshold([1, 2, 3, 4], 2) == False\nassert     below_threshold([1, 2, 3, 4], 3) == True\nassert     below_threshold([1, 2, 3, 4], 4) == False\nassert     below_threshold([1, 2, 3, 4], 5) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_threshold([2, 4, 6, 8, 10], 2)\nassert     not below_threshold([2, 4, 6, 8, 10], 3)\nassert     not below_threshold([2, 4, 6, 8, 10], 1)\nassert     below_threshold([2, 4, 6, 8, 10], 5)\nassert     below_threshold([2, 4, 6, 8, 10], 7)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [1, 2, 3] == below_threshold([1, 2, 3], 2)\nassert    [1, 2, 3] == below_threshold([1, 2, 3], 3)\nassert    [1, 2, 3] == below_threshold([1, 2, 3], 1)\nassert    [1, 2, 3] == below_threshold([1, 2, 3], 0)\nassert    [1, 2, 3] == below_threshold([-1, -2, -3], -1)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     below_threshold([1, 2, 3], 0) == True\nassert     below_threshold([1, 2, 3], 1) == False\nassert     below_threshold([1, 2, 3], 2) == True\nassert     below_threshold([1, 2, 3], 3) == True\nassert     below_threshold([1, 2, 3], 4) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 3) == True\nassert     below_threshold([2, 4, 6, 8, 10], 5) == False\nassert     below_threshold([10, 8, 6, 4, 2], 10) == True\nassert     below_threshold([10, 8, 6, 4, 2], 4) == False\n\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_threshold([1, 2, 3, 4], 1)\nassert     below_threshold([3, 4, 5, 6], 3)\nassert     not below_threshold([4, 5, 5, 6], 3)\nassert     below_threshold([], 0)\nassert     not below_threshold([1], 0)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [l for l in ([], [1], [2], [3], [4], [3], [2], [1], [0])\n            if below_threshold(l, 2)] == [1, 0]\nassert     [l for l in ([], [1], [2], [3], [4], [3], [2], [1], [0])\n            if below_threshold(l, 3)] == [0]\nassert     [l for l in ([], [1], [2], [3], [4], [3], [2], [1], [0])\n            if below_threshold(l, 4)] == []\nassert     [l for l in ([], [1], [2], [3], [4], [3], [2], [1], [0])\n            if below_threshold(l, 0)] == [1, 2, 0]\nassert     [l for l in ([], [1], [2], [3], [4], [3], [2], [1], [0])\n            if below_threshold(l, 1)] == [1, 2, 0, 4]\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (below_threshold(range(5, 10), 3)) == False\nassert     (below_threshold(range(5, 10), 5)) == True\nassert     (below_threshold([], 3)) == True\nassert     (below_threshold([1, 2, 3], 0)) == False\nassert     (below_threshold([1, 2, 3], 1)) == False\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \nadd(1,2)\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add(5, 5) == 10\nassert     add(2, 2) == 4\nassert     add(0, 4) == 4\nassert     add(-5, 4) == 1\nassert     add(-3, 2) == -1\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         add(0, 1)    ==    1\nassert         add(1, 0)    ==    1\nassert         add(0, 0)    ==    0\nassert         add(1, 1)    ==    2\nassert         add(2, 1)    ==    3\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add(5, 2) == 7\nassert     add(3, 5) == 8\nassert     add(-5, 2) == -1\nassert     add(-3, 5) == -8\nassert     add(5, -2) == -7\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add(1, 1) == 2\nassert     add(10, 10) == 20\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add(3, 4) == 7\nassert     add(2, 5) == 7\nassert     add(-1, -2) == -3\nassert     add(-5, -4) == -9\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add(1, 2)    == 3, \"Addition of 1 and 2 not equal to 3\"\nassert     add(100, 200)    == 300, \"Addition of 100 and 200 not equal to 300\"\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add(2, 4) == 6\nassert     add(5, 5) == 10\nassert     add(4, 4) == 8\nassert     add(-2, -2) == -4\nassert     add(-3, -3) == -6\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     same_chars(\"abc\", \"bcd\")\nassert     same_chars(\"abc\", \"dcd\")\nassert     same_chars(\"abc\", \"dcf\")\nassert     same_chars(\"abc\", \"dca\")\nassert     same_chars(\"abc\", \"bcd\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     same_chars(\"\", \"\") == True\nassert     same_chars(\"\", \"a\") == False\nassert     same_chars(\"a\", \"\") == False\nassert     same_chars(\"\", \"a\") == False\nassert     same_chars(\"abcdef\", \"a\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     same_chars(\"hello\", \"world\")\nassert     same_chars(\"hello\", \"hello\")\nassert     same_chars(\"hello\", \"helo\")\nassert     same_chars(\"hello\", \"lhello\")\nassert     same_chars(\"hello\", \"hello\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     same_chars('apple', 'peach')\nassert     not same_chars('app', 'peach')\nassert     not same_chars('peach', 'app')\nassert     not same_chars('peach', 'appl')\nassert     same_chars('apple', 'peach')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     same_chars(\"\", \"\") == True, \"same_chars(\\\"\\\", \\\"\\\")\"\nassert     same_chars(\"A\", \"A\") == True, \"same_chars(\\\"A\\\", \\\"A\\\")\"\nassert     same_chars(\"AB\", \"AA\") == True, \"same_chars(\\\"AB\\\", \\\"AA\\\")\"\nassert     same_chars(\"ABC\", \"ABC\") == True, \"same_chars(\\\"ABC\\\", \\\"ABC\\\")\"\nassert     same_chars(\"ABC\", \"ABD\") == False, \"same_chars(\\\"ABC\\\", \\\"ABD\\\")\"\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     same_chars(\"hello\", \"hello\") == True\nassert     same_chars(\"hello\", \"helo\") == False\nassert     same_chars(\"hello\", \"hell\") == False\nassert     same_chars(\"hello\", \"lo\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     same_chars('hello', 'hello') == True, \"Test 1\"\nassert     same_chars('hello', 'eho') == False, \"Test 2\"\nassert     same_chars('hello', 'helo') == False, \"Test 3\"\nassert     same_chars('hello', 'hell') == True, \"Test 4\"\nassert     same_chars('hello', 'ell') == True, \"Test 5\"\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     same_chars(\"hehhe\", \"hehhe\")\nassert     same_chars(\"hehhe\", \"hehhee\")\nassert     not same_chars(\"hehhe\", \"heehe\")\nassert     not same_chars(\"hehe\", \"hehee\")\nassert     same_chars(\"hehhe\", \"hehee\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     same_chars('foo', 'bar')\nassert     same_chars('foo', 'foo')\nassert     not same_chars('foo', 'foobar')\nassert     not same_chars('foo', 'foobaz')\nassert     not same_chars('bar', 'foobar')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     same_chars('abc', 'abc')\nassert     not same_chars('abc', 'bcd')\nassert     same_chars('abc', 'bcd')\nassert     same_chars('abcd', 'bcd')\nassert     not same_chars('a', 'b')\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\n\n\n\n\n\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print(fib(3))\n    print(fib(10))"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         fib(4) == 3\nassert         fib(9) == 34\nassert         fib(1) == 1\nassert         fib(11) == 55\nassert         fib(0) == 0\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (fib(3) == 2)\nassert     (fib(4) == 3)\nassert     (fib(5) == 5)\nassert     (fib(6) == 8)\nassert     (fib(7) == 13)\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<><\")\nassert not correct_bracketing(\"<>\")\nassert not correct_bracketing(\"<><<><\")\nassert correct_bracketing(\"<><\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<()><\") == True\nassert     correct_bracketing(\"<()><<>\") == False\nassert     correct_bracketing(\"<(><\") == False\nassert     correct_bracketing(\">\") == False\n\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<random_string><![CDATA[]]>\") == True\nassert     correct_bracketing(\"<random_string><![CDATA[<s1>]]>\") == False\nassert     correct_bracketing(\"<random_string><![CDATA[<random_string>]]>\") == False\nassert     correct_bracketing(\"<random_string><![CDATA[<random_string><s2>]]>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<(>)\") == True\nassert     correct_bracketing(\"<<>>\") == True\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<(>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\">\")\nassert     correct_bracketing(\">>\")\nassert     correct_bracketing(\"<\")\nassert     correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<><\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<><\") == True\nassert     correct_bracketing(\"<><>\") == True\nassert     correct_bracketing(\"<<>>\") == True\nassert     correct_bracketing(\"<><<>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing('<>')\nassert not correct_bracketing('<<>')\nassert correct_bracketing('<><')\nassert correct_bracketing('<><>')\nassert correct_bracketing
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing( '<>' ) == True\nassert     correct_bracketing( '<><' ) == True\nassert     correct_bracketing( '<><' ) == False\nassert     correct_bracketing( '<><><' ) == False\nassert     correct_bracketing( '><>' ) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<><\") == True\nassert     correct_bracketing
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1]) == True\nassert     monotonic([1, 2]) == False\nassert     monotonic([1, 2, 3]) == False\nassert     monotonic([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1]) == True\nassert     monotonic([1, 2]) == True\nassert     monotonic([1, 2, 3]) == True\nassert     monotonic([1, 2, 3, 2]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     monotonic([1,2,3,4,5,6])\nassert not monotonic([1,2,3,4,5,7])\nassert not monotonic([1,2,3,4,5,6,7])\n\ndef is_palindrome(n):\n    \"\"\"Return True if n is a palindrome, False otherwise.\n\n    A palindrome is a number or a string that reads the same backwards as forwards.\n    Do not use the built-in str or reversed methods.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     monotonic( [1, 2, 3, 4, 5] ) == True\nassert     monotonic( [1, 2, 3, 4, 5, 6] ) == False\nassert     monotonic( [5, 4, 3, 2, 1] ) == True\nassert     monotonic( [5, 4, 3, 2, 1, 6] ) == False\nassert     monotonic( [1, 2, 3, 4, 3] ) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     monotonic([-1,0,1]) == True\nassert     monotonic([-1,-1,0]) == False\nassert     monotonic([0,1,0]) == False\nassert     monotonic([0,1,1]) == True\nassert     monotonic([0,1,2]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     monotonic([1, 2, 3, 4, 5]) == True\nassert     monotonic([1, 2, 3, 5, 4]) == False\nassert     monotonic([1, 2, 3, 5, 4]) == True\n\ndef symmetric(l: list):\n    \"\"\"Check if a list is symmetric.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     monotonic([1, 2, 3])\nassert     monotonic([1, 1, 2, 3])\nassert     not monotonic([3, 2, 1])\nassert     not monotonic([1, 2, 2, 1])\nassert     monotonic([1, 1, 2, 2, 1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     monotonic([1, 2, 2, 3]) == True\nassert     monotonic([3, 2, 1]) == False\nassert     monotonic([1, 2, 2, 3, 3]) == False\nassert     monotonic([3, 2, 1, 3]) == True\nassert     monotonic([3, 2, 1, 2]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     monotonic([1, 1, 1, 1, 1]) is True\nassert     monotonic([1, 2, 2, 1, 1]) is True\nassert     monotonic([1, 1, 1, 2]) is False\nassert     monotonic([1, 1, 1, 0]) is False\nassert     monotonic([1, 2, 3, 1, 1]) is False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     monotonic([1, 2, 3]) == True\nassert     monotonic([1, 2, 3, 4]) == True\nassert     monotonic([1, 3, 2]) == False\nassert     monotonic([1, 3, 4, 5]) == True\nassert     monotonic([1, 3, 4, 2]) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common(['a', 'b', 'c'], ['a', 'c', 'b']) == ['a', 'b']\nassert     common(['a', 'b', 'c'], ['a', 'c', 'b', 'd']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'], ['a', 'c', 'b', 'd', 'e']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'], ['b', 'a', 'c', 'd']) == ['a', 'b']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"e\"])    ==    [\"a\", \"b\"]\nassert     common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"d\"])    ==    []\nassert     common([\"a\", \"a\", \"b\"], [\"a\", \"b\", \"a\"])    ==    [\"a\", \"a\"]"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     common([1, 2, 3, 4, 5], [1, 4, 5, 6, 7]) == [1, 4, 5]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], []) == []\nassert     common([], [1, 2, 3, 4, 5]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common(list('abc'), list('axc')) == [], 'First'\nassert     common(list('abc'), list('abc')) == [], 'Second'\nassert     common(list('abc'), list('def')) == [], 'Third'\nassert     common(list('abc'), list('abd')) == [], 'Fourth'\nassert     common(list('abc'), list('xyz')) == [], 'Fifth'\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], [2, 3, 4]) == [2]\nassert     common([1, 2, 3, 4], [1, 2, 3, 4, 5]) == [1, 2, 3, 4]\nassert     common([], []) == []\nassert     common([1, 2, 3], []) == [1, 2, 3]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common(['a','b','c','d','e'],['f','g','h']) == ['a','b','c','d','e','f','g','h']\nassert     common(['a','b','c','d','e','f'],['g','h']) == ['a','b','c','d','e','f','g','h']\nassert     common(['a','b','c','d','e','f'],['a','b','c','d','e','f']) == ['a','b','c','d','e','f']\nassert     common(['a','b','c','d','e','f'],['a','b','c','d','e','f','g','h']) == ['a','b','c','d','e','f']\nassert     common(['a','b','c','d','e','f','g','h'],['a','b','c','d','e','f']) == ['a','b','c','d','e','f']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     common(['a', 'b', 'c', 'd'], ['c', 'd', 'e', 'f']) == ['c', 'd']\nassert common(['a', 'b', 'c', 'd'], ['c', 'd', 'e']) == ['c', 'd']\nassert common(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c']\nassert common(['a', 'b', 'c', 'd'], ['c', 'd', 'e', 'f']) == ['c', 'd']\nassert common(['a', 'b', 'c'], ['c', 'd', 'e', 'f']) == ['c', 'd']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     common([], [])    == []\nassert     common([1], [])     == []\nassert     common([1,2], [1,2])    == [1, 2]\nassert     common([1,2], [2,3])    == [1, 2]\nassert     common([1,2,3], [1,2])    == [1, 2]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common(['x', 'y', 'z'], ['x', 'y', 'z', 'a']) == ['x', 'y', 'z']\nassert     common(['x', 'y', 'z', 'a'], ['x', 'y', 'z']) == ['x', 'y', 'z']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (common([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"e\"]) == [\"a\", \"b\", \"c\"])\nassert     (common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\"])\nassert     (common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\"])\nassert     (common([\"a\", \"a\", \"a\", \"b\", \"c\"], [\"a\", \"a\", \"b\"]) == [\"a\", \"a\", \"b\", \"c\"])\n\n\ndef reduce(lst: list, fn: callable):\n    \"\"\"Return a new list whose elements are the reduction of lst using fn.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(1) == None\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(7) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     14    ==    largest_prime_factor(16)\nassert     15    ==    largest_prime_factor(15)\nassert     17    ==    largest_prime_factor(17)\nassert     29    ==    largest_prime_factor(29)\nassert    5    ==    largest_prime_factor(5)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(27) == 3\nassert     largest_prime_factor(29) == 5\nassert     largest_prime_factor(30) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     3 == largest_prime_factor(9)\nassert     3 == largest_prime_factor(18)\nassert     3 == largest_prime_factor(21)\nassert     3 == largest_prime_factor(24)\nassert     2 == largest_prime_factor(2)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(13195) == 5\nassert     largest_prime_factor(101) == 101\nassert     largest_prime_factor(2345) == 3\nassert     largest_prime_factor(1245) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(24) == 3\nassert     largest_prime_factor(16) == 2\nassert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(100) == 5\nassert     largest_prime_factor(11) == 11\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef sum_divisors(n: int):\n    \"\"\"Return the sum of the divisors of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(19) == 3\nassert     largest_prime_factor(20) == 2\nassert     largest_prime_factor(21) == 3\nassert     largest_prime_factor(22) == 2\nassert     largest_prime_factor(23) == 3\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_to_n(5) == 15\nassert     sum_to_n(2) == 3\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_to_n(10)     == 55\nassert     sum_to_n(5)     == 30\nassert     sum_to_n(2)     == 3\nassert     sum_to_n(3)     == 6\nassert     sum_to_n(1)     == 1\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 14\nassert     sum_to_n(5) == 22\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(10) == 55\nassert     sum_to_n(100) == 5050\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 50\nassert     sum_to_n(0) == 0\nassert     sum_to_n(1) == 1\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(()))\") == True\nassert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"(()(()(()))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"(()\") == True\nassert     correct_bracketing(\")()\") == False\nassert     correct_bracketing(\"(())((()\") == True\nassert     correct_bracketing(\"()()(()())\") == True\nassert     correct_bracketing(\"(()())(()()())\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         correct_bracketing('()') == True\nassert         correct_bracketing('(())') == True\nassert         correct_bracketing('((()))') == True\nassert         correct_bracketing('((())') == False\nassert         correct_bracketing('(()())') == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\")(()))\") == True\nassert     correct_bracketing(\"(())(())\") == True\nassert     correct_bracketing(\"())()\") == True\nassert     correct_bracketing(\"()\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"())\") == False\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(()(()))\") == True\nassert     correct_bracketing(\"()\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing('(((())))') == True\nassert     correct_bracketing('()') == True\nassert     correct_bracketing('())') == False\nassert     correct_bracketing('()()') == True\nassert     correct_bracketing('(((())))') == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\")\") is True\nassert     correct_bracketing(\"(())\") is True\nassert     correct_bracketing(\"((()\") is False\nassert     correct_bracketing(\"(()(\") is False\nassert     correct_bracketing(\"(()((\") is False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"(()(())\") == True\nassert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"(())((\") == False\nassert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"(()(\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"((())\") == False\nassert     correct_bracketing(\"((()\")) == False\nassert     correct_bracketing(\"(())(()\") == False\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n\ndef sum(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return sum of this polynomial in the same form.\n    \"\"\"\n    pass\n\ndef print_polynomial(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Print this polynomial in the same form.\n    \"\"\"\n    pass\n\ndef check_polynomial(f):\n    \"\"\" f is a list of coefficients of a polynomial, [a0, a1, a2,...., an], a0 is the constant term.\n    check that f is a polynomial with correct format, return True if correct, False if not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef eval(xs: list, x: float):\n    \"\"\" xs represent coefficients of a polynomial.\n     xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return the value of this polynomial at x.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef run():\n    # import plot library\n    import matplotlib.pyplot as plt\n\n    # get 2 points of a plane\n    x0 = np.linspace(-1, 1, 2)\n    y0 = x0\n    x = np.linspace(x0[0], x0[1], 100)\n    y = []\n\n    for i in x:\n        y.append(eval_polynomial(x0, i))\n\n    plt.plot(x0, y0, 'b', x, y, 'g')\n    plt.show()\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     derivative([1, 2, 3]) == 3\nassert     derivative([1, 2, 3, 0]) == 2\nassert     derivative([1, 0]) == 1\nassert     derivative([]) == 0\n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     derivative([0]) == 0\nassert     derivative([1, 2]) == 2\nassert     derivative([1, 2, 3, 4]) == 6\nassert     derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     derivative([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    print(derivative([1, 2, 3]))\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\nassert     fibfib(5) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     vowels_count('w') == 0\nassert     vowels_count('h') == 0\nassert     vowels_count('hint') == 3\nassert     vowels_count('hinty') == 2\nassert     vowels_count('hintin') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     vowels_count('Hello') == 0\nassert     vowels_count('abc') == 0\nassert     vowels_count('abcdef') == 0\nassert     vowels_count('aeiou') == 5\nassert     vowels_count('qwertyuiop') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     vowels_count('success') == 4\nassert     vowels_count('hello') == 5\nassert     vowels_count('quiet') == 1\nassert     vowels_count('single') == 0\nassert     vowels_count('beautiful') == 5\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     vowels_count(\"this is a test\") == 6\nassert     vowels_count(\"He is a good boy\") == 10\nassert     vowels_count(\"\") == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     vowels_count('a') == 1\nassert     vowels_count('b') == 0\nassert     vowels_count('cat') == 2\nassert     vowels_count('dog') == 0\nassert     vowels_count('apple') == 3\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     vowels_count('hello') == 5\nassert     vowels_count('a') == 1\nassert     vowels_count('newton') == 4\nassert     vowels_count('asdf') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     vowels_count('a') == 1\nassert     vowels_count('e') == 1\nassert     vowels_count('i') == 1\nassert     vowels_count('o') == 1\nassert     vowels_count('u') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert izip(\"abc\", vowels_count(\"abc\")) == [(1, 'a'), (1, 'b'), (1, 'c')]\nassert izip(\"hello\", vowels_count(\"hello\")) == [(2, 'h'), (1, 'e'), (2, 'l'), (1, 'l'), (1, 'o')]\nassert izip(\"\", vowels_count(\"\")) == []\nassert izip(\"h\", vowels_count(\"h\")) == [(1, 'h')]\nassert izip(\"aba\", vowels_count(\"aba\")) == [(1, 'a'), (1, 'b'), (1, 'a')]\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     vowels_count('heilike') == 2\nassert     vowels_count('quill') == 1\nassert     vowels_count('droll') == 1\nassert     vowels_count('quiet') == 1\nassert     vowels_count('well') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     vowels_count('ice') == 0\nassert     vowels_count('hoop') == 1\nassert     vowels_count('a') == 1\nassert     vowels_count('abracadabra') == 5\nassert     vowels_count('a') == 1\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (circular_shift(10, 1) == 10)\nassert     (circular_shift(10, 2) == '0')\nassert     (circular_shift(10, 10) == '0')\nassert     (circular_shift(10, 17) == '1')\nassert     (circular_shift(10, -1) == '1')\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     circular_shift(1534236469, 2) == \"38934\"\nassert     circular_shift(96435, 3) == \"9634\"\nassert     circular_shift(396435, -2) == \"3964\"\n\ndef compute_min_cost(costs):\n    \"\"\"Compute the minimum cost to reach any house by going through the houses\n    in the list costs.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     circular_shift(123, 0) == 123\nassert     circular_shift(123, 1) == 123\nassert     circular_shift(123, 2) == 123\nassert     circular_shift(123, 3) == 123\nassert     circular_shift(123, 4) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef test_circular_shift():\n    assert circular_shift(101, 1) == '101'\n    assert circular_shift(101, 2) == '202'\n    assert circular_shift(101, 3) == '303'\n    "
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circular_shift(12345,1) == '234'\nassert     circular_shift(12345,2) == '345'\nassert     circular_shift(12345,3) == '567'\nassert     circular_shift(12345,4) == '789'\nassert     circular_shift(12345,5) == '123'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     circular_shift(345, 1) == 345\nassert     circular_shift(345, 2) == 345\nassert     circular_shift(345, 3) == 345\nassert     circular_shift(345, 4) == 345\nassert     circular_shift(345, 5) == 345\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     circular_shift(123456789, 3) == '89112345'\nassert     circular_shift(123456789, 0) == '123456789'\nassert     circular_shift(123456789, 22) == '89112345'\nassert     circular_shift(123456789, 1) == '12345678'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     circular_shift(123, 1) == 132\nassert     circular_shift(123, 2) == 213\nassert     circular_shift(123, 3) == 312\nassert     circular_shift(123, 4) == 123\nassert     circular_shift(123, 5) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circular_shift(12345, 2) == 345\nassert     circular_shift(12345, 3) == 123\nassert     circular_shift(12345, 6) == 5\nassert     circular_shift(12345, 7) == 123\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digitSum(\"hello\") == 5\nassert     digitSum(\"How are you?\") == 19\nassert     digitSum(\"I am good!\") == 11\nassert     digitSum(\"\") == 0\nassert     digitSum(\"65\") == 65\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digitSum(\"Hello world\") == 19\nassert     digitSum(\"Hello\") == 7\nassert     digitSum(\"\") == 0\nassert     digitSum(\"This is a pen\") == 19\nassert     digitSum(\"abc\") == 12\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digitSum('p') == 7\nassert     digitSum('z') == 25\nassert     digitSum('apples') == 57\nassert     digitSum('a') == 97\nassert     digitSum('zebra') == 112\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digitSum(\"\") == 0\nassert     digitSum(\"abc\") == 3\nassert     digitSum(\"ABC\") == 3\nassert     digitSum(\"aBc\") == 3\nassert     digitSum(\"1.2.3\") == 6\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digitSum('Welcome') == 2\nassert     digitSum('Hello') == 5\nassert     digitSum('A') == 1\nassert     digitSum('AAbbBB') == 7\nassert     digitSum('AAbbBBB') == 10\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digitSum(\"Hello\") == 4\nassert     digitSum(\"1234\") == 10\nassert     digitSum(\"AaBbCc\") == 26\nassert     digitSum(\"H4D0I3D45X5\") == 29"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digitSum(\"Hello World\")     == 89\nassert     digitSum(\"Giraffe\")         == 103\nassert     digitSum(\"X-men\")         == 79\nassert     digitSum(\"Smokey\")         == 89\nassert     digitSum(\"\")             == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digitSum('a') == 1\nassert     digitSum('ab') == 2\nassert     digitSum('abc') == 3\nassert     digitSum('A') == 65\nassert     digitSum('123456789') == 45\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digitSum(\"hello\") == 5\nassert     digitSum(\"hello. my name is abcde\") == 10\nassert     digitSum(\"\") == 0\nassert     digitSum(\"hlll\") == 0\nassert     digitSum(\"hello \") == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fruit_distribution('1,0,0',3) == 0\nassert     fruit_distribution('2,0,0,1',3) == 1\nassert     fruit_distribution('2,0,0,0',3) == 2\nassert     fruit_distribution('2,0,0',2) == 0\nassert     fruit_distribution('2,2,0',2) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         fruit_distribution(\"1 2 3 4\", 4) == 0\nassert         fruit_distribution(\"1 2 3 4\", 5) == 0\nassert         fruit_distribution(\"5 6 7 8\", 4) == 1\nassert         fruit_distribution(\"5 6 7 8\", 5) == 0\nassert         fruit_distribution(\"10 11 12 13\", 3) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         fruit_distribution(\"apples,1\", \"apples,1\")    == 2\nassert         fruit_distribution(\"apples,1\", \"apples,2\")    == 0\nassert         fruit_distribution(\"oranges,1\", \"oranges,1\")    == 2\nassert         fruit_distribution(\"oranges,1\", \"oranges,2\")    == 0\nassert         fruit_distribution(\"mango,1\", \"mango,1\")    == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fruit_distribution(\"3,2\",2) == 1\nassert     fruit_distribution(\"2,3,4,5\",4) == 2\nassert     fruit_distribution(\"1,1,1,1,1,1,1\",3) == 1\nassert     fruit_distribution(\"1,2,3,4,5,6,7,8,9\",4) == 2\nassert     fruit_distribution(\"2,2\",2) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fruit_distribution('basket', 3) == 1\nassert     fruit_distribution('basket', 2) == 0\nassert     fruit_distribution('basket', 1) == 0\nassert     fruit_distribution('basket', 0) == 0\nassert     fruit_distribution('basket', 5) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fruit_distribution(\"10,2\", \"3,4\") == 2\nassert     fruit_distribution(\"5,2\", \"5,5\") == 0\nassert     fruit_distribution(\"1,2\", \"3,4\") == 0\nassert     fruit_distribution(\"3,4\", \"10,2\") == 2\nassert     fruit_distribution(\"1,2\", \"10,2\") == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fruit_distribution('apples,oranges,mango',4) == 2\nassert     fruit_distribution('apples,oranges,mango',10) == 3\nassert     fruit_distribution('apples,oranges,mango',25) == 1\nassert     fruit_distribution('apples,oranges,mango',0) == 0\nassert     fruit_distribution('apples,oranges,mango',34) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fruit_distribution('oranges,apples,mango',10) == 4\nassert     fruit_distribution('oranges,apples,mango',0) == 0\nassert     fruit_distribution('oranges,apples,mango',12) == 1\nassert     fruit_distribution('oranges,apples,mango',20) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fruit_distribution('2 3 1',5)==1\nassert     fruit_distribution('1 1 2',5)==2\nassert     fruit_distribution('2 2 1',5)==0\nassert     fruit_distribution('2 1 1',5)==2\nassert     fruit_distribution('1 2 1',5)==2\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [ 0, 0 ] == pluck([ 0, 1, 2, 3, 4, 5 ])\nassert     [ 0, 0 ] == pluck([ 2, 3, 4, 5, 6, 7 ])\nassert     [ 0, 0 ] == pluck([ 2, 3, 4, 5, 6, 7, 8 ])\nassert     [ 4, 3 ] == pluck([ 1, 2, 3, 4, 5, 6, 7 ])\nassert     [ 4, 3 ] == pluck([ 1, 2, 3, 4, 5, 6, 7, 8 ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pluck([1,2,3,4,5]) == [1,1]\nassert     pluck([1,2,3,4,5,6]) == [1,1]\nassert     pluck([1,3,3]) == [1,1]\nassert     pluck([1,2,2,3]) == [1,2]\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [ 2, 0 ] == pluck([ 1, 1, 3, 2, 4 ])\nassert     [ 2, 0 ] == pluck([ 1, 1, 3, 2, 4, 7, 8 ])\nassert     [ 6, 2 ] == pluck([ 4, 1, 1, 3, 2 ])\nassert     [ 1, 0 ] == pluck([ 1, 1, 3, 2 ])\nassert     [ ] == pluck([ ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pluck([1, 2, 3, 4, 5]) == [4, 2]\nassert     pluck([1, 2, 3, 4, 5, 6]) == [6, 4]\nassert     pluck([1, 2, 3, 4, 5, 6, 7]) == [6, 4]\nassert     pluck([]) == []\nassert     pluck([1]) == [1, 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     pluck([ 2, 4, 2, 1, 3, 5, 5, 1, 4, 6 ]) == [ 1, 6 ]\nassert     pluck([ 2, 4, 2, 1, 3, 5, 5, 1, 4, 7 ]) == [ 1, 7 ]\nassert     pluck([ 2, 4, 2, 1, 3, 5, 5, 1, 4, 8 ]) == [ 1, 8 ]\nassert     pluck([ 2, 4, 2, 1, 3, 5, 5, 1, 4, 9 ]) == [ 1, 9 ]\nassert     pluck([ 2, 4, 2, 1, 3, 5, 5, 1, 4, 10 ]) == [ 1, 10 ]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pluck([1,2,3,4]) == [2,2]\nassert     pluck([1,2,3,4,5]) == [2,2]\nassert     pluck([3,2,1]) == [2,0]\nassert     pluck([]) == []\n\n\ndef has_even_number(arr):\n    \"\"\"\n    Given an array of integers, check if there exists a pair of elements whose sum is divisible by 4.\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pluck([1,2,3,4,5,6,7,8,9]) == [4, 5],'sample'\nassert     pluck([1,2,3,4,5,6,7,8,9,10]) == [6, 9], 'one even node'\nassert     pluck([1,2,3,4,5,6,7,8,9,10]) == [], 'empty array'\nassert     pluck([10]) == [], 'empty array'\nassert     pluck([10, 11, 12]) == [10], 'only one even node'\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pluck([ 1, 3, 4, 6, 7, 8, 9, 11, 12, 15, 17, 18, 19 ]) == [ 6, 5 ]\nassert     pluck([ 1, 3, 4, 6, 7, 8, 9, 11, 12, 15, 17, 18, 19 ]) == [ 17, 6 ]\nassert     pluck([ 2, 3, 4, 6, 7, 8, 9, 11, 12, 15, 17, 18, 19 ]) == [ 9, 8 ]\nassert     pluck([ ]) == []\nassert     pluck([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 ]) == [ 18, 16 ]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [ 1, 0 ]     == pluck([ 2, 3, 3, 4 ])\nassert     [ 2, 1 ]     == pluck([ 1, 2, 3, 4 ])\nassert     [ 1, 2 ]     == pluck([ 2, 1, 3, 4 ])\nassert     [ 2, 0 ]     == pluck([ 2, 3, 2, 4 ])\nassert     [ 0 ]     == pluck([ ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pluck([ 5, 6, 7, 8 ])    == [ 5, 6, 8 ]\nassert     pluck([ 5, 6, 7, 8, 9 ])    == [ 5, 8, 9 ]\nassert     pluck([ 5, 6, 7, 8, 9, 10 ])    == [ 5, 9, 10 ]\nassert     pluck([ 5, 6, 7, 8, 9, 10, 11 ])    == [ 5, 8, 11 ]\nassert     pluck([ 5, 6, 7, 8, 9, 10, 11, 12 ])    == [ 5, 8, 12 ]\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([1,1,1,2,2,3,3]) == 2\nassert     search([1,1,1,2,2,3,3,3,3]) == 3\nassert     search([1,1,1,2,2,3,3,3,3,3,3,3]) == 3\nassert     search([1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3]) == 3\nassert     search([1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]) == 3\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([1, 1, 1, 2, 3, 4, 5, 1]) == -1, \"Case 1: 1,1,1,2,3,4,5,1\"\nassert search([1, 1, 1, 2, 2, 3, 4, 5, 1]) == 3, \"Case 2: 1,1,1,2,2,3,4,5,1\"\nassert     search([2, 3, 4, 5, 1, 2, 3, 1, 1, 4, 2]) == 4, \"Case 3: 2,3,4,5,1,2,3,1,1,4,2\"\nassert     search([2, 2, 2, 2, 2, 3, 4, 5, 1]) == -1, \"Case 4: 2,2,2,2,2,3,4,5,1\"\nassert     search([]) == -1, \"Case 5: []\"\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef search_pivot(lst):\n    '''\n    Given a list of integers, write a function that returns the index of the pivot element \n    in the list.\n    If the list is empty, return None.\n    '''\n    pass\n\ndef search_pivot(lst):\n    '''\n    Given a list of integers, write a function that returns the index of the pivot element \n    in the list.\n    If the list is empty, return None.\n    '''\n    pass\n\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     search([1,2,2,3,3,3,3,4,5]) == 3\nassert     search([1,1,1,1,1]) == 1\nassert     search([]) == -1\nassert     search([-1,-1,2,3,4,5]) == -1\nassert     search([0,0,0,0]) == 0\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert         search([1,2,3,4,5]) == 4\nassert         search([1,2,3,4,4,5,5]) == 4\nassert         search([5,1,1,1,2,3,3,2,1]) == 3\nassert         search([3,1,1,1,2,2,3]) == -1\nassert         search([2,2,2,2,2]) == -"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     search([-1, 2, 2, 3, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9]) == 9\nassert     search([1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 6]) == 6\nassert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     search([]) == -1\nassert     search([1]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     search([4,3,2,7,8,2,3,1]) == 2\nassert     search([1,2,2,3,3,3]) == 3\nassert     search([1]) == -1\nassert     search([1,1,1,1,1,1]) == 1\nassert     search([1,2,3,4,5]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     search([1, 2, 3, 2, 1]) == 3\nassert     search([1, 2, 3, 3]) == -1\nassert     search([-1, -1, -1, -1]) == -1\nassert     search([1, 2, 3, 4, 5, 3, 2, 1, 2, 3, 4, 5]) == 5\nassert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\nlst1 = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [4, 3, 2, 1] == strange_sort_list([3, 2, 1, 4])\nassert     [8, 9, 7, 6, 5, 4, 3, 2, 1] == strange_sort_list([9, 7, 5, 4, 8, 2, 1, 3, 6])\n\ndef strange_sort_dict(dct):\n    '''\n    Given dictionary, return the same dictionary in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     strange_sort_list([5,3,1,4,2]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([1,3,5,7,9,11,13,15,17]) == [1, 3, 5, 7, 9, 11, 13, 15, 17]\nassert     strange_sort_list([3,1,4,2]) == [1, 2, 3, 4]\nassert     strange_sort_list([1,4,3,2]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3] == strange_sort_list([3, 2, 1])\nassert     [-1, -2, -3] == strange_sort_list([-3, -2, -1])\nassert     [-1, -2, -3, 1] == strange_sort_list([1, -3, -2, -1])\nassert     [-1, -2, -3, 1, 2] == strange_sort_list([1, 2, -3, -1])\nassert     [-1, -2, -3, 1, 2, 3] == strange_sort_list([1, 2, 3, -1, -2])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strange_sort_list([1, 3, 5, 2, 4, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     strange_sort_list([1, 3, 5, 2, 4, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     strange_sort_list([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     strange_sort_list([1, 3, 5, 2, 4, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strange_sort_list([\"zebra\", \"apple\", \"cat\", \"dog\", \"ant\", \"elephant\", \"chicken\"]) == [ \"ant\", \"ant\", \"apple\", \"chicken\", \"elephant\", \"cat\", \"dog\", \"zebra\" ]\nassert     strange_sort_list([\"elg\", \"e\", \"e\", \"ro\", \"n\", \"g\", \"u\", \"e\"]) == [ \"g\", \"e\", \"e\", \"e\", \"elg\", \"ro\", \"n\", \"u\" ]\nassert     strange_sort_list([\"sam\", \"sam\", \"sam\", \"sam\", \"w\"]) == [ \"w\", \"sam\", \"sam\", \"sam\", \"sam\" ]\nassert     strange_sort_list([\"s\", \"r\", \"p\", \"p\", \"l\", \"e\", \"m\", \"o\", \"n\", \"d\", \"s\"]) == [ \"o\", \"e\", \"d\", \"s\", \"m\", \"p\", \"n\", \"r\", \"l\", \"p\", \"s\", \"s\" ]\nassert     strange_sort_list([\"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\"]) == [ \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\" ]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([2, 1, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert     strange_sort_list([4, 2, 3, 1, 5]) == [5, 4, 3, 1, 2]\nassert     strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     strange_sort_list([2, 6, 4, 3, 1, 5]) == [5, 4, 3, 2, 1, 6]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert     strange_sort_list([3, 1, 2, 4, 5]) == [1, 5, 3, 2, 4]\nassert     strange_sort_list([1, 3, 2, 4, 5]) == [1, 5, 2, 4, 3]\nassert     strange_sort_list([2, 1, 3, 4, 5]) == [1, 5, 2, 4, 3]\nassert     strange_sort_list([1, 2, 4, 3, 5]) == [1, 5, 2, 3, 4]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     strange_sort_list([4,3,2,1]) == [1,2,3,4]\nassert     strange_sort_list([1,2,3,4]) == [1,2,3,4]\nassert     strange_sort_list([4,3,2,1]) == [1,2,3,4]\nassert     strange_sort_list([1,2,3,4]) == [1,2,3,4]\nassert     strange_sort_list([4,3,2,1]) == [1,2,3,4]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [5,2,4,1,3] == strange_sort_list(    [3,4,5,1,2])\nassert     [5,2,4,1,3] == strange_sort_list([3,2,1,4,5])\nassert     [5,2,4,1,3] == strange_sort_list([5,2,1,3,4])\nassert     [5,2,4,1,3] == strange_sort_list([5,4,3,2,1])\nassert     [5,2,4,1,3] == strange_sort_list([1,3,2,4,5])\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    if (a >= (b+c)) or (b >= (a+c)) or (c >= (a+b)):\n        return -1\n    # 2. if a <= (b+c):\n    # 3. if b <= (a+c):\n    # 4. if c <= (a+b):\n    \n    # 5. return the area of a triangle rounded to 2 decimal points\n    # 6. return -1\n    \n    # 7. return the area of a triangle rounded to 2 decimal points\n    return round(0.5*a*b, 2)\n    # 8. return -1\n    \nassert(triangle_area(4, 2, 6) == 10.6)\nassert(triangle_area(4, 2, 5) == -1)\nassert(triangle_area(4, 6, 5) == -1)\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triangle_area(3, 4, 5) == 10.0\nassert     triangle_area(3, 4, 7) == -1\nassert     triangle_area(7, 3, 4) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(5, 4, 6) == 3.92\nassert     triangle_area(4, 2, 6) == 2.66\nassert     triangle_area(5, 7, 8) == -1\nassert     triangle_area(1, 2, 3) == 0.5\nassert     triangle_area(5, 7, 9) == -1"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(5, 3, 4) == 'Invalid Triangle'\nassert     triangle_area(5, 3, 6) == 'Invalid Triangle'\nassert     triangle_area(5, 3, 3) == 'Invalid Triangle'\nassert     triangle_area(3, 2, 4) == 1.5\nassert     triangle_area(5, 3, 5) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(1, 2, 2) == 0.25\nassert     triangle_area(1, 3, 4) == 0.5\nassert     triangle_area(10, 2, 2) == 2.0\nassert     triangle_area(10, 10, 10) == 1.0\nassert     triangle_area(1, 2, 3) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef quadrilateral_area(a, b, c, d):\n    '''\n    Given the lengths of the four sides of a quadrilateral. Return the area \n    of the quadrilateral rounded to 2 decimal points if the four sides form a \n    valid quadrilateral. Otherwise return -1\n    A quadrilateral is a quadrilateral with four equal sides.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triangle_area(3,4,5) == 1.5\nassert     triangle_area(3,4,6) == -1\nassert     triangle_area(3,4,7) == -1\nassert     triangle_area(2,2,5) == 1\nassert     triangle_area(10,10,10) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(3,4,5) == 1.73\nassert     triangle_area(5,3,4) == 1.73\nassert     triangle_area(1,1,2) == 0.25\nassert     triangle_area(1,2,2) == 0\nassert     triangle_area(1,2,1) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triangle_area(2, 4, 6) == 4.0, \"2, 4, 6 is a valid triangle\"\nassert     triangle_area(0, 0, 3) == -1.0, \"0, 0, 3 is not a valid triangle\"\nassert     triangle_area(4, 8, 6) == 2.0, \"4, 8, 6 is a valid triangle\"\nassert     triangle_area(3, 2, 3) == 1.5, \"3, 2, 3 is a valid triangle\"\nassert     triangle_area(6, 2, 3) == 3.0, \"6, 2, 3 is a valid triangle\"\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(5, 4, 2) == -1\nassert     triangle_area(3, 4, 5) == 0.5\nassert     triangle_area(4, 5, 6) == 0.5\nassert     triangle_area(6, 5, 6) == 0\nassert     triangle_area(7, 5, 6) == 0.5\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert _________ == will_it_fly([1, 2, 3, 4, 5], 10)\nassert _________ == will_it_fly([1, 2, 3, 4, 5], 12)\nassert _________ == will_it_fly([1, 2, 3, 4, 5], 13)\nassert _________ == will_it_fly([1, 2, 3, 4, 5], 1000)\nassert _________ == will_it_fly([1, 2, 3, 4, 5], 1000)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     will_it_fly([1,1,1,1],5) == True\nassert     will_it_fly([1,1,1,1],6) == False\nassert     will_it_fly([1,1,1,1,1,1],6) == True\nassert     will_it_fly([1,1,1,1,1],7) == False\n\n\ndef is_superpalindrome(n):\n    '''\n    Write a function that returns True if the integer n is a superpalindrome, and False otherwise.\n    A superpalindrome is a palindrome that can be made by inserting spaces between the characters of the original word, for example, nnnnnn.\n    In other words, you can change the original number into a palindrome, but the original number cannot be changed to a non-palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     will_it_fly([5,6,5],10) == True\nassert     will_it_fly([3,6,5],10) == False\nassert     will_it_fly([1,2,3,4],50) == True\nassert     will_it_fly([1,2,3,4],100) == True\nassert     will_it_fly([1,2,3,4],100) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     will_it_fly([1,2,3,1,2,3],3) == True\nassert     will_it_fly([1,2,3,1,2,3],4) == True\nassert     will_it_fly([1,2,3,1,2,3,1,2,3,1,2,3],5) == False\nassert     will_it_fly([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],9) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     will_it_fly( [1,2,1,3,1,1,1,2,3,3,1], 30 ) == True\nassert     will_it_fly( [1,2,1,3,1,1,1,2,3,3,1], 31 ) == False\nassert     will_it_fly( [1,2,1,3,1,1,1,2,3,3,1], 30 ) == True\nassert     will_it_fly( [1,2,1,3,1,1,1,2,3,3,1], 31 ) == True\nassert     will_it_fly( [1,2,1,3,1,1,1,2,3,3,1], 32 ) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     will_it_fly([1, 2, 3, 2, 1], 3) == True\nassert     will_it_fly([1, 2, 3, 2, 1], 4) == False\nassert     will_it_fly([1, 2, 3, 2, 1], 1) == True\nassert     will_it_fly([1, 2, 3, 2, 1], 2) == True\nassert     will_it_fly([1, 2, 3, 2, 1], 3) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     will_it_fly([1,2,2,1],2) == True\nassert     will_it_fly([1,2,2,1],3) == False\nassert     will_it_fly([1,2,2,1],4) == True\nassert     will_it_fly([1,2,2,1],5) == True\nassert     will_it_fly([1,2,2,1],6) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     will_it_fly(['odd', 'odd', 'no'], 10) == True, 'Failed 1'\nassert     will_it_fly(['yes', 'yes', 'no'], 10) == True, 'Failed 2'\nassert     will_it_fly(['no', 'yes', 'no'], 10) == False, 'Failed 3'\nassert     will_it_fly(['yes', 'yes', 'yes'], 10) == False, 'Failed 4'\nassert     will_it_fly(['yes', 'yes', 'yes', 'yes'], 10) == False, 'Failed 5'\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     will_it_fly(['a','b','c','b','a'],    0) == True,    \"Test 1\"\nassert     will_it_fly(['a','b','c','b','a','a'],    5) == True,    \"Test 2\"\nassert     will_it_fly(['a','b','c','b','a'],    100) == False,    \"Test 3\"\nassert     will_it_fly(['a','b','c','b','a'],    1) == False,    \"Test 4\"\nassert     will_it_fly(['a','a','a','a'],    5) == True,    \"Test 5\"\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_change([1, 2, 1]) == 2\nassert     smallest_change([1, 2, 3]) == 0\nassert     smallest_change([2, 2, 1, 1, 1, 2]) == 3\nassert     smallest_change([1, 3, 1, 3, 1, 3, 1, 3, 1, 3]) == 5\n\n\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_change([3, 4, 4, 5]) == 3\nassert     smallest_change([1, 2, 4, 3]) == 3\nassert     smallest_change([1, 2, 3, 1]) == 0\nassert     smallest_change([1, 2, 3]) == 2\nassert     smallest_change([1, 2, 3, 2]) == 2\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     smallest_change([1, 1, 2, 2, 4, 5]) == 4\nassert     smallest_change([1, 1, 2, 2, 4, 5, 5]) == 2\nassert     smallest_change([1, 1, 2, 2, 3, 4]) == 2\nassert     smallest_change([1, 1, 2, 2, 3, 4, 4, 4]) == 2\nassert     smallest_change([1, 1, 2, 2, 3, 4, 4, 5]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     smallest_change([4, 3, 2, 1, 2, 4, 2, 2, 1]) == 4\nassert     smallest_change([1, 2, 1, 2]) == 2\nassert     smallest_change([1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_change([4,5,6,7]) == 3\nassert     smallest_change([1,1,5,6,7]) == 2\nassert     smallest_change([1,2,1,5,6,7]) == 1\nassert     smallest_change([1,2,3,4,5,6,7]) == 0\n\n\ndef largest_product(arr):\n    \"\"\"\n    Given an array arr of integers, find the largest product that can be formed from the array\n    elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 48"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5, 6, 7]) == 3\nassert smallest_change([1, 3, 5, 7, 9]) == 4\nassert smallest_change([1, 1, 1]) == 0\nassert smallest_change([0, 0]) == 0\nassert smallest_change([4, 4, 4, 4]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_change([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     smallest_change([1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, 2, 1, 3, 5, "
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_change([1,2,3,4,5,6,7,8,9,10,11]) == 3\nassert     smallest_change([1,2,3,4,5]) == 1\nassert     smallest_change([1,1,3,3,3,3,5,5,5,5]) == 0\nassert     smallest_change([3,4,5,6,7,8,9,10,11]) == 1"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef smallest_change_test(arr):\n    \"\"\"\n    Runs the smallest_change test and prints the results.\n    \"\"\"\n    print('\\nCorrectness checks for smallest_change:')\n    smallest_change(arr)\n    print(\"\\n\")\n\nsmallest_change_test(smallest_change_arr)\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     total_match(['l','i','s','m'], ['l','i','d','k']) == ['l','i','s','m']\nassert     total_match(['a','e','c','t','n','g','n','o','r','e'], ['r','d','d','l','n','e','s','r','l','e','e']) == ['a','e','c','t','n','g','n','o','r','e']\nassert     total_match(['l','i','s','m','m','o','r','e'], ['l','i','d','k','n','e','s','r','l','e','e']) == ['l','i','s','m','m','o','r','e']\nassert     total_match(['l','i','s','m','m','o','r','e','e'], ['l','i','d','k','n','e','s','r','l','e','e']) == ['l','i','s','m','m','o','r','e','e']\nassert     total_match(['l','i','s','m','m','o','r','e','e','e'], ['l','i','d','k','n','e','s','r','l','e','e']) == ['l','i','s','m','m','o','r','e','e','e']"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     total_match(['abcd', 'abcd', 'cxyz', 'abcdef'], \n                    ['abcd', 'abcd', 'cxyz', 'abcdef']) == ['abcd', 'abcd', 'abcdef']\nassert     total_match(['abc', 'abc', 'abc', 'abc', 'abc'], \n                    ['abc', 'abc', 'abc', 'abc', 'abc']) == ['abc', 'abc', 'abc', 'abc']\nassert     total_match(['abc', 'abc', 'abc', 'abc', 'abc'], \n                    ['abcd', 'abcd', 'cxyz', 'abcdef']) == ['abcd', 'abcd', 'abcdef']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     total_match(['abc', 'ac', 'd'], ['abc', 'abc', 'abc']) == ['abc', 'ac']\nassert     total_match(['abc', 'ac', 'd'], ['abc', 'abc', 'abc', 'abc']) == ['abc', 'ac']\nassert     total_match(['abc', 'ac', 'd'], ['abc', 'ac', 'abc']) == ['abc', 'ac']\nassert     total_match(['abc', 'ac', 'd'], ['abc', 'ac', 'abc', 'abc', 'abc']) == ['abc', 'ac']\nassert     total_match(['abc', 'ac', 'd'], ['abc', 'ac', 'abc', 'ac', 'ac']) == ['abc', 'ac']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     total_match(['hello', 'hi', 'howdy', 'hey'], ['hello', 'hi', 'howdy', 'hey']) == ['hello']\nassert     total_match(['hello', 'hi', 'howdy', 'hey'], ['hello', 'hi', 'howdy', 'hey', 'hey']) == ['hello', 'hey']\nassert     total_match(['hello', 'hi', 'howdy', 'hey'], ['hello', 'hi', 'howdy', 'hey']) == ['hello']\nassert     total_match(['hello', 'hi', 'howdy', 'hey'], ['hello', 'hi', 'howdy', 'hey', 'hey']) == ['hello', 'hey']\nassert     total_match(['hello', 'hi', 'howdy', 'hey'], ['hello', 'hi', 'howdy', 'hey', 'hey', 'hey']) == ['hello', 'hey']"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     total_match([\"a\", \"b\", \"c\"],     [\"a\", \"b\", \"c\"])     == [\"a\", \"b\", \"c\"]\nassert     total_match([\"a\", \"b\", \"c\"],     [\"a\", \"b\", \"c\", \"d\"])     == [\"a\", \"b\", \"c\"]\nassert     total_match([\"a\", \"b\", \"c\"],     [\"a\", \"b\", \"c\", \"d\"])     == [\"a\", \"b\", \"c\", \"d\"]\n\nprint('all tests passed successfully')"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     total_match(['abc', 'abd', 'a'], ['abc', 'abd', 'a']) == ['abc', 'abd']\nassert     total_match(['abc', 'abd', 'a'], ['a', 'abc', 'abd']) == ['abc', 'abd']\nassert     total_match(['abc', 'abd', 'a'], ['a', 'abc', 'abd', 'b']) == ['abc', 'abd']\nassert     total_match(['abc', 'abd', 'a'], ['a', 'abc', 'abd', 'b', 'cd']) == ['abc', 'abd']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     total_match(['a','b'], ['c','d']) == ['b']\nassert     total_match(['ab','cd'], ['ac','bc']) == ['ab']\nassert     total_match(['abc','abcd','abcde'], ['abc','abcdd','abcdg']) == ['abcd', 'abcdd']\nassert     total_match(['abcd','abcde'], ['abc','abcd','abcde']) == ['abc','abcde']\nassert     total_match(['abcde'], ['abc','abcd','abcde']) == ['abc','abcde']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     total_match(['apple', 'apricot', 'orange', 'banana'], ['apple', 'apricot', 'orange', 'banana']) == ['apple', 'apricot', 'orange']\nassert     total_match(['apple', 'apricot', 'orange', 'banana'], ['apple', 'apricot', 'apple']) == ['apple']\nassert     total_match(['apple', 'apricot', 'orange', 'banana'], ['apple', 'apricot', 'orange', 'banana','mango']) == ['apple', 'apricot', 'orange']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     total_match(['abc', 'efg'], ['ab', 'abc']) == ['abc', 'efg']\nassert     total_match(['abc', 'def'], ['abc', 'efg']) == ['abc']\nassert     total_match(['abc', 'efg'], ['ab', 'abc']) == ['abc', 'efg']\n\ndef break_words(string):\n    '''\n    Write a function that takes in a string of space separated words and breaks it into\n    words with only one character.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     total_match(['aa', 'bb', 'cc', 'dd', 'ee'], ['ff', 'gg', 'hh', 'ii', 'jj']) == ['aa', 'bb', 'cc', 'dd', 'ee']\nassert     total_match(['aa', 'bb', 'cc', 'dd', 'ee'], ['ff', 'gg', 'hh', 'ii', 'jj', 'kk']) == ['aa', 'bb', 'cc', 'dd', 'ee', 'kk']\nassert     total_match(['aa', 'bb', 'cc', 'dd', 'ee'], ['ff', 'gg', 'hh', 'ii', 'jj']) == ['aa', 'bb', 'cc', 'dd', 'ee']\nassert     total_match(['aa', 'bb', 'cc', 'dd', 'ee', 'kk'], ['ff', 'gg', 'hh', 'ii', 'jj']) == ['aa', 'bb', 'cc', 'dd', 'ee', 'kk']\n\ndef longest_common_prefix(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the longest common \n    prefix that is shared by both the strings of the list.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(45) == False\nassert     is_multiply_prime(30) == False\nassert     is_multiply_prime(45 * 3) == True\nassert     is_multiply_prime(20) == False\nassert     is_multiply_prime(30 * 3) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(120) == False\nassert     is_multiply_prime(49) == True\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(29) == True\nassert     is_multiply_prime(15) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(30) == False\nassert     is_multiply_prime(6) == True\nassert     is_multiply_prime(10) == True\nassert     is_multiply_prime(11) == True\nassert     is_multiply_prime(12) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(4) == False\nassert     is_multiply_prime(6) == False\nassert     is_multiply_prime(8) == True\nassert     is_multiply_prime(10) == False\nassert     is_multiply_prime(12) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(39) == False\nassert     is_multiply_prime(8) == True\nassert     is_multiply_prime(40) == False\nassert     is_multiply_prime(13) == True\nassert     is_multiply_prime(7) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(23) == True\nassert     is_multiply_prime(37) == True\nassert     is_multiply_prime(41) == True\nassert     is_multiply_prime(49) == False\nassert     is_multiply_prime(43) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(13) == False\nassert     is_multiply_prime(25) == True\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(1) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(6) == False\nassert     is_multiply_prime(5) == False\nassert     is_multiply_prime(8) == False\nassert     is_multiply_prime(15) == True\nassert     is_multiply_prime(5*3) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(6) == False\nassert     is_multiply_prime(30) == False\nassert     is_multiply_prime(60) == False\nassert     is_multiply_prime(90) == True\nassert     is_multiply_prime(120) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(36) == False\nassert     is_multiply_prime(36) == False\nassert     is_multiply_prime(36) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (is_simple_power(24, 2) == True)\nassert     (is_simple_power(24, 3) == False)\nassert     (is_simple_power(9, 3) == False)\nassert     (is_simple_power(81, 3) == True)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_simple_power(2, 4)\nassert     not is_simple_power(4, 8)\nassert     is_simple_power(0, 2)\nassert     is_simple_power(2, 2)\nassert     is_simple_power(1, 2)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_simple_power(0,2) == False\nassert     is_simple_power(1,2) == True\nassert     is_simple_power(0,3) == False\nassert     is_simple_power(3,3) == True\nassert     is_simple_power(2,2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_simple_power(n, n) == True\nassert     is_simple_power(n, 1) == True\nassert     is_simple_power(n, 10) == False\nassert     is_simple_power(n, n+1) == False\nassert     is_simple_power(n, n**2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_simple_power(n = 2, x = 2 ** 16) == True\nassert     is_simple_power(n = 2, x = 2 ** 17) == False\nassert     is_simple_power(n = 2, x = 2 ** 19) == True\nassert     is_simple_power(n = 3, x = 3 ** 4) == True\nassert     is_simple_power(n = 3, x = 3 ** 5) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_simple_power(0, 3) == True\nassert     is_simple_power(3, 3) == True\nassert     is_simple_power(1, 1) == True\nassert     is_simple_power(5, 2) == False\nassert     is_simple_power(1, 0) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_simple_power(100, 2)     == True\nassert     is_simple_power(10, 10)     == True\nassert     is_simple_power(0, 2)     == False\nassert     is_simple_power(0, 0)     == True\nassert     is_simple_power(10, 4)     == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(2, 5) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_simple_power(8, 2) == True, \"True\"\nassert     is_simple_power(1, 1) == True, \"True\"\nassert     is_simple_power(9, 3) == False, \"False\"\nassert     is_simple_power(1, 1) == True, \"True\"\nassert     is_simple_power(3, 1) == True, \"True\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_simple_power(1, 1)\nassert     is_simple_power(2, 1)\nassert     not is_simple_power(3, 1)\nassert     is_simple_power(3, 2)\nassert     is_simple_power(3, 3)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     iscube(12) == True\nassert     iscube(13) == False\nassert     iscube(15) == True\nassert     iscube(20) == False\n\ndef ismonotonic(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if a number is monotonic.\n    Note: you may assume the input is always valid.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert izcube(3)\nassert iscube(5)\nassert not iscube(6)\nassert not iscube(7)\nassert not iscube(8)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     isCube(2) == True\nassert     isCube(1) == False\nassert     isCube(3) == True\nassert     isCube(12) == True\nassert     isCube(232) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert ictube(1) == True\nassert ictube(12) == True\nassert ictube(123) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert icalc == iscube\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert iceshape(1)\nassert iceshape(3)\nassert iceshape(18)\nassert iceshape(27)\nassert iceshape(36)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert icsube(12)\nassert icsube(6)\nassert not icsube(3)\nassert not icsube(7)\nassert not icsube(4)\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert iz(islcube(29))\nassert not iz(islcube(35))\nassert not iz(islcube(15))\nassert iz(islcube(16))\nassert iz(islcube(123))\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert icshape('3') is True\nassert icshape('4') is False\nassert icshape('15') is True\nassert iscube(3) is True\nassert iscube(4) is False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     iscube(6) == True\nassert     iscube(7) == False\nassert     iscube(8) == True\nassert     iscube(100) == False\nassert     iscube(196) == True\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hex_key(\"AA\") == 0\nassert     hex_key(\"AB\") == 0\nassert     hex_key(\"AD\") == 1\nassert     hex_key(\"AE\") == 0\nassert     hex_key(\"AF\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     hex_key('0a') == 0\nassert     hex_key('1b') == 1\nassert     hex_key('2b') == 2\nassert     hex_key('3c') == 3\nassert     hex_key('4d') == 4\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('ABC') == 0\nassert     hex_key('AaBbCcDdEeFf') == 0\nassert     hex_key('23') == 0\nassert     hex_key('2') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     hex_key(\"\") == [0, 0, 0, 0, 0]\nassert     hex_key(\"A\") == [0, 0, 0, 0, 1]\nassert     hex_key(\"ABC\") == [0, 0, 0, 0, 1, 1]\nassert     hex_key(\"BBBC\") == [0, 0, 0, 0, 1, 1, 1, 1]\nassert     hex_key(\"DDDD\") == [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     hex_key('31D6CFE5F68C2D46C8C1EBA0E5AFB5') == [1,10]\nassert     hex_key('1E1F') == [1,0]\nassert     hex_key('0') == [0,0]\nassert     hex_key('1') == [1,0]\nassert     hex_key('0A') == [0,1]\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hex_key('2B') == 1, \"2B -> 1\"\nassert     hex_key('B2') == 1, \"B2 -> 1\"\nassert     hex_key('BCD') == 2, \"BCD -> 2\"\nassert     hex_key('ABCD') == 1, \"ABCD -> 1\"\nassert     hex_key('1234') == 0, \"1234 -> 0\"\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hex_key(\"\") == 0\nassert     hex_key(\"A\") == 0\nassert     hex_key(\"0\") == 0\nassert     hex_key(\"1\") == 1\nassert     hex_key(\"AA\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     hex_key(\"2\") == 2\nassert     hex_key(\"3\") == 3\nassert     hex_key(\"5\") == 5\nassert     hex_key(\"7\") == 7\nassert     hex_key(\"B\") == 11\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('A') == 0\nassert     hex_key('F') == 0\nassert     hex_key('9') == 0\nassert     hex_key('2') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hex_key('')    == 0\nassert     hex_key('AB')    == 3\nassert     hex_key('ABC')    == 2\nassert     hex_key('ABCD')    == 1\nassert     hex_key('AAABBB')    == 5\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(4) == '0100'\nassert     decimal_to_binary(5) == '0101'\nassert     decimal_to_binary(11) == '1101'\nassert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == '0' * 16 + 'db'\nassert     decimal_to_binary(1) == '1' * 16 + 'db'\nassert     decimal_to_binary(2) == '10' * 16 + 'db'\nassert     decimal_to_binary(3) == '11' * 16 + 'db'\nassert     decimal_to_binary(4) == '100' * 16 + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == \"db\"\nassert     decimal_to_binary(1) == \"db\"\nassert     decimal_to_binary(2) == \"00\"\nassert     decimal_to_binary(3) == \"00\"\nassert     decimal_to_binary(4) == \"0000\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(decimal=6) == \"01110011\"\nassert     decimal_to_binary(decimal=3) == \"011\"\nassert     decimal_to_binary(decimal=0) == \"0\"\nassert     decimal_to_binary(decimal=1) == \"1\"\nassert     decimal_to_binary(decimal=2) == \"10\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(0) == \"0db\"\nassert     decimal_to_binary(1) == \"1db\"\nassert     decimal_to_binary(10) == \"1010db\"\nassert     decimal_to_binary(15) == \"1101db\"\n\ndef integer_to_binary(number):\n    \"\"\"You will be given an integer number. Your task is to convert it to binary format.\n    The function should return a string, with each character representing a binary number.\n    Each character in the string will be '0' or '1'.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0'*10 + 'db'\nassert     decimal_to_binary(1) == '1'*10 + 'db'\nassert     decimal_to_binary(2) == '10'*10 + 'db'\nassert     decimal_to_binary(3) == '11'*10 + 'db'\nassert     decimal_to_binary(4) == '100'*10 + 'db'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(8) == \"1000\"\nassert     decimal_to_binary(9) == \"1001\"\nassert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(7) == \"111\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(10)         ==     '1010'\nassert     decimal_to_binary(77)        ==    '1101100'\nassert     decimal_to_binary(1)        ==    '1'\nassert     decimal_to_binary(256)    ==    '10000'\n\n\ndef string_to_binary(string):\n    \"\"\"You will be given a string of characters in lower case and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(1234) == 'db100001'\nassert     decimal_to_binary(16) == 'db10000'\nassert     decimal_to_binary(0) == 'db0'"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_happy(\"sad\") == False\nassert     is_happy(\"saddd\") == True\nassert     is_happy(\"aaabbbccccc\") == True\nassert     is_happy(\"aabbccdde\") == False\n\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_happy(\"aba\")\nassert     is_happy(\"abb\")\nassert     not is_happy(\"bbbb\")\nassert     is_happy(\"abbc\")\nassert     is_happy(\"abc\")\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"abbc\") == False\nassert     is_happy(\"abccc\") == True\nassert     is_happy(\"abcddd\") == False\nassert     is_happy(\"abbcddd\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_happy('asdfasdf') == False, \"wrong\"\nassert     is_happy('asdffasdf') == True, \"wrong\"\nassert     is_happy('asdfasdfasdf') == False, \"wrong\"\nassert     is_happy('asdfasdfasdfasdf') == True, \"wrong\"\nassert     is_happy('sad') == False, \"wrong\"\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_happy(\"a\") == True\nassert     is_happy(\"abbbba\") == False\nassert     is_happy(\"abba\") == False\nassert     is_happy(\"ababa\") == False\nassert     is_happy(\"\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_happy(\"asdf\") == False\nassert     is_happy(\"asdfasdf\") == True\nassert     is_happy(\"asdfasdfasdf\") == False\nassert     is_happy(\"hannah\") == False\nassert     is_happy(\"hannahhhhh\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_happy(\"abbbcaa\") is False\nassert     is_happy(\"ababcd\") is True\nassert     is_happy(\"aba\") is False\nassert     is_happy(\"bb\") is False\nassert     is_happy(\"bbb\") is False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"aba\") == False\nassert     is_happy(\"bbb\") == False\nassert     is_happy(\"abccb\") == False\nassert     is_happy(\"abcdd\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_happy(\"abba\") == True\nassert     is_happy(\"abc\") == False\nassert     is_happy(\"abcd\") == False\nassert     is_happy(\"abcdd\") == True\nassert     is_happy(\"xyx\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_happy(\"abba\") == True\nassert     is_happy(\"abc\") == False\nassert     is_happy(\"wert\") == True\nassert     is_happy(\"\") == False\nassert     is_happy(\"abcd\") == False\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([1, 2, 3, 4, 5]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\"]\nassert     numerical_letter_grade([2, 3, 4, 5, 6]) == [\"B+\", \"B\", \"B-\", \"C+\", \"C\"]\nassert     numerical_letter_grade([2, 3, 4, 5, 6, 7]) == [\"B+\", \"B\", \"B-\", \"C+\", \"C\", \"D+\"]\nassert     numerical_letter_grade([2, 3, 4, 5, 6, 7, 8]) == [\"B+\", \"B\", \"B-\", \"C+\", \"C\", \"D+\", \"D\"]\nassert     numerical_letter_grade([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert     numerical_letter_grade([3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.0, 0.0, 0.0, 0.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade(['4.0', '3.7', '3.3', '3.0', '2.7', '2.3', '2.0', '1.7', '1.3', '1.0']) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade(['4.0', '3.7', '3.3', '3.0', '2.7', '2.3', '2.0', '1.7', '1.3', '1.0', '0.7', '0.0', '0.3']) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'F', 'G']\n\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1."
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([2.3, 4.0, 2.7, 2.0, 1.3, 1.0, 0.0, 0.7, 0.0]) == [\n            'B+', 'A+', 'A', 'A-', 'B-', 'B', 'C', 'C-', 'D-', 'E'\n        ]"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([2.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['B+', 'A', 'A-', 'A', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'A', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert numerical_letter_grade([]) == []\n\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0, 2.7, 2.3, 1.0, 0.7, 0.0]) == [\"A+\", \"B+\", \"B\", \"C+\", \"D\", \"E\"]\nassert     numerical_letter_grade([4.0, 2.7, 2.3, 1.0, 0.7, 0.0, 4.0, 2.3, 2.0, 1.0]) == [\"A+\", \"B+\", \"B\", \"C+\", \"D\", \"E\", \"A+\", \"B+\", \"B\", \"C+\"]\nassert     numerical_letter_grade([4.0, 2.7, 2.3, 1.0, 0.7, 0.0, 4.0, 2.3, 2.0, 1.0, 3.7, 3.3, 2.0, 2.7]) == [\"A+\", \"B+\", \"B\", \"C+\", \"D\", \"E\", \"A+\", \"B+\", \"B\", \"C+\", \"D+\", \"F\", \"D\", \"E\", \"A+\"]"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\ndef numerical_letter_grade_2(grades):\n    \"\"\"In the last semester, the teacher has been working on a new algorithm for \n    grading the students. The algorithm is a bit more complex, so the teacher wants\n    you to write a function that will output a list of letter grades with an equal\n    number of classes. The teacher has also given you a table of GPA to GPA letter\n    grades mappings.\n    The teacher has also given you the number of classes for which they need to assign grades.\n    This number will be larger than the number of grades and the list will be sorted so that\n    the list will be in order of increasing GPA.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_length('apples') == True\nassert     prime_length('bananas') == True\nassert     prime_length('apples') == False\nassert     prime_length('pies') == False\nassert     prime_length('toast') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"ab\") == False\nassert     prime_length(\"abc\") == False\nassert     prime_length(\"abcd\") == False\nassert     prime_length(\"abcde\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_length('abc') == False\nassert     prime_length('2') == False\nassert     prime_length('3') == True\nassert     prime_length('123456789') == False\nassert     prime_length('7654321') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_length('hello') == False\nassert     prime_length('world') == False\nassert     prime_length('4') == True\nassert     prime_length('hello') == False\nassert     prime_length('hello world') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_length(\"Hello\") == True\nassert     prime_length(\"Hello\") == False\nassert     prime_length(\"This is a very long string\") == False\nassert     prime_length(\"This is a very long string!\") == False\nassert     prime_length(\"This is a very long string!\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prime_length(\"\") == True\nassert     prime_length(\"a\") == True\nassert     prime_length(\"awesome\") == True\nassert     prime_length(\"awesome try\") == False\nassert     prime_length(\"aaaaaaaaaaaa\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prime_length('a') == False\nassert     prime_length('ab') == False\nassert     prime_length('abc') == False\nassert     prime_length('abcde') == True\nassert     prime_length('abcdefgh') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prime_length('asdfasdf') == False\nassert     prime_length('asdfasdfasdf') == False\nassert     prime_length('asdf') == True\nassert     prime_length('asdfasdf') == True\nassert     prime_length('asdfsdf') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"a\") == False\nassert     prime_length(\"ab\") == False\nassert     prime_length(\"ababa\") == False\nassert     prime_length(\"ababab\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_length(\"\") is False\nassert     prime_length(\"hello\") is False\nassert     prime_length(\"hello_world\") is True\nassert     prime_length(\"hello_world_\") is False\nassert     prime_length(\"hi_there\") is False\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 8\nassert     starts_one_ends(5) == 17\nassert     starts_one_ends(6) == 22\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         starts_one_ends(1) == 0\nassert         starts_one_ends(2) == 1\nassert         starts_one_ends(3) == 1\nassert         starts_one_ends(4) == 2\nassert         starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     starts_one_ends(5) == 1\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(8) == 1\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(1) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     starts_one_ends(2) == 4\nassert     starts_one_ends(3) == 9\nassert     starts_one_ends(4) == 12\nassert     starts_one_ends(5) == 25\nassert     starts_one_ends(6) == 36\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     starts_one_ends(3) == 3\nassert starts_one_ends(5) == 8\nassert starts_one_ends(15) == 18\nassert starts_one_ends(18) == 19\n\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(4) == 0\nassert     starts_one_ends(5) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     starts_one_ends(1)     ==     0\nassert     starts_one_ends(2)     ==     1\nassert     starts_one_ends(3)     ==     1\nassert     starts_one_ends(4)     ==     1\nassert     starts_one_ends(5)     ==     1\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 3\nassert     starts_one_ends(5) == 4\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     starts_one_ends(2) == 7\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 6\nassert     starts_one_ends(5) == 3\nassert     starts_one_ends(6) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     starts_one_ends(3) == 5\nassert     starts_one_ends(4) == 13\nassert     starts_one_ends(5) == 52\nassert     starts_one_ends(6) == 579\nassert     starts_one_ends(7) == 580\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(10) == \"1010\"\nassert     solve(1) == \"1\"\nassert     solve(10) == \"1010\"\nassert     solve(1) == \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(2) == \"10\"\nassert     solve(3) == \"10\"\nassert     solve(11) == \"10000\"\nassert     solve(12) == \"10100\"\nassert     solve(1234) == \"11110\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve(0) == '0'\nassert     solve(9) == '1'\nassert     solve(10) == '1'\nassert     solve(15) == '11'\nassert     solve(37) == '100101'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(1) == \"1\"\nassert     solve(2) == \"10\"\nassert     solve(3) == \"11\"\nassert     solve(4) == \"100\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve(10) == \"1010\"\nassert     solve(100) == \"10001\"\nassert     solve(1000) == \"10011001\"\nassert     solve(12345678) == \"10001100110010111100101101011101001110110011010010110011\"\nassert     solve(6732) == \"1111101100011100101101001100010111011100010011101110111101110111101\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve(4) == \"100\"\nassert     solve(5) == \"101\"\nassert     solve(6) == \"110\"\nassert     solve(7) == \"111\"\nassert     solve(9) == \"1001\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(N=12) == \"110\"\nassert     solve(N=4) == \"100\"\nassert     solve(N=10) == \"1010\"\nassert     solve(N=100) == \"111000100110\"\nassert     solve(N=1000) == \"11111111100001101011101100\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(10) ==     '1'\nassert     solve(100) ==     '0'\nassert     solve(1000) ==     '0'\nassert     solve(10000) ==     '1'\nassert     solve(100000) ==     '0'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(10) == \"1010\"\nassert     solve(16) == \"10101\"\nassert     solve(64) == \"1011101\"\nassert     solve(128) == \"10110101\"\nassert     solve(1000) == \"10111110101000101\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve(10) == \"1010\"\nassert     solve(60) == \"1110011\"\nassert     solve(20) == \"10100\"\nassert     solve(21) == \"10101\"\nassert     solve(22) == \"10110\"\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add([1,2,3,4,5]) == [2,4]\nassert add([1,2,3,4,5,6]) == [2,4,6]\nassert add([2,4,6]) == [2,4,6]\nassert add([]) == []\nassert add([3,4]) == [4]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add([]) == []\nassert     add([1]) == []\nassert     add([1,2,3]) == [2]\nassert     add([1,2,3,4,5,6]) == [4, 6]\nassert     add([1,2,3,4,5,6,7]) == [4, 6, 2]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6, 8]\nassert add([1, 2, 3, 4, 5, 6]) == [2, 4, 6, 8]\nassert add([1, 2, 3, 4, 5]) == [2, 4, 6, 8]\nassert add([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6, 8]\nassert add([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add([1, 2, 3, 4, 5]) == [2, 4]\nassert     add([1, 3, 5]) == [2, 4, 6]\nassert     add([1, 3, 5, 7, 9]) == [2, 4, 6, 8]\nassert     add([1, 3, 5, 7, 9, 11, 13]) == [2, 4, 6, 8, 10]\n\ndef delete(lst):\n    \"\"\" Given a list of integers lst, delete the even elements at odd indices\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef add(lst):\n    return sum(lst[::2])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6, 10]\nassert add([1, 2, 3, 4, 5, 6, 7, 8]) == [6, 8]\nassert add([1, 2, 3]) == [2, 4]\nassert add([]) == []\nassert add([2, 4, 6, 8]) == [8]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add([1,3,5,7]) == [2,4,6]\nassert add([1,2,3,4]) == [2,4]\nassert add([1,2,3]) == [3]\nassert add([]) == []\nassert add([5,7]) == [6]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add([4, 0, 6, 2, 8]) == [4, 0, 6, 2, 8]\nassert     add([4, 0, 6, 2, 8, 9]) == [4, 0, 6, 2, 8, 9]\nassert     add([4, 0, 6, 2, 8, 9, 15]) == [4, 0, 6, 2, 8, 9, 15]\nassert     add([4, 0, 6, 2, 8, 9, 15, 12]) == [4, 0, 6, 2, 8, 9, 15, 12]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add([2, 4, 6, 8, 10]) ==     [4, 8, 10, 12]\nassert     add([2, 4, 8, 10]) ==     [6, 10, 12]\nassert     add([1, 3, 5]) ==     [2, 4, 6]\nassert     add([]) ==     []\nassert     add([2, 4, 6, 8, 10, 12]) ==     [4, 8, 10, 12]\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"The sunset sets at twelve o' clock.\") == \"The 12 o' clock sets at sunset the sets at twelve o'clock.\"\nassert     anti_shuffle(\"The narwhal bacons at midnight.\") == \"The narwhal bacons at midnight the narwhal bacons at midnight.\"\nassert     anti_shuffle(\"   Hello world!   \") == \"Hello world!\"\nassert     anti_shuffle(\" 1-2--3-4-\") == \"1-2--3-4-\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     anti_shuffle(\"hello world\") == \"world hello\"\nassert     anti_shuffle(\"hello my name is sparta\") == \"my name is sparta hello\"\nassert     anti_shuffle(\"I like apples, oranges and candies\") == \"apples candies oranges oranges apples I\"\nassert     anti_shuffle(\"My name is Julia\") == \"Julia name My\"\nassert     anti_shuffle(\"How are you?\") == \"How are you?\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"Hi John,   are you ready to go?\") == \"Yes, John, are you ready to go?\"\nassert     anti_shuffle(\" 1234 567 8910\") == \"123 456 789 10\"\nassert     anti_shuffle(\"-......- -.-..... -.-.\") == \"......- -.-..... -.-.\"\nassert     anti_shuffle(\"We will study about anti-shuffle.\") == \"We will study about antishuffle.\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     anti_shuffle(\"Hi John, my name is Inigo Montoya\") == \"Hi, John, my name is Inigo Montoya\"\nassert     anti_shuffle(\"This is a test\") == \"This is a test\"\nassert     anti_shuffle(\"We have nothing in common\") == \"We have nothing in common\"\nassert     anti_shuffle(\"We have nothing in common\") == \"We have nothing in common\"\nassert     anti_shuffle(\"Now we have the chance to do something\") == \"Now we have the chance to do something\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     anti_shuffle(    'Hi how are you' )     ==    'Hi how are you'\nassert     anti_shuffle(    '  Hi   how are you' )     ==    'Hi   how are you'\nassert     anti_shuffle(     'Hi   how are you' )     ==    'Hi   how are you'\nassert     anti_shuffle(     'Hi     how are you' )     ==    'Hi     how are you'\nassert     anti_shuffle(     'Hi     how are you' )     ==    'Hi     how are you'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     anti_shuffle('   Hello    world  ') == 'Hello   world'\nassert     anti_shuffle('1 2 3 4 5 6') == '1 2 3 4 5 6'\nassert     anti_shuffle('a b c d e f g') == 'a b c d e f g'\nassert     anti_shuffle('2 2 1 2') == '1 2 2 2'\nassert     anti_shuffle('We are the champions') == 'We t e ch nrs'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     anti_shuffle('Hi there this is a string that is broken into two words. ') == \"Hi there this is a string that is broken into two words. \"\nassert     anti_shuffle('Hi there this is a string that is broken into two words. ') == \"Hi there this is a string that is broken into two words. \"\nassert     anti_shuffle('Hi there this is a string that is broken into two words. ') == \"Hi there this is a string that is broken into two words. \"\nassert     anti_shuffle('Hi there this is a string that is broken into two words. ') == \"Hi there this is a string that is broken into two words. \"\nassert     anti_shuffle('Hi there this is a string that is broken into two words. ') == \"Hi there this is a string that is broken into two words. \"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     anti_shuffle('hello my name is khan') == 'Hello my name is Khan'\nassert     anti_shuffle('what are you doing today') == 'What are you doing today'\nassert     anti_shuffle('  what are you doing today') == 'What are you doing today'\nassert     anti_shuffle('      what are you doing today') == 'What are you doing today'\nassert     anti_shuffle('      what are you doing today      ') == 'What are you doing today'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     anti_shuffle(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\")=='Hi There He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.'\nassert     anti_shuffle(\"The narwhal bacons at midnight.\")=='The narwhal bacons at midnight.'\nassert     anti_shuffle(\"AB|cd ef|ghij\")=='AB|cd ef|ghij'"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6]], 1) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 2) == [(1, 2), (1, 3), (1, 4)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 3) == [(1, 0), (1, 1), (1, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 4) == [(1, 0), (1, 1), (1, 2), (1, 3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_row(lst, 0) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5)]\nassert     get_row(lst, 1) == [(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7)]\nassert     get_row(lst, 2) == [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7)]\nassert     get_row(lst, 3) == [(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7)]\nassert     get_row(lst, 4) == [(4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6]], 0) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert     get_row([[4, 3, 2], [1, 5, 6]], 3) == [(0, 2), (1, 2), (1, 1), (0, 0), (0, 1), (0, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_row([[1, 2], [3, 4]], 0) == [(0, 0), (0, 1)]\nassert     get_row([[3, 4, 5], [1, 2, 3]], 0) == [(0, 2), (0, 0), (0, 1)]\nassert     get_row([[1, 2], [3, 4], [5, 6]], 2) == [(2, 1), (1, 0), (1, 2)]\nassert     get_row([[5, 6], [1, 2], [3, 4]], 2) == [(1, 1), (1, 2), (2, 0)]"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_row([[1,2], [3,4], [5,6], [7,8], [9,10]], 3) == [(2,4), (0,1)]\nassert     get_row([[1,2], [3,4], [5,6], [7,8], [9,10]], 0) == [(1,2), (1,3), (1,4), (1,5)]\nassert     get_row([[1,2], [3,4], [5,6], [7,8], [9,10]], 1) == [(3,4), (2,3), (2,4), (2,5), (2,6)]\nassert     get_row([[1,2], [3,4], [5,6], [7,8], [9,10]], 6) == [(4,6), (4,7), (4,8), (4,9)]\nassert     get_row([[1,2], [3,4], [5,6], [7,8], [9,10]], 8) == [(5,8), (5,9)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [(1, 2), (3, 0), (3, 2), (0, 1), (2, 1), (2, 3), (1, 3), (0, 0), (1, 0), (0, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [(0, 0), (0, 2), (1, 1), (1, 3), (2, 0), (2, 2), (2, 3), (3, 1), (3, 2), (3, 0)]\nassert     get_row([[1, 2], [3, 4]], 0) == [(0, 0), (1, 0)]\nassert     get_row([[1, 2], [3, 4]], 4) == [(1, 1), (1, 2)]\nassert     get_row([[1, 2], [3, 4]], 1) == [(0, 1), (1, 0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_row(lst1, x1) == [[0, 1, 4], [1, 2, 4], [2, 3, 4], [3, 4, 4]]\nassert     get_row(lst2, x2) == [[0, 0], [0, 1], [0, 2], [0, 3], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0], [2, 1], [2, 2], [2, 3], [3, 0], [3, 1], [3, 2], [3, 3]]\nassert     get_row(lst3, x3) == [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2]]\nassert     get_row(lst4, x4) == [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2]]\nassert     get_row(lst5, x5) == [[0, 0], [0, 1], [0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2], [3, 0], [3, 1], [3, 2], [4, 0], [4, 1], [4, 2]]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_row([\n                [1, 2],\n                [3, 4],\n                [5, 6]\n            ], 1) == [(0, 0), (0, 1), (0, 2)], \"1st example\"\n\nassert     get_row([\n                [1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n            ], 7) == [(0, 2), (0, 3), (0, 4)], \"2nd example\"\n\nassert     get_row([\n                [1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9],\n                [10, 11, 12],\n            ], 7) == [(0, 3), (0, 2), (1, 2)], \"3rd example\""
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_row([[1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]], 3) == [(0, 1), (1, 0)]\nassert     get_row([[1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]], 4) == [(0, 1), (1, 1)]\nassert     get_row([[1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]], 7) == [(2, 1), (0, 0)]\nassert     get_row([[1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]], 8) == [(0, 1), (1, 0), (2, 0)]\nassert     get_row([[1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]], 9) == [(0, 1), (1, 1), (2, 1), (0, 0), (1, 0), (2, 0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_row([[0, 1, 1], [1, 2, 1]], 0) == [(0, 0), (0, 1), (1, 1)]\nassert     get_row([[0, 1, 1], [1, 2, 1]], 1) == [(1, 1), (1, 2), (2, 1)]\nassert     get_row([[0, 1, 1], [1, 2, 1]], 2) == [(2, 1), (2, 2), (1, 1)]\nassert     get_row([[0, 1, 1], [1, 2, 1]], 3) == [(1, 2), (1, 1), (0, 1)]\nassert     get_row([[0, 1, 1], [1, 2, 1]], 4) == [(0, 1), (0, 2), (1, 0)]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([5, 3, 4, 7, 2]) == [2, 3, 4, 5, 7], \"N1\"\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"N2\"\nassert     sort_array([8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8], \"N3\"\nassert     sort_array([8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8], \"N4\"\nassert     sort_array([2, 3, 1, 4, 5]) == [1, 2, 3, 4, 5], \"N5\"\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([0, 2, 2, 5, 6, 1]) == [0, 1, 2, 2, 5, 6]\nassert     sort_array([0, 1, 2, 3]) == [0, 1, 2, 3]\nassert     sort_array([0, 1, 3]) == [0, 1, 3]\nassert     sort_array([0, 0, 0]) == [0, 0, 0]\nassert     sort_array([-1, -1, -1]) == [-1, -1, -1]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([1]) == [1]\nassert     sort_array([1, 1]) == [1, 1]\nassert     sort_array([1, 1, 1]) == [1, 1, 1]\nassert     sort_array([2, 3, 5, 6, 7]) == [2, 3, 5, 6, 7]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([3,1,2,6])    == [1, 2, 3, 6]\nassert     sort_array([1,4,5,2])    == [1, 2, 4, 5]\nassert     sort_array([3,1,2,4])    == [1, 2, 3, 4]\nassert     sort_array([4,3,2,1])    == [1, 2, 3, 4]\nassert     sort_array([4,3,2,1])    == [1, 2, 3, 4]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([1, 3, 2, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert sort_array([2, 3, 4, 5, 6, 1]) == [1, 2, 3, 4, 5, 6]\nassert sort_array([1, 3, 2, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert sort_array([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_array([5, 3, 2, 1]) == [1, 2, 3, 5]\nassert     sort_array([6, 3, 2, 1]) == [1, 3, 2, 6]\nassert     sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_array([8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array([3,1,5,4,2]) == [2,3,1,4,5]\nassert     sort_array([6,2,1,5,4,3]) == [6,5,3,4,1,2]\nassert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_array([3,1,2]) == [1,2,3]\nassert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([2, 5, 6, 3, 1]) == [1, 2, 3, 5, 6]\nassert     sort_array([5, 7, 9, 2, 1]) == [1, 2, 5, 7, 9]\nassert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([10, 3, 4, 5, 9]) == [3, 4, 5, 9, 10]\nassert     sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [2,3,5,1,6] == sort_array([1,5,6,3,2])\nassert     [2,3,5,1,6] == sort_array([1,5,6,3,2])\nassert     [1,3,5,2,6] == sort_array([6,2,5,3,1])\nassert     [1,3,5,2,6] == sort_array([6,2,5,3,1])\nassert     [1,2,5,3,6] == sort_array([6,3,5,2,1])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([2, 1, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([2, 3, 1, 4, 5]) == [5, 1, 4, 2, 3]\nassert     sort_array([5, 1, 4, 2, 3]) == [3, 2, 1, 4, 5]\nassert     sort_array([3, 2, 1, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encrypt(\"peter\") == \"tvhgfy\"\nassert     encrypt(\"ed\") == \"hly\"\nassert     encrypt(\"h\") == \"h\"\nassert     encrypt(\"i\") == \"i\"\nassert     encrypt(\"b\") == \"y\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and \n    returns a string decrypted with the alphabet being rotated in the \n    reverse order. The alphabet should be rotated in a manner such that \n    the letters shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encrypt('abc') == 'bcd'\nassert     encrypt('xyz') == 'zab'\nassert     encrypt('zyx') == 'abcd'\nassert     encrypt('z') == 'a'\nassert     encrypt('Z') == 'A'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument\n    and returns a string decrypted with the alphabet being rotated\n    in the opposite direction.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encrypt(\"Hello world!\") == \"dlrow olleH\"\nassert     encrypt(\"This is a secret message!\") == \"gvbh jgvb vxqrxvf\"\nassert     encrypt(\"I am the very model of a modern major-general.\") == \"gvbkvjgvb vxqrxvf qtbjevm gbvmjvb\"\n\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encrypt(\"iamthebest\") == \"nqmaibt\"\nassert encrypt(\"i am the best\") == \"nqmaibt\"\nassert encrypt(\"\") == \"\"\nassert encrypt(\"  \") == \"\"\nassert encrypt(\"   \") == \"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encrypt('hello') == 'ffekl'\nassert     encrypt('I hate you') == 'fc oebn'\nassert     encrypt('hello world') == 'elhk efwl'"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest([1,2,3,4,5,6]) == 2\nassert     next_smallest([1,1,2,3]) == 1\nassert     next_smallest([1]) == None\nassert     next_smallest([4,3,2,1]) == None\nassert     next_smallest([1,1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest([5, 4, 3, 1, -5, -4, -3]) == -5\nassert     next_smallest([-5, -4, -3]) == -5\nassert     next_smallest([0, 0, 0]) == None\nassert     next_smallest([5]) == None\nassert     next_smallest([-5, -4]) == -4\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest([1, 2, 3, 4]) == 2\nassert     next_smallest([5, 3, 4, 2, 1]) == 4\nassert     next_smallest([]) == None\nassert     next_smallest([1]) == None\nassert     next_smallest([1, 2, 3, 4]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest([2, 3, 4, 5, 1]) == 1\nassert     next_smallest([3, 1, 2, 4, 5]) == 1\nassert     next_smallest([1, 2, 3, 4, 5]) == None\nassert     next_smallest([5, 4, 3, 2, 1]) == None\nassert     next_smallest([5, 4, 3, 2, 1, 4, 6]) == 2\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest([5, 2, 3, 1, 9, 8, 6]) == 1\nassert     next_smallest([5, 2, 3, 1, 9, 8, 6, 4]) == 2\nassert     next_smallest([5, 2, 3, 1, 9, 8, 6, 4, 0]) == 0\nassert     next_smallest([]) == None\nassert     next_smallest([2, 1]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest([1,3,2,4,5]) == 3\nassert     next_smallest([1,3,2,4,5,7]) == 3\nassert     next_smallest([1,3,2,4,5,7,9]) == 5\nassert     next_smallest([1,3,2,4,5,7,9,11]) == 7\nassert     next_smallest([1,3,2,4,5,7,9,11]) == 7\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([2, 1, 3, 4, 5]) == 1\nassert     next_smallest([1, 2, 3, 4, 5, 10]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest([3,4,5,2,1,3]) == 1\nassert     next_smallest([3,4,5,2,1,3,6]) == 2\nassert     next_smallest([3,4,5,2,1]) is None\nassert     next_smallest([3,4,5,2,1,3,6]) is None\nassert     next_smallest([3,4,5,2,1,3,6,7]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_smallest([9, 7, 6, 2, 4, 10]) == 6\nassert     next_smallest([1, 5, 6, 3, 4, 2]) == 5\nassert     next_smallest([1]) == None\nassert     next_smallest([0]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100]) == 7\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100]) == None\n\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_bored(\"It was bored.\") == True\nassert     is_bored(\"It was not bored.\") == False\nassert     is_bored(\"I had the best day of my life.\") == True\nassert     is_bored(\"I'm into coding right now.\") == True\nassert     is_bored(\"I am coding right now.\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_bored(\".I am bored!\") == True\nassert     is_bored(\".I am not bored!\") == False\nassert     is_bored(\".I am not bored?\") == False\nassert     is_bored(\".I am not bored!\") == False\nassert     is_bored(\".I am not bored?\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_bored(\"I am bored\") == True\nassert     is_bored(\"I am not boring\") == False\nassert     is_bored(\"I am not I\") == False\nassert     is_bored(\"I am not I, are you bored?\") == True\nassert     is_bored(\"I am not I, are you not bored?\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_bored
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_bored(\"I am a good boy!\") == 1\nassert     is_bored(\"I am I am I am a I am I am a I am I am a I am I am I am a I am I am I am a I am I am a I am I am a I am I am I am I am I am a I am I am I am a I am I am I am I am I am a I am I am a I am I am I am a I am I am a I am I am a I am I am a I am a I am I am I am I am a I am I am I am I am I am I am I am a I am I am a I am I am I am a I am I am I am I am a I am I am I am I am I am I am a I am I am I am I am a I am I am I am a I am I am I am I am a I am I am I am I am I am a I am I am I am I am I am I am I am a I am I am I am a I am I am I am I am a I am I am I am I am a I am I am I am I am I am I am I am I am I am I am I am I am I am a I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am I am "
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_bored(\"I am bored\") == True\nassert     is_bored(\"I am not bored\") == False\nassert     is_bored(\"\") == False\nassert     is_bored(\"I am not bored. I am bored.\") == True\nassert     is_bored(\"I am not bored. I am not bored.\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_bored('I am bored') == True\nassert     is_bored('I am not bored') == False\nassert     is_bored('I am not bored') == False\nassert     is_bored('I am not bored') == False\nassert     is_bored('I am not bored') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_bored(\"I am a happy boy.\") == 1\nassert     is_bored(\"this is a boring example.\") == 1\nassert     is_bored(\"I am a  wonderful boy.\") == 1\nassert     is_bored(\"I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I am a I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama I ama "
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_bored('I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I\nassert     is_bored('I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I\nassert     is_bored
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_bored(\"I love you\") == 1\nassert     is_bored(\"I love the new phone\") == 1\nassert     is_bored(\"I am happy\") == 0\nassert     is_bored(\"I am not happy\") == 0\nassert     is_bored(\"I am not bored\") == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     any_int(2, 3, 4) == True, \"Expected True\"\nassert     any_int(2, 9, 4) == False, \"Expected False\"\nassert     any_int(2, 3, 5) == False, \"Expected False\"\nassert     any_int(2, 3, 3) == True, \"Expected True\"\nassert     any_int(3, 4, 5) == False, \"Expected False\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     any_int(10, 22, 33) is True\nassert     any_int(1, 2, 3) is False\nassert     any_int(3, 2, 1) is True\nassert     any_int(1, 3, 2) is False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     any_int(1, 1, 1) is True\nassert     any_int(1, 1, 2) is True\nassert     any_int(1, 2, 1) is True\nassert     any_int(1, 2, 2) is False\nassert     any_int(1, 2, 3) is True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     any_int(10, 1, 10) == True\nassert     any_int(2, 1, 10) == False\nassert     any_int(10, 2, 1) == True\nassert     any_int(10, 1, 2) == True\nassert     any_int(10, 2, 2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 3) is True\nassert     any_int(1.5, 2, 3) is True\nassert     any_int(-1, 2, 3) is True\nassert     any_int(1, -2, 3) is True\nassert     any_int(1, 2, -3) is False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     any_int(1,1,2)\nassert     any_int(1,2,3)\nassert     any_int(3,2,1)\nassert     any_int(1,3,4)\nassert     any_int(1,3,1) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     any_int(2, 1, 2) == False\nassert     any_int(2, 2, 2) == True\nassert     any_int(1, 2, 2) == False\nassert     any_int(1, 2, 1) == True\nassert     any_int(1, 1, 1) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1, 2, 4) == False\nassert     any_int(4, 4, 4) == True\nassert     any_int(-1, -2, -3) == False\nassert     any_int(5, 8, 9) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     any_int(1,2,3) == True\nassert     any_int(2,3,4) == False\nassert     any_int(3,4,5) == True\nassert     any_int(6,8,10) == False\nassert     any_int(1,2,3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     any_int(3, 4, 5) == True\nassert     any_int(3, -4, -5) == False\nassert     any_int(-1, 1, 1) == True\nassert     any_int(-1, 1.1, 1.1) == False\n\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode('My name is Mike') =='mIcKiNtMw eiM'\nassert     encode('this is a test') == 'ThIs si sTaTi'\nassert     encode('This is a test') == 'ThIs si sTaTi'\nassert     encode('This is a test!') == 'ThI s TaT!i'\nassert     encode('The quick brown fox jumped over the lazy dog') == 'TuqkI qUick BrOwn fOx jUmP At wRoNd hErY'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encode('hello')    == 'HELLO'\nassert     encode('This is a test message')     == 'This is a test message'\nassert     encode('It has to be faster than anyone at this point') == 'it has to be faster than anyone at this point'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encode('i like Python!') == 'lI siK i nPlEt'\nassert     encode('Hello World!') == 'lH 2 oW  rL d'\nassert     encode('I like Python!') == 'i lI siK i nPlEt'\nassert     encode('Hello World!') == 'H 2 oW  rL d'\nassert     encode('I like Python!') == 'i lI siK i nPlEt'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode(\"hello\") == \"HELLO\"\nassert     encode(\"How are you?\") == \"WOeR sOuR?\"\nassert     encode(\"Have you tried it on paper?\") == \"HN eY tAs tOr PAPEr\"\nassert     encode(\"It is decidedly so\") == \"It is tO sT oUs\"\nassert     encode(\"I'm pleased to see you\") == \"I m pL sI tIs tO uS\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode('I love apples and oranges') == 'LOVEO X'\nassert     encode('I am the very model of a modern major general') == 'INm yhe im2 r2 e2d2 y2c2o2l2'\nassert     encode('I was born in 2001, and I learned how to drive in the car') == 'Im br0 n2d1e1n2, i2 w2 e2d2 y2o2l2'\nassert     encode('the quick brown fox jumped over the lazy dog') == 'THe qUick bRown fOx jUlP mU2 y2o2g2"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encode(\"abcd efgh\")     == \"cdefgh ab\"\nassert     encode(\"Hi how are you\")     == \"hihaw ywhau ouy\"\nassert     encode(\"How are you?\")     == \"How ouy are ywhau?\"\nassert     encode(\"Hello\")         == \"oellH\"\nassert     encode(\"bye\")         == \"byE\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode(\"THIS IS A TEST\") == \"tTiSiS tTiS ITsTaT\", \\\n        \"FAILED test 1 for encode\"\nassert     encode(\"Big Boi is not a kitty!\") == \"biga bOi nO kI tIy!\", \\\n        \"FAILED test 2 for encode\"\nassert     encode(\"Cat, Dog, Monkey, Monkey, Cat, Cat, Dog\") == \"caT dO gO oO nMk tIy\", \\\n        \"FAILED test 3 for encode\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode(\"ABC\")     == \"bAc\", \"fails test 1\"\nassert     encode(\"abc\")     == \"bAc\", \"fails test 2\"\nassert     encode(\"ABc\")     == \"bAc\", \"fails test 3\"\nassert     encode(\"Abc\")     == \"bAc\", \"fails test 4\"\nassert     encode(\"ABc\")     == \"bAc\", \"fails test 5\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     encode('aabcc') == 'bbbaaa'\nassert     encode('zzzz') == 'bbbaaa'\nassert     encode('z') == 'a'\nassert     encode('ABC') == 'Abc'\nassert     encode('123') == '1b2c3'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef encode_2(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n\n\ndef decode_2(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places behind that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     skjkasdkd(list(range(0,10))) == 19\nassert     skjkasdkd(list(range(1,100,2))) == 21\nassert     skjkasdkd(list(range(2,100,2))) == 5\nassert     skjkasdkd(list(range(2,10,2))) == 19\nassert     skjkasdkd(list(range(2,100,2))) == 29\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     int('57') == 57\nassert     int('29') == 29\nassert     int('7331') == 7331\nassert     int('7332') == 7332\nassert     int('7333') == 7333\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     skjkasdkd(list(range(1, 17))) == 5\nassert     skjkasdkd([2, 5, 7, 11]) == 7\nassert     skjkasdkd([2, 5, 7, 11, 13]) == 11\nassert     skjkasdkd([2, 5, 7, 11, 13, 17]) == 5\nassert     skjkasdkd([2, 5, 7, 11, 13, 17, 19]) == 7\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     4    == skjkasdkd( [5, 8, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     skjkasdkd([1, 21, 3, 15, 7, 9, 11, 23, 19]) == 19\nassert     skjkasdkd([4, 71, 56, 20, 42, 1, 8, 29, 10]) == 29\n\ndef max_prime_digit_sum(lst):\n    \"\"\"You are given a list of integers.\n    Find the largest prime number and its digits and return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     isPrime(2)     == True\nassert     isPrime(3)     == True\nassert     isPrime(5)     == True\nassert     isPrime(7)     == True\nassert     isPrime(11)     == True\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (skjkasdkd(lst=[1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])\nassert     (skjkasdkd(lst=[3, 4, 5, 6, 7]) == [3, 4, 5, 6, 7])\nassert     (skjkasdkd(lst=[1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6])\nassert     (skjkasdkd(lst=[3, 4, 5, 6, 7, 8]) == [3, 4, 5, 6, 7, 8])\n\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 29\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 29\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 29\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 29\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 29\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ________ == ________\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n              ) == 23\n\nassert     skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n                  ) == 5\n\nassert     skjkasdkd([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'b': 3}) == False\nassert     check_dict_case({'a': 'b'}) == False\nassert     check_dict_case({'a': 'B'}) == False\nassert     check_dict_case({'a': 'b'}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) == False, \"Empty dictionary!\"\nassert     check_dict_case({'a':1}) == False, \"Non-string key!\"\nassert     check_dict_case({'A':1}) == True, \"String key!\"\nassert     check_dict_case({'a':1, 'B':2}) == False, \"Not all keys are string!\"\nassert     check_dict_case({'a':1, 'b':2}) == False, \"Not all keys are string!\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_dict_case({})    == True\nassert     check_dict_case({'D':'d'}) == True\nassert     check_dict_case({'d':'D'}) == False\n\ndef check_n_gram(sentence, n):\n    \"\"\"\n    Given a sentence of words and a number, return a list of n-grams\n    for the sentence. The n-grams are listed in order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 'A'}) == True\nassert     check_dict_case({'A': 'a'}) == False\nassert     check_dict_case({'a': 'A', 'b': 'B'}) == True\nassert     check_dict_case({'a': 'A', 'B': 'b'}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) is False\nassert     check_dict_case({'a': 1}) is False\nassert     check_dict_case({'a': 1, 'b': 2}) is True\nassert     check_dict_case({'a': 1, 'b': 2, 'C': 3}) is False\n\n\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_dict_case({}) == False, \"empty dict\"\nassert     check_dict_case({\"mykey\": \"myval\"}) == False, \"non-string key\"\nassert     check_dict_case({\"myKey\": \"myval\"}) == True, \"string key\"\nassert     check_dict_case({\"MyKey\": \"myval\"}) == True, \"string key\"\nassert     check_dict_case({\"mykey\": \"myval\", \"mykey2\": \"myval2\"}) == True, \"multiple keys\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a':1, 'B':2}) == False\nassert     check_dict_case({'a':1, 'b':2}) == False\nassert     check_dict_case({'a':1, 'B':2}) == True\nassert     check_dict_case({'a':1, 'b':2}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"a\": 1}) == False\nassert     check_dict_case({\"A\": 1}) == True\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == True\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3, \"D\": 4, \"E\": 5}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 'A'}) == True\nassert     check_dict_case({'A': 'a'}) == False\nassert     check_dict_case({'a': 'a', 'b': 'B'}) == True\nassert     check_dict_case({'A': 'A', 'b': 'B'}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'A':'a', 'B':'b'}) == True\nassert     check_dict_case({'a':'a', 'b':'b'}) == False\nassert     check_dict_case({'A':'a', 'B':'b', 'C':'c'}) == True\nassert     check_dict_case({'a':'a', 'b':'b', 'C':'c'}) == False\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_up_to(3) == [2, 3]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(15) == [2, 3, 5, 7, 11, 13, 17]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7, 11]\nassert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(1) == []\n\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_up_to(5) == [2, 3]\nassert     count_up_to(6) == [2, 3, 5]\nassert     count_up_to(8) == [2, 3, 5, 7]\nassert     count_up_to(9) == [2, 3, 5, 7, 11]\nassert     count_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_up_to(0)         == []\nassert     count_up_to(1)         == [2]\nassert     count_up_to(2)         == [2]\nassert     count_up_to(10)     == [2, 3, 5, 7]\nassert     count_up_to(100)    == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == []\nassert     count_up_to(2) == []\nassert     count_up_to(3) == [2]\nassert     count_up_to(4) == [2, 3]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_up_to(2) == [2]\nassert     count_up_to(4) == [2,3]\nassert     count_up_to(15) == [2,3,5,7,11,13]\nassert     count_up_to(100) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [2, 3, 5, 7] == count_up_to(10)\nassert     [2, 3, 5, 7, 11, 13] == count_up_to(20)\nassert     [2, 3, 5, 7, 11, 13, 17, 19] == count_up_to(30)\nassert     [] == count_up_to(1)\nassert     [2, 3, 5, 7] == count_up_to(2)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_up_to(2) == [2]\nassert     count_up_to(3) == [2]\nassert     count_up_to(4) == [2, 3]\nassert     count_up_to(5) == [2, 3]\nassert     count_up_to(6) == [2, 3, 5]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(25) == [2, 3, 5, 7, 11, 13, 17, 19, 23]\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply(1, 3) == 3\nassert     multiply(2, 4) == 8\nassert     multiply(3, 5) == 15\nassert     multiply(4, 6) == 24\nassert     multiply(5, 7) == 35\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\n\n\ndef test_multiply():\n    assert multiply(6, 1) == 6\n    assert multiply(6, 10) == 6\n    "
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply(1,1) == 1\nassert     multiply(1,2) == 2\nassert     multiply(1,3) == 3\nassert     multiply(2,1) == 2\nassert     multiply(2,2) == 4\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiply(1, 1) == 1\nassert     multiply(4, 2) == 8\nassert     multiply(4, 5) == 20\nassert     multiply(0, 1) == 0\nassert     multiply(0, 10) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply(12, 26) == 2\nassert     multiply(12, 33) == 6\nassert     multiply(3, 7) == 21\nassert     multiply(9, 9) == 81\nassert     multiply(6, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply(65, 12) == 2\nassert     multiply(0, 11) == 0\nassert     multiply(999, 797) == 797\nassert     multiply(1, 6) == 6\nassert     multiply(7, 7) == 7\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply(1, 10) == 1\nassert     multiply(2, 10) == 2\nassert     multiply(10, 10) == 1\nassert     multiply(0, 10) == 0\nassert     multiply(0, -10) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply(10, 99) == 999\nassert     multiply(29, 89) == 2189\nassert     multiply(100, 10) == 1000\nassert     multiply(0, -10) == -10\nassert     multiply(10, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply(2, 2) == 4\nassert     multiply(5, 3) == 15\nassert     multiply(5, 7) == 35\nassert     multiply(12, 22) == 462\nassert     multiply(99, 11) == 799\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_upper(\"Python!\") == 0, count_upper(\"Python!\")\nassert     count_upper(\"Python\") == 1, count_upper(\"Python\")\nassert     count_upper(\"Python is great!\") == 1, count_upper(\"Python is great!\")\nassert     count_upper(\"Python is great!\") == 1, count_upper(\"Python is great!\")\nassert     count_upper(\"Python is GREAT!\") == 2, count_upper(\"Python is GREAT!\")\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_upper(\"Hola Mundo\") == 2\nassert     count_upper(\"QwErTY\") == 2\nassert     count_upper(\"QwErTYQ\") == 1\nassert     count_upper(\"qwerty\") == 0\nassert     count_upper(\"QwErTYQ\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_upper(\"Hello\") == 2\nassert     count_upper(\"World\") == 3\nassert     count_upper(\"!\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_upper(\"hello\") == 0\nassert     count_upper(\"HELLO\") == 1\nassert     count_upper(\"HELLO WORLD\") == 4\nassert     count_upper(\"HELLO WORLD\") == 5\nassert     count_upper(\"HELLO WORLD WOLRD\") == 7\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (count_upper(\"HeLLo\") == 3)\nassert     (count_upper(\"PYTHON\") == 1)\nassert     (count_upper(\"\") == 0)\nassert     (count_upper(\"Aa\") == 0)\nassert     (count_upper(\"HOW ARE YOU\") == 4)\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_upper(\"I LOVE UCAS\") == 3\nassert     count_upper(\"i love UCAS\") == 3\nassert     count_upper(\"i love UCAS!!!\") == 3\nassert     count_upper(\"what a big day\") == 0\nassert     count_upper(\"\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_upper(\"the quick brown fox\") == 2\nassert     count_upper(\"the quick brown fox jumps over the lazy dog\") == 6\nassert     count_upper(\"sO mY tHis iS a tEsT\") == 4\nassert     count_upper(\"The quick brown fox jumps over the lazy dog\") == 10\nassert     count_upper(\"AbCdEfG123\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_upper(\"HELLO\") == 2\nassert     count_upper(\"HELLO WORLD\") == 1\nassert     count_upper(\"HELLO WORLD!!!\") == 4\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_upper(\"abcde\") == 2\nassert     count_upper(\"bbb\") == 1\nassert     count_upper(\"jklmmn\") == 1\nassert     count_upper(\"ZYXWVU\") == 0\nassert     count_upper(\"ABCDEF\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_upper(\"booger\") == 0\nassert     count_upper(\"test\") == 1\nassert     count_upper(\"testco\") == 1\nassert     count_upper(\"tetst\") == 1\nassert     count_upper(\"testab\") == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     closest_integer(\"0.3\") == 0\nassert     closest_integer(\"0.5\") == 0\nassert     closest_integer(\"0.1\") == 0\nassert     closest_integer(\"0.8\") == 0\nassert     closest_integer(\"0.9\") == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"15\") == 15\nassert     closest_integer(\"-15\") == -15\nassert     closest_integer(\"-0\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\")         == 15\nassert     closest_integer(\"-14.5\")     == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"8\") == 8\nassert     closest_integer(\"-8\") == -8\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     closest_integer('-12.345') == -12\nassert     closest_integer('15.34') == 15\nassert     closest_integer('14.5') == 14\nassert     closest_integer('-14.5') == -15\nassert     closest_integer('-14.534') == -14\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"0.0\") == 0\nassert     closest_integer(\"-0.0\") == 0\nassert     closest_integer(\"-1.0\") == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_integer(\"15.125\") == 15\nassert     closest_integer(\"-15.125\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"0.0\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-13.5\") == -14\nassert     closest_integer(\"-5\") == -5\nassert     closest_integer(\"-0.5\") == -1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [3]\nassert     make_a_pile(4) == [4,1]\nassert     make_a_pile(5) == [5,2,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [3, 1]\nassert     make_a_pile(4) == [4, 2, 1]\nassert     make_a_pile(5) == [5, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(4) == [1, 2, 2, 1]\nassert     make_a_pile(5) == [1, 3, 3, 3, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,1]\nassert     make_a_pile(3) == [1,2,1]\nassert     make_a_pile(4) == [1,3,2,1]\nassert     make_a_pile(5) == [1,4,3,2,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     make_a_pile(2) == [1,1]\nassert     make_a_pile(3) == [1,2,1]\nassert     make_a_pile(4) == [1,2,2,1]\nassert     make_a_pile(5) == [1,2,3,2,1]\nassert     make_a_pile(6) == [1,2,3,3,2,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 2]\nassert     make_a_pile(3) == [1, 2, 3]\nassert     make_a_pile(4) == [1, 2, 3, 4]\nassert     make_a_pile(5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [3, 1]\nassert     make_a_pile(4) == [4, 2, 1]\nassert     make_a_pile(5) == [5, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(4) == [1, 3, 2, 1]\nassert     make_a_pile(5) == [1, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,2]\nassert     make_a_pile(3) == [1,2,3]\nassert     make_a_pile(4) == [1,2,3,5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2,1]\nassert     make_a_pile(3) == [3,2,1]\nassert     make_a_pile(4) == [4,3,2,1]\nassert     make_a_pile(5) == [5,4,3,2,1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_string(\"hello,world\") == ['hello', 'world']\nassert     words_string(\"hello, a, nice, day\") == ['hello', 'a', 'nice', 'day']\nassert     words_string(\"welcome, to, a, new, world\") == ['welcome', 'to', 'a', 'new', 'world']\nassert     words_string(\"\") == []\nassert     words_string(\" \") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_string(\"hello,world,this,is,a,test\")    ==    ['hello', 'world', 'this', 'is', 'a', 'test'], \"wrong result\"\nassert     words_string(\"one,two,three\")                        ==    ['one', 'two', 'three'], \"wrong result\"\nassert     words_string(\"one,two,three,four,five\")                ==    ['one', 'two', 'three', 'four', 'five'], \"wrong result\"\nassert     words_string(\"one,two,three,four,five,6\")                ==    ['one', 'two', 'three', 'four', 'five', '6'], \"wrong result\"\n\ndef is_palindrome(s):\n    \"\"\"\n    You will be given a string s. Your task is to return true if s is a palindrome,\n    else false.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_string('Hi, I am a cat, this is a dog, yes!') == ['Hi', 'I', 'am', 'a', 'cat', 'this', 'is', 'a', 'dog', 'yes!']\nassert words_string('Hi, I am a cat, this is a dog') == ['Hi', 'I', 'am', 'a', 'cat', 'this', 'is', 'a', 'dog']\nassert words_string('Hi, I am a cat, this is a dog, yes!') == ['Hi', 'I', 'am', 'a', 'cat', 'this', 'is', 'a', 'dog', 'yes!']\nassert words_string('Hi, I am a cat, this is a dog, yes!') == ['Hi', 'I', 'am', 'a', 'cat', 'this', 'is', 'a', 'dog', 'yes!']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_string('hello, world!') == ['hello', 'world']\nassert     words_string('hello, world') == ['hello', 'world']\nassert     words_string('hello, world, how are you?') == ['hello', 'world', 'how', 'are', 'you?']\nassert     words_string('I have a, big, black cat.') == ['I', 'have', 'a', 'big', 'black', 'cat.']\nassert     words_string('') == []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_string(\"this,is,a,test\") == ['this', 'is', 'a', 'test']\nassert     words_string(\"what,a,big,test,would,u,do\") == ['what', 'a', 'big', 'test', 'would', 'u', 'do']\nassert     words_string(\"one,two,three,four,five,six\") == ['one', 'two', 'three', 'four', 'five','six']\nassert     words_string(\"go,get,give,go\") == ['go', 'get', 'give', 'go']\nassert     words_string(\"i,am,a,test\") == ['i', 'am', 'a', 'test']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_string(\"a,b,c\") == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a,b, c\") == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a,b,c \") == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a,b,c\") == [\"a\", \"b\", \"c\"]\nassert     words_string(\"a, b, c\") == [\"a\", \"b\", \"c\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_string(\"this,is,a,test\") == [\"this\", \"is\", \"a\", \"test\"]\nassert     words_string(\"the,quick,brown,fox\") == [\"the\", \"quick\", \"brown\", \"fox\"]\nassert     words_string(\"and,this,is,another,test\") == [\"and\", \"this\", \"is\", \"another\", \"test\"]\nassert     words_string(\"the,quick,brown,fox,and,the,chamber,of,elephants\") == [\"the\", \"quick\", \"brown\", \"fox\", \"and\", \"the\", \"chamber\", \"of\", \"elephants\"]\nassert     words_string(\"this,is,a,test,and,the,wonderful,and,useful,and,fantastic,test,\") == [\"this\", \"is\", \"a\", \"test\", \"and\", \"the\", \"wonderful\", \"and\", \"useful\", \"and\", \"fantastic\", \"test\", \",\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_string(\"Hi, my name is Alex\") == ['Hi','my', 'name', 'is', 'Alex']\nassert     words_string(\"Alexis, the conqueror\") == ['Alexis', 'the', 'conqueror']\nassert     words_string(\"Alexis, the conqueror, Sr. Evil\") == ['Alexis', 'the', 'conqueror', 'Sr. Evil']\nassert     words_string(\"Alexis, the conqueror, Sr. Evil, Sr. Evil\") == ['Alexis', 'the', 'conqueror', 'Sr. Evil', 'Sr. Evil']\nassert     words_string(\"Alexis, the conqueror, Sr. Evil, Sr. Evil, Sr. Evil\") == ['Alexis', 'the', 'conqueror', 'Sr. Evil', 'Sr. Evil', 'Sr. Evil']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_string(\"\")     == []\nassert     words_string(\"hello\")     == [\"hello\"]\nassert     words_string(\"hello,world\")     == [\"hello\", \"world\"]\nassert     words_string(\"hello, world\")     == [\"hello\", \"world\"]\nassert     words_string(\"a,b,c,d\")     == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_string('hello world') == ['hello', 'world']\nassert     words_string('hello,world') == ['hello', 'world']\nassert     words_string('hello, world') == ['hello', 'world']\nassert     words_string('hello, world, hi') == ['hello', 'world', 'hi']\nassert     words_string('hello, world, hi, sun') == ['hello', 'world', 'hi','sun']\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     choose_num(10, 15) == 13\nassert     choose_num(1, 7) == -1\nassert     choose_num(7, 17) == -1\nassert     choose_num(2, 5) == -1\nassert     choose_num(4, 6) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     choose_num(1, 10) == 6\nassert     choose_num(1, 11) == -1\nassert choose_num(2, 10) == 4\nassert choose_num(10, 10) == 10\nassert choose_num(2, 4) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     choose_num(0, 0) == -1\nassert     choose_num(0, 10) == -1\nassert     choose_num(10, 0) == -1\nassert     choose_num(10, 10) == -1\nassert     choose_num(10, 11) == 10\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     choose_num(10, 19) == 14\nassert     choose_num(1, 10) == -1\nassert     choose_num(3, 9) == 8\nassert     choose_num(5, 15) == 12\nassert     choose_num(10, 19) == 14\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     choose_num(1, 100) == 60\nassert     choose_num(1, 99) == -1\nassert     choose_num(0, 100) == 60\nassert     choose_num(0, 99) == -1\nassert     choose_num(101, 100) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     choose_num(4, 6) == 4\nassert     choose_num(4, 7) == -1\nassert     choose_num(4, 5) == -1\nassert     choose_num(10, 15) == 14\nassert     choose_num(10, 10) == 10\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     choose_num(1, 15) == -1\nassert     choose_num(1, 2) == -1\nassert     choose_num(1, 3) == -1\nassert     choose_num(1, 4) == -1\nassert     choose_num(1, 5) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     choose_num(2, 4) == -1\nassert     choose_num(3, 8) == -1\nassert     choose_num(0, 100) == -1\nassert     choose_num(10, 50) == 22\nassert     choose_num(1, 5) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     choose_num(1, 100) == -1\nassert     choose_num(2, 100) == -1\nassert     choose_num(2, 3) == -1\nassert     choose_num(4, 100) == 2\nassert     choose_num(1, 2) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     choose_num(1, 3) == 2\nassert     choose_num(2, 5) == -1\nassert     choose_num(-5, -1) == -1\nassert     choose_num(5, 10) == 6\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rounded_avg(1, 2) == 1\nassert     rounded_avg(1, 3) == 2\nassert     rounded_avg(0, 3) == 1\nassert     rounded_avg(3, 3) == 3\nassert     rounded_avg(1, 10) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rounded_avg(5, 10) == 5.5\nassert     rounded_avg(0, 5) == -1\nassert     rounded_avg(100, 101) == 100\nassert     rounded_avg(4, 5) == -1\nassert     rounded_avg(2, 4) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \ndef main():\n    assert rounded_avg(15, 30) == -1\n    assert rounded_avg(0, 0) == 0\n    assert rounded_avg(0, 1) == 1\n    assert rounded_avg(1, 1) == 1\n    "
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rounded_avg(5, 10) == 3\nassert     rounded_avg(1, 100) == 1\nassert     rounded_avg(100, 100) == 0\nassert     rounded_avg(1, 5) == -1\nassert     rounded_avg(1, 0) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rounded_avg(3, 5) == 3\nassert     rounded_avg(3, 4) == 2\nassert     rounded_avg(3, 6) == -1\nassert     rounded_avg(0, 2) == -1\nassert     rounded_avg(0, 1) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rounded_avg(1, 10) == 5\nassert     rounded_avg(1, 1) == 1\nassert     rounded_avg(1, 0) == -1\nassert     rounded_avg(1, 100) == -1\nassert     rounded_avg(10, 0) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rounded_avg(2, 3) == 2.5\nassert     rounded_avg(3, 5) == 3.5\nassert     rounded_avg(7, 11) == 8\nassert     rounded_avg(1, 1000000) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rounded_avg(1, 5) == 3\nassert     rounded_avg(1, 2) == 1\nassert     rounded_avg(7, 9) == 6\nassert     rounded_avg(10, 9) == 8\nassert     rounded_avg(10, 9) == 8\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rounded_avg(1, 1) == 0\nassert     rounded_avg(1, 2) == 1\nassert     rounded_avg(1, 3) == 1\nassert     rounded_avg(1, 4) == 1\nassert     rounded_avg(1, 5) == 1\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique_digits([1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique_digits([4,5,6,7,8]) == [4,5,6,7,8]\nassert     unique_digits([1,2,3,4,4,5,6,7,8,8]) == [1,2,3,4,5,6,7,8]\nassert     unique_digits([4,5,6,7,8,9]) == [4,5,6,7,8,9]\nassert     unique_digits([4,5,6,7,8,8,9]) == [4,5,6,7,8,9]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_digits([1, 2, 3, 4]) == [1, 2, 3]\nassert     unique_digits([1, 2, 3, 4, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 6, 7, 8, 9, 10]\nassert     unique_digits([3, 5, 6, 7]) == [3, 5, 6, 7]\nassert     unique_digits([3, 6, 7, 9]) == [3, 6, 7, 9]\nassert     unique_digits([3, 6, 7, 9, 11, 12, 13, 14, 15, 16]) == [3, 6, 7, 9, 11, 12, 13, 14, 15, 16]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_digits([1, 3, 4, 3, 4, 4, 6, 7, 6, 7]) == [1, 3, 4, 6, 7]\nassert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1]\nassert     unique_digits([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == []\nassert     unique_digits([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == []\nassert     unique_digits([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == [4]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique_digits([1,2,3,5,7]) == [1,2,3,5,7]\nassert     unique_digits([2,4,6,8]) == [2,4,6,8]\nassert     unique_digits([9,10,11,12]) == [9,10,11,12]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     unique_digits([2,4,6,8]) == [2,4,6,8]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_digits(range(10)) == [0,1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,3,4,5,7]) == [1,3,4,5,7]\nassert     unique_digits([1,3,4,5,7,8,9]) == [1,3,4,5,7,8,9]\nassert     unique_digits([1,3,4,5,7,8,9,10]) == [1,3,4,5,7,8,9]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique_digits(list(range(1, 11))) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique_digits([1,3,5,7,9]) == [1,3,5,7,9]\nassert     unique_digits([1,2,3,6,7,8]) == [1,2,3,6,7,8]\nassert     unique_digits([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert     unique_digits([10, 11, 12, 13]) == [10]\nassert     unique_digits([10, 10, 10]) == [10]\nassert     unique_digits([100, 101, 102]) == [100, 101, 102]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n(unique_digits([1, 2, 3, 4, 5]) == \n[1, 2, 3, 4, 5])\nassert \n(unique_digits([10, 20, 30, 40, 50]) == \n[])\nassert \n(unique_digits([2, 3, 3, 3, 3, 4, 5]) == \n[2, 3, 4, 5])\nassert \n(unique_digits([1, 1, 1, 1, 1]) == \n[1])\nassert \n(unique_digits([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([11, 22, 33, 44, 55, 66, 77]) == [11, 22, 33, 44, 55, 66, 77]\nassert     unique_digits([77, 77, 77]) == [77, 77, 77]\nassert     unique_digits([77, 77, 77, 77]) == [77, 77, 77, 77]\nassert     unique_digits([]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([5, 5, 6, 7, 7]) == [5, 6, 7]\nassert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique_digits([5, 5, 6, 7]) == [5, 6, 7]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     by_length([4, 3, 6, 5, 8, 7, 9]) == \"4857\"\nassert     by_length([7, 3, 4, 6, 5, 8, 2]) == \"65432\"\nassert     by_length([9, 3, 8, 7, 4, 5, 6, 2]) == \"987654\"\n\ndef digit_sum(x):\n    \"\"\"\n    Given a positive integer, compute the sum of the digits of the number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef group_by_age(persons):\n    \"\"\"\n    Group all of the students in a list by their age, in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == \"Nine Six Seven Eight Five Four Three Two One\"\nassert     by_length([4,3,2,1]) == \"One Two Three Four\"\nassert     by_length([0,9,8,7,6,5,4,3,2,1]) == \"One Nine Two Eight Seven Six Five Four Three Two One\"\nassert     by_length([0,0,1,2,3,4,5,6,7,8,9]) == \"One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One One OneOne One\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     by_length([1, 3, 4, 2, 5, 6, 7, 8, 9]) == [\n                        \"One\", \"Three\", \"Four\", \"Two\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n                    ]\nassert     by_length([5, 7, 8, 9, 1, 3, 4, 2]) == [\n                        \"Five\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Three\", \"Four\", \"Two\"\n                    ]\nassert     by_length([9, 3, 4, 1, 6, 8, 2, 7, 5]) == [\n                        \"Nine\", \"Three\", \"Four\", \"One\", \"Six\", \"Eight\", \"Two\", \"Seven\", \"Five\"\n                    ]\nassert     by_length([9, 5, 3, 1, 4, 7, 8, 6, 2]) == [\n                        \"Nine\", \"Five\", \"Three\", \"One\", \"Four\", \"Seven\", \"Eight\", \"Six\", \"Two\"\n                    ]\nassert     by_length([9, 2, 5, 4, 7, 8, 1, 3, 6]) == [\n                        \"Nine\", \"Two\", \"Five\", \"Four\", \"Seven\", \"Eight\", \"One\", \"Three\", \"Six\"\n                    ]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     by_length([\"Five\",\"Four\",\"Three\",\"Two\",\"One\",\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Five\"])    ==    [ \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\"]\nassert     by_length([\"Five\",\"Four\",\"Three\",\"Two\",\"One\",\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Seven\"])    ==    [ \"Seven\", \"Seven\", \"Six\", \"Five\", \"Eight\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\"]\nassert     by_length([\"Five\",\"Four\",\"Three\",\"Two\",\"One\",\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Nine\"])    ==    [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Five\"]\nassert     by_length([\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"])    ==     [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Five\"]\nassert     by_length([\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\",\"Ten\"])    ==     [\"Ten\", \"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Five\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     by_length(range(0,10)) == [\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"]\nassert     by_length([1,3,7,4,5,6,8,9,2,10,1]) == [\"One\",\"Four\",\"Seven\",\"Five\",\"Six\",\"Two\",\"Eight\",\"Three\",\"Nine\",\"Ten\",\"One\"]\nassert     by_length([1,2,3,4,5,6,7,8,9,0]) == [\"Zero\",\"Eight\",\"Nine\",\"Seven\",\"Six\",\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]\n\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     by_length([0,1,2,3,4,5,6,7,8,9]) == \"One\", \"1st test\"\nassert     by_length([0,1,2,3,4,5,6,7,8,9]) == \"One\", \"2nd test\"\nassert     by_length([0,2,2,4,3,3,5,4,2,1]) == \"One\", \"3rd test\"\nassert     by_length([0,9,8,7,6,5,4,3,2,1]) == \"One\", \"4th test\"\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) >= 2:\n        arr = map(int, sys.argv[1:])\n        print by_length(arr)\n    else:\n        print \"Usage: {} array\".format(sys.argv[0])\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     by_length([2,1,1,1,1,1,1,1,1,1,1]) == \"OneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOneOne\"\nassert     by_length([5,1,4,2,2,3,4,3,5,5,5]) == \"OneTwoFourTwoThreeFiveFiveOneTwoFourTwoThreeThreeFiveFiveOneTwo\"\nassert     by_length([9,9,9,9,9,9,9,9,9,9]) == \"NineNineNineNineNineNineNineNineNineNineNineNineNineNineNineNineNine\"\nassert     by_length([1,2,3,4,5,6,7,8,9,10]) == \"OneTwoThreeFourFiveSixSevenEightNineTen\"\nassert     by_length([2,2,3,3,3,4,4,4,4,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef by_length_alt(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1,2]\nassert     f(3) == [1,2,6]\nassert     f(4) == [1,2,6,24]\nassert     f(5) == [1,2,6,24,120]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     f(0)        == []\nassert     f(1)        == [1]\nassert     f(2)        == [1, 1]\nassert     f(3)        == [1, 1, 2]\nassert     f(4)        == [1, 1, 2, 6]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     f(1)    == [1]\nassert     f(2)    == [1, 2]\nassert     f(3)    == [1, 2, 6]\nassert     f(4)    == [1, 2, 6, 24]\nassert     f(5)    == [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [f(i) == int(math.factorial(i)) for i in range(100)]\nassert     [f(i) == int(1 + sum([i for i in range(1, i+1)])) for i in range(100)]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [f(1), f(2), f(3), f(4), f(5), f(6), f(7)] == [1, 2, 6, 24, 120, 720, 5040]\n\ndef main():\n    print(f(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10) == (2, 2)\nassert     even_odd_palindrome(11) == (3, 1)\nassert     even_odd_palindrome(7) == (3, 1)\nassert     even_odd_palindrome(9) == (4, 0)\nassert     even_odd_palindrome(101) == (8, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (5, 1) == even_odd_palindrome(5)\nassert     (6, 2) == even_odd_palindrome(6)\nassert     (7, 0) == even_odd_palindrome(7)\nassert     (8, 1) == even_odd_palindrome(8)\nassert     (10, 2) == even_odd_palindrome(10)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(10) == (4, 2)\nassert     even_odd_palindrome(100) == (25, 25)\nassert     even_odd_palindrome(200) == (25, 25)\nassert     even_odd_palindrome(1000) == (89, 89)\nassert     even_odd_palindrome(10000) == (24, 24)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(100) == (2, 2)\nassert     even_odd_palindrome(200) == (3, 3)\nassert     even_odd_palindrome(100000) == (9, 1)\nassert     even_odd_palindrome(0) == (0, 0)"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(2) == (1,1)\nassert     even_odd_palindrome(4) == (2,2)\nassert     even_odd_palindrome(6) == (3,2)\nassert     even_odd_palindrome(14) == (6,4)\nassert     even_odd_palindrome(16) == (8,4)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(10) == (2, 1)\nassert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(100) == (41, 7)\nassert     even_odd_palindrome(101) == (42, 8)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef longest_palindrome(s):\n    \"\"\"\n    Given a string s, find the longest palindromic substring in it.\n    You may assume that the maximum length of s is 1000.\n\n    Note:\n        1. return the substring as a string, not as a list.\n        2. You may assume that s contains only lowercase alphabets.\n        3. Do not use any built-in library function (i.e., str) and implement your own function.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(3) == (2, 1)\nassert     even_odd_palindrome(4) == (3, 2)\nassert     even_odd_palindrome(5) == (4, 2)\nassert     even_odd_palindrome(6) == (5, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(10) == (3, 3)\nassert     even_odd_palindrome(5) == (1, 1)\nassert     even_odd_palindrome(100) == (55, 56)\nassert     even_odd_palindrome(101) == (56, 57)\nassert     even_odd_palindrome(499) == (251, 252)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(100) == (1, 99)\nassert     even_odd_palindrome(123) == (2, 121)\nassert     even_odd_palindrome(999) == (5, 999)\nassert     even_odd_palindrome(999) == (5, 998)\nassert     even_odd_palindrome(999) == (7, 999)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_nums([-123, 123]) == 1\nassert count_nums([-234, 234]) == 2\nassert count_nums([-200, -100, -50]) == 0\nassert count_nums([123, 234, -123, -234, -1234]) == 4\nassert count_nums([2, -3, 1]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1]) == 0\nassert     count_nums([1, 2]) == 1\nassert     count_nums([-1, 2]) == 1\nassert     count_nums([-1, -2]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_nums([123, 456, -9]) == 2\nassert     count_nums([123, -456, -9]) == 1\nassert     count_nums([123, 456, -9, -456, -9]) == 3\nassert     count_nums([-123, -456, -9, -456, -9]) == 1\nassert     count_nums([1, 2, 3, 4, 5, 6]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_nums([1, 2, 3]) == 2\nassert     count_nums([1, 2, -3]) == 1\nassert     count_nums([-123, 5]) == 2\nassert     count_nums([-123, 5, -4]) == 1\nassert     count_nums([-123, -4]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_nums([1,2,3]) == 1\nassert     count_nums([-1,0,1,2,3,4]) == 3\nassert     count_nums([]) == 0\nassert     count_nums([1,2,3,-3,4]) == 2\nassert     count_nums([-1,-2,-3,-4,-5]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_nums([1, 2, 3, 4, -1, -2, -3, -4]) == 3\nassert     count_nums([-1, -2, -3, -4]) == 4\nassert     count_nums([1, 2, 3, 4]) == 0\nassert     count_nums([-1, -2, -3, -4, 0]) == 5\nassert     count_nums([-1, -2, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1]) == 1\nassert     count_nums([0]) == 1\nassert     count_nums([1, 2]) == 1\nassert     count_nums([2, 0]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_nums([-1, -2, 3, 4]) == 2\nassert     count_nums([-1, -2, -3, -4]) == 2\nassert     count_nums([1,2,3,4]) == 0\nassert     count_nums([]) == 0\nassert     count_nums([-1, -1, -1, -1]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([-1, 1]) == 1\nassert     count_nums([1, -2, 3, -4]) == 2\nassert     count_nums([1, -2, 3, -4, -5]) == 1\nassert     count_nums([-1, 0, 1, 0]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_nums([4, 3, 2, 3, 5, 6, 7, 8, 9, -1, -7, -2, -9]) == 6\nassert     count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\nassert     count_nums([]) == 0\nassert     count_nums([0]) == 1\nassert     count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     move_one_ball([2,1,3,4,5]) == True\nassert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([1,2,3,4,5,7]) == False\nassert     move_one_ball([1,2,3,4,5,6]) == True\nassert     move_one_ball([]) == True"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     True == move_one_ball([1, 2, 3, 4, 5])\nassert     True == move_one_ball([1, 2, 3, 4, 5, 6])\nassert     False == move_one_ball([1, 1, 1, 1])\nassert     False == move_one_ball([1, 2, 3, 4, 4, 5])\nassert     True == move_one_ball([3, 1, 2, 4, 5])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     move_one_ball( [-1, 4, 2, 3] ) == True\nassert     move_one_ball( [1, 4, 2, 3] ) == False\nassert     move_one_ball( [3, 2, 4, 1] ) == True\nassert     move_one_ball( [3, 2, 1, 4] ) == False\nassert     move_one_ball( [4, 3, 1, 2] ) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     move_one_ball([1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10]) == True\nassert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([2,3,4,5]) == True\nassert     move_one_ball([1,2,3,4,5,6]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     move_one_ball([]) == True\nassert     move_one_ball([0]) == True\nassert     move_one_ball([1,2]) == True\nassert     move_one_ball([1,3,4,5,6,7,8]) == True\nassert     move_one_ball([1,3,4,5,6,7,8]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     move_one_ball([0, 1, 2, 3]) == True\nassert     move_one_ball([1, 0, 3, 2]) == True\nassert     move_one_ball([1, 2, 3, 0]) == False\nassert     move_one_ball([1, 3, 0, 2]) == False\nassert     move_one_ball([2, 1, 3, 0]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (move_one_ball( [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50] ) \n         == True)\nassert     (move_one_ball( [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50] ) \n         == False)\nassert     (move_one_ball( [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50] ) \n         == True)\nassert     (move_one_ball( [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50] ) \n         == False)\nassert     (move_one_ball( [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50] ) \n         == True)\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([1,1,2,3,4]) == False\nassert     move_one_ball([3,2,1]) == False\nassert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     move_one_ball([2, 1, 3, 4, 5]) is True\nassert     move_one_ball([2, 3, 1, 4, 5]) is False\nassert     move_one_ball([]) is True\nassert     move_one_ball([1]) is True\nassert     move_one_ball([1, 2, 3, 4, 5]) is False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     move_one_ball(['d','a','b','c']) == True\nassert     move_one_ball(['a','b','c']) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball(['a','b','c','d']) == True\n\ndef sort_array(arr):\n    \"\"\"Given an array 'arr' of N integers, determine if it is possible to get\n    an array sorted in non-decreasing order by performing at most 2 shifts \n    to the array. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 3, 4], [4, 3, 2, 1]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [4, 3, 2, 1, 5]) == \"NO\"\nassert     exchange([1, 2, 3], [4, 5, 6]) == \"NO\"\nassert     exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"NO\"\nassert     exchange([1, 3, 5, 7], [2, 4, 6, 8]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     exchange([1, 2, 3], [2, 1, 3]) == \"YES\"\nassert     exchange([1, 3, 5], [3, 5, 1]) == \"NO\"\nassert     exchange([3, 1, 5], [3, 5, 1]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [3, 1, 4, 5]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [3, 1, 5, 4]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     exchange([1, 2, 3], [4, 5, 6]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [4, 5, 6]) == \"YES\"\nassert     exchange([0, 0], [0]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert     exchange([2, 1, 1], [2, 1, 1]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [4, 3, 5, 1, 2]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]) == \"NO\"\nassert     exchange([4, 5, 3, 2, 1], [1, 2, 3, 4, 5]) == \"YES\"\nassert     exchange([4, 5, 3, 2, 1], [4, 5, 3, 2, 1]) == \"YES\"\nassert     exchange([4, 5, 3, 2, 1], [4, 5, 3, 2, 1]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [3, 2, 1, 4, 5]) == \"YES\"\nassert     exchange([1, 1, 1, 1, 1], [1, 1, 1, 1, 1]) == \"NO\"\nassert     exchange([3, 4, 2, 1], [2, 1, 3, 4, 5]) == \"YES\"\nassert     exchange([3, 5, 2, 1], [2, 1, 3, 4, 5]) == \"NO\"\n\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     exchange([1, 1, 2, 3, 4], [1, 5, 3, 2, 4]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [1, 5, 3, 2, 4]) == \"NO\"\nassert     exchange([3, 4, 5, 6, 7], [2, 3, 4, 5, 6]) == \"NO\"\nassert     exchange([1, 1, 2, 3, 4], [1, 5, 3, 2, 4]) == \"YES\"\nassert     exchange([1, 1, 1, 2, 3, 4], [1, 5, 3, 2, 4]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     exchange([1,2,3,4,5,6], [3,6,5,4,2,1]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [3,6,5,4,2,7]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [3,6,5,4,2,8]) == \"NO\"\nassert     exchange([1,2,3,4,5,6], [3,6,5,4,2,10]) == \"NO\"\nassert     exchange([1,2,3,4,5,6], [3,6,5,4,2,100]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     exchange([1,3,5,7], [2,4,6,8]) == \"NO\"\nassert     exchange([2,4,6,8], [1,3,5,7]) == \"YES\"\nassert     exchange([3,5,7,9], [2,4,6,8]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     exchange([1,2,3,4,5,6,7,8,9], [2,3,6,7,8,9,10]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [2,3,6,7,8,9,10]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,3,6,7,8,9,10]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     histogram(\"\") == {}\nassert     histogram(\"a\") == {\"a\": 1}\nassert     histogram(\"aaa\") == {\"a\": 3}\nassert     histogram(\"aaabbbbcccddd\") == {\"a\": 3, \"b\": 2, \"c\": 4, \"d\": 2}\nassert     histogram(\"aaabbbcccddd\") == {\"a\": 3, \"b\": 2, \"c\": 4, \"d\": 2}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\nassert     histogram(\"z y x x z\") == {'z': 2, 'y': 1, 'x': 2}\nassert     histogram(\"c d e f g h i j k l m n o p q r s t u v w x y z\") == {'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     histogram('a b c d e f') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert     histogram('a a a b d d') == {'a': 3, 'b': 1, 'd': 2}\nassert     histogram('a b c d e e e') == {'a': 5, 'b': 2, 'c': 1, 'd': 2, 'e': 3}\nassert     histogram('a b c d e e d') == {'a': 5, 'b': 2, 'c': 1, 'd': 3}"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef anagram(test):\n    \"\"\"Given two strings, return a list containing the indexes of all the characters\n    of the second string that are an anagram of the first string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     histogram(\"babbb\") == {\"b\": 2}\nassert     histogram(\"zccz\") == {\"c\": 1}\nassert     histogram(\"dvdf\") == {\"d\": 1, \"v\": 1}\nassert     histogram(\"abcddcba\") == {\"a\": 3, \"b\": 1, \"c\": 1, \"d\": 1}\nassert     histogram(\"zvfvf\") == {\"v\": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     histogram(\"a b c d e\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\nassert histogram(\"aa bb cc dd ee\") == {'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2}\nassert histogram(\"aa bb ccc ddddd eeee\") == {'a': 3, 'b': 2, 'c': 3, 'd': 1, 'e': 3}\nassert histogram(\"a bb ccc ddddd eeee fffgghhhi\") == {'a': 2, 'b': 2, 'c': 3, 'd': 1, 'e': 3, 'f': 1, 'g': 1, 'h': 1, 'i': 1}\nassert histogram(\"\") == {}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     histogram(\"a b c d e f g\")    == {\n                'a': 1,\n                'b': 1,\n                'c': 1,\n                'd': 1,\n                'e': 1,\n                'f': 1,\n                'g': 1\n            }\nassert histogram(\"a a a b b c c d d\") == {\n                'a': 3,\n                'b': 2,\n                'c': 3,\n                'd': 2,\n            }\nassert histogram(\"a b c d e\") == {\n                'a': 1,\n                'b': 1,\n                'c': 1,\n                'd': 1,\n                'e': 1,\n            }\nassert histogram(\"a b c d e f\") == {\n                'a': 1,\n                'b': 1,\n                'c': 1,\n                'd': 1,\n                'e': 1,\n                'f': 1,\n            }\nassert histogram(\"a b c d\") == {\n                'a': 1,\n                'b': 1,\n                'c': 1,\n                'd': 1,\n            }\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     histogram('abc') == {'a': 1, 'b': 1, 'c': 1}\nassert     histogram('abr') == {'a': 2, 'b': 1, 'r': 1}\nassert     histogram('abra') == {'a': 3, 'b': 1, 'r': 2, 'a': 1}\nassert     histogram('abra cadabra') == {'a': 5, 'b': 2, 'r': 3, 'c': 1, 'd': 1, 'a': 2}\nassert     histogram('aaaaaaaaa') == {'a': 10}"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     histogram('a a a b b c c') == {'a': 3, 'b': 2, 'c': 2}\nassert     histogram('a b c d e f g a b d e f g a b d e f g a b d e f g a b d e f g') == {'a': 10, 'b': 10, 'c': 10, 'd': 6, 'e': 9, 'f': 9, 'g': 4}"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     histogram('a b c') == {'a':1,'b':1,'c':1}\nassert     histogram('a b c c') == {'a':3,'b':2,'c':1}\nassert     histogram('a b b b') == {'a':3,'b':2}\nassert     histogram('a a a a') == {'a':4}\nassert     histogram('') == {}\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_delete('cde','de') == ('cde',True)\nassert reverse_delete('ct','tt') == ('ct',False)\nassert reverse_delete('abcde','ad') == ('aebc',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     reverse_delete(\"radar\",'ad') == ('erad', True)\nassert     reverse_delete(\"radar\",'adr') == ('rad', False)\nassert     reverse_delete(\"radar\",'radar') == ('rad', True)\nassert     reverse_delete(\"radar\",'radara') == ('rad', False)\nassert     reverse_delete(\"radar\",'r') == ('ara', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_delete(\"abcd\",\"cdab\") == ('bacd', True)\nassert     reverse_delete(\"abcd\",\"dcba\") == ('dcab', False)\nassert     reverse_delete(\"123456789\",\"1234567\") == ('987654321', True)\nassert     reverse_delete(\"1234567\",\"1234567\") == ('', True)\nassert     reverse_delete(\"12ab\",\"ab12\") == ('', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_delete('water','er') == ('terwr',True)\nassert     reverse_delete('a','a') == ('a',True)\nassert     reverse_delete('','') == ('',True)\nassert     reverse_delete('','') == ('',True)\nassert     reverse_delete('a','a') == ('a',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_delete('abc','abc')==('', True)\nassert     reverse_delete('ac','ab')==('', False)\nassert     reverse_delete('','a')==('a', True)\nassert     reverse_delete('','a')==('', True)\nassert     reverse_delete('','c')==('', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_delete('anana', 'ana') == ('nanan', False)\nassert     reverse_delete('anana', 'na') == ('nan', True)\nassert     reverse_delete('abcd', 'a') == ('bcd', False)\nassert     reverse_delete('abcdefg', 'abc') == ('defg', True)\nassert     reverse_delete('abcd', 'c') == ('bcd', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_delete(\"abc\",\"c\") == (\"c\", True)\nassert     reverse_delete(\"ac\",\"c\") == (\"ac\", True)\nassert     reverse_delete(\"acb\",\"c\") == (\"acb\", False)\nassert     reverse_delete(\"a\",\"c\") == (\"a\", False)\nassert     reverse_delete(\"a\",\"a\") == (\"a\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_delete('acbc','bc') == ('ac', True), \"1st test\"\nassert     reverse_delete('radar','dr') == ('rad', False), \"2nd test\"\nassert     reverse_delete('a','a') == ('', True), \"3rd test\"\nassert     reverse_delete('','a') == ('', True), \"4th test\"\nassert     reverse_delete('aa','a') == ('aa', True), \"5th test\""
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_delete('a', 'a') == ('', True)\nassert     reverse_delete('ab', 'ab') == ('', True)\nassert     reverse_delete('abb', 'bbb') == ('a', True)\nassert     reverse_delete('abba', 'bab') == ('ba', True)\nassert     reverse_delete('abbc', 'bc') == ('a', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_delete('abcd', 'abcd') == ('dcba', True),    \"Test 1\"\nassert     reverse_delete('abc', 'abc') == ('abc', True),        \"Test 2\"\nassert     reverse_delete('', '') == ('', True),                    \"Test 3\"\nassert     reverse_delete('', 'abc') == ('', False),                \"Test 4\"\nassert     reverse_delete('abc', '') == ('abc', False),                \"Test 5\"\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_count([\"2222\",\"2\",\"12\",\"12\",\"3\"]) == [3,1,1,1,0]\nassert     odd_count([\"2222\",\"2\",\"12\",\"12\",\"3\",\"12\"]) == [3,1,1,1,0,1]\nassert     odd_count([\"2222\",\"2\",\"12\",\"12\",\"3\",\"12\",\"12\"]) == [3,1,1,1,0,1,1]\nassert     odd_count([\"2222\",\"2\",\"12\",\"12\",\"3\",\"12\",\"12\",\"12\",\"12\"]) == [3,1,1,1,0,1,1,1,1]\nassert     odd_count([\"2222\",\"2\",\"12\",\"12\",\"3\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\",\"12\"]) == [3,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_count(['11111111111111111111', '1010101010101010101', '01111111110101010101', '1000101010101010101', '01010101010101010101', '1010101010101010101', '1010101010101010101']) == [12, 6, 8, 8, 6, 8, 8]\nassert     odd_count(['11111111111111111111', '1010101010101010101', '01111111110101010101', '1000101010101010101', '01010101010101010101', '1010101010101010101', '1010101010101010101']) == [12, 6, 8, 8, 6, 8, 8]\nassert     odd_count(['01010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101']) == [8, 8, 8, 8, 8, 8, 8]\nassert     odd_count(['01010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101']) == [8, 8, 8, 8, 8, 8, 8]\nassert     odd_count(['1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101', '1010101010101010101']) == [8, 8, 8, 8, 8, 8, 8]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         '1122' == odd_count(['1','2','22','222'])\nassert         '5' == odd_count(['5'])\nassert         '0' == odd_count(['0'])\nassert         '23' == odd_count(['2','3','23'])\nassert         '3' == odd_count(['34','24','235'])\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1] == odd_count(['1'])\nassert     [2, 1] == odd_count(['2', '1'])\nassert     [2, 1, 1] == odd_count(['2', '1', '1'])\nassert     [4, 1, 3, 2] == odd_count(['4', '1', '3', '2'])\nassert     [2, 2, 1, 1] == odd_count(['2', '2', '1', '1'])\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [1, 2, 2, 3, 4, 5, 6] == odd_count(['1234567', '112345678', '123456789'])\nassert     [1, 2, 2, 3, 4, 5, 6, 6] == odd_count(['123456', '123456', '12345678'])\nassert     [1, 2, 2, 3, 4, 5, 6, 7] == odd_count(['123456789', '12345678', '1234567'])\nassert     [1, 2, 2, 3, 4, 5, 6, 7, 8] == odd_count(['1234567890123', '1234567890123', '1234567890123'])\nassert     [1, 2, 2, 3, 4, 5, 6, 7, 8, 9] == odd_count(['12345678901234567890123', '12345678901234567890123', '12345678901234567890123'])\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     odd_count([\"11\",\"23\",\"12\"]) == [0, 2, 2]\nassert     odd_count([\"1\",\"1\",\"2\"]) == [1,0,0]\nassert     odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == [1, 1, 3, 1, 1, 0]\nassert     odd_count([\"\",\"\",\"\",\"\"]) == [0, 0, 0, 0]\n\n\ndef odd_count_old(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    return [len([j for j in i if int(j)%2 == 1]) for i in lst]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_count([\"123\", \"456\", \"789\"]) == [1, 2, 3]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == [1, 1, 1, 1, 1, 1]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [1, 2, 3, 1, 1, 1, 1, 1, 1]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"]) == [1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     odd_count([\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [18, 8, 16, 7, 5, 6, 3, 9, 2, 11, 13, 14, 9, 7, 2, 6, 3, 3, 8, 5, 7, 13, 2, 4, 4, 1, 2, 3, 4, 11, 8, 1, 3, 3, 7, 7, 3, 7, 9, 2, 12, 13, 7, 1, 1, 1, 6, 6, 4, 2, 1, 1, 1, 3, 2, 3, 3, 5, 3, 5, 2, 7, 5, 2, 3, 5, 9, 4, 1, 4, 7, 6, 1, 2, 6, 5, 4, 7, 2, 6, 7, 6, 4, 4, 2, 2, 2, 3, 3, 1, 2, 5, 2, 4, 5, 3, 4, 5, 3, 1, 2, 5, 5, 6, 4, 5, 3, 6, 6, 3, 3, 5, 5, 1, 1, 1, 4, 1, 4, 4, 3, 1, 1, 1, 2, 2, 1, 3, 1, 1, 2, 4, 1, 1, 2, 4, 5, 3, 1, 4, 4, 4, 4, 2, 2, 4, 2, 3, 4, 6, 3, 4, 4, 4, 2, 4, 3, 5, 3, 3, 4, 1, 2, 1, 2, 1, 4, 2, 3, 5, 3, 5, 1, 1, 1, 1, 1, 2, 3, 3, 5, 1, 1, 3, 5, 3, 2, 4, 4, 1, 1, 3, 2, 3, 2, 3, 3, 3, 1, 1, 2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 1, 1, 2, 2, 3, 1, 4, 2, 3, 3, 1, 3, 4, 1, 1, 5, 2, 2, 3, 1, 4, 2, 3, 3, 2, 4, 5, 5, 5, 1, 2, 1, 2, 3, 3, 2, 1, 1, 2, 4, 5, 4, 5, 4, 4, 2, 4, 1, 3, 1, 4, 4, 3, 3, 5, 5, 5, 1, 3, 4, 4, 1, 2, 1, 1, 1, 1, 2, 2, 3, 4, 3, 3, 5, 1, 2, 1, 3, 1, 1, 5, 1, 2, 1, 2, 4, 4, 4, 5, 1, 2, 2, 1, 5, 1, 1, 1, 1, 3, 1, 1, 5, 1, 2, 1, 1, 2, 1, 1, 3, 1, 2, 1, 1, 1, 4, 1, 5, 2, 2, 4, 3, 1, 3, 1, 2, 5, 3, 3, 3, 3, 2, 1, 2, 3, 5, 2, 1, 2, 1, 4, 4, 1, 1, 2, 1, 2, 3, 4, 1, 1, 4, 1, 5, 2, 2, 5, 4, 4, 3, 4, 1, 5, 4, 4, 4, 4, 5, 1, 2, 2, 1, 2, 3, 4, 1, 4, 2, 2, 4, 1, 1, 5, 1, 1, 5, 4, 3, 4, 4, 5, 5, 3, 1, 5, 5, 3, 1, 3, 1, 3, 1, 3, 1, 2, 3, 4, 1, 3, 1, 1, 3, 1, 2, 1, 3, 5, 3, 3, 4, 1, 5, 4, 3, 3, 1, 5, 5, 4, 1, 1, 5, 4, 3, 5, 2, 1, 4, 5, 5, 1, 3, 1, 3, 2, 5, 5, 5, 5, 1, 1, 4, 4, 1, 4, 3, 3, 1, 2, 1, 5, 2, 4, 1, 1, 1, 4, 4, 1, 1, 5, 2, 1, 1, 4, 3, 4, 3, 4, 5, 5, 2, 1, 1, 1, 1, 1, 2, 1, 4, 1, 3, 1, 1, 1, 1, 5, 1, 3, 1, 1"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     odd_count(['1', '2', '3', '4', '5', '6']) == [1, 1, 1, 1, 1, 1]\nassert     odd_count(['12', '21', '4', '16', '25', '26']) == [1, 1, 1, 1, 1, 1]\nassert     odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9']) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     odd_count(['2', '12', '212', '22', '22', '2', '212', '2']) == [2, 1, 1, 1, 1, 1, 1, 1]\nassert     odd_count(['3', '11', '11', '15', '19', '11', '15', '19']) == [1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     odd_count([\"123456\", \"123456\", \"111111\", \"100100\", \"101001\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\"]) == [5, 4, 11, 11, 6, 8, 8, 6, 8, 8, 6, 8, 8, 6, 8]\nassert     odd_count([\"123456\", \"123456\", \"111111\", \"100100\", \"101001\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\"]) == [5, 4, 11, 11, 6, 8, 8, 6, 8, 8, 6, 8, 8, 6, 8]\nassert     odd_count([\"101001\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\"]) == [6, 6, 9, 6, 6, 9, 6, 6, 9, 6, 6, 9, 6, 6, 9]\nassert     odd_count([\"101001\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\"]) == [6, 6, 9, 6, 6, 9, 6, 6, 9, 6, 6, 9, 6, 6, 9]\nassert     odd_count([\"101001\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\", \"100100\", \"100101\"]) == [6, 6, 9, 6, 6, 9, 6, 6, 9, 6, 6, 9, 6, 6, 9]\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1, 3, 4, 1, 5]) == 3\nassert minSubArraySum([1, 3, 4, 1, 5, 3]) == 4\nassert minSubArraySum([1, 3, 4, 1, 5, 7]) == 7\nassert minSubArraySum([1, 3, 4, 1, 5, 7, 2]) == 7\nassert minSubArraySum([1, 3, 4, 1, 5, 7, 2, 3]) == 7\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minSubArraySum([1,2,3,4,5]) == 6\nassert     minSubArraySum([1,2,3,1,5]) == 6\nassert     minSubArraySum([1,2,3,4,5,1,2]) == 1\nassert     minSubArraySum([1,2,3,4,5,6]) == 12\nassert     minSubArraySum([1,2,3,4,5,6,3]) == 12\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minSubArraySum([2,3,10,4,10,5,1]) == 10\nassert     minSubArraySum([3,4,5]) == 6\nassert     minSubArraySum([-1, 3, 4, -2, 8]) == -1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minSubArraySum([1,4,7,10]) == 11\nassert     minSubArraySum([1,4]) == 5\nassert     minSubArraySum([]) == 0\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1,1,1]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minSubArraySum([1, 2, 3, 4, 5]) == 1\nassert     minSubArraySum([-3, -2, -1, 2, 3]) == 0\nassert     minSubArraySum([1, -2, -3, 4, 5]) == -3\nassert     minSubArraySum([1, -2, 3, -4, 5]) == 1\nassert     minSubArraySum([-1, -1, -2, -3, -4]) == -1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minSubArraySum([1,3,5,6,7]) == 8\nassert     minSubArraySum([1,2,3,4]) == 4\nassert     minSubArraySum([1,4,4]) == 4\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minSubArraySum([1, 4, 2, 3]) == 3\nassert     minSubArraySum([1, 2, 3]) == 2\nassert     minSubArraySum([1, 1, 1]) == 1\nassert     minSubArraySum([1, 1, 1, 1]) == 1\nassert     minSubArraySum([1, 1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minSubArraySum([3, 4, 5]) == 11,     'expected 11'\nassert     minSubArraySum([1, 2, 3]) == 6,     'expected 6'\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 10,    'expected 10'\nassert     minSubArraySum([1, 2, 3, 4, 5, 6]) == 16,    'expected 16'\nassert     minSubArraySum([1, 2, 3, 4, 5, 6, 7]) == 15,    'expected 15'\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_fill([[0, 0, 0], [0, 0, 1], [1, 1, 0]], 1) == 1\nassert     max_fill([[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0]], 1) == 2\nassert     max_fill([[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0]], 1) == 1\nassert     max_fill([[0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0]], 2) == 3\n\ndef max_water(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Once the buckets are empty, return the number of times you need to lower the buckets.\n    \n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_fill([[0, 1, 0], \n                [0, 0, 1], \n                [1, 0, 0]], 3) == 3,'should be 3'\nassert     max_fill([[0, 1, 0], \n                [0, 0, 1], \n                [1, 0, 0], \n                [0, 1, 0], \n                [1, 0, 0]], 5) == 4,'should be 4'\nassert     max_fill([[0, 1, 1, 0], \n                [0, 0, 0, 0], \n                [1, 1, 1, 1], \n                [1, 1, 1, 0], \n                [0, 0, 0, 1]], 3) == 1,'should be 1'\nassert     max_fill([[0, 1, 0], \n                [0, 0, 1], \n                [1, 0, 0], \n                [0, 1, 0], \n                [1, 0, 0]], 5) == 5,'should be 5'\nassert     max_fill([[0, 1, 0], \n                [0, 0, 1], \n                [1, 0, 0], \n                [0, 1, 0], \n                [1, 0, 0]], 5) == 5,'should be 5'\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_fill([[0,1],[1,1],[1,0]], 2) == 2\nassert     max_fill([[0,0],[0,1],[1,1]], 2) == 2\nassert     max_fill([[0,0,1,1],[1,1,1,1],[1,0,1,0]], 2) == 3\nassert     max_fill([[0,1,1,1],[1,1,1,1],[1,0,0,0]], 2) == 2\nassert     max_fill([[0,1,1,1],[1,1,1,1],[1,0,0,0]], 3) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_fill(\n                [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]],\n                1\n                ) == 0\nassert     max_fill(\n                [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                 [0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_fill([[0,1], [1,0]], 1) == 0\nassert     max_fill([[0,1], [1,0]], 2) == 1\nassert     max_fill([[0,1], [1,0]], 3) == 2\nassert     max_fill([[0,1], [1,0]], 4) == 3\nassert     max_fill([[0,1], [1,0]], 5) == 4\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         max_fill([[1,0],[1,1]], 1) == 1\nassert         max_fill([[1,0],[1,1]], 2) == 0\nassert         max_fill([[1,1],[1,0]], 1) == 1\nassert         max_fill([[1,1],[1,0]], 2) == 0\nassert         max_fill([[1,1],[1,1]], 2) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_fill([\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0]\n    ], 4) == 3\nassert     max_fill([\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0]\n    ], 6) == 2\n\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_fill([[0]], 0) == 0\nassert     max_fill([[0]*2], 0) == 0\nassert     max_fill([[1]], 0) == 0\nassert     max_fill([[1]*2], 0) == 0\nassert     max_fill([[0, 1]], 0) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef max_fill_brute(grid, capacity):\n    \"\"\"\n    brute force\n    O(n^2)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef max_fill2(grid, capacity):\n    pass\n\ndef test_max_fill():\n    assert max_fill([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0],\n    [0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1],\n    [0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1],\n    [0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1],\n    [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1]], 2) == 5\n    assert max_fill2([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 0],\n    [0, 1, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0, 1, 0, 1, 1],\n    [0, 1, 1, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 1, 1, 1, 1, 1, 1],\n    [0, 1, 1, 0, 1, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 0, 1],\n    [0, 1, 0, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 1, 0, 1, 1]], 2) == 5\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([0,0,1,1,1,1,2,2,2,2]) == [0,0,1,1,1,1,2,2,2,2]\nassert     sort_array([0,1,2,3,4,5,6,7,8]) == [0,1,2,3,4,5,6,7,8]\nassert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n\nprint \"All tests passed"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([10,10,10]) == [10,10,10]\nassert     sort_array([10,10,10,10]) == [10,10,10,10]\nassert     sort_array([10,10,10,10,10,10]) == [10,10,10,10,10,10]\nassert     sort_array([10,10,10,10,10,10,10,10,10,10,10]) == [10,10,10,10,10,10,10,10,10,10,10]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9] == sort_array([0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9])\nassert     [0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9] == sort_array([0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10])\nassert     [0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9] == sort_array([0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10])\nassert     [0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9] == sort_array([0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11])\nassert     [0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9] == sort_array([0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11])\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([10, 2, 5, 7, 1, 4, 8, 6]) == [1, 2, 4, 6, 8, 7, 5, 10]\nassert     sort_array([10, 2, 5, 7, 1, 4, 8]) == [1, 2, 4, 5, 7, 8, 10]\nassert     sort_array([10, 2, 5, 7, 1, 4, 8, 6]) == [1, 2, 4, 6, 8, 7, 5, 10]\nassert     sort_array([10, 2, 5, 7, 1, 4, 8, 6, 9, 11]) == [1, 2, 4, 6, 8, 7, 9, 10, 11, 5]\nassert     sort_array([]) == []\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([\"111\", \"011\", \"011\"]) == [\"011\", \"111\", \"011\"]\nassert     sort_array([\"101\", \"0\", \"0\"]) == [\"0\", \"0\", \"101\"]\nassert     sort_array([\"011\", \"101\", \"011\"]) == [\"011\", \"101\", \"011\"]\nassert     sort_array([\"0\", \"0\", \"0\"]) == [\"0\", \"0\", \"0\"]\n\n\ndef sort_array_2(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    the number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    n = len(arr)\n    bin_list = [0]*n\n    for i in range(n):\n        bin_list[i] = bin(arr[i])[2:]\n    bin_list.sort(reverse = False)\n    sorted_arr = [0]*n\n    for i in range(n):\n        sorted_arr[i] = int(bin_list[i], 2)\n    return sorted_arr\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert sort_array([0,1]) == [0,1]\nassert sort_array([4,7,12,20]) == [4,7,12,20]\nassert sort_array([8,5,7,3,0,2]) == [0,2,3,5,7,8]\nassert sort_array([0,1,0,1]) == [0,1,0,1]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([2,3,4,7,8,1,0,7,8,6,9]) == [0, 1, 2, 4, 3, 6, 7, 8, 7, 8, 9]\nassert     sort_array([7,8,5,7,9,6,4,9,5,8,7,8,5,5,4,2,1,9]) == [1, 2, 4, 5, 5, 6, 7, 8, 8, 7, 7, 9, 9, 9, 8, 5, 4, 3]\nassert     sort_array([9,8,7,9,8,7,6,9,8,7,9,8,7,6,9]) == [1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9, 9]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([0,1,1]) == [0,1,1]\nassert     sort_array([0,0,1,1]) == [0,0,1,1]\nassert     sort_array([1,1,1,1]) == [1,1,1,1]\nassert     sort_array([1,0,1,1]) == [1,0,1,1]\nassert     sort_array([0,1,2,3]) == [0,1,2,3]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([0,0,2,1,2,1,2,1,1,0]) == [0,0,0,1,1,1,1,2,2,2]\nassert     sort_array([1,2,4,2,2,2,1,2,2,1]) == [1,2,1,2,2,2,2,2,2,2]\nassert     sort_array([1,3,5,2,3,3,3,2,1,0]) == [0,1,2,1,2,3,3,3,3,3]\nassert     sort_array([0,0,1,1,2,2,3,3,3,3,4,5,6,6,6,6,7,7,7,7,7]) == [0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,5,6,6,6,6,7,7,7,7,7]\nassert     sort_array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     select_words('the quick brown fox jumps over the lazy dog', 4) == \\\n            ['quick', 'brown', 'jumps', 'fox', 'lazy', 'dog']\nassert     select_words('this is a test to see if this works', 10) == \\\n            ['test', 'to','see', 'if', 'this', 'works']\nassert     select_words('', 0) == []\nassert     select_words('', 1) == []\nassert     select_words('', 2) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 2) == [\"a\", \"b\", \"c\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 1) == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 4) == [\"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 5) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 8) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     select_words(\"This is an example.\", 4) == [\"an\", \"is\", \"ex\", \"mple\", \"example\"]\nassert     select_words(\"This is an example.\", 8) == []\nassert     select_words(\"\", 0) == []\nassert     select_words(\"This is an example.\", 25) == []\nassert     select_words(\"This is an example.\", 26) == [\"is\", \"an\", \"ex\", \"mple\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3)     == [\"d\", \"h\", \"j\", \"k\", \"n\", \"p\", \"r\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 5)     == [\"b\", \"s\", \"w\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 11)     == [\"s\", \"v\"]\nassert     select_words(\"\", 0)                                             == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     select_words('baa baaa ba baa baaa', 1) == ['baa', 'ba', 'baaa', 'baa']\nassert     select_words('baa baaa ba baa baaa', 2) == ['baa']\nassert     select_words('baa baaa ba baa baaa', 3) == ['baaa']\nassert     select_words('baa baaa ba baa baaa', 4) == ['baaa']\nassert     select_words('baa baaa ba baa baaa', 5) == ['baa', 'baaa']\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     select_words(\" this is an example of a string \", 2)    ==    ['an', 'example','string','string']\nassert     select_words(\"\", 2) == []\nassert     select_words(\"abc\", 0) == []\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 0) == ['fox', 'fox']\nassert     select_words(\"The quick brown fox jumps over the lazy dog\", 2) == ['fox', 'fox', 'jumps', 'fox', 'fox', 'fox']\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     select_words(\"A cat\", 1) == ['cat']\nassert     select_words(\"A cat in the hat\", 2) == ['cat', 'hat']\nassert     select_words(\"A cat in the hat\", 3) == ['hat']\nassert     select_words(\"A cat in the hat\", 4) == ['cat']\nassert     select_words(\"A cat in the hat\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     select_words(\"  a  b c d\", 2) == [\"a\", \"b\"]\nassert     select_words(\"  a  b c d\", 3) == [\"a\", \"c\", \"d\"]\nassert     select_words(\"  a  b c d\", 4) == [\"a\", \"b\"]\nassert     select_words(\"  a  b c d\", 5) == [\"b\", \"c\", \"d\"]\nassert     select_words(\"\", 1) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     select_words('Ci, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx ezfyrqj, t, yqjxivjm, aqxn kwqrq t, svwwqwqwv, aaab, vztyckrqkqn, v, qtkwfe, sbkqrpx e"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     select_words('There are anoesthesiologist and anoesthesiologist too', 2)     == ['anoesthesiologist', 'anoesthesiologist']\nassert     select_words('', 2)                                                     == []\nassert     select_words('There are anoesthesiologist and anoesthesiologist too', 1)     == ['anoesthesiologist', 'anoesthesiologist']\nassert     select_words('There are anoesthesiologist and anoesthesiologist too', 3)     == ['anoesthesiologist', 'anoesthesiologist', 'anoesthesiologist']\nassert     select_words('There are anoesthesiologist and anoesthesiologist too', 4)     == ['anoesthesiologist', 'anoesthesiologist', 'anoesthesiologist', 'anoesthesiologist']\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('lorem') == 'o'\nassert get_closest_vowel('car') == 'a'\nassert get_closest_vowel('door') == 'o'\nassert get_closest_vowel('python') == 'y'\nassert get_closest_vowel('python') == 'y'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_closest_vowel('word')     == 'o'\nassert     get_closest_vowel('a')     == 'a'\nassert     get_closest_vowel('b')     == 'b'\nassert     get_closest_vowel('c')     == 'c'\nassert     get_closest_vowel('aB')     == 'a'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_closest_vowel('ab')     == 'b'\nassert     get_closest_vowel('ba')     == 'b'\nassert     get_closest_vowel('mar')     == 'a'\nassert     get_closest_vowel('vm')     == 'b'\nassert     get_closest_vowel('vm')     == 'b'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_closest_vowel(\"till\") == \"t\", \"t\"\nassert     get_closest_vowel(\"test\") == \"\", \"test\"\nassert     get_closest_vowel(\"t\") == \"\", \"t\"\nassert     get_closest_vowel(\"tt\") == \"\", \"tt\"\nassert     get_closest_vowel(\"abcd\") == \"\", \"abcd\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"rabbbit\") == \"b\"\nassert     get_closest_vowel(\"rabbit\") == \"b\"\nassert     get_closest_vowel(\"abracadabra\") == \"a\"\nassert     get_closest_vowel(\"\") == \"\"\nassert     get_closest_vowel(\"t\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_closest_vowel('word') == 'e'\nassert     get_closest_vowel('apple') == 'e'\nassert     get_closest_vowel('vowel') == 'e'\nassert     get_closest_vowel('man') == 'a'\nassert     get_closest_vowel('bottle') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('abc') == ''\nassert     get_closest_vowel('aabb') == 'b'\nassert     get_closest_vowel('abcdef') == 'b'\nassert     get_closest_vowel('xyz') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_closest_vowel(\"abc\") == \"\"\nassert     get_closest_vowel(\"def\") == \"\"\nassert     get_closest_vowel(\"a\") == \"\"\nassert     get_closest_vowel(\"x\") == \"\"\nassert     get_closest_vowel(\"y\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_closest_vowel('abce') == 'e'\nassert     get_closest_vowel('abcd') == 'c'\nassert     get_closest_vowel('abce') == 'e'\nassert     get_closest_vowel('abcd') == 'c'\nassert     get_closest_vowel('abc') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('hope') == 'e'\nassert     get_closest_vowel('treat') == 'e'\nassert     get_closest_vowel('abcd') == ''\nassert     get_closest_vowel('a') == 'a'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     match_parens('()') == 'Yes'\nassert     match_parens('())(') == 'No'\nassert     match_parens('(())') == 'Yes'\nassert     match_parens('((())())') == 'Yes'\nassert     match_parens('((()))') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     match_parens('(())()') == 'Yes'\nassert     match_parens('())') == 'No'\nassert     match_parens('())(') == 'No'\nassert     match_parens('()())(()(()))') == 'Yes'\nassert     match_parens('())') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     match_parens(['(()())', '())']) == 'Yes'\nassert     match_parens(['(()', ')']) == 'No'\nassert     match_parens(['()', '()']) == 'Yes'\nassert     match_parens(['(()(', '())']) == 'No'\nassert     match_parens(['()', '(())']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     match_parens('(())()') == \"Yes\"\nassert     match_parens('())') == \"No\"\nassert     match_parens('(()') == \"No\"\nassert     match_parens('(()))') == \"Yes\"\nassert     match_parens('(((()))') == \"Yes\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     match_parens('()(())()') == 'Yes'\nassert     match_parens('()()') == 'No'\nassert     match_parens('(()())') == 'Yes'\nassert     match_parens(')()(') == 'No'\nassert     match_parens('(()())') == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     match_parens('()()') == 'Yes'\nassert     match_parens('()()') == 'No'\nassert     match_parens('((((') == 'No'\nassert     match_parens('(((()))))') == 'Yes'\nassert     match_parens('(((((((()))))' == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     match_parens('(())') == 'Yes'\nassert     match_parens(')()') == 'No'\nassert     match_parens('())(') == 'No'\nassert     match_parens('(((((())))))(())') == 'Yes'\nassert     match_parens('))(((((())))))(())') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     match_parens(['(())()', '())']) == 'Yes'\nassert     match_parens(['(())', ')()']) == 'No'\nassert     match_parens(['(())', '())']) == 'No'\nassert     match_parens(['(()', '()))']) == 'No'\nassert     match_parens(['(()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     match_parens(['(', ')']) == 'Yes'\nassert     match_parens(['(', ')', ')', '()']) == 'Yes'\nassert     match_parens(['(', ')']) == 'No'\nassert     match_parens(['(', ')', ')']) == 'No'\nassert     match_parens([')', ')']) == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         maximum([1, 2, 3, 4], 2)         == [3, 4]\nassert         maximum([4, 3, 2, 1], 2)         == [4, 3]\nassert         maximum([0, 0, 0, 0], 2)         == [0, 0]\nassert         maximum([1, 2, 3, 4], 0)         == []\nassert         maximum([0, 0, 0, 0], 3)         == [0, 0, 0]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7], 3)    == [6, 7, 3]\nassert     maximum([1], 1)                     == [1]\nassert     maximum([-1, -2, -3, -4, -5, -6, -7], 3)    == [-6, -7, -3]\nassert     maximum([-1, 2, 3, 4, 5, 6, 7], 3)     == [7, 6, 3]\nassert     maximum([-1, -2, -3, -4, -5, -6, -7], 3)     == [-7, -6, -3]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6], 2) == [6, 5]\nassert     maximum([1, -2, 3, 4, 5, 6], 2) == [6, 5]\nassert     maximum([1, -2, 3, 4, -5, 6], 2) == [6, 5]\nassert     maximum([1, -2, 3, 4, -5, 6], 3) == [6, 5, 4]\nassert     maximum([1, -2, 3, 4, -5, 6], 4) == [6, 5, 4, 3]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     maximum([], 0) == []\nassert     maximum([1], 1) == [1]\nassert     maximum([1, 2, 3], 2) == [3, 2]\nassert     maximum([1, 2, 3], 4) == [3, 2]\nassert     maximum([1, 2, 3, 4], 2) == [3, 4]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     maximum([1,2,3,4,5], 2) == [5,4]\nassert     maximum([1,3,5,7,9], 3) == [7,9,5]\nassert     maximum([-1,-3,-5,-7], 3) == [-7,-5,-3]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print maximum([1, 3, -1, -3, 5, 3, 6, 7], 3"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maximum([1, 4, 2, 3], 2) == [4, 3]\nassert     maximum([1, 4, 2, 3], 3) == [4, 3, 2]\nassert     maximum([1, 4, 2, 3], 1) == [4]\nassert     maximum([1, 4, 2, 3], 4) == [4, 3, 2, 1]\nassert     maximum([1, 4, 2, 3], 5) == [4, 3, 2]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     maximum([3,5,1,2,4], 3) == [5,3,4]\nassert     maximum([1,4,3,2,5], 2) == [5,4,3]\nassert     maximum([1,2,3,4,5], 2) == [5,4,3,2,1]\nassert     maximum([1], 1) == [1]\n\nif __name__ == \"__main__\":\n    arr = [int(x) for x in input(\"Enter the array: \").split()]\n    k = int(input(\"Enter the k: \"))\n    maximum(arr, k)\n    "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solution([1, 3, 5, 7, 9]) == 10\nassert     solution([5, 2, 6, 4, 3, 8, 10, 9, 7, 1]) == 9\nassert     solution([]) == 0\nassert     solution([13, 1, 3, 9, 4, 6, 7, 0, 10, 11, 2, 8, 5]) == 25\nassert     solution([0, 2, 4, 6, 8, 10]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solution([1,2,3,4]) == 0\nassert     solution([0,0,1,0]) == 3\nassert     solution([0,0,0,0]) == 0\nassert     solution([1,2,3,4,5,6]) == 0\nassert     solution([4,2,6,8,10,1,12,4,8,10]) == 41\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solution([3, 2, 4, 5, 8]) == 8\nassert     solution([1, 2, 3]) == 0\nassert     solution([]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solution([1,3,5]) == 0\nassert     solution([1,2,3,4,5]) == 1\nassert     solution([2,4,6,8]) == 1\nassert     solution([1,3,5,7,9]) == 5\nassert     solution([10,11,12]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solution([9, 4, 4, 6, 6, 9]) == 6\nassert     solution([1, 1, 2, 3, 4]) == 3\nassert     solution([5, 7, 2, 4]) == 9\nassert     solution([2, 1, 4, 6, 3, 5]) == 8\nassert     solution([0]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solution([1, 4, 3, 2, 5]) == 9\nassert     solution([2, 4, 6, 8]) == 0\nassert     solution([1, 2, 3]) == 0\nassert     solution([3, 1, 2, 4]) == 3\nassert     solution([3, 5, 4, 8, 10]) == 22\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solution([10, 2, 3, 4, 5, 6, 7, 8]) == 6\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     solution([-1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     solution([-2, 2, 3, 4, 5, 6, 7, 8]) == 4\nassert     solution([2, -2, 3, 4, 5, 6, 7, 8]) == 2\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_elements([0, 1, 2, 3, 4, 5, 6], 3) == 12\nassert     add_elements([0, 0, 0, 0, 0, 0, 0, 0], 3) == 0\nassert     add_elements([1, 2, 3, 4, 5, 6], 3) == 0\nassert     add_elements([1], 3) == 0\nassert     add_elements([], 3) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_elements([0, 1, 2, 3, 4], 2) == 11\nassert     add_elements([], 0) == 0\nassert     add_elements([0, 1, 2, 3, 4], 100) == 0\nassert     add_elements([2, 3, 4, 5], 1) == 19\nassert     add_elements([2, 3, 4, 5], 2) == 22\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add_elements([1, 3, 5, 7, 8, 9], 3) == 19\nassert     add_elements([1, 3, 5, 7, 8, 9], 0) == 0\nassert     add_elements([1, 3, 5, 7, 8, 9], 100) == 100\nassert     add_elements([1, 3, 5, 7, 8, 9], 1) == 19\nassert     add_elements([1, 3, 5, 7, 8, 9], 2) == 19\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7], 3) == 16\nassert     add_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) ==     79\nassert     add_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_elements([], 0) == 0\nassert     add_elements([], 1) == 0\nassert     add_elements([], 2) == 0\nassert     add_elements([1, 2, 3, 4], 1) == 4\nassert     add_elements([1, 2, 3, 4], 2) == 9\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_elements([123,456,789,879], 1) == 1234\nassert     add_elements([123,456,789,879], 2) == 12345\nassert     add_elements([123,456,789,879], 3) == 123456\nassert     add_elements([123,456,789,879], 4) == 1234567\nassert     add_elements([123,456,789,879], 5) == 12345678\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nassert\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 5\nassert     add_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1) == 1\nassert     add_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 3) == 0\nassert     add_elements([5, 8, 9, 3, 6, 3, 9, 7, 9, 6, 7, 8, 8, 6, 6, 8, 7, 7, 8, 6, 5, 5, 8, 6, 7, 7, 8, 5, 7, 9, 6, 8, 8, 7, 7, 8, 5, 5, 6, 6, 7, 6, 5, 8, 5, 4, 4, 6, 6, 8, 5, 5, 5, 5, 7, 7, 7, 8, 7, 9, 9, 8, 9, 8, 9, 8, 4, 6, 7, 8, 8, 6, 6, 8, 8, 7, 7, 8, 6, 7, 7, 7, 8, 7, 9, 8, 7, 6, 7, 7, 7, 5, 5, 5, 5, 6, 5, 5, 5, 6, 6, 7, 8, 9, 7, 8, 9, 8, 8, 9, 7, 7, 7, 5, 7, 9, 8, 5, 7, 7, 7, 8, 8, 6, 6, 5, 9, 8, 6, 9, 8, 8, 6, 9, 9, 8, 8, 9, 7, 7, 7, 6, 6, 5, 9, 8, 5, 9, 5, 6, 7, 8, 7, 9, 8, 8, 7, 8, 8, 6, 6, 7, 8, 8, 6, 8, 8, 6, 8, 8, 7, 7, 8, 7, 8, 9, 8, 8, 9, 8, 6, 8, 8, 8, 8, 7, 7, 7, 6, 8, 7, 6, 7, 7, 6, 6, 8, 5, 6, 8, 7, 8, 7, 6, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 8, 8, 8, 9, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 7, 8, 8, 9, 7, 8, 8, 9, 8, 8, 8, 8, 7, 7, 9, 7, 9, 9, 7, 7, 8, 9, 8, 9, 6, 9, 7, 7, 8, 8, 9, 8, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, "
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 10) == 1239\nassert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 5) == 975\nassert     add_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 4) == 756\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(4) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(10) == [10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(20) == [20, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(30) == [30, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3]\nassert     get_odd_collatz(8) == [1, 3, 10, 5]\nassert     get_odd_collatz(18) == [1, 3, 10, 5, 18]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2]\nassert     get_odd_collatz(3) == [3]\nassert     get_odd_collatz(4) == [4,2,1]\nassert     get_odd_collatz(5) == [5,3,10,5,16,8,4,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(3) == [3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(10) == [10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(20) == [20, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(30) == [30, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2]\nassert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(6) == [6, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(13) == [13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2]\nassert     get_odd_collatz(3) == [3]\nassert     get_odd_collatz(4) == [4, 2, 1]\nassert     get_odd_collatz(5) == [5, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_odd_collatz([1,2,4,8,16,32])    == [1,3,9,25,49]\nassert     get_odd_collatz([4,8,16,32])        == [3,9,49]\nassert     get_odd_collatz([10,100])        == [5,25]\nassert     get_odd_collatz([1,2,3,4,5,6,7,8])    == [1,3,9,27,81]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef compare_speed():\n    \"\"\"\n    Check how the running time of get_odd_collatz() and get_odd_collatz_generator() \n    differs in different test cases.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [1] == get_odd_collatz(1)\nassert     [1,2,4,8,16,32,64,128,256,512,1024] == get_odd_collatz(8)\nassert     [1,3,9,27,81,243,729,2187,6561,13413,22288,37780,115425,236576,416892,791552,1434795,292593,592282,1076476,1785552,352858,640652,1280077,1966401,4807584,1260800,2259573,4725778,1419550,297841,5991832,1109289,1960461,3526234,6658512,1324820,2213012,3774662,1143780,19642801,4800816,1256680,2169904,3795184,9853232,17974464,3840128,1226538,2100884,3965648,1264578,2301792,3992640,1249672,2076564,4087766,1309534,2253082,4108958,1303880,2267053,4101062,1346834,2272000,4713664,1419872,2979392,5979240,1106994,19642801,4800816,1256680,2169904,3795184,9853232,17974464,3840128,1226538,2100884,3965648,1264578,2301792,3992640,1249672,2076564,4087766,1309534,2253082,4108958,1303880,2267053,4101062,1346834,2272000,4713664,1419872,2979392,5979240,1106994,19642801] == get_odd_collatz(1000000)\n\ndef print_and_return(l):\n    \"\"\"\n    Print the elements of the list l and return the list l.\n    \"\"\"\n    for elem in l:\n        print(elem)\n    return l\n\ndef main():\n    l = get_odd_collatz(1)\n    "
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     valid_date(\"31-12-1999\") == False\nassert     valid_date(\"1-1-1999\") == False\nassert     valid_date(\"29-02-2011\") == False\nassert     valid_date(\"2-2-2011\") == False\nassert     valid_date(\"1-1-1\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     valid_date('01-01-1900') == False\nassert     valid_date('01-01-1950') == False\nassert     valid_date('01-01-2000') == False\nassert     valid_date('01-01-2000') == False\nassert     valid_date('02-01-2000') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     valid_date(\"01-01-2018\") == False, \"January 1st should not be a valid date!\"\nassert     valid_date(\"01-01-2000\") == True, \"January 1st 2000 is a valid date!\"\nassert     valid_date(\"01-13-2018\") == False, \"January 13th 2018 is not a valid date!\"\nassert     valid_date(\"01-01-2012\") == True, \"January 1st 2012 is a valid date!\"\nassert     valid_date(\"01-01-1940\") == False, \"January 1st 1940 is not a valid date!\"\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     valid_date(\"12-1-2016\") == False\nassert     valid_date(\"12-31-2016\") == True\nassert     valid_date(\"01-12-2016\") == False\nassert     valid_date(\"01-31-2016\") == False\nassert     valid_date(\"31-12-2016\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     valid_date('4-12-2070') == True\nassert     valid_date('1-01-1900') == False\nassert     valid_date('1-12-9999') == False\nassert     valid_date('11-31-2012') == False\nassert     valid_date('1-1-1999') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     valid_date('') == False, \"Wrong result for an empty string\"\nassert     valid_date('11-11-2011') == False, \"Wrong result for date in the wrong format\"\nassert     valid_date('11-11-2011') == True, \"Wrong result for a valid date\"\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     valid_date('2-29-2012') == False\nassert     valid_date('3-29-2012') == False\nassert     valid_date('9-29-2012') == False\nassert     valid_date('12-29-2012') == False\nassert     valid_date('2-31-2012') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     valid_date(\"31-12-2001\")\nassert     not valid_date(\"1-2-2014\")\nassert     valid_date(\"05-31-2000\")\nassert     valid_date(\"10-02-2001\")\nassert     not valid_date(\"1-1-2011\")\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     valid_date('01-01-2008') == False\nassert     valid_date('01-01-2016') == True\nassert     valid_date('01-01-1876') == False\nassert     valid_date('01-02-2016') == True\nassert     valid_date('02-02-2016') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     valid_date('15-02-1989') == True\nassert     valid_date('01-01-1901') == False\nassert     valid_date('31-04-2038') == False\nassert     valid_date('02-29-2000') == False\nassert     valid_date('02-32-0901') == False\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_words('The cat and the dog') == ['cat', 'and', 'the', 'dog']\nassert     split_words('I love you') == ['I', 'love', 'you']\nassert     split_words('I love, the cat, and the dog') == ['I', 'love', 'the', 'cat', 'and', 'the', 'dog']\nassert     split_words('one two three four five six') == ['one', 'two', 'three', 'four', 'five','six']\nassert     split_words('one, two, three, four, five, six') == ['one', 'two', 'three', 'four', 'five','six']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split_words('I am a student') == ['I', 'am', 'a','student']\nassert     split_words('This is a test. Let\\'s see how this works') == ['This', 'is', 'a', 'test', 'Let', \"'\",'s','see', 'how', 'this', 'works']\nassert     split_words('This is a test. Let\\'s see how this works') == ['This', 'is', 'a', 'test', 'Let', \"'\",'s','see', 'how', 'this', 'works']\nassert     split_words('This is a test. Let\\'s see how this works') == ['This', 'is', 'a', 'test', 'Let', \"'\",'s','see', 'how', 'this', 'works']\nassert     split_words('This is a test. Let\\'s see how this works') == ['This', 'is', 'a', 'test', 'Let', \"'\",'s','see', 'how', 'this', 'works']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     split_words(\"Hello World\") == ['Hello', 'World'], \"split_words test 1 failed\"\nassert     split_words(\"Hello, World\") == ['Hello', ',', 'World'], \"split_words test 2 failed\"\nassert     split_words
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_words('Hello, my name is John. How are you?') == ['Hello','my', 'name', 'is', 'John', 'How', 'are', 'you', '?']\nassert     split_words('Hello, my name is John. How are you?') == ['Hello','my', 'name', 'is', 'John', 'How', 'are', 'you', '?']\nassert     split_words('Hello, my name is John. How are you?') == ['Hello','my', 'name', 'is', 'John', 'How', 'are', 'you', '?']\nassert     split_words('Hello, my name is John. How are you?') == ['Hello','my', 'name', 'is', 'John', 'How', 'are', 'you', '?']\nassert     split_words('Hello, my name is John. How are you?') == ['Hello','my', 'name', 'is', 'John', 'How', 'are', 'you', '?']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (split_words('Hello world, my friend') == ['Hello', 'world','my', 'friend'])\nassert     (split_words('Hello, my friend') == ['Hello', '','my', 'friend'])\nassert     (split_words('Hello, world, my friend') == ['Hello', 'world','my', 'friend'])\nassert     (split_words('Hello,world, my friend') == ['Hello', 'world','my', 'friend'])\nassert     (split_words('Hello,world,my,friend') == ['Hello', 'world','my', 'friend'])\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert     split_words('a, b, c') == ['a', 'b', 'c']\nassert     split_words('a, b, c, d, e') == ['a', 'b', 'c', 'd', 'e']\nassert     split_words('a, b, c, d, e, f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     split_words('hello, world, how are you?') == ['hello', 'world', 'how', 'are', 'you']\nassert     split_words('hello,world') == ['hello', 'world']\nassert     split_words('hello, world') == ['hello', 'world']\nassert     split_words('hello,world') == ['hello', 'world']\nassert     split_words('hello, world') == ['hello', 'world']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     split_words('Hi there! How are you?') == ['Hi', 'there', '!', 'How', 'are', 'you', '?']\nassert     split_words('Hi there! How are you? My name is Brian') == ['Hi', 'there', '!', 'How', 'are', 'you', '?', 'My', 'name', 'is', 'Brian']\nassert     split_words('Hello, world!') == ['Hello', ',', 'world', '!']\nassert     split_words('Hello, world! This is fun!') == ['Hello', ',', 'world', '!', 'This', 'is', 'fun']\nassert     split_words('1, 2, 3') == ['1', ',', '2', ',', '3']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_words(\"a good day\") == [\"a\", \"good\", \"day\"]\nassert     split_words(\"a good day, a\") == [\"a\", \"good\", \"day\", \"a\"]\nassert     split_words(\"a good day, a, a good day\") == [\"a\", \"good\", \"day\", \"a\", \"a\", \"good\", \"day\"]\nassert     split_words(\"a good day, a, a good day, a\") == [\"a\", \"good\", \"day\", \"a\", \"a\", \"good\", \"day\", \"a\"]\nassert     split_words(\"a good day, a, a good day, a, a good day, a\") == [\"a\", \"good\", \"day\", \"a\", \"a\", \"good\", \"day\", \"a\", \"a\", \"good\", \"day\", \"a\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 1, 1, 1]) == False\nassert     is_sorted([1, 1, 2, 3]) == True\nassert     is_sorted([1, 2, 3, 3]) == False\nassert     is_sorted([1, 2, 2, 3, 4, 5, 6, 6]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True\nassert     is_sorted([1,2,3,4,5,5]) == False\nassert     is_sorted([1,2,3,4,5,6]) == True\nassert     is_sorted([]) == True\nassert     is_sorted([1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     (is_sorted([1, 2, 3, 4, 5]) == True)\nassert     (is_sorted([1, 2, 3, 4, 5, 6]) == False)\nassert     (is_sorted([1, 2, 3, 4, 5, 6, 7]) == True)\nassert     (is_sorted([1, 2, 3, 4, 5, 6, 7, 8]) == True)\nassert     (is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False)\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True\nassert     is_sorted([2,1,3,4,5]) == False\nassert     is_sorted([2,1,3,4,5,5]) == True\nassert     is_sorted([]) == True\nassert     is_sorted([1,2,3,4,4,4,5,5]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_sorted([1,2,3]) == True\nassert     is_sorted([3,2,1]) == False\nassert     is_sorted([]) == True\nassert     is_sorted([1,1,1]) == False\nassert     is_sorted([1,1,1,1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1, 1, 2, 3]) == True\nassert     is_sorted([1, 2, 2, 3]) == False\nassert     is_sorted([1, 2, 2, 3, 5]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef has_duplicates(lst):\n    '''\n    Given a list of numbers, return whether or not any two numbers in\n    that list are equal. Assume no negative numbers and only integers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1,2]) == True\nassert     is_sorted([1,2,3]) == True\nassert     is_sorted([1,2,3,4]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sorted([]) == True\nassert     is_sorted([1]) == True\nassert     is_sorted([1,1,1]) == True\nassert     is_sorted([1,2,3,4,5]) == True\nassert     is_sorted([3,3,3]) == True\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersection((0, 3), (1, 6)) == \"NO\"\nassert     intersection((1, 5), (5, 8)) == \"NO\"\nassert     intersection((3, 8), (1, 2)) == \"NO\"\nassert     intersection((1, 4), (6, 8)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\nassert     intersection((1, 1), (3, 4)) == \"YES\"\nassert     intersection((-10, 10), (3, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == (2, 3)\nassert     intersection((1, 3), (5, 6)) == \"NO\"\nassert     intersection((1, 3), (3, 4)) == \"NO\"\nassert     intersection((1, 3), (1, 5)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (3, 4)) == \"NO\"\nassert     intersection((2, 4), (1, 3)) == \"NO\"\nassert     intersection((1, 4), (2, 3)) == \"NO\"\nassert     intersection((2, 4), (1, 3)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersection([(1, 4), (5, 10)], [(1, 3), (3, 5), (10, 11)]) == \"YES\"\nassert     intersection([(1, 4), (5, 10)], [(2, 3), (3, 5), (10, 11)]) == \"NO\"\nassert     intersection([(1, 4), (5, 10)], [(1, 3), (3, 5)]) == \"NO\"\nassert     intersection([(1, 4), (5, 10)], [(2, 3), (2, 5), (3, 7), (4, 8), (5, 11)]) == \"NO\"\nassert     intersection([(1, 4), (5, 10)], [(1, 4), (3, 7), (5, 10), (8, 9)]) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 5), (2, 4)) == \"NO\"\nassert     intersection((1, 2), (2, 3)) == \"YES\"\nassert     intersection((1, 2), (2, 4)) == \"NO\"\nassert     intersection((1, 2), (1, 3)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersection( (1, 3), (2, 4) ) == (2, 3)\nassert     intersection( (1, 3), (1, 3) ) == \"NO\"\nassert     intersection( (1, 3), (2, 4) ) == (2, 3)\nassert     intersection( (1, 2), (3, 5) ) == \"NO\"\nassert     intersection( (1, 3), (2, 5) ) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersection((1, 3), (2, 4)) == (2, 3)\nassert     intersection((1, 3), (2, 3)) == (1, 3)\nassert     intersection((2, 4), (1, 3)) == (2, 3)\nassert     intersection((0, 2), (1, 3)) == (1, 2)\nassert     intersection((-10, 0), (10, 0)) == (0, 0)\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersection( (0, 5), (7, 12) )         == \"NO\"\nassert     intersection( (0, 4), (7, 10) )         == \"NO\"\nassert     intersection( (0, 7), (7, 8) )         == \"YES\"\nassert     intersection( (1, 3), (2, 4) )         == \"NO\"\nassert     intersection( (1, 4), (2, 3) )         == \"YES\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [ prod_signs(arr) for arr in [[], [1], [1,2], [0,0], [1,0], [0,1,0], [1,-2,0], [0,0,1], [1,2,0], [1,-2,-2], [0,-1,0,1,0,1,-1,-2,0], [1,-2,0,1,0,1,-1,-2,0]]]     == [0, 1, 8, 4, 2, 0, -4, -8, 0, 12, 4, 0, -8, -4, 0]\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prod_signs([-1, -2, -3]) == 0\nassert     prod_signs([-1, 2, 3]) == -6\nassert     prod_signs([-1, 0, 3]) == 0\nassert     prod_signs([1, 2, 3]) == 6\nassert     prod_signs([]) is None\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prod_signs(arr) == 1\nassert     prod_signs([]) == None\nassert     prod_signs([1, -2, 3, -4, 5]) == 3\nassert     prod_signs([-5, 4, 3, -1, -3, 2, 1, 1, 2]) == 24"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prod_signs([1, -3, 4, -2, -1]) == -1\nassert     prod_signs([3, 1, -1, -4, -2, 0]) == -1\nassert     prod_signs([1, 3, 2, 0, -1, -3]) == -1\nassert     prod_signs([]) == None\nassert     prod_signs([1, -1]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, 2, 3, 4]) == 8\nassert     prod_signs([1, -1, 0]) == 12\nassert     prod_signs([1, -1, -2]) == -12\nassert     prod_signs([-1, -2, 1, 2, 3, -4]) == -12\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, 3, -4]) == 48\nassert     prod_signs([3, -1, -4, 4]) == -24\nassert     prod_signs([3, -1, -4, -4]) == 16\nassert     prod_signs([3, 4, -1, -4, -4]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prod_signs([]) == None, \"Call to prod_signs([]) should return None.\"\nassert     prod_signs([1, 2, 3]) == 0, \"Call to prod_signs([1, 2, 3]) should return 0.\"\nassert     prod_signs([1, 2, 3, 4]) == 0, \"Call to prod_signs([1, 2, 3, 4]) should return 0.\"\nassert     prod_signs([-1, 2, 3, 4]) == 0, \"Call to prod_signs([-1, 2, 3, 4]) should return 0.\"\nassert     prod_signs([-1, 2, 3, -4]) == 0, \"Call to prod_signs([-1, 2, 3, -4]) should return 0.\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, 1]) == 0\nassert     prod_signs([1, -1]) == 0\nassert     prod_signs([1, 0]) == 0\nassert     prod_signs([1, -1, 1]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prod_signs([]) == None, 'Empty list'\nassert     prod_signs([-1, -1, 1, 1]) == 1, 'Some signs'\nassert     prod_signs([-1, 1, 1, -1]) == -1, 'All signs'\nassert     prod_signs([1, -1, 1, -1]) == -1, 'Some signs'\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prod_signs([1, 3, -2, -1, -7, -2, -3]) == -12\nassert     prod_signs([1, 3, -2, -3, -7, -2, -3]) == -18\nassert     prod_signs([]) == None\nassert     prod_signs([1, 3, -2, -3, -7, -2, -3]) == -18\nassert     prod_signs([1, 3, -2, -3, -7, -2, -3]) == -18\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minPath([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 1) == [1, 1, 1, 1, 1]\nassert     minPath([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 2) == [1, 1, 1, 1, 1]\nassert     minPath([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 3) == [1, 1, 1, 1, 1]\nassert     minPath([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 4) == [1, 1, 1, 1, 1]\nassert     minPath([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]], 5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minPath([[1,3,1],[1,5,1],[4,2,1]], 2) == [1, 1, 2, 3]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1, 2, 3, 6, 9]\nassert     minPath([[1]], 1) == [1]\nassert     minPath([[1]], 2) == [1]\nassert     minPath([[1]], 3) == [1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     minPath(grid = [[1,2,3,4,5],[16,17,18,19,6],[15,24,25,20,7],[14,23,22,21,8]], k = 3) == [1,2,3]\nassert     minPath(grid = [[1,2,3,4,5],[16,17,18,19,6],[15,24,25,20,7],[14,23,22,21,8]], k = 2) == [1,2]\nassert     minPath(grid = [[1,2,3,4,5],[16,17,18,19,6],[15,24,25,20,7],[14,23,22,21,8]], k = 1) == [1]\nassert     minPath(grid = [[1,2,3,4,5],[16,17,18,19,6],[15,24,25,20,7],[14,23,22,21,8]], k = 0) == []\nassert     minPath(grid = [[1,2,3,4,5],[16,17,18,19,6],[15,24,25,20,7],[14,23,22,21,8]], k = 4) == [1,2,3,4]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minPath([[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3]], 1) == [1,1,1,1,1]\nassert     minPath([[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3]], 2) == [1,1,1,1,1]\nassert     minPath([[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3]], 3) == [1,1,1,1,1]\nassert     minPath([[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3]], 4) == [1,1,1,1,1]\nassert     minPath([[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3]], 5) == [1,1,1,1,1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minPath([[1, 2], [3, 4], [5, 6]], 2) == [1, 2, 3]\nassert     minPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2) == [1, 2, 4]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 4]\n\nprint \"Passed"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minPath([[1,3,1], [1,5,1], [4,2,1]], 3) == [1,5,1]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [4,5,6]\nassert     minPath([[1,3,1],[1,5,1],[4,2,1]], 1) == [1]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [4,5,6]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minPath([[0, 0, 1, 2, 3, 4],\n        [0, 5, 6, 7, 8, 0],\n        [9, 10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19, 0]], 3) == [1, 2, 3, 4]\nassert     minPath([[0, 0, 1, 2, 3, 4],\n        [0, 5, 6, 7, 8, 0],\n        [9, 10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19, 0]], 4) == [1, 2, 3, 4, 5]\nassert     minPath([[0, 0, 1, 2, 3, 4],\n        [0, 5, 6, 7, 8, 0],\n        [9, 10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19, 0]], 5) == [1, 2, 3, 4, 5, 6]\nassert     minPath([[0, 0, 1, 2, 3, 4],\n        [0, 5, 6, 7, 8, 0],\n        [9, 10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19, 0]], 8) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     minPath([[0, 0, 1, 2, 3, 4],\n        [0, 5, 6, 7, 8, 0],\n        [9, 10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19, 0]], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minPath(grid, 1) == [2]\nassert     minPath(grid, 2) == [1, 3]\nassert     minPath(grid, 3) == [1, 2, 3]\nassert     minPath(grid, 4) == [1, 2, 3, 4]\nassert     minPath(grid, 5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minPath([[1,2],[3,4]], 1) == [1]\nassert     minPath([[1,2],[3,4]], 2) == [1, 2]\nassert     minPath([[1,2],[3,4]], 3) == [1, 2, 4]\nassert     minPath([[1,2],[3,4]], 4) == [1, 2, 3, 4]\nassert     minPath([[1,2],[3,4]], 5) == [1, 2, 3, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \nassert minPath([[1,2],[1,3]], 3) == [1,2,1]\nassert minPath([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14],[15,16,17,18,19,20,21],[22,23,24,25,26,27,28],[29,30,31,32,33,34,35],[36,37,38,39,40,41,42],[43,44,45,46,47,48,49],[50,51,52,53,54,55,56],[57,58,59,60,61,62,63]], 6) == [1,2,1,3,1,2,1,3,1,2,1,3,2,1,2,1,3,1,2,1,3,1,2,1,3,1,2,1,3,2,1,2,1,3,2,1,2,1,3,1,2,1,3,2,1,2,1,3,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1,3,2,1,2,1"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tri(3) == 8\nassert     tri(10) == [3, 8, 13, 24, 31, 40, 48, 57, 68, 77]\nassert     tri(11) == [3, 8, 13, 24, 31, 40, 48, 57, 68, 77, 86]\nassert     tri(10) == [3, 8, 13, 24, 31, 40, 48, 57, 68, 77]\nassert     tri(8) == [3, 8, 13, 24, 31, 40, 48, 57, 68, 77]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(3) == tri(2) + tri(1) + tri(4)\nassert     tri(4) == tri(3) + tri(1) + tri(4)\nassert     tri(5) == tri(4) + tri(1) + tri(4)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + 2\nassert     tri(3) == 3\nassert     tri(4) == 8\nassert     tri(5) == 34\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4) == 8\n\ndef test_fib():\n    for n in range(100):\n        assert     tri(n) == fib(n)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(4) == 3\nassert     tri(3) == 8\nassert     tri(5) == 16\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(4) == 3\nassert     tri(3) == 8\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4) == 2 + 3 + 3 == 8\n\ndef test_tri():\n    assert tri(2) == [1, 1, 2]\n    "
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tri(2) == 1\nassert     tri(4) == 3\nassert     tri(3) == 2\nassert     tri(6) == 6\nassert     tri(7) == 13\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tri(2) == 1 + (2 / 2) == 2\nassert tri(4) == 3\nassert tri(3) == tri(2) + tri(1) + tri(4) == 2 + 3 + 3 == 8\nassert tri(5) == tri(4) + tri(3) + tri(6) == 2 + 3 + 4 + 5 + 6 == 8 + 9 + 10 == 15\nassert tri(10) == tri(9) + tri(8) + tri(7) == 5 + 8 + 13 + 16 + 21 + 26 == 15 + 19 + 25 + 28 == 40\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digits(765) == 30\nassert     digits(6) == 1\nassert     digits(11) == 11\nassert     digits(977) == 27\nassert     digits(10) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (digits(21) == 2)\nassert     (digits(42) == 4)\nassert     (digits(46) == 0)\nassert     (digits(12345) == 123)\nassert     (digits(1234) == 1)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef same_first_last(n):\n    \"\"\"Given a positive integer n, return True if it's an n-digit number, and the first and last digits are the same.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digits(12345) == 5\nassert     digits(43214) == 15\nassert     digits(25) == 0\nassert     digits(0) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digits(11) == 11\nassert     digits(5468) == 468\nassert     digits(56789) == 56789\nassert     digits(2) == 0\nassert     digits(1000) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (digits(1) == 0)\nassert    (digits(23) == 2)\nassert    (digits(39) == 1)\nassert    (digits(1234) == 1)\nassert    (digits(5876) == 6)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef factorial(n):\n    \"\"\"Return n! for non-negative values.\n    If the input is not a non-negative integer, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digits(16) == 4\nassert     digits(11) == 1\nassert     digits(12) == 0\n\ndef is_valid_number(n):\n    \"\"\"Given a positive integer n, return True if the number is in the\n    range 1-100, and return False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digits(42) == 4\nassert     digits(214) == 14\nassert     digits(125) == 1\nassert     digits(100) == 0\nassert     digits(2357) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digits(1) == 1\nassert     digits(222) == 22\nassert     digits(10010) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_nested(\"a\") == False\nassert is_nested(\"(a)\") == True\nassert is_nested(\"(())\") == True\nassert is_nested(\"(a(b)())\") == True\nassert is_nested(\"(a(b)())\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_nested('(())())') == True, 'FAILED: is_nested(\"(())())\")'\nassert     is_nested('((((()))))') == True, 'FAILED: is_nested(\"((((()))))\")'\nassert     is_nested('((((())))') == False, 'FAILED: is_nested(\"((((())))\")'\nassert     is_nested('(((((()))))))') == True, 'FAILED: is_nested(\"(((((()))))))\")'\nassert     is_nested('((((()))))))') == False, 'FAILED: is_nested(\"((((()))))))\")'\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_nested('()') == True\nassert     is_nested('()[]{}') == True\nassert     is_nested('(])') == False\nassert     is_nested('([)]') == False\nassert     is_nested('[') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_nested(\"(a(b(c)))(d)\") == True\nassert     is_nested(\"((a))(b(c))\") == True\nassert     is_nested(\"(a(b(c)())(d)\") == True\nassert     is_nested(\"(a(b(c())d))\") == False\nassert     is_nested(\"(a(b(c()d))\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_nested('[()]()')\nassert     not is_nested('[()]')\nassert     not is_nested('[(])')\nassert     is_nested('[{()}]()')\nassert     is_nested('[{()}()]')\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_nested('[]()[]') == True\nassert     is_nested('[]()[]()[]') == True\nassert     is_nested('()[]') == False\nassert     is_nested('()[()]()[]') == True\nassert     is_nested('()[()]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_nested('([])') == True\nassert     is_nested('([') == False\nassert     is_nested('()') == True\nassert     is_nested('{[()]}') == True\nassert     is_nested('([)]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('([])') == True\nassert     is_nested('()') == True\nassert     is_nested('([])') == True\nassert     is_nested('([]())') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_nested(\"[]\") == True\nassert     is_nested(\"([])\") == True\nassert     is_nested(\"[()]\") == True\nassert     is_nested(\"{[]}\") == True\nassert     is_nested(\"[(((])())())\") == True\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8,9])     ==     5050\nassert     sum_squares([0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9])     ==     5050\nassert     sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9])     ==     5050\nassert     sum_squares([0.1,-0.2,-0.3,-0.4,-0.5,-0.6,-0.7,-0.8,-0.9])     ==     5050\nassert     sum_squares([-1.1,-2.1,-3.1,-4.1,-5.1,-6.1,-7.1,-8.1,-9.1])     ==     5050\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [2,5,4,3,6] == sum_squares([2,5,4,3,6])\nassert     [1,5,4,3,6] == sum_squares([1,5,4,3,6])\nassert     [2,5,4,3,6] == sum_squares([2,5,4,3,6])\nassert     [2,5,4,3,6] == sum_squares([2,5,4,3,6])\nassert     [2,5,4,3,6] == sum_squares([2,5,4,3,6])\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([0,1,2,3,4,5,6,7,8,9,10])         ==     4950\nassert     sum_squares([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])     ==     26025\nassert     sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20])     ==     -265025\nassert     sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100])     ==     -265025\n\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_squares([2,3,4]) == 14\nassert     sum_squares([2,3,4,5]) == 30\nassert     sum_squares([2,3,4,5,6]) == 60\nassert     sum_squares([2,3,4,5,6,7,8]) == 140\nassert     sum_squares([2,3,4,5,6,7,8,9]) == 280\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([1,2,3])     == 14\nassert     sum_squares([-2,-3])     == 26\nassert     sum_squares([-2,3])     == 22\nassert     sum_squares([4,-5,0,-3,2])     == 22\n\ndef even_or_odd(lst):\n    \"\"\"You are given a list of numbers.\n    Your function should return a list of all the elements in the list that are \n    either even or odd, according to the following rules:\n    * each even number should be replaced with the string \"even\"\n    * each odd number should be replaced with the string \"odd\"\n    * each 0 should be replaced with the string \"zero\"\n    * each negative number should be replaced with the string \"negative\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 55\nassert     sum_squares([-1,2,3,4,5]) == 55\nassert     sum_squares([-1,-2,-3,-4,-5]) == 55\nassert     sum_squares([]) == 0\n\ndef max_number(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the max of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4])     ==    26\nassert     sum_squares([-1,2,3,4])     ==    26\nassert     sum_squares([1.5,2,3,4])     ==    26.5\nassert     sum_squares([-1.5,2,3,4])     ==    26.5\nassert     sum_squares([1.5,2.5,3.5,4.5])     ==    52.5\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [    sum_squares([2,4,6]),     sum_squares([2,3,4]),     sum_squares([-1,-2,-3])     ]    ==    [28, 12, 0]\nassert     [    sum_squares([1,2,3]),     sum_squares([4,5,6]),     sum_squares([-3,-4,-5])     ]    ==    [25, 50, 0]\nassert     [    sum_squares([-3,5,-6]),     sum_squares([-2,-1,2]),     sum_squares([0,0,0])     ]    ==    [0, 19, 0]\nassert     [    sum_squares([-3,5,6]),     sum_squares([2,4,5]),     sum_squares([-1,-2,-3])     ]    ==    [0, 19, 0]\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1,2,3]) == [1,4,9],     \"test 1\"\nassert     sum_squares([-1,2,3]) == [1,4,9],     \"test 2\"\nassert     sum_squares([1,2,-3]) == [1,4,9],     \"test 3\"\nassert     sum_squares([1,-2,-3]) == [1,4,9],     \"test 4\"\nassert     sum_squares([1,2,-3,4]) == [1,4,9,16],     \"test 5\"\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([-1.2, 2.6, -3.9]) == [4.4, 19.6, 0.1]\nassert     sum_squares([1, 4, 6]) == [9, 16, 19]\nassert     sum_squares([-3.9, -1.2, 2.6, 6]) == [13.9, 10.4, 19.6, 70.2]\nassert     sum_squares([-1.2, 2.6, -3.9]) == [4.4, 19.6, 0.1]\nassert     sum_squares([1, 4, 6]) == [9, 16, 19]\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('') is True\nassert     check_if_last_char_is_a_letter('a') is True\nassert     check_if_last_char_is_a_letter('a b') is True\nassert     check_if_last_char_is_a_letter('a b c') is False\nassert     check_if_last_char_is_a_letter('a b c ') is False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('Hello World') == True\nassert     check_if_last_char_is_a_letter('Hello World!') == True\nassert     check_if_last_char_is_a_letter('Hello World!!') == False\nassert     check_if_last_char_is_a_letter('Hello World!!!') == False\nassert     check_if_last_char_is_a_letter('Hello World!! This is a test') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('Hi') == True\nassert     check_if_last_char_is_a_letter('Hi, this is a test!') == False\nassert     check_if_last_char_is_a_letter('Hi, this is a test.') == False\nassert     check_if_last_char_is_a_letter('Hi. This is a test!') == False\nassert     check_if_last_char_is_a_letter('Hi. this is a test!') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter(\"This is a nice sentence.\") == True\nassert     check_if_last_char_is_a_letter(\"This is a nice sentence.\") == True\nassert     check_if_last_char_is_a_letter(\"This is not a nice sentence.\") == False\nassert     check_if_last_char_is_a_letter(\"This is not a word.\") == False\nassert     check_if_last_char_is_a_letter(\"This is a nice sentence. a\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(\"foo\") == True\nassert     check_if_last_char_is_a_letter(\"foo bar\") == True\nassert     check_if_last_char_is_a_letter(\"foo bar!\") == True\nassert     check_if_last_char_is_a_letter(\"foobar!\") == True\nassert     check_if_last_char_is_a_letter(\"foo\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('Hello world') == False\nassert     check_if_last_char_is_a_letter('Hello world!!!') == False\nassert     check_if_last_char_is_a_letter('hello world!!!') == True\nassert     check_if_last_char_is_a_letter('Hello World') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('') == True\nassert     check_if_last_char_is_a_letter(' ') == True\nassert     check_if_last_char_is_a_letter('-') == True\nassert     check_if_last_char_is_a_letter('a') == True\nassert     check_if_last_char_is_a_letter('a ') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter('hello world') == True, 'Test 1'\nassert     check_if_last_char_is_a_letter('hello w') == True, 'Test 2'\nassert     check_if_last_char_is_a_letter('hello w 0') == False, 'Test 3'\nassert     check_if_last_char_is_a_letter('hello') == False, 'Test 4'\nassert     check_if_last_char_is_a_letter('hello!') == False, 'Test 5'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('pizza') == True\nassert     check_if_last_char_is_a_letter('asdf') == False\nassert     check_if_last_char_is_a_letter('abc') == False\nassert     check_if_last_char_is_a_letter('bob') == True\nassert     check_if_last_char_is_a_letter('a b c') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello\") == True\nassert     check_if_last_char_is_a_letter(\"Hello World\") == True\nassert     check_if_last_char_is_a_letter(\"Hello World!\") == False\nassert     check_if_last_char_is_a_letter(\"HELLO\") == False\nassert     check_if_last_char_is_a_letter(\"hello\") == True\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     can_arrange([1, 3, 3, 4, 6, 6]) == 3\nassert     can_arrange([1, 2, 3, 4, 5, 5]) == -1\nassert     can_arrange([1, 3, 3, 4, 6, 6]) == 5\n\ndef partition(arr, left, right):\n    \"\"\"Partition the given array from index left to index right such that all\n    elements in the array are greater than or equal to the elements in the\n    array from index left to index right. Return the index of the last element\n    in the array which is less than the given element.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     can_arrange
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     can_arrange([0, 1, 1, 2, 3]) == 2\nassert can_arrange([0, 1, 1, 3, 2]) == -1\nassert can_arrange([]) == -1\nassert can_arrange([-3, 1, 2, 0, -2, -1]) == 2\nassert can_arrange([1, 1, 1, 1, 1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     can_arrange([1, 2, 4, 3]) == -1\nassert     can_arrange([1, 2, 4, 3, 6]) == -1\nassert     can_arrange([1, 2, 4, 3, 5]) == 1\nassert     can_arrange([1, 2, 4, 3, 6, 7]) == 1\nassert     can_arrange([1, 2, 4, 3, 5, 6]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     can_arrange([1, 3, 4, 2]) == 0\nassert     can_arrange([1, 2, 4, 3]) == 2\nassert     can_arrange([1, 2, 3, 4]) == -1\nassert     can_arrange([1, 2, 3, 4, 4]) == 3\nassert     can_arrange([]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     can_arrange([1, 2, 3, 5]) == 3\nassert     can_arrange([1, 2, 3, 6]) == -1\nassert     can_arrange([]) == -1\nassert     can_arrange([1]) == -1\nassert     can_arrange([1, 2]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     can_arrange([1, 2, 4, 5, 6, 3]) == 2\nassert     can_arrange([1, 2, 3, 6, 4, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert     can_arrange([1, 1, 1]) == -1\nassert     can_arrange([]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     can_arrange([1, 2, 3, 5, 7]) == -1\nassert     can_arrange([1, 2, 5, 7]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == 3\nassert     can_arrange([1, 2, 3, 4, 5, 7]) == 3\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == 4\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     can_arrange([3, 4, 1, 2]) == 1\nassert     can_arrange([1, 2, 3, 4]) == -1\nassert     can_arrange([4, 1, 2, 3]) == -1\nassert     can_arrange([4, 2, 1, 3]) == 2\nassert     can_arrange([4, 2, 3, 1]) == 3\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([-1,0,1,2,3,4,5]) == (1, -1)\nassert     largest_smallest_integers([-1,-3,2,4,5]) == (2, -1)\nassert     largest_smallest_integers([-1,-3,2,-4,5]) == (2, -4)\nassert     largest_smallest_integers([-1,-3,2,4,5]) == (2, 4)\nassert     largest_smallest_integers([-1,0,1]) == (None, -1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5])     == (4, 5)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-1, -5)\nassert     largest_smallest_integers([])                     == (None, None)\nassert     largest_smallest_integers([10, -2, 3, 4, -5])    == (10, -5)\nassert     largest_smallest_integers([1, 2, 3])             == (3, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (None, None)\nassert     largest_smallest_integers([-10, -8, -7, -5, -4, -3, -1, 0, 1, 2, 3, 4, 5]) == (-10, 10)\nassert     largest_smallest_integers([-2, -3, -4, -1]) == (-2, 1)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([-1, 2, 3, 4, -5, 6]) == (-1, 5), 'wrong answer'\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (None, None), 'wrong answer'\nassert     largest_smallest_integers([]) == (None, None), 'wrong answer'\nassert     largest_smallest_integers([10, 22, 3, 7, -4, -9]) == (10, -9), 'wrong answer'\nassert     largest_smallest_integers([10, 22, -5, -7, -4, -9]) == (10, -9), 'wrong answer'\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([]) == None\nassert     largest_smallest_integers([-1,2,3,4]) == (1,-4)\nassert     largest_smallest_integers([-1,-2,3,4]) == (1,-4)\nassert     largest_smallest_integers([-1,-2,-3,4]) == (1,-4)\nassert     largest_smallest_integers([-1,-2,-3,-4]) == (1,-4)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, -1]) == (-1, 1)\nassert     largest_smallest_integers([1, 2, -5, -4]) == (None, None)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-1, -2]) == (-1, 1)\nassert     largest_smallest_integers([0]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ('g', 'e')\nassert     largest_smallest_integers(['-1', '2', '-1', '-1', '3', '4', '5']) == (None, None)\nassert     largest_smallest_integers(['-1', '-1', '-1', '-1', '0', '1', '2']) == (None, '-1')\nassert     largest_smallest_integers(['1', '2', '3', '4', '5', '6', '7', '8']) == ('1', '8')\nassert     largest_smallest_integers(['7', '8', '9', '10', '11', '12', '13', '14', '15']) == ('15', '14')\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (largest_smallest_integers([1, 3, 2, 4, -2, 0, -2, 4, 5, 5, 6]) == (-2, 2))\nassert     (largest_smallest_integers([]) == (None, None))\nassert     (largest_smallest_integers([1, 2, -1, -2]) == (-1, 1))\nassert     (largest_smallest_integers([1, 2, -2, 1]) == (-1, 1))\nassert     (largest_smallest_integers([1, 2, -2, -1]) == (-1, 1))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([2, 3, 4, 5, 6, 7, -8, -9, -10, -11]) == (-10, 11)\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (1, None)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([0]) == (None, None)\nassert     largest_smallest_integers([-100, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]) == (-100, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         largest_smallest_integers([4, 2, 3, 7, 8]) == (2, 3)\nassert         largest_smallest_integers([]) == (None, None)\nassert         largest_smallest_integers([3, 4, 5, -1, 2, 6]) == (2, 3)\nassert         largest_smallest_integers([-3, -4, -5, -1, -2, -6]) == (-3, -5)\nassert         largest_smallest_integers([3, 4, -1, 2, -6]) == (None, -1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare_one(5, 5) == 5\nassert     compare_one(5, 4.5) == 5\nassert     compare_one(5.2, 5.2) == 5.2\nassert     compare_one('5', '5') == 5\nassert     compare_one('5.3', '5.2') == 5.3\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\"\"\"\ndef compare_one(a, b):\n    if a == b:\n        return None\n    elif type(a)!= type(b):\n        return None\n    else:\n        if isinstance(a, str):\n            return a if len(a) > len(b) else b\n        elif isinstance(a, int):\n            return a if a > b else b\n        elif isinstance(a, float):\n            return a if a > b else b\n\"\"\"\n\ndef is_valid_num(num):\n    \"\"\"\n    Write a function is_valid_num that takes a number and returns\n    True if the number is a valid number, and False if the number is invalid.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nassert compare_one(1, 2) == 2\nassert compare_one(2, 2) == None\nassert compare_one(1, -2) == 2\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef test_compare_one():\n    assert compare_one(1, 1) == 1\n    assert compare_one(1, 0) == 0\n    assert compare_one('1', '1') == 1\n    "
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (compare_one(1, 1) == 1)\nassert     (compare_one(1.0, 1) == 1)\nassert     (compare_one(1, '1') == 1)\nassert     (compare_one('1', 1) == 1)\nassert     (compare_one('1.0', 1) == 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare_one(5, 5.0) == 5\nassert     compare_one(5, '5') == 5\nassert     compare_one(5.1, 5) == 5.1\nassert     compare_one(5, '5.1') == None\nassert     compare_one('5', 5.1) == None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (compare_one(1.0, 1.0) == 1.0)\nassert     (compare_one(1.0, -1.0) == 1.0)\nassert     (compare_one('1', 1) == 1)\nassert     (compare_one('1', -1) == 1)\nassert     (compare_one('1,', 1) == 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1.0, 1) == 1.0\nassert     compare_one(1, \"1\") == 1\nassert     compare_one(\"1\", 1) == 1\nassert     compare_one(1.0, \"1.0\") == 1.0\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(5) == True\nassert     is_equal_to_sum_even(6) == True\nassert     is_equal_to_sum_even(7) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(11) == True\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(13) == True\nassert     is_equal_to_sum_even(14) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(5)\nassert     is_equal_to_sum_even(10)\nassert     not is_equal_to_sum_even(3)\nassert     not is_equal_to_sum_even(11)\nassert     not is_equal_to_sum_even(6)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(42) == True\nassert     is_equal_to_sum_even(45) == False\nassert     is_equal_to_sum_even(36) == False\nassert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(15) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(38) == True\nassert     is_equal_to_sum_even(40) == False\nassert     is_equal_to_sum_even(100) == True\n\ndef is_power_of_four(n):\n    \"\"\"Evaluate whether the given number n can be written as the power of 4\n    \"\"\"\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(7) == True\nassert is_equal_to_sum_even(11) == False\nassert is_equal_to_sum_even(10) == False\nassert is_equal_to_sum_even(0) == True\nassert is_equal_to_sum_even(9) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(6) == True, '6 = 2 + 4'\nassert     is_equal_to_sum_even(7) == False, '7 = 2 + 3'\nassert     is_equal_to_sum_even(10) == True, '10 = 2 + 2 + 2'\nassert     is_equal_to_sum_even(1) == True, '1 = 2'\nassert     is_equal_to_sum_even(0) == False, '0 = 0'\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(100)     == False\nassert     is_equal_to_sum_even(1009)     == True\nassert     is_equal_to_sum_even(1010)     == False\nassert     is_equal_to_sum_even(1011)     == True\nassert     is_equal_to_sum_even(1000)     == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == True\nassert     is_equal_to_sum_even(9) == True\nassert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(11) == False\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\nassert     special_factorial(6) == 720\nassert     special_factorial(7) == 5040\nassert     special_factorial(8) == 40320\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(6) == 720\nassert     special_factorial(7) == 5040\nassert     special_factorial(8) == 40320\nassert     special_factorial(9) == 362880\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     special_factorial(1)    == 1\nassert     special_factorial(2)    == 2\nassert     special_factorial(3)    == 6\nassert     special_factorial(4)    == 24\nassert     special_factorial(5)    == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fix_spaces(\"hello  world\") == \"hello_world\"\nassert     fix_spaces(\"hello   world\") == \"hello_world\"\nassert     fix_spaces(\"hello    world\") == \"hello_world\"\nassert     fix_spaces(\"hello   world  \") == \"hello_world\"\nassert     fix_spaces(\"hello    world   \") == \"hello_world\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         fix_spaces('') == ''\nassert         fix_spaces('a') == 'a'\nassert         fix_spaces(' a ') == 'a'\nassert         fix_spaces('a b') == 'a_b'\nassert         fix_spaces('a b c') == 'a_b_c'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fix_spaces('   ') == '_'\nassert     fix_spaces('  a') == 'a_'\nassert     fix_spaces(' a   ') == 'a_'\nassert     fix_spaces(' a') == 'a'\nassert     fix_spaces('_') == '_'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fix_spaces(\"    hello\") == \"hello\"\nassert     fix_spaces(\"hello    \") == \"hello\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello   world\") == \"hello_world\"\nassert     fix_spaces(\"hello   world\") == \"hello_world\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fix_spaces(\"hello\") == \"hello\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello   world\") == \"hello___world\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fix_spaces(\" my name is    Aman     \") == \"my_name_is_aman_\"\nassert     fix_spaces(\" my name is    Aman   \") == \"my_name_is_aman_\"\nassert     fix_spaces(\" my name is    Aman    \") == \"my_name_is_aman_\"\nassert     fix_spaces(\"my name is Aman\") == \"my_name_is_aman\"\nassert     fix_spaces(\"my name is Aman    \") == \"my_name_is_aman\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fix_spaces(\"      hallo\") == \"hallo\"\nassert     fix_spaces(\"hallo\") == \"hallo\"\nassert     fix_spaces(\"hallo    \") == \"hallo\"\nassert     fix_spaces(\"hallo    hallo\") == \"hallo-hallo\"\nassert     fix_spaces(\"    hallo hallo\") == \"hallo-hallo\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fix_spaces('') == ''\nassert     fix_spaces(' ') == '_'\nassert     fix_spaces('ab') == 'ab'\nassert     fix_spaces('ab ab') == 'ab_'\nassert     fix_spaces('a b c') == 'a_b_c'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fix_spaces(\"i have    spaces\") == \"i_have_spaces\"\nassert     fix_spaces(\"i    have spaces\") == \"i_have_spaces\"\nassert     fix_spaces(\"i have\") == \"i_have\"\nassert     fix_spaces(\"i have \") == \"i_have\"\nassert     fix_spaces(\"i have     \") == \"i_have\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fix_spaces('this is a test string') == 'this_is_a_test_string', \\\n        'Error in fix_spaces'\nassert     fix_spaces('this is  a test string') == 'this_is_a_test_string', \\\n        'Error in fix_spaces'\nassert     fix_spaces('this is a test string 2') == 'this_is_a_test_string_2', \\\n        'Error in fix_spaces'\nassert     fix_spaces('this is a test string 3') == 'this_is_a_test_string_3', \\\n        'Error in fix_spaces'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     file_name_check('a123.txt') == 'Yes'\nassert     file_name_check('a123.exe') == 'Yes'\nassert     file_name_check('a123.dll') == 'Yes'\nassert     file_name_check('a123.txt') == 'No'\nassert     file_name_check('a123.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         file_name_check(\"abc123.txt\") == \"No\"\nassert         file_name_check(\"abc123\") == \"No\"\nassert         file_name_check(\"abc123.exe\") == \"No\"\nassert         file_name_check(\"abc123.exe.exe\") == \"No\"\nassert         file_name_check(\"abc123.txt.txt\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     file_name_check(\"test.txt\") == \"Yes\"\nassert     file_name_check(\"test.exe\") == \"Yes\"\nassert     file_name_check(\"test.dll\") == \"Yes\"\nassert     file_name_check(\"a.txt\") == \"Yes\"\nassert     file_name_check(\"a.exe\") == \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         file_name_check('abc.123.txt') == 'No'\nassert         file_name_check('abc.txt') == 'Yes'\nassert         file_name_check('abc.123') == 'No'\nassert         file_name_check('abc.txt.txt') == 'Yes'\nassert         file_name_check('abc.txt.txt.txt') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     file_name_check('abcd') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.exe') == 'Yes'\nassert     file_name_check('abc.dll') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     file_name_check('abc.txt') == 'Yes', 'file_name_check'\nassert     file_name_check('abc.txt1') == 'No', 'file_name_check'\nassert     file_name_check('abc.txt.txt') == 'Yes', 'file_name_check'\nassert     file_name_check('abc') == 'No', 'file_name_check'\nassert     file_name_check('abc.exe') == 'Yes', 'file_name_check'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     file_name_check(\"11111.txt\") == \"No\"\nassert     file_name_check(\"11111.exe\") == \"No\"\nassert     file_name_check(\"11111.dll\") == \"No\"\nassert     file_name_check(\"a.txt\") == \"Yes\"\nassert     file_name_check(\"a.exe\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     file_name_check('asdf') == 'No'\nassert     file_name_check('zad') == 'No'\nassert     file_name_check('asdf.txt') == 'Yes'\nassert     file_name_check('asdf.exe') == 'Yes'\nassert     file_name_check('asdf.dll') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     file_name_check('a9d2') == 'Yes'\nassert     file_name_check('a9d2.exe') == 'Yes'\nassert     file_name_check('a9d2.txt') == 'Yes'\nassert     file_name_check('a9d2.exe.txt') == 'Yes'\nassert     file_name_check('a9d2.dll') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     file_name_check('test.txt') == 'Yes'\nassert     file_name_check('test1.0.txt') == 'No'\nassert     file_name_check('test.exe') == 'No'\nassert     file_name_check('test.dll') == 'No'\nassert     file_name_check('test.exe.txt') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 45\nassert     sum_squares([0, 1, 2, 3, 4, 5]) == 45\nassert     sum_squares([-1, -2, -3, -4, -5]) == 45\nassert     sum_squares([-1, 0, 1, 2, 3, 4, 5]) == 45\nassert     sum_squares([-1, 0, 1, 2, 3, 4]) == 39\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 14\nassert     sum_squares([-3, 4, 5]) == 9\nassert     sum_squares([-3, 4, 5, 10, 11]) == 91\nassert     sum_squares([-3, 4, 5, 10, 11, -5]) == 91\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5221\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 25\nassert     sum_squares([1,2,3,4,5,6]) == 36\nassert     sum_squares([1,2,3,4,5,6,7]) == 48\nassert     sum_squares([1,2,3,4,5,6,7,8]) == 72\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 100\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_squares([1,2,3,4,5]) ==     30\nassert     sum_squares([5,4,3,2,1]) ==     30\nassert     sum_squares([7,9,11,13,15]) ==     60\nassert     sum_squares([19,23,29,31,37]) ==     230\nassert     sum_squares([27,35,39,43,49]) ==     270\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([1,2,3,4])     == 19\nassert     sum_squares([1,2,3,4,5,6])     == 22\nassert     sum_squares([1,2,3,4,5,6,7])     == 26\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])     == 2184\nassert     sum_squares([2,3,4])     == 30\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([1,2,3,4]) == 29\nassert     sum_squares([1,2,3,4,5]) == 29\nassert     sum_squares([2,4,6]) == 68\nassert     sum_squares([]) == 0\nassert     sum_squares([1,2,3,4,5,6]) == 294\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([2, 7, 5, 4, 6, 3]) == 11\nassert     sum_squares([2, 7, 5, 4, 6, 3, 1]) == 19\nassert     sum_squares([2, 7, 5, 4, 6, 3, 1, 1]) == 22\nassert     sum_squares([2, 7, 5, 4, 6, 3, 1, 1, 1]) == 22\nassert     sum_squares([2, 7, 5, 4, 6, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 44\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([3, 4, 7, 9, 17, 15, 21]) ==     454\nassert     sum_squares([2, 4, 7, 9, 17, 15, 21]) ==     72\nassert     sum_squares([2, 4, 7, 9, 17, 15, 21, 35]) ==     722\nassert     sum_squares([2, 4, 7, 9, 17, 15, 21, 35, 4]) ==     729\nassert     sum_squares([2, 4, 7, 9, 17, 15, 21, 35, 4, 2]) ==     734\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 21\nassert     sum_squares([-1, -2, -3, -4, -5]) == 25\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 21\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 21\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 21\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 30\nassert     sum_squares([5,4,3,2,1]) == 30\nassert     sum_squares([7,8,9,10]) == 100\nassert     sum_squares([11,12,13,14]) == 100\n\n\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"how are you today?\") == \"how are you today?\"\nassert     words_in_sentence(\"the elephant is at the beach\") == \"the elephant is at the beach\"\nassert     words_in_sentence(\"hello how are you\") == \"hello how are you\"\nassert     words_in_sentence(\"the elephant is at the beach\") == \"the elephant is at the beach\"\nassert     words_in_sentence(\"the elephant is at the beach\") == \"the elephant is at the beach\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_in_sentence(\"this is a test\") == \"is a test\"\nassert     words_in_sentence(\"this is a test test\") == \"test test\"\nassert     words_in_sentence(\"this is a test test test\") == \"test test\"\nassert     words_in_sentence(\"this is a test test test test\") == \"test\"\n\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_in_sentence(\"Why are you so strong\") == \"why are you so strong\"\nassert     words_in_sentence(\"What is the meaning of life\") == \"what is the meaning of life\"\nassert     words_in_sentence(\"It is time for all the people to assemble\") == \"it is time for all the people to assemble\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"I am a senior developer\") == \"a senior developer\"\nassert     words_in_sentence(\"I am a junior developer\") == \"a junior developer\"\nassert     words_in_sentence(\"I am a junior developer\") == \"a junior developer\"\nassert     words_in_sentence(\"I am a developer\") == \"a developer\"\nassert     words_in_sentence(\"I am a developer\") == \"a developer\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == 'the quick brown fox jumps over the lazy dog'\nassert     words_in_sentence(\"the brown fox jumps over the lazy dog\") == 'the brown fox jumps over the lazy dog'\nassert     words_in_sentence(\"the lazy dog jumps over the brown fox\") == 'the lazy dog jumps over the brown fox'\nassert     words_in_sentence(\"the lazy dog jumps over the brown fox jumps\") == 'the lazy dog jumps over the brown fox'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"Hello, World!\") == \"World\"\nassert     words_in_sentence(\"This is a test.\") == \"test\"\nassert     words_in_sentence(\"We have a lovely bunch of words.\") == \"words\"\nassert     words_in_sentence(\"We have words\") == \"\""
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"We are the champions\") == \"We are the champions\"\nassert     words_in_sentence(\"We are the champions\") == \"We are the champions\"\nassert     words_in_sentence(\"We are the champions\") == \"We are the champions\"\nassert     words_in_sentence(\"We are the champions\") == \"We are the champions\"\nassert     words_in_sentence(\"We are the champions\") == \"We are the champions\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"This is an example sentence\") == \"This is an example\"\nassert     words_in_sentence(\"What is the solution to this problem\") == \"What is the solution\"\nassert     words_in_sentence(\"Hello World\") == \"Hello World\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"Hi there, you are awesome!\") == 'Hi there, you are awesome!'\nassert     words_in_sentence(\"Hello! Hi There! How are you today?\") == 'Hello! Hi There! How are you today?'\nassert     words_in_sentence(\"Hello\") == 'Hello'\nassert     words_in_sentence(\"Hello, Hello, Hello!\") == 'Hello! Hello! Hello'\nassert     words_in_sentence(\" \") == ''\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_in_sentence('This is a test') == 'This test'\nassert     words_in_sentence('This is a test') == 'This test'\nassert     words_in_sentence('This is a test') == 'This test'\nassert     words_in_sentence('This is a test') == 'This test'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1/1\") == False\nassert     simplify(\"1/2\", \"2/1\") == True\nassert     simplify(\"1/2\", \"2/2\") == False\nassert     simplify(\"1/2\", \"3/4\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     simplify(\"1/5\", \"2/3\") == True\nassert     simplify(\"1/5\", \"1/3\") == True\nassert     simplify(\"1/5\", \"0/4\") == False\nassert     simplify(\"1/5\", \"1/5\") == True\nassert     simplify(\"0/1\", \"1/1\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     simplify('1/3', '2/3') == True\nassert     simplify('2/3', '4/3') == False\nassert     simplify('4/3', '1/3') == False\nassert     simplify('2/3', '3/3') == True\nassert     simplify('1/3', '2/3') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     simplify('5/5', '2') == True\nassert     simplify('5/5', '5') == True\nassert     simplify('5/5', '1') == True\nassert     simplify('5/5', '0') == False\nassert     simplify('2/3', '1') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     simplify('1/2', '2/4') == True\nassert     simplify('1/2', '3/4') == False\nassert     simplify('3/4', '1/2') == True\nassert     simplify('3/4', '2/4') == False\nassert     simplify('1/2', '2/3') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     simplify(\"1/5\", \"5/8\") == True\nassert     simplify(\"1/5\", \"5/6\") == False\nassert     simplify(\"1/3\", \"3/4\") == True\nassert     simplify(\"1/3\", \"1/3\") == True\nassert     simplify(\"1/2\", \"3/4\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/5\", \"1/2\") == False\nassert     simplify(\"1/4\", \"1/2\") == True\nassert     simplify(\"1/3\", \"1/2\") == False\nassert     simplify(\"1/6\", \"1/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     simplify('1/3', '3/4') == True\nassert     simplify('1/3', '5/4') == False\nassert     simplify('1/5', '1/3') == True\nassert     simplify('1/5', '2/3') == True\nassert     simplify('2/3', '1/3') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     simplify('1', '2') == True\nassert     simplify('3', '4') == False\nassert     simplify('0', '4') == True\nassert     simplify('2', '1') == True\nassert     simplify('1', '1') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     simplify('1/2', '1/2') == True\nassert     simplify('1/2', '1/3') == False\nassert     simplify('1/2', '1/6') == False\nassert     simplify('1/2', '1/8') == False\nassert     simplify('1/2', '1/10') == False\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     order_by_points([99, 99, 88, 99, 777]) == [99, 99, 99, 99, 777]\nassert     order_by_points([55, 99, 99, 88, 77]) == [99, 99, 99, 99, 77]\nassert     order_by_points([99, 99, 88, 77]) == [77, 99, 99, 99]\nassert     order_by_points([99, 77]) == [77, 99]\nassert     order_by_points([77]) == [77]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     order_by_points([15, 15, 7, 15]) == [15, 15, 7, 15], \"Fifth\"\nassert     order_by_points([0, 0, 0, 0]) == [0, 0, 0, 0], \"Zero\"\nassert     order_by_points([9, 0, 0, 1]) == [0, 0, 1, 9], \"One\"\nassert     order_by_points([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0], \"Zero (again)\"\nassert     order_by_points([4, 0, 0, 1, 3]) == [1, 0, 3, 0, 4], \"Four\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     order_by_points([-1,1,2,3,4]) == [-1,1,2,3,4], \"Test 1\"\nassert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5], \"Test 2\"\nassert     order_by_points([-1,-2,-3,-4,-5]) == [-5,-4,-3,-2,-1], \"Test 3\"\nassert     order_by_points([]) == [], \"Test 4\"\nassert     order_by_points([0,0]) == [0,0], \"Test 5\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     order_by_points([10, 22, 33, 49, 55]) == [22, 10, 33, 55, 49], \"incorrect\"\nassert     order_by_points([22, 33, 49, 55, 10]) == [22, 10, 33, 49, 55], \"incorrect\"\nassert     order_by_points([11, 22, 33, 49, 55, 10]) == [22, 11, 10, 33, 49, 55], \"incorrect\"\nassert     order_by_points([11, 22, 33, 49, 55]) == [11, 22, 33, 49, 55], \"incorrect\"\nassert     order_by_points([]) == [], \"incorrect\"\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     order_by_points([2, 1, 5, 4, 10, 7, 9, 0, 3, 6]) == [0, 1, 2, 3, 4, 5, 6, 7, 9, 10]\nassert     order_by_points([0, 2, 3, 4, 9, 6, 7, 1, 5, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 0, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 9]\nassert     order_by_points([4, 5, 0, 3, 1, 6, 7, 2, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (order_by_points([10, 12, 2, 3, 15, 5, 7]) == [2, 3, 5, 7, 10, 12, 15])\nassert     (order_by_points([15, 17, 19, 2, 10, 14, 12]) == [2, 10, 12, 15, 17, 19, 14])\nassert     (order_by_points([5, 4, 2, 1, 0]) == [0, 1, 2, 4, 5])\nassert     (order_by_points([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [1, 8, 7, 6, 5] == order_by_points([5, 6, 7, 8, 1])\nassert     [1, 2, 3, 4, 5] == order_by_points([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == order_by_points([5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5] == order_by_points([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 5] == order_by_points([5, 4, 3, 2, 1])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     order_by_points([42, 87, 96, 864, 469,\n                          14, 9, 1, 43, -11,\n                          1, 0, 6, 6, -4, -4]) == [\n                          1, 0, 1, 1, 1, 1, 6, 6, 6, 6, 864,\n                          869, 864, 469, 469, 469, 14, 14,\n                          14, 14, 14, 9, 9, 9, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          43, 43, 43, 43, 43, 43, 43,\n                          4"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     order_by_points([4, 10, 2, 4, 2, 10, 2, 6]) == [4, 10, 2, 2, 4, 6, 10, 10]\nassert     order_by_points([4, 1, 2, 9, 1, 22, 9, 1, 13, 11]) == [4, 1, 9, 1, 13, 11, 22, 22, 22, 22]\nassert     order_by_points([4, 22, 22, 22, 22, 22, 22, 22, 22, 22]) == [4, 22, 22, 22, 22, 22, 22, 22, 22, 22]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     order_by_points([-4, -2, -1, 0, 1, 2, 3, 4, 5, 6]) == [-4, -2, -1, 0, 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     (order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == \n            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     (order_by_points([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) ==\n            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     (order_by_points([5, 3, 1, 2, 4, 0]) ==\n            [0, 1, 2, 3, 4, 5])\nassert     (order_by_points([]) == [])\nassert     (order_by_points([0]) == [0])\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef findDup(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are duplicates.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     specialFilter([3, 5, 7, 1, 9]) == 3, \"incorrect\"\nassert     specialFilter([1, 2, 3, 4, 5]) == 0, \"incorrect\"\nassert     specialFilter([6, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 4, \"incorrect\"\nassert     specialFilter([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 4, \"incorrect\"\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4, \"incorrect\"\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     specialFilter([1,3,5,7,9]) == 4\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 9\nassert     specialFilter([1,2,3,4,5]) == 5\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     specialFilter([8,9,4,5,9]) == 2\nassert     specialFilter([7,7,7,7,7]) == 0\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 5\nassert     specialFilter([5,9,7,8,8,9,6,3,1]) == 3\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10,11,12]) == 8\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     specialFilter([3, 10, 2, 8, 0, 1, 4, 4]) == 3\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 5\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     specialFilter([10,20,30,40,50,60]) == 4\nassert     specialFilter([10,10,10,10,10,10,10]) == 0\nassert     specialFilter([10,11,20,30,40,50,60]) == 5\nassert     specialFilter([10,20,30,40,50,60]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     specialFilter([1,3,5,7,9]) == 5\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 6\nassert     specialFilter([1,2,3,4,5,6,7,8,9]) == 8\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10,11,12]) == 0\nassert     specialFilter([1,3,5,7,9]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 1\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_max_triples(5) == 1\nassert     get_max_triples(10) == 2\nassert     get_max_triples(20) == 2\nassert     get_max_triples(50) == 4\nassert     get_max_triples(100) == 10\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 0\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 6\nassert     get_max_triples(6) == 5\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_max_triples(2) == 0\nassert    get_max_triples(3) == 1\nassert    get_max_triples(4) == 2\nassert    get_max_triples(5) == 4\nassert    get_max_triples(6) == 6\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_max_triples(3) == 3\nassert     get_max_triples(4) == 1\nassert     get_max_triples(5) == 0\nassert     get_max_triples(6) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(5) == 1\nassert     get_max_triples(6) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 3\nassert     get_max_triples(6) == 5\nassert     get_max_triples(7) == 4\nassert     get_max_triples(8) == 4\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_max_triples(4) == 2\nassert     get_max_triples(6) == 1\nassert     get_max_triples(1) == 0\nassert     get_max_triples(9) == 1\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars')\nassert     bf('Venus', 'Earth') == ('Earth', 'Venus')\nassert     bf('Earth', 'Mars') == ('Mars', 'Earth', 'Venus')\nassert     bf('Mars', 'Jupiter') == ('Jupiter', 'Mars', 'Venus')\nassert     bf('Jupiter', 'Saturn') == ('Saturn', 'Jupiter', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (bf('Mercury', 'Venus') \n            == ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'))\nassert     (bf('Venus', 'Earth') \n            == ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'))\nassert     (bf('Earth', 'Mars') \n            == ('Jupiter', 'Saturn', 'Uranus', 'Neptune'))\nassert     (bf('Mars', 'Uranus') \n            == ('Neptune',))\nassert     (bf('Mars', 'Jupiter') \n            == ('Jupiter',))\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Venus') == ('Earth', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Earth') == ('Mars', 'Earth', 'Venus', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Earth') == ('Jupiter', 'Earth', 'Venus', 'Mars', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mercury') == ('Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Venus') == ('Venus', )\nassert     bf('Mars', 'Jupiter') == ('Mars', )\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bf('mercury','venus') == ('venus', 'earth', 'earth', 'earth', \n                                 'mars','mars','mars','mars','mars','mars', \n                                  'jupiter', 'jupiter', 'jupiter', 'jupiter', \n                                 'saturn','saturn','saturn','saturn', \n                                  'uranus', 'uranus', 'uranus', 'uranus', \n                                  'neptune', 'neptune', 'neptune', 'neptune')\nassert     bf('Venus','mercury') == ('mercury', 'earth', 'earth', 'earth', \n                                 'mars','mars','mars','mars','mars','mars', \n                                  'jupiter', 'jupiter', 'jupiter', 'jupiter', \n                                 'saturn','saturn','saturn','saturn', \n                                  'uranus', 'uranus', 'uranus', 'uranus', \n                                  'neptune', 'neptune', 'neptune', 'neptune')\nassert     bf('Earth', 'Mars') == ('mercury','venus', 'earth', 'earth', \n                                'mars','mars','mars','mars','mars','mars', \n                                'jupiter', 'jupiter', 'jupiter', 'jupiter', \n                                'saturn','saturn','saturn','saturn', \n                                'uranus', 'uranus', 'uranus', 'uranus', \n                                'neptune', 'neptune', 'neptune', 'neptune')\nassert     bf('Mars', 'Jupiter') == ('mercury','venus', 'earth', 'earth', \n                                'mars','mars','mars','mars','mars','mars', \n                                'jupiter', 'jupiter', 'jupiter', 'jupiter', \n                                'saturn','saturn','saturn','saturn', \n                                'uranus', 'uranus', 'uranus', 'uranus', \n                                'neptune', 'neptune', 'neptune', 'neptune')\nassert     bf('Jupiter', 'Saturn') == ('mercury','venus', 'earth', 'earth', \n                                'mars','mars','mars','mars','mars','mars', \n                                'jupiter', 'jupiter', 'jupiter', 'jupiter', \n                                'neptune', 'neptune', 'neptune', 'neptune', \n                                'uranus', 'uranus', 'uranus', 'uranus', \n                                'saturn','saturn','saturn','saturn')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mars', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Mercury', 'Mars', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Jupiter') == ('Uranus', 'Neptune')\nassert     bf('Jupiter', 'Sun') == ('Neptune', 'Earth')\nassert     bf('Saturn', 'Uranus') == ('Earth')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus',)\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth')\nassert     bf('Earth', 'Mars') == ('Venus', 'Earth', 'Mars')\nassert     bf('Mars', 'Jupiter') == ('Venus', 'Earth', 'Mars')\nassert     bf('Jupiter', 'Saturn') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     bf('mercury','venus')         == ('mercury','venus')\nassert     bf('venus', 'earth')         == ('venus', 'earth')\nassert     bf('earth','mars')         == ('earth','mars')\nassert     bf('mars', 'jupiter')         == ('mars', 'jupiter')\nassert     bf('jupiter','saturn')     == ('jupiter','saturn')\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         sorted_list_sum(['pot','spam', 'eggs']) == ['spam', 'eggs', 'pot']\nassert         sorted_list_sum(['data', 'a', 'big', 'data', 'a', 'big']) == ['data', 'a', 'big', 'data', 'big', 'a']\nassert         sorted_list_sum(['my', 'computer', 'has', 'run', 'off']) == ['computer', 'has', 'run', 'off']\nassert         sorted_list_sum(['my', 'computer', 'has', 'run', 'off', 'off']) == ['computer', 'has', 'run', 'off']\nassert         sorted_list_sum(['my', 'computer', 'has', 'run', 'off', 'off', 'off']) == ['computer', 'has', 'run', 'off']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef repeated_string(s, n):\n    \"\"\"Write a function that takes a non-negative integer n\n    and a non-empty string s and returns the same string as well as a count\n    of the number of times the string is present in the string s (n is the length of the string s).\n    Note that the string is not guaranteed to have all the characters in s repeated (e.g. \"abc\" is a substring of \"ababc\").\n    \"\"\"\n    pass\n\ndef repeated_string_v1(s, n):\n    \"\"\"Same as repeated_string.\n    \"\"\"\n    pass\n\ndef find_all_strings(s, sub):\n    \"\"\"Write a function that takes a string s and a non-empty string sub and returns the\n    number of times the string sub appears in the string s.\n    For example:\n    find_all_strings(\"catcowcat\", \"cat\") returns 2\n    find_all_strings(\"catcowcat\", \"cow\") returns 1\n    find_all_strings(\"catcowcat\", \"dog\") returns 0\n    The string sub may include any character, including a newline character.\n    \"\"\"\n    pass\n\ndef find_all_strings_v1(s, sub):\n    \"\"\"Same as find_all_strings.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sorted_list_sum(['cat', 'dog', 'bird','snake','mouse']) == ['mouse', 'dog', 'cat','snake', 'bird']\nassert     sorted_list_sum(['bird', 'dog', 'cat','snake','mouse']) == ['bird', 'cat','mouse', 'dog','snake']\nassert     sorted_list_sum(['cat', 'cat','mouse','snake','mouse']) == ['mouse', 'cat', 'cat','mouse','snake']\nassert     sorted_list_sum(['mouse','mouse','mouse','snake','mouse']) == ['mouse','mouse','mouse','snake','mouse']\nassert     sorted_list_sum(['dog', 'cat', 'cat','mouse', 'dog']) == ['dog', 'cat', 'cat','mouse', 'dog']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"abc\", \"ab\", \"cba\", \"abcd\"]) == [\"abc\", \"abcd\", \"ab\", \"cba\"]\nassert     sorted_list_sum([\"Hello\", \"World\", \"Coder\", \"Says\", \"Hello\"]) == [\"Hello\", \"Hello\", \"Coder\", \"Says\", \"World\"]\nassert     sorted_list_sum([\"abc\", \"ab\", \"cba\", \"abcd\", \"CODER\"]) == [\"abc\", \"abcd\", \"ab\", \"CODER\", \"cba\"]\nassert     sorted_list_sum([\"\", \"\", \"\", \"\", \"\"]) == [\"\", \"\", \"\", \"\", \"\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sorted_list_sum(['cat', 'dog', 'fly', 'car', 'bear', 'cow']) == ['car', 'bear', 'cow', 'cat', 'dog', 'fly']\nassert     sorted_list_sum(['car', 'bear', 'cat', 'dog', 'fly', 'car']) == ['car', 'bear', 'cat', 'dog', 'fly']\nassert     sorted_list_sum(['cat', 'dog', 'cow', 'fly', 'car', 'bear']) == ['car', 'bear', 'cow', 'cat', 'dog', 'fly']\nassert     sorted_list_sum(['cat', 'bear', 'car', 'dog', 'fly', 'cow']) == ['car', 'bear', 'cow', 'cat', 'dog', 'fly']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum(['a']) == ['a']\nassert     sorted_list_sum(['a', 'b']) == ['a', 'b']\nassert     sorted_list_sum(['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     sorted_list_sum(['a', 'a', 'b']) == ['a', 'b']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sorted_list_sum([\"abc\", \"a\", \"bbb\", \"bbb\", \"ccc\", \"c\"]) == [\"abc\", \"a\", \"bbb\", \"bbb\", \"ccc\"]\nassert     sorted_list_sum([\"ab\", \"a\", \"b\", \"ab\"]) == [\"ab\", \"a\", \"b\"]\nassert     sorted_list_sum([\"b\", \"a\", \"b\", \"a\", \"b\"]) == [\"a\", \"b\"]\nassert     sorted_list_sum([\"abc\", \"bbb\", \"bbb\", \"ccc\", \"c\"]) == [\"abc\", \"bbb\", \"ccc\"]\nassert     sorted_list_sum([\"ab\", \"a\", \"b\", \"ab\"]) == [\"ab\", \"a\", \"b\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sorted_list_sum([\"a\", \"aba\", \"aa\", \"aaaaa\", \"aaaaaa\", \"aaaba\", \"aab\"]) == [\"aa\", \"aa\", \"aa\", \"aaba\", \"aaba\", \"aaaaa\", \"aaaaaa\"]\nassert     sorted_list_sum([\"a\", \"aba\", \"aa\", \"aaaaa\", \"aaaaaa\", \"aaaba\", \"aab\"]) == [\"aa\", \"aa\", \"aa\", \"aaba\", \"aaba\", \"aaaaa\", \"aaaaaa\"]\nassert     sorted_list_sum([\"aaa\", \"bbb\", \"ccc\", \"aaaaa\", \"aaaaaa\", \"aaaba\", \"aab\"]) == [\"aa\", \"aa\", \"aa\", \"aaba\", \"aaba\", \"aaaaa\", \"aaaaaa\"]\nassert     sorted_list_sum([\"a\", \"aba\", \"aa\", \"aaaaa\", \"aaaaaa\", \"aaaba\", \"aab\"]) == [\"aa\", \"aa\", \"aa\", \"aaba\", \"aaba\", \"aaaaa\", \"aaaaaa\"]\nassert     sorted_list_sum([\"aaa\", \"bbb\", \"ccc\", \"aaaaa\", \"aaaaaa\", \"aaaba\", \"aab\"]) == [\"aa\", \"aa\", \"aa\", \"aaba\", \"aaba\", \"aaaaa\", \"aaaaaa\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sorted_list_sum(['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']\nassert     sorted_list_sum(['abc', 'def', 'abc']) == ['abc', 'def']\nassert     sorted_list_sum(['abc', 'def', 'def']) == ['abc', 'def']\nassert     sorted_list_sum(['abc', 'def', 'defg', 'abc']) == ['abc', 'def', 'defg', 'abc']\nassert     sorted_list_sum(['abc', 'def', 'ghi', 'ghi', 'ghi', 'ghi', 'ghi', 'ghi', 'ghi', 'ghi', 'ghi', 'ghi', 'ghi']) == ['abc', 'ghi', 'def', 'ghi']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"d\",\"a\",\"c\",\"b\"]) == [\"a\",\"b\",\"c\",\"d\"]\nassert     sorted_list_sum([\"c\",\"b\",\"d\",\"a\"]) == [\"a\",\"b\",\"c\",\"d\"]\nassert     sorted_list_sum([\"x\",\"y\",\"z\",\"x\"]) == [\"x\",\"x\",\"y\",\"z\"]\nassert     sorted_list_sum([\"a\"]) == [\"a\"]\nassert     sorted_list_sum([]) == []\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     x_or_y(1,0,1) == 0\nassert     x_or_y(2,0,1) == 1\nassert     x_or_y(3,0,1) == 1\nassert     x_or_y(4,0,1) == 0\nassert     x_or_y(5,0,1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     x_or_y(7, x, y) == x\nassert     x_or_y(11, x, y) == y\nassert     x_or_y(7, y, x) == y\nassert     x_or_y(11, y, x) == x\nassert     x_or_y(7, x, x) == x\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     x_or_y(3, 1, 0) == 1\nassert     x_or_y(2, 0, 1) == 1\nassert     x_or_y(5, 4, 5) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     x_or_y(1, 1, 0) == 1\nassert     x_or_y(2, 1, 0) == 2\nassert     x_or_y(3, 1, 0) == 2\nassert     x_or_y(4, 1, 0) == 3\nassert     x_or_y(5, 1, 0) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     x_or_y(2, 2, 3) == 2\nassert     x_or_y(3, 2, 3) == 3\nassert     x_or_y(4, 2, 3) == 3\nassert     x_or_y(5, 2, 3) == 3\nassert     x_or_y(6, 2, 3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     x_or_y(5, 3, 2) == 3\nassert     x_or_y(5, 3, 4) == 2\nassert     x_or_y(5, 4, 2) == 4\nassert     x_or_y(5, 4, 4) == 4\nassert     x_or_y(3, 4, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     x_or_y(1, 1, 2) == 2\nassert     x_or_y(2, 1, 2) == 2\nassert     x_or_y(3, 1, 2) == 1\nassert     x_or_y(4, 1, 2) == 2\nassert     x_or_y(5, 1, 2) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     x_or_y(5, 2, 3) == 2\nassert     x_or_y(6, 2, 3) == 3\nassert     x_or_y(4, 2, 3) == 3\nassert     x_or_y(5, 2, 4) == 2\nassert     x_or_y(2, 2, 3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     x_or_y(2, 1, 3) == 1\nassert     x_or_y(3, 1, 3) == 3\nassert     x_or_y(4, 1, 3) == 3\nassert     x_or_y(5, 1, 3) == 3\nassert     x_or_y(6, 1, 3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     x_or_y(5, 1, 2) == 2\nassert     x_or_y(5, 2, 1) == 1\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(3, 2, 1) == 1\nassert     x_or_y(1, 1, 1) == 1\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])         == 544\nassert     double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])     == 452\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])         == 3024\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])     == 3024\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])     == 3024\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 55\nassert double_the_difference([2,4,6]) == 30\nassert double_the_difference([]) == 0\nassert double_the_difference([-1, 3]) == 5\nassert double_the_difference([1.5, 3.5, 5.5]) == 30\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     double_the_difference([1,2,3]) == 2\nassert     double_the_difference([-1,-2,-3]) == -6\nassert     double_the_difference([1.5,2.5,3.5]) == 8\nassert     double_the_difference([1.5,2.5,-3.5]) == 7\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     double_the_difference([1, 3, 5, 7, 9]) == (5*5 + 9*9 + 7*7)\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1.1, 2.5, 3.2, 4.9, 6.3]) == (1.1*1.1 + 2.5*2.5 + 3.2*3.2 + 4.9*4.9 + 6.3*6.3)\nassert     double_the_difference([-1, -3, -5, -7, -9]) == (1*1 + 3*3 + 5*5 + 7*7 + 9*9)\nassert     double_the_difference([-1.1, -2.5, -3.2, -4.9, -6.3]) == (1.1*1.1 + 2.5*2.5 + 3.2*3.2 + 4.9*4.9 + 6.3*6.3)\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([0]) == 0\nassert     double_the_difference([1,2,3,4,5]) == 30\nassert     double_the_difference([0,-2,-4]) == 8\n\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == [4, 16, 36, 64, 100]\nassert     double_the_difference([-1, 2, 3, 4, 5]) == [4, 16, 36, 64, 100]\nassert     double_the_difference([]) == []\nassert     double_the_difference([1,2,3,4,5.1]) == [4, 16, 36, 64, 100]\n\n\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 52\nassert     double_the_difference([1,-3,5]) == 22\nassert     double_the_difference([]) == 0\nassert     double_the_difference([2,-2,3,4,5,-4]) == 16\nassert     double_the_difference([1,2,3,4]) == 1\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 4\nassert     double_the_difference([1, 2, 3, 4, 5, 6]) == 16\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7]) == 28\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3, 4, 5, -1, -2, -3]) == 12\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     double_the_difference([2, 3, 4, 5, 6, 7, 8, 9]) == 225\nassert     double_the_difference([]) == 0\nassert     double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 0\nassert     double_the_difference([2, 3, -4, 5, 6, 7, 8, 9]) == 1225"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, 1, 1]) == 0\nassert     double_the_difference([-1, 1, 1]) == 0\nassert     double_the_difference([1, -1, 1]) == 0\nassert     double_the_difference([1, 2, 3]) == 8\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare([1,2,3], [1,2,3]) == [0,0,0]\nassert     compare([1,2,3], [0,2,3]) == [1,1,2]\nassert     compare([1,2,3], [1,0,3]) == [2,1,2]\nassert     compare([1,2,3], [0,3,1]) == [1,3,2]\nassert     compare([1,2,3], [1,3,2]) == [2,3,1]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare([45,77,77,88,99],\n                [45,45,45,45,45]) == [0,0,0,4,0]\nassert     compare([45,77,77,88,99],\n                [45,77,77,77,77]) == [0,1,1,1,1]\nassert     compare([45,77,77,88,99],\n                [45,45,45,45,45]) == [0,0,0,0,0]\nassert     compare([45,77,77,88,99],\n                [45,45,45,45,45]) == [0,0,0,0,0]\n\n\ndef compare_recursive(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     compare([[1,2],[2,3],[3,4]],[0,1,2])==[1,2,3]\nassert     compare([[1,2],[2,3],[3,4]],[1,0,3])==[2,2,3]\nassert     compare([[1,2],[2,3],[3,4]],[3,2,1])==[0,0,1]\nassert     compare([[1,2],[2,3],[3,4]],[4,3,2])==[1,2,3]\nassert     compare([[1,2],[2,3],[3,4]],[3,1,1])==[0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare([3,2,1,0,5], [5,1,0,0,2]) == [0,1,3,2,4]\nassert     compare([3,2,1,0,5], [4,1,0,0,2]) == [1,2,3,4,5]\nassert     compare([3,2,1,0,5], [3,1,0,0,2]) == [0,1,3,2,5]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\nassert     compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1]) == [0, 0, 0, 0, 0, 1]\nassert     compare([0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0]) == [0, 0, 1, 0, 0, 0]\nassert     compare([0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1]) == [0, 0, 1, 0, 0, 1]\nassert     compare([0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 1, 0]) == [0, 0, 1, 0, 1, 0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     compare([5,10,15,30,50],[5,10,15,30,50]) == [0,10,5,0,0]\nassert     compare([1,2,3,4,5],[5,10,15,30,50]) == [0,10,5,0,0]\nassert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     compare([5,10,15,30,50],[3,6,9,12,15]) == [10,5,0,15,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef calc(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    score = game\n    guess = guess\n    scores = []\n    guesses = []\n    for i in range(len(game)):\n        scores.append(score[i])\n        guesses.append(guess[i])\n    for i in range(len(game)):\n        scores[i] = scores[i] - guess[i]\n    return scores\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'], \n                ['a', 'f', 'g', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'w', 'y']) == [0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 1, 2, 3, 4, 4]\nassert     compare(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'], \n                ['a', 'f', 'g', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'w', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == [0, 1, 2, 3, 4, 4, 3, 2, 1, 0, 1, 2, 3, 4, 4]"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     compare([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\nassert     compare([1, 2, 3], [2, 1, 3]) == [1, 1, 2]\nassert     compare([1, 2, 3], [3, 2, 1]) == [2, 1, 0]\nassert     compare([1, 2, 3], [3, 3, 3]) == [0, 1, 2]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare([1, 2, 3, 4], [1, 2, 3, 4]) == [0, 0, 0, 0]\nassert     compare([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 1, 1, 1]\nassert     compare([1, 2, 3, 4], [0, 4, 3, 2]) == [0, 2, 1, 4]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Paper\", [\"SeRviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Fists\", [\"SeRviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Fists.StuFfed\"\nassert     Strongest_Extension(\"Fists\", [\"SeRviNGSliCes\", \"Cheese\", \"StuFfed\", \"SeRviNGSliCes\", \"StuFfed\"]) == \"Fists.StuFfed\"\nassert     Strongest_Extension(\"Fists\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SeRviNGSliCes\", \"StuFfed\"]) == \"Fists.SeRviNGSliCes\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"Example #1\"\nassert     Strongest_Extension('Keyboard', ['KEyboard', 'Qwerty', 'ASDFGH']) == 'Keyboard.KEyboard', \"Example #2\"\nassert     Strongest_Extension('Mountain', ['NmNtErY', 'SOS', 'RgH', 'f4a']) == 'Mountain.NmNtErY', \"Example #3\"\nassert     Strongest_Extension('B', ['B', 'B', 'B', 'B']) == 'B.B', \"Example #4\"\nassert     Strongest_Extension('OmNmK', ['OMNmK', 'LK', 'NmK']) == 'OmNmK.OMNmK', \"Example #5\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Lime']) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Lime', 'tomato']) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Lime', 'tomato','strawberry']) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Lime', 'tomato','strawberry', 'peppers']) == \"Slices.SErviNGSliCes\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.Cheese'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'StuFfed']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Strongest_Extension(\"Slices\", \n                        ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Foo\", \n                        ['Foo', 'Bar', 'Baz']) == 'Foo.Foo'\nassert     Strongest_Extension(\"Hello\", \n                        ['Hello', 'World', 'Space']) == 'Hello.Hello'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"First\"\nassert     Strongest_Extension('Slices', ['SeRviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SeRviNGSliCes', \"Second\"\nassert     Strongest_Extension('Slices', ['seRviNGSliCes', 'Cheese','stuFfed']) == 'Slices.seRviNGSliCes', \"Third\"\nassert     Strongest_Extension('Slices', ['SeRviNGSliCes', 'cheese','stuFfed']) == 'Slices.SeRviNGSliCes', \"Fourth\"\n\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Zebra', ['ZeBrA', 'GeBrA', 'SoRDe']) == 'Zebra.GeBrA'\nassert     Strongest_Extension('School', ['SoRDe', 'Cheese', 'SoRDe']) == 'School.SoRDe'\nassert     Strongest_Extension('School', ['SooRDe', 'Cheese', 'SoRDe']) == 'School.SoRDe'\nassert     Strongest_Extension('School', ['soRDe', 'Cheese', 'SoRDe']) == 'School.SoRDe'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Candy', ['Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum']) == 'Candy.Yum'\nassert     Strongest_Extension('Candy', ['Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum']) == 'Candy.Yum'\nassert     Strongest_Extension('Candy', ['Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum']) == 'Candy.Yum'\nassert     Strongest_Extension('Candy', ['Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum', 'Yum']) == 'Candy.Yum'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", [\"Gumbo\", \"CocaCola\", \"Kebabs\"]) == 'Slices.Gumbo'\nassert     Strongest_Extension(\"Snails\", [\"Insecto\", \"Snail\", \"Shell\", \"Pupae\"]) == 'Snails.Shell'\nassert     Strongest_Extension(\"Snakes\", [\"Snake\", \"Hook\", \"Sneak\", \"Snake\", \"Sneak\"]) == 'Snakes.Hook'\nassert     Strongest_Extension(\"Turtles\", [\"Turtle\", \"Turtle\", \"Turtle\", \"Turtle\"]) == 'Turtles.Turtle'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'UselessSlices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'UselessSlices', 'UselessSlices2']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'UselessSlices', 'UselessSlices2', 'UselessSlices3']) == 'Slices.SErviNGSliCes'\n\n\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     cycpattern_check(\"PAP\",\"APP\") == True\nassert     cycpattern_check(\"PAP\",\"PAP\") == True\nassert     cycpattern_check(\"PAP\",\"AP\") == False\nassert     cycpattern_check(\"PAP\",\"PA\") == True\nassert     cycpattern_check(\"PAP\",\"APPA\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"abcde\",\"acde\") == True\nassert     cycpattern_check(\"abcde\",\"bcdea\") == True\nassert     cycpattern_check(\"abcde\",\"abcde\") == True\nassert     cycpattern_check(\"abcde\",\"cd\") == False\nassert     cycpattern_check(\"abcde\",\"ab\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cycpattern_check('dog', 'god') == True\nassert    cycpattern_check('do', 'od') == True\nassert    cycpattern_check('do', 'odg') == True\nassert    cycpattern_check('dog', 'godg') == True\nassert    cycpattern_check('dog', 'dogd') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     cycpattern_check(\"abc\", \"bca\") == True\nassert     cycpattern_check(\"abc\", \"bcb\") == True\nassert     cycpattern_check(\"abc\", \"abc\") == True\nassert     cycpattern_check(\"abc\", \"abd\") == False\nassert     cycpattern_check(\"abc\", \"bcd\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     cycpattern_check(    \"abc\",    \"bcd\"    ) == True\nassert     cycpattern_check(    \"ab\",    \"ababab\"    ) == True\nassert     cycpattern_check(    \"ab\",    \"cababab\"    ) == True\nassert     cycpattern_check(    \"ab\",    \"abc\"    ) == False\nassert     cycpattern_check(    \"ab\",    \"bc\"    ) == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert not cycpattern_check(\"abcd\", \"abcd\")\nassert not cycpattern_check(\"abc\", \"bcd\")\nassert not cycpattern_check(\"abc\", \"adb\")\nassert not cycpattern_check(\"abcd\", \"cdab\")\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     cycpattern_check('abab','baba') == True\nassert     cycpattern_check('abcdefg','bccabcd') == True\nassert     cycpattern_check('abcdefg','abdefg') == False\nassert     cycpattern_check('abcdefg','ccabcdef') == True\nassert     cycpattern_check('abcdefg','abcdef') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     cycpattern_check('banana', 'nanab') == True\nassert     cycpattern_check('ana', 'banana') == True\nassert     cycpattern_check('rat', 'art') == True\nassert     cycpattern_check('art', 'rat') == True\nassert     cycpattern_check('rat', 'art') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"waterbottle\", \"erbottlewat\") == True\nassert     cycpattern_check(\"hello\", \"lohel\") == True\nassert     cycpattern_check(\"hello\", \"helol\") == False\nassert     cycpattern_check(\"hello\", \"hel\") == True\nassert     cycpattern_check(\"hello\", \"hello\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cycpattern_check('Test', 'test') == True\nassert     cycpattern_check('Test', 'te') == True\nassert     cycpattern_check('Test', 'en') == True\nassert     cycpattern_check('Test', 'T') == True\nassert     cycpattern_check('Test', 'est') == True\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef is_divisible(num):\n    \"\"\"Given an integer, return True if the number is divisible by either 2 or 3.\n    \"\"\"\n    pass\n\ndef is_prime(num):\n    \"\"\"Given a positive integer, return True if it is prime and False if it is not.\n    \"\"\"\n    pass\n\ndef is_palindrome(num):\n    \"\"\"Given a positive integer, return True if it is palindrome and False if it is not.\n    \"\"\"\n    pass\n\ndef is_even(num):\n    \"\"\"Given a positive integer, return True if it is even and False if it is not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_count(54321) == (4, 1)\nassert     even_odd_count(100) == (0, 0)\n\ndef factorial(num):\n    \"\"\"\n    a factorial function that returns the factorial of the input number num.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_odd_count(26) == (2,1)\nassert     even_odd_count(22) == (2,1)\nassert     even_odd_count(7777) == (7,7)\nassert     even_odd_count(83839) == (5,5)\nassert     even_odd_count(48) == (4,0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (4, 2) == even_odd_count(1994)\nassert     (4, 2) == even_odd_count(2544)\nassert     (2, 1) == even_odd_count(10)\nassert     (2, 1) == even_odd_count(12345)\nassert     (2, 1) == even_odd_count(12346)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     even_odd_count(1) == (1, 0)\nassert     even_odd_count(0) == (0, 1)\nassert     even_odd_count(10) == (0, 1)\nassert     even_odd_count(11) == (1, 1)\nassert     even_odd_count(12) == (2, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_count(121) == (2, 2)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(10) == (0, 1)\nassert     even_odd_count(13) == (1, 2)\nassert     even_odd_count(21) == (2, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_count(24) == (2, 4)\nassert     even_odd_count(3) == (1, 3)\nassert     even_odd_count(234) == (2, 4)\nassert     even_odd_count(13) == (1, 3)\nassert     even_odd_count(12345678) == (8, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_count(99) == (2, 1)\nassert     even_odd_count(111) == (3, 0)\nassert     even_odd_count(222) == (2, 2)\nassert     even_odd_count(121) == (2, 1)\nassert     even_odd_count(0) == (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_count(8675309) == (3, 5)\nassert     even_odd_count(2380) == (2, 3)\nassert     even_odd_count(2) == (1, 1)\nassert     even_odd_count(12) == (2, 0)\nassert     even_odd_count(0) == (1, 0)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1)    == 'i'\nassert     int_to_mini_roman(2)    == 'ii'\nassert     int_to_mini_roman(3)    == 'iii'\nassert     int_to_mini_roman(4)    == 'iv'\nassert     int_to_mini_roman(5)    == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(10) == \"x\"\nassert     int_to_mini_roman(15) == \"xv\"\nassert     int_to_mini_roman(20) == \"x\"\nassert     int_to_mini_roman(25) == \"x\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) ==     'i'\nassert     int_to_mini_roman(2) ==     'ii'\nassert     int_to_mini_roman(3) ==     'iii'\nassert     int_to_mini_roman(4) ==     'iv'\nassert     int_to_mini_roman(5) ==     'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(6) == \"vi\"\nassert     int_to_mini_roman(11) == \"xi\"\nassert     int_to_mini_roman(23) == \"xiii\"\nassert     int_to_mini_roman(29) == \"xix\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(10) == 'x'\nassert     int_to_mini_roman(1000) =='m'\nassert     int_to_mini_roman(12) == 'x'\nassert     int_to_mini_roman(15) == 'xi'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1)    == \"I\"\nassert     int_to_mini_roman(2)    == \"II\"\nassert     int_to_mini_roman(3)    == \"III\"\nassert     int_to_mini_roman(4)    == \"IV\"\nassert     int_to_mini_roman(5)    == \"V\"\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(2, 3, 4) == True\nassert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(3, 4, 6) == False\nassert     right_angle_triangle(1, 2, 3) == False\nassert     right_angle_triangle(4, 4, 4) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(5, 12, 13) == True\nassert     right_angle_triangle(8, 10, 11) == False\nassert     right_angle_triangle(1, 4, 6) == True\nassert     right_angle_triangle(5, 8, 10) == False\nassert     right_angle_triangle(6, 12, 8) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(5, 6, 7) == True\nassert     right_angle_triangle(7, 8, 9) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(3, 4, 5)\nassert not     right_angle_triangle(7, 12, 5)\nassert     right_angle_triangle(7, 3, 12)\nassert not     right_angle_triangle(7, 12, 7)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(5, 5, 3) == True\nassert     right_angle_triangle(2, 2, 2) == False\nassert     right_angle_triangle(3, 3, 4) == True\nassert     right_angle_triangle(2, 2, 3) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(2, 2, 2) == True\nassert     right_angle_triangle(2, 3, 4) == False\nassert     right_angle_triangle(1, 1, 1) == True\nassert     right_angle_triangle(3, 4, 2) == False\nassert     right_angle_triangle(3, 5, 4) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(3, 4, 5)\nassert     not right_angle_triangle(10, 11, 12)\nassert     not right_angle_triangle(3, 2, 4)\nassert     right_angle_triangle(3, 2, 2)\nassert     right_angle_triangle(3, 4, 4)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(2, 2, 2) == True, \"Triangle (2,2,2) should be right-angled\"\nassert     right_angle_triangle(2, 3, 3) == True, \"Triangle (2,3,3) should be right-angled\"\nassert     right_angle_triangle(3, 2, 2) == False, \"Triangle (3,2,2) should not be right-angled\"\nassert     right_angle_triangle(3, 3, 2) == False, \"Triangle (3,3,2) should not be right-angled\"\nassert     right_angle_triangle(3, 3, 3) == True, \"Triangle (3,3,3) should be right-angled\"\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(1,1,1) == True\nassert     right_angle_triangle(2,3,4) == False\nassert     right_angle_triangle(1,3,4) == False\nassert     right_angle_triangle(1,4,3) == True\nassert     right_angle_triangle(1,3,3) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(2, 4, 5)\nassert     right_angle_triangle(3, 4, 5)\nassert     not right_angle_triangle(3, 4, 6)\nassert     right_angle_triangle(2, 4, 3)\nassert     right_angle_triangle(5, 4, 3)\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_max([\"cat\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\"]) == \"g\"\nassert     find_max([\"cat\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\"]) == \"g\"\nassert     find_max([\"cat\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\"]) == \"g\"\n\nprint \"The tests passed successfully\""
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_max([\"giraffe\", \"elephant\", \"giraffe\", \"elephant\"]) == \"elephant\"\nassert     find_max([\"giraffe\", \"elephant\", \"giraffe\", \"elephant\", \"dog\", \"cat\", \"dog\", \"cat\"]) == \"giraffe\"\nassert     find_max([\"giraffe\", \"elephant\", \"giraffe\", \"elephant\", \"dog\", \"cat\", \"giraffe\", \"cat\"]) == \"giraffe\"\nassert     find_max([\"giraffe\", \"elephant\", \"giraffe\", \"elephant\", \"dog\", \"cat\", \"giraffe\", \"cat\", \"elephant\"]) == \"giraffe\"\nassert     find_max([\"giraffe\", \"elephant\", \"giraffe\", \"elephant\", \"dog\", \"cat\", \"giraffe\", \"cat\", \"elephant\", \"cat\"]) == \"giraffe\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_max([\"master\", \"me\", \"it\"]) == \"me\"\nassert     find_max([\"so\", \"so\", \"cute\", \"me\", \"so\", \"me\"]) == \"so\"\nassert     find_max([\"so\", \"me\", \"me\", \"so\", \"so\", \"cute\"]) == \"so\"\nassert     find_max([\"so\", \"so\", \"cute\", \"me\", \"so\", \"me\", \"me\"]) == \"me\"\nassert     find_max([\"so\", \"so\", \"cute\", \"me\", \"so\", \"me\", \"me\", \"so\"]) == \"so\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_max(['abc', 'def', 'ghi', 'jkl']) == 'jkl'\nassert     find_max(['abc', 'def', 'ghi', 'ghi']) == 'ghi'\nassert     find_max(['abc', 'def', 'ghi', 'jkl', 'jkl']) == 'jkl'\nassert     find_max(['abc', 'def', 'ghi', 'ghi', 'ghi']) == 'ghi'\nassert     find_max(['abc', 'def', 'ghi', 'jkl', 'jkl', 'jkl']) == 'jkl'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_max([\"a\", \"b\", \"c\", \"c\"]) == \"c\"\nassert find_max([\"a\", \"b\", \"c\"]) == \"c\"\nassert find_max([\"a\", \"b\"]) == \"a\"\nassert find_max([\"a\", \"b\", \"c\", \"a\"]) == \"a\"\nassert find_max([\"a\", \"b\", \"c\", \"d\"]) == \"a\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_max([\"abcd\",\"abcd\",\"abcd\"]) == \"abcd\"\nassert     find_max([\"abcde\",\"abc\",\"ab\",\"abcd\"]) == \"abc\"\nassert     find_max([\"abcdd\",\"abc\",\"abcdd\"]) == \"abcdd\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_max(['elice', 'lucas', 'patricia', 'louisa']) == 'louisa'\nassert find_max(['elice', 'lucas', 'patricia', 'louisa', 'louisa', 'paulina']) == 'paulina'\nassert find_max(['elice', 'lucas', 'patricia', 'louisa', 'louisa', 'paulina', 'louisa']) == 'louisa'\n\ndef find_max_2(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_max([\"a\", \"b\", \"c\", \"d\"]) == \"c\"\nassert     find_max([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == \"f\"\nassert     find_max([\"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == \"a\"\nassert     find_max([\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\"]) == \"aaa\""
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_max([\"hello\", \"world\", \"today\", \"tomorrow\", \"cool\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"today\", \"tomorrow\", \"cool\", \"hello\", \"world\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"today\", \"tomorrow\", \"cool\", \"hello\", \"world\", \"today\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"today\", \"tomorrow\", \"cool\", \"hello\", \"world\", \"today\", \"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"today\", \"tomorrow\", \"cool\", \"hello\", \"world\", \"today\", \"hello\", \"world\"]) == \"hello\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_max([\"hello\", \"world\", \"pikachu\", \"and\", \"lazy\", \"king\"]) == \"and\"\nassert     find_max([\"apple\", \"banana\", \"pen\"]) == \"banana\"\nassert     find_max([\"a\", \"b\", \"c\"]) == \"a\"\nassert     find_max([]) == \"\"\n\ndef find_max2(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eat(10, 3, 15) == [ 15, 3 ]\nassert     eat(10, 3, 3) == [ 3, 0 ]\nassert     eat(10, 3, 11) == [ 3, 10 ]\nassert     eat(10, 3, 2) == [ 2, 8 ]\nassert     eat(10, 3, 4) == [ 4, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     eat(45, 17, 35) == [ 46, 35]\nassert     eat(15, 33, 2) == [ 17, 2]\nassert     eat(24, 30, 10) == [ 24, 8]\nassert     eat(10, 40, 8) == [ 10, 8]\nassert     eat(50, 100, 100) == [ 50, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     eat(0, 1, 2) == [0, 1]\nassert     eat(3, 3, 3) == [3, 3]\nassert     eat(2, 3, 1) == [1, 0]\nassert     eat(3, 4, 4) == [4, 0]\nassert     eat(20, 15, 4) == [4, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 10, 10) == [0, 10]\nassert     eat(0, 10, 0) == [0, 10]\nassert     eat(0, 10, 5) == [0, 5]\nassert     eat(10, 0, 0) == [10, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(1, 0, 0) == [0, 0]\nassert     eat(1, 1, 0) == [0, 1]\nassert     eat(1, 1, 1) == [1, 0]\nassert     eat(1, 2, 1) == [1, 2]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     eat(100, 100, 50) == [ 50, 50]\nassert     eat(50, 50, 50) == [ 25, 25]\nassert     eat(50, 100, 50) == [ 25, 25]\nassert     eat(25, 50, 50) == [ 25, 25]\nassert     eat(100, 25, 50) == [ 25, 25]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eat(5, 7, 7) == [7, 3]\nassert     eat(7, 7, 7) == [7, 0]\nassert     eat(0, 0, 0) == [0, 0]\nassert     eat(7, 0, 7) == [7, 0]\nassert     eat(3, 4, 5) == [3, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     eat(10, 5, 10) == [15, 5]\nassert     eat(11, 5, 10) == [20, 0]\nassert     eat(5, 11, 10) == [20, 0]\nassert     eat(5, 5, 11) == [20, 4]\nassert     eat(5, 5, 10) == [20, 4]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eat(100, 200, 400) == [ 100, 180 ], 'wrong result'\nassert     eat(500, 200, 400) == [ 100, 400 ], 'wrong result'\nassert     eat(1000, 200, 400) == [ 100, 100 ], 'wrong result'\nassert     eat(1000, 1000, 400) == [ 500, 300 ], 'wrong result'\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     eat(0, 2, 3) == [ 0, 3 ]\nassert     eat(2, 4, 3) == [ 0, 1 ]\nassert     eat(3, 3, 3) == [ 3, 0 ]\nassert     eat(3, 2, 3) == [ 1, 1 ]\nassert     eat(4, 0, 3) == [ 1, 0 ]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\", \"-\"], [1, 2, 3]) == 1 - 2 - 3\nassert do_algebra([\"*\", \"/\"], [1, 2, 3]) == 1 * 2 / 3\nassert     do_algebra([\"//\"], [1, 2, 3]) == 1 // 2 // 3\nassert     do_algebra([\"**\"], [1, 2, 3]) == 1 ** 2 ** 3\nassert     do_algebra([\"+\", \"-\", \"*\"], [1, 2, 3]) == 1 + 2 - 3 * 4\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     do_algebra([\"+\", \"*\"], [5, 3, 4, 1]) == 26\nassert     do_algebra([\"-\", \"*\"], [5, 3, 4, 1]) == -29\nassert     do_algebra([\"+\", \"*\"], [5, 3]) == 8\nassert     do_algebra([\"+\", \"*\", \"//\"], [5, 3, 4, 1]) == 8\nassert     do_algebra([\"-\", \"*\", \"//\"], [5, 3, 4, 1]) == -8\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef gen_random_list(min_length, max_length, min_value, max_value):\n    \"\"\"\n    Given two integers min_length, max_length, min_value, and max_value, generate a list of \n    random integers with the given parameters.\n    \n    Note:\n        min_length <= max_length\n        min_value <= max_value\n        The length of the generated list is between min_length and max_length, and \n        the integers in the list are between min_value and max_value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     do_algebra([\"+\"], [1,2,3]) == 6\nassert     do_algebra([\"-\",1], [1,2,3]) == -1\nassert     do_algebra([\"-\",1,2], [1,2,3]) == -1\nassert     do_algebra([\"-\",1,2,3], [1,2,3]) == -1\nassert     do_algebra([\"-\",1,2,3,4,5,6], [1,2,3,4,5,6]) == -1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     do_algebra([\"+\", \"*\"], [5, 5]) == 50\nassert     do_algebra([\"*\", \"*\"], [5, 5]) == 100\nassert     do_algebra([\"+\", \"*\"], [5, 5]) == 10\nassert     do_algebra([\"-\", \"*\"], [5, 5]) == 0\nassert     do_algebra([\"-\", \"*\"], [5, 5]) == 0\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef do_morphology(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list is the morphological operators, \n    and the second list is a list of strings. Build the operation tree and apply the \n    operation tree to every string in the second list, and return the list of results. \n    Each string in the second list is a sentence.\n\n    The morphological operators:\n    B ( Base ) \n    S ( Slash ) \n    F ( Flang ) \n    P ( Perm ) \n    A ( Alt ) \n    K ( King ) \n    P ( Plur ) \n    R ( Rase ) \n    V ( Ving ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     do_algebra(['+', '-', '*'], [5, 2]) == 2\nassert     do_algebra(['+', '*'], [5, 2]) == 10\nassert     do_algebra(['*', '-'], [5, 2]) == -2\nassert     do_algebra(['*', '/'], [5, 2]) == 2\nassert     do_algebra(['/', '-'], [5, 2]) == -2\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5]) == 1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 6]) == 1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5, 6]) == 1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5, 6, 7]) == 1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5, 6, 8]) == 1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     do_algebra([\"+\", \"-\"], [1, 2]) == -1\nassert     do_algebra([\"*\", \"/\"], [1, 2]) == 0.5\nassert     do_algebra([\"//\", \"**\"], [1, 2]) == 0\nassert     do_algebra([\"+\", \"*\"], [1, 2]) == 3\nassert     do_algebra([\"+\", \"//\"], [1, 2]) == 1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(\"it's a good day\")     == \"tIs a dOy good dAy\"\nassert     solve(\"it's a good day.\")     == \"tIs a dOy good dAy\"\nassert     solve(\"It's a good day!\")     == \"TIs a dOy good dAy\"\nassert     solve(\"It's a good day\")     == \"TIs a dOy good dAy\"\nassert     solve(\"it's a good day. It's a bad day. I'm the best.\")     == \"tIs a dOy good dAy. iTs a dOy bad dAy. I m the best.\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(\"lCase\") == \"eCase\", \"Expected: eCase\"\nassert     solve(\"lCase\") == \"eCase\", \"Expected: eCase\"\nassert     solve(\"LCase\") == \"eCase\", \"Expected: eCase\"\nassert     solve(\"cse\") == \"ecs\", \"Expected: ecs\"\nassert     solve(\"\") == \"\", \"Expected: \"\"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     'abcdef' == solve('abcdef')\nassert     'Geeks' == solve('Geeks')\nassert     'aBcDe' == solve('aBcDe')\nassert     'kHgDe' == solve('kHgDe')\nassert     '' == solve('fdsfsdss')\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solve('a') == 'a'\nassert     solve('Abcde') == 'eBcdA'\nassert     solve('aBcde') == 'eBcdA'\nassert     solve('abcd') == 'abcd'\nassert     solve('123456') == '54321'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     \"LEETCODE\" == solve(\"LeetCode\")\nassert     \"aReYcTEd\" == solve(\"areYCteD\")\nassert     \"EbA dE\" == solve(\"eBaDe\")\nassert     \"L O T E\" == solve(\"LoTE\")\nassert     \"a2f\" == solve(\"a2f\")\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve(\"hello\") == \"HELLO\"\nassert     solve(\"how are you?\") == \"HOW ARE YOU?\"\nassert     solve(\"\") == \"\"\nassert     solve(\"123456789\") == \"987654321\"\nassert     solve(\"hELLO\") == \"HELO\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     'a2b' == solve('ab')\nassert     'a2B' == solve('AB')\nassert     'A2b' == solve('AB')\nassert     'a2B' == solve('AB')\nassert     'a2B' == solve('ab')\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve('Hello world') == 'olLEh dlrow'\nassert     solve('I am thinking') == 'I am thinking'\nassert     solve('I am thinking of a word') == 'I am thinking of a word'\nassert     solve('there are four letters') == 'fOUR letters'\nassert     solve('there are four') == 'there are four'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(\"Test\") == \"TesT\"\nassert     solve(\"Test1\") == \"Test1\"\nassert     solve(\"test\") == \"test\"\nassert     solve(\"tEST\") == \"TEST\"\nassert     solve(\"Test2\") == \"TseT\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve(\"hello\") == \"olLEh\"\nassert     solve(\"HellO\") == \"olLEh\"\nassert     solve(\"hElLO\") == \"hElLO\"\nassert     solve(\"\") == \"\"\nassert     solve(\"This is a string\") == \"TiS si a sTrInG\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('a') == 'a7899e8fa8a527c8b8d5a7b1e922e6d3'\nassert     string_to_md5('ab') == '76a65e7d6da2e83e6e0c9a47c5d0091'\n\ndef test_string_to_md5():\n    \"\"\"\n    Assert the string_to_md5 function works correctly.\n    \"\"\"\n    assert     string_to_md5('a') == 'a7899e8fa8a527c8b8d5a7b1e922e6d3'\n    "
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_md5('bar') == md5('bar').hexdigest()\nassert     string_to_md5('a') == md5('a').hexdigest()\nassert     string_to_md5('') is None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_md5('bao') == string_to_md5('ba')\nassert     string_to_md5('bao') == string_to_md5('bao')\nassert     string_to_md5('bao') == string_to_md5('bao')\nassert     string_to_md5('bao') == string_to_md5('bao')\nassert     string_to_md5('bao') == string_to_md5('bao')\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"hello world\") == \"9f6b8cde5b4d66ad0bfa1c4a5a2b2f0\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('a') == 'a904ab4b31a369bae0d2f7e99e076a18'\nassert     string_to_md5('1') == '1f9639d6d1a3eec0ca27f4dcc6e82748'\nassert     string_to_md5('ABC') == '17d6bf94e9c42b7a3e1e7bc6a8efa79a'\nassert     string_to_md5('ABCDE') == 'd2f3cd3d3f5cc4e8d943d4c0ce006813'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('ABC') == '5baa61e4c9b93f3f06877d506e1029b65'\nassert     string_to_md5('String') == 'a94a8fe5ccb19ba61c4c0873d391e9879'\nassert     string_to_md5('ABC123') == '5baa61e4c9b93f3f06877d506e1029b65'\nassert     string_to_md5('foobar') == '3a3b3c3d3e3f3g3h3i3j3k3l3m3n3o3p3q3r3s3t3u3v3w3x3y3z'\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('Hello, World!') == '92d41cf12ee5a16c5ac6f7be6b3fcd1d'\n\ndef group_by_key(items, keyfunc):\n    \"\"\"\n    Given a list of items and a key function 'keyfunc',\n    group the items by the value of the key function.\n    Return a dictionary of items.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_to_md5('hello, world') == '3a3a8f5a03ca108867b0597d1c6c27e7'\nassert string_to_md5('a') == '8d8d2813dd6de6a5f6f7a3b4b4ce8cad'\nassert string_to_md5('   ') == '5ee921d6a541292e8c76fd0d92bf9c45'\nassert string_to_md5('     ') == 'd7d17c04d14d9cf8bf00a2a0d8cbd890'\nassert string_to_md5('') == None"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_to_md5('foo')         == 'd41d8cd98f00b204e9800998ecf8427e'\nassert     string_to_md5('bar')         == 'bbd81db85ea27e0d18486f644d387b4a'\nassert     string_to_md5('')         == None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_to_md5('') is None\nassert     string_to_md5('a') == '937e4717a8a82978d8c847955e0f8baf'\nassert     string_to_md5('abc') == '937e4717a8a82978d8c847955e0f8baf'\nassert     string_to_md5('abcdef') == '937e4717a8a82978d8c847955e0f8baf'\nassert     string_to_md5('abcdefg') == '937e4717a8a82978d8c847955e0f8baf'\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     generate_integers(2, 4) == ['2', '4'], \"Check your code: \"\nassert     generate_integers(2, 6) == ['2', '4', '6'], \"Check your code: \"\nassert     generate_integers(2, 8) == ['2', '4', '6', '8'], \"Check your code: \"\nassert     generate_integers(2, 10) == ['2', '4', '6', '8', '10'], \"Check your code: \"\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     generate_integers(1, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert generate_integers(1000, 2000) == [1000, 2000]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     generate_integers(8, 11) == [8, 10]\nassert     generate_integers(10, 15) == [10, 12, 14]\nassert     generate_integers(10, 25) == [10, 12, 14, 22]\nassert     generate_integers(29999, 30000) == [29999, 30002, 30004, 30006, 30008, 30009, 30010, 30012, 30014, 30016, 30018, 30019, 30020, 30022, 30024, 30026, 30028, 30030, 30032, 30034, 30036, 30038, 30040, 30042, 30044, 30046, 30048, 30050, 30052, 30054, 30056, 30058, 30060, 30062, 30064, 30066, 30068, 30070, 30072, 30074, 30076, 30078, 30080, 30082, 30084, 30086, 30088, 30090, 30092, 30094, 30096, 30098, 30002, 30004, 30006, 30008, 30009, 30010, 30012, 30014, 30016, 30018, 30019, 30020, 30022, 30024, 30026, 30028, 30030, 30032, 30034, 30036, 30038, 30040, 30042, 30044, 30046, 30048, 30050, 30052, 30054, 30056, 30058, 30060, 30062, 30064, 30066, 30068, 30070, 30072, 30074, 30076, 30078, 30080, 30082, 30084, 30086, 30088, 30090, 30092, 30094, 30096, 30098]\n\ndef generate_permutations(lst):\n    \"\"\"\n    Return all permutations of a list of n elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     generate_integers(10, 20) == [11, 12, 14, 16, 18]\nassert     generate_integers(21, 100) == [22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n\ndef sum_of_distances(n):\n    \"\"\"\n    Compute the sum of distinct distances between distinct pairs of integers in\n    the range 1 to n, inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     generate_integers(3, 8) == [4, 6, 8]\nassert     generate_integers(3, 4) == []\nassert     generate_integers(3, 7) == [4, 6, 8]\nassert     generate_integers(9, 11) == [8, 10]\nassert     generate_integers(6, 7) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     generate_integers(5, 7) == [6, 8]\nassert     generate_integers(2, 4) == [2, 4]\nassert     generate_integers(1, 8) == [2, 4, 6, 8]\nassert     generate_integers(5, 15) == [10, 12, 14]\nassert     generate_integers(6, 21) == [8, 10, 12, 14, 16, 18, 20]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef generate_words(pattern):\n    \"\"\"\n    Given a string pattern of uppercase English letters, return a list of\n    all possible strings that can be generated from the pattern word by word.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ids == [(1, 100), (10, 1000)]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     generate_integers(1, 4) == [2, 4]\nassert     generate_integers(1, 5) == [2]\nassert     generate_integers(1, 12) == [2, 4, 6, 8, 10]\nassert     generate_integers(2, 4) == [2]\nassert     generate_integers(1, 12) == [2, 4, 6, 8, 10, 12]\n"
    }
]