[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     has_close_elements(numbers=[1.1, 2.2, 3.3, 4.4, 5.5], threshold=1.1) is True\nassert     has_close_elements(numbers=[1.1, 2.2, 3.3, 4.4, 5.5], threshold=2.2) is True\nassert     has_close_elements(numbers=[1.1, 2.2, 3.3, 4.4, 5.5], threshold=0.9) is False\nassert     has_close_elements(numbers=[1.1, 2.2, 3.3, 4.4, 5.5], threshold=0.5) is False\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     has_close_elements([0.0, 3.0, 4.0, 6.0, 9.0], 3.0) == False\nassert     has_close_elements([0.0, 3.0, 4.0, 6.0, 9.0], 4.0) == True\nassert     has_close_elements([0.0, 3.0, 4.0, 6.0, 9.0], 2.0) == True\nassert     has_close_elements([0.0, 3.0, 4.0, 6.0, 9.0], 0.5) == False\nassert     has_close_elements([0.0, 3.0, 4.0, 6.0, 9.0], 0.1) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     has_close_elements([3.2, 3.4, 3.6, 3.2], 0.1) is False\nassert     has_close_elements([3.2, 3.4, 3.6, 3.2], 0.05) is True\nassert     has_close_elements([3.2, 3.4, 3.6, 3.2], 0.2) is False\n\n\ndef get_spreads(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Return a list of all the differences between consecutive numbers in given list.\n    \"\"\"\n    pass\n\n\ndef get_sum_of_spreads(spreads: List[float]) -> float:\n    \"\"\"\n    Return the sum of all the differences in given list of spreads.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     has_close_elements([0.1, 0.9], 0.3)\nassert not has_close_elements([0.1, 0.9], 0.2)\nassert     has_close_elements([0.9, 0.1], 0.3)\nassert not has_close_elements([0.9, 0.1], 0.2)\nassert     has_close_elements([0.1, 0.9], 0.9)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     has_close_elements([1.0, 2.0, 4.0, 4.0, 6.0], 1.5)\nassert     has_close_elements([1.0, 2.0, 4.0, 4.0, 6.0], 0.5)\nassert     not has_close_elements([1.0, 2.0, 4.0, 4.0, 6.0], 0.0)\nassert     not has_close_elements([1.0, 2.0, 4.0, 4.0, 6.0], 1.0)\nassert     not has_close_elements([1.0, 2.0, 4.0, 4.0, 6.0], 5.0)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 2.0)\nassert not has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 1.0)\nassert not has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 3.0)\nassert not has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 5.0)\nassert not has_close_elements([0.0, 1.0, 2.0, 3.0, 4.0], 0.0)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 1) is True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.1) is False\nassert     has_close_elements([1, 2, 3, 4, 5], 1.01) is True\nassert     has_close_elements([1, 2, 3, 4, 5], 2) is False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.5) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     has_close_elements([1,2,3,4,5], 3) == False\nassert     has_close_elements([1,2,3,4,5], 2) == True\nassert     has_close_elements([1,2,3,4,5], 1) == True\nassert     has_close_elements([1,2,3,4,5], 0) == False\n\ndef distinct(numbers: List[float]) -> bool:\n    \"\"\" Check if in given list of numbers, are all numbers distinct \"\"\"\n    pass\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     has_close_elements([1.0, 2.0, 3.0], 1.0)\nassert not has_close_elements([1.0, 2.0, 3.0], 0.0)\nassert not has_close_elements([1.0, 2.0, 3.0], 4.0)\nassert not has_close_elements([1.0, 2.0, 3.0], 1.0)\nassert     has_close_elements([1.0, 2.0, 3.0], 1.5)\n"
    },
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 1.5)\nassert     has_close_elements([1, 2, 3, 4, 5], 2.0)\nassert     not has_close_elements([1, 2, 3, 4, 5], 3.0)\nassert     not has_close_elements([1, 2, 3, 4, 5], 4.0)\nassert     not has_close_elements([1, 2, 3, 4, 5], 5.0)\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"{a + (b)}\") == [\"a + (b)\"]\nassert     separate_paren_groups(\"{a + (b) + c}\") == [\"a + (b)\", \"c\"]\nassert     separate_paren_groups(\"a + (b) + c\") == [\"a\", \"b\", \"c\"]\nassert     separate_paren_groups(\"a + (b ) + c\") == [\"a\", \"b\", \"c\"]\nassert     separate_paren_groups(\"{a + (b ) + c}\") == [\"a\", \"b\", \"c\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"(a(b)c)\") == [\"a(b)\", \"c\"]\nassert separate_paren_groups(\"a(b)c)\") == [\"a(b)\", \"c)\"]\nassert separate_paren_groups(\"(a(b(c)d)\") == [\"(a(b(c)\", \"d)\"]\nassert separate_paren_groups(\"a(b(c(d)e)\") == [\"a(b(c(d)\", \"e)\"]\nassert separate_paren_groups(\"a (b(c) d) e)\") == [\"a (b(c)\", \"d) e)\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"i(love)candy\") == [\"i(love)candy\"]\nassert     separate_paren_groups(\"  (   (  (\") == [\"(\", \"\", \"\", \"\", \"(\", \"(\", \"(\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"(\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"\", \"\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"(\", \"\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"\", \"(\", \"(\", \"(\", \"\", \"(\", \"(\", \"(\", \"(\", \"\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"\", \"\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\", \"(\""
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"(())\") == [\"()\", \"()\"]\nassert separate_paren_groups(\"(())()\") == [\"(())\", \"()\"]\nassert separate_paren_groups(\"((a(b(c))))\") == [\"((a(b(c))))\"]\nassert separate_paren_groups(\"(a(b))(c)d)e)f)\") == [\"((a(b))(c))\", \"d)e)f)\"]\nassert separate_paren_groups(\"((a(b(c))))\") == [\"((a(b(c))))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"foo(bar(baz))blim\")     == [\"foo\", \"bar\", \"baz\", \"blim\"]\nassert     separate_paren_groups(\"foo(bar(baz)bim\")     == [\"foo\", \"bar\", \"baz\", \"bim\"]\nassert     separate_paren_groups(\"foo(bar(baz))blim\")     == [\"foo\", \"bar\", \"baz\", \"blim\"]\nassert     separate_paren_groups(\"foo(bar(baz))blim\")     == [\"foo\", \"bar\", \"baz\", \"blim\"]\nassert     separate_paren_groups(\"foo(bar(baz))blim\")     == [\"foo\", \"bar\", \"baz\", \"blim\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"a(b(c))\") == [\"a(b(c))\"]\nassert     separate_paren_groups(\"a (b(c))\") == [\"a (b(c))\"]\nassert     separate_paren_groups(\"a (b(c )d)\") == [\"a (b(c )d)\"]\nassert     separate_paren_groups(\"a (b(c) d)\") == [\"a (b(c) d)\"]\nassert     separate_paren_groups(\"a (b(c(d) e) f)\") == [\"a (b(c(d) e) f)\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"a(b(c)d)e\") == ['abcd', 'a', 'e']\nassert     separate_paren_groups(\"a(b(c)d)e\") == ['abcd', 'a', 'e']\nassert     separate_paren_groups(\"abcd\") == ['abcd']\nassert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"a(b(c)d)e\") == ['abcd', 'a', 'e']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('(())()') == ['(())', '(())']\nassert separate_paren_groups('(())') == ['(())', '()']\nassert separate_paren_groups('(())()') == ['(())', '(())']\nassert separate_paren_groups('()()()') == ['()', '()', '()']\nassert separate_paren_groups('()()(())') == ['()', '(())', '()']\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"(()())\") == [\"(())\",\"()()\"]\nassert     separate_paren_groups(\"((())\") == [\"((())]\",\"()()\"]\nassert     separate_paren_groups(\"(()(())\") == [\"((())\",\"()()\"]\nassert     separate_paren_groups(\"(())((()))\") == [\"((())\",\"()()\"]\nassert     separate_paren_groups(\"(())((()))\") == [\"((())\",\"()()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"hi(hi)\") == [\"hi\", \"(hi)\"]\nassert     separate_paren_groups(\"(hi(hi))\") == [\"(hi\", \"(hi)\"]\nassert     separate_paren_groups(\"hi(hi)there\") == [\"hi\", \"(hi)there\"]\nassert     separate_paren_groups(\"hi (hi)there\") == [\"hi\", \"(hi)there\"]\nassert     separate_paren_groups(\"(hi(hi)there)\") == [\"(hi(hi)\", \"(hi)there\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         truncate_number(2.1) == 2.0\nassert         truncate_number(2.3) == 2.0\nassert         truncate_number(2.5) == 1.0\nassert         truncate_number(2.9) == 1.0\nassert         truncate_number(3.1) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     truncate_number(45.32) == 45.32\nassert     truncate_number(1.234567) == 1.234567\nassert     truncate_number(1.23456789) == 1.23456789\nassert     truncate_number(1.2345678901) == 1.2345678901\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     truncate_number(1.2) == 1.2\nassert     truncate_number(1.1) == 1.0\nassert     truncate_number(2.3) == 2.3\nassert     truncate_number(2.4) == 2.0\nassert     truncate_number(2.5) == 2.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     truncate_number(123.4567) == 123.45\nassert     truncate_number(123.45678) == 123.45\nassert     truncate_number(123.45678) == 123.45\nassert     truncate_number(123.456789012345678) == 123.45\nassert     truncate_number(123.45678901234567890) == 123.45\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     truncate_number(.3) ==.3\nassert     truncate_number(.33) ==.3\nassert     truncate_number(.33) ==.3\nassert     truncate_number(.33) ==.3\nassert     truncate_number(.333) ==.3\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     truncate_number(0.1) == 0.1\nassert     truncate_number(0.49) == 0.49\nassert     truncate_number(0.49) == 0.49\nassert     truncate_number(0.99) == 0.99\nassert     truncate_number(0.99) == 0.99\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     truncate_number(7.5) == 7.5\nassert     truncate_number(0.7) == 0.7\nassert     truncate_number(-0.7) == -0.7\nassert     truncate_number(0.75) == 0.75\nassert     truncate_number(0.76) == 0.76\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     truncate_number(2.5) == 2.5\nassert     truncate_number(3.14159) == 3.0\nassert     truncate_number(1.2345) == 1.23\nassert     truncate_number(1.00) == 1.0\nassert     truncate_number(1.0000000) == 1.0\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     truncate_number(0.45) == 0.45\nassert     truncate_number(0.46) == 0.46\nassert     truncate_number(0.6) == 0.6\nassert     truncate_number(0.7) == 0.7\nassert     truncate_number(0.8) == 0.8\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     truncate_number(1.23)    == 1.23\nassert     truncate_number(1.27)    == 1.27\nassert     truncate_number(1.25)    == 1.25\nassert     truncate_number(1.45)    == 1.45\nassert     truncate_number(1.5)    == 1.5\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_zero([1, 2, 3, -1, -2, -3, 4]) == False\nassert     below_zero([1, 2, 3, -1, -2, 3, 4]) == True\nassert     below_zero([1, 2, 3, -1, -2, 3, -4]) == True\nassert     below_zero([1, 2, 3, -1, -2, 3, 4, 5, -6]) == False\nassert     below_zero([-1, -2, -3, -4, -5, -6]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_zero([1, 2, 3, 4, 5, 6]) == False\nassert     below_zero([-1, -2, -3, -4, -5, -6]) == True\nassert     below_zero([0, 0, 0, 0, 0, 0]) == False\nassert     below_zero([1, 2, 3, 4, 5, -6]) == True\nassert     below_zero([1, 2, 3, 4, -5, -6]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_zero([10, -10, -10, 10, 10, 10]) == True\nassert     below_zero([10, -10, -10, 10, 10, 10, -10, -10, 10]) == False\nassert     below_zero([10, -10, -10, 10, 10, -10, -10, -10, 10]) == True\nassert     below_zero([10, 10, 10]) == False\nassert     below_zero([10]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_zero([1,2,3,4,5,6,7,8,9,10]) == False\nassert     below_zero([10,9,8,7,6,5,4,3,2,1]) == True\nassert     below_zero([-1,1,-2,2,-3,3,-4,4,-5,5]) == False\n\n\ndef longest_consecutive(l: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, find the longest consecutive integers in the list.\n    Return the length of the longest consecutive integer sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     False == below_zero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_zero([1, 0, 1, 1, -1]) == False\nassert     below_zero([1, -1, 1, 1, 1]) == True\nassert     below_zero([1, 1, 1, 1, 1]) == False\nassert     below_zero([-1, -1, -1, -1, -1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_zero([-1,1]) == False\nassert     below_zero([-1,1,1]) == False\nassert     below_zero([-1,-1,-1,1]) == True\nassert     below_zero([1,1,-1,1]) == True\nassert     below_zero([1,-1,-1,1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_zero([0, 0, 2, -1]) == True\nassert     below_zero([0, 0, -3, -3]) == True\nassert     below_zero([0, 0, -5, -5]) == True\nassert     below_zero([0, 0, -5, -6]) == False\nassert     below_zero([0, 0, 5, 5]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     True == below_zero([1, 2, 3, 4, 5, 6])\nassert     True == below_zero([1, 2, 3, -4, 5, 6])\nassert     False == below_zero([1, 2, 3, 4, 5, -6])\nassert     False == below_zero([1, 2, 3, 4, -5, -6])\nassert     True == below_zero([1, 2, 3, 4, -5, 6])\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 3\nassert     mean_absolute_deviation([0, 1, 2, 3]) == 1\nassert     mean_absolute_deviation([-5, -4, -3, -2, -1]) == -1\nassert     mean_absolute_deviation([-5, 5, -4, 4, -3]) == 1\nassert     mean_absolute_deviation([5, 4, 3, 2, 1]) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation(numbers=[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\ndef normalize_abs_dev(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, calculate Mean Absolute Deviation around the mean\n    of this dataset. Normalize these numbers so that they are within [0, 1].\n    For example, if we have values [1, 2, 3, 4], then the normalized values\n    should be [-1/3, 1/3, 2/3, -1/3]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 2.166666666666667)\nassert     (mean_absolute_deviation([3, 1, 2, 2, 3, 4, 4, 3, 2, 4, 5, 6, 7, 8]) == 2.933333333333333)\nassert     (mean_absolute_deviation([3, 1, 2, 2, 3, 4, 4, 3, 2, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 4, 3, 2, 4, 4, 3, 2, 4, 5, 6, 7, 8, 9, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]) == 2.75)\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" Return the median of a list of numbers. If the list is even, take the average\n    of the middle two numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([1.2, 3.5, 5.5]) == 2.74     \\\n        and mean_absolute_deviation([1.1, 3.9, 4.9]) == 2.35     \\\n        and mean_absolute_deviation([1.9, 2.9, 4.9]) == 2.55\nprint(\"Correct! Mean Absolute Deviation.\")\n\n\ndef covariance_matrix(data: List[List[float]]) -> List[List[float]]:\n    \"\"\" Given a 2-D list of numbers, calculate the covariance\n    matrix of this dataset.\n    For example, if the input list is:\n        [\n            [1, 1], \n            [2, 2],\n            [3, 3]\n        ]\n    then the result will be:\n        [\n            [0, -1.0], \n            [1.0, 0]\n        ]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.8673473279661014\nassert     mean_absolute_deviation([-3, -3, -3, -3, -3, -3, -3, -3, -3, -3]) == 0\nassert     mean_absolute_deviation([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 0\nassert     mean_absolute_deviation([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 0.8673473279661014\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([1, 2, 3]) == 0.816496580927726\nassert     mean_absolute_deviation([1, -2, 3]) == 2.816496580927726\nassert     mean_absolute_deviation([-1, 2, 3]) == 0.816496580927726\nassert     mean_absolute_deviation([-1, -2, 3]) == 2.816496580927726\nassert     mean_absolute_deviation([1, 2, 3]) == 0.816496580927726\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([2.1, 5.1, 3.3, 6.5, 2.2]) == 2.2\nassert     mean_absolute_deviation([]) == 0\nassert     mean_absolute_deviation([-1, -2, -3, -4]) == -3\nassert     mean_absolute_deviation([-1, -2, -3, 4]) == 3\nassert     mean_absolute_deviation([-1, -2, -3, -4, 5, 6]) == 5\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([4, 3, 2, 1]) == 0.0\nassert     mean_absolute_deviation([-4, -3, -2, -1]) == 0.0\nassert     mean_absolute_deviation([4, 3, 2, -1]) == 1.0\nassert     mean_absolute_deviation([-4, -3, -2, 1]) == 1.0\nassert     mean_absolute_deviation([4, 3, 2, 1, 2]) == 1.0\n"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 2.16\nassert     mean_absolute_deviation([1.2, 2.3, 3.4, 4.5]) == 2.16\nassert     mean_absolute_deviation([1.2, 2.3, 3.4, 4.5, 5.6]) == 2.16\nassert     mean_absolute_deviation([1.1, 2.1, 3.1, 4.1, 5.1]) == 2.17\nassert     mean_absolute_deviation([1.1, 2.1, 3.1, 4.1, 5.1, 6.1]) == 2.17\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersperse([1,2,3,4], 2) == [1, 2, 2, 3, 4, None, None]\nassert     intersperse([1,2,3,4], 4) == [1, 2, 3, 4, None, None, None]\nassert     intersperse([1,2,3,4], 1) == [1, 2, 3, 4, None, None, None]\nassert     intersperse([1,2,3,4,5,6], 4) == [1, 2, 3, 4, 4, 5, 6, None, None]\nassert     intersperse([1,2,3,4], -2) == [1, 2, 3, 4, None, None, None]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersperse([1,2,3,4,5], 4) == [1, 4, 2, 3, 5]\nassert     intersperse([1,2,3,4,5], 3) == [1, 3, 4, 2, 5]\nassert     intersperse([1,2,3,4,5], 6) == [1, 6, 2, 3, 4, 5]\nassert     intersperse([1,2,3,4,5], 0) == [1, 0, 2, 3, 4, 5]\nassert     intersperse([], 5) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3], 1) == [1, 1, 2, 3]\nassert     intersperse([1, 2, 3], 4) == [1, 4, 2, 3]\nassert     intersperse([1, 2, 3, 4], 4) == [1, 4, 4, 2, 3]\nassert     intersperse([1, 2, 3, 4], 5) == [1, 5, 2, 3, 4]\nassert     intersperse([1, 2, 3, 4], 0) == [0, 1, 2, 3, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersperse([1, 2, 3, 4, 5, 6, 7, 8], delimeter=5) == [1, 5, 2, 5, 3, 5, 4, 5, 6, 5, 7, 5, 8]\nassert     intersperse([1, 2, 3, 4, 5, 6, 7, 8], delimeter=1) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     intersperse([], delimeter=0) == []\nassert     intersperse([1], delimeter=1) == [1]\n\n\ndef split(numbers: List[int], delimiter: int) -> List[List[int]]:\n    \"\"\" Split `numbers' into sub-lists where each sub-list is a contiguous part of `numbers' separated by a delimiter `delimiter'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersperse([], 1) == []\nassert     intersperse([1], 1) == [1]\nassert     intersperse([1, 2], 1) == [1, 1, 2]\nassert     intersperse([1, 2, 3], 1) == [1, 1, 2, 1, 1, 3]\nassert     intersperse([1, 2, 3], 2) == [1, 2, 1, 2, 1, 2, 3]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersperse([1,2,3],0) == [0,1,2,3]\nassert     intersperse([1,2,3],1) == [0,1,1,2,3]\nassert     intersperse([1,2,3],2) == [0,1,1,1,2,2,3]\nassert     intersperse([1,2,3],3) == [0,1,1,1,1,1,1,2,3]\nassert     intersperse([1,2,3],4) == [0,1,1,1,1,1,1,1,2,3]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersperse([1,2,3,4], 1) == [1, 1, 2, 3, 4, 1]\nassert     intersperse([1,2,3,4], 2) == [1, 2, 1, 2, 3, 4, 1]\nassert     intersperse([1,2,3,4], 3) == [1, 2, 3, 1, 2, 3, 4, 1]\nassert     intersperse([1,2,3,4], 4) == [1, 2, 3, 4, 1, 1, 2, 3, 4, 1]\nassert     intersperse([1,2,3,4], 5) == [1, 2, 3, 4, 1, 1, 2, 3, 4, 1]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersperse([1,2,3,4], 2) == [1, 2, delimeter, 4]\nassert     intersperse([1,2,3,4,5], 1) == [1, delimeter, delimeter, 2, 3, 4, 5]\nassert     intersperse([1,2,3,4,5], 6) == [1, 6, delimeter, 6, delimeter, 6, 5]\n\ndef partition(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Divides a list of numbers 'numbers' into two parts, according to the delimeter\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersperse([1,2,3],2) == [1,2,2,3]\nassert     intersperse([1,2,3],5) == [1,5,2,5,3]\nassert     intersperse([1,2,3,4],2) == [1,2,2,3,4]\nassert     intersperse([1,2,3,4],5) == [1,5,2,5,3,5,4]\nassert     intersperse([1,2,3,4],0) == [1,2,3,4]\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersperse([1,2,3,4,5], 2) == [1,2,delimeter,3,delimeter,4,delimeter,5]\nassert     intersperse([1,2,3,4,5], 3) == [1,delimeter,2,delimeter,3,delimeter,4,delimeter,5]\nassert     intersperse([1,2,3,4,5], 5) == [1,delimeter,2,delimeter,3,delimeter,4,delimeter,5]\nassert     intersperse([1,2,3,4,5], 6) == [1,delimeter,2,delimeter,3,delimeter,4,delimeter,5]\nassert     intersperse([1,2,3,4,5], 7) == [1,delimeter,2,delimeter,3,delimeter,4,delimeter,5]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"((()))\") == [0, 1]\nassert     parse_nested_parens(\"((()))())\") == [0, 1, 0, 1, 0, 1, 0]\nassert     parse_nested_parens(\"((()())(()()))()\") == [0, 2, 1, 0, 1, 0, 1, 0, 0, 1]\nassert     parse_nested_parens(\"()(())()()\") == [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_nested_parens('(()())') == [0, 1, 0]\nassert     parse_nested_parens('((()))') == [1, 1, 1]\nassert     parse_nested_parens('(())()') == [0, 0, 1]\nassert     parse_nested_parens('())()()') == [0, 0, 0]\nassert     parse_nested_parens('(())((()))') == [0, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"()\") == [0]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"((()))\") == [2, 2]\nassert     parse_nested_parens(\"(())(())()\") == [4, 4]\nassert     parse_nested_parens(\"())(\") == [0, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_nested_parens('()') == [0]\nassert     parse_nested_parens('()()') == [0,0]\nassert     parse_nested_parens('(())') == [1,0]\nassert     parse_nested_parens('((()))') == [3,0]\nassert     parse_nested_parens('((()(())))') == [5,0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(())\") == [0]\nassert     parse_nested_parens(\"()()\") == [0]\nassert     parse_nested_parens(\"(()())\") == [0, 0]\nassert     parse_nested_parens(\"()(()())\") == [1, 1, 1]\nassert     parse_nested_parens(\"((()))\") == [2]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('(()())') == [3,2,1]\nassert     parse_nested_parens('(()()())') == [3,2,1]\nassert     parse_nested_parens('(()()()())') == [3,2,1]\nassert     parse_nested_parens('(()((())()))') == [4,2,1]\nassert     parse_nested_parens('(()())(())') == [4,2,1]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"(()())\") == [1, 1, 2]\nassert     parse_nested_parens(\"(())\") == [1, 1]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"((()))\") == [3]\nassert     parse_nested_parens(\"(((()))))\") == [6]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"(())\") == [0]\nassert     parse_nested_parens(\"()()\") == [0, 0]\nassert     parse_nested_parens(\"(())()\") == [0, 0, 0]\nassert     parse_nested_parens(\"((()))\") == [1, 1, 1]\nassert     parse_nested_parens(\"(() (a)\") == [1, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_nested_parens('((((())))))') == [4, 0, 1, 4]\nassert     parse_nested_parens('(())((()()))') == [2, 1, 1, 4]\nassert     parse_nested_parens('()((()' +     '()())(())()()' + ')())') == [5, 0, 1, 5]\n\n\ndef is_valid_parens_string(paren_string: str) -> bool:\n    \"\"\" Input to this function is a string of parens.\n    Return true if the parens is valid.\n    The parens are valid if they are balanced: each opening paren has a corresponding closing paren,\n    and each closing paren has a corresponding opening paren.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_nested_parens('(())') == [2]\nassert     parse_nested_parens('((()))') == [3]\nassert     parse_nested_parens('((())())') == [3,2,1]\nassert     parse_nested_parens('(())(())()') == [3,2,1,0]\nassert     parse_nested_parens('()()') == [2]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_substring(\n                [\"this\",\"is\",\"a\",\"test\",\"data\",\"s\"],\n                \"data\"\n        ) == [\n                \"data\",\n        ]\n\nassert     filter_by_substring(\n                [\"this\",\"is\",\"a\",\"test\",\"data\",\"s\"],\n                \"test\"\n        ) == [\n                \"this\",\n                \"is\",\n                \"a\"\n        ]\n\nassert     filter_by_substring(\n                [\"this\",\"is\",\"a\",\"test\",\"data\",\"s\"],\n                \"qwerty\"\n        ) == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"cat\", \"dog\", \"rat\", \"cat\", \"dog\", \"rat\"], \"cat\") == \\\n        [\"cat\", \"dog\", \"rat\", \"cat\", \"dog\", \"rat\"]\nassert     filter_by_substring([\"cat\", \"dog\", \"rat\", \"cat\", \"dog\", \"rat\"], \"rat\") == \\\n        [\"cat\", \"dog\", \"rat\", \"cat\", \"dog\", \"rat\"]\nassert     filter_by_substring([\"cat\", \"dog\", \"rat\", \"cat\", \"dog\", \"rat\"], \"dog\") == \\\n        [\"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\"]\nassert     filter_by_substring([\"cat\", \"dog\", \"rat\", \"cat\", \"dog\", \"rat\"], \"dogggg\") == \\\n        [\"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\"]\nassert     filter_by_substring([\"cat\", \"dog\", \"rat\", \"cat\", \"dog\", \"rat\"], \"dogggg\") == \\\n        [\"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"a\", \"ab\", \"ac\"], \"b\") == [\"ab\", \"ac\"]\nassert     filter_by_substring([\"a\", \"ab\", \"ac\"], \"a\") == [\"a\", \"ab\", \"ac\"]\nassert     filter_by_substring([\"a\", \"ab\", \"ac\"], \"z\") == [\"a\", \"ab\", \"ac\"]\nassert     filter_by_substring([\"a\", \"ab\", \"ac\", \"ad\"], \"b\") == [\"ab\"]\nassert     filter_by_substring([\"a\", \"ab\", \"ac\", \"ad\"], \"a\") == [\"a\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['a', 'b', 'c', 'd'], 'a') == ['a']\nassert     filter_by_substring(['a', 'b', 'c', 'd'], 'c') == ['c', 'd']\nassert     filter_by_substring(['a', 'b', 'c', 'd'], 'g') == []\nassert     filter_by_substring(['a', 'b', 'c', 'd'], 'g', include_partial=True) == ['a', 'b', 'c', 'd']\nassert     filter_by_substring(['a', 'b', 'c', 'd'], 'd') == ['d']\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"This is a test\", \"Test is good\"], \"test\") == [\n        \"This is a test\",\n        \"Test is good\"]\nassert     filter_by_substring([\"This is a test\", \"Test is good\"], \"gs\") == [\"This is a test\"]\nassert     filter_by_substring([\"This is a test\", \"Test is good\"], \"\") == [\"This is a test\", \"Test is good\"]\nassert     filter_by_substring([\"This is a test\", \"Test is good\"], \"b\") == [\"This is a test\", \"Test is good\"]\n\n\ndef substrings(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, find the list of all the substring of each string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     filter_by_substring(['abcd', 'abc', 'aa', 'a', 'xy'], 'a') \\\n        == ['abcd', 'abc', 'aa', 'xy']\nassert     filter_by_substring(['abcd', 'abc', 'aa', 'a', 'xy'], 'xy') \\\n        == ['abcd', 'xy']\nassert     filter_by_substring(['abcd', 'abc', 'aa', 'a', 'xy'], 'x') \\\n        == ['abcd', 'abc', 'xy']\nassert     filter_by_substring(['abcd', 'abc', 'aa', 'a', 'xy'], 'c') \\\n        == ['abc', 'aa', 'xy']\nassert     filter_by_substring(['abcd', 'abc', 'aa', 'a', 'xy'], 'g') \\\n        == []\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_substring([\"fgh\", \"xqw\", \"qwe\", \"cde\", \"abc\"], \"bc\") == [\"cde\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\") == [\"a\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"b\") == [\"b\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"c\") == [\"c\", \"d\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"d\") == [\"d\", \"e\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"hello\", \"world\"], \"ll\") == [\"hello\"]\nassert     filter_by_substring([\"hello\", \"world\"], \"w\") == [\"world\"]\nassert     filter_by_substring([\"hello\", \"world\"], \"l\") == []\nassert     filter_by_substring([\"hello\", \"world\", \"!\"], \"w\") == []\nassert     filter_by_substring([\"hello\", \"world\", \"!\"], \"w\") == [\"world\", \"!\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 1]) == (2, 1)\nassert     sum_product([-1, 1]) == (0, -1)\nassert     sum_product([-1, -1]) == (0, -1)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([0]) == (0, 1)\nassert     sum_product([-1, -2, -3]) == (0, -6)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([-2, -1, 0, 1, 2]) == (0, -1)\nassert     sum_product([-3, 0, 1, 2, 3]) == (0, 6)\nassert     sum_product([-4, 0, 1, 2, 3, 4]) == (0, 24)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5, 6]) == (21, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1,2,3,4,5]) == (15, 120)\nassert     sum_product([1,2,3,4,5,6,7]) == (45, 5040)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (sum_product([1,2,3]) == (6, 6))\nassert     (sum_product([]) == (0, 1))\nassert     (sum_product([1]) == (1, 1))\nassert     (sum_product([1,2,3]) == (6, 6))\nassert     (sum_product([1,2,3,4]) == (10, 24))\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([-1, 2]) == (-1, 2)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1,2,3]) == (6, 6)\nassert     sum_product([1,2,3,4,5,6]) == (21, 840)\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([-1, 2, 3, 4]) == (0, 24)\nassert     sum_product([1, 2, -1, 3, -4, 4, -5, 1, 2, 3, 4, 5, -5]) == (7, 270)\n\ndef largest_factor(n: int) -> int:\n    \"\"\" Return the largest factor of a given number.\n    The function should return 0 when the number is 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rolling_max([2, 3, 4, 5, 1]) == [2, 3, 4, 5, 1]\nassert     rolling_max([2, 3, 4, 5, 1, 2, 3, 4, 5, 1]) == [2, 3, 4, 5, 1, 2, 3, 4, 5, 1]\nassert     rolling_max([2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]) == [2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]\nassert     rolling_max([2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]) == [2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]\nassert     rolling_max([-2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rolling_max([2,1,2,3,4,5,5]) == [1,2,3,4,5,5,5]\nassert     rolling_max([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     rolling_max([1,2,3,4,5,6,6]) == [1,2,3,4,5,6,6]\nassert     rolling_max([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     rolling_max([1,2,3,4,5,6,7,7]) == [1,2,3,4,5,6,7,7]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rolling_max([2, 1, 2, 3, 4, 5, 6, 7, 8]) == [2, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     rolling_max([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert     rolling_max([5]) == [5]\nassert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [3, 4, 5, 6, 5] == rolling_max([3, 4, 5, 6, 5])\nassert     [3, 4, 5, 6, 5, 4, 5] == rolling_max([3, 4, 5, 6, 5, 4])\nassert     [3, 4, 5, 6, 5, 4, 5, 4, 5] == rolling_max([3, 4, 5, 6, 5, 4, 5])\nassert     [3, 4, 5, 6, 5, 4, 5, 4, 5, 4] == rolling_max([3, 4, 5, 6, 5, 4, 5, 4, 5])\nassert     [3, 4, 5, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4] == rolling_max([3, 4, 5, 6, 5, 4, 5, 4, 5, 4, 5, 4, 5])\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     rolling_max([10, 3, 7, 9, 5, 6, 6, 5, 3, 3, 4]) == [10, 10, 7, 9, 9, 9, 5, 6, 6, 6, 3]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rolling_max([2, 3, 4, 5, 6, 7, 1]) == [7, 6, 5, 4, 3, 2, 1]\nassert     rolling_max([2, 3, 4, 5, 6, 7, 1, 2]) == [7, 6, 5, 4, 3, 2, 1, 2]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [8, 7, 6, 5, 4, 3, 2, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\nassert     rolling_max([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, -1]\nassert     rolling_max([-1, -2, 0, 1, 2, 3, 4, 5, 6, 7]) == [0, 1, 2, 3, 4, 5, 6, 7, -1, -2]\nassert     rolling_max([-1, -2, -3, 0, 1, 2, 3, 4, 5, 6]) == [0, 1, 2, 3, 4, 5, 6, -1, -2, -3]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([1, 1, 2, 3]) == [2, 3, 3]\nassert     rolling_max([1, 1, 1, 1, 1, 1, 1, 2, 3]) == [1, 2, 3, 3, 3]\nassert     rolling_max([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_palindrome(\"Go hang a salami I'm a lasagna hog.\") == \"Go hang a salami I'm a lasagna hog!!!True\"\nassert     make_palindrome(\"not a palindrome\") == \"not a palindrome!!!False\"\nassert     make_palindrome(\"\") == \"\"\nassert     make_palindrome(\"a\") == \"a!!!True\"\nassert     make_palindrome(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\") == \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua!!!True\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome(make_palindrome(\"abcd\")) == True\nassert     is_palindrome(make_palindrome(\"a\")) == True\nassert     is_palindrome(make_palindrome(\"abc\")) == False\nassert     is_palindrome(make_palindrome(\"aac\")) == True\nassert     is_palindrome(make_palindrome(\"abca\")) == False\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome(make_palindrome(\"ab\")) == True\nassert     is_palindrome(make_palindrome(\"abcd\")) == False\nassert     is_palindrome(make_palindrome(\"abcddcba\")) == True\nassert     is_palindrome(make_palindrome(\"\")) == True\nassert     is_palindrome(make_palindrome(\"abcd\")) == True\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_palindrome('ab')\nassert     make_palindrome('ab') == 'ba'\nassert     make_palindrome('aaa') == 'aaa'\nassert     make_palindrome('abccab') == 'abccba'\nassert     make_palindrome('ad') == 'ad'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_palindrome('mom')\nassert     is_palindrome('abcd')\nassert     make_palindrome('mom') =='mom'\nassert     make_palindrome('abcd') == 'abcdabcd'\nassert     make_palindrome('a') == 'a'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_palindrome('aba')\nassert     is_palindrome('ababa')\nassert     is_palindrome('a')\nassert     is_palindrome('aa')\nassert     is_palindrome('abc')\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_palindrome(\"\") == \"\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"aab\") == \"abaa\"\nassert     make_palindrome(\"aaba\") == \"abaab\"\nassert     make_palindrome(\"aabaab\") == \"abaabaa\"\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_palindrome('a')\nassert     make_palindrome('a') == 'a'\nassert     make_palindrome('aba') == 'aba'\nassert     make_palindrome('abca') == 'abcac'\nassert     make_palindrome('abccba') == 'abcbcb'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_palindrome('nono') == 'nonono'\nassert make_palindrome('NONO') == 'nonono'\nassert make_palindrome('NONONONO') == 'nonono'\nassert make_palindrome('NONONONONO') == 'nonono'\nassert make_palindrome('NONONONONONONO') == 'nonono'\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         make_palindrome(\"deed\") == \"deecad\"\nassert         make_palindrome(\"deeddad\") == \"deeddada\"\nassert         make_palindrome(\"de\") == \"d\"\nassert         make_palindrome(\"foob\") == \"foob\"\nassert         make_palindrome(\"foobar\") == \"foobar\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_xor('11111101', '01111010') == '00000001'\nassert     string_xor('11111101', '11011010') == '00101011'\nassert     string_xor('11111101', '01101100') == '00101100'\nassert     string_xor('11111101', '01011010') == '00101110'\nassert     string_xor('11111101', '01101110') == '00101111'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_xor('110001010000101100', '000100011101100') == '0000000101010101'\nassert     string_xor('1011101000101001', '1011101000101001') == '0000000000000011'\nassert     string_xor('110001010000101100', '000100011101100') == '0000000101010101'\nassert     string_xor('1011101000101001', '1011101000101001') == '0000000000000011'\nassert     string_xor('110001010000101100', '000100011101100') == '0000000101010101'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_xor('1111', '1101') == '10000'\nassert     string_xor('1111', '1110') == '1010'\nassert     string_xor('1100', '1110') == '1010'\nassert     string_xor('1010', '1100') == '1010'\nassert     string_xor('1010', '1111') == '1010'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_xor(\"10010100\", \"01000111\") == \"01101110\"\nassert     string_xor(\"11001010\", \"00011110\") == \"01101110\"\nassert     string_xor(\"11001010\", \"11011110\") == \"00111000\"\nassert     string_xor(\"00010001\", \"11100110\") == \"00111000\"\nassert     string_xor(\"10001000\", \"11011110\") == \"11111110\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     string_xor('1100010', '0111100') == '1010101'\nassert     string_xor('1010101', '1100010') == '0110111'\nassert     string_xor('1000110', '1010101') == '1000110'\nassert     string_xor('1010101', '1000110') == '1000110'\nassert     string_xor('1000110', '1000110') == '00000001'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_xor(b'11010101', b'10101010') == b'10101010'\nassert     string_xor(b'1', b'1') == b'0'\nassert     string_xor(b'1', b'0') == b'1'\nassert     string_xor(b'0', b'0') == b'0'\n\n\ndef string_split_and_join(s: str) -> str:\n    \"\"\" Given a string, return a new string in which all duplicate consecutive\n    characters have been replaced with a single character, preserving the original\n    order of characters in the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_xor('1', '0') == '1', \"Expected: '1', Got: '0'\"\nassert     string_xor('0', '1') == '1', \"Expected: '1', Got: '0'\"\nassert     string_xor('101', '010') == '101', \"Expected: '101', Got: '010'\"\nassert     string_xor('10011101000111101', '10101010101010101') == '10001101101101001', \"Expected: '10001101101101001', Got: '10011101000111101'\"\nassert     string_xor('10001101101101001', '10011101000111101') == '10011101000111101', \"Expected: '10011101000111101', Got: '10001101101101001'\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_xor('1001', '0100') == '0101'\nassert     string_xor('0100', '1001') == '0101'\nassert     string_xor('00', '01') == '01'\nassert     string_xor('01', '00') == '01'\nassert     string_xor('1010', '0100') == '0001'\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_xor('1', '0') == '10'\nassert     string_xor('0', '1') == '01'\nassert     string_xor('1', '1') == '00'\n\n\ndef find_nth_substring_in_string(s: str, t: str, n: int) -> str:\n    \"\"\"Find nth substring in the string s of length t.\n    Return -1 if substring does not exist in s.\n    \n    Note: for substring t[0, m) = t[0, m), it is acceptable to return t[m+1, n).\n    \"\"\"\n    pass\n\n\ndef get_str_substrings(s: str, n: int) -> List[str]:\n    \"\"\"Return a list of all substrings of length n in string s.\n    Return an empty list if there are no such substrings.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_xor('10101011101000100', '10101110001100000')    == '000000010111010001'\nassert     string_xor('01101110111010001', '10101110001100000')    == '10101010111010001'\nassert     string_xor('01101110111010001', '10101110001100000')    == '01101110111010001'\nassert     string_xor('01101110111010001', '10101110001100000')    == '01101110111010001'\nassert     string_xor('01101110111010001', '10101110001100000')    == '11101110111010001'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     longest(['a', 'b', 'c']) == 'c'\nassert     longest(['a', 'b', 'c', 'd', 'e']) == 'e'\nassert     longest([]) is None\nassert     longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']) == 'k'\nassert     longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']) =='m'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     longest(['Hello', 'hello', 'Hellos', 'helloWorld']) == 'Hello'\nassert longest(['Hello', 'hello', 'Hellos', 'helloWorld', 'GoodBye']) == 'Hello'\nassert longest(['Hello', 'hello', 'Hellos', 'helloWorld', 'GoodBye', 'GoodBye', 'GoodBye']) == 'Hello'\nassert longest([]) is None\nassert longest(['', 'Hi', 'Hello', 'Hellos', 'helloWorld', 'GoodBye', 'GoodBye', 'GoodBye']) == 'Hello'\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     longest([\"this\", \"that\", \"he\"]) == \"that\"\nassert     longest([\"this\", \"that\", \"is\"]) == \"that\"\nassert     longest([\"this\", \"is\", \"a\", \"test\"]) == \"this\"\nassert     longest([]) is None\n\n\ndef count_longest_string(strings: List[str]) -> int:\n    \"\"\" In a list of strings, return the number of strings that have the same length as the longest\n    one.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     longest([\"google\", \"runoob\", \"baidu\"]) == \"baidu\"\nassert     longest([\"google\", \"runoob\", \"baidu\", \"abc\", \"t\", \"v\"]) == \"t\"\nassert     longest([]) is None\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]) == \"m\"\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]) == \"o\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     longest([\"abc\", \"a\", \"abcd\"]) == \"abc\"\nassert     longest([\"a\", \"abcd\", \"abc\"]) == \"abc\"\nassert     longest([\"a\", \"a\", \"a\", \"a\", \"a\"]) == \"a\"\nassert     longest([]) is None\n\n\ndef min_length(strings: List[str]) -> int:\n    \"\"\" Out of list of strings, return the shortest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     longest([\"cat\", \"apple\", \"boy\"]) == \"boy\"\nassert     longest([\"cat\", \"dog\", \"boy\"]) == \"boy\"\nassert     longest([\"cat\", \"dog\", \"butterfly\"]) == \"butterfly\"\nassert     longest([]) is None\nassert     longest([\"dog\", \"dog\", \"dog\", \"cat\"]) == \"dog\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     longest([\"abcd\", \"abef\", \"abeg\"]) == \"abef\"\nassert     longest([\"abcdefg\", \"abcdefgh\", \"abcdefg\"]) == \"abcdefg\"\nassert     longest([\"abcdefg\", \"abcdefgh\", \"abcdefg\"]) == \"abcdefg\"\nassert longest([]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\"\"\"\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    pass\n\"\"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     longest([\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\"]) == \"dolor\"\nassert     longest([\"sit\", \"amet\", \"consectetur\", \"adipiscing\", \"elit\"]) == \"sit\"\nassert     longest([\"\"]) == None\nassert     longest([\"longest\", \"\", \"abcd\"]) == \"longest\"\nassert     longest([]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     longest([\"a\", \"b\", \"c\", \"d\"]) == \"d\"\nassert     longest([\"abc\", \"cba\"]) == \"abc\"\nassert     longest([\"abc\", \"bcd\"]) == \"bc\"\nassert     longest([]) is None\n\n\ndef longest_distance(strings: List[str]) -> Optional[int]:\n    \"\"\" Out of list of strings, return the distance (in number of chars) between the longest and the\n    second longest strings. Return None in case the input list is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(2, 3) == 1\nassert     greatest_common_divisor(3, 2) == 1\nassert     greatest_common_divisor(3, 3) == 1\nassert     greatest_common_divisor(4, 3) == 1\nassert     greatest_common_divisor(4, 4) == 4\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert ___________ == greatest_common_divisor(4, 8)\nassert ___________ == greatest_common_divisor(10, 12)\nassert ___________ == greatest_common_divisor(11, 12)\nassert ___________ == greatest_common_divisor(1, 1)\nassert ___________ == greatest_common_divisor(2, 2)\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(5, 10) == 5\nassert     greatest_common_divisor(8, 12) == 4\nassert     greatest_common_divisor(17, 19) == 1\nassert     greatest_common_divisor(100, 10) == 10\n\ndef modulo(a: int, b: int) -> int:\n    \"\"\" Return a modulo of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(4, 5) == 1\nassert greatest_common_divisor(7, 7) == 1\nassert greatest_common_divisor(0, 7) == 7\nassert greatest_common_divisor(0, 0) == 0\nassert greatest_common_divisor(3, 3) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(4, 8) == 4\nassert     greatest_common_divisor(8, 4) == 4\nassert     greatest_common_divisor(4, 16) == 4\nassert     greatest_common_divisor(16, 4) == 4\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(3, 5) == 1\nassert     greatest_common_divisor(10, 2) == 2\nassert     greatest_common_divisor(100, 25) == 25\nassert     greatest_common_divisor(24, 9) == 3\nassert     greatest_common_divisor(5, 5) == 5\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(15, 7) == 1\nassert     greatest_common_divisor(3, 6) == 3\nassert     greatest_common_divisor(0, 1) == 1\nassert     greatest_common_divisor(12, 18) == 6\nassert     greatest_common_divisor(6, 3) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(5, 10) == 5\nassert     greatest_common_divisor(10, 5) == 5\nassert     greatest_common_divisor(42, 28) == 14\nassert     greatest_common_divisor(42, 0) == 42\nassert     greatest_common_divisor(0, 42) == 42\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\n\ndef factorial(n: int) -> int:\n    \"\"\" Return n!\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"ab\") == [\"\", \"a\", \"ab\", \"aba\", \"abab\", \"abb\", \"abba\", \"abbab\", \"abbbab\", \"abbbbab\", \"abbbbaab\", \"abbbbabba\", \"abbbbabbab\", \"abbbbabbbab\", \"ababab\", \"ababa\", \"ababab\", \"abababa\", \"abababab\", \"ababababa\", \"ababababab\"]\nassert     all_prefixes(\"ac\") == [\"\", \"a\", \"ab\", \"abc\", \"acb\", \"acbc\", \"acc\", \"acabc\", \"acbca\", \"acabcab\", \"acbcabc\", \"acbcaab\", \"acbcaabc\", \"acbcabca\", \"acbcaabcb\", \"acbcaabcc\", \"acbcaabcba\", \"acbcaabcabc\", \"acbcaabcabca\", \"acbcaabcabcab\", \"acbcaabcabcaba\", \"acbcaabcabcabc\", \"acbcaabcabcabcab\", \"acbcaabcabcabcaba\"]\nassert     all_prefixes(\"acb\") == [\"\", \"a\", \"ab\", \"abc\", \"acb\", \"acbc\", \"acc\", \"acabc\", \"acbca\", \"acabcab\", \"acbcaab\", \"acbcaabc\", \"acbcaabcab\", \"acbcaabcabc\", \"acbcaabcabca\", \"acbcaabcabcab\", \"acbcaabcabcabc\", \"acbcaabcabcabcab\", \"acbcaabcabcabcaba\"]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     all_prefixes('xz') == ['xz']\nassert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('abc123') == ['a', 'ab', 'abc', 'abc1', 'abc12', 'abc123']\nassert     all_prefixes('abc12345') == ['a', 'ab', 'abc', 'abc1', 'abc12', 'abc123', 'abc12345']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     all_prefixes('') == []\nassert     all_prefixes('a') == ['a']\nassert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('abcd') == ['a', 'ab', 'abc', 'abcd']\nassert     all_prefixes('abcdef') == ['a', 'ab', 'abc', 'abcd', 'abcdef']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"abcdefghijklmnop\") == [\"a\", \"ab\", \"abc\", \"abcdef\", \"abcdefgh\", \"abcdefghij\", \"abcdefghijkl\", \"abcdefghijklmnop\"]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"abc\")     ==     [\"\", \"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"a\")         ==     [\"a\"]\nassert     all_prefixes(\"ab\")         ==     [\"\", \"a\", \"ab\"]\nassert     all_prefixes(\"abcde\")     ==     [\"\", \"a\", \"ab\", \"abc\", \"cde\"]\nassert     all_prefixes(\"abcdefg\")     ==     [\"\", \"a\", \"ab\", \"abc\", \"cde\", \"def\", \"efg\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"\") == []\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"abcdee\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"acde\", \"abcdee\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all_prefixes('') == []\nassert     all_prefixes('short') == ['short']\nassert     all_prefixes('shortest') == ['short','sho','shor','shorst','shortes','shorter','shorterst','shorterste','shortestt','shorterste']\n\ndef longest_prefix(string: str) -> str:\n    \"\"\" Return the longest prefix from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     all_prefixes(string=\"a\") == ['a']\nassert     all_prefixes(string=\"b\") == ['b']\nassert     all_prefixes(string=\"bb\") == ['b', 'b']\nassert     all_prefixes(string=\"ba\") == ['b', 'a']\nassert     all_prefixes(string=\"aab\") == ['a', 'a', 'a', 'a']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     all_prefixes(\"tree\") == ['t', 'tt', 'treet', 'treetr', 'treetree', 'treeee', 'treeti', 'treetri', 'treetreer', 'treetreeer', 'treetreere']\nassert     all_prefixes(\"tom\") == ['t', 'tom']\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"aa\") == []\nassert     all_prefixes(\"a\") == ['a']\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     all_prefixes(\"welcome\") ==         [\"w\", \"we\", \"wi\", \"wil\", \"wel\", \"welc\", \"welcom\", \"welcome\"]\nassert     all_prefixes(\"welcome to usa\") ==     [\"w\", \"we\", \"wi\", \"wil\", \"wel\", \"welc\", \"welcom\", \"welcome\", \"welcom to\", \"welcom to usa\"]\nassert     all_prefixes(\"welcome to the usa\") ==     [\"w\", \"we\", \"wi\", \"wil\", \"wel\", \"welc\", \"welcom\", \"welcome\", \"welcom to\", \"welcom to usa\"]\nassert     all_prefixes(\"welcome to the usa\") ==     [\"w\", \"we\", \"wi\", \"wil\", \"wel\", \"welc\", \"welcom\", \"welcome\", \"welcom to\", \"welcom to usa\"]\nassert     all_prefixes(\"welcome to the usa\") ==     [\"w\", \"we\", \"wi\", \"wil\", \"wel\", \"welc\", \"welcom\", \"welcome\", \"welcom to\", \"welcom to usa\"]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_sequence(0)     == \"\"\nassert     string_sequence(1)     == \"0\"\nassert     string_sequence(2)     == \"0 1\"\nassert     string_sequence(3)     == \"0 1 2\"\nassert     string_sequence(4)     == \"0 1 2 3\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\n\ndef string_to_list(s: str) -> list:\n    \"\"\" Convert a string to a list of characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"01\"\nassert     string_sequence(3) == \"012\"\nassert     string_sequence(4) == \"0123\"\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_sequence(10) == \"01 02 03 04 05 06 07 08 09 0\"\nassert     string_sequence(2) == \"01\"\nassert     string_sequence(3) == \"01 02\"\nassert     string_sequence(10) == \"01 02 03 04 05 06 07 08 09 0\""
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_sequence(5)     == \"0 1 2 3 4\"\nassert     string_sequence(8)     == \"0 1 2 3 4 5 6 7\"\nassert     string_sequence(11)     == \"0 1 2 3 4 5 6 7 8 9 10\"\nassert     string_sequence(15)     == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n\nprint(\"Passed string_sequence test.\")"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_sequence(2) == \"0 1\"\nassert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(15) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\""
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(3) == '0 1 2'\nassert     string_sequence(4) == '0 1 2 3'\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_distinct_characters('GEEKSFORGEEKS') == 26\nassert     count_distinct_characters('PYTHON') == 6\nassert     count_distinct_characters('') == 0\nassert     count_distinct_characters('P1') == 1\nassert     count_distinct_characters('P9') == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_distinct_characters('Hello World') == 7\nassert     count_distinct_characters('hello world') == 7\nassert     count_distinct_characters('heLlo WorLd') == 7\nassert     count_distinct_characters('!@#$%^&*()') == 3\nassert     count_distinct_characters('!@#$%^&*()()()') == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('ab') == 2\nassert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('ABC') == 3\nassert     count_distinct_characters('aaa') == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"aa\") == 2\nassert     count_distinct_characters(\"ab\") == 2\nassert     count_distinct_characters(\"aB\") == 2\nassert     count_distinct_characters(\"AB\") == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_distinct_characters('') == 0\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('AA') == 1\nassert     count_distinct_characters('aA') == 2\nassert     count_distinct_characters('Aa') == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('AB') == 2\nassert     count_distinct_characters('abAB') == 3\nassert     count_distinct_characters('aAb') == 2\nassert     count_distinct_characters('aAbC') == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         count_distinct_characters('dewulf') == 2\nassert         count_distinct_characters('Cat') == 3\nassert         count_distinct_characters('D') == 1\nassert         count_distinct_characters('C') == 1\nassert         count_distinct_characters('A') == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"aA\") == 2\nassert count_distinct_characters(\"Aabcd\") == 4\nassert     count_distinct_characters(\"AbC\") == 2\nassert count_distinct_characters(\"aBCA\") == 3\nassert count_distinct_characters(\"abC\") == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         count_distinct_characters('this is a test') == 6\nassert     count_distinct_characters('this is another test') == 6\nassert     count_distinct_characters('This is a test') == 6\nassert     count_distinct_characters('A different string') == 8\n\ndef longest_substring_with_k_distinct_characters(string: str, k: int) -> int:\n    \"\"\" Given a string and a number k, find out the length of the longest substring that has exactly k distinct characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(string=\"abc\") == 3\nassert     count_distinct_characters(string=\"tAC\") == 3\nassert     count_distinct_characters(string=\"ttTT\") == 1\nassert     count_distinct_characters(string=\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789\") == 10\nassert     count_distinct_characters(string=\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == 26\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_music('o') == [1, 4]\nassert     parse_music('o|') == [1, 2]\nassert     parse_music('.|') == [1, 1]\nassert     parse_music('o.|') == [1, 1]\nassert     parse_music('o||') == [1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     parse_music('o o..') == [4, 2, 1]\nassert     parse_music('o o.... o.') == [4, 2, 1, 1, 2, 1]\nassert     parse_music('o o o o o o o. o') == [4, 2, 1, 1, 4, 1, 2, 1]\nassert     parse_music('o o o o o o o o o.') == [4, 2, 1, 1, 4, 1, 4, 1]\nassert     parse_music('o o o o o o o o o.......') == [4, 2, 1, 1, 4, 1, 4, 1, 4, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     parse_music('o') == [4]\nassert     parse_music('o|') == [2, 2]\nassert     parse_music('.|') == [1, 1]\nassert     parse_music('o.|') == [2, 2, 2]\nassert     parse_music('o|o|') == [2, 2, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     parse_music(\"4ooOO\") == [4, 2, 4, 2, 4]\nassert     parse_music(\"4o.o|\") == [4, 1, 1, 1, 1]\nassert     parse_music(\"oo.|\") == [2, 1, 1, 1, 1]\nassert     parse_music(\"oo|\") == [1, 1, 1, 1, 1]\nassert     parse_music(\"oooooo\") == [7, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     parse_music('o') == [1]\nassert     parse_music('o|') == [1, 1]\nassert     parse_music('o|o') == [1, 2]\nassert     parse_music('o|o|o') == [1, 2, 1]\nassert     parse_music('o|o|o|o') == [1, 2, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     parse_music('o') == [1]\nassert     parse_music('o|') == [1, 1]\nassert     parse_music('o||') == [1, 1, 1]\nassert     parse_music('o|||') == [1, 1, 1, 1]\nassert     parse_music('o|o|o|o|o|o') == [1, 2, 2, 2, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     parse_music('o')         == [1,1,1,1]\nassert     parse_music('o|')     == [1,2,1,1]\nassert     parse_music('.|')     == [1,1,1,1]\nassert     parse_music('o|o|o|')     == [1,2,3,2]\nassert     parse_music('o|o|o|o|')     == [1,2,3,4,3]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     parse_music(\"\") == []\nassert     parse_music(\"o\") == [4]\nassert     parse_music(\"o|\") == [2, 2]\nassert     parse_music(\"o||o\") == [2, 2, 2]\nassert     parse_music(\"o||o|o\") == [2, 2, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     parse_music('o-o-o-o-o-o|o-o-o-o-o-o|o-o-o-o-o-o-o|o-o-o-o-o-o-o') == [16, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o|o') == [16, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     parse_music(\"oo\") == [4]\nassert     parse_music(\"oo|\") == [2, 2]\nassert     parse_music(\"oo|oo\") == [2, 2, 2]\nassert     parse_music(\"oo.|.\") == [2, 2, 1, 1]\nassert     parse_music(\"oo.o|oo\") == [2, 2, 2, 2]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     how_many_times('hello', 'll') == 2, \"2nd example\"\nassert     how_many_times('aaaaa', 'aa') == 4, \"4th example\"\nassert     how_many_times('aaaa', 'aa') == 0, \"5th example\"\nassert     how_many_times('', 'aa') == 0, \"6th example\"\nassert     how_many_times('', '') == 1, \"7th example\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     how_many_times(\"any thing\", \"any\") == 1, \"Expected 1\"\nassert     how_many_times(\"any thing\", \"any thing\") == 2, \"Expected 2\"\nassert     how_many_times(\"abracadabra\", \"abra\") == 2, \"Expected 2\"\nassert     how_many_times(\"abracadabra\", \"\") == 0, \"Expected 0\"\nassert     how_many_times(\"\", \"\") == 0, \"Expected 0\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     how_many_times(\"word\", \"word\") == 1\nassert     how_many_times(\"word\", \"\") == 0\nassert     how_many_times(\"word\", \"w\") == 0\nassert     how_many_times(\"word\", \"wor\") == 0\nassert     how_many_times(\"word\", \"word\") == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     how_many_times('catcat', 'cat') == 2, 'catcat cat'\nassert     how_many_times('catcat', 'dog') == 1, 'catcat dog'\nassert     how_many_times('catcatcat', 'cat') == 3, 'catcatcat cat'\nassert     how_many_times('dogcatdog', 'cat') == 2, 'dogcatdog cat'\nassert     how_many_times('dog', 'cat') == 0, 'dog dog'\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     how_many_times('0123456789', '123') == 3\nassert     how_many_times('0123456789', '567') == 1\nassert     how_many_times('0123456789', '89') == 1\nassert     how_many_times('0123456789', '9') == 1\nassert     how_many_times('0123456789', '1') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     how_many_times('aaaaa', 'a') == 6\nassert     how_many_times('abcdef', 'ab') == 2\nassert     how_many_times('ab', 'ab') == 2\nassert     how_many_times('abbbb', 'a') == 4\nassert     how_many_times('aaaaa', 'b') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     how_many_times('aabc', 'abc') == 1\nassert     how_many_times('abcc', 'abc') == 2\nassert     how_many_times('abcc', 'aabc') == 3\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     how_many_times('this is a very big and very long string','very') == 2\nassert     how_many_times('this is a very big and very long string', 'long') == 1\nassert     how_many_times('this is a very big and very long string', 'and') == 1\nassert     how_many_times('this is a very big and very long string', 'is') == 0\nassert     how_many_times('this is a very big and very long string', 'big') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     how_many_times('this is a test for the func how_many_times', 'test') == 1, \"function 'how_many_times' is not correct\"\nassert     how_many_times('this is a test for the func how_many_times', 'not_test') == 0, \"function 'how_many_times' is not correct\"\nassert     how_many_times('this is a test for the func how_many_times', 'is') == 2, \"function 'how_many_times' is not correct\"\nassert     how_many_times('this is a test for the func how_many_times', 'a') == 3, \"function 'how_many_times' is not correct\"\nassert     how_many_times('this is a test for the func how_many_times', 'of') == 2, \"function 'how_many_times' is not correct\"\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     how_many_times('tacocat', 'cat') == 1\nassert     how_many_times('abc', 'cat') == 0\nassert     how_many_times('tacocat', 'tac') == 2\nassert     how_many_times('abc', 'abc') == 1\nassert     how_many_times('abc', 'def') == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('four five six seven eight nine zero one two three') == 'one two three four five six seven eight nine zero'\nassert     sort_numbers('zero one two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('nine one two three four five six seven eight') == 'one two three four five six seven eight nine'\nassert     sort_numbers('three five four one two two three four five six') == 'one two three four five six four one two'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"one two three four five six seven eight nine ten\") == \"one two three four five six seven eight nine ten\"\nassert     sort_numbers(\"three one two four five six seven eight nine ten\") == \"three one four five six seven eight nine ten\"\nassert     sort_numbers(\"one three five six seven eight nine four two\") == \"one three four five six seven eight nine four two\"\nassert     sort_numbers(\"nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nin"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('nine') == 'nine'\nassert     sort_numbers('four') == 'four'\nassert     sort_numbers('eight') == 'eight'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_numbers('one') == 'one', \"case 1\"\nassert     sort_numbers('two') == 'two', \"case 2\"\nassert     sort_numbers('three') == 'three', \"case 3\"\nassert     sort_numbers('four') == 'four', \"case 4\"\nassert     sort_numbers('five') == 'five', \"case 5\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_numbers('1 zero zero 2 one 2 two 2 three 3 three 3 three 3 three 3 three') == \\\n         '1 one 2 two 2 three 3 three 3 three three 3 three 3 three 3 three 3 three 3 three 3 three 3 three 3 three 3 three 3 three'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_numbers(\"one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\") == \"one nineteen ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty\"\nassert     sort_numbers(\"one one\") == \"one one\"\nassert     sort_numbers(\"one two\") == \"one two\"\nassert     sort_numbers(\"one one two two\") == \"one two one\"\nassert     sort_numbers(\"one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty\") == \"one nineteen twenty twenty one\"\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('nine two three four five six seven eight one') == 'one two three four five six seven eight nine'\nassert     sort_numbers('eight one three five two four') == 'one two three four five six seven eight'\nassert     sort_numbers('seven five four eight three two one') == 'one two three four five six seven eight'\nassert     sort_numbers('two three four five six seven eight nine one') == 'one two three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('one 1 three four five six 7 seven 8 eight 9') == 'one 1 three four five six 7 seven 8 nine'\nassert     sort_numbers('one 1e 3four 5 six 7 seven 8 eight 9') == 'one 1 three four five six 7 seven eight nine'\nassert     sort_numbers('one 1 3e four 5 six 7 seven 8 eight 9') == 'one 1 three four five six seven eight nine'\nassert     sort_numbers('one 1 3 four 5 six 7 seven 8 eight 9') == 'one 1 three four five six seven eight nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_numbers('0 nine one eight two five three four seven six four six three two one zero') == 'one zero one two two three four five six seven eight nine nine'\nassert     sort_numbers('3 five two one nine one four three zero one two eight seven') == 'one zero one two three four five six seven eight nine nine'\nassert     sort_numbers('2 1 2 4 6 3 3 4 1') == '1 2 1 2 3 3 4 4 6'\nassert     sort_numbers('0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0'\nassert     sort_numbers('2 1 2 1 2 1 1') == '1 1 1 1 2 2'\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_numbers(\"eight nine zero one two four five six seven three eight\") == \"eight nine zero one two four five six seven three eight\"\nassert     sort_numbers(\"\") == \"\"\nassert     sort_numbers(\"one one two three three\") == \"one one two three three\"\nassert     sort_numbers(\"three one two three one\") == \"one one two three three\"\nassert     sort_numbers(\"one two one two three three four five one\") == \"one two one two three three four five one\"\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_closest_elements([5, 6, 7, 8, 9]) == (5, 8)\nassert     find_closest_elements([1, 5, 2, 3, 4, 9]) == (1, 5)\nassert     find_closest_elements([1, 3, 5, 7, 9]) == (1, 3)\nassert     find_closest_elements([1, 5, 2, 3, 4, 5]) == (1, 5)\nassert     find_closest_elements([1, 5, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 5)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_closest_elements([7, 12, 15, 17, 22, 24, 25, 30, 31]) == (7, 15)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (5, 7)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (5, 4)\nassert     find_closest_elements([-4, -3, -2, -1]) == (-4, -3)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == (5, 11)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_closest_elements([0, 2, 4, 7]) == (0, 2)\nassert     find_closest_elements([0, 1, 2, 3, 4, 5, 6, 7]) == (1, 3)\nassert     find_closest_elements([]) == (None, None)\n\n\ndef merge_sorted_lists(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\" For each sorted sub-list, we want to insert it into the result list, but we need to maintain the order of\n    the result list so we use the function to_sorted_list to do that. The result list is the list of lists passed in\n    with the elements of each sublist sorted in ascending order.\n    \"\"\"\n    pass\n\ndef to_sorted_list(numbers: List[int]) -> List[int]:\n    \"\"\" Sort the input list and return it. \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_closest_elements([-1.0, -2.5, -3.1, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]) == (-2.5, 1.0)\nassert     find_closest_elements([-1.0, -2.5, -3.1, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 10.0]) == (-2.5, 1.0)\nassert     find_closest_elements([]) == (-1.0, 1.0)\nassert     find_closest_elements([3.0]) == (3.0, 3.0)\nassert     find_closest_elements([1.0, 1.0]) == (1.0, 1.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_closest_elements([100.1, 101.0, 103.0]) == (100.1, 103.0)\nassert     find_closest_elements([0.1, 0.2, 0.3]) == (0.1, 0.2)\nassert     find_closest_elements([0.5, 0.2, 1.0]) == (0.2, 1.0)\nassert     find_closest_elements([-1.0, -2.0, -3.0]) == (-3.0, -1.0)\nassert     find_closest_elements([]) == (None, None)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_closest_elements([-3.2, -2.2, 2.2, 4.2, -1.2]) == (-1.2, 2.2)\nassert     find_closest_elements([-3.2, -2.2, 2.2, 4.2, -1.2, 0.2]) == (-1.2, 2.2)\nassert     find_closest_elements([-3.2, -2.2, 2.2, 4.2, -1.2, 0.2, 0.1]) == (-1.2, 2.2)\nassert     find_closest_elements([-3.2, -2.2, 2.2, 4.2, -1.2, 0.2, 0.1, 2.2]) == (-1.2, 2.2)\nassert     find_closest_elements([-3.2, -2.2, 2.2, 4.2, -1.2, 0.2, 0.1, 2.2, 3.2]) == (-1.2, 2.2)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_closest_elements([0, -2, 2, 0, -7, 8]) == (-2, 0)\nassert     find_closest_elements([0, -1, 1, 0, -3]) == (-1, 0)\nassert     find_closest_elements([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_closest_elements([1, 4, 9, 16]) == (1, 9)\nassert     find_closest_elements([1, 2, 4, 9]) == (1, 2)\nassert     find_closest_elements([1, 4, 9, 17]) == (1, 9)\nassert     find_closest_elements([1, 4, 9, 17, 100]) == (1, 9)\nassert     find_closest_elements([1, 4, 9, 17, 100, 123]) == (1, 9)\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (1.0, 1.0) == find_closest_elements([1.0, 2.0, 3.0])\nassert     (2.0, 1.0) == find_closest_elements([2.0, 1.0, 3.0])\nassert     (3.0, 1.0) == find_closest_elements([3.0, 1.0, 2.0])\nassert     (2.0, 2.0) == find_closest_elements([2.0, 2.0, 1.0])\nassert     (1.0, 3.0) == find_closest_elements([1.0, 3.0, 2.0])\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [2.2, 2.1] == find_closest_elements([1.9, 2.0, 2.1, 2.2, 2.3, 2.4])\nassert     [2.0, 2.1] == find_closest_elements([2.0, 2.1, 2.2, 2.3, 2.4])\nassert     [2.3, 2.4] == find_closest_elements([2.0, 2.1, 2.2, 2.3, 2.4, 2.5])\nassert     [2.2, 2.3] == find_closest_elements([1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5])\nassert     [2.1, 2.2] == find_closest_elements([1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9])\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [0.,0.] == rescale_to_unit([0,0])\nassert     [0.5, 0.5] == rescale_to_unit([0.5, 0.5])\nassert     [1., 1.] == rescale_to_unit([1, 1])\nassert     [0., 1.] == rescale_to_unit([0, 1])\nassert     [0.5, 1.5] == rescale_to_unit([0.5, 1.5])\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([1]) == [1]\nassert     rescale_to_unit([2]) == [0.5]\nassert     rescale_to_unit([2,3]) == [0.3333333333333333, 0.66666667]\nassert     rescale_to_unit([1,2]) == [0.5, 0.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([0.2, 0.3, 0.5]) == [0.2, 0.3, 0.5]\nassert     rescale_to_unit([0.4, 0.2, 0.4]) == [0.4, 0.2, 0.4]\nassert     rescale_to_unit([0.2, 0.3, 0.5, 0.8]) == [0.2, 0.3, 0.5, 0.8]\nassert     rescale_to_unit([0.2, 0.3, 0.5, 1]) == [0.2, 0.3, 0.5, 1]\nassert     rescale_to_unit([0.2, 0.3, 0.5, 1.2]) == [0.2, 0.3, 0.5, 1.2]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([2, 10, 7]) == [0.5, 0.75, 0.35]\nassert rescale_to_unit([3, -2, 10]) == [0.3333333333333333, -0.6666666666666666, 0.5]\nassert rescale_to_unit([]) == []\n\n\ndef rescale_to_unit_alt(numbers: List[float]) -> List[float]:\n    \"\"\" Same function as above, but more concisely and faster\"\"\"\n    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [0]\n\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    max_num = max(smallest_number, largest_number)\n    factor = 1.0 / max_num\n    return [x * factor for x in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([1.1, 0.1, 0.1, 0.1, 0.5]) == [0.0, 0.0, 0.0, 0.0, 1.0]\nassert     rescale_to_unit([1.1, 2.1, 3.1, 4.1, 5.1]) == [0.0, 0.5, 1.0, 1.5, 2.0]\nassert     rescale_to_unit([2.1, 1.1, 0.1, 0.1, 0.5]) == [0.0, 0.0, 0.0, 0.0, 1.0]\nassert     rescale_to_unit([0.5, 0.1, 0.1, 0.1, 0.5]) == [0.0, 0.0, 0.0, 0.0, 1.0]\n\n\ndef rescale_to_unit_2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [float(num - min_num)/float(max_num - min_num) for num in numbers]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [1,1] == rescale_to_unit([1,1])\nassert     [-1,-1] == rescale_to_unit([-1,-1])\nassert     [0,1] == rescale_to_unit([0,1])\nassert     [0,0] == rescale_to_unit([0,0])\nassert     [-1,0] == rescale_to_unit([-1,0])\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0.25, 0.5, 0.75, 1.0]\nassert     rescale_to_unit([1, 2, 3]) == [0.25, 0.5, 0.75]\nassert     rescale_to_unit([1]) == [0.25]\nassert     rescale_to_unit([-1, -2, -3, -4]) == [-0.25, -0.5, -0.75, -1.0]\nassert     rescale_to_unit([0, 0, 0, 0]) == [0.0, 0.0, 0.0, 0.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [0.0, 0.5, 1.0, 1.5] == rescale_to_unit([0.0, 0.5, 1.0, 1.5])\nassert     [0.0, 0.5, 1.0, 1.5] == rescale_to_unit([0.0, 0.5, 1.0, 1.5, 2.0])\n\n\ndef rescale_to_unit_range(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, rescale them to be in the range [0, 1] \"\"\"\n    pass\n\n\ndef rescale_to_unit_range_list(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, rescale them to be in the range [0, 1] \"\"\"\n    pass\n\n\ndef rescale_to_unit_list(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, rescale them to be in the range [0, 1] \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([1.0]) == [0.0]\nassert     rescale_to_unit([1.0, 2.0]) == [0.0, 1.0]\nassert     rescale_to_unit([1.0, 2.0, 3.0]) == [0.0, 0.5, 1.0]\nassert     rescale_to_unit([-2.0, 0.0, 1.0, 2.0]) == [0.0, 0.0, 1.0, 1.0]\nassert     rescale_to_unit([-2.0, 0.0, 1.0, 2.0, 3.0]) == [0.0, 0.0, 1.0, 0.5, 1.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [0.0, 1.0, 2.0, 3.0]     == rescale_to_unit([3, 2, 1, 0])\nassert     [0.0, 1.0, 2.0, 3.0]     == rescale_to_unit([3, 2, 1, 0, 4])\nassert     [0.0, 1.0, 2.0, 3.0]     == rescale_to_unit([0, 1, 2, 3])\nassert     [0.0, 1.0, 2.0, 3.0]     == rescale_to_unit([0, 1, 2, 3, 4])\n\n\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_integers([1, 2, 3, \"4\", 5]) == [1, 2, 3, 5]\nassert     filter_integers([\"A\", \"2\", 3, None, 4]) == [2, 3, 4]\nassert     filter_integers([1, \"\", 3, None, 4]) == [1, 3, 4]\nassert     filter_integers([1, 2, \"\", \"4\", 5]) == [1, 2, 4, 5]\nassert     filter_integers([1, 2, 3, \"\", 4, \"5\"]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_integers([1, 2, 3, 4, 'xyz']) == [1, 2, 3, 4]\nassert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     filter_integers([1, 2, 'abc', 4, 5]) == [1, 2, 4, 5]\nassert     filter_integers(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']\n\n\ndef filter_integers_dict(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == filter_integers([1, 2, 'a', 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == filter_integers([1, 'a', 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == filter_integers([1, 2, 'a', 4, 5, 6, 'a', 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9] == filter_integers([1, 2, 3, 'a', 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == filter_integers([0, 'a', 2, 3, False, 'b', 4, False, 6, 7, False, 9])\nassert     [1, 3, 5, 7, 9] == filter_integers([1, 'b', 3, 'a', False, 4, 'c', False, 6, 7, False, 9])\nassert     [2, 4, 6, 8] == filter_integers([0, 'a', 2, 'b', 4, 'a', 6, 'c', False, 8, False, 0])\nassert     [6, 8] == filter_integers([0, 'a', 2, 'b', 4, 'a', 6, 'c', False, 8, False, 0, 'd', 'z'])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == filter_integers(\n    [0, 'a', 2, 3, False, 'b', 4, False, 6, 7, False, 9, 'a', 'b', 'z'])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 'a', 'b', True, False, 3.0]) == [1, 2, 3]\nassert     filter_integers(['a', 'b', 'c', 'd']) == []\nassert     filter_integers([1, 2, 'a', 'b', 'a']) == [1, 2]\nassert     filter_integers(['a', 'b', 'a']) == ['a', 'b']\nassert     filter_integers(['a', 'b', 'a', 'b']) == ['a', 'b']\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     all(isinstance(x, int)\n            for x in filter_integers([1, 2, 3, \"4\", 5, \"6\", 7, 8]))\nassert     all(isinstance(x, int)\n            for x in filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]))\nassert     all(isinstance(x, int)\n            for x in filter_integers(\"1,2,3,4,5,6,7,8\"))\nassert     all(isinstance(x, int)\n            for x in filter_integers([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]))\nassert     all(isinstance(x, int)\n            for x in filter_integers([1, 2, 3, \"4\", 5, \"6\", 7, 8]))\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 4, 5, 6] == filter_integers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\nassert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, 3, 4, 5, 6])\nassert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, '3', 4, 5, 6])\nassert     [1, 2, 3, 4, 5, 6] == filter_integers([1.0, 2.0, 3.0, '4.0', 5.0, 6.0])\nassert     [1, 2, 3, 4, 5, 6] == filter_integers([1, 2, 3, 4.0, 5, 6.0])\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     filter_integers([1,2,3,\"4\",5,6,7]) == [1,2,3,4,5,6,7]\nassert     filter_integers([1,\"2\",3,\"4\",5,6,7]) == [1,2,3,4,5,6,7]\nassert     filter_integers([1,2,\"3\",4,\"5\",6,7]) == [1,2,3,4,5,6,7]\nassert     filter_integers([1,2,3,4,\"5\",6,7]) == [1,2,3,4,5,6,7]\nassert     filter_integers([1,\"2\",3,4,5,6,7]) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_integers([5, 6, 7, 8])    ==    [5, 6, 7, 8]\nassert     filter_integers([1, \"2\", 3, 4])    ==    [1, 3, 4]\nassert     filter_integers([1, 2, 3, 4])     ==    [1, 2, 3, 4]\nassert     filter_integers([1, 2, \"3\", 4])     ==    [1, 2, 4]\nassert     filter_integers([1, 2, 3, \"4\"])     ==    [1, 2, 3]\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"x\") == 1\nassert     strlen(\"xy\") == 2\nassert     strlen(\"xab\") == 3\nassert     strlen(\"abcdef\") == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     strlen('abc') == 3\nassert     strlen('abc ') == 3\nassert     strlen('abc\\n') == 3\nassert     strlen('abc\\r') == 3\nassert     strlen('abc\\r\\n') == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strlen('p') == 1\nassert     strlen('a') == 1\nassert     strlen('ab') == 2\nassert     strlen('abc') == 3\nassert     strlen('abcdef') == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strlen('a') == 1\nassert     strlen('abc') == 3\nassert     strlen('abcd') == 4\nassert     strlen('abcd ef') == 6\nassert     strlen('abcd ef\\0') == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"abc\") == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         strlen('abc')        == 3\nassert         strlen('abc')        == 3\nassert         strlen('abc')        == 3\nassert         strlen('a' * 3)    == 3\nassert         strlen('abc')        == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdef\") == 6\nassert     strlen(\"abcdefgh\") == 12\nassert     strlen(\"abcdefghi\") == 12\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     strlen(\"hello\") == 5\nassert     strlen(\"\") == 0\nassert     strlen(\" \") == 1\nassert     strlen(\"a\") == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"Hello\") == 5\nassert     strlen(\"World\") == 7\nassert     strlen(\"I am an \\\"ok\\\" world\") == 19\nassert     strlen(\"I am an \\\"ok\\\" world\") == 19\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strlen('12345') == 5\nassert     strlen('abc') == 3\nassert     strlen('xyz') == 3\nassert     strlen('a') == 1\nassert     strlen('') == 0\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_divisor(6) == 3\nassert     largest_divisor(7) == 7\nassert     largest_divisor(12) == 4\nassert     largest_divisor(18) == 6\nassert     largest_divisor(22) == 11\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(60) == 5\nassert     largest_divisor(24) == 3\nassert     largest_divisor(777777) == 7\nassert     largest_divisor(99999) == 7\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(9) == 3\nassert     largest_divisor(100) == 10\nassert     largest_divisor(9999) == 999\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(10) == 5\nassert     largest_divisor(17) == 17\nassert     largest_divisor(21) == 7\nassert     largest_divisor(16) == 16\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef least_common_multiple(n: int, m: int) -> int:\n    \"\"\" For two positive integers, n and m, find the least common multiple of n and m\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_divisor(20) == 2\nassert     largest_divisor(15) == 3\nassert     largest_divisor(27) == 3\nassert     largest_divisor(10) == 5\nassert     largest_divisor(17) == 17\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \nassert largest_divisor(1) == 1\nassert largest_divisor(2) == 1\nassert largest_divisor(3) == 1\nassert largest_divisor(4) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     factorize(0) == [0]\nassert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(10) == [2, 5]\nassert     factorize(100) == [2, 2, 5]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     factorize(100) ==     [2, 2, 5, 5]\nassert     factorize(1024) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     factorize(30) == [2, 3, 5]\nassert     factorize(200) == [2, 2, 5]\nassert     factorize(1) == [1]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [2, 2, 5, 7]     == factorize(120)\nassert     [2, 2, 2, 3, 3]     == factorize(3456)\nassert     [2, 3, 3, 4, 6]     == factorize(360)\nassert     [2, 2, 2, 3, 3, 3, 5, 7]     == factorize(7230)\nassert     [2, 2, 2, 3, 3, 3, 3, 3, 7, 11]     == factorize(360)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     factorize(10) == [2,5]\nassert     factorize(100) == [2,2,5]\nassert     factorize(101) == [2,5,17]\nassert     factorize(102) == [2,3,3,17]\nassert     factorize(103) == [3,17,29]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [2, 2, 2, 3, 3, 5] == factorize(15)\nassert     [2, 3, 3, 5] == factorize(30)\nassert     [2, 2, 5] == factorize(50)\nassert     [7, 5] == factorize(70)\nassert     [2, 5, 5] == factorize(125)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [2, 2, 5, 7]    == factorize(14)\nassert     [2, 2, 7]    == factorize(40)\nassert     [2, 2, 2, 3, 3, 11]    == factorize(32)\nassert     [2, 2, 2, 2, 2]    == factorize(32)\nassert     [2, 2, 2, 2, 2, 2, 3, 3]    == factorize(48)\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     factorize(1000) == [2, 2, 5]\nassert     factorize(10) == [2, 5]\nassert     factorize(25) == [5, 5]\nassert     factorize(100) == [2, 2, 5, 5]\nassert     factorize(54) == [2, 3, 3, 11]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     factorize(15) == [3, 3]\nassert     factorize(12) == [2, 2, 3]\nassert     factorize(14) == [2, 7]\nassert     factorize(77) == [7, 17]\nassert     factorize(99) == [99]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     factorize(16) == [2,2,2,2]\nassert     factorize(12) == [2,3]\nassert     factorize(8) == [2,2]\nassert     factorize(4) == [2,2]\nassert     factorize(3) == [3]\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [2,2,2,2,2,2,2] == factorize(24)\nassert     [2,2,2,2,2,2] == factorize(36)\nassert     [2,2,2,2,2,2,2,2] == factorize(72)\nassert     [2,2,2,2,2,2,2,3,2,2] == factorize(300)\nassert     [2,2,2,2,2,2,3,3,3,3,3,3] == factorize(720)\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 1, 2, 2, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([]) == []\n\ndef reverse_iterative(items: List[str]) -> List[str]:\n    \"\"\"\n    Write a function that takes a list of characters and returns a reversed copy of the list.\n    Do this without creating a second list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1, 2, 3, 3, 3, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 1, 1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 1, 1, 1, 1, 1, 1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1, 2, 3, 4, 5] == remove_duplicates([1, 2, 3, 4, 5])\nassert     [1, 2, 3, 4, 4, 5] == remove_duplicates([1, 2, 3, 4, 4, 5])\nassert     [1, 1, 1, 2, 2, 3, 4, 5, 5] == remove_duplicates([1, 1, 1, 2, 2, 3, 4, 5, 5])\nassert     [1, 1, 1, 1, 2, 2, 3, 4, 5, 5] == remove_duplicates([1, 1, 1, 1, 2, 2, 3, 4, 5, 5])\nassert     [1, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5] == remove_duplicates([1, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5])\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 6, 7, 7, 7, 7, 7])    == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7])    == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8])    == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])    == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 3, 3, 4, 4, 4, 5])    == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 4, 4]) == [1, 2, 3, 4, 4]\nassert     remove_duplicates([1, 1, 2, 2, 3, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 1, 1, 2, 3, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1,2,2,3,4,4,5,5,5,6,6,6]) == [1,2,3,4,5,6]\nassert     remove_duplicates([1,2,2,3,4,5,6,7,7,8,8,9,10,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     remove_duplicates([1,1,2,2,3,4,4,5,5,5,6,7,7,7,8,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     remove_duplicates([]) == []\n\n\ndef find_first_duplicate(numbers: List[int]) -> int:\n    \"\"\" From a list of integers, return the first element that occurs more than once.\n    Return None if no element occurs more than once.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     remove_duplicates([1,1,1,2,2,3]) == [1,2,3]\nassert     remove_duplicates([1,1,1,2,3,3,3,3,4,4,4,4]) == [1,2,3,4]\nassert     remove_duplicates([0,0,0,0,0,0,0,0,0,0]) == [0]\nassert     remove_duplicates([]) == []\n\ndef sum_of_squares(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, return the sum of the squares of the integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_duplicates([4, 4, 2, 2, 2, 4, 4]) == [4, 2, 4]\nassert     remove_duplicates([4, 2, 4, 2, 2, 4, 2]) == [4, 2, 4]\nassert     remove_duplicates([4, 4, 2, 2, 2, 2, 2]) == [4]\nassert     remove_duplicates([2]) == [2]\nassert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([2, 1, 2, 1, 1, 2]) == [2, 1, 2]\nassert     remove_duplicates([-4, -4, -2, -2, -2, 0, 0, 2, 2, 4, 4, 4]) == [-4, -2, 0, 2, 4]\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"Z\") == \"z\"\nassert     flip_case(\"z\") == \"Z\"\nassert     flip_case(\"m\") == \"M\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     flip_case('hello world') == 'HELLO WORLD'\nassert     flip_case('HELLO WORLD') == 'hello world'\nassert     flip_case('1Hello World') == '1HELLO WORLD'\nassert     flip_case('1hello world') == '1HELLO WORLD'\nassert     flip_case('Hello') == 'HELLO'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     flip_case('') == ''\nassert     flip_case('1') == '1'\nassert     flip_case('1a') == '1A'\nassert     flip_case('123') == '321'\nassert     flip_case('1a2b3c') == '1A2B3C'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     flip_case('a1b2') == 'A1B2'\nassert     flip_case('A1B2') == 'a1b2'\nassert     flip_case('1234') == '1234'\nassert     flip_case('1234AB') == '1234AB'\nassert     flip_case('1234abc') == '1234abc'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     flip_case(\"hELLO\") == \"HeLLO\"\nassert     flip_case(\"H\" * 1000) == \"H\" * 1000\nassert     flip_case(\"HELLO\") == \"HELLO\"\nassert     flip_case(\"hello\") == \"HELLO\"\nassert     flip_case(\"HellO\") == \"HELLO\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     flip_case(\"Hey yash\") == \"heY yAsh\"\nassert     flip_case(\"LeetCode\") == \"lEtCodE\"\nassert     flip_case(\"1234\") == \"1234\"\nassert     flip_case(\"12345\") == \"12345\"\nassert     flip_case(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     flip_case(\"CamelCase\") == \"CamelCase\"\nassert     flip_case(\"camelCase\") == \"camelCase\"\nassert     flip_case(\"camelCase\") == \"camelCase\"\nassert     flip_case(\"CamelCase\") == \"CamelCase\"\nassert     flip_case(\"CamelCASE\") == \"CamelCASE\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     flip_case(\"asd\") == \"ASD\"\nassert     flip_case(\"123a\") == \"123A\"\nassert     flip_case(\"1a2b\") == \"1A2B\"\nassert     flip_case(\"a1b\") == \"a1B\"\nassert     flip_case(\"\") == \"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     flip_case('Hi') == 'hI'\nassert     flip_case('hello') == 'HeLLo'\nassert     flip_case('GEEKSFORGEEKS') == 'gEEKSforGEEKS'\nassert     flip_case('h') == 'H'\nassert     flip_case('hell') == 'HeLL'\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     flip_case('Camel Case') == 'Camel Case'\nassert     flip_case('camel Case') == 'Camel Case'\nassert     flip_case('camel Case') == 'camel Case'\nassert     flip_case('CamelCase') == 'Camel Case'\nassert     flip_case('camelCase') == 'Camel Case'\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     concatenate([\"\", \"\", \"\", \"\", \"\"]) == \"\"\nassert     concatenate([\"\", \"\", \"\", \"\", \"123\"]) == \"123\"\nassert     concatenate([\"123\", \"123\", \"123\", \"123\", \"123\"]) == \"123123123123123123123123123\"\nassert     concatenate([\"abc\", \"123\", \"def\", \"456\", \"789\"]) == \"abc123def456789\"\n\ndef merge(strings: List[str]) -> str:\n    \"\"\" Merge list of strings into a single string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     concatenate(['cat', 'bat', 'rat']) == 'catbatrat'\nassert     concatenate(['ab', 'cd']) == 'abcd'\nassert     concatenate(['a', 'b', 'c', 'd', 'e']) == 'abcde'\nassert     concatenate(['x', 'y', 'z']) == 'xyz'\nassert     concatenate([]) == ''\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     concatenate([\"ab\", \"cd\"]) == \"abcd\"\nassert     concatenate([\"ab\", \"cd\", \"ef\"]) == \"abcdef\"\nassert     concatenate([\"ab\", \"cd\", \"ef\", \"ghi\"]) == \"abcdefghi\"\nassert     concatenate([\"ab\", \"cd\", \"ef\", \"ghi\", \"jkl\"]) == \"abcdefghijkl\"\n\n\ndef convert_to_int(string: str) -> int:\n    \"\"\" Convert string to integer\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert     concatenate([\"hello\", \"world\", \"so\", \"much\", \"so\", \"interesting\"]) == \"helloworldsomuchinteresting\"\nassert     concatenate([\"w\", \"o\", \"r\", \"l\", \"d\"]) == \"world\"\nassert     concatenate([]) == \"\"\n\ndef checkio(n: int) -> str:\n    \"\"\"\n    :param n: the maximum number of the result\n    :return: your answer as a string\n    \"\"\"\n    s = \"\"\n    for i in range(1, n+1):\n        s = s + str(i)\n    return s\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     concatenate(['123', '456', '789']) == '123456789'\nassert     concatenate(['1', '2', '3', '4', '5']) == '12345'\nassert     concatenate(['1', '2', '3', '4', '5', '6']) == '123456'\nassert     concatenate(['1', '2', '3', '4', '5', '6', '7', '8', '9']) == '123456789'\n\n\ndef list_of_concatenated_strings(n: int, m: int) -> List[str]:\n    \"\"\"\n    Return a list of concatenated strings of length n with m characters each\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     concatenate([])        == \"\"\nassert     concatenate([\"a\", \"b\"])    == \"ab\"\nassert     concatenate([\"ab\", \"cd\"])    == \"abcd\"\nassert     concatenate([\"abc\", \"def\"])    == \"abcdef\"\nassert     concatenate([\"abc\", \"def\", \"ghi\"])    == \"abcdefghi\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\"]) == \"ab\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([]) == \"\"\n\ndef flip_case(string: str, is_lower: bool) -> str:\n    \"\"\" Return the given string with the case flipped\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"abc\", \"def\"]) == \"abcdef\"\nassert     concatenate([\"abc\", \"123\"]) == \"abc123\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdef\"\nassert     concatenate([\"a\", \"123\", \"d\", \"e\", \"f\", \"g\"]) == \"a123defg\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     concatenate(['Foo', 'bar']) == 'Foobar'\nassert     concatenate(['Fo', 'o', 'o', 'b', 'a', 'r']) == 'Foobarta'\nassert     concatenate(['', 'baz', 'baz', 'baz']) == 'bazbazbaz'\nassert     concatenate([]) == ''\nassert     concatenate(['', '', '']) == ''\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     concatenate(['a','b','c']) == 'abc'\nassert     concatenate(['abc','de','fghi']) == 'abcdefghi'\nassert     concatenate(['abc','de','fgh','i']) == 'abcdefghi'\nassert     concatenate(['a','b','c','d']) == 'abcd'\n\ndef delete_character(string: str, i: int) -> str:\n    \"\"\" Delete ith character from string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"cat\", \"dog\", \"fish\", \"frog\"], \"c\") == [\"cat\"]\nassert     filter_by_prefix([\"cat\", \"dog\", \"fish\", \"frog\"], \"d\") == [\"dog\", \"frog\"]\nassert     filter_by_prefix([\"cat\", \"dog\", \"fish\", \"frog\"], \"f\") == [\"fish\"]\nassert     filter_by_prefix([\"cat\", \"dog\", \"fish\", \"frog\"], \"g\") == []\n\n\ndef filter_by_prefix_duplicates(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    This will return a list of strings where each string is a duplicate of the first\n    string in the input list that starts with the prefix.\n    \n    Duplicates are added to the result list in the same order as the original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     filter_by_prefix(['foo', 'bar', 'bat'], 'b') == ['bar', 'bat']\nassert     filter_by_prefix(['foo', 'bar', 'baz'], 'b') == ['bar', 'baz']\nassert     filter_by_prefix(['foo', 'bar', 'baz'], 'ba') == ['bar', 'baz']\nassert     filter_by_prefix(['foo', 'bar', 'baz'], 'baz') == ['baz']\nassert     filter_by_prefix(['foo', 'bar', 'baz'], 'foo') == ['foo']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     filter_by_prefix(\n            ['one', 'two', 'three', 'four'],\n            'one'\n        ) == ['one']\nassert     filter_by_prefix(\n            ['one', 'two', 'three', 'four'],\n            'two'\n        ) == ['two']\nassert     filter_by_prefix(\n            ['one', 'two', 'three', 'four'],\n            'three'\n        ) == ['three']\nassert     filter_by_prefix(\n            ['one', 'two', 'three', 'four'],\n            'a'\n        ) == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c'], 'a') == ['a']\nassert     filter_by_prefix(['a', 'b', 'c'], 'b') == ['b']\nassert     filter_by_prefix(['a', 'b', 'c'], 'c') == ['c']\nassert     filter_by_prefix(['a', 'b', 'c'], 'd') == []\nassert     filter_by_prefix(['a', 'b', 'c'], '') == ['a', 'b', 'c']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([], \"a\") == []\nassert     filter_by_prefix([\"a\"], \"a\") == [\"a\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"a\") == [\"a\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"x\") == []\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"a\") == [\"a\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([], '') == []\nassert     filter_by_prefix(['abc', 'def', 'ghi'], '') == ['abc', 'def', 'ghi']\nassert     filter_by_prefix(['abc', 'def', 'ghi', 'jkl'], 'abc') == ['def', 'ghi', 'jkl']\nassert     filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno', 'pqr'], 'abc') == ['def', 'ghi', 'jkl','mno', 'pqr']\nassert     filter_by_prefix(['abc', 'def', 'ghi', 'jkl','mno', 'pqr','sldk', 'wer'], 'abc') == ['def', 'ghi', 'jkl','mno', 'pqr']\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         filter_by_prefix([\"dog\", \"cat\", \"mouse\"], \"mo\")     == [\"mouse\"]\nassert         filter_by_prefix([\"dog\", \"cat\", \"mouse\", \"rat\"], \"cat\")     == [\"cat\"]\nassert         filter_by_prefix([\"dog\", \"cat\", \"mouse\", \"rat\"], \"mouse\")     == [\"mouse\"]\nassert         filter_by_prefix([\"dog\", \"cat\", \"mouse\", \"rat\"], \"rat\")     == [\"rat\"]\nassert         filter_by_prefix([\"dog\", \"cat\", \"mouse\", \"rat\"], \"lazy\")     == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     filter_by_prefix([\"cd\", \"dc\", \"e1\", \"e2\", \"ec\", \"ed\"], \"c\") == [\"cd\", \"e1\", \"e2\", \"ec\", \"ed\"]\nassert     filter_by_prefix([\"cd\", \"dc\", \"e1\", \"e2\", \"ec\", \"ed\"], \"e\") == [\"e1\", \"e2\", \"ec\", \"ed\"]\nassert     filter_by_prefix([\"cd\", \"dc\", \"e1\", \"e2\", \"ec\", \"ed\"], \"a\") == []\nassert     filter_by_prefix([], \"cd\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [ 'a', 'ab', 'abc', 'abcde' ] ==     filter_by_prefix( [ 'a', 'ab', 'abc', 'abcde' ], 'a' )\nassert     [ 'ab', 'abc', 'abcde' ] ==     filter_by_prefix( [ 'a', 'ab', 'abc', 'abcde' ], 'ab' )\nassert     [ 'abc', 'abcde' ] ==     filter_by_prefix( [ 'a', 'ab', 'abc', 'abcde' ], 'abc' )\nassert     [ 'abcde' ] ==     filter_by_prefix( [ 'a', 'ab', 'abc', 'abcde' ], 'abcde' )\nassert     [] ==     filter_by_prefix( [ 'a', 'ab', 'abc', 'abcde' ], 'bc' )\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([], 'abc') == []\nassert     filter_by_prefix([], 'abc', 'abc') == []\nassert     filter_by_prefix([], 'abc', 'def') == []\nassert     filter_by_prefix([], 'abc', 'def', 'abc') == []\nassert     filter_by_prefix(['abc'], 'abc') == ['abc']\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_positive([-2, -1, 2, 3, 4, 5, 6, -7, 8, -9])    == [2, 3, 4, 5, 6, 8, 9]\nassert     get_positive([])    == []\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_positive([1,2,-3]) == [1,2]\nassert get_positive([1,-2,-3]) == [1,-2,-3]\nassert get_positive([-1,-2,-3]) == [-1,-2,-3]\nassert get_positive([0,-2,-3]) == []\nassert get_positive([1,-1,-3]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([0]) == []\nassert     get_positive([1]) == [1]\nassert     get_positive([-1,0,1]) == [1]\nassert     get_positive([-1,0,1,-2]) == [1,-2]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_positive([1, 2, 3, 4, -5, -6, 7, -8, 9]) == [1, 2, 3, 4, 7, 9]\nassert     get_positive([1, -2, 3, 4, -5, -6, 7, -8, 9]) == [1, 3, 4, 7, 9]\nassert     get_positive([-1, -2, 3, 4, -5, -6, 7, -8, 9]) == [-1, -2, 3, 4, 7, 9]\n\n\ndef main():\n    # Print the sorted list\n    print(get_positive([-1, -2, 3, 4, -5, -6, 7, -8, 9]))\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_positive([-1, -2, -3, -4]) == [-1, -2, -4]\nassert     get_positive([-1, 2, -3, 4]) == [-1, 2, 4]\nassert     get_positive([-1, -2, -3, -4, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4]\nassert     get_positive([-1, 2, -3, -4, 0, 1, 2, 3, 4, 5]) == [-1, 2, 3, 4, 5]\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_positive(['a', -1, 2, -3, 4]) == [2, 4]\nassert     get_positive([]) == []\nassert     get_positive(['a', -1, 2, '-3', 4]) == [2, 4]\nassert     get_positive(['a', 1, 2, '3', '-4']) == [2, 4]\nassert     get_positive(['a', 1, 2, 3, 4, 5]) == [2, 4]\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [i for i in get_positive([-1, 1, -2, 3])] == [1, 3]\nassert     [i for i in get_positive([1, -1, -2, 3])] == [1, 3]\nassert     [i for i in get_positive([1, -1, -2, 3, -4])] == [1, 3, -4]\nassert     [i for i in get_positive([1, 2, 3, -4])] == [1, 2, 3, -4]\nassert     [i for i in get_positive([-1, -2, -3, -4])] == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_positive([1,-2,3,-4]) == [1,3]\nassert     get_positive([-1,-2,3,-4]) == [3]\nassert     get_positive([1,2,3,-4]) == []\nassert     get_positive([1,-2,-3,-4]) == [-3,-4]\nassert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_positive([5, -5, 2, 3, -4, 6, -7]) == [5, 2, 3]\nassert     get_positive([]) == []\nassert     get_positive([-5, -3, -1, 0, 1, 3, 5]) == [1, 3, 5]\nassert     get_positive([-5, -3, -1, 0, 1, 3, -6]) == [1, 3]\nassert     get_positive([-5, -3, -1, 0, 1, -3, 6]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_positive([2, 3, -2, -5, -1])    == [-2, -5]\nassert     get_positive([])                    == []\nassert     get_positive([-5, -2, -1])            == [-5, -2, -1]\nassert     get_positive([0, 0, 0, 0])            == [0, 0, 0, 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_prime(5) is False\nassert     is_prime(7) is True\nassert     is_prime(0) is False\nassert     is_prime(1) is False\nassert     is_prime(4) is False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(7) == True\nassert     is_prime(4) == False\nassert     is_prime(1) == False\n\ndef gcd(a, b):\n    \"\"\"Compute the greatest common divisor of a and b.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_prime(11) == True\nassert     is_prime(13) == True\nassert     is_prime(17) == True\nassert     is_prime(19) == True\nassert     is_prime(21) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(10) == False\n\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_prime(4) == False\nassert     is_prime(6) == False\nassert     is_prime(7) == True\nassert     is_prime(8) == False\nassert     is_prime(10) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_prime(13) == True\nassert is_prime(12) == False\nassert is_prime(3) == True\nassert is_prime(11) == True\nassert is_prime(2) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_prime(3)\nassert not is_prime(4)\nassert is_prime(5)\nassert not is_prime(9)\nassert not is_prime(10)\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(5) == True\nassert     is_prime(7) == True\nassert     is_prime(11) == True\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef test():\n    xs = [3, 0, 1, 2, 0]\n    assert(poly(xs, 3) == -7)\n\n    xs = [3, 0, 1, 2, 0, 1]\n    assert(poly(xs, 3) == -4)\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_zero([1, 2, 3, 4, 5]) == 1\nassert     find_zero([-2, 0, 4, 5, 6]) == -2\nassert     find_zero([-1, 0, 1, 2, 3, 4]) == -1\nassert     find_zero([1, 2, 3, 4, 5, 6, 7]) == None\nassert     find_zero([1, 2, 3, 4, 5, 6, 7, 0]) == None\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_zero([0, 1, 0, -2, 3, 1]) == 1.0\nassert     find_zero([1, -1, 0, 1, -2, 1, 0, 1]) == -0.5\nassert     find_zero([1, -2, -3, 4, 5, 6, 7, 8]) == 0.0\nassert     find_zero([0, -1, 0, 1, 0, -2, 1, 0, 1]) == -1.0\n\n\ndef find_linear(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_linear find x such that poly(x) = 0.\n    find_linear returns only one point, even if there are many.\n    Moreover, find_linear only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     poly([1, 1, 0, 0, 0, 0], 1) == 0\nassert     poly([1, 1, 0, 0, 0, 0], 0) == 0\nassert     poly([1, 1, 0, 0, 0, 0], -1) == 0\nassert     poly([1, 1, 0, 0, 0, 0], 1.5) == 0\nassert     poly([1, 1, 0, 0, 0, 0], -1.5) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     poly([1, 1, 0, -3], 2) == -3\nassert     poly([1, 1, 0, 3], 2) == 3\nassert     poly([1, -2, 3], 2) == -3\nassert     poly([1, 0, -3], 2) == -3\nassert     poly([0, 1, 0, -3], 2) == -3\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     poly([1, 0, -1], 4) == 0\nassert     poly([1, 0, 1, 2, -5], 4) == 0\nassert     poly([1, 2, -5, 4, 5, -9], 4) == 0\nassert     poly([1, 2, -5, 4, 5, -9, 3], 4) == 0\nassert     poly([1, 2, -5, 4, 5, -9, 3, 2], 4) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef line(a: float, b: float):\n    \"\"\"\n    Given line of the form y = a * x + b, return two lists of coefficients [a, b]\n    \"\"\"\n    return [a, b]\n\n\ndef line_through_points(xs: list, ys: list):\n    \"\"\"\n    Given two lists of x and y values,\n    return two lists of coefficients a and b such that line(a, b) = (x, y) for all (x, y) in zip(xs, ys).\n    \"\"\"\n    return [sum([xs[i] * ys[i] for i in range(len(xs))]) / sum([xs[i] ** 2 for i in range(len(xs))]),\n            sum([xs[i] * ys[i] for i in range(len(xs))]) / sum([ys[i] ** 2 for i in range(len(xs))])]\n\n\ndef distance(xs: list, ys: list, a: float, b: float):\n    \"\"\"\n    Given a point (a, b), return the distance of the point to the line through (a, b)\n    \"\"\"\n    return abs(poly(xs, a) - poly(ys, b))\n\n\ndef distance_sq(xs: list, ys: list, a: float, b: float):\n    \"\"\"\n    Given a point (a, b), return the distance of the point to the line through (a, b)\n    \"\"\"\n    return abs(poly(xs, a) - poly(ys, b)) ** 2\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     poly([2, 1, 3, 1, 1], 0) == 0\nassert     poly([-2, 0, 1, -1], 0) == 0\nassert     poly([3, 2, 3, 2, 1], 0) == 0\nassert     poly([-3, -2, 3, 2, 1], 0) == 0\nassert     poly([-3, -2, 0, 2, 1], 0) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     poly([1, 2, 3], 1) == -1\nassert     poly([1, 2, 3], 0) == 0\nassert     poly([1, 2, 3], 3) == 3\nassert     poly([1, 2, 3], 4) == 0\nassert     poly([1, 2, 3], 5) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     poly([3, -2, 0, 1, 2], -3) == -2\nassert     poly([-1, -1], 1) == -1\nassert     poly([1, -1, -1], -1) == -1\nassert     poly([-2, -3, -4, -5], -10) == -2\nassert     poly([-1, -1], 1) == -1\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_third(['a','b','c','d','e']) == ['a','b','d','e']\nassert     sort_third(['f','g','c','d','e']) == ['c','d','f','e','g']\nassert     sort_third(['a','b','c','d','e']) == ['a','b','c','d','e']\n\ndef sort_last(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by two, while its values at the indicies that are divisible by two are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_third(['a','b','c','d','e'])    ==    ['b', 'c', 'd', 'e', 'a']\nassert     sort_third(['c','b','a','d','e'])    ==    ['a', 'b', 'c', 'd', 'e']\nassert     sort_third(['e','d','c','a','b'])    ==    ['c', 'd', 'a', 'b', 'e']\nassert     sort_third(['e','c','d','a','b'])    ==    ['a', 'b', 'c', 'd', 'e']\nassert     sort_third(['b','c','a','d','e'])    ==    ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_third([5, 3, 2, 6, 8, 1, 4, 7]) == [5, 1, 4, 6, 3, 2, 7, 8], \"Incorrect\"\nassert     sort_third([]) == [], \"Incorrect\"\nassert     sort_third([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1], \"Incorrect\"\nassert     sort_third([1, 3, 1, 2, 3]) == [1, 1, 2, 3, 3], \"Incorrect\"\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [1,2,3] == sort_third([1, 3, 2])\nassert     [2, 3, 1] == sort_third([3, 2, 1])\nassert     [2, 1, 3] == sort_third([3, 1, 2])\nassert     [3, 2, 1] == sort_third([3, 2, 1])\nassert     [1, 2, 3] == sort_third([1, 3, 2])\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 4, 5], 'Test 1 failed'\nassert     sort_third([1, 3, 2, 4, 5]) == [1, 3, 2, 4, 5], 'Test 2 failed'\nassert     sort_third([5, 3, 1, 2, 4]) == [1, 2, 3, 4, 5], 'Test 3 failed'\nassert     sort_third([]) == [], 'Test 4 failed'\nassert     sort_third([1]) == [1], 'Test 5 failed'\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_third([9,3,7,2,5,4,6,1,8]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_third([9,3,2,7,5,4,6,1,8]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_third([9,3,2,7,5,4,6,1,8,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_third([2,4,5,5,5,6,6,7,7,8]) == [2,4,5,5,5,6,6,7,7,8]\nassert     sort_third([2,5,5,5,5,6,7,8,9,9]) == [2,5,5,5,5,6,7,8,9,9]\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_third(['1', '2', '3', '4', '5', '6', '7', '8', '9']) == ['1', '3', '5', '7', '9']\nassert     sort_third(['2', '4', '6', '8', '10', '3', '5', '7', '9']) == ['2', '4', '5', '6', '7', '8', '10', '9']\nassert     sort_third(['5', '3', '2', '4', '7', '6', '9', '1', '8']) == ['2', '3', '5', '6', '7', '8', '9', '1', '4']\n\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (sort_third([1, 3, 4, 7, 0, 9, 0, 10, -1]) == \n           [-1, 0, 0, 1, 3, 4, 7, 9, 10])\nassert (sort_third([0, -1, -3, -4, -7, -9, -10]) == \n       [-10, -7, -4, -3, -1, 0, 0])\nassert (sort_third([1, 4, 7, 10, 2, 5]) == \n       [2, 5, 1, 4, 7, 10])\nassert (sort_third([4, 3, 1, 9, 10, 7, 8, 5, 6]) ==\n       [4, 3, 5, 1, 6, 7, 8, 9, 10])\nassert (sort_third([3, 3, 3, 3, 3, 3]) ==\n       [3, 3, 3, 3, 3, 3])\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (sort_third([1, 3, 2, 4]) == [1, 3, 2, 4])\nassert     (sort_third([-1, 3, 2, 4]) == [-1, 2, 3, 4])\nassert     (sort_third([-1, -3, 2, 4]) == [-1, -3, 2, 4])\nassert     (sort_third([1, 3, 2, 4, 5, 6]) == [1, 3, 2, 4, 5, 6])\nassert     (sort_third([1, 3, 2, 4, 5, 6, 7]) == [1, 3, 2, 4, 5, 6, 7])\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_third([1,5,3,4,2,6,8,7,9]) == [1,3,4,2,5,6,7,8,9]\nassert     sort_third([]) == []\nassert     sort_third([1]) == [1]\nassert     sort_third([2,1,3,5,7,9]) == [2,1,3,5,7,9]\nassert     sort_third([5,3,1,7,9,2]) == [1,3,5,7,9,2]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [0] == unique([0])\nassert     [0, 1, 2] == unique([0, 1, 2])\nassert     [0, 1, 2, 3] == unique([0, 1, 2, 3])\nassert     [0, 1, 2, 3, 5, 6] == unique([0, 1, 2, 3, 5, 6])\nassert     [1, 2, 3, 4, 5, 6] == unique([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique([]) == []\nassert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 3, 4, 1]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3, 4, 2]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3, 4, 2, 2]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         unique([1, 2, 3]) == [1, 2, 3]\nassert         unique([1, 2, 2, 3]) == [1, 2, 3]\nassert         unique([1, 2, 3, 3]) == [1, 2, 3]\nassert         unique([1, 2, 3, 1]) == [1, 2, 3, 1]\nassert         unique([1, 2, 3, 0, 3, 3]) == [0, 1, 2, 3, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique([1,2,1,3,3,4]) == [1,2,3,4]\nassert     unique([1,2,3,3,3,4]) == [1,2,3,4]\nassert     unique([]) == []\nassert     unique([\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"d\",\"d\"]) == [\"a\",\"b\",\"c\",\"d\"]\nassert     unique([\"a\",\"b\",\"a\",\"b\",\"c\",\"c\",\"c\",\"d\",\"d\"]) == [\"a\",\"b\",\"c\",\"d\"]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique([1,1,2,2,3,3,4]) == [1,2,3,4]\nassert     unique([1,2,1,2,3,3,4]) == [1,2,3,4]\nassert     unique([1,2,3,2,1,2,3]) == [1,2,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique([1,2,3,2,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,3,2,4,5,2,5,7]) == [1,2,3,4,5,7]\nassert     unique([1,2,3,2,4,5,2,5,7,1,1,3,3,1,2]) == [1,2,3,4,5,7]\nassert     unique(['a','b','a','b','a']) == ['a','b']\nassert     unique(['a','b','a','c']) == ['a','b','c']\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique([1,1,2,3]) == [1,2,3]\nassert     unique([1,1,2,2,3]) == [1,2,3]\nassert     unique([1,2,3,1,2,3]) == [1,2,3]\nassert     unique([1,1,1,1,2,3]) == [1,2,3]\nassert     unique([1,1,1,2,2,3]) == [1,2,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 1, 2, 3, 3]) == [1, 2, 3]\nassert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1, 1, 2, 3, 3]) == [1, 2, 3]"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     unique(['a', 'a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\nassert     unique(['a', 'b', 'a', 'a']) == ['a', 'b']\nassert     unique([]) == []\nassert     unique([1, 2, 1, 3, 4, 3, 2, 1]) == [1, 2, 3, 4]\n\ndef distinct(s: str) -> list:\n    \"\"\"Return the distinct characters in a string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique([1, 2, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3, 3, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3, 3, 3]) == [1, 2, 3]\nassert     unique([1, 2, 3, 3, 3, 2, 1]) == [1, 2, 3]\nassert     unique([1, 2, 3, 3, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert max_element([1, 2, 3, 4, -5]) == 4\nassert max_element([1, 2, 3, -4, -5]) == 3\nassert max_element([0, 0, 0, 0, 0]) == 0\nassert max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([1,2,3,4]) == 4\nassert     max_element([5,6,7,8,9]) == 9\nassert     max_element([]) == None\nassert     max_element([-1,-2,-3]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,4,3,5]) == 5\nassert     max_element([1,2,4,5,3]) == 5\nassert     max_element([1,2,4,5,3,2,1]) == 2\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_element([0]) == 0\nassert     max_element([0,1]) == 1\nassert     max_element([2,1,0]) == 2\nassert     max_element([2,-1,0]) == 2\nassert     max_element([0,-1,2]) == 2\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3,4]) == 4\nassert     max_element([1,3,5,7]) == 7\nassert     max_element([4,1,3,5,7]) == 7\nassert     max_element([1,3,5,7,9]) == 9\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([1, 2, -3, 4]) == 4\nassert     max_element([1, 2, -3, -4]) == 4\nassert     max_element([]) == None\nassert     max_element([5, 4, -3, -4]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert max_element([-1, 0, 9]) == 9\nassert max_element([-1, 9, 9]) == 9\nassert max_element([9, -1, 9]) == 9\nassert max_element([9, 9, -1]) == 9\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_element([1,2,3,4]) == 4\nassert     max_element([5,4,3,2,1]) == 5\nassert     max_element([-1,-2,-3,-4]) == -1\nassert     max_element([]) == None\nassert     max_element([1.5,2.5]) == 2.5\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([3, 2, 1]) == 3\nassert     max_element([1, 1, 1, 1]) == 1\nassert     max_element([1, 1, 1, 1, 1]) == 1\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_element([1,2,3]) == 3\nassert     max_element([1,-2,3]) == 3\nassert     max_element([1,2,-3]) == 2\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fizz_buzz(4) == 2\nassert     fizz_buzz(5) == 2\nassert     fizz_buzz(20) == 4\nassert     fizz_buzz(30) == 4\nassert     fizz_buzz(7) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fizz_buzz(11) == 3\nassert     fizz_buzz(15) == 3\nassert     fizz_buzz(1000) == 8\nassert     fizz_buzz(12) == 0\nassert     fizz_buzz(80) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fizz_buzz(15)    == 4\nassert     fizz_buzz(30)    == 6\nassert     fizz_buzz(45)    == 9\nassert     fizz_buzz(50)    == 12\nassert     fizz_buzz(60)    == 15\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fizz_buzz(100) == 2\nassert     fizz_buzz(1) == 0\nassert     fizz_buzz(10) == 1\nassert     fizz_buzz(30) == 0\nassert     fizz_buzz(31) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fizz_buzz(15) == 5\nassert     fizz_buzz(15) == 5\nassert     fizz_buzz(15) == 5\nassert     fizz_buzz(15) == 5\nassert     fizz_buzz(15) == 5\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (fizz_buzz(15)    ==    7)\nassert     (fizz_buzz(15)     ==    7)\nassert     (fizz_buzz(15)     ==    7)\nassert     (fizz_buzz(15)     ==    7)\nassert     (fizz_buzz(15)     ==    7)\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fizz_buzz(20) == fizz_buzz(100)\nassert fizz_buzz(20) == 22\nassert fizz_buzz(20) == 22\nassert fizz_buzz(100) == 55"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fizz_buzz(15) == 0\nassert     fizz_buzz(100) == 2\nassert     fizz_buzz(1000) == 20\nassert     fizz_buzz(2) == 0\nassert     fizz_buzz(49) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fizz_buzz(10) == 4\nassert     fizz_buzz(100) == 84\nassert     fizz_buzz(1000) == 858\nassert     fizz_buzz(10000) == 9592\nassert     fizz_buzz(1000000) == 10172\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fizz_buzz(100) == 37\nassert     fizz_buzz(10) == 0\nassert     fizz_buzz(30) == 4\nassert     fizz_buzz(15) == 0\nassert     fizz_buzz(33) == 7\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([1,2,3,4]) == [1,2,3,4]\nassert     sort_even([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_even([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_even([7,8,9,10,11,12]) == [7,8,9,10,11,12]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_even([1,3,2,3,4,6]) == [1,2,3,3,4,6]\nassert     sort_even([2,4,1,2,4,3]) == [2,4,2,4,1,3]\nassert     sort_even([0,4,5,2,1]) == [0,2,1,4,5]\nassert     sort_even([]) == []\nassert     sort_even([2]) == [2]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_even([1,2,3,4,5]) == [1,3,5,2,4]\nassert     sort_even([2,4,6,8]) == [2,6,4,8]\nassert     sort_even([]) == []\nassert     sort_even([1,2,3,4,5,6,7]) == [1,3,5,2,4,6,7]\nassert     sort_even([4,2,5,4,1,7,8,9]) == [4,2,5,4,1,7,8,9]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_even([1,3,2,4]) == [1,2,3,4]\nassert sort_even([5,3,2,4,6]) == [2,4,5,6,3]\nassert sort_even([5,3,2,4,6,9,7]) == [2,4,5,6,7,9,3]\nassert sort_even([1,3,2,4,6,9,7]) == [1,2,3,4,6,7,9]\nassert sort_even([]) == []\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_even([4,3,2,1,0]) == [4,3,2,2,1]\nassert     sort_even([4,3,2,0,1]) == [4,2,2,3,1]\nassert     sort_even([0,1,2,3,4]) == [0,2,4,2,1]\nassert     sort_even([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_even([4,5,6,7]) == [4,5,6,7]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_even([4,7,9,2,1,3]) == [4,9,1,2,3,7]\nassert     sort_even([4,2,1,5,8,9,3]) == [4,9,1,2,3,8,5]\nassert     sort_even([2,3,1,4,5]) == [2,3,1,4,5]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_even([2, 1, 2, 10, 4, 3, -10]) == [-10, 2, 2, 3, 4, 1, 10]\nassert     sort_even([]) == []\nassert     sort_even([4, 2, 1, -1, -2]) == [-2, 2, 4, 1, -1]\nassert     sort_even([7, 4, 3, 8, -7, 9]) == [-7, 4, 3, 8, 7, 9]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [5,3,1,4,2]    == sort_even([1,4,5,3,2])\nassert     [1,3,5,2,4]    == sort_even([4,2,5,3,1])\nassert     [2,4,5,3,1]    == sort_even([1,5,4,3,2])\nassert     [1,2,3,4,5]    == sort_even([5,4,3,2,1])\nassert     [] == sort_even([5,4,3,2,1,6])\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_even([2,3,5,8,13,21,34]) == [2, 5, 8, 13, 21, 34, 3]\nassert     sort_even([1,3,5,8,13,21,34]) == [1, 3, 5, 8, 13, 21, 34]\nassert     sort_even([2,3,5,8,13,21,34,45]) == [2, 5, 8, 13, 21, 34, 45, 3]\nassert     sort_even([1,3,5,8,13,21,34,45,49]) == [1, 3, 5, 8, 13, 21, 34, 45, 49]\nassert     sort_even([2,3,5,8,13,21,34,45,49,60]) == [2, 5, 8, 13, 21, 34, 45, 49, 60, 3]\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_even([3,2,3,4]) == [2,2,3,3]\nassert     sort_even([-3,-3,0,3]) == [-3,-3,0,3]\nassert     sort_even([-5,-4,2,5,3,1]) == [-5,-4,2,1,3,5]\nassert     sort_even([]) == []\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_cyclic(\"XYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert     decode_cyclic
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encode_cyclic(\"hello world\") == \"helloworl\"\nassert     decode_cyclic(\"helloworl\") == \"hello world\"\nassert     decode_cyclic(\"codewars\") == \"codedewars\"\nassert     decode_cyclic(\"hello world\") == \"hello world\"\n\n\ndef encode_bigram(s: str):\n    \"\"\"\n    returns encoded string by concatenating pairs of characters in a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decode_cyclic(encode_cyclic(string)) == string\nassert     decode_cyclic(encode_cyclic(string2)) == string2\n\n\n\ndef change_nth(s: str, n: int, c: str):\n    \"\"\"\n    replaces nth character with c in string.\n    \"\"\"\n    # generate new string.\n    n_s = \"\"\n    for i in range(len(s)):\n        if i % n == 0:\n            n_s += c\n        n_s += s[i]\n\n    return n_s\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decode_cyclic(\"aabcccccaaa\") == \"aaabccccc\"\nassert     decode_cyclic(\"aabcccccaaa\") == \"aaabccccc\"\nassert     decode_cyclic(\"abc\") == \"abc\"\nassert     decode_cyclic(\"bac\") == \"abc\"\nassert     decode_cyclic(\"a\") == \"a\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     decode_cyclic(\"rozhwz\") == \"world\"\nassert     decode_cyclic(\"jqwvz\") == \"axe\"\nassert     decode_cyclic(\"aowkz\") == \"delf\"\nassert     decode_cyclic(\"hwrfz\") == \"frodo\"\nassert     decode_cyclic(\"ppetw\") == \"pond\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decode_cyclic(encode_cyclic(\"ABC\")) == \"ABC\"\nassert decode_cyclic(encode_cyclic(\"AABC\")) == \"ABC\"\nassert decode_cyclic(encode_cyclic(\"ABCD\")) == \"ABCD\"\nassert decode_cyclic(encode_cyclic(\"ABCDE\")) == \"ABCDE\"\nassert decode_cyclic(encode_cyclic(\"ABCDEE\")) == \"ABCDEE\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decode_cyclic(\"hijklmno\") == \"abcdefghijklmnop\"\nassert     decode_cyclic(\"abcdefghijklmnop\") == \"hijklmno\"\nassert     decode_cyclic(\"hijklmno\") == \"abcdefghijklmnop\"\nassert     decode_cyclic(\"\") == \"\"\nassert     decode_cyclic(\"hijklmno\") == \"abcdefghijklmnop\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decode_cyclic(\"bababc\") == \"babbab\"\nassert     decode_cyclic(\"abcabc\") == \"abcabc\"\nassert     decode_cyclic(\"abcdab\") == \"abcdab\"\nassert     decode_cyclic(\"abcabcd\") == \"abcabcd\"\nassert     decode_cyclic(\"babbabcd\") == \"babbabcd\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decode_cyclic(\"hijklmno\") == \"hijklmno\"\nassert decode_cyclic(\"nimjvke\") == \"nimjvke\"\nassert decode_cyclic(\"lwvkqnbg\") == \"lwvkqnbg\"\nassert decode_cyclic(\"ztibkvqk\") == \"ztibkvqk\"\nassert decode_cyclic(\"ljrkgfe\") == \"ljrkgfe\"\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decode_cyclic(\"cabcdcd\") == \"cabcdcd\"\nassert     decode_cyclic(\"ccccccddd\") == \"cccccdcd\"\nassert     decode_cyclic(\"cccdddddd\") == \"cccdcdcd\"\nassert     decode_cyclic(\"aaaaaaaa\") == \"aaaaaaaa\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_fib(2) == True\nassert     prime_fib(3) == True\nassert     prime_fib(4) == True\nassert     prime_fib(5) == True\nassert     prime_fib(6) == True\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\nassert     prime_fib(5) == 11\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_fib(1) == 0\nassert     prime_fib(2) == 1\nassert     prime_fib(3) == 1\nassert     prime_fib(4) == 2\nassert     prime_fib(5) == 3\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\nassert     prime_fib(5) == 11\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_fib(5) == 13\nassert     prime_fib(7) == 61\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (prime_fib(11) == 89)\nassert     (prime_fib(8) == 89)\nassert     (prime_fib(13) == 55)\nassert     (prime_fib(22) == 89)\nassert     (prime_fib(37) == 113)\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prime_fib(5) == 19\nassert     prime_fib(6) == 43\nassert     prime_fib(10) == 89\nassert     prime_fib(13) == 233\nassert     prime_fib(20) == 6765\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     prime_fib(1) == 2, \"error #1\"\nassert     prime_fib(2) == 3, \"error #2\"\nassert     prime_fib(3) == 5, \"error #3\"\nassert     prime_fib(4) == 7, \"error #4\"\nassert     prime_fib(5) == 11, \"error #5\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_fib(2) == 2\nassert     prime_fib(3) == 3\nassert     prime_fib(4) == 5\nassert     prime_fib(5) == 5\nassert     prime_fib(6) == 8\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_fib(50)    == 61\nassert     prime_fib(51)    == 67\nassert     prime_fib(52)    == 71\nassert     prime_fib(53)    == 79\nassert     prime_fib(54)    == 89\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert _________ == triples_sum_to_zero([0, -2, 0, 2, 0])\nassert _________ == triples_sum_to_zero([0, 0, 0, 0])\nassert _________ == triples_sum_to_zero([-3, -1, -2, 0, 1, 2])\nassert _________ == triples_sum_to_zero([3, 1, 2, -2, -1, -4])\nassert _________ == triples_sum_to_zero([-3, -1, -2, 0, 1, 2])\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([5, 3, -5, 0, -10]) == False\nassert     triples_sum_to_zero([5, 3, -5, 0, -5]) == True\nassert     triples_sum_to_zero([-5, 3, -5, 0, -5]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0, 0]) == True\nassert     triples_sum_to_zero([]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([]) == True\nassert     triples_sum_to_zero([1, 2, -2, 1, 1, -1]) == True\nassert     triples_sum_to_zero([1, 2, 1, -2, -2, -1]) == False\nassert     triples_sum_to_zero([1, 2, -2, 3, -1]) == False\nassert     triples_sum_to_zero([1, 2, -2, 1, 1, -1, 1, -1, -1, 1]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([1, 2, 3]) is False\nassert     triples_sum_to_zero([-3, -1, -2]) is False\nassert     triples_sum_to_zero([0, 0, 0]) is True\nassert     triples_sum_to_zero([1, 2, 3, -4, -3, -2, 1, 2, -2, -1]) is True\nassert     triples_sum_to_zero([-3, -1, -2, 0, 0, 0, 1, 2, 3]) is True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([0, -3, 2, -5, -4, 8]) is True\nassert     triples_sum_to_zero([0, -3, 2, -5, -4, 8, 2]) is False\nassert     triples_sum_to_zero([]) is False\nassert     triples_sum_to_zero([0]) is False\nassert     triples_sum_to_zero([0, 0, 0, 0]) is True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([1,2,3,4,5]) == True\nassert     triples_sum_to_zero([2,-3,4]) == True\nassert     triples_sum_to_zero([1,-2,4,-5]) == False\nassert     triples_sum_to_zero([1,1,1]) == False\nassert     triples_sum_to_zero([]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([-1,  2,  -3,  1,  2,  -3, -1,  2, -3,  1,  2, -3])         == True\nassert     triples_sum_to_zero([1,  2, -3,  1,  2, -3, -1,  2, -3,  1,  2, -3])         == False\nassert     triples_sum_to_zero([1,  2, -3,  1,  2,  3, -1,  2, -3,  1,  2, -3])         == False\nassert     triples_sum_to_zero([1,  2,  3, -1,  2,  3, -1,  2,  3, -1,  2,  3])         == True\nassert     triples_sum_to_zero([-1,  2,  -3,  1,  2,  -3, -1,  2, -3,  1,  2, -3])     == False\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1]) == False\nassert     triples_sum_to_zero([1, 2]) == False\nassert     triples_sum_to_zero([1, 2, 3]) == False\nassert     triples_sum_to_zero([-1, 2, -3]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([]) == False, \"list is empty\"\nassert     triples_sum_to_zero([0]) == False, \"list has one element\"\nassert     triples_sum_to_zero([-3, 0, 1, 2, -6, -6]) == True, \"negative + negative\"\nassert     triples_sum_to_zero([-2, -4, 0, -4, -1]) == True, \"negative + zero\"\nassert     triples_sum_to_zero([-3, 0, 1, 2, -6, -6]) == False, \"negative + negative\"\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([-7,-2,1,2,3,1])\nassert     triples_sum_to_zero([-1,0,1,2,-1,-4])\nassert     not triples_sum_to_zero([-1,0,1,2,-1,-4])\nassert     triples_sum_to_zero([-4,-2,-2,1,-2,2,2,2])\nassert     not triples_sum_to_zero([-4,-2,-2,1,-2,2,2,3])\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     car_race_collision(5) == 4\nassert car_race_collision(20) == 19\nassert car_race_collision(3) == 3\nassert car_race_collision(50) == 22\nassert car_race_collision(1) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     car_race_collision(3) == 0\nassert     car_race_collision(10) == 2\nassert     car_race_collision(12) == 1\nassert     car_race_collision(20) == 3\nassert     car_race_collision(100) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     car_race_collision(4) == 4\nassert car_race_collision(1) == 0\nassert car_race_collision(3) == 1\nassert car_race_collision(10) == 7\nassert car_race_collision(15) == 14\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     car_race_collision(10) == 5\nassert     car_race_collision(100) == 100\nassert     car_race_collision(1000) == 500\nassert     car_race_collision(10000) == 500000\nassert     car_race_collision(100000) == 500000\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     car_race_collision(2) == 2\nassert     car_race_collision(3) == 3\nassert     car_race_collision(4) == 4\nassert     car_race_collision(5) == 4\nassert     car_race_collision(6) == 5\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(5) == 5\nassert     car_race_collision(10) == 19\nassert     car_race_collision(50) == 936\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\n\ndef find_closest_stars(stars: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given a list of stars, find the k closest stars to a given number.\n    If two stars are equidistant from the given number, then the one with the\n    smaller absolute value is the answer.\n\n    Example:\n    Given [6, -1, 3, 4, 7, 8, 9, 5, 2, 0], k = 5\n    return [6, 6, 6, 6, 6]\n\n    The first five elements are the closest stars to 6.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     car_race_collision(5) == 8\nassert     car_race_collision(10) == 26\nassert     car_race_collision(15) == 10\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         car_race_collision(10) == 0\nassert         car_race_collision(20) == 0\nassert         car_race_collision(30) == 0\nassert         car_race_collision(40) == 1\nassert         car_race_collision(50) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     car_race_collision(10) == 2\nassert car_race_collision(1) == 0\nassert car_race_collision(10) == 0\nassert car_race_collision(15) == 0\nassert car_race_collision(20) == 0\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1, 2]) == [3, 3]\nassert     incr_list([1, 2, 3]) == [4, 4, 4]\nassert     incr_list([1, 2, 3, 4, 5]) == [6, 6, 6, 6, 6]"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [2, 3, 4] == incr_list([2, 3, 4])\nassert     [2, 3, 5] == incr_list([2, 3, 4])\nassert     [2, 4, 6] == incr_list([2, 3])\nassert     [2, 4, 5] == incr_list([2, 4])\nassert     [1, 2, 3] == incr_list([1, 2])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [2,3]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\nassert     incr_list([1,2,3,4,5,6,7,8,9]) == [2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [incr_list([1, 1]) for _ in range(10)] ==     [1, 2] * 10\nassert     [incr_list([2, 2]) for _ in range(10)] ==     [2, 3] * 10\nassert     [incr_list([3, 3]) for _ in range(10)] ==     [3, 4] * 10\nassert     [incr_list([4, 4]) for _ in range(10)] ==     [5, 5] * 10\n\ndef delete_nth(l: list, n: int):\n    \"\"\"Return list with element at index n removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([]) == []\nassert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\nassert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     incr_list(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']\nassert     incr_list(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']\nassert     incr_list(['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']\nassert     incr_list(['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']\nassert     incr_list(['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [3,3]\nassert     incr_list([1,2,3]) == [4,4,4]\nassert     incr_list([1,2,3,4]) == [5,5,5,5]\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     (incr_list([1,2,3,4]) == [2,3,4,5])\nassert     (incr_list([1,2,3,4]) == [3,4,5,6])\nassert     (incr_list([1,2,3,4,5]) == [4,5,6,7,8])\nassert     (incr_list([1]) == [2])\nassert     (incr_list([]) == [])\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     list_incr(10) == [10, 11, 12, 13, 14, 15]\nassert     list_incr(0) == [1, 2, 3, 4, 5, 6]\nassert     list_incr(5) == [5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, -1]) == True\nassert     pairs_sum_to_zero([1, 2, -1, 4, 5]) == False\nassert     pairs_sum_to_zero([-1, 2, 3, 4, 5]) == False\nassert     pairs_sum_to_zero([0, 2, 3, 4, 5]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([]) == False, \"list is empty\"\nassert     pairs_sum_to_zero([1,2,3,4,5]) == False, \"list contains one pair\"\nassert     pairs_sum_to_zero([1,2,3,-1,-4]) == True, \"list contains one pair\"\nassert     pairs_sum_to_zero([1,2,3,-1,4,5,5]) == False, \"list contains two pairs\"\nassert     pairs_sum_to_zero([1,-2,3,4,-5]) == True, \"list contains two pairs\"\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([]) == True\nassert     pairs_sum_to_zero([1,2,3,4,5]) == True\nassert     pairs_sum_to_zero([1,2,-1,3,-2,4,-4]) == True\nassert     pairs_sum_to_zero([1,2,-1,-2,-2,3,3]) == True\nassert     pairs_sum_to_zero([1,-2,3,-4,-5,-6]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1, 3, 7, 5, 2, -4, 8, 10]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, -5, -4, -3, 7, 10, 14, -10]) == False\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1]) == False\nassert     pairs_sum_to_zero([0, 1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([10, 5, 3, 4, 7, 1, 2, 6]) == True\nassert     pairs_sum_to_zero([10, 5, 3, 4, 7, 1, 2, -6]) == False\nassert     pairs_sum_to_zero([0, 1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     pairs_sum_to_zero([0, 1, 2, 3, 4, 5, 6, 7, -8]) == False\nassert     pairs_sum_to_zero([0, 1, 2, 3, 4, 5, 6, -7]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([5,3,1,2,-2,4]) == True\nassert     pairs_sum_to_zero([5,3,1,2,-2,3]) == False\nassert     pairs_sum_to_zero([-2,-2,3,-3,4,1]) == True\nassert     pairs_sum_to_zero([-2,-2,3,-3,4,1]) == False\nassert     pairs_sum_to_zero([0,0,0,0,0,-1,-1]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([-3, 1, 2, 4, 5]) == True\nassert     pairs_sum_to_zero([-3, -2, -1]) == True\nassert     pairs_sum_to_zero([-3, -2, -2, -2]) == False\nassert     pairs_sum_to_zero([-3, -2, 1, 2, 2]) == True\nassert     pairs_sum_to_zero([-3, -2, 1, 2, 3]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([5, 3, -4, 8, 1, -2, 6]) == True\nassert     pairs_sum_to_zero([5, 3, -4, 8, 1, -2, 9]) == False\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([5, -2, -4, -3, 7, 3]) == True\nassert     pairs_sum_to_zero([-1, -1, -2, -3]) == False\nassert     pairs_sum_to_zero([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([1,1,2,-2,3,-3]) == True\nassert     pairs_sum_to_zero([1,1,2,-2,3,-3,1]) == False\nassert     pairs_sum_to_zero([1,1,2,-2,3,-3,-1]) == True\nassert     pairs_sum_to_zero([1,1,2,-2,3,-3,-4,-4,-4,1,2]) == False\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     change_base(4, 10) == '4'\nassert     change_base(4, 2) == '100'\nassert     change_base(4, 16) == '0xa'\n\ndef factorial(n: int):\n    \"\"\"Return n!.\"\"\"\n    pass\n\ndef fibonacci(n: int):\n    \"\"\"Return the nth Fibonacci number.\"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     change_base(7,2) == \"1\"\nassert     change_base(9,2) == \"9\"\nassert     change_base(10,2) == \"A\"\nassert     change_base(10,16) == \"A\"\nassert     change_base(255,16) == \"1F\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     change_base(8, 2) == \"101\"\nassert     change_base(8, 16) == \"10\"\nassert     change_base(25, 2) == \"10101\"\nassert     change_base(25, 8) == \"11100\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     change_base(1, 2) == '1'\nassert     change_base(5, 2) == '101'\nassert     change_base(5, 3) == '3'\nassert     change_base(5, 8) == '10000'\nassert     change_base(5, 16) == '16'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     change_base(1, 2) == '1'\nassert     change_base(10, 2) == 'A'\nassert     change_base(25, 2) == 'A'\nassert     change_base(99, 10) == '99'\nassert     change_base(10, 26) == 'Z'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     change_base(10, 8) == '1010', '10 to 8'\nassert     change_base(10, 2) == '1010', '10 to 2'\nassert     change_base(10, 16) == 'A', '10 to 16'\nassert     change_base(16, 10) == 'A', '16 to 10'\nassert     change_base(10, 16) == 'A', '10 to 16'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     change_base(1, 10)     == '1', \\\n        '1st argument should be a string'\nassert     change_base('1', 10) == '1', \\\n        '1st argument should be a string'\nassert     change_base('1', 1)     == '1', \\\n        '2nd argument should be a positive integer'\nassert     change_base('1', 0)     == '1', \\\n        '2nd argument should be a positive integer'\nassert     change_base('1', 16)    == '1', \\\n        '3rd argument should be a positive integer'\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     change_base(15, 2) == \"1\"\nassert     change_base(15, 8) == \"F\"\nassert     change_base(15, 16) == \"1F\"\nassert     change_base(1234, 2) == \"10001\"\nassert     change_base(1234, 8) == \"1023\"\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     change_base(5, 2) == '101', \"should be '101' for 5 in base 2\"\nassert     change_base(5, 3) == '101', \"should be '101' for 5 in base 3\"\nassert     change_base(5, 16) == 'A', \"should be 'A' for 5 in base 16\"\nassert     change_base(17, 16) == 'A', \"should be 'A' for 17 in base 16\"\nassert     change_base(1, 16) == '0', \"should be '0' for 1 in base 16\"\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (triangle_area(1, 1)    == 1.0)\nassert     (triangle_area(2, 3)    == 3.0)\nassert     (triangle_area(4, 2)    == 8.0)\nassert     (triangle_area(2, 2)    == 4.0)\nassert     (triangle_area(1, 1)    == 0.5)\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert ________ == ________\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(2, 2) == 2, \"Wrong area for a triangle\"\nassert     triangle_area(4, 4) == 8, \"Wrong area for a triangle\"\nassert     triangle_area(10, 8) == 80, \"Wrong area for a triangle\"\nassert     triangle_area(10, 10) == 100, \"Wrong area for a triangle\"\nassert     triangle_area(0, 0) == 0, \"Wrong area for a triangle\"\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(3,4)    == 3*4/2\nassert     triangle_area(4,4)    == 8\nassert     triangle_area(10,12)    == 12/2*10\n\n\n\ndef triangle_perimeter(a, h):\n    \"\"\"Given length of a side and high return perimeter for a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(10, 10) == 50\nassert     triangle_area(3, 4) == 12\nassert     triangle_area(1, 5) == 5\nassert     triangle_area(1, 2) == 1\n\ndef total_area(n, sides):\n    \"\"\"Given number of sides and length of side return total area for a polygon\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(4, 5) == 8.0\nassert     triangle_area(3, 5) == 3.0\nassert     triangle_area(3, 7) == 10.0\nassert     triangle_area(5, 6) == 0.5\nassert     triangle_area(10, 10) == 50.0\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     triangle_area(2, 3)    == 3*sqrt(3)/4\nassert     triangle_area(5, 4)    == 10*sqrt(2)/4\nassert     triangle_area(3, 9)    == 9*sqrt(3)/2\nassert     triangle_area(3, 9)    == 9*sqrt(3)/2\n\ndef triangle_area_2(a, b, h):\n    \"\"\"Return the area of a triangle given the lengths of its sides.\n    \"\"\"\n    return (a+b)*h*sqrt(float(a*b)/(a+b))/2\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\n\ndef right_triangle(a, b):\n    \"\"\"Return true if the arguments form a right triangle.\n    \"\"\"\n    pass\n\n\ndef rectangle_perimeter(a, b):\n    \"\"\"Return perimeter of rectangle.\n    \"\"\"\n    pass\n\n\ndef rectangle_area(a, b):\n    \"\"\"Return area of rectangle.\n    \"\"\"\n    pass\n\n\ndef rhombus_perimeter(a):\n    \"\"\"Return perimeter of rhombus.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(1, 1) == 1\nassert     triangle_area(1, 1.1) == 0.9\nassert     triangle_area(2, 1) == 1\nassert     triangle_area(1, 2) == 0.5\nassert     triangle_area(3, 2) == 1.5\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 1\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib4(4) == 2\nassert     fib4(6) == 5\nassert     fib4(8) == 21\nassert     fib4(10) == 34\nassert     fib4(12) == 55\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert _________(median([1, 2, 3, 4, 5, 6])) == 3\nassert _________(median([1, 2, 3, 4, 5])) == 3\nassert _________(median([1, 2, 3, 4, 5, 6])) == 3\nassert _________(median([1, 2, 3, 4, 5, 6, 7])) == 3.5\nassert _________(median([1, 2, 3, 4, 5, 6, 7, 8])) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 6\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert ________ is None\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert median([1, 2, 3, 4, 5, 6]) == 4\nassert median([]) == None\nassert median([1,2,3,4]) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     median([0.5]) == 0.5\nassert median([0.5, 0.5]) == 0.5\nassert median([-1, 0, 1, 2, 4]) == 2\n\ndef mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     median([1, 2, 3, 4]) == 2.5\nassert     median([1, 2, 3, 4, 5, 6]) == 3\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list l.\n    \"\"\"\n    return sum(l) / len(l)\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     median([2,3,4]) == 3\nassert     median([3,2,4]) == 2\nassert     median([4,3,2]) == 3\nassert     median([3,2,4,5,1]) == 4\nassert     median([3,2,4,5,1,6,7]) == 4.5\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     median([1,2,3,4,5]) == 3\nassert     median([1,2,3,4,5,6]) == 4\nassert     median([2,2,2,3]) == 2\nassert     median([1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1\nassert     median([1]) == 1\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4.5\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_palindrome(\"kayak\") == True\nassert     is_palindrome(\"hello\") == False\nassert     is_palindrome(\"madam\") == True\nassert     is_palindrome(\"racecar\") == True\nassert     is_palindrome(\"was it a cat I saw?\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"Kanakana\") == False\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"abcba\") == True\nassert     is_palindrome(\"ababa\") == True\nassert     is_palindrome(\"abba\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_palindrome('aaaaa') == True, \"True\"\nassert     is_palindrome('aa aa') == True, \"True\"\nassert     is_palindrome('aaa aaa') == True, \"True\"\nassert     is_palindrome('abcba') == True, \"True\"\nassert     is_palindrome('abcbaa') == False, \"False\"\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"kapak\") == False\nassert     is_palindrome(\"Kapak\") == True\nassert     is_palindrome(\"Kapak lu kapak\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"a b\") == True\nassert     is_palindrome(\"a x b\") == True\nassert     is_palindrome(\"x a b\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_palindrome(\"level\") == True\nassert     is_palindrome(\"algorithm\") == False\n\ndef test_is_palindrome():\n    \"\"\"\n    Checks the implementation of is_palindrome\n    \"\"\"\n    assert is_palindrome(\"level\") == True\n    assert is_palindrome(\"algorithm\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"radar\") == True, \"is_palindrome fails\"\nassert     is_palindrome(\"Madam, I'm Adam\") == True, \"is_palindrome fails\"\nassert     is_palindrome(\"Racecar\") == True, \"is_palindrome fails\"\nassert     is_palindrome(\"Able was I ere I saw Elba\") == True, \"is_palindrome fails\"\nassert     is_palindrome(\"Not a palindrome\") == False, \"is_palindrome fails\"\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == False\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"ababa\") == True\nassert     is_palindrome(\"abab\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"Never Odd or Even\") == False\nassert     is_palindrome(\"radar\") == False\nassert     is_palindrome(\"madam\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         is_palindrome(\"a\") == True\nassert         is_palindrome(\"aba\") == True\nassert         is_palindrome(\"aba\") == True\nassert         is_palindrome(\"aaaa\") == True\nassert         is_palindrome(\"abba\") == False\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert iapp.modp(3,5) == 2\nassert iapp.modp(3,7) == 5\nassert iapp.modp(3,13) == 11\nassert iapp.modp(3,26) == 17\nassert iapp.modp(3,31) == 7\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef ncr(n: int, r: int):\n    \"\"\"Return n choose r (fast!).\n    \"\"\"\n    pass\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the modular inverse of n modulo p.\n    \"\"\"\n    pass\n\ndef euler_totient(n: int, p: int):\n    \"\"\"Return the euler totient of n (euler phi).\n    \"\"\"\n    pass\n\ndef factor(n: int, p: int):\n    \"\"\"Return the factorization of n (small primes decomposition).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert _____ == modp(_____, _____)"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef intp(n: int, p: int):\n    \"\"\"Return 2^n modulo p.\n    \"\"\"\n    pass\n\ndef mult(a: int, b: int, p: int):\n    \"\"\"Return a*b modulo p.\n    \"\"\"\n    pass\n\ndef inverse(a: int, p: int):\n    \"\"\"Return a^(-1) modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ~~ == -1\nassert modp(0, 1) == 1\nassert modp(1, 2) == 1\nassert modp(2, 2) == 2\nassert modp(3, 2) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     modp(0, 11) == 1\nassert modp(1, 11) == 11\nassert modp(2, 11) == 5\nassert modp(3, 11) == 9\nassert modp(4, 11) == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     modp(2, 3) == 1\nassert     modp(3, 3) == 0\nassert     modp(1, 3) == 1\nassert     modp(2, 3) == 1\nassert     modp(3, 3) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     modp(10, 1234567890123456789) == 1234567890123456789\nassert     modp(7, 1234567890123456789) == 1234567890123456789\nassert     modp(12, 1234567890123456789) == 1234567890123456789\n\ndef modinv(n: int, p: int):\n    \"\"\"Return the inverse of n modulo p.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"\nassert     decode_shift(encode_shift(\"def\")) == \"def\"\nassert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"xyz\")) == \"xyz\"\nassert     decode_shift(encode_shift(\"xyz123\")) == \"xyz123\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encode_shift(\"a\") == \"b\"\nassert     encode_shift(\"b\") == \"c\"\nassert     encode_shift(\"c\") == \"d\"\nassert     encode_shift(\"d\") == \"e\"\nassert     encode_shift(\"e\") == \"f\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decode_shift(\"dgkirjrfbvcvzdg\") == \"this is a test\"\nassert     decode_shift(\"ahxzfqwcaypxyxrlqbm\") == \"testing, testing, testing\"\nassert     decode_shift(\"hxbnkjhdfgcrjxmfvz\") == \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\nassert     decode_shift(\"gjhfhxlzvxkvxbfvxhxm\") == \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\nassert     decode_shift(\"bqwefqwbrqoqwqfqw\") == \"a b c d e f g h i j k l m n o p q r s t u v w x y z\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode_shift(\"zebra\") == \"ylbab\"\nassert     encode_shift(\"horse\") == \"azhdh\"\nassert     encode_shift(\"pneumonoultramicroscopicsilicovolcanoconiosis\") == \"xygzucrzxlqnspbkcobqaufhjgfzvjf\"\nassert     encode_shift(\"crabtree\") == \"atpwetpzubgvofc\"\nassert     encode_shift(\"aardvark\") == \"dcqlbfpibmzqm\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef decode_affine(s: str):\n    \"\"\"\n    takes as input string encoded with encode_affine function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encode_shift(\"Hello\") == \"Mjqqt\"\nassert     encode_shift(\"Mjqqt\") == \"Hello\"\nassert     encode_shift(\"H3ll0\") == \"M3xp5\"\nassert     encode_shift(\"M3xp5\") == \"H3ll0\"\nassert     encode_shift(\"3xp5\") == \"H3ll0\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     \"stuvwx\" == decode_shift(encode_shift(\"hello\"))\nassert     \"abcdef\" == decode_shift(encode_shift(\"abcdef\"))\nassert     \"stuvwx\" == decode_shift(encode_shift(\"stuvwx\"))\nassert     \"abcdef\" == decode_shift(encode_shift(\"abcdef\"))\n\n\ndef encode_ROT13(s: str):\n    \"\"\"\n    takes as input string and returns encoded string by adding 13 to every character.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode_shift(\"Hello\") == \"Khoor\"\nassert     encode_shift(\"Hello\") == \"Troll\"\nassert     encode_shift(\"Hello\") == \"Khoor\"\nassert     encode_shift(\"Hello\") == \"Troll\"\nassert     encode_shift(\"Hello\") == \"Khoor\"\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         encode_shift(\"Hello World\") == 'Khoor Zruog'\nassert         decode_shift(\"Khoor Zruog\") == 'Hello World'\nassert         encode_shift(\"My name is John. I am 26 years old.\") == 'Ljwm Wjyqy'\nassert         decode_shift(\"Ljwm Wjyqy\") == 'My name is John. I am 26 years old.'\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"\nassert     decode_shift(encode_shift(\"aaaaa\")) == \"aaaaa\"\nassert     decode_shift(encode_shift(\"abcd\")) == \"abcd\"\nassert     decode_shift(encode_shift(\"pqr\")) == \"pqr\"\nassert     decode_shift(encode_shift(\"dasdasd\")) == \"dasdasd\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"python\") == \"thn\"\nassert     remove_vowels(\"hi\") == \"i\"\nassert     remove_vowels(\"a\") == \"\"\nassert     remove_vowels(\"xyz\") == \"xyz\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     remove_vowels('') == ''\nassert     remove_vowels('a') == 'a'\nassert     remove_vowels('b') == 'b'\nassert     remove_vowels('f') == 'f'\nassert     remove_vowels('br') == 'bf'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"yoda\") == \"od\"\nassert     remove_vowels(\"joe\") == \"oe\"\nassert     remove_vowels(\"abba\") == \"\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"hello\") == \"hll\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     remove_vowels('Python') == 'Thon'\nassert remove_vowels('welcome') == 'lww'\nassert remove_vowels('ruoyl') == 'ol'\nassert remove_vowels('abcd') == 'bcd'\nassert remove_vowels('qwerty') == 'qwert'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"Data Science\") == \"DsT\"\nassert     remove_vowels(\"Algorithm\") == \"Alg\"\nassert     remove_vowels(\"Python\") == \"\"\nassert     remove_vowels(\"\") == \"\"\n\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     remove_vowels('howl are yuo juan, anu and iusi you? how are you?') == 'hous are yuo juan, anu and iusi how are you?'\nassert     remove_vowels('how are you?') == 'hous are you?'\nassert     remove_vowels('How are you?') == 'hous are you?'\nassert     remove_vowels('a') == 'a'\nassert     remove_vowels('Apple') == 'appl'\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (remove_vowels('dashell') =='sh')\nassert     (remove_vowels('dashell') =='sh')\nassert     (remove_vowels('dashell') =='sh')\nassert     (remove_vowels('dashell') =='sh')\nassert     (remove_vowels('hello') == 'ell')\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     remove_vowels('Jabbs') == 'Jbbs'\nassert     remove_vowels('Trap!') == 'Tp!'\nassert     remove_vowels('Puzzle') == 'Pux'\nassert     remove_vowels('Heeelllloooooo') == 'Heeelllloooooo'\n\n\ndef count_consonants(text):\n    \"\"\"\n    count_consonants is a function that takes string and returns number of consonants.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     remove_vowels('apple') == 'ppl',    'incorrect'\nassert     remove_vowels('boat') == 'b',    'incorrect'\nassert     remove_vowels('a') == '',     'incorrect'\nassert     remove_vowels('x') == 'x',    'incorrect'\nassert     remove_vowels('y') == 'y',    'incorrect'\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 3) == True\nassert     below_threshold([1, 2, 3, 4, 5], 0) == False\nassert     below_threshold([1, 2, 3, 4, 5], 5) == False\nassert     below_threshold([1, 2, 3, 4, 5], 4) == True\nassert     below_threshold([1, 2, 3, 4, 5], 1) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 3)\nassert     not below_threshold([1, 2, 3, 4, 5], 5)\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 3) == True\nassert     below_threshold([1, 2, 3, 4, 5], 1) == False\n\ndef mode(l: list):\n    \"\"\"Returns the mode of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     below_threshold([0], 0) == True\nassert     below_threshold([-1, 1, 0], 0) == False\nassert     below_threshold([1, -2, 3, 4], 0) == True\nassert     below_threshold([-2, -4, -5], -4) == False\nassert     below_threshold([1, 2, 3, 4], 3) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     below_threshold([4,2,2,5,9], 1) == False\nassert     below_threshold([4,2,2,5,9], 2) == True\nassert     below_threshold([4,2,2,5,9], 3) == True\nassert     below_threshold([4,2,2,5,9], 4) == False\nassert     below_threshold([4,2,2,5,9], 5) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     below_threshold([1,2,3], 0) == True\nassert     below_threshold([1,2,3], 1) == False\nassert     below_threshold([1,2,3], 2) == False\nassert     below_threshold([1,2,3], 3) == True\nassert     below_threshold([1,2,3], 4) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     below_threshold([], 1) == True\nassert     below_threshold([3, 4, 1, 1, 5], 3) == True\nassert     below_threshold([3, 4, 1, 1, 5], 4) == False\nassert     below_threshold([3, 4, 1, 1, 5], 5) == True\nassert     below_threshold([3, 4, 1, 1, 5], 6) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     below_threshold([], 1) == True\nassert     below_threshold([], 10) == False\nassert     below_threshold([-1], 10) == False\nassert     below_threshold([1, 2, 3, 4], 10) == False\nassert     below_threshold([10, 9, 8, 7], 10) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     below_threshold([], 0) is True\nassert     below_threshold([0], 0) is True\nassert     below_threshold([1], 0) is False\nassert     below_threshold([-1], 0) is False\nassert     below_threshold([0.1], 0) is False\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     below_threshold([], 4) == True\nassert     below_threshold([1, 2, 3], 4) == False\nassert     below_threshold([1, 2, 3], 2) == True\nassert     below_threshold([-1, -2, -3], -4) == True\nassert     below_threshold([1, 1, 1], 3) == True\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add(1, 2) == 3\nassert add(0, 0) == 0\nassert add(-1, -1) == -2\nassert add(1, 1) == 2"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef sub(x: int, y: int):\n    \"\"\"Subtract y from x\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add(1, 2) == 3\nassert     add(10, 19) == 29\nassert     add(-1, -2) == -3\nassert     add(0, 0) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add(3, 5) == 8\nassert     add(0, 5) == 5\nassert     add(2, -5) == 1\nassert     add(-3, -5) == -8\nassert     add(-2, -5) == -7\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add(3, 5) == 8\nassert     add(2, 5) == 7\nassert     add(3, 5) == 8\nassert     add(2, 5) == 7\nassert     add(5, 2) == 7\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef sub(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add(4, 4) == 8\nassert add(3, 5) == 8\nassert add(0, 5) == 5\nassert add(-1, -2) == -3\nassert add(-1, 1) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add(1, 2) == 3\nassert     add(0, 0) == 0\nassert     add(-1, 2) == 1\nassert     add(0, -10) == -10\nassert     add(-10, 2) == -8\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     same_chars('test', 'test') == True\nassert     same_chars('test', 'te') == False\nassert     same_chars('', '') == True\nassert     same_chars('a', 'b') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     same_chars(\"hello\", \"hell\") == True\nassert     same_chars(\"hello\", \"hellO\") == False\nassert     same_chars(\"hello\", \"hell\") == True\nassert     same_chars(\"hello\", \"helO\") == False\nassert     same_chars(\"hello\", \"hel\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     same_chars(\"\", \"\") == True\nassert     same_chars(\"1\", \"1\") == True\nassert     same_chars(\"a\", \"aa\") == True\nassert     same_chars(\"ab\", \"ba\") == True\nassert     same_chars(\"abc\", \"acb\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     same_chars(\"handshake\", \"shake hands\")\nassert     same_chars(\"subdermatoglyphic\", \"subdermatoglyphics\")\nassert     not same_chars(\"pauldron\", \"forge\")\nassert     not same_chars(\"subdermatoglyphics\", \"subdermatoglyphics\")\nassert     same_chars(\"858\", \"858\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     same_chars(\"skype\", \"skyn\")\nassert     same_chars(\"skype\", \"skyn\")\nassert     same_chars(\"skype\", \"skype\")\nassert     same_chars(\"skype\", \"peyn\")\nassert     same_chars(\"skype\", \"peyn\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     same_chars(\"LeetCode\", \"CODE\")\nassert     same_chars(\"ab\", \"ba\")\nassert     same_chars(\"a\", \"\")\nassert     same_chars(\"a\", \" \")\nassert     same_chars(\"\", \" \")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     same_chars('hello', 'hell')\nassert not same_chars('hello', 'hel')\nassert not same_chars('hello', 'hello')\nassert not same_chars('a', 'aa')\n\ndef palindrome(s: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     same_chars('', '')\nassert     same_chars('a', '')\nassert     same_chars('aa', 'aa')\nassert     same_chars('aa', 'a')\nassert     same_chars('aaa', 'aaa')\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     same_chars(\"this\", \"that\")\nassert     same_chars(\"Python\", \"Java\")\nassert     same_chars(\"ab\", \"bb\")\nassert     not same_chars(\"ab\", \"ac\")\nassert     not same_chars(\"PYTHON\", \"java\")\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     same_chars(\"abcd\", \"aBCd\")\nassert     same_chars(\"abcd\", \"aBCD\")\nassert     not same_chars(\"abcd\", \"aBCdE\")\nassert     not same_chars(\"\", \"\")\nassert     same_chars(\"abcd\", \"\")\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib(0)     == 0\nassert     fib(1)     == 1\nassert     fib(2)     == 1\nassert     fib(3)     == 2\nassert     fib(4)     == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fib(0)     == 0\nassert     fib(1)     == 1\nassert     fib(2)     == 1\nassert     fib(3)     == 2\nassert     fib(4)     == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fib(4) == 3\nassert     fib(5) == 5\nassert     fib(6) == 8\nassert     fib(7) == 13\nassert     fib(8) == 21\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\">\")\nassert     not correct_bracketing(\"<\")\nassert     correct_bracketing(\"\") == True\nassert     not correct_bracketing(\"(\")\nassert     correct_bracketing(\"<>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\")<>\") == True\nassert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<><(>\") == False\nassert     correct_bracketing(\"<>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<<>><\")\nassert not correct_bracketing(\"<<>><>\")\nassert not correct_bracketing(\"<<<>><>\")\nassert not correct_bracketing(\"<<<>><<<<>><<<>\")\nassert     correct_bracketing(\"<<<>><>><>\")"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing('<>') == True\nassert     correct_bracketing('<<><>') == True\nassert     correct_bracketing('<>') == False\nassert     correct_bracketing('<<>') == False\nassert     correct_bracketing('<<<>') == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing('<') == True\nassert correct_bracketing('<><') == False\nassert correct_bracketing('<><>') == False\nassert correct_bracketing('<><><>') == True\n\ndef is_balanced(s: str):\n    \"\"\" s is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing('') == True\nassert     correct_bracketing('<>') == True\nassert     correct_bracketing('<()>') == True\nassert     correct_bracketing('<(>)') == True\nassert     correct_bracketing('<(>)<>') == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"<>(<><)\") == True\nassert     correct_bracketing(\"<)><\") == False\nassert     correct_bracketing(\"<(>)>\") == True\nassert     correct_bracketing(\")<>\") == False\nassert     correct_bracketing(\"<<>)><\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         correct_bracketing('') == True\nassert         correct_bracketing('<') == False\nassert         correct_bracketing('<') == False\nassert         correct_bracketing('<)') == False\nassert         correct_bracketing('<)') == False\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \ncorrect_bracketing(\"<()>\") == True\ncorrect_bracketing(\"<)\") == False\ncorrect_bracketing(\"<()\") == False\n\ndef is_bracket_balanced(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     monotonic([]) is True, \"Failed: monotonic([]) is True\"\nassert     monotonic([1,2,3]) is True, \"Failed: monotonic([1,2,3]) is True\"\nassert     monotonic([3,2,1]) is True, \"Failed: monotonic([3,2,1]) is True\"\nassert     monotonic([3,2,1,0]) is False, \"Failed: monotonic([3,2,1,0]) is False\"\nassert     monotonic([3,-2,1]) is False, \"Failed: monotonic([3,-2,1]) is False\"\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     monotonic([1, 2, 3, 4, 5]) is True\nassert     monotonic([4, 5, 1, 2, 3]) is False\nassert     monotonic([1, 2, 4, 5, 3]) is False\nassert     monotonic([4, 3, 1, 2, 5]) is False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     monotonic([1, 2, 3]) == False\nassert     monotonic([3, 2, 1]) == True\nassert     monotonic([3, 2, 1, 1]) == False\nassert     monotonic([-1, -2, -3]) == True\nassert     monotonic([-3, -2, -1]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     monotonic([1,2,3])\nassert     monotonic([1,1,1])\nassert     monotonic([1,2,3,4,5])\nassert     not monotonic([1,2,3,2,1])\nassert     not monotonic([5,4,3,2,1])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     monotonic([1, 2, 3, 4, 5]) == False\nassert     monotonic([1, 2, 3, 4, 5, 3]) == False\nassert     monotonic([1, 2, 3, 4, 5, 5]) == True\nassert     monotonic([1, 2, 3, 4, 5, 6]) == True\nassert     monotonic([1, 2, 3, 4, 5, 5, 4]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     monotonic([1,2,3,4])\nassert     monotonic([4,3,2,1])\nassert     monotonic([1,1,1,1])\nassert     not monotonic([4,3,2,1])\nassert     not monotonic([1,1,1,2])\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1]) == True\nassert     monotonic([1, 2, 3, 4]) == True\nassert     monotonic([1, 2, 3, 4, 5]) == True\nassert     monotonic([1, 2, 3, 4, 5, 1]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     monotonic(l1)\nassert     not monotonic(l2)\nassert     monotonic(l3)\nassert     not monotonic(l4)\nassert     not monotonic(l5)\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     monotonic(a) == True\nassert     monotonic(b) == True\nassert     monotonic(c) == True\nassert     monotonic(d) == True\nassert     monotonic(e) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     monotonic([1, 2, 3, 4]) == True\nassert     monotonic([3, 2, 1, 4]) == True\nassert     monotonic([4, 3, 2, 1]) == False\nassert     monotonic([3, 2, 1, 4]) == False\nassert     monotonic([1, 2, 3, 4, 3, 2]) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common([1,2,3,3,3,3,4,4,5], [4,5,5,6,6,7,7,7,7]) == [4,5,6,7]\nassert     common([3,3,3,3], [4,4,4,4,4,4,5,5,5]) == [3]\nassert     common([1,2,3], [1,1,1,1,1,2,2,2,2]) == [1,2]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     common(['p','y','t','h','o','n'], ['b','a','n','t','y','r']) == ['a','b','n','t','y']\nassert     common(['p','y','t','h','o','n','a'], ['b','a','n','t','y','r','p']) == ['a','b','n','t','y']\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 3]    == common([1, 3, 3, 2], [2, 1, 3])\nassert     [1, 2, 3]    == common([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     []    == common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     common([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3]\nassert     common([2,3,4,5], [1,2,3,4,5]) == []\nassert     common([1,2,3,4,5], [6,7,8,9,10]) == []\nassert     common([1,2,3,4,5], []) == []\nassert     common([], [1,2,3,4,5]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     common([1, 1, 2, 3, 3], [2, 1, 4, 5]) == [1, 2]\nassert     common([1, 1, 2, 3, 3, 3], [2, 1, 4, 5]) == [1, 2]\nassert     common([1, 1, 2, 3, 3], [2, 1, 4, 5]) == [1, 2, 3]\nassert     common([1, 1, 2, 3, 3, 3, 4, 5], [2, 1, 4, 5]) == [1, 2, 3, 4, 5]\nassert     common([1, 1, 2, 3, 3, 3, 4, 5], [2, 1, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     common([1, 1, 1, 2, 2, 2, 3], [1, 1, 3, 3, 3, 4]) == [1, 1, 2, 3, 3, 4]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 5]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [5]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     common([], [])    == []\nassert     common([1, 2, 3], []) == []\nassert     common([], [1, 2, 3]) == []\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([], [1, 2, 3, 4, 5]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert ids(common([1, 2, 3], [2, 3, 4])) == [2, 3]\nassert ids(common([1, 2, 3], [1, 2, 3, 4])) == [1, 2, 3]\nassert ids(common([1, 2, 3], [1, 2, 3, 4, 5])) == [1, 2, 3]\nassert ids(common([1, 2, 3], [1, 2, 4, 5])) == [1, 2]\nassert ids(common([1, 2, 3], [1, 3, 4, 5])) == [1, 3]\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     common([1,2,3,4,5], [1,2,4,6,7]) == [1,2,4]\nassert     common([1,2,3,4,5], [1,2,6,7,8]) == []\n\ndef intersect(l1: list, l2: list):\n    \"\"\"Return sorted intersection of two lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     common([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5, 6], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [5, 4, 3, 2, 1, 6]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     common([], [5, 4, 3, 2, 1]) == []\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(16) == 2\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(13) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(20) == 5\nassert     largest_prime_factor(15) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     large_prime_factor(1) == 1\nassert     large_prime_factor(2) == 2\nassert     large_prime_factor(4) == 2\nassert     large_prime_factor(5) == 5\nassert     large_prime_factor(6) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(6) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(2**1000) == 2\nassert     largest_prime_factor(39) == 3\nassert     largest_prime_factor(47) == 7\nassert     largest_prime_factor(1) == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(0) == None\nassert     largest_prime_factor(1) == None\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (largest_prime_factor(1) == 1)\nassert     (largest_prime_factor(2) == 2)\nassert     (largest_prime_factor(3) == 3)\nassert     (largest_prime_factor(4) == 2)\nassert     (largest_prime_factor(5) == 5)\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(24) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     7 == largest_prime_factor(7)\nassert     13 == largest_prime_factor(13)\nassert     27 == largest_prime_factor(27)\nassert     29 == largest_prime_factor(29)\nassert     37 == largest_prime_factor(37)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sum_to_n(1) == 1, \"1\"\nassert     sum_to_n(2) == 3, \"2\"\nassert     sum_to_n(5) == 15, \"5\"\nassert     sum_to_n(10) == 55, \"10\"\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_to_n(2) == 1+1\nassert     sum_to_n(3) == 2+1+1\nassert     sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_to_n(10) == 55\nassert     sum_to_n(1) == 1\nassert     sum_to_n(100) == 5050\nassert     sum_to_n(999) == 50505050\n\n\ndef primes(n: int):\n    \"\"\"Generates prime numbers in a range 0 to n-1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     (sum_to_n(2) == 3)\nassert     (sum_to_n(3) == 6)\nassert     (sum_to_n(4) == 10)\nassert     (sum_to_n(5) == 15)\nassert     (sum_to_n(6) == 21)\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 55\nassert     sum_to_n(25) == 385\nassert     sum_to_n(50) == 1215\nassert     sum_to_n(100) == 5050\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert ______________ == sum_to_n(10)\nassert ______________ == sum_to_n(100)\nassert ______________ == sum_to_n(1000)"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_to_n(3)     == 3     # 1+2\nassert     sum_to_n(5)     == 5     # 1+2+3\nassert     sum_to_n(10)     == 55     # 1+2+3+4+5\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\"fibonacci is a function that returns the n-th number in the Fibonacci sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"())(\") == False\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\")()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"(a)\") == True\nassert     correct_bracketing(\"(a()b)\") == True\nassert     correct_bracketing(\"((a)b(c)d)e(f)g\") == True\nassert     correct_bracketing(\"(a)b(c)d)e(f)g\") == True\nassert     correct_bracketing(\")a(b(c)d)e(f)g\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(())\")\nassert     not correct_bracketing(\"((()\")\nassert     not correct_bracketing(\"(()\")\nassert     correct_bracketing(\"()()\")\n\ndef is_correct(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if the bracket sequence is valid and balanced.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()(\") == False\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"(()(\") == False\nassert     correct_bracketing(\")()())\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"((())\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(((\") == False\nassert     correct_bracketing(\"((((((((\") == False\nassert     correct_bracketing(\"()()()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"(())(\") == False\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"((((((\") == True\nassert     correct_bracketing(\"(())\") == False\nassert     correct_bracketing(\"())\") == False\nassert     correct_bracketing(\"))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\")(\")     == True\nassert     correct_bracketing(\"\")     == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"()\")     == False\nassert     correct_bracketing(\"()(())(()())(()())\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     correct_bracketing('((()())()())') == True, 'test case 1 for correct_bracketing'\nassert     correct_bracketing('(()())') == False, 'test case 2 for correct_bracketing'\nassert     correct_bracketing('())') == False, 'test case 3 for correct_bracketing'\nassert     correct_bracketing('((())())') == True, 'test case 4 for correct_bracketing'\n\ndef balanced_brackets(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef partial_derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return partial derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     derivative([1, 2, 3]) == [2, 4, 6]\nassert     derivative([1, 1, 2, 3]) == [2, 3, 4, 6]\nassert     derivative([1, 2, 3, 4, 5]) == [6, 12, 24, 30]\nassert     derivative([1, 2, 3, 4, 5, 6, 7, 8]) == [28, 56, 84, 140]\nassert     derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [90, 240, 720, 2100]\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef test_derivative():\n    # check derivative on the given polynomial\n    pass\n\nif __name__ == '__main__':\n    # polynomial must be in the form:\n    # polynomial = [x^0, x^1,...]\n    polynomial = [2, 1, 3, 4, 5]\n    print(\"Given polynomial is:\", polynomial)\n    print(\"Derivative of the polynomial is:\", derivative(polynomial))\n    test_derivative()"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\ndef interpolate(x: float, xs: list):\n    \"\"\" Interpolate an xs at x.\n     xs[0] + xs[1] * x + xs[2] * x^2 +....\n     xs represent coefficients of a polynomial.\n     x represent value to be interpolated.\n     Return interpolated value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     derivative([2, -3, 5, -10, 7]) == [-3, 11, -10, -7, 0]\nassert     derivative([1, 1, -2, 4]) == [3, -2, 1, 0]\n\ndef integrate(ys: list):\n    \"\"\" ys represent coefficients of a polynomial.\n    ys[0] + ys[1] * y + ys[2] * y^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef second_derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return 2nd derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         fibfib(3) == 2\nassert         fibfib(4) == 3\nassert         fibfib(5) == 5\nassert         fibfib(6) == 8\nassert         fibfib(7) == 13\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     vowels_count(\"my word\") == 5\nassert     vowels_count(\"my\") == 0\nassert     vowels_count(\"my@\") == 1\nassert     vowels_count(\"your\") == 1\nassert     vowels_count(\"your\") == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         vowels_count('a') == 1\nassert         vowels_count('e') == 1\nassert         vowels_count('i') == 1\nassert         vowels_count('o') == 1\nassert         vowels_count('u') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     vowels_count('bubble') == 3\nassert     vowels_count('racecar') == 5\nassert     vowels_count('lark') == 2\nassert     vowels_count('freud') == 4\nassert     vowels_count('paper') == 4\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     vowels_count('apples') == 5\nassert     vowels_count('banana') == 6\nassert     vowels_count('ban') == 2\nassert     vowels_count('a') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     vowels_count('cat') == 2\nassert     vowels_count('pig') == 0\nassert     vowels_count('rhino') == 4\nassert     vowels_count('monkey') == 2\nassert     vowels_count('asdf') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     vowels_count('abcd') == 0\nassert     vowels_count('heel') == 1\nassert     vowels_count('global') == 2\nassert     vowels_count('antidisestablishmentarianism') == 5\nassert     vowels_count('virtual') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     vowels_count('restful') == 4\nassert     vowels_count('restfulp') == 4\nassert     vowels_count('restfulpy') == 5\nassert     vowels_count('a') == 1\nassert     vowels_count('ab') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     vowels_count('hello') == 5\nassert     vowels_count('python') == 11\nassert     vowels_count('a') == 1\nassert     vowels_count('c') == 1\nassert     vowels_count('ab') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     vowels_count('foobar') == 0\nassert     vowels_count('code') == 2\nassert     vowels_count('apples') == 2\nassert     vowels_count('hostess') == 1\nassert     vowels_count('racecar') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         vowels_count(\"hello\") == 5\nassert         vowels_count(\"a\") == 1\nassert         vowels_count(\"aay\") == 2\nassert         vowels_count(\"aardvark\") == 7\nassert         vowels_count(\"zodiac\") == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     circular_shift(12345, 1) == 345123\nassert     circular_shift(12345, 2) == 54321\nassert     circular_shift(12345, 3) == 12345\nassert     circular_shift(12345, 4) == 12345\nassert     circular_shift(12345, 5) == 12345\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     circular_shift(123, -2) == 731\nassert     circular_shift(123, 0) == 123\nassert     circular_shift(123, 1) == 123\nassert     circular_shift(123, 2) == 123\nassert     circular_shift(123, 3) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n\n\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     circular_shift(123, 1) == 124\nassert     circular_shift(123, 2) == 213\nassert     circular_shift(123, 3) == 123\nassert     circular_shift(123, 4) == 312\nassert     circular_shift(123, 5) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     circular_shift(123, -1) == 123\nassert     circular_shift(123, 5) == 123\nassert     circular_shift(123, 12) == 3\nassert     circular_shift(123, 13) == 1\nassert     circular_shift(123, 26) == 123\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n\ndef reverse(x):\n    \"\"\"Reverse the digits of the integer x.\n    If x is 0, return 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     circular_shift(12345, -1) == '54321'\nassert     circular_shift(12345, 0) == '12345'\nassert     circular_shift(12345, 1) == '23456'\nassert     circular_shift(12345, 2) == '34567'\nassert     circular_shift(12345, 3) == '45678'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     circular_shift(123,2) == '321'\nassert     circular_shift(123,3) == '123'\nassert     circular_shift(123,4) == '321'\nassert     circular_shift(123,5) == '123'\nassert     circular_shift(123,6) == '321'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     circular_shift(2345, 1)    ==    '234'\nassert     circular_shift(2345, 2)    ==    '345'\nassert     circular_shift(2345, 3)    ==    '456'\nassert     circular_shift(2345, 4)    ==    '567'\nassert     circular_shift(2345, 5)    ==    '678'\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     circular_shift(123, 1) == 123\nassert     circular_shift(123, 2) == 321\nassert     circular_shift(123, 3) == 123\nassert     circular_shift(123, 4) == 123\nassert     circular_shift(123, 5) == 123\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digitSum('A2D') == 2\nassert     digitSum('A5D2A') == 11\nassert     digitSum('A2D') == 2\nassert     digitSum('A5D2A2D4A') == 21\n\nif __name__ == \"__main__\":\n    print(digitSum(input()))"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digitSum('a1b2c3d4e') == 97 + 98 + 99 + 100\nassert     digitSum('abcd1234567') == 97 + 98 + 99 + 123 + 12345 + 123456 + 1234567\nassert     digitSum('abc123456789') == 97 + 98 + 99 + 123 + 12345 + 123456 + 1234567 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digitSum(\"HELOO\")         == 6\nassert     digitSum(\"OI\")             == 7\nassert     digitSum(\"HELLO\")         == 8\nassert     digitSum(\"\")             == 0\nassert     digitSum(\"H\")             == 8\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digitSum(\"why\") == 5\nassert     digitSum(\"fade\") == 19\nassert     digitSum(\"z\") == 26\nassert     digitSum(\"\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digitSum(\"\") == 0, \"test 1\"\nassert     digitSum(\"A\") == 1, \"test 2\"\nassert     digitSum(\"AA\") == 2, \"test 3\"\nassert     digitSum(\"abc\") == 0, \"test 4\"\nassert     digitSum(\"123\") == 6, \"test 5\"\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     digitSum('pynative') == 7\nassert     digitSum('pynativec') == 17\nassert     digitSum('pynative5') == 19\nassert     digitSum('pynative99') == 99\n\n\ndef repeat(string, n):\n    \"\"\"Task\n    Write a function that takes two strings as input and returns a new string based on the first string repeated n times.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digitSum(\"Hello World\") == 12\nassert     digitSum(\"This is a test\") == 29\nassert     digitSum(\"What is the sum of 1 + 2?\") == 7\nassert     digitSum(\"1,2,3,4,5,6,7,8,9,10\") == 36\nassert     digitSum(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36\") == 138\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digitSum(\"jshkfh\") == 11\nassert     digitSum(\"7h3kfh23\") == 21\nassert     digitSum(\"3h3kfh4\") == 8\nassert     digitSum(\"123\") == 3\nassert     digitSum(\"ab23\") == 1\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     digitSum('hello world') == 11\nassert     digitSum('1-2-3-4-5') == 15\nassert     digitSum('!@#$%^&*()_+') == 20\nassert     digitSum('-13') == 9\nassert     digitSum('-13') == 9\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digitSum(\"Hello World\") == 20\nassert     digitSum(\"Computer Science\") == 20\nassert     digitSum(\"Grace\") == 22\nassert     digitSum(\"Hello\") == 22\nassert     digitSum(\"a1\") == 22\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"oranges,apples,mango\", \"1,1\") == \"mango\"\nassert     fruit_distribution(\"oranges,apples,mango\", \"1,2\") == \"mango\"\nassert     fruit_distribution(\"oranges,apples,mango\", \"1,3\") == \"mango\"\nassert     fruit_distribution(\"oranges,apples,mango\", \"1,4\") == \"mango\"\nassert     fruit_distribution(\"oranges,apples,mango\", \"1,5\") == \"mango\"\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fruit_distribution('1 2 2', 2) == 0\nassert     fruit_distribution('1 2 2', 1) == 1\nassert     fruit_distribution('1 1 1', 1) == 1\nassert     fruit_distribution('1 1 2', 1) == 0\nassert     fruit_distribution('1 1 2', 2) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fruit_distribution(\"1001001001001\",4) == 1\nassert     fruit_distribution(\"1001001001001\",5) == 1\nassert     fruit_distribution(\"1001001001001\",0) == 0\nassert     fruit_distribution(\"1001001001001\",2) == 0\nassert     fruit_distribution(\"1001001001001\",2) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     fruit_distribution(\"2 2\", \"1 1\") == \"1\"\nassert     fruit_distribution(\"2 1\", \"1 1\") == \"1\"\nassert     fruit_distribution(\"1 1\", \"1 1\") == \"0\"\nassert     fruit_distribution(\"1 2\", \"1 1\") == \"0\"\nassert     fruit_distribution(\"1\", \"0\") == \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fruit_distribution('7,3,2,1,2,3,4,5,6,7,8,9',5) == 4\nassert     fruit_distribution('7,3,2,1,2,3,4,5,6,7,8,9',10) == 5\nassert     fruit_distribution('2,4,5,6,9',3) == 0\nassert     fruit_distribution('5,7',3) == 0\nassert     fruit_distribution('5,7,8,9',7) == 3\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"10 11 15\", \n                            \"6 8 5\") == 2\nassert     fruit_distribution(\"5 15 25 25 25 25 25 25 25\", \n                            \"1 1 4 4\") == 2\nassert     fruit_distribution(\"1 10 15 15 15 15 15 15 15\", \n                            \"1 1 2 2 4 4\") == 2\nassert     fruit_distribution(\"1 10 15 15 15 15 15 15 15\", \n                            \"1 1 4 4 4 4\") == 1\nassert     fruit_distribution(\"1 1 2 2 4 4\", \"1 1 4 4\") == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     fruit_distribution(0,0) == 0\nassert     fruit_distribution(10,0) == 0\nassert     fruit_distribution(0,10) == 0\nassert     fruit_distribution(0,0) == 0\nassert     fruit_distribution(1,0) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fruit_distribution(    \"\",     \"\") == 0\nassert     fruit_distribution(    \"1\",     \"1\") == 0\nassert     fruit_distribution(    \"2\",     \"2\") == 0\nassert     fruit_distribution(    \"2\",     \"3\") == 1\nassert     fruit_distribution(    \"3\",     \"2\") == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fruit_distribution('2 3', '3') == '1'\nassert     fruit_distribution('1 2', '3') == '0'\nassert     fruit_distribution('2 3', '4') == '0'\nassert     fruit_distribution('5 3', '6') == '0'\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fruit_distribution(\"12:3\") == 4\nassert     fruit_distribution(\"1:2,3:2,3,3\") == 3\nassert     fruit_distribution(\"2:1,1\") == 0\nassert     fruit_distribution(\"2:1,1:2\") == 1\nassert     fruit_distribution(\"2:1,2:1,3:1,4:1,5:1,6:2,7:1,8:1,9:1,10:1,11:1,12:1\") == 2\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pluck( [5,3,6,2,4,7]) == [3,3]\nassert     pluck( [5,4,6,2,3,7]) == [5,5]\nassert     pluck( []) == []\nassert     pluck([3,4,5]) == [3,3]\nassert     pluck([5,4,3,2]) == [2,3]"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     pluck([1,2,3,4,5]) == [4,2]\nassert     pluck([1,2,3,4,5,6]) == [4,2]\nassert     pluck([1,2,3,4,5,6,7,8,9,10]) == [8,4]\nassert     pluck([1,2,3,4,5,6,7,8,9,10,11,12]) == [10,4]\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     pluck([2, 8, 1, 3, 3, 7, 6, 7, 4]) == [6, 2]\nassert     pluck([2, 8, 1, 3, 3, 7, 6, 7, 4, 0]) == [0, 4]\nassert     pluck([2, 8, 1, 3, 3, 7, 6, 7, 4, 10]) == [7, 3]\nassert     pluck([2, 8, 1, 3, 3, 7, 6, 7, 4, 11]) == [7, 3]\nassert     pluck([2, 8, 1, 3, 3, 7, 6, 7, 4, -1]) == [7, 3]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [ 0, 2 ] == pluck( [ 0, 0, 2, 3, 4, 6, 8, 10 ] )\nassert     [ 10, 8 ] == pluck( [ 10, 10, 8, 6, 3, 4, 3, 1 ] )\nassert     [ 10, 9 ] == pluck( [ 10, 10, 8, 6, 3, 4, 3, 1 ] )\nassert     [ 10, 9, 2 ] == pluck( [ 10, 10, 8, 6, 3, 4, 3, 1 ] )\nassert     [ 10, 9 ] == pluck( [ 10, 10, 8, 6, 3, 4, 3, 1, 1 ] )\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [ [2, 1], [4, 1] ]     == pluck([ 2, 3, 4, 5, 6, 7, 8, 9 ])\nassert     [ [2, 1], [4, 1] ]     == pluck([ 2, 2, 4, 5, 6, 7, 8, 9 ])\nassert     []         == pluck([])\nassert     [ [ 2, 1 ], [ 4, 1 ] ]     == pluck([ 2, 1, 2, 4, 5, 6, 7, 8, 9 ])\nassert     [ [ 1, 1 ], [ 3, 1 ] ]     == pluck([ 1, 1, 2, 3, 4, 5, 6, 7, 8, 9 ])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     pluck([\n                    [1,2,3,4],\n                    [5,6,7,8],\n                    [9,10,11,12],\n                    [13,14,15,16],\n                ]) == [6,2]\nassert     pluck([\n                    [1,2,3,4],\n                    [5,6,7,8],\n                    [9,10,11,12],\n                    [13,14,15,16],\n                ]) == [6,2]\nassert     pluck([\n                    [1,2,3,4],\n                    [5,6,7,8],\n                    [9,10,11,12],\n                    [13,14,15,16],\n                ]) == [6,2]\nassert     pluck([\n                    [1,2,3,4],\n                    [5,6,7,8],\n                    [9,10,11,12],\n                    [13,14,15,16],\n                ]) == [6,2]\nassert     pluck([\n                    [1,2,3,4],\n                    [5,6,7,8],\n                    [9,10,11,12],\n                    [13,14,15,16],\n                ]) == [6,2]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [ 0, 0 ] == pluck([2,0,0])\nassert     [ 1, 0 ] == pluck([2,0,0,1])\nassert     [ 0, 0 ] == pluck([2,0,0,2])\nassert     [ 1, 1 ] == pluck([2,0,0,2,1])\nassert     [ 0, 1 ] == pluck([2,0,1,0])\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     pluck(nodes) == [ 2, 5 ]\nassert     pluck(nodes2) == [ 10 ]\nassert     pluck(nodes3) == [ 8 ]\nassert     pluck(nodes4) == [ 8, 4 ]\nassert     pluck(nodes5) == [ 2 ]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     pluck( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] ) == [10, 3]\nassert     pluck( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] ) == [6, 6]\nassert     pluck( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] ) == [12, 7]\nassert     pluck( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] ) == [8, 8]\nassert     pluck( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] ) == [6, 6]\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [ 1, 0 ] == pluck([ 2, 1, 1, 0, 1 ])\nassert     [ 2, 0 ] == pluck([ 1, 0, 1, 0, 1 ])\nassert     [ 1, 1 ] == pluck([ 2, 1, 1 ])\nassert     [ 1, 0 ] == pluck([ 2, 1, 1, 0 ])\nassert     [] == pluck([])\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([2, 3, 4, 5, 6]) == -1\nassert     search([2, 2, 2, 2, 3]) == 2\nassert     search([1, 1, 1, 1, 1, 1]) == 1\nassert     search([1, 2, 2, 2, 2]) == 2\nassert     search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     search([3,1,5,7,5,4,1,5,3,5]) == 5\nassert     search([1,1,1,1,1,2]) == -1\nassert     search([1,1,1,1,1,1]) == 1\nassert     search([1,1,1,1,1,1,1,1]) == 1\nassert     search([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     search([2,1,2,2,3,4,5,6,7,4,2,4,2,5]) == 3\nassert search([2,1,2,2,3,4,5,6,7,4,2,4,2,5]) == 4\nassert search([1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == -1\nassert search([3,9,7,8,5,7,9]) == -1\nassert search([1,2,3,4,5,6,7,8,9,10]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     search([10, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5]) == 5\nassert     search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1\nassert     search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10\nassert     search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == 10\nassert     search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nprint 'test case 1: PASSED'\n\nassert search([4,1,4,4,4,3,3]) == 4\nassert search([4,3,4,4,4,4]) == -1\nprint 'test case 2: PASSED'\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     search([10, 2, 10, 10, 2, 2, 2, 2, 2, 1]) == 2\nassert     search([0, 1, 1, 0, 0, 1, 1, 0]) == -1\nassert     search([1, 1, 1, 1, 1, 1, 1, 1]) == -1\nassert     search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 15\nassert     search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 16\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \nassert search([1, 1, 2, 3, 4]) == 2\nassert search([1, 1, 2, 3, 4, 1]) == -1\nassert search([1, 2, 2, 2, 3, 4]) == 3\nassert search([1, 2, 2, 2, 3, 4, 1, 2, 3, 4]) == 4\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     search([2, 1, 1, 2, 1, 1, 1, 1, 1, 1]) == -1\nassert     search([2, 2, 2, 2]) == -1\nassert     search([2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 2\nassert     search([2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     search([1, 1, 1, 2, 2]) == 1\nassert     search([1, 1, 3, 3, 3]) == 3\nassert     search([1, 1, 2, 2, 3, 3]) == -1\nassert     search([]) == -1\nassert     search([1, 1, 1, 2, 2, 3, 3, 4]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     search([1,2,2,3,3,3,3,3,4]) == 3\nassert search([1,2,2,3,3,3,3,3,3,4]) == -1\nassert search([1,1,1,1,1,1,1,1,1]) == -1\nassert search([2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]) == 2\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strange_sort_list([1, 10, 2, 3, 8, 9, 4, 5, 7, 6]) == [1, 4, 2, 6, 7, 8, 9, 10, 5, 3]\nassert     strange_sort_list([5, 8, 2, 6, 3, 1, 4, 7, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 10, 9]\nassert     strange_sort_list([3, 8, 4, 2, 6, 1]) == [1, 2, 3, 4, 6, 8]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     strange_sort_list([4, 5, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([3, 1, 5, 4, 2]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([]) == []\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     strange_sort_list([1, 2, 4, 5]) == [1, 5, 2, 4]\nassert     strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([7, 2, 4, 9, 5, 1]) == [1, 2, 4, 5, 7, 9]\n\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([5]) == [5]\nassert     strange_sort_list([0]) == [0]\nassert     strange_sort_list([5, 3, 1, 2]) == [1, 2, 3, 5]\nassert     strange_sort_list([5, 3, 1, 2, 2]) == [1, 2, 2, 3, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [3,4,1,2] == strange_sort_list([3,4,1,2])\nassert     [1,2,3,4] == strange_sort_list([4,3,2,1])\nassert     [4,1,2,3] == strange_sort_list([3,4,1,2])\nassert     [4,1,3,2] == strange_sort_list([4,1,2,3])\nassert     [2,1,4,3] == strange_sort_list([3,2,1,4])\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     strange_sort_list([1,2,3,4,5])    == [5,4,3,2,1]\nassert     strange_sort_list([1,3,2,4,5])    == [5,4,3,2,1]\nassert     strange_sort_list([5,4,3,2,1])    == [5,4,3,2,1]\nassert     strange_sort_list([1,1,1,2,2,3,3,4]) == [4,3,2,1,1,3,3,2]\nassert     strange_sort_list([1,1,1,2,2,3,3,4,4,5]) == [5,4,3,2,1,3,2,4,4,1]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([0]) == [0]\nassert     strange_sort_list([0, 0]) == [0, 0]\nassert     strange_sort_list([5, 3, 1, 2, 4]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([2, 2, 1, 0, 3]) == [0, 1, 2, 2, 3]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     strange_sort_list( [2, 1, 4, 3, 7, 5, 0, 6] ) == [0, 1, 2, 3, 4, 5, 6, 7]\nassert     strange_sort_list( [8, 4, 2, 1, 0, 5, 7, 3, 6] ) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     strange_sort_list( [1, 8, 4, 0, 5, 7, 3, 6, 2] ) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     strange_sort_list( [6, 4, 8, 0, 1, 5, 3, 7, 2] ) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([1]) == [1]\nassert     strange_sort_list([2]) == [2]\nassert     strange_sort_list([3,1,2]) == [1,3,2]\nassert     strange_sort_list([3,2,1]) == [1,2,3]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(3, 4, 5) == 10.0\nassert     triangle_area(1, 1, 1) == 1.0\nassert     triangle_area(2, 2, 2) == 2.0\nassert     triangle_area(2, 2, 3) == 1.5\nassert     triangle_area(2, 3, 2) == 0.5\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     triangle_area(3, 4, 5) == 5.0\nassert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(3, 4, 5) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     triangle_area(3,4,5) == 2.16\nassert     triangle_area(3,5,4) == 2.36\nassert     triangle_area(5,3,4) == 1.25\nassert     triangle_area(10,5,10) == -1\nassert     triangle_area(7,7,7) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     triangle_area(2, 2, 2) == 0.00\nassert     triangle_area(2, 2, 3) == 0.83\nassert     triangle_area(2, 4, 2) == 0.50\nassert     triangle_area(3, 4, 5) == 0.56\nassert     triangle_area(3, 4, 6) == 0.33\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     triangle_area(4, 4, 5) == 0.0\nassert     triangle_area(1, 1, 2) == 0.5\nassert     triangle_area(2, 2, 2) == 1.0\nassert     triangle_area(0, 1, 2) == -1\nassert     triangle_area(0, 2, 1) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     triangle_area(3, 4, 5) == 5.0\nassert     triangle_area(3, 4, 5.0) == 5.0\nassert     triangle_area(5, 4, 3) == 7.5\nassert     triangle_area(5, 4, 3.0) == 7.5\nassert     triangle_area(5, 4.0, 3.0) == 7.5\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     triangle_area(3,4,5) == 7.50\nassert     triangle_area(3,5,4) == 7.50\nassert     triangle_area(3,4,6) == -1\nassert     triangle_area(3,4,5) == 7.50\nassert     triangle_area(1,1,1) == 1.00\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     will_it_fly(['a', 'b', 'c', 'd'], 10) == True\nassert     will_it_fly(['a', 'b', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd'], 10) == False\nassert     will_it_fly([], 10) == True\nassert     will_it_fly([1,2], 10) == False\nassert     will_it_fly([1,2,3,2], 10) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     will_it_fly([1,2,3,4], 6) == True,    \"The function should return True\"\nassert     will_it_fly([1,2,3,4], -3) == False,    \"The function should return False\"\nassert     will_it_fly([1,2,3,4], 7) == False,    \"The function should return False\"\nassert     will_it_fly([1,2,3,4], 0) == True,    \"The function should return True\"\nassert     will_it_fly([], 0) == False,    \"The function should return False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     will_it_fly(['b','a','b'],10) == True\nassert     will_it_fly(['b','b','a'],10) == True\nassert     will_it_fly(['b','b','b'],10) == True\nassert     will_it_fly(['b','a','b','b','b'],10) == False\nassert     will_it_fly(['b','b','a','b','b','b','a'],10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert         will_it_fly([], 7) == True\nassert         will_it_fly([1], 7) == True\nassert         will_it_fly([2,1,2], 7) == True\nassert         will_it_fly([1,1,2,2], 7) == True\nassert         will_it_fly([1,2,3,2,1], 7) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     will_it_fly([1,1,1,1,1],15) == True\nassert     will_it_fly([1,2,3,1],12) == False\nassert     will_it_fly([3,4,2],2) == False\nassert     will_it_fly([1,2,3,4,5,6,7,8],6) == True\nassert     will_it_fly([5,3,4,5,3,4,4,5],7) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         will_it_fly(    [1,2,3,4,5,6],            5) ==     True\nassert         will_it_fly(    [1,2,3,4,5],            5) ==     True\nassert         will_it_fly(    [1,2,3,4,5,6],            3) ==     False\nassert         will_it_fly(    [1,2,3,4,5],            2) ==     False\nassert         will_it_fly(    [1,2,3,4],            1) ==     True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     will_it_fly([1, 2, 2, 1], 5) == True\nassert     will_it_fly([5, 3, 1, 1], 9) == True\nassert     will_it_fly([1, 2, 3, 4, 5], 10) == True\nassert     will_it_fly([5, 5, 5, 5, 5], 10) == True\nassert     will_it_fly([1, 2, 3, 4, 5], 10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     will_it_fly([1, 1, 1, 1, 1], 10) == True\nassert     will_it_fly([1, 2, 3, 4], 100) == False\nassert     will_it_fly([1, 2, 3, 4, 1, 2, 3], 100) == True\nassert     will_it_fly([1,2,3,4,5,6,7], 100) == True\nassert     will_it_fly([2,3,1,1,2], 100) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         will_it_fly([1,2,2,1], 4)\nassert     not will_it_fly([1,2,2,1], 6)\nassert     not will_it_fly([3,3,3,3,3], 10)\nassert     not will_it_fly([1,2,3,1], 4)\nassert     will_it_fly([1,2,3,1,3], 7)\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     will_it_fly([1,2,3,2,1], 4) == True\nassert     will_it_fly([1,2,3,2,1], 8) == True\nassert     will_it_fly([1,2,3,2,1], 3) == True\nassert     will_it_fly([1,2,3,2,1], 1) == True\nassert     will_it_fly([1,2,3,2,1], 5) == False\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_change([1, 2, 1]) == 3\nassert     smallest_change([1, 2, 3]) == 2\nassert     smallest_change([1, 2, 3, 1, 2]) == 2\nassert     smallest_change([1, 3, 2, 1, 1]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     smallest_change([1,2,3,4,4,5,5]) == 1\nassert     smallest_change([1,2,3,4,4,5,5,6,6]) == 2\nassert     smallest_change([2,1,2,3,3,4,4,5,5]) == 3\n\ndef check_if_palindrome(arr):\n    \"\"\"\n    Given an array arr, check if the array is a palindrome. A palindrome is a\n    sequence that reads the same forwards and backwards.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     smallest_change([1, 2, 1, 2, 1, 2]) == 1\nassert     smallest_change([2, 1, 2, 1]) == 2\nassert     smallest_change([2, 1, 1, 2]) == 3\nassert     smallest_change([1, 2, 3, 4]) == 4\nassert     smallest_change([1, 2, 3, 4, 1, 2, 3]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     smallest_change([0, 2, 4, 1, 2, 0]) == 3\nassert     smallest_change([1, 2, 3, 4, 4, 3]) == 0\nassert     smallest_change([1, 2, 3, 3, 4, 3, 3]) == 3\nassert     smallest_change([3, 2, 3, 2, 4, 1, 1, 2, 0]) == 3\nassert     smallest_change([1, 2, 3, 1, 3, 3]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     smallest_change([5, 5, 5, 5, 5, 5]) == 0\nassert     smallest_change([7, 8, 9, 10, 11, 6, 7]) == 1\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 3\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 9\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     smallest_change([1,2,3]) == 3\nassert     smallest_change([3,4,5]) == 4\nassert     smallest_change([7,1,2,3,4,5,6,7,8]) == 3\nassert     smallest_change([7,5,3,2,4,1,6,7,8]) == 2\nassert     smallest_change([2,4,6,2,3,1,2,1,1,3]) == 4\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     smallest_change([1,2,3,4]) == 4\nassert     smallest_change([4,3,2,1]) == 4\nassert     smallest_change([4,3,2,1,2]) == 2\nassert     smallest_change([1,2,2]) == 1\nassert     smallest_change([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     smallest_change([1,2,3,4]) == 3\nassert     smallest_change([4,3,2,1]) == 4\nassert     smallest_change([1,3,5,7,9]) == 5\nassert     smallest_change([5,1,2,4,3]) == 2\nassert     smallest_change([4,3,2,1]) == 4\n"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     smallest_change([1,2,3,4,5]) == 1\nassert     smallest_change([1,2,3,4,5,6]) == 2\nassert     smallest_change([1,2,3,4,5,6,7]) == 3\nassert     smallest_change([1,2,3,4,5,6,7,8]) == 4\n\nprint(\"Smallest number of changes to make a palindromic array:\", smallest_change([1,2,3,4,5,6,7,8]))\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     total_match(['s', 't', 'r','s'], ['s', 't', 'r','s']) == ['s', 't', 'r','s']\nassert     total_match(['s', 't', 'r','s'], ['s', 't', 'r','s', 'a']) == ['s', 't', 'r','s']\n\ndef average(lst):\n    '''\n    Write a function that accepts a list of numbers and returns the average of the \n    list.\n\n    Do not use any built-in functions.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     total_match(['asd', 'edf', 'asds','sad', 'ads'], ['sds', 'edf', 'asd','sad', 'ads']) == ['asds', 'asd','sds']\nassert total_match(['a', 'b', 'c', 'd'], ['c', 'd', 'e', 'f']) == ['c', 'd', 'e', 'f']\nassert total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\nassert total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c']) == ['a', 'b', 'c', 'd']\n\ndef factorial(n):\n    '''\n    Write a function that accepts a positive integer number n and returns \n    the factorial of the number n.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef total_match_2(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    pass\n\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     total_match(['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i', 'j']) == ['a', 'b', 'c', 'd', 'e']\nassert     total_match(['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i', 'j', 'k']) == ['a', 'b', 'c', 'd', 'e']\nassert     total_match(['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i', 'j']) == ['a', 'b', 'c', 'd', 'e']\nassert     total_match(['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i', 'j', 'k', 'l']) == ['a', 'b', 'c', 'd', 'e']\nassert     total_match(['a', 'b', 'c', 'd', 'e'], ['f', 'g', 'h', 'i', 'j', 'k', 'l','m']) == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     total_match([\"a\", \"abc\", \"def\"], [\"ab\", \"c\", \"f\"]) == [\"abc\", \"f\"]\nassert     total_match([\"a\", \"abc\", \"def\"], [\"a\", \"ab\", \"c\", \"f\"]) == [\"abc\", \"f\"]\nassert     total_match([\"a\", \"ab\", \"c\"], [\"a\", \"ab\", \"c\", \"d\"]) == [\"a\", \"ab\"]\nassert     total_match([\"a\", \"ab\", \"c\"], [\"a\", \"ab\", \"d\"]) == [\"a\", \"ab\"]\nassert     total_match([\"a\", \"ab\", \"c\"], [\"a\", \"ac\", \"d\"]) == [\"a\", \"ab\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     total_match(['a', 'aa', 'aaa', 'b'], ['b', 'ba', 'aaa', 'aa']) == ['a', 'b']\nassert     total_match(['a', 'aa', 'aaa', 'b'], ['b', 'ba', 'aaa', 'aa']) == ['a', 'aa', 'aaa']\nassert     total_match(['a', 'aa', 'aaa', 'b'], ['b', 'ba', 'aaa', 'aa', 'bb']) == ['a', 'b']\nassert     total_match(['a', 'aa', 'aaa', 'b'], ['b', 'ba', 'aaa', 'aa', 'bb']) == ['a', 'aa', 'bb']\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     total_match(['d','a','b','e'], ['c','f','g']) == ['d', 'a', 'b', 'e']\nassert     total_match(['d','a','b','e'], ['e', 'f','g']) == ['d', 'a', 'b', 'e']\nassert     total_match(['e', 'f','g'], ['d','a','b','e']) == ['e', 'f','g']\n\ndef count_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list more than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n\ndef check_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(18)\nassert     not is_multiply_prime(15)\nassert     is_multiply_prime(27)\nassert     not is_multiply_prime(25)\nassert     is_multiply_prime(10)\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(15) == False\nassert     is_multiply_prime(18) == False\nassert     is_multiply_prime(60) == True\nassert     is_multiply_prime(300) == True\n\ndef is_palindrome(n):\n    \"\"\"Write a function that returns true if the given number is the same when multiplied by its reverse.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(3) is True\nassert is_multiply_prime(6) is False\nassert is_multiply_prime(12) is True\nassert is_multiply_prime(21) is False\nassert is_multiply_prime(27) is True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(27) == True\nassert     is_multiply_prime(32) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(98) == False\n\n\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(234) == False\nassert is_multiply_prime(23) == True\nassert is_multiply_prime(2321) == True\nassert is_multiply_prime(98) == True\n\ndef is_sum_of_four_prime(a):\n    \"\"\"Write a function that returns true if the given number is the sum of 4 prime numbers\n    and false otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(9) is False\nassert     is_multiply_prime(15) is True\nassert     is_multiply_prime(120) is True\nassert     is_multiply_prime(35) is False\nassert     is_multiply_prime(55) is False\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(35) == False\nassert     is_multiply_prime(36) == True\nassert     is_multiply_prime(36*3) == False\nassert     is_multiply_prime(36*3*3) == True\n\ndef is_divide_primes(a):\n    \"\"\"Write a function that returns true if the given number is the division of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(6) == True, \"1st case failed\"\nassert     is_multiply_prime(7) == False, \"2nd case failed\"\nassert     is_multiply_prime(29) == False, \"3rd case failed\"\nassert     is_multiply_prime(93) == True, \"4th case failed\"\nassert     is_multiply_prime(19) == False, \"5th case failed\"\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(24) == False\nassert     is_multiply_prime(36) == True\nassert     is_multiply_prime(15) == False\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(7) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(20) == False\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(25) == False\nassert     is_multiply_prime(6) == True\nassert     is_multiply_prime(40) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_simple_power(64, 2) == True\nassert     is_simple_power(64, 4) == False\nassert     is_simple_power(5, 2) == True\nassert     is_simple_power(0, 2) == False\nassert     is_simple_power(1, 2) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_simple_power(2**3, 3)\nassert     is_simple_power(2**5, 2)\nassert     is_simple_power(2**2, 2)\nassert     not is_simple_power(2**0, 3)\nassert     not is_simple_power(2**2, 3)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_simple_power(16, 2) == True\nassert     is_simple_power(5, 3) == False\nassert     is_simple_power(31, 5) == True\nassert     is_simple_power(5, 8) == False\nassert     is_simple_power(2**3, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_simple_power(1, 3)\nassert     is_simple_power(2, 3)\nassert     is_simple_power(2, 2)\nassert     is_simple_power(3, 2)\nassert     is_simple_power(3, 3)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_simple_power(10, 2) == True\nassert     is_simple_power(10, 5) == False\nassert     is_simple_power(10, 3) == True\nassert     is_simple_power(10, 1) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_simple_power(10, 3)\nassert     not is_simple_power(10, 2)\nassert     is_simple_power(10, 1)\nassert     not is_simple_power(10, 0)\nassert     not is_simple_power(10, -1)\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_simple_power(5**3, 5) == True\nassert     is_simple_power(5**3, 2) == False\nassert     is_simple_power(2**10, 2) == True\nassert     is_simple_power(5**3, 1) == False\n\n\ndef is_perfect_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a perfect\n    power of n and false in other cases.\n    x is a perfect power of n if n**int=x and n < 2**int\n    \"\"\"\n    pass\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_simple_power(0, 4) == False, \"0 is not a simple power of 4\"\nassert     is_simple_power(1, 4) == False, \"1 is not a simple power of 4\"\nassert     is_simple_power(2, 4) == True, \"2 is a simple power of 4\"\nassert     is_simple_power(4, 4) == False, \"4 is not a simple power of 4\"\nassert     is_simple_power(64, 4) == True, \"64 is a simple power of 4\"\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(5, 2) == True\nassert     is_simple_power(2, 2) == False\nassert     is_simple_power(3, 3) == True\nassert     is_simple_power(4, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_simple_power(1, 2) == True\nassert     is_simple_power(1, 3) == False\nassert     is_simple_power(5, 3) == True\nassert     is_simple_power(9, 3) == False\nassert     is_simple_power(3, 3) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert ices is True\nassert iscube(12) is True\nassert iscube(13) is True\nassert iscube(15) is False\nassert iscube(17) is True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cube(0) == True\nassert     cube(1) == False\nassert     cube(2) == True\nassert     cube(3) == False\nassert     cube(4) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert icsubcube(4) == True\nassert icsubcube(16) == True\nassert icsubcube(45) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert icsp == True\nassert iscube(1) == True\nassert iscube(3) == False\nassert iscube(26) == True\nassert iscube(36) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert iz_scube(27) == True\nassert iz_scube(1) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert iceskip(1) == True\nassert iceskip(18) == True\nassert iceskip(4) == True\nassert iceskip(4.5) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     iscube(29) == True\nassert     iscube(27) == True\nassert     iscube(16) == False\nassert     iscube(35) == True\nassert     iscube(55) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert iceshape(1) == True\nassert iceshape(2) == False\nassert iceshape(0) == True\nassert iceshape(-2) == True\nassert iceshape(-1) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert iz_cube(3) == True\nassert iz_cube(4) == False\nassert iz_cube(25) == True\nassert iz_cube(26) == False\nassert iz_cube(27) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     iscube(27) == True\nassert     iscube(12) == True\nassert     iscube(7) == True\nassert     iscube(2) == False\nassert     iscube(5) == False\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hex_key('EECCFFF') == (13, 13)\nassert     hex_key('AABC') == (13, 13)\nassert     hex_key('FF') == (17, 17)\nassert     hex_key('F') == (17, 17)\nassert     hex_key('FF') == (17, 17)\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('A') == 1\nassert     hex_key('B') == 2\nassert     hex_key('C') == 3\nassert     hex_key('D') == 4\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     hex_key('') == 2\nassert     hex_key('A') == 1\nassert     hex_key('2') == 2\nassert     hex_key('D') == 1\nassert     hex_key('F') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     hex_key(\"1100011\") == 2\nassert     hex_key(\"A000001\") == 5\nassert     hex_key(\"AFFF\") == 0\nassert     hex_key(\"F0F0F0\") == 5\nassert     hex_key(\"\") == 0\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     hex_key(123) == 3\nassert     hex_key(125) == 4\nassert     hex_key(126) == 5\nassert     hex_key(13) == 1\nassert     hex_key(143) == 4\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     hex_key(\"B\") == 2\nassert     hex_key(\"C\") == 3\nassert     hex_key(\"D\") == 4\nassert     hex_key(\"E\") == 5\nassert     hex_key(\"F\") == 6\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         hex_key(\"3B2\") == [2, 3]\nassert         hex_key(\"3A3\") == [2, 3]\nassert         hex_key(\"3C3\") == [2, 3]\nassert         hex_key(\"3B3\") == [2, 3]\nassert         hex_key(\"3B3B3\") == [2, 3, 3]\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     hex_key('AAABBBBCCDDDD') == 5\nassert     hex_key('CAFEBF') == 4\nassert     hex_key('A1C4E') == 1\nassert     hex_key('') == 0\n\ndef hex_key_2(s):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    \n    primes = [2, 3, 5, 7, 11, 13, 17]\n    \n    def is_prime(n):\n        if n in primes:\n            return True\n        else:\n            for i in primes:\n                if n % i == 0:\n                    return False\n            return True\n            \n    count = 0\n    for c in s:\n        if c.isalpha():\n            if is_prime(ord(c) - ord('A') + 10):\n                count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     hex_key('a2b3c') == (2,3)\nassert     hex_key('a') == (0,1)\nassert     hex_key('abcd') == (0,1,2,3)\nassert     hex_key('bcde') == (2,3,4,5)\nassert     hex_key('b') == (1,2)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(1) == '1', \"1 does not convert to '1'!\"\nassert     decimal_to_binary(2) == '10', \"2 does not convert to '10'!\"\nassert     decimal_to_binary(3) == '11', \"3 does not convert to '11'!\"\nassert     decimal_to_binary(7) == '111', \"7 does not convert to '111'!\"\nassert     decimal_to_binary(9) == '1001', \"9 does not convert to '1001'!\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(decimal_number) == 'db1011001101'\nassert     decimal_to_binary(binary_number) == '1011001101'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(101) == \"10101\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(42) == '01100101'\nassert     decimal_to_binary(37) == '011101'\nassert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(-1) == '-1'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     '1101' == decimal_to_binary(3)\nassert     '00011101' == decimal_to_binary(5)\nassert     '110010111' == decimal_to_binary(7)\nassert     '11111111' == decimal_to_binary(15)\nassert     '10000101' == decimal_to_binary(8)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(100) == '100000'\nassert     decimal_to_binary(100) == '100000'\nassert     decimal_to_binary(0) == '00000000000000000000000000000000'\nassert     decimal_to_binary(5) == '000005'\nassert     decimal_to_binary(1) == '00000001'\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(23) == '11001'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(0) == '0'\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a number in binary form, as a string, and your task is to convert\n    it to decimal form. The function should return a string, with each character representing\n    a decimal number. Each character in the string will be a digit from 0 to 9.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(4) == \"00000100\", \\\n        \"incorrect result for decimal_to_binary(4)\"\nassert     decimal_to_binary(255) == \"11111111\", \\\n        \"incorrect result for decimal_to_binary(255)\"\nassert     decimal_to_binary(58) == \"0100011\", \\\n        \"incorrect result for decimal_to_binary(58)\"\n\n\ndef test_decimal_to_binary():\n    assert decimal_to_binary(4) == \"00000100\", \"incorrect result for decimal_to_binary(4)\"\n    "
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     binary_to_decimal(\"111111\") == 3\nassert     binary_to_decimal(\"010111\") == 6\nassert     binary_to_decimal(\"00100\") == 4\nassert     binary_to_decimal(\"\") == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_happy(\"\") == False\nassert     is_happy(\"a\") == True\nassert     is_happy(\"b\") == False\nassert     is_happy(\"ccc\") == True\nassert     is_happy(\"cccc\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_happy('abbcccdddd') == True\nassert is_happy('abbcdddd') == False\nassert is_happy('abcdef') == False\nassert is_happy('a') == True\nassert is_happy('aaa') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_happy(\"ccccccc\") == True\nassert     is_happy(\"dddd\") == False\nassert     is_happy(\"aaaa\") == True\nassert     is_happy(\"abb\") == False\nassert     is_happy(\"a\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_happy('bab') == True\nassert     is_happy('aba') == False\nassert     is_happy('aa') == False\nassert     is_happy('bbbb') == True\nassert     is_happy('abaabc') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_happy('happy') == True\nassert     is_happy('sad') == False\nassert     is_happy('haha') == False\nassert     is_happy('hahaaaa') == False\nassert     is_happy('hahaaaaaa') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_happy(\"zwz\") == False\nassert     is_happy(\"wzw\") == False\nassert     is_happy(\"wz\") == False\nassert     is_happy(\"wz\") == False\nassert     is_happy(\"ww\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_happy('abcd') == False\nassert     is_happy('abccd') == True\nassert     is_happy('abcccdd') == True\nassert     is_happy('abcccddd') == False\nassert     is_happy('abcccdddd') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_happy('aa') == False\nassert     is_happy('aba') == False\nassert     is_happy('aab') == True\nassert     is_happy('aabb') == True\nassert     is_happy('abaab') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_happy(\"\") == False\nassert     is_happy(\"a\") == False\nassert     is_happy(\"abb\") == False\nassert     is_happy(\"abbb\") == False\nassert     is_happy(\"aba\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_happy(\"abc\") == False\nassert     is_happy(\"\") == True\nassert     is_happy(\"a\") == True\nassert     is_happy(\"bba\") == False\nassert     is_happy(\"aaa\") == True\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\n            'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], 'WRONG'\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([1, 2, 3, 4, 5]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\"]\nassert     numerical_letter_grade([0, 0, 0, 0, 0]) == [\"E\", \"E\", \"E\", \"E\", \"E\"]\nassert     numerical_letter_grade([2.5, 4.0, 4.0, 4.0, 4.0]) == [\"B+\", \"A\", \"A\", \"A\", \"A+\"]\nassert     numerical_letter_grade([1.0, 1.0, 1.0, 1.0, 1.0]) == [\"C+\", \"C\", \"C\", \"C\", \"C+\"]\nassert     numerical_letter_grade([1.0, 1.0, 1.0, 1.0, 1.0]) == [\"D+\", \"D\", \"D\", \"D\", \"D+\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4."
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) \\\n    == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 4.0, 0.0, 0.0]) \\\n    == ['A', 'A', 'A-', 'B', 'B-', 'B+', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\nassert     numerical_letter_grade([3.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0]) \\\n    == ['D', 'D', 'D-', 'E']\n\ndef string_letter_grade(grades):\n    \"\"\"The teacher has not given the grades to the students.\n    The teacher wants to calculate the letter grade for each student using the following grade scale\n                GPA       |    Letter grade\n                  4.0                A+\n                > 3.7                A \n                > 3.3                A- \n                > 3.0                B+\n                > 2.7                B \n                > 2.3                B-\n                > 2.0                C+\n                > 1.7                C\n                > 1.3                C-\n                > 1.0                D+ \n                > 0.7                D \n                > 0.0                D-\n                    0.0                E\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         numerical_letter_grade([3.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 4.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']\nassert         numerical_letter_grade([]) == []\nassert         numerical_letter_grade([3.0, 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 4.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E', 'E', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\nassert     numerical_letter_grade([4.0, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'F', 'F', 'F', 'F', 'F']\n\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F']\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [ 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-' ]\nassert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == [ 'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-' ]\n\n\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([3.5, 4.0, 3.3, 2.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) \\\n            == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([3.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]) \\\n            == ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) \\\n            == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\ndef max_of_three(a, b, c):\n    \"\"\"Return the maximum of three numbers.\"\"\"\n    pass\n\ndef max_of_four(a, b, c, d):\n    \"\"\"Return the maximum of four numbers.\"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade(grade_list)     == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert     numerical_letter_grade(grade_list_2)     == [\"A+\", \"A\", \"A-\", \"A-\", \"A-\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert     numerical_letter_grade(grade_list_3)     == [\"A+\", \"A\", \"A-\", \"A-\", \"A-\", \"A-\", \"A-\", \"B+\", \"B\", \"B-\", \"B-\", \"B-\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_length(\"primes\") == True\nassert     prime_length(\"notprimes\") == False\nassert     prime_length(\"primesb\") == True\nassert     prime_length(\"notprimesb\") == False\nassert     prime_length(\"primes3\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"a1\") == False\nassert     prime_length(\"\") == True\nassert     prime_length(\"1\") == False\nassert     prime_length(\"12\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"b\") == False\nassert     prime_length(\"ab\") == False\nassert     prime_length(\"abcd\") == False\nassert     prime_length(\"abcdee\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prime_length('Hello World') is False\nassert     prime_length('abcdefghijk') is False\nassert     prime_length('123456789') is True\nassert     prime_length('abcdefgh') is True\nassert     prime_length('12345678901') is False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prime_length(\"hello\") == True\nassert     prime_length(\"howdy\") == False\nassert     prime_length(\"123456789\") == False\nassert     prime_length(\"9876437123622\") == True\nassert     prime_length(\"hottie\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prime_length(\"abcd\") == False\nassert     prime_length(\"a\") == True\nassert     prime_length(\"ab\") == False\nassert     prime_length(\"abcdabc\") == False\nassert     prime_length(\"abc\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prime_length('short string') == False\nassert     prime_length('longer string') == False\nassert     prime_length('prime') == True\nassert     prime_length('prime-num') == True\nassert     prime_length('-prime-num') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     isinstance(prime_length(\"string\"), bool)\nassert     prime_length(\"string\") == True\nassert     prime_length(\"not a string\") == False\nassert     prime_length(\"this is also not a string\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"A\") == True\nassert     prime_length(\"ab\") == False\nassert     prime_length(\"AB\") == True\nassert     prime_length(\"abcd\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prime_length('abc') == False\nassert     prime_length('abbc') == False\nassert     prime_length('a') == False\nassert     prime_length('ab') == False\nassert     prime_length('abcd') == False\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 5\nassert     starts_one_ends(2) == 12\nassert     starts_one_ends(3) == 6\nassert     starts_one_ends(4) == 20\nassert     starts_one_ends(5) == 40\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     starts_one_ends(1) == 10\nassert     starts_one_ends(2) == 13\nassert     starts_one_ends(3) == 22\nassert     starts_one_ends(4) == 37\nassert     starts_one_ends(5) == 52\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     starts_one_ends(3) == 9\nassert     starts_one_ends(2) == 8\nassert     starts_one_ends(1) == 10\nassert     starts_one_ends(3) == 15\nassert     starts_one_ends(4) == 19\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     starts_one_ends(10) == 2\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(12) == 2\nassert     starts_one_ends(11) == 1\nassert     starts_one_ends(100) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 4\nassert     starts_one_ends(5) == 5\nassert     starts_one_ends(6) == 6\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     starts_one_ends(1) == 10\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 6\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 7\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 5\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 4\nassert     starts_one_ends(3) == 9\nassert     starts_one_ends(4) == 16\nassert     starts_one_ends(5) == 25\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(0) == '0'\nassert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve(10) == \"011010\"\nassert     solve(56) == \"11111011011111110\"\nassert     solve(57) == \"111110101110000\"\nassert     solve(111) == \"1111101110001011\"\nassert     solve(8) == \"00001000\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve(12) == \"1100\"\nassert     solve(10) == \"1\"\nassert     solve(13) == \"10001\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solve(10)    ==     \"1\"\nassert     solve(1010)     ==     \"1011\"\nassert     solve(111)     ==     \"11\"\nassert     solve(0)     ==     \"0\"\nassert     solve(999)     ==     \"1111\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve(10) == \"1010\"\nassert     solve(11) == \"1101\"\nassert     solve(12) == \"1110\"\nassert     solve(13) == \"11001\"\nassert     solve(14) == \"11110\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve(0) == '0'\nassert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve(1001)    == \"01101001\"\nassert     solve(1002)    == \"01101010\"\nassert     solve(999)    == \"111110000\"\nassert     solve(0)        == \"0\"\nassert     solve(1)        == \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (solve(0) == '0')\nassert     (solve(1) == '1')\nassert     (solve(10) == '1')\nassert     (solve(23) == '101')\nassert     (solve(102) == '0101')\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(10) == '1'\nassert     solve(15) == '11'\nassert     solve(25) == '101'\nassert     solve(54) == '1110'\nassert     solve(345) == '101100'\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add([1, 3, 5, 7]) == [2, 4, 6, 8]\nassert     add([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert     add([1, 3, 5]) == [2, 4, 6]\nassert     add([1, 3, 5, 7, 9]) == [2, 4, 6, 8, 10]\nassert     add([1, 3, 5, 7]) == [2, 4, 6, 8]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     [2, 4] == add([1, 2, 3, 4, 5])\nassert     [6] == add([1, 2, 3, 4, 5, 6])\nassert     [2] == add([1, 2, 3])\nassert     [1] == add([1])\nassert     [7] == add([1, 3, 4, 5, 6])"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     add([0, 1, 2, 3, 4, 5, 6]) == 2\nassert     add([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 4\nassert     add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\nassert     add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\nassert     add([]) == 0\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add([4, 3, 2, 1]) == 4\nassert     add([4, 3, 3, 2, 1]) == 6\nassert     add([4, 3, 2, 1]) == 4\nassert     add([4, 3, 2, 1]) == 4\nassert     add([4, 3, 3, 2, 1]) == 6\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (add([1,2,3,4,5,6,7,8,9,10,11]) == [2,4,6,8,10,12])\nassert     (add([1,2,3,4,5,6]) == [2,4,6])\nassert     (add([1]) == [1])\nassert     (add([]) == [])\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add([1, 2, 3, 4, 5, 6]) == [3, 5, 7]\nassert add([1, 3, 5, 7, 9]) == [4, 6]\nassert add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\nassert     add([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\nassert     add([1, 2, 3, 4, 5]) == [2, 4, 6, 8]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8]\nassert     add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     add([1,3,2,5,6,7,9,8,10]) == [1,3,5,7,9,10]\nassert add([]) == []\nassert add([1,2,3,4,5,6,7,8,9]) == [2,4,6,8,10]\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [0, 0, 2, 4] == add([1, 2, 3, 4])\nassert     [1, 3] == add([1, 2, 3, 4, 5, 6, 7, 8])\nassert     [4, 6, 8] == add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add([1,2,3,4,5,6,7,8]) == [2,4,6,8]\nassert     add([9,10,11,12,13,14,15,16,17,18,19,20]) == [10,12,14,16,18,20]\nassert     add([]) == []\nassert     add([-1,-2,-3,-4,-5,-6]) == [-2,-4,-6]\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert         anti_shuffle(\"\") == \"\"\nassert         anti_shuffle(\"a\") == \"a\"\nassert         anti_shuffle(\"have a nice day\") == \"ahv nvf aecieh yd aea\"\nassert         anti_shuffle(\"Hello world, this is a test\") == \"Hl lo wrd ehv ils, tihs ise a tset\"\nassert         anti_shuffle(\"1234\") == \"1 2 3 4\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     anti_shuffle('codewars') == 'cwarso'\nassert     anti_shuffle('coffee') == 'ecfye'\nassert     anti_shuffle('Racecar') == 'arcecar'\nassert     anti_shuffle('Snowball') == 'Ballsnow'\nassert     anti_shuffle('One Two three') == 'One Two three'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"How are you?\") == \"how are you?\"\nassert     anti_shuffle(\"The sky is blue\") == \"the sky is blue\"\nassert     anti_shuffle(\"Zombies rule!\") == \"zombies rule!\"\nassert     anti_shuffle(\"Zombies rule!\") == \"zombies rule!\"\nassert     anti_shuffle(\"Fight, fight, fight, Z\") == \"fight, fight, fight, Z\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     anti_shuffle(\"I am the best\") == \"the best the am I\"\nassert     anti_shuffle(\"the my are the\") == \"the the are the my\"\nassert     anti_shuffle(\"i am the are the\") == \"are the the i am\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"a b\") == \"a b\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     anti_shuffle('hello') == 'olleh'\nassert     anti_shuffle('hello world') == 'olleh dlrow'\nassert     anti_shuffle('hello my name is sparta') == 'olleh ymeesara spartah'\nassert     anti_shuffle(' hello world') == 'olleh dlrow'\nassert     anti_shuffle('hello') == 'olleh'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     anti_shuffle(\"Hi this is an example\")         == \"Hi this is an example\"\nassert     anti_shuffle(\"Where is the gym\")                 == \"Where is the gym\"\nassert     anti_shuffle(\"Happy Holidays\")                 == \"Happy Holidays\"\nassert     anti_shuffle(\" \")                                 == \"\"\nassert     anti_shuffle(\" \")                                 == \"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     anti_shuffle('Hi He Lied Because Boron Could Not Oxidize Fluorine') == \\\n        'Hi   He   Lied   Because   Broron   Could   Not   Oxidize   Fluorine'\n\nassert     anti_shuffle('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == \\\n        '1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20'\n\nassert     anti_shuffle('1b 2b 3b 4b 5b 6b 7b 8b 9b 10b 11b 12b 13b 14b 15b 16b 17b 18b 19b') == \\\n        '1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20'\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") ==     \"the eh wn fox qut br eiv r jps ov er th lzy dg\"\nassert     anti_shuffle(\"the   quick brown  fox jumps over the lazy dog\") ==     \"the eh   wn fox qut br eiv r jps ov er th lzy dg\"\nassert     anti_shuffle(\"this is an example\") ==     \"is an example\"\nassert     anti_shuffle(\"this is an example.\") ==     \"is an example\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog.\") ==     \"the eh wn fox qut br eiv r jps ov er th lzy dg.\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     anti_shuffle(\"Hi John, my name is Paul\") == \"Hi Paul, my name is John\"\nassert     anti_shuffle(\"    space before\") == \"before space\"\nassert     anti_shuffle(\"space after     \") == \"after space\"\nassert     anti_shuffle(\"1 2 3 4 5 6 7 8 9\") == \"9 8 7 6 5 4 3 2 1\"\nassert     anti_shuffle(\"1 a 2 2 a\") == \"a 2 1 2 a\"\n"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     anti_shuffle(\"Hi this is an example\") == \"Hi this is an example\"\nassert     anti_shuffle(\"Hello World\") == \"Hello World\"\nassert     anti_shuffle(\"     Hello World\") == \"Hello World\"\nassert     anti_shuffle(\"  Hello World\") == \"Hello World\"\nassert     anti_shuffle(\"     \") == \"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [(0, 0), (1, 1), (2, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [(1, 1), (2, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_row([[1,2],[3,4],[5,6]], 1) == [(0,0), (0,1), (1,0), (1,1)]\nassert     get_row([[1,2],[3,4],[5,6]], 2) == [(0,2), (1,1), (2,0), (2,1)]\nassert     get_row([[1,2],[3,4],[5,6]], 3) == [(0,1), (0,2), (1,0), (1,2), (2,0), (2,1)]\nassert     get_row([[1,2],[3,4],[5,6]], 4) == [(0,1), (0,2), (1,0), (1,1), (2,0), (2,1)]\nassert     get_row([[1,2],[3,4],[5,6]], 5) == [(0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), (2,1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_row(matrix, 3) == [(0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4)]\nassert     get_row(matrix, 3) == get_row(matrix, 2)\nassert     get_row(matrix, 3) == get_row(matrix, 4)\nassert     get_row(matrix, 2) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4)]\nassert     get_row(matrix, 2) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_row([[3, 1, 2], [2, 3, 4], [4, 5, 6]], 3) == [(1, 2), (0, 2), (0, 1)]\nassert     get_row([[3, 1, 2], [2, 3, 4], [4, 5, 6]], 2) == [(0, 1), (1, 0), (1, 1)]\nassert     get_row([[3, 1, 2], [2, 3, 4], [4, 5, 6]], 1) == [(0, 0), (1, 1), (1, 2)]\nassert     get_row([[3, 1, 2], [2, 3, 4], [4, 5, 6]], 7) == []\nassert     get_row([[3, 1, 2], [2, 3, 4], [4, 5, 6]], 4) == [(2, 0), (2, 1), (2, 2), (1, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_row([[1, 2, 3], [2, 3, 4], [1, 2, 3]], 1) == [(0, 0), (0, 1), (0, 2), (1, 1), (1, 2)]\nassert     get_row([[1, 2, 3], [2, 3, 4], [1, 2, 3]], 2) == [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]\nassert     get_row([[1, 2], [2, 3]], 3) == [(0, 1), (0, 2), (1, 0), (1, 1)]\nassert     get_row([[1, 2, 3], [2, 3, 4], [1, 2, 3]], 3) == [(2, 0), (2, 1), (2, 2), (2, 3), (1, 0), (1, 1), (1, 2), (0, 0)]\nassert     get_row([[1, 2], [2, 3]], 2) == [(0, 0), (0, 1), (1, 0), (1, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [(0, 0), (0, 1), (0, 2)] == get_row(\n            [\n                [1, 2, 3, 4],\n                [4, 3, 2, 1],\n                [4, 4, 4, 4]\n            ],\n            0\n    )\nassert     [(0, 1), (0, 2), (1, 0)] == get_row(\n            [\n                [1, 2, 3, 4],\n                [4, 3, 2, 1],\n                [4, 4, 4, 4]\n            ],\n            3\n    )\nassert     [(0, 1), (1, 0), (2, 0)] == get_row(\n            [\n                [1, 2, 3, 4],\n                [4, 3, 2, 1],\n                [4, 4, 4, 4]\n            ],\n            2\n    )\nassert     [(0, 1), (1, 0), (2, 0)] == get_row(\n            [\n                [1, 2, 3, 4],\n                [4, 3, 2, 1],\n                [4, 4, 4, 4]\n            ],\n            4\n    )\nassert     [(1, 0), (2, 0), (3, 0)] == get_row(\n            [\n                [1, 2, 3, 4],\n                [4, 3, 2, 1],\n                [4, 4, 4, 4]\n            ],\n            3\n    )\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_row([(1,2,3,4,5,6), (3,3,3,3,3,3), (5,5,5,5,5,5), (7,7,7,7,7,7), (9,9,9,9,9,9), (11,11,11,11,11,11)], 0) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6)]\nassert     get_row([(1,2,3,4,5,6), (3,3,3,3,3,3), (5,5,5,5,5,5), (7,7,7,7,7,7), (9,9,9,9,9,9), (11,11,11,11,11,11)], 3) == [(3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9)]\nassert     get_row([(1,2,3,4,5,6), (3,3,3,3,3,3), (5,5,5,5,5,5), (7,7,7,7,7,7), (9,9,9,9,9,9), (11,11,11,11,11,11)], 9) == [(9, 9), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(3, 2), (1, 2), (1, 1)]\nassert     get_row([[1, 1], [2, 3], [3, 4]], 4) == [(2, 1), (0, 1), (2, 0)]\nassert     get_row([[1, 1], [2, 3], [3, 4]], 1) == [(0, 1), (0, 0), (1, 0)]\nassert     get_row([[1, 1], [2, 3], [3, 4]], 0) == [(0, 0), (1, 0), (2, 0)]\n\ndef linear_sum(lst):\n    \"\"\"\n    You are given a list of non-negative integers, and a target sum,\n    and you want to find out if there are any two integers in the list\n    that add up to the target sum.\n    Return True if the sum is reachable, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_row([[1,2,3], [4,5,6]], 2) == [(0,1), (1,2), (0,2), (1,1)]\nassert     get_row([[1,3,4], [2,5,6], [7,8,9]], 2) == [(0,1), (1,2), (0,2), (1,1)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 9) == [(2,3), (2,2), (2,1), (2,0)]\nassert     get_row([[1,2,3], [4,5,6], [7,8,9]], 7) == [(2,3), (1,2), (0,1), (0,0)]\nassert     get_row([[1,2,3], [4,5,6]], 1) == [(0,0), (0,1), (0,2), (1,0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [(0, 0), (1, 1), (2, 2), (3, 3)] == get_row([[1, 1, 2], [1, 2, 3], [2, 3, 4]], 2)\nassert     [(3, 0), (1, 1), (2, 2), (0, 0)] == get_row([[1, 1, 2], [1, 2, 3], [2, 3, 4]], 1)\nassert     [(0, 0), (1, 1), (2, 2), (3, 3)] == get_row([[1, 1, 2], [1, 2, 3], [2, 3, 4]], 3)\nassert     [(0, 0), (1, 1), (2, 2), (3, 3)] == get_row([[1, 1, 2], [1, 2, 3], [2, 3, 4]], 0)\n\n\ndef sum_elements(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return the sum of the elements (columns) of each row,\n    i.e. return a list [x1, x2, x3,...] where x1 + x2 + x3 +... = x.\n    Sort the elements by rows in ascending order.\n    Also, sort the rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([1,3,2,2,4,3,5,4,5,5]) == [1,2,2,3,3,4,4,5,5,5]\nassert     sort_array([1,3,5,2,4,6,7,5,3,2,1]) == [1,2,3,3,4,5,5,6,7,5,2]\nassert     sort_array([5,4,3,2,1,5,6,4,3,2,1]) == [1,2,3,4,5,5,6,4,3,2,1]\nassert     sort_array([]) == []\nassert     sort_array([1]) == [1]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([1,2,3,4]) == [1,2,3,4]\nassert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([10,20,30,40,50]) == [10,20,30,40,50]\nassert     sort_array([10,20,30,40,50,60]) == [10,20,30,40,50,60]\nassert     sort_array([10,20,30,40,50,60,70,80]) == [10,20,30,40,50,60,70,80]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [0, 3, 1] == sort_array([1, 3, 0])\nassert     [2, 0, 2] == sort_array([2, 1, 2])\nassert     [2, 2, 0] == sort_array([0, 0, 2])\nassert     [0, 2, 0] == sort_array([0, 2, 0])\nassert     [2, 0, 1] == sort_array([1, 0, 2])\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert     sort_array([15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert     sort_array([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\n\ndef sort_array2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([5, 2, 3, 1]) == [1, 2, 3, 5]\nassert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_array([9, 8, 7, 6, 5]) == [5, 6, 7, 8, 9]\nassert     sort_array([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([]) == []\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([0,5,2,3,2]) == [0,2,2,3,5]\nassert     sort_array([0,1,9,3,2]) == [0,1,3,2,9]\nassert     sort_array([3,2,1]) == [1,2,3]\nassert     sort_array([9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_array([2,3,1,2]) == [1,2,2,3]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array([5, 2, 3, 1, 4, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([5, 2, 3, 1, 4, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     sort_array([5, 2, 3, 1, 4, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_array([5, 2, 3, 1, 4, 6, -1]) == [-1, 1, 2, 3, 4, 5, 6]\nassert     sort_array([-1, -2, -3]) == [-1, -2, -3]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array([1,3,5,7,9]) == [1,3,5,7,9]\nassert     sort_array([2,3,4,5]) == [2,3,4,5]\nassert     sort_array([5,7,1,3,4,9]) == [1,3,4,5,7,9]\nassert     sort_array([9,7,5,3,1]) == [1,3,5,7,9]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([])    == []\nassert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_array([10,3,7,2,9]) == [2,3,7,10,9]\nassert     sort_array([10,3,2,7,9]) == [2,3,7,9,10]\nassert     sort_array([5,4,3,2,1]) == [1,2,3,4,5]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([1,3,2,4,5]) == [1,2,3,4,5]\nassert     sort_array([5,3,2,1]) == [1,3,2,5]\nassert     sort_array([1,1,1,3,3,3,4,4]) == [1,1,1,3,3,3,4,4]\nassert     sort_array([3,3,3,4,4,4,5,5]) == [3,3,3,4,4,4,5,5]\nassert     sort_array([1,3,2]) == [1,2,3]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encrypt(\"apple\") == \"gol\"\nassert     encrypt(\"dog\") == \"ogd\"\nassert     encrypt(\"baba\") == \"bxbd\"\nassert     encrypt(\"a\") == \"b\"\nassert     encrypt(\"a\") == \"b\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     encrypt('hello') == 'olleh'\nassert     encrypt('We') == 'Wr'\nassert     encrypt('Five') == 'Vfh'\nassert     encrypt('The') == 'Thn'\nassert     encrypt('five') == 'Vfh'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encrypt(\"a\") == \"b\"\nassert     encrypt(\"b\") == \"c\"\nassert     encrypt(\"c\") == \"d\"\nassert     encrypt(\"d\") == \"e\"\nassert     encrypt(\"e\") == \"f\"\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encrypt('This is a test') == 'gsdwyr'\nassert     encrypt('a') == 'b'\nassert     encrypt('This is a long test') == 'xzrnplz'\nassert     encrypt('Tests are fun') == 'zxwufnq'\nassert     encrypt('Tests are fun!') == 'zxwufnq!'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encrypt('cat') == 'atc'\nassert     encrypt('dog') == 'dgo'\nassert     encrypt('hello') == 'hleo'\nassert     encrypt('morning') == 'noor'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     encrypt('this is a test') == 'jgvsfkmreibjxzwtyq'\nassert     encrypt('this is a test') == 'jgvsfkmreibjxzwtyq'\nassert     encrypt('this is a test') == 'jgvsfkmreibjxzwtyq'\nassert     encrypt('this is a test') == 'jgvsfkmreibjxzwtyq'\nassert     encrypt('this is a test') == 'jgvsfkmreibjxzwtyq'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print \"Test case 1: \"\n    assert encrypt(\"hello\") == \"dhcozk\"\n    print \"Test case 2: \"\n    assert encrypt(\"hello world\") == \"dcozkigw\"\n    print \"Test case 3: \"\n    assert encrypt(\"abcd\") == \"dcba\"\n    print \"Test case 4: \"\n    "
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encrypt('abc') == 'bcd'\nassert     encrypt('xyz') == 'zab'\nassert     encrypt('zym') == 'abc'\nassert     encrypt('zym') == 'abc'\nassert     encrypt('zym') == 'abc'\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument\n    and returns a string decrypted with the alphabet being rotated\n    in the reverse order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encrypt('a') == 'e'\nassert     encrypt('b') == 'g'\nassert     encrypt('c') == 'j'\nassert     encrypt('d') =='m'\nassert     encrypt('e') == 'v'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest([0, -1, 1, 3, 2, 5, 2, 1]) == -1\nassert     next_smallest([2, 0, 1, 3, 2, 5, 2, 1]) == 0\nassert     next_smallest([5, 3, 1, 2, 4, 6, 2, 5]) == 2\nassert     next_smallest([5, 3, 1, 2, 4, 6, 2, 5, 2]) == 2\nassert     next_smallest([2, 2]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     next_smallest([0, 1, 2, 3, 4]) == 0\nassert     next_smallest([0, 1, 2, 3, 4, 3, 3, 2]) == 3\nassert     next_smallest([]) == None\nassert     next_smallest([3]) == 3\nassert     next_smallest([2, 1]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     next_smallest([1, 4, 3, 2, 9, 5, 10, 7]) == 2\nassert     next_smallest([2, 4, 5, 3, 1, 9, 10]) == 3\nassert     next_smallest([3, 2, 4, 5, 1, 9, 10]) == 4\nassert     next_smallest([2, 1, 3, 4, 5, 9, 10]) == 5\nassert     next_smallest([1, 10, 2, 3, 4, 9, 5]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     next_smallest([1,2,3,4,5,6]) == 2\nassert     next_smallest([1,2,3,4,5,6,7]) == 3\nassert     next_smallest([1,2,3,4,5,6,7,8]) == None\nassert     next_smallest([1,1,1,1]) == None\nassert     next_smallest([1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     next_smallest([2, -2, 1, -1, 3, 4, 0]) == -1\nassert     next_smallest([-2, -1, 0]) == None\nassert     next_smallest([-2, -1, 0, 2]) == None\nassert     next_smallest([2, 1, 3, 4, 5, 6]) == 2\n\ndef test_next_smallest():\n    "
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     next_smallest([7, 6, 5, 4, 3, 2, 1]) == 2\nassert     next_smallest([]) == None\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 6\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     next_smallest([3,2,1,4]) == 1\nassert     next_smallest([3,2,1,4,5]) == None\nassert     next_smallest([3,2,1]) == None\nassert     next_smallest([1,2,3,4]) == None\nassert     next_smallest([1,2,3]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     next_smallest([5,3,6,2,7,8]) == 2\nassert     next_smallest([1,2,3,4,5,6,7]) == 5\nassert     next_smallest([1,1,1,1,1,1]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     next_smallest([5,3,7,2,4,0,7,2,3]) == 2\nassert     next_smallest([-4,-3,0]) == None\nassert     next_smallest([0]) == None\nassert     next_smallest([2,2,3,4]) == 2\nassert     next_smallest([2,3,4]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     next_smallest([1,2,3,4,5]) == 2\nassert     next_smallest([1,2,3,4,5,6]) == 2\nassert     next_smallest([5,4,3,2,1]) == 1\nassert     next_smallest([5,4,3,2,1,8]) == 1\nassert     next_smallest([5,4,3,2,1,8,9]) == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_bored(\"This is not a sentence.\") == 0\nassert     is_bored(\"I can't believe that I'm having so much fun!\") == 1\nassert     is_bored(\"I believe I'm having such a good time!\") == 0\nassert     is_bored(\"How about you? I believe I'm having such a good time!\") == 1\nassert     is_bored(\"I believe I'm having such a good time! My mother was so tired.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_bored(\n                \"I love you. I am bored. My children are tired. I am bored.\") == True, \"is_bored\"\nassert     is_bored(\n                \"I have a dog. I have a cat. I am bored. I am sad.\") == True, \"is_bored\"\nassert     is_bored(\n                \"I am bored. I have a cat. I am bored. I am happy.\") == False, \"is_bored\"\nassert     is_bored(\n                \"I am happy. I have a cat. I am bored. I am sad.\") == False, \"is_bored\"\nassert     is_bored(\n                \"I am sad. I am bored. I have a cat. I am bored. I am happy.\") == False, \"is_bored\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_bored(\"I am bored\") == True\nassert     is_bored(\"I am not bored\") == False\nassert     is_bored(\"I am not the boss of the universe.\") == False\nassert     is_bored(\"I am not a robot\") == False\nassert     is_bored(\"\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_bored('I am bored') == True\nassert     is_bored('I am not bored') == False\nassert     is_bored('I am not sleepy') == False\nassert     is_bored('I am not joking') == False\nassert     is_bored('I am joking') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_bored(    'I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. It is very sad. I have a cow. It is a cow. It is very sad. I have a dog. It is a dog. It is very sad. I have a cat. It is a cat. It is very playful. I have a dog. It is a dog. It is very sad. I have a cow. It is a cow. I"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_bored(\"I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I I\nassert     is_bored
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_bored('I love reading') == True\nassert     is_bored('I love coding') == True\nassert     is_bored('I am bored') == True\nassert     is_bored('I am not bored') == True\nassert     is_bored('. I am not bored') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_bored('I do not want to have a conversation with you') == True\nassert     is_bored('I am not very bored right now') == False\nassert     is_bored('I am not bored right now') == False\nassert     is_bored('I am not very bored right now!') == False\nassert     is_bored('I am not very bored right now?!') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_bored(    \"I am bored\") == 1, \"Wrong answer for is_bored\"\nassert     is_bored(    \"I am very bored\") == 2, \"Wrong answer for is_bored\"\nassert     is_bored(    \"I am not bored\") == 0, \"Wrong answer for is_bored\"\nassert     is_bored(    \"I am not very bored\") == 0, \"Wrong answer for is_bored\"\nassert     is_bored(    \"I am not bored\") == 0, \"Wrong answer for is_bored\"\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_bored(\"I am bored\") == 1\nassert     is_bored(\"It is I, who is bored.\") == 2\nassert     is_bored(\"Is there anybody out there? I don't know.\") == 1\nassert     is_bored(\"I am not bored.\") == 0\nassert     is_bored(\"It is not I, who is bored.\") == 0\nprint \"OK\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     any_int(1, 0, 1) == True\nassert     any_int(0, 0, 0) == False\nassert     any_int(0, 0, 1) == False\nassert     any_int(0, 2, 4) == False\nassert     any_int(0, 4, 4) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     any_int(3, 4, 5) == False\nassert     any_int(1, 2, 3) == True\nassert     any_int(0, 1, 1) == True\nassert     any_int(3, 3, 3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         any_int(1, 0, 0) == False, \"any_int(1, 0, 0) == False\"\nassert         any_int(2, 3, 4) == False, \"any_int(2, 3, 4) == False\"\nassert         any_int(1, 2, 4) == True, \"any_int(1, 2, 4) == True\"\nassert         any_int(3, 3, 4) == True, \"any_int(3, 3, 4) == True\"\nassert         any_int(2, 3, 5) == False, \"any_int(2, 3, 5) == False\"\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1, 2, 4) == False\nassert     any_int(-1, -2, -3) == True\nassert     any_int(-1, -2, -4) == False\nassert     any_int(0, 0, 0) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     any_int(2, 1, 1) == True\nassert     any_int(1, 2, 1) == False\nassert     any_int(3, 1, 1) == True\nassert     any_int(1, 3, 1) == False\nassert     any_int(2, 3, 1) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 2, 3.0) == False\nassert     any_int(1, 2, 3.1) == True\nassert     any_int(1, 2, 3.9) == True\nassert     any_int(1, 2, 3.9) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     any_int(1, 2, 3) is True\nassert     any_int(1.0, 2.0, 3.0) is False\nassert     any_int(1.0, 2.0, 3.0) is False\nassert     any_int(0, 0, 0) is True\nassert     any_int(-1, 2, 3) is True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     any_int(2, 4, 6) == True\nassert     any_int(2, 4, 1) == False\nassert     any_int(5, 5, 5) == True\nassert     any_int(5, 5, 2) == False\n\n\ndef all_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if all three numbers are equal to the sum of any two of them.\n    Returns false in any other cases.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     any_int(1, 3, 2) == True\nassert     any_int(1, 3, 2.1) == False\nassert     any_int(1, 3, 2.9) == False\nassert     any_int(1, 3, 3) == True\nassert     any_int(1, 3, 3.0) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     any_int(10, 10, 10)\nassert     any_int(10, 20, 30)\nassert     any_int(10, 10, 20)\nassert     not any_int(10, 10.1, 10)\nassert     not any_int(10, 11, 20)\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode(\"Wow\") == \"WwOw\"\nassert     encode(\"Hello\") == \"HeLlO\"\nassert     encode(\"The\") == \"THe\"\nassert     encode(\"Hack\") == \"Hkct\"\nassert     encode(\"TEST\") == \"TsTtEeS\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\nprint encode(\"Ana are mere\")\nassert encode(\"Ana are mere\") == \"aBbaMRE\"\nprint encode(\"The quick brown fox jumped over the lazy dog\")\nassert encode(\"The quick brown fox jumped over the lazy dog\") == \"TeHf'qBbaMRE\"\nprint encode(\"I am a sledge hammer.\")\nassert encode(\"I am a sledge hammer.\") == \"iAmaSleGhAmaR\"\nprint encode(\"\")\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     encode('restlessness') =='restiLQH'\nassert     encode('Madam I\\'m Adam') == 'MaiI maDi I\\'m adAM'\nassert     encode('It was the best of times, it was the worst of times') == 'It wAs tHe sOuSt of tIes, it wAs tHe sOuS of tIes'\nassert     encode('it') == 'i'\nassert     encode('It\\'s') == 'i\\'s'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     encode(\"i am TESTING\") == \"I AM tESting\"\nassert encode(\"I am testing\") == \"i AM Tsting\"\nassert encode(\"I am testing at home\") == \"i AM testNG\"\nassert encode(\"I am testing at home\") == \"I AM Tsting\"\nassert encode(\"I am testing at home\") == \"i AM Tsting\"\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     encode('We are ready') == 'WE AREN', encode('We are ready')\nassert     encode('I can also') == 'I cAn oLu', encode('I can also')\nassert     encode('We are awesome') == 'W e aR t e m o', encode('We are awesome')\nassert     encode('We are the best') == 'W e e s t the bE', encode('We are the best')\nassert     encode('Cats are great!') == 'C e t s are grE eaT', encode('Cats are great!')\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         encode('tAnd@e') == 'tHe@e'\nassert         encode('we@m@e') == 'We@m'\nassert         encode('tHe@e') == 'tHE@e'\nassert         encode('we@e') == 'WE@e'\nassert         encode('tThe@e') == 'tTHE@e'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     encode(\"A better programmer is better than a good programmer\")     == \"b3C3D3e1f2a2b1C2D2e2f3A2B2C2D2E2F3A3B3C3D3E3F3\"\nassert     encode(\"i know programming languages\")     == \"L5k5n5o5P5r5s5a5n5o5p5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5o5P5r5s5a5n5"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     encode('Mr. Owl ate my metal worm') =='mR. OtlE owtMA wmEAT emnaM tmWorM'\nassert     encode('U D S I N G') == 'u d s i n g'\nassert     encode('SOS') =='s o s'\nassert     encode('SOMETHING') == 'S h i t t h o n g'\nassert     encode('EVERYTHING IS CONSISTENT') == 'e v r y t h i n s t e n t c o n s s c i s s t'\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     encode(\"A whole new world has appeared\")    ==    \"B wl new WOLrd has E a tivrE\"\nassert     encode(\"My name is Bob\")                    ==    \"M y n a m e n t i a n\"\nassert     encode(\"Kamal\")                                    ==    \"K m a m l\"\nassert     encode(\"YOU'RE A PIECE OF ME\")                    ==    \"Y o u R a p i c e\"\nassert     encode(\"What is the meaning of life\")            ==    \"W h a t t h a t t i n g m e n i n t s\"\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (skjkasdkd([1,2,3,4,5,6,7,8,9,10]) == [3,6])\nassert     (skjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [3,6,3])\nassert     (skjkasdkd([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [3,6,3])\nassert     (skjkasdkd([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [3,6,3])\nassert     (skjkasdkd([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49]) == [3,6,3])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     int(\"2\") == 2\nassert     int(\"7\") == 7\nassert     int(\"13\") == 13\nassert     int(\"19\") == 19\nassert     int(\"23\") == 23\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     skjkasdkd([1,2,3,4,5,6,7,8,9,10]) == 43\nassert     skjkasdkd([1,3,2,4,6,7,5]) == 43\nassert     skjkasdkd([2,3,5,7]) == 22\nassert     skjkasdkd([1,1,1]) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     skjkasdkd([13, 7, 8, 10]) == 3\nassert     skjkasdkd([7, 9, 10]) == 3\nassert     skjkasdkd([2, 13, 7, 9, 10]) == 3\nassert     skjkasdkd([13, 7, 8, 10, 4]) == 3\nassert     skjkasdkd([2, 13, 7, 9, 10, 4]) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     8 == skjkasdkd([1,7,3,2,4])\nassert    28 == skjkasdkd([1,1,1,1,1])\nassert    8 == skjkasdkd([1,1,1,2,1,3,1,1,1,1])\nassert    24 == skjkasdkd([1,1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,5])\n\nprint('all tests passed'"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     skjkasdkd(4, 6, 7) == 4\nassert     skjkasdkd(16, 17, 18) == 2\nassert     skjkasdkd(20, 21, 22) == 1\nassert     skjkasdkd(97, 98, 99) == 7\nassert     skjkasdkd(101, 102, 103) == 5\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     skjkasdkd([2,3,5,7,11,13,17,19]) == 5\nassert     skjkasdkd([]) == 0\nassert     skjkasdkd([2]) == 2\nassert     skjkasdkd([5,13,7,9,11,17,19,23]) == 6\nassert     skjkasdkd([4,5,6]) == 0\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     23 == skjkasdkd([23, 7, 42, 2])\nassert     7 == skjkasdkd([23, 7, 42, 2])\nassert     13 == skjkasdkd([23, 7, 43, 2])\nassert     7 == skjkasdkd([23, 7, 43, 3])\nassert     5 == skjkasdkd([23, 7, 43, 4])\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     skjkasdkd([1, 4, 5, 6, 2, 10, 11]) == 33\nassert     skjkasdkd([10, 10, 10, 10, 10]) == 61\nassert     skjkasdkd([100, 101, 101, 101]) == 113\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7]) == 13\n\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_dict_case({}) == True\nassert     check_dict_case({'abc': 1}) == True\nassert     check_dict_case({'Abc': 1}) == False\nassert     check_dict_case({'abc': 1, 'Abc': 1}) == False\n\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) is False\nassert     check_dict_case({1:'a', 2:'b'}) is False\nassert     check_dict_case({'a':1, 'b':2}) is False\nassert     check_dict_case({'a':'a', 'b':'b'}) is False\nassert     check_dict_case({'a':'A', 'b':'B'}) is False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_dict_case({}) == False, \"Empty dict is not a correct case\"\nassert     check_dict_case({'a':'b'}) == True, \"Only string keys are accepted\"\nassert     check_dict_case({'a':'b', 'c':'d'}) == True, \"Only string keys are accepted\"\nassert     check_dict_case({'a':'b', 'c':'d', 'e':'f'}) == False, \"Non string keys are accepted\"\nassert     check_dict_case({'a':'b', 'c':'d', 'e':'f', 'g':'h'}) == False, \"Non string keys are accepted\"\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_dict_case({\"a\": \"b\", \"b\": \"c\"}) == False\nassert     check_dict_case({\"a\": \"b\", \"b\": \"c\", \"D\": \"E\"}) == False\nassert     check_dict_case({\"a\": \"b\", \"b\": \"c\", \"d\": \"e\"}) == True\nassert     check_dict_case({}) == True\nassert     check_dict_case({\"a\": \"b\", \"b\": \"c\", \"d\": \"e\", 1: 2}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'name': 'adam', 'age': '10'}) == True\nassert     check_dict_case({'name': 'adam', 'age': 10}) == False\nassert     check_dict_case(dict.fromkeys(['name', 'age', 'class'])) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_dict_case({}) == False, 'Nothing in the dictionary'\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == True, 'Only lower-case strings'\nassert     check_dict_case({'a': 1, 'b': 2, 'C': 3}) == False, 'Only upper-case strings'\nassert     check_dict_case({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"}) == True, 'Dictionary with mixed case'\n\nif __name__ == '__main__':\n    print check_dict_case({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"})\n    print check_dict_case({'a': 1, 'b': 2, 'C': 3})"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"a\": 2}) == False\nassert     check_dict_case({\"a\": 2, \"b\":3}) == False\nassert     check_dict_case({\"a\":2, \"b\":3, \"c\":4}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_dict_case(dict1) == False\nassert     check_dict_case(dict2) == True\nassert     check_dict_case(dict3) == True\nassert     check_dict_case(dict4) == True\nassert     check_dict_case(dict5) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_dict_case({})\nassert     check_dict_case({'a': 1})\nassert     not check_dict_case({'a': 1, 'b': 2})\nassert     not check_dict_case(['a', 'b', 'c'])\nassert     not check_dict_case({'A': 1})\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == True, \"False\"\nassert     check_dict_case({'a': 1, 'b':2}) == False, \"False\"\nassert     check_dict_case({'A': 1, 'b':2}) == False, \"False\"\nassert     check_dict_case({'A': 1, 'b':2, 'C':3}) == True, \"False\""
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [2, 3, 5, 7, 11, 13, 17] == count_up_to(21)\nassert [2, 3, 5, 7, 11, 13] == count_up_to(100)\nassert [2, 3, 5, 7, 11] == count_up_to(1000)\nassert [2, 3, 5, 7, 11, 13, 17, 19, 23] == count_up_to(10000)\nassert [2, 3, 5, 7, 11, 13] == count_up_to(1000000)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_up_to(9) == [2, 3, 5, 7, 11]\nassert     count_up_to(10) == [2, 3, 5, 7, 11, 13]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_up_to(2) == [2]\nassert     count_up_to(3) == [2,3]\nassert     count_up_to(4) == [2,3]\nassert     count_up_to(5) == [2,3,5]\nassert     count_up_to(6) == [2,3,5]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert count_up_to(10) == [2, 3, 5, 7]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     count_up_to(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\nassert     count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541] == count_up_to(50000000)\nassert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541] == count_up_to(500000000)\nassert     [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541] == count_up_to(5000000000)\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_up_to(0)     == []\nassert     count_up_to(1)     == []\nassert     count_up_to(2)     == [2]\nassert     count_up_to(3)     == [2]\nassert     count_up_to(4)     == [2, 3]\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_up_to(4) == [2, 3]\nassert count_up_to(3) == [2]\nassert count_up_to(7) == [2, 3, 5, 7]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\ndef main():\n    \"\"\"\n    This program will print the prime numbers from 2 to N.\n    \"\"\"\n    # Prompt user to input the upper limit\n    n = int(raw_input(\"Please enter the upper limit: \"))\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_up_to(4) == [2, 3]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(11) == [2, 3, 5, 7, 11]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply(51, 22) == 52\nassert     multiply(11, 31) == 32\nassert     multiply(55, 98) == 64\nassert     multiply(71, 55) == 71\nassert     multiply(12, 24) == 24\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     multiply(12, 98) == 59\nassert     multiply(99, 11) == 99\nassert     multiply(23, 3) == 39\nassert     multiply(99, 1234) == 899\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     multiply(99, 45) == 45 * 99\nassert     multiply(44, 99) == 44 * 99\nassert     multiply(99, 0) == 0\nassert     multiply(99, 44) == 44 * 99\nassert     multiply(99, 99) == 99 * 99\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     multiply(12, 123) == 12\nassert     multiply(1, 12) == 1\nassert     multiply(12, 123) == 12\nassert     multiply(1, 0) == 0\nassert     multiply(0, 12) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     multiply(100, 21) == 21\nassert     multiply(999, 999) == 9999999999\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of n.\n    Assume n is a non-negative integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     multiply(12, 15) == 60\nassert     multiply(12, 12) == 144\nassert     multiply(12, 0) == 0\nassert     multiply(0, 12) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     multiply(13, 19) == 19\nassert     multiply(34, 7) == 10\nassert     multiply(38, 51) == 9\nassert     multiply(26, 13) == 9"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     multiply(2, 3) == 6\nassert     multiply(9, 7) == 729\nassert     multiply(5, 5) == 25\nassert     multiply(0, 3) == 0\nassert     multiply(5, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     multiply(12, 121) == 12\nassert multiply(23, 29) == 29\nassert multiply(0, 0) == 0\nassert multiply(9, 0) == 0\nassert multiply(0, 11) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_upper('hello') == 2\nassert     count_upper('Edabit Is Awesome!') == 1\nassert     count_upper('HackerRank is the best platform') == 6\nassert     count_upper('No uppercase vowels in this sentence') == 0\nassert     count_upper('UPPERCASE VOWEL') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_upper('aaaa') == 2\nassert     count_upper('AAAA') == 4\nassert     count_upper('aaaaa') == 4\nassert     count_upper('AAAAA') == 5\nassert     count_upper('aaaaAA') == 4\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_upper(\"hello\") == 1\nassert     count_upper(\"How are you?\") == 2\nassert     count_upper(\"\") == 0\nassert     count_upper(\"This is a test\") == 1\nassert     count_upper(\"This is a test.\") == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_upper(\"\") == 0\nassert     count_upper(\"ab\") == 0\nassert     count_upper(\"a\") == 0\nassert     count_upper(\"f\") == 0\nassert     count_upper(\"q\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     count_upper('echo') == 2\nassert     count_upper('coach') == 1\nassert     count_upper('elephant') == 1\nassert     count_upper('Rhythm') == 0\nassert     count_upper('bleu') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_upper('This is a test') == 1\nassert     count_upper('This is a test.') == 1\nassert     count_upper('This is a test, yes!') == 2\nassert     count_upper('Why not go to the store and buy a used parser?') == 0\nassert     count_upper('Python Rocks!') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (count_upper(\"This is a test string\") == \"hT\")\nassert     (count_upper(\"This is another test string\") == \"H\")\nassert     (count_upper(\"Oh, God, it is a test string\") == \"H\")\nassert     (count_upper(\"Another test string\") == \"\")\nassert     (count_upper(\"\") == \"\")\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_upper(\"aaBBbb\") == \"BBBBBBBB\"\nassert     count_upper(\"abc\") == \"ABC\"\nassert     count_upper(\"ABC\") == \"ABC\"\nassert     count_upper(\"Hello World\") == \"HELLO WORLD\"\nassert     count_upper(\"Hello World!\") == \"HELLO WORLD!\"\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_upper(\"abc\") == 0\nassert     count_upper(\"abcdef\") == 1\nassert     count_upper(\"bCdEf\") == 1\nassert     count_upper(\"abcdefgh\") == 0\nassert     count_upper(\"ABCDEFGH\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_upper('the quick brown fox jumped over the lazy dog') == 2\nassert     count_upper('aba') == 0\nassert     count_upper('abc') == 0\nassert     count_upper('abcd') == 0\nassert     count_upper('The Quick Brown Fox jumped over the lazy Dog') == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     ( closest_integer(\"14.5\") == 15 )\nassert     ( closest_integer(\"-14.5\") == -15 )\n\nassert     ( closest_integer(\"-14.6\") == -15 )\nassert     ( closest_integer(\"14.6\") == 15 )\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-1.7\") == -1\nassert     closest_integer(\"1.7\") == 1\nassert     closest_integer(\"1.5\") == 1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\")         == 15\nassert     closest_integer(\"-14.5\")     == -15\nassert     closest_integer(\"-8\")         == -8\nassert     closest_integer(\"1.4\")         == 1\nassert     closest_integer(\"-1.4\")     == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     closest_integer(\"15\") == 15\nassert     closest_integer(\"-15\") == -15\nassert     closest_integer(\"0\") == 0\nassert     closest_integer(\"1.1\") == 1\nassert     closest_integer(\"-1.1\") == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"13\") == 13\nassert     closest_integer(\"-13\") == -13\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     closest_integer(\"13.5\") == 14\nassert     closest_integer(\"-13.5\") == -14\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"13.9\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-1.0\") == -1\nassert     closest_integer(\"-2.0\") == -2\nassert     closest_integer(\"-3.0\") == -3\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"0.5\") == 0\nassert     closest_integer(\"1.5\") == 2\nassert     closest_integer(\"-0.5\") == -1\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [3]\nassert     make_a_pile(4) == [4, 3]\nassert     make_a_pile(5) == [5, 4, 3]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 2]\nassert     make_a_pile(4) == [1, 1, 2, 3]\nassert     make_a_pile(5) == [1, 1, 2, 3, 4]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     make_a_pile(5)    == [5, 5]\nassert     make_a_pile(10)    == [10, 10, 10, 10, 10]\nassert     make_a_pile(1)    == [1]\nassert     make_a_pile(0)    == []\n\ndef make_a_pile_recur(n):\n    \"\"\"\n    To make a pile of n levels, you need to make the first n levels of stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    # base case\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    else:\n        # get the last level number\n        # it is the max(2*n, 4)\n        last_level = 2 * n\n        if n % 2 == 1:\n            last_level = max(last_level, 4)\n        \n        # recursive case\n        level_num = make_a_pile_recur(n - 1)\n        level_num.append(last_level)\n        return level_num\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(4) == [1, 3, 3, 1]\nassert     make_a_pile(5) == [1, 4, 6, 4, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print make_a_pile(3"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     make_a_pile(0) == [0]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(4) == [4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [3, 2, 1]\nassert     make_a_pile(4) == [4, 3, 2, 1]\nassert     make_a_pile(5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(3) == [1, 2]\nassert     make_a_pile(5) == [1, 2, 3]\nassert     make_a_pile(7) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     make_a_pile(4) == [1, 2, 3, 4]\nassert     make_a_pile(3) == [1, 2, 3]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(0) == []\nassert     make_a_pile(5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\nassert     make_a_pile(6) == [1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_string(\"this, is a string\") == ['this', 'is', 'a','string'], \"example\"\nassert     words_string(\"you, me, a comma, separated, word\") == ['you','me', 'a', 'comma','separated', 'word'], \"example\"\nassert     words_string(\"what,a,great,kata,?\") == ['what', 'a', 'great', 'kata', '?'], \"example\"\nassert     words_string(\"and,paradox,of,strings\") == ['and', 'paradox', 'of','strings'], \"example\"\nassert     words_string(\"to,be,or,not,to,be\") == ['to', 'be', 'or', 'not', 'to', 'be'], \"example\"\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_string(\"hello,world,hello,goodbye,world\") == [\"hello\",\"world\",\"hello\",\"goodbye\",\"world\"]\nassert     words_string(\"hello,goodbye,hello,hello,world\") == [\"hello\",\"goodbye\",\"hello\",\"hello\",\"world\"]\nassert     words_string(\"hello,world,foo,bar\") == [\"hello\",\"world\",\"foo\",\"bar\"]\nassert     words_string(\"a,big,bigger,bite,chips,chip,dog\") == [\"a\", \"big\", \"bigger\", \"bite\", \"chips\", \"chip\", \"dog\"]\nassert     words_string(\"hello,world,hello,goodbye,world\") == [\"hello\", \"world\", \"hello\", \"goodbye\", \"world\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_string(\"apple,banana,orange,grape,pineapple\") == [\"apple\", \"banana\", \"orange\", \"grape\", \"pineapple\"]\nassert     words_string(\"apple, banana,  orange,grape,pineapple\") == [\"apple\", \"banana\", \"orange\", \"grape\", \"pineapple\"]\nassert     words_string(\"a, b,c, d\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     words_string(\"a, ,b,c,d,e,f,g,h,i,j,k,l,m,n\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]\nassert     words_string(\"\") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_string(\"Hello, World\") == ['Hello', 'World']\nassert     words_string(\"Hello World, this;is? a, test\") == ['Hello', 'World', 'this', 'is', 'a', 'test']\nassert     words_string(\"I;m;a;student\") == ['I', 'a','student']\nassert     words_string(\"\") == []\n\n\ndef longest_word(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and find the word with the longest length.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_string(\"one,two,three\")         == ['one', 'two', 'three'], \"wrong result for simple string\"\nassert     words_string(\"one,two,three  four\")     == ['one', 'two', 'three', 'four'], \"wrong result for string with spaces\"\nassert     words_string(\"one,two,three  four  five\")     == ['one', 'two', 'three', 'four', 'five'], \"wrong result for a bit more space\"\nassert     words_string(\"one,two,three  four\")     == ['one', 'two', 'three', 'four'], \"wrong result for a comma at the end\"\nassert     words_string(\"one,two,three  four  five  six  seven\")     == ['one', 'two', 'three', 'four', 'five','six','seven'], \"wrong result for a bit more space\"\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_string('hello,world,my,name,is,my,name,is,abcd,bcd') == ['hello','world','my','name','is','my','name','is','abcd','bcd']\nassert     words_string('a,b,c,d') == ['a','b','c','d']\nassert     words_string('i,am,a,monkey,i,am,a,monkey') == ['i','am','a','monkey','i','am','a','monkey']\nassert     words_string(',,,, ,') == [',',',',',',',',',',',',',',',',',',',',',',',',','','']\nassert     words_string(',') == [',',',',',',',',',',',',',',',',',',',',',',',',',',',',',',',',',',',','','']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_string(\"Hello, World\")     ==    [\"Hello\", \"World\"]\nassert     words_string(\"Hello, World,\")     ==     [\"Hello\", \"World\", \",\"]\nassert     words_string(\"Hello, World, how are you?\")     ==    [\"Hello\", \"World\", \"how\", \"are\", \"you\", \"?\"]\n\ndef fruits_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into fruits and return an array of the fruits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_string('you, me, a, cat, want, a, big, cat') == ['you','me', 'a', 'cat', 'want', 'a', 'big', 'cat']\nassert     words_string('hello,world,how,are,you,today') == ['hello', 'world', 'how', 'are', 'you', 'today']\nassert     words_string(',') == []\nassert     words_string('hello, a, cat, want, a, big, cat') == ['hello', 'a', 'cat', 'want', 'a', 'big', 'cat']\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_string(\"hello,world\") ==     [\"hello\",\"world\"]\nassert     words_string(\"hello,     world\") ==     [\"hello\",\"world\"]\nassert     words_string(\"hello,   world\") ==     [\"hello\",\"world\"]\nassert     words_string(\"hello,    world\") ==     [\"hello\",\"world\"]\nassert     words_string(\"hello, world\") ==     [\"hello\",\"world\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_string(\"b,a,n,a,t,h,a,p,p,a,r,a,a,a,a,b,a,e\") == [\"b\", \"a\", \"n\", \"a\", \"t\", \"h\", \"a\", \"p\", \"p\", \"a\", \"r\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"e\"]\nassert     words_string(\"b,a,n,a,t,h,a,p,p,a,r,a,a,a,a,b,a,e\") == [\"b\", \"a\", \"n\", \"a\", \"t\", \"h\", \"a\", \"p\", \"p\", \"a\", \"r\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"e\"]\nassert     words_string(\"b,a,n,a,t,h,a,p,p,a,r,a,a,a,a,b,a,e\") == [\"b\", \"a\", \"n\", \"a\", \"t\", \"h\", \"a\", \"p\", \"p\", \"a\", \"r\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"e\"]\nassert     words_string(\"b,a,n,a,t,h,a,p,p,a,r,a,a,a,a,b,a,e\") == [\"b\", \"a\", \"n\", \"a\", \"t\", \"h\", \"a\", \"p\", \"p\", \"a\", \"r\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"e\"]\nassert     words_string(\"b,a,n,a,t,h,a,p,p,a,r,a,a,a,a,b,a,e\") == [\"b\", \"a\", \"n\", \"a\", \"t\", \"h\", \"a\", \"p\", \"p\", \"a\", \"r\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"e\"]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     choose_num(3, 3) == 4\nassert     choose_num(3, 4) == -1\nassert     choose_num(2, 4) == 4\nassert     choose_num(5, 9) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     choose_num(1, 3) == 2\nassert     choose_num(1, 2) == -1\nassert     choose_num(2, 4) == 2\nassert     choose_num(4, 8) == 4\nassert     choose_num(3, 5) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     choose_num(5, 10) == 7\nassert     choose_num(5, 8) == -1\nassert     choose_num(5, 5) == -1\nassert     choose_num(10, 11) == -1\n\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     choose_num(0, 10) == 2\nassert     choose_num(5, 10) == 6\nassert     choose_num(3, 5) == -1\nassert     choose_num(7, 11) == -1\nassert     choose_num(-3, -3) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (choose_num(2, 3) == 4)\nassert     (choose_num(10, 11) == -1)\nassert     (choose_num(1, 2) == -1)\nassert     (choose_num(2, 2) == 2)\nassert     (choose_num(3, 4) == 2)\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     choose_num(1, 100) == 50\nassert     choose_num(100, 150) == 150\nassert     choose_num(0, 100) == -1\nassert     choose_num(0, 0) == -1\nassert     choose_num(-1, 1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     choose_num(10, 12) == 10\nassert     choose_num(11, 12) == 11\nassert choose_num(10, 11) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     choose_num(0, 10) == -1\nassert     choose_num(1, 10) == -1\nassert     choose_num(10, 1) == -1\nassert     choose_num(1, 2) == 2\nassert     choose_num(2, 2) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     choose_num(1, 9) == 6\nassert     choose_num(1, -1) == -1\nassert     choose_num(-10, 10) == -1\nassert     choose_num(10, -1) == -1\nassert     choose_num(-10, 0) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     choose_num(10, 20) == 10\nassert     choose_num(0, 10) == 10\nassert choose_num(3, 5) == -1\nassert choose_num(10, 10) == -1\nassert choose_num(15, 50) == 40\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rounded_avg(1, 5) == 1.5\nassert     rounded_avg(2, 4) == 1.5\nassert     rounded_avg(3, 5) == 2\nassert     rounded_avg(5, 5) == 2\nassert     rounded_avg(6, 5) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     rounded_avg(5, 17) == 7\nassert     rounded_avg(5, 19) == 8\nassert     rounded_avg(5, 26) == -1\nassert     rounded_avg(0, 26) == -1\n\n\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     rounded_avg(5, 10) == 6\nassert     rounded_avg(9, 10) == 8\nassert     rounded_avg(10, 8) == -1\nassert     rounded_avg(0, 10) == -1\nassert     rounded_avg(5, 0) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     rounded_avg(4, 7) == 5\nassert     rounded_avg(100, 200) == 200\nassert     rounded_avg(25, 40) == -1\nprint('correct:')\n\nif __name__ == \"__main__\":\n    print(rounded_avg(100, 200))"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     rounded_avg(11, 13) == 12\nassert     rounded_avg(0, 1) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     round_avg(10, 11) == 10\nassert     round_avg(1, 100) == -1\nassert     round_avg(0, 100) == -1\nassert     round_avg(11, 20) == 11\nassert     round_avg(0, -1) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     rounded_avg(11, 22) == -1\nassert rounded_avg(1, 100) == 1\nassert     rounded_avg(15, 17) == 19\nassert     rounded_avg(0, 0) == 0\n\ndef xor_sum(n, m):\n    \"\"\"You are given two non-negative integers n and m. Let n\u2019 and m\u2019 denote the sum\n    of the integers from n through m, respectively. The bitwise XOR of n and m is\n    n\u2019 ^ m\u2019, where \u2019^\u2018 indicates bitwise XOR. The task is to find the bitwise XOR of\n    n\u2019 and m\u2019.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \nrounded_avg(1, 2) == 1\nrounded_avg(1, 3) == 1.5\nrounded_avg(1, 4) == 1\nrounded_avg(2, 3) == 2\nrounded_avg(3, 4) == 3\nrounded_avg(2, 5) == -1\nrounded_avg(4, 5) == -1\nrounded_avg(1, 10) == 1\nrounded_avg(10, 19) == 1\nrounded_avg(5, 19) == -1\nrounded_avg(15, 19) == -1\nrounded_avg(20, 19) == -1\n\n\ndef get_bin(num):\n    \"\"\"\n    We assume num to be an integer, n. \n    Return a string which is a binary representation of n.\n    If n is 0, the return string should be empty string.\n    For example, get_bin(0) should return ''.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     rounded_avg(4, 6) == 4.5\nassert     rounded_avg(3, 9) == 4\nassert     rounded_avg(3, 9.5) == 4\nassert     rounded_avg(1, 100) == 0\nassert     rounded_avg(1, 0) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     rounded_avg(2, 3) == 2\nassert     rounded_avg(0, 3) == -1\nassert     rounded_avg(3, 4) == -1\nassert     rounded_avg(1, 3) == -1\nassert     rounded_avg(2, 4) == 3\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique_digits([1, 11, 22, 33, 44]) == [1, 22, 33, 44]\nassert     unique_digits([10, 12, 22, 22, 22, 22, 22]) == [10]\nassert     unique_digits([111, 222, 333, 4444, 55555]) == [111, 222, 333, 4444, 55555]\n\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     unique_digits([12,34,45,5,6,7,8,9,10,15])==[1,2,3,4,5,6,7,8,9,10]\nassert     unique_digits([12,34,45,5,6,7,8,9,10])==[1,2,3,4,5,6,7,8,9,10]\nassert     unique_digits([12,34,45,5,6,7,8,9])==[1,2,3,4,5,6,7,8,9]\nassert     unique_digits([12,34,45,5,6])==[1,2,3,4,5,6]\nassert     unique_digits([12,34,45,5])==[1,2,3,4,5]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     unique_digits([7, 5, 6, 2, 1, 3, 3, 7, 1]) == [1, 2, 3, 5, 6, 7]\nassert     unique_digits([7, 5, 6, 2, 1, 1]) == [1]\nassert     unique_digits([7, 5, 6, 2, 1, 2, 3, 7, 1]) == [1, 2, 3, 5, 6, 7]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == []\nassert     unique_digits([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     unique_digits(x) == sorted_unique_digits(x)\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     unique_digits([123, 456, 789, 102]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([123, 321]) == [1, 2, 3]\nassert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([]) == []\nassert     unique_digits([123, 123]) == [123]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     unique_digits([13, 19, 26, 29, 30]) == [1, 3, 5, 7, 9, 10, 11, 12, 19, 21, 22, 23, 26, 29, 30]\nassert     unique_digits([1, 1, 2, 2, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert     unique_digits([3, 5, 6, 7, 8, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([3, 5, 6, 7, 8, 9, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     unique_digits([12,34,5,6,78,9,10]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([0,1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique_digits([0,1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([10,11,12,13]) == [10, 11, 12, 13]\nassert     unique_digits([4,3,2,1,0]) == [4, 3, 2, 1]\nassert     unique_digits([1,3,5,7]) == [1, 3, 5, 7]\nassert     unique_digits([1,1,3,4,5,5,7,8,9]) == [1, 3, 4, 5, 7]\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     unique_digits(    [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits(    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     unique_digits(    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     unique_digits(    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits(    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     by_length([1, 9, 2, 8, 3, 7, 4, 6, 5]) == \"NineteenOne NineEight TwoEight ThreeSeven FourSix FiveFive SixSeven SevenEight EightNine\"\nassert by_length([]) == \"\"\nassert     by_length([1, 2, 3]) == \"ThreeTwo Three\"\nassert     by_length([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == \"TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwenty TwentyTwent"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     by_length([1, 4, 6, 3, 5, 7, 2, 9]) == ['Eight', 'Five', 'Seven', 'Three', 'One', 'Four', 'Six', 'Two', 'Nine']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\n\n\n\n\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     by_length([5, 9, 3, 2, 4, 8, 6, 7, 1]) == [\"Seven\", \"Eight\", \"Nine\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert     by_length([9, 2, 4, 3, 7, 1, 8, 6, 5]) == [\"One\", \"Eight\", \"Six\", \"Three\", \"Seven\", \"Five\", \"Two\", \"Four\", \"Nine\"]\nassert     by_length([2, 1, 9, 8, 3, 4, 7, 6, 5]) == [\"Eight\", \"One\", \"Four\", \"Seven\", \"Five\", \"Six\", \"Three\", \"Two\", \"Nine\"]\nassert     by_length([4, 5, 3, 2, 9, 1, 8, 6, 7]) == [\"Five\", \"Eight\", \"Seven\", \"Four\", \"One\", \"Three\", \"Two\", \"Six\", \"Nine\"]\nassert     by_length([5, 8, 9, 7, 6, 1, 4, 2, 3]) == [\"Five\", \"Eight\", \"Seven\", \"Four\", \"One\", \"Three\", \"Two\", \"Six\", \"Nine\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0']\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0', '10']\nassert     by_length([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) ==     ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0', '11']\n\ndef by_permutations(arr):\n    \"\"\"\n    Given an array of integers, return a list of the permutations of those integers in any order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     by_length([4, 5, 6, 7, 8, 9]) ==     \"EightFiveSixSevenEightNine\"\nassert     by_length([8, 9, 10, 11, 12, 1, 2, 3]) ==     \"EightOneTwoThreeTenElevenTwelveOne\"\nassert     by_length([0, 0, 0, 0, 0]) ==     \"ZeroZeroZeroZeroZeroZero\"\nassert     by_length([9, 9, 9, 9, 9]) ==     \"NineNineNineNineNineNine\"\nassert     by_length([]) ==     \"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         [by_length([1, 3, 9, 8, 2, 5, 4, 6, 7, 0])\n                ==\n                ['One', 'Three', 'Five', 'Eight', 'Two', 'Four', 'Six', 'Seven', 'Nine']]\nassert         [by_length([1, 2, 9, 8, 3, 5, 4, 6, 7, 0])\n                ==\n                ['Seven', 'Eight', 'Three', 'Four', 'Six', 'One', 'Five', 'Two', 'Nine']]\nassert         [by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n                ==\n                ['Nine', 'Eight', 'Seven', 'Sevice', 'Six', 'Five', 'Four', 'Three', 'Two']]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     by_length([1,3,4,5,2,2,1,1,2,4,5,6,7,1,2,3,1,2,3,4,1,1,2,1,2,3,1,3,2,4,1,1,2,1,1,2,1,1,3,1,2,4,1,1,2,1,1,1,1,2,1,3,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     by_length([5, 2, 3, 2, 6, 6, 5, 1, 3, 2]) == \"Five One Two Three Two Six Six Five Seven Eight Nine\"\nassert by_length([2, 3, 4, 5, 6, 7, 8, 9, 1]) == \"Eight Nine One Two Three Four Five Six Seven Eight Nine One\"\nassert by_length([4, 5, 6, 7, 8, 1, 2, 3]) == \"One Two Three Four Five Six Seven Eight Nine One Two Three Four\"\nassert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"One Two Three Four Five Six Seven Eight Nine One Two Three Four\"\n\nprint \"Passed!\""
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     by_length([1, 3, 9, 10, 12]) ==     [\n                    \"One\", \n                    \"Three\", \n                    \"Nine\", \n                    \"Ten\", \n                    \"Twelve\"]\nassert     by_length([5, 8, 9, 1, 3, 7, 4, 10, 6, 2]) ==     [\n                    \"Five\", \n                    \"Eight\", \n                    \"Nine\", \n                    \"One\", \n                    \"Three\", \n                    \"Seven\", \n                    \"Four\", \n                    \"Ten\", \n                    \"Six\", \n                    \"Two\"]\nassert     by_length([]) == []\nassert     by_length([10, 2]) == [\"Two\", \"One\"]"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [by_length(range(0, 10)) == ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']]\nassert     [by_length(range(10, 20)) == ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']]\nassert     [by_length(range(20, 30)) == ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']]\nassert     [by_length(range(30, 40)) == ['Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety', 'Hundred']]\nassert     [by_length(range(40, 50)) == ['Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety', 'Hundred', 'Thousand']]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     [f(i) for i in range(1, 10)] == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert     [f(i) for i in range(1, 10)] == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert     [f(i) for i in range(1, 10)] == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         [f(1), \n                f(2), \n                f(3), \n                f(4), \n                f(5), \n                f(6), \n                f(7), \n                f(8), \n                f(9), \n                f(10), \n                f(11), \n                f(12), \n                f(13), \n                f(14), \n                f(15), \n                f(16)] == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     f(10) == [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert     f(2) == [1, 1]\nassert     f(1) == [1]\nassert     f(3) == [1, 2, 6]\nassert     f(6) == [1, 2, 6, 24, 120, 720]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [f(2) == [1,2,6],\n            f(3) == [1,2,6,24],\n            f(4) == [1,2,6,24,120],\n            f(5) == [1,2,6,24,120,5040]], \"Error: The factorial of a number is the product of numbers from 1 to that number\"\n\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1,2]\nassert     f(5) == [1,2,6,24,120]\nassert     f(10) == [1,2,6,24,120,720,5040,40320,362880,3628800]\nprint \"f is correct!\"\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [f(2),\n            [1, 1],\n            [1, 2, 2],\n            [1, 2, 6],\n            [1, 3, 6, 6],\n            [1, 4, 10, 20, 10, 4],\n            [1, 5, 15, 35, 105, 255, 1050, 3025, 12012, 46656, 151200, 62370, 2073600, 737280],\n            [1, 6, 24, 120, 720, 2520, 5040, 1440, 840, 3360, 13100, 46880, 1628800, 676560],\n            [1, 7, 28, 840, 2880, 5680, 1680, 1320, 924, 5040, 2560, 1440, 10160, 49280, 1968000],\n            [1, 8, 32, 1440, 5760, 2640, 1232, 552, 2728, 1680, 10160, 49280, 1968000, 7355280],\n            [1, 9, 36, 552, 3024, 1344, 702, 4560, 3072, 2128, 1728, 10160, 49280, 1968000, 7355280],\n            [1, 10, 40, 702, 4116, 2688, 1376, 5760, 4368, 3072, 2128, 1728, 10160, 49280, 1968000, 7355280]]\n            == f(10)\n\nassert     [f(2),\n            [1, 1],\n            [1, 2, 2],\n            [1, 2, 6],\n            [1, 3, 6, 6],\n            [1, 4, 10, 20, 10, 4],\n            [1, 5, 15, 35, 105, 255, 1050, 3025, 12012, 46656, 151200, 62370, 2073600, 737280],\n            [1, 6, 24, 120, 720, 2520, 5040, 1440, 840, 3360, 13100, 46880, 1628800, 676560],\n            [1, 7, 28, 840, 2880, 5680, 1680, 1320, 924, 5040, 2560, 1440, 10160, 49280, 1968000],\n            [1, 8, 32, 1440, 5760, 2640, 1232, 552, 2728, 1680, 10160, 49280, 1968000, 7355280],\n            [1, 9, 36, 552, 3024, 1344, 702, 4560, 3072, 2128, 1728, 10160, 49280, 1968000, 7355280],\n            [1, 10, 40, 702, 4116, 2688, 1376, 5760, 4368, 3072, 2128, 1728, 10160, 49280, 1968000, 7355280]]\n            == f(11)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, 10)] \\\n        == f(10)\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [f(i) for i in range(5)] ==     [1, 2, 6, 24, 120]\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10)     == (4, 2)\nassert     even_odd_palindrome(100)     == (9, 1)\nassert     even_odd_palindrome(1000)     == (8, 4)\nassert     even_odd_palindrome(10000)     == (9, 1)\nassert     even_odd_palindrome(1000001)     == (9, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (2, 0)\nassert     even_odd_palindrome(3) == (2, 1)\nassert     even_odd_palindrome(4) == (2, 2)\nassert     even_odd_palindrome(5) == (3, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(12) == (1, 0)\nassert     even_odd_palindrome(123) == (1, 0)\nassert     even_odd_palindrome(123456789) == (1, 0)\nassert     even_odd_palindrome(1234567890) == (1, 1)\nassert     even_odd_palindrome(1234) == (0, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(100) == (2, 2)\nassert     even_odd_palindrome(200) == (2, 4)\nassert     even_odd_palindrome(99) == (2, 2)\nassert     even_odd_palindrome(0) == (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(10) == (5, 0)\nassert     even_odd_palindrome(100) == (25, 25)\nassert     even_odd_palindrome(1000) == (250, 250)\nassert     even_odd_palindrome(10000) == (2500, 2500)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert ___________ == even_odd_palindrome(10)\nassert ___________ == even_odd_palindrome(100)\nassert ___________ == even_odd_palindrome(1000)\nassert ___________ == even_odd_palindrome(10000)\nassert ___________ == even_odd_palindrome(100000)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(8) == (3, 3)\nassert     even_odd_palindrome(9) == (4, 1)\nassert     even_odd_palindrome(10) == (4, 2)\nassert     even_odd_palindrome(11) == (5, 1)\nassert     even_odd_palindrome(12) == (6, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (2, 0)\nassert     even_odd_palindrome(5) == (2, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(1)     == (0, 0)\nassert     even_odd_palindrome(2)     == (0, 1)\nassert     even_odd_palindrome(3)     == (0, 2)\nassert     even_odd_palindrome(4)     == (1, 2)\nassert     even_odd_palindrome(5)     == (2, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (1, 0)\nassert     even_odd_palindrome(4) == (0, 0)\nassert     even_odd_palindrome(5) == (0, 1)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_nums([1, 2, 3, 4, 5, 6]) == 6\nassert     count_nums([-1, 2, 3, 4, 5, 6]) == 6\nassert     count_nums([0, 1, 2, 3, 4, 5, 6]) == 6\nassert     count_nums([-1, -2, -3, -4, -5, -6]) == 6\nassert     count_nums([-3, -2, -1, 0, 1, 2, 3]) == 6\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     count_nums([-1, 2, 3]) == 2, 'fail'\nassert     count_nums([1, 2, 3]) == 1, 'fail'\nassert     count_nums([-123, -1, 0, 1, 2, 3]) == 3, 'fail'\nassert     count_nums([]) == 0, 'fail'\nassert     count_nums([1]) == 1, 'fail'\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([2,2,3,3]) == 3\nassert     count_nums([-2,-2,3,3]) == 3\nassert     count_nums([2,2,3,3,-3]) == 2\nassert     count_nums([2,-2,3,3,-3]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     count_nums([-12, -1, -123]) == 1\nassert     count_nums([-3, -3, -3, -3, -3]) == 0\nassert     count_nums([-123, -112, -12, -21, -2]) == 2\nassert     count_nums([-123, -112, -12, -21, -2]) == 2\nassert     count_nums([-123, -112, -12, -21, -2]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     count_nums([-123, 123, 456]) == 1\nassert     count_nums([-123, -123, 123]) == 2\nassert     count_nums([123, -123, 0]) == 2\nassert     count_nums([]) == 0\nassert     count_nums([-123, -123, -123]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     count_nums([1, 5, -3, 6, 3, 4, -2, -3, 0, 9]) == 5\nassert     count_nums([1, -5, -3, 6, 3, 4, -2, -3, 0, 9]) == 5\nassert     count_nums([-1, -5, -3, 6, 3, 4, -2, -3, 0, 9]) == 4\nassert     count_nums([-1, -5, -3, 6, 3, 4, -2, -3, 0, 9, 0]) == 6\nassert     count_nums([-1, -5, -3, 6, 3, 4, -2, -3, 0, 9, 10]) == 6\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     count_nums([1, 2, 3, 4, 5]) == 5\nassert     count_nums([-1, -2, -3, -4, -5]) == 5\nassert     count_nums([-123, -2, -3, -4, -5]) == 5\n\ndef count_nums_2(arr):\n    \"\"\"\n    Write a function count_nums_2 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    result = 0\n    for num in arr:\n        if num > 0:\n            sign = 1\n        else:\n            sign = -1\n            num = -num\n        digit_sum = sum([int(digit) for digit in str(num)]) * sign\n        if digit_sum > 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     count_nums([7,3,9,5]) == 2\nassert     count_nums([-7,3,-9,5]) == 2\nassert     count_nums([-7,-3,-9,-5]) == 2\nassert     count_nums([]) == 0\nassert     count_nums([-7,-3,-9,-5,7]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     count_nums([1,2,3,4]) == 1\nassert count_nums([-1,2,3,4]) == 3\nassert count_nums([1,-2,3,4]) == 2\nassert count_nums([1,-2,-3]) == 3\nassert count_nums([-1,-2,-3]) == 3\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     move_one_ball([1,2,3]) == False\nassert     move_one_ball([3,2,1]) == True\nassert     move_one_ball([]) == True\nassert     move_one_ball([2]) == True\nassert     move_one_ball([2,1]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     move_one_ball([3, 5, 6, 9, 11, 12, 1]) == True\nassert     move_one_ball([3, 5, 6, 9, 11, 12]) == True\nassert     move_one_ball([3, 5, 6, 9, 11, 12, 1, 2]) == False\nassert     move_one_ball([5, 6, 9, 11, 12, 1]) == False\nassert     move_one_ball([]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     move_one_ball([1,2,3,4]) == True\nassert     move_one_ball([]) == True\nassert     move_one_ball([1,2,3,4,5]) == False\nassert     move_one_ball([5,4,3,2,1]) == False\nassert     move_one_ball([5,4,3,2,1,0]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     move_one_ball([1, 2, 3]) == True\nassert     move_one_ball([3, 2, 1]) == True\nassert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([5, 4, 3, 2, 1]) == False\nassert     move_one_ball([5, 4, 3, 2, 1]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     move_one_ball([1, 1, 0, 1, 0])\nassert     move_one_ball([1, 1, 0, 1, 0, 1])\nassert     move_one_ball([1, 1, 1, 0])\nassert     move_one_ball([1, 0, 1])\nassert     move_one_ball([])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     True == move_one_ball( [ 1, 2, 3, 4, 5 ] )\nassert     True == move_one_ball( [ 2, 1, 3, 4, 5 ] )\nassert     False == move_one_ball( [ 1, 2, 3, 4, 4 ] )\nassert     True == move_one_ball( [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ] )\nassert     False == move_one_ball( [ 1, 1, 1, 1 ] )\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     move_one_ball([0,0,1,2,4,5,6,7])\nassert     not move_one_ball([1,2,3,4,5,6,7])\nassert     not move_one_ball([])\nassert     move_one_ball([0])\nassert     move_one_ball([0,1,2,3,4,5,6,7])\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     move_one_ball([2, 1, 5, 4, 3]) is True\nassert     move_one_ball([5, 1, 4, 3, 2]) is False\nassert     move_one_ball([1, 1, 1, 1, 1]) is True\nassert     move_one_ball([1, 3, 2, 4, 6, 5, 7, 8, 9, 10, 11]) is True\nassert     move_one_ball([2, 1, 4, 3]) is False\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     move_one_ball([3, 1, 2]) == True\nassert     move_one_ball([1, 2, 3]) == False\nassert     move_one_ball([2, 1, 3]) == False\nassert     move_one_ball([2, 3, 1]) == False\nassert     move_one_ball([1, 2, 3]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     move_one_ball([1,2,3,4,5,6,7,8])\nassert not move_one_ball([1,2,3,4,5,6,7,8,0])\nassert not move_one_ball([1,2,3,4,5,6,7,8,9])\nassert not move_one_ball([1,2,3,4,5,6,7,8,9,10])\nassert not move_one_ball([1,2,3,4,5,6,7,8,9,10,11])\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert     exchange([2, 3, 4, 1], [2, 3, 4, 1]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [1, 2, 3, 5]) == \"NO\"\nassert     exchange([1, 1, 2, 2, 3, 3], [1, 1, 2, 2, 3, 4]) == \"NO\"\nassert     exchange([1, 2, 2, 2, 3, 3], [1, 1, 2, 2, 3, 4]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     exchange([1,2,3,4,5,6], [1,3,5,7]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], []) == \"NO\"\nassert     exchange([1,2,3,4,5,6], [1,2,3]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [1,2,3,4]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [1,2,3,6,5,4]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     exchange([1, 3, 5], [2, 4, 6]) == \"NO\"\nassert     exchange([2, 4, 6], [1, 3, 5]) == \"YES\"\nassert     exchange([1, 1, 5], [2, 4, 6]) == \"YES\"\nassert     exchange([2, 4, 6], [1, 1, 5]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     exchange([1,3,5,7], [2,4,6,8]) == \"NO\"\nassert     exchange([1,2,3,4,5,6], [1,3,5,7,9,11]) == \"YES\"\nassert     exchange([2,4,6], [2,4,6,8]) == \"YES\"\nassert     exchange([2,4,6], [3,5,7,8,9,10]) == \"NO\"\nassert     exchange([1,2,3], [1,2,3,4]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     exchange([1, 4, 7], [2, 3, 6]) == \"NO\"\nassert     exchange([1, 3, 7], [2, 4, 6]) == \"YES\"\nassert     exchange([2, 4, 6], [1, 3, 7]) == \"YES\"\nassert     exchange([1, 4, 6, 7], [2, 3]) == \"NO\"\nassert     exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12, 14]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == \"NO\"\nassert     exchange([], []) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     exchange([1, 1, 1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) == \"NO\"\nassert     exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"\nassert     exchange([1, 2, 3], [1, 2, 3]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     exchange([1,2,3,4], [3,4,5,6]) == \"YES\"\nassert     exchange([1,2,3], [4,5,6]) == \"NO\"\nassert     exchange([3,5,7], [1,2,3]) == \"YES\"\nassert     exchange([3,5,7,9], [1,2,3,4,5]) == \"YES\"\nassert     exchange([3,5,7,9], [1,2,3,4,5,6,7,8,9]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     exchange([1, 3, 4, 5, 6, 7], [5, 8, 1, 3, 7, 9]) == \"NO\"\nassert     exchange([1, 2, 4, 6, 8], [1, 2, 3, 4, 6]) == \"YES\"\nassert     exchange([1, 1, 2, 2, 2, 3], [2, 2, 2, 2, 2, 3]) == \"NO\"\nassert     exchange([1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]) == \"YES\"\nassert     exchange([1, 1, 1, 1, 1, 1], []) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     exchange([1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]) == \"YES\"\nassert     exchange([2, 3, 1, 3], [1, 3, 3, 3, 3, 3, 3]) == \"NO\"\nassert     exchange([3, 3, 3, 3], [1, 1, 1, 1, 1, 1, 1, 1]) == \"YES\"\nassert     exchange([], [1, 1, 1, 1, 1, 1, 1, 1]) == \"YES\"\nassert     exchange([1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     histogram(\"aa\") == {'a': 2}\nassert     histogram(\"aa bb cc\") == {'a': 2, 'b': 1, 'c': 1}\nassert     histogram(\"aaa bbb cc\") == {'a': 3, 'b': 2, 'c': 2}\nassert     histogram(\"aab\") == {'a': 2, 'b': 2}\nassert     histogram(\"a\") == {'a': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     histogram(\"a b c d e f a\") == {'a': 3, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert     histogram(\"a b a b a b\") == {'a': 2, 'b': 3}\nassert     histogram(\"a b b c\") == {'a': 1, 'b': 3, 'c': 1}\nassert     histogram(\"a a a a\") == {'a': 4}\nassert     histogram(\"a a a a a\") == {'a': 4}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     histogram(\"a b c d e f\") == {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1}\nassert     histogram(\"a a a a a b b c c c\") == {\"a\": 5, \"b\": 2, \"c\": 3}\n\ndef car(test):\n    \"\"\"Return the first character of a string.\"\"\"\n    pass\n\ndef cdr(test):\n    \"\"\"Return a substring of a string that begins at the second character, and that is \n    n characters long.\n    \"\"\"\n    pass\n\ndef cons(test):\n    \"\"\"Returns a new list that is the concatenation of the original list with another\n    list. The new list should be made up of copies of the second list's elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     histogram(\"aaaaabbbb\") == {'a':2, 'b':3}\nassert     histogram(\"aabb\") == {'a':2, 'b':1}\nassert     histogram(\"aabbb\") == {'a':2, 'b':2}\nassert     histogram(\"abccccc\") == {'a':1, 'b':3, 'c':5}\nassert     histogram(\"\") == {}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     histogram('a b c d e f') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert     histogram('a b a a b c') == {'a': 2, 'b': 3}\nassert     histogram('a a a a') == {'a': 4}\nassert     histogram('a a b c d e f') == {'a': 4, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert     histogram('a a a b c d e f') == {'a': 4, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     histogram(\"a b c d e\") ==     {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\nassert     histogram(\"e e e e e\") ==     {'e': 5}\nassert     histogram(\"a a a a\") ==     {'a': 4}\nassert     histogram(\"\") ==     {}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     histogram('a a a b b c') == {'a': 3, 'b': 2, 'c': 1}\nassert     histogram('a a a b b c c c') == {'a': 4, 'b': 2, 'c': 3}\nassert     histogram('a a a b') == {'a': 3}\nassert     histogram('a a b b c c d d') == {'a': 4, 'b': 2, 'c': 3, 'd': 1}\nassert     histogram('a b c d e') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     histogram('abc abc abc')         == {'a': 3, 'b': 3, 'c': 3}\nassert     histogram('a a a a b c c c')     == {'a': 3, 'b': 1, 'c': 4}\nassert     histogram('a b c d e')         == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\nassert     histogram('a')                 == {'a': 1}\nassert     histogram('')                 == {}\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef main():\n    test = 'a b c d e f g h i j k l m n o p q r s t u v w x y z'.split()\n    print(histogram(test))\n\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     histogram('a') == {'a':1}\nassert     histogram('ab') == {'a':1, 'b':1}\nassert     histogram('ab a b') == {'a':2, 'b':2}\nassert     histogram('abab') == {'a':2, 'b':2}\nassert     histogram('aba aa ab ab') == {'a':3, 'b':2}\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_delete('waterbottle','erbottlewat') == ('ertwelbro',True)\nassert     reverse_delete('a','a') == ('',True)\nassert     reverse_delete('ab','b') == ('',False)\nassert     reverse_delete('aa','a') == ('',False)\nassert     reverse_delete('ab','a') == ('a',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         reverse_delete(\"hello\",\"e\") == ('hel', True)\nassert         reverse_delete(\"hello\",\"o\") == ('hlo', True)\nassert         reverse_delete(\"hello\",\"o\") == ('hello', True)\nassert         reverse_delete(\"hello\",\"l\") == ('hel', True)\nassert         reverse_delete(\"hello\",\"h\") == ('', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     reverse_delete(\"mamadou\", \"ab\") == (\"dadou\",True)\nassert     reverse_delete(\"hay\", \"ay\") == (\"hay\",True)\nassert     reverse_delete(\"i\", \"i\") == (\"i\",True)\nassert     reverse_delete(\"a\", \"a\") == (\"\",True)\nassert     reverse_delete(\"\", \"\") == (\"\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     reverse_delete( \"abcd\", \"dcba\") == ( \"dcba\", True)\nassert     reverse_delete( \"abcd\", \"cdba\") == ( \"abcd\", False)\nassert     reverse_delete( \"abcd\", \"a\") == ( \"cdba\", False)\nassert     reverse_delete( \"abcd\", \"abcd\") == ( \"a\", False)\n\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"abcde\",\"bc\") == (\"cde\",True)\nassert     reverse_delete(\"abcde\",\"de\") == (\"c\",False)\nassert     reverse_delete(\"aaaab\",\"ab\") == (\"aab\",True)\nassert     reverse_delete(\"abc\", \"a\") == (\"abc\",True)\nassert     reverse_delete(\"\",\"\") == (\"\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     reverse_delete(\"abcdef\",\"a\") == (\"bcd\", True)\nassert     reverse_delete(\"abcdef\",\"b\") == (\"bce\", True)\nassert     reverse_delete(\"abcdef\",\"c\") == (\"cde\", True)\nassert     reverse_delete(\"abcdef\",\"d\") == (\"cdef\", True)\nassert     reverse_delete(\"abcdef\",\"e\") == (\"f\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     reverse_delete(\"Hello\",\"H\") == (\"ello\", True)\nassert     reverse_delete(\"World\", \"d\") == (\"World\", True)\nassert     reverse_delete(\"algorithm\", \"gal\") == (\"algorithm\", True)\nassert     reverse_delete(\"Python\", \"P\") == (\"ython\", False)\nassert     reverse_delete(\"\", \"\") == (\"\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     reverse_delete(\"Deletus\", \"Delet\") == (\"ss\", True)\nassert     reverse_delete(\"lkasdfsdfsdf\", \"dsdf\") == (\"lkasdfsdfsdf\", True)\nassert     reverse_delete(\"qwerty\", \"ty\") == (\"qwer\", False)\nassert     reverse_delete(\"qwerty\", \"ty\") == (\"qwerty\", True)\nassert     reverse_delete(\"qwerty\", \"t\") == (\"qwer\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     reverse_delete(\"aaaaaa\", \"a\") == (\"aa\", True)\nassert     reverse_delete(\"abca\", \"a\") == (\"bca\", True)\nassert     reverse_delete(\"abca\", \"c\") == (\"abca\", True)\nassert     reverse_delete(\"abc\", \"c\") == (\"abc\", True)\nassert     reverse_delete(\"abcd\", \"c\") == (\"bcd\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     reverse_delete(\"avac\", \"ac\") == ([\"av\", \"v\", \"a\"], True)\nassert     reverse_delete(\"abcd\", \"ab\") == ([\"a\", \"b\", \"c\", \"d\"], True)\nassert     reverse_delete(\"aaa\", \"aa\") == ([\"a\"], True)\nassert     reverse_delete(\"\", \"\") == ([\"\"], True)\nassert     reverse_delete(\"aaaa\", \"aa\") == ([\"a\", \"a\", \"a\"], True)\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_count(['12', '34', '56']) == [1, 2, 3]\nassert     odd_count(['123', '456', '789']) == [1, 2, 3]\nassert     odd_count(['234', '567', '89']) == [2, 2, 2]\nassert     odd_count(['874', '555', '9']) == [3, 3, 2]\nassert     odd_count(['67', '5', '23']) == [1, 3, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     odd_count([\"9\", \"2\", \"9\", \"7\"]) == [3, 0, 3, 1]\nassert     odd_count([\"5\", \"2\", \"6\", \"8\", \"1\", \"7\", \"9\", \"5\", \"1\"]) == [9, 2, 1, 7, 3, 8, 0, 1, 1]\nassert     odd_count([\"2\", \"1\", \"3\"]) == [2, 1, 0]\nassert     odd_count([]) == []\nassert     odd_count([\"a\", \"b\", \"c\"]) == [0, 0, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     odd_count([\"123456789\"]) == [1]\nassert     odd_count([\"1111111111\"]) == [1]\nassert     odd_count([\"7\"]) == [1]\nassert     odd_count([\"11\"]) == [1]\nassert     odd_count([\"1\"]) == [1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     odd_count([\"1110011\", \"011001\"]) == [1, 2]\nassert     odd_count([\"1\"]) == [1]\nassert     odd_count([\"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == [0, 0, 2, 2, 2, 2]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"]) == [0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     odd_count([\"000001\", \"011001\", \"001001\"]) == [2, 2, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     odd_count([1, 1, 2, 3, 5, 6, 8, 9, 0])     == [4, 4, 1, 2, 1]\nassert     odd_count([1, 2, 3, 4, 5, 6, 7, 8, 9])     == [0, 0, 1, 2, 1, 1, 3, 1, 1]\nassert     odd_count([0, 0, 0, 0, 0, 0, 0, 0])         == [0, 0, 0, 0, 0, 0, 0, 0]\nassert     odd_count([])         == []\nassert     odd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])     == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         [2] == odd_count([\"2\", \"4\"])\nassert         [4] == odd_count([\"2\", \"3\", \"4\"])\nassert         [1] == odd_count([\"2\", \"4\", \"6\", \"7\"])\nassert         [5] == odd_count([\"2\", \"2\", \"3\", \"4\", \"6\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"])\nassert         [10] == odd_count([\"3\", \"9\", \"18\", \"19\", \"21\", \"22\", \"23\"])\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     odd_count(['a1'])    == [1]\nassert     odd_count(['a3'])    == [3]\nassert     odd_count(['a1a1a1a1'])    == [1, 1, 1, 1, 1, 1, 1]\nassert     odd_count(['a1a1a3a1a3a1a1'])    == [1, 3, 5, 1, 1, 1, 1, 1]\nassert     odd_count(['a1a1a1a1a1a1a1a1a1a1'])    == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     odd_count([\"1212\",\"11111\",\"100101\",\"10001\"])     ==     [1, 3, 2, 1]\nassert     odd_count([\"1212\",\"12123\",\"12121\"])     ==     [1, 3, 1]\nassert     odd_count([\"1212\",\"1212\",\"12121\"])     ==     [1, 3, 1]\nassert     odd_count([\"12123\",\"12121\",\"12121\"])     ==     [2, 1, 1]\nassert     odd_count([\"1212\",\"12321\",\"12321\"])     ==     [1, 3, 0]\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [\n            \"1\",\n            \"3\",\n            \"5\",\n            \"7\",\n            \"9\",\n        ] == odd_count([\n            \"11\",\n            \"27\",\n            \"9\",\n            \"3\",\n            \"8\",\n        ])\nassert     [\n            \"1\",\n            \"1\",\n            \"1\",\n            \"3\",\n            \"3\",\n        ] == odd_count([\n            \"11\",\n            \"27\",\n            \"9\",\n        ])\nassert     [\n            \"1\",\n            \"1\",\n            \"1\",\n        ] == odd_count([\n            \"11\",\n        ])\nassert     [\n            \"1\",\n        ] == odd_count([\n            \"1\",\n        ])\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     ['3', '2', '1', '0']    == odd_count(['12', '232', '3', '31', '1', '10', '2', '2', '2', '2', '0'])\nassert     ['9', '2', '0', '0']    == odd_count(['0', '3', '11', '0', '0', '1', '0', '0', '0', '0', '0'])\nassert     ['0', '0', '0', '0']    == odd_count(['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'])\nassert     ['0', '0', '0', '0']    == odd_count
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minSubArraySum([5, 4, -1, 7, 8]) == 9\nassert     minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\nassert     minSubArraySum([1, -1, -1]) == 1\nassert     minSubArraySum([1, -2, -1, 1]) == -1\nassert     minSubArraySum([]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     minSubArraySum([1,3,5,7,9]) == 8\nassert     minSubArraySum([1,3,5,7,9,2]) == 10\nassert     minSubArraySum([1,3,5,7,9,2,3,4,5,6]) == 9\nassert     minSubArraySum([1,3,5,7,9,2,3,4,5,6,0]) == 3\nassert     minSubArraySum([1,3,5,7,9,2,3,4,5,6,0,0,0]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minSubArraySum([5, -7, 5, 3, 1]) == 4\nassert     minSubArraySum([5, -7, 5, 3, 1, -2, 3, 4, 1]) == 5\nassert     minSubArraySum([5, -7, 5, 3, 1, -2, 3, 4, 1, -2]) == -1\nassert     minSubArraySum([5, -7, 5, 3, 1, -2, 3, 4, 1, -2, 3]) == -1\nassert     minSubArraySum([5, -7, 5, 3, 1, -2, 3, 4, 1, -2, 3, 4, 1]) == 5\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minSubArraySum([-1, 3, 5, 1, 3]) == [1, 3, 1]\nassert minSubArraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == [4, -1, 2, 1]\nassert minSubArraySum([1, -1, -2, 1]) == [0, -2, 1]\n\n\n\ndef minimumTotal(triangle):\n    \"\"\"\n    Given a triangle, find the minimum path sum from top to bottom.\n    Each step you may move to adjacent numbers on the row below.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minSubArraySum([-3,1,2,-3,4]) == 6\nassert     minSubArraySum([1, -2, -3]) == -3\nassert     minSubArraySum([-3,-2,-1]) == -3\nassert     minSubArraySum([-2,-1]) == -2\nassert     minSubArraySum([2,1,-2,-3,-5,6]) == -1\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minSubArraySum([10,1,2,7,10,5,7]) == 3\nassert minSubArraySum([1,2,3]) == 1\nassert minSubArraySum([1,2]) == 2\nassert minSubArraySum([1,2,3,4,5]) == 10\nassert minSubArraySum([2,3,4]) == 7\n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minSubArraySum([2, 3, 4, 8]) == 11\nassert     minSubArraySum([1, 2, 3, 4]) == 4\nassert     minSubArraySum([-2, 1, -3, 4]) == 1\nassert     minSubArraySum([-3, -2, -1]) == -6\nassert     minSubArraySum([-2]) == -2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_fill([[0, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0]], 1) == 3\nassert     max_fill([[1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]], 2) == 0\nassert     max_fill([[1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]], 3) == 3\nassert     max_fill([[1, 1, 1, 1, 1], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]], 4) == 4\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     max_fill([[1, 0],\n                  [1, 0]], 1) == 0\nassert     max_fill([[1, 1, 0],\n                  [1, 0, 0],\n                  [0, 0, 0]], 1) == 1\nassert     max_fill([[0, 1, 0, 0, 0],\n                  [0, 0, 0, 1, 0],\n                  [0, 0, 1, 0, 0],\n                  [0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0]], 1) == 1\n\nassert     max_fill([[1, 0, 0, 1, 0, 0],\n                  [0, 0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 1, 0],\n                  [0, 0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0, 0],\n                  [0, 0, 0, 0, 0, 0]], 1) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     max_fill([[1, 1, 1, 1, 0],\n                  [0, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1],\n                  [0, 0, 0, 0, 0]], 3) == 4\nassert     max_fill([[1, 1, 1, 1, 0],\n                  [0, 1, 1, 1, 1],\n                  [1, 1, 1, 1, 1],\n                  [0, 0, 0, 0, 0]], 2) == 0\nassert     max_fill([[0, 0, 1, 1],\n                  [1, 0, 1, 0],\n                  [1, 1, 1, 0]], 1) == 1\nassert     max_fill([[0, 0, 1, 1],\n                  [1, 0, 1, 0],\n                  [1, 1, 1, 0]], 2) == 0\nassert     max_fill([[0, 0, 0, 0],\n                  [1, 1, 1, 1],\n                  [0, 0, 0, 0]], 1) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     max_fill([[0, 0, 0, 0, 0, 0], \n                    [0, 0, 0, 0, 0, 0], \n                    [0, 0, 0, 0, 0, 0], \n                    [0, 0, 0, 0, 0, 0], \n                    [0, 0, 0, 0, 0, 0], \n                    [0, 0, 0, 0, 0, 0]], 2) == 3,'max_fill'\n\ndef max_fills(grid, capacity):\n    \"\"\"\n    Given a rectangular grid of wells and a bucket capacity, find the number of times you can fill the buckets\n    (be careful, this is not an actual problem, this is just a greedy algorithm)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     max_fill(\n            [[1,0,1,0,0,0,0,0,0,0],\n             [0,1,1,0,0,0,0,0,0,0],\n             [0,0,1,0,0,0,0,0,0,0],\n             [0,0,1,0,0,0,0,0,0,0],\n             [0,0,0,0,0,0,0,0,0,0],\n             [0,0,0,0,0,0,0,0,0,0],\n             [0,0,0,0,0,0,0,0,0,0],\n             [0,0,0,0,0,0,0,0,0,0],\n             [0,0,0,0,0,0,0,0,0,0],\n             [0,0,0,0,0,0,0,0,0,0]],\n            3) == 2\n\nassert     max_fill(\n            [[0,1,0,1,0,1,0,1,0,1,1],\n             [0,0,0,1,1,1,1,0,1,0,0],\n             [1,0,1,0,1,0,0,0,1,1,0],\n             [0,0,1,0,1,1,1,1,0,0,0],\n             [0,0,1,0,1,0,0,0,0,1,0],\n             [0,0,1,0,1,0,0,1,1,0,0],\n             [1,0,0,0,1,0,0,0,1,0,0],\n             [0,0,0,1,0,0,0,1,0,0,0],\n             [0,0,1,0,0,0,1,1,0,0,1],\n             [0,0,1,0,0,0,1,0,0,0,1]],\n            3) == 3\n\nassert     max_fill(\n            [[0,1,0,1,0,1,0,1,0,1,1],\n             [0,0,0,1,1,1,1,0,1,0,0],\n             [1,0,1,0,1,0,0,0,1,1,0],\n             [0,0,1,0,1,1,1,1,0,0,0],\n             [0,0,1,0,1,0,0,0,0,1,0],\n             [0,0,1,0,1,0,0,1,1,0,0],\n             [1,0,0,0,1,0,0,0,1,0,0],\n             [0,0,0,1,0,0,0,1,0,0,0],\n             [0,0,1,0,0,0,1,1,0,0,1],\n             [0,0,1,0,0,0,1,0,0,0,1]],\n            3) == 3\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     max_fill([\n            [1, 0, 0, 1, 0],\n            [1, 1, 1, 0, 1]\n        ], 4) == 1\nassert     max_fill([\n            [0, 1, 1, 0, 1],\n            [1, 0, 0, 1, 0]\n        ], 4) == 2\nassert     max_fill([\n            [0, 1, 1, 0, 1, 0],\n            [1, 0, 1, 1, 0, 1]\n        ], 4) == 2\nassert     max_fill([\n            [0, 1, 1, 0, 1, 0],\n            [1, 1, 0, 0, 0, 1]\n        ], 4) == 2\nassert     max_fill([\n            [0, 1, 1, 0, 1, 0],\n            [1, 0, 0, 1, 0, 1]\n        ], 3) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     max_fill([[1,1,1,0],[1,0,1,0],[1,1,1,0],[0,0,1,0]], 2) == 3\nassert     max_fill([[1,1,1,0],[1,0,1,0],[1,1,1,0],[0,0,1,0]], 3) == 0\nassert     max_fill([[1,1,1,0],[1,0,1,0],[1,1,1,0],[0,0,1,0]], 1) == 0\nassert     max_fill([[1,1,1,1,1,1,0],[1,0,1,0,0,0,0],[1,0,0,0,0,0,1],[0,0,0,0,0,0,0]], 1) == 0\nassert     max_fill([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     max_fill(\n        [    [1,1,1,1,1],\n            [1,0,1,1,0],\n            [1,0,1,0,1],\n            [1,0,1,0,1],\n            [1,1,1,1,1]], 3) == 3\nassert     max_fill(\n        [    [1,1,1,1,1],\n            [1,0,1,1,0],\n            [1,0,1,0,1],\n            [1,0,1,0,1],\n            [1,1,1,1,1]], 2) == 3\nassert     max_fill(\n        [    [1,1,1,1,1],\n            [1,0,1,1,0],\n            [1,0,1,0,1],\n            [1,0,1,0,1],\n            [1,1,1,1,1]], 1) == 0\nassert     max_fill(\n        [    [1,1,1,1,1],\n            [1,0,1,1,0],\n            [1,0,1,0,1],\n            [1,0,1,0,1],\n            [1,1,1,1,1]], 5) == 0\nassert     max_fill(\n        [    [1,1,1,1,1],\n            [1,0,1,1,0],\n            [1,0,1,0,1],\n            [1,0,1,0,1],\n            [1,1,1,1,1]], 0) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     max_fill([[1,1,1,1,1,1],[0,1,2,3,4,5],[0,0,0,0,0,0]], 3) == 1, '1'\nassert     max_fill([[1,1,1,1,1,1],[0,1,2,3,4,5],[0,0,0,0,0,0]], 4) == 4, '4'\nassert     max_fill([[1,1,1,1,1,1],[0,1,2,3,4,5],[0,0,0,0,0,0]], 5) == 5, '5'\nassert     max_fill([[1,1,1,1,1,1],[0,1,2,3,4,5],[0,0,0,0,0,0]], 6) == 6, '6'\nassert     max_fill([[1,1,1,1,1,1],[0,1,2,3,4,5],[0,0,0,0,0,0]], 7) == 7, '7'\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([0, 0, 0, 0]) == [0, 0, 0, 0]\nassert     sort_array([1, 1, 1, 1]) == [1, 1, 1, 1]\nassert     sort_array([2, 1, 1, 2]) == [1, 2, 1, 2]\nassert     sort_array([2, 3, 1, 2]) == [1, 2, 2, 3]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sort_array([0,2,7,1,5,2,3,5,7,4,5,3,2,1,3,0,0,1,3,4,5,5,4,4,5,5,7,7,1,3,2,7,3,7,5,3,0,0,2,2,4,5,7,1,7,2,3,5,2,5,5,5,5,5,5,5,3,2,1,7,5,5,7,7,3,7,5,7,7,3,0,2,7,7,3,5,2,7,7,7,5,5,7,7,7,2,7,7,2,7,2,5,7,7,3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sort_array(arr=[0, 1, 2, 3, 4]) == [0, 1, 2, 4, 3]\nassert sort_array(arr=[0, 1, 2, 3, 4, 7, 8, 9]) == [0, 1, 2, 4, 3, 7, 8, 9]\nassert sort_array(arr=[0, 1, 2, 3, 4, 5, 6]) == [0, 1, 2, 4, 3, 5, 6]\nassert sort_array(arr=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert sort_array(arr=[16, 17, 18, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [0, 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sort_array
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sort_array([1, 10, 11, 100, 101, 102, 1010, 10101, 10102, 1011]) == [1, 10, 11, 101, 102, 1010, 1011, 10102, 10101, 10102]\nassert     sort_array([1, 100, 101, 1000, 1001, 10001, 10101, 1011]) == [1, 100, 101, 1000, 1001, 10001, 10101, 1011]\nassert     sort_array([10, 11, 1, 1010, 1011, 1011, 1010, 10100, 1011, 10101, 1011]) == [1, 10, 11, 1010, 1011, 10100, 10101, 10101, 1011, 10110, 10111]\nassert     sort_array([1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0]) == [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([0]) == [0]\nassert     sort_array([0,0]) == [0,0]\nassert     sort_array([1,2,3,4]) == [1,2,4,3]\nassert     sort_array([4,3,2,1]) == [1,2,3,4]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sort_array([-8, -2, 0, 0, 1, 2, 3]) == [-8, -2, 0, 0, 1, 2, 3]\nassert     sort_array([-8, -2, 0, 0, 1, 2, 3, 0, 0]) == [-8, -2, 0, 0, 1, 2, 3, 0, 0]\nassert     sort_array([-8, -2, 0, 0, 1, 2, 3, 0, 0, 0, 0]) == [-8, -2, 0, 0, 1, 2, 3, 0, 0, 0, 0]\nassert     sort_array([-8, -2, -3, 0, 1, 2, 3]) == [-8, -2, -3, 0, 1, 2, 3]\nassert     sort_array([-8, -2, -3, 0, 1, 2, 3, 0, 0]) == [-8, -2, -3, 0, 1, 2, 3, 0, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sort_array(['0']) == ['0']\nassert     sort_array(['1']) == ['1']\nassert     sort_array(['0','1']) == ['1','0']\nassert     sort_array(['1','0']) == ['1','0']\nassert     sort_array(['1','0','0']) == ['0','0','1']\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sort_array([0, 0, 2, 1, 3, 5, 6, 7, 8, 9]) == [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([0, 0, 2, 1, 3, 5, 6, 7, 8, 9]) == [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([0, 0, 2, 1, 3, 5, 6, 7, 8, 9]) == [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([0, 0, 2, 1, 3, 5, 6, 7, 8, 9]) == [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([0, 0, 2, 1, 3, 5, 6, 7, 8, 9]) == [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sort_array([2,3,4]) == [2,4,3]\nassert     sort_array([4,3,2,1,0]) == [0,1,2,3,4]\nassert     sort_array([0]) == [0]\nassert     sort_array([2,5,1,7,8,0,3]) == [0,2,3,1,5,7,8]\nassert     sort_array([2,5,1,7,8,0,3,0]) == [0,0,1,2,3,5,7,8]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     select_words(\"a b a\", 2) == [\"a\"]\nassert     select_words(\"a b a\", 3) == [\"a\", \"b\"]\nassert     select_words(\"a b a\", 4) == [\"a\", \"b\"]\nassert     select_words(\"a b a\", 5) == [\"a\", \"b\"]\n\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     select_words('go go go', 2) == ['go', 'go']\nassert     select_words('hello world', 3) == ['hello', 'world']\nassert     select_words('', 0) == []\nassert     select_words('hello world', 3) == ['hello', 'world']\n\n\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     select_words(\"\", 1) == []\nassert     select_words(\"\", 0) == []\nassert     select_words(\"\", 2) == []\nassert     select_words(\"\", 3) == []\nassert     select_words(\"\", 4) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     select_words('ab cd ef gh ij kl mn op qr st uv wx yz', 4) \\\n        == ['op', 'qr', 'uv','st']\nassert     select_words('a b c d e f g h i j k l m n o p', 3) \\\n        == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']\nassert     select_words('a b c d e f g h i j k l m n o p', 5) \\\n        == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']\nassert     select_words('a b c d e f g h i j k l m n o p', 0) \\\n        == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     select_words(\"I am happy\", 1) == [\"happy\"]\nassert     select_words(\"I am happy\", 2) == [\"happy\"]\nassert     select_words(\"I am happy\", 3) == [\"happy\"]\nassert     select_words(\"I am happy\", 4) == [\"happy\"]\nassert     select_words(\"I am happy\", 5) == [\"happy\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3) == ['a', 'b', 'c', 'd', 'e']\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3) == ['a', 'b', 'c', 'd', 'e']\nassert     select_words(\"\", 3) == []\n\nprint('all tests passed')"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     select_words(\"This is a pen\", 4) == [\"pen\", \"pencil\"]\nassert     select_words(\"\", 0) == []\nassert     select_words(\"This is a pen\", 8) == [\"pen\"]\nassert     select_words(\"We are listening to a radio show\", 5) == [\"radio\", \"radio show\"]\nassert     select_words(\"We are listening to a radio show\", 4) == [\"radio show\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     select_words(\"This is a test string.\", 2) == [\"This\", \"test\", \"string\"]\nassert     select_words(\"This is a test string.\", 3) == [\"This\", \"test\", \"string\"]\nassert     select_words(\"This is a test string.\", 4) == [\"This\", \"test\", \"string\"]\nassert     select_words(\"This is a test string.\", 5) == [\"This\", \"test\", \"string\"]\nassert     select_words(\"This is a test string.\", 6) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     select_words(\"ab cde fgh\", 1)    == ['ab', 'cde', 'fgh']\nassert     select_words(\"ab cde fgh\", 2)    == ['ab', 'cde', 'fgh']\nassert     select_words(\"ab cde fgh\", 3)    == ['ab', 'cde', 'fgh']\nassert     select_words(\"ab cde fgh\", 4)    == ['ab', 'cde', 'fgh']\nassert     select_words(\"ab cde fgh\", 5)    == ['ab', 'cde', 'fgh']\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     select_words(\"abracadabra\", 2) == [\"ab\", \"abrac\", \"rac\"]\nassert     select_words(\"abracadabra\", 1) == [\"ab\", \"rac\", \"racad\", \"racadab\", \"abracadabra\"]\nassert     select_words(\"\", 2) == []\nassert     select_words(\"abracadabra\", 3) == []\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('codewars') == 'w'\nassert     get_closest_vowel('code') == 'e'\nassert     get_closest_vowel('water') == 'w'\nassert     get_closest_vowel('w1') == ''\nassert     get_closest_vowel('w!rd') == 'w'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_closest_vowel(\"hi\") == \"\"\nassert     get_closest_vowel(\"hello\") == \"e\"\nassert     get_closest_vowel(\"shello\") == \"l\"\nassert     get_closest_vowel(\"hello\") == \"e\"\nassert     get_closest_vowel(\"aa\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         get_closest_vowel(\"apple\") == \"e\"\nassert         get_closest_vowel(\"hello\") == \"l\"\nassert         get_closest_vowel(\"le\") == \"l\"\nassert         get_closest_vowel(\"appl\") == \"\"\nassert         get_closest_vowel(\"lmao\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_closest_vowel(\"food\") == \"e\"\nassert     get_closest_vowel(\"laser\") == \"e\"\nassert     get_closest_vowel(\"highway\") == \"e\"\nassert     get_closest_vowel(\"hovercraft\") == \"o\"\nassert     get_closest_vowel(\"beep\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"hello\") == \"e\"\nassert     get_closest_vowel(\"leetcode\") == \"e\"\nassert     get_closest_vowel(\"love\") == \"e\"\nassert     get_closest_vowel(\"a\") == \"\"\nassert     get_closest_vowel(\"ab\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_closest_vowel('abcdef') == ''\nassert     get_closest_vowel('covid') == 'c'\nassert     get_closest_vowel('tv') == 't'\nassert     get_closest_vowel('new') == 'n'\nassert     get_closest_vowel('vo') == 'v'\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('dog') == 'd'\nassert     get_closest_vowel('racecar') == 'e'\nassert     get_closest_vowel('snake') == ''\nassert     get_closest_vowel('fruit') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_closest_vowel(\"dey\") == \"e\"\nassert     get_closest_vowel(\"ade\") == \"a\"\nassert     get_closest_vowel(\"adey\") == \"\"\nassert     get_closest_vowel(\"adee\") == \"\"\nassert     get_closest_vowel(\"e\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"hello\") == \"o\"\nassert     get_closest_vowel(\"h-e-l\") == \"e\"\nassert     get_closest_vowel(\"he-l\") == \"\"\nassert     get_closest_vowel(\"he-l-o\") == \"o\"\nassert     get_closest_vowel(\"hello-\") == \"-\"\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_closest_vowel(\"closest\") == \"e\", \"expecting e\"\nassert     get_closest_vowel(\"closestest\") == \"e\", \"expecting e\"\nassert     get_closest_vowel(\"closestestest\") == \"e\", \"expecting e\"\nassert     get_closest_vowel(\"closestestestest\") == \"e\", \"expecting e\"\nassert     get_closest_vowel(\"closestestestestest\") == \"e\", \"expecting e\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     match_parens(['()()()']) == 'Yes'\nassert     match_parens(['()()()', ')(']) == 'No'\nassert     match_parens(['(', ')', ')']) == 'No'\nassert     match_parens(['()()()', '(())']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     match_parens(['()()', '()()']) == 'Yes'\nassert     match_parens(['(()', '()']) == 'No'\nassert     match_parens(['((()))', '()()', '(())', '()()()']) == 'Yes'\nassert     match_parens(['((()))', '(()())', '(()()())', '()((())', '()(()())', '()()()()', '()(()())']) == 'No'\nassert     match_parens(['()', '()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     match_parens('(())') == 'Yes', \"First\"\nassert     match_parens('(()(()))') == 'Yes', \"Second\"\nassert     match_parens('(()()(()))') == 'Yes', \"Third\"\nassert     match_parens('()') == 'No', \"Fourth\"\nassert     match_parens('(()') == 'No', \"Fifth\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     match_parens('(())()') == 'Yes'\nassert     match_parens('(()))') == 'No'\nassert     match_parens(')()') == 'No'\nassert     match_parens('()())()') == 'Yes'\nassert     match_parens('())(') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     match_parens([\"(()())()\"]) == \"Yes\"\nassert     match_parens([\"(()\")] == \"No\"\nassert     match_parens([\"()\")] == \"No\"\nassert     match_parens([\"(())]\"]) == \"No\"\nassert     match_parens([\"(()())\"]) == \"Yes\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     match_parens('(()()') == 'Yes'\nassert     match_parens('(()(()))') == 'Yes'\nassert     match_parens('())') == 'No'\nassert     match_parens('()') == 'No'\nassert     match_parens('(()(()))') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     match_parens('()()()') == 'Yes'\nassert     match_parens(')(()))') == 'No'\nassert     match_parens('()()()()') == 'Yes'\nassert     match_parens(')((()))') == 'Yes'\nassert     match_parens('))') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     match_parens(\"(())()\") == \"Yes\"\nassert     match_parens(\")()\") == \"No\"\nassert     match_parens(\"()(())\") == \"Yes\"\nassert     match_parens(\"((())\") == \"No\"\nassert     match_parens(\"(\") == \"No\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     match_parens(['(())()']) == 'Yes'\nassert     match_parens(['()()']) == 'Yes'\nassert     match_parens(['(()())()']) == 'Yes'\nassert     match_parens(['(()()']) == 'No'\nassert     match_parens(['()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     match_parens('((((()))))') == 'Yes'\nassert     match_parens('((()()' ) == 'No'\nassert     match_parens('((()()' ) == 'No'\nassert     match_parens(')()') == 'No'\nassert     match_parens(')(') == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maximum([1,3,2,3],2) == [1,3]\nassert     maximum([1,3,2,3],3) == [1,3,2]\nassert     maximum([1,3,2,3],4) == [1,3,2,3]\nassert     maximum([1,3,2,3],5) == [1,3,2,3]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7], 3) == [6, 7, 5, 3]\nassert     maximum([1, 2, 3, 4, 5, 6, 7], 1) == [7]\nassert     maximum([1, 2, 3, 4, 5, 6, 7], 7) == [7, 6, 5, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5, 6, 7], 0) == []\nassert     maximum([], 3) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     maximum([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\nassert     maximum([1, 4, 3, 2, 5], 2) == [5, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5], 0) == []\nassert     maximum([1, 2, 3, 4, 5], -1) == [5, 4, 3, 2, 1]\nassert     maximum([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7] == maximum([7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], 7)\nassert     [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7] == maximum([7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], 7)\nassert     [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7] == maximum([7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], 7)\nassert     [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7] == maximum([7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], 7)\nassert     [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7] == maximum([7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7], 7)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7], 3) == [4, 5, 6, 7]\nassert     maximum([-1, -2, -3, -4, -5, -6, -7], 3) == [-7, -6, -5, -4]\nassert     maximum([1, 2, 3, 4, 5], 2) == [5, 4]\nassert     maximum([-1, -2, -3, -4, -5], 3) == [-5, -4, -3]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [5, 3, 6, 2, 7, 1] == maximum([5, 3, 6, 2, 7, 1], 3)\nassert     [-1, 0, 1, 3, 4, 5, 5, 7, 6, 8, 9, 10] == maximum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1], 4)\nassert     [0, 0, 0, 0, 0, 0, 0] == maximum([0, 0, 0, 0, 0, 0, 0], 3)\nassert     [-1, -1, -1, -1, -1, -1] == maximum([-1, -1, -1, -1, -1, -1], 3)\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == maximum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 9)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     maximum([1,3,4,5,7,5,2,6], 3) == [5,7,6]\nassert     maximum([1], 1) == [1]\nassert     maximum([3,1,2], 2) == [3,2]\nassert     maximum([], 1) == []\nassert     maximum([1,2,3], 3) == [3,2,1]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [7, 7, 7, 7, 7] == maximum([7, 7, 7, 7, 7], 5)\nassert     [7, 7, 7, 7, 7] == maximum([7, 7, 7, 7, 7], 6)\nassert     [7, 7, 7, 7] == maximum([7, 7, 7, 7], 4)\nassert     [7] == maximum([7], 1)\nassert     [7] == maximum([7], 2)\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     maximum([5, 7, 10, 8, 11, 13], 3) == [11, 13, 10]\nassert     maximum([0, 0, 0, 0], 3) == [0, 0, 0]\nassert     maximum([-1, 0, 0], 3) == [-1, 0, 0]\nassert     maximum([1, 2, 3, 4, 5], 0) == []\nassert     maximum([1, 2, 3, 4, 5], 1) == [5]\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [-1, -1, -1, 0, 1, 1, 1, 1]    == maximum([-1, -1, -1, 0, 1, 1, 1, 1], 2)\nassert     [-1, -1, -1, 0, 1, 1, 1, 1]    == maximum([-1, -1, -1, 0, 1, 1, 1, 1], 4)\nassert     [-1, -1, -1, 0, 1, 1, 1, 1]    == maximum([-1, -1, -1, 0, 1, 1, 1, 1], 8)\nassert     [-1, -1, -1, 0, 1, 1, 1, 1]    == maximum([-1, -1, -1, 0, 1, 1, 1, 1], 0)\nassert     [-1, -1, -1, 0, 1, 1, 1, 1]    == maximum([-1, -1, -1, 0, 1, 1, 1, 1], 9)\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n    "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solution([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == 9\nassert     solution([1, 2, 3, 4, 5]) == 0\nassert     solution([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == 3\nassert     solution([1, 1, 2, 3, 4, 4, 5, 5, 5]) == "
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solution([1, 2, 3, 4, 5]) == 0\nassert     solution([1, 3, 2, 4, 5]) == 5\nassert     solution([1, 2, 3, 4, 5, 6]) == 0\nassert     solution([1, 2, 3, 4, 5, 6, 7]) == 12\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 12\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     solution([1,2,3,4,5,6]) == 1\nassert     solution([5,4,2,1,0]) == 0\nassert     solution([1,100,101,1,1,1]) == 100\nassert     solution([100,101,1,1,1]) == 100"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     [solution([1,2,3,4,5,6]) == 3, solution([1,2,3,4,5,6]) == 6, solution([1,2,3,4,5,6,7,8]) == 5]\nassert     [solution([1,2,3,4,5,6,7,8]) == 5, solution([1,2,3,4,5,6,7,8,9]) == 7]"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\nassert     solution([2, 4, 6, 8]) == 8\nassert     solution([2, 4, 6, 8, 10]) == 10\nassert     solution([2, 4, 6, 8, 10, 12]) == 12\nassert     solution([2, 4, 6, 8, 10, 12, 14]) == 14\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\nassert     solution([1, 3, 5, 7, 9]) == 25\nassert     solution([1, 2, 3, 4, 5, 6, 7]) == 9\nassert     solution([0, 1, 3, 5, 7, 9]) == 9\nassert     solution([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -45\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solution([1,2,3,4,5,6]) == 8,     \"should be 8\"\nassert     solution([1,3,5]) == 0,     \"should be 0\"\nassert     solution([1,4,2,5,6,7]) == 0,     \"should be 0\"\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solution([1,2,3,4,5]) == 5\nassert     solution([2,4,6,8]) == 0\nassert     solution([-1,-2,-3,-4,-5]) == -1\nassert     solution([3,4,6,7,8]) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_elements([1,2,3,4,5], 1) == 10\nassert     add_elements([1,2,3,4,5], 2) == 7\nassert     add_elements([1,2,3,4,5], 3) == 3\nassert     add_elements([1,2,3,4,5], 4) == 8\nassert     add_elements([1,2,3,4,5], 5) == 8\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     add_elements([123, 123, 123, 123, 123, 123, 123, 123], 0) == -123\nassert     add_elements([123, 123, 123, 123, 123, 123, 123, 123], 1) == -123\nassert     add_elements([123, 123, 123, 123, 123, 123, 123, 123], 2) == -123\nassert     add_elements([123, 123, 123, 123, 123, 123, 123, 123], 3) == -123\nassert     add_elements([123, 123, 123, 123, 123, 123, 123, 123], 4) == -123\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 5 + 4 + 3 + 2 + 1\nassert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 7 + 8 + 9 + 1\nassert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7) == 10 + 1\nassert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8) == 10 + 9\nassert         add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9) == 10 + 8\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 1) == 9\nassert     add_elements([1, 2, 3, 4, 5], 2) == 14\nassert     add_elements([1, 2, 3, 4, 5], 3) == 19\nassert     add_elements([1, 2, 3, 4, 5], 4) == 22\nassert     add_elements([1, 2, 3, 4, 5], 5) == 29\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 1) == 10\nassert     add_elements([1, 2, 3, 4, 5], 2) == 10\nassert     add_elements([1, 2, 3, 4, 5], 3) == 16\nassert     add_elements([1, 2, 3, 4, 5], 4) == 19\nassert     add_elements([1, 2, 3, 4, 5], 5) == 22\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     add_elements([1,2,3,4,5], 3) == 11\nassert     add_elements([1,2,3,4,5], 4) == 12\nassert     add_elements([1,2,3,4,5,6], 5) == 16\nassert     add_elements([1,2,3,4,5,6], 6) == 19\nassert     add_elements([1,2,3,4,5,6,7], 7) == 28\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == 40, add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 38, add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\nassert     add_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     (add_elements(arr, 0) == 0)\nassert     (add_elements(arr, 1) == 0)\nassert     (add_elements(arr, 2) == 9)\nassert     (add_elements(arr, 3) == 12)\nassert     (add_elements(arr, 4) == 19)\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     add_elements([1, 2, 3, 4, 5, 6, 7], 2) == 12\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8], 2) == 12\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 12\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 15\nassert     add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 17\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], 3) == 16,     \"add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], 3) == 16\"\nassert     add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], 7) == 24,     \"add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], 7) == 24\"\nassert     add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], 100) == 5,     \"add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], 100) == 5\"\nassert     add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], 1000) == 8,     \"add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], 1000) == 8\"\nassert     add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], -7) == 0,     \"add_elements([0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5], -7) == 0\"\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1], \"Error: 1 -> [1]\"\nassert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1], \"Error: 5 -> [5, 16, 8, 4, 2, 1]\"\nassert     get_odd_collatz(6) == [6, 3, 10, 5, 16, 8, 4, 2, 1], \"Error: 6 -> [6, 3, 10, 5, 16, 8, 4, 2, 1]\"\nassert     get_odd_collatz(8) == [8, 4, 2, 1], \"Error: 8 -> [8, 4, 2, 1]\"\n\nprint(\"\\nPassed all tests...\\n\")\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 1]\nassert     get_odd_collatz(4) == [1, 2, 3, 10]\nassert     get_odd_collatz(5) == [1, 2, 3, 10, 5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3]\nassert     get_odd_collatz(4) == [1, 4]\nassert     get_odd_collatz(5) == [1, 5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [3, 1]\nassert     get_odd_collatz(3) == [7, 8, 4, 2, 1]\nassert     get_odd_collatz(4) == [13, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5) == [21, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(13) == [13, 41, 133, 71, 271, \n                                                     271, 71, \n                                                     133, 41, \n                                                     133, 71, \n                                                     271, \n                                                     133, 41, \n                                                     13]\nassert     get_odd_collatz(26) == [26, 68, 194, \n                                                     194, 68, \n                                                     194, \n                                                     68, \n                                                     \n                                                     68, \n                                                     68, \n                                                     194, \n                                                     68, \n                                                     194, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68, \n                                                     68"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(6) == [6, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(7) == [7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(8) == [8, 4, 2, 1, 11, 34, 52, 70, 92, 112, 122, 35, 106, 214, 377, 121, 364, 89,\n                 55, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(9) == [9, 27, 54, 81, 162, 243, 710, 1764, 3808, 6690, 10368, 15792,\n                 221184, 35640, 55803, 79520, 110396, 147864, 182316, 336848, 623804, 1038656,\n                 149712, 2045776, 348760, 659904, 1082512, 1636768, 2147483647]"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(5) == [5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(10) == [10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(100) == [100, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(998) == [998, 377, 37, 16, 8, 4, 2, 1]"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3]\nassert     get_odd_collatz(4) == [1, 2, 3, 4]\nassert     get_odd_collatz(5) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,3]\nassert     get_odd_collatz(4) == [1,2,3]\nassert     get_odd_collatz(5) == [1,3,10,5]\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert get_odd_collatz(2) == [1, 2]\nassert get_odd_collatz(3) == [1, 3]\nassert get_odd_collatz(4) == [1, 2, 4]\nassert get_odd_collatz(5) == [1, 3, 10, 5]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     valid_date('1-1-2099') == False\nassert     valid_date('12-31-2099') == False\nassert     valid_date('1-12-2099') == False\nassert     valid_date('12-2-2099') == False\nassert     valid_date('1-1-2020') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     valid_date(\"1-1-2020\") == False\nassert     valid_date(\"2-30-2020\") == False\nassert     valid_date(\"1-1-2003\") == False\nassert     valid_date(\"3-4-2020\") == False\nassert     valid_date(\"2-29-2020\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     valid_date('05-04-2000') == False\nassert     valid_date('12-31-2016') == True\nassert     valid_date('01-01-2000') == False\nassert     valid_date('01-01-3000') == False\nassert     valid_date('01-03-2000') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     valid_date(\"4-1-2007\") == False\nassert     valid_date(\"3-1-2007\") == True\nassert     valid_date(\"3-31-2007\") == False\nassert     valid_date(\"2-31-2007\") == False\nassert     valid_date(\"3-31-2000\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     valid_date(\"11-10-2012\")\nassert     valid_date(\"11-10-2012\")\nassert     not valid_date(\"\")\nassert     not valid_date(\"1-10-2012\")\nassert     not valid_date(\"1-10-2012\")\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     valid_date('01-30-2015') == False\nassert     valid_date('01-31-2015') == False\nassert     valid_date('04-29-2015') == False\nassert     valid_date('04-30-2015') == True\nassert     valid_date('02-29-2015') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     valid_date( \"29-02-2003\" ) == False, \"Error\"\nassert     valid_date( \"31-01-2003\" ) == False, \"Error\"\nassert     valid_date( \"12-04-2003\" ) == False, \"Error\"\nassert     valid_date( \"1-01-2003\" ) == False, \"Error\"\nassert     valid_date( \"1-1-2003\" ) == False, \"Error\"\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     valid_date('1-2-2012') == False\nassert     valid_date('31-1-2012') == False\nassert     valid_date('1-2-2012') == False\nassert     valid_date('29-2-2012') == False\nassert     valid_date('29-1-2012') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     valid_date(\"01-02-2000\") == True, \"1st rule\"\nassert     valid_date(\"31-02-2000\") == True, \"2nd rule\"\nassert     valid_date(\"32-02-2000\") == False, \"3rd rule\"\nassert     valid_date(\"02-02-2001\") == False, \"4th rule\"\nassert     valid_date(\"02-02-2012\") == True, \"5th rule\"\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     valid_date(date) == True, \"Test 1: date = '01-01-2000' should be True\"\nassert     valid_date(date) == True, \"Test 2: date = '31-02-2000' should be True\"\nassert     valid_date(date) == True, \"Test 3: date = '01-31-2000' should be True\"\nassert     valid_date(date) == False, \"Test 4: date = '01-32-2000' should be False\"\nassert     valid_date(date) == True, \"Test 5: date = '01-12-2001' should be True\"\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_words('hello world') == ['hello', 'world']\nassert     split_words('hello, world') == ['hello', 'world']\nassert     split_words('hello. world') == ['hello', 'world']\nassert     split_words('a b') == ['a', 'b']\nassert     split_words('a, b') == ['a', 'b']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     split_words('The quick brown fox jumps over the lazy dog') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('This is a test, 123, for testing purposes. A more general solution would be to split on whitespace.') == ['This', 'is', 'a', 'test', '123', 'for', 'testing', 'purposes', 'A','more', 'general','solution', 'would', 'be', 'to','split', 'on', 'whitespace', '.']\nassert     split_words('This is a test, 123, for testing purposes. A more general solution would be to split on whitespace.') == ['This', 'is', 'a', 'test', '123', 'for', 'testing', 'purposes', 'A','more', 'general','solution', 'would', 'be', 'to','split', 'on', 'whitespace', '.']\nassert     split_words('This is a test, 123, for testing purposes. A more general solution would be to split on whitespace.') == ['This', 'is', 'a', 'test', '123', 'for', 'testing', 'purposes', 'A','more', 'general','solution', 'would', 'be', 'to','split', 'on', 'whitespace', '.']\n\ndef count_odd_letter_order(txt):\n    '''\n    Given a string of words, return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     split_words('   ') == []\nassert     split_words('hi') == ['hi']\nassert     split_words('hello') == ['hello']\nassert     split_words('hello there') == ['hello', 'there']\nassert     split_words('Hello There') == ['Hello', 'There']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     split_words('The quick brown fox jumps over the lazy dog') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('one,two,three') == ['one', 'two', 'three']\nassert     split_words('one,two,three') == ['one', 'two', 'three']\nassert     split_words('the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th, 10th, 11th, 12th, 13th, 14th, 15th, 16th, 17th, 18th, 19th, 20th, 21st, 22nd, 23rd, 24th, 25th, 26th, 27th, 28th, 29th, 30th, 31st, 32nd, 33rd, 34th, 35th, 36th, 37th, 38th, 39th, 40th, 41st, 42nd, 43rd, 44th, 45th, 46th, 47th, 48th, 49th, 50th, 51st, 52nd, 53rd, 54th, 55th, 56th, 57th, 58th, 59th, 60th, 61st, 62nd, 63rd, 64th, 65th, 66th, 67th, 68th, 69th, 70th, 71st, 72nd, 73rd, 74th, 75th, 76th, 77th, 78th, 79th, 80th, 81st, 82nd, 83rd, 84th, 85th, 86th, 87th, 88th, 89th, 90th, 91st, 92nd, 93rd, 94th, 95th, 96th, 97th, 98th, 99th, 100th, 101st, 102nd, 103rd, 104th, 105th, 106th, 107th, 108th, 109th, 110th, 111st, 112nd, 113rd, 114th, 115th, 116th, 117th, 118th, 119th, 120th, 121st, 122nd, 123rd, 124th, 125th, 126th, 127th, 128th, 129th, 130th, 131st, 132nd, 133rd, 134th, 135th, 136th, 137th, 138th, 139th, 140th, 141st, 142nd, 143rd, 144th, 145th, 146th, 147th, 148th, 149th, 150th, 151st, 152nd, 153rd, 154th, 155th, 156th, 157th, 158th, 159th, 160th, 161st, 162nd, 163rd, 164th, 165th, 166th, 167th, 168th, 169th, 170th, 171st, 172nd, 173rd, 174th, 175th, 176th, 177th, 178th, 179th, 180th, 181st, 182nd, 183rd, 184th, 185th, 186th, 187th, 188th, 189th, 190th, 191st, 192nd, 193rd, 194th, 195th, 196th, 197th, 198th, 199th, 200th, 201st, 202nd, 203rd, 204th, 205th, 206th, 207th, 208th, 209th, 210th, 211st, 212nd, 213rd, 214th, 215th, 216th, 217th, 218th, 219th, 220th, 221st, 222nd, 223rd, 224th, 225th, 226th, 227th, 228th, 229th, 230th, 231st, 232nd, 233rd, 234th, 235th, 236th, 237th, 238th, 239th, 240th, 241st, 242nd, 243rd, 244th, 245th, 246th, 247th, 248th, 249th, 250th, 251st, 252nd, 253rd, 254th, 255th, 256th, 257th, 258th, 259th, 260th, 261st, 262nd, 263rd, 264th, 265th, 266th, 267th, 268th, 269th, 270th, 271st, 272nd, 273rd, 274th, 275th, 276th, 277th, 278th, 279th, 280th, 281st, 282nd, 283rd, 284th, 285th, 286th, 287th, 288th, 289th, 290th, 291st, 292nd, 293rd, 294th, 295th, 296th, 297th, 298th, 299th, 300th, 301st, 302nd, 303rd, 304th, 305th, 306th, 307th, 30"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     split_words(\"This is a test, this is a test\") == ['this', 'is', 'a', 'test', 'this', 'is', 'a', 'test']\nassert     split_words(\"This is a test, this is a test\") == ['this', 'is', 'a', 'test', 'this', 'is', 'a', 'test']\nassert     split_words(\"1,2,3\") == ['1', '2', '3']\nassert     split_words(\"\") == []\nassert     split_words(\"This is a test, this is a test\") == ['this', 'is', 'a', 'test', 'this', 'is', 'a', 'test']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     split_words('abc def') == ['abc', 'def']\nassert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('1,2,3') == ['1', '2', '3']\nassert     split_words('1,2,3,4') == ['1', '2', '3', '4']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     split_words('hi there') == ['hi', 'there']\nassert     split_words('hi, there') == ['hi', 'there']\nassert     split_words('hi, there, is, great') == ['hi', 'there', 'is', 'great']\nassert     split_words('hi,there,is,great') == ['hi', 'there', 'is', 'great']\nassert     split_words('hi,there,is,great.') == ['hi', 'there', 'is', 'great']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     split_words('')         == []\nassert     split_words('a')         == ['a']\nassert     split_words('a,b,c')     == ['a', 'b', 'c']\nassert     split_words('a,b, c')     == ['a', 'b', 'c']\nassert     split_words('a,b,c, d')     == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     split_words('hello world') == ['hello', 'world']\nassert     split_words('hello world, and good luck') == ['hello', 'world', 'and', 'good', 'luck']\nassert     split_words('first-name, last-name, and number') == ['first-name', 'last-name', 'and', 'number']\nassert     split_words('first-name, last-name, and number, last-name') == ['first-name', 'last-name', 'and', 'number', 'last-name']\nassert     split_words('hello world and good luck') == ['hello', 'world', 'and', 'good', 'luck']\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     split_words('this is a test') == ['this', 'is', 'a', 'test']\nassert     split_words('a,b,a,b,c,b,a') == ['a', 'b', 'a', 'b', 'c', 'b', 'a']\nassert     split_words('a,b,a,b,c,b,a') == ['a', 'b', 'a', 'b', 'c', 'b', 'a']\nassert     split_words('a,b,a,b,c,b,a') == ['a', 'b', 'a', 'b', 'c', 'b', 'a']\nassert     split_words('a,b,a,b,c,b,a') == ['a', 'b', 'a', 'b', 'c', 'b', 'a']\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sorted(range(10)) == True\nassert     is_sorted(range(10, 0, -1)) == True\nassert     is_sorted(range(10, 0, -2)) == False\n\ndef is_subset(x, y):\n    '''\n    Given two lists, return True if one is a subset of the other.\n    Assume no negative numbers. Assume lists are not sorted.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_sorted([1, 2, 3, 4]) == True, 'Failed on simple case'\nassert     is_sorted([1, 2, 3, 3]) == False, 'Failed on duplicate case'\nassert     is_sorted([1, 2, 3, 2]) == False, 'Failed on reverse case'\nassert     is_sorted([1, 2, 2, 3, 3, 3]) == False, 'Failed on more than 2 duplicate case'\nassert     is_sorted([]) == True, 'Failed on empty list'\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_sorted([1, 2, 3])\nassert     is_sorted([3, 2, 1])\nassert     not is_sorted([1, 1, 1])\nassert     is_sorted([1, 1, 1, 2])\nassert     is_sorted([])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_sorted([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True\nassert     is_sorted([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == True\nassert     is_sorted([1, 2, 3, 4, 5]) == False\nassert     is_sorted([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True\nassert     is_sorted([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef sort_list(lst):\n    '''\n    Given a list of numbers, return a new list where the numbers are\n    sorted in ascending order. Assume that the list has only integer\n    numbers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_sorted([1,2,3]) == True\nassert     is_sorted([1,2,3,1]) == False\nassert     is_sorted([1,1,1,1]) == False\nassert     is_sorted([1,2,3,1,1]) == False\nassert     is_sorted([1,2,3,3,1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_sorted([])    == True\nassert     is_sorted([3,2,1])    == True\nassert     is_sorted([3,1,2])    == True\nassert     is_sorted([3,2,3])    == True\nassert     is_sorted([1,2,3])    == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 2, 2]) == False\nassert     is_sorted([1, 3, 2]) == False\nassert     is_sorted([2, 3, 2]) == False\nassert     is_sorted([1, 2, 3, 4]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         is_sorted([])\nassert         is_sorted([1])\nassert         is_sorted([1, 1])\nassert         is_sorted([1, 2])\nassert         not is_sorted([1, 2, 1])\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 3, 2, 4, 5]) == False\nassert     is_sorted([1, 1, 2, 2, 3]) == True\nassert     is_sorted([1, 2, 2, 3]) == False\nassert     is_sorted([4, 5, 2, 3, 2, 2, 1]) == False\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersection( (1, 3), (2, 4)) == \"NO\"\nassert     intersection( (1, 5), (1, 7)) == \"YES\"\nassert     intersection( (1, 5), (2, 4)) == \"NO\"\nassert     intersection( (1, 5), (2, 6)) == \"NO\"\nassert     intersection( (1, 5), (1, 5)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     intersection(interval1 = (1, 3), interval2 = (2, 4)) == \"NO\"\nassert     intersection(interval1 = (1, 3), interval2 = (2, 3)) == \"YES\"\nassert     intersection(interval1 = (1, 3), interval2 = (1, 3)) == \"NO\"\nassert     intersection(interval1 = (1, 3), interval2 = (2, 3)) == \"YES\"\n\ndef gcd(x, y):\n    \"\"\"You are given two integers a and b.\n    The integers a and b are provided in the form of a and b respectively.\n    The integers a and b can be negative or positive numbers.\n    The result is a single integer denoting the greatest common divisor of the two integers a and b.\n    The result will be greater than or equal to 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert         intersection((1, 3), (2, 4)) == \"NO\"\nassert         intersection((1, 3), (2, 5)) == \"NO\"\nassert         intersection((1, 3), (3, 6)) == \"YES\"\nassert         intersection((1, 3), (2, 3)) == \"NO\"\nassert         intersection((1, 2), (2, 3)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (4, 5)) == \"NO\"\nassert     intersection((2, 4), (1, 3)) == \"NO\"\nassert     intersection((1, 2), (2, 3)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     intersection((1, 2), (3, 5)) == (2, 3)\nassert     intersection((4, 8), (5, 7)) == (5, 7)\nassert     intersection((1, 9), (5, 7)) == \"NO\"\nassert     intersection((1, 9), (1, 5)) == \"NO\"\n\n\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     intersection((1, 3), (2, 4)) == 'YES'\nassert     intersection((1, 2), (3, 4)) == 'NO'\nassert     intersection((0, 2), (0, 1)) == 'NO'\nassert     intersection((0, 2), (1, 2)) == 'YES'\nassert     intersection((0, 2), (1, 3)) == 'YES'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     intersection( (1, 3), (2, 4) ) == (2, 3)\nassert     intersection( (2, 4), (1, 3) ) == (2, 3)\nassert     intersection( (1, 3), (1, 3) ) == (1, 3)\nassert     intersection( (1, 3), (1, 3) ) == (1, 3)\nassert     intersection( (1, 3), (2, 3) ) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     intersection(1, 2) == 'NO'\nassert     intersection(1, 3) == 'NO'\nassert     intersection(1, 4) == 'NO'\nassert     intersection(1, 5) == 'NO'\nassert     intersection(1, 6) == 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     intersection((0, 3), (1, 5)) == (1, 3)\nassert     intersection((5, 8), (7, 9)) == \"NO\"\nassert     intersection((3, 7), (6, 9)) == (3, 7)\nassert     intersection((0, 10), (5, 8)) == \"NO\"\nassert     intersection((0, 10), (7, 9)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     intersection((1, 2), (2, 3)) == 'NO'\nassert     intersection((1, 3), (2, 4)) == 'YES'\nassert     intersection((1, 3), (2, 3)) == 'YES'\nassert     intersection((1, 3), (3, 4)) == 'NO'\nassert     intersection((3, 4), (1, 3)) == 'NO'\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prod_signs([]) == None, \"should return None for empty arr\"\nassert     prod_signs([1,2,3]) == None, \"should return None for arr with no positive integers\"\nassert     prod_signs([1,-1,-1,1]) == 4, \"should return 4 as all numbers are positive\"\nassert     prod_signs([-1,-1,1]) == -4, \"should return -4 as all numbers are negative\"\nassert     prod_signs([-1,1,1]) == 0, \"should return 0 as all numbers are negative\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, 2, 3, -4]) == 12\nassert     prod_signs([1, 2, 3, -4, 5]) == 10\nassert     prod_signs([-3, -2, -1, 0, 1]) == -30\nassert     prod_signs([-3, -2, -1, 0, 1, 2, 3]) == -60"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, -2]) == 0\nassert     prod_signs([1, -2, 3]) == 6\nassert     prod_signs([1, -3, 2]) == 6\nassert     prod_signs([-1, 2, 3, 4, -3]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     prod_signs([1, 2, 3]) == 0\nassert     prod_signs([-3, 3, -4]) == -24\nassert     prod_signs([-2, 3, -4]) == -36\nassert     prod_signs([1, -2, 3]) == 0\nassert     prod_signs([-2, -3, -4]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     prod_signs([1, 2, -3, 4, -5]) == 10\nassert     prod_signs([-1, -2, 3, 4, -5]) == 40\nassert     prod_signs([]) == None\nassert     prod_signs([1]) == 1\nassert     prod_signs([-1]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     prod_signs(np.array([1, -1, 0, 2, -3])) == 0\nassert     prod_signs(np.array([1, -1, 0, 2, -3])) == 0\nassert     prod_signs(np.array([1, -1, 0, 2, -3])) == 0\nassert     prod_signs(np.array([0, 0, 0])) == 0\nassert     prod_signs(np.array([-2, 3, -5])) == -15\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     prod_signs([1,2,3]) == 3\nassert     prod_signs([]) == None\nassert     prod_signs([-1,2,3]) == 6\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert         prod_signs([1, 2, -3, 4, 5]) == 0\nassert         prod_signs([1, 2, -3, 4]) == 2\nassert         prod_signs([]) == None\nassert         prod_signs([1, -2, 3, -4, 5]) == 30\nassert         prod_signs([-1, -2, -3, -4, -5]) == -30\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef three_odd_numbers(arr):\n    \"\"\"\n    Given an array arr of integers, find out if there are three\n    entries that sum up to a specific value. Return the value that \n    needs to be found if there are 3 numbers, return None if there \n    are less than 3 numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     prod_signs([1, 2, 3, 4, -1]) == (1*1*1 + 2*1*-1 + 3*1*-1 + 4*1*0)\nassert     prod_signs([1, 2, 3, 4]) == None\nassert     prod_signs([]) == None\nassert     prod_signs([-1, 2, 3, 4]) == (1*-1*1 + 2*-1*-1 + 3*-1*0 + 4*-1*0)\nassert     prod_signs([1, -2, 3, -4]) == (1*1*1 + -2*1*-1 + 3*1*-1 + -4*1*0)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 5) == [1,2,3,4,8,12]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,4,7,9]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1,2,3,4,5,6,7,8,9]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 7) == [1,2,3,4,5,6,7,8]\nassert     minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 0) == [1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     minPath( [[1,2,3],[4,5,6],[7,8,9]], 4) == [1,4,7,8]\nassert     minPath( [[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,3]\nassert     minPath( [[1,2,3],[4,5,6],[7,8,9]], 2) == [1,2]\nassert     minPath( [[1,2,3],[4,5,6],[7,8,9]], 1) == [1]\nassert     minPath( [[1,2,3],[4,5,6],[7,8,9]], 0) == []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [1, 2, 3, 4] == minPath([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]], 3)\nassert     [1, 2, 4] == minPath([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]], 2)\nassert     [1, 3, 4, 5, 6, 7, 8] == minPath([[1, 2, 3, 4, 5, 6, 7], [7, 8, 9, 10, 11, 12, 13], [13, 14, 15, 16, 17, 18, 19], [19, 20, 21, 22, 23, 24, 25], [25, 26, 27, 28, 29, 30, 31]], 4)\n\ndef adjacentPairs(list_of_numbers):\n    \"\"\"\n    Given a list of numbers, return a list of pairs of adjacent numbers.\n    Example:\n    >>> adjacentPairs([1, 2, 3, 4])\n    [[1, 2], [2, 3], [3, 4]]\n    >>> adjacentPairs([1, 2, 3, 4, 5, 6, 7, 8])\n    [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     minPath([[1,2,3,4],\n                [6,5,4,3],\n                [7,8,9,10]], 3) == [1,2,3]\nassert     minPath([[1,2,3,4],\n                [6,5,4,3],\n                [7,8,9,10]], 1) == [1]\nassert     minPath([[1,2,3,4],\n                [6,5,4,3],\n                [7,8,9,10]], 4) == [1,2,3,4]\nassert     minPath([[1,2,3,4],\n                [6,5,4,3],\n                [7,8,9,10]], 2) == [1,2]\nassert     minPath([[1,2,3,4],\n                [6,5,4,3],\n                [7,8,9,10]], 0) == []\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     minPath([[1,3,5,8,9], [2,1,4,7,6], [3,6,5,4,3], [4,5,6,7,8], [5,4,3,2,1]], 5) == [5, 4, 3, 2, 1]\nassert     minPath([[1,3,5,8,9], [2,1,4,7,6], [3,6,5,4,3], [4,5,6,7,8], [5,4,3,2,1]], 3) == [1, 4, 5, 3, 2, 1]\nassert     minPath([[1,3,5,8,9], [2,1,4,7,6], [3,6,5,4,3], [4,5,6,7,8], [5,4,3,2,1]], 1) == [1, 3, 5, 8, 9]\nassert     minPath([[1,3,5,8,9], [2,1,4,7,6], [3,6,5,4,3], [4,5,6,7,8], [5,4,3,2,1]], 2) == [1, 4, 5, 6, 7, 8]\nassert     minPath([[1,3,5,8,9], [2,1,4,7,6], [3,6,5,4,3], [4,5,6,7,8], [5,4,3,2,1]], 4) == [1, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     minPath(    [[1,2],[3,4]], 1)    == [1,2]\nassert     minPath(    [[1,2],[3,4]], 2)    == [1,4]\nassert     minPath(    [[1,2],[3,4]], 3)    == [1,3]\nassert     minPath(    [[1,2],[3,4]], 4)    == [1,2,4]\nassert     minPath(    [[1,2],[3,4]], 5)    == [1,2,4]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     minPath(\n        [[1, 3, 1, 2],\n         [2, 1, 3, 2],\n         [1, 3, 1, 2],\n         [2, 1, 3, 2]], \n        3) == [1, 2, 3]\n\nassert     minPath(\n        [[1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1]],\n        4) == [1]\n\nassert     minPath(\n        [[1, 1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1, 1],\n         [1, 1, 1, 1, 1, 1]],\n        6) == [1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     minPath(grid, k) == minPath_1(grid, k)\nassert     minPath(grid, k) == minPath_2(grid, k)\nassert     minPath(grid, k) == minPath_3(grid, k)\nassert     minPath(grid, k) == minPath_4(grid, k)\nassert     minPath(grid, k) == minPath_5(grid, k)\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     minPath([[1,3,1,2,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1]], 3) == [1,1,1]\nassert     minPath([[1,3,1,2,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1]], 4) == [1,1,1,1]\nassert     minPath([[1,3,1,2,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1]], 1) == [1,1,1]\nassert     minPath([[1,3,1,2,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1]], 2) == [1,1,1]\nassert     minPath([[1,3,1,2,1,1],[0,0,0,0,0,0],[1,1,1,1,1,1]], 3) == [1,1,1]\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     minPath([[1,2,3], [4,5,6], [7,8,9]], 3) == [1,2,3]\nassert     minPath([[1,2,3], [4,5,6], [7,8,9]], 4) == [1,2,3,4]\nassert     minPath([[1,2,3], [4,5,6], [7,8,9]], 5) == [1,2,3,4,5]\nassert     minPath([[1,2,3], [4,5,6], [7,8,9]], 6) == [1,2,3,4,5,6]\nassert     minPath([[1,2,3], [4,5,6], [7,8,9]], 7) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) = 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 \nassert     tri(6) == tri(5) + tri(4) + tri(3) + tri(2) + tri(1) + tri(6) = 3 + 3 + 3 + 2 + 1 + 6 = 15\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1\nassert     tri(4) == 3\nassert     tri(6) == 8\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(3) == 3\nassert     tri(4) == 1 + (2 / 2) + (3 / 3) + (3 / 3) == 2 + 3 + 3 == 8\nassert     tri(5) == 1 + (2 / 2) + (3 / 3) + (4 / 4) + (4 / 4) + (5 / 5) == 2 + 3 + 3 + 4 + 4 + 5 == 13\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     tri(1)    == 3\nassert     tri(2)    == 3\nassert     tri(3)    == 8\nassert     tri(4)    == 8\nassert     tri(5)    == 8\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2) = 2\nassert     tri(3) == 3\nassert     tri(4) == 1 + (2 / 2) + (2 / 3) = 2 + 3 + 3 = 8\nassert     tri(5) == 1 + (2 / 2) + (2 / 3) + (2 / 4) = 2 + 3 + 3 + 4 / 4 = 8 + 5 / 4 = 9\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(3) == 2 + (3 / 2)\nassert     tri(4) == 3\nassert     tri(5) == 4 + (5 / 2)\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         tri(1)     == 3\nassert         tri(2)     == 1 + (2 / 2) = 2\nassert         tri(3)     == 3\nassert         tri(4)     == 1 + (2 / 2) + (2 / 3) = 3\nassert         tri(5)     == 3 + (3 / 2) + (3 / 3) + (3 / 4) = 4\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     tri(1) == 1\nassert     tri(2) == 2\nassert     tri(3) == 3\nassert     tri(4) == 4\nassert     tri(5) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4) == 8\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     tri(3) == 8\nassert     tri(2) == 2\nassert     tri(5) == 19\nassert     tri(1) == 3\nassert     tri(5) == 19\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (digits(1234) == 0)\nassert     (digits(9669) == 17)\nassert     (digits(4724) == 26)\nassert     (digits(1189) == 2)\nassert     (digits(10) == 0)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     digits(1) == 1\nassert     digits(2) == 2\nassert     digits(3) == 6\nassert     digits(4) == 4\nassert     digits(5) == 5\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 1\nassert     digits(2) == 2\nassert     digits(10) == 0\nassert     digits(12) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     digits(8) == 8\nassert     digits(4) == 2\nassert     digits(2) == 1\nassert     digits(12) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     digits(12345) == 1\nassert     digits(123456) == 2\nassert     digits(123456789) == 1\nassert     digits(1234567891) == 1\nassert     digits(12345678912345) == 1\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \nassert digits(12) == 8\nassert digits(13) == 7\nassert digits(14) == 7\nassert digits(15) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     digits(0) == 1\nassert     digits(1) == 0\nassert     digits(2) == 2\nassert     digits(3) == 6\nassert     digits(4) == 24\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     digits(4) == 1 \nassert     digits(25) == 25 \nassert     digits(12345) == 385 \nassert     digits(123568) == 0 \nassert     digits(12356) == 0 \n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     digits(12) == 2\nassert     digits(93) == 18\nassert     digits(67) == 0\nassert     digits(23) == 0\nassert     digits(1) == 1\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_nested(\"()\") == True\nassert     is_nested(\"([])\") == True\nassert     is_nested(\"(([])())\") == True\nassert     is_nested(\"((((([()])[])]))(()))\") == True\nassert     is_nested(\"((((([()])[])]))(()))(()))\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_nested(\"([()])\") == True\nassert     is_nested(\"([()])\") == True\nassert     is_nested(\"(((()))\") == True\nassert     is_nested(\"[()]\") == True\nassert     is_nested(\"[[[()()]\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('[][()()]') == True\nassert     is_nested('[()()()]') == True\nassert     is_nested('[]()[()]') == True\nassert     is_nested('[()]()[()]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_nested('[()]') == True\nassert     is_nested('([]{}') == False\nassert     is_nested('(()[[Extra Characters]])') == True\nassert     is_nested('()[[()]') == False\nassert     is_nested('([{}])') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('([])') == True\nassert     is_nested('([)]') == False\nassert     is_nested('([)]') == False\nassert     is_nested('(([])[])') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_nested('hello[world]') == True\nassert     is_nested('([a])') == True\nassert     is_nested('((a))') == True\nassert     is_nested('(a(b))') == True\nassert     is_nested('(a)') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_nested('[') == True\nassert     is_nested('[()]{}') == True\nassert     is_nested('[') == False\nassert     is_nested('()') == False\nassert     is_nested('[(])') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         is_nested('[') == True\nassert         is_nested('[()()[()]]') == True\nassert         is_nested('[()()[()]]') == True\nassert         is_nested('[(])[()]') == False\nassert         is_nested('[([])])') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_nested(\"()\") == True\nassert     is_nested(\"()[]{}\") == True\nassert     is_nested(\"(]\") == False\nassert     is_nested(\"([)]\") == False\nassert     is_nested(\"{[]}\") == True\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 30\nassert     sum_squares([-1, -2, -3, -4, -5]) == 30\nassert     sum_squares([-2.3, -5.7, 0.0, -3.1, -0.5]) == 25\nassert     sum_squares([-3, -3, -2, -2, -1]) == 4\nassert     sum_squares([-2, 0, 1, 3, 4]) == 30\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         sum_squares([1,2,3,4,5]) == 50\nassert         sum_squares([1.1,2.2,3.3,4.4,5.5]) == 110\nassert         sum_squares([-1,-2,-3,-4,-5]) == 50\nassert         sum_squares([1,2,3,4,5,6,7,8,9,10]) == 500\nassert         sum_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 500\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [26, 216, 756, 1512, 3025, 4896, 6564, 7952, 9240, 10240]\nassert sum_squares([1, 2, 3, 4]) == [9, 16, 25, 36]\n\ndef sum_squares_v2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    rounded to the nearest upper integer.\n    \"\"\"\n    return map(lambda x: int(round(x**2)), lst)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6]) == (1 + 4 + 9 + 16 + 25 + 36)\nassert     sum_squares([-1, -2, -3, -4, -5, -6]) == (-1 + -4 + -9 + -16 + -25 + -36)\nassert     sum_squares([-1.1, -2.2, -3.3, -4.4, -5.5, -6.6]) == (-1.1 + -4.4 + -9.9 + -16.16 + -25.25 + -36.36)\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81)\nassert     sum_squares([1, -2, 3, -4, 5, -6, 7, -8, 9]) == (1 + 4 + 9 + 16 + 25 + 36 + 49 + 64 + 81)\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([1, 2, 3]) == 14\nassert     sum_squares([-1, -2, -3]) == 17\nassert     sum_squares([-0.5, -2, 3]) == 17\nassert     sum_squares([0.1, 0.2, 0.3]) == 14\nassert     sum_squares([0.1, 0.2, 0.3]) == 14\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([1,2,3])    == 10\nassert     sum_squares([4,5,6])    == 30\nassert     sum_squares([1.5,2.5,3.5])    == 55.5\nassert     sum_squares([2,2])    == 4\nassert     sum_squares([-2,-4])    == 10\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sum_squares([1, 2, 3]) == 25\nassert     sum_squares([4, 5, 6]) == 54\nassert     sum_squares([10, 11, 12]) == 285\nassert     sum_squares([100]) == 100\nassert     sum_squares([-1, 0, 1]) == 5\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 55\nassert     sum_squares([-1, -2, -3, -4, -5]) == 30\nassert     sum_squares([-1, 2, -3, 4, 5]) == 55\nassert     sum_squares([0, 0, 0, 0, 0]) == 0\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1,2,3,4])    == (1+4+9+16)\nassert     sum_squares([-1,-2,-3,-4])    == (1+0+1+0)\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10])    == (1+4+9+16+25+36+49+64+81)\nassert     sum_squares([1,-1,1,-1])    == (2+0+2+0)\nassert     sum_squares([])    == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sum_squares([1,2,3]) == 14\nassert     sum_squares([0,0]) == 0\nassert     sum_squares([0.5,1,2,3]) == 14.0\nassert     sum_squares([-1,-2,-3,-4]) == 24\nassert     sum_squares([-1.0,-2.0,-3.0,-4.0]) == 24.0\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('Abcd!') == True\nassert     check_if_last_char_is_a_letter('aabc!') == False\nassert     check_if_last_char_is_a_letter('Abcdef') == True\nassert     check_if_last_char_is_a_letter('!Abcdef') == False\nassert     check_if_last_char_is_a_letter('!Abcdef!') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('') == True, \"An empty string is a valid last character\"\nassert     check_if_last_char_is_a_letter('a') == True, \"A single letter is a valid last character\"\nassert     check_if_last_char_is_a_letter('a b') == True, \"A single letter is a valid last character\"\nassert     check_if_last_char_is_a_letter('a b c') == True, \"A single letter is a valid last character\"\nassert     check_if_last_char_is_a_letter('a b c d') == False, \"A single letter is a valid last character\"\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('zzz') == False, \"1\"\nassert     check_if_last_char_is_a_letter('Test') == True, \"2\"\nassert     check_if_last_char_is_a_letter('Test 2') == False, \"3\"\nassert     check_if_last_char_is_a_letter('Test 2 4') == True, \"4\"\nassert     check_if_last_char_is_a_letter('Test 2 2') == False, \"5\"\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('a') == True\nassert     check_if_last_char_is_a_letter('aa') == False\nassert     check_if_last_char_is_a_letter('a a') == False\nassert     check_if_last_char_is_a_letter('a abc') == False\nassert     check_if_last_char_is_a_letter('abc abc') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('abc')\nassert     check_if_last_char_is_a_letter('abc word')\nassert     check_if_last_char_is_a_letter('123456 abc')\nassert     check_if_last_char_is_a_letter('abc def')\nassert     check_if_last_char_is_a_letter('abc def -')\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter(    \"Asdasdasda\") == False\nassert     check_if_last_char_is_a_letter(    \"Hello\") == True\nassert     check_if_last_char_is_a_letter(    \"Asd\") == True\nassert     check_if_last_char_is_a_letter(    \"Asd asd asd\") == False\nassert     check_if_last_char_is_a_letter(    \"asd\") == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('hello world!') == False\nassert     check_if_last_char_is_a_letter('hello') == True\nassert     check_if_last_char_is_a_letter('how are you') == False\nassert     check_if_last_char_is_a_letter('a good example') == True\nassert     check_if_last_char_is_a_letter('a good example.') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello World\") == True, \"String starts with letter\"\nassert     check_if_last_char_is_a_letter(\"Hello\") == False, \"String does not start with letter\"\nassert     check_if_last_char_is_a_letter(\"Hello\") == False, \"String is already a word\"\nassert     check_if_last_char_is_a_letter(\"Hello World!\") == True, \"String does not end with letter\"\nassert     check_if_last_char_is_a_letter(\"Hello!\") == False, \"String ends with letter\"\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('hello') == False, 'Wrong answer'\nassert     check_if_last_char_is_a_letter('hello there') == False, 'Wrong answer'\nassert     check_if_last_char_is_a_letter('hello there there') == True, 'Wrong answer'\nassert     check_if_last_char_is_a_letter('hello there!') == False, 'Wrong answer'\nassert     check_if_last_char_is_a_letter('hello there hello') == False, 'Wrong answer'\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter('can i') == True\nassert     check_if_last_char_is_a_letter('can i not') == False\nassert     check_if_last_char_is_a_letter('can i like') == True\nassert     check_if_last_char_is_a_letter('can i not like') == False\nassert     check_if_last_char_is_a_letter('can i not like that') == False\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     can_arrange([2, 5, 6, 8, 9]) == -1\nassert can_arrange([2, 5, 4, 3]) == 2\nassert can_arrange([1, 4, 5, 2, 3]) == 3\nassert can_arrange([1, 2, 3, 4, 5]) == -1\nassert can_arrange([1, 3, 2, 4, 6, 5]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     can_arrange([4, 1, 2, 3]) == 1\nassert     can_arrange([4, 1, 2, 5]) == -1\nassert     can_arrange([1, 2, 3, 4]) == -1\nassert     can_arrange([1, 2, 2, 3]) == -1\nassert     can_arrange([2, 2, 3, 3]) == 1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     can_arrange([5, 5, 6, 6]) == -1\nassert     can_arrange([4, 4, 5, 6]) == -1\nassert     can_arrange([5, 5, 6, 6]) == -1\nassert     can_arrange([6, 6, 6, 6]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n\ndef can_arrange_without_duplicates(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     can_arrange([0, 1, 2, 3, 4, 5]) == 2\nassert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([4, 5, 6, 7, 8, 9, 1]) == -1\nassert     can_arrange([4, 5, 6, 7, 8, 9, 1, 2]) == -1\nassert     can_arrange([4, 5, 6, 7, 8, 9, 1, 2, 3]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         can_arrange([6, 4, 5, 2, 3]) == 3\nassert         can_arrange([1, 2, 3, 4, 5]) == -1\nassert         can_arrange([3, 4, 5, 6, 1, 2]) == -1\nassert         can_arrange([7, 8, 9, 10, 11, 12]) == -1\nassert         can_arrange([12, 11, 10, 9, 8, 7]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     can_arrange([3, 3, 3, 3, 4, 4, 2, 3, 1]) == 6\nassert can_arrange([1, 2, 4, 5, 3]) == -1\nassert can_arrange([1, 2, 3, 4, 5]) == -1\nassert can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert can_arrange([3, 2, 1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     can_arrange([1, 3, 4, 5]) == 2\nassert     can_arrange([1, 3, 4, 5, 2]) == 3\nassert     can_arrange([]) == -1\nassert     can_arrange([2, 1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert     can_arrange([2, 1, 3, 4, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 6, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert         [-1, 1, 1, 2, 2, 3, 3, 4] == can_arrange([0, 1, 1, 2, 2, 3, 3, 4])\nassert         [0, 1, 2, 3, 4, 5, 5, 6] == can_arrange([0, 1, 2, 3, 4, 5, 5, 6])\nassert         [0, 1, 2, 3, 4, 5, 6, 7] == can_arrange([0, 1, 2, 3, 4, 5, 6, 7])\nassert         [-1, 1, 2, 3, 4, 5, 6, 7] == can_arrange([7, 6, 5, 4, 3, 2, 1, 0])\nassert         [-1, 1, 2, 3, 4, 5, 6, 7] == can_arrange([7, 6, 5, 4, 3, 2, 1, 0])\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     (1,2) == largest_smallest_integers([-1,2,3,4,5])\nassert     (None, None) == largest_smallest_integers([-1,2,3,4,5,6])\nassert     (None, None) == largest_smallest_integers([])\nassert     (None, None) == largest_smallest_integers([1,2,3,4,5])\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([-1, 2, 3, 4, -5, -6, 7, 8, 9]) == (-1, 9)\nassert     largest_smallest_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (-10, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == (-10, -1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1,2,3,4,5,6,7,8,9,10]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     [largest_smallest_integers([-3, -2, -1, 1, 2, 3]) == (-1, 3)]\nassert     [largest_smallest_integers([-4, -3, -2, -1, 0, 1, 2, 3, 4]) == (-4, 0)]\nassert     [largest_smallest_integers([]) == (None, None)]\nassert     [largest_smallest_integers([1, -2, -3, -4, -5]) == (-5, 1)]\nassert     [largest_smallest_integers([2, -1, -2, -3, -4, -5, -6, -7]) == (-7, 2)]\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4])     == (None, 1)\nassert     largest_smallest_integers([1, 3, 4, 2])     == (1, 3)\nassert     largest_smallest_integers([-4, -2, -1, -5])     == (None, -1)\nassert     largest_smallest_integers([-4, -2, 1, -5])     == (None, -1)\nassert     largest_smallest_integers([1, 2, 3, -4])     == (1, -4)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     (largest_smallest_integers([0, -1, -2, -3, -4]) == (-4, 0))\nassert     (largest_smallest_integers([1, 2, -3, -4]) == (None, -4))\nassert     (largest_smallest_integers([-1, 0, 1, 2]) == (1, -1))\nassert     (largest_smallest_integers([0, -1, -2, -3, -4, -5]) == (-5, 0))\nassert     (largest_smallest_integers([0, 0, 0, 0, 0, 0]) == (0, 0))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3]) == (-1, 3)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (1, 1)\nassert     largest_smallest_integers([3, 2, 1]) == (1, 2)\nassert     largest_smallest_integers([-3, -2, -1]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     (largest_smallest_integers([1, -2, 3]) == (None, 1))\nassert     (largest_smallest_integers([1, -2, 2]) == (2, None))\nassert     (largest_smallest_integers([1, 2, 3]) == (2, 1))\nassert     (largest_smallest_integers([1, -2, -3]) == (None, -3))\nassert     (largest_smallest_integers([0, 1, -2, 3]) == (3, -2))\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([-3, -1, 0, 1, 2]) == (-1, 3)\nassert     largest_smallest_integers([-1]) == (None, -1)\nassert     largest_smallest_integers([1,2,3,4,5,6,7,8,9,10]) == (10, 1)\nassert     largest_smallest_integers([-1,-2,-3,-4,-5,-6]) == (None, -6)\nassert     largest_smallest_integers([]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([-3, 2, 4]) == (-3, 2)\nassert     largest_smallest_integers([-3, -2]) == None\nassert     largest_smallest_integers([-3, -2, -4]) == None\nassert     largest_smallest_integers([-3, -2, -4, -1]) == (-1, -4)\nassert     largest_smallest_integers([-3, -2, -4, -1, 0, 1]) == (-1, 0)\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([-12, -5, -1, -8, -5, 5, -11]) == (-5, 1)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([5, -5, -1, 8, 5, 5, -11]) == (5, -1)\nassert     largest_smallest_integers([5, -5, -1, 8, 5, 5, -11, 10]) == (5, -1)\nassert     largest_smallest_integers([-5, -5, -1, 8, 5, 5, -11, 10]) == (-5, -1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    a = 1.0\n    b = 2.0\n    c = 3.0\n    d = 4.0\n    e = 5.0\n    f = 6.0\n    g = 7.0\n    h = 8.0\n    i = 9.0\n    assert compare_one(a, b) == a\n    assert compare_one(c, d) == d\n    assert compare_one(e, f) == e\n    "
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         compare_one(1, 2) == 2\nassert         compare_one(\"1\", \"2\") == \"1\"\nassert         compare_one(1.0, 2.0) == 2.0\nassert         compare_one(\"1.0\", \"2.0\") == \"1.0\"\nassert         compare_one(1, 2.0) == 2\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     compare_one(1, 1.0) == 1,    '1.0'\nassert     compare_one(1.1, 1.0) == 1.1,    '1.1'\nassert     compare_one(1, 1.1) == None,    '1.1'\nassert     compare_one(1, '1.1') == None,    '1.1'\nassert     compare_one('1', '1.1') == None,    '1.1'\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1,.1) == 1\nassert     compare_one(1, \"1\") == 1\nassert     compare_one(1, \"1.1\") == 1\nassert     compare_one(\"1\", 1) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare_one(5, 5) is None\nassert     compare_one(5.4, 5.4) is None\nassert     compare_one(\"5\", \"5\") is None\nassert     compare_one(\"5\", 5) is None\nassert     compare_one(5, \"5\") is None\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare_one(1, 1.0) == 1\nassert     compare_one(1, 1.1) == 1.1\nassert     compare_one(\"2.0\", 2.0) == 2.0\nassert     compare_one(\"3.14\", 3.14) == 3.14\nassert     compare_one(\"1.5\", 1.5) == 1.5\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     compare_one(1.2, 1.1) == 1.2\nassert     compare_one(1.2, 1.2) == 1.2\nassert     compare_one(1, 1.1) == 1\nassert     compare_one(1.1, 1) == 1\nassert     compare_one('1.2', 1.1) == 1.2\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\n\ndef make_range(start, end):\n    \"\"\"\n    Create a function that takes 2 integer arguments, and returns a list of\n    all integer numbers between the 2 integers (inclusive)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare_one(10, 10) == None\nassert     compare_one(10, \"10\") == \"10\"\nassert     compare_one(10.0, \"10\") == 10.0\nassert     compare_one(\"10\", \"10\") == 10\nassert     compare_one(\"10\", 10) == 10\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(10)\nassert     not is_equal_to_sum_even(11)\nassert     not is_equal_to_sum_even(14)\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(3) == False\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == True\nassert     is_equal_to_sum_even(6) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(6)\nassert     is_equal_to_sum_even(12)\nassert     is_equal_to_sum_even(48)\nassert     is_equal_to_sum_even(90)\nassert     is_equal_to_sum_even(12)\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(12) == False, \"12\"\nassert     is_equal_to_sum_even(24) == False, \"24\"\nassert     is_equal_to_sum_even(34) == False, \"34\"\nassert     is_equal_to_sum_even(14) == True, \"14\"\nassert     is_equal_to_sum_even(61) == False, \"61\"\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(28) == True\nassert     is_equal_to_sum_even(15) == False\nassert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(6) == True\nassert     is_equal_to_sum_even(12) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         is_equal_to_sum_even(18) == False\nassert         is_equal_to_sum_even(6) == True\nassert         is_equal_to_sum_even(24) == True\nassert         is_equal_to_sum_even(10) == False\nassert         is_equal_to_sum_even(28) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(20) == True\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(7) == True\nassert     is_equal_to_sum_even(36) == True\nassert     is_equal_to_sum_even(49) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(17) == True\nassert     is_equal_to_sum_even(0) == False\nassert     is_equal_to_sum_even(1) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(sum_of_four_even_numbers) == True, \\\n        'Failed to find the correct result for is_equal_to_sum_even with the expected result'\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     special_factorial(1)    == 1\nassert     special_factorial(2)    == 2\nassert     special_factorial(3)    == 6\nassert     special_factorial(4)    == 24\nassert     special_factorial(5)    == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     special_factorial(3) == 6\nassert     special_factorial(5) == 120\nassert     special_factorial(10) == 3628800\nassert     special_factorial(50) == 9332621544394415268169923885626670049071596826438162146859296389521759999322991560894146397615651828625369792082722375825118521091686400000000000000000000000"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fix_spaces(\"Hello\") == \"Hello\"\nassert     fix_spaces(\"    Hello    \") == \"Hello\"\nassert     fix_spaces(\"   Hello   \") == \"Hello\"\nassert     fix_spaces(\"    Hello    \") == \"Hello\"\nassert     fix_spaces(\"Hello     \") == \"Hello\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     fix_spaces('  This is my test string     ') == 'This_is_my_test_string'\nassert     fix_spaces(' This is my test string') == 'This_is_my_test_string'\nassert     fix_spaces(' This is my test string ') == 'This_is_my_test_string'\nassert     fix_spaces('  This is my test string ') == 'This_is_my_test_string'\nassert     fix_spaces('  This is my test string   ') == 'This_is_my_test_string'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     fix_spaces(\"The quick brown fox jumps over the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\nassert fix_spaces(\"The  quick brown  fox jumps over the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\nassert fix_spaces(\"The    quick     brown     fox jumps over    the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\nassert fix_spaces(\"The  quick brown fox jumps over the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\nassert fix_spaces(\"The  quick   brown   fox   jumps   over   the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     (fix_spaces(\"this is  a string    \") == \"this_is_a_string\")\nassert     (fix_spaces(\"  this is a string   \") == \"this_is_a_string\")\nassert     (fix_spaces(\"this is a string    \") == \"this_is_a_string\")\nassert     (fix_spaces(\"this    is    a    string    \") == \"this_is_a_string\")\nassert     (fix_spaces(\"this is a string    \") == \"this_is_a_string\")\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     fix_spaces('a b c d')     == 'a_b_c_d', \"String 'a b c d' is not correct\"\nassert     fix_spaces('a b c d  ') == 'a_b_c_d', \"String 'a b c d 'is not correct\"\nassert     fix_spaces('a   b c d')     == 'a_b_c_d', \"String 'a   b c d' is not correct\"\nassert     fix_spaces('a   b   c  d') == 'a_b_c_d', \"String 'a   b   c  d' is not correct\"\nassert     fix_spaces('a b c d')     == 'a_b_c_d', \"String 'a b c d' is not correct\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     fix_spaces(\"My      name   is   Kamel  .\")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel.\")         == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"\")                         == \"\", \\\n        fix_spaces(\"   My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name_is_Kamel_.\", \\\n        fix_spaces(\"My name is Kamel  \")     == \"My_name"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     'a_b' == fix_spaces('a b')\nassert     'a_b' == fix_spaces('a  b')\nassert     'a-b' == fix_spaces('a  b')\nassert     'a b' == fix_spaces(' a b')\nassert     'a_b' == fix_spaces(' a_b')\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     fix_spaces('hello  world  ') == 'hello_world', \"Strings with spaces\"\nassert fix_spaces(' hello   world  ') == 'hello_world', \"Strings with intermediate spaces\"\nassert fix_spaces('hello world') == 'hello_world', \"One space string\"\nassert fix_spaces(' hello world ') == 'hello_world', \"Empty string\"\nassert fix_spaces('') == '', \"Empty string\"\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     fix_spaces('This is a test') == 'This_is_a_test'\nassert     fix_spaces('This is a test') == 'This_is_a_test'\nassert     fix_spaces('This is a test') == 'This_is_a_test'\nassert     fix_spaces('This is a test') == 'This_is_a_test'\nassert     fix_spaces('This is a test') == 'This_is_a_test'\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     fix_spaces(\"hello\") == \"hello\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     file_name_check('0.txt') == 'No', '0.txt is not a valid file name!'\nassert     file_name_check('0_a.txt') == 'No', '0_a.txt is not a valid file name!'\nassert     file_name_check('0_a.txt') == 'No', '0_a.txt is not a valid file name!'\nassert     file_name_check('0_a.txt') == 'No', '0_a.txt is not a valid file name!'\nassert     file_name_check('0_a.txt') == 'No', '0_a.txt is not a valid file name!'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     file_name_check('asd.1') == 'No', \"file_name_check('asd.1') should be No\"\nassert     file_name_check('asd.txt') == 'Yes', \"file_name_check('asd.txt') should be Yes\"\nassert     file_name_check('asd.exe') == 'Yes', \"file_name_check('asd.exe') should be Yes\"\nassert     file_name_check('asd.dll') == 'Yes', \"file_name_check('asd.dll') should be Yes\"\nassert     file_name_check('asd.txt.txt') == 'Yes', \"file_name_check('asd.txt.txt') should be Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     file_name_check(\"01.txt\") == 'No'\nassert     file_name_check(\"20.txt\") == 'No'\nassert     file_name_check(\"22.exe\") == 'No'\nassert     file_name_check(\"12.exe\") == 'Yes'\nassert     file_name_check(\"20.dll\") == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     file_name_check('valid_file_name.txt') == 'Yes'\nassert     file_name_check('invalid_file_name.txt') == 'No'\nassert     file_name_check('valid_file_name.exe') == 'Yes'\nassert     file_name_check('invalid_file_name.exe') == 'No'\nassert     file_name_check('valid_file_name.dll') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     file_name_check('text.txt') == 'Yes'\nassert     file_name_check('txt.txt') == 'Yes'\nassert     file_name_check('text.txt.exe') == 'Yes'\nassert     file_name_check('a.b.c.txt') == 'No'\nassert     file_name_check('a.b.c.txt.exe') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     file_name_check('file.txt') == 'Yes'\nassert     file_name_check('file.exe') == 'Yes'\nassert     file_name_check('file.dll') == 'Yes'\nassert     file_name_check('file.a') == 'No'\nassert     file_name_check('file.A') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     file_name_check(\"abcde9.txt\") == 'No', \"error\"\nassert     file_name_check(\"abcde1.txt\") == 'Yes', \"error\"\nassert     file_name_check(\"abcde2.txt\") == 'No', \"error\"\nassert     file_name_check(\"abcde3.txt\") == 'Yes', \"error\"\nassert     file_name_check(\"abcde4.txt\") == 'No', \"error\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     file_name_check('abc') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.txt.exe') == 'Yes'\nassert     file_name_check('abc.txt.dll') == 'Yes'\nassert     file_name_check('abc.txt.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     file_name_check('abc123')    ==    'No'\nassert     file_name_check('abc_123')    ==    'No'\nassert     file_name_check('abc.txt')    ==    'Yes'\nassert     file_name_check('abc.exe')    ==    'Yes'\nassert     file_name_check('abc.dll')    ==    'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     file_name_check('test.123') == 'No'\nassert     file_name_check('123.test') == 'No'\nassert     file_name_check('test.123.txt') == 'Yes'\nassert     file_name_check('hello') == 'No'\nassert     file_name_check('hello.txt') == 'Yes'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 30\nassert     sum_squares([4,6,8,10,12]) == 304\nassert     sum_squares([0,1,2,3,4,5,6,7,8,9,10]) == 28420\nassert     sum_squares([1,2,3,4,5,6]) == 1*1 + 2*2 + 3*3 + 4*4 + 5*5 + 6*6\nassert     sum_squares([7,8,9]) == 7*7 + 8*8 + 9*9\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (sum_squares([1, 2, 3, 4, 5])    ==    1 + 4 + 25)\nassert     (sum_squares([2, 3, 4, 5])     ==    2 + 9 + 64)\nassert     (sum_squares([3, 4, 5])     ==    3 + 12 + 125)\nassert     (sum_squares([4, 5])         ==    4 + 16 + 100)\nassert     (sum_squares([5])         ==    5 + 25 + 125)\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sum_squares([1, 3, 4, 9, 10, 16, 19]) == 5020\nassert     sum_squares([2, 4, 8, 10, 12, 14, 16, 18, 20]) == 47600\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 1718750\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 1718750\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]) == 1718750\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([1]) == 1\nassert     sum_squares([1,2]) == 5\nassert     sum_squares([1,2,3]) == 14\nassert     sum_squares([1,2,3,4]) == 29\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nassert     sum_squares([]) == 0\nassert     sum_squares([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55\nassert     sum_squares([1, 1, 1, 1, 1]) == 30\n\ndef vowel_count(word):\n    \"\"\"\n    This function shall accept a string as an input argument and return a dictionary with keys as the vowels and values as the count\n    of vowels in the string as input argument. The function shall consider the vowels to be a, e, i, o, and u in the string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) ==     33168\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) ==     335664\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) ==     345232\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) ==     345664\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) ==     345232\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 0+16+81+100+121+144+169+196+225+256\nassert     sum_squares([1,3,5,7,9]) == 1+25+49+81+125\nassert     sum_squares([1,2,3]) == 1+4+9+16+25\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 1+4+9+16+25+36+49+64+81+100+121+144+169+196+225+256\nassert     sum_squares([1,2,3,4,5,6,7,8,9]) == 1+4+9+16+25+36+49+64+81+100+121+144+169\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     [22, 96] == sum_squares([2, 4, 3, 1, 5, 10, 4, 5, 3, 1, 5, 10, 4, 5, 3])\nassert     [1, 2, 3, 4] == sum_squares([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])\nassert     [1, 2, 3, 4] == sum_squares([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])\nassert     [1, 2, 3, 4] == sum_squares([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4])\nassert     [2, 4, 6, 8] == sum_squares([2, 4, 3, 1, 5, 10, 4, 5, 3, 1, 5, 10, 4, 5, 3])\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"Hi you you you you you you you\") == \"Hi You You You You You You\"\nassert     words_in_sentence(\"Hello Hi Hello Hi\") == \"Hello Hi Hi\"\nassert     words_in_sentence(\"I I I I I I I I I I\") == \"I I I I I I I I I\"\nassert     words_in_sentence
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     words_in_sentence(\"I am a great programmer\") == \"I am a great programmer\", \"The sentence is not correct.\"\nassert     words_in_sentence(\"He is a professor\") == \"He is a professor\", \"The sentence is not correct.\"\nassert     words_in_sentence(\"A man with a telescope\") == \"A man with a telescope\", \"The sentence is not correct.\"\nassert     words_in_sentence(\"John is a man with a telescope\") == \"John is a man with a telescope\", \"The sentence is not correct.\"\nassert     words_in_sentence(\"Programming is the best course\") == \"Programming is the best course\", \"The sentence is not correct.\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"a\") == \"a\"\nassert     words_in_sentence(\"a b c\") == \"ab c\"\nassert     words_in_sentence(\"a a a a a\") == \"a a\"\nassert     words_in_sentence(\"a a a a b c d\") == \"a a b c d\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"I have an apple\") == 'An apple'\nassert     words_in_sentence(\"I have an apple and a pen\") == 'An apple pen'\nassert     words_in_sentence(\"I have an apple and a pen and a pencil\") == 'An apple pen pencil'\nassert     words_in_sentence(\"I have an apple and a pen and a pencil and a notebook\") == 'An apple pen pencil notebook'\nassert     words_in_sentence(\"I have an apple and a pen and a pencil and a notebook and a phone\") == 'An apple pen pencil notebook phone'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     words_in_sentence('the quick brown fox jumps over the lazy dog') == 'the quick brown fox jumps over the lazy dog', 'the wrong result'\nassert     words_in_sentence('the quick brown fox jumps over the dog') == 'the quick brown fox', 'the wrong result'\nassert     words_in_sentence('the quick brown fox') == 'the quick brown fox', 'the wrong result'\nassert     words_in_sentence('the quick brown fox') == 'the quick brown fox', 'the wrong result'\nassert     words_in_sentence('the quick brown fox') == 'the quick brown fox', 'the wrong result'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"Hi guys\") == \"Hi guys\"\nassert     words_in_sentence(\"Hi guys this is me\") == \"Hi guys this is me\"\nassert     words_in_sentence(\"Hi guys this is me\") == \"Hi guys\"\nassert     words_in_sentence(\"Hi guys this is me\") == \"Hi guys\"\nassert     words_in_sentence(\"Hi guys this is me\") == \"Hi guys\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"This is a test\") == \"test\"\nassert     words_in_sentence(\"It's a green day in the city\") == \"green\"\nassert     words_in_sentence(\"This is a test!\") == \"test\"\nassert     words_in_sentence(\"It's a green day in the city!\") == \"green\"\nassert     words_in_sentence(\"Hello world, my name is John\") == \"world\"\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     words_in_sentence('the quick brown fox jumps over the lazy dog') == 'quick brown fox jumps over the lazy dog'\nassert     words_in_sentence('the quick brown fox jumps over the dog') == 'quick brown'\nassert     words_in_sentence('the quick brown fox jumps over the dog for the lazy dog') == 'quick brown'\nassert     words_in_sentence('the quick brown fox jumps over the dog for the dog') == 'quick'\nassert     words_in_sentence('the quick brown fox jumps over the dog for the dog for the lazy dog') == 'quick'\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     words_in_sentence('hello world') == 'helloworld'\nassert     words_in_sentence('hello world hi') == 'hellohi'\nassert     words_in_sentence('hello') == 'hello'\nassert     words_in_sentence(' ') ==''\nassert     words_in_sentence(' ') ==''\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"Hello world\") == \"Hello world\"\nassert     words_in_sentence(\"This is a string\") == \"This is a string\"\nassert     words_in_sentence(\"This is a string 2\") == \"This is a string 2\"\nassert     words_in_sentence(\"This is a string 2 3\") == \"This is a string 2 3\"\nassert     words_in_sentence(\"This is a string 2 5\") == \"This is a string 2 5\"\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     simplify('0/5', '2')\nassert     simplify('1/5', '2')\nassert     simplify('1/5', '3')\nassert     simplify('2/5', '3')\nassert     simplify('3/5', '3')\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1/3\") == False\nassert     simplify(\"2/4\", \"1/4\") == True\nassert     simplify(\"2/3\", \"1/3\") == False\nassert     simplify(\"7/5\", \"1/5\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     simplify(\"8/3\", \"3/2\") == False\nassert     simplify(\"2/3\", \"3/2\") == True\nassert     simplify(\"2/3\", \"3/3\") == True\nassert     simplify(\"5/6\", \"5/6\") == True\nassert     simplify(\"2/3\", \"3\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     simplify('1/2', '1/2') == True\nassert     simplify('1/2', '1/3') == False\nassert     simplify('1/6', '1/4') == True\nassert     simplify('1/5', '1/4') == False\nassert     simplify('1/5', '1/7') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     simplify(\"1/2\", \"3/4\") == True\nassert     simplify(\"5/16\", \"25/32\") == False\nassert     simplify(\"1/2\", \"8/5\") == True\nassert     simplify(\"1/2\", \"3/4\") == True\nassert     simplify(\"1/2\", \"1/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     simplify('2/3', '5/2') is True\nassert     simplify('2/4', '5/3') is False\nassert     simplify('4/7', '3/2') is True\nassert     simplify('1/5', '3/2') is False\nassert     simplify('3/2', '7/5') is True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     simplify(\"1/4\", \"2/3\") == True\nassert     simplify(\"7/2\", \"7/2\") == True\nassert     simplify(\"5/2\", \"7/2\") == False\nassert     simplify(\"6/4\", \"7/2\") == False\nassert     simplify(\"6/4\", \"1/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     simplify('1', '2') == False, '1 / 2'\nassert     simplify('1', '1') == True, '1 / 1'\nassert     simplify('2', '1') == False, '2 / 1'\nassert     simplify('2', '2') == True, '2 / 2'\nassert     simplify('1/2', '1/2') == True, '1 / 2'\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     simplify('1/2', '2/3') == True\nassert     simplify('1/2', '2/3') == False\nassert     simplify('2/3', '1/2') == True\nassert     simplify('2/3', '1/2') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     simplify('1/2', '3/4') == True\nassert     simplify('3/4', '2/3') == True\nassert     simplify('1/2', '0/4') == False\nassert     simplify('1/2', '5/4') == True\nassert     simplify('1/2', '6/4') == False\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     order_by_points([3, 7, 4, 6, 2, 9]) == [2, 3, 4, 6, 7, 9], \\\n        order_by_points([9, 4, 7, 8, 1, 3, 2, 6, 5])\nassert     order_by_points([9, 4, 7, 8, 1, 3, 2, 6, 5, 7, 8, 10, 11]) == \\\n        [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], \\\n        order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n\ndef order_by_lexical_order(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in lexicographical order according to their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     order_by_points([35, 9, 10, 28, 17, 2]) == [35, 17, 10, 2, 28, 9]\nassert     order_by_points([35, 9, 10, 28, 17, 2, 5, 31, 7]) == [35, 17, 10, 2, 28, 9, 5, 7, 31, 31]\nassert     order_by_points([35, 9, 10, 28, 17, 2, 5, 31, 7, 2]) == [2, 35, 17, 10, 31, 28, 17, 9, 5, 2]\nassert     order_by_points([-35, 9, 10, -28, 17, 2, -5, 31, 7, 2]) == [-35, -10, 17, 2, -31, -28, -17, 9, 5, 2]\nassert     order_by_points([-35, 9, 10, -28, 17, 2, -5, 31, 7, 2, -9]) == [-35, -10, 17, 2, -9, -31, -28, -17, 9, 5, 2]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n    \n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([0, 8, 1, 2, 3, 4, 5, 6, 7, 9])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([0, 9, 1, 2, 3, 4, 5, 6, 7, 8])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([8, 1, 2, 3, 4, 5, 6, 7, 9, 0])\nassert     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([9, 1, 2, 3, 4, 5, 6, 7, 8, 0])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     order_by_points([10,2,3,9,8,7,6,1,4,5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     order_by_points([12, 21, 3, 2, 1, 10, 11, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     order_by_points([2, 3, 1]) == [1, 2, 3]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     order_by_points([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     [2, 8, 6, 7, 1, 5]    == order_by_points([8, 1, 5, 2, 6, 7])\nassert     [1, 8, 2, 3, 5, 6]    == order_by_points([3, 8, 6, 1, 5, 2])\nassert     [1, 3, 2, 4, 5, 6]    == order_by_points([6, 1, 3, 5, 2, 4])\nassert     [1, 3, 2, 4, 5, 6]    == order_by_points([6, 5, 4, 3, 2, 1])\nassert     [1, 3, 2, 4, 5, 6]    == order_by_points([6, 5, 4, 3, 2, 1])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     [9, 1, 2, 8, 4, 3, 7] == \\\n            order_by_points(\n                    [8, 4, 1, 7, 3, 9, 2, 5])\nassert     [1, 2, 3, 4, 5, 6, 7, 8] == \\\n            order_by_points([8, 4, 1, 7, 3, 9, 2, 5, 1])\nassert     [7, 6, 5, 4, 3, 2, 1, 0] == \\\n            order_by_points([0, 1, 2, 3, 4, 5, 6, 7])\nassert     [8, 5, 6, 1, 7, 4, 3, 2, 0] == \\\n            order_by_points([0, 1, 2, 3, 4, 5, 6, 7, 8])"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     [2, 14, 7, 6, 1, 10, 9, 8, 5, 3, 4, 11] == \\\n            order_by_points(    [40, 20, 4, 30, 10, 28, 50, 4, 2, 8, 7, 34, 99, 19, 10, 32, 50, 45, 60, 34, 10, 22, 10, 21, 22, 10, 10, 21, 50, 40, 30, 34, 30, 25, 30, 19, 50, 1, 30, 40, 20, 22, 40, 14, 30, 1, 10, 32, 22, 11, 12, 25, 1, 22, 22, 22, 1, 22, 12, 22, 12, 22, 22, 22, 22, 1, 22, 22, 22, 22, 22, 1, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9] == order_by_points([1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == order_by_points([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == order_by_points([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == order_by_points([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\nassert     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] == order_by_points([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     order_by_points([9, 10, 11, 12, 13, 14, 15]) == [9, 10, 11, 12, 13, 14, 15]\nassert     order_by_points([-1, -2, -3, -4, -5, -6, -7, -8]) == [-8, -7, -6, -5, -4, -3, -2, -1]\nassert     order_by_points([-9, -10, -11, -12, -13, -14, -15]) == [-15, -14, -13, -12, -11, -10, -9]\nassert     order_by_points([8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 0\nassert     specialFilter([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 5\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     specialFilter([6, 4, 7, 1, 3, 5, 9, 2]) == 3\nassert     specialFilter([6, 4, 7, 1, 3, 5, 9, 10]) == 0\nassert     specialFilter([6, 4, 7, 1, 3, 5, 9, 11]) == 4\n\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     specialFilter([1, 3, 5, 7, 9]) == 4\nassert     specialFilter([1, 3, 5, 7, 8, 9, 10]) == 6\nassert     specialFilter([1, 3, 5, 7, 8, 9, 10, 100]) == 7\nassert     specialFilter([]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\nassert     specialFilter([2, 22, 23, 100, 101, 200]) == 3\nassert     specialFilter([2, 22, 123, 100, 101, 200]) == 2\nassert     specialFilter([2, 22, 123, 200, 101, 200]) == 1\nassert     specialFilter([12, 22, 23, 100, 101, 200]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     specialFilter([2, 13, 14, 1, 8, 5, 9, 10, 12, 3]) == 2\nassert     specialFilter([13, 5, 1, 8, 12, 3, 9, 10, 2, 14]) == 1\nassert     specialFilter([5, 15, 25, 4, 8, 10, 19, 20, 3, 6, 8, 10, 12, 14, 2, 15]) == 2\nassert     specialFilter([5, 6, 4, 8, 10, 19, 20, 3, 6, 8, 10, 12, 14, 2, 15]) == 1\nassert     specialFilter([2, 13, 14, 1, 8, 5, 9, 10, 12, 3]) == 2\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     specialFilter([3, 5, 9]) == 2\nassert     specialFilter([9,9,9]) == 3\nassert     specialFilter([1,2,3,4,5]) == 0\nassert     specialFilter([2,5,8,9]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     specialFilter([15, 20, 23, 100, 12, 15, 2, 3, 4, 10]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     specialFilter([12, 12, 34, 34, 34, 67, 67, 67]) == 5\nassert     specialFilter([23, 101, 12, 15, 19, 30, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 7\nassert     specialFilter([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 13\n"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     specialFilter([1,2,3,4,5,6,7,8,9,10,11]) == 2\nassert     specialFilter([1,3,5,7,9,11]) == 5\nassert     specialFilter([1,2,3,4,5,6,7,8,9,10]) == 8\nassert     specialFilter([1,3,5,7,9]) == 4\nassert     specialFilter([1,3,5,7,9,11]) == 6\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_max_triples(10) == 7\nassert     get_max_triples(100) == 30\nassert     get_max_triples(1000) == 596\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     get_max_triples(5) == 7\nassert     get_max_triples(10) == 17\nassert     get_max_triples(15) == 39\nassert     get_max_triples(20) == 233\nassert     get_max_triples(25) == 385\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 4\nassert     get_max_triples(6) == 5\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     get_max_triples(5)     == 7\nassert     get_max_triples(10) == 13\nassert     get_max_triples(15) == 25\nassert     get_max_triples(100) == 253\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     get_max_triples(10) == 2\nassert     get_max_triples(0) == 0\nassert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     get_max_triples(3) == 1\nassert     get_max_triples(5) == 3\nassert     get_max_triples(10) == 4"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 1\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     get_max_triples(5) == 4\nassert     get_max_triples(10) == 10\nassert     get_max_triples(100) == 50\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     get_max_triples(10) == 3\nassert     get_max_triples(100) == 96\nassert     get_max_triples(1000) == 1456\n\ndef test_get_max_triples():\n    assert get_max_triples(10) == 3\n    "
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     get_max_triples(9) == 5\nassert     get_max_triples(10) == 8\nassert     get_max_triples(99) == 10\nassert     get_max_triples(100) == 16\nassert     get_max_triples(101) == 19\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     bf('mercury','venus') ==     ('venus', 'earth','mercury')\nassert     bf('mars', 'jupiter') ==     ('mercury','venus', 'earth','mars')\nassert     bf('venus', 'earth') ==     ('mercury','venus', 'earth')\nassert     bf('mercury', 'jupiter') ==     ('earth','mars', 'jupiter')\nassert     bf('jupiter','mercury') ==     ('earth', 'jupiter','mercury')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     (bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'))\nassert     (bf('Earth', 'Mars') == ('Mars', 'Mercury', 'Venus', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'))\nassert     (bf('Mars', 'Earth') == ('Earth', 'Venus', 'Mercury', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'))\nassert     (bf('Mars', 'Saturn') == ('Saturn', 'Mars', 'Venus', 'Uranus', 'Neptune', 'Jupiter'))\nassert     (bf('Jupiter', 'Saturn') == ('Saturn', 'Mars', 'Venus', 'Uranus', 'Neptune', 'Jupiter'))\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     bf('Mars', 'Neptune') == ('Mars', 'Neptune')\nassert     bf('Jupiter', 'Earth') == ('Jupiter', 'Earth')\nassert     bf('Mars', 'Mercury') == ('Mercury', 'Mars')\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth')\nassert     bf('Venus', 'Jupiter') == ('Venus', 'Jupiter')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     bf(\"Mercury\", \"Venus\") ==     (\"Mercury\", \"Venus\")\nassert     bf(\"Venus\", \"Earth\") ==     (\"Mercury\", \"Venus\")\nassert     bf(\"Earth\", \"Mars\") ==     (\"Venus\", \"Earth\")\nassert     bf(\"Mars\", \"Jupiter\") ==     (\"Venus\", \"Mars\", \"Earth\", \"Jupiter\")\nassert     bf(\"Jupiter\", \"Saturn\") ==     (\"Mars\", \"Jupiter\", \"Earth\", \"Saturn\")\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars')\nassert     bf('Mercury', 'Earth') == ('Mercury', 'Earth', 'Mars')\nassert     bf('Venus', 'Earth') == ('Mercury', 'Earth', 'Mars')\nassert     bf('Earth', 'Mars') == ('Mercury', 'Earth', 'Mars')\nassert     bf('Mars', 'Jupiter') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     bf('mercury','venus') == ('mercury','venus')\nassert     bf('mercury','mars') == ('mercury','venus','mars')\nassert     bf('mercury', 'jupiter') == ('mercury','venus','mars', 'jupiter')\nassert     bf('mercury','saturn') == ('mercury','venus','mars', 'jupiter','saturn')\nassert     bf('mercury', 'uranus') == ('mercury','venus','mars', 'jupiter','saturn', 'uranus')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     bf('Venus', 'Earth')         == ('Earth', 'Venus')\nassert     bf('Earth', 'Venus')         == ('Earth', 'Venus')\nassert     bf('Mars', 'Earth')         == ('Earth',)\nassert     bf('Venus', 'Mars')         == ('Venus',)\nassert     bf('Earth', 'Mars')         == ('Earth', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury')\nassert     bf('Venus', 'Earth') == ('Mercury', 'Venus', 'Earth')\nassert     bf('Earth', 'Mars') == ('Mercury', 'Venus', 'Earth', 'Mars')\nassert     bf('Mars', 'Jupiter') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter')\nassert     bf('Jupiter', 'Saturn') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sorted_list_sum([\"abc\", \"abcd\", \"ab\", \"abcdef\", \"a\"]) == \"abcdef\"\nassert     sorted_list_sum([\"abc\", \"abcde\", \"abcdf\"]) == \"abc\"\nassert     sorted_list_sum([\"a\"]) == \"a\"\nassert     sorted_list_sum([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == \"c\"\nassert     sorted_list_sum([]) == \"\"\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([\"hello\", \"bye\", \"bye\", \"i\", \"abc\", \"def\", \"he\", \"abc\"]) == [\"hello\", \"abc\", \"def\"]\nassert     sorted_list_sum([\"hello\", \"hello\", \"hello\", \"hi\", \"hello\", \"bye\"]) == [\"hello\", \"hello\", \"hello\", \"hello\", \"hi\", \"bye\"]\nassert     sorted_list_sum([\"hello\", \"hey\", \"hi\", \"hey\", \"hello\", \"bye\", \"bye\", \"hi\", \"hey\", \"hey\", \"hello\", \"hello\"]) == [\"hello\", \"hello\", \"hello\", \"hey\", \"hey\", \"hi\", \"bye\", \"bye\", \"hi\", \"hey\", \"hello\", \"hello\"]\nassert     sorted_list_sum([]) == []\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     sorted_list_sum(['what', 'has', 'a', 'long', 'name']) == ['what', 'has', 'a', 'long', 'name']\nassert     sorted_list_sum(['this', 'is', 'a', 'long','string']) == ['this', 'is', 'a', 'long','string']\nassert     sorted_list_sum(['this', 'is', 'a', 'long','string', 'what']) == ['this', 'is', 'a', 'long','string']\nassert     sorted_list_sum(['this', 'is', 'a', 'long','string', 'this']) == ['this', 'is', 'a', 'long','string']\nassert     sorted_list_sum(['this', 'is', 'a', 'long','string', 'long']) == ['this', 'is', 'a', 'long','string']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"a\", \"d\", \"l\", \"o\", \"t\", \"m\", \"o\", \"a\", \"b\", \"o\", \"d\", \"n\", \"o\", \"a\", \"r\", \"a\", \"m\", \"o\", \"l\", \"t\", \"h\", \"n\", \"l\", \"i\", \"t\", \"h\", \"h\", \"o\", \"r\", \"i\", \"t\", \"r\", \"n\", \"a\", \"m\", \"e\", \"l\", \"r\", \"i\", \"a\", \"t\", \"s\", \"a\", \"o\", \"g\", \"n\", \"a\", \"l\", \"i\", \"a\", \"m\", \"a\", \"c\", \"l\", \"a\", \"b\", \"h\", \"a\", \"h\", \"o\", \"b\", \"n\", \"l\", \"a\", \"b\", \"r\", \"e\", \"g\", \"t\", \"e\", \"t\", \"r\", \"a\", \"l\", \"a\", \"l\", \"a\", \"a\", \"n\", \"a\", \"c\", \"s\", \"t\", \"g\", \"h\", \"l\", \"b\", \"b\", \"o\", \"b\", \"a\", \"h\", \"b\", \"a\", \"t\", \"a\", \"g\", \"d\", \"t\", \"c\", \"l\", \"a\", \"r\", \"a\", \"n\", \"s\", \"h\", \"m\", \"o\", \"r\", \"e\", \"i\", \"n\", \"l\", \"o\", \"d\", \"e\", \"t\", \"a\", \"d\", \"o\", \"r\", \"a\", \"r\", \"a\", \"b\", \"i\", \"o\", \"d\", \"e\", \"l\", \"t\", \"b\", \"a\", \"l\", \"e\", \"l\", \"t\", \"o\", \"e\", \"g\", \"t\", \"n\", \"o\", \"m\", \"a\", \"t\", \"o\", \"l\", \"c\", \"h\", \"l\", \"e\", \"r\", \"t\", \"e\", \"o\", \"a\", \"g\", \"l\", \"i\", \"h\", \"n\", \"a\", \"b\", \"l\", \"b\", \"l\", \"h\", \"m\", \"t\", \"r\", \"a\", \"e\", \"c\", \"r\", \"a\", \"t\", \"o\", \"s\", \"r\", \"b\", \"c\", \"h\", \"t\", \"e\", \"t\", \"r\", \"e\", \"r\", \"o\", \"n\", \"r\", \"e\", \"r\", \"i\", \"t\", \"b\", \"s\", \"r\", \"t\", \"c\", \"o\", \"m\", \"n\", \"c\", \"r\", \"e\", \"r\", \"c\", \"a\", \"g\", \"n\", \"o\", \"b\", \"t\", \"b\", \"r\", \"o\", \"l\", \"c\", \"r\", \"c\", \"n\", \"t\", \"i\", \"c\", \"n\", \"a\", \"h\", \"r\", \"r\", \"b\", \"i\", \"t\", \"b\", \"n\", \"a\", \"r\", \"i\", \"h\", \"c\", \"o\", \"l\", \"a\", \"m\", \"a\", \"g\", \"n\", \"e\", \"c\", \"t\", \"a\", \"r\", \"t\", \"a\", \"m\", \"a\", \"t\", \"t\", \"l\", \"a\", \"c\", \"o\", \"a\", \"d\", \"r\", \"t\", \"a\", \"r\", \"i\", \"g\", \"e\", \"r\", \"t\", \"r\", \"a\", \"t\", \"r\", \"t\", \"n\", \"t\", \"a\", \"r\", \"t\", \"a\", \"s\", \"t\", \"o\", \"a\", \"b\", \"i\", \"r\", \"e\", \"l\", \"i\", \"s\", \"a\", \"r\", \"a\", \"t\", \"t\", \"s\", \"a\", \"s\", \"t\", \"r\", \"a\", \"g\", \"t\", \"a\", \"b\", \"a\", \"r\", \"t\", \"o\", \"r\", \"a\", \"s\", \"t\", \"b\", \"i\", \"h\", \"r\", \"t\", \"o\", \"a\", \"b\", \"a\", \"e\", \"r\", \"n\", \"a\", \"s\", \"t\", \"r\", \"i\", \"c\", \""
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     sorted_list_sum(['amazing', 'list', 'excellent', 'excellent', 'list']) == ['excellent', 'excellent', 'list']\nassert     sorted_list_sum(['excellent', 'excellent', 'amazing', 'excellent', 'list']) == ['excellent', 'excellent', 'list', 'amazing']\nassert     sorted_list_sum(['list', 'list', 'list', 'list', 'list']) == ['list']\nassert     sorted_list_sum(['list', 'list', 'list', 'list', 'list']) == ['list', 'list', 'list', 'list', 'list']\nassert     sorted_list_sum(['list', 'list', 'list', 'list', 'list', 'list', 'list', 'list']) == ['list', 'list', 'list', 'list', 'list', 'list', 'list', 'list']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     sorted_list_sum(['Python', 'Ruby', 'Perl', 'Java']) == ['Python', 'Ruby', 'Perl', 'Java']\nassert     sorted_list_sum(['Python', 'Python', 'Python']) == ['Python', 'Python', 'Python']\nassert     sorted_list_sum(['Lorem', 'Ipsum', 'Dolor']) == ['Lorem', 'Ipsum', 'Dolor']\nassert     sorted_list_sum(['Lorem', 'Lorem', 'Lorem']) == ['Lorem', 'Lorem', 'Lorem']\nassert     sorted_list_sum([]) == []\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     sorted_list_sum([\"Do\", \"it\", \"Do\", \"it\", \"Do\"]) == [\"Do\", \"Do\", \"it\"]\nassert     sorted_list_sum([\"abcdefg\", \"cab\", \"abcdefg\", \"g\", \"cab\", \"ab\", \"abcdefg\", \"ab\", \"abcdefg\", \"ab\"]) == [\"abcdefg\", \"abc\", \"ab\", \"g\", \"cab\", \"cab\", \"ab\", \"ab\", \"ab\", \"abcdefg\"]\nassert     sorted_list_sum([\"abcdefg\", \"cab\", \"abcdefg\", \"g\", \"cab\", \"ab\", \"abcdefg\", \"ab\", \"abcdefg\", \"ab\"]) == [\"abcdefg\", \"abc\", \"ab\", \"g\", \"cab\", \"cab\", \"ab\", \"ab\", \"ab\", \"abcdefg\"]\nassert     sorted_list_sum([\"abcdefg\", \"cab\", \"abcdefg\", \"g\", \"cab\", \"ab\", \"abcdefg\", \"ab\", \"abcdefg\", \"ab\"]) == [\"abcdefg\", \"abc\", \"ab\", \"g\", \"cab\", \"cab\", \"ab\", \"ab\", \"ab\", \"abcdefg\"]\nassert     sorted_list_sum([\"abcdefg\", \"cab\", \"abcdefg\", \"g\", \"cab\", \"ab\", \"abcdefg\", \"ab\", \"abcdefg\", \"ab\"]) == [\"abcdefg\", \"abc\", \"ab\", \"g\", \"cab\", \"cab\", \"ab\", \"ab\", \"ab\", \"abcdefg\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     sorted_list_sum([\n    \"pink\",\n    \"black\",\n    \"white\",\n    \"red\",\n    \"yellow\",\n    \"blue\",\n    \"green\",\n    \"gray\",\n    \"violet\",\n    \"cyan\"]) == [\n    \"cyan\",\n    \"violet\",\n    \"gray\",\n    \"black\",\n    \"blue\",\n    \"green\",\n    \"red\",\n    \"white\",\n    \"yellow\",\n    \"pink\",\n    \"cyan\"\n]\n\nassert     sorted_list_sum([\n    \"red\",\n    \"black\",\n    \"white\",\n    \"yellow\",\n    \"green\",\n    \"violet\",\n    \"blue\",\n    \"gray\",\n    \"cyan\",\n    \"pink\",\n    \"violet\"]) == [\n    \"red\",\n    \"black\",\n    \"white\",\n    \"cyan\",\n    \"violet\",\n    \"gray\",\n    \"pink\",\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"cyan\"]\n\nassert     sorted_list_sum([\n    \"red\",\n    \"white\",\n    \"green\",\n    \"violet\",\n    \"blue\",\n    \"gray\",\n    \"yellow\",\n    \"pink\",\n    \"violet\",\n    \"green\",\n    \"red\"]) == [\n    \"red\",\n    \"white\",\n    \"green\",\n    \"violet\",\n    \"blue\",\n    \"gray\",\n    \"yellow\",\n    \"pink\",\n    \"violet\",\n    \"green\",\n    \"red\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     sorted_list_sum(['a', 'ab', 'abc']) == ['ab', 'abc']\nassert     sorted_list_sum(['ab', 'a', 'abc', 'abcd', 'abcde']) == ['ab', 'abcd', 'abcde']\nassert     sorted_list_sum(['a', 'b', 'abc', 'abcd', 'abcde']) == ['abc', 'abcd', 'abcde']\nassert     sorted_list_sum(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\nassert     sorted_list_sum(['ab', 'a', 'c', 'b', 'a', 'abc']) == ['a', 'a', 'ab', 'abc', 'b', 'c']\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     sorted_list_sum(['first','second', 'third']) == ['first','second', 'third']\nassert     sorted_list_sum(['one', 'two', 'three', 'four', 'five']) == ['one', 'two', 'three', 'four', 'five']\nassert     sorted_list_sum(['first', 'first']) == ['first']\nassert     sorted_list_sum(['first','second', 'third', 'fourth', 'fifth','sixth','seventh', 'eighth']) == ['first','second', 'third', 'fourth', 'fifth','sixth','seventh', 'eighth']\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     x_or_y(2, 1, 2) == 1\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(5, 1, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     x_or_y(19, 1, 2) == 2\nassert     x_or_y(1, 1, 2) == 1\nassert     x_or_y(2, 1, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert xtra.x_or_y(1, 1, 1) == 1\nassert xtra.x_or_y(2, 1, 2) == 1\nassert xtra.x_or_y(3, 1, 2) == 2\nassert xtra.x_or_y(4, 1, 2) == 2\nassert xtra.x_or_y(5, 1, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     x_or_y(1, 2, 3) == 2\nassert     x_or_y(2, 2, 3) == 3\nassert     x_or_y(3, 2, 3) == 2\nassert     x_or_y(3, 3, 3) == 3\nassert     x_or_y(2, 3, 4) == 4\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert xt_or_yt(7,3,5) == 3\nassert xt_or_yt(13,3,5) == 5\nassert xt_or_yt(12,3,5) == 3\nassert xt_or_yt(11,3,5) == 5\nassert xt_or_yt(10,3,5) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     x_or_y(17, 9, 11) == 9\nassert     x_or_y(25, 7, 11) == 11\nassert     x_or_y(101, 7, 11) == 7\nassert     x_or_y(125, 7, 11) == 11\nassert     x_or_y(105, 7, 11) == 7\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     x_or_y(5, 7, 8) == 7\nassert     x_or_y(3, 7, 8) == 8\nassert     x_or_y(10, 7, 8) == 8\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert xt_or_yt(11, 3, 5) == 3\nassert xt_or_yt(5, 6, 7) == 7\nassert xt_or_yt(9, 11, 17) == 17\nassert xt_or_yt(7, 14, 19) == 19\nassert xt_or_yt(3, 17, 19) == 19"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert         x_or_y(2, 4, 8) == 4\nassert         x_or_y(2, 8, 4) == 8\nassert         x_or_y(3, 4, 8) == 8\nassert         x_or_y(3, 8, 4) == 4"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     x_or_y(3, 3, 6) == 3\nassert     x_or_y(5, 3, 6) == 3\nassert     x_or_y(5, 3, 3) == 3\nassert     x_or_y(6, 3, 6) == 3\nassert     x_or_y(6, 3, 3) == 3\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) == 0\nassert     double_the_difference([1, 3, 5]) == 6\nassert     double_the_difference([1, 2, 3, 4, 5]) == 30\nassert     double_the_difference([1, 2, 3, 4, -1]) == 22\nassert     double_the_difference([1.5, 2, 3, 4]) == 19.5\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) == 16\nassert     double_the_difference([-2, 3, 5]) == 16\nassert     double_the_difference([-3, 1, 5]) == 16\nassert     double_the_difference([]) == 0\n\ndef a_in_b(a, b):\n    '''\n    Given two lists of numbers, return a list that contains 1 if a \n    is in b, and 0 otherwise.\n   \n    If the input lists are empty, return an empty list.\n    '''\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) == 0 + 1 + 9 + 16\nassert     double_the_difference([1, -2, 3, -4]) == 0 + 4 + 9 + 16\nassert     double_the_difference([1, -2, 3, -4, 8]) == 1 + 9 + 25 + 16\nassert     double_the_difference([1, -2, 3, -4, 8, 10]) == 1 + 9 + 25 + 16 + 100\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     double_the_difference([]) == 0, \"Should be 0\"\nassert     double_the_difference([1, 2, 3, 4]) == 24, \"Should be 24\"\nassert     double_the_difference([-1, 2, 3, 4]) == 0, \"Should be 0\"\nassert     double_the_difference([5, -1, -2, 3]) == 30, \"Should be 30\"\nassert     double_the_difference([1, 2, 3, 4, 5]) == 24, \"Should be 24\"\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     double_the_difference([2, 7, 6, 7, 8, -2, -2, 5, 6, 8, -3, -6, -2]) == 7\nassert double_the_difference([2, 7, 6, 7, 8, -2, -2, 5, 6, 8, -3, -6, -2, 2, -3]) == 5\nassert double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     double_the_difference([-1, 4, 5]) == 28\nassert double_the_difference([1, 3]) == 0\nassert double_the_difference([-2, 4, -4, -8]) == 8\nassert double_the_difference([10, 3, 5]) == 60\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 14\nassert     double_the_difference([-1, -2, -3, -4, -5]) == 8\nassert     double_the_difference([0, 1, 2, 3, 4, 5]) == 14\nassert     double_the_difference([1.1, 2.2, 3.3, 4.4, 5.5]) == 14\nassert     double_the_difference([-1.1, -2.2, -3.3, -4.4, -5.5]) == 8\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     double_the_difference([2, 3, 4, -5, 5, -9, -7]) == 13\nassert     double_the_difference([-2, -3, -4, -5, -5, -9, -7]) == 39\nassert     double_the_difference([1, 2, 3]) == 4\nassert     double_the_difference([]) == 0\nassert     double_the_difference([9, 3]) == 9\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     double_the_difference([1,2,3])    == 14\nassert     double_the_difference([-1,2,3])    == 14\nassert     double_the_difference([-3,-2,3])    == 22\nassert     double_the_difference([])    == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6]) == 2\nassert     double_the_difference([-3, -5, -7]) == 4\nassert     double_the_difference([2, 4, 6]) == 4\nassert     double_the_difference([2, 4, -6]) == 4\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare([[3, 1, 5, 7, 9], [1, 6, 3, 4, 7]], [7, 4, 1, 6, 3]) == [0, 2, 1, 3, 2]\nassert     compare([[7, 2, 4, 3, 5], [9, 6, 5, 2, 3]], [5, 3, 4, 6, 2]) == [3, 0, 1, 3, 2]\nassert     compare([[7, 2, 4, 3, 5], [9, 6, 5, 2, 3]], [6, 4, 1, 6, 3]) == [0, 2, 1, 3, 2]\nassert     compare([[7, 2, 4, 3, 5], [9, 6, 5, 2, 3]], [9, 8, 6, 4, 5]) == [1, 1, 0, 1, 1]\nassert     compare([[7, 2, 4, 3, 5], [9, 6, 5, 2, 3]], [1, 8, 4, 2, 5]) == [1, 1, 0, 1, 1]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     compare([100,1,0,0], [0,1,0,0]) == [0,1,0,0]\nassert     compare([50,0,0,0], [0,0,0,0]) == [0,0,0,0]\nassert     compare([0,0,0,0], [50,0,0,0]) == [50,0,0,0]\nassert     compare([0,0,0,0], [50,50,0,0]) == [50,50,0,0]\nassert     compare([0,0,0,0], [0,50,0,0]) == [50,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     compare([9,8,7,6,5,4,3,2,1,0],[9,8,7,6,5,4,3,2,1,0]) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare([1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]) == [0,1,2,3,4,5,6,7,8,9]\nassert     compare([0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare([0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare([0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     compare([5,3,7],    [7,3,6]) == [0, 2, 3]\nassert     compare([5,3,7],    [7,3,3]) == [0, 1, 2]\nassert     compare([5,3,7],    [7,2,3]) == [0, 3, 4]\nassert     compare([5,3,7],    [7,3,5]) == [0, 2, 4]\nassert     compare([5,3,7],    [7,3,8]) == [0, 2, 4]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     compare([1,2,3],[1,2,3]) == [0,0,0]\nassert     compare([1,2,3],[2,3,1]) == [0,1,2]\nassert     compare([1,2,3],[3,1,2]) == [1,2,3]\nassert     compare([1,2,3],[4,3,1]) == [3,2,4]\n\n\ndef aggregate_numbers(numbers,guesses):\n    \"\"\"We are given a list of scores, and a list of guesses. Scores are 1-indexed\n    and the indices of the scores and guesses list match.\n    Your task is to compute how many of those scores are amongst the top five scores, \n    and how many are amongst the bottom five scores.\n    Return an array containing the scores and their correct status, where\n    the status of the score is \"top five\" if it is within the top five scores,\n    \"bottom five\" if it is within the bottom five scores, and \"correct\"\n    otherwise.\n    Example:\n    Input: scores = [3, 7, 2, 6, 4, 5, 1], guesses = [1, 5, 2, 6, 3, 7, 4]\n    Output: [4, \"top five\", \"bottom five\", \"correct\"]\n    Explanation:\n    Given the scores, we think that the index of the scores is 1-indexed, so the scores\n    1, 2, 3, 4, and 5 are in the top 5. The indices of the guesses are 0-indexed, so the\n    guesses of 1, 2, 3, 4, and 5 are in the bottom 5. Therefore, 4 scores are amongst the\n    top five scores, while 3, 7, 2, 6, and 4 are in the bottom five.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     compare([50,90,80,70,60,70],[70,80,60,70,70,80]) == [3,1,0,4,1,0]\nassert     compare([50,90,80,70,60,70],[80,70,60,70,70,80]) == [2,1,1,1,1,0]\nassert     compare([50,90,80,70,60,70],[80,70,60,70,70,90]) == [2,1,1,1,1,2]\nassert     compare([50,90,80,70,60,70],[50,70,60,70,70,90]) == [0,3,1,0,3,2]\nassert     compare([50,90,80,70,60,70],[50,70,60,70,70,100]) == [0,3,1,0,3,2]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     compare([1,2,3,4,5], [1,2,3,4,5]) == [0]\nassert     compare([1,2,3,4,5], [1,4,3,2,5]) == [1,1,1,1,1]\nassert     compare([1,2,3,4,5], [5,4,3,2,1]) == [1,2,3,4,5]\nassert     compare([1,2,3,4,5], [1,1,1,1,1]) == [0,0,0,0,0]\nassert     compare([1,2,3,4,5], [1,2,3,4,5]) == [0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     compare([1,0,1,1], [0,1,1,0]) == [0,2,3,4]\nassert     compare([1,0,1,1], [1,1,1,1]) == [0,1,2,3]\nassert     compare([1,0,1,1], [2,1,1,2]) == [1,3,4,5]\nassert     compare([1,0,1,1], [1,0,1,1]) == [0,1,2,3]\nassert     compare([1,0,1,1], [1,1,1,1]) == [0,1,2,3]\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert \n\ndef test():\n    assert compare([1,2,3],[0,2,3]) == [2,0,2]\n    assert compare([1,2,3],[1,2,3]) == [0,0,0]\n    assert compare([1,2,3],[2,3,1]) == [1,1,0]\n    "
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     compare([2,5,3],[5,2,3]) == [0,2,2]\nassert compare([2,5,3],[2,5,2]) == [0,0,1]\nassert compare([3,4,5],[3,4,5]) == [0,0,0]\nassert compare([1,2,3,4],[2,4,6,8]) == [1,2,3,4]\nassert compare([1,2,3,4],[4,3,2,1]) == [3,2,1,0]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Wrong'\nassert     Strongest_Extension('Bananas', ['AbCDefG', 'abcdefg', 'xyz', 'Slices']) == 'Bananas.AbCDefG', 'Wrong'\nassert     Strongest_Extension('Apples', ['abcdefg', 'xyz', 'Slices']) == 'Apples.xyz', 'Wrong'\nassert     Strongest_Extension('Kiwis', ['abcdefg', 'xyz', 'Slices']) == 'Kiwis.xyz', 'Wrong'\nassert     Strongest_Extension('Pears', ['abcdefg', 'xyz', 'Slices']) == 'Pears.abcdefg', 'Wrong'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.StuFfed'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'SErviNGSliCes', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'StuFfed', 'StuFfed']) == 'Slices.StuFfed'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     Strongest_Extension(\"Shape\", [\"Slices\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Circle\", [\"Slices\", \"Cheese\", \"StuFfed\"]) == \"Circle.StuFfed\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"Cheese\", \"StuFfed\"]) == \"Slices.StuFfed\"\nassert     Strongest_Extension(\"Slices\", [\"Slices\", \"Cheese\", \"Slices\"]) == \"Slices.StuFfed\"\n\n\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Laughing\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"Laughing.SErviNGSliCes\"\nassert     Strongest_Extension(\"GramBot\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"GramBot.SErviNGSliCes\"\nassert     Strongest_Extension(\"Television\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == \"Television.StuFfed\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Eggs', 'Potatos']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Eggs', 'Potatos', 'Slices', 'Grapes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Eggs', 'Potatos', 'Slices', 'Grapes', 'Chocolate', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Eggs', 'Potatos', 'Slices', 'Grapes', 'Chocolate', 'Slices', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert         Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert         Strongest_Extension('Food', ['Beans', 'Potatoes', 'Nuts', 'Bread']) == 'Food.Potatoes'\nassert         Strongest_Extension('Juice', ['orange', 'apple', 'kiwi', 'lime']) == 'Juice.orange'\nassert         Strongest_Extension('Apple', ['apple', 'peach', 'pear', 'orange']) == 'Apple.pear'\nassert         Strongest_Extension('Liquor', ['tea', 'coffee', 'coke', 'water']) == 'Liquor.water'\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SeRvIgnSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SeRvIgnSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\"]) == \"Slices.SErviNGSliCes\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     Strongest_Extension(\"Spam\", [\"Spam\", \"Eggs\", \"Salad\"]) == \"Spam.Salad\"\nassert     Strongest_Extension(\"Spam\", [\"Spam\", \"Eggs\", \"Eggs\", \"Salad\"]) == \"Spam.Salad\"\nassert     Strongest_Extension(\"Spam\", [\"Spam\", \"Spam\", \"Eggs\", \"Salad\"]) == \"Spam.Spam\"\nassert     Strongest_Extension(\"Spam\", [\"Spam\", \"Spam\", \"Spam\", \"Eggs\", \"Salad\"]) == \"Spam.Spam\"\nassert     Strongest_Extension(\"Spam\", [\"Spam\", \"Spam\", \"Spam\", \"Spam\", \"Eggs\", \"Salad\"]) == \"Spam.Spam\"\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \\\n            'actual: %s' % Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SouCrE']) == 'Slices.SErviNGSliCes', \\\n            'actual: %s' % Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SouCrE'])\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SouCrE', 'MOLulTY']) == 'Slices.SouCrE', \\\n            'actual: %s' % Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SouCrE', 'MOLulTY'])\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SouCrE', 'MOLulTY', 'GULTY']) == 'Slices.GULTY', \\\n            'actual: %s' % Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SouCrE', 'MOLulTY', 'GULTY'])\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SouCrE', 'MOLulTY', 'GULTY', 'Strip']) == 'Slices.Strip', \\\n            'actual: %s' % Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SouCrE', 'MOLulTY', 'GULTY', 'Strip'])\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Coins', ['coiNs', 'Coffee', 'CuS'] ) == 'Coins.Coffee'\nassert     Strongest_Extension('Coffee', ['coiNs', 'Coffee', 'CuS']) == 'Coffee.CuS'\nassert     Strongest_Extension('Lets', ['liSt', 'LEts', 'LEts', 'lets']) == 'Lets.LEts'\nassert     Strongest_Extension('Letters', ['LetS', 'Lets', 'Lets', 'lETS']) == 'Letters.Lets'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     cycpattern_check( \"hekllo\", \"lloko\") == True\nassert     cycpattern_check( \"hekllo\", \"llohek\") == True\nassert     cycpattern_check( \"hekllo\", \"helllll\") == False\nassert     cycpattern_check( \"hekllo\", \"llhek\") == False\nassert     cycpattern_check( \"hekllo\", \"llhekllllll\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     cycpattern_check('rope', 'rop') == True, \"Failed\"\nassert     cycpattern_check('rope', 'roped') == False, \"Failed\"\nassert     cycpattern_check('rope', 'ropen') == True, \"Failed\"\nassert     cycpattern_check('rope', 'rople') == True, \"Failed\"\nassert     cycpattern_check('rope', 'rope') == True, \"Failed\"\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     cycpattern_check('hello','llohe') == True\nassert     cycpattern_check('hello','helo') == False\nassert     cycpattern_check('hello','helloh') == False\nassert     cycpattern_check('hello','lohello') == True\nassert     cycpattern_check('hello','lohelo') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     cycpattern_check('abba', 'baa') == True\nassert     cycpattern_check('abba', 'babb') == True\nassert     cycpattern_check('abba', 'bbb') == False\nassert     cycpattern_check('abcd', 'dabc') == True\nassert     cycpattern_check('abcd', 'acd') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     cycpattern_check( \"apples\", \"pleap\") == True\nassert     cycpattern_check( \"apples\", \"ppleap\") == True\nassert     cycpattern_check( \"apples\", \"leap\") == True\nassert     cycpattern_check( \"apples\", \"papp\") == True\nassert     cycpattern_check( \"apples\", \"ppleapp\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     cycpattern_check('a', 'a') == True\nassert     cycpattern_check('b', 'a') == False\nassert     cycpattern_check('a', 'aab') == True\nassert     cycpattern_check('a', 'aaba') == False\nassert     cycpattern_check('abc', 'abc') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     cycpattern_check('abcd', 'cdab') == True\nassert     cycpattern_check('abcd', 'bcda') == False\nassert     cycpattern_check('abcd', 'bdac') == True\nassert     cycpattern_check('abcd', 'cdab') == True\nassert     cycpattern_check('abcd', 'bcda') == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     cycpattern_check(\"ab\", \"a\") is True\nassert     cycpattern_check(\"abcde\", \"de\") is True\nassert     cycpattern_check(\"abcde\", \"abc\") is True\nassert     cycpattern_check(\"abcde\", \"abcde\") is True\nassert     cycpattern_check(\"abcde\", \"bcdea\") is False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"dad\", \"bad\") == True\nassert     cycpattern_check(\"dad\", \"dad\") == True\nassert     cycpattern_check(\"dad\", \"dog\") == True\nassert     cycpattern_check(\"dad\", \"abc\") == False\nassert     cycpattern_check(\"dad\", \"dadie\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     cycpattern_check('ab', 'b') == True\nassert    cycpattern_check('abc', 'abcd') == True\nassert    cycpattern_check('abc', 'bcd') == True\nassert    cycpattern_check('abc', 'cba') == True\nassert    cycpattern_check('ab', 'ab') == True\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_count(26) == (2, 0)\nassert     even_odd_count(30) == (2, 0)\nassert     even_odd_count(35) == (2, 1)\nassert     even_odd_count(38) == (2, 1)\nassert     even_odd_count(46) == (2, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert         (even_odd_count(12) == (1, 2))\nassert         (even_odd_count(24) == (2, 0))\nassert         (even_odd_count(41) == (0, 2))\nassert         (even_odd_count(25) == (1, 1))\nassert         (even_odd_count(4) == (0, 0))\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     even_odd_count(120) == (3, 2)\nassert     even_odd_count(21) == (1, 1)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(1) == (0, 1)\nassert     even_odd_count(42) == (4, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     even_odd_count(121) == (2, 1)\nassert     even_odd_count(23) == (1, 3)\nassert     even_odd_count(15) == (1, 3)\nassert     even_odd_count(4) == (1, 0)\nassert     even_odd_count(19) == (2, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert         even_odd_count(0) == (1, 0)\nassert         even_odd_count(12) == (0, 2)\nassert         even_odd_count(24) == (0, 2)\nassert         even_odd_count(13) == (1, 1)\nassert         even_odd_count(26) == (2, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     even_odd_count(123) == (3, 1)\nassert     even_odd_count(124) == (3, 2)\nassert     even_odd_count(541) == (3, 4)\nassert     even_odd_count(764) == (4, 6)\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     even_odd_count(243) == (2, 3)\nassert     even_odd_count(9999) == (4, 0)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(-7) == (0, 1)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(10) == \"X\"\nassert     int_to_mini_roman(50) == \"L\"\nassert     int_to_mini_roman(100) == \"C\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman( 1 )         ==    'i'\nassert     int_to_mini_roman( 2 )         ==    'ii'\nassert     int_to_mini_roman( 3 )         ==    'iii'\nassert     int_to_mini_roman( 4 )         ==    'iv'\nassert     int_to_mini_roman( 5 )         ==    'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(6) == \"VI\"\nassert     int_to_mini_roman(7) == \"VII\"\nassert     int_to_mini_roman(14) == \"XIV\"\nassert     int_to_mini_roman(99) == \"XCIX\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) ==     'I'\nassert     int_to_mini_roman(2) ==     'II'\nassert     int_to_mini_roman(3) ==     'III'\nassert     int_to_mini_roman(4) ==     'IV'\nassert     int_to_mini_roman(5) ==     'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(5) == 'v'\nassert     int_to_mini_roman(15) == 'xv'\nassert     int_to_mini_roman(98) == 'xvii'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, \"Failed the right_angle_triangle test\"\nassert     right_angle_triangle(3, 4, 6) == False, \"Failed the right_angle_triangle test\"\nassert     right_angle_triangle(3, 4, 7) == False, \"Failed the right_angle_triangle test\"\nassert     right_angle_triangle(3, 2, 7) == False, \"Failed the right_angle_triangle test\"\nassert     right_angle_triangle(2, 3, 4) == False, \"Failed the right_angle_triangle test\"\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(3, 4, 6) == False\nassert     right_angle_triangle(5, 4, 3) == True\nassert     right_angle_triangle(3, 3, 3) == True\nassert     right_angle_triangle(5, 6, 3) == False"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(4, 4, 4)\nassert     right_angle_triangle(4, 4, 3)\nassert     right_angle_triangle(4, 3, 4)\nassert     not right_angle_triangle(4, 4, 2)\nassert     not right_angle_triangle(4, 4, 1)\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     right_angle_triangle(3, 4, 5)\nassert     right_angle_triangle(7, 9, 11)\nassert     right_angle_triangle(6, 4, 8) is False\n\n\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(1, 1, 2) == True\nassert     right_angle_triangle(2, 3, 3) == True\nassert     right_angle_triangle(3, 3, 1) == True\nassert     right_angle_triangle(5, 4, 5) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(2,3,4)     == True\nassert     right_angle_triangle(3,4,5)     == True\nassert     right_angle_triangle(5,4,3)     == False\nassert     right_angle_triangle(3,4,5)     == False\nassert     right_angle_triangle(4,5,3)     == False\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(2,3,4) == False, 'wrong'\nassert     right_angle_triangle(5,12,13) == False, 'wrong'\nassert     right_angle_triangle(8,15,17) == True, 'wrong'\nassert     right_angle_triangle(2,3,5) == True, 'wrong'\nassert     right_angle_triangle(2,3,6) == False, 'wrong'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(1, 1, 1) == True\nassert     right_angle_triangle(1, 1, 2) == False\nassert     right_angle_triangle(2, 2, 2) == True\nassert     right_angle_triangle(2, 2, 3) == False\nassert     right_angle_triangle(3, 3, 3) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(5, 4, 3) == False\nassert     right_angle_triangle(4, 5, 3) == True\nassert     right_angle_triangle(5, 5, 3) == True\nassert     right_angle_triangle(4, 4, 3) == True\nassert     right_angle_triangle(4, 4, 4) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(3, 4, 6) == False\nassert     right_angle_triangle(2, 3, 4) == True\nassert     right_angle_triangle(3, 2, 4) == False\nassert     right_angle_triangle(4, 3, 5) == True\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_max([\"radar\", \"solar\", \"bolt\", \"wound\", \"solar\", \"pulse\"]) == \"solar\"\nassert     find_max([\"gun\", \"enema\", \"mosquito\", \"armor\"]) == \"armor\"\nassert     find_max([\"enema\", \"mosquito\", \"armor\", \"gun\", \"radar\", \"solar\", \"pulse\"]) == \"solar\"\nassert     find_max([\"enema\", \"armor\", \"gun\", \"radar\", \"solar\", \"pulse\", \"mosquito\"]) == \"solar\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     find_max(['abc', 'a', 'b', 'c', 'abc']) == 'abc'\nassert     find_max(['abc', 'a', 'b', 'c']) == 'abc'\nassert     find_max(['abc', 'a', 'b', 'c', 'def']) == 'abc'\nassert     find_max(['abc', 'a', 'b', 'c', 'def', 'ghi']) == 'ghi'\nassert     find_max(['abc', 'a', 'b', 'c', 'def', 'ghi', 'jkl']) == 'abc'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     find_max(['I', 'was', 'not', 'called', 'but', 'I', 'woke', 'up', 'I', 'did', 'not', 'come']) == 'I'\nassert     find_max(['I', 'could', 'be', 'not', 'called', 'but', 'I', 'woke', 'up', 'I', 'did', 'not', 'come']) == 'I'\nassert     find_max(['I', 'could', 'be', 'not', 'called', 'but', 'I', 'woke', 'up', 'I', 'did', 'not', 'come', 'I']) == 'I'\nassert     find_max(['I', 'could', 'be', 'not', 'called', 'but', 'I', 'woke', 'up', 'I', 'did', 'not', 'come']) == 'I'\nassert     find_max(['I', 'could', 'be', 'not', 'called', 'but', 'I', 'woke', 'up', 'I', 'did', 'not', 'come', 'I', 'did']) == 'I'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     find_max([\"a\", \"ab\", \"c\"]) == \"ab\"\nassert     find_max([\"ab\", \"a\", \"c\"]) == \"ab\"\nassert     find_max([\"ab\", \"a\", \"a\", \"a\", \"a\"]) == \"a\"\nassert     find_max([\"ab\", \"a\", \"c\", \"c\", \"a\"]) == \"a\"\nassert     find_max([\"a\", \"c\", \"a\", \"c\", \"a\", \"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     find_max(['hi', 'there', 'i', 'like', 'hi']) == 'hi'\nassert     find_max(['hi', 'there', 'i', 'like', 'hi', 'bye', 'hi']) == 'hi'\nassert     find_max(['hi', 'there', 'i', 'like', 'hi', 'bye']) == 'hi'\nassert     find_max(['hi', 'there', 'i', 'like', 'hi', 'bye', 'hi', 'hi', 'hello']) == 'hi'\nassert     find_max(['hi', 'there', 'i', 'like', 'hi', 'bye', 'hi', 'hello']) == 'hi'\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     find_max([\"what\", \"great\", \"good\", \"greater\"]) == \"great\"\nassert     find_max([\"what\", \"great\", \"greater\", \"hello\"]) == \"greater\"\nassert     find_max([\"what\", \"what\", \"good\", \"greater\"]) == \"what\"\nassert     find_max([\"what\", \"what\", \"what\", \"what\"]) == \"what\"\nassert     find_max([\"hi\", \"what\", \"good\", \"greater\"]) == \"greater\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     find_max([\"dog\", \"dudu\", \"duffu\", \"duffu\", \"dufu\"]) == \"dufu\"\nassert     find_max([\"dufu\", \"dudu\", \"duffu\", \"duffu\", \"dufu\"]) == \"dufu\"\nassert     find_max([\"dog\", \"dudu\", \"dufu\", \"dufu\", \"dufu\"]) == \"dufu\"\nassert     find_max([\"dog\", \"dudu\", \"dufu\", \"dufu\", \"dufu\"]) == \"dufu\"\nassert     find_max([\"dog\", \"dudu\", \"dufu\", \"dufu\", \"dufu\"]) == \"dufu\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     find_max([\"bob\",\"joe\",\"ted\"]) == \"bob\"\nassert     find_max([\"bob\",\"joe\",\"ted\",\"bob\"]) == \"bob\"\nassert     find_max([\"bob\",\"joe\",\"ted\",\"joe\"]) == \"joe\"\nassert     find_max([\"bob\",\"bob\",\"joe\",\"ted\"]) == \"bob\"\nassert     find_max([\"bob\",\"bob\",\"bob\",\"joe\",\"ted\",\"ted\"]) == \"ted\"\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     find_max(['abc', 'def', 'ghi', 'jkl', 'abc', 'def']) == 'ghi'\nassert     find_max(['abc', 'def', 'ghi', 'jkl', 'abc', 'def']) == 'def'\nassert     find_max(['abc', 'def', 'ghi', 'jkl', 'abc', 'def']) == 'abc'\n\nprint('all tests passed')"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     find_max(['hello', 'world', 'bookkeeper', 'hello']) == 'hello'\nassert     find_max(['abc', 'abc', 'abc', 'abc', 'abc']) == 'abc'\nassert     find_max(['x', 'x', 'x', 'x', 'x', 'x']) == 'x'\nassert     find_max(['abc', 'def', 'ghi', 'bcd', 'cde', 'cab']) == 'cab'"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eat(5, 2, 4) == [3, 1]\nassert     eat(0, 10, 0) == [0, 0]\nassert     eat(100, 99, 999) == [99, 0]\nassert     eat(1000, 999, 999) == [0, 0]\nassert     eat(1000, 100, 999) == [100, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     eat(1, 1, 1) == [ 1, 0 ]\nassert     eat(10, 2, 2) == [ 11, 1 ]\nassert     eat(5, 4, 3) == [ 6, 3 ]\nassert     eat(20, 5, 3) == [ 21, 0 ]\nassert     eat(3, 2, 1) == [ 3, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     eat(2, 3, 8) == [ 5, 4 ]\nassert     eat(10, 4, 8) == [ 17, 4 ]\nassert     eat(10, 5, 8) == [ 20, 5 ]\nassert     eat(10, 3, 10) == [ 22, 7 ]\nassert     eat(2, 5, 4) == [ 5, 0 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     eat(0, 0, 0) == [0,0]\nassert     eat(0, 0, 10) == [0,10]\nassert     eat(0, 10, 10) == [0,10]\nassert     eat(10, 0, 10) == [10,0]\nassert     eat(10, 10, 10) == [10,0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     eat(11, 24, 10) == [ 21, 9 ]\nassert     eat(11, 10, 22) == [ 19, 7 ]\nassert     eat(10, 10, 22) == [ 19, 6 ]\nassert     eat(5, 10, 22) == [ 19, 5 ]\nassert     eat(23, 7, 22) == [ 17, 4 ]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     eat(10, 5, 11) == [20, 9]\nassert     eat(15, 5, 11) == [25, 3]\nassert     eat(11, 5, 11) == [20, 0]\nassert     eat(15, 5, 11) == [25, 3]\nassert     eat(5, 5, 11) == [20, 9]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     eat(10, 10, 15) == [10, 5]\nassert     eat(10, 10, 30) == [10, 5]\nassert     eat(10, 30, 30) == [10, 25]\nassert     eat(30, 30, 30) == [30, 0]\nassert     eat(0, 30, 30) == [30, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     eat(0, 2, 3) == [ 2, 3 ], \"0 carrots, 1 left\"\nassert     eat(1, 2, 3) == [ 0, 3 ], \"1 carrot, 0 left\"\nassert     eat(9, 2, 3) == [ 6, 3 ], \"9 carrots, 0 left\"\nassert     eat(9, 2, 3) == [ 0, 3 ], \"9 carrots, 0 left\"\nassert     eat(9, 2, 2) == [ 6, 2 ], \"9 carrots, 2 left\"\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(5, 3, 7) == [5, 3]\nassert     eat(5, 5, 7) == [0, 0]\nassert     eat(5, 4, 7) == [0, 0]\nassert     eat(5, 0, 7) == [5, 3]\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     eat(2, 2, 2) == [ 2, 0 ]\nassert     eat(2, 1, 2) == [ 2, 1 ]\nassert     eat(2, 0, 2) == [ 2, 0 ]\nassert     eat(100, 1000, 1000) == [ 100, 0 ]\nassert     eat(1, 3, 2) == [ 1, 2 ]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1, 2, 3, 4, 5]) == 1-2+3*4//5\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1, 2, 3, 4, 0]) == 1-2+3*4//0\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1, 0, 0, 0, 0]) == 1-0+0*0//0\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1, 0, 1, 0, 1]) == 1-0+1*0//1\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [0, 0, 0, 0, 0]) == 0*0//0\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     do_algebra([\"+\", \"*\"], [1, 2]) == 3\nassert     do_algebra([\"+\", \"*\", \"//\"], [2, 3, 4]) == 2\nassert     do_algebra([\"+\", \"*\", \"**\"], [2, 3, 4]) == 8\nassert     do_algebra([\"-\", \"*\"], [1, 2]) == 1\nassert     do_algebra([\"-\", \"*\", \"//\"], [2, 3, 4]) == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     do_algebra([ \"+\", \"*\", \"-\" ], [ 2, 2 ]) == 2\nassert     do_algebra([ \"*\", \"-\" ], [ 2, 2 ]) == 0\nassert     do_algebra([ \"*\", \"*\" ], [ 2, 2 ]) == 4\nassert     do_algebra([ \"/\", \"*\" ], [ 2, 2 ]) == 1\nassert     do_algebra([ \"**\", \"*\" ], [ 2, 2 ]) == 4\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     do_algebra([ADDITION, '+'], [5,3]) == 8\nassert     do_algebra([ADDITION, '+'], [5,4]) == 9\nassert     do_algebra([ADDITION, '+'], [5,3]) == 8\nassert     do_algebra([ADDITION, '+'], [5,3,5]) == 12\nassert     do_algebra([ADDITION, '+'], [5,3,2]) == 7\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [1, 3]) == -2\nassert     do_algebra(['+', '*', '//', '**'], [3, 2]) == 9\nassert     do_algebra(['*', '**'], [3, 2, 1]) == 81\nassert     do_algebra(['*', '//'], [3, 2, 1]) == 2\nassert     do_algebra(['**'], [3, 2, 1]) == 81\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     do_algebra([ '+', '-', '*', '/' ], [ 1, 2, 3 ]) == 2\nassert     do_algebra([ '*', '/' ], [ 1, 2 ]) == 0.5\nassert     do_algebra([ '+', '/' ], [ 1, 2, 3, 4 ]) == 0.5\nassert     do_algebra([ '*', '/' ], [ 1, 2, 3, 4, 5 ]) == 0.5\nassert     do_algebra([ '*', '/', '+' ], [ 1, 2, 3, 4, 5 ]) == 0.25\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     do_algebra([\"+\", \"*\", \"//\"], [2, 3, 4]) == 7\nassert     do_algebra([\"+\", \"*\", \"//\"], [2, 3, 5]) == 2\nassert     do_algebra([\"+\", \"*\", \"//\"], [2, 3, 6]) == 3\nassert     do_algebra([\"+\", \"*\", \"//\"], [2, 3, 7]) == 2\nassert     do_algebra([\"+\", \"*\", \"//\"], [2, 3, 8]) == 3\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1,2,3,4,5]) == -1\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1,3,4,5,6]) == 10\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1,3,2,5,7]) == 3\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1,3,2,4,7]) == 2\nassert     do_algebra([\"+\",\"-\",\"*\",\"//\",\"**\"], [1,3,2,5,8]) == 1\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     do_algebra(['+', '-'], [10, 1]) == 9\nassert do_algebra(['*', '-'], [10, 1]) == 10\nassert do_algebra(['/', '-'], [10, 1]) == 10\nassert do_algebra(['//', '-'], [10, 1]) == 0\nassert do_algebra(['**', '-'], [10, 1]) == 10\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(\"hello\") == \"olLEh\"\nassert     solve(\"i\") == \"i\"\nassert     solve(\"PyB\") == \"pBty\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     solve('asdf') == 'ASDF'\nassert     solve('2345') == '2345'\nassert     solve('rai') == 'Rai'\nassert     solve('gGt') == 'ggGt'\nassert     solve('RasgGt') == 'RasGt'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     solve('This is a string') == 'tHs i s a striNg'\nassert     solve('I am mArting a sTrInG') == 'i Am mArting a stRInG'\nassert     solve('This is a test') == 'tHs i s a tS'\nassert     solve('This is a test.') == 'tHs i s a tS.'\nassert     solve('This is a test.') == 'tHs i s a tS.'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     solve(\"Hello\")    == \"olleH\"\nassert     solve(\"a\")        == \"a\"\nassert     solve(\"L\")        == \"l\"\nassert     solve(\" \")        == \" \"\nassert     solve(\"ABC\")        == \"cBA\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     solve(\"aBc\") == \"cBA\"\nassert     solve(\"AbC\") == \"CbA\"\nassert     solve(\"aBC\") == \"BCa\"\nassert     solve(\"aBC\") == \"BCa\"\nassert     solve(\"\") == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     solve('bAa')    == 'BaA'\nassert     solve('aBb')    == 'bAb'\nassert     solve('aBbCc')    == 'bCcAb'\nassert     solve('aBb')    == 'bAb'\nassert     solve('ab')    == 'ab'\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     solve(\"a1b2c3\")         == \"c3B2a1\"\nassert     solve(\"z1z2\")            == \"z2z1\"\nassert     solve(\"a1b2c3\")        == \"c3B2a1\"\nassert     solve(\"z1z2\")            == \"z2z1\"\nassert     solve(\"A1b2c3\")        == \"c3B2a1\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     solve(\"hello\") == \"olleh\"\nassert solve(\"xyz\") == \"xyz\"\nassert solve(\"we\") == \"ew\"\nassert solve(\"aa\") == \"aa\"\nassert solve(\"\") == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     solve('HELLO WORLD') == 'HELLO WORLD'\nassert     solve('I am happy!') == 'I AM HAPPY!'\nassert     solve('The weather is nice today!') == 'THE WEATHER IS NICE TODAY!'\nassert     solve('I am NOT happy!') == 'I AM NOT HAPPY!"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"text\") == None\nassert     string_to_md5(\"abc\") == \"9b33c48d8c06e6dd5f5dafec4c4cb30f\"\nassert     string_to_md5(\"abc\") == \"9b33c48d8c06e6dd5f5dafec4c4cb30f\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"\") == None, \"Empty string should return None\"\nassert     string_to_md5(\"x\") == \"6f7e822e6dcb04d3e5baba2a6630bc6e\", \"One character string should return proper hash\"\nassert     string_to_md5(\"abcd\") == \"9e107d9d372bb6826bd81d3542a419d6\", \"One letter string should return proper hash\"\nassert     string_to_md5(\"1234567890\") == \"dccacbaad3f3d26aa63615f1d4ce8e7c\", \"One number string should return proper hash\"\nassert     string_to_md5(\"x\"*20) == \"c8a9080e0bc8ab0549c5ceef60d9d2a7\", \"Repeating characters should return proper hash\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     string_to_md5('a') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert     string_to_md5('abc') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert     string_to_md5('abc') == string_to_md5('abc')\nassert     string_to_md5('') == None\nassert     string_to_md5(' ') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     string_to_md5('',) == None\nassert     string_to_md5('a',) == None\nassert     string_to_md5('a') == None\nassert     string_to_md5('ab') == None\nassert     string_to_md5('abc') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert \n\ndef list_to_str(list):\n    \"\"\"\n    Given a list 'list', convert it to string.\n    If the list is empty, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"text\") == None\nassert     string_to_md5(\"a\") == \"9baf1ee\"\nassert     string_to_md5(\"a\"*64) == \"6fd99b98e3e3d9f456e3e1c2e20c23d7\""
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     string_to_md5('a') == 'f90b77210c4ee95a3e8937e55a6e36b7', \"string_to_md5(\\\"a\\\")\"\nassert     string_to_md5('') == None, \"string_to_md5(\\\"\\\")\"\nassert     string_to_md5('abcdefghijklmnopqrstuvwxyz') == 'e788c84a81d9ce87b3a14a1252e30d1f', \"string_to_md5(\\\"abcdefghijklmnopqrstuvwxyz\\\")\"\nassert     string_to_md5('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == '2a8b3a9cfaa6b6c9f7b41a0a32b9c0c', \"string_to_md5(\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\")\"\nassert     string_to_md5('abcdefghijklmnopqrstuvwxyz0123456789') == 'a850a41e9a3d938e80d0f1824d5c5d1', \"string_to_md5(\\\"abcdefghijklmnopqrstuvwxyz0123456789\\\")\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert     string_to_md5('text') == string_to_md5('text')\nassert     string_to_md5('text') == string_to_md5('text')\nassert     string_to_md5('text') == string_to_md5('text')\nassert     string_to_md5('text')!= string_to_md5('text')\nassert     string_to_md5('text') == string_to_md5('text')\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert     string_to_md5(None)    == None\nassert     string_to_md5(\"\")    == None\nassert     string_to_md5(\"text\") == None\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('Alice') == md5('Alice')\nassert     string_to_md5('Alice Eve') == md5('Alice Eve')\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     generate_integers(123,456) == [2,4,6]\nassert     generate_integers(14,16) == [14,16]\nassert     generate_integers(1,100) == [2,4,6,8,10,12,14,16]\nassert     generate_integers(3,100) == [4,6,8,10,12,14,16]\n\ndef compute_digit(num):\n    \"\"\"\n    Given a positive integer num, compute the digit of num, so that num \n    will be a non-negative integer, and return it.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "assert \n\ndef sum_of_digits(n):\n    \"\"\"\n    Given a non-negative integer n, return the sum of the digits of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "assert     generate_integers(0, 1)    == []\nassert     generate_integers(1, 2)    == [1]\nassert     generate_integers(10, 12)    == [11]\nassert     generate_integers(14, 16)    == [15]\nassert     generate_integers(100, 110)    == [101, 103, 105, 107]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "assert     generate_integers(1,5) == [2, 4]\nassert     generate_integers(10,25) == [12, 14, 16, 18, 20, 22]\nassert     generate_integers(50,56) == [54]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "assert     generate_integers(1,10) == [2,4,6,8,10]\nassert     generate_integers(10,20) == [12,14,16,18,20]\nassert     generate_integers(1,20) == [2,4,6,8,10,12,14,16,18]\nassert     generate_integers(20,1) == [12,14,16,18,20]\n\ndef generate_palindromes(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order, that are palindromes.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "assert     generate_integers(1, 2) == [2]\nassert     generate_integers(10, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(1, 5) == [2, 4]\nassert     generate_integers(5, 5) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "assert     generate_integers(2, 22) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\nassert     generate_integers(21, 5) == [21, 22, 23, 24, 25]\nassert     generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(1, 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     generate_integers(8, 1) == [8, 9, 10, 11, 12, 13, 14, 15, 16]\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(10, 1) == [2, 4, 6, 8]\nassert     generate_integers(10, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(0, 10) == [2, 4, 6, 8]\n"
    }
]