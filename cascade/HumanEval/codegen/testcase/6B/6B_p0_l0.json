[
    {
        "number": 0,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 1) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.5) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.1) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.2) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.3) == False\n"
    },
    {
        "number": 1,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"(()())\") == [\"(()())\"]\nassert     separate_paren_groups(\"(()())(()()())\") == [\"(()())(()())\"]\nassert     separate_paren_groups(\"(()())(()())(()())\") == [\"(()())(()())\"]\nassert     separate_paren_groups(\"(()())(()())(()())\") == [\"(()())(()())\"]\nassert     separate_paren_groups(\"(()())(()())(()())\") == [\"(()())(()())\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     truncate_number(1.23) == 1.23\nassert     truncate_number(1.2345) == 1.23\nassert     truncate_number(1.234567) == 1.23\nassert     truncate_number(1.2345678) == 1.23\nassert     truncate_number(1.23456789) == 1.23\n"
    },
    {
        "number": 3,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487"
    },
    {
        "number": 4,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 2.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 3.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.5\n"
    },
    {
        "number": 5,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersperse([1,2,3,4], 1) == [1,1,2,3,4,4]\nassert     intersperse([1,2,3,4], 2) == [1,2,2,3,4,4]\nassert     intersperse([1,2,3,4], 3) == [1,2,3,3,4,4]\nassert     intersperse([1,2,3,4], 4) == [1,2,3,4,4,4]\nassert     intersperse([1,2,3,4], 5) == [1,2,3,4,4,4]\n"
    },
    {
        "number": 6,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2, 2, 2]\nassert     parse_nested_parens(\"((()))\") == [3, 1, 1]\nassert     parse_nested_parens(\"(()(()))\") == [3, 2, 1]\nassert     parse_nested_parens(\"(()()(()))\") == [4, 3, 2, 1]\nassert     parse_nested_parens(\"(()(()()))\") == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 7,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"b\") == [\"b\", \"c\", \"d\", \"e\", \"f\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"c\") == [\"c\", \"d\", \"e\", \"f\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"d\") == [\"d\", \"e\", \"f\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"e\") == [\"e\", \"f\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([-1, -2, -3]) == (-6, -6)\n"
    },
    {
        "number": 9,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n"
    },
    {
        "number": 10,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_palindrome(\"racecar\") == \"racecarracecar\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"ab\") == \"abab\"\nassert     make_palindrome(\"abcd\") == \"abcdabcd\"\nassert     make_palindrome(\"abcdcba\") == \"abcdcbaabcdcba\"\n"
    },
    {
        "number": 11,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_xor
    },
    {
        "number": 12,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     longest([\"a\", \"b\", \"c\"]) == \"c\"\nassert     longest([\"a\", \"b\", \"c\", \"d\"]) == \"d\"\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"e\"\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"f\"\nassert     longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == \"g\"\n"
    },
    {
        "number": 13,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(1, 1) == 1\nassert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(2, 1) == 1\nassert     greatest_common_divisor(2, 2) == 2\nassert     greatest_common_divisor(3, 1) == 1\n"
    },
    {
        "number": 14,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\nassert     all_prefixes(\"abcdef\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]\n"
    },
    {
        "number": 15,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\n"
    },
    {
        "number": 16,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"Hello World\") == 6\nassert     count_distinct_characters(\"Hello World!\") == 6\nassert     count_distinct_characters(\"Hello World, how are you?\") == 6\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"Hello World, how are you?\") == 6\n"
    },
    {
        "number": 17,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     parse_music('o') == [1]\nassert     parse_music('o|') == [1, 1]\nassert     parse_music('o|o') == [1, 1, 1]\nassert     parse_music('o|o|o') == [1, 1, 1, 1]\nassert     parse_music('o|o|o|o') == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 18,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     how_many_times(\"this is a test string\", \"test\") == 1\nassert     how_many_times(\"this is a test string\", \"is\") == 2\nassert     how_many_times(\"this is a test string\", \"string\") == 1\nassert     how_many_times(\"this is a test string\", \"tes\") == 0\nassert     how_many_times(\"this is a test string\", \"\") == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine') == 'one two three four five six seven eight nine'\nassert     sort_numbers('one two three four five six seven eight nine zero') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('one two three four five six seven eight nine zero one') == 'one two three four five six seven eight nine zero one'\nassert     sort_numbers('one two three four five six seven eight nine zero two') == 'zero one two three four five six seven eight nine zero two'\nassert     sort_numbers('one two three four five six seven eight nine zero three') == 'zero one two three four five six seven eight nine zero three'\n"
    },
    {
        "number": 20,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 2)\n"
    },
    {
        "number": 21,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5]) == [0, 0.5, 1, 1.5, 2]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0, 0.5, 1, 1.5, 2, 2.5]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7]) == [0, 0.5, 1, 1.5, 2, 2.5, 3]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8]) == [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4]\n"
    },
    {
        "number": 22,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers([1, 2, 'a', 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers(['a', 0, 0.0, False, True, [], (), {}, set()]) == []\nassert     filter_integers([]) == []\nassert     filter_integers([[]]) == []\n"
    },
    {
        "number": 23,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdef\") == 6\nassert     strlen(\"abcdefgh\") == 9\n"
    },
    {
        "number": 24,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(5) == 1\n"
    },
    {
        "number": 25,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 26,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 27,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     flip_case(\"hello\") == \"HELLO\"\nassert     flip_case(\"HELLO\") == \"hello\"\nassert     flip_case(\"hello WORLD\") == \"HELLO WORLD\"\nassert     flip_case(\"HELLO WORLD\") == \"hello WORLD\"\nassert     flip_case(\"HELLO WORLD\") == \"hello WORLD\"\n"
    },
    {
        "number": 28,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcd\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"abcde\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdef\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == \"abcdefg\"\n"
    },
    {
        "number": 29,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"a\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"b\") == [\"b\", \"c\", \"d\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"c\") == [\"c\", \"d\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"d\") == [\"d\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"e\") == []\n"
    },
    {
        "number": 30,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\nassert     get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\nassert     get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\nassert     get_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n"
    },
    {
        "number": 31,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\nassert     is_prime(6) == False\n"
    },
    {
        "number": 32,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     poly([1, 1, 1, 1, 1], 0) == 0\nassert     poly([1, 1, 1, 1, 1], 1) == 0\nassert     poly([1, 1, 1, 1, 1], 2) == 0\nassert     poly([1, 1, 1, 1, 1], 3) == 0\nassert     poly([1, 1, 1, 1, 1], 4) == 0\n"
    },
    {
        "number": 33,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,15"
    },
    {
        "number": 34,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique([1,2,3,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 35,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([1, 2, 3, 4, -5]) == 4\nassert     max_element([1, 2, 3, -4, -5]) == 3\nassert     max_element([1, 2, 3, -4, -5, -6]) == 3\nassert     max_element([-1, -2, -3, -4, -5, -6]) == -1\n"
    },
    {
        "number": 36,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fizz_buzz(15) == 2\nassert     fizz_buzz(30) == 4\nassert     fizz_buzz(35) == 0\nassert     fizz_buzz(40) == 1\nassert     fizz_buzz(45) == 0\n"
    },
    {
        "number": 37,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,2,4,6,8,10]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,9,2,4,6,8,10,11]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,2,4,6,8,10,11,12]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,3,5,7,9,2,4,6,8,10,11,12,13]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [1,3,5,7,9,2,4,6,8,10,11,12,13,14]\n"
    },
    {
        "number": 38,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_cyclic(\"abc\") == \"abc\"\nassert     decode_cyclic(\"abcd\") == \"abcd\"\nassert     decode_cyclic(\"abcde\") == \"abcde\"\nassert     decode_cyclic(\"abcdef\") == \"abcdef\"\nassert     decode_cyclic(\"abcdefg\") == \"abcdefg\"\n"
    },
    {
        "number": 39,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_fib(0) == 2\nassert     prime_fib(1) == 3\nassert     prime_fib(2) == 5\nassert     prime_fib(3) == 7\nassert     prime_fib(4) == 11\n"
    },
    {
        "number": 40,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, 4, 5]) == True\nassert     triples_sum_to_zero([1, 2, 3, 4, -5]) == False\nassert     triples_sum_to_zero([1, 2, 3, -4, 5]) == True\nassert     triples_sum_to_zero([1, 2, 3, -4, -5]) == False\nassert     triples_sum_to_zero([1, 2, 3, -4, -5, -6]) == True\n"
    },
    {
        "number": 41,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 0\nassert     car_race_collision(4) == 0\nassert     car_race_collision(5) == 0\n"
    },
    {
        "number": 42,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\nassert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\nassert     incr_list([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6, 7]\nassert     incr_list([1, 2, 3, 4, 5, 6, 7]) == [2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 43,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, -4, -3, -2, 5, 6, 7, 8, 9]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -4, -3, -2, 5, -6, 7, 8, 9]) == False\nassert     pairs_sum_to_zero([1, 2, 3, -4, -3, -2, 5, -6, 7, 8, 9, 10]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -4, -3, -2, 5, -6, 7, 8, 9, 10, 11]) == False\nassert     pairs_sum_to_zero([1, 2, 3, -4, -3, -2, 5, -6, 7, 8, 9, 10, 11, 12]) == True\n"
    },
    {
        "number": 44,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     change_base(0, 2) == '0b0'\nassert     change_base(1, 2) == '0b1'\nassert     change_base(2, 2) == '0b10'\nassert     change_base(3, 2) == '0b11'\nassert     change_base(4, 2) == '0b100'\n"
    },
    {
        "number": 45,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(3, 4) == 6\nassert     triangle_area(5, 10) == 50\nassert     triangle_area(7, 10) == 70\nassert     triangle_area(10, 10) == 100\nassert     triangle_area(10, 7) == 70\n"
    },
    {
        "number": 46,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 47,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4.5\n"
    },
    {
        "number": 48,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abcd\") == False\nassert     is_palindrome(\"abcdcba\") == True\n"
    },
    {
        "number": 49,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     modp(0, 2) == 1\nassert     modp(1, 2) == 2\nassert     modp(2, 2) == 4\nassert     modp(3, 2) == 4\nassert     modp(4, 2) == 8\n"
    },
    {
        "number": 50,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decode_shift(\"a\") == \"a\"\nassert     decode_shift(\"b\") == \"b\"\nassert     decode_shift(\"c\") == \"c\"\nassert     decode_shift(\"d\") == \"d\"\nassert     decode_shift(\"e\") == \"e\"\n"
    },
    {
        "number": 51,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"Python\") == \"ytho\"\nassert     remove_vowels(\"Python!\") == \"ytho!\"\nassert     remove_vowels(\"Python!!!\") == \"ytho!!\"\nassert     remove_vowels(\"\") == \"\"\n"
    },
    {
        "number": 52,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 3) == True\nassert     below_threshold([1, 2, 3, 4, 5], 4) == False\nassert     below_threshold([1, 2, 3, 4, 5], 5) == True\nassert     below_threshold([1, 2, 3, 4, 5], 6) == False\nassert     below_threshold([1, 2, 3, 4, 5], 0) == True\n"
    },
    {
        "number": 53,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add(1, 2) == 3\nassert     add(1, 2) == 3\nassert     add(1, 2) == 3\nassert     add(1, 2) == 3\nassert     add(1, 2) == 3\n"
    },
    {
        "number": 54,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     same_chars(\"hello\", \"hello\")\nassert     same_chars(\"hello\", \"hell\")\nassert     same_chars(\"hello\", \"hell\")\nassert     same_chars(\"hello\", \"hell\")\nassert     same_chars(\"hello\", \"hell\")\n"
    },
    {
        "number": 55,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<><\") == False\nassert     correct_bracketing(\"<><>\") == True\nassert     correct_bracketing(\"<><><\") == False\nassert     correct_bracketing
    },
    {
        "number": 57,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     monotonic([1, 2, 3, 4, 5])\nassert     monotonic([5, 4, 3, 2, 1])\nassert     not monotonic([1, 2, 3, 4, 5, 6])\nassert     not monotonic([6, 5, 4, 3, 2, 1])\nassert     not monotonic([1, 2, 3, 4, 5, 6, 7])\n"
    },
    {
        "number": 58,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 59,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\n"
    },
    {
        "number": 60,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 61,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"(()))\") == False\nassert     correct_bracketing(\"(()))\") == True\nassert     correct_bracketing(\"(()))\") == True\n"
    },
    {
        "number": 62,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert \n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     vowels_count('a') == 1\nassert     vowels_count('e') == 1\nassert     vowels_count('i') == 1\nassert     vowels_count('o') == 1\nassert     vowels_count('u') == 1\n"
    },
    {
        "number": 65,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     circular_shift(12345, 1) == 12345\nassert     circular_shift(12345, 2) == 34512\nassert     circular_shift(12345, 3) == 54321\nassert     circular_shift(12345, 4) == 654321\nassert     circular_shift(12345, 5) == 12345\n"
    },
    {
        "number": 66,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digitSum(\"Hello World\") == 12\nassert     digitSum(\"Hello World!\") == 12\nassert     digitSum(\"Hello World!!!\") == 12\nassert     digitSum(\"Hello World!!!!\") == 12\nassert     digitSum(\"Hello World!!!!\") == 12\n"
    },
    {
        "number": 67,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"2 3\", \"1\") == \"0\"\nassert     fruit_distribution(\"1 1\", \"1\") == \"1\"\nassert     fruit_distribution(\"1 1\", \"2\") == \"0\"\nassert     fruit_distribution(\"1 1\", \"1 1\") == \"1\"\nassert     fruit_distribution(\"1 1\", \"1 1 1\") == \"0\"\n"
    },
    {
        "number": 68,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, "
    },
    {
        "number": 69,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 48"
    },
    {
        "number": 70,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n"
    },
    {
        "number": 71,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     triangle_area(3, 4, 5) == 0.5\nassert     triangle_area(3, 4, 6) == -1\nassert     triangle_area(3, 4, 7) == -1\nassert     triangle_area(3, 4, 8) == -1\nassert     triangle_area(3, 4, 9) == -1\n"
    },
    {
        "number": 72,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     will_it_fly([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,50"
    },
    {
        "number": 73,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 4\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 1\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 0\nassert     smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307"
    },
    {
        "number": 74,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     total_match(['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c']\nassert     total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 75,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(5) == True\nassert     is_multiply_prime(6) == False\nassert     is_multiply_prime(7) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(2, 4) == True\nassert     is_simple_power(2, 5) == False\nassert     is_simple_power(2, 6) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     iscube(1) == True\nassert     iscube(2) == True\nassert     iscube(3) == True\nassert     iscube(4) == False\nassert     iscube(5) == False\n"
    },
    {
        "number": 78,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     hex_key('A2B3C4D5E6F7') == (2, 3)\nassert     hex_key('A2B3C4D5E6F7A') == (2, 3)\nassert     hex_key('A2B3C4D5E6F7B') == (2, 3)\nassert     hex_key('A2B3C4D5E6F7C') == (2, 3)\nassert     hex_key('A2B3C4D5E6F7D') == (2, 3)\n"
    },
    {
        "number": 79,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 80,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_happy(\"a\") == False\nassert     is_happy(\"aa\") == False\nassert     is_happy(\"ab\") == False\nassert     is_happy(\"aba\") == True\nassert     is_happy(\"abab\") == True\n"
    },
    {
        "number": 81,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 82,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"a\") == False\nassert     prime_length(\"ab\") == False\nassert     prime_length(\"abc\") == False\nassert     prime_length(\"abcd\") == False\n"
    },
    {
        "number": 83,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 84,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(1) == \"1\"\nassert     solve(2) == \"10\"\nassert     solve(3) == \"11\"\nassert     solve(4) == \"100\"\n"
    },
    {
        "number": 85,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [2,4,6,8,10,12,14,16,18,20]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200]) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,4"
    },
    {
        "number": 86,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\") == \"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\"\nassert     anti_shuffle(\"Hello World\") == \"Hello World\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\" \") == \" \"\nassert     anti_shuffle(\"Hi\") == \"Hi\"\n"
    },
    {
        "number": 87,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0)]\nassert     get_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0)]\n"
    },
    {
        "number": 88,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_array([5,4,3,2,1]) == [1,2,3,4,5]\nassert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_array([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 89,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encrypt('hello') == 'khoor'\nassert     encrypt('hello world') == 'dzqyw'\nassert     encrypt('hello world') == 'dzqyw'\nassert     encrypt('hello world') == 'dzqyw'\nassert     encrypt('hello world') == 'dzqyw'\n"
    },
    {
        "number": 90,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == 3\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == 5\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n"
    },
    {
        "number": 91,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_bored(\"I am bored\") == True\nassert     is_bored(\"I am not bored\") == False\nassert     is_bored(\"I am not bored\") == False\nassert     is_bored(\"I am not bored\") == False\nassert     is_bored(\"I am not bored\") == False\n"
    },
    {
        "number": 92,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1, 2, 3.0) == False\nassert     any_int(1, 2, '3') == False\nassert     any_int(1, 2, 3.1) == False\nassert     any_int(1, 2, 3.1) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     encode(\"Hello World\") == \"hELLO wORLD\"\nassert     encode(\"I am a student\") == \"I aM aSTUDENT\"\nassert     encode(\"I am a student\") == \"I aM aSTUDENT\"\nassert     encode(\"I am a student\") == \"I aM aSTUDENT\"\nassert     encode(\"I am a student\") == \"I aM aSTUDENT\"\n"
    },
    {
        "number": 94,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     skjkasdkd([1,2,3,4,5,6,7,8,9,10]) == 1\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,10,11]) == 1\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12]) == 1\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 1\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1, 'b': 2}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == False\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == True\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == True\n"
    },
    {
        "number": 96,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(30) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     count_up_to(40) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\nassert     count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n"
    },
    {
        "number": 97,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     multiply(12, 123) == 12\nassert     multiply(12, 12) == 24\nassert     multiply(12, 12345) == 12345\nassert     multiply(12, 1234567) == 1234567\nassert     multiply(12, 12345678) == 12345678\n"
    },
    {
        "number": 98,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_upper(\"hello\") == 0\nassert     count_upper(\"HELLO\") == 1\nassert     count_upper(\"HELLO WORLD\") == 1\nassert     count_upper(\"HELLO WORLD!\") == 2\nassert     count_upper(\"HELLO WORLD!\") == 2\n"
    },
    {
        "number": 99,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-14.5\") == -15\n"
    },
    {
        "number": 100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(4) == [1, 3, 3, 1]\nassert     make_a_pile(5) == [1, 4, 6, 4, 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_string(\"hello, world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello, world, hi\") == [\"hello\", \"world\", \"hi\"]\nassert     words_string(\"hello, world, hi, hi\") == [\"hello\", \"world\", \"hi\", \"hi\"]\nassert     words_string(\"hello, world, hi, hi, hi\") == [\"hello\", \"world\", \"hi\", \"hi\", \"hi\"]\nassert     words_string(\"hello, world, hi, hi, hi, hi\") == [\"hello\", \"world\", \"hi\", \"hi\", \"hi\", \"hi\"]\n"
    },
    {
        "number": 102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     choose_num(1, 10) == -1\nassert     choose_num(1, 10) == 2\nassert     choose_num(1, 10) == 4\nassert     choose_num(1, 10) == 6\nassert     choose_num(1, 10) == 8\n"
    },
    {
        "number": 103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     rounded_avg(1, 2) == 1\nassert     rounded_avg(1, 3) == 2\nassert     rounded_avg(1, 4) == 2\nassert     rounded_avg(1, 5) == 2\nassert     rounded_avg(1, 6) == 2\n"
    },
    {
        "number": 104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \"OneTwoThreeFourFiveSixSevenEightNine\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \"OneTwoThreeFourFiveSixSevenEightNineTen\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == \"OneTwoThreeFourFiveSixSevenEightNineTenEleven\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == \"OneTwoThreeFourFiveSixSevenEightNineTenElevenTwelve\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == \"OneTwoThreeFourFiveSixSevenEightNineTenElevenTwelveThirteen\"\n"
    },
    {
        "number": 106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 2]\nassert     f(4) == [1, 1, 2, 6]\nassert     f(5) == [1, 1, 2, 6, 24]\n"
    },
    {
        "number": 107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10) == (2, 2)\nassert     even_odd_palindrome(100) == (2, 2)\nassert     even_odd_palindrome(1000) == (2, 2)\nassert     even_odd_palindrome(10000) == (2, 2)\nassert     even_odd_palindrome(100000) == (2, 2)\n"
    },
    {
        "number": 108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -34"
    },
    {
        "number": 109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([1,2,3,4,5,6]) == False\nassert     move_one_ball([1,2,3,4,5,6,7]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8]) == False\nassert     move_one_ball([1,2,3,4,5,6,7,8,9]) == True\n"
    },
    {
        "number": 110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10, 12]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7], [2, 4, 6, 8, 10, 12]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 10, 12]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     histogram(\"a b c d e f\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}\nassert     histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\nassert     histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\nassert     histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\nassert     histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\n"
    },
    {
        "number": 112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     reverse_delete(\"abcd\",\"cd\") == (\"dcba\",True)\nassert     reverse_delete(\"abcd\",\"cd\") == (\"dcba\",True)\nassert     reverse_delete(\"abcd\",\"cd\") == (\"dcba\",True)\nassert     reverse_delete(\"abcd\",\"cd\") == (\"dcba\",True)\nassert     reverse_delete(\"abcd\",\"cd\") == (\"dcba\",True)\n"
    },
    {
        "number": 113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     odd_count([\"123\", \"456\", \"789\"]) == [1, 2, 3]\nassert     odd_count([\"12\", \"34\", \"56\"]) == [1, 2, 3]\nassert     odd_count([\"1\", \"2\", \"3\"]) == [1, 2, 3]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, "
    },
    {
        "number": 114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1,2,3,4,5]) == 1\nassert     minSubArraySum([1,2,3,4,5,6]) == 3\nassert     minSubArraySum([1,2,3,4,5,6,7]) == 4\nassert     minSubArraySum([1,2,3,4,5,6,7,8]) == 4\nassert     minSubArraySum([1,2,3,4,5,6,7,8,9]) == 4\n"
    },
    {
        "number": 115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     max_fill([[1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1"
    },
    {
        "number": 116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,4,8,3,5,6,7,9]\nassert     sort_array([0,0,1,2,3,4,5,6,7,8]) == [0,0,1,2,4,8,3,5,6,7]\nassert     sort_array([0,0,0,1,2,3,4,5,6,7,8]) == [0,0,0,1,2,4,8,3,5,6,7]\nassert     sort_array([0,0,0,0,1,2,3,4,5,6,7,8]) == [0,0,0,0,1,2,4,8,3,5,6,7]\nassert     sort_array([0,0,0,0,0,1,2,3,4,5,6,7,8]) == [0,0,0,0,0,1,2,4,8,3,5,6,7]\n"
    },
    {
        "number": 117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 2) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 3) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 4) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 5) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert     select_words(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", 6) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_closest_vowel(\"hello\") == \"e\"\nassert     get_closest_vowel(\"leetcode\") == \"e\"\nassert     get_closest_vowel(\"leet\") == \"e\"\nassert     get_closest_vowel(\"le\") == \"e\"\nassert     get_closest_vowel(\"lea\") == \"e\"\n"
    },
    {
        "number": 119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     match_parens(['(())()', '()()']) == 'Yes'\nassert     match_parens(['(())()', '()()']) == 'No'\nassert     match_parens(['(()', '()']) == 'No'\nassert     match_parens(['(()', '()']) == 'No'\nassert     match_parens(['(()', '()']) == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [9, 10, 7]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [9]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == []\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1) == []\n"
    },
    {
        "number": 121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solution([1,2,3,4,5,6,7,8,9,10]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9,10,11]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 9\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 10\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 15\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 6) == 21\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 7) == 28\n"
    },
    {
        "number": 123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3]\nassert     get_odd_collatz(4) == [1, 2, 3]\nassert     get_odd_collatz(5) == [1, 3, 10, 5]\n"
    },
    {
        "number": 124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     valid_date(\"01-01-2000\") == False\nassert     valid_date(\"01-01-1900\") == False\nassert     valid_date(\"01-01-2000\") == True\nassert     valid_date(\"01-01-2000\") == True\nassert     valid_date(\"01-01-2000\") == True\n"
    },
    {
        "number": 125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     split_words('hello world') == ['hello', 'world']\nassert     split_words('hello,world') == ['hello', 'world']\nassert     split_words('hello, world') == ['hello', 'world']\nassert     split_words('hello, world, how are you?') == ['hello', 'world', 'how', 'are', 'you?']\nassert     split_words('hello, world, how are you?') == ['hello', 'world', 'how', 'are', 'you?']\n"
    },
    {
        "number": 126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True\nassert     is_sorted([1, 2, 3, 4, 5, 5]) == False\nassert     is_sorted([1, 2, 3, 4, 5, 6]) == True\nassert     is_sorted([1, 2, 3, 4, 5, 6, 6]) == False\nassert     is_sorted([1, 2, 3, 4, 5, 6, 7]) == True\n"
    },
    {
        "number": 127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (2, 5)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (1, 2)) == \"NO\"\nassert     intersection((1, 3), (1, 1)) == \"NO\"\n"
    },
    {
        "number": 128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     prod_signs([1, 2, 3, 4, 5]) == 1\nassert     prod_signs([-1, -2, -3, -4, -5]) == -15\nassert     prod_signs([]) == None\nassert     prod_signs([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 1\nassert     prod_signs([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]) == -15\n"
    },
    {
        "number": 129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,3]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [1,2]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 0) == []\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 5) == [1,2,3,4,5]\n"
    },
    {
        "number": 130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + (2 / 2)\nassert     tri(3) == 3\nassert     tri(4) == 1 + (2 / 2) + (4 / 2)\nassert     tri(5) == 1 + (2 / 2) + (4 / 2) + (8 / 2)\n"
    },
    {
        "number": 131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     digits(12) == 2\nassert     digits(123) == 6\nassert     digits(1234) == 6\nassert     digits(12345) == 15\nassert     digits(123456) == 60\n"
    },
    {
        "number": 132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_nested('[]()') == True\nassert     is_nested('[()]') == True\nassert     is_nested('[()]()') == True\nassert     is_nested('[()]()[()]') == True\nassert     is_nested('[()]()[()]()') == True\n"
    },
    {
        "number": 133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 55\nassert     sum_squares([-1,-2,-3,-4,-5]) == 55\nassert     sum_squares([-1,2,3,4,5]) == 55\nassert     sum_squares([-1,-2,-3,-4,-5]) == 55\nassert     sum_squares([1,2,3,4,5]) == 55\n"
    },
    {
        "number": 134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('Hello World') == True\nassert     check_if_last_char_is_a_letter('Hello World!') == False\nassert     check_if_last_char_is_a_letter('Hello World!.') == True\nassert     check_if_last_char_is_a_letter('Hello World!?!') == False\nassert     check_if_last_char_is_a_letter('Hello World!?!.') == True\n"
    },
    {
        "number": 135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\n"
    },
    {
        "number": 136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (-6, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7]) == (-7, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8]) == (-8, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == (-9, 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1, 2) == 2\nassert     compare_one(1, \"1\") == 1\nassert     compare_one(1, \"2\") == 2\nassert     compare_one(1, \"1.0\") == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(1) == False\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == False\nassert     is_equal_to_sum_even(4) == True\n"
    },
    {
        "number": 139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hello   world\") == \"hello_world\"\nassert     fix_spaces(\"hello   world   \") == \"hello_world\"\nassert     fix_spaces(\"hello   world   \") == \"hello_world\"\nassert     fix_spaces(\"hello   world   \") == \"hello_world\"\n"
    },
    {
        "number": 141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.exe') == 'Yes'\nassert     file_name_check('abc.dll') == 'Yes'\nassert     file_name_check('abc.txt.txt') == 'No'\nassert     file_name_check('abc.exe.exe') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 30\nassert     sum_squares([1,2,3,4,5,6]) == 54\nassert     sum_squares([1,2,3,4,5,6,7]) == 54\nassert     sum_squares([1,2,3,4,5,6,7,8]) == 54\nassert     sum_squares([1,2,3,4,5,6,7,8,9]) == 54\n"
    },
    {
        "number": 143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"hello world\") == \"helloworld\"\nassert     words_in_sentence(\"hello world\") == \"helloworld\"\nassert     words_in_sentence(\"hello world\") == \"helloworld\"\nassert     words_in_sentence(\"hello world\") == \"helloworld\"\nassert     words_in_sentence(\"hello world\") == \"helloworld\"\n"
    },
    {
        "number": 144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1/3\") == False\nassert     simplify(\"1/2\", \"1/4\") == True\nassert     simplify(\"1/2\", \"1/5\") == False\nassert     simplify(\"1/2\", \"1/6\") == True\n"
    },
    {
        "number": 145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 12"
    },
    {
        "number": 146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 1\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 1\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 2\nassert     get_max_triples(5) == 2\n"
    },
    {
        "number": 148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Earth') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Jupiter') == ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Saturn') == ('Jupiter', 'Saturn', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     sorted_list_sum(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\nassert     sorted_list_sum(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\nassert     sorted_list_sum(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\nassert     sorted_list_sum(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\nassert     sorted_list_sum(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']\n"
    },
    {
        "number": 150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     x_or_y(2, 1, 2) == 1\nassert     x_or_y(3, 1, 2) == 2\nassert     x_or_y(4, 1, 2) == 2\nassert     x_or_y(5, 1, 2) == 2\nassert     x_or_y(6, 1, 2) == 2\n"
    },
    {
        "number": 151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 14\nassert     double_the_difference([-1,2,3,4,5]) == 14\nassert     double_the_difference([-1,-2,-3,-4,-5]) == 14\nassert     double_the_difference([]) == 0\nassert     double_the_difference([1,2,3,4,5,6,7,8,9,10]) == 14\n"
    },
    {
        "number": 152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     compare([1,2,3,4,5],[1,2,3,4,5]) == [0,0,0,0,0]\nassert     compare([1,2,3,4,5],[2,3,4,5,6]) == [1,1,1,1,1]\nassert     compare([1,2,3,4,5],[3,4,5,6,7]) == [2,2,2,2,2]\nassert     compare([1,2,3,4,5],[4,5,6,7,8]) == [3,3,3,3,3]\nassert     compare([1,2,3,4,5],[5,6,7,8,9]) == [4,4,4,4,4]\n"
    },
    {
        "number": 153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices', 'Slices', 'Slices']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices', 'Slices', 'Slices', 'Slices']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     cycpattern_check(\"abcdefg\", \"defgabc\") == True\nassert     cycpattern_check(\"abcdefg\", \"gabcdef\") == True\nassert     cycpattern_check(\"abcdefg\", \"gabcde\") == False\nassert     cycpattern_check(\"abcdefg\", \"gabcdefg\") == False\nassert     cycpattern_check(\"abcdefg\", \"gabcdefgh\") == False\n"
    },
    {
        "number": 155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     even_odd_count(12) == (1, 2)\nassert     even_odd_count(13) == (1, 3)\nassert     even_odd_count(14) == (1, 4)\nassert     even_odd_count(15) == (0, 5)\nassert     even_odd_count(16) == (0, 6)\n"
    },
    {
        "number": 156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(3, 4, 6) == False\nassert     right_angle_triangle(3, 4, 7) == False\nassert     right_angle_triangle(3, 4, 8) == False\nassert     right_angle_triangle(3, 4, 9) == False\n"
    },
    {
        "number": 158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"]) == \"abc\"\nassert     find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"z\"]) == \"abc\"\nassert     find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"z\", \"a\"]) == \"abc\"\nassert     find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"z\", \"a\", \"b\"]) == \"abc\"\nassert     find_max([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"z\", \"a\", \"b\", \"c\"]) == \"abc\"\n"
    },
    {
        "number": 159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     eat(0, 0, 0) == [0, 0]\nassert     eat(0, 1, 0) == [0, 1]\nassert     eat(0, 2, 0) == [0, 2]\nassert     eat(0, 3, 0) == [0, 3]\nassert     eat(0, 4, 0) == [0, 4]\n"
    },
    {
        "number": 160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5]) == -1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 6]) == -1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5, 6]) == -1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5, 6, 7]) == -1\nassert     do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3, 4, 5, 6, 7, 8]) == -1\n"
    },
    {
        "number": 161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     solve(\"Hello\") == \"olLEh\"\nassert     solve(\"How are you?\") == \"uoy eraW?\"\nassert     solve(\"\") == \"\"\nassert     solve(\"a\") == \"a\"\nassert     solve(\"ab\") == \"ba\"\n"
    },
    {
        "number": 162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"a\") == \"a\"\nassert     string_to_md5(\"a\"*100) == \"a\"*100\nassert     string_to_md5(\"a\"*100+\"b\") == \"a\"*100+\"b\"\nassert     string_to_md5(\"a\"*100+\"b\"*100) == \"a\"*100+\"b\"*100\n"
    },
    {
        "number": 163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\nassert     generate_integers(1, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 75"
    }
]