[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     has_close_elements([1,2,3,4], 0.00001) is False\nassert     has_close_elements([1,2,3,4], 0.0001) is False\nassert     has_close_elements([1,2,3,4], 0.0001) is False\nassert     has_close_elements([1,2,3,4], 0.00001) is True\nassert     has_close_elements([1,2,3,4], 0.0011) is False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     has_close_elements([1,2,3,4,5], 1.5) is True\nassert     has_close_elements([1,2,3,4,5], 2.5) is False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 4) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 3) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 1.5) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.5) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     has_close_elements([1, 2, 3], 1) == True\nassert     has_close_elements([1, 2, 3], 3) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 3) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     has_close_elements([2,4], 3) == True\nassert     has_close_elements([2,4,3], 2) == False\nassert     has_close_elements([2,3,4,5], 1) == True\nassert     has_close_elements([2,3,4,5,6,7,8], 2) == False\nassert     has_close_elements([2,3,4,5,6,7,8,9,10], 1) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     has_close_elements(\n    [\n        2.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2.0, \n        3.0, \n        4.0, \n        2.0, \n        3.0, \n        2."
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 0)\nassert has_close_elements([1, 2, 3, 4], 1)\nassert has_close_elements([1, 2, 3, 4], 2)\nassert has_close_elements([1, 2, 3, 4], 3)\nassert has_close_elements([1, 2, 3, 4], 4)\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     has_close_elements([1,2,3], 2)\nassert not     has_close_elements([1,2,3], 2)\nassert not     has_close_elements([1,2,3], 3)\nassert     has_close_elements([1,2,3], 4)\nassert     not     has_close_elements([1,2,3], 3)\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 1e-9) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 1e-10) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 1e-11) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 1e-12) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 1e-13) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     has_close_elements([1, 4, 2, 4, 0, 2, 2, 2], 0.3) == True\nassert     has_close_elements([1, 4, 2, 4, 0, 2, 2, 2], 0.1) == False\nassert     has_close_elements([1, 4, 2, 4, 0, 2, 2, 2], 0.001) == False\n\n\n\ndef get_distances(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\"\n    Return the number of elements which are closer to each other than given threshold\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"()())()()()\") == [\"(((((((((((((((((((((((((((((((((((((((((((((((()((()()((()((()((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n    # print(\"\\n\")\n    # print(\"\\n\")\n    print(\"\\n\")\n    # print(\"\\n\")\n    # print(\"\\n\")\n    "
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"[(])\") == [\"\", \"(]\"]\nassert     separate_paren_groups(\"[()]\") == [\"\"]\nassert     separate_paren_groups(\"(((()())()(()()))\") == [\"\", \"()\", \"()\", \"()()()()\"]\nassert     separate_paren_groups(\"[{}]\") == [\"\", \"{}\"]\nassert     separate_paren_groups(\"[{}]()\") == [\"\", \"{}\", \"()\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"a,b,(c),(d))\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     separate_paren_groups(\"a,(b,(c),(d))\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     separate_paren_groups(\"a,(b,(c),(d)),(e,(f,g),(h))\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\nassert     separate_paren_groups(\"(a,(b,(c),(d))\"), \"\") == [(\"a\", \"b\", \"c\", \"d\"), \"\"]\nassert     separate_paren_groups(\"(a,b,(c),(d))\") == [(\"a\", \"b\", \"c\", \"d\")]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"(1))\") == ['1']\nassert     separate_paren_groups(\"(2))\") == ['2']\nassert     separate_paren_groups(\"(3))\") == ['3']\nassert     separate_paren_groups(\"(4))\") == ['4']\nassert     separate_paren_groups(\"(5))\") == ['5']\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(a+(b))(c)*\") == [\"(a+b)c*\", \"(a+b)c*\"]\nassert     separate_paren_groups(\"(((()()))((()))(())())()(()())()\") == [\"(((()()))((()))(())()()()(()())()\")]\nassert     separate_paren_groups(\"(((()()))((()))(()))((()))()()()(())()()(()(())()()()\") == [\"(((()()))((()))(())()()())(()())()()()(()())()()\"]\n\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     separate_paren_groups('(()' ) == []\nassert     separate_paren_groups('()' ) == []\nassert     separate_paren_groups('(((()' ) == []\nassert     separate_paren_groups('((()' ) == []\nassert     separate_paren_groups('()' ) == []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef separate_paren_groups_test(paren_string: str) -> None:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     separate_paren_groups('[(){}[]]') == ['']\nassert     separate_paren_groups('()())[]') == ['']\nassert     separate_paren_groups('{[()]}') == ['']\nassert     separate_paren_groups('{{[({})]}') == ['{']\nassert     separate_paren_groups('{{{{[()])}') == ['{{', '}']\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"(()()(()()())\") == []\nassert     separate_paren_groups(\"(())()())\") == [\"()()()()\"]\nassert     separate_paren_groups(\"(())()()(())\") == [\"()()()()\", \"(())()()()\", \"(())()()()\"]\nassert     separate_paren_groups(\"((())())\") == [\"()()()\", \"(())()()\"]\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     truncate_number(1.5) == 2\nassert     truncate_number(-1.5) == -2\nassert     truncate_number(0.5) == 0.5\nassert     truncate_number(1.5) == 1.5\nassert     truncate_number(-1.5) == -1.5\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     truncate_number(1.1) == 1.1\nassert     truncate_number(1.1) == 1\nassert     truncate_number(1.1 + 0.1) == 1.1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     truncate_number(45.25) == '1.00'\nassert     truncate_number(45.25) == '1.00'\nassert     truncate_number(45.25) == '1.00'\nassert     truncate_number(45.25) == '1.00'\nassert     truncate_number(45.25) == '1.00'\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     truncate_number(1.34) == 1\nassert     truncate_number(1.234) == 1\nassert     truncate_number(1.2) == 2\nassert     truncate_number(1.2345) == 2\nassert     truncate_number(1.234567) == 2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     truncate_number(1.00) == 1\nassert     truncate_number(1.0) == 0.0\nassert     truncate_number(1.50) == 1\nassert     truncate_number(1.50000001) == 1\nassert     truncate_number(1.5) == 0.0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     truncate_number(0.25) == 1\nassert     truncate_number(0.25) == 0.25\nassert     truncate_number(4.34) == 2.5\nassert     truncate_number(1.1) == 1.0\nassert     truncate_number(1.1) == 0.1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     truncate_number(0.004) == 0.004\nassert     truncate_number(1.000) == 1.000\nassert     truncate_number(1.100) == 1.100\nassert     truncate_number(2.000) == 2.000\nassert     truncate_number(2.00) == 2.00\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     truncate_number(0.0) == 0.0\nassert     truncate_number(1.0) == 1.0\nassert     truncate_number(1.1) == 1.1\nassert     truncate_number(1.2) == 1.2\nassert     truncate_number(1.3) == 1.3\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     truncate_number(1.5) == 1\nassert     truncate_number(0.99) == 1\nassert     truncate_number(1.999) == 0\nassert     truncate_number(-1.999) == 0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     truncate_number(23.4) == 23.0\nassert     truncate_number(2.4) == 2.0\nassert     truncate_number(2.5) == 2.5\nassert     truncate_number(3.0) == 3.0\nassert     truncate_number(3.0) == 3.0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     below_zero([0, 0, 1, 0, 0]) == True\nassert     below_zero([0, 0, 1, 0, 0]) == False\n\ndef check_balance(operations: List[int]) -> bool:\n    \"\"\" You're given a list of operations that can be performed on a bank account.\n    Your task is to check if the balance of account is below zero, i.e. if any operation fails the\n    account will be considered as below zero.\n    \"\"\"\n    pass\n\nassert     check_balance([0, 0, 1, 0, 0]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     below_zero([1,2,3]) == True\nassert     below_zero([10,5,2,7,8]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         below_zero( [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50] )\nassert         below_zero( [15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35] )\nassert         below_zero( [10, 14, 17, 22, 24, 26, 28, 31, 32, 33, 34] )\nassert         below_zero( [4, 8, 12, 16, 18, 20, 24, 26, 28, 31, 32] )\nassert         below_zero( [5, 11, 19, 23, 25, 27, 29, 31, 32, 33, 34] )\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     below_zero([0,0,0,0,0,0]) == True\n\n\ndef is_below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     below_zero(\n        [\n            0,\n            7,\n            5,\n            3,\n            2,\n            -6\n        ]\n    ) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     below_zero([8, -3, 10]) == True\nassert     below_zero([7, -6, -5, -3, 1, 5, 0, 8, 0]) == True\nassert     below_zero([7, -6, -5, -3, 1, 5, 0, 8, 0]) == False\nassert     below_zero([7, -6, -5, -3, 1, 5, 0, 8, 0]) == False\nassert     below_zero([-1, -6, -5, -3, 1, 5, 0, 8, 0]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     below_zero(operations = [[0, 10], [0, -6], [0, -3]]) == True\nassert     below_zero(operations = [[0, 10], [0, -6], [0, -3], [0, 6]]) == False\n\n\ndef has_negative_balance(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if there's any account with negative balance.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     below_zero([0, 0, -1, -1, -1, -1, -1, -1, -1]) == True\nassert     below_zero([0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1]) == False\n\n\ndef check_by_flagged_zero(operations: List[int], expected: int) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance and you have two operations on each. The sum of each of the withdrawals is the same as\n    the sum of the deposits. You should return True if the balance of the bank after the\n    two operations is the same as the balance of the bank after the first. Otherwise,\n    returns False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 2.0\nassert     mean_absolute_deviation([5, 2, 4, 3, 1]) == 3.0\nassert     mean_absolute_deviation([4, 5, 2, 3, 1]) == 2.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 0.0\n\n\"\"\" The code below can be used for any dataset. \"\"\"\n\"\"\"\nnumbers = [1, 2, 3, 4, 5]\nprint(mean_absolute_deviation(numbers)) # should be 2.0\n\"\"\"\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([1,2,3]) == 1\nassert     mean_absolute_deviation([-5,5,5]) == 0\nassert     mean_absolute_deviation([1,2,3,4]) == 3\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([2, 1, 2, 3, 4, 5]) == 3.15, \"returned value is incorrect\"\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 4.0, \"returned value is incorrect\"\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7.0, \"returned value is incorrect\"\nassert     mean_absolute_deviation([5, 4, 3, 2, 1, 0]) == 6.0, \"returned value is incorrect\"\n\ndef mode(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the mode(s) of this dataset.\n    This function will return the mode value for all the values in the list.\n    Modes are calculated using a counterfactual approach, since, for all the values,\n    a counterfactual is usually the most close to the mean value.\n    (use as an argument the mode of the dataset, by default the most common value)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.0, 'Error: mean absolute deviation function, incorrectly calculated!'\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         mean_absolute_deviation([2,4,6,8,10,12]) == 9.8\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([0.0, 1.0, 0.0]) == 0.0\nassert     mean_absolute_deviation([0.0, 1.0, -1.0]) == 1.0\nassert     mean_absolute_deviation([0.0, 1.0, 2.0]) == 2.0\n\n\ndef harmonic_mean(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the harmonic mean (as a\n    version of the mean from the mean function).\n    Harmonic mean is a way to calculate the average over multiple batches of\n    input numbers, including the overall mean.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([1,2,3]) == 2.0\nassert     mean_absolute_deviation([3,1,4]) == 2.0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([5.0, 0.0, 1.0]) == 5.0\nassert     mean_absolute_deviation([-1.0, -5.0, -3.0]) == 5.0\nassert     mean_absolute_deviation([10.0, 0.0, 1.0]) == 10.0\n\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the median of this dataset.\n    Median is the median of this dataset:\n    MAD = median | x - x_median |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 5\nassert     mean_absolute_deviation([1, 2, 3, -4]) == 5\nassert     mean_absolute_deviation([-1, 2, 3, 4]) == 5\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7]) == 20\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([]) == 0\nassert     mean_absolute_deviation([1]) == 1\nassert     mean_absolute_deviation([1, 2, 3, 4, 5]) == 3\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert intersperse(1,2) == [1,2]\nassert intersperse([1,2,3], 1) == [1,2,3]\nassert intersperse([1,2,3], 1, 0) == [1,2,0,3]\nassert intersperse([1,2,3], 1, 1) == [1,1,2,3]\nassert intersperse([1,2,3], 1, 2) == [1,1,2,2,3]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     issubclass(type(intersperse), list)\nassert     len(intersperse) == 2\nassert     issubclass(type(intersperse[0]), int)\nassert     issubclass(type(intersperse[1]), int)\nassert     isinstance(intersperse[0], int)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     intersperse([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], 2) == ['one', 'two', 'three', 'four', 'five','six', 'two', 'one']\nassert     intersperse([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"], [1, 2, 3, 4, 5, 6]) == ['one', 'two', 'three', 'four', 'five','six', 'one', 'two', 'three', 'four', 'five','six']\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # 1. test intersperse\n    # 1.1 remove extra second''\n    # 1.2 insert''\n    # 1.3 compare\n    # 2. for each row, check the correctness\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert idents(intersperse) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, "
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     intersperse([1,2,3], 2) == [1,2,3,2,1]\nassert     intersperse([1,2,3], 4) == [1,2,3,4,1]\nassert     intersperse([1,2,3], 5) == [1,2,3,5,1]\nassert     intersperse([1,2,3], 6) == [1,2,3,6,1]\nassert     intersperse([1,2,3], 1) == [1,2,3,1]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef test_intersperse():\n    assert \n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert intersperse([], 0) == []\nassert intersperse([1], 0) == [1, 1, 1]\nassert intersperse([1, 1, 1], 0) == [1, 1, 1]\nassert intersperse([1, 1, 1], 1) == [1, 1, 1]\nassert intersperse([1, 1, 1], 2) == [1, 1, 1]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     intersperse([], 0) == []\nassert     intersperse([1, 3, 5], 0) == [1, 3, 5]\nassert     intersperse([1, 3, 5], 1) == [1, 3, 5, 1]\nassert     intersperse([1, 3, 5], 2) == [1, 3, 5, 2]\nassert     intersperse([1, 3, 5, 7], 0) == [1, 3, 5, 7, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     parse_nested_parens('()') == []\nassert     parse_nested_parens('((())') == [2]\nassert     parse_nested_parens('(()())') == [2, 1]\nassert     parse_nested_parens('(())()') == [2, 2, 1]\nassert     parse_nested_parens('(())()') == [2, 2, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"(((()))\") == [3]\nassert     parse_nested_parens(\"((())())\") == [3]\nassert     parse_nested_parens(\"((((())())))\") == [4,3]\nassert     parse_nested_parensndef recursive_dls(nested_parens: List[str]) -> int:\n    \"\"\" Returns the deepest level of nesting of nested parentheses by determining the order of nesting, and returns the depth of each level of nesting.\n    This function is recursive.\n    \"\"\"\n    if len(nested_parens) == 0:\n        return 0\n    if len(nested_parens) == 1:\n        return nested_parens[0]\n    return max(nested_parens[0], recursive_dls(nested_parens[1:])) + 1\n\ndef get_max_depth(nested_parens: List[str]) -> int:\n    \"\"\" Returns the deepest level of nesting of nested parentheses by determining the order of nesting, and returns the depth of each level of nesting.\n    This function is recursive.\n    \"\"\"\n    if len(nested_parens) == 0:\n        return 0\n    if len(nested_parens) == 1:\n        return nested_parens[0]\n    return max(nested_parens[0], recursive_dls(nested_parens[1:])) + 1\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"()())\") == [3, 0, 1, 0, 0, 0, 0, 0, 0, 0]\n\n\ndef evaluate_expression(expression: str, depth: int) -> int:\n    \"\"\" Calculate the sum of all numbers in a given expression.\n    Assume that the expression has a single number that is 0.\n    The final expression has an empty parentheses.\n    \"\"\"\n    pass\n\n\ndef evaluate_nested_parens(expression: str) -> int:\n    \"\"\" Given an expression, this function calculates the sum of all numbers in a given expression.\n    The final expression has an empty parentheses.\n    \"\"\"\n    pass\n\n\ndef get_all_operations_at_depth(depth: int, expression: str) -> List[str]:\n    \"\"\" Given a depth, and an expression, this function calculates the all possible operations at that depth.\n    \"\"\"\n    pass\n\n\ndef get_all_operations_at_depth_recursive(depth: int, expression: str) -> List[str]:\n    \"\"\" Given a depth, and an expression, this function calculates the all possible operations at that depth.\n    The recursive function returns a list of all possible operations.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     parse_nested_parens(str) == [[], []]\nassert parse_nested_parens(\"((()()))\") == [3, 2, 2, 1]\nassert parse_nested_parens(\"())(()())(()())\") == [3, 4, 3, 3, 3, 4, 4, 4, 4]\nassert parse_nested_parens(\"((())\") == [3, 3, 3, 1]\nassert parse_nested_parens(\"(()(()))\") == [3, 2, 2, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2, 3]\nassert     parse_nested_parens(\"(()()())\") == [2, 3]\nassert     parse_nested_parens(\"((()()()))\") == [2, 3]\nassert     parse_nested_parens(\"((())()())\") == [2, 3]\nassert     parse_nested_parens(\"((()()()(()()())))\") == [2, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     parse_nested_parens('(())') == [3, 1, 0, 0, 0]\nassert     parse_nested_parens('(())()') == [3, 0, 0, 0, 0]\nassert     parse_nested_parens('(()))') == [0, 0, 0, 0, 0]\nassert     parse_nested_parens('(())()(()())()') == [3, 3, 0, 3, 0]\nassert     parse_nested_parens('(())()()(()())()(())') == [3, 3, 3, 0, 3, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"(((((((((()))))))))\") == [2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     parse_nested_parens('') == []\nassert parse_nested_parens('(()') == []\nassert parse_nested_parens('((())') == [0, 0]\nassert parse_nested_parens('(((((()))()))())()()()()') == [2, 2, 1, 1, 1, 1, 1, 1, 1]\nassert parse_nested_parens('((((((()))()())()()()()((()))()()()()()()()()()()()()()()()()()()()()(()())()()()()()()()()()()()()()()()(()))))') == [2, 2, 3, 3, 3, 3, 3, 3, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     parse_nested_parens(parse_nested_parens('()()()()()')) == [[()]]\nassert     parse_nested_parens(parse_nested_parens('(((((((((((((((())))))))))))))')) == [[()]])\nassert     parse_nested_parens(parse_nested_parens('(((((((((((((((((((())))))))))))))))))')) == [[()]])\nassert     parse_nested_parens(parse_nested_parens('(((((((((((((((())))))))))))))')) == [[()]])\nassert     parse_nested_parens(parse_nested_parens('(((((((((((((((())))))))))))))')) == [[()]])\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     parse_nested_parens('((()()()()()))') == [3, 4, 5, 6]\nassert     parse_nested_parens('((()())())') == [1, 2, 3, 4]\nassert     parse_nested_parens('(((()()()()()()))') == [1, 2, 3, 4]\nassert     parse_nested_parens('((()))') == []\nassert     parse_nested_parens('(((()()()()()()()))') == [1, 2, 3, 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     filter_by_substring(['af', 'asd', 'ba', 'bca', 'abcd'], 'bc') == ['abcd']\nassert     filter_by_substring([1, 2, 3, 4, 5], 3) == [2, 5]\n\ndef filter_by_mask(strings: List[str], mask: List[int]) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given mask\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     filter_by_substring([1,2,3,4,5,6,7,8,9,10,11], \"test\") == [1,2,3,4,5,6,7,8,9,10,11]\nassert     filter_by_substring([1,2,3,4,5,6,7,8,9,10,11], \"word1\") == [1,2,3,4,5,6,7,8,9,10,11]\nassert     filter_by_substring([1,2,3,4,5,6,7,8,9,10,11], \"word1\") == [1,2,3,4,5,6,7,8,9,10,11]\nassert     filter_by_substring([1,2,3,4,5,6,7,8,9,10,11], \"word2\") == [1,2,3,4,5,6,7,8,9,10,11]\nassert     filter_by_substring([1,2,3,4,5,6,7,8,9,10,11], \"word3\") == [1,2,3,4,5,6,7,8,9,10,11]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     filter_by_substring(strings=[\"abcde\", \"abc\", \"abcde\"], substring=\"e\") == [\"abcde\", \"abc\", \"abcde\"]\nassert     filter_by_substring(strings=[\"ab\", \"ab\", \"abc\"], substring=\"a\") == [\"ab\", \"ab\"]\nassert     filter_by_substring(strings=[\"abc\", \"a\", \"a\", \"a\"], substring=\"a\") == [\"abc\"]\nassert     filter_by_substring(strings=[\"ab\", \"ab\", \"abc\"], substring=\"ab\") == [\"ab\", \"ab\", \"abc\"]\nassert     filter_by_substring(strings=[\"abc\", \"ab\", \"ab\", \"a\", \"a\", \"a\", \"a\"], substring=\"ab\") == [\"ab\", \"ab\", \"ab\", \"a\", \"a\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"four\") == [ \"one\", \"two\", \"three\", \"four\" ]\n\n\ndef filter_by_substring_sort(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"dog\", \"dog\"], \"cat\") == [\"dog\", \"dog\", \"dog\", \"dog\"]\nassert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"dog\", \"dog\"], \"a\") == [\"dog\"]\nassert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"dog\", \"dog\"], \"a\") == []\nassert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"dog\", \"dog\"], \"b\") == []\nassert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"dog\", \"dog\"], \"a\") == [\"dog\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     filter_by_substring([1, 2, \"a\", \"b\", \"c\"], \"a\") == [2, \"c\"]\nassert     filter_by_substring([1, 2, \"a\", \"b\", \"c\"], \"c\") == [1, 2, \"b\"]\nassert     filter_by_substring([1, 2, \"a\", \"b\", \"c\"], \"a\") == []\nassert     filter_by_substring([1, 2, \"a\", \"b\", \"c\"], \"c\") == []\n\ndef filter_by_string_length(strings: List[str], sub: str) -> List[str]:\n    \"\"\" filter an input list of strings by substring length \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     (filter_by_substring([\"1234\", \"2\", \"1234\", \"2\", \"34\", \"1234\"], \"2\") == [\"2\"])\nassert     (filter_by_substring([\"1234\", \"2\", \"1234\", \"2\", \"34\", \"1234\", \"23\", \"2\", \"23\", \"34\", \"1234\", \"23\", \"34\", \"1234\", \"234\", \"34\", \"1234\", \"23\", \"23\", \"34\", \"1234\", \"23\", \"23\", \"23\", \"34\", \"1234\", \"234\", \"34\", \"1234\", \"23\", \"23\", \"23\", \"34\", \"1234\", \"234\", \"23\", \"234\", \"23\", \"34\", \"1234\", \"23\", \"234\", \"23\", \"34\", \"1234\", \"234\", \"23\", \"23\", \"34\", \"1234\", \"23\", \"234\", \"234\", \"23\", \"34\", \"1234\", \"234\", \"234\", \"234\", \"23\", \"23\", \"234\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"34\", \"1234\", \"23\", \"23\", \"34\", \"1234\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"34\", \"1234\", \"23\", \"23\", \"34\", \"1234\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", \"23\", "
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"cat\", \"dog\", \"dog\"], \"cat\") == [\"cat\"]\nassert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"cat\", \"dog\", \"dog\"], \"dog\") == [\"dog\"]\nassert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"cat\", \"dog\", \"dog\"], \"cat\") == []\nassert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"cat\", \"dog\", \"dog\"], \"cat\") == [\"dog\"]\nassert     filter_by_substring([\"dog\", \"cat\", \"dog\", \"cat\", \"dog\", \"dog\"], \"dog\") == [\"dog\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     filter_by_substring(['am','man'], 'a') == ['man']\nassert     filter_by_substring(['teacher', 'tutor'], 't') == []\nassert     filter_by_substring(['announcement'], 'a') == ['announcement']\nassert     filter_by_substring(['announcement'], 'A') == []\nassert     filter_by_substring(['announcement'], 'an') == ['announcement']\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sum_product([5, 4]) == (0, 4)\nassert sum_product([1, 2]) == (1, 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sum_product([1,2,3]) == (3, 1)\nassert     sum_product([1,1,1,1,1]) == (1, 1)\n\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sum_product([1, 2, 3]) == (1, 3)\nassert sum_product([1, 3, 2, 1]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sum_product([1, 2, 3]) == (1, 1)\nassert     sum_product([1, 2, 3, 4]) == (1, 2*3)\nassert     sum_product([5, 2, 3, 4]) == (5, 2*3*4)\nassert     sum_product([]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == (15, 81)\nassert     sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 1, 2, 3, 4]) == (18, 504)\nassert     sum_product([]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([5, -3]) == (1, 5)\nassert     sum_product([-10, -20]) == (1, -10)\nassert     sum_product([10, -10]) == (0, 1)\nassert     sum_product([10, -10, -20]) == (0, -10)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sum_product([2, 3, 4]) == (6, 12)\nassert     sum_product([1, 2, 3, 4]) == (6, 24)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (5, 12)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([2]) == (2, 2)\nassert     sum_product([1,2,3]) == (3, 6)\nassert     sum_product([2,2,2]) == (2, 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sum_product([5,3,2,1]) == (25,125)\nassert     sum_product([]) == (0,1)\nassert     sum_product([1]) == (1,1)\nassert     sum_product([1,3,2,4,5]) == (0,33)\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     rolling_max([1, 3, 5, 6]) == [1, 3, 6, 5]\nassert     rolling_max([2, 4, 6, 8, 10]) == [4, 6, 8, 10, 2]\nassert     rolling_max([2, 3, 6, 7, 9, 12, 15]) == [2, 3, 6, 7, 9, 12, 15]\nassert     rolling_max([]) == []\nassert     rolling_max([0]) == []\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\ndef test_rolling_max():\n    assert rolling_max([1, 5, 3, -6, 4]) == [4, -6, -3, 5]\n    assert rolling_max([1, 2, 5, 5, -3]) == [5, -3, 5, -3, 5]\n    assert rolling_max([1, 2, 3, 4, 5]) == [4, 5, 4, 5, 4]\n    "
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     isinstance(rolling_max([2,1,3,3]), List) == True\nassert     isinstance(rolling_max([5,3,4,6,4,3,1]), List) == True\nassert     isinstance(rolling_max([1,2,3,4,5,6,7,9,1]), List) == True\n\ndef rolling_max_v1(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    Reference: https://www.geeksforgeeks.org/rolling-maximum-in-an-array/\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([4, 2, 1, 3, 5]) == [4, 4, 4, 4, 5]\nassert     rolling_max([]) == []\n\n\ndef roll_digits(numbers: List[int]) -> List[int]:\n    \"\"\" Generate the digits of a given list of numbers in a given sequence,\n    the first digit of each number is always 1.\n\n    Returns a list of digits in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     rolling_max([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n\ndef window_checker(\n    numbers: List[int],\n    window_size: int\n) -> bool:\n    \"\"\" check if all the elements of the sequence are equal to their rolling max\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     [0, 1, 2, 3, 5, 10, 20, 50, 100, 200] == rolling_max(numbers=[0, 1, 2, 3, 5, 10, 20, 50, 100, 200])\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     0\n\ndef rolling_max_from_sequence(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     rolling_max([-1,3,1,1,1,1]) == [1,1,1,3,1,1]\nassert     rolling_max([1,1,1,3,1,1]) == [1,1,1,3,1,1]\nassert     rolling_max([1,1,1,3,1,1,4,2,1]) == [1,1,1,3,1,1,4,2,1]\nassert     rolling_max([-1,2,2,3,4,5]) == [2,2,2,3,4,5]\nassert     rolling_max([-1,2,2,3,4,5,6]) == [2,2,2,3,4,5,6]\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     make_palindrome('aaaaabbbbccccddeeeeeeeeeeeeeeeeeeeee') == 'aabbcde'\nassert     make_palindrome('qwertyuiop') == 'qwertuio'\nassert     make_palindrome('1234567890') == '123456789'\nassert     make_palindrome('trill') == 'trill'\nassert     make_palindrome('iraj') == 'iraj'\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_palindrome(\"bab\") == True\nassert     is_palindrome(\"ac\") == False\nassert     is_palindrome(\"A\") == True\nassert     is_palindrome(\"Bab\") == False\nassert     is_palindrome(\"Aa\") == True\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\ndef main() -> None:\n    \"\"\" Main function \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_palindrome(\"001\") == True\nassert     is_palindrome(\"011\") == True\nassert     is_palindrome(\"1011\") == True\nassert     is_palindrome(\"10101\") == True\nassert     is_palindrome(\"1010101\") == True\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_palindrome(\"jg\") == True\nassert     is_palindrome(\"d\") == False\nassert     is_palindrome(\"abcd\") == True\nassert     is_palindrome(\"ad\") == False\nassert     is_palindrome(\"ba\") == True\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('hello') == True\nassert     is_palindrome('hii') == True\nassert     is_palindrome('foooo') == True\nassert     is_palindrome('alho') == False\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     make_palindrome(\"ababcdeee\") == \"ace\"\nassert     make_palindrome(\"cccccb\") == \"bbbbc\"\nassert     make_palindrome(\"aaaabb\") == \"bbbb\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"\") == \"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_palindrome(make_palindrome(\"gohayim\"))\nassert     is_palindrome(make_palindrome(\"hi\"))\nassert     is_palindrome(make_palindrome(\"rstt\"))\nassert     is_palindrome(make_palindrome(\"aab\"))\nassert     is_palindrome(make_palindrome(\"asdfasdfasdfa\"))\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     make_palindrome('') == ''\nassert     make_palindrome('a') == 'aa'\nassert     make_palindrome('abba') == 'abaa'\nassert     make_palindrome('aab') == 'aaba'\nassert     make_palindrome('abab') == 'abaa'\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     string_xor(\"1\", \"0\") == \"01\"\nassert     string_xor(\"0\", \"1\") == \"00\"\n\ndef string_substitution(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform a substitution on these inputs and return result also as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     string_xor
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     string_xor('42', '53') == '1e3'\nassert     string_xor('141414', '141414') == 'a2b9e'\nassert     string_xor('abcdef', 'abcdef') == 'a65b1f'\nassert     string_xor('a1a2a1', 'a1a2a1') == 'a1a2a1'\nassert     string_xor('a1a1a1', 'a1a1a1') == 'a1a1a1'\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     string_xor(\"11\", \"11\") == \"1\"\nassert     string_xor(\"10\", \"11\") == \"0\"\nassert     string_xor(\"0\", \"10\") == \"0\"\nassert     string_xor(\"11\", \"11\") == \"0\"\nassert     string_xor(\"100\", \"101\") == \"1\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     string_xor(string_xor(\"123\", \"11011111\"), \"111011\") == \"100000000\"\nassert     string_xor(string_xor(\"0101111111\", \"1111111111\"), \"111011\") == \"100000000\"\nassert     string_xor(string_xor(\"1111111111\", \"1111111111\"), \"111011\") == \"100000000\"\nassert     string_xor(string_xor(\"0111111111\", \"1111111111\"), \"111011\") == \"100000000\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     string_xor(\"1\", \"0\") == \"0\"\nassert     string_xor(\"1\", \"1\") == \"1\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     string_xor(a=a, b=b) == '01000100'\nassert     string_xor(a='a', b='b') == '0011001'\nassert     string_xor(a='b', b='b') == '0000101'\nassert     string_xor(a='1', b='0') == '1110000'\n\ndef list_xor(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Input are two lists of integers a and b consisting only of 1s and 0s.\n    Perform list XOR on these inputs and return result also as a list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     string_xor(\n        \"A\",\n        \"B\"\n    ) == \"C\"\n\ndef print_xor(cipher: str, plain: str) -> None:\n    \"\"\" Input are two strings cipher and plain, respectively.\n    Perform XOR on these inputs and print them.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     string_xor(\"10101\", \"11100\") == \"11100\"\nassert     string_xor(\"101101\", \"11100\") == \"11100\"\n\ndef build_data_list_1(string: str) -> List[str]:\n    \"\"\"Build a list of 1s and 0s from string.\n    Use the following string to build a list of 1s and 0s:\n    [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     string_xor('1', '0') == '0'\nassert     string_xor('1', '1') == '1'\nassert     string_xor('1', '1') == '0'\nassert     string_xor('1', '0') == '1'\nassert     string_xor('0', '0') == '0'\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     longest(['a', 'b', 'c', 'd']) == 'c'\nassert     longest(['a', 'b', 'c']) == 'c'\nassert     longest(['a', 'b']) == 'c'\nassert     longest(['a', 'b', 'c', 'd']) == 'd'\n\ndef count_longest(strings: List[str]) -> List[int]:\n    \"\"\" Return the count of longest strings in the list of strings. Return an empty list if\n    the input list is empty. \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     longest([\"a\", \"b\", \"c\"]) == \"c\"\nassert     longest([\"a\", \"b\", \"a\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"b\"]) == \"b\"\nassert     longest([\"a\", \"b\", \"b\", \"a\"]) == \"b\"\nassert     longest([\"a\", \"b\"]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     longest([]) == None\nassert longest(['a', 'b', 'c', 'd']) == 'c'\nassert longest(['a', 'b', 'b', 'c', 'd']) == None\nassert longest(['a', 'a', 'a', 'a']) == 'a'\nassert longest(['abc', 'bcd', 'abcd', 'cd']) == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     longest([\"hello\"]) == \"l\"\nassert     longest([\"hello\", \"lo\"]) == \"l\"\nassert     longest([\"hello\", \"lo\", \"hello\"]) == \"l\"\nassert     longest([\"hello\", \"hello\", \"hi\"]) == \"h\"\nassert     longest([\"hi\", \"hello\", \"hi\"]) == \"hi\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     longest([]) == None, \"Longest(<empty list>): Failed\"\nassert     longest([\"miss\"]) == None, \"Longest(<string'miss'>): Failed\"\nassert     longest([\"miss\", \"miss\", \"miss\", \"miss\"]) == \"miss\", \"Longest(<string'miss'>): Failed\"\n\n\"\"\"\nAlgorithm:\n    1. take list as a string and convert the list of string to a list of integers\n        - each integer is in the list, which is an odd length\n        - for each integer in the list,\n            take its digits and add to the list (if they are equal, then it is a valid string)\n            then, add the digit to the list, then perform same operation as for all other integers in the list\n        - if the list is empty, then the list is considered as valid string and will be returned\n        - else if the list is not empty, then the list will be obtained from the integer provided as a function as a result\n\nSolution:\n    2. construct an empty list and initialize it with a list containing the string\n        - take the list and convert it to a list of integers\n            - for each integer in the list,\n                - if the list contains an integer, then it is a valid string\n                - otherwise,\n                    - convert the integer to the digits of the integer, then add it to the list\n                - after doing the same operation, the list is considered as valid string\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     l = longest([\"a\", \"b\", \"c\", \"b\", \"a\"])"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     longest([1, 2, 3, 4, 5]) == \"5\"\nassert     longest([]) == None\nassert     longest([\"a\"]) == \"a\"\nassert     longest([\"ab\"]) == \"b\"\nassert     longest([\"ab\", \"abc\"]) == \"b\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef next_permutation(a: List[int]) -> None:\n    \"\"\"\n    Determine if a list is a permutation.\n    \"\"\"\n    pass\n\ndef is_permutation(a: List[int]) -> bool:\n    \"\"\"\n    Determine if a list is a permutation.\n    \"\"\"\n    pass\n\ndef selection_sort(a: List[int]) -> None:\n    \"\"\"\n    Sort a list.\n    \"\"\"\n    pass\n\ndef insertion_sort(a: List[int]) -> None:\n    \"\"\"\n    Sort a list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     longest([]) == None\nassert longest([\"a\"]) == \"a\"\nassert longest([\"a\", \"a\"]) == \"a\"\nassert longest([\"aa\"]) == \"a\"\nassert longest([\"ab\", \"ab\"]) == \"b\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\ndef longest2(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    O(1) space (doesn't matter)\n    O(n) time (only use length of the longest)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(1, 0) == 1\nassert     greatest_common_divisor(2, 0) == 2\nassert     greatest_common_divisor(3, 0) == 2\nassert     greatest_common_divisor(4, 0) == 4\nassert     greatest_common_divisor(5, 0) == 5\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(3, 10) == 2\nassert     greatest_common_divisor(10, 20) == 10\nassert     greatest_common_divisor(30, 15) == 5\nassert     greatest_common_divisor(20, 15) == 3\nassert     greatest_common_divisor(10, 30) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\ndef number_of_primes(n: int) -> int:\n    \"\"\" Returns the number of primes below n \"\"\"\n    pass\n\ndef count_primes(n: int) -> int:\n    \"\"\" Return the number of primes below n \"\"\"\n    pass\n\ndef n_count_primes(n: int) -> int:\n    \"\"\" Return the number of primes below n \"\"\"\n    pass\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(2, 3) == 3\nassert     greatest_common_divisor(5, 7) == 5\nassert     greatest_common_divisor(3, 5) == 3\nassert     greatest_common_divisor(3, 0) == 1\nassert     greatest_common_divisor(5, 0) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     greatest_common_divisor(12, 3) == 3\nassert     greatest_common_divisor(20, 24) == 20\nassert     greatest_common_divisor(45, 25) == -1\nassert greatest_common_divisor(38, 43) == -1\nassert greatest_common_divisor(46, 46) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(3, 4) == 2\nassert     greatest_common_divisor(2, 1) == 1\nassert     greatest_common_divisor(3, 4) == 3\nassert     greatest_common_divisor(2, 5) == 5\nassert     greatest_common_divisor(2, 4) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     greatest_common_divisor(6, 7) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     greatest_common_divisor(7, 12) == 3\nassert greatest_common_divisor(17, 15) == 5\nassert greatest_common_divisor(1, 3) == 1\nassert greatest_common_divisor(15, 7) == 17\nassert greatest_common_divisor(12, 4) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(2, 3) == 1\nassert     greatest_common_divisor(2, 5) == 2\nassert     greatest_common_divisor(10, 9) == 9\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"ab\") == [\"ab\"]\nassert     all_prefixes(\"aab\") == [\"a\", \"aab\"]\nassert     all_prefixes(\"abc\") == [\"abc\"]\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     all_prefixes('abcdefg') == ['abc', 'def', 'g', 'f', 'i', 'g', 'e', 'c', 'b', 'd', 'c', 'f']\nassert     all_prefixes('abcdefgh') == ['ab', 'cd', 'ef', 'gh', 'c', 'f', 'i', 'j', 'k', 'l','m', 'o', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\nassert     all_prefixes('1234567890') == ['123', '456', '789']\nassert     all_prefixes('abcdefgh') == []\nassert     all_prefixes('ab') == ['a', 'b']\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     all_prefixes(\"abcd\") == [\"dc\", \"adc\", \"bc\", \"bcd\", \"cd\", \"cd\"]\nassert     all_prefixes(\"abc\") == [\"ab\", \"ac\", \"bc\"]\nassert     all_prefixes(\"abcddeef\") == [\"ab\", \"ac\", \"bc\", \"cd\", \"de\", \"ef\", \"ee\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     all_prefixes(\"radar\") == [\"r\", \"r\"]\nassert     all_prefixes(\"tridex\") == [\"tr\", \"tr\"]\nassert     all_prefixes(\"glandate\") == [\"g\", \"g\"]\nassert     all_prefixes(\"pandoc\") == [\"p\", \"d\", \"c\", \"c\", \"d\", \"c\"]\nassert     all_prefixes(\"aduckatwork\") == [\"a\", \"d\", \"c\", \"c\", \"c\", \"a\", \"d\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     all_prefixes('abacde') == [\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert     all_prefixes('abcdef') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert     all_prefixes('abcdefghijklmnopqrstuvwxyz') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     all_prefixes(\"abacaba\") == [\"ab\", \"ac\", \"ba\", \"abc\"]\nassert     all_prefixes(\"abcdef\") == []\nassert     all_prefixes(\"abc\") == []\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"b\", \"c\"]\nassert     all_prefixes(\"abcdef\") == [\"a\", \"b\", \"c\", \"def\"]\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"abc\") == [\"a\", \"b\", \"c\", \"def\"]\nassert     all_prefixes(\"abcdef\") == [\"a\", \"b\", \"c\", \"def\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     all_prefixes(\"aaa\") == [\"a\"]\nassert     all_prefixes(\"aa\") == []\nassert     all_prefixes(\"aab\") == []\nassert     all_prefixes(\"aabb\") == [\"a\", \"b\"]\nassert     all_prefixes(\"aabbb\") == [\"a\", \"b\", \"b\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcdef\") == [\"a\", \"abc\", \"abcdef\"]\nassert     all_prefixes(\"abcdefghijklmnopqrstuvwxyz\") == [\"abc\", \"abcdef\", \"abcdefghijklmnopqrstuvwxyz\"]\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"aaa\") == [\"a\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     all_prefixes('abc') == [\n                    'a', 'b', 'c'\n                ]\nassert     all_prefixes('abcde') == [\n                    'a', 'b', 'c', 'd', 'e', 'f'\n                ]\nassert     all_prefixes('abcdef') == [\n                    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n                ]\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     string_sequence(1) == '1'\nassert     string_sequence(2) == '22'\nassert     string_sequence(4) == '4 5'\nassert     string_sequence(7) == '7 8 9'\nassert     string_sequence(8) == '8 9'\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4 5\"\nassert     string_sequence(4) == \"0 4\"\nassert     string_sequence(3) == \"3\"\nassert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"1\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     string_sequence(5) == '0,01,02,03,04,05'\nassert     string_sequence(6) == '0,01,02,03,04,05,06'\nassert     string_sequence(7) == '0,01,02,03,04,05,06,07'\nassert     string_sequence(8) == '0,01,02,03,04,05,06,07,08'\nassert     string_sequence(9) == '0,01,02,03,04,05,06,07,08,09'\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     string_sequence(3) == \"01234\"\nassert     string_sequence(0) == \"0\"\nassert     string_sequence(10) == \"0\"\nassert     string_sequence(12) == \"1\"\nassert     string_sequence(19) == \"1\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     string_sequence(1) == \"01\"\nassert     string_sequence(10) == \"10\"\nassert     string_sequence(100) == \"100\"\nassert     string_sequence(1000) == \"1000\"\nassert     string_sequence(10001) == \"101\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef string_sequence_2(n: int) -> str:\n    \"\"\" Return a string containing spaces starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     string_sequence(5) == '00 00 00 00 00 00 00 00 00'\nassert     string_sequence
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     string_sequence(3) == \"123\"\nassert     string_sequence(5) == \"12345\"\nassert     string_sequence(10) == \"123456789\"\nassert     string_sequence(20) == \"12345678910\"\nassert     string_sequence(50) == \"1234567891111111111\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     string_sequence(4) == '01234'\nassert     string_sequence(5) == '023445'\nassert     string_sequence(15) == '123456789'\nassert     string_sequence(2) == '123'\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     count_distinct_characters('1A') == 1\nassert     count_distinct_characters('aa') == 1\nassert     count_distinct_characters('Aa') == 1\nassert     count_distinct_characters('1234') == 1\nassert     count_distinct_characters('12345') == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     count_distinct_characters('abccde') == 3\nassert     count_distinct_characters('a bccde') == 2\nassert     count_distinct_characters('abcde') == 1\nassert     count_distinct_characters('a bcde') == 0\nassert     count_distinct_characters('abcde') == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"hello world\") == 5, \"Count distinct characters does not work as expected\"\nassert     count_distinct_characters(\"Hello World\") == 2, \"Count distinct characters does not work as expected\"\nassert     count_distinct_characters(\"abcd\") == 1, \"Count distinct characters does not work as expected\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"QUEUE\") == 1\nassert     count_distinct_characters(\"QUERY\") == 1\nassert     count_distinct_characters(\"\") == 1\nassert     count_distinct_characters(\"abc\") == 0\nassert     count_distinct_characters(\"QUEUQER\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     count_distinct_characters('python') == 1, 'test: count_distinct_characters(test)'\nassert     count_distinct_characters('a') == 1, 'test: count_distinct_characters(test)'\nassert     count_distinct_characters('aaaa') == 2, 'test: count_distinct_characters(test)'\nassert     count_distinct_characters('aaaa') == 3, 'test: count_distinct_characters(test)'\nassert     count_distinct_characters('aaaaa') == 4, 'test: count_distinct_characters(test)'\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"abcd\") == 3\nassert     count_distinct_characters(\"123abc\") == 2\nassert     count_distinct_characters(\"12\") == 1\n\n\ndef find_longest_repeated_character(string: str) -> int:\n    \"\"\" Given a string, find the length of the longest repeated character in the string \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     count_distinct_characters(\"aaa\") == 3\nassert     count_distinct_characters(\"aa\") == 1\nassert     count_distinct_characters(\"a\") == 0\n\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"Hello, world!\") == 3\nassert     count_distinct_characters(\"Hello, world!\") == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     count_distinct_characters(\"a a\") == 2\nassert     count_distinct_characters(\"abcdefg\") == 3\nassert     count_distinct_characters(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     count_distinct_characters('AAAAABBCDDDEEEFFGHI') == 10\nassert     count_distinct_characters('abcdefghi') == 0\nassert     count_distinct_characters('abcaabcdeeeffegh') == 10\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     parse_music('o') == [4,2,1,0]\nassert     parse_music('o|') == [0,4,2,1]\nassert     parse_music('o|.|') == [0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     parse_music('o.|') == [0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     parse_music('o.|.|') == [0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     parse_music('o|') == [1, 4]\nassert     parse_music('o|.|') == [1, 4, 2, 2]\nassert     parse_music('.|') == [0, 1, 2, 1]\nassert     parse_music('o') == [0, 0]\nassert     parse_music('o|.|') == [1, 4, 2, 2, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     parse_music(\".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     parse_music('o.o|') == [1, 1, 2, 3]\n\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         parse_music(\"o |. |.o\") == [0, 2, 0]\nassert         parse_music(\"o.o|.o.o\") == [0, 0, 0, 0, 0]\nassert         parse_music(\"..o\") == [0, 0, 0, 0, 0]\nassert         parse_music(\"o.oo|.\") == [1, 0, 0, 0, 0]\nassert         parse_music(\"o.|o\") == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     parse_music('o|.|') == [2, 2, 2, 4]\nassert     parse_music('o.|') == [1, 2, 1, 2]\nassert     parse_music('o.o') == [0, 0, 0, 0]\nassert     parse_music('o.o|.|') == [4, 0, 4, 4]\nassert     parse_music('o.o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     parse_music('o|1|1|') == [2, 2, 1]\nassert     parse_music('o') == []\nassert     parse_music('o|1') == [1]\nassert     parse_music('o|1|1') == [1, 2, 1]\nassert     parse_music('o|1|1|') == [1, 3, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     parse_music(\"o|o\") == [4, 2]\nassert     parse_music(\"o.|.|o\") == [3, 3, 3]\nassert     parse_music(\"o|.|o\") == [1, 3, 3]\nassert     parse_music(\"o.|.|o\") == [0, 3, 3]\nassert     parse_music(\"o|.|o\") == [0, 0, 0]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     parse_music(music_string='o|.|.|') == [11, 2, 0, 3, 0, 0]\nassert     parse_music(music_string='o|.|.|o') == [1, 0, 0, 0, 0, 0]\nassert     parse_music(music_string='o|o|.|') == [3, 0, 1, 0, 0, 0]\nassert     parse_music(music_string='o|o|o') == [1, 0, 1, 0, 0, 0]\nassert     parse_music(music_string='o|o|.|o') == [1, 0, 0, 0, 0, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     parse_music(\"o.o|\") == [0, 2]\nassert     parse_music(\"o.o|.o\") == [0, 0]\nassert     parse_music(\".|.o\") == [0, 2]\nassert     parse_music(\"o.o|.o|.o\") == [0, 0, 2]\nassert     parse_music(\"o.o|.o|.o|.o\") == [0, 0, 2, 0, 2]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     how_many_times('adam', 'a') == 3\nassert     how_many_times('abc', 'bc') == 1\nassert     how_many_times('abc', 'abc') == 3\nassert     how_many_times('abc', 'abcd') == 2\nassert     how_many_times('abc', 'abc') == 3\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     how_many_times(string, substring) == 6\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     how_many_times(strings, 'e') == 4, 'How many times does substring \"e\" go up?'\nassert     how_many_times(strings, 'Z') == 6, 'How many times does substring \"Z\" go up?'\nassert     how_many_times(strings, 'g') == 3, 'How many times does substring \"g\" go up?'\nassert     how_many_times(strings, 'o') == 1, 'How many times does substring \"o\" go up?'\nassert     how_many_times(strings, 'b') == 4, 'How many times does substring \"b\" go up?'\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\n\"\"\"\nGiven a string and a substring, determine how many times it can be found in the string.\n\nYou may assume that the given string consists of lowercase English letters only.\n\nNote:\n\nYou may assume that the given string does not contain any digits.\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     how_many_times(\"abcdef\", \"ed\") == 3\nassert     how_many_times(\"abcdef\", \"bc\") == 2\nassert     how_many_times(\"abcdef\", \"ed\") == 1\nassert     how_many_times(\"abcdef\", \"bc\") == 0\nassert     how_many_times(\"abcdef\", \"bc\") == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     how_many_times(\"abc\", \"bac\") == 3\nassert     how_many_times(\"abc\", \"ab\") == 2\nassert     how_many_times(\"abc\", \"cbc\") == 0\nassert     how_many_times(\"abc\", \"abc\") == 0\n\n\ndef how_many_times_solution(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         how_many_times(sample_text, 'a') == 3\nassert         how_many_times(sample_text, 'aa') == 2\nassert         how_many_times(sample_text, 'aaa') == 1\nassert         how_many_times(sample_text, 'aaaab') == 1\nassert         how_many_times(sample_text, 'aaabb') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     how_many_times(\n    string= \\\n    \"\"\"\n   x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  x  "
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_numbers(\"zero nine one two three four five six seven eight nine\") == \"9 8 6 7 4 5 1\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_numbers('123a') == '123a'\nassert     sort_numbers('1.5') == '1.5'\nassert     sort_numbers('19.5') == '19.5'\nassert     sort_numbers('19.5 789') == '19.5 789'\nassert     sort_numbers('19.5 789  ') == '19.5 789  '\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sort_numbers('1+2*3-4-5') == '12-34-5'\nassert     sort_numbers('42') == '42'\nassert     sort_numbers('+2*3-4-5') == '12-34-5'\nassert     sort_numbers('0') == '0'\nassert     sort_numbers('24') == '9-8-7-6-5-4-3-2-1'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sort_numbers('1 2 3 4 5 6 7 8 9') == '9 8 7 6 5 3 2 1'\nassert     sort_numbers('0 1 9 3 5 7 4 8 9 2') == '0 2 3 4 5 6 7 8 9 9 9 7'\nassert     sort_numbers('0 1 0 0 0 1 9 9 3 5 8') == '0 1 9 3 5 7 8 9 9 2'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sort_numbers(\"zero nine\") == \"nine zero\"\nassert     sort_numbers(\"three four\") == \"four three\"\nassert     sort_numbers(\"four five\") == \"five four\"\nassert     sort_numbers(\"seven eight\") == \"eight seven\"\nassert     sort_numbers(\"nine\") == \"nine zero\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sort_numbers('zero nine seven eight nine') == 'zero nine seven eight nine nine nine nine'\nassert     sort_numbers('1 2 3 four five') == '2 3 4 four five'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('eight') == 'eight'\nassert     sort_numbers('nine') == 'nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\n\ndef get_fibonacci(n):\n    \"\"\" Input is a number between 1 and N, where N is an integer.\n    Output is the FIBNACI sequence in the Nth position.\n    \"\"\"\n    pass\n\n\ndef get_fibonacci_recursive(n):\n    \"\"\" Input is a number between 1 and N, where N is an integer.\n    Return the FIBNACI sequence in the Nth position, where n is the input.\n    \"\"\"\n    pass\n\n\ndef get_nth_fibonacci(n):\n    \"\"\" Input is a number between 1 and N, where N is an integer.\n    Return the FIBNACI sequence in the nth position.\n    \"\"\"\n    pass\n\n\ndef get_fibonacci_nth_recursive(n):\n    \"\"\" Input is a number between 1 and N, where N is an integer.\n    Return the FIBNACI sequence in the nth position, where n is the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     find_closest_elements([-2, 4, -1, 0, 1, 5, 8, 2]) == (-2, 3)\nassert     find_closest_elements([-2, 4, -1, 0, 1, 5, 8, 2]) == (4, -1)\nassert     find_closest_elements([-2, 4, -1, 0, 1, 5, 8, 2]) == (-2, 2)\nassert     find_closest_elements([-2, 4, -1, 0, 1, 5, 8, 2]) == (-2, 1)\nassert     find_closest_elements([-2, 4, -1, 0, 1, 5, 8, 2]) == (-1, 1)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     find_closest_elements([1,2,3,4,5]) == (1, 4), \"Closest number is: 1\"\nassert     find_closest_elements([5,4,3,2,1]) == (4, 5), \"Closest number is: 4\"\nassert     find_closest_elements([]) == (None, None), \"Closest number is: None\"\n\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     find_closest_elements([10, 15, 9, 5, 17]) == (12, 12)\nassert     find_closest_elements([10, 15, 9, 5, 17, 5, 5]) == (12, 12)\n\n\ndef find_median(numbers: List[float]) -> float:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return the median.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         find_closest_elements( [1,2,3,4,5] ) == (1,3)\nassert         find_closest_elements( [1,2,3,4,5,6,7,8] ) == (1,6)\nassert         find_closest_elements( [1,2,3,4,5,6,7,8,9] ) == (1,3)\nassert         find_closest_elements( [1,2,3,4,5,6,7,8,9,10,11,12,13,14] ) == (1,6)\nassert         find_closest_elements( [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] ) == (1,3)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\nprint(find_closest_elements([1, 4, 3, 2, 5, 1]))\nassert\nprint(find_closest_elements([3, 1, 4, 8, 6, 2, 3]))\nassert\n\ndef find_closest_elements_with_heap(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     find_closest_elements([1,2,3,4,5,6]) == (4.0, 5.0)\nassert     find_closest_elements([3,4,6,8]) == (4.0, 5.0)\nassert     find_closest_elements([]) == (None, None)\nassert     find_closest_elements([6]) == (6.0, 6.0)\nassert     find_closest_elements([]) == (None, None)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     find_closest_elements([]) == (0, 0)\nassert     find_closest_elements([-1, -2, 3]) == (3, -2)\nassert     find_closest_elements([1, 2, 4]) == (1, 3)\nassert     find_closest_elements([1, 4, 6, 9, 12]) == (1, 6)\nassert     find_closest_elements([-1, -2, -3]) == (1, 3)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     find_closest_elements([1,2,3,4,5,6,7,8]) == (4, 5)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9,10]) == (1, 9)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == (1, 9)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == (1, 9)\nassert     find_closest_elements([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == (1, 1)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     find_closest_elements([1, 0, 2, 3, 4, 6, 6, 6]) == (0, 2)\nassert     find_closest_elements([4, 4, 8, 2, 3, 2, 5, 4]) == (4, 5)\nassert     find_closest_elements([4, 4, 8, 4, 2, 3, 3, 5]) == (5, 4)\nassert     find_closest_elements([4, 4, 8, 4, 2, 4, 2, 5]) == (5, 4)\nassert     find_closest_elements([1, 1, 1, 1, 1]) == (1, 1)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     find_closest_elements([0.25, 0.5, 0.75, 1]) == (0.25, 1.25)\nassert     find_closest_elements([1, 2, 3, 4]) == (1, 2)\n\ndef find_closest_elements_fast(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     rescale_to_unit([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     rescale_to_unit([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     rescale_to_unit([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\nassert     rescale_to_unit([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\nassert     rescale_to_unit([1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1,1]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     rescale_to_unit([0.5, 0.5, 1, 1.5, 1.5]) == [0.5, 0.5, 1, 1.5, 1.5]\nassert rescale_to_unit([2, 0, 0.5, 0.5, 1]) == [0.5, 0.5, 1, 1.5, 1.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     rescale_to_unit([1,1,1,0,1]) == [0.5,0.25,0.25,0.25,0.5]\nassert     rescale_to_unit([0.5,0.25,0.25,0.25,0.5]) == [0.25,0.25,0.25,0.25,0.5]\nassert     rescale_to_unit([1,0,0,0,1]) == [0.5,0.25,0.25,0.25,0.5]\nassert     rescale_to_unit([0.5,1,0,0,0.5]) == [0.25,0.25,0.25,0.25,0.5]\nassert     rescale_to_unit([0.5,0.5,1,0,0.5]) == [0.25,0.25,0.25,0.25,0.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     rescale_to_unit(np.array([0, 1])) == [0.0, 0.5]\nassert     rescale_to_unit(np.array([0, 2])) == [0.0, 1.0]\nassert     rescale_to_unit(np.array([0, 3])) == [0.0, 2.0]\nassert     rescale_to_unit(np.array([0, 4])) == [0.0, 3.0]\nassert     rescale_to_unit(np.array([0, 5])) == [0.0, 4.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     rescale_to_unit([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     rescale_to_unit([0.1, 0.5, 1.0, 2.0, 3.0, 4.0]) == [0.1, 0.5, 1.0, 2.0, 3.0, 4.0]\nassert     rescale_to_unit([0.1, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0]) == [0.1, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0]\nassert     rescale_to_unit([0.1, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]) == [0.1, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     rescale_to_unit([0.0, 0.0]) == [0.0, 0.0]\nassert     rescale_to_unit([0.1, 0.0, 0.0]) == [0.1, 0.0, 0.0]\nassert     rescale_to_unit([0.0, 0.1, 0.0, 0.0]) == [0.0, 0.1, 0.0, 0.0]\nassert     rescale_to_unit([0.1, 0.1, 0.0, 0.0]) == [0.1, 0.1, 0.0, 0.0]\n\ndef add_all_ones(numbers: List[float]) -> List[float]:\n    \"\"\" Add all 1s to each number \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4, 5]) == [1, 1, 1, 1, 1]\nassert     rescale_to_unit([1, -1, 0, 0, 0]) == [1, 0, 0, 0, 0]\nassert     rescale_to_unit([1, 2, -3, 4, -5]) == [1, 1, 0, 0, 0]\nassert     rescale_to_unit([1, 2, -3, 4, -5]) == [1, 1, 1, 0, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     rescale_to_unit([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     rescale_to_unit([0, -1, 0, 0, 1, 0]) == [0, -1, 0, 0, 1, 0]\nassert     rescale_to_unit([0, -1, 0, 0, 0, 0]) == [0, -1, 0, 0, 0, 0]\nassert     rescale_to_unit([-2, -1, -1, -2, -1, -1]) == [-2, -1, -1, -2, -1, -1]\nassert     rescale_to_unit([-2, -1, -1, -2, -1, -1]) == [-2, -1, -1, -2, -1, -1]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     rescale_to_unit(['2.0', '4.0']) == ['2', '4']\nassert     rescale_to_unit([2.0, '4.0']) == ['2', '4']\nassert     rescale_to_unit([2, '4']) == ['2', '4']\nassert     rescale_to_unit([0.0, '4.0']) == ['4', '4']\nassert     rescale_to_unit([0.0, '4.0', '2.0']) == ['4', '2', '4']\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3]\nassert     filter_integers([0, 0]) == []\nassert     filter_integers([-1, 0, 3, 4, 5]) == []\nassert     filter_integers([5, 1, 2, 3, 4]) == [1, 2, 3]\nassert     filter_integers([5, 1, 2, 3, 4, 0]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     filter_integers([0,1,2,3,4,5]) == [0,1,2,3,4,5]\nassert     filter_integers([0,1,2,3,4,5,6,7]) == [0,1,2,3,4,5,6,7]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     filter_integers([]), \"Empty list\"\nassert     filter_integers([1, 2, 3])\nassert     filter_integers([1, 3, 5, 7, 9, 0])\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0])\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     filter_integers([\"1\", \"2\", \"3\"]) == [\"3\"]\nassert     filter_integers([1, 2, 3]) == [1, 2]\nassert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4]\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\ndef filter_strings(values: List[str]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     filter_integers([2,3,4,5]) == [3, 4, 5]\nassert     filter_integers([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert     filter_integers([True, True, True, True, True]) == [1, 2, 3, 4, 5]\nassert     filter_integers([True, False, True, True, True]) == [2, 3, 4, 5]\nassert     filter_integers([1, 2, 3, 4, 5, True, True, True]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     filter_integers([1,2,3,4]) == [1,2,3,4]\nassert     filter_integers([1,2,3,4,5]) == [1,2,3,4,5]\nassert     filter_integers([0,1,2,3,4,5]) == [0,1,2,3,4,5]\nassert     filter_integers([0,1,2,3,4,5,6]) == [0,1,2,3,4,5,6]\nassert     filter_integers([-1]) == [-1]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     filter_integers([1,2,3,4,5,6]) == [1,2,3,4,5]\nassert     filter_integers([1,2,3,4,5,6,7]) == [1,2,3,4,5]\nassert     filter_integers([]) == []\nassert     filter_integers([1,2,3,4,5,6]) == [1,2,3,4,5]\nassert     filter_integers([1,2,3,4,5,6,7]) == [1,2,3,4,5]\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     strlen(strlen(\"This is an example\"))\nassert strlen(\"Aaa\") == 4\nassert strlen(\"this\") == 0\nassert strlen(\"Aa\") == 0\nassert strlen(\"\") == 0\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         strlen('test') == 5\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef get_fastest(string: str) -> int:\n    \"\"\" Return length of given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     strlen(\"\")\nassert     strlen(\" \")\nassert     strlen(\"1234567890\")\nassert     strlen(\"1234567890.0\")\nassert     strlen(\" \" * 20)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     strlen('') == 0\nassert     strlen('123') == 1\nassert     strlen('12345') == 4\nassert     strlen('1') == 1\nassert     strlen('1abc') == 2\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     strlen('') == 0\nassert     strlen('asdf') == 1\nassert     strlen('ab') == 2\nassert     strlen('aa') == 3\nassert     strlen('abc') == 4\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef strfind(string: str, substr: str) -> int:\n    \"\"\" Return position of given substring in given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     strlen(\"1\") == 1\nassert     strlen(\"\") == 0\nassert     strlen(\"0\") == 0\nassert     strlen(\"a\") == 0\nassert     strlen(\"123\") == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     strlen(\"hello\")\nassert not     strlen(\"a\")\nassert not     strlen(\"b\")\nassert     strlen(\"aabbbb\")\nassert     strlen(\"AABAB\")\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     largest_divisor(12) == 12\nassert     largest_divisor(16) == 16\nassert     largest_divisor(4) == 4\nassert     largest_divisor(3) == 3\nassert     largest_divisor(2) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     largest_divisor(2) == 2\nassert     largest_divisor(5) == 5\nassert     largest_divisor(6) == 6\nassert     largest_divisor(13) == 13\nassert     largest_divisor(17) == 17\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef gcd(a, b):\n    \"\"\" GCD of a and b, using Euclid's algorithm\n    https://en.wikipedia.org/wiki/Euclid%27s_algorithm\n    \"\"\"\n    if a < b:\n        smaller = a\n        larger = b\n    else:\n        smaller = b\n        larger = a\n\n    for i in range(1, smaller):\n        if (larger % i) == 0:\n            # if we have found the gcd of two numbers, we return it\n            return i\n\n    return smaller\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     largest_divisor(14) == 14\nassert     largest_divisor(0) == 1\nassert     largest_divisor(2) == 2\nassert     largest_divisor(6) == 5\nassert     largest_divisor(12) == 13\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     largest_divisor(10) == 9\nassert     largest_divisor(19) == 19\nassert     largest_divisor(25) == 9\nassert     largest_divisor(40) == 9\nassert     largest_divisor(100) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     largest_divisor(10) == 2\n\nprint(\"Program Complete\""
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     largest_divisor(12) == 6\nassert     largest_divisor(24) == 9\nassert     largest_divisor(14) == 7\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     largest_divisor(20) == 6\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     factorize(2) == [1,2]\nassert     factorize(7) == [1,2,3,7]\nassert     factorize(12) == [1,2,3,4,6,12]\nassert     factorize(120) == [1,2,3,4,6,8,12]\nassert     factorize(34) == [1,3,6,34]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     factorize(24) == [1,3,5,7]\nassert     factorize(36) == [1,5,7]\nassert     factorize(51) == [1,3,5]\nassert     factorize(73) == [1,3,7]\nassert     factorize(10) == [1,3]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\nclass Solution:\n    def getFactors(self, n: int) -> List[List[int]]:\n        # you can use this method to get factorization\n        # or to get the factors of an integer\n        #\n        # you can use this method to get the factors of an integer in the order from smallest to largest\n        #\n        pass\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     factorize(5) == [1, 3, 5]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\n\ndef factors_of(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer.\n    Factors should be listed number of times corresponding to how many times it appeares in factorization.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     factorize(0) == []\nassert     factorize(1) == [1]\nassert     factorize(2) == [1, 2]\nassert     factorize(3) == [1, 3, 2]\nassert     factorize(4) == [1, 4, 3, 2]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     factorize(4) == [2, 2, 1, 1]\nassert     factorize(1) == [1]\nassert     factorize(0) == []\n\ndef comb(n: int, k: int) -> List[int]:\n    \"\"\"Return list of all factors of n that have k-th powers of their base.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2,2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [4,4,4]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3]) == [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     remove_duplicates([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]) == [1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, "
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     remove_duplicates([0,1,1,2,2,3]) == [0,1,3]\nassert     remove_duplicates([0,1,1,2,2,2,3,3,4]) == [0,1,2,3,4]\nassert     remove_duplicates([0,1,1,2,2,3,3,3,4]) == [0,1,2,3,4]\nassert     remove_duplicates([1,1,1,2,2,3,3,4,4,4,5,5,6,6,6]) == [1,2,3,4,5,6,6]\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    This removes the order of the elements as well.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         remove_duplicates([3, 1, 2, 2, 3]) == [3, 1, 2, 2]\nassert         remove_duplicates([2, 2, 2, 3, 3]) == [2, 2, 2]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     remove_duplicates([1,1,2,2,3,3,4,4,5,5,6]) == [1,2,3,4,5,6]\nassert     remove_duplicates([1,2,3,4,4,5]) == [1,2,3,4,5]\nassert     remove_duplicates([1,2,3,4,5,1]) == [1,2,3,4,5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     remove_duplicates([1, 1, 2]) == [1, 2]\nassert     remove_duplicates([1, 1, 1, 2]) == [1, 2]\nassert     remove_duplicates([1, 2, 2, 2, 2, 2, 2]) == [1, 2, 2, 2]\nassert     remove_duplicates([2, 2, 2, 2, 2, 2]) == [2, 2]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     remove_duplicates([1,1,2,2,3,3,3,4,4,5,5,5]) == [1,2,3,4,5,5]\nassert     remove_duplicates([2,2,2,3,3,3,4,4,4,5,5,5]) == [2,3,4,5,5]\nassert     remove_duplicates([1,1,2,3,3,4,4,4,5,5]) == [1,2,3,4,5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1,2,2,3]) == [1,2,3]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     remove_duplicates([1, 1, 1, 1, 2, 2, 2, 2, 3, 3]) == [1, 1, 1, 2, 2, 2, 3, 3]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == [1, 1, 1, 2, 2, 2, 3, 3]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 3]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == [1, 1, 1, 2, 2, 2, 2, 2, 2]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     remove_duplicates([1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef remove_duplicates2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     flip_case(\"test\") == \"TEST\"\nassert     flip_case(\"Test\") == \"TEST\"\nassert     flip_case(\"Mm\") == \"MM\"\nassert     flip_case(\"ma\") == \"ma\"\nassert     flip_case(\"Aa\") == \"aA\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     flip_case(\"Hi! My name is Luke.\") == \"duh gia\"\nassert     flip_case(\"this is a test.\") == \"TESTIS!\"\nassert     flip_case(\"Hiya!\") == \"HIYA!\"\nassert     flip_case(\"Hello World!\") == \"helloworld!\"\n\nif __name__ == \"__main__\":\n    pass"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     flip_case('a') == 'z'\nassert     flip_case('A') == 'Z'\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     flip_case(\"abcdef\") == \"bcdef\"\nassert     flip_case(\"AaBbCcDdEe\") == \"bCdEf\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\" \") == \" \"\nassert     flip_case(\"a1b2c3d4e\") == \"e4a3e2r\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     flip_case(\"aBc\") == \"AbC\"\nassert     flip_case(\"A1bC\") == \"1bC\"\nassert     flip_case(\"3a3bC\") == \"3bC\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"A\") == \"A\"\nassert     flip_case(\"a\") == \"a\"\nassert     flip_case(\"A\") == \"A\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     flip_case('the quick brown fox jumps over the lazy dog') == 'TIMIDQKRWWFJOMZBNQHY'\nassert     flip_case('Hello world') == 'HOLWOLRD'\n\nprint('All test cases passed'"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     flip_case(\"Aa\") == \"aA\"\nassert     flip_case(\"Hi\") == \"hI\"\nassert     flip_case(\"AaA\") == \"aaA\"\nassert     flip_case(\"AbCdEfGhHiJKLmNopqRstuWxYz\") == \"AbCdEfGhHiJKLmNopqRstuWxYz\"\n\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     flip_case(\"\") == \"\"\nassert     flip_case(\"AA\") == \"AA\"\nassert     flip_case(\"aa\") == \"Aa\"\nassert     flip_case(\"AaE\") == \"Ae\"\nassert     flip_case(\"AaEEE\") == \"AeE\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     flip_case(\"camel\") == \"CamelCase\"\nassert     flip_case(\"AbCdEfGhIjKlLmMnoP\") == \"MnoPcEfGhiIjKlLm\"\nassert     flip_case(\"NeXxDz\") == \"XDzNeX\"\nassert     flip_case(\"aBAcDEEfHijKlmO\") == \"HiEKlM\"\nassert     flip_case(\"WeAreE\") == \"WEARES\""
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcde\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"aabcde\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"aabcdeefgfedcba\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == \"aabcdegfgaegsbgg\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == \"aabcdegfgaegsbggkh\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     concatenate([\"a\", \"b\"]) == \"aabb\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"aabbcc\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"abcdefd\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"abcdefgfedcba\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     concatenate([\"one\", \"two\", \"three\"]) == \"onetwothree\"\nassert     concatenate([\"\", \"one\", \"two\", \"three\"]) == \"onetwothree\"\nassert     concatenate([\"one\", \"two\", \"three\"]) == \"onetwothree\"\nassert     concatenate([\"\", \"one\", \"two\", \"three\"]) == \"onetwothree\"\nassert     concatenate([\"one\", \"two\", \"three\"]) == \"onetwothree\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     concatenate([1, 2, 3]) == '123'\nassert concatenate([1, '2', 3]) == '123'\nassert concatenate(['A', 'B', 'C']) == 'A B C'\nassert concatenate([1, 2, 3, '4']) == '1 2 3 4'\n\ndef reverse(string):\n    return string[::-1]\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"ab\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"abdfe\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"aabdfe\"\n\ndef is_prime(num):\n    \"\"\" Check if a number is prime\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n\ndef is_prime_list(list_of_numbers: List[int]) -> List[bool]:\n    \"\"\" Check if a list of numbers is prime\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     concatenate([\"A\",\"B\"]) == \"AB\"\nassert     concatenate([\"A\",\"B\",\"C\"]) == \"ABC\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     concatenate([1,2,3]) == \"ab\"\nassert     concatenate([1,2,3,4,5]) == \"abdab\"\nassert     concatenate([6,7,8,9,10]) == \"aabbbbbbba\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     concatenate(['a','b','c','d']) == 'abc'\nassert     concatenate(['a','b','c','d']) == 'abcd'\nassert     concatenate(['a','b','c','d']) == 'abc'\nassert     concatenate(['a','b','c','d']) == 'a'\nassert     concatenate(['a','b','c','d']) == 'a'\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     concatenate([1,2,3]) == \"abc\"\nassert     concatenate([1,2,3])!= \"abc\"\nassert     concatenate([1,2,3])!= \"a\"\nassert     concatenate([]) == \"\"\n\n\ndef concatenate_char(string: str, char: str) -> str:\n    \"\"\" Concatenate a string of chars to a string\n    \"\"\"\n    return string + char\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     concatenate(['']) == ''\nassert     concatenate([''], ['']) == ''\nassert     concatenate([1,2,3]) == '123'\nassert     concatenate([1,'a',2,3]) == '123a2'\nassert     concatenate([1,'a',2,3]) == '123a2a'\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef filter_by_alias(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings by their alias.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\n    'abra ',\n    'abra ',\n    'bruca ',\n    'bruca ',\n    'broco ',\n    'bruco ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce '], 'bruca ')\nassert     filter_by_prefix([\n    'abra ',\n    'abra ',\n    'bruca ',\n    'bruca ',\n    'broco ',\n    'broco ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce '], 'bruca ')\nassert     filter_by_prefix([\n    'abra ',\n    'abra ',\n    'bruca ',\n    'bruca ',\n    'broco ',\n    'broco ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce '], 'croce ')\nassert     filter_by_prefix([\n    'abra ',\n    'abra ',\n    'bruca ',\n    'bruca ',\n    'broco ',\n    'broco ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce '], 'croce ')\nassert     filter_by_prefix([\n    'abra ',\n    'abra ',\n    'bruca ',\n    'bruca ',\n    'broco ',\n    'broco ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce ',\n    'croce '], 'bruca ')\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"o\") == [\"hello\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"ee\") == [\"hello\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"llo\") == [\"hello\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"eello\") == [\"hello\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"world\"], \"hell\") == [\"hello\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         filter_by_prefix([\"hello\", \"goodbye\", \"world\"], \"bye\") == [\"goodbye\", \"hello\"]\nassert         filter_by_prefix([\"hello\", \"goodbye\", \"world\"], \"world\") == [\"goodbye\", \"hello\"]\nassert         filter_by_prefix([\"hello\", \"goodbye\", \"world\"], \"goodbye\") == [\"goodbye\", \"hello\"]\nassert         filter_by_prefix([\"hello\", \"goodbye\", \"world\"], \"world\") == [\"world\", \"goodbye\"]\nassert         filter_by_prefix([\"hello\", \"goodbye\", \"world\"], \"goodbye\") == [\"goodbye\", \"hello\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     filter_by_prefix([], \"\") == []\nassert     filter_by_prefix([], \"1\") == []\nassert     filter_by_prefix([], \"22\") == []\nassert     filter_by_prefix([], \"01\") == []\nassert     filter_by_prefix([], \"001\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"abc\", \"bcd\", \"abcde\", \"bcdef\"], \"bcde\") == [\"bcde\"]\nassert     filter_by_prefix([\"abc\", \"bcd\", \"abcde\", \"bcdef\"], \"def\") == [\"abc\", \"def\"]\nassert     filter_by_prefix([\"abc\", \"bcd\", \"abcde\", \"bcdef\"], \"\") == [\"\"]\nassert     filter_by_prefix([\"abc\", \"bcd\", \"abcdef\", \"bcdef\"], \"abc\") == [\"abc\"]\nassert     filter_by_prefix([\"abc\", \"bcd\", \"abcdef\", \"bcdef\"], \"def\") == [\"abc\", \"def\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     filter_by_prefix([\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == [\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\nassert     filter_by_prefix([\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == [\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\nassert     filter_by_prefix([\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == [\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\nassert     filter_by_prefix([\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == [\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\nassert     filter_by_prefix([\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == [\"hello\", \"goodbye\", \"123456789\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     filter_by_prefix([\"1\", \"2\", \"3\"], \"3\") == [\"2\", \"3\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\"], \"3\") == [\"5\", \"4\", \"3\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\"], \"4\") == [\"4\", \"5\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"], \"5\") == [\"6\", \"7\", \"8\"]\nassert     filter_by_prefix([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"], \"6\") == [\"7\", \"8\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     filter_by_prefix(['my', 'prefix', 'is', 'good'], 'is') == ['good']\nassert     filter_by_prefix(['my', 'prefix', 'is', 'good', 'taste', 'is', 'good'], 'is') == ['good', 'taste']\nassert     filter_by_prefix(['my', 'prefix', 'is', 'good', 'taste', 'is', 'good', 'tastefan'], 'is') == ['tastefan']\nassert     filter_by_prefix(['my', 'prefix', 'is', 'good', 'taste', 'is', 'good', 'tastefan', 'is', 'good', 'taste'], 'is') == ['good', 'taste']\nassert     filter_by_prefix(['my', 'prefix', 'is', 'good', 'taste', 'is', 'good', 'tastefan', 'is', 'good', 'taste', 'is', 'good'], 'is') == ['tastefan']\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     filter_by_prefix
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     (get_positive([1, 3, 5, 2, -5, 4, 9, 6])) == [1, 2, 3, 4, 5, 6]\nassert     (get_positive([5, 2, -5, 4, 9, 6])) == [5, 2, -5, 4, 9, 6]\nassert     (get_positive([3, 6, 9, -5])) == [3, 6, 9, -5]\nassert     (get_positive([])) == []\nassert     (get_positive([])) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5]\nassert get_positive([]) == []\nassert get_positive([1, 2, 3]) == [3]\nassert get_positive([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     get_positive([2, 3, 4, 5, 6, 7]) == 5\nassert get_positive([1, 5, 2]) == 4\nassert get_positive([3, 3, 6, 5]) == 4\nassert get_positive([7, 6, 5]) == 6\nassert get_positive([7, 5, 6]) == 6\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     get_positive([1, 2, 3, 4, 5]) == [1, 3, 4]\nassert     get_positive([0, 2, 3, 4, 5]) == [2, 4]\nassert     get_positive([1, 2, 3, 2, 2]) == [1, 2, 3, 2]\nassert     get_positive([1, 2, 3, 2, 5]) == [1, 2, 3, 2, 5]\nassert     get_positive([1, 2, 3, 2, 0]) == [1, 2, 3, 2, 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     get_positive([\"-\"]) == []\nassert get_positive([\"+\"]) == []\nassert get_positive([\"1\"]) == []\nassert get_positive([\"2\"]) == []\nassert get_positive([\"3\"]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     get_positive([-1, 0, 1, 2]) == [0, 1, 2]\nassert     get_positive([3, 4, -5, 2]) == [3, 4, -5]\nassert     get_positive([0, 0, 0]) == []\nassert     get_positive([1, 1, 1]) == [1]\nassert     get_positive([1, 0, 1]) == [1]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     get_positive(1, 2, 3, 4, 5, 6, 7, 8, 9) == 1\nassert     get_positive(1, 1) == 1\nassert     get_positive(1, 0) == 0\nassert     get_positive(1, 6) == 0\nassert     get_positive(1, 9) == 0\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     get_positive([2, 3, 4, 5, 6, 7, 8, 9]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     get_positive([]) == 0\nassert     get_positive([1]) == 1\nassert     get_positive([1,2,3]) == 1\nassert     get_positive([1,2,3,4,5]) == 5\nassert     get_positive([1,2,3,5,6,7]) == 1\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_prime(3) == True\nassert     is_prime(8) == True\nassert     is_prime(9) == True\nassert     is_prime(25) == False\nassert     is_prime(25) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_prime(1) == True\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == True\nassert     is_prime(5) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_prime(2)\nassert     is_prime(3)\nassert     is_prime(4)\nassert     is_prime(5)\nassert     is_prime(8)\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_prime(20) == True\nassert     is_prime(10) == True\nassert     is_prime(0) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == False\nassert     is_prime(4) == True\nassert     is_prime(5) == False\nassert     is_prime(6) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_prime(3) is False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_prime(6)\nassert not is_prime(6.5)\nassert is_prime(2)\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_prime(2) == True\nassert is_prime(7) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == False\nassert     is_prime(4) == True\nassert     is_prime(5) == False\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     find_zero([1, 0, 1, 2]) == 0.5\nassert     find_zero([1, 0, 2, 0, 2]) == 2.0\nassert     find_zero([1, 2, 0, 2, 1]) == 2.0\n\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     find_zero([-2, -1, 0, 1, 2]) == -2\nassert     find_zero([-1, 2, 3, 4, 5]) == -1\nassert     find_zero([1, 2, 3, 4, 5]) == 1\nassert     find_zero([-1, 2, 3, 4, 5]) == 2\nassert     find_zero([-3, -3, -3]) == -3\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     find_zero([1, 1, 1]) == 0.0\nassert     find_zero([1, 2, 2]) == 2.0\nassert     find_zero([2, 2, 2]) == 4.0\nassert     find_zero([3, 3, 3]) == 3.0\nassert     find_zero([4, 4, 4]) == 6.0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     find_zero([1, 2, 4]) == 4\nassert     find_zero([-1, 2, 0]) == 1\nassert     find_zero([1, 2, 4, 1]) == 0\nassert     find_zero([1, 2, 4, -1]) == 2\nassert     find_zero([-1, 2, 0, 0]) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     find_zero([1, 1, 2]) == 0\nassert     find_zero([1, 2, 3]) == 0\nassert     find_zero([1, 2, 3, 4]) == 0\nassert     find_zero([1, 2, 3, 4, 5]) == 0\nassert     find_zero([1, 2, 3, 4, 5, 6]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     find_zero([1, 1, 1, 0]) == 0\nassert     find_zero([1, 2, 1, 0]) == 1\nassert     find_zero([0, 0, 0, 2]) == 1\nassert     find_zero([2, 1, 2, 1]) == 2\nassert     find_zero([0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \nassert find_zero([0, 0, 0, 0]) is 0\nassert find_zero([0, 0, 1, 2]) is 0\nassert find_zero([0, 0, 1, 0]) == 0\nassert find_zero([0, 0, 1, 1]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     find_zero([1,1,1,0,0,0,0]) == 1\nassert     find_zero([1,1,1,0,0,0,0]) == 0\nassert     find_zero([0,0,1,0]) == 0\nassert     find_zero([1,0,0,1,0]) == 0\nassert     find_zero([0,1,0,0,1]) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     find_zero([]) == 0.0\nassert     find_zero([1]) == 1.0\nassert     find_zero([2, 3, 4, 5, 6]) == 10.0\nassert     find_zero([2, 3, 4, 5, 6, 7]) == 7.0\nassert     find_zero([-3, -2, -1, -4]) == -2.0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     poly(xs=[2, 5, 2], x=2) == 1\nassert     poly(xs=[2, 5, 2], x=3) == 0\nassert     poly(xs=[2, 5, 2], x=4) == 0\nassert     poly(xs=[2, 5, 2], x=5) == 0\nassert     poly(xs=[2, 5, 2], x=6) == 0\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 5, 10, 11, 2, 3, 6, 7, 8, 9, 4]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 5, 10, 2, 3, 4, 7, 6, 8, 9, 10]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 5, 10, 2, 3, 4, 7, 6, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_third([]) == []\nassert     sort_third([1, 3]) == [1, 3]\nassert     sort_third([1, 3, 2]) == [1, 2, 3]\nassert     sort_third([1, 3, 2, 5]) == [1, 2, 3, 5]\nassert     sort_third([1, 3, 2, 4]) == [1, 3, 2, 4]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert sort_third([1, 3, 2]) == [1, 3, 2]\nassert sort_third([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert sort_third([]) == []\nassert sort_third([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sort_third([2, 3, 4, 4, 5, 5, 6, 6, 6, 7]) == [2, 4, 5, 6, 7, 6, 7, 8, 9, 10]\nassert     sort_third([2, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9]) == [2, 4, 5, 6, 7, 6, 7, 8, 9, 10]\nassert     sort_third([3, 1, 2, 6, 6, 7, 7, 7, 8, 9, 9, 10]) == [1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 9, 10]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sort_third([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10], \"Sort the third element of a list\"\nassert     sort_third([3,2,1,5,6,7,8]) == [1,2,3,5,6,7,8], \"Sort the third element of a list\"\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13], \"Sort the third element of a list\"\nassert     sort_third([2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], \"Sort the third element of a list\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sort_third(['a', 'b', 'a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e', 'a', 'b']\n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_third([1, 5, 2, 4, 6, 7, 3, 5, 8, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     sort_third([5, 1, 2, 4, 3]) == [1, 2, 3, 4, 5]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     sort_third([4, 2, 1, 5, 3, 6, 8, 7, 10, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     sort_third([1, 5, 2, 4, 6, 7, 3, 5, 8, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sort_third([1,2,4,5,7,8,10,11]) == [1, 2, 5, 7, 8, 10, 11, 12]\nassert     sort_third([]) == []\nassert     sort_third([1]) == [1]\nassert     sort_third([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     unique(['abc', 'a', 'bc', 'c', 'a', 'b', 'c', 'c', 'b']) == ['a', 'b', 'c', 'c', 'b', 'a']\nassert     unique([1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3]) == [1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3]\nassert     unique([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     unique(list2) == list2, \"The list2 does not contain any unique elements.\"\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     unique([\"one\", \"two\", \"three\"]) == [\"two\", \"three\", \"one\"]\nassert     unique([\"one\", \"one\", \"one\", \"one\"]) == [\"one\", \"one\", \"one\", \"one\"]\nassert     unique([\"one\", \"one\", \"one\", \"two\", \"one\", \"one\"]) == [\"one\", \"one\", \"one\", \"one\", \"one\", \"one\"]\nassert     unique([\"one\", \"one\", \"one\", \"two\", \"three\", \"two\", \"one\", \"one\"]) == [\"one\", \"one\", \"one\", \"one\", \"one\", \"one\", \"one\", \"two\"]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     unique([\"a\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]\nassert     unique([\"a\",\"b\",\"d\",\"e\"]) == [\"a\",\"b\",\"d\",\"e\"]\nassert     unique([\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\",\"a\",\"b\"]\nassert     unique([\"a\",\"b\",\"c\",\"a\",\"b\",\"d\"]) == [\"a\",\"b\",\"c\",\"a\",\"b\"]\nassert     unique([\"a\",\"b\",\"c\",\"d\",\"a\",\"a\"]) == [\"a\",\"b\",\"c\",\"d\"]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 2, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 2, 3, 2, 4, 4]) == [1, 2, 3, 4]\nassert     unique([2, 2, 4, 2, 2, 4, 2, 4, 2, 2, 4, 2, 4, 2]) == [2, 2, 4, 2, 2, 4, 2, 4, 2, 2, 4, 2, 4, 2]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     unique([1,1,2,2,3,3,3]) == [1,2,3]\nassert     unique([1,1,1,1,2,2,2,2,3]) == [1,1,2,2,3]\nassert     unique([1,1,1,1,1,1,1]) == [1,1,1]\nassert     unique([1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1]\nassert     unique([1,1,1,1,1,1,1,1]) == [1,1,1,1,1]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     unique([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     unique(['a', 'b', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', "
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     unique([\"a\",\"b\",\"b\",\"c\"]) == [\"b\",\"a\"]\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         max_element([1,2,3,4,5,6,7,8,9,10]) == 7\nassert         max_element([1,2,3,4,5,6,7,8,9,10,11,12]) == 10\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     max_element( [1, 2, 3, 4, 5] ) == 5, \"max_element should return 5\"\nassert     max_element([1, 2, 3, 4, 5]) == 5, \"max_element should return 5\"\nassert     max_element([5, 5, 5, 5, 5]) == 5, \"max_element should return 5\"\n\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     max_element([]) == 0\nassert     max_element([1,2,3]) == 3\nassert     max_element([1,2,3,5,7,8,4,1,2,6,3,4]) == 7\nassert     max_element([1,2,3,5,7,8,4,1,2,6,3,4]) == 7\nassert     max_element([]) == 0\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     max_element([]) == None\nassert     max_element([-3]) == -3\nassert     max_element([-6, -5, -4, -3, 0, 1, 5, 6]) == 5\nassert     max_element([0, 1, -2, -3]) == -2\nassert     max_element([]) == -3\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     max_element([\"1\",\"2\",\"3\",\"4\"]) == \"4\"\nassert     max_element([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"5\"\nassert     max_element([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == \"6\"\nassert     max_element([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"]) == \"7\"\nassert     max_element([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]) == \"8\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     max_element([]), \"No element in a list\"\nassert     max_element([0,1,2]), \"No element in a list\"\nassert     max_element([1,2,3,4,5,6]), \"No element in a list\"\nassert     max_element([2,4,6,8,10]), \"No element in a list\"\nassert     max_element([3,4,5,6]), \"No element in a list\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     max_element([]) == 0\nassert     max_element([1]) == 1\nassert     max_element([1,2,3]) == 3\nassert     max_element([1,2,3,4]) == 4\nassert     max_element([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     max_element([1, 2, 3]) == 3\nassert     max_element([]) == None\nassert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([1, 2, 3, 3, 4]) == 4\nassert     max_element([1, 2, 3, 1, 4]) == 4\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fizz_buzz(15) == 5\nassert     fizz_buzz(11) == 2\nassert     fizz_buzz(2) == 1\nassert     fizz_buzz(4) == 0\nassert     fizz_buzz(30) == 9"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fizz_buzz(1) == 0\nassert     fizz_buzz(2) == 0\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(4) == 0\nassert     fizz_buzz(5) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     fizz_buzz(10) == 2\nassert     fizz_buzz(15) == 3\nassert     fizz_buzz(17) == 4\nassert     fizz_buzz(23) == 5\nassert     fizz_buzz(67) == 6\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     fizz_buzz(5) == 0\nassert     fizz_buzz(4) == 1\nassert     fizz_buzz(3) == 2\nassert     fizz_buzz(2) == 3\nassert     fizz_buzz(1) == 4\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     fizz_buzz(0) == 0\nassert     fizz_buzz(1) == 1\nassert     fizz_buzz(2) == 1\nassert     fizz_buzz(3) == 1\nassert     fizz_buzz(4) == 2\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     fizz_buzz(2) == 1\nassert     fizz_buzz(4) == 3\nassert     fizz_buzz(16) == 1\nassert     fizz_buzz(32) == 3\nassert     fizz_buzz(64) == 4\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fizz_buzz(0) == 0\nassert     fizz_buzz(1) == 1\nassert     fizz_buzz(3) == 1\nassert     fizz_buzz(5) == 2\nassert     fizz_buzz(7) == 3\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fizz_buzz(3) == 3\nassert     fizz_buzz(7) == 5\nassert     fizz_buzz(11) == 3\nassert     fizz_buzz(13) == 5"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fizz_buzz(42) == 5\nassert     fizz_buzz(35) == 6\nassert     fizz_buzz(67) == 4\nassert     fizz_buzz(126) == 0"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_even([1, 4, 5, 2, 3, 6, 7, 8]) == [3, 4, 5, 6, 7, 8, 1, 2]\nassert     sort_even([1, 4, 5, 2, 3, 6, 7, 8, 9]) == [1, 4, 5, 6, 7, 8, 9, 2]\nassert     sort_even([1, 4, 5, 2, 3, 6, 7, 8, 9, 10]) == [1, 4, 5, 6, 7, 8, 9, 10, 2]\nassert     sort_even([1, 4, 5, 2, 3, 6, 7, 8, 9, 10, 11]) == [1, 4, 5, 6, 7, 8, 9, 10, 11, 2]\n\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     sort_even([5, 3, 1, 2, 4]) == [1, 2, 3, 4, 5]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     sort_even([]) == []\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([1,3,5]) == [1,3,5]\nassert     sort_even([3,5,1]) == [1,3,5]\nassert     sort_even([1,3,5,6]) == [1,3,5,6]\nassert     sort_even([9,8,7,1,3]) == [1,3,5,8,9]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_even([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_even([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_even([]) == []\nassert     sort_even([6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sort_even([1, 4, 2, 5, 3]) == [1, 3, 5, 4, 2]\nassert     sort_even([2, 1, 3, 4, 5]) == [2, 1, 3, 4, 5]\nassert     sort_even([]) == []\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sort_even([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 6, 2, 4]\nassert     sort_even([]) == []\nassert     sort_even([1, 2, 3, 4, 5]) == [1, 3, 5, 4, 2]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 4, 2, 7, 6, 8, 9]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 4, 2, 7, 6, 8, 9, 10]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([5, 1, 4, 2, 0]) == [0, 1, 2, 3, 4]\nassert     sort_even([3, 2, 1, 5, 7]) == [1, 3, 2, 5, 7]\nassert     sort_even([4, 3, 2, 1, 5]) == [1, 2, 3, 4, 5]\nassert     sort_even([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_even(['a', 'b', 'c', 'd']) == ['c', 'd', 'a', 'b']\nassert     sort_even(['a', 'c', 'b', 'd']) == ['a', 'c', 'b', 'd']\nassert     sort_even(['a', 'c', 'b', 'd', 'f', 'g']) == ['f', 'g', 'd', 'b', 'a', 'c']\nassert     sort_even(['a', 'c', 'b', 'd', 'e', 'f', 'g']) == ['e', 'f', 'g', 'b', 'a', 'c']\nassert     sort_even(['a', 'c', 'b', 'd', 'e', 'f', 'g', 'h']) == ['f', 'h', 'g', 'b', 'a', 'c']\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [5, 4, 3, 2, 1, 6, 7, 8]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     decode_cyclic(\"a\") == \"aa\"\nassert     decode_cyclic(\"bb\") == \"b\"\nassert     decode_cyclic(\"zzzzzzzzzz\") == \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     decode_cyclic(\"XD#\", encode_cyclic) == \"X#\"\nassert     decode_cyclic(\"#XD#\", encode_cyclic) == \"XD#\""
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     decode_cyclic('aaabaa') == 'aaab'\nassert     decode_cyclic('abab') == 'abab'\nassert     decode_cyclic('aabbcc') == 'babcc'\n\n\ndef distance_1(start: str, end: str):\n    \"\"\"\n    Returns distance between 2 strings.\n    \"\"\"\n    # find start and end index\n    start_index = 0\n    end_index = len(end) - 1\n    for i in range(len(start)):\n        if start[i] == end[i]:\n            start_index = i\n            end_index = i\n        elif start[i]!= end[i]:\n            break\n    \n    # get length of substrings of start and end.\n    length = 0\n    i = start_index\n    while i < end_index:\n        if start[i] == end[i]:\n            length += 1\n        else:\n            i += 1\n            length += 1\n            \n    # return length of substrings\n    return len(start) - 2 * length + len(end)\n\ndef distance_2(start: str, end: str):\n    \"\"\"\n    Returns distance between 2 strings.\n    \"\"\"\n    # find start and end index\n    start_index = 0\n    end_index = len(end) - 1\n    for i in range(len(start)):\n        if start[i] == end[i]:\n            start_index = i\n            end_index = i\n        elif start[i]!= end[i]:\n            break\n    \n    # get length of substrings of start and end.\n    length = 0\n    i = start_index\n    while i < end_index:\n        if start[i] == end[i]:\n            length += 1\n        else:\n            i += 1\n            length += 1\n            \n    # return length of substrings\n    return len(start) - 2 * length + len(end)\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     encode_cyclic(\"AAAAAAAAAAAAAAAAAAAA\") == \"AAAAAAAAAAAAAAAAAAAA\"\nassert     encode_cyclic(\"AAAAAAAAAAAAAAAAAAAA\") == \"AAAAAAAAAAAAAAAAAAAA\"\nassert     encode_cyclic(\"AAAAAAAAAAAAAAAAAAAA\") == \"AAAAAAAAAAAAAAAAAAAA\"\nassert     encode_cyclic(\"AAAAAAAAAAAAAAAAAAAA\") == \"AAAAAAAAAAAAAAAAAAAA\"\nassert     encode_cyclic(\"AAAAAAAAAAAAAAAAAAAA\") == \"AAAAAAAAAAAAAAAAAAAA\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     decode_cyclic(\"\") == \"\"\nassert     decode_cyclic(\"abc\") == \"abc\"\nassert     decode_cyclic(\"ggggg\") == \"ggggg\"\nassert     decode_cyclic(\"gggggg\") == \"gggggg\"\nassert     decode_cyclic(\"ggggggg\") == \"ggggggg\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     decode_cyclic(\"zxrcy\") == \"qwxr\"\nassert     decode_cyclic(\"qwxr\") == \"zx\"\nassert     decode_cyclic(\"qxqy\") == \"qwxy\"\nassert     decode_cyclic(\"qxrz\") == \"qwxyz\"\nassert     decode_cyclic(\"qx\") == \"qx\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     decode_cyclic(\"aa\") == \"aa\"\nassert     decode_cyclic(\"ddd\") == \"dee\"\nassert     decode_cyclic(\"dddee\") == \"dddee\"\nassert     decode_cyclic(\"ddddd\") == \"ddddd\"\nassert     decode_cyclic(\"aaeeeee\") == \"aaeee\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     decode_cyclic(\"tbccccctctttt\") == \"tbccccctctttt\"\nassert     decode_cyclic(\"aabbccddddeeeeeeeeeeeeeeeeeeeeeee\") == \"aabbccddddeeeeeeeeeeeeeeeeeeeeeee\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     (encode_cyclic('ababcc') == 'ababcc')\nassert     (encode_cyclic('cafedcbce') == 'cafedcbce')\nassert     (encode_cyclic('fddddd') == 'fddddd')\nassert     (encode_cyclic('a') == 'a')\nassert     (encode_cyclic('acacb') == 'acacb')\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     decode_cyclic(encode_cyclic(\"xyz\")) == \"zyx\"\nassert     decode_cyclic(encode_cyclic(\"zbv\")) == \"bvz\"\nassert     decode_cyclic(encode_cyclic(\"zxz\")) == \"xzxz\"\n\n\ndef count_occurrences(s: str):\n    \"\"\"\n    returns the number of occurrences of s.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return len([1 for group in groups if set(group).isdisjoint(set(group))])"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         prime_fib(5) == 2\nassert         prime_fib(6) == 3\nassert         prime_fib(7) == 3\nassert         prime_fib(8) == 5\nassert         prime_fib(9) == 7\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     prime_fib(7) == 5\n\nprint(prime_fib(7))"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     prime_fib(14)==[1,2,3,5,8,13,21,34,53,71,84,100]\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     prime_fib(2) == 2\nassert     prime_fib(3) == 3\nassert     prime_fib(4) == 4\nassert     prime_fib(5) == 5\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     prime_fib(7) == True\nassert     prime_fib(15) == True\nassert     prime_fib(25) == False\nassert     prime_fib(0) == True\n\ndef test_prime_fib():\n    # test check of prime_fib for n=0\n    "
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     prime_fib(10) == 2\nassert     prime_fib(20) == 3\n\ndef is_prime(x: int):\n    \"\"\"\n    is_prime checks if x is a prime number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     prime_fib(1) == 1\nassert     prime_fib(10) == 55\nassert     prime_fib(20) == 120\nassert     prime_fib(100) == 55\nassert     prime_fib(1000) == 12197\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     prime_fib(1) == 1\nassert     prime_fib(2) == 1\nassert     prime_fib(3) == 1\nassert     prime_fib(4) == 2\nassert     prime_fib(5) == 3\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     prime_fib(2) == 0\nassert     prime_fib(3) == 1\nassert     prime_fib(4) == 1\nassert     prime_fib(5) == 2\nassert     prime_fib(6) == 3\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([-2, -3, 1, 0, -3]) == True\nassert     triples_sum_to_zero([-3, 1, 0, -2, 1, -3, 3, 0, 0]) == True\nassert     triples_sum_to_zero([-3, 1, 0, -2, 1, -3, 3, 0, 0]) == False\n\n\n\ndef odd_even(l: list) -> list:\n    \"\"\"\n    odd_even takes a list of integers as an input.\n    it returns a new list, even if there are two distinct elements in the list\n    that sum to an even number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero(TESTS_INPUT) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([0, 0, 0, 3, 4]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0, 0, 0]) == False\nassert     triples_sum_to_zero([1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1]) == True\nassert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([-1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([1, 1, 0, 0, 2, 3]) == False, \"triples_sum_to_zero: Incorrect input\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([0, 1, 2]) == True\nassert     triples_sum_to_zero([3, 3, 3]) == False\n\ndef print_triples_sum_to_zero(l: list):\n    \"\"\"\n    print_triples_sum_to_zero takes a list of integers as an input.\n    Prints the sum of the first 3 integers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([]) is False\nassert     triples_sum_to_zero([1, 3, 5]) is True\nassert     triples_sum_to_zero([1, 2, 3]) is False\nassert     triples_sum_to_zero([1, 1, 1]) is True\nassert     triples_sum_to_zero([-2, 1, -2]) is False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([0,1,2,0,0,0,0,1,2,0,0]) == True\nassert     triples_sum_to_zero([0,1,2,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,1,2]) == False"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert     triples_sum_to_zero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         triples_sum_to_zero([1, 2, 3]) == False\nassert         triples_sum_to_zero([2, 2]) == False\nassert         triples_sum_to_zero([4, 5]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([]) == True\nassert     triples_sum_to_zero([1]) == False\nassert     triples_sum_to_zero([1, 2, 3]) == False\nassert     triples_sum_to_zero([1, 2, 0]) == True\nassert     triples_sum_to_zero([1, 3, 2]) == True\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     car_race_collision(3) == 1\nassert car_race_collision(1) == 1\nassert car_race_collision(5) == 1\nassert car_race_collision(4) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     car_race_collision(20) == 0\nassert car_race_collision(30) == 2\nassert car_race_collision(40) == 3\nassert car_race_collision(50) == 3\nassert car_race_collision(100) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         car_race_collision(2) == 1\nassert         car_race_collision(3) == 2\nassert         car_race_collision(4) == 2\nassert         car_race_collision(5) == 2\nassert         car_race_collision(6) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef car_race_collision_test():\n    \"\"\"\n    >>> car_race_collision_test()\n    0\n    \"\"\"\n    pass\n\n\n\ndef cars_killed(n: int):\n    \"\"\"\n    >>> cars_killed(7)\n    7\n    \"\"\"\n    pass\n\n\ndef cars_be_killed(n: int):\n    \"\"\"\n    >>> cars_be_killed(4)\n    3\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     car_race_collision(0) == 0\nassert car_race_collision(1) == 1\nassert car_race_collision(2) == 1\nassert car_race_collision(3) == 1\nassert car_race_collision(4) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     car_race_collision(5) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     car_race_collision(10) == 0\nassert car_race_collision(10) == 0\nassert car_race_collision(11) == 1\nassert car_race_collision(12) == 1\nassert car_race_collision(13) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     (car_race_collision(3) == 3)\nassert     (car_race_collision(4) == 0)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     car_race_collision(2) == 1, \"It's not a straight line.\"\nassert car_race_collision(3) == 2, \"It's not a straight line.\"\nassert car_race_collision(4) == 1, \"It's not a straight line.\"\nassert car_race_collision(5) == 2, \"It's not a straight line.\"\nassert car_race_collision(6) == 1, \"It's not a straight line.\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     car_race_collision(3) == 1\nassert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 2\nassert     car_race_collision(4) == 3\nassert     car_race_collision(5) == 4\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     incr_list([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]\nassert     incr_list([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\ndef main():\n    \"\"\"Program main.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     incr_list( [1, 2, 3, 4, 5] ) == [1, 3, 6, 10, 15]\nassert     incr_list( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\nprint( \"Congratulations! You've completed this challenge successfully!\" )"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     incr_list([1, 2, 3, 4]) == [2, 3, 5, 6]\nassert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list(['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     incr_list([5]) == [5]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     incr_list([1, 2, 3, 4]) == [1, 3, 6, 10]\nassert     incr_list([5, 10, 15, 20, 25]) == [5, 15, 20, 25, 30]\nassert     incr_list([]) == []\nassert     incr_list([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     incr_list([5, 10, 15, 20, 25, 30, 35, 40, 50]) == [5, 10, 15, 20, 25, 30, 35, 40, 50, 55]"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     incr_list([]) == []\nassert incr_list([1]) == [1]\nassert incr_list([1, 2]) == [1, 2]\nassert incr_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert incr_list([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     incr_list([1, 2, 3, 4]) == [1, 3, 6, 10]\nassert     incr_list([3, 4, 5, 6]) == [3, 4, 5, 6]\nassert     incr_list([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     incr_list([1, 2, 3]) == [1, 3, 4]\nassert     incr_list([4, 5, 6]) == [4, 5, 6, 7]\nassert     incr_list([]) == []\nassert     incr_list(None) == []\nassert     incr_list(['hello', 'world', '!']) == ['hello', 'world', '!']\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     incr_list([1,2,3]) == [1,2,4]\nassert     incr_list([]) == []\nassert     incr_list([3]) == [3]\nassert     incr_list([5,3]) == [5,6,3]\nassert     incr_list([5,4,3]) == [5,5,4,3]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     incr_list([1,2,3]) == [1,2,4]\nassert     incr_list([5,1,4,3,2]) == [5,6,7,8,9]\nassert     incr_list([]) == []\nassert     incr_list(()) == ()\nassert     incr_list([5,6,7,8,9,4,3,2,1]) == [5,6,7,8,9,9,9,9,9]\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1, 2, 1, 2, 2, 3, 4, 5]) == True, \"test failed\"\nassert     pairs_sum_to_zero([1, 1, 4, 3, 5, 7]) == True, \"test failed\"\nassert     pairs_sum_to_zero([0, 0, 0]) == False, \"test failed\"\nassert     pairs_sum_to_zero([0, 0, 2]) == False, \"test failed\"\nassert     pairs_sum_to_zero([0, 0, 1, 0]) == False, \"test failed\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([2, 3, 4, 6, 5, 7]) == False\nassert pairs_sum_to_zero([0, 3, 4, 5, 6, 7]) == True\nassert pairs_sum_to_zero([2, 2, 3]) == True\nassert pairs_sum_to_zero([]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([1,2,4,5,8]) == True, \"pairs_sum_to_zero_test_failed\"\nassert     pairs_sum_to_zero([1,2,3,4,5]) == True, \"pairs_sum_to_zero_test_failed\"\nassert     pairs_sum_to_zero([-2,0,-6,0,0]) == False, \"pairs_sum_to_zero_test_failed\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero([1,2,3,5]) is False\nassert     pairs_sum_to_zero([1,5,3,2,1]) is True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,5]) == True, \"pairs_sum_to_zero() failed\"\nassert     pairs_sum_to_zero([1,2,3,4,6]) == False, \"pairs_sum_to_zero() failed\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == True\nassert     pairs_sum_to_zero([1, 4, 5, 6, 7]) == False\nassert     pairs_sum_to_zero([1, 3, 4, 5, 6]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 1]) == False\nassert     pairs_sum_to_zero([1, 1, 1]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([]) == True\nassert     pairs_sum_to_zero([1]) == True\nassert     pairs_sum_to_zero([1,2,3]) == False\nassert     pairs_sum_to_zero([2,2,2]) == True\nassert     pairs_sum_to_zero([1,2,3,4]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([]) == []\nassert     pairs_sum_to_zero([1,2,3,4,5]) == []\nassert     pairs_sum_to_zero([-1,0,1,2,3]) == []\nassert     pairs_sum_to_zero([0,0,1,0,0]) == [0]\nassert     pairs_sum_to_zero([0,0,1,0,0]) == []\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, 3, 2, 1]) is False\nassert     pairs_sum_to_zero([0, 0, 0, 0, 0, 1, 2, 3, 4, 5]) is True\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     change_base(0, 1) == '0'\nassert     change_base(1, 10) == '1'\nassert     change_base(2, 3) == '23'\nassert     change_base(3, 3) == '012'\nassert     change_base(4, 3) == '0202'\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     change_base(3, 10) == \"313\"\nassert     change_base(3, 3) == \"3\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     change_base(1, 3) == \"1\"\nassert     change_base(1, 2) == \"10\"\nassert     change_base(1, 5) == \"11\"\nassert     change_base(1, 6) == \"11000\"\nassert     change_base(1, 7) == \"1111\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     change_base(65, 2) == \"74\"\nassert     change_base(12, 3) == \"100\"\nassert     change_base(16, 6) == \"1\"\nassert     change_base(11, 9) == \"1\"\nassert     change_base(69, 0) == \"0\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     change_base(2, 8) == \"1308\"\nassert     change_base(2, 9) == \"0\"\nassert     change_base(2, 10) == \"2\"\nassert     change_base(2, 11) == \"11\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     change_base(44, 10) == \"4\"\nassert     change_base(11, 16) == \"11\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     change_base(5, 10) == \"5010\"\nassert     change_base(80, 10) == \"00110\"\nassert     change_base(5, 5) == \"50000\"\n\ndef multiplication(x, y):\n    \"\"\"Multiplication of two numbers\n    return string representation of x multiplied by y.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     change_base(10, 1) == \"10\"\nassert     change_base(10, 2) == \"11\"\nassert     change_base(10, 3) == \"11\"\nassert     change_base(10, 4) == \"11\"\nassert     change_base(10, 5) == \"11\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     (change_base(123, 6) == \"25\")\nassert     (change_base(123, 2) == \"1\")\nassert     (change_base(123, 8) == \"113\")\nassert     (change_base(123, 1) == \"1\")\nassert     (change_base(123, 2) == \"2\")\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     change_base(5, \"A\") == \"5A\"\nassert     change_base(13, \"B\") == \"13B\"\nassert     change_base(22, \"C\") == \"22C\"\nassert     change_base(15, \"D\") == \"15D\"\nassert     change_base(12345, \"E\") == \"12345E\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     triangle_area(3, 4) == 21\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     triangle_area(2, 3) == 0\nassert     triangle_area(5, 5) == 25\n\nif __name__ == \"__main__\":\n    print(\"Module is called directly by the test suite.\")"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     triangle_area(1.0, 1.0) == 5.0\nassert     triangle_area(1.0, 2.0) == 3.0\nassert     triangle_area(1.0, 3.0) == -6.0\nassert     triangle_area(1.0, 4.0) == 10.0\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     triangle_area(10, 2) == 60, \"Triangle_area not correct\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     triangle_area(10, 13) == 28\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     triangle_area(5,6) == 75\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     triangle_area(3, 4) == 12, \\\n    \"triangle_area() should return 12.\"\nassert     triangle_area(3, 5) == 24, \\\n    \"triangle_area() should return 24.\"\nassert     triangle_area(3, 6) == 27, \\\n    \"triangle_area() should return 27.\"\n\nprint(\"OK\")"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     triangle_area(5, 6) == 30"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     triangle_area(4, 5) == 12\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     triangle_area(1, 5) == 5\nassert triangle_area(0, 0) == 0\nassert triangle_area(1, 1) == 1\nassert triangle_area(2, 2) == 4\nassert triangle_area(1, 2) == 4\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         (fib4(0) == 0)\nassert         (fib4(1) == 0)\nassert         (fib4(2) == 2)\nassert         (fib4(3) == 0)\nassert         (fib4(5) == 0)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 1\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 2\nassert     fib4(4) == 2\nassert     fib4(5) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 1\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef fib4_complementary(n: int):\n    \"\"\"Compute the complementary Fib4 number sequence from the sequence above.\n    Please write a function to compute the complement of fib4(n) and use it for the nth number of the Fib4 number sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(5) == 5\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 1\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 4\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 1\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         median([1, 2, 3]) == 2\nassert         median([4, 2, 3, 1]) == 3.5\nassert         median([-1, -2, -3, -4]) == -1\nassert         median([3.14, 2.5, 1.23, 0.11]) == 1.5\nassert         median(range(5)) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     median([1, 2, 3, 4, 5, 6]) == 3\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 10\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 10\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     median([1,2,3,4]) == 3\nassert     median([1,2,3,5]) == 3\nassert     median([]) == 0\nassert     median([4,6,8,10]) == 6\nassert     median([1,3,5,7,9]) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     median([2, 4, 6, 8, 10]) == 7\nassert     median([1, 9, 5, 7]) == 5\nassert     median([]) == 0\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     median([]), \"Error: no median values\"\nassert     median([1, 2, 3]), \"Error: median values not passed\"\nassert     median([5, 6, 7]), \"Error: median values not passed\"\nassert     median([2, 4, 6]), \"Error: median values not passed\"\nassert     median([]), \"Error: no median values\"\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     median([]) == 0\nassert median([1,2,3]) == 2\nassert median([1,2,3,4]) == 3\nassert median([1,3,3,4,5]) == 3\nassert median([1,2,3,4,5,6,7,8,9,10]) == 3\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     median(['a', 'b', 'c']) == 'c'\nassert     median(['a', 'b', 'd', 'e']) == 'e'\nassert     median(['a', 'b', 'c', 'd', 'e']) == 'c'\nassert     median([]) == None\nassert     median([1,2,3]) == 1\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     median(['a', 'b', 'c', 'd']) == 'c'\nassert     median(['a', 'b', 'c', 'd', 'e', 'f']) == 'e'\nassert     median(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 'f'\nassert     median(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']) == 'g'\nassert     median(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']) == 'k'\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3]) == 1\nassert     median([-1, -2, -3, -4, -5]) == -1\nassert     median([]) == 0\nassert     median([1,2,3,4,5]) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     median([1, 2, 3, 4, 5, 6]) == 3\nassert     median([1, 5, 6, 8, 9, 11]) == 8.5\nassert     median([]) == None\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_palindrome(\"mj\") == False\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"aa\") == True\nassert     is_palindrome(\"aa\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_palindrome('') == True\nassert     is_palindrome('a') == True\nassert     is_palindrome('bananas') == True\nassert     is_palindrome('asd') == True\nassert     is_palindrome('ad') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_palindrome('aba') == True\nassert     is_palindrome('ccc') == False\nassert     is_palindrome('bbbb') == False\nassert     is_palindrome('abab') == True\nassert     is_palindrome('b') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_palindrome('A man, a plan, a canal: Panama') == True\nassert     is_palindrome('race a car') == False\nassert     is_palindrome('race a car!') == True\nassert     is_palindrome('Nemo') == True\nassert     is_palindrome('A man, a plan, a canal: Panama') == True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_palindrome(\"A man, a plan, a canal: Panama\") == True\nassert     is_palindrome(\"race a car\") == True\nassert     is_palindrome(\"aaaaaa\") == True\nassert     is_palindrome(\"Nan\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_palindrome('abcd') == True\nassert     is_palindrome('aabb') == False\nassert     is_palindrome('banana') == True\nassert     is_palindrome('qwerty') == False\nassert     is_palindrome('civic') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"A\") == True\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"?\") == True\nassert     is_palindrome(\" \") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_palindrome(\"hello\") == \"hello\"\nassert     is_palindrome(\"madam\") == \"madam\"\nassert     is_palindrome(\"madam\") == \"madam\"\nassert     is_palindrome(\"sagar\") == \"sagar\"\nassert     is_palindrome(\"navin\") == \"navin\"\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_palindrome('test') == False\nassert is_palindrome('1') == False\nassert is_palindrome('racecar') == True\nassert is_palindrome('ohmy') == False\nassert is_palindrome('mock') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_palindrome(\"121\")\nassert not is_palindrome(\"121\")\nassert is_palindrome(\"race a car\") == False\nassert is_palindrome(\"banana\") == False\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     modp(0,0)==0, \"0 modulo 0\"\nassert     modp(1,0)==1, \"1 modulo 0\"\nassert     modp(2,0)==1, \"2 modulo 0\"\nassert     modp(3,0)==1, \"3 modulo 0\"\nassert     modp(4,0)==1, \"4 modulo 0\"\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     modp(1,2) == 1\nassert     modp(3,2) == 7\nassert     modp(2,3) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     modp(3, 4) == 1\nassert modp(0, 3) == 0\nassert modp(4, 7) == 1\nassert modp(3, 4) == 0\nassert modp(7, 5) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     modp(3, 2) == 2\nassert     modp(1, 3) == 1\nassert     modp(3, 3) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     modp(11, 2) == 3\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     modp(1, 6) == 1\nassert     modp(1, 2) == 1\nassert     modp(1, 3) == 1\nassert     modp(1, 8) == 1\nassert     modp(1, 6) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     modp(0,1) == 0\nassert modp(1,2) == 1\nassert modp(2,3) == 2\nassert modp(3,4) == 2\nassert modp(4,5) == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     modp(20, 3) == 8\nassert modp(20, 3) == 8\nassert modp(20, 5) == 13\nassert modp(20, 10) == 8\nassert modp(20, 6) == 13\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     modp(3, 7) == 1\nassert     modp(3, 0) == 1\nassert     modp(6, 0) == 1\nassert     modp(1, 1) == 1\nassert     modp(3, 4) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     modp(n = 1000, p = 100) == 100\nassert     modp(n = 1000, p = 101) == 1\nassert     modp(n = 1000, p = 102) == 1\nassert     modp(n = 1000, p = 1003) == 1\nassert     modp(n = 1000, p = 1007) == 1\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     decode_shift(\"abc\") == \"cba\"\nassert decode_shift(\"a\") == \"a\"\nassert decode_shift(\"A\") == \"A\"\nassert decode_shift(\"\") == \"\"\nassert decode_shift(\"ab\") == \"ba\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     decode_shift(\"abcd\") == \"eee\"\nassert     decode_shift(\"aeiou\") == \"ah\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     decode_shift(\"abc\") == \"ab\"\nassert     decode_shift(\"abc\") == \"a\"\nassert     decode_shift(\"def\") == \"d\"\nassert     decode_shift(\"abcd\") == \"abcd\"\nassert     decode_shift(\"abcd\") == \"ab\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     encode_shift(\"d\") == \"a\"\nassert     encode_shift(\"\") == \"a\"\nassert     encode_shift(\"Hello\") == \"H\"\nassert     encode_shift(\"Hola\") == \"l\"\nassert     encode_shift(\"HelloWorld\") == \"hWrd\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     encode_shift('abcdefghijklmnop') == 'lmnopqrstuvwxyz'\nassert decode_shift('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert decode_shift('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\nassert decode_shift('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\nassert decode_shift('ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     decode_shift(\"s1gh\") == \"q1st\"\nassert     decode_shift(\"s2gh\") == \"q2st\"\nassert     decode_shift(\"s1ghq1st\") == \"q1st\"\nassert     decode_shift(\"s2ghq1st\") == \"q2st\"\nassert     decode_shift(\"s3ghq1st\") == \"q1st\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         decode_shift(\"\").startswith(\"a\") \nassert         decode_shift(\"ab\") \nassert         decode_shift(\"\") \nassert         decode_shift(\"aabb\") \nassert         decode_shift(\"aaab\")\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         decode_shift(\"a\") == \"AE\"\nassert         decode_shift(\"AB\") == \"AB\"\nassert         decode_shift(\"AA\") == \"AA\"\nassert         decode_shift(\"ZZ\") == \"ZZ\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     decode_shift(\"FADEFFFE\") == \"f0e12\"\nassert     decode_shift(\"E0F8F0FF0\") == \"E0F8F0FFF0\"\n\nprint(\"Done!\")\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     decode_shift(\"abcd\") == \"d\"\nassert     decode_shift(\"dab\") == \"e\"\nassert     decode_shift(\"\") == \"\"\nassert     decode_shift(\"abc\") == \"abc\"\n\n\ndef get_index_of_codepoint(ch: chr):\n    \"\"\"\n    get index of a character in a codepoint table.\n    \"\"\"\n    if ch == '_' or ch == '-' or ch == '+' or ch == '0':\n        return -1\n    else:\n        return ord(ch) - ord('a')\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     remove_vowels(\"Hello world!\") == \"ello\"\nassert     remove_vowels(\"Hello my friend!\") == \"hellow\"\nassert     remove_vowels(\"Hello world!\") == \"ello worl\"\nassert     remove_vowels(\"Hello my friend!\") == \"ello worl\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     remove_vowels(\"Hello World\") == \"ello wrld\"\nassert     remove_vowels(\"This is a sentence.\") == \"this is a sentence.\"\nassert     remove_vowels(\"Hi! My name is John!\") == \"Hi my name is John!\"\nassert     remove_vowels(\"Hi! My name is John!\") == \"Hi john!\"\nassert     remove_vowels(\"This is a sentence!\") == \"this is a sentence\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     remove_vowels('This is a sentence.') == 'Ths is a sentence.'\nassert     remove_vowels('This is a sentence.') == 'Ths is a sentence.'\nassert     remove_vowels('This is a sentence.') == 'Ths is a sentence.'\nassert     remove_vowels('This is a sentence.') == 'Ths is a sentence.'\nassert     remove_vowels('This is a sentence.') == 'Ths is a sentence.'\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     remove_vowels('Hello') == 'olleH'\nassert     remove_vowels('aIsoK') == 'aIsoK'\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     remove_vowels(\"He is a boy\") == \"He is not a boy\"\nassert     remove_vowels(\"He is a boy.\") == \"He is a boy\"\nassert     remove_vowels(\"He is a boy\") == \"He is not a boy\"\nassert     remove_vowels(\"\") == \"He is a boy\"\nassert     remove_vowels(\"Hello!\") == \"Hello!\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     remove_vowels('Hailwah') == 'ha'\nassert     remove_vowels('Ivanov') == 'iv'\nassert     remove_vowels('ma\u021bi\u015f\u0219i') =='m'\nassert     remove_vowels('Ivanov ') == 'iv'\nassert     remove_vowels('Ivanov ma\u021bi\u015f\u0219i') =='m'\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     remove_vowels(\"hello world\") == \"ello world\"\nassert     remove_vowels(\"hijkl mrkl\") == \"hijkl\"\nassert     remove_vowels(\"a cat doe b c\") == \"c\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"a,b,c\") == \"a,b,c\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     remove_vowels(\"I am a hero\") == \"a a a a\"\nassert     remove_vowels(\"I am a hero\") == \"a a a a\"\nassert     remove_vowels(\"I am a hero\") == \"a a a a\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     remove_vowels('hello') == 'olleh'\nassert remove_vowels('Hello') == 'Hello'\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     below_threshold(l=[3, 4, 7, 9, 12], t=3) is False\nassert     below_threshold(l=[5, 1, 2, 6, 7], t=4) is False\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     below_threshold([\"1\", \"5\", \"3\", \"1\", \"6\"], 2) == True\nassert     below_threshold([\"1\", \"5\", \"3\", \"1\", \"6\"], 3) == False\nassert     below_threshold([\"1\", \"5\", \"3\", \"1\", \"6\"], 4) == True\nassert     below_threshold([\"1\", \"5\", \"3\", \"1\", \"6\"], 5) == False\nassert     below_threshold([\"1\", \"5\", \"3\", \"1\", \"6\"], 6) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     below_threshold([1, 1, 1, 0, 0, 2, 0, 1, 2, 1, 0, 1], 0) == True\nassert     below_threshold([1, 1, 1, 0, 0, 2, 0, 1, 2, 1, 0, 1], 1) == False\nassert     below_threshold([1, 1, 1, 0, 0, 2, 0, 1, 2, 1, 0, 1], 0.5) == False"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     below_threshold(\n    list(range(0, 100)), 10), \"do not pass the check\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     below_threshold([1, 2, 3, 4], 2) == True\nassert     below_threshold([1, 2, 3, 4], 5) == False\nassert     below_threshold([1, 2, 3, 4], 0) == True\n\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     below_threshold([2, 4, 6, 8, 10], 8) == False\nassert     below_threshold([1, 2, 3, 5, 7, 8], 3) == True"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     below_threshold(l=l, t=3) == True\nassert     below_threshold(l=l, t=4) == True\nassert     below_threshold(l=l, t=5) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     below_threshold([-2, -3, -4, -5, -6, -7, -8, -9, -10], -3)\nassert     below_threshold([-2, -3, -4, -5, -6, -7, -8, -9, -10], 3)\nassert     below_threshold([-2, -3, -4, -5, -6, -7, -8, -9, -10], 1)\nassert     below_threshold([-2, -3, -4, -5, -6, -7, -8, -9, -10], 0)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     above_threshold([5, 1, 3, 2], 2) == True\nassert     above_threshold([5, 1, 3, 2, 4], 3) == False\nassert     above_threshold([5, 1, 3, 2, 4], 4) == False\nassert     above_threshold([5, 1, 3, 2, 4], 3) == True\n\ndef is_solution(l: list):\n    \"\"\"Return True if the list is solution.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         add(1, 3) == 5\nassert         add(1, 7) == 8\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     add(3, 4) == 5\nassert     add(4, 5) == 7\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     add(1, 2) == 3\nassert     add(1, 1) == 2\nassert     add(1, -1) == -1\nassert     add(1, 0) == 1\nassert     add(-1, 0) == -1\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     add(1, 2) == 3\nassert     add(1, 1) == 0\nassert     add(1, 1) == 1\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     add(2, 2) == 3\nassert add(1, 1) == 2\nassert add(1, 4) == 6\nassert add(6, 4) == 12\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     add(1, 1) == 2\nassert     add(1, 2) == 3\nassert     add(1, 3) == 4\n\ndef sub(x: int, y: int):\n    \"\"\"subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     add(2,3) == 5\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     add(2, 3) == 5\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         same_chars(s0, s1) == True\nassert         same_chars(s0, s1) == True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     same_chars(\"hello\", \"hello\") == True\nassert     same_chars(\"aaaa\", \"aaaa\") == False\nassert     same_chars(\"TEST\", \"TEST\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         same_chars(\"helloworld\", \"hello\") == True\nassert         same_chars(\"hello\", \"hello\") == True\nassert         same_chars(\"hello\", \"heLLO\") == True\nassert         same_chars(\"HELlO\", \"hello\") == True\nassert         same_chars(\"heLLO\", \"heLLO\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     same_chars(\"aaa\", \"a\") == True\nassert     same_chars(\"aaa\", \"aa\") == True\nassert     same_chars(\"aaa\", \"ab\") == True\nassert     same_chars(\"aaa\", \"aaab\") == True\nassert     same_chars(\"aaa\", \"aaa\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     same_chars(\"Aa\", \"Aa\") == True\nassert     same_chars(\"Aa\", \"AaAa\") == True\nassert     same_chars(\"Aa\", \"AaAaAaAaAaAaAa\") == True\nassert     same_chars(\"Aa\", \"AaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     same_chars(\"aaaa\", \"aabb\")\nassert same_chars(\"aabb\", \"aaaa\")\nassert same_chars(\"aabb\", \"aabb\")\nassert same_chars(\"a\", \"a\")\nassert same_chars(\"a\", \"a\")\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     same_chars(\"one\", \"one\")\nassert     same_chars(\"a\", \"a\")\nassert     same_chars(\"one\", \"o\")\nassert     same_chars(\"one\", \"o1\")\nassert     same_chars(\"one\", \"o2\")\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     same_chars(\"aaaaaaa\", \"aa\") == True\nassert     same_chars(\"aaabaa\", \"aa\") == True\nassert     same_chars(\"aaaa\", \"aaaaa\") == True\nassert     same_chars(\"aaaa\", \"aa\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     same_chars(\"gina\", \"g\") == True, \"assert failed\"\nassert     same_chars(\"gina\", \"gina\") == False, \"assert failed\"\nassert     same_chars(\"gina\", \"gina\") == True, \""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     same_chars(\"z\", \"z\") == True\nassert     same_chars(\"z\", \"z\") == False\nassert     same_chars(\"s\", \"s\") == True\nassert     same_chars(\"s\", \"s\") == False\nassert     same_chars(\"e\", \"e\") == True\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     fib(4) == 3\nassert     fib(6) == 5\nassert     fib(9) == 7\n\n\n\ndef factorial(n: int):\n    \"\"\"Return n!\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fib(1) == 0\nassert     fib(2) == 1\nassert     fib(3) == 1\nassert     fib(4) == 2\nassert     fib(5) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef fib_2(n: int):\n    \"\"\"Return the n-th Fibonacci number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"[1]\") == True\nassert     correct_bracketing(\"[][1][1]\") == True\nassert     correct_bracketing(\"[][][]\") == False\nassert     correct_bracketing(\"[][][]]\") == False\nassert     correct_bracketing(\"[]][]\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<\") == True\nassert     correct_bracketing(\"(\") == True\nassert     correct_bracketing(\")\") == True\nassert     correct_bracketing(\"<>\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"()<>[]{}\") == True\nassert     correct_bracketing(\"{[(]\") == True\nassert     correct_bracketing(\"[(])\") == False\nassert     correct_bracketing(\"[()\") == False\nassert     correct_bracketing(\"(\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"(\") == True\nassert     correct_bracketing(\"))\") == True\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()\")) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     correct_bracketing('<>') == True\nassert     correct_bracketing('<>') == False\nassert     correct_bracketing('<>') == True\nassert     correct_bracketing('<>') == False\nassert     correct_bracketing('<>') == True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(a)\") == True\nassert     correct_bracketing(\"(\") == True\nassert     correct_bracketing(\"{}\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     correct_bracketing(r\"<>\") == False, \"The brackets <> and > are wrong\"\nassert     correct_bracketing(r\"<>'<>\") == True, \"The brackets <>' and'<>' are wrong\"\nassert     correct_bracketing(r\"<>'<>\") == False, \"The brackets <>' and'<>' are wrong\"\nassert     correct_bracketing(r\"<>'<>\") == True, \"The brackets <>' and'<>' are wrong\""
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         correct_bracketing(\"<\")\nassert         correct_bracketing(\"<>\")\nassert         correct_bracketing(\"<>\\n\")\nassert         correct_bracketing(\">\\n\")\nassert         correct_bracketing(\">\\t\\n\")\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<{}>\") == True\nassert     correct_bracketing(\"}>\") == True\nassert     correct_bracketing(\"<[>\") == False\nassert     correct_bracketing(\"<[>\") == True\nassert     correct_bracketing(\"<[>\") == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     monotonic([\"a\", \"a\", \"b\", \"b\", \"a\"]) == False\nassert     monotonic([\"a\", \"b\", \"a\", \"a\", \"b\"]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     monotonic([1, 2, 3, 4, 5])\nassert     monotonic([1, 4, 2, 0, 0])\nassert     monotonic([])\nassert     monotonic([1])\nassert     monotonic([])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     monotonic([5, 1, -1, -5, -10])\nassert not     monotonic([5, 1, -10, -1, -5])\nassert     not     monotonic([5, 1, -10, -10, -5])\nassert     not     monotonic([0, 0, 0, 0, 0])\nassert     not     monotonic([10, 10, 10, 10, 10])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     monotonic(['a','b','c','d','e','f','g','h']) is True\nassert     monotonic([]) is True\nassert     monotonic([1,2,3,4,5]) is True\nassert     monotonic([3,4,5,6,7]) is True\nassert     monotonic([6,7,8,9,10,11]) is True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     monotonic(['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c'])\nassert     monotonic([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5])\nassert     monotonic([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5])\nassert     monotonic([2, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5])\nassert     monotonic([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         monotonic([\"A\", \"B\", \"C\", \"D\"]) == True\nassert         monotonic([1, 3, 2, 0]) == True\nassert         monotonic([1, 2, 3, 4]) == False\nassert         monotonic([1, 4, 2, 3]) == False\nassert         monotonic([2, 1, 3, 4]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     monotonic([3, 4, 5, 7, 7, 7]) == True\nassert     monotonic([0, 1, 4, 5, 7, 7]) == True\nassert     monotonic([6, 3, 5, 4, 5, 7, 7, 7]) == True\nassert     monotonic([3, 4, 5, 7, 7, 7]) == True\nassert     monotonic([3, 4, 5, 7, 7, 7, 7, 7]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         monotonic([]) == False\nassert         monotonic([1, 2, 1, 2, 3, 3, 4, 5, 6]) == True\nassert         monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     monotonic([0,1,2,3]) == True, \"List must be monotonic!\"\nassert     monotonic([-5,-4,3,0,1,2]) == False, \"List must be monotonic!\"\nassert     monotonic([0,1,2,3,4,5]) == True, \"List must be monotonic!\"\nassert     monotonic([-5,-4,-3,0,1,2]) == True, \"List must be monotonic!\"\nassert     monotonic([0,1,2,3,4,5,6,7,8,9,10]) == True, \"List must be monotonic!\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     monotonic([5, -2, 1, 5, 6, 7, 8, 9, 9, 9, 8]) == True\nassert     monotonic([-3, -2, -1, -3, -4, -3, -2, -4, -4, -3, -2]) == False\nassert     monotonic([5, -2, 1, 5, -2, 7, 9, 8, 5, -5, -2, 1]) == False\nassert     monotonic([1, 2, -2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 9, 1, 2]) == True\nassert     monotonic([-3, -2, -1, -3, -4, -3, -2, -4, -4, -3, -2, -4]) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     common([1, 2, 3], [1, 3]) == [1, 3]\nassert     common([1, 2], [3, 4]) == []\nassert     common([1, 2], [2, 3]) == [1, 2]\nassert     common([1], [1, 2, 3]) == [1]\nassert     common([1, 2, 3, 4], [4, 5]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     common(['a', 'b', 'c'], ['a', 'b', 'd', 'e', 'f']) == ['c', 'e', 'f']\nassert     common(['a', 'b', 'c'], ['b', 'd', 'e', 'f']) == ['b', 'e']\nassert     common(['a', 'b', 'c'], ['d', 'f', 'g']) == ['a', 'b', 'f', 'g']\nassert     common(['a', 'b', 'c'], ['a', 'b', 'd', 'e', 'f']) == ['b', 'd']\nassert     common(['a', 'b', 'c'], ['d', 'f', 'g']) == ['a', 'b', 'f', 'g']\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == [1, 3, 4, 6]\nassert     common([1, 2, 3, 4, 5, 6], [2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2]\nassert     common([1, 2, 3, 4, 5, 6], [3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3]\nassert     common([1, 2, 3, 4, 5, 6], [1, 2, 4, 5, 6, 7]) == [1, 2, 4, 5, 6]\nassert     common([1, 2, 3, 4, 5, 6], [2, 4, 5, 6, 7, 8]) == [2, 4, 5, 6]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     common(['a', 'b', 'c'], ['a', 'b', 'd']) == ['a', 'b', 'c', 'd']\nassert     common(['a', 'b', 'c'], ['a', 'b']) == []\nassert     common(['a', 'b', 'c'], ['a', 'c']) == ['a', 'c']\nassert     common(['a', 'b', 'c'], ['a', 'a']) == ['a', 'a', 'b']\nassert     common(['a', 'b', 'c'], ['a', 'b']) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     common([\"a\", \"b\"], [\"a\", \"b\", \"c\"]) == \"c\"\nassert     common([\"a\", \"b\", \"a\"], [\"a\", \"b\", \"c\"]) == \"c\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     common(l1=[\"g\", \"h\", \"i\"], l2=[1, 2, 3, 4, 5]) == [\"g\", \"h\", \"i\", \"g\", \"h\"]\nassert     common(l1=[\"g\", \"h\", \"i\", \"g\", \"h\"], l2=[1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     common(l1=[\"g\", \"h\", \"i\", \"g\", \"h\", \"i\"], l2=[1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef find_longest_common(l1: list, l2: list) -> int:\n    \"\"\"Return the longest common substring in two lists.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     common(['a', 'b', 'c'], ['a', 'b', 'c']) is True\nassert     common(['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'a']) is False\n\ndef generate_combo(num_cols: int, num_rows: int, column_set: list) -> list:\n    \"\"\"Return a list of lists of length num_cols with common elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     common([2, 3, 4], [1, 2, 3]) == [1, 3]\nassert     common([3, 4, 5], [2, 1, 3]) == [3, 4]\nassert     common([], [1, 2, 3]) == []\nassert     common([1, 2, 3, 4, 5], [2, 1, 3, 4]) == [2, 1, 3, 4]\nassert     common([1, 2, 3, 4, 5], [2, 1, 3, 4, 5]) == [2, 1, 3, 4]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     common([1,2,3], [4,5,6]) == [4,5,6]\nassert     common([1,2,3], [1,2,5]) == [1,2,5]\nassert     common([1,2,3], [3,4]) == [3]\nassert     common([1,2,3], [1,4,6]) == [1,4,6]\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     largest_prime_factor(17) == 7\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     largest_prime_factor(3) == 2\nassert     largest_prime_factor(7) == 3\nassert     largest_prime_factor(11) == 2\nassert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(27) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     largest_prime_factor(5) == 2\nassert     largest_prime_factor(25) == 3\nassert     largest_prime_factor(36) == 3\nassert     largest_prime_factor(72) == 3\nassert     largest_prime_factor(10**8) == 10**8\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     largest_prime_factor(3) == 2\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(27) == 2\nassert     largest_prime_factor(35) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     largest_prime_factor(5) == 3\nassert largest_prime_factor(7) == 3\nassert largest_prime_factor(17) == 3\nassert largest_prime_factor(22) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     largest_prime_factor(5) == 2\nassert     largest_prime_factor(36) == 3\nassert     largest_prime_factor(123) == 12\nassert     largest_prime_factor(24) == 2\nassert     largest_prime_factor(69) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(11) == 2\nassert     largest_prime_factor(13) == 3\nassert     largest_prime_factor(123) == 3\nassert     largest_prime_factor(17) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     largest_prime_factor(1225) == 3\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sum_to_n(5) == 10\nassert     sum_to_n(15) == 21\nassert     sum_to_n(8) == 15\nassert     sum_to_n(3) == 3\nassert     sum_to_n(2) == 2\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         sum_to_n(5) == 5\nassert         sum_to_n(3) == 7\nassert         sum_to_n(2) == 8\nassert         sum_to_n(1) == 1\nassert         sum_to_n(0) == 0"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sum_to_n(5) == 10\nassert     sum_to_n(0) == 0\nassert     sum_to_n(1) == 1\nassert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 35\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sum_to_n(5) == 25\nassert     sum_to_n(10) == 50\nassert     sum_to_n(9) == 9\n\ndef main():\n    \"\"\"main function that runs the test cases.\n    \"\"\"\n    print(\"*** Test cases have been written for function sum_to_n ***\")\n    #\n    # test cases\n    print(\"sum_to_n: tests the sum_to_n function\")\n    print(\"{:<20} | input | output |\".format(\"test case 1 |\") +\n          \"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(9)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(9)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 8, sum_to_n(8)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(10)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(12)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(12)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 7, sum_to_n(7)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(17)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(123)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 7, sum_to_n(7)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(0)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 5, sum_to_n(5)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 7, sum_to_n(7)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 5, sum_to_n(10)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 10, sum_to_n(10)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(123)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(8)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 8, sum_to_n(8)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 8, sum_to_n(10)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(11)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(17)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 7, sum_to_n(7)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(0)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 5, sum_to_n(5)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(12)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(123)))\n    print(\"{:<20} | {} | {} |\".format(\"n =\", 9, sum_to_n(123)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(5) == 10\nassert     sum_to_n(6) == 21\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sum_to_n(0) == 0\nassert sum_to_n(1) == 1\nassert sum_to_n(2) == 3\nassert sum_to_n(3) == 6\nassert sum_to_n(4) == 9\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sum_to_n(1) == 1\nassert sum_to_n(2) == 2\nassert sum_to_n(3) == 6\nassert sum_to_n(4) == 24\nassert sum_to_n(5) == 45\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sum_to_n(0) == 0\nassert sum_to_n(1) == 1\nassert sum_to_n(2) == 2\nassert sum_to_n(3) == 3\nassert sum_to_n(4) == 6\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     correct_bracketing('(())')\nassert     correct_bracketing('(())())')\nassert     correct_bracketing('())((())')\nassert     correct_bracketing('())(())')\nassert     correct_bracketing('((())'))\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"((())\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"((()))\") == False\nassert     correct_bracketing(\"(((())))\") == True\nassert     correct_bracketing(\"((()))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     correct_bracketing(\")\") == True\nassert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"((\") == True\nassert     correct_bracketing(\"\")) == True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"((()\") == True\nassert     correct_bracketing(\"(()(\") == True\nassert     correct_bracketing(\"(()[\") == True\nassert     correct_bracketing(\"[(()\") == True\nassert     correct_bracketing(\"[(()])\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"((()\") == True\nassert     correct_bracketing(\"(((()\") == True\nassert     correct_bracketing(\"(()()()()()(()\") == True\nassert     correct_bracketing(\"((()())(\") == True\nassert     correct_bracketing(\"(((()))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"())\" == True\nassert     correct_bracketing(\"))\") == False\nassert     correct_bracketing(\")))\" == True\nassert     correct_bracketing(\"())\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"[(()])\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"((()))\") == False\nassert     correct_bracketing(\"()[()])\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"))\" ) == True\nassert     correct_bracketing(\"(())\") == False\nassert     correct_bracketing(\"((()))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()(())\") == False\n\ndef get_all_letters(brackets: str) -> list:\n    \"\"\" returns a list of all the characters in brackets.\n    it is assumed that brackets is valid.\"\"\"\n    pass\n\ndef get_all_substr(brackets: str) -> list:\n    \"\"\" returns a list of all the sub-brackets in brackets.\n    it is assumed that brackets is valid.\"\"\"\n    pass\n\ndef get_all_combs(brackets: str) -> list:\n    \"\"\" returns a list of all the combinations of brackets.\n    it is assumed that brackets is valid.\"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     derivative([1, 2, 3, 4]) == 5, \"Derivative of polynomial (1 + 2x^2 + 3x^3 + 4x^4) = 5\"\nassert     derivative([1, 2, 3, 4, 5]) == -5, \"Derivative of polynomial (1 + 2x^2 + 3x^3 + 4x^4) = -5\""
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     derivative(1, 2, 2) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     derivative([]) == []\nassert     derivative([1,0,0]) == [0,0,0]\nassert     derivative([1,0,0,0,0,0,0]) == [0,0,0,0,0,0,0]\nassert     derivative([1,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     derivative([-1, 0, 1]) == [3, 0, -1]\nassert     derivative([-1, 0, 2]) == [3, 0, 1]\nassert     derivative([-1, 0, 3]) == [1, -3, 6]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     derivative(xs=[1,1,1,1,1,1,1,1,1,1]) == [3,4,5,8,10,12,15,18]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     derivative([1, 2, 3]) == 0.75\nassert     derivative([1, 2, 3, 4]) == -0.75\nassert     derivative([-1, 0, 0, 0]) == -0.75\nassert     derivative([1, 2, 3, 4, 5]) == -0.75\nassert     derivative([1, 2, 3, 4, 5, 6]) == -0.75\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert xtest == derivative(xtest)\n\ndef is_power(x, n):\n    \"\"\" check if x is a power.\n    \"\"\"\n    return x == int(x)**n\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     derivative(1) == 1, \"Not a polynomial\"\nassert         derivative(0) == 0, \"Invalid coefficient\"\nassert         derivative(0.5) == 0.5, \"Not a number\"\nassert         derivative(0.6) == 1.0, \"Invalid coefficient\"\nassert         derivative(0.7) == 0.5, \"Not a number\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     derivative([1, 2, 3]) == -2\nassert derivative([1, 1, 1]) == 3\nassert derivative([2, 2, 3]) == 6\nassert derivative([3, -1, -1]) == -2\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     (fibfib(0) == 0)\nassert     (fibfib(1) == 0)\nassert     (fibfib(2) == 1)\nassert     (fibfib(3) == 1)\nassert     (fibfib(5) == 2)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 1\nassert     fibfib(2) == 2\nassert     fibfib(3) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \ndef check_fibfib(n: int):\n    \"\"\"Check that the fibfib function returns the correct number.\n    WARNING: fibfib function can be incomplete!\"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 4\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\ndef fibb(n: int):\n    \"\"\"The FibB number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibb(0) == 0\n    fibb(1) == 0\n    fibb(2) == 1\n    fibb(n) == fibb(n-1) + fibb(n-2) + fibb(n-3).\n    Please write a function to efficiently compute the n-th element of the fibb number sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fibfib(5) == 6\nassert     fibfib(10) == 9\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 1\nassert     fibfib(2) == 1\nassert     fibfib(3) == "
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     vowels_count('hello world') == 3\nassert     vowels_count('odd number') == 2\nassert     vowels_count('Hello world') == 2\nassert     vowels_count('honeydew') == 0\nassert     vowels_count('nurses') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     vowels_count('p q y') == 1\nassert     vowels_count('p q y z') == 2\nassert     vowels_count('xyz') == 1\nassert     vowels_count('nurses') == 1\nassert     vowels_count('zebra') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     (\"a\" in \"hello world\") == True, \"Expected 'a' to be present\"\nassert     (\"e\" in \"hello world\") == True, \"Expected 'e' to be present\"\nassert     (\"i\" in \"hello world\") == True, \"Expected 'i' to be present\"\nassert     (\"o\" in \"hello world\") == True, \"Expected 'o' to be present\"\nassert     (\"u\" in \"hello world\") == False, \"Expected 'u' to not be present\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     vowels_count('car') == 1, 'Test 1'\nassert     vowels_count('a') == 2, 'Test 2'\nassert     vowels_count('e') == 0, 'Test 3'\nassert     vowels_count('i') == 0, 'Test 4'\nassert     vowels_count('o') == 0, 'Test 5'\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     vowels_count(\"yahye\") == 1, \"First test fails\"\nassert     vowels_count(\"yehye\") == 1, \"Second test fails\"\nassert     vowels_count(\"yaehye\") == 0, \"Third test fails\"\nassert     vowels_count(\"yeaeyyye\") == 1, \"Fourth test fails\"\nassert     vowels_count(\"yeahyeyye\") == 1, \"Fifth test fails\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     vowels_count('Hello') == 0\nassert     vowels_count('Python') == 0\nassert     vowels_count('chicken') == 0\nassert     vowels_count('Mongo') == 0\nassert     vowels_count('Python') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     vowels_count('thisisawesome') == 12\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     vowels_count('taro') == 1\nassert     vowels_count('asdfas') == 0\nassert     vowels_count('taro') == 1\nassert     vowels_count('a') == 0\nassert     vowels_count('a') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     vowels_count('a') == 0\nassert     vowels_count('e') == 0\nassert     vowels_count('i') == 0\nassert     vowels_count('o') == 0\nassert     vowels_count('u') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     vowels_count('hello world') == 4, 'vowels_count should return 4'\nassert     vowels_count('a') == 1, 'vowels_count should return 1'\nassert     vowels_count('abc') == 0, 'vowels_count should return 0'\nassert     vowels_count('ab') == 0, 'vowels_count should return 0'\nassert     vowels_count('abcd') == 1, 'vowels_count should return 1'\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     circular_shift(123, 4) == \"1234\"\nassert     circular_shift(456, -1) == \"4564\"\nassert     circular_shift(456, -2) == \"4563\"\nassert     circular_shift(6789, 2) == \"6789\"\nassert     circular_shift(923, 2) == \"223\""
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     circular_shift(12, 2) == \"132\"\nassert     circular_shift(12, 1) == \"1\"\nassert     circular_shift(12, 0) == \"12\"\nassert     circular_shift(123, 1) == \"23\"\nassert     circular_shift(123, 0) == \"12\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     circular_shift(1234567,1) == '675'\nassert     circular_shift(1234567,5) == '4556'\nassert     circular_shift(1234567,10) == '765'\nassert     circular_shift(1234567,20) == '12345'\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     circular_shift(0, 5) == \"45\"\nassert     circular_shift(9, 5) == \"27\"\nassert     circular_shift(16, -5) == \"52\"\nassert     circular_shift(0, 0) == \"0\"\nassert     circular_shift(1, 0) == \"1\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     circular_shift(123, -4) == \"125\"\nassert     circular_shift(123, -2) == \"12\"\nassert     circular_shift(123, -1) == \"3\"\nassert     circular_shift(123, 1) == \"1\"\nassert     circular_shift(123, 3) == \"15\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     circular_shift(10, 5) == \"aac\"\nassert     circular_shift(2, 4) == \"aaab\"\nassert     circular_shift(3, 3) == \"aaa\"\nassert     circular_shift(0, 9) == \"011\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     circular_shift(72, -3) == \"11\"\nassert     circular_shift(120, -9) == \"22\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     circular_shift(2, 2) == '10'\nassert     circular_shift(9, 3) == '97'\nassert     circular_shift(1, 4) == '11'\nassert     circular_shift(0, 0) == '0'"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     circular_shift(123, 1) == '1'\nassert     circular_shift(121, 1) == '1'\nassert     circular_shift(543, 1) == '543'\nassert     circular_shift(0, 0) == '0'\nassert     circular_shift(0, 1) == '9'\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     circular_shift(5, 0) == \"5\"\nassert     circular_shift(5, 2) == \"5\"\nassert     circular_shift(5, 4) == \"9\"\nassert     circular_shift(5, 5) == \"5\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     digitSum('aabb') == 7\nassert     digitSum('123') == 1\nassert     digitSum('0000') == 0\nassert     digitSum('01') == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     digitSum('1234') == 5"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         digitSum('a') == 0\nassert         digitSum('A') == 0\nassert         digitSum('a ') == 1\nassert         digitSum('A ') == 0\nassert         digitSum('a1 ') == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     digitSum('4A') == 45\nassert digitSum('aCb') == 0\nassert digitSum('12345') == 5\nassert digitSum('123A45') == 5\nassert digitSum('1234qwer') == 2\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     digitSum('aaa') == 21, 'incorrect'\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     digitSum(\"1\") == 1\nassert digitSum(\"1, 2, 3\") == 6\nassert digitSum(\"12,34,5678\") == 0\nassert digitSum(\"123456789\") == 0\nassert digitSum(\"12345\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     digitSum(\"abcde\") == 11\nassert     digitSum(\"abcde\") == 0\nassert     digitSum(\"abcde\") == 0\nassert     digitSum(\"def\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     digitSum(\"\") == 0\nassert digitSum(\"abcd\") == 9\nassert digitSum(\"aab\") == 7\nassert digitSum(\"baa\") == 4\nassert digitSum(\"Aaab\") == 4\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         fruit_distribution(\"3\", 3) == 3\nassert         fruit_distribution(\"1\", 1) == 1\nassert         fruit_distribution(\"2\", 2) == 2\nassert         fruit_distribution(\"1\", 3) == 3\nassert         fruit_distribution(\"6\", 4) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"apples\",3) == 2\nassert fruit_distribution(\"mango\",2) == 1\nassert fruit_distribution(\"apples\",4) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fruit_distribution('a1','5') == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     fruit_distribution('AAB',1) == 0, 'The number of apples are not 1'\nassert     fruit_distribution('AAB',2) == 0, 'The number of apples are not 2'\nassert     fruit_distribution('AAB',3) == 0, 'The number of apples are not 3'\nassert     fruit_distribution('AAB',4) == 0, 'The number of apples are not 4'\nassert     fruit_distribution('AAB',5) == 0, 'The number of apples are not 5'\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \nfruit_distribution(123, '123')\nassert \nfruit_distribution('123', '123')\nassert \nfruit_distribution('123', '111')\nassert \nfruit_distribution('111', '111')\nassert \nfruit_distribution('111', '111')\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \ndef fruit_distribution_correction(s, n):\n    \"\"\"\n    In this task, you are given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket, check if the number of the oranges and apples in the basket is correct.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fruit_distribution(4,3) == 2\nassert     fruit_distribution(2,3) == 2\nassert     fruit_distribution(\"apple\",\"apple\") == 2\nassert     fruit_distribution(\"orange\",\"apple\") == 2\nassert     fruit_distribution(\"orange\",\"grapes\") == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_correct(fruit_distribution(\"1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     pluck(arr) == [7, 2]\nassert     pluck([]) == []\nassert     pluck([7,2,5,7,9,4,2,6,3,7,7,7,4,6,3,9,9,6]) == [7, 5]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     pluck([1, 3, 4, 2, 2, 3, 2, 1, 1]) == [3, 1]\nassert     pluck([1, 3, 2, 4]) == [3, 2]\nassert     pluck([]) == []\nassert     pluck([1]) == [1]\nassert     pluck([1, 1, 1]) == [1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     pluck([-1, 3, 5, 9, 12]) == [1, 2]\nassert     pluck([1, 2, 3]) == [1, 2]\nassert     pluck([1, 2, 3, 4]) == [3, 0]\nassert     pluck([]) == []\nassert     pluck([3, 5, 9, 12]) == [0, 1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     pluck([0,1,2,3,4]) == [2,0]\nassert     pluck([0,1,2]) == [0,1]\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     (pluck([1, 2, 3, 4]) == [1, 2, 4])\nassert     (pluck([1, 2, 2, 2, 2, 2, 2]) == [1, 1, 2, 2])\nassert     (pluck([1, 2, 3, 3, 4, 5]) == [2, 3, 4])\nassert     (pluck([1, 1, 2, 2, 2, 2, 2, 2, 2, 2]) == [2, 2, 2])\n\n\"\"\"\nDefinition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\"\"\"\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     pluck([1,2,3,4,5,6,7]) == [3,4,5]\nassert     pluck([]) == []\nassert     pluck([1,2,3,4,5]) == [1,2,4]\nassert     pluck([1,2,3,4,5,6,7]) == [2,3,4,5]\nassert     pluck([1,2,3,4,5,6]) == [1,2,3,4,6]\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     search([1, 2, 3, 4]) == 3\nassert     search([2, 2, 4, 5, 5, 5, 5, 5]) == -1\nassert     search([2, 2, 2, 4, 4, 5, 5, 5, 5]) == 3\nassert     search([2, 3, 3, 4]) == 2\nassert     search([3, 2, 3, 3]) == -1"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     search([]) == -1\nassert     search([7]) == 7\nassert     search([7, 8]) == 7\nassert     search([7, 7, 7, 7, 7]) == 7\nassert     search([7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) == 7\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     search( [0,2,3,4,5,6,7,8,9,10] ) == 8\nassert     search( [0,2,3,4,5,6,7,8,9,10] ) == 9\nassert     search( [0,2,3,4,5,6,7,8,9,10] ) == 9\nassert     search( [1,3,5,7,9] ) == -1\nassert     search( [0,0,0,0,0,0,0,0] ) == 0\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     search([2,5,6,7,8,9,10])==5\nassert     search([2,5,6,7,8,9,10])==-1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     search(nums_in_lst) == 9\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     search([3,5,7,0]) == -"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     strange_sort_list([1, 5, 3, 4, 8, 2, 3, 1]) == [1, 2, 3, 4, 5, 8, 7, 6]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([1]) == [1]\nassert     strange_sort_list([1, 2]) == [1, 2]\nassert     strange_sort_list([3, 5, 3, 4, 8, 2, 3, 1]) == [1, 3, 3, 4, 2, 8, 7, 6]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     test_simple_nums() == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"test_simple_nums\"\n\ndef test_simple_nums():\n    '''\n    Given simple numbers, return their indices in an array.\n    Simple numbers are numbers in an array that don't\n    change position.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     (strange_sort_list([]) == []),'strange_sort_list returns [].'\nassert     (strange_sort_list([3, 1, 2]) == [1, 2, 3]),'strange_sort_list does not give expected result.'\nassert     (strange_sort_list([1, 2, 3]) == [1, 2, 3]),'strange_sort_list does not give expected result.'\nassert     (strange_sort_list([-2, -1]) == [-2, -1]),'strange_sort_list does not give expected result.'\nassert     (strange_sort_list([-3, -1, -2, 3]) == [-3, -1, -2, 3]),'strange_sort_list does not give expected result.'\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert       strange_sort_list([1,2,3,4,5]) == [1, 2, 4, 5, 3]\nassert       strange_sort_list([4,2,3,1]) == [4, 2, 3, 1]\nassert       strange_sort_list([1,3,2,4,5]) == [1, 2, 4, 5, 3]\nassert       strange_sort_list([]) == []\nassert       strange_sort_list([1,3,4,5]) == [1, 3, 4, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([1,2,4]) == [1, 2, 4]\nassert     strange_sort_list([1,2,4,2,1]) == [1, 2, 2, 4, 1]\nassert     strange_sort_list([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1,2,3,4,5,6]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     isinstance(some_list, list), \"strange_sort_list expects list, got {}\".format(type(some_list))\nassert     isinstance(some_list, list), \"strange_sort_list expects list, got {}\".format(type(some_list))\nassert     len(some_list) > 0, \"strange_sort_list expects list, got {}\".format(len(some_list))\nassert     all([isinstance(i, int) for i in some_list]), \"strange_sort_list expects list, got {}\".format(some_list)\nassert     all([i >= 0 for i in some_list]), \"strange_sort_list expects list, got {}\".format(some_list)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef separate_first_list(lst):\n    '''\n    Given list of integers, return a separate list of \n    the first list.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     isinstance(isinstance(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]), list),'strange_sort_list is not a list')\nassert     isinstance(isinstance(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8]), tuple),'strange_sort_list is not a tuple')\n\ndef sort_list_of_lists(lst):\n    '''\n    Given list of lists, return list in strange order.\n    Given list contains lists.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     spacy_model.to_dict() == strange_sort_list(['2','1','3','4','5','6'])\nassert     spacy_model.to_dict() == strange_sort_list(['2','1','3','4','5','6','7','8','9'])\nassert     spacy_model.to_dict() == strange_sort_list(['2','3','4','5','6','7','8','9','10'])\n\ndef print_list(lst, sep=' '):\n    '''\n    Print the given list, one item per line,\n    with a separator.\n    '''\n    pass\n\nprint_list([1,2,3,4,5,6,7,8,9,10])\nprint_list([1,2,3,4,5,6,7,8,9,10], sep='  ')\nprint_list(['cat', 'dog', 'horse','monkey', 'food'])"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     triangle_area(3, 4, 6) == 14.5\nassert     triangle_area(4, 3, 6) == -1\n\nprint('Triangle area is :', triangle_area(3, 4, 6))\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     triangle_area(2,3,4) == -1\nassert triangle_area(1,1,3) == 0\nassert triangle_area(1,4,1) == 3\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     triangle_area(3, 4, 5) == 3\nassert     triangle_area(5, 3, 7) == -1\nassert     triangle_area(3, -3, 0) == -2.0"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     triangle_area(2, 3, 3) == 4, 'Triangle Area: Failed'\nassert triangle_area(5, 2, 3) == -1, 'Triangle Area: Failed'"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     triangle_area(3, 4, 5) == 12.0, \"triangle_area(3, 4, 5) should return 12\"\nassert     triangle_area(1, 2, 3) == -1, \"triangle_area(1, 2, 3) should return -1\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     triangle_area(0, 0, 0) == 0\nassert     triangle_area(0, 0, 1) == 0\nassert     triangle_area(2, 0, 1) == 0\nassert     triangle_area(1, 2, 1) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     triangle_area(2.0, 2.0, 3.0) == -1\nassert triangle_area(0.0, 0.0, 0.0) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     triangle_area(4, 4, 4) == 4.0\nassert     triangle_area(4.0, 4, 4.0) == 4.0\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     triangle_area(2, 2, 2) == 2.0, \"The triangle_area function should return 2.0\"\nassert     triangle_area(1, 3, 4) == -1.0, \"The triangle_area function should return -1.0\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     triangle_area(1,1,1) == -1\n\ndef max_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     will_it_fly([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 4) == True\nassert    will_it_fly([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 7) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     will_it_fly(q,w) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     will_it_fly(a,10) == True\nassert     will_it_fly(a,10) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     will_it_fly(q=create_list(15), w=10) == True\nassert     will_it_fly(q=create_list(15), w=30) == False\nassert     will_it_fly(q=create_list(25), w=10) == False\nassert     will_it_fly(q=create_list(25), w=30) == True"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     will_it_fly(q=[[1,2,3],[4,5,6],[1,2,3]],'w') == True, \"q has to be a palindrome\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     will_it_fly(q,w) == True, \"will_it_fly\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     will_it_fly(['a', 'a', 'b'], 1) == True\nassert     will_it_fly(['a', 'a', 'a', 'b'], 1) == True\nassert     will_it_fly(['a', 'a', 'a', 'a', 'b', 'b'], 1) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     will_it_fly(None, None) == False\nassert will_it_fly(q, w) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     will_it_fly(q,w) == True\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     smallest_change(arr) == "
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     smallest_change([1, 3, 3, 3]) == 2, \"Test failed\"\nassert     smallest_change([3, 1, 3, 3]) == 2, \"Test failed\"\nassert     smallest_change([1, 1, 2, 3, 3, 3]) == 4, \"Test failed\"\nassert     smallest_change([1, 1, 2, 3, 3, 3, 3]) == 3, \"Test failed\"\nassert     smallest_change([1, 1, 1, 1, 1]) == 0, \"Test failed\"\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\nassert smallest_change([5,3,9,8,2,6,1,4,7,10,11]) == 7, \"should be 7\"\nassert smallest_change([1,2,3,4]) == 4, \"should be 4\"\nassert smallest_change([4,5,6,2,3,1]) == 2, \"should be 2\"\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef biggest_diff(arr):\n    \"\"\"\n    Given an array arr of integers, find the number of changes to the array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n\n\n\"\"\"\ndef reverse_list(arr):\n    \"\"\"\n    Given a list of numbers, return the list in reverse order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     smallest_change(arr = [5, 3, 1, 6, 8]) == 2\nassert     smallest_change(arr = [5, 2, 4, 6, 1]) == 2\nassert     smallest_change(arr = [5, 2, 3, 4, 6]) == 2\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     total_match([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 3]\nassert     total_match([1, 2, 3, 4, 5], ['a', 'b', 'c']) == ['a']\nassert     total_match([1, 2, 3, 4, 5], ['a', 'a', 'a']) == ['a', 'a']\nassert     total_match([1, 2, 3, 4, 5], ['c', 'd', 'e']) == ['c']\nassert     total_match([1, 2, 3, 4, 5], ['c', 'd', 'c', 'e']) == ['c']\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     total_match(['and', 'you', 'are', 'not','so'], \n                     ['good', 'well', 'they', 'are', 'and', 'you', 'are','so']) == ['good', 'well', 'they', 'are', 'and', 'you', 'are','so']\nassert     total_match(['and', 'you', 'are', 'not','so'],\n                     ['good', 'well', 'they', 'are', 'and', 'you', 'are','so']) == ['and']\nassert     total_match(['and', 'you', 'are', 'not','so'],\n                     ['good', 'well', 'they', 'are', 'and', 'you', 'are','so']) == ['and', 'you', 'are', 'not','so']\nassert     total_match(['and', 'you', 'are', 'not','so'],\n                     ['good', 'well', 'they', 'are', 'and', 'you', 'are','so']) == ['and', 'you', 'are', 'not','so']\nassert     total_match(['and', 'you', 'are', 'not','so'],\n                     ['good', 'well', 'they', 'are', 'and', 'you', 'are','so']) == ['and', 'you', 'are', 'not','so']\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     total_match(['a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'c', 'a', 'b'], ['a', 'b', 'c', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'b']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'b']\nassert     total_match(['a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'c', 'a', 'b'], ['a', 'b', 'c', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'b']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'b']\nassert     total_match(['a', 'a', 'a', 'a', 'b', 'a', 'a', 'a', 'c', 'a', 'b'], ['a', 'b', 'c', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'b']) == ['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'a', 'b']\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     total_match([\"hey\", \"hallo\", \"that\", \"is\", \"boob\", \"roi\"], \n                        [\"hey\", \"hallo\", \"that\", \"is\", \"boob\", \"roi\"]) == \"hey\", \"incorrect! Did you mean \" + total_match([\"hey\", \"hallo\", \"that\", \"is\", \"boob\", \"roi\"], [\"hey\", \"hallo\", \"that\", \"is\", \"boob\", \"roi\"])\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     total_match(['abc', 'def', 'cd'], ['abc', 'def', 'cd']) == ['abc', 'def']\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ntotal_match(['abc', 'bbc', 'cdef'], ['abc', 'bbc'])\nassert \n\ntotal_match([1,2,3,4], [1,2,3,4,5])\nassert\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     total_match(lst1, lst2) == lst1, \"The total number of chars in the list has to be equal to the other list.\"\n\ndef get_password(lst):\n    '''\n    Write a function that accepts a list of strings and returns the string that \n    have all the characters in the password.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_multiply_prime(4) == False\nassert is_multiply_prime(2) == True\nassert is_multiply_prime(5) == True\nassert is_multiply_prime(3) == True\nassert is_multiply_prime(100) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_multiply_prime(4) == True\nassert     is_multiply_prime(9) == True\nassert     is_multiply_prime(100) == True\nassert     is_multiply_prime(113) == True\n\ndef is_prime(n):\n    \"\"\"Write a function that returns true if the given number is prime and false otherwise.\n    Knowing that (a) is less then 100.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         is_multiply_prime(2) == True\nassert         is_multiply_prime(3) == True\nassert         is_multiply_prime(4) == False\nassert         is_multiply_prime(5) == False\nassert         is_multiply_prime(6) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_multiply_prime(42) == True\nassert     is_multiply_prime(3) == False\nassert     is_multiply_prime(0) == True\n\ndef is_prime(n):\n    \"\"\"Write a function that returns true if the number is prime and false otherwise.\n    The function is guaranteed to be called to be prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_multiply_prime(8) == False\nassert     is_multiply_prime(10) == True\nassert     is_multiply_prime(15) == False\nassert     is_multiply_prime(200) == True\nassert     is_multiply_prime(100) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_multiply_prime(0) == False\nassert     is_multiply_prime(1) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(7) == True\nassert     is_multiply_prime(1999) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_multiply_prime(1) == True\nassert     is_multiply_prime(2) == True\nassert     is_multiply_prime(3) == False\nassert     is_multiply_prime(0) == False\nassert     is_multiply_prime(99) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_multiply_prime(19) == True\nassert     is_multiply_prime(10) == True\nassert     is_multiply_prime(19) == False\nassert     is_multiply_prime(2) == True\nassert     is_multiply_prime(3) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_multiply_prime(1) == True\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(5) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_multiply_prime(25) == True\nassert     is_multiply_prime(10) == True\nassert     is_multiply_prime(0) == True\nassert     is_multiply_prime(1) == True\nassert     is_multiply_prime(1000000000000000000000000) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_simple_power(18, 0) == True\nassert     is_simple_power(18, 1) == False\nassert     is_simple_power(12, 3) == True\nassert     is_simple_power(12, 4) == False\nassert     is_simple_power(12, 5) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_simple_power(5,2) == True\nassert     is_simple_power(2,2) == False"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_simple_power(3, 5) == False\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(2, 5) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_simple_power(100, 3) == True\nassert     is_simple_power(1, 1) == False\nassert     is_simple_power(8, 1) == False\nassert     is_simple_power(8, 2) == True\nassert     is_simple_power(8, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_simple_power(3,4) == True\nassert     is_simple_power(5,2) == True\nassert     is_simple_power(6,1) == False\nassert     is_simple_power(12,4) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_simple_power(6, 6) == False\nassert     is_simple_power(8, 8) == False\nassert     is_simple_power(6, 2) == True\nassert     is_simple_power(8, 2) == True\nassert     is_simple_power(2, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_simple_power(1, 2) == True\nassert is_simple_power(2, 2) == False"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_simple_power(5, 2) == True\nassert     is_simple_power(7, 3) == False\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(1, 1) == True\nassert     is_simple_power(2, 0) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_simple_power(2, 3)\nassert     is_simple_power(4, 3)\nassert     is_simple_power(7, 2)\nassert     is_simple_power(7, 7)\nassert     is_simple_power(int('12345678901234', 3), 1)"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_simple_power(23, 1) == False\nassert     is_simple_power(3, 0) == False\nassert     is_simple_power(24, 0) == False\nassert     is_simple_power(36, 1) == False\nassert     is_simple_power(1234, 0) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     isfunc(iscube(10))\nassert     not isfunc(iscube(0))\nassert     not isfunc(iscube(0.0))\nassert     not isfunc(iscube(False))\nassert     not isfunc(iscube(None))\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \nassert\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     iscube(3) == True\nassert     iscube(7) == False\nassert     iscube(1) == False\nassert     iscube(2) == True\nassert     iscube(5) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     iscube(5) == True\nassert     iscube(6) == True\nassert     iscube(7) == False\nassert     iscube(10) == True\nassert     iscube(5) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     iscube(12) == True\nassert     iscube(False) == True\nassert     iscube(1) == False\nassert     iscube(0) == False\nassert     iscube(9) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     isfunc(isfunc)\nassert     isfunc(cube)"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     isfunc(isfunc) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     isfunc(iscube(3)) == True\nassert     isfunc(iscube(8)) == True\nassert     isfunc(iscube(9)) == True\nassert     isfunc(iscube(20)) == True\nassert     isfunc(iscube(30)) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     iscube(1)\nassert     iscube(1.0)\nassert     iscube(-1.5)\nassert     iscube(1.5)\nassert     iscube(2.0)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     iscube(5)\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     hex_key(123)==2\nassert     hex_key(23)==1\nassert     hex_key(0)==0\nassert     hex_key(101)==2\nassert     hex_key(1234)==1\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     hex_key(1) == \"0\"\nassert hex_key(10) == \"1\"\nassert hex_key(27) == \"2\"\nassert hex_key(30) == \"3\"\nassert hex_key(33) == \"4\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     hex_key(2) == 2\nassert     hex_key(3) == 3\nassert     hex_key(5) == 5\nassert     hex_key(7) == 7\nassert     hex_key(11) == 11\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     hex_key(0) == 0, \"0 is not a prime number\"\nassert     hex_key(1) == 1, \"1 is not a prime number\"\nassert     hex_key(2) == 2, \"2 is not a prime number\"\nassert     hex_key(3) == 3, \"3 is not a prime number\"\nassert     hex_key(4) == 4, \"4 is not a prime number\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     hex_key(10) == [2,3,5,7,11,13,17]\nassert     hex_key(1234567890) == [2,3,5,7,11,13,17]\nassert     hex_key(0) == []\nassert     hex_key(123) == []\nassert     hex_key(0xFF) == []\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     hex_key(10) == 2\nassert     hex_key(11) == 3\nassert     hex_key(12) == 5\nassert     hex_key(13) == 7\nassert     hex_key(14) == 11\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     hex_key(3) == \"3\"\nassert     hex_key(4) == \"4\"\nassert     hex_key(7) == \"7\"\nassert     hex_key(2) == \"9\"\nassert     hex_key(8) == \"F\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     hex_key(12) == 5\nassert     hex_key(0) == 2\nassert     hex_key(11) == 3\nassert     hex_key(6) == 5\nassert     hex_key(16) == 6\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     hex_key(5) == 5\nassert     hex_key(6) == 6\nassert     hex_key(7) == 7\nassert     hex_key(9) == 9\nassert     hex_key(10) == 10\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '0'\nassert     decimal_to_binary(3) == '1'\nassert     decimal_to_binary(4) == '0'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     decimal_to_binary(13) == \"0001\"\nassert     decimal_to_binary(123) == \"0001101\"\nassert     decimal_to_binary(0) == \"0000\"\nassert     decimal_to_binary(1) == \"1111\"\nassert     decimal_to_binary(-1) == \"1111101\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     decimal_to_binary(14) == '1'\nassert     decimal_to_binary(2) == '0'\nassert     decimal_to_binary(13) == '0'\nassert     decimal_to_binary(2) == '1'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(4) == '0b0'\nassert     decimal_to_binary(5) == '0b01'\nassert     decimal_to_binary(8) == '0b10'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     decimal_to_binary(1) == '1010'\nassert     decimal_to_binary(-1) == '1101'\nassert     decimal_to_binary(0) == '00'\nassert     decimal_to_binary(1.5) == '101'\nassert     decimal_to_binary(-1.5) == '1001'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == \"0000\"\nassert     decimal_to_binary(1) == \"0001\"\nassert     decimal_to_binary(2) == \"0010\"\nassert     decimal_to_binary(3) == \"0011\"\nassert     decimal_to_binary(4) == \"0100\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     decimal_to_binary('20') == '1'\nassert     decimal_to_binary(20) == '1'\nassert     decimal_to_binary(999) == '1'\nassert     decimal_to_binary(-999) == '1'\nassert     decimal_to_binary(0) == '0'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     decimal_to_binary(2) == '0b01'\nassert     decimal_to_binary(3) == '0b11'\nassert     decimal_to_binary(4) == '0b00'\nassert     decimal_to_binary(5) == '0b101'\nassert     decimal_to_binary(6) == '0b10101'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(10) == '101101'\nassert     decimal_to_binary(101) == '101101'\nassert     decimal_to_binary(111111111) == '11111111111'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_happy(\"abab\") == True\nassert     is_happy(\"aabb\") == True\nassert     is_happy(\"abbbaa\") == True\nassert     is_happy(\"ababbba\") == False\nassert     is_happy(\"aba\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_happy('a') == False\nassert     is_happy('ab') == True\nassert     is_happy('aab') == True\nassert     is_happy('aba') == False\nassert     is_happy('aab') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_happy(\"abcdefg\") == True\nassert     is_happy(\"abcdefg\") == True\nassert     is_happy(\"a\") == False\nassert     is_happy(\"a\") == True\nassert     is_happy(\"c\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_happy('') == True\nassert     is_happy('aaa') == False\nassert     is_happy('aabb') == True\nassert     is_happy('aaaab') == False\nassert     is_happy('abc') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_happy(s) == True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_happy(''.join(is_happy(s) for s in 'hello')) == True\nassert     is_happy(''.join(is_happy(s) for s in'madam')) == False\nassert     is_happy(''.join(is_happy(s) for s in 'abbb')) == False\nassert     is_happy(''.join(is_happy(s) for s in 'abba')) == False\nassert     is_happy(''.join(is_happy(s) for s in 'abcdefgh')) == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_happy(\"aba\") == True\nassert     is_happy(\"aba\") == True\nassert     is_happy(\"baab\") == True\nassert     is_happy(\"bababa\") == True\nassert     is_happy(\"aaaaa\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_happy(\"5\") == True\nassert     is_happy(\"3\") == True\nassert     is_happy(\"1\") == True\nassert     is_happy(\"22\") == True\nassert     is_happy(\"4\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_happy('test') == True\nassert     is_happy('odd') == False\nassert     is_happy('happy') == True\nassert     is_happy('sunny') == True\nassert     is_happy('garbage') == Fals"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     numerical_letter_grade(grades) == \"A+\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([4.0,3.7]) == ['A+','A','B+','B','C+','C','D+','D','E'], \"The first test failed\"\nassert         numerical_letter_grade([4.0,3.3]) == ['A+','A','B+','B','C+','C','D+','D','E'], \"The second test failed\"\nassert         numerical_letter_grade([4.0,3.0]) == ['A+','A','B+','B','C+','C','D+','D','E'], \"The third test failed\"\nassert         numerical_letter_grade([4.0,2.7]) == ['A+','A','B+','B','C+','C','D+','D','E'], \"The forth test failed\"\nassert         numerical_letter_grade([3.7,3.3]) == ['A+','A','B+','B','C+','C','D+','D','E'], \"The fifth test failed\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     (numerical_letter_grade([]) == [])\nassert     (numerical_letter_grade([4.0]) == [])\nassert     (numerical_letter_grade([3.7]) == [])\nassert     (numerical_letter_grade([3.3, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [])\nassert     (numerical_letter_grade([3.3, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['E'])\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     numerical_letter_grade(numpy.array([4.0,3.7,3.3])) == [0,0,0,0,0,0,0,0]\nassert     numerical_letter_grade(numpy.array([3.7,3.3,3.0])) == [0,0,0,0,0,0,0,0]\nassert     numerical_letter_grade(numpy.array([3.3,3.0,2.7])) == [0,0,0,0,0,0,0,0]\nassert     numerical_letter_grade(numpy.array([3.0,2.7,2.3])) == [0,0,0,0,0,0,0,0]\nassert     numerical_letter_grade(numpy.array([2.7,2.3,2.0])) == [0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     numerical_letter_grade(grades) == "
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n    \n    \ndef main():\n    \"\"\"\n    The program asks the user for the name of the file they want to read.\n    Then it will read the file, compute and output the letter grades of the students.\n    \"\"\"\n    # read the file\n    file = input(\"Enter a name of the file: \")\n    try:\n        fp = open(file, 'r')\n    except IOError:\n        print(\"Cannot open the file: \", file)\n        exit()\n    \n    # parse the file\n    lines = fp.readlines()\n    num_of_grades = len(lines)\n    for line in lines:\n        line = line.split()\n        # compute the letter grades\n        letter_grades = letter_grade(line)\n        # print the letter grades\n        print(line, \":\", letter_grades)\n    \n    fp.close()\n    \nmain()"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([5, 6, 6]) == [5.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([3.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == [3.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     prime_length(string) == True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     prime_length
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     prime_length(\"a\") == False\nassert     prime_length(\"a\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     prime_length('12345678910111213141516') == True\nassert     prime_length('3') == False\nassert     prime_length('10') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     prime_length('1') == True\nassert     prime_length('2') == False\nassert     prime_length('3') == False\nassert     prime_length('4') == False\nassert     prime_length('5') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     prime_length('abcde') == True\nassert     prime_length('abab') == True\nassert     prime_length('a') == False\nassert     prime_length('a') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     prime_length(0) == False\nassert     prime_length(1) == True\nassert     prime_length(2) == False\nassert     prime_length(3) == True\nassert     prime_length(4) == True\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     prime_length(\"check\") == True\nassert     prime_length(\"abc\") == False\nassert     prime_length(\"123456789\") == False\nassert     prime_length(\"\") == False\nassert     prime_length(\"a\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     prime_length('Hej!') == True\nassert     prime_length('hello') == False\nassert     prime_length('abc') == True\nassert     prime_length('abac') == True\nassert     prime_length('axx') == True\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     starts_one_ends(12) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     starts_one_ends(3) == 1\nassert     starts_one_ends(6) == 3\nassert     starts_one_ends(5) == 3\nassert     starts_one_ends(11) == 4\nassert     starts_one_ends(0) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     starts_one_ends(0) == 1\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(6) == 2\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(12) == 0\nassert     starts_one_ends(11) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     starts_one_ends(5) == 2\nassert     starts_one_ends(7) == 2\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(9) == 3\nassert     starts_one_ends(100000000) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     starts_one_ends(10) == 5\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     starts_one_ends(12) == 5\nassert     starts_one_ends(12) == 3\nassert     starts_one_ends(123) == 0\nassert     starts_one_ends(999) == 0\nassert     starts_one_ends(999) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         starts_one_ends(3) == 3\nassert         starts_one_ends(5) == 5\nassert         starts_one_ends(3) == 1\nassert         starts_one_ends(5) == 2\nassert         starts_one_ends(100) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     starts_one_ends(1) == 0\nassert starts_one_ends(2) == 0\nassert starts_one_ends(3) == 0\nassert starts_one_ends(6) == 1\nassert starts_one_ends(11) == 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\nassert     solve(5) == '1010101010'\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     solve(123) == '10101010' # (123)\nassert     solve(12345) == '10101011' # (12345)\nassert     solve(1234) == '10101010' # (1234)\nassert     solve(123456789) == '101010101' # (123456789)\nassert     solve(12345678912345) == '101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     solve(0) == 0\nassert     solve(1) == 0\nassert     solve(10000000000000000000000) == 0\nassert     solve(100) == 0\nassert     solve(100000000) == 0\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     solve(N = 25) == 0\nassert     solve(N = 5) == 4\nassert     solve(N = 1) == 0\nassert     solve(N = 0) == 0\nassert     solve(N = -2) == 0\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     solve(12) == 8\nassert     solve(13) == 42\nassert     solve(14) == 4\nassert     solve(15) == 2\nassert     solve(16) == 10\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\n\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     solve(0) == 0\nassert     solve(1) == 1\nassert     solve(2) == 3\nassert     solve(3) == 5\nassert     solve(4) == 10\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     solve(4) == 12\nassert     solve(123) == 8\nassert     solve(26) == 8\nassert     solve(9) == 5\nassert     solve(127) == 4\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     add([]) == []\nassert     add([1,2,3,4]) == [1,2,3,4]\nassert     add([6,7,8]) == [6,7,8]\nassert     add([]) == []\nassert     add([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\ndef test_add():\n    lst = [0,1,2,3,4]\n    assert add(lst) == [0, 1, 2, 3, 4]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     add([1,2,3,4,5]) == [1,3,5,4,5]\nassert     add([2,3,4,5,6]) == [2,3,4,5,6]\nassert     add([1,2,2,2,2]) == [1,2,2,2,2]\nassert     add([]) == []\nassert     add([1,2,2,2,2]) == [1,2,2,2,2]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         add([1, 2, 3, 4, 5]) == [1, 3, 5, 5]\nassert         add([2, 3, 4, 5, 6]) == [2, 3, 5, 6, 6]\nassert         add([3, 4, 5, 6, 7, 8, 9]) == [3, 4, 5, 6, 7, 8, 9]\nassert         add([0, 1, 2, 3]) == [0, 1, 2, 3]\nassert         add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     add([3, 5, 1]) == [3, 5, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         add([2,4,6]) == [2,3,4,6]\nassert         add([]) == []\nassert         add([1,3,5]) == [1,3,5]\nassert         add([1,2,5]) == [1,2,5]\nassert         add([1,2,4]) == [1,2,4]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \nassert\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     add([]) == []\nassert     add([0,2,4,6,8]) == [0,1,3,5,7]\nassert     add([1,3,5,7,9]) == [1,3,5,7,9]\nassert     add([1,3,5,7,9,11]) == [1,3,5,7,9,11]\nassert     add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"Hello world!\\n\") == \"helloworld\"\nassert     anti_shuffle(\"1 2 3 4\") == \"1 2 3 4\"\nassert     anti_shuffle(\"2 3 4 1\") == \"2 3 4 1\"\nassert     anti_shuffle(\"\\n\") == \"\"\nassert     anti_shuffle(\"\") == \"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     anti_shuffle(\"hello world\") == \"world hello\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     anti_shuffle('a b c d e f') == 'e d f a b c'\nassert     anti_shuffle('a bc e f') == 'e f a b c'\nassert     anti_shuffle('abcd e f') == 'e f a b c'\nassert     anti_shuffle('a e f d e f') == 'f a e d e f'\nassert     anti_shuffle('a f d e') == 'f d e a'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"one two three four five\") == \"one2three4five\"\nassert     anti_shuffle(\"one two three four five\") == \"one2three4five\"\nassert     anti_shuffle(\"one two three 4 five\") == \"one2three4five\"\nassert     anti_shuffle(\"one 2 three 4 five\") == \"one2three4five\"\nassert     anti_shuffle(\"one two 3 4 five\") == \"one2three4five\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     str(anti_shuffle(\"hello world\")) == \"el olleh o world\"\nassert     str(anti_shuffle(\"the quick brown fox jumps over the lazy dog\")) == \"the quick brown fox jumps over the lazy dog\"\nassert     str(anti_shuffle(\"h e l e l o u t i\")) == \"hello world\"\n\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     anti_shuffle(\"This is a text string.\") == \"This is a text string.\"\nassert     anti_shuffle(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"\nassert     anti_shuffle(\"The quick brown fox jumps over the lazy dog... \") == \"The quick brown fox jumps over the lazy dog....\"\nassert     anti_shuffle(\"The quick brown fox jumps over the lazy dog.... \") == \"The quick brown fox jumps over the lazy dog..\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     anti_shuffle('Howdy, how are you?') == 'HAYDROMAT', \\\n'The function should return \"HAYDROMAT\",'\\\n'but it returned something different.'\nassert     anti_shuffle('Lisen', 'the') == 'lisa', \\\n'The function should return \"lisa\", but it returned something different.'\nassert     anti_shuffle('a') == 'a', \\\n'The function should return \"a\", but it returned something different.'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     anti_shuffle('a b c d') == 'abc bcd d'\nassert     anti_shuffle('qwertyuiop asdfghjkl') == 'qwertyuiop qwerttyuiop asdfghjkl'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     get_row( [[0,0],[0,1],[1,0]]    , 0) == [0,1]\nassert     get_row( [[0,1],[1,0]]    , 0) == [0,0]\nassert     get_row( [[0,0],[0,1],[1,1]]    , 0) == [0,1]\nassert     get_row( [[0,1],[1,1]]    , 1) == [1,1]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     [1, 1, 3, 4, 5, 6, 7, 8] == get_row([1, 2, 3, 4, 5, 6, 7, 8], 3)\n\ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of rows.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     get_row([4, 6, 5, 1, 2], 2) == [(4, 6), (5, 1), (1, 2)]\n\ndef is_in_grid(row, col, grid):\n    \"\"\"\n    Check if a cell in the given grid is in the list of coordinates.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     get_row([1,2,3,4], 1) == [(1, 2), (2, 3), (3, 4)]\nassert get_row([1,2,3,4], 4) == [(1, 2), (2, 3)]\nassert get_row([1,2,3,4], 6) == [(1, 2), (2, 3), (4,)]\nassert get_row([1,2,3,4], 7) == [(1, 2), (2, 3), (4,)]\nassert get_row([1,2,3,4], 0) == [(1, 2), (2, 3), (4,)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, row), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     get_row([1,2,3,4],5) == [(5,4),(4,3),(3,2),(2,1)]\nassert     get_row([1,2,3,4],6) == [(6,4),(4,3),(3,2),(2,1)]\nassert     get_row([1,2,3,4,5,6,7,8,9,10],11) == [\n    (11,8),(9,7),(6,5),(5,4),(4,3),(3,2),(2,1),(1,0),(0,1)]\nassert     get_row([1,2,3,4,5,6,7,8,9,10],11) == [(10,8),(9,7),(6,5),(5,4),(4,3),(3,2),(2,1),(1,0),(0,1)]\n\n\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     get_row(lst, 0) == [(0, 0), (1, 0)]\nassert     get_row(lst, 1) == [(0, 0), (1, 0)]\nassert     get_row(lst, 2) == [(0, 1), (1, 2)]\nassert     get_row(lst, 3) == [(0, 0), (1, 1), (2, 2)]\nassert     get_row(lst, 4) == [(0, 2), (1, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     get_row([[1, 2], [2, 3], [3, 4]], 1) == [(1, 2), (2, 3), (3, 4)]\nassert     get_row([[1, 2], [2, 3], [3, 4]], 4) == [(1, 2), (2, 3), (3, 4)]\nassert     get_row([[1, 2, 3], [2, 3, 4]], 1) == [(1, 2), (2, 3), (3, 4)]\nassert     get_row([[1, 2, 3], [2, 3, 4]], 4) == [(1, 2), (2, 3), (3, 4)]\nassert     get_row([[1, 2, 3, 4]], 1) == [(1, 2), (2, 3), (3, 4)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_array([1, 5, 9, 7, 2, 4, 6, 5, 10, 3, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15]\nassert     sort_array([4, 6, 2, 3, 15, 7, 1, 9, 8, 5, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15]\nassert     sort_array([1, 5, 3, 7, 9, 2, 4, 6, 8, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15]\nassert     sort_array([2, 3, 6, 5, 7, 9, 10, 1, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert     sort_array([1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_array([8, 4, 5, 1, 2, 3, 7, 6]) == [1, 2, 3, 5, 7, 8, 6, 4]\nassert     sort_array([]) == []\nassert     sort_array([5, 3, 8, 2, 4, 9, 0, 1]) == [0, 1, 2, 3, 4, 5, 7, 8]\nassert     sort_array([-2, -5, -4, -8, -7, -1, 0, 1, 2, 3, 4, 5]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]\nassert     sort_array([-10, -8, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\n\n\ndef merge(a, b, c):\n    \"\"\"\n    Given 2 arrays, merge their elements such that all the elements in the two arrays are non-negative.\n    # merge the two arrays, each sorted in ascending order, then merge the two arrays in descending order,\n    # then merge the two arrays, and so on, until the sums of their individual elements are equal.\n\n    Args:\n        a, b, c (int): 2 arrays to merge\n\n    Returns:\n        a, b, c (int): a, b, c (int): the merged array\n    \"\"\"\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sort_array(array = []) == []\nassert     sort_array(array = [1]) == [1]\nassert     sort_array(array = [1,2]) == [1,2]\nassert     sort_array(array = [3,2]) == [3,2]\nassert     sort_array(array = [3,5,2]) == [3,2,5]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sort_array([]), \"The input array is incorrect\"\nassert     sort_array([-1, 5, 3, 2, 0]), \"The input array is incorrect\"\nassert     sort_array([2, 1, -1]), \"The input array is incorrect\"\nassert     sort_array([-2, 3, 1, 0]), \"The input array is incorrect\"\nassert     sort_array([-2, 3, 1, 0, 2, 4, 6]), \"The input array is incorrect\"\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \nassert sort_array([]) == []\nassert sort_array([7, 5, 3, 1, 2, 8, 4]) == [1, 2, 3, 4, 5, 7, 8]\nassert sort_array([3, 4, 5, 2, 7, 8, 1, 9]) == [1, 2, 3, 4, 5, 7, 8, 9]\nassert sort_array([7, 8, 7, 1, 3, 2, 4, 5, 9, 5, 8, 6, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 8, 7, 1]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_array(array) == sorted(array)\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sort_array([10, 9, 2, 5, 6, 7]) == [2, 6, 7, 5, 9, 10]\nassert     sort_array([1, 7, 9, 8, 6, 2, 5]) == [2, 3, 4, 5, 7, 8, 6]\nassert     sort_array([]) == []\nassert     sort_array([1, 2, 3]) == [1, 2, 3]\nassert     sort_array([10, 2, 3, 1]) == [1, 2, 3, 10]\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     encrypt('hello') == 'loleh'\nassert     encrypt('foo') == 'foofo'\nassert     encrypt('foo') == 'foofo'\nassert     encrypt('foo') == 'foofo'\nassert     encrypt('hello') == 'hello'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     encrypt('Rota') == 'cr'\nassert     encrypt('Rota') == 'cr'\nassert     encrypt('Rota') == 'r'\nassert     encrypt('Rota') == 'r'\nassert     encrypt('Rota') == 'R'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     encrypt(\"bad\") == \"bad\"\nassert encrypt(\"bad\") == \"bad\"\nassert encrypt(\"bad\") == \"bad\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     encrypt(\"adcadabcd\") == \"cdcdadbb\"\nassert     encrypt(\"qwertyuiop\") == \"opqwyrtyui\"\nassert     encrypt(\"hello world\") == \"wlrldodwhm\"\nassert     encrypt(\"aabb\") == \"aaababb\"\nassert     encrypt(\"\") == \"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     encrypt(\"Hello, World!\") == \"GJZxGZgkWZhgWXOSqjb\"\nassert     encrypt(\"abcde\") == \"aacabcd\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     encrypt(\"hello\") == \"eha\"\nassert encrypt(\"my name is hoow\") == \"my name is hoow\"\nassert encrypt(\"we are the so bad man\") == \"we are the so bad man\"\nassert encrypt(\"arbitrary word\") == \"arbitrary word\"\nassert encrypt(\"x y z\") == \"xyz\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     next_smallest([10, 12, 23, 75, 10]) == 15\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\nassert     next_smallest([1, 1, 1, 1, 1]) == 1\nassert     next_smallest([1, 1, 2, 2, 3]) == 1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     next_smallest([-4, 3, 2, -5, 1, 0, -6]) == -6, \"wrong\"\nassert     next_smallest([-4, 3, 2, -5, 1, 0, -6]) == -4, \"wrong\"\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \nassert next_smallest([2,4,5,6]) == 3\n\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     next_smallest([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     next_smallest([1,5,2,3,4]) == 2\nassert     next_smallest([2,5,3]) == 2\nassert     next_smallest([1,5,2]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     next_smallest([5, 4, 3, 2, 1]) == 3\nassert     next_smallest([1, 1]) == 1\nassert     next_smallest([2, 2, 3, 4, 4, 5]) == 4\nassert     next_smallest([]) == None\n\ndef next_smallest_recurse(lst):\n    \"\"\"\n    You are given a list of integers.\n    Return the smallest element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     next_smallest([-5, -3, 3, -4, -1, 0]) == 3, 'the next smallest number should be 3'\nassert     next_smallest([3, -1, 3, 2, 5]) == 2, 'the next smallest number should be 2'\nassert     next_smallest([-5, -3, 3, -4, -1, 0]) == 3, 'the next smallest number should be 3'\nassert     next_smallest([]) == None, 'the next smallest number should be None'"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     next_smallest([1, 5, 3, 4, 9, 7, 2]) == 5\nassert     next_smallest([1, 2, 3, 4, 5]) == 3\nassert     next_smallest([]) == None\nassert     next_smallest([-1]) == -1\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     next_smallest([1, 2, 5, 5, 6, 8]) == 5\nassert     next_smallest([4, 6, 2, 7, 8]) == 7\nassert     next_smallest([3, 6, 4, 6, 8]) == 6\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_bored(S) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_bored('The quick brown fox jumps over the lazy dog')\nassert is_bored('The quick brown fox jumps over the lazy dog')\nassert is_bored('The quick brown fox jumps over the lazy dog.')\nassert is_bored('I love cats.')\nassert is_bored('I love cats.')\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_bored('I am happy.')\nassert     not is_bored('This is a boring message.')\nassert     not is_bored('That is an boring message.')\nassert     not is_bored('I am happy.')\nassert     is_bored('I am happy.')\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_bored('I') == 1\nassert     is_bored('i') == 1\nassert     is_bored('Who knows?') == 1\nassert     is_bored('i?') == 1\nassert     is_bored('!I') == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_bored(S1) == 2\nassert     is_bored(S2) == 2\nassert     is_bored(S3) == 2\nassert     is_bored(S4) == 2\nassert     is_bored(S5) == 2\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_bored(is_bored(\"I am great, I am bored!\")) == True\nassert     is_bored(is_bored(\"I am not a teacher!\")) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_bored('') == 0\nassert     is_bored('?') == 1\nassert     is_bored('!') == 0\nassert     is_bored('Hello') == 2\nassert     is_bored('Hello!') == 3\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_bored('I think I will be bored') == 0\nassert     is_bored('I won\u2019t be bored') == 1\nassert     is_bored('I will be bored') == 2\nassert     is_bored('I\\'m a boring day, I\\'m not so bored') == 2\nassert     is_bored('Do not curse me') == 3\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_bored(\"i am fine\")\nassert     is_bored(\"i am not fine\")\nassert     is_bored(\"i am fine but not with you\")\nassert     is_bored(\"i am not fine but not with you!\")\nassert     is_bored(\"am so sorry I am not doing this\")\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     any_int(1, 2, 3) == True, '1'\nassert     any_int(1, 2, 1) == False, '2'\nassert     any_int(1, 0, 2) == True, '3'\nassert     any_int(1, 2, 0) == True, '4'\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     any_int(2, 3, 4) == True\nassert     any_int(2, 4, 4) == False\nassert     any_int(2, 2, 2) == True\nassert     any_int(2, 5, 5) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     any_int(1,2,3) == True, \"The function must return True.\"\nassert     any_int(2,1,3) == False, \"The function must return False.\"\nassert     any_int(1,2,4) == True, \"The function must return True.\"\nassert     any_int(1,2,4) == False, \"The function must return False.\"\nassert     any_int(3,2,1) == True, \"The function must return True.\"\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(3, 2, 3) == True\nassert     any_int(1, 3, 4) == False\nassert     any_int(1, -1, 1) == False\nassert     any_int(0, -1, -1) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(0, 2, 3) == False\nassert     any_int(1, 3, 2) == True\nassert     any_int(0, 3, 2) == False"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     any_int(1, 1, 1) == True\nassert     any_int(1, 3, 1) == True\nassert     any_int(1, 2, 2) == True\nassert     any_int(2, 2, 2) == True\nassert     any_int(3, 2, 2) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     any_int(12, -1, 12) == True, \"any_int() failed to return True for any_int(12, -1, 12)\"\nassert     any_int(12, 0, 12) == False, \"any_int() failed to return False for any_int(12, 0, 12)\"\nassert     any_int(12, 1, 12) == False, \"any_int() failed to return False for any_int(12, 1, 12)\"\nassert     any_int(12, 2, 12) == False, \"any_int() failed to return False for any_int(12, 2, 12)\"\nassert     any_int(12, 3, 12) == False, \"any_int() failed to return False for any_int(12, 3, 12)\"\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     any_int(1,2,3)\nassert     any_int(-1,2,3)\nassert     any_int(1,4,3)\nassert     any_int(1,3,2)\nassert     any_int(1,3,4)\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \nassert any_int(3, 3, 3) == True\nassert any_int(5, 3, 3) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     encode('HelloWorld') == 'ello'\nassert     encode('HelloWorld') == 'leo'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     encode('The quick brown fox jumps over the lazy dog') == 'qijbxyiobdd'\nassert     encode('qijbxyiobdd') == 'The quick brown fox jumps over the lazy dog'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     encode('Naila bea') == 'AELb ELB BEa'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     encode('I am a person') == 'I am a person'\nassert     encode('I am a person!') == 'I am a person!'\nassert     encode('I am a person!&I am a person') == 'I am a person!&I am a person'\nassert     encode('I am a person!&I am a person') == 'I am a person!'\nassert     encode('I am a person!&I am a person&I am a person') == 'I am a person!'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     encode(message = \"A drum starts with a drum of EADS, but a drum of DIE SAD.\", \n                vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"}) == \"EADSDIE\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         encode(\"\") == \"\", \"Empty message not allowed\"\nassert         encode(\"Hello\") == \"Hellow\", \"Missing word not allowed\"\nassert         encode(\"HiThere\") == \"HiiThere\", \"Missing word not allowed\"\nassert         encode(\"How are you?\") == \"Hooo\", \"Missing word not allowed\"\nassert         encode(\"AaBbCcDD\") == \"aBbCdDD\", \"Missing word not allowed\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     encode('Hello world') == 'ello wo rldl'\nassert     encode('abcdefgh') == 'abefegdeh'\nassert     encode('mno.e.t.w') =='mtEW'\nassert     encode('abcde') == 'abcde'\nassert     encode('\u0152e') == 'e\u0152'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     encode(\"Hello\") == \"llo\"\nassert     encode(\"world\") == \"dworld\"\nassert     encode(\"Hi There\") == \"thihtouhere\"\nassert     encode(\"Hi there!\") == \"hi there!\"\nassert     encode(\"Hi there!\") == \"hi there!\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     encode(\"Hello World\") == \"olleH oW lErD\"\nassert     encode(\"Hello World\") == \"HelloWorld\"\nassert     encode(\"wRlD\") == \"WrdlD\"\nassert     encode(\"wRlD\") == \"WrdD\"\nassert     encode(\"HelloWorld\") == \"HelloWorld\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     encode('abc') == 'cba'\nassert     encode('Maa') == 'Maa'\nassert     encode('aAbd') == 'dAbb'\nassert     encode('Maa maa') == 'Maa Maa'\nassert     encode('Waw') == 'WAW'\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     skjkasdkd([1]) == 1\nassert     skjkasdkd([2,3,5]) == 10\nassert     skjkasdkd([3,2,2,1]) == 6\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         skjkasdkd([]) == 0\nassert         skjkasdkd([3,4,5,6,7,8,9]) == 23\nassert         skjkasdkd([6,8,9,1,2]) == 8\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     (skjkasdkd([]) == 0)\nassert    (skjkasdkd([1,2,3,5,6,7,8,9,10,11,12,14,16,20,21,22,23]) == 15)\nassert    (skjkasdkd([2,3,5,6,7,8,9,10,11,12,14,16,20,21,22,23]) == 24)\nassert    (skjkasdkd([3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 30)\nassert    (skjkasdkd([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 120)\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     isinstance(skjkasdkd, list),'skjkasdkd must be a list'\nassert skjkasdkd,'skjkasdkd list is empty'\nassert len(skjkasdkd) >= 1,'skjkasdkd must contain at least one element'\nassert all([type(item) == int for item in skjkasdkd]), 'all elements in skjkasdkd must be integers'\nassert all([1 <= item <= 2 ** 31 for item in skjkasdkd]), 'all elements in skjkasdkd must be in range [1, 2 ** 31]'\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\nprint(skjkasdkd([2, 5, 3, 4, 5]))\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     skjkasdkd([]) == 0\nassert     skjkasdkd([1]) == 1\nassert     skjkasdkd([2]) == 1\nassert     skjkasdkd([3]) == 2\nassert     skjkasdkd([4]) == 2\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert      skjkasdkd([]) == 0\nassert      skjkasdkd([1]) == 1\nassert      skjkasdkd([3]) == 1\nassert      skjkasdkd([4]) == 2\nassert      skjkasdkd([9]) == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     skjkasdkd([]) == 0\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,10]) == 50\nassert     skjkasdkd([2,4,6,8,10,12,14,16,18,20]) == 50\nassert     skjkasdkd([3,4,6,8,10,12,14,16,18,20]) == 50\nassert     skjkasdkd([5,6,7,8,10,12,14,16,18,20]) == 100\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     skjkasdkd([]) == 0\nassert     skjkasdkd([1]) == 1\nassert     skjkasdkd([5]) == 5\nassert     skjkasdkd([10]) == 100\nassert     skjkasdkd([3,2,2,4,6,8,9,11]) == 12345\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'name': 'Sam'}) == False\nassert     check_dict_case(None) == False\nassert     check_dict_case(False) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     check_dict_case({'1':'1'}) == True\nassert     check_dict_case({'1':'1', '2':'2'}) == True\nassert     check_dict_case({'1':'1'}) == False\nassert     check_dict_case({'A':'a', 'B':'b'}) == True\nassert     check_dict_case({'A':'a', 'B':'b'}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     check_dict_case({\"a\": 1, \"A\": 1, \"a\": 1, \"a\": 1, \"A\": 1}) == True\nassert     check_dict_case({\"a\": 1, \"A\": 1, \"a\": 1, \"a\": 1, \"A\": 1}) == True\nassert     check_dict_case({\"a\": 1, \"A\": 1, \"a\": 1, \"a\": 1, \"A\": 1}) == False\nassert     check_dict_case({\"a\": 1, \"A\": 1, \"a\": 1, \"a\": 1, \"A\": 1}) == False\nassert     check_dict_case({\"a\": 1, \"A\": 1, \"a\": 1, \"a\": 1, \"A\": 1}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     check_dict_case({\"a\":1,\"b\":2, \"C\":3, \"D\":4, \"e\":5})\nassert     check_dict_case({\"c\":1, \"d\":2, \"e\":3, \"f\":4, \"g\":5})\nassert     check_dict_case({\"c\":1, \"d\":2, \"e\":3, \"f\":4, \"g\":5, \"h\":6})\nassert     check_dict_case({\"c\":1, \"d\":2, \"e\":3, \"f\":4, \"g\":5, \"h\":6, \"i\":7})\nassert     check_dict_case({\"c\":1, \"d\":2, \"e\":3, \"f\":4, \"g\":5, \"h\":6, \"i\":7, \"j\":8})\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         check_dict_case({}) == False\nassert check_dict_case({\"\": \"\"}) == True\nassert check_dict_case({\"a\": \"a\", \"B\": \"b\", \"c\": \"c\"}) == True\nassert check_dict_case({\"a\": \"a\", \"b\": \"b\"}) == False\nassert check_dict_case({\"a\": \"a\", \"b\": \"b\", \"c\": \"c\", \"d\": \"d\"}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     check_dict_case({\"ab\": \"a\", \"AB\": \"a\"}) == True\nassert     check_dict_case({\"ab\": \"A\", \"AB\": \"A\"}) == True\nassert     check_dict_case({\"ab\": \"a\", \"ab\": \"A\", \"A\": \"a\"}) == True\nassert     check_dict_case({\"ab\": \"a\", \"A\": \"a\", \"ab\": \"a\", \"ab\": \"a\"}) == True\nassert     check_dict_case({\"ab\": \"A\", \"AB\": \"A\", \"ab\": \"A\"}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     check_dict_case({'a':'A'}) == True\nassert     check_dict_case({'a':'A', 'b':'B'}) == False\nassert     check_dict_case({'a':'A', 'b':'B'}) == False\nassert     check_dict_case({'a':'A', 'b':'B', 'c':'C'}) == False\nassert     check_dict_case({'a':'A', 'b':'B'}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     check_dict_case({'a': 1, 'b': 2}) == True\nassert check_dict_case({'a': '1', 'b': '2'}) == True\nassert check_dict_case({'A': 1, 'B': 2}) == True\nassert check_dict_case({'a': '1', 'b': '2'}) == False\nassert check_dict_case({}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 'A', 'b': 'B', 'c': 'C'}) == False\nassert     check_dict_case({'A': 'A', 'a': 'A', 'A': 'A'}) == False\nassert     check_dict_case({'A': 'A', 'A': 'A', 'a': 'A', 'A': 'A'}) == False\nassert     check_dict_case({'A': 'A', 'B': 'B', 'a': 'A', 'A': 'A'}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     check_dict_case({'a':'', 'b':'c', 'c':'e', 'd':'f'}) == True\nassert     check_dict_case({'a':'c', 'b':'e', 'c':'f', 'd':'g'}) == False\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     count_up_to(1) == [1]\nassert     count_up_to(2) == [2, 2]\nassert     count_up_to(3) == [3, 3, 3]\nassert     count_up_to(4) == [4, 4, 4, 4]\nassert     count_up_to(5) == [5, 5, 5, 5, 5]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == [1]\nassert     count_up_to(3) == [3, 2]\nassert     count_up_to(10) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert     count_up_to(-1) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     count_up_to(5) == [2, 3, 5, 7, 9]"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     count_up_to(1) == []\nassert     count_up_to(10) == [1, 2, 3, 5, 7, 11]\nassert     count_up_to(1000000) == []\nassert     count_up_to(100000000) == []\nassert     count_up_to(-1) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     count_up_to(4) == [2,3,5]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(2) == [2]\nassert     count_up_to(9) == [2, 3, 5, 6, 7, 8, 9]\nassert     count_up_to(1) == []"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(-2) == []\nassert     count_up_to(4) == [2,3,5,7]\nassert     count_up_to(7) == [2,3,5,7]\nassert     count_up_to(5) == [2,3,5,7]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     count_up_to(0) == []\nassert count_up_to(1) == []\nassert count_up_to(2) == []\nassert count_up_to(3) == [2]\nassert count_up_to(4) == [3, 4]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         count_up_to(0) == []\nassert         count_up_to(1) == []\nassert         count_up_to(2) == [2, 3]\nassert         count_up_to(3) == [3]\nassert         count_up_to(4) == [4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     multiply(3, 3) == 6\nassert     multiply(-1, 3) == -6\nassert     multiply(12345, -12345) == -12345\nassert     multiply(12345, 0) == -12345\nassert     multiply(12345, 1) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     multiply(2, 3) == 6\nassert     multiply(2, 2) == 4\nassert     multiply(2, 3.5) == 12.0\nassert     multiply(3, 3) == 3\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     multiply(6, 5) == 10\nassert     multiply(6, 8) == 40\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     multiply(45, 42) == 57\nassert     multiply(1, 2) == 1\nassert     multiply(45, 45) == 0\nassert     multiply(12, 45) == 0\nassert     multiply(3, 2) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     multiply(6, 4) == 24\nassert     multiply(5, 3) == 25\nassert     multiply(6, -1) == 1\nassert     multiply(6, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     multiply(1, 2) == 3\nassert     multiply(1, 2.0) == 3\nassert     multiply(1, 2e5) == 1.0\nassert     multiply(1, -2) == -2\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     multiply(5, 5) == 25\nassert     multiply(5, 6) == 25\nassert     multiply(6, 5) == 6\nassert     multiply(1, 0) == 0\nassert     multiply(1, 1) == 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     multiply(2, 1) == 2\nassert     multiply(2, 3) == 6\nassert     multiply(2, 0) == 2\nassert     multiply(3, 0) == 0\nassert     multiply(2, -1) == 1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     multiply(3, 5) == 15\nassert     multiply(2, 4) == 4\nassert     multiply(3, 9) == 81\nassert     multiply(1, 1) == 1\nassert     multiply(1, 0) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     count_upper(\"\") == 0\nassert count_upper(\"ABC\") == 3\nassert count_upper(\"BEEF\") == 4\nassert count_upper(\"aaaBB\") == 4\nassert count_upper(\"aBbBcC\") == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     count_upper('') == 0\nassert count_upper('a') == 0\nassert count_upper('A') == 0\nassert count_upper('0123456789') == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     count_upper(\"Inh\") == 1\nassert     count_upper(\"xnxxx\") == 0\nassert     count_upper(\"test.txt\") == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     count_upper(upper_case) == 7"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     count_upper('trp') == 2\nassert     count_upper('eo') == 0\n\nprint(\"ok\")\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     count_upper(\"Hello world\") == 4, \"count_upper() failed\"\nassert     count_upper(\"Hello\") == 2, \"count_upper() failed\"\nassert     count_upper(\"Helloworld\") == 0, \"count_upper() failed\"\nassert     count_upper(\"DdDdDddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     count_upper(\"AA\") == 3\nassert     count_upper(\"AB\") == 1\nassert     count_upper(\"\") == 0\nassert     count_upper(\"a\") == 1\nassert     count_upper(\"Ab\") == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     count_upper(\"hello\") == 0\nassert     count_upper(\"X\") == 0\nassert     count_upper(\"abc\") == 0\nassert     count_upper(\"abcd\") == 0\nassert     count_upper(\"ABCD\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     count_upper(\"aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaA"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     count_upper('oiqgjkis') == 4\nassert     count_upper('Wee Waa rpww') == 5\nassert     count_upper('QWqb Aaiw') == 2\nassert     count_upper('x') == 0\nassert     count_upper('z') == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     closest_integer(\"\") == 0\nassert closest_integer(\"5\") == 5\nassert closest_integer(\"123.456\") == 123\nassert closest_integer(\"10000.00\") == 10000\nassert closest_integer(\"-10000.00\") == -10000\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n\nprint(\"all cases passed\""
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     closest_integer(0) == 0\nassert     closest_integer(\"1\") == 1\nassert     closest_integer(\"2.5\") == 2\nassert     closest_integer(\"1.5\") == 1\nassert     closest_integer(\"1+2\") == 3\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-0.5\") == 0\nassert     closest_integer(\"0.0\") == 0\nassert     closest_integer(\"9.99\") == 9\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     closest_integer(\"123.456\") == 123.45\nassert     closest_integer(\"-123.456\") == -123.45\nassert     closest_integer(\"0.123456\") == 0.123456\nassert     closest_integer(\"-0.123456\") == -0.123456\nassert     closest_integer(\"0.0\") == 0.0\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     closest_integer(\"1234.56789\") == 1234\nassert     closest_integer(\"-6\") == 0\nassert     closest_integer(\"0\") == 0\nassert     closest_integer(\"-1.0\") == 0.0\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         closest_integer(\"14.5\") == 15\nassert         closest_integer(\"-14.5\") == -15\nassert         closest_integer(\"15.5\") == 15\nassert         closest_integer(\"-15.5\") == -15\nassert         closest_integer(\"1.5\") == 1\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == 1\nassert     make_a_pile(3) == 1\nassert     make_a_pile(4) == 1\nassert     make_a_pile(5) == 1\nassert     make_a_pile(6) == 3\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     make_a_pile(0) == 0\nassert     make_a_pile(1) == 1\nassert     make_a_pile(2) == 2\nassert     make_a_pile(3) == 3\nassert     make_a_pile(4) == 4\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \nassert \n\n\n\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     make_a_pile(5) == [5,4,3,2,1]\nassert     make_a_pile(3) == [3,3]\nassert     make_a_pile(0) == []\nassert     make_a_pile(3) == [3,3]\nassert     make_a_pile(3) == [3,3]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \nmake_a_pile(4) == [1, 3, 3, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     make_a_pile(3) == [4, 2, 1]\nassert     make_a_pile(5) == [3, 5, 3, 1, 1]\nassert     make_a_pile(7) == [7, 5, 3, 5, 1, 1, 1]\nassert     make_a_pile(9) == [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     make_a_pile(6) == [6, 4, 4, 4, 3, 4]\nassert     make_a_pile(5) == [5, 3, 3, 3, 2, 2]\nassert     make_a_pile(4) == [4, 2, 2, 2, 1, 1]\nassert     make_a_pile(3) == [3, 1, 1, 1, 0, 0]\nassert     make_a_pile(2) == [2, 0, 0, 0, 1, 0]\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     words_string(WORDS) == [\"hello\", \"hel\", \"ello\", \"ello\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     words_string(\"hello world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello\") == [\"hello\"]\nassert     words_string(\"\") == []\nassert     words_string(\"hello\") == []\nassert     words_string(\" \") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     words_string('1,2,3') == ['1', '2', '3']\nassert     words_string('a,b,c') == ['a', 'b', 'c']\nassert     words_string('a,b,a') == ['a', 'b', 'a']\nassert     words_string('2,3,4') == ['2', '3', '4']\nassert     words_string('a,b') == ['a', 'b']\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     words_string(\"This is a sentence.\") == [\"This\", \"is\", \"a\", \"sentence\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     words_string(\"Hello, world\") == [\"Hello\", \"world\"]\nassert     words_string(\"  hello, world  \") == [\"hello\", \"world\"]\nassert     words_string(\"  \") == []\nassert     words_string(\"  hello, world\") == [\"hello\", \"world\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     words_string(\"This is a sentence\") == [\"This\", \"is\", \"a\", \"sentence\"]\nassert     words_string(\"This is a sentence\") == [\"this\", \"is\", \"a\", \"sentence\"]\nassert     words_string(\"This is a sentence\") == [\"this\", \"is\", \"a\", \"sentence\"]\nassert     words_string(\"This is a sentence\") == [\"this\", \"is\", \"a\", \"sentence\"]\nassert     words_string(\"This is a sentence\") == [\"this\", \"is\", \"a\", \"sentence\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     words_string('') == []\nassert     words_string('word') == ['word']\nassert     words_string('words') == ['word', 'words']\nassert     words_string('wording') == ['wording', 'wording']\nassert     words_string('word_') == ['word_', 'word']\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     words_string(\"hello,world\") == [\"hello\",\"world\"]\nassert     words_string(\"Hello world\") == [\"Hello\",\"World\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     words_string(\"This is a test.\") == [\"This\", \"is\", \"a\", \"test\"]\nassert     words_string(\"TEST is a test.\") == [\"test\", \"is\", \"a\", \"test\"]\nassert     words_string(\"This is test.\") == [\"this\", \"is\", \"test\", \"is\", \"a\", \"test\"]\nassert     words_string(\"Test is a test.\") == [\"test\", \"is\", \"a\", \"test\", \"is\", \"a\", \"test\"]\nassert     words_string(\"This is a test.\") == [\"this\", \"is\", \"a\", \"test\"]\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     choose_num(-3, -6) == -1\nassert     choose_num(0, 3) == 0\nassert     choose_num(0, 5) == -1\nassert     choose_num(6, 5) == 6\n\nprint(choose_num(3, 7))"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     choose_num(10, 2) == 5\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         choose_num(2, 2) == -1\nassert         choose_num(9, 2) == 9\nassert         choose_num(13, 2) == 9\nassert         choose_num(16, 5) == 5\nassert         choose_num(8, 5) == 5\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         choose_num(1, 5) == -1\nassert choose_num(0, 5) == 0\nassert choose_num(7, 5) == 7\nassert choose_num(2, -4) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     choose_num(2, -1) == -1\nassert     choose_num(3, 0) == -1\nassert     choose_num(4, 5) == -1\nassert     choose_num(5, 4) == -1\nassert     choose_num(5, 3) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     choose_num(10, 20) == 10\nassert     choose_num(20, 20) == -1\nassert     choose_num(0, 0) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     choose_num(1, 1) == 1\nassert     choose_num(2, 1) == 2\nassert     choose_num(3, 1) == -1\nassert     choose_num(5, 1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     choose_num(-1, -1) == -1\nassert     choose_num(0, 0) == 0\nassert     choose_num(1, 1) == 0\nassert     choose_num(1, 2) == 1\nassert     choose_num(2, 2) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     choose_num(0, 10) == 10\nassert     choose_num(10, 0) == 10\nassert     choose_num(10, 10) == -1\nassert     choose_num(-1, 10) == -1\nassert     choose_num(10, -1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     choose_num(2, -4) == -1 # choose_num(2, -4) should return -1\nassert     choose_num(1, 2) == 1 # choose_num(1, 2) should return 1\nassert     choose_num(-2, 1) == -1 # choose_num(-2, 1) should return -1\nassert     choose_num(3, 3) == -1 # choose_num(3, 3) should return -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     rounded_avg(2,3) == -1\nassert         rounded_avg(8,10) == 8\nassert         rounded_avg(12,11) == 6\nassert         rounded_avg(2,5) == 5\nassert         rounded_avg(7,8) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     rounded_avg(12, 10) == 6\nassert     rounded_avg(15, 11) == -1\n\ndef is_prime(num):\n    \"\"\"Returns True if num is a prime number, False otherwise.\"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     rounded_avg(1, 1) == 1\nassert     rounded_avg(2, 1) == 1\nassert     rounded_avg(3, 1) == -1\nassert     rounded_avg(4, 2) == 2\nassert     rounded_avg(4, 3) == -1\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8]) == [1,3,5,7,8]\nassert     unique_digits([2,3,6,7,8,9,10,11,12]) == [2,3,6,7,8,9,10,11,12]\nassert     unique_digits([2,3,6,7,8,9,10,11,12,13]) == [2,3,6,7,8,9,10,11,12,13]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     unique_digits([10, 9, 9, 2, 3]) == [10, 9, 9, 3, 2, 3]\nassert     unique_digits([3, 2, 1, 3]) == [3, 2, 1, 3]\nassert     unique_digits([2, 7, 9, 9, 5]) == [2, 7, 9, 9, 5]\nassert     unique_digits([3, 3]) == []\nassert     unique_digits([1, 2, 3, 1]) == [1, 2, 3, 1]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     unique_digits(4) == [4,3,2,1]\nassert     unique_digits(18) == [18,18,18,18]\nassert     unique_digits(0) == [0]\nassert     unique_digits(5) == [5,4,3,2,1]\nassert     unique_digits(1) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     unique_digits([3, 1, 2, 3, 4, 5, 6]) == [3, 4, 5, 6]\nassert     unique_digits([1, 1, 1, 1, 1, 1, 2, 2]) == [1, 1, 2]\nassert     unique_digits([1, 1, 1, 2, 2, 2, 3, 3]) == [1, 2, 2, 3]\nassert     unique_digits([3, 3, 3, 3, 3, 3, 3]) == []\nassert     unique_digits([1, 1, 1, 2, 2, 2, 2, 3, 3, 3]) == [1, 2, 2, 3]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\nassert     unique_digits([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\nassert     unique_digits([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     unique_digits([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     unique_digits([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     unique_digits([1,1,5,4,3,1,5,4,1,5,1]) == [1,2,3,4,5,6,7,8,9]\nassert     unique_digits([0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\nassert     unique_digits([0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\nassert     unique_digits([0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\nassert     unique_digits([]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     unique_digits([15, -5, 19, -56, -16, -73, -25, -55, -39, -54, -52, -23, -56, -34, -39, -52, -19, -73, -53, -28, -23, -67, -16, -7, -25, -16, -73, -26, -52, -29, -34, -23, -63, -56, -67, -28, -23, -59, -52, -30, -42, -63, -52, -23, -45, -56, -46, -36, -55, -56, -42, -63, -43, -46, -59, -54, -25, -43, -42, -35, -44, -61, -23, -63, -36, -57, -38, -44, -60, -42, -49, -34, -39, -47, -50, -56, -47, -36, -48, -57, -45, -56, -42, -37, -41, -40, -36, -33, -50, -37, -46, -51, -38, -39, -42, -45, -48, -51, -45, -48, -35, -46, -53, -49, -51, -39, -49, -51, -43, -44, -51, -53, -42, -49, -43, -45, -51, -45, -53, -49, -50, -52, -45, -51, -45, -51, -53, -52, -54, -46, -50, -50, -54, -52, -52, -53, -53, -54, -54, -52, -53, -51, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52, -52"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     unique_digits([2, 1, 4, 6, 7, 9]) == [2, 4, 6, 7, 9]\nassert     unique_digits([3, 5, 3, 5, 4]) == [3, 5, 4]\nassert     unique_digits([3, 2, 1, 2, 1, 3, 3, 4]) == [3, 3, 4]\nassert     unique_digits([3, 6, 6, 6, 5, 5, 5, 4]) == [3, 6, 6, 6, 6, 6]\nassert     unique_digits([6, 6, 5, 5, 5, 5, 5, 4]) == [6, 6, 5, 5, 5, 5, 5, 4]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     unique_digits(1) == [1]\nassert     unique_digits(9) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique_digits(16) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits(9) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     unique_digits(7) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 10]\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     by_length([1,2,5,9]) == [1,5,9,9,9]\nassert     by_length([6,5,3,9]) == [6,5,9,9,9]\nassert     by_length([-1,1,2,3]) == [1,-1,3,2,3]\nassert     by_length([4,5,6,7,8,9,0]) == [4,5,6,7,8,9,0]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     by_length([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length([1,2,3,4,5,6,7,8,9]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\ndef by_name(arr):\n    \"\"\"\n    Given an array of strings, sort the strings that are followed by the names of the numbers\n    of the numbers from 1 to 9 and return the resulting sorted array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef by_reverse(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    then reverse them, and then replace each digit with its corresponding name from \"One\",\n    \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == \"Three One Nine Two\".lower()"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     by_length([1, 9]) == \"Eight\"\nassert     by_length([9]) == \"Eight\"\nassert     by_length([8, 9]) == \"One\"\nassert     by_length([1, 9, 9, 1]) == \"One\"\nassert     by_length([1, 1, 2, 3, 4, 4, 4, 4]) == \"Three\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     by_length([1, 2, 5, 4, 3, 6]) == [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ]\nassert     by_length([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ]\nassert     by_length([1, 2, 9, 4, 3, 6, 7, 8, 9, 10]) == [ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\" ]\nassert     by_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [ \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\" ]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9,0]) == [1,3,4,0,5,6,7,8,9,0]\nassert     by_length([9,8,7,6,5,4,3,2,1,0]) == [9,8,7,6,5,4,3,2,1,0]"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \nassert by_length([\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]) == [\"Two\", \"One\", \"Four\", \"Three\", \"Eight\", \"Nine\", \"Six\", \"Five\", \"Seven\", \"Three\"]\nassert by_length([\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]) == [\"Three\", \"Two\", \"One\", \"Four\", \"Five\", \"Eight\", \"Nine\", \"Seven\", \"Six\", \"Five\"]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     f(5) == [1, 2, 3, 24, 120], \nassert     f(6) == [24, 120, 720, 5040], \nassert     f(7) == [24, 120, 720, 5040], \nassert     f(8) == [24, 720, 5040, 120], \nassert     f(9) == [24, 720, 5040, 120], \n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     f(1) == 1\nassert     f(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     f(100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100]\nassert     f(1000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000]\nassert     f(150000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 150000]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     f(3) == [1, 1, 1, 2, 6, 24, 120, 720, 5040]\nassert     f(5) == [1, 1, 2, 6, 24, 120]\nassert     f(5) == [1, 2, 6, 24, 120]\nassert     f(4) == [1, 2, 6, 24]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     f(2) == [2, 2, 2, 1]\nassert     f(4) == [24, 12, 6, 4]\nassert     f(8) == [32, 16, 8, 4]\nassert     f(16) == [64, 32, 16, 8, 4]\nassert     f(32) == [256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 256, 1024, 512, 25"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     f(3) == [1, 2, 3, 6, 24, 120], \"the function f should return [1, 2, 3, 6, 24, 120]\"\nassert     f(2) == [1, 2, 3, 6, 24], \"the function f should return [1, 2, 3, 6, 24]\"\nassert     f(4) == [1, 2, 3, 6, 24], \"the function f should return [1, 2, 3, 6, 24]\"\nassert     f(1) == 1, \"the function f should return [1]!\"\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     f(0) == []\nassert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 3]\nassert     f(4) == [1, 2, 3, 4]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     f(3) == [1, 2, 3, 24]\nassert     f(2) == [1, 2]\nassert     f(5) == [1, 2, 3, 24, 120]\nassert     f(6) == [1, 2, 3, 24, 120, 720]\nassert     f(7) == [1, 2, 3, 24, 120, 720, 5040]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \nf(5) == [120, 1, 1, 1, 1]"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10) == (1,1)\nassert     even_odd_palindrome(5) == (0,2)\nassert     even_odd_palindrome(7) == (2,3)\nassert     even_odd_palindrome(17) == (3,6)\nassert     even_odd_palindrome(36) == (3,9)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(10) == (1, 2)\nassert     even_odd_palindrome(100) == (1, 2, 2)\nassert     even_odd_palindrome(1) == (1, 1, 1, 1, 1)\n\nprint('success!')\n\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(42) == (1,3)\nassert     even_odd_palindrome(3) == (1,2)\nassert     even_odd_palindrome(12) == (3,4)\nassert     even_odd_palindrome(21) == (1,3)\nassert     even_odd_palindrome(12) == (2,1)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(10) == (1, 1)\nassert     even_odd_palindrome(100000000) == (1, 1)\nassert     even_odd_palindrome(1000000) == (1, 1)\nassert     even_odd_palindrome(1000000000) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \nassert \n\ndef make_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    palindromes that fall within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    pass"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(10000) == ((1,3),(3,1),(4,3))"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(9) == (2, 4)\nassert     even_odd_palindrome(10) == (1, 2)\nassert     even_odd_palindrome(300) == (5, 3, 4)"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(10) == (2, 4)\nassert     even_odd_palindrome(15) == (5, 6)\nassert     even_odd_palindrome(21) == (1, 2)\nassert     even_odd_palindrome(53) == (2, 3)\nassert     even_odd_palindrome(101) == (3, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(10) == (1, 2)\nassert     even_odd_palindrome(100) == (1, 3)\nassert     even_odd_palindrome(1000) == (1, 4)\nassert     even_odd_palindrome(1) == (0, 1)\n\ndef test_even_odd_palindrome():\n    "
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     count_nums([1, 2, 3, -1, -2, -3]) == 3, \"Expected 3\"\nassert     count_nums([1, 2, 3, -1, -2, -3, -2, -1, 0]) == 3, \"Expected 3\"\nassert     count_nums([-1, -2, -3]) == 1, \"Expected 1\"\nassert     count_nums([1, 2, 3]) == 0, \"Expected 0\"\n\nprint(\"Counting the elements of a list is done\")\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     count_nums([-123, -1, 2, 3]) == 4\nassert     count_nums([1, 2, 3, -123]) == 2\nassert     count_nums([1, 2, -3, -123]) == 3\nassert     count_nums([1, 2, -3, 123]) == 3\nassert     count_nums([-123, -1, 2, -3]) == 4\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     count_nums([1,2,3,4,5,6,7,8,9,10]) == 7\nassert     count_nums([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10]) == 8\nassert     count_nums([-123,-2,5,9]) == 0\nassert     count_nums([0]) == 0\n\ndef char_to_int(ch):\n    \"\"\"\n    ch can be either a single character, or a string of characters (as a list).\n    For example:\n        ch = 'a'\n        char_to_int(ch) returns 1\n        ch = 'bcdefghijk'\n        char_to_int(ch) returns 0\n    \"\"\"\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     count_nums([1, 2, 3, -4, -3, 2, 5]) == 3, \"Counting a single number should return three values.\"\nassert     count_nums([1, 2, 3]) == 3, \"Counting a single number should return three values.\"\nassert     count_nums([1, -1, -2, -3]) == 2, \"Counting a single number should return two values.\"\nassert     count_nums([0, -1, -2, -3, 1, 0, 0]) == 3, \"Counting a single number should return three values.\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     count_nums([-1, -2, 3, 4, 5]) == 3\nassert     count_nums([0, -1, -2]) == 3\nassert     count_nums([0, 0, 0, 0, 0]) == 0\nassert     count_nums([-2147483647]) == 0\nassert     count_nums([-2, 0, 2]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     count_nums([4, 5, -5, -4, 8, -8]) == 5\nassert     count_nums([-1, 3, -1, 1, -5, -4, 1, 6, -2, -1, -3, 0, 1]) == 1\nassert     count_nums([1, 2, 3, 4, 5, -5, 0, -1, -5, -4, -1, -3, 0, -1, -2, -1]) == 0\nassert     count_nums([-1, 2, -1, -2, -3, -5, -6, -8, 0]) == 0\n\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     count_nums([-123, -1, 2, 3]) == 0\nassert     count_nums([1, 2, 3, -123]) == 1\nassert     count_nums([123, -123]) == 2\nassert     count_nums([-123, 0, 1, 2]) == 3\nassert     count_nums([1, 2, 3, -123, 0, 1, 2]) == 4\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([5,4,3,2,1]) == True\nassert     move_one_ball([5,6,7,8,9]) == False\nassert     move_one_ball([1,2,3,4,5]) == False\nassert     move_one_ball([1,2,3,4,5,6]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     move_one_ball([1,2,3,4,5,6,7]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,0]) == False\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,0]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,0,0]) == False\nassert     move_one_ball([0,0,0,0,0,0,0,0,0,0,0]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     move_one_ball([1, 3, 5, 7, 9, 2, 4, 6]) == False\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     move_one_ball([1, 3, 5, 7, 9, 2, 4, 6]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     move_one_ball([1, 4, 2, 2, 5, 3]) == True, \"move_one_ball(1) is True\"\nassert     move_one_ball([2, 3, 2, 4, 1, 5, 2]) == True, \"move_one_ball(2) is True\"\nassert     move_one_ball([1, 2, 3, 4, 5, 6]) == False, \"move_one_ball(1) is False\"\nassert     move_one_ball([1, 1, 2, 3, 4, 5, 6]) == False, \"move_one_ball(1) is False\"\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \nassert move_one_ball([1,2,3,4,5]) == True\nassert move_one_ball([0,0,0,0,0]) == False\nassert move_one_ball([2,3,1,4,5]) == True\nassert move_one_ball([1,3,2,4,5]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     move_one_ball(arr=[1,2,3,4,5,6,7,8,9,10]) == True\nassert     move_one_ball(arr=[1,2,3,4,5,6,7,8,9,10]) == False\nassert     move_one_ball(arr=[1,2,3,4,5,6,7,8,9,10]) == True\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     exchange([1,2,3,4], [4,2,3,1]) == \"YES\"\nassert     exchange([1,2,3,4], [3,2,1,4]) == \"NO\"\n\nprint(\"Yes\""
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == \"YES\", 'exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == \"YES\"'\nassert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]) == \"NO\", 'exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]) == \"NO\"'"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [1, 2, 4, 5, 6]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [1, 2, 4]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [1, 2, 3, 4]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [6, 7, 8, 9]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == \"YES\"\nassert     exchange([4, 6, 5, 7, 9, 2, 8], [6, 5, 7, 2, 8, 9, 3]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]) == \"NO\"\nassert     exchange([4, 6, 5, 7, 9, 2, 8], [6, 5, 7, 2, 8, 9, 3]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     exchange([1,2,3,4], [3,4,5,6]) == 'YES'\nassert     exchange([1,2,3,4], [3,4,5,5]) == 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     exchange(test_list_1, test_list_2) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     exchange([1,2,3,4,5], [5,4,3,2,1]) == \"YES\", \"exchange([1,2,3,4,5], [5,4,3,2,1]) = YES\"\nassert     exchange([1,2,3,4,5], [2,3,4,5,1]) == \"NO\", \"exchange([1,2,3,4,5], [2,3,4,5,1]) = NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     exchange(lst1=lst1, lst2=lst2) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     exchange([0, 1, 2, 3], [0, 2, 4, 6, 8, 10, 12, 13]) == \"YES\", \"Exchange should work for lists of even numbers.\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     exchange([0,1], [2,3]) == \"YES\"\nassert     exchange([0,1,2,3], [0,1,2,3]) == \"NO\"\nassert     exchange([5,3,6,4,1], [7,8,9,10,11]) == \"YES\""
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     histogram('kitty') == {'t':1,'a':1,'y':1,'k':1}\nassert     histogram('kitty') == {'a':1,'y':1,'t':1}\nassert     histogram('python') == {'a':1,'t':1}\nassert     histogram('pys') == {'t':1,'a':1,'y':1}\nassert     histogram('amana') == {'a':1,'m':1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     histogram('one two three four five six seven eight nine') == {'a': 5, 'b': 3, 'c': 3, 'd': 2, 'e': 3, 'f': 3, 'g': 3, 'h': 2, 'i': 2, 'j': 2, 'k': 2, 'l': 2,'m': 2, 'n': 2, 'o': 2, 'p': 2, 'q': 2, 'r': 2,'s': 2, 't': 2, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}\nassert     histogram('break') == {}\nassert     histogram('qwe') == {}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     histogram(\"hello world hello world hello world hello world hello world\") == {'l': 2, 'e': 2, 'o': 1, 'w': 2, 'l': 1, 'o': 1, 'w': 2}\nassert     histogram(\"test\") == {'t': 1, 'e': 1, 'a': 1, 't': 1, 'e': 1, 't': 1, 'a': 1, 'e': 1, 'r': 1, 't': 1, 'e': 1, 't': 1, 'a': 1, 't': 1, 'r': 1, 'e': 1, 'w': 2, 't': 1, 'a': 1, 'w': 2}\nassert     histogram(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == {'a': 1, 'e': 2, 'b': 1, 'c': 1, 'd': 1, 'f': 1, 'i': 1, 'h': 1, 'k': 1, 'j': 1, 'k': 1,'m': 1, 'p': 1, 'q': 1,'s': 1, 'u': 1, 't': 1, 'w': 2, 'y': 1, 'z': 1}\nassert     histogram(\"abcdefghijklmnopqrstuvwxyz\") == {'a': 1, 'e': 2, 'b': 1, 'c': 1, 'd': 1, 'f': 1, 'i': 1, 'h': 1, 'k': 1, 'j': 1, 'k': 1,'m': 1, 'p': 1, 'q': 1,'s': 1, 'u': 1, 't': 1, 'w': 2, 'y': 1, 'z': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     histogram('abc') == {'a': 1, 'b': 2, 'c': 1}\nassert     histogram('abxba') == {'a': 1, 'b': 2, 'c': 3, 'x': 1}\nassert     histogram('cbxab') == {'a': 1, 'b': 2, 'c': 2, 'x': 1}\nassert     histogram('cabxba') == {'a': 1, 'b': 2, 'c': 3, 'x': 2}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     histogram(\"abc\") == {'a':2, 'b':1, 'c':1}\nassert     histogram(\"abca\") == {'a':1, 'c':1, 'b':2, 'a':1}\nassert     histogram(\"abcdefghijklmnopqrstuvwxyz\") == {'a':2, 'c':1, 'b':1, 'e':1, 'g':1, 'h':1, 'i':1, 'k':1,'m':1, 'o':1, 'n':1, 'q':1, 'p':1, 'r':1,'s':1, 'u':1, 'v':1, 'w':1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     h(test) == {'h': 3, 'o': 2, 'a': 1, 'l': 1, 'e': 1, 'c': 1,'m': 1, 'u': 1, 'g': 1, 'd': 1, 'b': 1, 'w': 1, 'f': 1, 'y': 1, 'k': 1, 'w': 1, 'c': 1, 'r': 1, 'e': 1, 'g': 1, 'h': 1}\nassert     h([\"a\", \"t\", \"c\", \"t\", \"t\", \"t\", \"t\"]) == {'t': 2, 'c': 1}\nassert     h(\"test\") == {'t': 3, 't': 1, 't': 1, 'c': 1,'m': 1, 'u': 1, 'g': 1, 'd': 1, 'b': 1, 'w': 1, 'f': 1, 'y': 1, 'k': 1, 'w': 1, 'c': 1, 'r': 1, 'e': 1, 'g': 1, 'h': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     reverse_delete(\"abcdefgh\", \"e\") == (\"ed\", False)\nassert     reverse_delete(\"abcdefgh\", \"fg\") == (\"dgf\", True)\nassert     reverse_delete(\"abcdefgh\", \"c\") == (\"e\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     reverse_delete(\"abcd\", \"c\") == (\"dcb\", True)\nassert reverse_delete(\"abc\", \"c\") == (\"dcb\", True)\nassert reverse_delete(\"abc\", \"d\") == (\"cab\", False)\nassert reverse_delete(\"\", \"\") == (\"\", True)\nassert reverse_delete(\"\", \"a\") == (\"\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     reverse_delete(\"abcd\", \"c\") == (\"bcd\", True)\nassert     reverse_delete(\"abcd\", \"ac\") == (\"bcd\", True)\nassert     reverse_delete(\"abcd\", \"a\") == (\"bcd\", False)\nassert     reverse_delete(\"abcd\", \"bc\") == (\"bcd\", False)\nassert     reverse_delete(\"abcd\", \"ca\") == (\"bcd\", False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     reverse_delete(s,c) == (s,True)"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     reverse_delete('abcd', 'c') == ('bcd', True)\nassert     reverse_delete('abcd', 'd') == ('abcd', True)\nassert     reverse_delete('', '') == ('', True)\nassert     reverse_delete('','') == ('', True)\nassert     reverse_delete('xabc', 'xabc') == ('', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     reverse_delete('abcd', 'abc') == ('bcd', True)\nassert reverse_delete('abcd', 'abcd') == ('bcd', True)\nassert reverse_delete('ab', 'abc') == ('ab', False)\nassert reverse_delete('a', 'b') == ('a', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     reverse_delete(s='abcba', c='c') ==('a','b','c','b','a')\nassert     reverse_delete(s='a', c='b') ==('a','b')\nassert     reverse_delete(s='a', c='a') == ('a', True)\nassert     reverse_delete(s='a', c='a') == ('a', True)\nassert     reverse_delete(s='a', c='a') == ('a', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     reverse_delete(\"a\", \"b\") == (\"a\", True)\nassert     reverse_delete(\"aa\", \"bb\") == (\"aa\", True)\nassert     reverse_delete(\"aab\", \"c\") == (\"aab\", True)\nassert     reverse_delete(\"abc\", \"abc\") == (\"abc\", True)\nassert     reverse_delete(\"aba\", \"a\") == (\"aba\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     reverse_delete(\"abcdef\", \"e\") == (\"eabcdef\", True)\nassert     reverse_delete(\"abcdef\", \"bc\") == (\"bcdabcdef\", True)\nassert     reverse_delete(\"abcdef\", \"\") == (\"abcdef\", True)\nassert     reverse_delete(\"\", \"a\") == (\"\", True)\nassert     reverse_delete(\"\", \"b\") == (\"\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     reverse_delete(\"ABC\", \"a\") == (\"A\", True)\nassert     reverse_delete(\"ABC\", \"c\") == (\"A\", True)\nassert     reverse_delete(\"abc\", \"b\") == (\"A\", True)\nassert     reverse_delete(\"abc\", \"a\") == (\"A\", True)\nassert     reverse_delete(\"aBc\", \"Bc\") == (\"Bc\", True)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     odd_count([1,2,3,4,5]) == [2,3,4,6]\nassert     odd_count(['a','b','c','d','e']) == ['b', 'c', 'd', 'e', 'a']\nassert     odd_count([]) == []\nassert     odd_count([1,2,3,4,5,6]) == [6]\nassert     odd_count([1,2,3,4,5,6,7,8,9,10]) == [6,9,7,8]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(odd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\n\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     odd_count([1, 2, 3, 4, 5]) == [3, 2, 1]\nassert     odd_count([]) == []\nassert     odd_count([1, 2, 3]) == [2, 1]\nassert     odd_count([\"a\", \"b\", \"c\"]) == [\"c\"]\nassert     odd_count([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6, 7, 3, 1]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     odd_count([]) == []\nassert     odd_count([1,2,3]) == [2]\nassert     odd_count(['a','b','c']) == ['a', 'b']\nassert     odd_count(['a','b','c', 'd']) == ['a', 'b', 'd']\nassert     odd_count(['a','b','c','d','e']) == ['a', 'b', 'd']\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     odd_count([\"a\",\"b\"]) == [1, 1]\nassert odd_count([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == [1, 2, 1, 2, 1, 2, 3, 3]\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     minSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3]) == 4\nassert     minSubArraySum([-2, -3, 1, -3, -2, 1, 2, -3, 1, -4]) == 4\nassert     minSubArraySum([-3, -2, 1, 2, -3, 1, -4, 3, 2, -1, -2]) == 4\nassert     minSubArraySum([-2, -3, -4, 1, 3, 2]) == 4\nassert     minSubArraySum([-2, 0, 1, -2]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     minSubArraySum([]) == 0\nassert     minSubArraySum([5, 4, 3, 2, 1]) == 5\nassert     minSubArraySum([1, 2, 3, 4, -1, -2, -3, -4]) == 0\nassert     minSubArraySum([-2, -3, -4, -1, 0, 1, 2, 3]) == 0\nassert     minSubArraySum([-7, -5, -3, 2, -1]) == -7\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     minSubArraySum([]) == 0, 'No min subarray.'\nassert     minSubArraySum([2]) == 1, 'No min subarray.'\nassert     minSubArraySum([2, 3, -1, 4]) == 2, 'No min subarray.'\nassert     minSubArraySum([-2, -3, -4, -1, 0, 1, 2, 3, 4]) == 4, 'No min subarray.'\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     minSubArraySum([1]) == 0\nassert     minSubArraySum([3,4,-1,1]) == 2\nassert     minSubArraySum([7,7,7,7,7,7,7,7,7]) == 0\nassert     minSubArraySum([0]) == 0\nassert     minSubArraySum([1]) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     max_fill(make_grid(4, 4), 4) == 3\n\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     max_fill(\n    [[1, 1, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0]],\n    7) == 7\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     max_fill([[2,3,2,1,2,1,3],[3,3,2,1,2,1,3],[2,3,2,1,2,1,3],[1,1,1,1,1,1,1]],10) == 7\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     max_fill([[0,0,0,0],[1,0,0,1],[0,1,0,1],[0,0,0,0]],0) == 6"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     max_fill(grid = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], capacity = 7) == 6\nassert     max_fill(grid = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], capacity = 10) == 0\nassert     max_fill(grid = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], capacity = 4) == 0\nassert     max_fill(grid = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], capacity = 9) == 0\nassert     max_fill(grid = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], capacity = 5) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     max_fill(\n        [[1, 1, 0], [0, 0, 1], [1, 1, 0]],\n        2\n    ) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     max_fill([[1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_array([9,1,1,1,0,1,1,1,0,9,1,1]) == [1,1,1,1,0,9,1,1,0,1,1,9,1]\nassert     sort_array([0,1,0,0,0,1,1,1,0,0,0,1]) == [0,0,0,0,0,1,1,1,1,1,1,1]\nassert     sort_array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_array([0, 0, 0, 1]) == [1, 0, 0, 0]\nassert     sort_array([0, 0, 1, 0]) == [1, 0, 0, 0]\nassert     sort_array([0, 0, 1, 1]) == [1, 0, 0, 0]\nassert     sort_array([1, 0, 1, 1]) == [0, 1, 1, 1]\nassert     sort_array([0, 1, 1, 0]) == [1, 0, 0, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_array([1, 2, 5, 0, 1, 0, 0, 0]) == [0, 0, 0, 1, 0, 0, 2, 5]\nassert     sort_array([3, 3, 5, 5, 5, 5, 1, 0]) == [0, 0, 0, 1, 0, 3, 3, 5]\nassert     sort_array([-3, -3, -5, -5, -3, -3, -5, -3]) == [-3, -3, -5, -5, -3, -3, -3, -5]\nassert     sort_array([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert     sort_array([1, 0, 0, 1, 0, 0, 0, 1]) == [0, 0, 0, 0, 0, 1, 1, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sort_array([0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1]) == [1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sort_array([1,2,0,1,1,1,2,1]) == [1,1,1,2,2,1,1,2]\nassert     sort_array([2,1,3,1,2,3,2,3]) == [2,2,2,3,3,1,1,3]\nassert     sort_array([0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1]) == [0,0,0,0,0,1,1,2,2,3,3,3,3,4,4,5,5,5,6,6,7,7,8,8,8,9,9]\nassert     sort_array([1,2,0,1,1,1,2,1]) == [1,1,1,2,2,1,1,2]\nassert     sort_array([2,1,3,1,2,3,2,3]) == [2,2,2,3,3,1,1,3]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         sort_array([1, 1, 1, 2, 1, 1]) == [1, 1, 2, 1, 1, 1]\nassert         sort_array([0, 0, 0, 0, 0, 0, 0, 1, 1]) == [0, 0, 1, 0, 0, 0, 1, 1, 1]\nassert         sort_array([0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]) == [0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1]\nassert         sort_array([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]) == [1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0]\nassert         sort_array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1]) == [1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         sort_array(\n        [\n            24, 15, 24, 32, 24, 2, 24, 48, 24, 24, 24, 32, 24, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 24, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 24, 24, 24, 24, 24, 32, \n            24, 24, 24, 32, 24, 32, 2"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sort_array([1,0,0,0]) == [1,0,0,0]\nassert     sort_array([0,0,1,0,1,1]) == [1,0,1,0,0,0]\nassert     sort_array([1,1,1,1,0]) == [1,1,0,0,0]\nassert     sort_array([1,1,1,1,0,0]) == [1,0,0,0,0,0]\nassert     sort_array([0,1,1,1,1,1,1,1]) == [1,0,0,0,1,1,1,0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], \"Input array does not satisfy sort_array test\"\nassert     sort_array([1, 2, 3, 4, 5, 0, 7, 8, 9, 6]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0], \"Input array does not satisfy sort_array test\"\nassert     sort_array([-9, 3, 2, 2, 8, 2, -9]) == [-9, -9, 0, -9, 2, 2, 8], \"Input array does not satisfy sort_array test\"\nassert     sort_array([-9, 0, -9, 2, 2, 8, -9]) == [-9, 0, -9, 2, 2, 8], \"Input array does not satisfy sort_array test\"\nassert     sort_array([9, 9, -9]) == [-9, 0, -9], \"Input array does not satisfy sort_array test\"\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sort_array([1, 1, 0, 0, 1, 0]) == [0, 1, 1, 0, 1, 0]\nassert     sort_array([2, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 2, 0]\nassert     sort_array([0, 1, 1, 0, 1, 0]) == [1, 1, 0, 0, 0, 1]\nassert     sort_array([0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\nassert     sort_array([2, 4, 3, 2, 1, 0]) == [2, 1, 0, 0, 0, 1]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     select_words(\"dog cat dog cat cat dog cat cat cat dog cat cat\",2) == ['dog', 'cat'], \"Selection failed!\"\nassert     select_words(\"\", 1) == [], \"Selection failed!\"\nassert     select_words(\"abc\", 0) == [], \"Selection failed!\"\nassert     select_words(\"\", 3) == [], \"Selection failed!\"\nassert     select_words(\"dog cat dog cat dog cat dog dog cat dog dog\", 0) == [], \"Selection failed!\""
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     select_words(\"a\", 1) == ['a']\nassert     select_words(\"aaaaaa\", 2) == ['a', 'aa']\nassert     select_words(\"a bc\", 3) == ['ab', 'bc']\nassert     select_words(\" a bc\", 4) == ['a', 'b', 'c']\nassert     select_words(\"a bc\", 5) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     select_words('a', 3) == ['a', 'aa', 'aaa', 'aab', 'aab', 'ab', 'abc', 'abc', 'aba', 'aba', 'abca', 'abc', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'aca', 'abb', 'abca', 'abca', 'abb', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'aca', 'abba', 'abb', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'aca', 'abba', 'abba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'ac', 'aba', 'abca', 'abca', 'acb', 'a', 'aba', 'aba', 'abca', 'abca', 'acb', '"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     select_words('hello', 3) == ['ello','he','ll','ha'], \n    'Error: select_words() is not working as expected.'\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     select_words(\"what\", 2) == [\"eat\", \"tea\", \"ate\", \"bat\"], \"select_words(\\\"what\\\", 2) failed!\"\nassert     select_words(\"who is\", 2) == [\"who\", \"is\"], \"select_words(\\\"who is\\\", 2) failed!\"\nassert     select_words(\"a\", 1) == [], \"select_words(\\\"a\\\", 1) failed!\"\nassert     select_words(\"\", 0) == [], \"select_words(\\\"\\\", 0) failed!\"\nassert     select_words(\"a\", 3) == [\"a\", \"are\"], \"select_words(\\\"a\\\", 3) failed!\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef test_select_words(s, n):\n    pass\n\ndef main():\n    \"\"\"The main function to test your solution\"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n    \nif __name__ == '__main__':\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"s = 'a c e f'\")\n    print(\"n = 4\")\n    print(\"Exception :\")\n    print(\"['a', 'c', 'e', 'f']\")\n    print(\"Output :\")\n    print(select_words('a c e f', 4))\n    print(\"----------------------------\")\n    print(\"Example 2:\")\n    print(\"Input : \")\n    print(\"s = 'a c e f'\")\n    print(\"n = 1\")\n    print(\"Exception :\")\n    print(\"['a']\")\n    print(\"Output :\")\n    print(select_words('a c e f', 1))\n    \n    pas"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     select_words(\"abcdefg\", 2) == [\"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert     select_words(\"\", 2) == []\nassert     select_words(\"\", 1) == []\nassert     select_words(\"\", 0) == []\nassert     select_words(\"\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     select_words(\"bcd\", 2) == [\"bcd\", \"bcd\", \"bcd\", \"bcd\"]\nassert     select_words(\"bcd\", 3) == []\nassert     select_words(\"bcd\", 4) == [\"bcd\", \"bcd\", \"bcd\", \"bcd\", \"bcd\"]\nassert     select_words(\"bcd\", 0) == []\nassert     select_words(\"bcd\", 1) == []\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     get_closest_vowel('great') == 'e'\nassert     get_closest_vowel('greatee') == ''\nassert     get_closest_vowel('grecieve') == ''\nassert     get_closest_vowel('greciv') == 'e'\nassert     get_closest_vowel('grecivine') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     get_closest_vowel(\"hey\") == \"yo\", \"Should be 'hey'\"\nassert     get_closest_vowel(\"hello\") == \"he\", \"Should be 'hello'\"\nassert     get_closest_vowel(\"this\") == \"th\", \"Should be 'this'\"\nassert     get_closest_vowel(\"heL\") == \"HE\", \"Should be 'HE'\"\nassert     get_closest_vowel(\"HELLO\") == \"HELLO\", \"Should be 'HELLO'\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     get_closest_vowel('AA') == 'A', \"A doesn't match\"\nassert     get_closest_vowel('AAA') == 'A', \"A doesn't match\"\nassert     get_closest_vowel('AAB') == 'A', \"A doesn't match\"\nassert     get_closest_vowel('ABC') == 'A', \"A doesn't match\"\nassert     get_closest_vowel('ABD') == 'A', \"A doesn't match\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     get_closest_vowel(\"bananas\") == \"n\", \"correct\"\nassert     get_closest_vowel(\"caesar\") == \"t\", \"correct\"\nassert     get_closest_vowel(\"casa\") == \"s\", \"correct\"\nassert     get_closest_vowel(\"casa\") == \"s\", \"correct\"\nassert     get_closest_vowel(\"casa\") == \"s\", \"correct\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     get_closest_vowel('') == ''\nassert get_closest_vowel('a') == 'a'\nassert get_closest_vowel('A') == 'A'\nassert get_closest_vowel('ab') == ''\nassert get_closest_vowel('pqs') == 'pq'\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         get_closest_vowel(\"i love you\") == \"i\"\nassert         get_closest_vowel(\"A meeee waaay\") == \"A\"\nassert         get_closest_vowel(\"aaa\") == \"aa\"\nassert         get_closest_vowel(\"\") == \"\"\nassert         get_closest_vowel(\"ab\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"Life\") == \"L\"\nassert     get_closest_vowel(\"Road\") == \"R\"\nassert     get_closest_vowel(\"python\") == \"\"\nassert     get_closest_vowel(\"Python\") == \"\"\n\nprint(get_closest_vowel(\"Python\"))\nprint(get_closest_vowel(\"python\"))\nprint(get_closest_vowel(\"PYTHON\"))\nprint(get_closest_vowel(\"Python\"))\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     get_closest_vowel('Ace') == 'a'\nassert     get_closest_vowel('Co') == 'c'\nassert     get_closest_vowel('Aa') == 'e'\nassert     get_closest_vowel('We') == 'w'\nassert     get_closest_vowel('Ba') == 'a'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     match_parens(['', '()()()']) == 'Yes'\nassert     match_parens(['()()', '()()']) == 'No'\nassert     match_parens(['(()())', '((()']) == 'Yes'\nassert     match_parens(['())', '()(']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     match_parens('())()') == 'Yes'\nassert     match_parens(')())') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         match_parens([\"(())()\", \"())()\"]) == \"Yes\"\nassert         match_parens([\"(())()\", \"()()\"]) == \"No\"\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     match_parens([')','(','(']) == 'Yes'\nassert     match_parens(['(()]','(()]()]))' == 'No"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     match_parens('(()())(()())()') == 'Yes'\nassert     match_parens('((()()))') == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     match_parens('((()') == 'No'\nassert     match_parens(')()(') == 'No'\nassert     match_parens('())()') == 'Yes'\nassert     match_parens('))((()') == 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     match_parens(['(())', '(())', '(())']) == 'Yes'\nassert     match_parens(['))', '))', '))']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     match_parens(['(', ')', ')', '()', '(()', '(']) == 'Yes'\nassert     match_parens(['(', ')', ')', '()', '(()', '(']) == 'No'\n\ndef create_string(s):\n    '''\n    Create a new string, which contains only pairs of '(' and ')'.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if the string S is a good string, and return 'No' otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         match_parens('((()))'),'No'\nassert         match_parens('(())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\ndef match_parenthesis(lst):\n    '''\n    You are given a list of parentheses,\n    we want to check if all the parentheses are balanced.\n    The list can be in any order,\n    for example:\n    (())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n    We have to check whether there are two elements in the list that are\n    unbalanced. If there are two elements,\n    we can check whether the first is balanced or not.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     match_parens(['(())', '()())', '()(())']) == 'Yes'\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     maximum([-2,-3,-4,-1], 3) == [-1, -2, -3, -4]\nassert     maximum([5, 3, 2, 4], 2) == [5, 3]\nassert     maximum([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]\nassert     maximum([-2, -1, 3, 4, -1], 1) == [-1, 3, 4, -1]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6], 3) == [4, 5, 6]\nassert     maximum([1, 2, 3, 4, 5, 6], 4) == [4, 5, 6]\nassert     maximum([1, 2, 3, 4, 5, 6], 5) == [1, 2, 3, 4, 5, 6]\nassert     maximum([1, 2, 3, 4, 5, 6], 6) == [1, 2, 3, 4, 5, 6]\nassert     maximum([1, 2, 3, 4, 5, 6], 7) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the minimum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     solution([1,2,3,4,5]) == 10\nassert     solution([1,2,4,6,8,9]) == 10\nassert     solution([1,2,4,8]) == 10\nassert     solution([3,1,2,3]) == 3\nassert     solution([9,1,2,4,6,8,10,12,14,16]) == 36\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     solution([]) == 0\nassert     solution([2, 4, 6, 8]) == 14\nassert     solution([3, 1, 2]) == 3\nassert     solution([3, 2, 1]) == 2\nassert     solution([2, 4, 6, 8]) == 14\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     solution(lst) == 8\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     solution([2, 3, 6, 9, 11, 15]) == 25"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     solution([1,2,3,4]) == 7\nassert     solution([1,3,5]) == 6\nassert     solution([1,2,3,4,5]) == 0\nassert     solution([1,2,3]) == 0\nassert     solution([]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     solution([]) == 0\nassert     solution([1,2,3,4]) == 10\nassert     solution([1,2,3,4,5]) == 20\nassert     solution([1,3,2,4]) == 20\nassert     solution([1,2,3,4,5,6]) == 40\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     [1, 2, 3, 4, 5] == solution([2, 4, 6, 8, 10, 12, 14, 16])\nassert     [5, 1, 3, 7, 9] == solution([5, 1, 3, 7, 9])\nassert     [1, 5, 3, 7, 9] == solution([1, 5, 3, 7, 9])\nassert     [1, 3, 5, 7, 9] == solution([1, 3, 5, 7, 9])\nassert     [1, 5, 3, 7, 9] == solution([1, 5, 3, 7, 9])\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     solution([1,2,3,4]) == 5, \"Test 1\"\nassert     solution([2,3,4,5,6,7]) == 23, \"Test 2\"\nassert     solution([4,4,4,4,4,4,4,4]) == 55, \"Test 3\"\nassert     solution([4,4,4,4,4,4,4,4]) == 17, \"Test 4\"\nassert     solution([]) == 0, \"Test 5\""
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     add_elements([2,3,5], 2) == 6, \"incorrect add_elements\"\nassert     add_elements([2,3,5], 1) == 5, \"incorrect add_elements\"\nassert     add_elements([2,3,5], 2) == 5, \"incorrect add_elements\"\nassert     add_elements([2,3,5], 1) == 2, \"incorrect add_elements\"\nassert     add_elements([2,3,5], 2) == 6, \"incorrect add_elements\"\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     add_elements([1, 2, 3, 4], 2) == 6, \"incorrect\""
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     add_elements([1, 2, 3, 4], 2) == 6\nassert     add_elements([1, 2, 3, 4], 3) == -1\nassert     add_elements([1, 2, 3, 4], 4) == -1\nassert     add_elements([1, 2, 3, 4], 5) == -1\nassert     add_elements([1, 2, 3, 4], 6) == -1\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     add_elements([1, 2, 4], 5) == 9\nassert     add_elements([1, 2, 4], 7) == 9\nassert     add_elements([1, 2, 4], 1) == 1\nassert     add_elements([1, 2, 4], 3) == 1\nassert     add_elements([1, 2, 4], 1) == 1\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     add_elements([1,2,3,4,5,6,7,8,9,10], 2) == 13\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 3) == 36\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 4) == 60\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 5) == 123\nassert     add_elements([1,2,3,4,5,6,7,8,9,10], 6) == 360\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     add_elements([1,2,3,4,5], 2) == 5\nassert     add_elements([5,1,2,3,4,5], 4) == 10\nassert     add_elements([5,1,2,3,4,5], 2) == 5\nassert     add_elements([5,1,2,3,4,5], 3) == 10\nassert     add_elements([5,1,2,3,4,5], 1) == 10\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     add_elements([1,2,3], 5) == 6\nassert     add_elements([1,2,3], 2) == 6\nassert     add_elements([1,2,3], 10) == 0\nassert     add_elements([1,2,3], -5) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     add_elements([1,2,3,4], 3) == 10\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     get_odd_collatz(4) == [2,4,6,8,10]\nassert     get_odd_collatz(7) == [3,7,11,13,15,17,19,21]\nassert     get_odd_collatz(5) == [5,10,15,20,25,30]\nassert     get_odd_collatz(0) == []\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     get_odd_collatz(10) == [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\nassert     get_odd_collatz(11) == [1, 11, 21, 111, 121, 131, 141, 151, 161, 171, 181, 191, \n                                            201, 211, 221, 231, 241, 251, 263, 265, 277, 281, 311, 313, 317, \n                                            331, 333, 341, 343, 347, 349, 353, 363, 365, 367, 379, 383, \n                                            391, 401, 411, 421, 431, 433, 441, 441, 441, 441]\nassert     get_odd_collatz(100) == [1, 2, 3, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, \n                                            5000, 10000, 20000, 50000, 100000, 50000, 100000, 100000]\nassert     get_odd_collatz(21) == [1, 2, 4, 5, 7, 14, 28, 36, 45, 50, 75, 90, 125, 150, 200, 250, \n                                            300, 350, 400, 500, 600, 650, 1000]\nassert     get_odd_collatz(18) == [1, 2, 3, 5, 8, 10, 13, 16, 18, 26, 36, 48, 56, 70, 78, 87, \n                                            94, 110, 125, 160, 200, 250, 300, 350, 400, 500, 600, 650, 1000]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2, 4, 6, 8, 10]\nassert     get_odd_collatz(17) == [2, 4, 6, 8, 10, 11, 13, 16, 18, 20, 24, 26, 28, 30]\nassert     get_odd_collatz(31) == [2, 4, 6, 8, 10, 11, 13, 16, 18, 20, 24, 26, 28, 30, 34, 36, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 377, 378, 380, 382, 384, 386, 388, 390, 392, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450,452,454,456,458,460,462,464,465,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,533,534,535,536,537,538,540,542,543,544,546,547,548,550,552,554,556,558,560,562,563,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,677,679,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,745,746,747,748,750,752,754,756,758,760,762,764,765,766,768,770,772,774,775,776,777,778,780,782,784,786,787,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,868"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3, 2]\nassert     get_odd_collatz(4) == [1, 4, 3, 2]\nassert     get_odd_collatz(5) == [1, 5, 4, 3, 2]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef get_odd_collatz_2(n):\n    \"\"\"\n    Given a positive integer n, return a list that contains only odd numbers between 1 and n.\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of the previous\n    term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is\n    that no matter what value of n, the sequence will always reach 1.\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in decreasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \ndef check_get_odd_collatz(expected, actual):\n    \"\"\"\n    Check if get_odd_collatz() function is correct.\n\n    If the expected is a list, check if the expected is a list of length N. Otherwise, \n    assert is raised.\n    \"\"\"\n    assert type(expected) == list, \"expected to be a list\"\n    assert len(expected) > 0, \"expected to have elements\"\n    "
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\nassert get_odd_collatz(2) == [2]\nassert get_odd_collatz(6) == [1, 3, 6, 9, 12, 15, 18]\nassert get_odd_collatz(10000) == [1, 3, 6, 9, 12, 15, 18, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 26184, 40968, 80531, 9780, 17216, 25921, 31255, 94089, 14056, 25641, 36258, 42949, 45071, 64801, 102521, 112233, 140543, 233132, 343621, 538579, 658398, 1063821, 1771214, 263483, 432617, 734671, 1146269, 2087605, 2866797]\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     valid_date('2015-12-31') == True\nassert     valid_date('2018-02-28') == True\nassert     valid_date('2016-12-31') == False\nassert     valid_date('18-02-20') == False\nassert     valid_date('2018-02-28') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     valid_date(None) == False, \"The function should work on a string that is valid, not null!\"\nassert valid_date(123) == True, \"The function should work on a string that is valid, not not null!\"\nassert valid_date( \"21-01-2020\") == True, \"The function should work on a string that is valid, not not not null!\"\nassert valid_date(\"21-01-2020\") == True, \"The function should work on a string that is valid, not not not null!\"\nassert valid_date(\"20-10-2021\") == False, \"The function should work on a string that is valid, not not not not null!\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     valid_date('1-1-2000') == False, \"The given date is not valid!\"\nassert     valid_date('1-2-2000') == True, \"The given date is not valid!\"\nassert     valid_date('10-05-2021') == True, \"The given date is not valid!\"\nassert     valid_date('4-4-2000') == True, \"The given date is not valid!\"\nassert     valid_date('1-4-2000') == False, \"The given date is not valid!\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     valid_date(None) == False\nassert     valid_date('19-05-19') == True\nassert     valid_date('18-05-19') == False\nassert     valid_date('19-05-19') == False\nassert     valid_date('19-05-19') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     valid_date(date='20-01-01') == True\nassert     valid_date(date='20-01-02') == False\nassert     valid_date(date='20-01-01-0001') == False\nassert     valid_date(date='20-01-01-0101') == False\nassert     valid_date(date='20-01-01-0101-0001') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         valid_date('2020-02-11') == True\nassert         valid_date('2018-12-31') == False\nassert         valid_date('2017-1-1') == False\nassert         valid_date('2019-1-1') == False\nassert         valid_date('2019-1-1') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     valid_date(\"2021-12-30\") == True\nassert     valid_date(\"2021-01-01\") == True\nassert     valid_date(\"2021-01-02\") == False\nassert     valid_date(\"2021-12-31\") == False\nassert     valid_date(\"2021-12-30\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     valid_date(\"20-11-2021\") == True\nassert     valid_date(\"19-09-2021\") == False\nassert     valid_date(\"1-9-2021\") == False\nassert     valid_date(\"11-9-2021\") == True\nassert     valid_date(\"15-11-2021\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     valid_date('2019-01-05') == False\nassert     valid_date('2019-01-03') == False\nassert     valid_date('2019-01-03') == False\nassert     valid_date('2019-01-06') == False\nassert     valid_date('2019-01-01') == False\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     split_words('') == ['']\nassert     split_words('abc') == ['abc']\nassert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c,d,e') == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     split_words('hello world hello') == ['hello','world', 'hello']\nassert split_words('hello world') == ['hello', 'world']\nassert split_words('a,b,c') == ['a', 'b', 'c']\nassert split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert split_words('a,b,c,d,e') == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     split_words('') == [], 'empty string is not allowed'\nassert     split_words(' ') == [],'space is not allowed'\nassert     split_words('a') == [], 'alphabet is not allowed'\nassert     split_words('a b ') == ['a', 'b'], 'letters in the text is not allowed'\nassert     split_words('a b c ') == ['a', 'b', 'c'], 'incorrect alphabets are used'\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     split_words('') == []\nassert     split_words('a') == ['a']\nassert     split_words('ab') == ['ab']\nassert     split_words('bab') == ['b', 'b', 'b']\nassert     split_words('baa') == ['a', 'a', 'a']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('ab,c,ab,c') == ['ab', 'c']\nassert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c,d,e,f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         split_words(\"Hello world\") == ['ello','wld','rld','lrdl'],     \"split_words failed\"\nassert         split_words(\"helloworld\") == ['h','e','l','l','r','d','o','o','l','l','d','o','r','l','o','l','d','o','o'],     \"split_words failed\"\nassert         split_words(\"I am a boy.\") == ['i','a','m','a','e','b','y','l','a','m','a','d','o','a','d','o','o','a','m','a','i','a','d','o','a','d','o','o','a','m','a','i','a','d','o','a','d','o','o','a','m','a','i','a','d','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','a','d','o','o','"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     split_words('') == [],'split_words() must return a string of words without spaces'\nassert     split_words('hello world') == ['hello', 'world'],'split_words() must return a string of words without spaces'\nassert     split_words('this is a test') == ['this', 'is', 'a', 'test'],'split_words() must return a string of words without spaces'\nassert     split_words('this is a test, but world') == ['this', 'is', 'a', 'test', 'but', 'world'],'split_words() must return a string of words without spaces'\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     split_words(\"hello world, it is hello\") == [\"hello\",\"world\",\"hello\"]\nassert     split_words(\"hello world, it is hello\") == [\"hello\",\"world\",\"hello\"]\nassert     split_words(\"hello world, it is hello, no spaces\") == [\"hello\",\"world\",\"hello\"]\nassert     split_words(\"hello world, it is hello\") == [\"hello\",\"world\",\"hello\"]\nassert     split_words(\"hello world, it is hello, no spaces\") == [\"hello\",\"world\",\"hello\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     split_words('a, b, c') == ['a', 'b', 'c']\nassert     split_words('a, b, c, d') == ['a', 'b', 'c', 'd']\nassert     split_words('a, b, c, d, e') == ['a', 'b', 'c', 'd', 'e']\nassert     split_words('a, b, c, d, e, f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     split_words(\"\") == []\nassert     split_words(\"a, b\") == [\"a\", \"b\"]\nassert     split_words(\"a, b, c\") == [\"a\", \"b\", \"c\"]\nassert     split_words(\"a, b, c\") == [\"a\", \"b\", \"c\"]\nassert     split_words(\"a, b, c, d\") == [\"a\", \"b\", \"c\", \"d\"]\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_sorted([1, 2, 2, 3]) == True\nassert     is_sorted([1, 1, 2, 2, 2, 3, 3]) == True\nassert     is_sorted([]) == True\nassert     is_sorted([1, 2, 2, 3, 1]) == False\nassert     is_sorted([1, 1, 2, 2, 2, 3, 3]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_sorted([1, 3, 2, 1, 2, 3, 3]) == True\nassert     is_sorted([1, 3, 2, 1, 2, 3]) == True\nassert     is_sorted([1, 3, 2]) == True\nassert     is_sorted([1, 3, 3]) == True\nassert     is_sorted([1, 2, 3, 1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_sorted([])\nassert     is_sorted([1, 2, 3, 3, 3, 1, 1, 2, 3])\nassert     is_sorted([1, 2, 3, 1, 1, 2, 3, 3, 1, 1, 2, 3])\nassert     is_sorted([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3])\nassert     is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         is_sorted([3,2,2,1,1,2,3]) == True\nassert         is_sorted([2,2,3,1]) == False\nassert         is_sorted([2,1,3,3,1]) == False\nassert         is_sorted([]) == True\nassert         is_sorted([0,1,2,3,4,5,6,7,8]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_sorted([1,5,6,2,7,4,9]) == True\nassert     is_sorted([3,1,2,3,4,4,4,3]) == True\nassert     is_sorted([3,1,2,3,4,4,4,3,5,6]) == True\nassert     is_sorted([3,1,2,3,4,4,4,3,5,6,7,8,9,10]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_sorted(['1','3','3','3']) == True\nassert     is_sorted([1,2,3,3]) == False\n\nprint(\"The is_sorted function is working correctly.\")\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_sorted([2, 2, 2, 2, 2, 3, 1, 1, 1, 1]) == True\nassert     is_sorted([2, 2, 2, 2, 2, 1, 1, 1, 1, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_sorted([4,1,3,3,6,5]) == False\nassert     is_sorted([1,3,4,2,3,5]) == True\nassert     is_sorted([6,4,3,2,1,5]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_sorted([4, 5, 6, 8, 9, 6, 8]) == True\nassert     is_sorted([1, 5, 6, 8, 9, 6, 8]) == True\nassert     is_sorted([1, 3, 5, 5, 9, 6, 8]) == False\nassert     is_sorted([1, 3, 5, 5, 9, 6, 8, 9]) == False\nassert     is_sorted([1, 1, 5, 6, 8, 9, 6, 8]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_sorted([1,2,3,3,4,4,4,5]) == True\nassert     is_sorted([1,2,3,4,5,4,3,2]) == False\nassert     is_sorted([1,1,1,1,1,1,1,1]) == True\nassert     is_sorted([1,1,1,1,1,1,1,1,1,1,1]) == False\n\n\ndef remove_duplicates(lst):\n    '''\n    Given a list of numbers, return a list with only the items that are unique\n    and not duplicates. Assume no negative numbers and only integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     intersection(1, 3) == 2\nassert     intersection(2, 4) == 3\nassert     intersection(1, 2) == 3\nassert     intersection(2, 4) == 2\nassert     intersection(4, 7) == 3\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     intersection(interval1, interval2) == \"YES\"\nassert     intersection(interval2, interval1) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         intersection((1, 1), (1, 4)) == (1, 4)\nassert         intersection((4, 4), (1, 1)) == (1, 1)\nassert         intersection((2, 2), (1, 5)) == (1, 5)\nassert         intersection((4, 4), (3, 4)) == (3, 4)\nassert         intersection((2, 3), (2, 2)) == (2, 3)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     intersection((1, 2), (1, 3)) == (2, 3)\nassert     intersection((1, 2), (2, 4)) == ()\nassert     intersection((0, 0), (1, 0)) == ()\nassert     intersection((0, 0), (0, 0)) == ()\nassert     intersection((0, 0), (1, 0)) == ()\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     intersection(1, 3) == (2, 3)\nassert     intersection(3, 4) == (3, 4)\nassert     intersection(2, 1) == (2, 1)\nassert     intersection(4, 4) == (4, 4)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     intersection(1, 2), \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n\nprint(\"congratulations\")"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     prod_signs([1, 2, 3]) == 3\nassert     prod_signs([]) == None\nassert     prod_signs([-5]) == -5\nassert     prod_signs([-5, -4, -3, -2, -1]) == -3"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     prod_signs([-1, 2, -3, 4, 5]) == 1\nassert     prod_signs([1, -1, 1]) == 1\nassert     prod_signs([1, -1, -1]) == -1\nassert     prod_signs([-1, -1, -1]) == 0\nassert     prod_signs([]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     prod_signs([1,2,-4,-5,-6,0]) == 10\nassert     prod_signs([0,0,0,0]) == 1\nassert     prod_signs([1,-2,0,4,5,6,7]) == -10\nassert     prod_signs([1,2,-4,-5,-6,0,0]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     prod_signs([1, -1, 0, 1]) == 2\nassert     prod_signs([1, -1, 0, 1, -1, 1]) == -2\nassert     prod_signs([1, -1, -1, 0, -1, 1, 1]) == -2\n\ndef prod_digits(arr):\n    \"\"\"\n    You are given an array arr of integers.\n    Find the product of all digits of the numbers in the array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     prod_signs([-1,0,1,2,3]) == 2\nassert     prod_signs([-1,0,1,-2,3]) == 1\nassert     prod_signs([0,1,2,3,-4]) == -4\nassert     prod_signs([1,2,3,-4,0]) == -4\nassert     prod_signs([0,1,-2,3,-4,0]) == -4\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef prod_signs_all(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     prod_signs([1, -1]) == 0\nassert     prod_signs([1, -1, 0]) == 1\nassert     prod_signs([1, -1, 0, 0]) == -1\nassert     prod_signs([0, 0, 0, 0]) == 1\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     prod_signs([-2,-3,4]) is None\nassert     prod_signs([-2,2,3]) is None\nassert     prod_signs([-2,2,3,-4]) is None\nassert     prod_signs([-2,-2,3,-3]) is None\nassert     prod_signs([-2,2,3]) is None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         prod_signs([-1, 0, 1, -1]) == -1\nassert         prod_signs([-1, 1, -1, 0]) == -1\nassert         prod_signs([-1, 1, -1, 0, 1]) == -1\nassert         prod_signs([-1, 1, 0, 1]) == -1\nassert         prod_signs([-1, 1, 0, 0, 1]) == 0\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     minPath([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert     minPath([0, 0, 0, 0, 0], 0) == [0, 0, 0, 0, 0]\nassert     minPath([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert     minPath([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\nassert     minPath([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     minPath(grid, 3) == [1,2,4]\nassert     minPath(grid, 5) == [1,2,4,5,6,7]\nassert     minPath(grid, 4) == [1,2,3,4]\nassert     minPath(grid, 4) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     minPath(grid, 12) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     minPath(grid, 4) == [1, 3, 5, 7]\nassert     minPath(grid, 2) == [1, 3, 4, 5, 7, 9]\n\nif __name__ == \"__main__\":\n    grid = [\n        [1, 2, 1],\n        [2, 2, 2],\n        [1, 2, 3],\n        [2, 2, 3],\n        [3, 4, 4],\n        [3, 3, 4]\n    ]\n    k = 2\n    print(minPath(grid, k))\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     minPath([1, 2, 3, 4], 3) == [1, 2, 4]\nassert     minPath([1, 2, 3, 4], 4) == [1, 2, 4]\nassert     minPath([1, 2, 3, 4], 5) == [1, 2, 3, 4]\nassert     minPath([1, 2, 3, 4], 10) == [1, 2, 3, 4]\nassert     minPath([1, 2, 3, 4], 0) == [1, 2, 3, 4]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     minPath([[0, 1, 0, 0, 1, 0, 0, 1], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]) == [0, 1, 0, 1, 0, 0, 1, 0], \"check failed\"\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     minPath(grid, 1) == [1, 5]\nassert     minPath(grid, 5) == [1, 3, 6, 8, 9]\nassert     minPath(grid, 10) == [1, 2, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     minPath(grid, 12) == [1, 2, 5, 6, 7, 8, 10, 11, 12, 13]\nassert     minPath(grid, 14) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     minPath([1,2,3,4,5,6,7], 4) == [4,3,2,1,6,5,4]\nassert     minPath([0,0,0,0,0,0,0,0,0,0], 7) == [0,0,0,0,0,0,0,0,0,0]\nassert     minPath([1,1,1,1,1,1,1,1,1,1], 2) == [1,1,1,1,1,1,1,1,1,1]\nassert     minPath([0,0,0,0,0,0,0,0,0,0], 5) == [0,0,0,0,0,0,0,0,0,0]\nassert     minPath([1,2,3,4,5,6,7,8,9,10], 11) == [0,0,0,0,0,0,0,0,0,0]"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [1,2,3,7,8,9]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 2) == [1,2,3,7,8,9]\nassert     minPath([[1,2,3],[4,5,6],[7,8,9]], 1) == [1,2,3,7,8,9]\nassert     minPath([[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24]], 12) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     minPath([[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5]], 3) == [2, 4, 2, 6, 2, 2]\nassert     minPath([[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5]], 6) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\nassert     minPath([[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5]], 1) == [5, 5, 5, 5, 5, 5]\nassert     minPath([[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5]], 3) == [5, 5, 5, 5, 5, 5]"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     minPath(grid, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath(grid, 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     minPath(grid, 4) == [1, 2, 3, 8, 9]\nassert     minPath(grid, 2) == [1, 2, 3, 4, 5]\nassert     minPath(grid, 5) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     tri(4) == 1 + (2 / 2) + (2 * 2) + (1 + 4)\nassert     tri(4) == tri(4)\n\ndef kadanes(n):\n    \"\"\"Return n/2 to n, if n is even, return 2*n+1, else 2*n+2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_tri_sequence_correctly(tri, 2, 2) == [2, 3, 6, 8, 15], \"TRI sequence is not correct\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 3\nassert     tri(3) == 2\nassert     tri(4) == 2 + 3 + 3 = 8\nassert     tri(5) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     tri(7) == [1, 3, 3, 1, 5, 3, 3, 1]\nassert     tri(8) == [1, 3, 3, 1, 5, 3, 3, 1, 6, 6]\nassert     tri(5) == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\nassert     tri(0) == []\nassert     tri(1) == [1]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     digits(123) == 1\nassert digits(2) == 1\nassert digits(0) == 0\nassert digits(8) == 8\nassert digits(9) == 9\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     digits(123) == 0\nassert digits(123) == 0\nassert digits(1000) == 0\nassert digits(10000) == 0\nassert digits(10011) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 1\nassert     digits(2) == 2\nassert     digits(3) == 3\nassert     digits(4) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     digits(123) == 32\nassert     digits(1234) == 0\nassert     digits(1234.5) == 0\nassert     digits(12345) == 0\nassert     digits(12345.4) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     digits(123) == 1\nassert digits(0) == 0\nassert digits(-1234) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     digits(2**(10-1) + 1) == 0\nassert     digits(2**(10-1) + 1) == 1\nassert     digits(2**(10-1) + 1) == 1\n\ndef sum_digits(n):\n    \"\"\"Given a positive integer n, return the sum of the digits of n.\n    Follow up: Could you do it without any loop/recursion?\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     digits(34) == 100\nassert     digits(27) == 2\nassert     digits(101) == 1\nassert     digits(0) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     digits
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     digits(13) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_nested(\"[[[[[[[[[[[]]]]]]]]]]])]\"])])]]\")\nassert     is_nested(\"[[[[[[[[[[[]]]]]]]]]]])]]]\")\nassert     is_nested(\"[[[[[[[[[]]]]]]]]]]]\")\nassert     is_nested(\"[[[[[[[]]]]]]]]])]][]]])]\")\nassert     is_nested(\"[[[[[[[]]]]]]]]]])]]][]]])][]]])][]]])][]]])][]]]\")\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_nested('{{[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]') == True"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_nested(\"(()\") == True\nassert     is_nested(\"((()))\") == True\nassert     is_nested(\"(((()))\") == True\nassert     is_nested(\"((()()))\") == True\nassert     is_nested(\"(()()())\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_nested('[][])' == False\nassert     is_nested('[{]') == True\nassert     is_nested('[({)])' == True\n\ndef is_valid(string):\n    '''\n    Create a function that takes a string as input which contains only digits.\n    The function should return True if and only if the string is a valid Python \n    expression. Otherwise it should return False.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_nested(\"[([])\") == True\nassert     is_nested(\"[[]]\") == True\nassert     is_nested(\"()\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_nested('[[{'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_nested(\"[)(){}[)(]\"), 'Square brackets not nested'\nassert     is_nested(\"[]((()[])\"), 'No brackets'\nassert     is_nested(\"()[)(])\"), 'Same number of brackets'\nassert     is_nested(\"[()]\"), 'Not nested'\nassert     is_nested(\"[(()[])]\"), 'Incorrect nesting'\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_nested(\"[][]\"), \"The function is_nested requires brackets.\"\nassert     is_nested(\"[[]]\"), \"The function is_nested does not accept brackets.\"\nassert     is_nested(\"([]\") == True, \"The function is_nested does not accept brackets.\"\nassert     is_nested(\"([]]\") == True, \"The function is_nested does not accept brackets.\"\nassert     is_nested(\"((){})\") == True, \"The function is_nested does not accept brackets.\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_nested('[[[]]]') == True\nassert     is_nested('[[[]]]') == False\nassert     is_nested('[[[[]]]]') == True\nassert     is_nested('[[[[]]]') == False\nassert     is_nested('[[[[]]]][[]]]') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_nested('[[[[]]]]') == True\nassert     is_nested('[[[]]]') == True\nassert     is_nested('[[]]') == True\nassert     is_nested('[[[]]]') == False\nassert     is_nested('[[[]]])') == True\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sum_squares([1, 2, 3]) == 6\nassert     sum_squares([1, 2, 3, 4]) == 9\nassert     sum_squares([1, 2, 3, 4, 5]) == 21\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3,4]) == 10, \"Correct sum_squares\"\nassert     sum_squares([2,3,4,5]) == 10, \"Correct sum_squares\"\nassert     sum_squares([1,-2,3,-4]) == 30, \"Correct sum_squares\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sum_squares(lst) == [5, -8, 0, 0, 0, 0]"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sum_squares([2, 3, 4, -5, 6]) == 27, 'Wrong answer'\nassert     sum_squares([2, 3, -5]) == -3, 'Wrong answer'\nassert     sum_squares([]) == 0, 'Wrong answer'\nassert     sum_squares([5, 10, 14, 17, 20, 28, 36, 49]) == 210, 'Wrong answer'"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sum_squares([5, 3, -9]) == -25\nassert sum_squares([1, 2, 3, 4]) == 10\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sum_squares([-2, 0, 2]) == -10\nassert sum_squares([-7, 1, -9]) == -35\nassert sum_squares([0, 0, 0]) == 0\nassert sum_squares([]) == 0\nassert sum_squares([1, 2, 3]) == 3\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sum_squares([1, 3, 6, 9]) == 15, \"error in the above function\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([1]) == 1\nassert     sum_squares([1, 2, 3]) == 6\nassert     sum_squares([-1, -2, -3]) == 0\nassert     sum_squares([1, 2, 3, 4, 5]) == 27\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('water') == True\nassert     check_if_last_char_is_a_letter('test') == False\nassert     check_if_last_char_is_a_letter('he') == True\nassert     check_if_last_char_is_a_letter('a') == True\nassert     check_if_last_char_is_a_letter('$') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter(\"Helma\") == False\nassert     check_if_last_char_is_a_letter(\"Helmah\") == True\nassert     check_if_last_char_is_a_letter(\"helmah\") == False\nassert     check_if_last_char_is_a_letter(\"Helma\") == True\nassert     check_if_last_char_is_a_letter(\"Helma\") == True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter(\"alasdas\") == True\nassert     check_if_last_char_is_a_letter(\"asdfasf\") == False\nassert     check_if_last_char_is_a_letter(\"alasdasfasdasfas\") == False\nassert     check_if_last_char_is_a_letter(\"asd\") == False\nassert     check_if_last_char_is_a_letter(\"\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('mike') == False\nassert     check_if_last_char_is_a_letter('mike 1') == True\nassert     check_if_last_char_is_a_letter('mike 1a') == True\nassert     check_if_last_char_is_a_letter('mike 1b') == False\nassert     check_if_last_char_is_a_letter('mike') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         check_if_last_char_is_a_letter('abbcc') == True\nassert         check_if_last_char_is_a_letter('abcdefghijklmnopqrstuvwxyz') == False\n\n\ndef valid_word(txt):\n    '''\n    Create a function that returns True if the given string is a valid word,\n    and False otherwise.\n    '''\n    pass\n\n\ndef check_if_word_contains_number(txt):\n    '''\n    Create a function that returns True if the given string contains any of the numbers,\n    and False otherwise.\n    '''\n    pass\n\n\ndef find_starting_number(txt):\n    '''\n    Create a function that returns the first number in the given string that\n    contains a number, and the number itself. If no number is present, return None.\n    '''\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter(\"python\") == True\nassert     check_if_last_char_is_a_letter(\"  abc  \") == False\nassert     check_if_last_char_is_a_letter(\"abcdef\") == False\nassert     check_if_last_char_is_a_letter(\"abc\") == False\nassert     check_if_last_char_is_a_letter(\"python\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"hello\") == False\nassert     check_if_last_char_is_a_letter(\"hi hi hi\") == True\nassert     check_if_last_char_is_a_letter(\"Python is fun\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(\"My name is Michael\")\nassert     check_if_last_char_is_a_letter(\"my name is Michael\")\nassert     check_if_last_char_is_a_letter(\"My name is Michael\")\nassert     check_if_last_char_is_a_letter(\"Hobby is job\")\nassert     check_if_last_char_is_a_letter(\"we are born in\")\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"alice is the best\") == True\nassert     check_if_last_char_is_a_letter(\"Alice is the best\") == False\nassert     check_if_last_char_is_a_letter(\"abcdefg\") == False\nassert     check_if_last_char_is_a_letter(\"abracadabra\") == False\n\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([1,2,3,3,1,2,4,6]) == 2\nassert     can_arrange([0,1,0,2,3,3,4,5,6,7,7,8,9]) == -1"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     can_arrange([1,2,3,4,5,6]) == -1\nassert     can_arrange([3,6,9]) == -1\nassert     can_arrange([2,3]) == 0\nassert     can_arrange([1,2]) == 0\nassert     can_arrange([3,2,5]) == 0\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     can_arrange([3, 4, 1, 1]) == -1\nassert     can_arrange([-10, -1, -10, -10, -2, -2]) == -1\nassert     can_arrange([3, 4, 1, 1, 7, 8]) == -1\nassert     can_arrange([3, 4, 1, 1, 7, 8, 9]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef can_arrange(arr):\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == 4\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == 6\nassert     can_arrange([1, 1, 2, 2, 3, 3]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     can_arrange([1,2,3,4,5,6,7,8,9,10]) == -1\nassert     can_arrange([]) == -1\nassert     can_arrange([1,2,3,4,5,6,7]) == -1\nassert     can_arrange([1,2,3,4,5,6,7,8,9]) == -1\nassert     can_arrange([1,1,1,1,1,1,1,1,1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     can_arrange([1,3,4,4,5,6,6,7,7,8,8,9,9,10]) == 4, \"Should be 4\"\nassert     can_arrange([]) == -1, \"Should be -1\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     can_arrange([]) == -1\nassert     can_arrange([-1, -2, -1, 0, 1, -1]) == -1\nassert     can_arrange([-1, -2, -1, 0, 1, -1, -1, 0]) == -1\nassert     can_arrange([-1, -2, -1, 0, 1, -1, -1, 0, 1, -1, -1]) == -1\n\ndef check(arr):\n    \"\"\"Check the correctness of can_arrange\n    \"\"\"\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     can_arrange(arr) == -1"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     can_arrange([1, 5, 8, 9]) == -1\nassert     can_arrange([1, 5, 8, 3, 2]) == 2\nassert     can_arrange([1, 5, 8, 3, 2, 4, 5, 7, 9]) == 4\nassert     can_arrange([1, 5, 8, 3, 2, 4, 5, 7, 9, 6]) == 9\nassert     can_arrange([1, 5, 8, 3, 2, 4, 5, 7, 9, 6, 8, 5, 3, 2]) == 9\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([]) == None\nassert     largest_smallest_integers([1, 2, 3, 4, 5]) == (1, 5)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7]) == (-6, -7)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([-1000, 0, 100, -1]) == (0, 100)\nassert     largest_smallest_integers([-1000, -1, 0, 1]) == (-1000, 1)\nassert     largest_smallest_integers([1, -1, 1, 0, 2, -3]) == (0, -3)"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \nlargest_smallest_integers([]) == None\nassert \nlargest_smallest_integers([-10]) == (-10, None)\nassert \nlargest_smallest_integers([-10, -1, -2, 3, 5, 8, 10]) == (-10, -1, -2, -3, -5, None, None)\nassert \nlargest_smallest_integers([-10, -100, -1000]) == (-10, -100, None)\nassert \nlargest_smallest_integers([1,2,3,4,5,6,7,8,9,10,11,12]) == (1, 2, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (1, 4)\nassert     largest_smallest_integers([-2, 3]) == (-2, 3)\nassert     largest_smallest_integers([1, -2, 3]) == (1, 3)\nassert     largest_smallest_integers([-2, -1, -3, -4]) == (-2, -4)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    '''\n    Test the function largest_smallest_integers.\n    '''\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([1, 2, 0, 5, -2, -5]) == (-2, 2)\n    assert largest_smallest_integers([10, 2, 5, 0, -5, -2, -5, -4]) == (-5, 5)\n    "
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([-10, -20, -30, -40, -50]) == (None, None)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3]) == (None, 2)\nassert     largest_smallest_integers([5, -10, -20]) == (None, None)\nassert     largest_smallest_integers([]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([]) is None\nassert largest_smallest_integers([-1, 0]) == (-1, 0)\nassert largest_smallest_integers([-5, -2, 3, 5]) == (-5, -2)\nassert largest_smallest_integers([1, 2, 3]) == (1, 2)\nassert largest_smallest_integers([-10, -10]) == None\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([2, 3, -2, -4, -3]) == (-2, 3)\nassert     largest_smallest_integers([1, 2, 3, -2, -4, -3]) == (-2, 2)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7]) == (-1, -6)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (-2, -6)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (-1, -6)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([-1, 2, -4, -2, -1, -2, -3, -4, -5, -6]) == (3, 4)\nassert     largest_smallest_integers([2, 2, 2, 2, 2, 2]) == None"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     compare_one(1, 1) == 1\nassert     compare_one(1.1, 1) == 1\nassert     compare_one(None, None) == None\nassert     compare_one(123, 123) == 123\nassert     compare_one(\"foo\", \"foo\") == \"foo\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     compare_one(10, \"10.0\") == 10\nassert     compare_one(5.5, 10) == 10\nassert     compare_one(\"10\", 10) == 10\nassert     compare_one(\"10.0\", 10) == 10\nassert     compare_one(\"10,0\", 10) == 10\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     compare_one(1, 1.0) == 1\nassert     compare_one(\"Hello\", \"Hello\") == \"Hello\"\nassert     compare_one(1.0, \"Hello\") == 1.0\nassert     compare_one(\"Hello\", \"Hello, World\") == \"Hello, World\"\nassert     compare_one(2.0, 1) == 2.0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     compare_one(5, 5.0) == 5\nassert     compare_one(6, 6.0) == 6\nassert     compare_one(5, 6.0) == 6\nassert     compare_one(5, \"6.0\") == 6\nassert     compare_one(6.0, 5) == 6.0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     compare_one(5.0, \"5\") == 5\nassert     compare_one(5, \"5\") == 5\nassert     compare_one(\"5\", \"5\") == 5\nassert     compare_one(\"5.0\", \"5\") == 5\nassert     compare_one(\"5.2\", \"5\") == 5\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     compare_one(5, 5.0) == 5\nassert     compare_one(\"a\", \"a\") == \"a\"\nassert     compare_one(\"a\", \"a.1\") == \"a\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     compare_one(1.4, 4) == 1.4\nassert compare_one(1.4, 'apple') == 1.4\nassert compare_one('apple', 'apple') == 1.4\nassert compare_one('apple', 'orange') == 2\nassert compare_one('orange', 'apple') == 2\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     compare_one(1, \"1.23\") == 1\nassert     compare_one(1, \"1.5\") == 1\nassert     compare_one(1, \"1e-3\") == 1\nassert     compare_one(1, \"1\") == 1\nassert     compare_one(1, \"1.5\") == None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     compare_one(1,2.5) == 2.5\nassert     compare_one(1.0, 2.5) == 2.5\nassert     compare_one('1', '2') == '1'\nassert     compare_one(1, '2') == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     compare_one(1,1) == 1\nassert     compare_one(0,1) == 0\nassert     compare_one('hello', 'world') == 'hello'\nassert     compare_one(1, 'hello') == 'hello'\nassert     compare_one(1, 'hello, ') == 'hello'\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(7) == True\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(6) == True\nassert     is_equal_to_sum_even(0) == False\nassert     is_equal_to_sum_even(1) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(2) == True\n\nprint(\"True\""
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(4) == True\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(15) == True\nassert     is_equal_to_sum_even(99) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(4) == False\nassert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(7) == True\nassert     is_equal_to_sum_even(999) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(1) == 0\nassert     is_equal_to_sum_even(7) == 3\nassert     is_equal_to_sum_even(0) == 0\nassert     is_equal_to_sum_even(100) == 100\nassert     is_equal_to_sum_even(101) == 101\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(5) == True\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(4) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(9) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(6) == True\nassert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(5) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(0) is True\nassert is_equal_to_sum_even(1) is False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(0) == 0\nassert     is_equal_to_sum_even(1) == 1\nassert     is_equal_to_sum_even(2) == 2\nassert     is_equal_to_sum_even(3) == 3\nassert     is_equal_to_sum_even(4) == 4\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     special_factorial(3) == 9\nassert     special_factorial(5) == 120\nassert     special_factorial(7) == 729\nassert     special_factorial(9) == 81\nassert     special_factorial(12) == 1296\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     special_factorial(4) == 24,'special_factorial not implemented'\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 3\nassert     special_factorial(4) == 4\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(1) == 1\nassert     special_factorial(0) == 1\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(0) == 1\nassert     special_factorial(10) == 5040\nassert     special_factorial(21) == 722034\nassert     special_factorial(10) == 100000\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     fix_spaces(\"  a b  \") == \"a-b\"\nassert     fix_spaces(\"  a  b  c  \") == \"a-b-c\"\nassert     fix_spaces(\"  a  b  c  d  e  \") == \"a-b-c-d-e\"\nassert fix_spaces(\"  a  b  c  d  e  \") == \"a-b-c-d-e-e\"\nassert fix_spaces(\"  a  b  c  d  e  \") == \"a-b-c-d-e-e-e\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fix_spaces(\"This is a test\") == \"This---is---a---test\"\nassert     fix_spaces(\"abcd\") == \"abcd\"\nassert     fix_spaces(\"abcd      \") == \"abcd\"\nassert     fix_spaces(\"    \") == \"    \"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     fix_spaces('') == '', 'Your code should be passing'\nassert fix_spaces('abc_') == 'abc', 'Your code should be passing'\nassert fix_spaces('  a  b  c') == 'a-b-c', 'Your code should be passing'\nassert fix_spaces('  aaaaaaaaaaa  ') == 'aaaa-aaaa-aaaa', 'Your code should be passing'\nassert fix_spaces('   test   test    ') == 'test-test-test', 'Your code should be passing'\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     fix_spaces('a b c') == 'a-b-c'\nassert     fix_spaces('  a b c') == 'a-b-c'\nassert     fix_spaces('a b-c') == 'a-b-c'\nassert     fix_spaces('a b-c-d') == 'a-b-c-d'\nassert     fix_spaces('  a  b  c  d') == 'a-b-c-d'\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         fix_spaces('abc def') == 'abc-def'\nassert         fix_spaces('abc def') == 'abc def'\nassert         fix_spaces('abc-def') == 'abc-def'\nassert         fix_spaces('abc-def') == 'abc-def'\nassert         fix_spaces('abc-def') == 'abc-def'\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     check_spaces(str(fix_spaces)) == str(fix_spaces)\nassert fix_spaces(str(fix_spaces)) == str(fix_spaces)\nassert fix_spaces(str(fix_spaces)) == str(fix_spaces)\nassert fix_spaces(str(fix_spaces)) == str(fix_spaces)\nassert fix_spaces(str(fix_spaces)) == str(fix_spaces)\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fix_spaces(\"hello world hello\") == \"hello-_o-world hello-_o-hello-world hello-_o-hello-hello-world hello-_o-hello-hello-world hello-_o-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hello-hello-world hello-_o-hello-hell"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fix_spaces(\"\"), \"Empty string\"\nassert     fix_spaces(\" a\") == \"a-\", \"Only one-character string\"\nassert     fix_spaces(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"a b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z\", \"Mismatch in string length\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     file_name_check(\"test\") == 'No'\nassert     file_name_check(\"test.txt\") == 'No'\nassert     file_name_check(\"test\") == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     file_name_check('1-Mall-1-2021-10-17.txt') == 'No'\nassert     file_name_check('txt.exe') == 'No'\nassert     file_name_check('exe.dll') == 'No'\nassert     file_name_check('MALL') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     file_name_check(\"tcp_files\") == \"Yes\"\nassert     file_name_check(\"\") == \"No\"\nassert     file_name_check(\"./tcp_files.txt\") == \"Yes\"\nassert     file_name_check(\"tcp_files.exe\") == \"Yes\"\nassert     file_name_check(\"tcp_files.dll\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \nassert file_name_check('hello.txt') == \"No\"\nassert file_name_check('hello.txt') == \"Yes\"\n\n\n\n\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     file_name_check(\"Jurassic_Dota.txt\") == \"Yes\", \"File is not valid\"\nassert     file_name_check(\"jurassic-dota.txt\") == \"No\", \"File is valid\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     file_name_check('10000.txt') == 'Yes'\nassert     file_name_check('100.txt') == 'No'\nassert     file_name_check('0.txt') == 'Yes'\nassert     file_name_check('0.exe') == 'No'\nassert     file_name_check('0') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         file_name_check('05_07_2021_W_09_09_coding') == 'No', 'Test Failed'\nassert         file_name_check('mach_kernel.exe') == 'No', 'Test Failed'\nassert         file_name_check('06_07_2021_W_09_09_coding') == 'No', 'Test Failed'\nassert         file_name_check('09_09_2021_W_09_09_coding') == 'No', 'Test Failed'\nassert         file_name_check('09_09_2021_W_09_09_coding_new') == 'No', 'Test Failed'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     file_name_check('a.txt') == 'Yes'\nassert     file_name_check('aaaa.txt') == 'No'\nassert     file_name_check('ab..txt') == 'No'\nassert     file_name_check('aaaaaaa.txt') == 'No'\nassert     file_name_check('...txt') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     file_name_check('1234567890.txt') == 'No',     'invalid file name'\nassert     file_name_check('123.exe') == 'No', 'invalid file name'\nassert     file_name_check('123a.txt') == 'No', 'invalid file name'\nassert     file_name_check('123a.exe') == 'No', 'invalid file name'\nassert     file_name_check('123.123a.txt') == 'No', 'invalid file name'\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sum_squares([]) == 0\nassert sum_squares([1, 2, 3, 4]) == 27\nassert sum_squares([5, 7, 9, 11, 13]) == 85\nassert sum_squares([5, 4, 3, 2, 1]) == 10\nassert sum_squares([2, 3, 5]) == 10\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 42\nassert     sum_squares([]) == 0\nassert     sum_squares([1,2,3,4,5,6,7,8,9]) == 45\nassert     sum_squares([1,1,1,1]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sum_squares([]) == 0\nassert sum_squares([1, 4]) == 9\nassert sum_squares([1, 4, 9]) == 27\nassert sum_squares([1, 2, 3, 4, 5]) == 8\nassert sum_squares([1, 3, 9, 7]) == 31\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sum_squares([2,3,4]) == 9, \"The function must return 9\"\nassert     sum_squares([1,2,3,4,5]) == 27, \"The function must return 27\"\nassert     sum_squares([]) == 0, \"The function must return 0\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sum_squares([3, 4, 7, 9]) == 22\nassert     sum_squares([3, -9, 3]) == 0\nassert     sum_squares([-6, -7, -8, -7, -6]) == 0\nassert     sum_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45\n\n\ndef sum_squares_b(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sum_squares([1, 2, 4, 5, 5]) == 15, \"sum_squares() function incorrect\"\nassert     sum_squares([3, 3, 3, 3, 3]) == 9, \"sum_squares() function incorrect\"\nassert     sum_squares([3, 3, 3, 3, 3, 3, 3]) == 18, \"sum_squares() function incorrect\"\nassert     sum_squares([]) == 0, \"sum_squares() function incorrect\"\nassert     sum_squares([1, 2, 4, 5, 5]) == 15, \"sum_squares() function incorrect\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sum_squares([1,2,3,4]) == 24\nassert sum_squares([6,7,8]) == 36\nassert sum_squares([3,7,9]) == 27\n\ndef sum_squares_normal(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3, and cube the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose \n    indices are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \nsum_squares([2, 3, 4, 5, 6, 9, 10]) == 45\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sum_squares([1, 2, 3, 4, 6, 8, 10]) == 30\nassert     sum_squares([2, 4, 6, 8, 10]) == 30\nassert     sum_squares([1, 2, 3, 4, 6, 8, 10, 12]) == 60\nassert     sum_squares([1, 2, 3, 4, 6, 8, 10, 12, 30]) == 120\nassert     sum_squares([1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sum_squares([-1, 3, 4, 5, 6, -7, 0]) == 10\nassert     sum_squares([1, 2, 3, 4, 5, 6, -7, 0]) == 10\nassert     sum_squares([1, 2, 3, 4, 5, 6, -7, 0, 0, 0, 0]) == 36\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 36\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 94\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     words_in_sentence('We are quick. We are very quick.') == ['We', 'are','very', 'quick']\nassert     words_in_sentence('A person is quick if their name has one single period, and only if it has no double periods') == ['A', 'person', 'is', 'quick']\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"fox jumps over the lazy dog\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy\") == \"fox jumps over the lazy\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"fox jumps over the lazy dog\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"fox jumps over the lazy dog\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"fox jumps over the lazy dog\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"Hello world\") == \"heLoLdEr\"\nassert     words_in_sentence(\"HELLO WORLD\") == \"HELLO WORLD\"\nassert     words_in_sentence(\"HellO WORLD\") == \"HELLO WORLD\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"\") == \" \"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"programming\") == \"programming\"\nassert     words_in_sentence(\"life is too short\") == \"life is too short\"\nassert     words_in_sentence(\"mississippi\") == \"misissippi\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"hello world\") == \"helloworld\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     words_in_sentence('the quick brown fox jumps over the lazy dog') == 'the quick brown fox jumps over the lazy dog'\nassert     words_in_sentence('the quick brown fox jumps over the lazy cat') == 'the quick brown fox jumps over the lazy cat'\nassert     words_in_sentence('the quick brown fox jumps over the lazy eagle') == 'the quick brown fox jumps over the lazy eagle'\nassert     words_in_sentence('the quick brown fox jumps over the lazy eagle') == 'the quick brown fox jumps over the lazy eagle'\nassert     words_in_sentence('the quick brown fox jumps over the lazy mouse') == 'the quick brown fox jumps over the lazy mouse'\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the brown fox jumps over the lazy dog\"\nassert     words_in_sentence(\"\") == \"the quick brown fox jumps over the lazy dog\"\n\n\n\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"Hello\") == \"H\"\nassert     words_in_sentence(\"This is a test.\") == \"TEST\"\nassert     words_in_sentence(\"A string, not a list.\") == \"A STRING NOT A LIST\"\nassert     words_in_sentence(\"This is\") == \"THIS IS\"\nassert     words_in_sentence(\"\") == \"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     words_in_sentence('') == ''\nassert words_in_sentence('I love Python') == 'I love Python'\nassert words_in_sentence('I love Java') == 'I love Java'\nassert words_in_sentence('JAVA is awesome') == 'JAVA is awesome'\nassert words_in_sentence('MY first language is Java') == 'MY first language is Java'\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     simplify('3/2', '1') == '3/2'\nassert     simplify('3/2', '2') == '3/2'\nassert     simplify('3/2', '3') == '3/2'\nassert     simplify('1/2', '2') == '1/2'\nassert     simplify('1/2', '3') == '1/2'\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     simplify(x=x, n=n) is False\nassert     simplify(x='0.1', n=n) is True\nassert     simplify(x=10, n=2) is False\n\nif __name__ == '__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('x = 3.0')\n    print('n = 2')\n    print('Exception :')\n    print('False')\n    print()\n    print('Example 2:')\n    print('Input : ')\n    print('x = 0.1')\n    print('n = 2')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 3:')\n    print('Input : ')\n    print('x = 3.1')\n    print('n = 2')\n    print('Exception :')\n    print('False')\n    print()\n    print('Example 4:')\n    print('Input : ')\n    print('x = 6.0')\n    print('n = 1')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 5:')\n    print('Input : ')\n    print('x = 2.5')\n    print('n = 1')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 6:')\n    print('Input : ')\n    print('x = 3.0')\n    print('n = 0')\n    print('Exception :')\n    print('False')\n    print()\n    print('Example 7:')\n    print('Input : ')\n    print('x = 2.3')\n    print('n = 1')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 8:')\n    print('Input : ')\n    print('x = 3.0')\n    print('n = 0')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 9:')\n    print('Input : ')\n    print('x = 3.0')\n    print('n = 1')\n    print('Exception :')\n    print('False')\n    print()\n    print('Example 10:')\n    print('Input : ')\n    print('x = 3.0')\n    print('n = 1')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 11:')\n    print('Input : ')\n    print('x = 3.1')\n    print('n = 1')\n    print('Exception :')\n    print('False')\n    print()\n    print('Example 12:')\n    print('Input : ')\n    print('x = 4.0')\n    print('n = 1')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 13:')\n    print('Input : ')\n    print('x = 0.1')\n    print('n = 2')\n    print('Exception :')\n    print('False')\n    print()\n    print('Example 14:')\n    print('Input : ')\n    print('x = 0.0')\n    print('n = 0')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 15:')\n    print('Input : ')\n    print('x = 0.0')\n    print('n = 2')\n    print('Exception :')\n    print('False')\n    print()\n    print('Example 16:')\n    print('Input : ')\n    print('x = 0.1')\n    print('n = 2')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 17:')\n    print('Input : ')\n    print('x = 0.1')\n    print('n = 1')\n    print('Exception :')\n    print('True')\n    print()\n    print('Example 18:')\n    print('Input : ')\n    print('x = 0.1')\n    print('n = 0')\n    print('Exception :')\n    print('False')\n    print()\n    print('Example 19:')\n    print('Input : ')\n    print('x = 0.2')\n    print('n = 1')\n    print('Exception :'"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     simplify(1,1) == True\nassert     simplify(1,2) == False\nassert     simplify(1/2,1) == True\nassert     simplify(1/2,2) == False\nassert     simplify(1.1,1) == True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     simplify(\"5/2\", \"3\") == True\nassert     simplify(\"5/2\", \"1\") == False\nassert     simplify(\"1/2\", \"3\") == False\nassert     simplify(\"5/4\", \"3\") == True\nassert     simplify(\"5/4\", \"1\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     simplify(\"2/2\", 0) == \"1\"\nassert     simplify(\"2/2\", 1) == \"1\"\nassert     simplify(\"2/1\", 2) == \"0\"\nassert     simplify(\"2/0\", 0) == \"0\"\nassert     simplify(\"1/0\", 0) == \"0\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     simplify(\"0.6\", \"1\") == True\nassert     simplify(\"1\", \"1\") == True\nassert     simplify(\"1.3\", \"1.4\") == True\nassert     simplify(\"1/4\", \"1/8\") == True\nassert     simplify(\"0.15\", \"1.2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     simplify(0, '0') == True\nassert     simplify('1/2', '2') == False\nassert     simplify('1/2', '1') == True\nassert     simplify('1/2', '1/2') == True\nassert     simplify('1/2', '0') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     simplify(12, 13) == True\nassert     simplify(12, 4) == True\nassert     simplify(13, 12) == False\nassert     simplify(1/3, 1) == True\nassert     simplify(1/2, 1) == False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     simplify(\"123/5\", 3) == True\nassert     simplify(\"7\", -1) == False\nassert     simplify(\"1.2\", 1) == True\nassert     simplify(\"123/5\", 1) == True\nassert     simplify(\"123/5\", 5) == False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     simplify(\"1/2\", \"1\") == True\nassert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"2\") == True\nassert     simplify(\"1/2\", \"3\") == True\nassert     simplify(\"1/2\", \"4\") == True\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     order_by_points([1, 5, 2, 8, 6, 3, 9, 9]) == [9, 8, 9, 5, 3, 6, 2, 1]\nassert     order_by_points([-1, 2, 5, 3, 9, 7, 8, 9, 2, 9]) == [9, 9, 9, 2, 9, 7, 5, 3, 2, 1]\nassert     order_by_points([4, 3, 5, 6, 9, 9, 7, 2, 2, 8]) == [2, 8, 2, 5, 3, 6, 7, 9, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         order_by_points([1, 3, 5]) == [1, 3, 5]\nassert         order_by_points([4, 8, 6, 1]) == [1, 4, 6, 8]\nassert         order_by_points([9, 0, 4, 1, 8, 6]) == [9, 0, 1, 8, 4, 6]\nassert         order_by_points([]) == []\n\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([1, 5, 6, 2, 4, 8]) == [2, 4, 6, 5, 8, 8]\nassert     order_by_points([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     order_by_points([2, 4, 8, 6, 7]) == [4, 8, 6, 7, 8]\nassert     order_by_points([-1, 2, 5, 8, 7]) == [2, 5, 8, 7, -1]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     order_by_points([8, 2, 1, 1, 9, 9]) == [9, 9, 9, 9, 8, 8]\nassert     order_by_points([]) == []\nassert     order_by_points([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\nassert     order_by_points([1, 3, 5, 7, 9, 9]) == [1, 3, 5, 7, 9, 9]\nassert     order_by_points([9, 9, 9, 9, 9, 9]) == []\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     order_by_points([9, 9, 9, 8, 9, 1, 9, 8, 9, 9, 9, 9, 9, 9, 9]) == [9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]\n\ndef check_recursion(nums, index):\n    \"\"\"\n    You have to check if the index index is already in the list\n    (at index index in the array), if so, you can't add to it\n    Otherwise, you can add the index index's number to the end of the\n    recursion, which means that you can't check the number in the array.\n    We only check the index index's number if the index is not equal to the\n    index of the last number of the array, because we can't have a number\n    that is equal to the index's number for the last number of the array.\n    \"\"\"\n    pass\n\ndef heap_sort(nums):\n    \"\"\"\n    Performs the heap-sort in a linear manner.\n    The idea is to make it a binary search tree with nodes having\n    the same value.\n    \"\"\"\n    pass\n\ndef heapsort(nums):\n    \"\"\"\n    Performs the heap-sort in a depth-first manner.\n    \"\"\"\n    pass"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     order_by_points([17, 1, 7, 5, 2]) == [2, 7, 5, 17, 1]\nassert     order_by_points([9, 4, 8, 2, 5, 3, 1, 7, 6, 8]) == [2, 5, 8, 7, 4, 6, 1, 2, 9, 3]\n\ndef order_by_weight(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to their weight.\n    Note: if there are several items with similar weight of their\n    numbers, order them based on their index in original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     order_by_points(list(map(int, \"123\"))) == [0, 1, 2, 3]\nassert     order_by_points(list(map(int, \"123\"))) == [1, 2, 3, 0]\nassert     order_by_points(list(map(int, \"123\"))) == [1, 2, 3, 0]\nassert     order_by_points(list(map(int, \"123\"))) == [1, 2, 3, 0]\n\ndef sort_by_sum(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     order_by_points([1, 5, 3]) == [3, 1, 5]\nassert     order_by_points([9, 6, 1, 3]) == [1, 3, 6, 9]\nassert     order_by_points([1, 3, 2, 6, 2, 1]) == [2, 3, 1, 6, 2, 1]\nassert     order_by_points([]) == []\n\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([-9]) == [9]\nassert     order_by_points([-9, -6, -3, 0, 1, 2, 4]) == [0, 1, 2, 4]\nassert     order_by_points([-9, -6, -3, 0, 1, 2, 4, 7, 10]) == [7, 10]\nassert     order_by_points([-9, -6, -3, 0, 1, 2, 4, 7, 10, 8, 1]) == [0, 8, 1]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     order_by_points([-101, -60, -3, -10, -40]) == [10, -40, -10, -3, -101]\nassert     order_by_points([-101, -60, -3, -10, -40]) == [-10, -3, -101, -60, -40]\nassert     order_by_points([-101, -60, -3, -10, -40]) == [-10, -3, -101, -60, -40]\nassert     order_by_points([-10, -20, -30, -40, -50, -60]) == [-30, -20, -40, -50, -60, -30]\nassert     order_by_points([-10, -20, -30, -40, -50, -60]) == [-30, -20, -40, -50, -60, -30]\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     specialFilter([1, 3, 5, 7, 9, 10, 11, 12, 13, 14]) == 14\nassert     specialFilter([3, 5, 7, 9, 10, 11, 12, 13, 14, 15]) == 15\nassert     specialFilter([3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16]) == 16\n\n\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     specialFilter(\n    [\n        [5, 2, 5, 2, 9],\n        [5, 5, 2, 5, 9],\n        [5, 5, 5, 2, 9]\n    ]\n) == 4, '1'\nassert     specialFilter(\n    [\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7]\n    ]\n) == 3, '3'\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef check(*args):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    pass\n\ndef specialFilter2(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    pass\n\ndef check2(*args):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    pass\n\ndef check3(*args):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     specialFilter([8, 1, 2, 3, 9]) == 10\nassert     specialFilter([3, 2, 7, 0, 2, 10, 1, 3, 1, 9]) == 10\nassert     specialFilter([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0\nassert     specialFilter([7, 8, 9, 0, 4, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 0\nassert     specialFilter([3, 7, 9, 0, 6, 0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     specialFilter([1,3,5,7,9]) == 2\nassert     specialFilter([1,1,1,1,1,1,1]) == 1\nassert     specialFilter([-1,-1,0,1,2,3,4]) == 1\nassert     specialFilter([2]) == "
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     get_max_triples(4) == 4\nassert     get_max_triples(7) == 2\nassert     get_max_triples(15) == 10\n\ndef get_sum_triples(n):\n    \"\"\"\n    You are given an integer n.\n        You are given an array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] is i * i - i + 1.\n        Return the sum of all the values of a for all i, where a[i] is the value of i.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef get_max_triples_for_n(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 1\nassert     get_max_triples(3) == 3\nassert     get_max_triples(5) == 8\nassert     get_max_triples(10) == 36\nassert     get_max_triples(50) == 63958\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     get_max_triples(5) == 120\nassert     get_max_triples(1) == 0\nassert     get_max_triples(0) == 0\nassert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n    \n    \ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\n\ndef get_max_triples_fast(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    You can assume that there are at most 2^n - 1 unique numbers.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Jupiter\", \"Saturn\") == (\"Jupiter\", \"Saturn\", \"Earth\", \"Mars\", \"Uranus\", \"Neptune\")\nassert     bf(\"Jupiter\", \"Uranus\") == (\"Jupiter\", \"Uranus\", \"Earth\", \"Mars\", \"Saturn\", \"Neptune\")\nassert     bf(\"Uranus\", \"Neptune\") == (\"Uranus\", \"Neptune\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nassert     bf(\"Uranus\", \"Saturn\") == (\"Uranus\", \"Saturn\", \"Earth\", \"Mars\", \"Jupiter\", \"Neptune\")\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mercury', 'Uranus') == ('Mercury', 'Uranus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Uranus', 'Saturn') == ('Uranus', 'Saturn', 'Earth', 'Mars', 'Jupiter', 'Neptune', 'Mercury', 'Uranus')\nassert     bf('Uranus', 'Neptune') == ('Uranus', 'Neptune', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Uranus', 'Jupiter') == ('Uranus', 'Jupiter', 'Earth', 'Mars', 'Saturn', 'Uranus', 'Neptune', 'Uranus')\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Mercury')\nassert     bf('Mercury', 'Uranus') == ('Mercury', 'Uranus', 'Mercury')\nassert     bf('Venus', 'Uranus') == ('Uranus', 'Uranus', 'Venus')\nassert     bf('Uranus', 'Uranus') == ('Uranus', 'Uranus', 'Uranus')\nassert     bf('Uranus', 'Neptune') == ('Uranus', 'Neptune', 'Uranus')\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     (bf(\"Mercury\", \"Venus\") == ((\"Mercury\", \"Venus\"), (\"Mars\", \"Jupiter\"), (\"Saturn\", \"Uranus\"), (\"Neptune\", \"Earth\")))\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Mars', 'Uranus', 'Neptune')\nassert     bf('Uranus', 'Neptune') == ('Uranus', 'Neptune', 'Mars', 'Saturn', 'Mercury')\nassert     bf('Earth', 'Mars') == ('Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')\nassert     bf('Uranus', 'Jupiter') == ('Uranus', 'Jupiter', 'Saturn', 'Mercury')\nassert     bf('Saturn', 'Neptune') == ('Saturn', 'Neptune', 'Mercury', 'Jupiter')\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\ndef cli():\n    '''\n    In the first line of the program, you will enter the name of a planet and the \n    name of a planet you wish to test. You may also enter the name of an \n    another planet, or the name of a planet you wish to test with the -h option. \n    The program should then output a dictionary containing the names of all the \n    corresponding planet, and a dictionary containing all the distances of all the \n    corresponding planets from their orbits. The dictionary should be sorted by \n    the proximity to the Sun. The dictionary should be keyed by planet names, and \n    values should be lists of all the distances from the Sun to that planet. \n    '''\n    pass\n\ndef e(num):\n    '''\n    An example of how to use the \"e\" command, which produces the command \n    \"eprint\" to print the eulerian path of a circle. \n    '''\n    pass\n\ndef p(planet1, planet2):\n    '''\n    The formula for the probability that two planet names appear as \n    separate planets, is as follows: \n    Prob(a, b) = 1/(1+|a|+|b|) \n    where | is the number of orbits between the two planet \n    a and b. \n    Prob(a,b) should be the probability that the orbits of planet a and \n    b occur in the Eulerian path. \n    '''\n    pass\n\ndef p_2(planet1, planet2):\n    '''\n    The formula for the probability that two planet names appear as \n    separate planets, is as follows: \n    Prob(a, b) = 1/(1+|a|+|b|) \n    where | is the number of orbits between the two planet \n    a and b. \n    Prob(a,b) should be the probability that the orbits of planet a and \n    b occur in the Eulerian path. \n    '''\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     bf(planet1, planet2) == (planet1, planet2)\nassert     bf(planet2, planet1) == (planet2, planet1)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == ((\"Mercury\", \"Venus\", \"Mercury\", \"Mercury\", \"Mercury\"), (\"Mercury\", \"Venus\", \"Mercury\", \"Mercury\", \"Mercury\", \"Mercury\"))\nassert     bf(\"Saturn\", \"Uranus\") == ((\"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\"), (\"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\", \"Uranus\", \"Saturn\"))\nassert     bf(\"Mars\", \"Uranus\") == ((\"Mars\", \"Uranus\", \"Mars\", \"Uranus\", \"Mars\"), (\"Mars\", \"Uranus\", \"Mars\", \"Uranus\", \"Mars\", \"Mars\"))\nassert     bf(\"Jupiter\", \"Uranus\") == ((\"Jupiter\", \"Uranus\", \"Jupiter\", \"Uranus\", \"Jupiter\"), (\"Jupiter\", \"Uranus\", \"Jupiter\", \"Uranus\", \"Jupiter\", \"Uranus\", \"Jupiter\", \"Uranus\", \"Jupiter\"))\nassert     bf(\"Saturn\", \"Saturn\") == ((\"Saturn\", \"Saturn\", \"Saturn\", \"Saturn\", \"Saturn\"), (\"Saturn\", \"Saturn\", \"Saturn\", \"Saturn\", \"Saturn\", \"Saturn\"))\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n\ndef bg(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     bf(planet1=\"Mercury\", planet2=\"Venus\") == (('Mercury', 'Venus'), ('Mercury', 'Venus', 'Mercury'), ('Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury'))\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sorted_list_sum([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sorted_list_sum([5,4,3,2,1]) == [1,2,3,4,5]\nassert     sorted_list_sum([1,2,3,4,5,7,9,10,11,13]) == [1,2,3,4,5,7,9,10,11,13]\nassert     sorted_list_sum([]) == []\nassert     sorted_list_sum([5,4,3,2,1,5,4,3,2,1]) == [5,4,3,2,1]\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sorted_list_sum([1, 2, 2, 3]) == [1, 2, 3]\nassert     sorted_list_sum([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     sorted_list_sum([2, 1, 4, 3, 5]) == [1, 2, 3, 4, 5]\nassert     sorted_list_sum(['a', 'b', 'a', 'c', 'b', 'a']) == ['a', 'b', 'a', 'c', 'b', 'a']\nassert     sorted_list_sum([]) == []"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"one\", \"two\", \"three\", \"one\", \"two\", \"three\", \"one\"]) == [\"two\", \"one\", \"three\", \"three\", \"one\", \"two\", \"one\"]\nassert     sorted_list_sum([\"Hello\", \"World\", \"Hi\", \"Hey\", \"Howdy\", \"Hello\", \"Hi\"]) == [\"Hello\", \"Hi\", \"Howdy\", \"Hi\", \"Hi\", \"Howdy\", \"Hello\"]\nassert     sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"c\", \"d\", \"e\", \"a\", \"b\"]\nassert     sorted_list_sum([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sorted_list_sum([1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         sorted_list_sum([1, 2, 3, 4, 5]) == [1, 3, 4, 5, 2]\nassert         sorted_list_sum([5, 2, 6, 8, 7, 9]) == [2, 6, 7, 9, 5, 8]\nassert         sorted_list_sum([]) == []\nassert         sorted_list_sum([3, 6, 1, 5, 2]) == [1, 3, 6, 2, 5]\nassert         sorted_list_sum([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sorted_list_sum(['a', 'a', 'b', 'b']) == ['a', 'a', 'b', 'b']\nassert     sorted_list_sum(['a', 'a', 'a', 'b', 'b']) == ['a', 'a', 'b', 'b']\nassert     sorted_list_sum(['a', 'a', 'a', 'a', 'b']) == ['a', 'a', 'a', 'a', 'b']\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sorted_list_sum([1,1,2]) == [1,1,2]\nassert     sorted_list_sum([1,1,2,3]) == [1,1,2,3]\nassert     sorted_list_sum([]) == []\nassert     sorted_list_sum([1]) == []\nassert     sorted_list_sum([1,1]) == []\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\nlst = [\"hello\", \"world\", \"hello\", \"howdy\", \"hi\", \"goodbye\", \"hello\"]\nprint(sorted_list_sum(lst))\n\nlst = [\"hello\", \"world\", \"hello\", \"howdy\", \"hi\", \"goodbye\", \"hello\"]\nprint(sorted_list_sum(lst))\n\nlst = [\"hello\", \"world\", \"hello\", \"howdy\", \"hi\", \"goodbye\", \"hello\"]\nprint(sorted_list_sum(lst))\n\nlst = [\"hello\", \"world\", \"hello\", \"howdy\", \"hi\", \"goodbye\", \"hello\"]\nprint(sorted_list_sum(lst))\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         x_or_y(2, 2, 2) == 2\nassert         x_or_y(3, 1, 2) == 1\nassert         x_or_y(5, 5, 4) == 5\nassert         x_or_y(6, 4, 5) == 2\nassert         x_or_y(7, 3, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     x_or_y(0, 1, 2) == 1\nassert     x_or_y(1, 2, 3) == 3\nassert     x_or_y(1, 2, 4) == 4\nassert     x_or_y(5, 2, 5) == 1\nassert     x_or_y(2, 2, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     x_or_y(0, 1, 0) == 0\nassert     x_or_y(1, 0, 0) == 0\nassert     x_or_y(2, 0, 0) == 0\nassert     x_or_y(3, 0, 0) == 0\nassert     x_or_y(4, 0, 0) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     x_or_y(0, 0, 0) == 0\nassert     x_or_y(0, 0, 1) == 1\nassert     x_or_y(2, 2, 2) == 2\nassert     x_or_y(2, 2, 3) == 2\nassert     x_or_y(1, 1, 1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     x_or_y(123456789, 3, 5) == 3\nassert     x_or_y(123456789, 7, 2) == 7\nassert     x_or_y(123456789, -7, 1) == -7\nassert     x_or_y(123456789, 0, 7) == 0\nassert     x_or_y(123456789, 7, -7) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     x_or_y(2, 13, 9) == 9\nassert     x_or_y(1, 13, 9) == 13\nassert     x_or_y(3, 13, 9) == 9\nassert     x_or_y(4, 13, 9) == 13\nassert     x_or_y(7, 13, 9) == 9\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     x_or_y(7, 1, 1) == 1\nassert     x_or_y(1, 1, 1) == 1\nassert     x_or_y(4, 1, 1) == 1\nassert     x_or_y(3, 1, 2) == 3\nassert     x_or_y(2, 2, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     x_or_y(1,2,3) == 2\nassert     x_or_y(2,2,3) == 2\nassert     x_or_y(3,2,3) == 3\nassert     x_or_y(4,2,3) == 4\nassert     x_or_y(5,2,3) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         x_or_y(1, 2, 3) == 3\nassert         x_or_y(1, 2, 4) == 2\nassert         x_or_y(4, 1, 2) == 1\nassert         x_or_y(4, 5, 1) == 0\nassert         x_or_y(0, 0, 0) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     x_or_y(20, False, True) == 1\nassert x_or_y(10, False, True) == 2\nassert x_or_y(3, True, True) == 3\nassert x_or_y(1, False, True) == 1\nassert x_or_y(9, False, True) == 4"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\n'''\nTest 1\n    >>> double_the_difference([])\n    0\n    >>> double_the_difference([1, 2, 3, 4, 5, 6])\n    25\n    >>> double_the_difference([1, 2, 3, 4, 8, 9, 10, 11, 13, 14])\n    105\n    >>> double_the_difference([-1, -2, -3])\n    -10\n    \n    >>> double_the_difference([-1, 2, 3, 4, 5, 6, 7, 8])\n    33\n    \n    >>> double_the_difference([-4, -5, -7, -8])\n    -14\n'''\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     double_the_difference([1,2,3]) == 10\nassert     double_the_difference([3,4,-2]) == 27\nassert     double_the_difference([-5,2,4]) == -49\nassert     double_the_difference([-1,0]) == 0\nassert     double_the_difference([3,4,5]) == 27\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3, 4]) == 27\nassert     double_the_difference([-4, -5, -6, -7]) == -33\nassert     double_the_difference([1, 3, -8, 2, 1]) == 27\nassert     double_the_difference([1, 2, 3, 4, 5, 6]) == 84\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     double_the_difference([-1, -2, -3, -4, -5]) == 5\nassert     double_the_difference([-2, -1, 1, 3, 4]) == 0\nassert     double_the_difference([-1, -2, -3, -4, -5]) == 0\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     double_the_difference([]) == 0\n\nassert     double_the_difference([1, 2, 4]) == 7\n\nassert     double_the_difference([-2, -1, 0, 1, 2]) == -12\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     double_the_difference([]) == 0\n\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8]))\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         compare([\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"],    [\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"]) == [0,0,0,0,0,0,0,0,0,0]\nassert         compare([\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"],    [\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"]) == [0,0,0,0,0,0,0,0,0,0]\nassert         compare([\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"],    [\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"]) == [0,0,0,0,0,0,0,0,0,0]\nassert         compare([\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"],    [\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"]) == [0,0,0,0,0,0,0,0,0,0]\nassert         compare([\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"],    [\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\",\"R\"]) == [0,0,0,0,0,0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     compare(['2','1','4','3'],['1','4','3','2']) == 0, 'incorrect'\nassert     compare(['1','1','4','3'],['1','4','3','2']) == -1, 'incorrect'\nassert     compare(['2','2','5','4'],['1','5','2','2']) == 0, 'incorrect'\nassert     compare(['1','1','4','3'],['2','2','5','4']) == -1, 'incorrect'\nassert     compare(['2','2','5','4'],['1','5','2','2']) == 0, 'incorrect'\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     compare(test_guess,test_score) == 0\n\nprint(\"all tests passed!\")"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare(compare"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef display_table(n,scores,guesses):\n    \"\"\"Display the number of matches in a table.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     compare(5,4) == 2\nassert     compare(5,4) == 0\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     compare(difficulty,scores) == 0\nassert     compare(difficulty,guesses) == 0\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     compare(match_scores,guesses) == 0"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     compare(game_scores,guess_scores) == 0, \"The function does not return the correct answers\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     'Slices' in Strongest_Extension.__name__\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         ('Slices' in Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nassert         ('Slices' in Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef Test_strongest_extension():\n    \"\"\"Simple test to check if the strongest extension is a string.\n    Don't use this test for your own testing, but try to make it work.\n    \"\"\"\n    assert\n\ndef Test_strongest_extension_no_start():\n    \"\"\"This test checks if the strongest extension is a string without a start\n    character.\n    \"\"\"\n    assert\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     Strongest_Extension(class_name='Slices', extensions=['Slices', 'Cheese', 'StuFfed']) == 'SErviNGSliCes'\n\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     ('slices' in Extensions) and ('slices' in Extensions),\\\n    \"you should define the correct class for the extension\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n\ndef Strictest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The \n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrictestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is 1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     'Slices' == Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\nassert     'Slices' == Strongest_Extension('Slices', ['Cheese', 'StuFfed'])\nassert     'Slices' == Strongest_Extension('Slices', ['StuFfed', 'Cheese', 'SErviNGSliCes'])\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     cycpattern_check(\"hello\",\"olleh\") == True\nassert     cycpattern_check(\"catcat\",\"catcat\") == True\nassert     cycpattern_check(\"dogdog\",\"dogdog\") == False\nassert     cycpattern_check(\"aabbaa\",\"abbaa\") == True\nassert     cycpattern_check(\"aabbaa\",\"aabbaa\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"hello world\", \"ello\") == True\nassert     cycpattern_check(\"hello world\", \"elld\") == True\nassert     cycpattern_check(\"hello world\", \"ello\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     cycpattern_check('bcgjq', 'zjgq') == False\nassert     cycpattern_check('cgjq', 'zjgq') == True\nassert     cycpattern_check('cgjq', 'cgjq') == False\nassert     cycpattern_check('zjgq', 'gjq') == False\nassert     cycpattern_check('zjgq', 'gjq') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     cycpattern_check('abccdd','xyxyz') == True\nassert     cycpattern_check('bcdefghijklm','xyzx') == True\nassert     cycpattern_check('pqrstu','uqwrtxz') == False\nassert     cycpattern_check('pqrstu','uqwrtxz') == True\nassert     cycpattern_check('pqrstu','uqwrtxz') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     cycpattern_check(\"bst\",\"xxtst\")\nassert     cycpattern_check(\"xxtst\",\"xxtst\")\nassert     cycpattern_check(\"xxtst\",\"xxtst\")\nassert     cycpattern_check(\"xxtst\",\"xxtst\")\nassert     cycpattern_check(\"xxtst\",\"xxtst\")\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     cycpattern_check('cat', 'tac') == True\nassert     cycpattern_check('career', 'tac') == True\nassert     cycpattern_check('career', 'cat') == True\nassert     cycpattern_check('career', 'career') == False\n\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"abcde\",\"bca\")\nassert    cycpattern_check(\"aabbcc\",\"bca\")\nassert    cycpattern_check(\"abc\",\"ab\")\nassert    cycpattern_check(\"a\",\"a\")\nassert    cycpattern_check(\"aaaaaaa\",\"a\")\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"apple\",\"apple\") == True\nassert     cycpattern_check(\"applle\",\"applle\") == False\nassert     cycpattern_check(\"appe\",\"appe\") == True\nassert     cycpattern_check(\"applpe\",\"applpe\") == True\nassert     cycpattern_check(\"appee\",\"appee\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         even_odd_count(4) == (0, 2)\nassert         even_odd_count(0) == (1, 0)\nassert         even_odd_count(-5) == (1, 1)\nassert         even_odd_count(11) == (2, 0)\n\nprint(\"Passed!\")\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     even_odd_count(10) == (1, 1)\nassert     even_odd_count(0) == (0, 0)\nassert     even_odd_count(2) == (2, 2)\nassert     even_odd_count(4) == (4, 4)\nassert     even_odd_count(16) == (8, 8)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     even_odd_count(0) == (0)\nassert     even_odd_count(5) == (1)\nassert     even_odd_count(13) == (0, 1)\nassert     even_odd_count(21) == (0, 1, 2)\nassert     even_odd_count(100) == (1, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     even_odd_count(123) == (3, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     even_odd_count(4) == (1, 0)\nassert     even_odd_count(8) == (0, 1)\nassert     even_odd_count(9) == (0, 1)\nassert     even_odd_count(0) == (1, 0)\nassert     even_odd_count(-1) == (0, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     even_odd_count(2) == (2, 2)\nassert     even_odd_count(3) == (2, 2)\n\nprint('You should now see a solution.')\n\ndef even_odd_count2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef convert_to_octal(num):\n    \"\"\"Given an integer. return a tuple that has the number of octal digits respectively.\n    \"\"\"\n    pass\n\ndef convert_to_hex(num):\n    \"\"\"Given an integer. return a tuple that has the number of hex digits respectively.\n    \"\"\"\n    pass\n\ndef convert_to_binary(num):\n    \"\"\"Given an integer. return a tuple that has the number of binary digits respectively.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     even_odd_count(0) == ('', '')\nassert     even_odd_count(1) == ('', '1')\nassert     even_odd_count(2) == ('', '2')\nassert     even_odd_count(3) == ('', '3')\nassert     even_odd_count(4) == ('', '4')\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     even_odd_count(1) == ()\nassert     even_odd_count(2) == (0, 1)\nassert     even_odd_count(3) == (0, 1, 1)\nassert     even_odd_count(4) == (0, 1, 1, 2)\nassert     even_odd_count(5) == (0, 1, 1, 2, 3)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     even_odd_count(5) == (1, 0)\nassert     even_odd_count(10) == (1, 0, 1)\nassert     even_odd_count(11) == (1, 0, 1, 1)\nassert     even_odd_count(12) == (1, 1, 0)\nassert     even_odd_count(13) == (1, 0, 1, 1, 1)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(123) == \"III\"\nassert     int_to_mini_roman(123) == \"IV\"\nassert     int_to_mini_roman(123) == \"XCIII\"\nassert     int_to_mini_roman(999) == \"LXXXIV\"\nassert     int_to_mini_roman(999) == \"LXXXVIII\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1000) == \"MMM\"\nassert     int_to_mini_roman(900) == \"III\"\nassert     int_to_mini_roman(500) == \"IV\"\nassert     int_to_mini_roman(400) == \"V\"\nassert     int_to_mini_roman(400) == \"VI\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(4) == \"III\"\nassert     int_to_mini_roman(10) == \"IV\"\nassert     int_to_mini_roman(18) == \"LL\"\nassert     int_to_mini_roman(36) == \"XL\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(5) == \"III\"\nassert     int_to_mini_roman(9) == \"IV\"\nassert     int_to_mini_roman(23) == \"LLXIV\"\nassert     int_to_mini_roman(18) == \"LXXXXII\"\nassert     int_to_mini_roman(1) == \"I\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(1000) == 'i'\nassert     int_to_mini_roman(900) == 'iv'\nassert     int_to_mini_roman(500) == 'ii'\nassert     int_to_mini_roman(400) == 'iii'\nassert     int_to_mini_roman(100) == 'iii'\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'iv'\nassert     int_to_mini_roman(42) == 'iv'\nassert     int_to_mini_roman(1) == 'vi'\nassert     int_to_mini_roman(4) == 'vi'\nassert     int_to_mini_roman(9) == 'iv'\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(1000) == \"MMCMXCIX\"\nassert     int_to_mini_roman(900) == \"MMMCMXCIX\"\nassert     int_to_mini_roman(900) == \"MMCMXCIX\"\nassert     int_to_mini_roman(999) == \"MCMXCIX\"\nassert     int_to_mini_roman(1000) == \"MMCMXCIX\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         int_to_mini_roman(3) == \"III\"\nassert         int_to_mini_roman(5) == \"IIII\"\nassert         int_to_mini_roman(9) == \"IXIX\"\nassert         int_to_mini_roman(15) == \"LVIII\"\nassert         int_to_mini_roman(1994) == \"MCMXCIV\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(0) == \"I\"\nassert     int_to_mini_roman(999) == \"MMM\"\nassert     int_to_mini_roman(900) == \"MMMIII\"\nassert     int_to_mini_roman(500) == \"MMMCMXCIX\"\nassert     int_to_mini_roman(90) == \"MMMCMXCIX\"\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     right_angle_triangle(1, 2, 3) == True\nassert     right_angle_triangle(5, 6, 7) == False\nassert     right_angle_triangle(2, 5, 5) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     right_angle_triangle(3, 5, 8) == False, 'wrong right_angle_triangle(3, 5, 8)'\nassert     right_angle_triangle(1, 2, 3) == True, 'wrong right_angle_triangle(1, 2, 3)'\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     right_angle_triangle(1,2,3) is False\nassert     right_angle_triangle(1,2,4) is False\nassert     right_angle_triangle(1,2,3) is False\nassert     right_angle_triangle(1,2,4) is True\n\n\ndef check_diagonal(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Check whether the\n    two diagonals (right and left diagonals) are equal. If they are not, return False.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     right_angle_triangle(1,1,1)\nassert     right_angle_triangle(3,3,3)\nassert     right_angle_triangle(1,1,4)\nassert     right_angle_triangle(1,3,1)\nassert     right_angle_triangle(3,1,1)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     right_angle_triangle(4, 5, 6) == False\nassert     right_angle_triangle(0, 0, 0) == True\nassert     right_angle_triangle(1, 1, 1) == True\nassert     right_angle_triangle(2, 2, 2) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     right_angle_triangle(1,2,3) == True, 'triangle is not right angled'\nassert     right_angle_triangle(1,2,4) == False, 'triangle is right angled'\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False,'should be false'\nassert     right_angle_triangle(5, 6, 3) == True,'should be true'"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     right_angle_triangle(1, 2, 3) == True\nassert     right_angle_triangle(2, 3, 1) == False\nassert     right_angle_triangle(3, 1, 2) == True\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     find_max([]) == ''\nassert find_max(['a', 'b', 'c', 'd']) == 'b'\nassert find_max(['a', 'a', 'b', 'c']) == 'c'\nassert find_max(['a', 'a', 'c', 'b']) == 'c'\nassert find_max(['a', 'a', 'b', 'c', 'b']) == 'b'\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     find_max(['ab', 'ab', 'ab', 'c', 'a', 'c', 'c', 'a']) == 'a'\nassert     find_max
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     find_max([]) == \"\"\nassert     find_max([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"\"\nassert     find_max([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]) == \"b\"\nassert     find_max([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == \"a\"\nassert     find_max([\"b\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"]) == \"b\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     find_max([\"ab\", \"abcd\", \"ba\", \"bab\"]) == \"bab\"\nassert     find_max([\"bc\", \"bca\", \"cbc\", \"cba\"]) == \"cba\"\nassert     find_max([\"ab\", \"abc\", \"bab\", \"abc\"]) == \"abc\"\nassert     find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]) == \"a\"\nassert     find_max([\"a\", \"aa\", \"aaa\", \"aaaa\"]) == \"aa\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     find_max([]) == None, 'find_max should return None'\nassert     find_max(['a', 'b', 'a']) == 'a','should return \"a\"'\nassert     find_max(['a', 'a', 'b', 'b', 'a', 'a', 'a']) == 'a','should return \"a\"'\nassert     find_max(['a', 'a', 'b', 'b', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'a']) == 'a','should return \"a\"'\nassert     find_max(['a', 'a', 'b', 'b', 'a', 'a', 'a', 'a']) == 'a','should return \"a\"'\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef find_max_dic(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     find_max(['alpha', 'bravo', 'charlie', 'foxtrot', 'delta']) == 'foxtrot', \\\n 'incorrect'\nassert     find_max(['alpha', 'bravo', 'charlie', 'foxtrot', 'delta', 'alpha']) == 'foxtrot', \\\n 'incorrect'\nassert     find_max(['alpha', 'bravo', 'charlie', 'foxtrot', 'delta', 'alpha']) == 'charlie', \\\n 'incorrect'\nassert     find_max(['alpha', 'bravo', 'charlie', 'foxtrot', 'delta', 'alpha', 'charlie']) == 'charlie', \\\n 'incorrect'\nassert     find_max(['alpha', 'bravo', 'charlie', 'foxtrot', 'delta', 'alpha', 'bravo']) == 'foxtrot', \\\n 'incorrect'\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     find_max([\"apple\", \"banna\", \"zara\", \"panda\"]) == \"panda\", \"Test failed\"\nassert     find_max([\"apple\", \"banna\", \"zara\", \"panda\", \"gopi\"]) == \"gopi\", \"Test failed\"\nassert     find_max([\"apple\", \"banna\", \"zara\", \"panda\", \"gopi\", \"yellow\"]) == \"gopi\", \"Test failed\"\nassert     find_max([\"dog\", \"cat\", \"dog\", \"cat\", \"dog\", \"dog\", \"cat\", \"dog\"]) == \"dog\", \"Test failed\"\n\ndef find_max_short(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters, which is maximum number of letters in each word.\n    \"\"\"\n    pass"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     eat(0, 1, 2) == [3,1]\nassert     eat(5, 2, 2) == [5,3]\nassert     eat(1, 3, 2) == [3,1]\nassert     eat(1, 2, 3) == [2,2,3]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         eat(2, 2, 10) == [7, 10]\nassert eat(3, 3, 3) == [10, 9]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     (eat(0,1,1000) == [1,0])\nassert     (eat(1,1,1000) == [0,1])\nassert     (eat(2,1,1000) == [0,1,2])\nassert     (eat(3,1,1000) == [0,1,2,3])\nassert     (eat(4,1,1000) == [0,1,2,3,4])\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     eat(5, 2, 4) == [5, 0]\nassert     eat(7, 3, 2) == [7, 0, 3]\nassert     eat(3, 2, 2) == [3, 0, 2]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     eat(5, 100, 10) == [150, 5]\nassert eat(5, 100, 200) == [150, 5]\nassert eat(100, 10, 100) == [0, 10]\nassert eat(100, 10, 300) == [0, 10]\nassert eat(300, 50, 100) == [300, 50]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     eat(1, 1, 3) == [2, 3]\nassert     eat(10, 1, 3) == [2, 4, 6]\nassert     eat(1, 1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     eat(1, 1, 1000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     (eat(2, 10, 0) == [2, 2])\nassert     (eat(0, 10, 0) == [2, 2])\nassert     (eat(1, 10, 0) == [1, 0])\nassert     (eat(2, 10, 1) == [1, 2])\nassert     (eat(2, 10, 2) == [1, 2])\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     eat(5,5,10) == [10, 0]\nassert     eat(5,5,10) == [0,10]\nassert     eat(5,5,10) == [10, 10]\nassert     eat(5,5,10) == [10, 10]\nassert     eat(5,5,10) == [10, 10]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         eat(30, 5, 20), \"should return [30, 10] as result\"\nassert         eat(30, 10, 10), \"should return [30, 10] as result\"\nassert         eat(30, 10, 20), \"should return [30, 10] as result\"\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     do_algebra([1,2,3], [1,2,3]) == \"3*(1+2)\"\nassert     do_algebra([3,3], [1,3]) == \"3*(1+3)\"\nassert     do_algebra([1,2], [1,2]) == \"1+2\"\nassert     do_algebra([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == \"9*(4+5)\"\nassert     do_algebra([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == \"9*(3+4+5)\"\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     do_algebra([1, 2, 3], [1, 2, 3]) == 3\nassert     do_algebra([2, 2, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6]) == 60\nassert     do_algebra([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) == 0\nassert     do_algebra([2, 3, 4], [1, 2, 3]) == 4\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     do_algebra([1,2,3,4], [5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     do_algebra([1,2,3], [3,4,5]) == [1,2,3]\nassert     do_algebra([1,2,3,4], [5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     do_algebra(['(+', '-', '*', '/'], [1, 2, 3, 4]) == 8\nassert     do_algebra(['(+', '-', '*', '/', '+', '-', '*', '/'], [1, 2, 3, 4, 5, 6, 7, 8]) == 13\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     do_algebra(\n    [],\n    [1, 2, 3, 4]\n) == 15, \"Algebra not checked\"\nassert     do_algebra(\n    [2],\n    [1, 2]\n) == 15, \"Algebra not checked\"\nassert     do_algebra(\n    [4, 5, 6],\n    [1, 2, 3, 4]\n) == 30, \"Algebra not checked\"\nassert     do_algebra(\n    [2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 5]\n) == 15, \"Algebra not checked\"\nassert     do_algebra(\n    [7, 8, 9, 10],\n    [1, 2, 3, 4]\n) == 31, \"Algebra not checked\"\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     do_algebra([2,3,4], [5,6,7]) == 2 + 3 * 4 + 5 / 6 * 7\nassert     do_algebra([-2,1,4], [3,4]) == -2 - 1 / 4 * 3\nassert     do_algebra([2,1,4], [3,4]) == 2 * (1 + 4) + 1 * (4 + 3)\nassert     do_algebra([2,3,4], [5,6,7]) == 2 + 3 * 4 + 5 / 6 * 7\nassert     do_algebra([-2,1,4], [3,4]) == -2 - 1 / 4 * 3\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         do_algebra([5, 2], [1, 2]) == 2\nassert         do_algebra([0, 0, 0, 0, 0], [0, 0, 0, 0, 0]) == 2\nassert         do_algebra([0, 0, 0, 0, 0], [0, 0, 0, 0, 0]) == 0\nassert         do_algebra([0, 0, 0, 0, 0], [0, 0, 0, 0, 1]) == 0\nassert         do_algebra([0, 0, 0, 0, 0], [0, 0, 0, 0, 1]) == 0\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     do_algebra([\"+\", \"-\", \"*\", \"//\"], [1, 2, 3, 4]) == [2, 6]\nassert     do_algebra([\"+\", \"-\", \"*\", \"//\"], [2, 2, 3, 4, 5]) == [4, 8]\nassert     do_algebra([\"+\", \"-\", \"*\", \"//\"], [2, 2, 3, 4, 5, 6]) == [8, 12]\nassert     do_algebra([\"+\", \"-\", \"*\", \"//\"], [4, 4, 4, 4, 4, 4]) == [8, 16]\nassert     do_algebra([\"+\", \"-\", \"*\", \"//\"], [2, 2, 4, 4]) == [8, 16]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     do_algebra([-3, -1, 0], [0, 2, 4]) == -3 -1 -0 -2 -4\nassert     do_algebra([-3, -1, 0], [0, 2, 4]) == -3 -1 -0 -2\nassert     do_algebra([1, 1, 1], [1, 2, 3]) == -1\nassert     do_algebra([1, 1, 1], [1, 2, 3]) == 1\nassert     do_algebra([-3, -1, 0], [0, 2, 4]) == 0\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     do_algebra([\"add\", \"sub\", \"mult\"], [\"1 2\", \"3 4\"]) == \"23\"\nassert     do_algebra([\"add\", \"add\"], [\"1 2\", \"3 4\"]) == \"6\"\nassert     do_algebra([\"sub\", \"add\"], [\"1 2\", \"3 4\"]) == \"-6\"\nassert     do_algebra([\"mult\", \"add\"], [\"1 2\", \"3 4\"]) == \"6\"\nassert     do_algebra([\"add\", \"sub\", \"sub\"], [\"1 2\", \"3 4\"]) == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     solve('aba') == 'a2b1'\nassert     solve('a') == 'a'\nassert     solve('cba') == 'c2a1b'\nassert     solve('abc') == 'cba'\nassert     solve('aba') == 'a2b1'\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     solve(\"A\") == \"A\"\nassert     solve(\"a\") == \"a\"\nassert     solve(\"ba\") == \"ba\"\n\nif __name__ == \"__main__\":\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"s = 'A'\")\n    print(\"Exception :\")\n    print(\"'aA'\")\n    print(\"Output :\")\n    print(solve(\"A\"))\n\n    print(\"Example 2:\")\n    print(\"Input : \")\n    print(\"s = 'a'\")\n    print(\"Exception :\")\n    print(\"'A'\")\n    print(\"Output :\")\n    print(solve(\"A\"))\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     solve(\"azcbobobegghakl\") == \"abhgkiakbob\"\nassert     solve(\"zcBaBhEeK\") == \"zcBaBhEeK\"\nassert     solve(\"A\") == \"A\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     solve(\"aabc\") == \"cbaab\"\nassert     solve(\"Aabbc\") == \"bbccb\"\nassert     solve(\"abc\") == \"bcabc\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\n\n\n\n\n\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     solve(\"cba\") == \"abcd\"\nassert     solve(\"abc\") == \"cba\"\nassert     solve(\"cb\") == \"abcd\"\nassert     solve(\"\") == \"\"\nassert     solve(\"\") == \"\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     string_to_md5('a') == 'd6c61d26a9e3ddf05fe4873f7aa4b2085bdd1c1'\nassert     string_to_md5(None) == None\nassert     string_to_md5('a') == 'd6c61d26a9e3ddf05fe4873f7aa4b2085bdd1c1'\nassert     string_to_md5(' ') == 'd6c61d26a9e3ddf05fe4873f7aa4b2085bdd1c1'\nassert     string_to_md5('\\n') == 'd6c61d26a9e3ddf05fe4873f7aa4b2085bdd1c1'\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     string_to_md5('123') == '0e6d4c9d9a5d10f8bbbb4ef9b5ba9b6d2b93'\nassert     string_to_md5(None) == None\nassert     string_to_md5('') == None\nassert     string_to_md5('  ') == None\nassert     string_to_md5('abc') == 'e05bdff7fea869b6e0b2a85bd2c0b7f562048b'"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     string_to_md5(\"abc\") == \"3b37dd7a42db7b0efb0e1f1e4be295a\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     string_to_md5('test') == 'f569a38d56c3a92df1b3b0a1e17a1cac846c4a'\nassert     string_to_md5('test') is None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     string_to_md5('asd123') == 'f33f95d7377724a5b7b8f5a8e5c9df7f55e9b1b84e1a2b20f8c37cf2af3a1'\nassert     string_to_md5('') == None\nassert     string_to_md5('') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     string_to_md5(\"abcdefghijklmnopqrstuvwxyz\") == \"m2xzRTY3KQMwx4sDyHZzJp4Ks5Dr4rXj48PuZsgw\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     string_to_md5('Abc') == 'e0bd68d88500e72c95be9e89b233a731'\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     string_to_md5('foo') == '3c1e9b2a482213acdfc4e60a3f9c75c0'\nassert     string_to_md5('bar') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     string_to_md5('abc') == 'f1efb04c7f661817e9e9b41e6083f45b'\nassert     string_to_md5(None) == None\nassert     string_to_md5('') == None\n\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\" \") == None\nassert     string_to_md5(\"1\") == \"01\"\nassert     string_to_md5(\"123\") == \"1a3f9fd90c52c4a68e9c8b03fc8b2d45\"\nassert     string_to_md5(\"123123\") == \"b2a3f9fd90c52c4a68e9c8b03fc8b2d45\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     generate_integers(3, 2) == [1, 2]\nassert     generate_integers(0, 10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     generate_integers(7, 6) == [7, 8, 9]\nassert     generate_integers(0, 7) == [0, 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     generate_integers(3, 10) == [3, 5, 7]\nassert     generate_integers(2, 5) == [2, 4, 6, 8]\nassert     generate_integers(0, 7) == [0, 1, 2, 3, 4, 5, 6, 7]\nassert     generate_integers(-3, -5) == [0, 1, 2, 3, 4, 5, 6, 7]\nassert     generate_integers(0, -7) == [0, 1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     generate_integers(1,5) == [1,2,3,4,5]\nassert     generate_integers(0,10) == [0,1,2,3,4,5,6,7,8,9]\nassert     generate_integers(-2,2) == [-2,1]\nassert     generate_integers(1,2) == [1,2]\nassert     generate_integers(1,0) == [1,0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     generate_integers(0, 1) == 0\nassert     generate_integers(3, 7) == 1\nassert     generate_integers(3, 2) == 2\nassert     generate_integers(0, 100) == 100\n\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     generate_integers(1, 1) == \"1\"\nassert     generate_integers(3, 5) == \"101\"\nassert     generate_integers(0, 1) == \"0\"\nassert     generate_integers(-1, -1) == \"-1\"\nassert     generate_integers(-2, 2) == \"-3\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     generate_integers(0, 10) == [0, 2, 4, 6, 8, 10]\nassert     generate_integers(15, 35) == [15, 35]\nassert     generate_integers(51, 51) == [51]\nassert     generate_integers(99, 99) == [99]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     generate_integers(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     generate_integers(8, 10) == [8, 8, 8, 8, 8, 8, 8, 8, 8]\n\nprint('All passed')"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     generate_integers(1, 10) == [1, 3, 5, 7, 9]\nassert     generate_integers(2, 20) == [2, 4, 6, 8, 10]\nassert     generate_integers(3, 50) == [3, 5, 7, 9, 11]\nassert     generate_integers(4, 50) == [4, 6, 7, 8, 9, 10]\nassert     generate_integers(5, 50) == [5, 7, 8, 9, 10, 11]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     generate_integers(2, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert     generate_integers(2, 1) == [2]\nassert     generate_integers(2, 0) == []\nassert     generate_integers(2, -3) == []\nassert     generate_integers(0, -1) == [0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     generate_integers(3, 10) == [3, 5, 7]\nassert     generate_integers(1, 5) == [1]\nassert     generate_integers(0, 10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     generate_integers(2, 0) == [2, 0]\n"
    }
]