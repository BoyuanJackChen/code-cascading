[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 2) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 1) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5, 6], 0.1) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 0.3) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 0.7) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 1.2) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6], 1.4) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     has_close_elements([1.1, 2.3, 3.5], 0.5) == True\nassert     has_close_elements([1.1, 2.3, 3.5], 0.01) == True\nassert     has_close_elements([1.1, 2.3, 3.5], 0.5) == False\nassert     has_close_elements([1.1, 2.3, 3.5], 1.5) == True\nassert     has_close_elements([1.1, 2.3, 3.5], 1.0) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 1.0), \"has_close_elements() should return False\"\nassert     has_close_elements([1, 2, 3, 4], 0.0), \"has_close_elements() should return True\"\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     has_close_elements([1, 5, 2, 4, 0, 8, 7, 4, 1, 6], 1.0) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5.0) == True\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8.0) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9.0) == False\nassert     has_close_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10.0) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     has_close_elements([1, 5, 6, 5, 5], 0.5) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 1) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 1) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     has_close_elements([1,2,3,4,5], 0) == True\nassert     has_close_elements([1,2,3,4,5], 0.5) == True\nassert     has_close_elements([1,2,3,4,5], 1.5) == True\nassert     has_close_elements([1,2,3,4,5], 1.0) == False\nassert     has_close_elements([1,2,3,4,5], 0.0) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef has_closer_numbers(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if given list of numbers is sorted by the absolute value of their\n    corresponding elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     has_close_elements([1,2,3,4,5], 2)\nassert not has_close_elements([1,2,3,4,5], 1)\nassert not has_close_elements([1,2,3,4,5], 0.9)\nassert not has_close_elements([1,2,3,4,5], 0.1)\nassert not has_close_elements([1,2,3,4,5], 1.1)\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     has_close_elements([1, 2, 3], 0)\nassert     has_close_elements([1, 2, 3, 1], 1)\nassert     has_close_elements([1, 2, 3, 1], 0.5)\nassert     has_close_elements([1, 2, 3, 1, 2, 3], 0.5)\nassert     has_close_elements([1, 2, 3, 1, 2, 3, 4], 0.5)\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         separate_paren_groups(\"(()(())\") == [\"(())\", \"(())\", \"(())\"]\nassert         separate_paren_groups(\"(()(())\") == [\"(())\"]\nassert         separate_paren_groups(\"(()())\") == [\"(())\"]\nassert         separate_paren_groups(\"((()))\") == [\"(()\", \"())\"]\nassert         separate_paren_groups(\"(()())\") == [\"(())\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     separate_paren_groups('(()())') == ['(())', '(()())']\nassert     separate_paren_groups('((()))') == ['(()())', '(())']\nassert     separate_paren_groups('((((()))))') == ['(())', '(())']\nassert     separate_paren_groups('((()(())()))') == ['(())', '(())', '(())']\nassert     separate_paren_groups('((((((()))))))') == ['(())', '(())', '(())']\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"(){}[][]\") == [\"[\", \"]\", \"]\"]\nassert     separate_paren_groups(\"(){(])}[][]\") == [\"[\", \"]\", \"(\", \"]\"]\nassert     separate_paren_groups(\"(){[])}[][]\") == [\"[\", \"]\", \"]\"]\nassert     separate_paren_groups(\"(){(])}[][]\") == [\"[\", \"]\", \"(\", \"]\"]\n\ndef get_group(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string with a nested bracket group. Your goal is to extract the list of\n    the groups and return the list of those. Separate groups are balanced (each open brace is properly closed)\n    and not nested within each other. Ignore any spaces in the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     separate_paren_groups('{()})') == ['{', '()}'], 'This is not correct'\n\n\ndef separate_brackets(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing one or more brackets. You can assume that the string\n    consists of just one open and closed parenthesis. Your goal is to separate those bracket into separate\n    strings and return the list of those.\n    Separate bracket is balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     separate_paren_groups('') == []\nassert     separate_paren_groups('()') == []\nassert     separate_paren_groups('(()()()())(') == ['()()()()']\nassert     separate_paren_groups(')(()(())') == ['()(())']\nassert     separate_paren_groups(')(())(((()))') == [('()', '()(())')]\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     separate_paren_groups('(()))') == [',', '(', ')', ')']\nassert     separate_paren_groups('()()') == ['', '(', ')', '()']\nassert     separate_paren_groups(')(') == [',', '(', ')']\nassert     separate_paren_groups(')()()') == ['', '(', ')', '()', ')']\nassert     separate_paren_groups(')') == []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"(((()))\") == [\"((())\"),\"(())\"], \"Incorrect input\"\nassert     separate_paren_groups(\"(((()))\") == [\"(((())\"),\"((())())\"),\"(()())\"],\"Incorrect input\"\nassert     separate_paren_groups(\"(((()))\") == [\"(((()))\",\"()((()))\"],\"Incorrect input\"\nassert     separate_paren_groups(\"(((()))\") == [\"(((()))\",\"()()\"),\"((())()\"),\"()()()\"],\"Incorrect input\"\nassert     separate_paren_groups(\"(((()))\") == [\"(((()))\",\"()((()))\"],\"Incorrect input\"\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"(()))\") == [\"((()))\"]\nassert     separate_paren_groups(\"(((()()())())())\") == [\"((((((((((((((()()()()())(()()((()))))))))))))))))\"]\nassert     separate_paren_groupsn    assert     is_balanced(s)\n    assert     s[1] == '}'\n    "
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         separate_paren_groups(\"(())\") == [\"()\", \"()\", \"(())\"]\nassert         separate_paren_groups(\"()())\") == [\"()\", \"()\", \"(())\"]\nassert         separate_paren_groups(\"()()\") == [\"()\", \"()\", \"()\"]\nassert         separate_paren_groups(\"()\") == []\nassert         separate_paren_groups(\"(())\") == []\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"()()()()\") == [\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"()\",\n    \"("
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     truncate_number(0.0000000) == 0\nassert     truncate_number(1.0000000) == 1\nassert     truncate_number(1.00000000000001) == 1\nassert     truncate_number(1.00000000000001) == 1\nassert     truncate_number(1.00000000000000) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     truncate_number(0.0) == 0.0\nassert     truncate_number(1.0) == 1.0\nassert     truncate_number(2.0) == 1.5\nassert     truncate_number(3.5) == 2.0\nassert     truncate_number(4.0) == 3.0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     truncate_number(123.456) == 123\nassert     truncate_number(0) == 0\nassert     truncate_number(1.2) == 1\nassert     truncate_number(123.45) == 123\nassert     truncate_number(0.12345678) == 0.12345\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     truncate_number(0) == 0\nassert     truncate_number(2.89) == 0.89\nassert     truncate_number(1.64) == 2.64\nassert     truncate_number(2.8901) == 0.01\nassert     truncate_number(1.6401) == 2.01\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     truncate_number(0.01) == 0.01\nassert     truncate_number(0.3) == 3.0\nassert     truncate_number(-0.3) == -3.0\nassert     truncate_number(3.2) == -3.2\nassert     truncate_number(-3.2) == -3.0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         truncate_number(float('1.8')), 'truncate_number(1.8)'\nassert         truncate_number(float('1.7')), 'truncate_number(1.7)'\nassert         truncate_number(float('1.6')), 'truncate_number(1.6)'\nassert         truncate_number(float('1.5')), 'truncate_number(1.5)'\nassert         truncate_number(float('1.4')), 'truncate_number(1.4)'\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     truncate_number(7.9) == 7\nassert     truncate_number(6) == 6\nassert     truncate_number(9) == 5\nassert     truncate_number(8.5) == 5.0\nassert     truncate_number(2.99) == 2.0\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     truncate_number(5.1234) == 5\nassert truncate_number(12.3456) == 12\nassert truncate_number(999.12345) == 999\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     truncate_number(-2.0) == -2\nassert     truncate_number(-1.0) == -1\nassert     truncate_number(0.0) == 0\nassert     truncate_number(1.0) == 1\nassert     truncate_number(2.0) == 2\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     truncate_number(0.0000000) == 0.0\nassert     truncate_number(0.01) == 0.0\nassert     truncate_number(10) == 10\nassert     truncate_number(3.6) == 3.6\nassert     truncate_number(1.0000000) == 1.0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     below_zero([]) == False\nassert     below_zero([0, 0]) == True\nassert     below_zero([0, 100]) == True\nassert     below_zero([1, 0]) == True\nassert     below_zero([1, 10, 0]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     below_zero([0]) == False\nassert     below_zero([1, 2]) == True\nassert     below_zero([1, 1, 0]) == True\nassert     below_zero([1, 0, 0]) == False\nassert     below_zero([1, 0, 1]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     below_zero([1]) == False\nassert     below_zero([1, 2]) == True\nassert     below_zero([1, 2, 3]) == False\nassert     below_zero([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     below_zero([9, 7, 1, 1, 0]) == True\nassert     below_zero([10, 7, 1, 1, 0]) == False\nassert     below_zero([7, 7, 1, 1, 0]) == True\n\ndef max_zero(operations: List[int]) -> int:\n    \"\"\"\n    Given a list of operations in the format of {a:b, b:c,...}. find the maximum of a, b,....\n    Consider the function below_zero(operations):\n    if operations[i] is 0, then we have to change the value of 0.\n    If operations[i] is > 0, then we take that index and remove it from the list.\n    If operations[i] is < 0, then we do nothing.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     below_zero( [0,5,4,3,2,1] ) == True\nassert     below_zero( [2,1,3,4,5,0] ) == True\nassert     below_zero( [0,5,4,3,2,1] ) == False\n\ndef equals(operations: List[int]) -> bool:\n    \"\"\"You are given a list of operations. You need to detect if any operation on the bank account\n    will create an instance of a transaction.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     below_zero(0) == True\nassert     below_zero([3,3]) == False\nassert     below_zero([]) == True\nassert     below_zero([1,2,3,4,5]) == True\n\n\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         below_zero(operations = [1, 0]) == True\nassert         below_zero(operations = [1, 0, 0, 0, 0, 0]) == False\nassert         below_zero(operations = [1, 0, 0, 0, 0, 0, 0, 0, 0]) == False\nassert         below_zero(operations = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == False\n\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     below_zero([]) == False\nassert     below_zero([0]) == True\nassert     below_zero([0, 0]) == True\nassert     below_zero([0, 0, 0]) == True\nassert     below_zero([0, 0, 0, 0]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     below_zero([]), \"Your list of operations is invalid.\"\n\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 2.66666666666666666\nassert     mean_absolute_deviation([5, 8, -1, -3]) == 5\nassert     mean_absolute_deviation([-3, -4, -2, -3, 5, 6]) == 5\nassert     mean_absolute_deviation([-3, -4, -2, -3, 5, 6, -4]) == 7\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6.66666666666666667\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([]) == 0.0\nassert     mean_absolute_deviation([1.5]) == 1.75\nassert     mean_absolute_deviation([1, 2, 3]) == 2.66666666666666666667\nassert     mean_absolute_deviation([1, 2, 3, 4]) == 3.333333333333333333\n\n\"\"\"\n1. mean of the values in the array is at the centerpoint \n2. STD of the values in the array is at the middle point\n3. Sum of the absolute value of the values in the array is\n4. The number of the number of elements in the array \n5. the number of the elements in the array\n6. the number of the elements in the array\n7. mean of the array\n8. the number of the elements in the array\n9. the mean of the values in the array\n10. the number of the elements in the array\n11. the mean of the values in the array\n12. the number of the elements in the array\n13. the mean of the values in the array\n14. the number of the elements in the array\n15. the mean of the values in the array\n16. the number of the elements in the array\n17. the mean of the values in the array\n18. the number of the elements in the array\n19. the mean of the values in the array\n20. the number of the elements in the array\n21. the mean of the values in the array\n22. the number of the elements in the array\n23. the mean of the values in the array\n24. the number of the elements in the array\n25. the mean of the values in the array\n26. the number of the elements in the array\n27. the mean of the values in the array\n28. the number of the elements in the array\n29. the mean of the values in the array\n30. the number of the elements in the array\n31. the mean of the values in the array\n32. the number of the elements in the array\n33. the mean of the values in the array\n34. the number of the elements in the array\n35. the mean of the values in the array\n36. the number of the elements in the array\n37. the mean of the values in the array\n38. the number of the elements in the array\n39. the mean of the values in the array\n40. the number of the elements in the array\n41. the mean of the values in the array\n42. the number of the elements in the array\n43. the mean of the values in the array\n44. the number of the elements in the array\n45. the mean of the values in the array\n46. the number of the elements in the array\n47. the mean of the values in the array\n48. the number of the elements in the array\n49. the mean of the values in the array\n50. the number of the elements in the array\n51. the mean of the values in the array\n52. the number of the elements in the array\n53. the mean of the values in the array\n54. the number of the elements in the array\n55. the mean of the values in the array\n56. the number of the elements in the array\n57. the mean of the values in the array\n58. the number of the elements in the array\n59. the mean of the values in the array\n60. the number of the elements in the array\n61. the mean of the values in the array\n62. the number of the elements in the array\n63. the mean of the values in the array\n64. the number of the elements in the array\n65. the mean of the values in the array\n66. the number of the elements in the array\n67. the mean of the values in the array\n68. the number of the elements in the array\n69. the mean of the values in the array\n70. the number of the elements in the array\n71. the mean of the values in the array\n72. the number of the elements in the array\n73. the mean of the values in the array\n74. the number of the elements in the array\n75. the mean of the values in the array\n76. the number of the elements in the array\n77. the mean of the values in the array\n78. the number of the elements in the array\n79. the mean of the values in the array\n80. the number of the elements in the array\n81. the mean of the values in the array\n82. the number of the elements in the array\n83. the mean of the values in the array\n84. the number of the elements in the array\n8"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([1, 1, 0, 0]) == 0.25\nassert     mean_absolute_deviation([1, 0, 0, 0]) == 0.5\nassert     mean_absolute_deviation([0, 0, 0, 0]) == 0\nassert     mean_absolute_deviation([0, 0, 0, 0, 0]) == 0\nassert     mean_absolute_deviation([1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([2, 3, -5, 1, 4]) == 5.0\n\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2.166723091386\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2.166723091386\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([0, 1, 2, 3, 4, 5]) == 0.66666, 'Error'\nassert     mean_absolute_deviation([1, 3, 5, 7, 9, 10]) == 0.0, 'Error'\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([2.0, 3.0, 4.0]) == 5.0\nassert     mean_absolute_deviation([0.0, 1.0, -1.0]) == 5.0\nassert     mean_absolute_deviation([0.1, 0.2, 0.3, 0.4, 0.5, 0.6]) == 4.0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([10, 20, 30, 40]) == 20.0\nassert     mean_absolute_deviation([10.0, 20.0, 30.0, 40.0]) == 20.0\nassert     mean_absolute_deviation([10, 20.0, 30.0, 40.0]) == 20.0\nassert     mean_absolute_deviation([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 40.0\nassert     mean_absolute_deviation([-1, -3, -5, -7, -9, -11, -13, -15, -17, -19]) == -10.0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15, \\\n    \"Average MAD = 15.\"\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median | x_median - x_mean |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([]) == 0.0\nassert     mean_absolute_deviation([1]) == 1.0\nassert     mean_absolute_deviation([1,2,3,4,5]) == 3.0\nassert     mean_absolute_deviation([1,2,3,4,5,6,7]) == 5.0\nassert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10]) == 8.0\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert                         issubclass(type(intersperse), list), f\"Expected intersperse to be a list but got {type(intersperse).__name__}\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     intersperse([1,2,3,4,5], 1) == [1,2,3,4,5,1]\nassert     intersperse([1,2,3,4,5], 2) == [1,2,3,5,4,1]\nassert     intersperse([1,2,3,4,5], 3) == [1,2,3,5,4,1,2,3,5]\nassert     intersperse([1,2,3,4,5], 4) == [1,2,3,4,5,1,2,3,4,5]\nassert     intersperse([1,2,3,4,5], 5) == [1,2,3,4,5,1,2,3,4,5]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         intersperse([], 0) == []\nassert         intersperse([1,2,3], 0) == [1,2,3,1,2,3]\nassert         intersperse([1,2,3], 1) == [1,2,3,1,2,3]\nassert         intersperse([1,2,3], 2) == [1,2,3,1,2,3,2]\nassert         intersperse([1,2,3], 3) == [1,2,3,1,2,3,3]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4, 5, 5, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5, 5]\nassert     intersperse([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     intersperse(['a', 'b', 'c'], 'c') == ['a', 'c']\nassert     intersperse(['a', 'b', 'c'], 'b') == ['a', 'b', 'c']\nassert     intersperse(['a', 'b', 'c'], 'a') == ['a', 'b', 'c']\nassert     intersperse(['a', 'b', 'c'], 'd') == ['a', 'b', 'c', 'd']\nassert     intersperse(['a', 'b', 'c'], 'd') == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     intersperse([1, 2, 3], 4) == [1, 2, 3, 4]\nassert     intersperse([1, 2, 3], 5) == [1, 2, 3, 5]\nassert     intersperse([1, 2, 3, 4, 5], 3) == [1, 2, 3, 5, 4]\nassert     intersperse([1, 2, 3, 4], 1) == [1, 2, 3, 4]\nassert     intersperse([1, 2, 3, 4], 0) == [1, 2, 3, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     intersperse([1,2,3,4,5], 3) == [1,2,3,5,4,3,4,5]\nassert     intersperse([1,2,3,4,5], 2) == [1,2,2,3,4,5,4,3,4,5]\nassert     intersperse([1,2,3,4,5], 1) == [1,2,2,3,4,5,4,3,4,5]\nassert     intersperse([1,2,3,4,5], 0) == [1,2,3,4,5,4,3,4,5]\nassert     intersperse([], 0) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \nassert intersperse([1, 2], 1) == [1, 2, 1, 2]\nassert intersperse([1, 2, 3], 1) == [1, 2, 1, 2, 3]\nassert intersperse([1, 2, 3, 4], 1) == [1, 2, 1, 2, 1, 2, 3, 4]\nassert intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 2, 2, 3, 4, 5]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"((()()))\") == [4, 3, 0, 2]\nassert     parse_nested_parens(\"(((())()))\") == [4, 3, 0, 2]\nassert     parse_nested_parens(\"((()()()))\") == [4, 3, 0, 2]\nassert     parse_nested_parens(\"(((()()))\") == [4, 3, 0, 2]\nassert     parse_nested_parens(\"((()()()()(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     parse_nested_parens('((()()()())(()())()()()()())(()()())()()(')) == [2, 3, 4, 5, 6, 7]\nassert     parse_nested_parens('())(()())()())()()()()()(') == [1, 2, 3, 4, 5, 6, 7]\nassert     parse_nested_parens(')(') == [1]\nassert     parse_nested_parens('((((()()()())(()())()()()()())(())()())()()())()()(') == [1, 2, 3, 4, 5, 6, 7]\nassert     parse_nested_parens('))((()()())()())()()()(') == []\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"((())\") == [1, 2]\nassert     parse_nested_parens(\"(())\") == [2, 3, 4]\nassert     parse_nested_parens(\"())\") == [4]\nassert     parse_nested_parens(\"(()())\") == [3, 5, 6]\nassert     parse_nested_parens(\"(()())()\") == [3, 5, 6, 7]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         parse_nested_parens(\n            \"(())(())\") == [3, 3, 2, 1]\nassert         parse_nested_parens(\n            \"(())())\") == [2, 1, 0, 1]\nassert         parse_nested_parens(\n            \"((())()\")) == [3, 3, 2, 1]\nassert         parse_nested_parens(\n            \"((()()(()()))\") == [3, 3, 2, 1, 2, 2, 1]\nassert         parse_nested_parens(\n            \"((()()())(())()))\") == [3, 3, 2, 1, 2, 2, 1, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2, 0, 0, 0, 0, 0, 0]\nassert     parse_nested_parens(\"((()))\") == [0, 0, 0, 0, 0, 0, 0]\nassert     parse_nested_parens(\"()(()()(()))\") == [0, 0, 0, 0, 0, 0, 0]\nassert     parse_nested_parens(\"((()())\") == [0, 0, 0, 0, 0, 0, 0]\nassert     parse_nested_parens(\"((())())\") == [0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"((()))\") == [2, 2, 1]\nassert     parse_nested_parens(\"((()()))\") == [2, 2, 1]\nassert     parse_nested_parens(\"(((()))()()()()()()()()()()\") == [4, 4, 4, 2, 2, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     parse_nested_parens('') == []\nassert parse_nested_parens('((()') == [0,0]\nassert parse_nested_parens('((((') == [2,0]\nassert parse_nested_parens('(((((((((((()))))))))))))))(((()))'\nassert parse_nested_parens('((((((((((((((((((((((()))))))))))))))))))))(((())))'\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef test_parse_nested_parens():\n    assert parse_nested_parens(\"()\") == []\n    assert parse_nested_parens(\"()(())\") == [2]\n    assert parse_nested_parens(\"()(())()\") == [2, 3]\n    "
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     parse_nested_parens('()()()') == [[], [], []]\nassert     parse_nested_parens('((()))') == [[], [], []]\nassert     parse_nested_parens('((((())))') == [[], [], []]\nassert     parse_nested_parens('((((()))))') == [[], [], []]\n\ndef evaluate_instructions(instructions: List[str]) -> int:\n    \"\"\" Convert string instructions to function parameters and call the function with the corresponding parameters.\n    Return the result. \"\"\"\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\n    \"(()()()())()(\") == [\n        1,\n        3,\n        2,\n    ], \\\n    \"check nested parentheses in parse_nested_parens\"\n\ndef is_odd(num: int) -> bool:\n    \"\"\" Checks if a number is odd.\n    Inputs:\n        num (int): The number to check.\n    Outputs:\n        True if the number is odd and False otherwise.\n    Example:\n        >>> is_odd(12)\n        False\n        >>> is_odd(8)\n        True\n    \"\"\"\n    pass\n\ndef min_max(numbers: List[int]) -> (int, int):\n    \"\"\" Inputs:\n        numbers (List[int]): A list of numbers.\n    Outputs:\n        (min, max) (int, int).\n    Example:\n        >>> min_max([1, 2, 3, 4])\n        (1, 4)\n        >>> min_max([7, 11, 13])\n        (7, 11)\n    \"\"\"\n    pass\n\ndef max_min(numbers: List[int]) -> (int, int):\n    \"\"\" Inputs:\n        numbers (List[int]): A list of numbers.\n    Outputs:\n        (max, min) (int, int).\n    Example:\n        >>> max_min([1, 2, 3, 4])\n        (4, 3)\n        >>> max_min([7, 11, 13])\n        (13, 7)\n    \"\"\"\n    pass\n\ndef all_zeros(numbers: List[int]) -> bool:\n    \"\"\" Inputs:\n        numbers (List[int]): A list of numbers.\n    Outputs:\n        True if the numbers are all zeros and False otherwise.\n    Example:\n        >>> all_zeros([1, 2, 3, 4])\n        True\n        >>> all_zeros([0, 0, 0, 0])\n        True\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"thr\")\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"apples\", \"bananas\", \"cats\", \"dogs\"], \"cats\") == [\n    \"bananas\",\n    \"apples\",\n    \"dogs\"]\nassert     filter_by_substring([\"apples\", \"bananas\", \"cats\", \"dogs\"], \"aaa\") == []\nassert     filter_by_substring([\"apples\", \"bananas\", \"cats\", \"dogs\"], \"a\") == []\nassert     filter_by_substring([\"apples\", \"bananas\", \"cats\", \"dogs\"], \"aa\") == []\nassert     filter_by_substring([\"apples\", \"bananas\", \"cats\", \"dogs\"], \"aa\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     filter_by_substring([1, 2, \"1\", 3, \"2\", \"3\"], \"1\") == [1, 2]\nassert     filter_by_substring([1, 2, \"1\", 3, \"2\", \"3\"], \"3\") == [3]\nassert     filter_by_substring([1, 2, \"1\", 3, \"2\", \"3\"], \"2\") == [2, 3]\nassert     filter_by_substring([1, 2, \"1\", 3, \"2\", \"3\"], \"1\") == []\nassert     filter_by_substring([1, 2, \"1\", 3, \"2\", \"3\"], \"3\") == [1, 2, 3]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     filter_by_substring([ 'abc', 'def', 'ghi' ], 'h') == [ 'abc', 'def', 'ghi' ]\nassert     filter_by_substring([ 'abc', 'def', 'ghi' ], 'a') == [ 'abc' ]\nassert     filter_by_substring([ 'abc', 'def', 'ghi' ], 'g') == [ 'abc', 'def' ]\nassert     filter_by_substring([ 'abc', 'def', 'ghi' ], 'c') == [ 'abc' ]\nassert     filter_by_substring([ 'abc', 'def', 'ghi' ], 'd') == [ 'ghi' ]\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"abc\", \"defg\"], \"fg\") == [\n        \"defg\",\n        \"abc\",\n        ]\nassert     filter_by_substring([\"abc\", \"defg\"], \"fg??\") == [\n        \"abc\",\n        \"defg\",\n        ]\nassert     filter_by_substring([\"abc\", \"defg\"], \"fg??\") == [\n        \"abc\",\n        \"defg\",\n        ]\nassert     filter_by_substring([\"abc\", \"defg\"], \"fg??\") == [\n        \"abc\",\n        \"defg\",\n        ]\nassert     filter_by_substring([\"abc\", \"defg\"], \"fg??\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     filter_by_substring(['this', 'is', 'this', 'is', 'this', 'is'], 'is')\nassert     filter_by_substring(['this', 'is', 'this', 'is', 'this', 'is'], 'is')\nassert     filter_by_substring(['this', 'is', 'this', 'is', 'this', 'is'], 'is')\nassert     filter_by_substring(['this', 'is', 'this', 'is', 'this', 'is'], 'is')\nassert     filter_by_substring(['this', 'is', 'this', 'is', 'this', 'is'], 'is')\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     filter_by_substring([1, 2, 3, 4, 5], \"b\") == [1, 2, 3, 4]\nassert     filter_by_substring([1, 2, 3, 4, 5], \"o\") == [1, 2, 3, 4, 5]\nassert     filter_by_substring([1, 2, 3, 4, 5], \"b\") == []\nassert     filter_by_substring([1, 2, 3, 4, 5], \"x\") == []\nassert     filter_by_substring([1, 2, 3, 4, 5], \"\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     filter_by_substring([1, 2, 3, 4, 5], 'e') == [1, 2, 3, 4, 5]\nassert     filter_by_substring([1, 2, 3, 4, 5], 'z') == []\nassert     filter_by_substring([1, 2, 3, 4, 5],'m') == [1, 2, 3, 4, 5]\nassert     filter_by_substring([1, 2, 3, 4, 5], 'o') == []\nassert     filter_by_substring([1, 2, 3, 4, 5], 'r') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     filter_by_substring([ 'h', 'e', 'l', 'l', 'o' ], 'l') == ['e']\nassert     filter_by_substring([ 'h', 'e', 'l', 'l', 'o' ], 'h') == []\nassert     filter_by_substring([ 'h', 'e', 'l', 'l', 'o' ], 'o') == []\n\ndef filter_by_index(strings: List[str], index: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for a given index\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         sum_product([1,2,3]) == (6,3)\nassert         sum_product([2,3,4]) == (4,6)\nassert         sum_product([1]) == (0,1)\nassert         sum_product([]) == (0,1)\nassert         sum_product([3,1]) == (3,3)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sum_product([3, 6, -2]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sum_product([1, 2, 3]) == (1, 6)\nassert     sum_product([2, 4, 6, 8]) == (15, 24)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([2, 2]) == (2, 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (6, 24)"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sum_product([1,2,3,4]) == (4, 1)\nassert     sum_product([1,2,3,4,5,6,7,8,9]) == (10, 50)\nassert     sum_product([1,2,3,4,5,6,7,8,9,10,11,12]) == (20, 100)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sum_product([1, 2, 3]) == (3, 2)\nassert     sum_product([5, 1, 7, 9, 10]) == (17, 125)\nassert     sum_product([-1, 1, 2, 3]) == (0, 0)\nassert     sum_product([0]) == (0, 0)\nassert     sum_product([-2]) == (0, 0)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sum_product( [1,2,3,4,5] ) == (5,4)\nassert     sum_product( [1,1,1,1,1] ) == (1,1)\nassert     sum_product( [1] ) == (1,1)\nassert     sum_product([1]) == (1,1)\nassert     sum_product([1,1,1,1]) == (1,1)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sum_product([1,2,3]) == (6, 12)\nassert sum_product([1, 1, 1]) == (0, 1)\nassert sum_product([2, 1, 3]) == (6, 0)\nassert sum_product([1, 2, 1, 1, 1, 1, 1]) == (0, 15)\nassert sum_product([1, 2, 3, 2, 3, 4, 6]) == (12, 729)\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sum_product([1,2,3]) == (6, 3)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([0, -3]) == (0, -3)\nassert     sum_product([1, -2, 3]) == (6, -3)\n\ndef list_product(numbers: List[int]) -> List[int]:\n    \"\"\" For a given list of integers, return a list of all the products of all the integers in a list.\n    Empty products should be equal to 0.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     rolling_max([1, 2, 3, 1]) == [1, 3]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     type(rolling_max([])) == type(0)\nassert     rolling_max([]) == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     0 < len(numbers) <= 10**6\nassert     numbers[0] == 1 or numbers[0] == 2\nassert     numbers[1] == 1 or numbers[1] == 2\nassert     len(numbers) < 11\n\ndef rolling_max_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     assert(rolling_max(numbers=[1, 2, 3, 4, 5, 6]) == [3, 5, 6])\nassert     assert(rolling_max(numbers=[]) == [])\n\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1, 2, 3, 4]) == [3, 4]\nassert     rolling_max([1, 2, 3, 1, 2, 3, 1, 2, 3]) == [1, 2, 3, 3]\nassert     rolling_max([1, 2, 3, 4, 1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3]) == [1, 2, 3, 3, 4]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     # it does not work"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([5]) == [5]\nassert     rolling_max([3, 5, 7]) == [3, 5, 7]\nassert     rolling_max([4, 5, 6]) == [4, 5, 6]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     # you should not change the code\nassert     # rolling_max returns a list\nassert     # [1, 2, 3, 4] is equivalent to [1, 4, 3, 2]\nassert     # rolling_max returns a list\nassert     # [1, 3, 5, 7] is equivalent to [1, 7, 3, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     lambda n: isinstance(n, list) and len(n) == len(numbers)\nassert     lambda n: 0 <= n < len(numbers)\n\ndef get_max_from_two_list(numbers: List[int]) -> int:\n    \"\"\" Get the maximum element of given list of numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     [0,1,2,3,4,5,6,7,8,9,10] == rolling_max([0,1,2,3,4,5,6,7,8,9,10])\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     make_palindrome('is it a palindrome?') == 'its a palindrome'\nassert     make_palindrome('a b c') == 'ab c'\nassert     make_palindrome('abc') == 'abc'\nassert     make_palindrome('3') == '3'\nassert     make_palindrome('1') == '1'\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_palindrome(string = \"eeafg\") == True\nassert     is_palindrome(string = \"gfafadgf\") == False\n\nprint(\"Testing of make_palindrome\")\nassert     is_palindrome(string = \"gfafadgf\") == True\nassert     is_palindrome(string = \"eeafg\") == False\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_palindrome(\"\")\nassert is_palindrome(\"a\")\nassert is_palindrome(\"ab\")\nassert is_palindrome(\"aabbba\")\nassert is_palindrome(\"abab\")\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     make_palindrome('hello') == 'ello'\nassert     make_palindrome('123') == '1'\nassert     make_palindrome('abc') == 'a'\nassert     make_palindrome('aa') == 'a'\nassert     make_palindrome('aaa') == 'a'\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     make_palindrome(\"aabb\") == \"abab\"\nassert     make_palindrome(\"abab\") == \"abab\"\nassert     make_palindrome(\"abab\") == \"abab\"\nassert     make_palindrome(\"abba\") == \"abab\"\nassert     make_palindrome(\"ab\") == \"ab\"\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     make_palindrome('hello') == 'olleh'\nassert     make_palindrome('leetcode') == 'leetcode'\nassert     make_palindrome('rithm') == 'rithm'\nassert     make_palindrome('water') == 'aaw'\nassert     make_palindrome('kababa') == 'kababa'\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_palindrome(\"bc\") == True\nassert     is_palindrome(\"ABAB\") == True\nassert     is_palindrome(\"ABAB\") == True\nassert     is_palindrome(\"\") == False\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('c') == True\nassert     is_palindrome('ab') == True\nassert     is_palindrome('cba') == True\nassert     is_palindrome('abcd') == True\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"ab\") == \"ab\"\nassert     make_palindrome(\"aba\") == \"baa\"\n\nassert     make_palindrome(\"a\") == \"a\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     string_xor(\n    \"0\",\n    \"1\"\n) == \"1\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     string_xor
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     string_xor(b'111', b'1') == '11'\nassert     string_xor(b'111', b'0') == '0'\nassert     string_xor(b'001', b'1') == '00'\nassert     string_xor(b'001', b'0') == '0'\nassert     string_xor(b'0001', b'1') == '01'\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     string_xor(\"\", \"\") == \"\"\nassert     string_xor(\"a\", \"\") == \"a\"\nassert     string_xor(\"ab\", \"\") == \"ab\"\nassert     string_xor(\"a1b2\", \"b1\") == \"ba\"\nassert     string_xor(\"123\", \"456\") == \"9c6\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     string_xor(\"123\", \"3\") == \"111\"\nassert     string_xor(\"0\", \"1\") == \"0\"\nassert     string_xor(\"111\", \"0\") == \"1\"\nassert     string_xor(\"111\", \"1\") == \"1\"\n\ndef string_encrypt(s: str, k: int) -> str:\n    \"\"\" Input are a string s and an integer k.\n    Return encrypted string from string s and return encrypted string as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     string_xor(\"1110011\", \"1\") == \"10011\"\nassert     string_xor(\"1110011\", \"0\") == \"1110010\"\nassert     string_xor(\"1110011\", \"1\") == \"110010\"\nassert     string_xor(\"1110011\", \"00\") == \"111010\"\nassert     string_xor(\"1110011\", \"111\") == \"111011\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     string_xor
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     string_xor(\"11\", \"01\") == \"00\"\nassert     string_xor(\"1111\", \"1111\") == \"1111\"\nassert     string_xor(\"1111\", \"1100\") == \"100\"\nassert     string_xor(\"011111110111111010101111\", \"011111111110101010111111111\") == \"0111111111101010101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     string_xor(\"01101\", \"1100\") == \"11101\"\nassert     string_xor(\"01101\", \"10100\") == \"11100\"\nassert     string_xor(\"11101\", \"11100\") == \"1111\"\nassert     string_xor(\"01101\", \"10110\") == \"11100\"\nassert     string_xor(\"11101\", \"1100\") == \"11101\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert          longest([]) == ''\nassert          longest(['', 'a']) == 'a'\nassert          longest(['a', 'a']) == 'a'\nassert          longest(['a', 'a', 'b']) == 'b'\nassert          longest(['', 'a', 'a', 'a']) == 'a'\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     longest('abc'), 'No longest string'\nassert     longest('abcd'), 'Longest string is \"abc\" '\nassert     longest('abcdef'), 'No longest string'\nassert     longest(['a','b','c','d']), 'Longest string is \"b\" '\nassert     longest([1,2,3,4]), 'Longest string is \"2\" '\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     longest(['a', 'b', 'c'])\nassert     longest(['a', 'a', 'a', 'a'])\nassert     longest(None)\nassert     longest([])\nassert     longest([])\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     longest([\"1\", \"22\", \"3333\"]) == \"1\"\nassert     longest([\"1\", \"2\", \"3\"]) == \"3\"\nassert     longest([\"1\", \"2\", \"4\"]) == \"4\"\nassert     longest([\"1\", \"1\"]) is None\n\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         longest(\"aabbc\") == \"aabbc\"\nassert         longest([\"a\",\"b\",\"c\"]) == \"a\"\nassert         longest([]) == None\nassert         longest([1, 2, 3]) == None\nassert         longest([1, 2, 3, 4, 5]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         longest([\"Lenny\", \"Lenny\", \"Lenny\"]) == \"Lenny\"\nassert         longest([\"Anna\", \"Anna\", \"Anna\", \"Anna\"]) == \"Anna\"\nassert         longest([\"Lenny\", \"Lenny\", \"Lenny\"]) == \"Lenny\"\nassert         longest([\"Anna\", \"Anna\", \"Anna\"]) == None\nassert         longest([\"Anna\", \"Anna\", \"Anna\", \"Anna\"]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     longest([]) == None\nassert     longest(['a']) == 'a'\nassert     longest(['a', 'a']) == 'a'\nassert     longest(['', 'a']) == 'a'\nassert     longest(['a', 'a', 'a']) == 'a'\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     longest(\"longest\") == \"l\"\nassert     longest([]) == \"l\"\nassert     longest([1,1,1,2,2,3,3]) == \"l\"\nassert     longest([1,1,1,2,2,3,3,4]) == \"l\"\nassert     longest([1,1,1,2,2,3,3,4,5]) == \"l\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     longest(\"abcddbffbff\") == \"bff\"\nassert     longest([\"ab\"]) == \"ab\"\nassert     longest([]) == \"a\"\nassert     longest(None) == None\nassert     longest([0]) == 0\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     longest([\"abcd\", \"xyz\"]) == \"xyz\"\nassert     longest([\"a\", \"ab\", \"aab\", \"aaba\"]) == \"aab\"\nassert     longest([\"a\", \"aa\", \"aaaaa\"]) is None\nassert     longest([]) is None\nassert     longest([1, 2, \"\", 3, 4]) == \"3\"\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(3, 3) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(2, 4) == 2\nassert     greatest_common_divisor(6, 4) == 6\nassert     greatest_common_divisor(9, 8) == 9\nassert     greatest_common_divisor(4, 5) == 4\nassert     greatest_common_divisor(4, 3) == 4\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(100, 65) == 1\nassert     greatest_common_divisor(85, 65) == 11\nassert     greatest_common_divisor(33, 77) == 16\nassert     greatest_common_divisor(90, 65) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(5, 4) == 1\nassert     greatest_common_divisor(10, 8) == 2\nassert     greatest_common_divisor(5, 10) == 2\nassert     greatest_common_divisor(5, 2) == 2\nassert     greatest_common_divisor(10, 5) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         greatest_common_divisor(18, 5) == 3\nassert         greatest_common_divisor(26, 11) == 7\nassert         greatest_common_divisor(9, 9) == 1\nassert         greatest_common_divisor(4, 3) == 1\nassert         greatest_common_divisor(5, 6) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     greatest_common_divisor(4, 4) == 2\nassert     greatest_common_divisor(12, 16) == 1\nassert     greatest_common_divisor(16, 12) == 1\nassert     greatest_common_divisor(12, 13) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(3, 4) == 2\nassert     greatest_common_divisor(1, 4) == 1\nassert     greatest_common_divisor(4, 6) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(17, 13) == 3\nassert greatest_common_divisor(4, 5) == 2\nassert greatest_common_divisor(1, 2) == 1\nassert greatest_common_divisor(4, 5) == 2\nassert greatest_common_divisor(4, 10) == 1\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     all_prefixes(\"abab\") == [\"ab\", \"ab\", \"ab\", \"ab\", \"ab\"]\nassert     all_prefixes(\"abcabcab\") == [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\nassert     all_prefixes(\"abcdef\") == [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\nassert     all_prefixes(\"dnscomplet\") == [\"dns\", \"com\", \"dns\", \"com\", \"dns\"]\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     all_prefixes(\"abcd\") == [\"ab\", \"cd\", \"cde\", \"cdf\", \"bd\", \"be\", \"bfc\", \"bfd\", \"bfe\", \"bff\", \"c\", \"f\", \"g\", \"h\", \"\"]\nassert     all_prefixes(\"abcdefgh\") == [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"]\nassert     all_prefixes(\"a\") == []\nassert     all_prefixes(\"abc\") == [\"abc\"]\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     all_prefixes('ab') == ['ab', 'a', 'b']\nassert     all_prefixes('abc') == ['abc']\nassert     all_prefixes('abcdef') == ['abc', 'abcdef']\nassert     all_prefixes('abcde') == ['abc', 'abc', 'de']\nassert     all_prefixes('abcde') == ['abc', 'abc', 'de']\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     all_prefixes('AabBbCccc') == ['A', 'B', 'C', 'B', 'C', 'B', 'C']\nassert     all_prefixes('A') == ['A', 'A']\nassert     all_prefixes('a') == ['a']\nassert     all_prefixes('ab') == ['a', 'b']\nassert     all_prefixes('abc') == ['abc', 'ab']\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\nprint('[SUCCESS] 26,951\\n')\n\nprint('Example 1:')\nprint('Input : \"abaacb\"\\nOutput : [\"aba\", \"a\", \"ba\", \"abc\", \"b\"]')\nprint('Exception :')\nprint('[[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]]')\n\nprint('Example 2:')\nprint('Input : \"abca\"\\nOutput : [\"ab\", \"ca\"]')\nprint('Exception :')\nprint('[[\"a\", \"b\", \"c\", \"d\", \"e\"],[\"a\", \"b\", \"c\", \"d\", \"e\"]]')\n\nprint('Example 3:')\nprint('Input : \"a\"\\nOutput : []')\nprint('Exception :')\nprint('[[\"a\"],[\"a\"]]')\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     all_prefixes(\"1-3-2-101-4\") == [\"1-3\", \"2\", \"3\", \"4\"]\nassert     all_prefixes(\"abc\") == [\"a\", \"b\", \"c\"]\nassert     all_prefixes(\"123abc456\") == [\"123\", \"456\", \"abc\"]\nassert     all_prefixes(\"zpqpmmtz\") == [\"p\", \"m\", \"q\", \"m\", \"z\", \"p\", \"t\", \"m\"]\n\ndef prefixes(string: str) -> List[str]:\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     all_prefixes('abab') == ['a', 'b']\nassert     all_prefixes('abcde') == ['a', 'b', 'c', 'd', 'e']\nassert     all_prefixes('bba') == ['b', 'a']\nassert     all_prefixes('aab') == ['a', 'b']\nassert     all_prefixes('abc') == ['a', 'b', 'c']\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     all_prefixes('ababab') == ['a', 'ab', 'ab']\nassert     all_prefixes('abba') == ['a', 'ab', 'ab', 'ba', 'b']\nassert     all_prefixes('abb') == ['a', 'ab', 'ab']\nassert     all_prefixes('bbb') == ['b', 'bb']\nassert     all_prefixes('aaaaaab') == ['a', 'a', 'a', 'aa', 'aaa']\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     all_prefixes(\"abc\") == [\"abc\"]\nassert     all_prefixes(\"aaa\") == [\"aaa\",\"a\",\"a\"]\nassert     all_prefixes(\"aa\") == [\"aa\",\"a\"]\nassert     all_prefixes(\"aab\") == [\"aab\",\"a\",\"a\",\"a\"]\nassert     all_prefixes(\"aab\") == [\"aab\",\"a\",\"a\",\"a\",\"a\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     all_prefixes('abcd') == ['ab', 'cd', 'pq', 'xy']\nassert     all_prefixes('abc') == ['a', 'b', 'c']\nassert     all_prefixes('abcde') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nassert     all_prefixes('abcdef') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert     all_prefixes('abcdefghijklmnopqrstuvwxyz') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'y', 'z']\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     string_sequence(10) == \"0123456789\"\nassert string_sequence(1) == \"\"\nassert string_sequence(2) == \"011\"\nassert string_sequence(3) == \"0011\"\nassert string_sequence(4) == \"1111\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(4) == '4'\nassert     string_sequence(0) == '0'\nassert     string_sequence(5) == '5'\nassert     string_sequence(10) == '10'\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     string_sequence(10) == \"10\"\nassert string_sequence(1) == \"1\"\nassert string_sequence(8) == \"8\"\nassert string_sequence(0) == \"0\"\nassert string_sequence(5) == \"5\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     string_sequence(2) == \"123\"\nassert     string_sequence(3) == \"123456\"\nassert     string_sequence(5) == \"1234567\"\nassert     string_sequence(10) == \"123456789\"\nassert     string_sequence(17) == \"123456789012\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     string_sequence(5) == \"012\"\nassert     string_sequence(5) == \"012 345 667\"\nassert     string_sequence(0) == \"0\"\n\ndef greek_letters(num: int) -> str:\n    \"\"\" Return a string containing the Greek letters of the num integer from 0 to n inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         string_sequence(5) == \"0123456789\"\nassert         string_sequence(6) == \"6789\"\nassert         string_sequence(15) == \"2 3 6 7 8 9 0 1 2 3\"\nassert         string_sequence(30) == \"7890 5632\"\nassert         string_sequence(40) == \"789 5632 0\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     string_sequence(1) == \"1\"\nassert     string_sequence(1) == \"1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(0) == \"0\"\nassert     string_sequence(0) == \"0\"\nassert     string_sequence(10) == \"10\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     string_sequence(5) == \"0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"1\"\nassert     string_sequence(2) == \"12\"\nassert     string_sequence(3) == \"123\"\nassert     string_sequence(4) == \"4 123\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     count_distinct_characters('This is a test string') == 1\nassert     count_distinct_characters('This string contains at least one character.') == 1\nassert     count_distinct_characters('This string contains at least one character.') == 1\nassert     count_distinct_characters('Test string contains at least one character.') == 0\nassert     count_distinct_characters('TEST string contains at least one character.') == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     count_distinct_characters
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     count_distinct_characters('abccba') == 3\nassert     count_distinct_characters('abccba') == 3\nassert     count_distinct_characters('abccba') == 0\nassert     count_distinct_characters('aaabbbbcc') == 2\nassert     count_distinct_characters('aabbccab') == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"aaa\") == 1\nassert     count_distinct_characters(\"aaaaa\") == 1\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"  aaa  \") == 1\nassert     count_distinct_characters(\"aaaa  a\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"aab\") == 1\nassert     count_distinct_characters(\"Aabb\") == 2\nassert     count_distinct_characters(\"aabb\") == 2\nassert     count_distinct_characters(\"Aabbaabbbbbbbbbb\") == 0\nassert     count_distinct_characters(\"Aabbbbbabbbbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbb\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"ABF\"), 2\nassert     count_distinct_characters(\"abcdefghijklmnopqrstuvwxyz\"), 5\nassert     count_distinct_characters(\"PYTHONISTSHIFT \"), 2\nassert     count_distinct_characters(\"PYTHONISTSHIFT z\"), 0\nassert     count_distinct_characters(\"PYTHONISTSHIFT t\"), 2\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     count_distinct_characters('Hello World') == 5\nassert     count_distinct_characters('ab') == 2\nassert     count_distinct_characters('asdf') == 1\nassert     count_distinct_characters('abcdefg') == 2\nassert     count_distinct_characters('abcdefg') == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"a\") == 0\nassert     count_distinct_characters(\"ab\") == 1\nassert     count_distinct_characters(\"aaa\") == 2\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     count_distinct_characters(string=\"hello world\") == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"a b c\") == 2\nassert     count_distinct_characters(\"aaaa\") == 2\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     parse_music(\"o.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|."
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     parse_music('o|') == [1, 2]\nassert     parse_music('o|.|') == [2, 4, 1, 0]\nassert     parse_music('o.o|.o') == [4, 4, 1, 0]\nassert     parse_music('o.o|.o|') == [2, 4, 1, 0, 0]\nassert     parse_music('o.o|.o|.o') == [1, 3, 4, 4, 0]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     parse_music(music_string = 'o') == [1, 1, 0, 0]\nassert     parse_music(music_string = 'o|') == [0, 2, 2, 2]\nassert     parse_music(music_string = '.') == [0, 0, 0, 0]\nassert     parse_music(music_string = 'o|o') == [0, 1, 1, 1]\nassert     parse_music(music_string = 'o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     parse_music(\"o'|o.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     parse_music('o|o|') == [2, 4]\nassert     parse_music('o|-o|') == [2, 2]\nassert     parse_music('o|.o|') == [0, 2]\nassert     parse_music('o|-.o|') == [0, 1]\nassert     parse_music('o|o|o|') == [1, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     parse_music('o|.|\\n') == [5, 5, 4, 0]\nassert     parse_music('o|') == [5, 5, 4, 0]\nassert     parse_music('o|o\\n') == [5, 5, 4, 0]\nassert     parse_music('o|o|\\n') == [5, 5, 5, 4, 0]\nassert     parse_music('o|.|\\n') == [5, 5, 5, 0]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     parse_music('o') == [4, 2, 1, 0]\nassert     parse_music('o|') == [4, 2, 1, 0, 2, 1, 0, 1, 0]\nassert     parse_music('.') == [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\ndef get_beat_start(music_string: str) -> int:\n    \"\"\"\n    Input:\n        music_string: string of musical notes as a string\n    \n    Output:\n        the start beat number of the music string\n    \"\"\"\n    beat_start = -1\n    for i in range(len(music_string)):\n        if music_string[i] == 'o' or music_string[i] == '|':\n            beat_start = i\n            break\n    return beat_start\n\ndef get_beat_end(music_string: str, beat_start: int) -> int:\n    \"\"\"\n    Input:\n        music_string: string of musical notes as a string\n        beat_start: the start beat number of the music string\n    \n    Output:\n        the end beat number of the music string\n    \"\"\"\n    beat_end = -1\n    for i in range(len(music_string)):\n        if music_string[i] == 'o' or music_string[i] == '|':\n            beat_end = i\n            break\n    return beat_end\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     parse_music('o|o') == [2, 1]\nassert     parse_music('o|o|o') == [2, 3, 1]\nassert     parse_music('o|.|o|o') == [2, 1, 2, 1]\nassert     parse_music('o|o|o|o') == [2, 3, 1, 2, 1]\nassert     parse_music('o|.|o|o|o') == [3, 1, 3, 1, 3]\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     parse_music('o|' ) == [0,0,0,1]\nassert     parse_music('o|' ) == [0,0,0,0]\nassert     parse_music('o.|' ) == [0,0,0,1]\nassert     parse_music('.') == [0,0,0,0]\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         how_many_times(\"abc\", \"b\") == 2\nassert         how_many_times(\"abc\", \"c\") == 1\nassert         how_many_times(\"abc\", \"d\") == 0\nassert         how_many_times(\"abc\", \"e\") == 0\nassert         how_many_times(\"abc\", \"f\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     how_many_times(\"hello\", \"e\") == 2\nassert     how_many_times(\"aaa\", \"a\") == 1\nassert     how_many_times(\"aa\", \"a\") == 1\nassert     how_many_times(\"aa\", \"b\") == 2\nassert     how_many_times(\"aab\", \"a\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     how_many_times(\"abb\", \"ab\") == 2\nassert     how_many_times(\"abbb\", \"ab\") == 2\nassert     how_many_times(\"abc\", \"ab\") == 2\nassert     how_many_times(\"abcdefg\", \"ab\") == 3\nassert     how_many_times(\"abcd\", \"abc\") == 3\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     how_many_times('a', 'b') == 2\nassert     how_many_times('aa', 'b') == 1\nassert     how_many_times('ab', 'a') == 1\nassert     how_many_times('aab', 'a') == 2\nassert     how_many_times('aaab', 'a') == 2\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     how_many_times(string=\"go go go go go\", substring=\"go go go go go\") == 4\nassert     how_many_times(string=\"go go go go go\", substring=\"go go go go go go\") == 4\nassert     how_many_times(string=\"go go go go go go\", substring=\"go go go go go go go\") == 0\nassert     how_many_times(string=\"go go go go go go go\", substring=\"go go go go go go go\") == 0\nassert     how_many_times(string=\"go go go go go go go go\", substring=\"go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go go g"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     how_many_times(\"a\", \"ab\") == 3\nassert     how_many_times(\"abab\", \"ab\") == 2\nassert     how_many_times(\"ab\", \"a\") == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'three five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seve"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_numbers(\"zero\") == \"zero\"\nassert sort_numbers(\"one\") == \"one\"\nassert sort_numbers(\"two\") == \"two\"\nassert sort_numbers(\"three\") == \"three\"\nassert sort_numbers(\"four\") == \"four\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_numbers(\"zero\") == \"zero\"\nassert     sort_numbers(\"one\") == \"one\"\nassert     sort_numbers(\"two\") == \"two\"\nassert     sort_numbers(\"three\") == \"three\"\nassert     sort_numbers(\"four\") == \"four\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sort_numbers(\"zero\") == \"zero nine four five six seven eight nine\"\nassert     sort_numbers(\"zero nine four\") == \"zero nine four nine seven eight nine eight nine\"\nassert     sort_numbers(\"zero nine seven\") == \"zero nine seven eight nine nine eight nine\"\nassert     sort_numbers(\"one\") == \"one two three four five six seven eight nine\"\nassert     sort_numbers(\"one nine\") == \"one nine eight nine nine\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sort_numbers(\"123456789\") == \"123456789\"\nassert     sort_numbers(\"91234\") == \"91234\"\nassert     sort_numbers(\"1234\") == \"1234\"\nassert     sort_numbers(\"1234\") == \"341234\"\nassert     sort_numbers(\"123\") == \"234\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sort_numbers(\"zero\") == \"zero one two three four five six seven eight nine\"\nassert     sort_numbers(\"one\") == \"one one two three four five six seven eight nine nine zero one two three four five six seven eight nine\"\nassert     sort_numbers(\"two\") == \"two two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine zero one two three four five six seven eight nine nine nine zero one two three four five six seven eight nine nine nine zero one two three four five six seven eight nine nine nine zero one two three four five six seven eight nine nine nine zero one two three four five six seven eight nine nine nine nine zero one two three four five six seven eight nine nine nine nine nine zero one two three four five six seven eight nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nine nin"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         sort_numbers(\"\") == \"\"\nassert         sort_numbers(\"one\") == \"one\"\nassert         sort_numbers(\"two\") == \"two\"\nassert         sort_numbers(\"three\") == \"three\"\nassert         sort_numbers(\"four\") == \"four\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sort_numbers(\"zero one two three\") == \"three eight nine\"\nassert     sort_numbers(\"one one one one one\") == \"one zero zero one eight nine\"\nassert     sort_numbers(\"two three four five\") == \"five eight nine eight\"\nassert     sort_numbers(\"three four eight one\") == \"one eight eight eight eight eight eight eight\"\nassert     sort_numbers(\"three four eight two\") == \"two eight eight eight eight eight eight eight eight eight eight\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_numbers(\"one 22 eight nine\") == \"nine one 22 eight\"\nassert     sort_numbers(\"one 22 eight four\") == \"four eight four\"\nassert     sort_numbers(\"one 22 eight four\") == \"four eight seven\"\nassert     sort_numbers(\"one 22 eight three\") == \"three eight three\"\nassert     sort_numbers(\"one 22 eight three\") == \"three eight eight\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     find_closest_elements([]) == (0.0, 0.0)\nassert     find_closest_elements([1,2]) == (1.0, 2.0)\nassert     find_closest_elements([1,2,3,4,5]) == (1.0, 2.0, 3.0, 4.0, 5.0)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9]) == (1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0)\n\n\ndef append_to_list_of_elements(numbers: List[float]) -> None:\n    \"\"\"\n    Appends an element to a list of numbers (starting from the end).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     find_closest_elements([]) == ()\nassert     find_closest_elements([1,2,3]) == (1,3)\nassert     find_closest_elements([1,4,5,6]) == (1,5)\nassert     find_closest_elements([9,8,7,6,5,4,3,2,1]) == (9,8)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9]) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     find_closest_elements([]) == ()\nassert     find_closest_elements([1.5]) == (1.5, 1.5)\nassert     find_closest_elements([1.5, 2, 3]) == (1.5, 2)\nassert     find_closest_elements([1, 2, 3, 4]) == (2, 3)\nassert     find_closest_elements([1, 2, 3, 4, 5]) == (4, 5)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     find_closest_elements([1.0, 2.0, 3.0]) == (1.0, 3.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0]) == (1.0, 4.0)\nassert     find_closest_elements([3.0, 1.0, 2.0, 3.0]) == (3.0, 1.0)\nassert     find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0]) == (1.0, 4.0)\n\n\ndef find_closest_elements_with_coverage(numbers: List[float]) -> Tuple[float, float]:\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     find_closest_elements([1, 2, 4, 7]) == (4, 7)\nassert     find_closest_elements([7, 5, 2, 1]) == (7, 5)\nassert     find_closest_elements([1, 2, 5, 7]) == (1, 2)\nassert     find_closest_elements([3, 5, 1, 2]) == (3, 1)\nassert     find_closest_elements([]) == (None, None)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     find_closest_elements([1, 2, 3]) == (1, 2)\nassert     find_closest_elements([4, 5, 7]) == (4, 5)\nassert     find_closest_elements([3, 5, 7]) == (3, 5)\n\ndef find_closest_numbers(numbers: List[float], element: float) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to\n    one another and return them in order (smaller number, larger number).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     find_closest_elements([]) == (0.0, 0.0)\nassert     find_closest_elements([1, 2, 3, 4]) == (1.0, 2.0)\nassert     find_closest_elements([6, 4, 2, 3, 2]) == (6.0, 4.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     find_closest_elements([-1, 1, 2]) == (1, 2)\nassert     find_closest_elements([2, 4, 5, 6, 7, 8, 9, 0]) == (0, 9)\nassert     find_closest_elements([-1, -1, -2]) == (-1, -2)\nassert     find_closest_elements([0, 0, 2]) == (0, 2)\nassert     find_closest_elements([2, 4, 5, -8]) == (2, 4)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     find_closest_elements([1, 2, 3, 5, 6, 7, 9, 8, 10]) == (3, 9)\nassert     find_closest_elements([0, 2, 4, 6, 8]) == (0, 4)\nassert     find_closest_elements([5, 6, 7, 8, 9]) == (5, 7)\nassert     find_closest_elements([-1, -2, -3, -5, -6]) == (-1, -2)\nassert     find_closest_elements([1, 2, 3, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15]) == (12, 15)\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         find_closest_elements([2, 1, 5, 4, 3]) == (3, 3)\nassert         find_closest_elements([1, 2, 2, 3, 4, 1, 2]) == (1, 2)\nassert         find_closest_elements([4, 1, 3, 2, 5, 6, 3]) == (3, 5)\n\n\ndef naive_count_elements(numbers: List[float]) -> int:\n    \"\"\" Count the number of elements that are closest to the given numbers in\n    order. Return a count of the closest numbers as a tuple (closest number, index of closest number).\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     rescale_to_unit([1,2,3,4]) == [1,2,3,4]\nassert     rescale_to_unit([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     rescale_to_unit([1, 1.1, 0.6]) == [1.1, 0.6]\nassert     rescale_to_unit([-1, 2, 0.3]) == [-1, 2, 0.3]\nassert     rescale_to_unit([-1, 1, 1.2]) == [-1, 1, 1.2]\nassert     rescale_to_unit([-1, 2, -0.1]) == [-1, 2, -0.1]\nassert     rescale_to_unit([-1, 2, 0.3]) == [-1, 2, 0.3]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     rescale_to_unit([]) == []\nassert rescale_to_unit([1,2,3,4,5]) == [0,1,2,3,4,5]\nassert rescale_to_unit([2,3,4,5,6]) == [0,1,2,3,4,5,6]\nassert rescale_to_unit([1,2,3,4,5,6,0]) == [0,1,2,3,4,5,6]\nassert rescale_to_unit([-2, -1, 1, -3, -3, 1, 0, 2, 3]) == [-2, 0, 1, 2, 3, -3, -1, -3, -3, 1, 0, 2, 3]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([1]) == []\nassert     rescale_to_unit([0]) == [0, 0]\nassert     rescale_to_unit([0.5]) == [0.5, 0.5]\nassert     rescale_to_unit([0.1, 0.2, 0.3]) == [0.1, 0.2, 0.3]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     rescale_to_unit([3, 2, 4, 3, 4]) == [3, 3, 3, 4, 4]\nassert     rescale_to_unit([0, 1]) == [0, 1]\nassert     rescale_to_unit([3, 2, 4, 3, 4]) == [3, 3, 3, 4, 4]\nassert     rescale_to_unit([0, 1, 2, 3]) == [0, 1, 2, 3]\nassert     rescale_to_unit([1, 2, 3, 1]) == [0, 0, 0, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rescale_to_unit([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     rescale_to_unit([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     rescale_to_unit([0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75]) == [0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75]\nassert     rescale_to_unit([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0, 0, 0, 1]\nassert     rescale_to_unit([1, 2, 3, -4]) == [0, 0, 0, -1]\nassert     rescale_to_unit([0, 0, -1, 0]) == [0, 0, 0, 1]\nassert     rescale_to_unit([0, 0, 1, -1]) == [0, 0, 0, 1]\nassert     rescale_to_unit([0, 0, -1, 1]) == [0, 0, 0, -1]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     rescale_to_unit([1,2,3,4]) == [1,2,3,4]\nassert     rescale_to_unit([0,2,3,4,5]) == [0,2,3,4,5]\nassert     rescale_to_unit([1,0,2,3,4,5]) == [1,0,2,3,4,5]\nassert     rescale_to_unit([1,1,2,3,4,5]) == [1,2,4,6,8,10]\nassert     rescale_to_unit([1,1,1,1,1,1]) == [1,1,1,1,1,1]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     rescale_to_unit([]) == []\nassert     rescale_to_unit([1.0]) == [1.0]\nassert     rescale_to_unit([1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         rescale_to_unit([-1,0,3]) == [0,0,1]\nassert         rescale_to_unit([-1,0,-1]) == [0,0,0]\nassert         rescale_to_unit([0,-1,0]) == [0,0,0]\nassert         rescale_to_unit([0,0,0]) == [0,0,0]\nassert         rescale_to_unit([-1,0,0]) == [0,0,0]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers(()) == []\nassert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         filter_integers([1, 2, 3]) == [1, 2, 3]\nassert         filter_integers([1, 2, 3, 'a', 'b']) == [1, 2, 3]\nassert         filter_integers([1, 2, 3, 'a', 'b', 'c']) == [1, 2, 3, 'a', 'b']\nassert         filter_integers([1, 2, 3, 'a', 'b', 'c', 'd']) == [1, 2, 3, 'a', 'b']\nassert         filter_integers([1, 2, 3, 1, 'a', 'b', 'c', 'd']) == [1, 2, 3, 1, 'a', 'b']\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     (filter_integers([1,2,3,4,5]) == [1, 2, 3, 4, 5])\nassert     (filter_integers([0,1,0,1,0]) == [0, 1, 0, 1, 0])\nassert     (filter_integers([1,1,1,1,1,1,1,1,1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1])\n\n\ndef filter_booleans(values: List[Any]) -> List[bool]:\n    \"\"\" Filter given list of any python values only for boolean values\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\n\"\"\"\nFILTERING:\n    use a tuple to represent a type to filter on\n\n\"\"\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     filter_integers(['1', '2', '3', '4']) == ['1', '2', '3', '4']\nassert     filter_integers(['', '1', '2', '3', '4']) == ['', '1', '2', '3', '4']\nassert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     filter_integers(['', 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     filter_integers([2, 5, 3]) == [3, 2, 5]\nassert     filter_integers([]) == []\nassert     filter_integers([3, 5, 7, 2, 5, 3, 4, 8, 5]) == [3, 5, 7, 2, 5, 3, 4, 8, 5]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     filter_integers([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     filter_integers([2,3,4,5,6]) == [2,3,4,5,6]\nassert     filter_integers([2,3,4,5,6,7]) == [2,3,4,5,6,7]\nassert     filter_integers([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     filter_integers([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     filter_integers([1, 2, 4]) == [1, 2, 4]\nassert     filter_integers([1.2, 2.3, 4.5]) == [1, 2, 4.5]\nassert     filter_integers([1.23, 2.3, 4.5]) == [1.23, 2.3, 4.5]\nassert     filter_integers([1.23, '2.3', 4.5]) == [1.23, '2.3', 4.5]\nassert     filter_integers([1.23, 2.3, 4.5]) == [1.23, 2.3, 4.5]\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     filter_integers([1,2,3,4]) == [1,2,3]\nassert     filter_integers([1,2,3,4,5]) == [1,2,3,5]\nassert     filter_integers(['a','b','c']) == ['b','c']\nassert     filter_integers(['a','b']) == ['a']\nassert     filter_integers([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     strlen(123) == 5\nassert     strlen(\"abc\") == 1\nassert     strlen(\"123\") == 0\nassert     strlen(\"abc123\") == 3\nassert     strlen(\"abc.123\") == 2\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         strlen(\"python\")\nassert         strlen(\"  \")\nassert         strlen(\"  \\t  \\t\")\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     strlen(\"abcd\") == 3\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     strlen(\"xyz\") == 3\nassert     strlen(\"xyz\") == 3\nassert     strlen(\"\") == 0\nassert     strlen(\" \") == 0\n\ndef get_line(position: int) -> str:\n    \"\"\" Return a single line as a string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     strlen(\"abcdef\") == 5\nassert     strlen(\"abcedf\") == 6\n\ndef strrepr(string: str) -> str:\n    \"\"\" Return representation of given string\n    \"\"\"\n    pass\n\ndef substr(string: str, start: int, end: int) -> str:\n    \"\"\" Return given string starting from index start to index end\n    \"\"\"\n    pass\n\ndef splice(string: str, start: int, end: int) -> str:\n    \"\"\" Split given string into two parts starting from index start and index end\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"aabb\") == 3\nassert     strlen(\"aaaabb\") == 5\nassert     strlen(\"aaaaaabb\") == 7\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     strlen(\"abc\") == 3\nassert     strlen(\"abcdef\") == 3\nassert     strlen(\"abcd\") == 2\nassert     strlen(\"\") == 0\nassert     strlen(None) == 0"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\ndef strfind(str, substr: str) -> int:\n    \"\"\" Return index of first occurrence of substr in given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     largest_divisor(13) == 3\nassert     largest_divisor(200) == 50\nassert     largest_divisor(1000000001) == 1001\nassert     largest_divisor(40000001) == 40000001\nassert     largest_divisor(6000000000) == 6000000000\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     largest_divisor(17) == 10\nassert largest_divisor(18) == 6\nassert largest_divisor(22) == 12\nassert largest_divisor(13) == 1\nassert largest_divisor(5) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\ndef assert_greater(a: int, b: int) -> bool:\n    \"\"\" For a given two numbers, check if the result is greater than the given number\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     largest_divisor(11) == 2\nassert     largest_divisor(7) == 1\nassert     largest_divisor(2) == 2\nassert     largest_divisor(10) == 2\nassert     largest_divisor(3) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     largest_divisor(20) == 5\nassert     largest_divisor(10) == 7\nassert     largest_divisor(4) == 2\nassert     largest_divisor(25) == 11\nassert     largest_divisor(90) == 28\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\ndef largest_divisor_list(n: int) -> list:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     factorize(100) == [1, 2, 4, 8, 16, 32, 64, 128, 256]\nassert     factorize(5) == [1, 2, 3, 5]\nassert     factorize(5)!= [1, 2, 3, 5, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]\nassert     factorize(2)!= [1, 2, 4]\nassert     factorize(5) == [1, 3, 5]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(3) == [3, 2]\nassert     factorize(4) == [4, 3, 2]\nassert     factorize(5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(3) == [1, 3]\nassert     factorize(4) == [1, 2, 4]\nassert     factorize(7) == [1, 7]\nassert     factorize(24) == [1, 3, 6, 8, 12]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef test_factorize():\n    assert not factorize(15)\n    assert factorize(22) == [2, 2, 3]\n    assert factorize(30) == [3, 3, 5, 6, 8]\n    "
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     factorize(0) == []\nassert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(5) == [2,5]\nassert     factorize(10) == [2,5,10]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     factorize(42) == [2, 3, 5, 6, 9, 10, 42]\nassert     factorize(5) == [5, 5]\nassert     factorize(7) == [7, 7]\nassert     factorize(6) == [6, 6]\nassert     factorize(5) == [5, 5]\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     remove_duplicates([2, 2, 3, 4, 4, 4, 4, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]) == [2, 3, 4, 4, 6, 7, 7, 8, 9, 10, 10]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10]) == [1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 7, 7, 8, 8, 9, 9, 10, 10]\nassert     remove_duplicates([2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 10, 10]) == [2, 3, 4, 4, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10]\n\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1,1,2,3,3,5,2,1]) == [1, 2, 3, 3, 5]\nassert     remove_duplicates([1,2,3,4,4,4,5,5,5,6,6,6,7,7,7,7]) == [1, 2, 3, 4, 4, 5, 6, 6, 7, 7, 7, 7]\n\n\ndef reverse_string(sentence: str) -> str:\n    \"\"\" From a sentence, remove duplicates.\n    Keep order of the elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     remove_duplicates([0, 0, 1, 1, 1, 2, 2, 3, 3, 4]) == [0, 1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 3, 4, 4, 5, 5, 5]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 3, 3, 4, 4, 5, 5, 5]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 3, 3, 4, 5, 5]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef check_match(numbers: List[int], target_num: int) -> bool:\n    \"\"\"\n    Given a list of numbers, check if the numbers match a target number.\n    A number can be put on an empty pile.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     remove_duplicates([1,2,3,4,5,6,7,7,7,7]) == [1,2,3,4,5,6,7]\nassert     remove_duplicates([1,2,2,2,2,2]) == [1,2,2,2,2]\n\n\ndef delete_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     remove_duplicates([3,2,1,1,2,4]) == [1,2,3,4]\nassert     remove_duplicates([1,2,2,3,4]) == [1,2,3,4]\nassert     remove_duplicates([2,2,2,2,3,4]) == [2,2,3,4]\nassert     remove_duplicates([1,1,2,2,2,3,3,4,4,4]) == [1,1,2,2,2,3,3,4,4]\nassert     remove_duplicates([2,2,2,2,2,2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 1, 2, 3, 1, 1, 2, 5, 6]) == [1, 2, 5, 6]\n\ndef remove_duplicates_rec(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     flip_case(\"Zm9yMzUz\") == \"ZM9YMzUz\"\nassert     flip_case(\"Zm9yMzUz\") == \"ZM9YmUz\"\nassert     flip_case(\"Zm9yMzUz\") == \"ZM9YmUz\"\nassert     flip_case(\"Zm9yMzUz\") == \"Zm9YmUz\"\nassert     flip_case(\"Zm9yMzUz\") == \"Zm9YmUz\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     flip_case('a a b c') == 'abc'\nassert     flip_case('A a B c') == 'Abc'\nassert     flip_case('ZZZZZ') == 'ZZZ'\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     flip_case('Hi') == 'HII'\nassert     flip_case('python') == 'PYTHON'\nassert     flip_case('Hi-There') == 'HIT-T-E-TH-A-TR-H'\nassert     flip_case('aaa') == 'aA-AA-AA'\nassert     flip_case('Aa-AA-AA') == 'Aa-AA-AA'\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     flip_case(\"AaBbCcDdEeFf\") == \"AbCdEf\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\" \") == \" \"\nassert     flip_case(\"  \") == \" \"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     flip_case(\"123456789\") == \"321\"\nassert flip_case(\"DFLUERDFLU\") == \"DRFLU\"\nassert flip_case(\"a1b2c3D4e5f6\") == \"a1b2c3d4e5f6\"\nassert flip_case(\"123456789_\") == \"123456789\""
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     flip_case('A') == 'a'\nassert     flip_case('A') == 'A'\nassert     flip_case('a') == 'A'\nassert     flip_case('aa') == 'A'\nassert     flip_case('aa') == 'A'\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     flip_case('Hello World')    == 'hlOeDd'\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     flip_case(\"AAbb\") == \"AB\"\nassert     flip_case(\"ABAB\") == \"AbaB\"\nassert     flip_case(\"ABAb\") == \"AbaBa\"\n\ndef add(string1: str, string2: str) -> str:\n    \"\"\" Given two strings, return a string with the result.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"Hi\") == \"hI\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"a1\") == \"A1\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"ab\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     concatenate([]) == \"\", \"Empty string list expected\"\nassert     concatenate([\"a\"]) == \"a\", \"Only one string passed, expected 'a'\"\nassert     concatenate([None]) == \"\", \"None expected, no error\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     concatenate([]) == \"\"\nassert     concatenate([1]) == \"1\"\nassert     concatenate([\"dog\", \"cat\"]) == \"dogcat\"\nassert     concatenate([\"dog\", \"cat\", \"dog\"]) == \"dogcatdog\"\nassert     concatenate([1, \"cat\", \"dog\"]) == \"dogcatdog\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     concatenate([\"x\", \"y\", \"z\"]) == \"xyz\"\nassert     concatenate([\"x\", \"y\", \"z\"]) == \"xyyz\"\nassert     concatenate([\"x\", \"y\", \"z\"]) == \"xzwyz\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     concatenate(['one','two']) == 'onetwo'\nassert     concatenate(['one', 'two', 'three']) == 'one2three'\nassert     concatenate(['one', 'two', 'three', 'four']) == 'one2threefour'\nassert     concatenate(['one', 'two', 'three', 'four', 'five']) == 'one2threefourfive'\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([1,2,3]) == \"1 2 3\"\nassert     concatenate([\"aa\", \"bb\", \"cc\"]) == \"aabbcc\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert     concatenate([\"aa\", \"bb\", \"cc\"]) == \"aabbcc\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     concatenate([\"a\",\"b\"]) == \"ab\"\nassert     concatenate([\"a\",\"b\",True]) == \"abb\"\nassert     concatenate([]) == \"\"\nassert     concatenate([\"1\",\"2\",\"3\"]) == \"1234\"\nassert     concatenate([\"1\",\"2\",\"3\",[]]) == \"[1, 2, 3]\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     concatenate([\"1\",\"2\",\"3\"]) == \"11\"\nassert     concatenate([\"1\",\"2\",\"3\",\"4\"]) == \"111\"\nassert     concatenate([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"11101011\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     concatenate([\"A\", \"B\", \"C\"]) == \"ABC\"\nassert     concatenate([\"A\", \"B\", \"C\", \"D\"]) == \"ABCD\"\nassert     concatenate([\"A\", \"B\", \"C\", \"D\", \"E\"]) == \"ABCDE\"\nassert     concatenate([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]) == \"ABCDF\"\n\ndef get_key(item: str, k: int) -> str:\n    \"\"\" return the key of the item in a list\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     concatenate([1, 2, 3, 4]) == \"123456\"\nassert     concatenate([1, '2', 3, '4']) == \"123456\"\nassert     concatenate(['one', 'two', 'three', 'four']) == \"one two three four\"\nassert     concatenate(['1', '2', '3', '4']) == '1 2 3 4'\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     filter_by_prefix([1, 2, 3, 4], \"1\") == [1, 3]\nassert     filter_by_prefix([1, 2, 3, 4], \"3\") == [2, 4]\nassert     filter_by_prefix([1, 2, 3, 4], \"2\") == [1, 3]\nassert     filter_by_prefix([1, 2, 3, 4], \"1\") == []\nassert     filter_by_prefix([1, 2, 3, 4], \"4\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"here is\", \"there is\", \"is\"], \"there\") == [\"here\", \"there\"]\nassert     filter_by_prefix([\"this\", \"is\", \"thes\"], \"is\") == [\"this\", \"is\", \"thes\"]\nassert     filter_by_prefix([\"does\", \"not\", \"like\", \"this\"], \"not\") == [\"does\", \"not\", \"like\", \"this\"]\nassert     filter_by_prefix([\"this\", \"is\", \"a\", \"test\"], \"\") == []\nassert     filter_by_prefix([\"this\", \"is\", \"a\", \"test\"], \"am\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     filter_by_prefix([\"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\"], \"ijk\") == [\"abcdefghijk\"]\n\nassert     filter_by_prefix([\"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\"], \"ijkl\") == [\"abcdefghijk\"]\n\nassert     filter_by_prefix([\"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\", \"abcdefghijk\"], \"ijk\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     filter_by_prefix([ 'hello', 'world', 'hello' ], 'o') == [ 'hello' ]\nassert     filter_by_prefix([ 'hello', 'world', 'hello' ], 'l') == [ 'hello' ]\nassert     filter_by_prefix([ 'hello', 'world', 'hello' ], 'l') == [ 'hello' ]\nassert     filter_by_prefix([ 'hello', 'world', 'hello' ], 'l') == [ 'hello' ]\nassert     filter_by_prefix([ 'hello', 'world', 'hello' ], 'l') == [ 'hello' ]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     filter_by_prefix([1, 2, 3, 4, 5], 'ee') == [1, 2]\nassert     filter_by_prefix([1, 2, 3, 4, 5], 'eeb') == [1, 3]\nassert     filter_by_prefix([1, 2, 3, 4, 5], 'e') == []\nassert     filter_by_prefix([1, 2, 3, 4, 5], 'ef') == [2]\nassert     filter_by_prefix([1, 2, 3, 4, 5], 'eef') == [2]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"first\", \"second\", \"third\"], \"first\") == [\"first\"]\nassert     filter_by_prefix([\"first\", \"second\", \"third\", \"fourth\"], \"first\") == [\"first\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     filter_by_prefix([1, 2, \"apple\", 4, \"pear\", 5], \"p\") == [1, 2, \"apple\"]\nassert     filter_by_prefix([1, 2, \"apple\", 4, \"pear\", 5], \"r\") == []\nassert     filter_by_prefix([1, 2, \"apple\", 4, \"pear\", 5], \"r\") == [1, 2, \"apple\", 4]\nassert     filter_by_prefix([1, 2, \"apple\", 4, \"pear\", 5], \"r\") == []\nassert     filter_by_prefix([1, 2, \"apple\", 4, \"pear\", 5], \"b\") == [2, \"apple\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\"], \"A\") == [\n    \"C\", \"E\"]\nassert     filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], \"A\") == [\n    \"C\", \"E\", \"F\", \"G\"]\nassert     filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], \"G\") == [\n    \"E\", \"F\", \"G\"]\nassert     filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], \"Z\") == [\n    \"D\", \"E\", \"F\", \"G\"]\nassert     filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], \"Zb\") == [\n    \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     filter_by_prefix([\"step 1\", \"step 2\", \"step 3\"], \"s\") == [\n    \"step 1\", \"step 2\", \"step 3\"]\nassert     filter_by_prefix([\"step 1\", \"step 2\", \"step 3\", \"step 4\", \"step 5\"], \"s\") == [\n    \"step 1\", \"step 2\", \"step 3\", \"step 4\", \"step 5\"]\nassert     filter_by_prefix([\"step 1\", \"step 2\", \"step 3\", \"step 4\", \"step 5\", \"step 6\", \"step 7\"], \"s\") == [\n    \"step 1\", \"step 2\", \"step 3\", \"step 4\", \"step 5\", \"step 6\", \"step 7\"]\nassert     filter_by_prefix([\"step 1\", \"step 2\", \"step 3\", \"step 4\", \"step 5\", \"step 6\", \"step 7\", \"step 8\"], \"s\") == [\n    \"step 1\", \"step 2\", \"step 3\", \"step 4\", \"step 5\", \"step 6\", \"step 7\", \"step 8\"]\nassert     filter_by_prefix([\"step 1\", \"step 2\", \"step 3\", \"step 4\", \"step 5\", \"step 6\", \"step 7\", \"step 8\", \"step 9\", \"step 10\", \"step 11\", \"step 12\", \"step 13\", \"step 14\", \"step 15\", \"step 16\", \"step 17\", \"step 18\", \"step 19\", \"step 20\", \"step 21\", \"step 22\", \"step 23\", \"step 24\", \"step 25\", \"step 26\", \"step 27\", \"step 28\", \"step 29\", \"step 30\", \"step 31\", \"step 32\", \"step 33\", \"step 34\", \"step 35\", \"step 36\", \"step 37\", \"step 38\", \"step 39\", \"step 40\", \"step 41\", \"step 42\", \"step 43\", \"step 44\", \"step 45\", \"step 46\", \"step 47\", \"step 48\", \"step 49\", \"step 50\", \"step 51\", \"step 52\", \"step 53\", \"step 54\", \"step 55\", \"step 56\", \"step 57\", \"step 58\", \"step 59\", \"step 60\", \"step 61\", \"step 62\", \"step 63\", \"step 64\", \"step 65\", \"step 66\", \"step 67\", \"step 68\", \"step 69\", \"step 70\", \"step 71\", \"step 72\", \"step 73\", \"step 74\", \"step 75\", \"step 76\", \"step 77\", \"step 78\", \"step 79\", \"step 80\", \"step 81\", \"step 82\", \"step 83\", \"step 84\", \"step 85\", \"step 86\", \"step 87\", \"step 88\", \"step 89\", \"step 90\", \"step 91\", \"step 92\", \"step 93\", \"step 94\", \"step 95\", \"step 96\", \"step 97\", \"step 98\", \"step 99\", \"step 100\", \"step 101\", \"step 102\", \"step 103\", \"step 104\", \"step 105\", \"step 106\", \"step 107\", \"step 108\", \"step 109\", \"step 110\", \"step 111\", \"step 112\", \"step 113\", \"step 114\", \"step 115\", \"step 116\", \"step 117\", \"step 118\", \"step 119\", \"step 120\", \"step 121\", \"step 122\", \"step 123\", \"step 124\", \"step 125\", \"step 126\", \"step 127\", \"step 128\", \"step 129\", \"step 130\", \"step 131\", \"step 132\", \"step 133\", \"step 134\", \"step 135\", \"step 136\", \"step 137\", \"step 138\", \"step 139\", \"step 140\", \"step 141\", \"step 142\", \"step 143\", \"step 144\", \"step 145\", \"step 146\", \"step 147\", \"step 148\", \"step 149\", \"step 150\", \"step 151\", \"step 152\", \"step 153\", \"step 154\", \"step 155\", \"step 156\", \"step 157\", \"step 158\", \"step 159\", \"step 160\", \"step 161\", \"step 162\", \"step 163\", \"step 164\", \"step 165\", \"step 166\", \"step 167\", \"step 168\", \"step 169\", \"step 170\", \"step 171\", \"step 172\", \"step 173\", \"step 174\", \"step 175\", \"step 176\", \"step 177\", \"step 178\", \"step 179\", \"step 180\", \"step 181\", \"step 182\", \"step 183\", \"step 184\", \"step 185\", \"step 186\", \"step 187\", \"step 188\", \"step 189\", \"step 190\", \"step 191\", "
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"test\", \"test1\", \"test2\", \"test3\"], \"test\") == [\"test\"]\nassert     filter_by_prefix([\"test\", \"test1\", \"test2\", \"test3\"], \"\") == []\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     get_positive([]) == []\nassert     get_positive([]) == []\nassert     get_positive([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     get_positive([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     get_positive([1,2,3,4,5]) == [1,2,3,4,5], \"should return [1,2,3,4,5]\"\nassert     get_positive([\"hello\", \"hello\", \"world\", \"hello\", \"hello\"]) == [\"hello\", \"hello\", \"world\", \"hello\", \"hello\"], \"should return [hello, hello, world, hello, hello]\"\nassert     get_positive([1,2,3,4,5,7]) == [1,2,3,4,5,7], \"should return [1,2,3,4,5,7]\"\nassert     get_positive([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"], \"should return [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]\"\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     get_positive([1,1,2,3,5]) == [1,3,5]\nassert     get_positive([1,3,5,7,2]) == [1,3,5,7,2]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([1,2,3]) == [1,2,3]\nassert     get_positive([1,2,3,4]) == [1,2,3,4]\nassert     get_positive([1,2,3,4,5]) == [1,2,3,4,5]\nassert     get_positive([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     get_positive(list(range(10))) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     get_positive(['zero', 'two', 'three', 'four', 'five']) == ['zero', 'two', 'three', 'four', 'five']\nassert     get_positive(['three', 'four']) == ['three', 'four']\nassert     get_positive(['two', 'three', 'four']) == ['two', 'three', 'four']\nassert     get_positive(['one', 'three', 'four']) == ['one', 'three', 'four']\nassert     get_positive(['zero', 'one', 'two', 'three', 'four']) == ['zero', 'one', 'two', 'three', 'four']\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     get_positive(get_positive([1, 2, 3, 4])) == [1, 2, 3, 4],'should be [1, 2, 3, 4]'\nassert     get_positive(get_positive([1, -1, 4, 3, 0])) == [0, -1, 3, 4, 0],'should be [0, -1, 4, 3, 0]'\nassert     get_positive(get_positive([1, 2, 3, 4, 0])) == [1, 2, 3, 4],'should be [1, 2, 3, 4]'\nassert     get_positive(get_positive([1, 0, 0, 0])) == [0, 0, 0, 0],'should be [0, 0, 0, 0]'\nassert     get_positive(get_positive([-1, -1, 0, -2, -3])) == [0, 0, -2, -3],'should be [0, 0, -2, -3]'\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     get_positive([1, 2, 3]) == [1, 2, 3]\nassert     get_positive([4, 5, 6, 7, 8]) == [4, 5, 6, 7, 8]\nassert     get_positive([0, -1, 2, -3, 0]) == [0, -1, 2, -3, 0]\nassert     get_positive([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == True\nassert     is_prime(5) == True\nassert     is_prime(7) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_prime(2)\nassert     not is_prime(3)\nassert     is_prime(4)\nassert     not is_prime(5)\nassert     not is_prime(6)\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_prime(12) == False\nassert     is_prime(3) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_prime(2)\nassert     not is_prime(3)\nassert     is_prime(5)\nassert     not is_prime(10)\nassert     is_prime(13)\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_prime(1) == True\nassert is_prime(0) == True\nassert is_prime(2) == True\nassert is_prime(5) == True\nassert is_prime(10) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_prime(3) == True\nassert     is_prime(2) == True\nassert     is_prime(1) == True\nassert     is_prime(0) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_prime(7) == False\nassert     is_prime(3) == True\nassert     is_prime(2) == True\nassert     is_prime(3) == False\nassert     is_prime(4) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_prime(10) == True\nassert     is_prime(11) == True\nassert     is_prime(19) == False\nassert     is_prime(100) == True\nassert     is_prime(90) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_prime(3) == True\nassert     is_prime(4) == True\nassert     is_prime(5) == False\nassert     is_prime(7) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_prime(1) == True\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == True\nassert     is_prime(5) == True\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     find_zero([1, 1, 1]) == 0\nassert     find_zero([1, 1, 1, 1, 1, 0, 1]) == 1\n\nxs = [2, 0, 1]\nprint(find_zero(xs))\n\nxs = [2, 0, 1, 2, 3]\nprint(find_zero(xs))\n\nxs = [2, 0, 1, 2, 3, 4, 5]\nprint(find_zero(xs))\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     find_zero([1, 1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     find_zero([1, 1, 2, 3, 1, 2, 3, 1, 2]) == 0\nassert     find_zero([1, 1, 2, 3, 1, 2, 3, 1, 2, 1, 3]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     find_zero([1, 2, 3]) == 0\nassert     find_zero([2, 2]) == 1\nassert     find_zero([3, 1, 4]) == 2\nassert     find_zero([2, 3, 4]) == 3\nassert     find_zero([]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.00000000000001\nassert     find_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.00000000000001\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     find_zero([1, 2, 3]) == 0\nassert     find_zero([2, 0, 3]) == 0\nassert     find_zero([0, 1, 3]) == 0\nassert     find_zero([0, 0, 0]) == 0\nassert     find_zero([3, 0, 2]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     find_zero([1, 2, 3]) == 2\nassert     find_zero([0]) == 0\nassert     find_zero([1, 1, 1, 1]) == 1\nassert     find_zero([0, 0, 0]) == 0\nassert     find_zero([1, 0, 1, 0, 1]) == 0\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     find_zero(list(range(100))) == 0\nassert     find_zero([]) == 0\nassert     find_zero([1]) == 1\nassert     find_zero([1,2]) == 3\nassert     find_zero([2,3,5]) == 8\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     find_zero([1,1,1,1])\nassert     find_zero([1,0,1,1,1])\nassert     find_zero([1,0,1,1,1,0])\nassert     find_zero([1,0,1,1,1,0,1])\nassert     find_zero([1,0,1,1,1,0,1,0,0,1,1])\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     find_zero([1, 2, 3, 4, 5, 6, 7]) == math.sqrt(24)\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     find_zero([1,1,0]) == 0\nassert     find_zero([0,1,1]) == 0\nassert     find_zero([0,2,0]) == 0\nassert     find_zero([0,0,1]) == 0\nassert     find_zero([1,0,1]) == 0\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_third([\"a\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]\nassert     sort_third([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]) == [\"a\",\"g\",\"e\",\"b\",\"c\",\"f\",\"d\"]\nassert     sort_third([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]) == [\"a\",\"g\",\"h\",\"b\",\"c\",\"d\",\"e\",\"f\"]\nassert sort_third([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"]) == [\"a\",\"b\",\"h\",\"c\",\"g\",\"e\",\"f\",\"i\"]\nassert sort_third([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"]) == [\"a\",\"b\",\"h\",\"i\",\"c\",\"g\",\"e\",\"f\"]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_third([1,2,3,4,5]) == [2,3,4,5,1]\nassert     sort_third([3,2,1,3,5]) == [1,2,3,5,3]\nassert     sort_third([1,2,3,5,4]) == [1,2,3,5,4]\nassert     sort_third([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_third([1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_third([4, 5, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert         sort_third([3, 6, 8, 4, 2]) == [2, 3, 4, 5, 6]\nassert         sort_third([4, 6, 8, 2, 3]) == [2, 3, 4, 5, 6]\nassert         sort_third([4, 5, 6, 8, 2]) == [2, 3, 4, 5, 6]\nassert         sort_third([4, 5, 6, 8]) == [2, 3, 4, 5]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sort_third([1,2,3]) == [3,2,1]\nassert     sort_third([2,3,1]) == [1,2,3]\nassert     sort_third([3,2,1]) == [1,2,3]\nassert     sort_third([4,2,3]) == [3,2,4]\nassert     sort_third([1,2,4]) == [1,2,4]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sort_third([3, 7, 3, 8, 5, 7]) == [3, 5, 7, 8, 7, 3]\nassert     sort_third([2, 4, 5, 9, 7, 2, 3, 2]) == [2, 3, 2, 3, 5, 7, 9, 2]\nassert     sort_third([3, 2, 7, 7, 7, 5, 5, 9, 9]) == [2, 3, 5, 7, 7, 5, 7, 9, 9]\nassert     sort_third([3, 2, 7, 7, 5, 5, 9, 9, 9]) == [2, 3, 5, 7, 5, 5, 7, 9, 9]\nassert     sort_third([9, 9, 3, 2, 2, 7, 7, 7, 7, 7]) == [9, 9, 7, 7, 7, 7, 7, 7, 7]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_third([]) == []\nassert     sort_third([1]) == [1]\nassert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sort_third([1, 4, 5, 9, 10, 12, 18]) == [1, 4, 5, 10, 12, 18, 9]\nassert     sort_third([2, 4, 6, 9, 10, 12, 18]) == [2, 4, 6, 9, 10, 12, 18]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sort_third(l) == l, f'The first function sort_third() returns a {l}'\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_third(['1', '3', '5', '7', '9', '10']) == ['1', '3', '5', '7', '9', '10'], 'The value of sort_third should return a list of strings containing only the indicies that are divisible by 3, whereas the values at the indicies that are divisible by 3 are not equal to the values of the corresponding indicies of l'.'\nassert     sort_third([]) == [], 'The value of sort_third should return an empty list, whereas the values at the indicies of l' are not equal to any value of l.'\nassert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'The value of sort_third should return a list of strings containing only the indicies that are divisible by 3, whereas the values at the indicies that are divisible by 3 are not equal to the values of the corresponding indicies of l'.'\nassert     sort_third([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], 'The value of sort_third should return a list of strings containing only the indicies that are divisible by 3, whereas the values at the indicies that are divisible by 3 are not equal to the values of the corresponding indicies of l'.'\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'The value of sort_third should return a list of strings containing only the indicies that are divisible by 3, whereas the values at the indicies that are divisible by 3 are not equal to the values of the corresponding indicies of l'.'\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         sort_third([1,3,2,2,4,3,5]) == [3,2,1,4,5,3,2]\nassert         sort_third([9,3,1,3,2,3,2,1,5,4]) == [3,2,1,4,5,3,2,1,5,4]\nassert         sort_third([3,2,4,3,2,1,2,5,6,1]) == [1,2,3,4,5,6,7,8,9,3]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     unique([1, 1, 2, 2, 1, 2, 1, 1, 1, 2, 2, 3, 3, 4, 4]) == [1, 2, 3, 4, 4, 3, 1, 2, 1]\nassert     unique([1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2]) == [1, 2, 1, 1, 2, 1]\nassert     unique([1, 2, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2]) == [1, 2, 2, 1, 2, 1]\nassert     unique([1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2]) == [1, 1, 2, 2, 2, 1, 2, 1]\nassert     unique([1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 2, 2]) == [1, 1, 2, 2, 2, 1, 2]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     unique([1,2,3,4,1,2,3,4,1,2,3,4]) == [1,2,3,4]\nassert     unique([1,2,3,4,1,2,3,4,1,2,3,4,1]) == [1,2,3,4]\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     unique([1, 2, 2, 3, 3, 3, 2, 1, 2]) == [1, 2, 3, 3, 2, 1]\nassert     unique([1, 1, 2, 2, 2, 2, 3, 3, 3]) == [1, 1, 2, 2, 3, 3]\nassert     unique([1, 1, 2, 3, 3, 2, 1, 2, 3, 3]) == [1, 1, 2, 3, 2, 3, 3]\nassert     unique([1, 1, 2, 2, 2, 3, 3, 3, 3]) == [1, 1, 2, 2, 3, 3]\nassert     unique([]) == []\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     unique(['a', 'a', 'a', 'b', 'b', 'b', 'c']) == [], \"Test 1 FAILED\"\n\ndef unique2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         unique([1,2,3,3,4,4,5,6]) == [1,2,3,4,5,6]\nassert         unique([1,2,3,3,4,4,5,5,5]) == [1,2,3,4,5]\nassert         unique([1,2,2,3,2,3,2,3,2]) == [1,2,2,3,3]\nassert         unique([1,2,3,4,5]) == [1,2,3,4,5]\n\ndef sort(l: list):\n    \"\"\"Sort a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     unique([\"c\", \"a\", \"a\", \"d\", \"b\"]) == [\"a\", \"b\", \"c\"], \"Wrong unique elements\"\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     unique(['apple', 'bacon', 'echo', 'Kale', 'banana', 'bar']) == ['banana', 'bacon', 'echo', 'Kale']\nassert     unique(['apple', 'bacon', 'echo', 'Kale', 'banana', 'bar']) == ['bar', 'bacon', 'Kale', 'apple']\nassert     unique(['apple', 'bacon', 'echo', 'Kale', 'banana', 'bar']) == ['bar', 'bacon', 'Kale', 'echo']\nassert     unique(['apple', 'bacon', 'echo', 'Kale', 'banana', 'bar']) == ['bar', 'bacon', 'Kale', 'bar']\nassert     unique(['apple', 'bacon', 'echo', 'Kale', 'banana', 'bar']) == ['bar', 'bacon', 'Kale', 'bacon']\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     unique([]) == []\nassert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique([]) == []\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     unique(['a','b','c','a','b','b','a','a','b','c']) == ['a','a','b','c','b','b','c','c','a'], 'unique()'\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([5, 4, 3, 2, 1]) == 5\nassert     max_element([2, 3, 4, 5, 6]) == 6\nassert     max_element([1, 2, 3, 5, 4]) == 5\nassert     max_element([1, 3, 5, 4, 2]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     max_element([-1,1,2,-2,3,4,-1]) == -1\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     max_element([5, 9, 7, 4, 2, 1, 6, 10]) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3,4,4,3,2,1]) == 4\nassert     max_element([1,2,3,3,1]) == 1\nassert     max_element([1,1,2,3,4]) == 2\nassert     max_element([1,1,1,1,1]) == 1\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     max_element(list(range(1, 5))) == 1\nassert     max_element(list(range(1, 6))) == 3\nassert     max_element(list(range(1, 7))) == 5\nassert     max_element(list(range(1, 8))) == 7\nassert     max_element(list(range(1, 9))) == 9\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     max_element([1,2,3,4]) == 3\nassert     max_element([1,2,3,4,5,6]) == 5\nassert     max_element([1,2,3,4,5,6,7]) == 7\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     max_element(\n    [\n        [1, 2, 3],\n        [1, 2, 5],\n        [2, 5, 5]\n    ]\n) == 5\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     max_element([\"a\",\"b\",\"c\",\"d\"]) == \"d\"\nassert     max_element([\"a\",\"b\",\"c\",\"d\"]) == \"c\"\nassert     max_element([\"a\",\"b\",\"c\",\"d\"]) == \"a\"\nassert     max_element([\"a\",\"b\",\"c\"]) == \"b\"\nassert     max_element([\"a\",\"b\"]) == \"b\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         max_element([1,2,3,4,5,6]) == 5\nassert         max_element([1,2,3,5,6]) == 5\nassert         max_element([1,2,3,4,5,6,7]) == 7\nassert         max_element([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 12\nassert         max_element([]) == None\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     fizz_buzz(3) == 3\nassert     fizz_buzz(9) == 6\nassert     fizz_buzz(50) == 50\nassert     fizz_buzz(90) == 99\nassert     fizz_buzz(999) == 999\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fizz_buzz(5) == 5, \"fizz_buzz(5)\"\nassert     fizz_buzz(1) == 1, \"fizz_buzz(1)\"\nassert     fizz_buzz(9) == 9, \"fizz_buzz(9)\"\nassert     fizz_buzz(12345) == 12345, \"fizz_buzz(12345)\"\nassert     fizz_buzz(90) == 90, \"fizz_buzz(90)\"\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fizz_buzz(5) == 3\nassert     fizz_buzz(7) == 0\nassert     fizz_buzz(1) == 0\nassert     fizz_buzz(15) == 0\nassert     fizz_buzz(5) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     fizz_buzz(0) == 1\nassert     fizz_buzz(1) == 0\nassert     fizz_buzz(2) == 0\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(4) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\ndef fizz_buzz_example_1(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     fizz_buzz(3) == 2\nassert     fizz_buzz(5) == 3\nassert     fizz_buzz(7) == 1\nassert     fizz_buzz(11) == 1\nassert     fizz_buzz(15) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fizz_buzz(2) == 1\nassert     fizz_buzz(3) == 3\nassert     fizz_buzz(4) == 4\nassert     fizz_buzz(5) == 5\nassert     fizz_buzz(6) == 6\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fizz_buzz(0) == 1\nassert     fizz_buzz(1) == 1\nassert     fizz_buzz(2) == 2\nassert     fizz_buzz(3) == 1\nassert     fizz_buzz(4) == 3\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fizz_buzz(1) == 0\nassert     fizz_buzz(2) == 1\nassert     fizz_buzz(3) == 2\nassert     fizz_buzz(4) == 1\nassert     fizz_buzz(6) == 3\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_even([1, 5, 3, 8, 9, 10, 12, 1, 4, 7, 9, 8, 10, 5, 6, 9, 12, 11]) == [1, 3, 5, 7, 10, 9, 4, 6, 8, 12, 11, 10, 5, 1, 9, 12, 11]"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_even(l) == l\nassert     sort_even([1,2,3,4,5,6,7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     sort_even(l[:4]) == l[:4]\nassert     sort_even([]) == []\nassert     sort_even([1,2,3]) == [1, 2, 3]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_even([3, 4, 1, 2]) == [1, 2, 3, 4]\nassert     sort_even([5, 3, 4, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_even([5, 3, 4, 2, 1, 0]) == [1, 2, 3, 4, 5, 0]\nassert     sort_even([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sort_even([1,5,7,2,3,1,4,6]) == [1,2,3,4,5,6,7,1]\nassert     sort_even([1,1,2,4]) == [1,1,2,4]\nassert     sort_even([1,2,3,4]) == [1,2,3,4]\nassert     sort_even([1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sort_even([1, 5, 2, 3, 5, 7, 9]) == [5, 7, 2, 3, 5, 9, 1]\nassert     sort_even([1, 3, 7, 5, 2, 9]) == [1, 5, 2, 3, 7, 9]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sort_even([1, 2, 5, 3, 4, 2, 5, 6]) == [2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_even([1, 2, 5, 3, 4, 2, 5, 6, 7, 8, 9, 10]) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_even([1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_even([1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([2,4,6]) == [2,4,6]\nassert     sort_even([1,6,5,2,3]) == [1,2,3,6,5]\nassert     sort_even([1,6,5,2,3,1,7,4,8,5]) == [1,2,3,6,5,7,4,8,5]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_even(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine']) == ['two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'one']\nassert     sort_even(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten']) == ['three','six','seven', 'eight', 'nine', 'ten', 'four', 'five', 'two', 'one']\nassert     sort_even(['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten']) == ['one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten']\nassert sort_even([]) == []\nassert sort_even([2,3,4]) == [2,3,4]\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sort_even([1,2,3]) == [3,2,1]\nassert     sort_even([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_even([3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef decodestring(s: str) -> str:\n    \"\"\"\n    returns string from a string encoded with encode_cyclic function.\n    \"\"\"\n    return encode_cyclic(s)\n\n\ndef main():\n    print(\"encoded =\", encode_cyclic(\"abcd\"))\n    print(\"decoded =\", decode_cyclic(\"abcd\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     decode_cyclic(\"xxxxx\") == \"xxxxx\"\nassert     decode_cyclic(\"xxxx\") == \"xxxxx\"\nassert     decode_cyclic(\"x\") == \"x\"\nassert     decode_cyclic(\"xx\") == \"xx\"\nassert     decode_cyclic(\"\") == \"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         decode_cyclic('aabb') == 'ababa'\nassert         decode_cyclic('ababa') == 'aabba'\nassert         decode_cyclic('abaca') == 'aacac'\nassert         decode_cyclic('aaa') == 'aaa'\nassert         decode_cyclic('a') == 'a'\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     decode_cyclic('bccb') == 'c'\nassert     decode_cyclic('ccc') == 'c'\nassert     decode_cyclic('dccc') == 'c'\nassert     decode_cyclic('ccbcc') == 'c'\nassert     decode_cyclic('ccbb') == 'c'\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         decode_cyclic(\"abcd\") == \"defghijklmnopqrstuvwxyz\"\nassert         decode_cyclic(\"abcdefghijklmnopqrstuvwxyz\") == \"abcd\"\nassert         decode_cyclic(\"abcdefghijklmnopqrstuvwxyzghijklmnopqrstuvwxyz\") == \"defghijklmnopqrstuvwxyzghijklmnopqrstuvwxyz\"\nassert         decode_cyclic(\"abcdefghijklmnopqrstuvwxyzghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyzghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     check(encode_cyclic(\"abcdefghi\")) == \"hi\"\nassert     check(encode_cyclic(\"x\")) == \"x\"\nassert     check(encode_cyclic(\"abcd\")) == \"cd\"\nassert     check(encode_cyclic(\"abc\")) == \"abc\"\nassert     check(encode_cyclic(\"abcdefghi\")) == \"hi\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         (decode_cyclic('abc')) == 'cab'\nassert         (decode_cyclic('cac')) == 'caa'\nassert         (decode_cyclic('cba')) == 'cabc'\nassert         (decode_cyclic('cab')) == 'cba'\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcdefg\")) == \"dgcdkfikbvax\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     decode_cyclic('9abc123') == '123abc'\nassert     decode_cyclic('9abc12345') == '123abc45'\nassert     decode_cyclic('9abc123456789') == '123abc456789'\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     decode_cyclic(encoded) == 'bcaab'\nassert     decode_cyclic(decoded) == 'ab'\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     prime_fib(10) == 55\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     prime_fib(6) == 7\nassert     prime_fib(8) == 6\nassert     prime_fib(10) == 16\nassert     prime_fib(20) == 68\nassert     prime_fib(24) == 97\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     prime_fib(2) == 2\nassert     prime_fib(3) == 3\nassert     prime_fib(4) == 4\nassert     prime_fib(5) == 5\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     prime_fib(1) == 0\nassert     prime_fib(2) == 1\nassert     prime_fib(3) == 2\nassert     prime_fib(4) == 3\nassert     prime_fib(5) == 5\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     prime_fib(0) == 0\nassert     prime_fib(1) == 1\nassert     prime_fib(2) == 2\nassert     prime_fib(3) == 3\nassert     prime_fib(4) == 5\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     prime_fib(1) == 0\nassert prime_fib(10) == 2\nassert prime_fib(100) == 8\nassert prime_fib(1000) == 16\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     prime_fib(1) == 0\nassert     prime_fib(3) == 0\nassert     prime_fib(10) == 0\nassert     prime_fib(10) == 1\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     prime_fib(2) == 0\nassert prime_fib(4) == 0\nassert prime_fib(6) == 1\nassert prime_fib(8) == 0\nassert prime_fib(9) == 1\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, 4, 6]) == True\nassert     triples_sum_to_zero([5, 5, 5]) == False\nassert     triples_sum_to_zero([0, 0, 0]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([1, 2, 3]) == True\nassert     triples_sum_to_zero([-2, -4, -2]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0, 0, 0]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0, 0, 0]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([]), \"no triples sum to zero\"\nassert     triples_sum_to_zero([3,4,5]), \"no triple sum to zero\"\nassert     triples_sum_to_zero([3,3,3]), \"no triple sum to zero\"\nassert     triples_sum_to_zero([-4, -4, -4]), \"no triple sum to zero\"\nassert     triples_sum_to_zero([-3, -4, -5]), \"no triple sum to zero\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([1,3,5]) == True, \"TriplesSumToZero: List should not contain any zeros\"\nassert     triples_sum_to_zero([0,0,0]) == False, \"TriplesSumToZero: zeros are the only numbers that sum to zero\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([1, 0, 3, -2, -5, -2, 4]) is True, 'Triples_sum_to_zero'\nassert     triples_sum_to_zero([1, 0, -2, -5, -2, 4]) is False, 'Triples_sum_to_zero'\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero(\n[0, 0, 0, 0, 1, 1, 2, 3, 3, 5, 5, 5, 7, 7, 8, 8, 10, 10, 10])\nassert triples_sum_to_zero([3, 4, 5, 6]) == True\nassert triples_sum_to_zero([6, 7, 8, 10]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([]), 'triples_sum_to_zero should not return []'\nassert     triples_sum_to_zero([1, 2, 3, 4]) == True, 'triples_sum_to_zero should return True'\nassert     triples_sum_to_zero([1, 2, 0, 4]) == False, 'triples_sum_to_zero should return False'\nassert     triples_sum_to_zero([4, 1, 3, 0]) == False, 'triples_sum_to_zero should return False'\nassert     triples_sum_to_zero([1, 2, 0, 0, 2, 1, 0, 0]) == True, 'triples_sum_to_zero should return True'\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, 1]) == True\nassert     triples_sum_to_zero([-1, 0, -3, 4]) == True\nassert     triples_sum_to_zero([-2, 3, -3, 5]) == False\nassert     triples_sum_to_zero([-1, 3, -2, 2]) == True\nassert     triples_sum_to_zero([]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([1, 2, 1, 1, 0]) == True\nassert     triples_sum_to_zero([2, 1, 1, 1, 2]) == True\nassert     triples_sum_to_zero([3, 1, 1, 1, 0, 1, 2, 1]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0, 0, 2, 1, 2]) == True\n\ndef triples_sum_to_zero_list(l: list):\n    \"\"\"\n    triples_sum_to_zero_list takes a list of integers as an input.\n    it returns a list of integers (or None if the list is empty)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([]) == True\nassert     triples_sum_to_zero([1]) == False\nassert     triples_sum_to_zero([2, 3, 4, 5]) == True\n\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     car_race_collision(10) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     car_race_collision(5) == 3\nassert     car_race_collision(10) == 2\nassert     car_race_collision(12) == 2\nassert     car_race_collision(5) == 0\nassert     car_race_collision(6) == 0\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     (car_race_collision(3) == 3)\nassert     (car_race_collision(3) == 2)\nassert     (car_race_collision(3) == 1)\nassert     (car_race_collision(1) == 1)\nassert     (car_race_collision(2) == 1)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     car_race_collision(4) == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     car_race_collision(3) == 1\nassert car_race_collision(4) == 0\n\ndef car_race_collision_detailed(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue\n    moving in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     car_race_collision(3) == 0\nassert car_race_collision(7) == 1\nassert car_race_collision(6) == 0\nassert car_race_collision(5) == 0\nassert car_race_collision(4) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     car_race_collision(2) == 2\nassert     car_race_collision(3) == 0\nassert     car_race_collision(3) == 2\nassert     car_race_collision(3) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 1\nassert     car_race_collision(7) == 4\nassert     car_race_collision(4) == 1\nassert     car_race_collision(3) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     car_race_collision(5) == 2, \"car_race_collision() failed\"\nassert     car_race_collision(6) == 3, \"car_race_collision() failed\"\nassert     car_race_collision(8) == 0, \"car_race_collision() failed\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     car_race_collision(3) == 0\nassert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 2\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([5, 10, 15, 20, 25]) == [10, 15, 20, 25, 30]\nassert     incr_list([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]\nassert     incr_list([]) == []\nassert     incr_list([1, 2, 3]) == [3, 3, 3]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     incr_list([]) == []\nassert incr_list([1]) == [1]\nassert incr_list([1, 2, 3, 4]) == [1, 3, 6, 10]\nassert incr_list([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]\nassert incr_list([1, 2, 3, 4, 5, 6]) == [1, 3, 6, 10, 15, 20]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert ival == incr_list(ival)\nassert ival == incr_list([1,2,3])\nassert ival == incr_list([1,2,3,4,5])\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     incr_list([1,2,3]) == [1,2,4]\nassert     incr_list([1,2,3,4,5]) == [1,3,6,9,12]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef ret_list(l: list):\n    \"\"\"Return list with elements returned by incr_list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     incr_list([1, 2, 3]) == [1, 2, 4]\nassert     incr_list([1, 2, 3, 4]) == [1, 3, 6, 10]\nassert     incr_list([]) == []\nassert     incr_list([]) == []\nassert     incr_list(None) == []\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         incr_list([1,2,3]) == [1,2,4]\nassert         incr_list([1,2]) == [1,3]\nassert         incr_list([]) == []\nassert         incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99])\nassert         incr_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99])\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     incr_list([1,2,3,4,5,6]) == [2, 3, 4, 5, 6, 7]\nassert     incr_list([1,2,3,4,5,6]) == [1, 3, 6, 10, 15, 21]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [1]\nassert     incr_list([1,2,3]) == [1,2,3,4]\nassert     incr_list([1,2,3,4,5]) == [1,2,3,4,5,6]\nassert     incr_list([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,5]) == True\nassert     pairs_sum_to_zero([0,3,0,1,2]) == True\nassert     pairs_sum_to_zero([-2,3,-2,4,-3]) == False\nassert     pairs_sum_to_zero([1,1,1,1,0]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([]), \"pairs_sum_to_zero does not return correct output\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([0,0,1,2,2,3,3,4]) is True\nassert     pairs_sum_to_zero([0,1,2,3,4,5,6,7,8,9,0]) is True\nassert     pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,0]) is True\nassert     pairs_sum_to_zero([1,1,2,3,4,5,6,7,8,9,0]) is True\nassert     pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,0]) is False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     pairs_sum_to_zero(\n    [0, 0, 0, -1, 2, 0, 5, -1, 10, 2, -3, 6]) == True, \"Checked correct pairs sum\""
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([]) == (False, 0)\nassert pairs_sum_to_zero([0, 1, 2, 4, 5, 6, 8, 10, 11, 12]) == (True, 13)\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([]) == False, 'Uncorrect test!'\nassert     pairs_sum_to_zero([-2, 1, -1, 0, 0, 5, 0]) == True, 'Uncorrect test!'\nassert     pairs_sum_to_zero([1, 2, 3, -4, 0, 0, 0, 0]) == True, 'Uncorrect test!'\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([1,2,3,4,5,6,7,8,9,10]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([-1,0]) == False\nassert     pairs_sum_to_zero([-2,0]) == False\nassert     pairs_sum_to_zero([0, -2]) == True\nassert     pairs_sum_to_zero([0, 1, 2, 3, 4]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([1, 2, 4, 5]) == True\nassert     pairs_sum_to_zero([1, 1, 3]) == True\nassert     pairs_sum_to_zero([1, 2, 3, 1]) == False\nassert     pairs_sum_to_zero([3, 3, 2, 5]) == True\nassert     pairs_sum_to_zero([5, 1, 4, 3, 2]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([3,1,5]) == True\nassert pairs_sum_to_zero([1,2,3,4]) == False\nassert pairs_sum_to_zero([-1,0,1,2,3]) == True\nassert pairs_sum_to_zero([0,1,2,3,4]) == False\nassert pairs_sum_to_zero([5,4,3,2,1]) == False"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     change_base(10, 3) == \"0b111\"\nassert     change_base(11, 2) == \"0b1\"\nassert     change_base(12, 1) == \"0b1\"\nassert     change_base(13, 0) == \"0b0\"\nassert     change_base(14, -1) == \"0b0\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     change_base(5, 7) == \"50\"\nassert     change_base(1, 10) == \"1\"\nassert     change_base(1, 8) == \"0\"\n\ndef binary_convert(x: int):\n    \"\"\"Convert binary number x to its corresponding decimal number.\n    return string representation of the number as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     change_base(30, 10) == \"2\"\nassert     change_base(5, 10) == \"5\"\nassert     change_base(4, 10) == \"4\"\nassert     change_base(7, 10) == \"7\"\nassert     change_base(5, 10) == \"5\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     change_base(1, 10) == \"1\"\nassert     change_base(10, 10) == \"1\"\nassert     change_base(100, 10) == \"100\"\nassert     change_base(5, 10) == \"5\"\nassert     change_base(6, 10) == \"6\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     change_base(2, 2) == '4'\nassert change_base(2, 5) == '10'\nassert change_base(2, 10) == '16'\nassert change_base(10, 2) == '16'\nassert change_base(10, 5) == '50'\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     change_base(2, 10) == '001'\nassert     change_base(3, 10) == '101'\nassert     change_base(4, 10) == '1011'\nassert     change_base(8, 10) == '1001'\nassert     change_base(9, 10) == '1001'\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     change_base(9, 10) == '9', 'base 9 is correct'\nassert     change_base(9, 8) == '8', 'base 9 is correct'\nassert     change_base(9, 7) == '7', 'base 9 is correct'\nassert     change_base(9, 6) == '6', 'base 9 is correct'\nassert     change_base(9, 5) == '5', 'base 9 is correct'\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     change_base(3, 5) == \"50\"\nassert     change_base(9, 3) == \"3\"\nassert     change_base(2, 4) == \"2\"\nassert     change_base(3, 2) == \"3\"\nassert     change_base(123, 4) == \"1243\""
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     change_base(9, 6) == '0o6'\nassert     change_base(9, 0) == '9'\nassert     change_base(10, 0) == '0'\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     change_base(123, 1) == \"1\"\nassert     change_base(123, 2) == \"2\"\nassert     change_base(123, 3) == \"3\"\nassert     change_base(123, 4) == \"4\"\nassert     change_base(123, 5) == \"5\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     triangle_area(4, 4) == 12, \"triangle_area(4, 4) is incorrect\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     triangle_area(2,2) == 4\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     triangle_area(10, 10) == 100\nassert     triangle_area(20, 10) == 200\n\ndef triangle_area_inverse(a, h):\n    \"\"\"Given length and high return area for a triangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     triangle_area(2, 2) == 12, \"triangle_area(2, 2) should be 12\"\nassert     triangle_area(0, 0) == 0, \"triangle_area(0, 0) should be 0\"\nassert triangle_area(1, 2) == 3, \"triangle_area(1, 2) should be 3\"\nassert triangle_area(4, 4) == 12, \"triangle_area(4, 4) should be 12\"\nassert triangle_area(3, 3) == 7, \"triangle_area(3, 3) should be 7\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     triangle_area(5,4) == 20.0\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     triangle_area(3, 4) == "
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     triangle_area(0, 0) == 0\nassert triangle_area(10, 0) == 0\nassert triangle_area(20, 0) == 0\nassert triangle_area(10, 10) == 100\nassert triangle_area(20, 10) == 200\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         triangle_area(1,1) == 0\nassert         triangle_area(1,2) == 0.5\nassert         triangle_area(2,2) == 1.0\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         triangle_area(3, 4) == 12, 'Triangle area does not match'\nassert         triangle_area(10, 5) == 55, 'Triangle area does not match'\nassert         triangle_area(3.14, 8.8) == 66.0, 'Triangle area does not match'\n\ndef fibonacci_recursive(n):\n    \"\"\"\n    :param n: starting number\n    :return: the number of the nth fibonacci number\n    \"\"\"\n    pass\n\ndef fibonacci_iterative(n):\n    \"\"\"\n    :param n: starting number\n    :return: the number of the nth fibonacci number\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     triangle_area(2, 3) == 1\nassert     triangle_area(3, 3) == 6\nassert     triangle_area(4, 4) == 12\nassert     triangle_area(5, 5) == 25\nassert     triangle_area(6, 6) == 36\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 1\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 4\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     isinstance(fib4(10), int)\nassert fib4(10) == 10\n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(4) -> 1\n    fib5(5) -> 2\n    fib5(6) -> 3\n    fib5(7) -> 4\n    fib5(8) -> 5\n    fib5(9) -> 6\n    fib5(10) -> 7\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 1\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == "
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     fib4(5) == 0\nassert     fib4(4) == 2\nassert     fib4(3) == 3\nassert     fib4(2) == 1\nassert     fib4(1) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 1\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 4\nassert     fib4(5) == 15\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fib4(4) == 3\nassert     fib4(5) == 2\nassert     fib4(6) == 0\nassert     fib4(7) == 2\nassert     fib4(8) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 1\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 5\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     median([1,2,3]) == 2\nassert     median([4,5,6]) == 2\nassert     median([1,2,3,4,5,6]) == 2\nassert     median([]) == None\nassert     median([1]) == None\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     median([]), \"empty list\"\nassert     median([1, 2, 3, 4, 5]) == 3.5\nassert     median([6, 5, 4, 3, 2, 1]) == 2.5\nassert     median([7, 8, 9, 10]) == 9.5\nassert     median([]) == None\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     median([10, 20, 30, 40, 50]) == 5\nassert     median([10, 20, 30, 40, 50]) == 10\nassert     median([-10, -20, -30, -40, -50]) == -10\nassert     median([1, 2, 3, 4, 5]) == 1.5\nassert     median([10, 20, 30, 40, 50, 60, 70, 80]) == 60\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     median([1,2,3,4,5,6]) == 4\nassert median([1,2,3,4,5,6,7,8,9]) == 4\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     median(['1', '3', '2', '4', '5']) == '2'\nassert     median([1, 3, 2, 4, 5]) == '2'\nassert     median([1, 2, 3, 4]) == '2'\nassert     median([]) == 'NaN'\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         median([1, 2, 3, 4, 5]) == 5.0\nassert         median([1, 2, 3, 4, 5, 6, 7, 8]) == 5.5\nassert         median([]) == 0.0"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     median([10, 30, 50, 90, 99, 111, 1000]) == 8\nassert     median([10, 30, 50, 90, 99, 111, 1000]) == 40\nassert     median([10, 30, 50, 90, 99, 111, 1000, 1111]) == 40\nassert     median([10, 30, 50, 90, 99, 111, 1000, 1111, 1111]) == 50\nassert     median([10, 30, 50, 90, 99, 111, 1000, 1111, 1111]) == 50\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     median([]) == 0\nassert     median([1,2,3]) == 2\nassert     median([1,2,3,4]) == 2\nassert     median([]) == 0\n\ndef mode(l: list):\n    \"\"\"Return element that is the mode of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_palindrome('t') == True\nassert     is_palindrome('a') == True\nassert     is_palindrome('j') == True\nassert     is_palindrome('j') == True\nassert     is_palindrome('t') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_palindrome(\"taunu\") == True\nassert     is_palindrome(\"bab\") == True\nassert     is_palindrome(\"ou\") == True\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"ayui\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_palindrome(\"A man, a plan, a canal: Panama\") == True\nassert     is_palindrome(\"race a car\") == True\nassert     is_palindrome(\"race a car\") == False\nassert     is_palindrome(\"0\") == True\nassert     is_palindrome(\"0\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_palindrome(\n    \"taro'o\"\n) == True\nassert     is_palindrome(\n    \"12a34\"\n) == False\nassert     is_palindrome(\n    \"taro'o\"\n) == False\nassert     is_palindrome(\n    \"12a34\"\n) == True\nassert     is_palindrome(\n    \"12a34\"\n) == True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_palindrome('') == True, 'is_palindrome failed'\nassert     is_palindrome('a') == True, 'is_palindrome failed'\nassert     is_palindrome('123') == True, 'is_palindrome failed'\nassert     is_palindrome('a abc') == True, 'is_palindrome failed'\n\ndef is_numeric(text: str) -> bool:\n    \"\"\"\n    Checks if given string is numeric\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_palindrome(\"\")\nassert is_palindrome(\"A man, a plan, a canal: Panama\")\nassert is_palindrome(\"race a car\")\nassert is_palindrome(\"race a car\")\nassert is_palindrome(\"tacocat\")\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('b') == True\nassert     is_palindrome('a') == False\nassert     is_palindrome('b') == False\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_palindrome(\"This is a palindrome!\") == True\nassert     is_palindrome(\"A man, a plan, a canal: Panama\") == True\nassert     is_palindrome(\"race a car\") == True\nassert     is_palindrome(\"race a car\") == True\nassert     is_palindrome(\"race a car\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_palindrome('a')\nassert     is_palindrome('ab')\nassert     is_palindrome('aab')\nassert     is_palindrome('racecar')\nassert     is_palindrome('y')\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"A\") == True\nassert     is_palindrome(\"AA\") == True\nassert     is_palindrome(\"aA\") == True\nassert     is_palindrome(\"abba\") == True\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         modp(1,10) == 1\nassert         modp(4,10) == 8\nassert         modp(6,10) == 5\nassert         modp(7,10) == 7\nassert         modp(8,10) == 9\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     modp(10, 10) == 1\nassert     modp(10, 20) == 5\nassert     modp(10, 30) == 5\nassert     modp(10, 40) == 15\nassert     modp(10, 50) == 25\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     modp(8, 3) == 2\nassert     modp(15, 9) == 8\nassert     modp(25, 10) == 17\nassert     modp(17, 4) == 8\nassert     modp(23, 9) == 14\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     modp(3, 16) == 9\nassert     modp(8, 16) == 1\nassert     modp(0, 16) == 0\nassert     modp(12, 16) == 10\nassert     modp(7, 16) == 6\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     modp(2, 7) == modp(2, 1) == modp(2, 7) == modp(3, 1) == 2\nassert modp(2, 7) == 7\nassert modp(3, 1) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     modp(2,13) == 11\nassert modp(4,53) == 17\nassert modp(8,30) == 384\nassert modp(8,91) == 12\nassert modp(100,1000) == 100\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     modp(1, 2) == 1\nassert     modp(2, 2) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     modp(10, 3) == 2\nassert     modp(10, 2) == 1\nassert     modp(10, 5) == 2\nassert     modp(10, 3) == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     modp(1, 2) == 1\nassert     modp(2, 2) == 0\nassert     modp(3, 2) == 1\nassert     modp(4, 2) == 3\nassert     modp(5, 2) == 2\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     decode_shift(\"ba\") == \"ba\"\nassert     decode_shift(\"123\") == \"123\"\nassert     decode_shift(\"aabbb\") == \"abab\"\nassert     decode_shift
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     encoding_decode_shift(\"abcdefghi\") == \"hi\"\nassert     encoding_decode_shift(\"abcdefghi\") == \"hi\"\nassert     encoding_decode_shift(\"abcdefghi\") == \"hi\"\nassert     encoding_decode_shift(\"\") == \"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     (decode_shift(\"123\") == \"1234\")\nassert     (decode_shift(\"1234\") == \"123\")\nassert     (decode_shift(\"12345\") == \"456\")\nassert     (decode_shift(\"123456\") == \"456\")\nassert     (decode_shift(\"0\") == \"0\")\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     decode_shift(\"abcd\") == \"a\"\nassert     decode_shift(\"cbdaa\") == \"c\"\nassert     decode_shift(\"\") == \"\"\nassert     decode_shift(\"\") == \"aa\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     decode_shift(\"a\") == \"aaaaa\"\nassert     decode_shift(\"AAAAAA\") == \"aaaaa\"\nassert     decode_shift(\"a\") == \"a\"\nassert     decode_shift(\"\") == \"a\"\nassert     decode_shift(\" \") == \"a\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     decode_shift(\"AAABBB\") == \"AABAB\"\nassert     decode_shift(\"AB\") == \"AB\"\nassert     decode_shift(\"\") == \"\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     decode_shift(\"f\") == \"ff\"\nassert         decode_shift(\"f\") == \"ff\"\nassert decode_shift(\"f\") == \"ff\"\nassert decode_shift(\"f\") == \"ff\"\nassert decode_shift(\"f\") == \"ff\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         decode_shift(encode_shift(\"jimbo'~\")) == \"jimbo~\"\nassert decode_shift(encode_shift(\"1\")) == \"1\"\nassert decode_shift(encode_shift(\"abc\")) == \"cba\"\nassert decode_shift(encode_shift(\"jimbo'~\")) == \"jimbo~\"\nassert decode_shift(encode_shift(\"'~'~\")) == \"'~'~\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     decode_shift(\"a\") == \"a\"\nassert     decode_shift(\"\") == \"a\"\nassert     decode_shift(\"aa\") == \"a\"\nassert     decode_shift(\"aaa\") == \"a\"\nassert     decode_shift(\"aac\") == \"a\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     decode_shift(\"abc\") == \"d\"\nassert     decode_shift(\"xyz\") == \"xyz\"\nassert     decode_shift(\"ba\") == \"b\"\nassert     decode_shift(\"aa\") == \"a\"\nassert     decode_shift(\"a\") == \"a\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     remove_vowels(\"hello world\") == \"olleh\", \"remove_vowels() should return 'olleh'\"\nassert     remove_vowels(\"Hello world\") == \"Hello world\", \"remove_vowels() should return 'Hello world'!\"\nassert     remove_vowels(\"J.J. J.-dasJ.-dass\") == \"J.J. J.-dass\", \"remove_vowels() should return 'J.J. J.-dass'!\"\n\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     remove_vowels(\"Hello, this is a string\") == \"ello, this is a string\"\nassert     remove_vowels(\"Hello, this is a string\") == \"Hello, this is a string\"\nassert     remove_vowels(\"It was a fun fact that pandas is cool\") == \"It was a fun fact that pandas is cool\"\nassert     remove_vowels(\"This is a string and I am a string\") == \"This is a string and I am a string\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     remove_vowels(\"All of the \") == \"All of the\"\nassert     remove_vowels(\"All of the All of the \") == \"All of the All of the\"\nassert     remove_vowels(\"All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of the All of th"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     remove_vowels(\"Hello\") == \"Helo\"\nassert     remove_vowels(\"Hello World!\") == \"Hello Worl\"\nassert     remove_vowels(\"Some text with a period\") == \"SomeText withAperiod\"\nassert     remove_vowels(\"I am a test\") == \"I am a test\"\nassert     remove_vowels(\"I am a test!\") == \"I am a test\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     remove_vowels(\"hello\") == \"olleh\"\nassert     remove_vowels(\"Hello\") == \"olle\"\nassert     remove_vowels(\"1234\") == \"123\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     remove_vowels(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox\"\nassert     remove_vowels(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox\"\nassert     remove_vowels(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox\"\nassert     remove_vowels(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox\"\nassert     remove_vowels(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     remove_vowels(\"i love you\") == \"imv\", \"1st test failed\"\nassert     remove_vowels(\"trending:  john\") == \"trending: john\", \"2nd test failed\"\nassert     remove_vowels(\"trending:  john  mai\") == \"trending: mai\", \"3rd test failed\"\nassert     remove_vowels(\"trending:  john  mai  wally\") == \"trending: mai  wally\", \"4th test failed\"\nassert     remove_vowels(\"wally\") == \"\", \"5th test failed\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     remove_vowels('hello') == 'olleh'\nassert     remove_vowels('HELLO') == 'hello'\nassert     remove_vowels('ho') == 'hooo'\nassert     remove_vowels('ha') == 'a'\nassert     remove_vowels('aa') == 'a'\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     remove_vowels(\"hello\") == \"oell\"\nassert     remove_vowels(\"aab\") == \"aab\"\nassert     remove_vowels(\"Hi! how are you?\") == \"HiH!\"\nassert     remove_vowels(\"A\") == \"a\"\nassert     remove_vowels(\"a\") == \"a\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     remove_vowels(\"Hello\") == \"olleH\"\nassert     remove_vowels(\"How are you\") == \"oThOy\"\nassert     remove_vowels(\"I am learning\") == \"IaLoL\"\nassert     remove_vowels(\"\") == \"oThOy\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     below_threshold(list(range(1, 10)), 5) is False,     \"should return False\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     below_threshold([2,4,6,8,10], 10) == True\nassert     below_threshold([2,4,6,8,10], 5) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     below_threshold([1,2,3,4,5], 10) == False, \"failed test\"\nassert     below_threshold([1,2,3,4,5], 7) == False, \"failed test\"\nassert     below_threshold([1,2,3,4,5], 2) == True, \"failed test\"\nassert     below_threshold([1,2,3,4,5], 1) == True, \"failed test\"\nassert     below_threshold([1,2,3,4,5], 4) == True, \"failed test\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     below_threshold(l=[7, 9, 14, 12, 10], t=10)\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\ndef greet_all_if_necessary(l: list) -> bool:\n    \"\"\"Return True if the list l has no elements below threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         below_threshold(l=[3, 5, 7, 10], t=10) == True\nassert         below_threshold(l=[3, 5, 7, 10], t=20) == False\nassert         below_threshold(l=[3, 5, 7, 10], t=30) == True\nassert         below_threshold(l=[3, 5, 7, 10], t=40) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     below_threshold(list, 10) == False\nassert     below_threshold(list, 5) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     below_threshold([], 0) == True\nassert     below_threshold([2, 3, 4], 3) == False\nassert     below_threshold([1, 5, 4, 9], 3) == False\nassert     below_threshold([1, 5, 4, 9], 2) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     below_threshold(\n        [0, 1, 2, 3, 4],\n        2\n    ) == False\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     add(1, 2) == 3\nassert add(x=1, y=2) == 3\nassert add(1, 2, x=3, y=4) == 6\nassert add(1, 2, x=3, y=4, z=5) == 6\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     add(2,3) == 5\nassert add(3,5) == 8\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     add(3, 5) == 9"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     add(1,2) == 3\nassert add(1,3) == 6\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     add(1, 2) == 3\nassert add(1, 3) == 4\nassert add(1, -3) == -1\nassert add(1, 2) == 3\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     add(x=3, y=4) == 8\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     add(1, 2) == 3\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     same_chars(\"abc\", \"a\")\nassert     not     same_chars(\"ab\", \"a\")\nassert     not     same_chars(\"abc\", \"abc\")\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         same_chars('t', 'y') == False\nassert         same_chars('t', 'a') == False\nassert         same_chars('a', 'b') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     same_chars(\"abc\", \"abcd\")\nassert     same_chars(\"qwer\", \"qwert\")\nassert     not same_chars(\"qwer\", \"zxcv\")\nassert     not same_chars(\"qwer\", \"xbcz\")\nassert     same_chars(\"abc\", \"abcd\")\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     same_chars(\"jk\", \"jk\") == True\nassert     same_chars(\"jk\", \"john\") == True\nassert     same_chars(\"jk\", \"jake\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     same_chars(\"123\", \"123\")\nassert     not same_chars(\"1\", \"1\")\nassert     not same_chars(\"12\", \"12\")\nassert     not same_chars(\"1234\", \"1234\")\nassert     not same_chars(\"1\", \"1\")\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     same_chars(\"bab\", \"baab\") == True\nassert     same_chars(\"bab\", \"baab\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     same_chars('123', '123') == True\nassert     same_chars('123', '123_') == True\nassert     same_chars('123', '123_') == False\nassert     same_chars('12_', '123') == False\nassert     same_chars('12_', '12') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     same_chars('abc', 'abc')\nassert     same_chars('abc', 'ab')\nassert     same_chars('abc', 'a')\nassert     same_chars('abcd', 'ab')\nassert     same_chars('abcd', 'a')\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     same_chars(s0, s1) == True\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     same_chars('a', 'a') == True\nassert same_chars('a', 'z') == True\nassert same_chars('ab', 'a') == True\nassert same_chars('ab', 'z') == True\nassert same_chars('abb', 'a') == True\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fib(5) == 5\nassert     fib(10) == 55\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\n\ndef lucas(n: int):\n    \"\"\"Return n-th Lucas number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     check_function(fib)\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fib(0) == 0, \"fib is incorrect.\"\nassert     fib(1) == 1, \"fib is incorrect.\"\nassert     fib(2) == 1, \"fib is incorrect.\"\n\ndef lucas(n: int):\n    \"\"\"Return n-th Lucas number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fib(5) == 5\nassert     fib(6) == 6\nassert     fib(7) == 7\nassert     fib(8) == 8\nassert     fib(9) == 9\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef is_valid_b(b: str):\n    \"\"\" check if the bracket is valid.\n    b is a string of \"<\" and \">\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     correct_bracketing('(<a><a>') is True\nassert     correct_bracketing('(<a><b><a>)') is True\nassert     correct_bracketing('(<a><b>') is True\nassert     correct_bracketing('(<a><b>') is True\nassert     correct_bracketing('(<a><b>') is True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     correct_bracketing('()') == False\nassert correct_bracketing(')<>') == False\nassert correct_bracketing('()>') == False\nassert correct_bracketing('{}<>') == False\nassert correct_bracketing('[)<>') == False\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n    "
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<\") is False\nassert correct_bracketing(\">\") is False\nassert correct_bracketing(\"()\") is True\nassert correct_bracketing(\"<>\") is False\nassert correct_bracketing(\"(\") is True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\") == False\nassert correct_bracketing(\"()()\") == False\nassert correct_bracketing(\"()(()\") == False\nassert correct_bracketing(\")(\") == False\nassert correct_bracketing(\"))\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     (correct_bracketing(\"<\") == True)\nassert     (correct_bracketing(\"()\") == True)\nassert     (correct_bracketing(\"()[]{}\") == True)\nassert     (correct_bracketing(\"([)]\") == True)\nassert     (correct_bracketing(\"{[]}\") == True)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         correct_bracketing(\"()\") == True\nassert correct_bracketing(\"()[]{}\") == True\nassert correct_bracketing(\"[(])\") == True\nassert correct_bracketing(\"(]\") == True\nassert correct_bracketing(\"{[\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<>\")\nassert     not correct_bracketing(\"<>\")\nassert     correct_bracketing(\"<>[]\")\nassert     not correct_bracketing(\"<>[]\")\nassert     correct_bracketing(\"[<>]\")\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(\")\nassert     correct_bracketing(\")\")\nassert     correct_bracketing(\"}\")\nassert     correct_bracketing(\"{\")\nassert     correct_bracketing(\"()\")\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     monotonic([2, 5, 2, 1, 4, 3, 9, 9, 8]) == True\nassert     monotonic([2, 5, 2, 1, 4, 3, 9, 9, 8]) == True\nassert     monotonic([]) == True\nassert     monotonic([] + [1]) == True\nassert     monotonic([1, 2, 3, 5, 8]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         monotonic([1, 2, 3]) == True\nassert         monotonic([1, 4, 2, 0]) == False\nassert         monotonic([1, 3, 2, 4]) == True\nassert         monotonic([1, 2, 3]) == False\nassert         monotonic([1, 2, 3, 4]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     monotonic([5, 6, 6, 7, 8]) == False\nassert     monotonic([5, 6, 6, 7, 7, 8]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     monotonic([1,2,3,4,5]) == True\nassert     monotonic([1,2,3,5,4]) == True\nassert     monotonic([1,2,3,5,4]) == True\nassert     monotonic([1,1,2,3,4]) == True\nassert     monotonic([1,2,3,4,5]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     monotonic([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\nassert     monotonic([10, 20, 40, 60, 70, 80, 90, 100, 110, 120]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\nassert     monotonic([10, 20, 50, 60, 70, 80, 90, 100, 110, 120]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\nassert     monotonic([10, 20, 50, 60, 70, 80, 90, 100, 110, 120, 130]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\nassert     monotonic([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     monotonic(0,1,2,3,4,5) == True\nassert     monotonic(0,1,5,2,4,3) == True\nassert     monotonic(0,1,4,3,5,2) == False\nassert     monotonic(0,1,4,3,5,3) == True\nassert     monotonic(0,1,4,2,5,1) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     (monotonic([3, 5, 10, 10, 1]) == True)\nassert     (monotonic([0, 1, 5, 10, 11, 12]) == True)\nassert     (monotonic([1, 2, 3, 4, 5, 6]) == True)\nassert     (monotonic([2, 5, 7, 8, 11, 12, 13]) == True)\nassert     (monotonic([1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16]) == True)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         monotonic(['a', 'b', 'c'])\nassert         not monotonic(['a', 'b', 'd'])\nassert         not monotonic([])\nassert         not monotonic([1, 2, 3])\nassert         not monotonic([1, 2, 3, 4])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     monotonic(['a', 'b', 'c', 'd', 'e', 'f'])\nassert not monotonic(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\nassert monotonic([])\nassert not monotonic([0, 1, 2, 3])\nassert not monotonic([0, 2, 3, 4])\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     common([\"a\", \"b\"], [\"b\", \"a\"]) == [\"b\"]\nassert     common([\"a\", \"b\"], [\"c\", \"c\"]) == []\nassert     common([\"a\", \"a\", \"a\"], [\"a\", \"a\"]) == [\"a\"]\nassert     common([\"a\", \"b\", \"a\"], [\"a\", \"b\"]) == [\"a\", \"b\"]\nassert     common([\"a\", \"b\", \"c\"], [\"a\", \"c\"]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     common([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     common(['a', 'b'], ['a', 'b', 'c']) == ['a', 'b']\nassert common(['a', 'b', 'a', 'b'], ['a', 'b', 'c']) == ['a', 'b', 'c']\nassert common(['a', 'b', 'a'], ['a', 'b', 'c']) == ['a', 'b', 'c']\nassert common(['a', 'b'], ['a', 'b', 'a']) == []\nassert common(['a', 'a', 'a'], ['a', 'a', 'a']) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     common(['a', 'b', 'c', 'd'], ['a', 'b', 'c']) == ['a', 'b']\nassert     common(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\nassert     common(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     common([\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert     common([\"a\", \"b\", \"a\", \"c\", \"b\", \"b\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\"]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     common([1,2,3,4,5], [1,2,3,5,4]) == [1,2,3,5]\nassert common([1,1,2,3,5,4], [2,3,5,4,1,1]) == [2,3,5]\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     common([1,1,2,2,2,3,3,3], [1,2,3,3,3,3,3]) == [1,2,3,3,3,3,3]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,42"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     common(list_1, list_2) == list_2\nassert     common(list_1, list_3) == list_3\nassert     common(list_1, list_4) == list_4\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     common([2, 2, 3, 3, 5, 5, 6, 8, 8, 10], [2, 3, 5, 8, 10]) == [2, 3, 5, 8, 10]\nassert     common([2, 2, 3, 3, 5, 5, 6, 8, 8, 10], [4, 6, 6, 7, 7, 8, 8, 10, 10, 11]) == [4, 6, 6, 7, 7, 8, 8, 10, 10, 11]\nassert     common([1, 1, 1, 2, 2, 3, 3, 3, 4, 5], [2, 2, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 9, 10]) == [2, 2, 3, 4, 5, 5, 6, 7, 7, 7, 8, 8, 8, 9, 9, 10]\n\ndef sort_by_size(l: list):\n    \"\"\"Sort the items in a list by their size in the following order:\n        [\n            (2, 2), (2, 3), (3, 2), (3, 3), (4, 2), (4, 3), (5, 2), (5, 3), (6, 2), (6, 3),\n            (7, 2), (7, 3), (8, 2), (8, 3), (9, 2), (9, 3), (10, 2), (10, 3),\n            (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3),\n            (4, 1), (4, 2), (4, 3), (5, 1), (5, 2), (5, 3), (6, 1), (6, 2), (6, 3),\n            (7, 1), (7, 2), (7, 3), (8, 1), (8, 2), (8, 3), (9, 1), (9, 2), (9, 3),\n            (10, 1), (10, 2), (10, 3)\n        ]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 2\nassert     largest_prime_factor(5) == 3\nassert     largest_prime_factor(7) == 7\n\nif __name__ == '__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('n = 2')\n    print('Exception :')\n    print('2')\n    print('Output :')\n    print(largest_prime_factor(2))\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     largest_prime_factor(125) == 5\nassert     largest_prime_factor(58) == 8\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(7) == 2\nassert     largest_prime_factor(9) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(12) == 3\nassert     largest_prime_factor(81) == 3\nassert     largest_prime_factor(300) == 2\nassert     largest_prime_factor(29) == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef lcf(a: int, b: int, c: int) -> int:\n    \"\"\"Return lcf(a,b,c) such that a*b*c = lcf(a, b, c)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     largest_prime_factor(3) == 2\nassert     largest_prime_factor(5) == 2\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(11) == 2\nassert     largest_prime_factor(19) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     largest_prime_factor(1) == 2\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 2\nassert     largest_prime_factor(5) == 3\nassert     largest_prime_factor(7) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 2\nassert     largest_prime_factor(5) == 2\nassert     largest_prime_factor(7) == 2\nassert     largest_prime_factor(11) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     largest_prime_factor(7) == 2\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(6) == 2\nassert     largest_prime_factor(9) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(30) == 5\n\n\ndef number_of_bits(n: int):\n    \"\"\"Return the number of bits of n.\n    \"\"\"\n    pass\n\ndef number_of_bits(n: int):\n    \"\"\"Return the number of bits of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sum_to_n(0) == 0\nassert sum_to_n(1) == 1\nassert sum_to_n(2) == 3\nassert sum_to_n(5) == 10\nassert sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sum_to_n(5) == 10\nassert     sum_to_n(1) == 1\nassert     sum_to_n(10) == 100\n\ndef test_sum_to_n():\n    assert sum_to_n(0) == 0\n    "
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sum_to_n(0) == 0\nassert     sum_to_n(10) == 10\nassert     sum_to_n(15) == 25\nassert     sum_to_n(30) == 55\nassert     sum_to_n(40) == 85\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sum_to_n(5) == 10\nassert sum_to_n(1) == 1\nassert sum_to_n(4) == 7\nassert sum_to_n(0) == 0\nassert sum_to_n(5) == 10\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sum_to_n(0) == 0\nassert sum_to_n(1) == 1\nassert sum_to_n(10) == 15\nassert sum_to_n(100) == 210\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sum_to_n(5) == 10\nassert sum_to_n(6) == 30\nassert sum_to_n(1) == 1\nassert sum_to_n(11) == 21\nassert sum_to_n(12) == 24\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sum_to_n(1) == 0, \"We should return 0\"\nassert sum_to_n(1) == 0, \"We should return 0\"\nassert sum_to_n(2) == 1, \"We should return 1\"\nassert sum_to_n(3) == 2, \"We should return 2\"\nassert sum_to_n(5) == 3, \"We should return 3\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sum_to_n(0) == 0\nassert sum_to_n(2) == 0\nassert sum_to_n(3) == 1\nassert sum_to_n(4) == 2\nassert sum_to_n(5) == 3\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(10) == 100\nassert     sum_to_n(5) == 25\nassert     sum_to_n(0) == 0\nassert     sum_to_n(10) == 100\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"((()()())()()\")) == True, \"correct_bracketing\"\nassert     correct_bracketing(\"((()())()()))\") == True, \"correct_bracketing\"\nassert     correct_bracketing(\"((())()()))\") == True, \"correct_bracketing\"\nassert     correct_bracketing(\"(((()()()()))\") == True, \"correct_bracketing\"\nassert     correct_bracketing(\"(((())())())\") == True, \"correct_bracketing\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     (correct_bracketing(\"()\") == True)\nassert     (correct_bracketing(\"()(())\") == True)\nassert     (correct_bracketing(\"((()\") == True)\nassert     (correct_bracketing(\"((())\") == True)\nassert     (correct_bracketing(\"((()\")))) == True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"()()()()()()()()\") == True\nassert     correct_bracketing(\"((()))()\") == True\nassert     correct_bracketing(\"(((())()()()()()()()()()\") == True\nassert     correct_bracketing(\"((())())()\") == True\nassert     correct_bracketing(\")))((()\")) == True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     correct_bracketing(\n            \"(((\"\n            )\n    )\nassert     not correct_bracketing(\n            \"((\"\n            )\n    )\nassert     correct_bracketing(\"(\"\n            )\nassert     not correct_bracketing(\")\"\n            )\nassert     correct_bracketing(\"(()\"\n            )\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"(()\")\nassert     correct_bracketing(\"()())\")\nassert     correct_bracketing(\"()[]{}\")\nassert     correct_bracketing(\"[())\"]\nassert     correct_bracketing(\"((())\")\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"[(())\"]) == True\nassert     correct_bracketing(\"[(())]\") == True\nassert     correct_bracketing(\"())\") == False\nassert     correct_bracketing(\"()(\") == False\nassert     correct_bracketing(\"())()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"((())\") == True\nassert     correct_bracketing(\"[(])\") == True\nassert     correct_bracketing(\"()[]{}\") == True\nassert     correct_bracketing(\"[([])]\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"())\") == True\nassert     correct_bracketing(\"(()))\") == False\nassert     correct_bracketing(\"()())\") == False\nassert     correct_bracketing(\"((())\" == False) == True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     correct_bracketing('((())') == True\nassert correct_bracketing('()))') == True\nassert correct_bracketing('()))(') == True\nassert correct_bracketing('((()))') == True\nassert correct_bracketing('((()))') == True\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"(\")\nassert not correct_bracketing(\")\")\nassert correct_bracketing(\"()()\")\nassert not correct_bracketing(\"())\")\nassert correct_bracketing(\"(())(\")\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     derivative(x, 1) == xs[0]\nassert     derivative(x, 2) == xs[0] * xs[1]\nassert     derivative(x, 3) == xs[0] * xs[1] * xs[2]\nassert     derivative(x, 4) == xs[0] * xs[1] * xs[2] * xs[3]\nassert     derivative(x, 5) == xs[0] * xs[1] * xs[2] * xs[3] * xs[4]"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     derivative([1, 0, 0]) == 1\nassert     derivative([1, 1, 0]) == 0\nassert     derivative([-1, 1]) == 0\nassert     derivative([1, -1, 0]) == 0\nassert     derivative([1, -1, -1]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     derivative(1, 0, 2, 3) == 1\nassert     derivative(1, 0, 2, 3, xs=[2, 4, 6]) == -6\n\ndef test_derivative():\n    assert derivative([1, 2, 3, 4, 5, 6]) == 1\n    assert derivative([1, 2, 3, 4, 5, 6, 7]) == 6\n    "
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     derivative([0,1,2,3]) == [1,0,1]\nassert     derivative([0,1,2,4,5,6]) == [0,1,1]\nassert     derivative([-3,3,2,3,3]) == [0,0]\nassert     derivative([-3,3,2,0,5,0]) == [0,0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     derivative(xs=[1, 2, 3]) == [1, 0, -6]\nassert     derivative(xs=[1, 2, 3, 4]) == [0, 1, -6, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef check(p: Polynomial, ys: list):\n    \"\"\" ys represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return True if the derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert xtest(derivative(xs))"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     derivative(1,1) == 0\nassert     derivative(2,1) == -1\nassert     derivative(2,2) == -1\nassert     derivative(1,2) == 1\nassert     derivative(1,3) == 2\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     derivative(1,0,0,1) == -2\nassert     derivative(1,0,1,0) == 1\nassert     derivative(1,0,1,1) == 1\nassert     derivative(1,0,1,2) == 0\nassert     derivative(1,0,1,3) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0, \"The fibfib sequence is incorrect\"\nassert     fibfib(1) == 0, \"The fibfib sequence is incorrect\"\nassert     fibfib(2) == 1, \"The fibfib sequence is incorrect\"\nassert     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3), \"The fibfib sequence is incorrect"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 2\nassert fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fibfib(5) == 0\nassert     fibfib(8) == 1\nassert     fibfib(9) == 1\nassert     fibfib(10) == 1\nassert     fibfib(11) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         fibfib(0) == 0, \"Error in fibfib(0)\"\nassert         fibfib(1) == 1, \"Error in fibfib(1)\"\nassert         fibfib(2) == 2, \"Error in fibfib(2)\"\nassert         fibfib(3) == 3, \"Error in fibfib(3)\"\nassert         fibfib(4) == 5, \"Error in fibfib(4)\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 2\nassert     fibfib(4) == 3\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(3))\nprint(fibfib(4))\n\ndef fibfib_neg(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    pass\n\nprint(fibfib_neg(0))\nprint(fibfib_neg(1))\nprint(fibfib_neg(2))\nprint(fibfib_neg(3))\nprint(fibfib_neg(4))\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0, \"Error in the function fibfib()\"\nassert     fibfib(1) == 0, \"Error in the function fibfib()\"\nassert     fibfib(2) == 1, \"Error in the function fibfib()\"\nassert     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3), \"Error in the function fibfib()\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == "
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     vowels_count(\"12\") == 3\nassert     vowels_count(\"abba\") == 3\nassert     vowels_count(\"zebra\") == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     vowels_count(\"dinwaj\") == 3\nassert     vowels_count(\"diniwe\") == 3\nassert     vowels_count(\"alex\") == 0\nassert     vowels_count(\"aix\") == 0\nassert     vowels_count(\"alexabcdefg\") == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     vowels_count('Hello word') == 5, 'Correct output is 5.'\n\ndef count_vowels(word):\n    \"\"\"Write a function count_vowels which counts the number of vowels in a\n    given string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     vowels_count('hello') == 2\nassert     vowels_count('Hi') == 1\nassert     vowels_count('heY') == 0\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     vowels_count(\"Hello World!\") == 7\nassert     vowels_count(\"aeiou\") == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     vowels_count('aab') == 2\nassert     vowels_count('bab') == 2\nassert     vowels_count('caa') == 3\nassert     vowels_count('bba') == 3\n\ndef min_max(n):\n    \"\"\"Write a function min_max which takes an input n\n    and returns the min and max values of the input n\n    using recursion.\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     vowels_count('hello') == 0\nassert     vowels_count('one') == 0\nassert     vowels_count('one') == 2\nassert     vowels_count('one') == 0\nassert     vowels_count('one') == 2\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     check_circular_shift('8810', 1) == '1011'\nassert     check_circular_shift('4444', 2) == '3344'\nassert     check_circular_shift('11111', 1) == '1'\nassert     check_circular_shift('44444', 2) == '3344'\nassert     check_circular_shift('111111', 1) == '11'\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     circular_shift(1, 1) == \"1\"\nassert     circular_shift(2, 1) == \"2\"\nassert     circular_shift(3, 1) == \"3\"\nassert     circular_shift(8, 1) == \"8\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     circular_shift(5, 0) == \"5\"\nassert     circular_shift(5, 1) == \"6\"\nassert     circular_shift(5, 2) == \"7\"\nassert     circular_shift(5, 3) == \"8\"\nassert     circular_shift(5, 4) == \"9\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     circular_shift(136, 0) == '1336'\nassert circular_shift(136, 1) == '136'\nassert circular_shift(136, 2) == '137'\nassert circular_shift(136, 3) == '137'\nassert circular_shift(136, 4) == '137'\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     circular_shift(1234, 5) == \"31234\"\nassert     circular_shift(12345, 5) == \"3455\"\nassert     circular_shift(99999, 0) == \"99999\"\nassert     circular_shift(0, 9) == \"0\"\nassert     circular_shift(0, -9) == \"0\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     len(sys.argv) == 2\nassert     int(sys.argv[1]) >= 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     circular_shift(333, 1) == \"333\"\nassert     circular_shift(101, 10) == \"101\"\nassert     circular_shift(111, 11) == \"111\"\nassert     circular_shift(111, 10) == \"011\"\nassert     circular_shift(111, 11) == \"101\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_correct(circular_shift, \n                 \"It should be False if shift is greater than the number of digits in x.\")\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     (circular_shift(123, 5) == \"1123011101\")\nassert     (circular_shift(123, -5) == \"12\")\nassert     (circular_shift(0, 0) == \"\")\nassert     (circular_shift(1, -3) == \"1\")\nassert     (circular_shift(2, 4) == \"21\")\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     circular_shift(23, 1) == '1'\nassert     circular_shift(0, -1) == '0'\nassert     circular_shift(0, 0) == '0'\nassert     circular_shift(1, -1) == '1'\nassert     circular_shift(1, 1) == '1'"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     digitSum(\"\") == 0\nassert digitSum(\"\") == 0\nassert digitSum(\"X\") == 0\nassert digitSum(\"a\") == 0\nassert digitSum(\"aab\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     digitSum(\"hello\") == \"h\", \"Digit sum is incorrect\"\nassert     digitSum(\"hallo\") == \"h\", \"Digit sum is incorrect\"\nassert     digitSum(\"Howl\") == \"H\", \"Digit sum is incorrect\""
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     digitSum('a234') == 8\nassert     digitSum('1234567890') == 64\nassert     digitSum('a') == 0\nassert     digitSum('hello') == 0\nassert     digitSum('abcdef') == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     digitSum('abcdefghijklmnopqrstuvwxyz') == 55\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     digitSum(\"ascii\") == \"111\"\nassert     digitSum(\"abcdef\") == \"234\"\nassert     digitSum(\"abcdfghjklmnopqrstuvwxyz\") == \"123456\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     digitSum(\"s\") == 24"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         digitSum(\"12345\") == 0\nassert         digitSum(\"1234\") == 3\nassert         digitSum(\"1234\") == 12\nassert         digitSum(\"\") == 0\nassert         digitSum(\"a\") == 1\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef run():\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the lower characters only'\n    ASCII codes.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     digitSum(\"1234\") == 9\nassert     digitSum(\"\") == 0\nassert     digitSum(\"123\") == 12\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     digitSum('Testing') == 36\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"oranges\",3) == 7\nassert     fruit_distribution(\"apples\",3) == 3\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"aabbaccc\",5) == 5\nassert     fruit_distribution(\"aaabaaa\",1) == 3\nassert     fruit_distribution(\"abab\",2) == 0\nassert     fruit_distribution(\"aabb\",3) == 0\nassert     fruit_distribution(\"aabbaccc\",5) == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fruit_distribution('4a',4) == 2\nassert     fruit_distribution('4a',3) == 0\nassert     fruit_distribution('4a',2) == 0\nassert     fruit_distribution('4a',1) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     fruit_distribution('a', 'c') == 2\nassert     fruit_distribution('a', 'b') == 0\nassert     fruit_distribution('a', 'a') == 2\nassert     fruit_distribution('a', 'z') == 0\nassert     fruit_distribution('a', 'a') == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"I am orange\", \"1111\") == 1\nassert     fruit_distribution(\"All fruits are fruit\", \"100\") == 0\nassert     fruit_distribution(\"All fruits are mango\", \"100\") == 4\nassert     fruit_distribution(\"I am orange\", \"1111\") == 0\nassert     fruit_distribution(\"I am orange\", \"11111\") == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         fruit_distribution(\"3 2\", \"3 2\") == 2, 'Test failed.'\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"a\", 2) == 0\nassert     fruit_distribution(\"a\", 3) == 0\nassert     fruit_distribution(\"a\", 4) == 0\nassert     fruit_distribution(\"a\", 5) == 0\nassert     fruit_distribution(\"a\", 6) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     fruit_distribution('', 0) == 0\nassert     fruit_distribution('a', 1) == 1\nassert     fruit_distribution('b', 2) == 2\nassert     fruit_distribution('c', 3) == 3\nassert     fruit_distribution('d', 4) == 4\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     fruit_distribution(\"apple\", 1) == 1\nassert     fruit_distribution(\"orange\", 1) == 0\nassert     fruit_distribution(\"mango\", 2) == 2\nassert     fruit_distribution(\"apples\", 1) == 0\nassert     fruit_distribution(\"oranges\", 1) == 2\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Example 1:\")\n    print(\"Input : \")\n    print(\"nodes = [1,2,3,4,5]\")\n    print(\"Exception : \")\n    print(\"[4]\")\n    print(\"Output : \")\n    print(pluck([1, 2, 3, 4, 5]))\n    print()\n\n    print(\"Example 2:\")\n    print(\"Input : \")\n    print(\"nodes = [1, 1, 1, 1, 1]\")\n    print(\"Exception : \")\n    print(\"[1, 2]\")\n    print(\"Output : \")\n    print(pluck([1, 1, 1, 1, 1]))\n    print()\n\n    print(\"Example 3:\")\n    print(\"Input : \")\n    print(\"nodes = [0,1,2,0,1,2,3,0]\")\n    print(\"Exception : \")\n    print(\"[0, 1]\")\n    print(\"Output : \")\n    print(pluck([0, 1]))\n    print()\n\n    pass"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     pluck([0, 1, 4, 2]) == [1, 2]\nassert     pluck([0, 1, 2, 3]) == [0, 1, 2]\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     \"wrong\" in str(pluck([3,4,1,0,6,8,10,5,9,2,7,11,4]))\nassert     \"2\" in str(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nassert     \"10\" in str(pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     pluck([1, 1, 1, 1, 1, 1, 1]) == [1, 1]\nassert     pluck([]) == []\nassert     pluck([-1, -1, -1, -1, -1, -1, -1]) == [-1]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     pluck([12,2,13,14,15,16,17,18,19,20]) == [15,8]\nassert     pluck([1,2,3,4,5,6]) == [3]\n\ndef quick_sort(arr):\n    \"\"\"\n    \"Given an array representing a tree, sort it in O(nlogn) in-place.\"\n    Sort the whole tree in O(n) time.\n    Sort the elements in O(nlog(n)) time.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     pluck([1,4,2,6,3]) == [2,0]\nassert     pluck([2,3,6,2,3,5]) == [0,4]\nassert     pluck([]) == []\nassert     pluck([1,2,2,3,3,4,4,5,5]) == [3,0]\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\n\ndef pluck_min_even(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     search([1,2,3,4,5,6,7,8]) == 4\nassert     search([1,3,5,7,9]) == -1\nassert     search([1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 7\nassert     search([1,1,1,1,1,1,1,1,1,1]) == -1\nassert     search([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 10\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     search([]) == -1\nassert     search([1, 3, 4, 3]) == 4\nassert     search([1, 3, -4, 3]) == 3\nassert     search([1, 3, -4, 3, 1]) == 3\nassert     search([1, 3, 4, 3, 1, 2]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     search([2, 2, 3, 3, 4]) == 3, \"test case failed\"\nassert     search([2, 2, 3, 3, 1, 1]) == 3, \"test case failed\"\nassert     search([3, 4, 2, 2, 2]) == 3, \"test case failed\"\nassert     search([1, 1, 1, 1]) == -1, \"test case failed\"\nassert     search([-2, -1, -2, -1, -2]) == -1, \"test case failed\"\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     search([]) == -1\nassert search([1, 2, 3, 4, 5, 6]) == -1\nassert search([-1, 0, 1, 2, -1, 2]) == 1\nassert search([-1, 1, -1, 0, 1, 2]) == -1\nassert search([1, 0, 1, 2, -1, 2, 3, 0, -1]) == 3\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef print_sorted_list(lst):\n    '''\n    Print sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_a_function(strange_sort_list)\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         strange_sort_list([]), 'empty list'\nassert         strange_sort_list([1,2,3,4,5,6,7,8,9,10]), ['1','2','3','4','5','6','7','8','9','10'])\nassert         strange_sort_list([9,3,1,6,5,0,2,4,7,10]), ['3','1','6','2','4','5','7','8','9','10']\nassert         strange_sort_list([2,4,5,6,7,8,9,10]), ['2','4','5','6','7','8','9','10'])\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     strange_sort_list([]), 'empty list should be in strange order'\nassert     strange_sort_list([5, 5, 2, 4, 2, 10, 8, 6]), 'invalid list, should be in strange order'\nassert     strange_sort_list([2, 3, 4, 5, 6, 7, 8, 9]), 'list should be in strange order'\n\n'''\nSlicing list into smaller lists\nSort the list into smaller lists\nFor each small list, slice the smaller list into smaller lists\n\nFor example,\nlst = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\nTo get the sub lists\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     strange_sort_list([5, 4, 2, 8, 1, 3, 6, 7]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     strange_sort_list([6, 3, 5, 2, 4, 8, 8, 1]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     strange_sort_list([7, 6, 2, 8, 4, 3, 1]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\n'''\nBelow function prints the difference between different sorting functions.\n'''\ndef print_difference(lst):\n    '''\n    Given list of integers, return list in the same sort.\n    '''\n    pass"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         0, 'Problem in strange_sort_list'\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     triangle_area(2, 2, 2) == 1\nassert     triangle_area(3, 4, 3) == -1\nassert     triangle_area(2, 3, 4) == 2\nassert     triangle_area(5, 2, 2) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     triangle_area(10, 0, 0) == 10\nassert     triangle_area(4, 0, 0) == 0\nassert     triangle_area(4, 0, 2) == 0\nassert     triangle_area(0, 0, 4) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     triangle_area(1, 1, 1) == 0\nassert triangle_area(1, 1, 1) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     triangle_area(4,3,3) == 5\nassert     triangle_area(3,2,4) == 12\nassert     triangle_area(4,3,4) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     triangle_area(1, 2, 3) == 5, \"triangle_area(1, 2, 3)\"\nassert     triangle_area(2, 3, 4) == -1, \"triangle_area(2, 3, 4)\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     triangle_area(2, 3, 4) == 3.0, \"Wrong triangle area\"\nassert     triangle_area(3, 2, 5) == -1.0, \"Wrong triangle area\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     triangle_area(4, 5, 7) == 7.0, 'triangle_area(4, 5, 7)!= 7.0'\nassert     triangle_area(3, 4, 5) == -1.0, 'triangle_area(3, 4, 5)!= -1.0'\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     triangle_area(3, 4, 2) == 5.0\nassert     triangle_area(1, 3, -1) == 1.0\nassert     triangle_area(3, -4, 1) == -1.0\nassert     triangle_area(-3, -4, 1) == -1.0"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     triangle_area(5, 6, 7) == 7.0\nassert     triangle_area(5, 5, 5) == -1.0\nassert     triangle_area(5, 6, 7) == -1.0\nassert     triangle_area(5, 6, 6) == -1.0"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     will_it_fly([0], 10) == True\nassert     will_it_fly([0], 7) == True\nassert     will_it_fly([1, 2], 4) == True\nassert     will_it_fly([1, 2, 3, 4], 5) == True\nassert     will_it_fly([1, 2, 3, 4], 8) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     will_it_fly(5, 20) == True\nassert     will_it_fly(5, 200) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     will_it_fly(\n[1, 2, 3, 4],\n    2\n) == False, \"should return False\"\nassert     will_it_fly(\n[1, 2, 3, 4],\n    3\n) == True, \"should return True\"\nassert     will_it_fly(\n[1, 2, 3, 4],\n    5\n) == False, \"should return False\"\nassert     will_it_fly(\n[1, 2, 3, 4],\n    6\n) == True, \"should return True\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef make_palindromic(q):\n    '''\n    Write a function that returns the palindromic sublist of the list q.\n    The list is a palindrome, i.e.,\n    if the number of elements equals the length of the list, the list is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     will_it_fly(['a', 'b'], 2) == True\nassert     will_it_fly(['a', 'b'], 1) == True\nassert     will_it_fly(['a', 'b'], 6) == True\nassert     will_it_fly(['a', 'b'], 5) == False\nassert     will_it_fly(['a', 'b'], 7) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     will_it_fly(1,5) == False\nassert     will_it_fly(2,5) == False\nassert     will_it_fly(5,2) == True\nassert     will_it_fly(2,1) == False\nassert     will_it_fly(3,3) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     will_it_fly([], 0) == False\nassert will_it_fly(q, 1) == True\nassert will_it_fly([1, 2, 3], 1) == True\nassert will_it_fly([1, 2, 3, 4], 3) == False\nassert will_it_fly([1, 2, 3, 4], 4) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     will_it_fly(['a','a','b'],3) == False\nassert         will_it_fly(['a','b'],3) == False\nassert         will_it_fly(['a'],3) == False\nassert         will_it_fly(['a','a','a'],3) == False\nassert         will_it_fly(['a','a','b','b'],3) == False\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef test_smallest_change_1():\n    assert smallest_change([1,1,1,2,2,3,3,4,4,5,6]) == 6\n\n\ndef test_smallest_change_2():\n    assert smallest_change([3,6,1,2]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \nsmallest_change([])\nassert \nsmallest_change([1, 1, 1])\nassert \nsmallest_change([1, 2, 3])\nassert \nsmallest_change([1, 2, 3, 4, 3, 2, 1])\n\ndef is_palindrome(s):\n    \"\"\"\n    Given a string, check if it is a palindrome, i.e. words that are the same in reversed order,\n    as well as words that contain different letters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     smallest_change([1,2,3,3]) == 3\nassert     smallest_change([3,1,2,3]) == 1\nassert     smallest_change([1,1,2,1]) == 0\nassert     smallest_change([1,2,3,2]) == 3\nassert     smallest_change([1,3,1,2]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     smallest_change([2, 2, 3, 4, 5, 6]) == 6\nassert     smallest_change([0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 8\nassert     smallest_change([]) == 0\nassert     smallest_change([2, 2, 3, 4, 5, 6, 6, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    \"\"\"\n    Tests the smallest_change function.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     smallest_change([1,4,1,2,1,4,4]) == 5\nassert     smallest_change([1,4,1,2,3,4,5]) == 8\nassert     smallest_change([1,3,2,3,4,5,6,7]) == 17\nassert     smallest_change([1,2,3,4,5,6,7,8,9,10]) == 52\n\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     smallest_change([1, 2, 4, 6, 3, 3]) == 5\nassert     smallest_change([4, 1, 2, 3, 5, 6]) == 0\nassert     smallest_change([1, 1, 1, 1, 1]) == 1\nassert     smallest_change([1, 0, 1, 0, 1, 1, 1]) == 1\nassert     smallest_change([2, 2, 3, 3, 2, 3, 1]) == 3\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     smallest_change([4, 5, 6, 7, 1]) == 4\nassert     smallest_change([7, 8, 5, 3, 6]) == 7\nassert     smallest_change([1, 3, 3, 2, 4]) == 1\nassert     smallest_change([9, 8, 7, 6, 5]) == 9\nassert     smallest_change([1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     smallest_change(arr = [1,2,3,4,5,6,7]) == 5,'should be 5'\nassert     smallest_change(arr = [2,4,6,8,10]) == 8,'should be 8'\nassert     smallest_change(arr = [2,4,6,8,10]) == 5,'should be 5'\nassert     smallest_change(arr = [2,4,6,8,10]) == 5,'should be 5'\nassert     smallest_change(arr = [2,4,6,8,10]) == 5,'should be 5'\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         total_match([], []) == []\nassert         total_match([], [1,2,3]) == [1,2,3]\nassert         total_match([1,2,3], []) == [1,2,3]\nassert         total_match([1,2,3], [1,2,3]) == [1,2,3]\nassert         total_match([1,2,3], [1,2,3,4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     total_match([\"f\", \"f\", \"f\"], [\"f\", \"f\", \"f\"]) == [\"f\"]\nassert     total_match([\"f\", \"f\", \"f\"], [\"f\", \"f\", \"f\"]) == [\"f\"]\nassert     total_match([\"f\", \"f\", \"f\"], [\"f\", \"f\", \"f\"]) == []\nassert     total_match([\"f\", \"f\", \"f\"], [\"f\", \"f\"]) == []\nassert     total_match([\"f\", \"f\", \"f\"], [\"f\"]) == []\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     total_match([], []) == []\nassert     total_match([], [1]) == [1]\nassert     total_match([], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     total_match([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     total_match([1, 2, 3, 4], ['a']) == [1, 2, 3, 4]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     total_match([1, \"sh\", \"el\", \"abc\", \"123\"], [1, \"sh\", \"el\", \"abc\", \"123\"]) == [1, \"sh\", 123]\nassert total_match([1, \"sh\", \"el\", \"abc\", \"123\"], [1, \"sh\", \"el\", \"abc\"]) == [\"sh\", 123]\nassert total_match([1, \"sh\", \"el\", \"abc\", \"123\"], [\"sh\", \"el\", \"abc\", \"123\"]) == [\"sh\", 123]\nassert total_match([1, \"sh\", \"el\", \"abc\", \"123\"], [\"sh\", \"el\", \"abc\", \"123\", \"456\"]) == [\"sh\", \"el\", \"abc\", \"123\", \"456\"]\nassert total_match([1, \"sh\", \"el\", \"abc\", \"123\"], [\"sh\", \"el\", \"abc\", \"123\", \"456\"]) == [\"sh\", \"el\", \"abc\", \"123\", \"456\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \ntotal_match(['sat','sat','satu','satu'], ['satu','satu','satu','satu']) == ['sat','satu']\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     total_match(['hello','goodbye','nothing', 'goodbye'], ['hello', 'goodbye', 'nothing']) == ['goodbye', 'goodbye']\nassert total_match(['hello', 'goodbye'], ['hello', 'goodbye']) == []\nassert total_match(['hello', 'goodbye', 'nothing'], ['hello', 'goodbye', 'nothing']) == ['goodbye', 'goodbye']\nassert total_match([], []) == []\nassert total_match(['hello', 'goodbye', 'hello'], ['hello', 'goodbye', 'hello']) == ['goodbye', 'goodbye']\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     total_match([], ['g', 'r', 't']) == ['r', 't']\nassert     total_match(['hello', 'there'], ['there', 'hello']) == ['there']\nassert     total_match(['hello', 'there'], ['there', 'hello', 'there']) == ['there', 'there']\nassert     total_match(['how', 'are', 'you'], ['are', 'you', 'are']) == ['are', 'you']\nassert     total_match(['how', 'are', 'you'], ['are', 'you', 'are']) == []\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         total_match([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert         total_match([1, 2, 3], [4, 3, 2, 1]) == [1, 2, 3, 4]\nassert         total_match([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert         total_match([1, 2, 3, 4], [1, 2, 3, 4, 5]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     total_match(['chocolate', 'cake', 'hannah', 'numbers'], ['chocolate', 'cake', 'hannah', 'numbers']) == ['cake', 'hannah', 'numbers'], \"incorrect\"\nassert     total_match(['chocolate', 'cake', 'hannah', 'numbers'], ['chocolate', 'cake', 'hannah', 'apple']) == ['apple'], \"incorrect\"\nassert     total_match(['chocolate', 'cake', 'hannah', 'numbers'], ['chocolate', 'cake', 'hannah', 'numbers']) == ['chocolate'], \"incorrect\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_multiply_prime(9) == True\nassert     is_multiply_prime(2) == True\nassert     is_multiply_prime(3) == False\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(5) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_multiply_prime(0) == True\nassert     is_multiply_prime(1) == True\nassert     is_multiply_prime(2) == True\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_multiply_prime(1)\nassert     is_multiply_prime(2)\nassert     is_multiply_prime(3)\nassert     is_multiply_prime(4)\nassert     is_multiply_prime(5)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_multiply_prime(12345) == False\nassert     is_multiply_prime(0) == False\nassert     is_multiply_prime(1) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(11) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(2) == False\nassert     is_multiply_prime(3) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         is_multiply_prime(7) == True\nassert         is_multiply_prime(8) == False\nassert         is_multiply_prime(13) == True\nassert         is_multiply_prime(17) == False\nassert         is_multiply_prime(31) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_multiply_prime(6) == True\nassert     is_multiply_prime(5) == False\nassert     is_multiply_prime(13) == True\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(41) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_multiply_prime(7) == True\nassert     is_multiply_prime(14) == True\nassert     is_multiply_prime(17) == True\nassert     is_multiply_prime(100) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_multiply_prime(0) == True\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(5) == False\nassert     is_multiply_prime(10) == False\nassert     is_multiply_prime(100) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == True\nassert     is_multiply_prime(21) == False\nassert     is_multiply_prime(14) == True\nassert     is_multiply_prime(120) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_simple_power(2, 1) == True\nassert     is_simple_power(2, 2) == False\nassert     is_simple_power(2, 3) == True\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(2, 5) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_simple_power(2, 4) == True\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(2, 2) == False\nassert     is_simple_power(2, 1) == True\nassert     is_simple_power(2, 0) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_simple_power(5, 4) == True\nassert     is_simple_power(8, 3) == True\nassert     is_simple_power(5, 0) == False\nassert     is_simple_power(5, 1) == True\nassert     is_simple_power(8, 0) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_simple_power(5, 2) == False\nassert     is_simple_power(1, 3) == True\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(2, 2) == False\nassert     is_simple_power(2, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(2, 5) == True\nassert     is_simple_power(2, 8) == False\nassert     is_simple_power(3, 1) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_simple_power(3, 8) is True\nassert     is_simple_power(4, 3) is False\nassert     is_simple_power(2, 2) is True\nassert     is_simple_power(0, 0) is True\nassert     is_simple_power(1, 0) is False\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(1, 3) == False\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_simple_power(2, 10) == True, \"simple_power function returns False\"\nassert     is_simple_power(2, 20) == True, \"simple_power function returns False\"\nassert     is_simple_power(3, 1) == False, \"simple_power function returns True\"\nassert     is_simple_power(3, 5) == False, \"simple_power function returns True\"\nassert     is_simple_power(2, -10) == True, \"simple_power function returns False\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_simple_power(5, 3) == True\nassert     is_simple_power(5, 4) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     isfunc(iscube(4)) == False\nassert     isfunc(iscube(5)) == False\nassert     isfunc(iscube(6)) == True\nassert     isfunc(iscube(3)) == True\nassert     isfunc(iscube(7)) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     iscube(5) == True\nassert     iscube(1) == True\nassert     iscube(6) == False\nassert     iscube(0) == False\nassert     iscube(3) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     iscube(1)\nassert     iscube(4)\nassert     iscube(7)\nassert     iscube(27)\nassert     iscube(38)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     iscube(3) == True\nassert iscube(4) == False\nassert iscube(5) == True\nassert iscube(6) == True\nassert iscube(7) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     iscube(4) == True\nassert     iscube(3) == True\nassert     iscube(0) == False\nassert     iscube(1) == False\nassert     iscube(2) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     iscube(3) == True\nassert     iscube(4) == False\nassert     iscube(0) == True\nassert     iscube(1) == False\nassert     iscube(-3) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     iscube(5) == True\nassert     iscube(9) == False\nassert     iscube(3) == True\nassert     iscube(8) == True\nassert     iscube(6) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     iscube(1) == True\nassert     iscube(2) == False\nassert     iscube(4) == False\nassert     iscube(6) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     iscube(5) == True\nassert     iscube(1) == False\nassert     iscube(2) == True\nassert     iscube(5) == True\nassert     iscube(2) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     isfcube(3) == True, \"Checking iscube\"\nassert     isfcube(3) == True, \"Checking iscube\"\nassert     isfcube(10) == True, \"Checking iscube\"\nassert     isfcube(10) == True, \"Checking iscube\"\nassert     isfcube(5) == True, \"Checking iscube\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     hex_key(5)==5\nassert     hex_key(11)==0\nassert     hex_key(13)==3\nassert     hex_key(17)==0\nassert     hex_key(20)==1\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     hex_key(123) == 1\nassert     hex_key(44) == 2\nassert     hex_key(1) == 0\nassert     hex_key(0) == 0\nassert     hex_key(1) == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     hex_key(123) == 2\nassert     hex_key(\"foo\") == \"a\"\nassert     hex_key(0) == \"a\"\nassert     hex_key(\"a\") == \"a\"\nassert     hex_key(\"\") == \"a\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     hex_key(\"0011010\") == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 19, 21, 23, 25]\nassert     hex_key(\"10\") == [10]\nassert     hex_key(\"abcdef\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 19, 21, 23, 25]\nassert     hex_key(\"123456789\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 19, 21, 23, 25]\nassert     hex_key(\"1234\") == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 17, 19, 21, 23, 25]\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     hex_key(7), 'The function should have a parameter as 7'\nassert     hex_key(1), 'The function should have a parameter as 1'\nassert     hex_key(11), 'The function should have a parameter as 11'\nassert     hex_key(13), 'The function should have a parameter as 13'\nassert     hex_key(17), 'The function should have a parameter as 17'\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     hex_key(11)==2\nassert     hex_key(3)==5\nassert     hex_key(7)==11\nassert     hex_key(15)==17\nassert     hex_key(13)==13\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     hex_key(0) == '0'\nassert     hex_key(1) == '1'\nassert     hex_key(2) == '3'\nassert     hex_key(3) == '7'\nassert     hex_key(4) == 'F'\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef is_prime(num):\n    \"\"\"You have been tasked to write a function that checks whether a \n    number is a prime number.\n    A prime number is a natural number greater than 1 that is not a product \n    of two smaller natural numbers.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         hex_key(0) == 0\nassert         hex_key(1) == 1\nassert         hex_key(2) == 2\nassert         hex_key(3) == 3\nassert         hex_key(4) == 4\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     hex_key(5)==0\nassert     hex_key(10)==1\nassert     hex_key(15)==2\nassert     hex_key(18)==3\nassert     hex_key(19)==5\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     decimal_to_binary(1) == \"11\"\nassert     decimal_to_binary(2) == \"1001\"\nassert     decimal_to_binary(3) == \"00110\"\nassert     decimal_to_binary(4) == \"0001\"\nassert     decimal_to_binary(5) == \"0000\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     decimal_to_binary(3) == \"1\"\nassert     decimal_to_binary(16) == \"0b11100000\"\nassert     decimal_to_binary(45) == \"0b1111\"\nassert     decimal_to_binary(2) == \"0\"\nassert     decimal_to_binary(3.3) == \"0b1\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     decimal_to_binary(1) == '0101'\nassert     decimal_to_binary(2) == '0001'\nassert     decimal_to_binary(3) == '1101'\nassert     decimal_to_binary(4) == '0000'\nassert     decimal_to_binary(5) == '0000'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     decimal_to_binary(22) == '110110'\nassert     decimal_to_binary(21) == '00010111'\nassert     decimal_to_binary(11) == '111111'\nassert     decimal_to_binary(22) == '111010011111010001'\nassert     decimal_to_binary
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '0001'\nassert     decimal_to_binary(3) == '00010001'\nassert     decimal_to_binary(4) == '00011010'\nassert     decimal_to_binary(5) == '00011011'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     decimal_to_binary(123) == \"1011\"\nassert     decimal_to_binary(124) == \"1100\"\nassert     decimal_to_binary(125) == \"1101\"\nassert     decimal_to_binary(12345) == \"101111011011000100011010101101101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     decimal_to_binary(3) == '1111'\nassert     decimal_to_binary(4) == '11101'\nassert     decimal_to_binary(4) == '11'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(2) == '00'\nassert     decimal_to_binary(3) == '0001'\nassert     decimal_to_binary(4) == '0000'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     decimal_to_binary(123) == \"001\"\nassert     decimal_to_binary(45) == \"001\"\nassert     decimal_to_binary(321) == \"1111\"\nassert     decimal_to_binary(1234) == \"1111\"\nassert     decimal_to_binary(1234567) == \"1111\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_happy(\"abc\") == True\nassert     is_happy(\"aabb\") == False\nassert     is_happy(\"aabb\") == True\nassert     is_happy(\"aaab\") == False\nassert     is_happy(\"aa\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_happy('aabbbccdeeffggddrtyytrttqr'    ) == True\nassert     is_happy('aaabd'    ) == False\nassert     is_happy('aabd'    ) == True\nassert     is_happy('aaabbbcccddeeffgtrtyytrttqr'    ) == True\nassert     is_happy('aaabd'    ) == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_happy('abba') == True\nassert     is_happy('abc') == True\nassert     is_happy('abcabc') == True\nassert     is_happy('nopnop') == False\nassert     is_happy('nopnopnop') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_happy(\"aabbaccc\") == True\nassert     is_happy(\"abaabcdcdababcdcd\") == False\nassert     is_happy(\"a\") == False\nassert     is_happy(\"\") == False\nassert     is_happy(\"aa\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_happy('a') == True\nassert     is_happy('b') == False\nassert     is_happy('ab') == True\nassert     is_happy('aba') == True\nassert     is_happy('ababb') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_happy(\"cafebabacd\") == True, \"Is String in Happy Form? It's not\"\nassert     is_happy(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == True, \"Is String in Happy Form? It's not\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_happy(s = \"aabaa\") == True\nassert     is_happy(s = \"babab\") == True\nassert     is_happy(s = \"a\") == True\nassert     is_happy(s = \"aa\") == True\nassert     is_happy(s = \"aa\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_happy('race') == True, \"False\"\nassert     is_happy('abc') == True, \"False\"\nassert     is_happy('bbb') == True, \"False\"\nassert     is_happy('aa') == True, \"False\"\nassert     is_happy('ddd') == False, \"False\""
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_happy('abcde') == True\nassert     is_happy('xyz') == False\nassert     is_happy('abc') == True\nassert     is_happy('aaaa') == True\nassert     is_happy('aaab') == True\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     numerical_letter_grade( [4,3,3,3,3,3,3,3,3,3] ) == [4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0]\nassert     numerical_letter_grade( [3,3,3,3,3,3,3,3,3,3] ) == [3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3]\nassert     numerical_letter_grade( [2,3,3,3,3,3,3,3,3,3] ) == [2.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3, 3.3]\nassert     numerical_letter_grade( [1,3,3,3,3,3,3,3,3,3] ) == [1.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7, 3.7]\nassert     numerical_letter_grade( [0,0,0,0,0,0,0,0,0,0] ) == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     numerical_letter_grade( [ 0.0, 3.0, 3.0, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0 ] ) == [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\"]) == \\\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([3, 4, 4, 4]) == ['A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-']\nassert         numerical_letter_grade([4, 4, 4, 4, 4, 4, 4]) == ['A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-']\nassert         numerical_letter_grade([3, 4, 4, 4, 4, 4, 4, 4]) == ['A+', 'A-', 'B+', 'B-', 'C+', 'C-', 'D+', 'D-']\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     numerical_letter_grade(['A+','A','A-','B+','B','B-','C+','C','C-','D+','D','D-','E']) == ['A','A-','B','B-','C','C-','D','D-','E'], 'Incorrect numeric letter grade'\nassert     numerical_letter_grade(['A','A-','B','B-','C','C-','D','D-','E']) == ['A','A-','B','B-','C','C-','D','D-','E'], 'Incorrect numeric letter grade'\nassert     numerical_letter_grade(['A+','A','B+','B-','C+','C','C-','D+','D','D-','E']) == ['A+','A-','B+','B-','C+','C-','D+','D-','E'], 'Incorrect numeric letter grade'\nassert     numerical_letter_grade(['A+','A','B+','B-','C+','C','C-','D+','D','D-','E']) == ['A+','A-','B+','B-','C+','C-','D+','D-','E'], 'Incorrect numeric letter grade'\nassert     numerical_letter_grade(['A+','A','A','B+','B','B-','C+','C','C-','D+','D','D-','E']) == ['A+','A-','A','B+','B','B-','C+','C-','D+','D-','E'], 'Incorrect numeric letter grade'\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([4.0,3.7]) == ['A+'], 'numerical_letter_grade failed'\nassert     numerical_letter_grade([4.0,3.3]) == ['A'], 'numerical_letter_grade failed'\nassert     numerical_letter_grade([4.0,3.0,3.0]) == ['A+','A','A-'], 'numerical_letter_grade failed'\nassert     numerical_letter_grade([4.0,3.5,3.0]) == ['B+','B','B-'], 'numerical_letter_grade failed'\nassert     numerical_letter_grade([4.0,3.0,3.0,3.0]) == ['A'], 'numerical_letter_grade failed'\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         numerical_letter_grade( [3.0,1.0,2.3,1.0,2.3,1.3,2.3,2.0] ) == [3.0,1.0,2.3,1.0,2.3,1.3,2.3,2.0]\nassert         numerical_letter_grade( [4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0,0.0]) == \"A+\",\"Error in numerical_letter_grade\"\nassert     numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0,0.0]) == \"A+\",\"Error in numerical_letter_grade\"\nassert     numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0,0.0,0.0]) == \"A+\",\"Error in numerical_letter_grade\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     numerical_letter_grade(3.0) == \"A+\"\nassert     numerical_letter_grade(1.0) == \"A\"\nassert     numerical_letter_grade(1.1) == \"A\"\nassert     numerical_letter_grade(3.3) == \"B+\"\nassert     numerical_letter_grade(3.5) == \"B\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     prime_length('') == True\nassert     prime_length('a') == False\nassert     prime_length('abc') == True\nassert     prime_length('pqrstu') == True\nassert     prime_length('c') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     prime_length(\"1\")\nassert     prime_length(\"2\")\nassert     prime_length(\"3\")\nassert     prime_length(\"4\")\nassert     prime_length(\"5\")\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     prime_length(\"123\") == False\nassert     prime_length(\"145\") == True\nassert     prime_length(\"1011\") == False\nassert     prime_length(\"123456789\") == True\nassert     prime_length(\"123456\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     prime_length('abcdefg')\nassert     prime_length('123456789')\nassert     prime_length('ABCDEF')\nassert     prime_length('123456789a')\n\n\ndef a_to_b(string, i, a):\n    \"\"\"Write a function that converts a binary representation of a number to a decimal number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     prime_length(\"A\") == True\nassert     prime_length(\"B\") == False\nassert     prime_length(\"C\") == False\nassert     prime_length(\"D\") == False\nassert     prime_length(\"E\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     prime_length(\"abcdefg\") == True\nassert     prime_length(\"a\") == True\nassert     prime_length(\"123\") == True\nassert     prime_length(\"1234\") == True\nassert     prime_length(\"1234\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \nassert prime_length(\"\")\nassert prime_length(\"a\")\nassert prime_length(\"42\")\nassert prime_length(\"3\")\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     prime_length(\"0\") == False\nassert     prime_length(\"1\") == True\nassert     prime_length(\"3\") == True\nassert     prime_length(\"2\") == True\nassert     prime_length(\"4\") == True\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 3\nassert     starts_one_ends(5) == 4\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(10) == 0\nassert     starts_one_ends(100) == 0\nassert     starts_one_ends(1000) == 1\nassert     starts_one_ends(10000) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     starts_one_ends(1) == 1\nassert starts_one_ends(5) == 2\nassert starts_one_ends(4) == 3\nassert starts_one_ends(9) == 3\nassert starts_one_ends(28) == 3\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         starts_one_ends(8) == 2\nassert         starts_one_ends(16) == 2\nassert         starts_one_ends(32) == 2\nassert         starts_one_ends(64) == 2\nassert         starts_one_ends(128) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     starts_one_ends(0) == 1\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     starts_one_ends(0) == 0\nassert     starts_one_ends(10) == 1\nassert     starts_one_ends(5) == 2\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(1) == 4\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     starts_one_ends(10) == 5\nassert     starts_one_ends(5) == 4\nassert     starts_one_ends(9) == 0\nassert     starts_one_ends(4) == 0\nassert     starts_one_ends(1) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     solve(500) == 20\nassert     solve(1) == 0\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\nassert 'correct' in solve(N=999"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     N in range(10, 1001), 'Input Error: N should be a positive integer. Input: {}'.format(N)\nassert     solve(N) == 21, 'The result is not correct. The function should return 21.'\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     (solve(30)) == '49'\nassert     (solve(16)) == '111'\nassert     (solve(3)) == '111'\nassert     (solve
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     solve(0) == 0\nassert     solve(1) == 1\nassert     solve(2) == 2\nassert     solve(3) == 3\nassert     solve(4) == 4\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     (solve(2) == '110')\nassert     (solve(4) == '11')\nassert     (solve(6) == '0111')\nassert     (solve(13) == '110')\nassert     (solve(113) == '1111')"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     solve(100) == 0\nassert     solve(101) == 1\nassert     solve(102) == 1\nassert     solve(103) == 2\nassert     solve(104) == 2\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     solve(123) == \"011\"\nassert     solve(999) == \"1111\"\nassert     solve(1009) == \"1111\"\nassert     solve(1111) == \"1111\"\nassert     solve(6) == \"11\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     solve(36) == 36\nassert     solve(0) == \"0\""
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     add([\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"c\",\"d\",\"e\"]\nassert     add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     add([]) == []\nassert add([1,2,3,4]) == [1,2,3,4]\nassert add([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert add([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert add([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     add([1, 2, 3, 4, 5]) == [1, 2, 3, 5, 4]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 5, 4, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     add([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     add([]) == []\nassert     add([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     add([1, 3, 5]) == [1, 3, 5]\nassert     add([7, 9]) == [7, 9]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     add([]) == []\nassert add([2,4,6]) == [2,4,6]\nassert add([2,4,6,8]) == [2,4,6,8]\nassert add([2,4,6,8,12,14]) == [2,4,6,8,12,14]\nassert add([2,2,3]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     add([]) == []\nassert     add([1,3,5,7]) == [1,3,5,7]\nassert     add([2,4,6,8]) == [2,4,6,8]\nassert     add([-2,-4,-6,-8]) == [-2,-4,-6,-8]\nassert     add([0,1,2,3]) == [0,1,2,3]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     add([]) == []\nassert add([1]) == [1]\nassert add([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert add([7, 9, 11, 13, 15, 17, 19]) == [7, 9, 11, 13, 15, 17, 19]\nassert add([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     add([1, 3, 5, 7]) == [1, 3, 5, 7, 1, 3, 5, 7]\nassert     add([1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1]\nassert     add([]) == []\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     add([1, 2, 3, 4]) == [1, 2, 3, 4, 6]\nassert     add([1, 3, 5, 7, 9, 11, 13, 15]) == [1, 3, 5, 7, 9, 11, 13, 15]\nassert     add([-1, -2, -3]) == [-1, -2, -3, -4, -5]\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     anti_shuffle('hello world!') == 'world hello'\nassert     anti_shuffle('abcdefghijklmnopqrstuvwxyz') == 'abcfghijklmnopqrstuvwxyz'\nassert     anti_shuffle(' ') ==''\nassert     anti_shuffle('hello world!') == 'hello world! hello world!'\nassert     anti_shuffle('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         anti_shuffle(\"Hello\") == \"lololo\"\nassert         anti_shuffle(\"Hi\") == \"Hi lolo\"\nassert         anti_shuffle(\"Asterisk Perfumes\") == \"perfumes\"\nassert         anti_shuffle(\"Hello    \") == \"lololo Hello\"\nassert         anti_shuffle(\"Hello    There\") == \"Hello There Hello\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     anti_shuffle('This is a test.') == 'This is a test.'\nassert     anti_shuffle('Is this the test?') == 'Is this the test?'\nassert     anti_shuffle('a ') == 'a a'\nassert     anti_shuffle('aa') == 'a a a'\nassert     anti_shuffle('a  b  c  d') == 'a  b  c  d'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     anti_shuffle('GoToBussiness') == 'GtoBussinessGoToBussiness'\nassert     anti_shuffle('GtoBussinessGoToBussinessGoToBussiness') == 'GtoBussinessGoToBussinessGoToBussinessGoToBussiness'\nassert     anti_shuffle('GtoBussinessGoToBussinessGoToBussinessGoToBussinessGoToBussiness') == 'GtoBussinessGoToBussinessGoToBussinessGoToBussinessGoToBussinessGoToBussiness'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     anti_shuffle('abcdefgh') == 'abcd'\nassert     anti_shuffle('abcdefgh') == 'cdefgh'\nassert     anti_shuffle('cdefgh') == 'defgh'\nassert     anti_shuffle('abc') == 'abc'\nassert     anti_shuffle('a') == 'a'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     anti_shuffle('asdasd') == 'dsadasd'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     \"hih\" == anti_shuffle(\"hih hih\")\nassert     \"heh heh\" == anti_shuffle(\"heh heh\")\nassert     \"hello hello\" == anti_shuffle(\"hello hello\")\nassert     \"ello loli loli\" == anti_shuffle(\"ello loli loli\")\nassert     \"hello i am adam\" == anti_shuffle(\"hello i am adam\")\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"This is a string\") == \"Ths is a string\"\nassert     anti_shuffle(\"This is an awesome string\") == \"This is an awesome string\"\nassert     anti_shuffle(\"This is an awesome string\") == \"This is an awesome string\"\nassert     anti_shuffle(\"This is an awesome string\") == \"This is an awesome string\"\nassert     anti_shuffle(\"This is a good string\") == \"This is a good string\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert         anti_shuffle(str(\"car\")) == \"carl car\"\nassert         anti_shuffle(\"car car\") == \"car car car\"\nassert         anti_shuffle(\"carl car\") == \"car car car car car car\"\nassert         anti_shuffle(\"\") == \"\"\nassert         anti_shuffle(\" \") == \" \"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     anti_shuffle('') == ''\nassert     anti_shuffle(' ') ==''\nassert     anti_shuffle('  ') ==''\nassert     anti_shuffle('   ') ==' '\nassert     anti_shuffle('hello') == 'elolhe'\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     get_row([1, 2, 3, 4, 5, 6], 5) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\nassert     get_row([1, 2, 3, 4, 5, 6], 1) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\nassert     get_row([1, 2, 3, 4, 5, 6], 6) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n\n\"\"\"\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     get_row([1, 2], 1) == [1, 2]\nassert     get_row([1, 2], 2) == [1, 2]\nassert     get_row([1, 2], 3) == [1, 2]\nassert     get_row([1, 2], 4) == [1, 2]\nassert     get_row([1, 2], 5) == [1, 2]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     get_row(lst, 1) == [(0, 0), (1, 0)]\nassert     get_row(lst, 2) == [(1, 2), (2, 1)]\nassert     get_row(lst, 3) == [(3, 1), (2, 2)]\nassert     get_row(lst, 4) == [(4, 1), (3, 2)]\nassert     get_row(lst, 5) == [(5, 1), (4, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef print_row(lst, x):\n    \"\"\"\n    Print the row containing x as its first coordinate\n    in the list lst.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     get_row([1, 2, 3], 5) == [(1, 2), (2, 3)]\nassert     get_row([1, 2, 3], 4) == [(1, 2), (2, 3)]\nassert     get_row([1, 2, 3], 5) == [(1, 2), (2, 3)]\nassert     get_row([1, 2, 3], 4) == [(1, 2), (2, 3)]\nassert     get_row([1, 2, 3], 5) == [(1, 2), (2, 3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef get_row_by_name(lst, name):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and string name, find coordinates in lst\n    that match the string name in the column.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     get_row(lst, 1) == [(1, 1)]\nassert     get_row(lst, 3) == [(2, 2), (2, 2), (3, 3)]\nassert     get_row(lst, 4) == [(3, 4), (2, 4), (1, 4)]\nassert     get_row(lst, 5) == [(5, 4), (4, 4), (5, 4)]\nassert     get_row(lst, 6) == [(6, 5), (5, 5), (6, 5)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     get_row([1,2,3,4,5], 2) == [(0,1),(1,0)]\nassert     get_row([1,2,3,4,5], 1) == [(1,2),(0,3)]\nassert     get_row([1,2,3,4,5], 2) == [(0,2),(1,0)]\nassert     get_row([1,2,3,4,5], 3) == [(1,2),(0,1),(0,0)]\nassert     get_row([1,2,3,4,5], 4) == [(1,2,3),(0,1,0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     (get_row([1, 2, 3, 4], 1) == [1, 2, 3, 4])\nassert     (get_row([1, 2, 3, 4], 2) == [1, 2, 3, 4])\nassert     (get_row([1, 2, 3, 4], 3) == [1, 2, 3, 4])\nassert     (get_row([1, 2, 3, 4], 4) == [1, 2, 3, 4])\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef test():\n    pass"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_array([]) == []\nassert sort_array([5, 4, 2, 1]) == [1, 2, 3, 4]\nassert sort_array([-5, -4, -2, -1, 0]) == [-1, -2, -3, -4, 0]\nassert sort_array([1, 1, 2, -1]) == [1, 1, 2, -1]\nassert sort_array([]) == []\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sort_array([]), \"the given array is empty\"\nassert     sort_array([3, 1, 2, 4, 5]), \"the given array is not sorted\"\nassert     sort_array([3, 6, 2, 4, 5]), \"the given array is not sorted\"\nassert     sort_array([1, 8, 6, 3, 5, 4, 2, 7]), \"the given array is not sorted\"\nassert     sort_array([3, 6, 2, 4, 5, 8, 1, 7]), \"the given array is not sorted\"\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\n\n\"\"\"\nMethod 1:\nTo maintain the data structure of each element as a linked list.\nTime complexity: O(n)\nSpace Complexity: O(1)\n\"\"\"\n\ndef sort_array_2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_array([6, 5, 4, 2, 10]) == [5, 4, 2, 6, 10]\nassert     sort_array([1, 5, 6, 7, 8, 9, 9, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     sort_array([1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\n\ndef check_sort(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \nencrypt('hello')\nassert \nencrypt('julia')\nassert \nassert \nencrypt('julia') == 'kq'"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     encrypt(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YMVZ\"\nassert     encrypt(\"PQRSTUVWXYZ\") == \"RXYZ\"\nassert     encrypt(\"Hijklmnopqrstuvwxyz\") == \"YWKL\"\nassert     encrypt(\"FEDCBA\") == \"FGBCA\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         encrypt('Hello') == 'He'\nassert encrypt('a') == 'A'\nassert encrypt('b') == 'B'\nassert encrypt('c') == 'C'\nassert encrypt('d') == 'D'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     encrypt('abcdefg') == 'gcdcdfgh'\nassert     encrypt('abcdefgh') == 'fghcdfg'\nassert     encrypt('abcdefgh') == 'gbcdefg'\nassert     encrypt('cdefgh') == 'ccdefgh'\nassert     encrypt('abc') == 'aacb'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     encrypt('test') == 'ttest'\nassert     encrypt('Testing') == 'ttestTesting'\nassert     encrypt('123456') == '123456789'\nassert     encrypt(123) == '123'\nassert     encrypt('123') == '123'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     encrypt(\"kitty\") == \"cttohuytqfvnq\"\nassert     encrypt(\"hello world\") == \"eghfgqhvbmgch\"\nassert     encrypt(\"hgfgqhvbmgch\") == \"lethawkfdbmjgch\"\nassert     encrypt(\"kitty\") == \"cqhvfhgqmxt\"\nassert     encrypt(\"kitty\") == \"tthwgvfhgqmxt\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     (encrypt(\"Hello\") == \"Hi\")\nassert     (encrypt(\"Hi\") == \"Hi\")\nassert     (encrypt(\"Hello\") == \"Hello\")\nassert     (encrypt(\"Hi\") == \"Oh hi\")\nassert     (encrypt(\"a\") == \"e\")\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     encrypt(\"hello\") == \"lebih\"\nassert     encrypt(\"word\") == \"biju w\"\nassert     encrypt(\"abcd\") == \"zxc\""
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     encrypt('water') == 'erwat'\nassert     encrypt('secret') == 'rscrzt'\nassert     encrypt('abcd') == 'zabcd'\nassert     encrypt('abc') == 'bcd'\nassert     encrypt('xyz') == 'cde'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     next_smallest([1,2,3,4,5,6,7,8,9,10]) == 2, \"next_smallest() should return 2\"\nassert     next_smallest([1,2,3,4,5,6,7,8,9,10,11]) == 11, \"next_smallest() should return 11\"\nassert     next_smallest([1,2,3,4,5,6,7,8,9,10,11,12]) == 12, \"next_smallest() should return 12\"\nassert     next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 13, \"next_smallest() should return 13\"\nassert     next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 14, \"next_smallest() should return 14\"\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     next_smallest([1, 5, 2]) == 5\nassert     next_smallest([1, 2, 4, 5, 6, 7, 8]) == 7\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 4\nassert     next_smallest([1, 2, 3, 6, 7]) == 6\nassert     next_smallest([1, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == 3\nassert     next_smallest([1, 1, 4, 7, 3, 6, 2, 9, 5]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     next_smallest([1,5,8,6,4]) == 5\nassert     next_smallest([3,1,2]) == 1\nassert     next_smallest([5,7,9,0,2]) == 2\nassert     next_smallest([0,0,3,4,5]) == 4\nassert     next_smallest([1,5,8,6,4]) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     next_smallest([1, 3, 2, 1]) == 1\nassert     next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     next_smallest(lst) == next_smallest(lst)[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     next_smallest([4, 6, 8, 10, 12]) == 7\nassert     next_smallest([5, 9, 11, 13, 17]) == 5\nassert     next_smallest([1, 12, 14]) == None\nassert     next_smallest([-1, 3, 8, 9]) == -1\nassert     next_smallest([-3, -4, -3, -3, -4]) == -3\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     next_smallest([]), \"list is empty\"\nassert     next_smallest([4, 3, 6, 2, 1]), \"list is not sorted\"\nassert     next_smallest([3, 2, 1]), \"list has only one element\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_bored(CORRECT_SENTENCE)\nassert not    is_bored(CORRECT_SENTENCE2)\nassert not    is_bored(CORRECT_SENTENCE3)\nassert not    is_bored(CORRECT_SENTENCE4)\n\ndef is_happy(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of happy words. A happy word is a sentence that contains at least one\n    character, at most one character, and does not contain any other\n    letters that repeat.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_bored(\"I\") == 3\nassert     is_bored(\"Hello\") == 2\nassert     is_bored(\"I am fine!\") == 0\nassert     is_bored(\"?\") == 0\nassert     is_bored(\"!I\") == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_bored(\"I didn't do that\") == 1, 'You should be counting the number of boredoms.'\nassert     is_bored(\"I can't do it\") == 1, 'You should be counting the number of boredoms.'\nassert     is_bored(\"Do that\") == 1, 'You should be counting the number of boredoms.'\nassert     is_bored(\"You can't do it\") == 1, 'You should be counting the number of boredoms.'\nassert     is_bored(\"Did I do it\") == 0, 'You should be counting the number of boredoms.'\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_bored(\"i.e. I'm bored\") == True\nassert     is_bored(\"i.e. I'm not bored\") == False\n\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_bored(\"I am bored\") == True\nassert     is_bored(\"hello there\") == False\nassert     is_bored(\"hello, I am bored\") == True\nassert     is_bored(\"i am bored\") == True\nassert     is_bored(\"I am bored\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_bored(\"i\") == 1\nassert     is_bored(\"?\") == 0\nassert     is_bored(\"!?\") == 0\nassert     is_bored(\"i.e\") == 1\nassert     is_bored(\"i.e.!\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_bored(\"I don't do anything.\") == 1\nassert     is_bored(\"I can't do that.\") == 0\nassert     is_bored(\"I can't do that, but I do it.\") == 0\nassert     is_bored(\"I can't do that, but I do it, because I can't do it.\") == 0\nassert     is_bored(\"I can't do that, because I can't do it.\") == 0\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_bored(\"hello\")\nassert     is_bored(\"hello???\")\nassert     is_bored(\"i am a sad dude\")\nassert     is_bored(\"hello world!\")\nassert     is_bored(\"i am a sad\")\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_bored('Is it Bored?') == 1\nassert     is_bored('I am bored.') == 2\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     any_int(3, 0, 1) == True\nassert     any_int(1, 2, 3) == True\nassert     any_int(0, 2, 3) == True\nassert     any_int(2, 0, 3) == True\nassert     any_int(3, 0, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     any_int(1, 1, 1) == True\nassert     any_int(1, 2, 1) == False\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 3, 1) == False\nassert     any_int(1, 3, 2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     any_int(10, 20, 30) == True\nassert     any_int(10, 20, 30) == False\nassert     any_int(10, 10, 10) == False\nassert     any_int(10, 10, 10) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     any_int(1, 1, 1) == True\nassert     any_int(1, 2, 1) == True\nassert     any_int(1, 1, 2) == True\nassert     any_int(1, 2, 2) == True\nassert     any_int(1, 1, 3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     any_int(3, 5, 6) == True\nassert    any_int(0, -7, 5) == True\nassert    any_int(1, 0, -7) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     any_int(3, 2, 4) == True\nassert     any_int(3, 0, 4) == True\nassert     any_int(0, 0, 4) == False\nassert     any_int(4, 4, 4) == False\nassert     any_int(4, 4, 0) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     any_int(1,1,0) == True\nassert     any_int(2,2,0) == False\nassert     any_int(3,3,0) == True\nassert     any_int(0,0,0) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 1) == True\nassert     any_int(1, 1, 0) == False\nassert     any_int(0, 1, 0) == True\nassert     any_int(0, 1, 1) == True\nassert     any_int(1, 2, 1) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1, 2, 4) == False\nassert     any_int(1, 1, 3) == False\nassert     any_int(1, 1, 4) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     any_int(4, 2, 1) == True\nassert    any_int(4, 2, 4) == False\nassert    any_int(1, -1, 0) == True\nassert    any_int(1, 1, 0) == True\nassert    any_int(1, -2, -1) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     encode('') == '', 'Empty string expected'\nassert encode('a') == '', 'A string should be one letter'\nassert encode('Hello, my name is John.') == 'HoLwEnoMnIyO', 'Message should be one letter'\nassert encode('A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z') == 'HJGXQZrSZY', 'Message should be one letter'\nassert encode('Hello, my name is John. I will be a pretty cool fellow.') == 'CjfaWlfQYW', 'Message should be two letters'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     encode('Answering') == 'Answering'\nassert     encode('who is that?') == 'Who is That?'.upper()\nassert     encode('z a b c d') == 'AZBCD'\nassert     encode('f g h i j k l m n o p q r s t u v w x y z') == 'FGHIJKLMNOPQRSTUVWXY'\nassert     encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     encode('foo') == 'foFoo'\nassert     encode('FoO') == 'foFoo'\nassert     encode('foo') == 'foFoo'\nassert     encode('fFoo') == 'foFoo'\nassert     encode('aaaahhhhhhh') == 'aaaaaHHhhh'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     encode(\"a\") == \"aa\"\nassert     encode(\"Ha\") == \"hHa\"\nassert     encode(\"hi\") == \"hi\"\nassert     encode(\"aA\") == \"aaA\"\nassert     encode(\"hiha\") == \"hiha\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     encode('Hello world') == 'leHocDlErWOrLdlErWorLdOrLdlErWOrLdOrLdlErWorLdOrLdlErWOrLdlErWorLdOrLdlErWOrLdlErWOrLdlErWorLdOrLdlErWOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlErWorLdOrLdlE"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     encode('Hello, world!') == 'ElmoWhOolrd!'\nassert     encode('Hello, world!') == 'EloHeLmoW olleH!'\nassert     encode('Hello, world!') == 'elloH leoW olleH!'\nassert     encode('Hi') == 'hiH!'\nassert     encode('hi') == 'hiH!'\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     encode(message=\"Hello\") == \"lloE\"\nassert     encode(message=\"Hi\") == \"HiLo\"\nassert     encode(message=\"lelLo\") == \"LeLoLl\"\nassert     encode(message=\"hello\") == \"hellooo\"\n\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     encode(\"abc\") == \"aab\"\nassert     encode(\"ABC\") == \"AbC\"\nassert     encode(\"aWORD\") == \"AWORD\"\nassert     encode(\"A12\") == \"A12\"\nassert     encode(\"TEST\") == \"TEST\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     encode(\"Hello, world!\") == \"eLleHWWldO!, world!\"\nassert     encode(\"Hello world!\") == \"eLleHWWldO!, world!\"\nassert     encode(\"World hello!\") == \"eLleHWWldO!, hello!\"\nassert     encode(\"heLlEOWorld!\") == \"eLleHWWldO!, hello!\"\nassert     encode(\"aVVVyLlEOWorld!\") == \"eLleHWWldO!, hello!\"\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     skjkasdkd(lst) == 1314, \"Error: skjkasdkd(lst) must return 1314.\"\n\ndef skjkasdkd_sum(lst):\n    \"\"\"You are given a list of integers.\n    You need to return the sum of all its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\nlst = [ 1,2,3,4,5,6,7,8,9,10]\nassert skjkasdkd(lst) == 7\n\nlst = [ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,49"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    \"\"\"Run as a script to test.\"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\nassert     skjkasdkd([2, 3, 5]) == 6\nassert     skjkasdkd([3, 6, 9]) == 45\nassert     skjkasdkd([]) == 0\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     skjkasdkd([2, 3, 5]) == 10\nassert     skjkasdkd([3, 2, 5]) == 10\nassert     skjkasdkd([6, 8, 10, 15, 34, 64, 89, 99, 299]) == 138\nassert     skjkasdkd([7, 8, 9]) == 2\nassert     skjkasdkd([10, 11, 12]) == 27\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef skjkasdkd_check_correct(lst):\n    \"\"\"You are given a list of integers.\n    You need to check if the sum of digits of the list is greater than 3 and then return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     skjkasdkd([])==0 \nassert     skjkasdkd([1,2])==1\nassert     skjkasdkd([2,2])==3\nassert     skjkasdkd([3,3])==5\nassert     skjkasdkd([3,4])==7\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     skjkasdkd([1,2,3,4]) == 15, \"skjkasdkd failed\"\nassert     skjkasdkd([2,3,4,5]) == 5, \"skjkasdkd failed\"\nassert     skjkasdkd([1,0,0,0,0,0,0]) == 0, \"skjkasdkd failed\"\nassert     skjkasdkd([-1,1,0,0,0]) == 0, \"skjkasdkd failed\"\nassert     skjkasdkd([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     check_dict_case({\"a\": \"b\"}) == True\nassert     check_dict_case({\"a\": \"A\", \"b\": \"B\"}) == False\nassert     check_dict_case({\"A\": \"a\", \"B\": \"B\"}) == True\nassert     check_dict_case({\"a\": \"a\", \"b\": \"b\"}) == False\nassert     check_dict_case({\"A\": \"a\", \"a\": \"a\", \"B\": \"b\"}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         check_dict_case({'1':'1','2':'2'})==True\nassert         check_dict_case({'hello':'hello', 'world':'world'})==True\nassert         check_dict_case({'1':'1','2':'2'})==False\nassert         check_dict_case({})==False\nassert         check_dict_case({'1':'1'})==False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     check_dict_case(None) is False\nassert     check_dict_case({\"a\":1}) is True\nassert     check_dict_case({\"a\":1, \"A\":1}) is False\nassert     check_dict_case({\"a\":1, \"a\":1}) is False\nassert     check_dict_case({\"a\":1}) is False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     check_dict_case({\"abc\":1,\"abc\":2}) == True, \\\n    \"Uncorrect dictionary case: \" + str(check_dict_case({\"abc\":1,\"abc\":2}))\nassert     check_dict_case({\"abc\":1,\"abc\":2,\"ABC\":1}) == True, \\\n    \"Uncorrect dictionary case: \" + str(check_dict_case({\"abc\":1,\"abc\":2,\"ABC\":1}))\nassert     check_dict_case({\"abc\":1,\"ABC\":2,\"abc\":2}) == False, \\\n    \"Uncorrect dictionary case: \" + str(check_dict_case({\"abc\":1,\"ABC\":2,\"abc\":2}\"))\nassert     check_dict_case({\"abc\":1,\"abc\":2,\"ABC\":1,\"123\":1}) == False, \\\n    \"Uncorrect dictionary case: \" + str(check_dict_case({\"abc\":1,\"abc\":2,\"ABC\":1,\"123\":1}\"))\nassert     check_dict_case({\"abc\":1,\"abc\":2,\"ABC\":1,\"123\":1,\"12\":1}) == False, \\\n    \"Uncorrect dictionary case: \" + str(check_dict_case({\"abc\":1,\"abc\":2,\"ABC\":1,\"123\":1,\"12\":1}\"))\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == True\nassert     check_dict_case({'a':'A', 'b':'b'}) == True\nassert     check_dict_case({'a':'a', 'b':'b'}) == False\nassert     check_dict_case({'A':'A', 'b':'b'}) == True\nassert     check_dict_case({'A':'a', 'b':'b'}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     check_dict_case({1: 2}) == True\nassert     check_dict_case({'A': 'a', 1: 2}) == True\nassert     check_dict_case({'A': 'a', 1: 2, 3: 4}) == False\nassert     check_dict_case({1: 2, 3: 4, 'ABC': 'ABC'}) == True\nassert     check_dict_case({1: 2, 3: 4, 'ABC': 'ABC', 'D': 'D'}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     check_dict_case({\"hello\": \"HELLO\", \"world\": \"WORLD\"}) == True\nassert     check_dict_case({\"hello\": \"HELLO\", \"world\": \"WORLD\"}) == False\nassert     check_dict_case({\"hello\": \"HELLO\", \"world\": \"WORLD\"}) == False\nassert     check_dict_case({\"hello\": \"HELLO\", \"world\": \"WORLD\"}) == False\nassert     check_dict_case({\"hello\": \"HELLO\", \"world\": \"WORLD\"}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     check_dict_case({}) == True\nassert     check_dict_case({'a': 'a', 'b': 'b', 'c': 'c'}) == True\nassert     check_dict_case({'A': 'A', 'A': 'A', 'A': 'A'}) == False\nassert     check_dict_case({'a': 'a', 'b': 'b', 'c': 'c'}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     check_dict_case({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\", \"d\": \"D\"}) == False, \"should fail\"\nassert     check_dict_case({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\", \"d\": \"D\"}) == True, \"should fail\"\nassert     check_dict_case({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\", \"d\": \"D\", \"e\": \"E\", \"f\": \"F\"}) == False, \"should fail\"\nassert     check_dict_case({\"a\": \"A\", \"b\": \"B\", \"c\": \"C\", \"d\": \"D\", \"e\": \"E\", \"f\": \"F\", \"g\": \"G\"}) == True, \"should fail\"\n\ndef dict_compre(dict1, dict2):\n    \"\"\"\n    Given two dictionaries, return the intersection of both of them.\n    The function should return a list, or None if the dictionaries have \n    different keys.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     check_dict_case({'abc':'ABC', 'def':'DEF', 'hij':'IJH'}) == True, \\\n            'False'\nassert     check_dict_case({'a':'a', 'b':'b', 'c':'c'}) == False, \\\n            'False'\nassert     check_dict_case({'A':'A', 'B':'B', 'C':'C'}) == True, \\\n            'False'\nassert     check_dict_case({'A':'a', 'B':'b', 'C':'c'}) == False, \\\n            'False'\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == []\nassert     count_up_to(2) == []\nassert     count_up_to(3) == [2, 3]\nassert     count_up_to(4) == [2, 3, 5, 7]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     count_up_to(0) == []\nassert count_up_to(1) == []\nassert count_up_to(2) == [2]\nassert count_up_to(3) == [3, 2]\nassert count_up_to(4) == [4, 2, 1]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     count_up_to(5) == [1,2,3,5,6,8,9]\nassert     count_up_to(-1) == [0]\nassert     count_up_to(0) == [0]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     count_up_to(5) == [2, 3, 5, 7]\nassert     count_up_to(10) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\nassert     count_up_to(0) == []\nassert     count_up_to(-1) == []\nassert     count_up_to(-2) == []"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     count_up_to(1) == 1\nassert     count_up_to(2) == 2\nassert     count_up_to(4) == 3\nassert     count_up_to(12) == 8\nassert     count_up_to(50) == 50\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == [1]\nassert     count_up_to(2) == [2, 2]\nassert     count_up_to(3) == [3, 3, 3]\nassert     count_up_to(4) == [4, 4, 4]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     count_up_to(4) == [2, 3, 5]\nassert     count_up_to(0) == []\nassert     count_up_to(6) == [2, 3, 5, 7]\nassert     count_up_to(1) == [1]\nassert     count_up_to(9) == [1, 3, 5]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7, 11]\nassert count_up_to(0) == [1]\nassert count_up_to(2) == [2]\nassert count_up_to(-1) == []\nassert count_up_to(-2) == [2]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     count_up_to(1) == [1]\nassert     count_up_to(2) == [1, 2]\nassert     count_up_to(3) == [1, 2, 3]\nassert     count_up_to(4) == [1, 2, 3, 4]\nassert     count_up_to(5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     multiply(0, 0) == 0\nassert     multiply(1, 2) == 2\nassert     multiply(0, 1) == 1\nassert     multiply(1, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     multiply(5, 5) == 25\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     multiply(2, 10) == 20\nassert     multiply(1, 5) == 25\nassert     multiply(5, 2) == 1\nassert     multiply(5, 3) == 5\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     multiply(1, 8) == 128\nassert     multiply(1, 1) == 1\nassert     multiply(1, 0) == 0\nassert     multiply(0, 9) == 0\nassert     multiply(1, 0) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     multiply(2, 3) == 6\nassert     multiply(2, 4) == 8\nassert     multiply(2, 5) == 16\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     multiply(2, 5) == 10\nassert     multiply(2, 1) == 2\nassert     multiply(2, 0) == 2\nassert     multiply(2, -3) == -4\nassert     multiply(2, -10) == 2\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     multiply(4, 4) == 16\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     multiply(123, 456) == 123\nassert     multiply(200, 3.5) == 200\nassert     multiply(123, 0) == 0\nassert     multiply(1, -1) == -1\nassert     multiply(1, -2) == -2\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     count_upper(\"PYTHON\") == 1, \"count_upper(s) should return 1.\"\nassert     count_upper(\"PYTHON\") == 1, \"count_upper(s) should return 1.\"\nassert     count_upper(\"PYTHON\") == 1, \"count_upper(s) should return 1.\"\nassert     count_upper(\"PYTHON\") == 1, \"count_upper(s) should return 1.\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     count_upper(S) == 7\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('a') == 1\nassert     count_upper('AA') == 2\nassert     count_upper('AAA') == 2\nassert     count_upper('AAAA') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     count_upper('python') == 3\nassert     count_upper('PYTHON') == 3\nassert     count_upper('PYTHON_') == 2\nassert     count_upper('Python') == 2\nassert     count_upper('PYTHON') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     count_upper('Hello') == 2\nassert     count_upper('Hola') == 3\nassert     count_upper('HeLlO') == 3\nassert     count_upper('hHeLlO') == 3\nassert     count_upper('hEloO') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     count_upper('abba') == 2\nassert     count_upper('aabb') == 1\nassert     count_upper('ababa') == 1\nassert     count_upper('Aabb') == 1\nassert     count_upper('bbaA') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     count_upper('eeeeeeeeeeeeeeello') == 3\nassert     count_upper('Yeeeeeeeeeeeeeeeello') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('a') == 1\nassert     count_upper('b') == 2\nassert     count_upper('z') == 0\nassert     count_upper('Y') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     count_upper('AaA') == 3\nassert     count_upper('aA') == 1\nassert     count_upper('AaAa') == 2\nassert     count_upper('AaAaA') == 2\nassert     count_upper('AaAaAa') == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('a') == 0\nassert     count_upper('A') == 0\nassert     count_upper('AA') == 0\nassert     count_upper('aaaa') == 4\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert         closest_integer(\"-14.5\") == -15.\nassert         closest_integer(\"14.5\") == 15.\nassert         closest_integer(\"0.5\") == 0.\nassert         closest_integer(\"8.4\") == 8.4\nassert         closest_integer(\"9.2\") == 9.2\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert         closest_integer(\"12.5\") == 12.5\nassert         closest_integer(\"123.5\") == 123.5\nassert         closest_integer(\"-123.5\") == -123.5\nassert         closest_integer(\"123.5.0\") == 123.5\nassert         closest_integer(\"12.5.0\") == 12.5\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-1.5\") == -1\nassert     closest_integer(\"1.5\") == 1\nassert     closest_integer(\"0\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     closest_integer(2) == 2\nassert     closest_integer(\"3\") == 3\nassert     closest_integer(\"-1\") == -1\nassert     closest_integer(\"2.5\") == 2\nassert     closest_integer(\"0\") == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     closest_integer(\"12.1\") == 12\nassert     closest_integer(\"13.2\") == 13\nassert     closest_integer(\"1.5\") == 1\nassert     closest_integer(\"1.3\") == 1.3\nassert     closest_integer(\"5.5\") == 5.5\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     closest_integer(14.5) == 15\nassert     closest_integer(1234.5) == 1234\nassert     closest_integer(-1234.5) == -1234\nassert     closest_integer(0) == 0\nassert     closest_integer(-1) == -1\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     closest_integer(\"5.3\") == 5.3\nassert closest_integer(\"-7\") == 7\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     closest_integer(\"1.0\") == 1.0\nassert     closest_integer(\"5.2\") == 5.2\nassert     closest_integer(\"9.0\") == 9.0\nassert     closest_integer(\"10.1\") == 10.1\nassert     closest_integer(\"11.1\") == 11.1\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         closest_integer(\"6.5\") == 7\nassert closest_integer(\"4.5\") == 4\nassert closest_integer(\"-6.5\") == -6\nassert closest_integer(\"5\") == 5\nassert closest_integer(\"0\") == 0\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     make_a_pile(10) == 5\n\ndef make_a_pile_recursive(n):\n    if n == 0:\n        return []\n    elif n % 2 == 0:\n        return [n//2] + make_a_pile_recursive(n//2)\n    else:\n        return [n] + make_a_pile_recursive(n-1)\n\nassert     make_a_pile_recursive(10) == 5\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     make_a_pile(1) == 0, \"First level should be 0\"\nassert     make_a_pile(2) == 2, \"Second level should be 2\"\nassert     make_a_pile(3) == 2, \"Third level should be 2\"\nassert     make_a_pile(4) == 4, \"Fourth level should be 4\"\nassert     make_a_pile(5) == 4, \"Fifth level should be 4\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\n\nprint(make_a_pile(2))\nprint(make_a_pile(5))\nprint(make_a_pile(10))\nprint(make_a_pile(100))\n\n\ndef make_a_doubly_piled_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a doubly piled pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     make_a_pile(0) == 0\nassert     make_a_pile(1) == 1\nassert     make_a_pile(2) == 2\nassert     make_a_pile(3) == 2\nassert     make_a_pile(4) == 2\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     make_a_pile(n) == 3\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     make_a_pile(0) == 0\nassert     make_a_pile(1) == 1\nassert     make_a_pile(2) == 2\nassert     make_a_pile(3) == 3\nassert     make_a_pile(4) == 4\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n    \n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     words_string('Hello') == ['Hello']\nassert     words_string('Hi') == ['Hi']\nassert     words_string('Hello, World!') == ['Hello', 'World']\nassert     words_string('One, Two, Three') == ['One', 'Two', 'Three']\nassert     words_string('One, \"Two\", Three') == ['One', '\"Two\"', 'Three']\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     words_string('qwertyuiop') == ['qwertyuiop', 'qwerty', 'q', 'q']\nassert     words_string('Hello, my name is laura and i\\'m working') == ['hello, my name is laura and i\\'m', 'working']\nassert     words_string('This is a sentence') == ['this', 'is', 'a','sentence']\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     words_string(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert     words_string(\"   \") == []\nassert     words_string(\"  hello  world!  \") == ['h', 'e', 'l', 'o', 'w', 'r', 'l', 'l', 'l', 'd', '!']\nassert     words_string(\"    \") == []\nassert     words_string(\"hello\") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     words_string('hello world') == ['hello', 'world']\nassert     words_string('foo bar') == ['foo', 'bar']\nassert     words_string('aaaaaaaaaaaaaa') == []\nassert     words_string(')') == ['', ')']\nassert     words_string('a b c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     words_string('hello, world!') == ['hello', 'world']\nassert     words_string('i like cheese') == ['i', 'like', 'cheese']\nassert     words_string('I like cheese') == ['I', 'like', 'cheese']\nassert     words_string('i like cheese, world!') == ['i', 'like', 'cheese', 'world']\nassert     words_string('I like cheese, world!') == ['I', 'like', 'cheese', 'world']\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     (is_valid_word(words_string('boisie'))) == [\n    'boise',\n    'is',\n    'i',\n    'se',\n    'lo',\n    'bon',\n    'bie',\n    'shi',\n    'de',\n    'the',\n    'be',\n    'j',\n    'e',\n    'er',\n    'avec',\n    'je',\n    'that',\n    'thou',\n    'ave',\n    'the',\n    'words',\n    'are',\n    'easy',\n    'way',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'enough',\n    'that',\n    'way',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n    'best',\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     words_string(\"...,..\") == [''.join(list(word for word in string)) for string in \n                                                [''.join(list(word for word in string.split())) \n                                                    if word not in ['.', ',',''] ]"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     words_string('A b c') == ['A', 'b', 'c']\nassert     words_string('A c') == ['A', 'c']\nassert     words_string('A') == ['A']\nassert     words_string('a') == ['a']\nassert     words_string('a,b,c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     choose_num(4, 5) == 4\nassert     choose_num(0, 5) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     choose_num(-1, -2) == -1\nassert     choose_num(-2, -3) == -2\nassert     choose_num(-3, -4) == -3\nassert     choose_num(-4, -5) == -4\nassert     choose_num(-5, -6) == -5\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     choose_num(10, 20) == 10\nassert     choose_num(10, 30) == 10\nassert     choose_num(5, 20) == 5\nassert     choose_num(1, 1) == -1"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     choose_num(1, 3) == 1\nassert     choose_num(2, 3) == -1\nassert     choose_num(-1, 3) == -1\nassert     choose_num(-4, 3) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     choose_num(3, 4) == 4\nassert     choose_num(5, 4) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     choose_num(10, 10) == 10\nassert     choose_num(10, 1000) == 10\nassert     choose_num(1000, 10) == 1000\nassert     choose_num(1000, 1000) == -1\n\ndef choose_num_except(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] exclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     choose_num(3, 4) == -1\nassert choose_num(-1, 0) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     choose_num(1, 100) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     choose_num(1, 100) == -1\nassert     choose_num(1, 101) == -1\nassert     choose_num(1, 101.0) == -1\nassert     choose_num(1, -1001) == -1\nassert     choose_num(1, -10001) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     choose_num(100, 10) == -1\nassert choose_num(7, 9) == -1\nassert choose_num(10, 1) == 10\nassert choose_num(10, 10) == 10\nassert choose_num(10, -10) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \nrounded_avg(9, 9) == 6.67"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    \"\"\"You are given a positive integer n, and you are also given two positive integers\n    m and n. You need to compute the average of all the integers from n through\n    m (including n and m). Round the answer to the nearest integer and convert\n    that to binary.\n\n    Note: If you have a answer within the inclusive range of 0 - 2 inclusive, you\n    should return the answer in binary.\n\n    Example 1:\n    Input: n = 10, m = 5\n    Output: \"011\"\n    Explanation:\n    For n = 10 and m = 5, you need to compute the average of 0 through 4,\n    extract the 2 digits from the average, and concatenate them to\n    create the answer. The average is \"011\" in binary.\n\n    Example 2:\n    Input: n = 9, m = 9\n    Output: \"0\"\n    Explanation:\n    For n = 9 and m = 9, you need to compute the average of 0 through 9,\n    extract the 2 digits from the average, and concatenate them to\n    create the answer. The average is \"0\" in binary.\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     rounded_avg(3, 0) == 1, \"rounded_avg(3, 0)\"\nassert     rounded_avg(5, 2) == 0, \"rounded_avg(5, 2)\"\nassert     rounded_avg(6, 3) == -1, \"rounded_avg(6, 3)\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \nassert rounded_avg(1, 0) == 1\nassert rounded_avg(2, 0) == 2\nassert rounded_avg(3, 0) == -1\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     unique_digits([]), \"Empty list\"\nassert     unique_digits([1,2,3,4,5,6,7,8,9,0]), \"Necessary digit\"\nassert     unique_digits([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     unique_digits([2,1,2,1,3,2,3,3,4,2,5,6,6]) == [2,3,4,5,6,6,6,7,8]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     unique_digits([10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4]\nassert     unique_digits([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     unique_digits([2, 3, 5, 6, 7]) == []\nassert     unique_digits([1, 5, 10]) == []\nassert     unique_digits([0, 1, 2, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'expected [1, 2, 3, 4, 5] but found [1, 2, 3, 4, 5]'\nassert     unique_digits([6, 7, 8, 9, 0]) == [6, 7, 8, 9, 0], 'expected [6, 7, 8, 9, 0] but found [6, 7, 8, 9, 0]'\nassert     unique_digits([9, 9, 9, 9, 9, 9, 0, 0]) == [9, 9, 9, 9, 9, 9, 9, 9], 'expected [9, 9, 9, 9, 9, 9, 9, 9] but found [9, 9, 9, 9, 9, 9, 9, 9]'\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     unique_digits([9,3,9,9,3,9]) == [9,3,9]\nassert     unique_digits([1,1,1,1]) == [1,1,1]\nassert     unique_digits([]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 8, 9, 10]\nassert     unique_digits([1, 2, 3, 4, 5, 5, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 5, 7, 8, 9, 10]\nassert     unique_digits([1, 2, 3, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 5, 6, 7, 8, 9, 10]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 8, 9, 10]\nassert     unique_digits([1, 2, 3, 4, 5, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     unique_digits([1, 2, 2, 5]) == [2, 5]\nassert     unique_digits([6, 8, 9]) == [6]\nassert     unique_digits([4, 4, 4, 4, 4, 4, 4]) == [4, 4]\nassert     unique_digits([4, 4, 4, 4, 4, 4, 4, 4]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     unique_digits([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nassert     unique_digits([9, 9, 9, 9, 9, 9]) == [9]\nassert     unique_digits([2, 4, 6, 9, 12]) == [2, 4, 6, 9, 12]\nassert     unique_digits([2, 3, 4, 6, 7, 8, 9, 10]) == [2, 3, 4, 6, 7, 8, 9, 10]\nassert     unique_digits([7, 8, 9, 10]) == [7, 8, 9, 10]\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"numbers = [3, 4, 4, 2, 7, 2, 7, 5, 6, 4]\")\nprint(\"Exception :\")\nprint(\"[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\")\n\nassert\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"numbers = [6, 5, 4, 3, 5, 7, 8, 4, 3, 5]\")\nprint(\"Exception :\")\nprint(\"[6, 5, 4, 3, 5, 7, 8]\")\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \nassert by_length([1,2,3,4,5,6,7,8,9,10,11,12]) == [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert by_length([1,3,4,6,2,7,8,9,10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert by_length([1,2,3,4,5,6]) == [5, 6, 4, 3, 2, 1]\nassert by_length([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1, 9, 10, 11, 12, 13, 2, 8, 7, 6, 5, 4, 3, 4, 5, 3, 4, 6, 2, 7, 1, 10, 11, 12, 13]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     by_length(range(1, 10)) == [1, \"Two\", 3, \"Four\", 4, \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length(list(\"1\")) == [1, \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length(list(\"Two\")) == [2, \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length(list(\"Three\")) == [3, \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert     by_length(list(\"Four\")) == [4, \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     by_length([3, 5, 9, 7]) == [3, 5, 7, 9]\nassert     by_length([0, 8, 2, 4]) == [0, 8, 2, 4]\nassert     by_length([-3, -2, -4, -3]) == [-3, -3, -4, -4]"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef by_num(arr):\n    \"\"\"\n    Given an array of numbers, sort it and print it in ascending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     by_length([1, 3, 4, 2, 5, 9]) == [2, 5, 9, 3, 4, 1]\nassert by_length([]) == []\nassert by_length([1, 1, 1]) == [1, 1, 1]\nassert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0,1,2,3,4,5,6,7,8,9]\nassert     by_length([1, 2, 3, 5, 6, 7, 8, 9, 0, 10]) == [0,1,2,3,5,6,7,8,9,10]\nassert     by_length([1, 3, 5, 7, 8, 9, 0, 10, 12]) == [0,1,3,5,7,8,9,10,12]\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     by_length(array_of_numbers) == array_of_numbers, \"By_length is incorrect\"\n\ndef by_value(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     by_length([2,4,6,8,10,11]) == [2,4,6,8,10,11]\nassert     by_length([9,8,7,6,5,4,3,2,1]) == [9,8,7,6,5,4,3,2,1]\nassert     by_length([1,2,3,4,5,6,7,8,9,0]) == [1,2,3,4,5,6,7,8,9,0]\nassert     by_length([0,2,1,4,7,9,3]) == [0,2,1,4,7,9,3]\nassert     by_length([1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     by_length([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     by_length([]) == []\nassert     by_length([1, 2, 3]) == [1, 2, 3]\nassert     by_length([1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     f(4) == [1, 1, 2, 6, 24]\nassert f(5) == [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\nassert f(6) == [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 128288, 2592000, 6765504, 134217728, 268435456]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     f(5) == [1, 2, 6, 24, 120, 720, 5040, 40320, 3628800, 3628000, 2520000, 25300000, 34280000, 35280000]\nassert     f(11) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     f(0) == 1\nassert     f(1) == 1\nassert     f(2) == 2\nassert     f(3) == 6\nassert     f(4) == 24\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     f(10) == [1, 2, 6, 24]\nassert     f(15) == [1, 2, 3, 6, 15]\nassert     f(60) == [1, 2, 3, 6, 24, 60]\nassert     f(90) == [1, 2, 3, 6, 24, 120, 720, 5040, 40320]\n\nprint('The correctness of f is correct.')\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     f(0) == 1\nassert     f(1) == 1\nassert     f(10) == 53\nassert     f(11) == 210\nassert     f(15) == 20575\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     f(100) == [1,1,2,6,120,720,5040,40320,362880,2438440,2048000,1849600,15961600,14921600,13001600,11800000,100000,1]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     f(1) == 1\nassert     f(3) == 6\nassert     f(6) == 120\nassert     f(10) == 3628800\nassert     f(12) == 327675\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     f(2) == [2,2]\nassert     f(6) == [6,6,6]\nassert     f(0) == []\nassert     f(1) == [1]\nassert     f(20) == [20]\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     f(2) == [2,1]\nassert     f(3) == [3,6,1,2,1]\nassert     f(4) == [4,16,36,24,120]\nassert     f(5) == [5,25,125,25,125]\nassert     f(6) == [6,720,40720,720,40720]\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(3) == (1, 2)\nassert     even_odd_palindrome(4) == (1, 2)\nassert     even_odd_palindrome(5) == (2, 2)\nassert     even_odd_palindrome(12) == (1, 2)\nassert     even_odd_palindrome(13) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(4) == (1,2), \"passed\"\nassert     even_odd_palindrome(5) == (1,3), \"passed\"\nassert     even_odd_palindrome(6) == (1,2), \"passed\"\nassert     even_odd_palindrome(7) == (1,2), \"passed\"\nassert     even_odd_palindrome(8) == (1,2), \"passed\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(10) == (2, 2)\nassert     even_odd_palindrome(9) == (3, 3)\nassert     even_odd_palindrome(8) == (1, 2)\nassert     even_odd_palindrome(4) == (1, 1)\nassert     even_odd_palindrome(5) == (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print \"Example 1: \"\n    print \"Input : \"\n    print \"n = 10\"\n    print \"Exception :\"\n    print \"1\"\n\n    print \"Example 2: \"\n    print \"Input : \"\n    print \"n = 100\"\n    print \"Exception :\"\n    print \"5\"\n\n    print \"Example 3: \"\n    print \"Input : \"\n    print \"n = 1000\"\n    print \"Exception :\"\n    print \"3\"\n\n    print \"Example 4: \"\n    print \"Input : \"\n    print \"n = 1\"\n    print \"Exception :\"\n    print \"2\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(10) == (2, 2)\nassert     even_odd_palindrome(21) == (0, 0)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(100) == (1, 2)\nassert     even_odd_palindrome(5) == (3, 5)\nassert     even_odd_palindrome(1) == (1, 1)\nassert     even_odd_palindrome(0) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(1) == (1, 1)\nassert     even_odd_palindrome(10) == (1, 0)\nassert     even_odd_palindrome(100) == (1, 2)\nassert     even_odd_palindrome(1000) == (1, 3)\nassert     even_odd_palindrome(10000000000) == (1, 9)\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     count_nums([1, 2, 3, -1, -2, 4]) == 5\nassert     count_nums([1, 2, 3, -2, 4, -3]) == 6\nassert     count_nums([1, 2, -3, -1]) == 3\nassert     count_nums([]) == 0\nassert     count_nums([5, -1, -2, 4, -3, -2, -1, 4, -3, 5, -3, 5, -3]) == 9"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     count_nums([123,34,54,1,234,3,-2,1,34]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     count_nums([-1, 2, 3]) == 3\nassert     count_nums([-123]) == 0\nassert     count_nums([1,2,3,4,5]) == 5\nassert     count_nums([1, 2, -1, 2]) == 0\nassert     count_nums([1, 2, 3, 4, 5, -1]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     count_nums([1,2,3]) == 2, \"Incorrect count of numbers\"\nassert     count_nums([-1, 2, 3]) == 1, \"Incorrect count of numbers\"\nassert     count_nums([-1, -2, -3]) == 0, \"Incorrect count of numbers\"\nassert     count_nums([]) == 0, \"Incorrect count of numbers\"\nassert     count_nums([1, 2, 3, 4]) == 4, \"Incorrect count of numbers\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     count_nums([12, -123, -123]) == 2\nassert     count_nums([1, 2, 3, 5, 6, -4, -1]) == 0\nassert     count_nums([]) == 0\nassert     count_nums([-1, -1, -1]) == 1\nassert     count_nums([-1, -1, -123]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     count_nums([-2, -3, -123, -123]) == 2, \"should return 2\"\nassert     count_nums([3, 5, 9, 12, 5, 13, 6, 7]) == 3, \"should return 3\"\nassert     count_nums([-2, 2, -3, -123, -123]) == 1, \"should return 1\"\nassert     count_nums([123, 123, 123, 123, 123]) == 2, \"should return 2\"\nassert     count_nums([123, 12, -123, -123, -123]) == 2, \"should return 2\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     count_nums([-123, -1, 2, 3, 4, 5, -5, 6]) == 3\n\ndef count_pairs(arr):\n    \"\"\"\n    Write a function count_pairs which takes an array of integers and returns\n    the number of pairs which have a sum of digits > 0.\n    Note:\n    sums of digits must be the same, e.g. sum of digits = 3, sum of digits = 9.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     count_nums([9, 1, 2, 3, -4, 6, -2, -9, 5]) == 5\nassert     count_nums([8, -7, 3, 4, -5, 6, -3, -6]) == 5\nassert     count_nums([-6, -5, 3, 1, -2, -4]) == 0\n\nprint(\"Code passed!\""
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     move_one_ball([1,2,3]) == False\nassert     move_one_ball([1,3,2]) == True\nassert     move_one_ball([1,2,4]) == True\nassert     move_one_ball([]) == True\nassert     move_one_ball([1,1,1,1]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\ndef move_one_ball_1(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    The operation will be performed on the given array after the last element\n    of the array will be moved to the starting position in the array i.e. 0th index.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \nmove_one_ball([1,2,3,4,5,6]) is False"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     move_one_ball([1, 2, 3, 4]) == True\nassert     move_one_ball([1, 3, 2, 4]) == True\nassert     move_one_ball([1, 2, 3, 4]) == False\nassert     move_one_ball([1, 3, 2, 4]) == False\nassert     move_one_ball([1, 3, 4, 2]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     move_one_ball([1,2,3,4,5,6]) == True\nassert     move_one_ball([2,1,3,4,5,6]) == False\nassert     move_one_ball([1,5,3,2,4,6]) == True\nassert     move_one_ball([]) == True\nassert     move_one_ball([1,5,3,2,4,6,7]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     move_one_ball([1,2,3,4,5]) == True\nassert     move_one_ball([1,1,1,1,1,1]) == True\nassert     move_one_ball([1,2,3,4,5,5,5]) == True\nassert     move_one_ball([1,2,3,4,5,4]) == False\nassert     move_one_ball([1,2,3,4,5,5,3]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n\ndef move_one_ball_v2(arr):\n    \"\"\"The below example is shown in the readme. Please feel free to read it\n    to show that you have not copied the functions for the other cases.\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    Note: the given list is guaranteed to have unique elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\n\"\"\"\nOn the other hand, we have to modify the test cases to check the correctness of the\nmove_one_ball function.\n\n\"\"\"\n\ndef test_move_one_ball_1():\n    assert move_one_ball([1, 2, 3, 4, 5]) == True\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 3], [3, 4]) == \"NO\", \"wrong\"\nassert     exchange([2, 3, 4], [3, 4]) == \"YES\", \"wrong\"\nassert     exchange([1, 2, 3], [1, 2]) == \"NO\", \"wrong\"\nassert     exchange([1, 2, 3], [3, 4]) == \"NO\", \"wrong\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     exchange(lst1=[], lst2=[]) == \"NO\", \"Exchange should be called on a list of length zero\"\nassert     exchange(lst1=[1, 2, 3, 4, 5], lst2=[2, 3, 4, 5, 6]) == \"YES\", \"Exchange should be called on a list of length one\"\nassert     exchange(lst1=[1, 2, 3, 4, 5], lst2=[5, 6, 7, 8, 9]) == \"NO\", \"Exchange should not be called on a list of length two\"\nassert     exchange(lst1=[1, 2, 3, 4, 5], lst2=[1, 2, 3, 4, 5, 6]) == \"NO\", \"Exchange should not be called on a list of length two\"\nassert     exchange(lst1=[], lst2=[1, 2, 3, 4, 5]) == \"YES\", \"Exchange should be called on a list of length one\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     exchange( [7, 4, 3, 5, 1], [7, 4, 3, 5, 1, 3, 5, 7] ) == \"YES\", \"Exchange function failed\"\nassert     exchange( [7, 4, 3, 5, 1], [3, 5, 7, 4, 3] ) == \"NO\", \"Exchange function failed\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     exchange([1, 2, 3], [3, 2, 1]) == \"NO\"\nassert     exchange([1, 3, 4], [4, 5, 6]) == \"NO\"\nassert     exchange([1, 3, 4], [3, 4, 5]) == \"YES\"\nassert     exchange([1, 3, 4], [3, 5, 6]) == \"NO\"\nassert     exchange([1, 3, 4], [3, 5, 7]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     exchange([5, 3, 2, 1], [4, 3, 2, 1]) == \"NO\"\nassert     exchange([5, 3, 2, 1, 2, 2, 1, 3, 3, 4], [4, 3, 2, 1, 2, 2, 1, 3, 3, 4]) == \"YES\"\nassert     exchange([5, 3, 2, 1, 2, 2, 1, 3, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \"YES\"\nassert     exchange([5, 3, 2, 1, 2, 2, 1, 3, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \"NO\"\nassert     exchange([5, 3, 2, 1, 2, 2, 1, 3, 3, 4], [1, 1, 2, 2, 3, 3, 4, 4, 5, 6]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     exchange([1, 2, 3], [3, 2, 1]) == \"YES\", \"Exchange function failed\"\nassert     exchange([1, 2, 3], [3, 2, 1, 4]) == \"NO\", \"Exchange function failed\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         exchange([1,2,3,4], [2,3,4,5]) == \"YES\", \"exchange([1,2,3,4], [2,3,4,5]) == 'NO'\"\nassert         exchange([1,2,3,4], [3,4,5,6]) == \"YES\", \"exchange([1,2,3,4], [3,4,5,6]) == 'NO'\"\nassert         exchange([1,2,3,4], [1,5,6,7]) == \"YES\", \"exchange([1,2,3,4], [1,5,6,7]) == 'NO'\"\nassert         exchange([1,2,3,4], [1,3,5,6]) == \"YES\", \"exchange([1,2,3,4], [1,3,5,6]) == 'NO'\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     exchange([1,2,3], [1,3,2]) == \"YES\"\nassert     exchange([4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8]) == \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     exchange(lst1, lst2) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     exchange(lst1=[[1,2,3],[4,5,6],[7,8,9]], lst2=[[4,5,6],[1,2,3]]) == \"NO\"\nassert     exchange(lst1=[[1,2,3],[4,5,6],[7,8,9]], lst2=[[3,4,5],[2,1,5],[6,7,8]]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     histogram(\"Hello, world!\") == {'h': 1, 'o': 3, 'e': 2, 'l': 1, 'e': 2, 'l': 1}\nassert     histogram(\"a\") == {'a': 1, 'a': 1, 'a': 1, 'a': 1, 'a': 1}\nassert     histogram(\"Hello, World!\") == {'h': 1, 'o': 1, 'e': 1, 'l': 1, 'e': 1, 'l': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     histogram('a') == {'a': 1}\nassert     histogram('ab') == {'a': 2}\nassert     histogram('aba') == {'a': 3}\nassert     histogram('ba') == {'b': 1}\nassert     histogram('bc') == {'b': 2}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     histogram('joe joe') == {'o': 1, 'e': 1, 'e': 1, 'o': 1}\nassert     histogram('   joe   joe') == {'o': 1, 'e': 1, 'e': 1, 'o': 1}\nassert     histogram('ooOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOoOo"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     histogram(\"aabac\") == {\"a\":2,\"a\":1,\"b\":1,\"c\":1}\nassert     histogram(\"aabccd\") == {\"a\":2,\"a\":1,\"b\":1,\"c\":1,\"d\":1}\nassert     histogram(\"abba\") == {\"a\":2,\"b\":2,\"c\":1}\nassert     histogram(\"abbccccddd\") == {\"a\":2,\"b\":2,\"c\":1,\"d\":2}\nassert     histogram(\"aaabbbccccddd\") == {\"a\":2,\"b\":2,\"c\":1,\"d\":2,\"e\":1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     histogram(\"cababac\") == {'c': 2, 'a': 1, 'b': 2, 'c': 2, 'b': 1, 'c': 2, 'a': 1}\nassert     histogram(\"cababacaba\") == {'c': 2, 'a': 1, 'b': 2, 'c': 2, 'a': 1}\nassert     histogram(\"cabababcba\") == {'c': 2, 'a': 1, 'b': 1, 'c': 2, 'b': 1, 'a': 1}\nassert     histogram(\"cabababcabcba\") == {'c': 3, 'a': 1, 'b': 1, 'c': 2, 'b': 1, 'a': 1}\nassert     histogram(\"cababacba\") == {'c': 2, 'a': 1, 'b': 2, 'c': 2, 'a': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     histogram('a b c d') == {'a': 1, 'b': 2, 'c': 2, 'd': 1}\nassert     histogram('mississippi') == {'i': 3,'s': 5, 'p': 3, 'i': 1,'s': 2,'m': 1}\nassert     histogram('asdfghjklmn') == {'a': 1, 'b': 2, 'c': 2, 'd': 2, 'e': 2, 'f': 2}\nassert     histogram('fls') == {'f': 2, 'l': 1}\nassert     histogram('jklm') == {'k': 1,'m': 1, 'l': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     histogram('foo') == {'f':1, 'o':1, 'f':2, 'o':3, 'o':1, 'o':1}\nassert     histogram('y') == {'y':1, 'o':2, 'o':1, 'o':1}\nassert     histogram('xyz') == {'xyz':3, 'x':1, 'y':1, 'z':1}\nassert     histogram('xyzxyzxyz') == {'xyz':5, 'x':2, 'y':1, 'z':1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     histogram('hello') == {'o':1}\nassert     histogram('Hi') == {'H':1}\nassert     histogram('HIS') == {'H':1}\nassert     histogram('h') == {'H':1}\nassert     histogram('_') == {'_':1}\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     histogram('1 2 3 4 5 6 7 8') == {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8}\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     reverse_delete(s=\"abcd\",c=\"abcd\") == (\"acb\", False)"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     reverse_delete(\"racadabra\", \"race\") == (\n    \"race\", \n    True\n)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     reverse_delete(\"abc\", \"ab\") == (\"cba\", True)\nassert     reverse_delete(\"abc\", \"ba\") == (\"a\", True)\nassert     reverse_delete(\"ab\", \"b\") == (\"b\", True)\nassert     reverse_delete(\"abc\", \"ac\") == (\"c\", True)\nassert     reverse_delete(\"abc\", \"bc\") == (\"b\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     reverse_delete('abc', 'bcd') == ('bcd', True)\nassert     reverse_delete('abcdef', 'abcdef') == ('bcd', True)\nassert     reverse_delete('123', '3') == ('', False)\nassert     reverse_delete('a', 'a') == ('a', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     reverse_delete(\"sea\", \"n\") == (\"eis\", False)\nassert         reverse_delete(\"apple\", \"a\") == (\"aa\", True)\nassert         reverse_delete(\"asasd\", \"aa\") == (\"asasd\", True)\n\ndef palindrome_generator(s):\n    \"\"\"task\n    Given a string s, return True if it is a palindrome, False otherwise.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     reverse_delete(\"a\", \"a\") == (\"a\", True)\nassert     reverse_delete(\"aa\",\"a\") == (\"aa\", True)\nassert     reverse_delete(\"ab\",\"a\") == (\"ba\", True)\nassert     reverse_delete(\"aab\",\"b\") == (\"baaab\", True)\nassert     reverse_delete(\"aabbb\",\"b\") == (\"bbbbaa\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     reverse_delete(\"abc\", \"bca\") == (\"cba\", True)\nassert     reverse_delete(\"abc\", \"cba\") == (\"bca\", False)\nassert     reverse_delete(\"abc\", \"cba\") == (\"bca\", False)\nassert     reverse_delete(\"abc\", \"a\") == (\"ba\", False)\nassert     reverse_delete(\"ba\", \"b\") == (\"a\", False)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     reverse_delete(\"madam\",\"m\") == (\"madam\",\"m\")\nassert     reverse_delete(\"m\",\"m\") == (\"m\",\"m\")\nassert     reverse_delete(\"madam\",\"a\") == (\"madam\",\"a\")\nassert     reverse_delete(\"a\",\"a\") == (\"a\",\"a\")\nassert     reverse_delete(\"a\",\"am\") == (\"a\",\"am\")\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     reverse_delete('abcd', 'cde') == ('dcba', True)\nassert     reverse_delete('abcdefg', 'eee') == ('gfedcba', True)\nassert     reverse_delete('', 'z') == ('', True)\nassert     reverse_delete('a', 'z') == ('z', True)\nassert     reverse_delete('aaa', 'a') == ('aaab', True)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     odd_count([1, 3, 5, 7, 9]) == [2, 4, 6, 8, 10], \\\n    \"'odd_count' should return the same as '[2, 4, 6, 8, 10]\"\nassert     odd_count([0, 1, 2]) == [1, 3, 5, 7, 9], \\\n    \"'odd_count' should return the same as '[1, 3, 5, 7, 9]\"\nassert     odd_count([]) == [], \\\n    \"'odd_count' should return an empty list\"\nassert     odd_count(None) == [], \\\n    \"'odd_count' should return an empty list\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \nassert odd_count([]) == [], \"The function is incorrect.\"\nassert odd_count([\"a\"]) == [], \"The function is incorrect.\"\nassert odd_count([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\"]) == [], \"The function is incorrect.\"\nassert odd_count([\"a\", \"b\", \"c\"]) == [], \"The function is incorrect.\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     odd_count([1, 2, 4]) == [1, 2, 3]\nassert     odd_count([6, 4, 2, 1]) == [6, 4, 2]\n\ndef main():\n    \"\"\"\n    Test the odd_count function.\n    \"\"\"\n    print(\"Testing odd_count...\")\n    for value in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n        print(\"Testing the %s\" % value)\n        print(odd_count([value]))\n        print(odd_count([value, \"hello\", value]))\n        print(odd_count([value, \"hello\", value, value]))\n        print(odd_count([value, \"hello\", value, \"goodbye\", value]))\n        print(odd_count([value, \"hello\", value, \"goodbye\", value, value]))\n        print(odd_count([value, \"hello\", value, \"goodbye\", value, \"hello\", value]))\n        print(odd_count([value, \"hello\", value, \"goodbye\", value, \"hello\", \"goodbye\"]))\n        print(odd_count([value, \"hello\", value, \"goodbye\", value, \"goodbye\"]))\n        print(odd_count([value, \"hello\", value, \"goodbye\", value, \"goodbye\"]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     odd_count([1,2,3,4,5]) == [1,3,5]\nassert     odd_count([4,5,6,7,8,9]) == [4,6]\nassert     odd_count([]) == []\nassert     odd_count([1,2,3]) == []\nassert     odd_count([1,2,3,4]) == [1,4]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     odd_count([]) == []\nassert odd_count([1, 2, 3, 4, 5, 6]) == [3, 4, 5]\nassert odd_count([1, 1, 2, 2, 3, 3]) == [3]\nassert odd_count([1, 1, 2, 2, 3, 3, 4, 4, 5, 6]) == [7]\nassert odd_count([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == [3, 3]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     odd_count([3, 4, 2, 9, 6, 4, 3]) == [2, 4, 6, 9, 9]\nassert     odd_count([1, 2, 3]) == [1, 3]\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     minSubArraySum([-1,2,1,-5,3,2]) == 3\nassert     minSubArraySum([-1,2,1,-5,3,2,0]) == -1\nassert     minSubArraySum([-2,1,-3,2,2,2]) == 0\nassert     minSubArraySum([-1,2,1,-5,3,2,0,0]) == 3\nassert     minSubArraySum([1]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     minSubArraySum([-1]) == 0 \nassert     minSubArraySum([-2, 1, 2, -1, 4]) == 2\nassert     minSubArraySum([-2, 0, 1, 2, -1, 4]) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     minSubArraySum([1, -2, 3, -5, 6]) == 6\nassert     minSubArraySum([-1, 2, -3, -4, -5, 1, 2, -3, 1]) == 5\nassert     minSubArraySum([1, 2, 3]) == 4\nassert     minSubArraySum([3, -2, 1, 2, 5]) == 2\nassert     minSubArraySum([-5, -2, 3, -4]) == 2\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     minSubArraySum([]) == 0\nassert     minSubArraySum([-1]) == 0\nassert     minSubArraySum([-2]) == 0\nassert     minSubArraySum([-3]) == 0\nassert     minSubArraySum([-3, -2, -1]) == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     minSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3]) == 6\nassert     minSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3]) == -3\nassert     minSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3]) == -"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     minSubArraySum([3,4,-1,2]) == 0\nassert     minSubArraySum([3,1,-1,1,2]) == 4\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     minSubArraySum([-2,3,-5,2]) == 2\nassert     minSubArraySum([-2,1,0,3,5]) == 0\nassert     minSubArraySum([-1,-1,0,1,1,1,1]) == 0\nassert     minSubArraySum([4,-3,4,3,2,1]) == 2\nassert     minSubArraySum([4,-3,4,3,2,1]) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     max_fill([[1,1,1],[1,0,1],[1,1,1]], 2) == 3\nassert     max_fill([[1,1,1],[0,1,1],[1,1,1]], 2) == 2\nassert     max_fill([[0,1,1],[0,0,1],[1,1,1]], 2) == 2\nassert     max_fill([[1,1,1],[0,1,1],[0,0,1],[1,0,1]], 3) == 2\n\n\"\"\"\nSome hints:\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     max_fill(np.array([[1,1],[2,1],[2,2],[3,2],[3,3]]), 3) == 3\nassert     max_fill(np.array([[0,0],[0,1],[0,1],[0,2],[1,2],[1,3]]), 3) == 2\n\nif __name__ == '__main__':\n    pass\n\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     max_fill(grid, capacity) ==     2\n\ndef max_fill_with_gap(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     max_fill([[0,0,1,0],[0,0,1,0],[0,1,1,0],[0,0,1,0]],3) == 4, \"The task is invalid!\""
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     max_fill(grid, capacity) == int(math.log(capacity, 2))\n\ndef min_gap(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to find the minimum number of steps to empty a well.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     max_fill(\n    [[0,0,1,0,0,0],[1,0,0,0,1,0],[1,1,1,1,1,1],[0,0,0,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0]],\n    5\n)\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sort_array([1,2,2,3]) == [1,2,3,0]\nassert     sort_array([0,0,0,0,1]) == [0,1,0,1,0]\nassert     sort_array([0,0,1,2,3]) == [0,0,0,1,2]\nassert     sort_array([0,0,1,1,2,2,3]) == [0,1,0,0,0,2,3]\nassert     sort_array([]) == []\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sort_array([0,1,2,2,1,0]) == [0,1,2,2,2,1]\n\nassert sort_array([2,1,2,2,1,0]) == [2,1,2,2,2,1]\nassert sort_array([2,2,1,0]) == [2,2,1,0]\nassert sort_array([0,2,0]) == [0,0,2]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sort_array([]) == []\nassert sort_array([1,2,3,1,1,3]) == [1,1,3,2,3,3]\nassert sort_array([2,2,2,2,1,1,1,1,2,2]) == [1,1,1,2,2,2,2,1,1,2]\nassert sort_array([0,0,0,1,0,1,1,0,1,0]) == [0,1,0,1,1,0,1,0,0,1]\nassert sort_array([0,1,1,1,0,1,0,1,1,1]) == [0,1,1,1,1,0,1,1,1,1]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sort_array([1, 0, 2, 2, 0, 2, 2, 2]) == [2, 1, 0, 2, 2, 2, 2, 0]\nassert     sort_array([]) == []\nassert     sort_array([1, 2, 2]) == [2, 1, 2]\nassert     sort_array([0, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]\nassert     sort_array([1, 1, 2, 2, 0, 0, 1, 1, 2, 1, 2, 0, 2]) == [2, 2, 2, 1, 0, 0, 1, 2, 0, 2, 0, 1, 1, 1, 2]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef sort_array_test():\n    # EXAMPLE\n    assert sort_array([1, 2, 1, 0, 0]) == [0, 1, 2, 0, 1]\n    assert sort_array([5, 5, 5, 5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5, 5, 5, 5]\n    assert sort_array([1, 3, 2, 2, 2, 2]) == [2, 3, 1, 2, 2, 2]\n    "
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sort_array([1, 0, 1]) == [1, 0, 1]\nassert     sort_array([0, 0, 1]) == [0, 0, 1]\nassert     sort_array([1, 0, 0]) == [1, 0, 0]\nassert     sort_array([1, 1, 1, 1]) == [1, 1, 1, 1]\nassert     sort_array([0, 0, 0]) == [0, 0, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sort_array([1, 0, 1, 0, 0]) == [0, 0, 1, 0, 1]\nassert     sort_array([1, 1, 0, 0, 0]) == [0, 0, 1, 0, 1]\nassert     sort_array([1, 1, 1, 1, 1]) == [1, 1, 0, 0, 0]\n\ndef is_binary_number(n):\n    \"\"\"\n    In this Kata, you are going to generate all unique binary numbers that are\n    representing numbers of any length.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sort_array([1,1,0,1,1,1,1,0,1,0,1,0]) == [1,1,0,0,0,0,1,1,1,1,0,0], 'Wrong test'\nassert     sort_array([1,0,1,1,0,0,0,0,1,0,0,1]) == [0,0,0,1,1,1,1,0,0,0,0,1], 'Wrong test'\nassert     sort_array([0,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1]) == [0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1], 'Wrong test'\nassert     sort_array([1,0,1,1,0,0,0,0,1,0,0,1,0]) == [0,0,0,1,1,1,0,0,1,0,0,0,0], 'Wrong test'\nassert     sort_array([1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0]) == [1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sort_array(arr) == sorted(arr)\nassert     sorted(arr) == arr\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sort_array( arr ) == sorted( arr )"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     select_words(\"aaaaabbbccccd\", 2) == [\"aaaa\", \"bbb\", \"ccc\", \"ddd\", \"eeeee\", \"ffff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\", \"ooo\", \"rrr\", \"ttt\", \"uuu\", \"vvv\", \"www\", \"wwt\"]\nassert     select_words(\"aaaabbcc\", 3) == [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eeeee\", \"ffff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\", \"ooo\", \"rrr\", \"ttt\", \"uuu\", \"vvv\", \"www\", \"wwt\"]\nassert     select_words(\"bbbbb\", 0) == []\nassert     select_words(\"aaabbbcc\", 0) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     select_words('hello', 1) == ['h']\nassert     select_words('abc', 1) == ['c']\nassert     select_words('a', 1) == ['a']\nassert     select_words('hello', 2) == ['olleh', 'ello', 'hello', 'ho', 'he', 'hey', 'her', 'hey', 'yee', 'aye', 'yea', 'ya', 'yea']\nassert     select_words('123', 3) == ['123', 'tr', 'er', 'ist', 'ere']\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     select_words(\"brij\",3) == [\"b\", \"r\", \"j\", \"i\", \"g\", \"s\", \"s\", \"r\", \"j\", \"i\", \"g\", \"b\", \"i\"]\nassert     select_words(\"cascc\",3) == [\"c\",\"c\",\"s\", \"c\",\"s\", \"c\",\"c\",\"s\", \"c\",\"s\", \"c\",\"c\",\"s\", \"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\""
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     select_words('bananas', 3) == ['banana', 'bana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', 'banana', "
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     select_words(\"a b c\",1)==[\"a\",\"b\",\"c\"]\nassert     select_words(\"a b c\",2)==[\"a\",\"b\",\"c\"]\nassert     select_words(\"a b c\",3)==[]\nassert     select_words(\"a b c\",4)==[]\nassert     select_words(\"a b c\",5)==[]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     select_words(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     select_words(\"abcdefgh\", 3) == [\"ab\", \"cd\", \"efg\"]\nassert     select_words(\"\", 0) == []\nassert     select_words(\"a\", 0) == [\"a\"]\nassert     select_words(\"\", 2) == []\nassert     select_words(\"a\", 2) == [\"a\", \"a\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \ndef check_words(word_list):\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     get_closest_vowel(word = \"anna\") == \"a\", \"Expected 'anna' to be the closest vowel\"\nassert     get_closest_vowel(word = \"Anna\") == \"\", \"Expected 'Anna' to be the closest vowel\"\n\ndef get_closest_consonant(word):\n    \"\"\"You are given a word. Your task is to find the closest consonant that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't find any\n    vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     get_closest_vowel(\"trash\") == \"t\"\nassert     get_closest_vowel(\"tru\") == \"e\"\nassert     get_closest_vowel(\"trab\") == \"a\"\nassert     get_closest_vowel(\"tre\") == \"er\"\nassert     get_closest_vowel(\"trem\") == \"er\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"Hello\") == \"h\" \nassert     get_closest_vowel(\"HelloWorld\") == \"e\" \nassert     get_closest_vowel(\"aBbBbCc\") == \"\"\nassert     get_closest_vowel(\"HelloThere\") == \"\"\nassert     get_closest_vowel(\"apple\") == \"o\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     get_closest_vowel(\"wiseman\") == \"w\"\nassert     get_closest_vowel(\"tux\") == \"u\"\nassert     get_closest_vowel(\"petro\") == \"p\"\nassert     get_closest_vowel(\"lion\") == \"i\"\nassert     get_closest_vowel(\"kayak\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     get_closest_vowel(\"eerder\") == \"e\"\nassert     get_closest_vowel(\"palm\") == \"n\"\nassert     get_closest_vowel(\"palm\") == \"\""
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         get_closest_vowel('hello') == 'a'\nassert         get_closest_vowel('hello world') == 'o'\nassert         get_closest_vowel('Hello world') == ''\n\ndef get_number_of_consonants(word):\n    \"\"\"Get the number of consonants of a word using helper function.\n    \n    No need to check if the word is a vowel.\n\n    If the word is not a vowel, return 0.\n    \n    You may assume that the given string contains English letter only.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     match_parens(['(())', ')()']) == True\nassert     match_parens([')', '())']) == False\nassert     match_parens([')()()', ')(())']) == True\nassert     match_parens(['(())()', ')()()']) == False\nassert     match_parens([')()()()()', '))())()()']) == True\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     match_parens([]) == 'Yes'\nassert     match_parens([('()', '()()')]) == 'Yes'\nassert     match_parens([(')', '(')]) == 'No'\nassert     match_parens([('(()', '()()')]) == 'No'\nassert     match_parens([('()', '()')]) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     match_parens(['(()()()())', '(()()())()', '(()())()()', '(()())()()']) == 'Yes'\nassert     match_parens(['(()())()()', '(())()()()', '()())()()', '(()())()()']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     match_parens(['()', '()()']) == 'Yes', 'Test failed'\nassert     match_parens(['(())', '))']) == 'No', 'Test failed'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     match_parens(['()', '(())()']), 'No'\nassert     match_parens(['((())())', '((()))']), 'No'\nassert     match_parens(['((())', '()()', '()()']), 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     match_parens(['']) == False\nassert     match_parens([('(())')]) == 'No'\nassert     match_parens([('))(()')]) == 'Yes'\nassert     match_parens([('))(())')]) == 'No'\nassert     match_parens([('))(())')]) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     match_parens([]) == 'No'\nassert     match_parens([(')])') == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     match_parens([\"(()\",\"()()\"]) == \"Yes\"\nassert     match_parens([\"(()\",\"()\"]) == \"No\"\nassert     match_parens([\"(()\", \"()()\"]) == \"No\"\nassert     match_parens([\"(()\", \"(()\")]) == \"Yes\"\nassert     match_parens([\"(()\", \"()()\"]) == \"No\"\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     match_parens(['(())', '())()']) == 'Yes'\nassert     match_parens(['(()()()', '()()']) == 'No"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     match_parens(['(()', '(())']) == 'Yes'\nassert     match_parens(['((())', '()()']) == 'Yes'\nassert     match_parens(['(())', '((())']) == 'No'\nassert     match_parens(['(()', '())()']) == 'No'\nassert     match_parens(['(()()', '()()()']) == 'No'\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     maximum([1,2,3,4,5,6,7,8,9,10], 7) == [1,3,5,6,8,9,10]\nassert     maximum([1,2,3,4,5,6,7,8,9,10], 2) == [1,2]\nassert     maximum([1,2,3,4,5,6,7,8,9,10], 3) == [1,2,3]\nassert     maximum([1,2,3,4,5,6,7,8,9,10], 7) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     maximum(['1', '2', '3', '4', '5'], 4) == ['5', '4', '3', '2', '1']\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     maximum(arr=[2, 3, 4, 5, 6, 7, 8, 9, 10], k=2) == [2, 6, 7, 8, 10]\nassert     maximum(arr=[-3, 4, 7, 8, 9, 10], k=2) == [-3, 10]\nassert     maximum(arr=[1, 3, 5, 7, 9, 10, 11, 13], k=3) == [1, 3, 5, 7, 9, 10, 11, 13]\n\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     maximum([1,2,3,4], 2) == [3,4]\nassert     maximum([1,2,3,4,5,6,7,8,9], 2) == [4,5]\nassert     maximum([1,2,3,4,5,6,7,8,9,10], 2) == [10,9]\n\n\ndef minimum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the minimum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     solution([1,2,3]) == 4, \"invalid input\"\nassert     solution([3, 2, 1]) == 4, \"invalid input\"\nassert     solution([3, 2, 1, 3, 4, 5, 9, 1, 3, 3, 3, 2, 3, 9, 3, 3, 2, 3, 9, 9, 2, 3, 3, 3, 3]) == 55, \"invalid input\"\nassert     solution([]) == 0, \"invalid input\"\nassert     solution([1]) == 0, \"invalid input\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     (solution([2,1,3,4])) == 5, 'The function should return 5'\nassert     (solution([2,2,2,2])) == 4, 'The function should return 4'\nassert     (solution([4,4,4,4])) == 0, 'The function should return 0'\nassert     (solution([1,3,2,2])) == 1, 'The function should return 1'\nassert     (solution([2,2,2,2])) == 4, 'The function should return 4'\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     solution([1, 2, 3, 4]) == 5, \"test failed\"\nassert     solution([1, 2, 3, 4, 5]) == 5, \"test failed\"\nassert     solution([2, 4, 6, 8, 10, 12, 14]) == 14, \"test failed\"\nassert     solution([1, 2, 2, 2, 3, 3, 4, 4, 5, 5]) == 20, \"test failed\"\nassert     solution([3, 7, 9]) == 11, \"test failed\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     solution([2,2,7,4,1,2]) == 4, \"Bad solution.\"\nassert     solution([]) == 0, \"Bad solution.\"\nassert     solution([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     solution([1,2,3,4,5,6]) == 12, \"Correct!\"\nassert     solution([1,3,5,6,7,9,12]) == 0, \"Correct!\"\nassert     solution([5,7,9,11,13,15,17,19]) == 0, \"Correct!\"\nassert     solution([9,11,13,15,17]) == 0, \"Correct!\"\nassert     solution([9,11,13,15]) == 0, \"Correct!\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     solution([3,4,6,8]) == 15\nassert     solution([1,2,3]) == 6\nassert     solution([1,3,5,7,9]) == 21"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     solution([0,2,4,6,8]) == 8\nassert     solution([0,2,8,6]) == 8\nassert     solution([6,8,6,4,4,6]) == "
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 23\nassert     solution([2, 4, 6, 8, 10]) == "
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     solution([0,1,2,3,4,5,6,7,8,9]) == 15\nassert     solution([0,2,4,6,8,10]) == 10\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert      solution([-1,2,-3,4,-2,-1]) == 15\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     add_elements([1,2,3,4,5], 4) == 9\nassert     add_elements([1,2,3,4,5], 2) == 6\n\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     (add_elements([1, 2, 3, 4, 5], 2) == 5)\nassert     (add_elements([1, 2, 3, 4, 5], 1) == 1)\nassert     (add_elements([1, 2, 3, 4, 5], 0) == 1)\nassert     (add_elements([], 0) == 0)\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     add_elements([1, 2, 3, 4], 2) == 5\nassert     add_elements([1, 2, 3, 4], 3) == 5\nassert     add_elements([1, 2, 3, 4], 4) == 5\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     add_elements([2, 4], 4) == 6\nassert     add_elements([2, 4], 2) == 6\nassert     add_elements([2, 4, 5], 3) == 0\nassert     add_elements([2, 4, 5], 1) == 0\nassert     add_elements([2, 4, 5], 3) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     add_elements([1, 4, 6, 7, 5], 3) == 11\nassert     add_elements([1, 2, 3], 2) == \"abc\"\nassert     add_elements([1, 2, 3], 1) == \"1\"\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 5) == 13, \"Example 1 is wrong\"\nassert     add_elements([1, 2, 3, 4, 5], 2) == 7, \"Example 2 is wrong\"\nassert     add_elements([1, 2, 3, 4, 5], 3) == 12, \"Example 3 is wrong\"\nassert     add_elements([1, 2, 3, 4, 5], 4) == 12, \"Example 4 is wrong\"\nassert     add_elements([1, 2, 3, 4, 5], 4) == 13, \"Example 5 is wrong\""
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     add_elements([3, 6, 2, 3, 4], 0) == 11\nassert     add_elements([3, 6, 2, 3, 4], 1) == 10\nassert     add_elements([3, 6, 2, 3, 4], 2) == 9\n\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     add_elements([1,2,3,4,5,6,7,8,9,0], 1) == 1\nassert     add_elements([9,3,1,7,2,8,5,4,6,3,1], 2) == 5\nassert     add_elements([6,9,9,9,9,9,9,9,9,9], 3) == 9\nassert     add_elements([3,3,3,3,3,3,3,3,3,3], 4) == 9\nassert     add_elements([3,3,3,3,3,3,3,3,3,3,3], 4) == 3"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     get_odd_collatz(3) == [1, 2, 4]\nassert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(0) == []\nassert     get_odd_collatz(10) == [1, 2, 4, 8, 16, 32, 64, 256, 512, 1024, 2048, 4096]\nassert     get_odd_collatz(1000000000000000000000000000000000000000000000001) == [1, 1]"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\ndef get_odd_collatz2(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of the previous\n    term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that \n    no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in decreasing order of value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \nassert \n\ndef main():\n    \"\"\"\n    Given a positive integer n, return a sorted list that contains the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of the previous term. If the previous term is odd, the next term is 3 times the previous term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     get_odd_collatz(3) == [1, 3, 2]\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     get_odd_collatz(12) == [1,3,5,7,9,11,13,15,17,19,21]\nassert get_odd_collatz(37) == [1,3,5,7,9,11,13,15,17,19,21,29,31,37]"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     valid_date('20-01-2021') == True\nassert     valid_date('20-01-2021') == False\nassert     valid_date('20-01-2021') == False\nassert     valid_date('20-01-2021') == False\nassert     valid_date('20-01-2021') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     valid_date('2020-05-02') == True\nassert     valid_date('2020-05-02') == True\nassert     valid_date('20-05-02') == False\nassert     valid_date('20-05-02') == True\nassert     valid_date('20-05-02') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     valid_date(\"09-02-2000\")\nassert     valid_date(\"21-02-2000\")\nassert     valid_date(\"09-02-2000\")\nassert     valid_date(\"20-03-2000\")\nassert     valid_date(\"21-02-2000\")\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     valid_date(\"12-25-2021\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     valid_date('2021-09-17')==True\nassert     valid_date('2021-09-17')==False\nassert     valid_date('2021-09-17')==False\nassert     valid_date('2021-09-17')==False\nassert     valid_date('2021-09-17')==False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     valid_date(\"2018-10-28\") == True\nassert     valid_date(\"3-01-2021\") == True\nassert     valid_date(\"3-01-2021-\") == True\nassert     valid_date(\"2018-03-12\") == False\nassert     valid_date(\"30-01-2021\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     valid_date(\"01-01-2015\") == True\nassert     valid_date(\"1-01-2015\") == True\nassert     valid_date(\"11-01-2015\") == True\nassert     valid_date(\"15-02-2015\") == True\nassert     valid_date(\"15-02-2015\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     valid_date(date='0001-01-01') == True\nassert     valid_date(date='0001-01-31') == False\nassert     valid_date(date='0001-01-01 00:00') == False\nassert     valid_date(date='0001-01-01 00:00:00') == False\nassert     valid_date(date='0001-01-01 00:00:00.0') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     valid_date('01-01-2001') == True\nassert     valid_date('01-01-1980') == True\nassert     valid_date('01-01-2000') == False\nassert     valid_date('01-01-1999') == False\nassert     valid_date('01-01-1000') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     valid_date('1-1-2001') == True\nassert     valid_date('0-1-2001') == True\nassert     valid_date('1/1/2001') == True\nassert     valid_date('12-01-2001') == False\nassert     valid_date('31-12-2001') == False\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     split_words(\"hello world\") == ['hello', 'world']\nassert     split_words(\"a,b,c\") == ['a', 'b', 'c']\nassert     split_words(\"aa,bbb,ccc\") == ['aa', 'bbb', 'ccc']\nassert     split_words(\"AA,BB,CC\") == ['AA', 'BB', 'CC']\nassert     split_words(\"aa,bb,cc\") == ['aa', 'bb', 'cc']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     split_words('Hello world!') == ['hello', 'world']\nassert     split_words('A, a, a, a, b, b, b, b, c, c, c, d, d, d, e') == ['a', 'b', 'c', 'd', 'e']\nassert     split_words('Hello,world') == ['Hello', 'world']\nassert     split_words('We are all aboard, and we are proud to be able to stay') == ['we', 'are', 'all', 'araby', 'and', 'we', 'prince', 'to','stay']\nassert     split_words('A, a, a, a, b, b, b, b, c, c, c, d, d, d, e') == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     split_words(\"kitten, code, kite\") == [\"kite\", \"code\", \"kite\"]\nassert     split_words(\"Hi there\") == []\nassert     split_words(\"kitten, code, kite, quick, down\") == [\"kite\", \"code\", \"kite\", \"quick\", \"down\"]\nassert     split_words(\"The quick brown fox jumps over the lazy dog\") == [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nassert     split_words(\"The quick brown fox jumps over the lazy dog, But, a duck\") == [\"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\", \"But\", \"a\", \"duck\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     split_words(\"Hello, world!\") == [\"Hello\", \"world!\"]\nassert     split_words(\"A,B,C\") == [\"A\", \"B\", \"C\"]\nassert     split_words(\"hello, world!\") == [\"Hello\", \"world!\"]\nassert     split_words(\"Apple\") == [\"Apple\", \"apple\"]\nassert     split_words(\"A,B\") == [\"A\", \"B\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         split_words('') == [],'split_words() should return empty list'\nassert         split_words('a') == ['a'],'split_words(\"a\") should return \"a\" as lower-case letters'\nassert         split_words('abc') == ['abc'],'split_words(\"abc\") should return \"abc\" as lower-case letters'\nassert         split_words('blah') == ['blah'],'split_words(\"blah\") should return \"blah\" as lower-case letters'\nassert         split_words('aaaaaabbbbbbbbbbbbbbb') == ['a', 'b', 'b', 'b', 'b', 'bb'],'split_words(\"aaaaaabbbbbbbbbbbbb\") should return \"aaaaaabbbbbbbbbbbbb\" as lower-case letters'\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     split_words(\"\") == []\nassert split_words(\" \") == [\" \", \" \"]\nassert split_words(\"abcdefghijklmnopqrstuvwxyz\") == [\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stuv\", \"wxyz\"]\n\ndef apply_func(func):\n    '''\n    Input: function that returns a bool value\n    Output: a bool value\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     split_words('holberton') == ['hol', 'ber', 'ton']\nassert     split_words('michael') == ['m', 'h', 'c', 'l', 'e', 'y','s']\nassert     split_words('toto') == ['t', 'o', 'a', 'n']\nassert     split_words('toto is a bird') == ['t', 'o', 'a', 'n', 'i','s']\nassert     split_words('hello world') == ['h', 'l', 'o', 'e', 'w', 'r', 'd', 'l']\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     split_words('This is a good split of words ') == ['this', 'is', 'a', 'good','split', 'of', 'words', 'you', '?']\nassert     split_words('Good is the best split of words ') == ['good', 'is', 'the', 'best','split', 'of', 'words', 'you', '?']\nassert     split_words('hello, world') == ['hello', 'world']\nassert     split_words('this is a good split of words ') == ['this', 'is', 'a', 'good','split', 'of', 'words', 'you', '?']\nassert     split_words('best is the best split of words ') == ['best', 'is', 'the', 'best','split', 'of', 'words', 'you', '?']\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_sorted([3,2,1,5,4]) == True, 'is_sorted: should have returned True'\nassert     is_sorted([4,5,6,6,6,7,7,8,8,8,9]) == True, 'is_sorted: should have returned True'\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8])\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_sorted([-2,-3,-2]) == True\nassert     is_sorted([-2,-3,-1]) == False\nassert     is_sorted([-2,-1,0]) == True\nassert     is_sorted([-2,0,0]) == False"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_sorted([1,4,2,2,5,4,2,2]) == True\nassert     is_sorted([2,4,2,2,5,4,2,2]) == False\nassert     is_sorted([1,2,2,2,3,4,5,4,4,5]) == True\nassert     is_sorted([1,2,2,2,3,4,5,5,6,7]) == False\nassert     is_sorted([1,2,2,5,4,2,2,3]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 5, 2]) == False\nassert     is_sorted([1, 2, 5]) == True\nassert     is_sorted([1, 2, 2]) == True\nassert     is_sorted([5, 1, 2]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_sorted([1,1,2,2,3,3]) == False, \"is_sorted() returns True.\"\nassert     is_sorted([2,2,1,1]) == True, \"is_sorted() returns True.\"\nassert     is_sorted([2,2,1,0]) == False, \"is_sorted() returns True.\"\nassert     is_sorted([2,1,1,1,2,2]) == True, \"is_sorted() returns True.\"\nassert     is_sorted([2,1,2,2,3,3]) == True, \"is_sorted() returns True.\"\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_sorted([-9, 5, 3, 5, -3, 3, 4, -2, 3]) == True\nassert     is_sorted([-9, 5, 3, 5, -3, 3, 4, -2, 3]) == False"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_sorted([3, 0, 2]) == True\nassert     is_sorted([0, 1, 0, 0, 1, 0, 1, 0]) == True\nassert     is_sorted([-1, 2, 1, 1, 1, 2]) == False\nassert     is_sorted([1, 2, 3, 4, 5, 6, 5, 4]) == True\nassert     is_sorted([]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_sorted([9, 6, 5, 3, 2, 3, 5, 6, 9]) == True, 'true'\nassert     is_sorted([6, 3, 2, 5, 7, 4]) == False, 'false'"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     intersection(1, (2, 3)) == (2, 3)\nassert     intersection(1, (1, 3)) == (1, 3)\nassert     intersection(2, (1, 3)) == (1, 2)\nassert     intersection(1, (1, 2, 3)) == (2, 2, 3)\nassert     intersection(1, (1, 3, 5)) == (1, 3, 5)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     intersection([1,3], [2, 4]) == (2, 3), \"1st interval doesn't intersect\"\nassert     intersection([1,3], [2, 4]) == (2, 4), \"2nd interval doesn't intersect\"\nassert     intersection([1, 3], [3, 4]) == (3, 4), \"3rd interval doesn't intersect\"\nassert     intersection([1, 2], [1, 3]) == (1, 3), \"1st and 3rd intervals don't intersect\"\nassert     intersection([1, 2], [1, 3]) == (1, 3), \"2nd and 3rd intervals don't intersect\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     intersection( (1, 3), (2, 4) ) == (2, 3)\nassert     intersection( (2, 4), (3, 5) ) == (3, 5)\nassert     intersection( (1, 4), (4, 5) ) == (3, 4)\nassert     intersection( (1, 5), (5, 7) ) == (5, 7)\nassert     intersection( (1, 5), (5, 7) ) == (5, 7)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     intersection(1, (2, 3)) == (2, 3)\nassert     intersection(2, (1, 4)) == (1, 4)\nassert     intersection((1, 2), (3, 4)) == (3, 4)\nassert     intersection((1, 3), (4, 8)) == (1, 3)\nassert     intersection((1, 4), (2, 8)) == (1, 4)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert         intersection((1, 2), (2, 4)) == (\"NO\",)\nassert         intersection((1, 4), (3, 4)) == (\"YES\",)\nassert         intersection((3, 4), (5, 4)) == (\"NO\",)\nassert         intersection((4, 5), (1, 5)) == (\"NO\",)\nassert         intersection((5, 6), (1, 7)) == (\"NO\",)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     intersection((1, 2), (3, 4)) == (2, 3)\nassert     intersection((1, 3), (2, 4)) == (2, 3)\nassert     intersection((3, 4), (1, 4)) == (4, 4)\nassert     intersection((1, 4), (3, 4)) == (3, 4)"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     intersection(1, 3), \"no\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     intersection( (1, 2), (2, 3) ) == (2, 3)\nassert     intersection( (1, 2), (2, 4) ) == (2, 3)\nassert     intersection( (2, 3), (4, 5) ) == (4, 5)\nassert     intersection( (1, 3), (4, 5) ) == (1, 2)\nassert     intersection( (1, 4), (5, 6) ) == (0, 1)\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     intersection([1, 3], [2, 4]) == \"YES\"\nassert     intersection([2, 4], [1, 3]) == \"NO\"\nassert     intersection([1, 2], [1, 3]) == \"NO\"\nassert     intersection([1, 2, 3], [2, 4]) == \"YES\"\n\nprint(\"intersection test passed!\")"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     prod_signs([2,3,4]) == -1\nassert     prod_signs([-1,-2,-3]) == 0\nassert     prod_signs([-1,0,1]) == -1\nassert     prod_signs([0,1,1,0]) == 0\nassert     prod_signs([1,1,1,1]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\nprint('Success')"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     prod_signs(arr=[-1, 2, -3, -2, 1, 2, -3, -3, 2, 3, -4, 2, 0, 2, -1, -2, 3, 4, -1, 1, 2, 0, -3, -2, -3, -4, 3, -2]) == (-33)\nassert     prod_signs(arr=[-1, -2, -3, -2, 1, 2, -3, -3, 2, 3, -4, 2, 0, 2, -1, -2, 3, 4, -1, 1, 2, 0, -3, -2, -3, -4, 3, -2]) == (33)\nassert     prod_signs(arr=[-1, 2, -3, -2, 1, 2, -3, -3, 2, 3, -4, 2, 0, 2, -1, -2, 3, 4, -1, 1, 2, 0, -3, -2, -3, -4, 3, -2]) == (33)\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     prod_signs([1,2,-1,-1,-3]) == 6\nassert     prod_signs([1,2,-1,-1,-3,0]) == -3\nassert     prod_signs([1,2,-1,-1,-3,-2]) == -7\nassert     prod_signs([1,2,-1,-1,-3,-2,0]) == 7\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     prod_signs([1,2,3,4,5,6,7,8,9,10]) == 14\nassert     prod_signs([1,-1,0]) == 0\nassert     prod_signs([2,1,0]) == 3\nassert     prod_signs([1,0]) == 1\nassert     prod_signs([-2,1]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     prod_signs([1,-1,0]) == 6\nassert     prod_signs([-1,1,0]) == -1\nassert     prod_signs([1,0,1]) == 3\nassert     prod_signs([]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     prod_signs([1, -1, 0]) == -1\nassert     prod_signs([1, -1, 0, 0, 0]) == 0\nassert     prod_signs([1, -1, 0, 0, 0, 0, 0]) == 1\nassert     prod_signs([0, 0, 0, 0, 0]) == 0\nassert     prod_signs([0, 0, 0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     prod_signs([-2, -1, 1, 2]) == -8\nassert     prod_signs([3, 2, -4, 5, -3]) == -15\nassert     prod_signs([-6, -5, -4, -3, 1]) == -29\n\nif __name__ == '__main__':\n    a = [1, 2, 3]\n    print(prod_signs(a)"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     prod_signs([1, -1, 0]) == None, 'expected None, got (1, -1, 0)'\nassert     prod_signs([1, -1, 1]) == 1, 'expected 1, got (1, -1, 1)'\nassert     prod_signs([1, 1, 1]) == None, 'expected None, got (1, 1, 1)'\nassert     prod_signs([-1, 1, -1, 0]) == None, 'expected None, got (-1, 1, -1, 0)'\nassert     prod_signs([1, -1, 1, 0]) == 0, 'expected 0, got (1, -1, 1, 0)'"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     prod_signs([1, 2, 3, -1, 0, -1, -3, 4]) == 7\nassert     prod_signs([1, -2, -3, -4, -5]) == None"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     minPath([1,2,3,4], 3) == [3,4]\nassert     minPath([1,2,3,4,5], 3) == [3,5,4,2,1]\nassert     minPath([1,2,3,4,5,6,7,8,9], 3) == [3,6,5,7,8,4,2,9,1]\n\n\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     minPath([[1, 2, 3], [2, 4, 6], [1, 5, 7, 9]], 2) == [3, 9]\nassert     minPath([[0, 0, 0], [1, 2, 3], [4, 5, 6]], 3) == [1, 2, 3]\nassert     minPath([[1, 2], [1, 2, 3]], 2) == [1, 2, 3]\nassert     minPath([[1], [1, 2]], 2) == [1, 2]\nassert     minPath([[1], [1], [1, 2], [1]], 1) == [1]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     minPath([1,3,2,3],2) == [1,3,2,3,3]\nassert     minPath([1,3,2,3,5],2) == [1,3,2,3,3,5]\nassert     minPath([1,2,3,4,5],2) == [1,2,3,4,5]\nassert     minPath([1,2,3,4,5,6,7,8,9],3) == [1,2,3,4,5,6,7,8,9]\n\ndef minPathWithRange(grid, r):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer r, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \nassert minPath([[2, 5, 1, 9, 6], [4, 1, 8, 2, 7], [5, 6, 3, 8, 1], [3, 9, 2, 1, 5], [9, 7, 4, 2, 1]], 1) == [2, 3, 4, 6, 9]\nassert minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 2) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\nassert minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\nassert minPath([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     minPath([[2, 3, 5], [1, 2, 1], [4, 3, 6], [1, 5, 2], [3, 5, 4], [6, 5, 7]], 3) == [2, 3, 5]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 3]\nassert     minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 3) == [1, 2, 3, 10, 11, 12]\nassert     minPath([[], [], [], [], [1]], 1) == [1]\nassert     minPath([[3, 3, 3], [3, 2, 4]], 1) == [3, 3, 3, 3]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     minPath(grid, k=2) == [1, 2]\nassert     minPath(grid, k=3) == [1, 2, 3]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     minPath(grid, 5) == [1, 4, 2, 5, 3]\nassert     minPath(grid, 5) == [1, 4, 2, 5, 3]\nassert     minPath(grid, 6) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     minPath([ [1,2,3,4],\n                    [4,5,6,7],\n                    [3,1,2,4] ], 3) == [1,2,4,3,5,6,7]\nassert     minPath([ [2,3,4],\n                    [5,6,7],\n                    [3,1,2] ], 4) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     tri(0) == 0\nassert     tri(1) == 1\nassert     tri(3) == 3\nassert     tri(4) == 2 + 1 + 3 = 8\nassert     tri(10) == 2 + 1 + 1 + 1 + 2 = 16\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1 + 2 / 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4)"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     tri(10) == [1, 3, 5, 7, 9, 11, 13, 17, 19, 23]\nassert     tri(6) == [1, 3, 5, 7, 9, 11, 13, 17]\nassert     tri(1) == [1]\nassert     tri(4) == [1, 4, 7, 11, 13, 16, 20, 23]\nassert     tri(20) == [1, 1, 4, 7, 11, 13, 17, 19, 21, 23]\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     tri(3) == 3\nassert     tri(4) == 3\nassert     tri(0) == 0\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\ndef trib(n):\n    \"\"\"Triangular numbers are not fibonacci numbers. A Tribonacci sequence can be\n    defined by the recurrence:\n    trib(1) = 0\n    trib(n) = 1 + n / 2, if n is even.\n    trib(n) =  trib(n - 1) + trib(n - 2) + trib(n + 1), if n is odd.\n    For example:\n    trib(2) = 0\n    trib(3) = 1 + (2 / 2) = 2\n    trib(5) = 3\n    trib(4) = trib(2) + trib(1) + trib(5), if n is even.\n    You are given a non-negative integer number n, you have to print its first \n    number of Tribonacci numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     tri(2) == 1 + (2 / 2) == 2\nassert     tri(4) == 3\nassert     tri(3) == tri(2) + tri(1) + tri(4)\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     tri(1) == 1\nassert     tri(2) == 1\nassert     tri(3) == 2\nassert     tri(4) == 3\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     digits(3) == 1\nassert     digits(7) == 1\nassert     digits(181) == 12\nassert     digits(123) == 9\nassert     digits(11) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     digits(3) == 0\nassert     digits(5) == 0\nassert     digits(20) == 0\nassert     digits(22) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     digits(1) == 0\nassert     digits(10) == 10\nassert     digits(100) == 100\nassert     digits(1000) == 100\nassert     digits(10000) == 100\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     digits(3) == 0\nassert     digits(9) == 9\nassert     digits(999) == 0\nassert     digits(92769) == 0\nassert     digits(0) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     digits(6) == 6\nassert     digits(0) == 0\nassert digits(4) == 0\nassert digits(99999999999) == 0\n\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert         digits(42) == 0\nassert digits(9) == 0\nassert digits(1) == 1\nassert digits(0) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     digits(13) == 22"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     digits(1) == 0\nassert     digits(3) == 0\nassert     digits(34) == 0\nassert     digits(15) == 0\nassert     digits(46) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     digits(13) == 100\nassert     digits(26) == 10\n\nprint(\"digits() function works\")\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 1\nassert     digits(10) == 10\nassert     digits(100) == 100\nassert     digits(999) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_nested('[[[]]]') == True\nassert     is_nested('[[()]]') == False\nassert     is_nested('[([]])])') == False\nassert     is_nested('(()])') == True\nassert     is_nested('(()())') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_nested(\"[]\"  )\nassert     is_nested(\"[](]\"  )\nassert     is_nested(\"[][]\"  )\nassert     is_nested(\"[][](\")\nassert     is_nested(\"[][[][[][][][]][]][]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\n        ''''''\n        return False\n    '''\n    return True\n    '''\n    print('--'*100)\n    print('Expected: False, Actual: ')\n    print('False')\n    print('--'*100)\n    print('\\n')\n    return True\n    '''\n    return False\n    '''\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_nested('''[''')\nassert not     is_nested('''[[]]''')\nassert     is_nested('''[{[]}]''')\nassert not     is_nested('''[{[{}}]}]''')\nassert     is_nested('''[{[{[]}n\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     is_nested(\"[[])\"), \"nested\"\nassert     is_nested(\"[[2]]\"), \"wrong\"\nassert     is_nested(\"[[2,[]]\"), \"wrong\"\nassert     is_nested(\"[[[]]]\"), \"wrong\"\nassert     is_nested(\"[[[2]]]\"), \"wrong\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_nested('{[()]}') == True\nassert     is_nested('{(}') == True\nassert     is_nested('{[()]}') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_nested(\"(((()))\") == True\nassert     is_nested(\"(()((())\") == True\nassert     is_nested(\"((((()))\") == True\nassert     is_nested(\"((((((()))\") == True\nassert     is_nested
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_nested('[([)]')('({}')('[{)]')\nassert     is_nested('([]')('({}')('[{)]')\nassert     is_nested('()')\nassert     is_nested('[[]]')\nassert     is_nested('[[]]')('{}')('[{]')\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_nested('[(])'"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_nested('(((((((()()())())))())))') == True\nassert     is_nested('((((((((((()())())))())))())))') == False\nassert     is_nested('((((((((()()()())))))))))') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_nested('') == True\nassert     is_nested('[[]]') == True\nassert     is_nested('{}') == True\nassert     is_nested('(()') == True\nassert     is_nested('({}') == True\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sum_squares([1, 4, -2, 3, -5]) == 23\nassert     sum_squares([1, 4, -2, 3, -5, -4]) == -2\nassert     sum_squares([1, 3, 4]) == 3\nassert     sum_squares([4, -2, 3, -5]) == -5\nassert     sum_squares([1, 2, 3, 4]) == 7\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     sum_squares([1, 3, 4, -2, 6]) == -10"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 11\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sum_squares([1, 2, 3]) == 7"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sum_squares([2,3,-5,10,4,5,6,7]) == 50, \"Check your sum_squares function\""
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sum_squares([1, 2, 3]) == 10\nassert     sum_squares([3, 4, -1]) == -9\nassert     sum_squares([-9, 3, -5]) == 18\nassert     sum_squares([1, 2, 3, 4, -1, -2]) == 4"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sum_squares([1, 3, 5, -1, -3, 4, 1]) == 23\nassert sum_squares([1, 2, 3, 4, -5]) == 30\nassert sum_squares([-1, 0, 1, 2, 3]) == 1\nassert sum_squares([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == 81\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([1, 2, 3, 4]) == 9\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 120\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sum_squares([1, 4, 9, 16, 25]) == 36\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('!') == True\nassert check_if_last_char_is_a_letter('ABC') == False\nassert check_if_last_char_is_a_letter('a b c') == True\nassert check_if_last_char_is_a_letter('abc') == False\nassert check_if_last_char_is_a_letter('!') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter(\"wzr\"), \"word\"\nassert     check_if_last_char_is_a_letter(\"qzd\"), \"not a letter\"\n\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter(\"a2e3d4f\") == True\nassert     check_if_last_char_is_a_letter(\"   a   b   c   \") == True\nassert     check_if_last_char_is_a_letter(\"  a   b   c   \") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('') is True\nassert     check_if_last_char_is_a_letter('word') is False\nassert     check_if_last_char_is_a_letter('word w -') is True\nassert     check_if_last_char_is_a_letter('word w ') is False\nassert     check_if_last_char_is_a_letter('word w!') is True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(''), \"Should be False\"\nassert     check_if_last_char_is_a_letter('a'), \"Should be True\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter(\"aabbbcd\") == True\nassert     check_if_last_char_is_a_letter(\"abcdefg\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('the quick brown fox jumps over the lazy dog') == False\nassert     check_if_last_char_is_a_letter('the quick brown fox jumps over the lazy dog') == True\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"a1a2a3\") == True\nassert     check_if_last_char_is_a_letter(\"123\") == False\nassert     check_if_last_char_is_a_letter(\"!3\") == True\nassert     check_if_last_char_is_a_letter(\"a1a2a3!3\") == False\n\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('a') is True\nassert check_if_last_char_is_a_letter('ab') is False\nassert check_if_last_char_is_a_letter('aab') is True\nassert check_if_last_char_is_a_letter('somethingthatshouldnotexist') is False\nassert check_if_last_char_is_a_letter('abcd') is False"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter('') == False\nassert     check_if_last_char_is_a_letter('abcd') == False\nassert     check_if_last_char_is_a_letter('aaab') == False\nassert     check_if_last_char_is_a_letter('asd') == False\nassert     check_if_last_char_is_a_letter('word') == False\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     can_arrange([4, 3, 2, 1, 0, 6, 7]) == -1\nassert     can_arrange([2, 3, 5, 1, 0, 4, 8]) == 3\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     can_arrange(arr) == -1\nassert     can_arrange([1,2,3,1,2,3,4,5,6,1]) == -1\nassert     can_arrange([1,1,1,1,1,1]) == 1\nassert     can_arrange([]) == -1\nassert     can_arrange(None) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert         can_arrange([3, 1, 2, 5, 6, 7]) == -1\nassert         can_arrange([3, 1, 2, 5, 6, 3, 2]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     can_arrange([5, 2, 5, 6]) == -1\nassert     can_arrange([1, 2, 5, 7, 8, 9]) == -1\nassert     can_arrange([1, 2, 5, 7, 8, 9, 1]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == 3\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     can_arrange([5, 3, 1, 2, 7]) == 2\nassert     can_arrange([2, 2, 7, 7, 7]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     can_arrange([1, 2, 3]) == -1\nassert     can_arrange([1, 2, 2]) == 2\nassert     can_arrange([]) == -1\nassert     can_arrange([1]) == -1\nassert     can_arrange([1, 2]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     can_arrange([3,4,5,6,7,8,9]) == -1, \"case 3\"\nassert     can_arrange([3,4,5,6,7,8,9,1]) == 2, \"case 4\"\nassert     can_arrange([1,2,3,4,5]) == 3, \"case 5\"\nassert     can_arrange([1,2,3,4,5,6,7,8,9,10]) == -1, \"case 6\"\nassert     can_arrange([1,2,3,4,5,6,7,8,9,10,11,12]) == 7, \"case 7\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     can_arrange([]) == -1, \"Empty array\"\nassert can_arrange([3,5,7,8,9,1,2,4,3]) == 3, \"Bad array\"\nassert can_arrange([4,3,2,1]) == 4, \"Bad array\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 1]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 5]) == -1\nassert     can_arrange([1, 1, 2, 2, 3, 3]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([-1, -2, -3]) == (None, None)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([2, 4, 1]) == (1, 2)\nassert largest_smallest_integers([1, 5, 4]) == (1, 2)\nassert largest_smallest_integers([3, 1, 4, 2, 5, 6, -8]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([2]) == (None, None)\nassert     largest_smallest_integers([-2, -1, 0, -1, -5, -1, -1]) == (None, None)\nassert     largest_smallest_integers([0, -1, -1, -1, -1, -1, -1]) == (None, None)\nassert     largest_smallest_integers([-2, -1, 0, -1, -5, -1, -1]) == (None, None)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([1,2,3,4]) == (1, 4)\nassert     largest_smallest_integers([-1,-2,-3]) == (None, None)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-2, -3, -1, 0, 1, 2]) == (None, None)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7]) == (5, 6)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([]) == None\nassert     largest_smallest_integers([-1, 0, -3, -4]) == (-1, -4)\nassert     largest_smallest_integers([-2, 0, -3, -4]) == (-2, -4)\nassert     largest_smallest_integers([-2, -2, -2]) == (-2, -2)\nassert     largest_smallest_integers([1, 2, -2, 5]) == (1, 2)\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     compare_one(8.45, '8.45') == 8.45\nassert     compare_one(8.45, '3') == 8.45\nassert     compare_one(8.45, '8') == 8.45\nassert     compare_one(8.45, '') == None\n\ndef convert_to_string(a):\n    \"\"\"\n    Create a function that takes integers as a string and return a list of the string\n    representing the integer values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     compare_one(float('-1'), 1) == float('1'), \"wrong return value\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     compare_one(1, 1.1) == 1.1\nassert     compare_one('foo', 'foo') == 'foo'\nassert     compare_one(1, 1.1, 'foo') == 1.1\nassert     compare_one(1.1, 1) == 1.1\nassert     compare_one(1.1, 1.1) == 1.1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     compare_one(10, \"ten\") == 10\nassert compare_one(10.5, \"ten.5\") == 10.5\nassert compare_one(\"ten\", \"ten\") == 10\nassert compare_one(\"ten,ten\", \"ten,ten\") == 10\nassert compare_one(\"ten\", 10) == 10\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1.0, 2.0) == 2\nassert     compare_one('a', 'b') == 'a'\nassert     compare_one('a', 'a') == 'a'\nassert     compare_one('a', 'a' ) == 'a'\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     compare_one(1,1) == \"1\"\nassert     compare_one(1.5,1) == \"1.5\"\nassert     compare_one(\"1\",1.5) == \"1\"\nassert     compare_one(True, False) == None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     compare_one(1.0, 1.0) is None\nassert     compare_one(1.0, 1.1) is None\nassert     compare_one(1.0, 1.2) == 1.0\nassert     compare_one(1.0, 1.3) == 1.0\nassert     compare_one(1.0, 1.0) == None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     compare_one(3, 3.0) == 3\nassert     compare_one(3, \"3.0\") == 3\nassert     compare_one(3, float(3.0)) == 3\nassert     compare_one(3, 4) is None\nassert     compare_one(3, \"3\") is None\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     compare_one(a = 5.1, b = 3.0) == 5.0\nassert     compare_one(a = 5.2, b = 3.0) == 5.0\nassert     compare_one(a = \"five.2\", b = \"five\") == \"five\"\nassert     compare_one(a = \"five\", b = \"five\") == \"five\"\nassert     compare_one(a = \"five\", b = None) == None\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(1) == False\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(4) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(42) == True\nassert     is_equal_to_sum_even(43) == True\nassert     is_equal_to_sum_even(46) == True\nassert     is_equal_to_sum_even(5) == False\nassert     is_equal_to_sum_even(0) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(0)\nassert     not is_equal_to_sum_even(3)\nassert     is_equal_to_sum_even(7)\nassert     not is_equal_to_sum_even(10)\nassert     not is_equal_to_sum_even(15)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         is_equal_to_sum_even(4) == True\nassert         is_equal_to_sum_even(0) == True\nassert         is_equal_to_sum_even(7) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(0) == False\nassert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(4) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(8) == False\nassert     is_equal_to_sum_even(17) == False\nassert     is_equal_to_sum_even(42) == False\nassert     is_equal_to_sum_even(1234) == False\nassert     is_equal_to_sum_even(0) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(0)\nassert     is_equal_to_sum_even(1)\nassert     is_equal_to_sum_even(2)\nassert     is_equal_to_sum_even(3)\nassert     is_equal_to_sum_even(4)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(3) == False\n\n\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(5) == False\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(3) == False\nassert     is_equal_to_sum_even(4) == False\nassert     is_equal_to_sum_even(5) == False\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef factorial_empty(n):\n    \"\"\"\n    The following function will calculate the factorial of the\n    following n:\n    \n    factorial_empty(n) = n!\n    \n    Where n is an integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     special_factorial(10) == 120\nassert     special_factorial(3) == 6\nassert     special_factorial(1) == 1\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         special_factorial(0) == 1\nassert         special_factorial(1) == 1\nassert         special_factorial(2) == 2\nassert         special_factorial(3) == 3\nassert         special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     special_factorial(3) == 3*3*3\nassert     special_factorial(0) == 1\nassert     special_factorial(-1) == 0\nassert     special_factorial(5) == 120\nassert     special_factorial(99) == 9223372036854775807\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     special_factorial(7) == 49\nassert     special_factorial(6) == 120\nassert     special_factorial(5) == 120\nassert     special_factorial(4) == 24\nassert     special_factorial(3) == 3\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 3\nassert     special_factorial(4) == 4\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     fix_spaces(\"  \") == \"  \"\nassert     fix_spaces(\"  - \") == \"- \"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     fix_spaces('a   b  c -') == 'ab-c'\nassert     fix_spaces('a   b   c   d') == 'abcd-d'\nassert     fix_spaces('a   b  c   d   e   f   g') == 'abcd-e'\nassert     fix_spaces('a   b -') == 'ab-b'\nassert     fix_spaces('a   b   c   d   e   f   g') == 'ab-cd'\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     fix_spaces(text) == text\nassert fix_spaces(\"  \") == \"   \"\nassert fix_spaces(\"  abc   \") == \"   abc\"\nassert fix_spaces(\"  abc  def \") == \"   abc-def\"\nassert fix_spaces(\"  abcd\") == \"   abcd\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     check_text(fix_spaces, 'text' )\nassert     check_text(fix_spaces, 'abc ')\nassert     check_text(fix_spaces, 'a b c')\nassert     check_text(fix_spaces, 'a b c - z')\nassert     check_text(fix_spaces, 'a b c d e f g h i j')\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     fix_spaces('Hello world') == 'Hello
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     is_correct(fix_spaces(\"   \"), \" - \") == True\nassert     is_correct(fix_spaces(\"\"), \" \") == True\nassert     is_correct(fix_spaces(\" \"), \"- \") == True\nassert     is_correct(fix_spaces(\" \"), \" \") == True\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     fix_spaces(\"    hello   \") == \"hello hello\"\nassert fix_spaces(\"    hello   hello\") == \"hello hello\"\nassert fix_spaces(\"    hello    \") == \"hello    \"\nassert fix_spaces(\"    hello-\") == \"hello- hello\"\nassert fix_spaces(\"    hello  hello\") == \"hello hello hello\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert         fix_spaces('hey there') == 'Hey there'\nassert fix_spaces('hey there and there and there') == 'Hey there - Hello and there'\nassert fix_spaces('hello there and there and there') == 'Hello - Hello and there'\nassert fix_spaces('hello there and there and there and there and there and there') == 'Hello - Hello and there and there'\nassert fix_spaces('hello there and there and there and there and there and there') == 'Hello - Hello and there and there'\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     (\n    fix_spaces('hello world'),\n    fix_spaces('hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hello world hell"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     (check_correctness(fix_spaces, \"this is a test\")) == 0\nassert     (check_correctness(fix_spaces, \"    this is a test    \")) == 1\nassert     (check_correctness(fix_spaces, \"    this is a   test    \")) == 0\nassert     (check_correctness(fix_spaces, \"    this is a   test    \")) == 0\nassert     (check_correctness(fix_spaces, \"    this is a test   \")) == 1\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     file_name_check(\"00.txt\") == 'Yes'\nassert     file_name_check(\" 01.py\") == 'No'\nassert     file_name_check(\" 01.txt\") == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     file_name_check(\"Dont do this!\") == \"No\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    pass\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n\ndef find_extension(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's extension is valid, and returns 'No' otherwise.\n    A file's extension is considered to be valid if and only if it contains the following\n    characters:.txt,.exe,.dll.\n    The file's extension is considered to be valid if and only if the filename ends with \n    either the following characters:.txt,.exe,.dll:\n    .txt:.txt\n    .exe:.exe\n    .dll:.dll\n    The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     file_name_check(\"txt\") == 'Yes'\nassert     file_name_check(\"bob.exe\") == 'No'\nassert     file_name_check(\"A.txt\") == 'No'\nassert     file_name_check(\"A.exe\") == 'No'\nassert     file_name_check(\"A.dll\") == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n    "
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     file_name_check('abc.py') == 'No'\nassert file_name_check('abc.exe') == 'No'\nassert file_name_check('abc.txt') == 'Yes'\nassert file_name_check('abc.BZ') == 'No'\nassert file_name_check('abc.BZ.exe') == 'No'\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3]) == 6\nassert     sum_squares([-5, -4, -2, 0, 2, 3]) == 15\nassert     sum_squares([6, -8, -4]) == 42\nassert     sum_squares([]) == 0\n\n\"\"\"\nprint(sum_squares([1, 2, 3]))  # Should be 6\nprint(sum_squares([-5, -4, -2, 0, 2, 3]))  # Should be 15\nprint(sum_squares([6, -8, -4]))  # Should be 42\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4,5,6]) == 42\nassert     sum_squares([1,0]) == 1\nassert     sum_squares([0,0,0,0,0]) == 0\nassert     sum_squares([4,4,4,4]) == 16\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert         sum_squares([1,2,3]) == 3\nassert         sum_squares([5,2,3]) == 10\nassert         sum_squares([5,6,3]) == 15\nassert         sum_squares([1,1,3]) == 0\nassert         sum_squares([4,5,6]) == 4\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 14\nassert sum_squares([3, 2, -1]) == -1\nassert sum_squares([4, 1, -3, 2, -1]) == -3\nassert sum_squares([6, 5, -1, 3, -6, 2, -4, -2, 1, 6, -3, -6]) == 50\nassert sum_squares([1, 2, 3]) == 6\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     sum_squares([1,2,3,4])==11\nassert     sum_squares([0,1,2,3,4])==81\nassert     sum_squares([-1,2,3,4])==-49\nassert     sum_squares([])==0\nassert     sum_squares([1,0,1,0,0])==6\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     sum_squares([5, 4, 2, 1]) == 15\nassert     sum_squares([7, -8, 9, 3, 5]) == 70\nassert     sum_squares([-12, -3, -1, 0, 6, 8, 9]) == 0\nassert     sum_squares([-1, -1, -1, -1, -1, -1, -1]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5, 6]) == 27\nassert     sum_squares([1, 2, 3, 4, 5]) == 27\nassert     sum_squares([]) == 0\nassert     sum_squares([-5, -4, -3, -2, -1]) == -15\nassert     sum_squares([-2]) == -3\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \nsum_squares([]) == 0\nassert \nsum_squares([2]) == 4\nassert \nsum_squares([0]) == 0\nassert \nsum_squares([1,2,3,4,5,6,7,8,9,10,11,12]) == 115\nassert \nsum_squares([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 16\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     words_in_sentence('abbccccdd') == 'abbccccdd'\nassert     words_in_sentence('abcdabcd') == 'abcdabcd'\nassert     words_in_sentence('aaabbb') == 'aaabbb'\nassert     words_in_sentence('babab') == 'babab'\nassert     words_in_sentence('aaa') == 'aaa'\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     words_in_sentence('  bbb dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert words_in_sentence(\"Hello there! How are you?\") == \"Hello there! How are you?\"\nassert words_in_sentence(\"What is a good day?\") == \"What is a good day?\"\nassert words_in_sentence(\"I am not good.\") == \"I am not good.\"\nassert words_in_sentence(\"I will not work.\") == \"I will not work.\"\nassert words_in_sentence(\"I will not work.\") == \"I will not work.\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     words_in_sentence('aaaa') == 'a'\nassert     words_in_sentence('bbbbb') == 'bb'\nassert     words_in_sentence('aaaaa') == 'a'\nassert     words_in_sentence('bbbbbbbbbb') == 'bbbb'\nassert     words_in_sentence('bbb') == 'b'\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"I was born in 92000\") == \"I was born\"\nassert     words_in_sentence(\"hello world\") == \"hello world\"\nassert     words_in_sentence(\"Hola Mundo\") == \"Hola Mundo\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"  \") == \"  \"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     words_in_sentence(words_in_sentence(\"I have one book, I have no one\")) == \"I have one book, I have no one\"\nassert     words_in_sentence(\"My name is John, I am also there.\") == \"I am also there\"\nassert     words_in_sentence(\"This is a sentence.\") == \"This is a sentence.\"\nassert     words_in_sentence(\"Hi there! I am also there!\") == \"Hi there! I am also there!\"\nassert     words_in_sentence(\"Hello there! I am also there!\") == \"Hello there! I am also there!\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert words_in_sentence(sentence=input(\"enter sentence: \")) == \"acbdfkdfsfj\"\n\ndef remove_duplicate_words(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"a b c d e f g h i j k l\") == \"a b c d e f g h i j k l\"\nassert     words_in_sentence(\"hel\") == \"hel\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"hel\") == \"hel\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert words_in_sentence(\"  A  \") == \"A\"\nassert words_in_sentence(\"  A  B  \") == \"AB\"\nassert words_in_sentence(\"  A B C D E F  \") == \"ABD\"\nassert words_in_sentence(\"  A B C D E F  \") == \"ABCDEF\"\nassert words_in_sentence(\"  A B C D E F  \") == \"ABCDEEF\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"abcdefg\") == \"abcd\"\nassert     words_in_sentence(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"aeiou\"\nassert     words_in_sentence(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"afhm\"\nassert     words_in_sentence(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"befgag\"\nassert     words_in_sentence(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"bfihg\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     simplify(\"5/2\",\"2\") == \"True\"\nassert     simplify(\"1/4\",\"0.5\") == \"False\"\nassert     simplify(\"9/2\",\"3\") == \"False\"\nassert     simplify(\"5/2\",\"0.5\") == \"True\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     simplify(\"1/3\", 3) == True\nassert     simplify(\"1/3\", 0) == True\nassert     simplify(\"1/3\", 1) == False\nassert     simplify(\"1/3\", \"3\") == True\nassert     simplify(\"1/6\", \"3\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     simplify(2/3, 0) == True\nassert     simplify(2, 1) == True\nassert     simplify(2/3, 2) == True\nassert     simplify(2/3, 3) == False\nassert     simplify(2, 2) == True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     simplify(1, 2) == \"1/2\"\nassert     simplify(2, 1) == \"2/1\"\nassert     simplify(3, 1) == \"3/1\"\nassert     simplify(3, 2) == \"3/2\"\nassert     simplify(1, -1) == \"1/1\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     simplify(10, 100) == True\nassert     simplify(20, 100) == False\nassert     simplify(5, 10) == False\nassert     simplify(\"4/2\", \"2\") == False\nassert     simplify(\"4/2\", \"3\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     simplify('1/2', '1/2') == True\nassert     simplify('1/4', '1/2') == False\nassert     simplify('1/5', '1/3') == True\nassert     simplify('-1/2', '1/2') == True\nassert     simplify('2/3', '1/3') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     simplify(\"1/2\", \"1\") == True\nassert     simplify(\"1/2\", \"0\") == True\nassert     simplify(\"1/2\", \"0.5\") == True\nassert     simplify(\"1/2\", \"1.0\") == True\nassert     simplify(\"1/2\", \"1.0/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1\") == False\nassert     simplify(\"1/2\", \"1/2\") == False\n\nprint(\"The correct way to simplify a fraction is:\")\nprint(simplify(\"1/2\", \"1/2\"))\n\nprint(\"check that simplify is actually working correctly:\")\nprint(simplify(\"1/2\", \"1/2\", \"1/3\"))\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     simplify(\"1/3\", \"1\") == \"1/3\"\nassert simplify(\"1/3\", \"1\") == True\nassert simplify(\"1/3\", \"0\") == \"1\"\nassert simplify(\"1/3\", \"2\") == \"1/2\"\nassert simplify(\"1/3\", \"1\") == \"1/3\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     order_by_points([2,1,2,3,1,2,4]) == [1,2,3,2,4,1,2]\nassert     order_by_points([2,3,4,5,6]) == [3,4,5,6,2]\nassert     order_by_points([2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     order_by_points([2,4,5,6,7,8,9]) == [8,7,6,5,4,3,2]\nassert     order_by_points([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     order_by_points([]) == []\nassert order_by_points([8, 5, 7, 9, 4, 8, 2, 9, 7, 0, 5, 9, 2, 1, 7, 7, 9, 3, 9, 1, 5, 3, 9]) == [4, 5, 7, 8, 2, 9, 3, 9, 7, 0, 5, 9, 2, 1, 7, 7, 9, 3, 9, 7, 0, 5, 9, 2, 1]\nassert order_by_points([0, 7, 8, 7, 9, 4, 9, 0, 2, 2, 2, 9, 2, 3, 3, 9]) == [2, 3, 9, 4, 9, 2, 0, 3, 9, 2, 3, 9, 4, 9, 2, 0, 3, 9, 2, 0, 7, 7, 9, 3, 9]\nassert order_by_points([5, 8, 7, 3, 9, 0, 0, 1, 9, 0, 1, 2, 3, 4, 2]) == [0, 9, 4, 2, 3, 1, 1, 9, 7, 9, 4, 0, 2, 3, 4, 9]\nassert order_by_points([0, 5, 4, 9, 0, 0, 3, 3, 4, 9, 5, 2, 3, 0, 2, 2]) == [2, 3, 0, 4, 5, 2, 0, 3, 3, 2, 4, 5, 0, 2, 9, 0, 3, 2, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     order_by_points([]) == [], 'wrong return value of order_by_points()'\nassert     order_by_points([6, 4, 2, 2, 2, 6, 6, 6, 6]) == [2, 4, 6, 6, 6, 6, 6, 6, 6, 6], 'wrong return value of order_by_points()'\nassert     order_by_points([4, 4, 4, 4, 2, 4, 4, 4, 4]) == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4], 'wrong return value of order_by_points()'\n\ndef add(x, y):\n    \"\"\"\n    Write a function which adds the two given numbers together\n    \"\"\"\n    assert x > 0 and y > 0, 'wrong parameters'\n    return x + y\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     order_by_points([1,2,3,4]) == [1,2,3,4]\nassert     order_by_points([1,5,6,7,8]) == [1,5,6,7,8]\nassert     order_by_points([1,2,3,4]) == [1,2,3,4]\nassert     order_by_points([1,5,6,7,8]) == [1,5,6,7,8]\nassert     order_by_points([1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     order_by_points([4, 8, 6, 5, 9, 9]) == [5, 5, 6, 6, 5, 8]\nassert     order_by_points([3, 5, 6, 9, 6, 6, 9, 6, 3]) == [3, 3, 6, 6, 6, 5, 5, 9, 9]\nassert     order_by_points([9, 9, 9, 9, 9, 9, 9, 9, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     order_by_points([1,2,3,4,8]) == [1,2,4,8,3]\nassert order_by_points([1,2,3,4,8,9,10,12,1,7,4]) == [1,2,3,4,4,8,10,12,7,9,11]\nassert order_by_points([2,1,3,5]) == [1,3,5,2]\nassert order_by_points([3,1,4,2,5,8,2,3]) == [1,3,2,4,5,8,2,3]\nassert order_by_points([8,7,4,6]) == [7,8,4,6]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     order_by_points([1, 3, 4, 2]) == [2, 1, 3, 4]\nassert     order_by_points([1, 2, 3, 4, 5]) == [4, 5, 3, 2, 1]\nassert     order_by_points([1, 2, 3, 4, 5, 6]) == [4, 5, 3, 2, 1, 6]\nassert     order_by_points([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]\n\ndef process_string(s):\n    \"\"\"\n    Write a function which receives a string and \n    converts it into a list of words.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     order_by_points([5, 3, 8, 2, 1]) == [2, 5, 1, 8, 3]\nassert     order_by_points([9, 5, 3, 8, 1]) == [1, 5, 9, 8, 3]\nassert     order_by_points([5, 3, 8, 2, 1]) == [2, 5, 1, 8, 3]\nassert     order_by_points([9, 5, 3, 8, 2]) == [1, 5, 9, 8, 3]\nassert     order_by_points([5, 3, 8, 2, 9]) == [1, 5, 8, 2, 9]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     order_by_points([99, 99, 99]) == [99, 99, 99]\nassert     order_by_points([99, 99, 999, 999, 99]) == [999, 99, 99, 99, 99]\nassert     order_by_points([99, 99, 999, 99, 99]) == [99, 99, 99, 99, 99]\nassert     order_by_points([999, 999, 99, 99, 99]) == [999, 99, 99, 99, 99]\nassert     order_by_points([999, 999, 99, 999, 999]) == [999, 99, 99, 99, 99]\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     order_by_points(list(range(100))) == list(range(100)), \"Correct order by points test failed\"\nassert     order_by_points(list(range(100, 0, -1))) == list(range(100, 0, -1)), \"Wrong order by points test failed\"\nassert     order_by_points(list(range(100, 10, -1))) == list(range(10, 100, -1)), \"Wrong order by points test failed\"\nassert     order_by_points(list(range(100, 0, -1))) == list(range(100, 0, -1)), \"Wrong order by points test failed\"\nassert     order_by_points(list(range(100, 10, -1))) == list(range(10, 100, -1)), \"Wrong order by points test failed\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 1\nassert     specialFilter([2, 3, 5, 7, 9]) == 3\nassert     specialFilter([2, 4, 5, 7, 9]) == 5\nassert     specialFilter([1, 1, 3, 5, 7, 9]) == 7\nassert     specialFilter([2, 4, 5, 7, 9]) == 9\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     specialFilter(nums=[2,2,3,1,5,10]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     specialFilter([7, 8, 9, 0]) == 2\nassert     specialFilter([3, 8, 9, 0]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     specialFilter([]), \"Empty input array\"\nassert     specialFilter([10]), \"Only numbers greater than 10\"\nassert     specialFilter([12, 13, 14]), \"Only numbers first digits odd\"\nassert     specialFilter([12, 2, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]), \"Only numbers first digits odd\"\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), \"Only numbers first digits odd\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     specialFilter([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 8\nassert     specialFilter([0, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 7\nassert     specialFilter([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 6\nassert     specialFilter([0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 7\nassert     specialFilter([0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == "
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    print('Example 1:')\n    print('Input : ')\n    print('n = 2')\n    print('Exception :')\n    print('3')\n    print('Output :')\n    print(str(get_max_triples(2)))\n\n    print('Example 2:')\n    print('Input : ')\n    print('n = 3')\n    print('Exception :')\n    print('4')\n    print('Output :')\n    print(str(get_max_triples(3)))\n\n    print('Example 3:')\n    print('Input : ')\n    print('n = 4')\n    print('Exception :')\n    print('5')\n    print('Output :')\n    print(str(get_max_triples(4)))\n\n    print('Example 4:')\n    print('Input : ')\n    print('n = 5')\n    print('Exception :')\n    print('6')\n    print('Output :')\n    print(str(get_max_triples(5)))\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     get_max_triples(5) == 6\nassert get_max_triples(2) == 2\nassert get_max_triples(3) == 3\nassert get_max_triples(4) == 4\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     get_max_triples(10) == 15\nassert     get_max_triples(1) == 1\nassert     get_max_triples(2) == 2\nassert     get_max_triples(3) == 3\nassert     get_max_triples(4) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\n\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) where i < j < k < i + j + k.\n        \n        If there are multiple triples of a[i], a[j], and a[k], return a[i] + a[j] + a[k].\n    \"\"\"\n    pass\n\n\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) where i < j < k < i + j + k.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     get_max_triples(3) == 3\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    pass\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    pass\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    pass\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (mercury, venus)\nassert     bf(\"Mercury\", \"Earth\") == (mercury, earth)\nassert     bf(\"Mercury\", \"Mars\") == (mercury, mars)\nassert     bf(\"Mercury\", \"Jupiter\") == (mercury, jup)\nassert     bf(\"Mercury\", \"Saturn\") == (mercury, sat)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == ('Mars', 'Uranus', 'Jupiter', 'Saturn', 'Neptune', 'Uranus')\nassert bf(\"Mercury\", \"Mercury\") == ('Mercury', 'Mercury')\nassert bf(\"Venus\", \"Venus\") == ('Venus', 'Venus')\nassert bf(\"Earth\", \"Earth\") == ('Earth', 'Earth')\nassert bf(\"Mars\", \"Mars\") == ('Mars', 'Mars')\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert bf(\"Mercury\", \"Saturn\") == (\"Mercury\", \"Saturn\", \"Earth\", \"Mars\", \"Jupiter\", \"Uranus\", \"Neptune\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Mercury\", \"Uranus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Neptune\")\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     bf('Mercury', 'Venus') == (Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Uranus', 'Neptune', 'Uranus', 'Neptune', 'Neptune', 'Neptune', 'Uranus', 'Mercury', 'Uranus', 'Mercury', 'Uranus', 'Mercury', 'Uranus', 'Uranus', 'Uranus', 'Mercury', 'Uranus', 'Mercury', 'Mercury', 'Uranus', 'Mercury', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Mercury', 'Mercury', 'Uranus', 'Mercury', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus'"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Venus') == (('Mercury', 0), ('Venus', 1), ('Earth', 2), ('Mars', 3), ('Jupiter', 4), ('Saturn', 5), ('Uranus', 6), ('Neptune', 7))\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     bf('''Mercury', 'Venus') == (('Mercury', 'Venus'),)\nassert     bf('''Mercury', 'Mars') == ()\nassert     bf('Mercury', 'Uranus') == ('Mercury', 'Uranus',)\nassert     bf('Mercury', 'Neptune') == ()\nassert     bf('Mercury', 'Earth') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     bf('Mercury', 'Venus') == (('Mercury', 'Venus'), ('Mercury', 'Mercury'))\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     bf('Sun', 'Mercury') == ('Mercury', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mercury', 'Venus') == ('Venus', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury', 'Mercury')\nassert     bf('Mercury', 'Uranus') == ('Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus', 'Uranus')\nassert     bf('Mercury', 'Neptune') == ('Neptune', 'Neptune', 'Neptune', 'Neptune', 'Neptune', 'Neptune', 'Neptune', 'Neptune', 'Neptune', 'Neptune')\nassert     bf('Mercury', 'Saturn') == ('Saturn', 'Saturn', 'Saturn', 'Saturn', 'Saturn', 'Saturn', 'Saturn', 'Saturn', 'Saturn', 'Saturn', 'Saturn', 'Saturn')\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     bf(\"Jupiter\", \"Mercury\") == (('Mercury', 'Jupiter'), ('Mercury', 'Venus'))\nassert     bf(\"Jupiter\", \"Venus\") == (('Jupiter', 'Mercury'), ('Jupiter', 'Venus'))\nassert     bf(\"Mercury\", \"Mercury\") == (('Mercury', 'Venus'), ('Mercury', 'Jupiter'))\nassert     bf(\"Mercury\", \"Jupiter\") == (('Jupiter', 'Mercury'), ('Jupiter', 'Mercury'))\nassert     bf(\"Mercury\", \"Saturn\") == (('Mercury', 'Saturn'), ('Mercury', 'Jupiter'))\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     sorted_list_sum([1,2,3,4]) == [1,2,3,4]\nassert     sorted_list_sum([1,1,1,1]) == [1,1,1,1]\nassert     sorted_list_sum([1,2,1,2]) == [1,2,1,2]\nassert     sorted_list_sum([1,2,3,1]) == [1,2,3,1]\nassert     sorted_list_sum([1,2,3,3,3,3,4,2]) == [1,2,3,3,3,3,4,2]\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     sorted_list_sum(['a', 'b', 'a', 'b', 'b', 'c', 'b', 'd', 'b']) == ['b', 'b', 'c', 'd', 'b', 'b', 'd', 'b', 'b']\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"three\", \"six\", \"five\", \"four\", \"one\", \"two\"]\nassert     sorted_list_sum([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"three\", \"six\", \"five\", \"four\", \"one\", \"two\"]\nassert     sorted_list_sum([]) == []"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     sorted_list_sum([1,2,3]) == [1,2,3]\nassert     sorted_list_sum([2,4,6,8]) == [2,4,6,8]\nassert     sorted_list_sum([6,6,8,8,8,8,8,8,8,8]) == [6,6,8,8,8,8,8,8,8]\nassert     sorted_list_sum([6,6,6,8,8,8,8,8,8,8]) == [6,6,6,6,6,6,6,6]\nassert     sorted_list_sum([]) == []"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\nprint(sorted_list_sum([1, 2, 3, 4, 5, 6, 7])) # ['5', '4', '6', '7', '2', '3']\nprint(sorted_list_sum(['a', 'b', 'c', 'd', 'e', 'f']) == ['e', 'f', 'd', 'c', 'b', 'a'])\nassert\n\nprint(sorted_list_sum([4, 3, 4, 5, 6, 4])) # ['4', '5', '6', '4', '3', '4']\nprint(sorted_list_sum([4, 4, 4, 4, 3, 3])) # ['4', '3', '4', '4', '3', '4']\nassert\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     sorted_list_sum([1,2,3,4]) == [1, 2, 3, 4]\nassert     sorted_list_sum([1,2,3,5]) == [1, 2, 3, 5]\nassert     sorted_list_sum([\"a\",\"b\",\"c\",\"b\",\"a\",\"d\",\"e\"]) == [\"a\",\"b\",\"d\",\"e\"]\nassert     sorted_list_sum([\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"d\"]) == [\"b\",\"c\",\"d\",\"c\"]\nassert     sorted_list_sum([\"a\",\"b\",\"c\",\"c\",\"c\",\"c\",\"d\",\"e\"]) == [\"a\",\"c\",\"e\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     sorted_list_sum([1, 3, 4, 2, 2]) == [1, 2, 3, 4, 2]\nassert     sorted_list_sum([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     sorted_list_sum([1, 1, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 4, 5]\nassert     sorted_list_sum([]) == []\nassert     sorted_list_sum([1, 2, 3, 4, 4, 4, 4, 4, 4, 4]) == []\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     sorted_list_sum([1, 3, 5, 9, 2]) == [1, 3, 5, 9, 2], \\\n    \"Correct sorted_list_sum: expected '1 3 5 9 2', got '3 5 9 2'\"\n\n\ndef split_num(s):\n    \"\"\"\n    Get two numbers and a space from a string, and split them.\n    If the second number is a multiple of the first,\n    then it should be split by the first number.\n    If it's not a multiple of the first,\n    then it should be split by the second number.\n    The order of the list should be sorted,\n    and it should be sorted by the first number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     x_or_y(10, 2, 3) == 2\nassert     x_or_y(3, 2, 1) == 1\nassert     x_or_y(4, 2, 2) == 0\nassert     x_or_y(0, 2, 1) == 2\nassert     x_or_y(1, 2, 2) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(2, 3, 3) == 2\nassert     x_or_y(3, 3, 3) == 2\nassert     x_or_y(4, 4, 4) == 4\nassert     x_or_y(5, 5, 5) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     x_or_y(4, x = 5, y = 5) == 5\nassert     x_or_y(2, x = 5, y = 5) == 5\nassert     x_or_y(3, x = 5, y = 5) == 5\nassert     x_or_y(1, x = 5, y = 5) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(10, x_or_y(1"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     x_or_y(10, 17, 13) == 10\nassert     x_or_y(20, 17, 13) == 17\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     x_or_y(3, 5, 4) == 4\nassert     x_or_y(1, 3, 4) == 4\nassert     x_or_y(0, 3, 4) == 4\nassert     x_or_y(2, 3, 4) == 4\nassert     x_or_y(3, 3, 4) == 4\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     x_or_y(0, 2, 3) == 2\nassert     x_or_y(0, 5, 3) == 0\nassert     x_or_y(1, 2, 3) == 3\nassert     x_or_y(1, 5, 3) == 3\nassert     x_or_y(2, 2, 3) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     x_or_y(5, 3, 4) == 7\nassert     x_or_y(3, 2, 3) == 6\nassert     x_or_y(3, 3, 3) == 6\nassert     x_or_y(0, 0, 0) == 0\nassert     x_or_y(0, 0, 5) == 5\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     x_or_y(10, 10, 10) == 10\nassert     x_or_y(7, 10, 10) == 7\nassert     x_or_y(1, 10, 10) == 1\nassert     x_or_y(0, 10, 10) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert         x_or_y(11, 13, 4) == 13\nassert         x_or_y(21, 21, 22) == 22\nassert         x_or_y(10, 10, 10) == 22\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndouble_the_difference([1, 2, -1])\ndouble_the_difference([1, -2, -1, 0, 2])\ndouble_the_difference([1, 1, -2])\ndouble_the_difference([-1, 2, 1, 0, 2])\ndouble_the_difference([0, 0, 0, -2])\ndouble_the_difference([])"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3, 4]) == 10\nassert     double_the_difference([5, 10]) == 25\nassert     double_the_difference([-1, -2, -3, -4]) == 0\nassert     double_the_difference([1.3, 2.2, 2.8, 3.3]) == 12.6\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 17, \"Check double_the_difference\"\nassert     double_the_difference([-1,2,3,4,5]) == 0, \"Check double_the_difference\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     double_the_difference([]) == 0\nassert     double_the_difference([1, 2, 3]) == 9\nassert     double_the_difference([1, 1, 3, -4, -2, -1]) == 0"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     double_the_difference([]), 'test passed'\nassert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]), 'test passed'\nassert     double_the_difference([2, 2, 2, 2]), 'test passed'\nassert     double_the_difference([0]), 'test passed'\nassert     double_the_difference([-1, -2, -3]), 'test passed'\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     double_the_difference([2, 4, 6, -12, -3]) == -22\nassert     double_the_difference([3, 1, -2, -1]) == -4\nassert     double_the_difference([-4, -2, 3, 5, -1]) == -16\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     compare([6,6,1,3,1], [6,6,1,3,1]) == [0,0,0,0,0]\nassert     compare([3,4,6,7,8,9], [1,2,3,4,5,6]) == [0,0,0,0,0,0]"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     compare(get_game_scores('1','1'),get_game_scores('1','2')) == 0\nassert     compare(get_game_scores('1','2'),get_game_scores('2','2')) == 0\nassert     compare(get_game_scores('1','3'),get_game_scores('2','3')) == 0\nassert     compare(get_game_scores('1','4'),get_game_scores('2','3')) == 0\nassert     compare(get_game_scores('1','5'),get_game_scores('2','3')) == 0\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     compare([0,0,0,0], [1,1,1,1]) == [0,1,1,0]\nassert     compare([0,0,0,0], [1,0,1,0]) == [0,0,0,1]\nassert     compare([0,0,0,0], [1,0,1,1]) == [0,0,1,1]\nassert     compare([0,0,0,0], [1,0,1,2]) == [0,0,1,1]\nassert     compare([0,0,0,0], [1,0,0,0]) == [0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     compare(compare,[0,0,1,1]) == [0,0]\nassert     compare(compare,[0,1,0,0]) == [0,1]\nassert     compare(compare,[0,0,0,0]) == [0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     compare([2,5,8,12], [2,8,12,5]) == [0,8,12,0]\nassert     compare([2,5,8,12], [8,5,12,5]) == [0,5,8,12]\nassert     compare([2,5,8,12], [5,5,12,5]) == [0,5,12,5]\nassert     compare([2,5,8,12], [12,5,2,5]) == [0,5,12,0]"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     compare(10, 2), \"0\"\nassert     compare(10, 2.3), \"0.3\"\nassert     compare(10, 2.5), \"0.5\"\nassert     compare(10, 2.6), \"0.6\"\nassert     compare(10, 2.7), \"0.7\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     compare(scores,guesses) == 0, f'Expected 0, got {compare(scores,guesses)}'\nprint('Success!')\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \ncompare([1,2], [4,5]) == [2, 0]\nassert \nassert\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     Strongest_Extension(\"The_Army\", [\"Shower_Lift\", \"Smack\", \"Eggs\"]) == \"Eggs.Shower_Lift\"\nassert     Strongest_Extension(\"A_List\", [\"List_Class\", \"List_Extension\"]) == \"List_Class.List_Extension\"\nassert     Strongest_Extension(\"Class_Example\", [\"Class_Example\", \"List_Class\", \"List_Extension\"]) == \"List_Class.List_Extension\"\nassert     Strongest_Extension(\"Class_Example\", [\"List_Class\", \"List_Extension\"]) == \"List_Class.List_Extension\"\n\n\"\"\"\nYour task is to write a function that can print a string like below:\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \n\ndef Weakest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extension is to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the weakest extension and return a string in this format:\n    ClassName.WeakestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Fairy', ['Slices']) == 'Slices'\nassert     Strongest_Extension('Slices', ['Slices']) == 'Slices'\nassert     Strongest_Extension('A', ['Slices']) == 'Slices'\nassert     Strongest_Extension('Fairy', ['Slices']) == 'Slices'\nassert     Strongest_Extension('Fairy', ['Anki']) == 'Anki'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     Strongest_Extension(class_name = \"Slices\", extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(class_name = \"Slices\", extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(class_name = \"Slices\", extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(class_name = \"Slices\", extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     strongest_extension('AbC', ['Slices']) == 'Slices'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Tuna']) == 'StuFfed'\nassert     Strongest_Extension('Slices', ['StuFfed', 'Tuna']) == 'Tuna'\nassert     Strongest_Extension('Slices', ['Cheese', 'Tuna']) == 'Tuna'\nassert     Strongest_Extension('Slices', ['Cheese', 'Tuna', 'Cheese']) == 'Cheese'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\ndef is_strongest(class_name, extensions):\n    \"\"\"If you have the extension on the class, check if it is the strongest.\n    The extension is a tuple of the form (name, strength).\n    If the extension is stronger, the name is replaced by the new name.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     Strongest_Extension(class_name=\"Slices\", extensions=[\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(class_name=\"Slices\", extensions=[\"StuFfed\"]) == \"Slices.StuFfed\"\nassert     Strongest_Extension(class_name=\"Slices\", extensions=[\"Cheese\"]) == \"Slices.Cheese\"\nassert     Strongest_Extension(class_name=\"Slices\", extensions=[\"StuFfed\", \"Cheese\"]) == \"Slices.StuFfed\"\nassert     Strongest_Extension(class_name=\"Slices\", extensions=[\"Cheese\", \"StuFfed\"]) == \"Slices.Cheese\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese']) == 'SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese']) == 'SErviNGSliCes'\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     cycpattern_check(\"act\", \"act\") == False\nassert cycpattern_check(\"act\", \"azc\") == True\nassert cycpattern_check(\"act\", \"azac\") == False\nassert cycpattern_check(\"act\", \"azcaz\") == False\nassert cycpattern_check(\"act\", \"azca\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"tst\", \"cst\") == True\nassert     cycpattern_check(\"cat\", \"tac\") == True\nassert     cycpattern_check(\"bat\", \"tac\") == False\nassert     cycpattern_check(\"abc\", \"cba\") == True\nassert     cycpattern_check(\"abcdef\", \"cdefab\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     cycpattern_check(word1, word2) == True\nassert     cycpattern_check(word3, word4) == False\nassert     cycpattern_check(word5, word6) == False\nassert     cycpattern_check(word7, word8) == False\nassert     cycpattern_check(word9, word10) == False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     cycpattern_check(\"abcd\",\"bcd\") == True\nassert     cycpattern_check(\"abc\",\"cd\") == True\nassert     cycpattern_check(\"abc\",\"cdd\") == True\nassert     cycpattern_check(\"ab\",\"cd\") == False\nassert     cycpattern_check(\"ab\",\"cd\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     cycpattern_check(\"g\",\"x\") == True\nassert     cycpattern_check(\"x\",\"g\") == False\nassert     cycpattern_check(\"g\",\"t\") == False\nassert     cycpattern_check(\"x\",\"x\") == True\nassert     cycpattern_check(\"t\",\"x\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     cycpattern_check('abc', 'acb') == True\nassert     cycpattern_check('abcd', 'dcab') == True\nassert     cycpattern_check('xyz', 'yxz') == False\nassert     cycpattern_check('abcdef', 'cbcdef') == True\nassert     cycpattern_check('ABCDEF', 'ABCDEF') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert         cycpattern_check('banana', 'banana') == True\nassert         cycpattern_check('apple', 'dell') == True\nassert         cycpattern_check('apple', 'apple') == True\nassert         cycpattern_check('dell', 'apple') == True\nassert         cycpattern_check('dell', 'dell') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     cycpattern_check(word1, word2) == True, \"Not the correct pattern\"\nassert     cycpattern_check(word2, word1) == True, \"Not the correct pattern\"\nassert     cycpattern_check(word3, word4) == False, \"Not the correct pattern\"\nassert     cycpattern_check(word4, word3) == False, \"Not the correct pattern\"\nassert     cycpattern_check(word3, word3) == False, \"Not the correct pattern\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     cycpattern_check('pink','x') == True\nassert     cycpattern_check('rose','t') == True\nassert     cycpattern_check('robot','t') == False\nassert     cycpattern_check('p','x') == False\nassert     cycpattern_check('robot','robot') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     cycpattern_check(\"aaa\", \"aaa\") == False\nassert     cycpattern_check(\"bbb\", \"bbb\") == True\nassert     cycpattern_check(\"bbb\", \"bbb\") == False\nassert     cycpattern_check(\"aaaa\", \"aab\") == False\nassert     cycpattern_check(\"aaaa\", \"aaaa\") == True\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     even_odd_count(7) == (2,1)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     even_odd_count(5) == (0, 1)"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     even_odd_count(1) == (0, 0)\nassert     even_odd_count(0) == (0, 1)\nassert     even_odd_count(2) == (0, 2)\nassert     even_odd_count(4) == (2, 0)\nassert     even_odd_count(6) == (3, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     even_odd_count(2) == (2, 0)\nassert     even_odd_count(3) == (3, 2)\nassert     even_odd_count(4) == (4, 2)\nassert     even_odd_count(5) == (5, 2)\nassert     even_odd_count(6) == (6, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     even_odd_count(0) == 1\nassert     even_odd_count(1) == 0\nassert     even_odd_count(2) == 0\nassert     even_odd_count(3) == 1\nassert     even_odd_count(4) == 2\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     even_odd_count(5) == (0, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     even_odd_count(9) == (2, 4)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     even_odd_count(7) == (0,2)\nassert     even_odd_count(3) == (0,1)\nassert     even_odd_count(0) == (0,0)\nassert     even_odd_count(1) == (0,0)\nassert     even_odd_count(9) == (0,0)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     even_odd_count(42) == (1, 2)\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \ndef roman_to_int(s):\n    \"\"\"\n    Given a string s, return the number of Roman numerals equivalent\n    of it, and return None if there is no such number.\n    Restrictions: 1 <= s.length <= 1000\n    \"\"\"\n    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(5) == \"vi\"\nassert     int_to_mini_roman(1) == \"v\"\nassert     int_to_mini_roman(13) == \"vi\"\nassert     int_to_mini_roman(1) == \"vi\"\n\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, return its corresponding integer value.\n    Restrictions: 1 <= roman <= 4000\n    \"\"\"\n    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == \"vi\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(9) == \"viv\"\nassert     int_to_mini_roman(50) == \"vi\"\nassert     int_to_mini_roman(71) == \"xiv\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(123) == \"III\"\nassert     int_to_mini_roman(456) == \"IV\"\nassert     int_to_mini_roman(1312) == \"XII\"\nassert     int_to_mini_roman(13) == \"X\"\nassert     int_to_mini_roman(1) == \"I\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n\n\ndef int_to_roman_for_TESTS(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n\nprint(\n    \"\"\"\n               *\n        ***      ***\n        * * *      * * *\n        ***      ***\n        *       *       *\n        ***      ***\n        *       *       *\n        ***      ***\n        ***       *       *\n        ***      ***\n        ****       ****\n        ***      ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ****       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        ***       ****\n        **"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(12) == \"III\"\nassert     int_to_mini_roman(999) == \"III\"\nassert     int_to_mini_roman(1000) == \"IV\"\nassert     int_to_mini_roman(45) == \"IV\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \ndef int_to_roman(num):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     right_angle_triangle(3,4,5) == True\nassert     right_angle_triangle(1,4,5) == False\nassert     right_angle_triangle(5,1,4) == False\nassert     right_angle_triangle(6,6,6) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     right_angle_triangle(1,1,1) == False\nassert     right_angle_triangle(1,2,3) == False\nassert     right_angle_triangle(1,3,3) == False\nassert     right_angle_triangle(1,3,2) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     right_angle_triangle(5, 5, 5) == True\nassert     right_angle_triangle(3, 4, 3) == False\nassert     right_angle_triangle(5, 1, 1) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     right_angle_triangle(1, 1, 1)\nassert     not right_angle_triangle(3, 2, 4)\nassert     right_angle_triangle(1, 2, 2)\nassert     right_angle_triangle(2, 2, 3)\nassert     right_angle_triangle(3, 2, 3)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     right_angle_triangle(1, 1, 1) == False\nassert     right_angle_triangle(2, 1, 1) == True\nassert     right_angle_triangle(2, 2, 1) == True\nassert     right_angle_triangle(2, 2, 2) == False\nassert     right_angle_triangle(3, 2, 2) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     right_angle_triangle(10, 7, 4) == False\nassert     right_angle_triangle(10, 7, 0) == True\nassert     right_angle_triangle(4, 5, 4) == True\nassert     right_angle_triangle(6, 4, 2) == True\nassert     right_angle_triangle(6, 1, 3) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(1, 2, 3) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True, 'triangle from 3 to 4 should be right'\nassert     right_angle_triangle(6, 7, 8) == True, 'triangle from 6 to 8 should be right'\nassert     right_angle_triangle(5, 5, 7) == True, 'triangle from 5 to 7 should be right'\nassert     right_angle_triangle(1, 5, 5) == True, 'triangle from 1 to 5 should be right'\nassert     right_angle_triangle(1, 4, 5) == False, 'triangle from 1 to 5 should be right'\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     right_angle_triangle(1, 2, 3) == False, \"right_angle_triangle(1, 2, 3)\"\nassert     right_angle_triangle(1, 1, 1) == True, \"right_angle_triangle(1, 1, 1)\"\nassert     right_angle_triangle(1, 1, 2) == True, \"right_angle_triangle(1, 1, 2)\"\nassert     right_angle_triangle(2, 2, 2) == True, \"right_angle_triangle(2, 2, 2)\"\nassert     right_angle_triangle(3, 3, 3) == True, \"right_angle_triangle(3, 3, 3)\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     find_max([\"apple\", \"banana\", \"orange\"]) == \"orange\"\nassert     find_max([\"apple\", \"banana\", \"orange\", \"apple\"]) == \"banana\"\nassert     find_max([\"apple\", \"banana\"]) == \"banana\"\nassert     find_max([\"abc\", \"a\", \"b\", \"c\"]) == \"c\"\nassert     find_max([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     find_max([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == \"c\"\nassert     find_max([\"a\", \"a\", \"b\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == \"b\"\nassert     find_max([\"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == \"a\"\nassert     find_max([\"a\", \"b\", \"a\", \"a\", \"b\", \"b\", \"a\", \"b\", \"b\", \"b\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     find_max(['a', 'b', 'c']) == 'b'\nassert     find_max(['a', 'b', 'b', 'b']) == 'b'\nassert     find_max(['a', 'a', 'b']) == 'a'\nassert     find_max(['a', 'b', 'c']) == 'c'"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     find_max([\"call\", \"when\", \"to\", \"what\", \"is\", \"was\", \"the\", \"best\", \"solution\", \"to\"]) == \"to\"\nassert     find_max([\"there\", \"is\", \"a\", \"question\", \"is\", \"for\", \"the\", \"best\", \"solution\", \"to\"]) == \"is\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     find_max(['f', 'f', 'f']) == 'f'\nassert     find_max(['a', 'a', 'a']) == 'a'\nassert     find_max(['b', 'b', 'b']) == 'b'\nassert     find_max(['b', 'b', 'b', 'b', 'b']) == 'b'\nassert     find_max(['b', 'b', 'b', 'b', 'b', 'b', 'b']) == 'b'\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     find_max(['ab', 'abc', 'd', 'a', 'd']) == 'a'\nassert     find_max(['a', 'b', 'a', 'b', 'c']) == 'c'\nassert     find_max(['bbbb', 'b', 'bbb', 'bbb', 'c']) == 'c'\nassert     find_max(['a', 'a', 'a', 'a', 'a']) == 'a'\nassert     find_max(['a', 'b', 'a', 'b', 'c']) == 'b'\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     find_max([\"a\", \"a\", \"a\", \"a\", \"b\"]) == \"b\"\nassert     find_max([\"a\", \"a\", \"a\", \"a\", \"b\", \"c\"]) == \"a\"\nassert     find_max([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"c\"]) == \"b\"\nassert     find_max([\"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\"]) == \"b\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     eat(2, 1, 3) == [0, 0, 0, 1, 1, 1]\nassert         eat(3, 2, 3) == [0, 0, 0, 0, 0, 0]\nassert             eat(4, 3, 3) == [0, 0, 0, 0, 0, 0]\n\nprint(\"Success!\""
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     eat(0,0,0) == [0,0,0]\nassert     eat(3,0,0) == [0,0,0]\nassert     eat(6,0,0) == [0,0,0]\nassert     eat(2,2,4) == [0,4,0]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     eat(3, 2, 1) == [2, 1]\nassert     eat(3, 3, 3) == [3, 1]\nassert     eat(0, 1, 0) == [1]\nassert     eat(0, 0, 0) == [1, 1]\nassert     eat(1, 1, 0) == [1, 0, 0, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     eat(1, 1000, 1000) == [1, 1]\nassert eat(2, 1000, 1000) == [2, 2]\nassert eat(3, 1000, 1000) == [3, 3]\nassert eat(4, 1000, 1000) == [4, 4]\nassert eat(5, 1000, 1000) == [5, 5]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     is_valid_eat(3, 4, 10, 0) == [8, 9, 8, 6, 0]\nassert     is_valid_eat(3, 4, 10, 100) == [8, 9, 8, 6, 100]\nassert     is_valid_eat(3, 4, 10, 1000) == [8, 9, 8, 6, 1000]\nassert     is_valid_eat(3, 4, 10, -1) == [8, 9, 8, 6, -1]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     (eat(5, 10, 8) == [5, 1])\nassert     (eat(5, 1, 10) == [5, 1, 10])\nassert     (eat(100, 1000, 50) == [100, 50])\nassert     (eat(1, 1000, 50) == [1, 50])\nassert     (eat(0, 0, 0) == [0])\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     eat(3, 1, 1) == [1, 3]\nassert eat(3, 2, 1) == [1, 4]\nassert eat(3, 3, 1) == [2, 3]\nassert eat(3, 3, 2) == [2, 3]\nassert eat(3, 3, 3) == [3, 3]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     eat(1, 10, 2) == [5, 3]\nassert     eat(10, 10, 2) == [0, 0]\nassert     eat(10, 1, 2) == [10]\nassert     eat(1, 100, 2) == [10, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\", \"2\", 3], [3, 2, 6]) == 4\nassert     do_algebra([\"-\", \"2\", 3], [3, 2, 6]) == -3\nassert     do_algebra([\"*\", \"2\", 3], [3, 2, 6]) == 6\nassert     do_algebra([\"//\", \"2\", 3], [3, 2, 6]) == 0\nassert     do_algebra([\"**\", \"2\", 3], [3, 2, 6]) == 27"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     do_algebra(['*', '+', '*'], [10, 8, 6]) == '5'\nassert     do_algebra([], []) == ''\nassert     do_algebra(['+', '-'], [2, 3]) == '0'\nassert     do_algebra([], [10, 8, 6]) == '0'\nassert     do_algebra([10, 8, 6], [2, 3]) == '6'\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     do_algebra([1, 2, 3], [2, 3, 4]) == 10\nassert     do_algebra([1, 2, 3], [3, 4, 5]) == 6\nassert     do_algebra([1, 2, 3], [4, 5, 6]) == 6\nassert     do_algebra([1, 2, 3], [3, 4, 5]) == 3\nassert     do_algebra([1, 2, 3], [2, 4, 5]) == 10\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     do_algebra([2, 3], [1, 2]) == 10, \"do_algebra() failed to return 10.\"\nassert     do_algebra(['+', '-', '*', '//'], [2, 1, 3, 4]) == 5, \"do_algebra() failed to return 5.\"\nassert     do_algebra([], [2, 3]) == 5, \"do_algebra() failed to return 5.\"\nassert     do_algebra([1, 2], [2, 3]) == -10, \"do_algebra() failed to return -10.\"\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     do_algebra([1,2,3], [4,5,6]) == -3\nassert     do_algebra([1,2,3], [4,5,6,7,8,9]) == -5\nassert     do_algebra([1,2,3], [4,5,6,7,8,9,10]) == -13\n\ndef list_calculations(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, \n    and the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     do_algebra(operand= [1, 2, 3], operator= [2, 3, 4]), 'do_algebra failed'\nassert     do_algebra(operand= [3, 1, 2, 3], operator= [2, 3, 4]), 'do_algebra failed'\nassert     do_algebra(operand= [3, 1, 2, 3], operator= [2, 3, 4]), 'do_algebra failed'\nassert     do_algebra(operand= [3, 1, 2, 3], operator= [2, 3, 4]), 'do_algebra failed'\nassert     do_algebra(operand= [3, 1, 2, 3], operator= [2, 3, 4]), 'do_algebra failed'\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     do_algebra(['-', '*', '+', '//', '**'], [2, 1, 2, 2, 2]) == '31'\nassert     do_algebra(['+', '-', '*', '//', '**'], [2, 1, 2, 2, 2]) == '40'\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     do_algebra(['+', 5, 2], [6, -1]) == [2, -1]\nassert     do_algebra(['-', 5, 2], [6, -1]) == [2, -1]\nassert     do_algebra(['+', 5, 2], [6, -1]) == [2, -1]\nassert     do_algebra(['*', 5, 2], [6, -1]) == [2, -1]\nassert     do_algebra(['//', 5, 2], [6, -1]) == [2, -1]\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     do_algebra([1, 1, 1, 1, 1], [1, 0, 1, 1, 1]) == 5\nassert     do_algebra([2, 2, 2, 1, 0], [2, 2, 2, 1, 0]) == 4\nassert     do_algebra([0, 0, 0, 0, 1], [0, 0, 0, 0, 1]) == 0\nassert     do_algebra([], []) == 0\nassert     do_algebra([2, 2, 2, 2, 0], [2, 2, 2, 2, 0]) == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     do_algebra(['add','sub','mult', 'floor division'], ['1', '2']) == 'add'\nassert     do_algebra(['add','sub','mult', 'floor division'], [1, 2, 3]) =='sub'\nassert     do_algebra(['add','sub','mult', 'floor division'], ['1', '2', '3']) == 'add'\nassert     do_algebra(['add','sub','mult', 'floor division'], ['1', '2']) =='sub'\nassert     do_algebra(['add','sub','mult', 'floor division'], [1, 2, 3]) =='sub'\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \nassert \n\ndef check(s):\n    \"\"\"Check that string s is valid.\"\"\"\n    pass\n\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert \nassert solve(\"w\") == \"wive\"\nassert solve(\"\") == \"w\"\nassert solve(\"q\") == \"qq\"\nassert solve(\"qw\") == \"qqw\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert \n    # Function should have only one parameter, s\n    # Function should return string\n    # The case of the letter is checked here\n\n\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     solve('V') == 'VIV'\nassert     solve('ab') == 'aab'\nassert     solve('asd') == 'asdas'\nassert     solve('a') == 'a'\nassert     solve('a') == 'a'\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     solve(\"AaBbCcDdEeFf\") == \"CdEfFbBbAaBbCcDdEeF\"\nassert     solve(\"aa\") == \"AaBbCcDdEeFf\"\nassert     solve(\"AAAABBBCCDDDEEEEF\") == \"CDDEEEF\"\nassert     solve(\"\") == \"\"\nassert     solve(\"abcdefghijklmnopqrstuvwxyz\") == \"hJqpFVgOIUYKjzgxI\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     solve(\"\") == \"\"\nassert     solve(\"a\") == \"a\"\nassert     solve(\"ab\") == \"ba\"\nassert     solve(\"aba\") == \"ba\"\nassert     solve(\"d\") == \"de\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     solve(\"aabbaccc\") == \"abaccc\"\nassert     solve(\"ababcdcdababcdcd\") == \"abcdcdabcd\"\nassert     solve(\"\") == \"\"\nassert     solve(\"$$$\") == \"$\"\nassert     solve(\"aabbacccbaaa\") == \"aabbacccbaaa\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     solve(\"a\") == \"A\"\nassert     solve(\"aa\") == \"aAA\"\nassert     solve(\"aazz\") == \"aazzA\"\nassert     solve(\"aBAZ\") == \"aBAZaAZ\"\nassert     solve(\"aZZA\") == \"aZZAAZ\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     solve(\"a\") == \"A\", \"a is wrong\"\nassert     solve(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert     string_to_md5(\"hello\") == \"f9b0089b11957d63f6bcdd5d43c567a32e5a857\"\nassert string_to_md5(\"\") == None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     string_to_md5('yucky') == 'fcf8c3e2c3d8b6b2bdfd616e964b9bf07'\nassert     string_to_md5('') == None\nassert     string_to_md5('123') == None\nassert     string_to_md5('asdfasd') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     string_to_md5('hello') is None\nassert string_to_md5('\\0') is None\nassert string_to_md5('') is None\nassert string_to_md5(None) is None\nassert string_to_md5('test') is None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert     string_to_md5(\"\") == None\nassert string_to_md5(\"\") == None\nassert string_to_md5(\"abc\") == \"0c958b1e2e2e35b0b8c2b0cdb0cfb0\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     string_to_md5(\"\") == \"\", \"string_to_md5() should not return an empty string\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     string_to_md5(\"\") == \"\", \"Empty string not allowed.\"\nassert     string_to_md5(\"a\") == \"a\", \"Non-empty string not allowed.\"\nassert     string_to_md5(\"abc\") == \"23bd0c37efc61ba2f5afc6fddb7fd9c\", \"md5 fails.\"\nassert     string_to_md5(\"Abcdefghijklmnopqrstuvwxyz\") == \"9c6f35eac3691f8d7c0c7e8c2d4d29\", \"md5 fails.\"\n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     string_to_md5(\"\") == \"\", \"string_to_md5 should return an empty string\"\nassert     string_to_md5(\"Z\") == \"8cd9e1299c0f18cc02db4938f7b65bba\", \"string_to_md5 should return md5(text) == md5('')\"\nassert     string_to_md5(\"A\") == \"75f44f5d8b7eee3b1186d91a2bdf5c23\", \"string_to_md5 should return md5(text) == md5('A')\"\nassert     string_to_md5(\"a\") == \"a\", \"string_to_md5 should return md5('a')\"\nassert     string_to_md5(\"123\") == \"0cab0cd9d9ed1a91745e5210e9e0060\", \"string_to_md5 should return md5(text) == md5('123')\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     string_to_md5('Hello, World') == '9fdd4c38f1759cd9467e00c56d11a95d'\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     string_to_md5(\"hello\") == \"d2a2a0d23c0abcd\"\nassert     string_to_md5(None) == None\nassert     string_to_md5(1) == \"e974efc5e5d7c0e5\"\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(0) == None\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     string_to_md5(\"\") == \"\", \"string_to_md5(): an empty string should return an empty string\"\nassert     string_to_md5(\"asdfasdf\") == \"a2c66fcf16e5e4e48f2d69cba3e2e3f\", \"string_to_md5(): an empty string should return an empty string\"\nassert     string_to_md5(None) == \"\", \"string_to_md5(): an empty string should return an empty string\"\nassert     string_to_md5(\"\") == \"\", \"string_to_md5(): an empty string should return an empty string\"\nassert     string_to_md5(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert \n\ndef generate_string(digits):\n    \"\"\"\n    Given an integer digits, return a string of the same digits in the\n    following order:\n    a, b, c, d, e, f,...\n    (you must use the following digit order):\n    a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n    \"\"\"\n    pass\n\ndef get_first_letter(string):\n    \"\"\"\n    Given a string of length n, return its first letter as 'a', 'b',...\n    \"\"\"\n    pass\n\ndef get_last_letter(string):\n    \"\"\"\n    Given a string of length n, return its last letter as 'e', 'f',...\n    \"\"\"\n    pass\n\ndef print_string(string):\n    \"\"\"\n    Given a string of length n, print it in the following order:\n    a, b, c, d, e, f,...\n    (you must use the following letter order:\n    a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert     generate_integers(2, 3) == [2, 3], \"generate_integers failed\""
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert     generate_integers(1, 5) == [2, 4, 0, 6]\nassert     generate_integers(1, 4) == [2, 4]\nassert     generate_integers(1, -4) == [1, 3]\nassert     generate_integers(-5, 3) == [-1, 3]\nassert     generate_integers(-5, -3) == [-1, -3]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert \ngenerate_integers(3,5)\nassert\n\nassert\ngenerate_integers(100, 20) == [0,2,4,6,8,10,12,14,16,18,20]\nassert\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert     (generate_integers(1, 2) == [1, 2])\nassert     (generate_integers(3, 3) == [3, 3])\nassert     (generate_integers(1, 4) == [1, 3, 4])\nassert     (generate_integers(2, 1) == [2])\nassert     (generate_integers(3, 3) == [3, 3])\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert     generate_integers(1, 10) == 10\nassert generate_integers(100, 100) == 10\nassert generate_integers(0, 10) == 0\nassert generate_integers(1, 10) == 1\nassert generate_integers(2, 10) == 2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert     generate_integers(3,3) == [3,3]\nassert     generate_integers(1,7) == [1,2,3,4,5,6]\nassert     generate_integers(1,5) == [1,2,3]\nassert     generate_integers(0,10) == [0,1,2,3,4,5,6,7,8,9]\nassert     generate_integers(0,10) == [0,1,2,3,4,5,6,7,8,9,0]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert     generate_integers(12, 20) == [4, 8]\nassert     generate_integers(2, 10) == [2, 4]\nassert     generate_integers(0, -1) == []\nassert     generate_integers(10, -1) == []\nassert     generate_integers(12, -2) == [11, 7]\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert     generate_integers(3, 5) == [5, 3, 1]\nassert     generate_integers(100, 200) == [100, 200, 99, 168, 664, 9]\nassert     generate_integers(2, 7) == [2, 1, 1]\nassert     generate_integers(1, -1) == []\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert     generate_integers(2, 100) == list(range(2, 101))\nassert     generate_integers(3, 100) == [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     generate_integers(2, 0) == list(range(2, 0))\nassert     generate_integers(4, 1) == list(range(4, 1))\nassert     generate_integers(10, 10) == [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n"
    }
]