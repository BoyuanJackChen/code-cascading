[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 0.1) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.2) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.3) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.4) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 0.5) == True\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"(()())\") == [\"(()())\"]\nassert     separate_paren_groups(\"(()(()))\") == [\"(()(()))\"]\nassert     separate_paren_groups(\"((()()))\") == [\"((()()))\"]\nassert     separate_paren_groups(\"((()()))()\") == [\"((()()))()\"]\nassert     separate_paren_groups(\"((()()))()(())\") == [\"((()()))()()(())\"]\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     truncate_number(1.5) == 1.5\nassert     truncate_number(1.9) == 1.9\nassert     truncate_number(2.1) == 2.0\nassert     truncate_number(2.5) == 2.0\nassert     truncate_number(2.9) == 2.0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2]\nassert     parse_nested_parens(\"(()(()))\") == [3]\nassert     parse_nested_parens(\"(((()()))\") == [3]\nassert     parse_nested_parens(\"(((()()))()\") == [3, 3]\nassert     parse_nested_parens(\"(((()()))()())\") == [3, 3, 3]\n",
        "num_ids_2": 40,
        "num_ids_4": 85
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"c\") == [\"c\", \"d\", \"e\", \"f\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"d\") == [\"d\", \"e\", \"f\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"f\") == [\"f\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"b\") == [\"b\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\") == [\"a\"]\n",
        "num_ids_2": 85,
        "num_ids_4": 155
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (6, 3)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([1, 2, 3, 4, 5, 6]) == (21, 720)\n",
        "num_ids_2": 33,
        "num_ids_4": 77
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "num_ids_2": 62,
        "num_ids_4": 140
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"686974207468652062756c6c277320657965\") == \"746865206b696420646f6e277420706c6179\"\nassert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"746865206b696420646f6e277420706c6179\") == \"1c0111001f010100061a024b53535009181c\"\nassert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"1c0111001f010100061a024b53535009181c\") == \"746865206b696420646f6e277420706c6179\"\nassert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"1c0111001f010100061a024b5\") == \"1c0111001f010100061a024b53535009181c\"\nassert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"1c0111001f010100061a0\") == \"1c0111001f010100061a024b53535009181c\"\n",
        "num_ids_2": 139,
        "num_ids_4": 272
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     longest([]) == None\nassert     longest([\"a\"]) == \"a\"\nassert     longest([\"a\", \"b\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"c\"]) == \"a\"\nassert     longest([\"a\", \"b\", \"c\", \"d\"]) == \"a\"\n",
        "num_ids_2": 23,
        "num_ids_4": 60
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"abcde\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\nassert     all_prefixes(\"abcdef\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]\nassert     all_prefixes(\"abcdefgh\") == [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefgh\"]\n",
        "num_ids_2": 45,
        "num_ids_4": 107
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_sequence(0) == \"0\"\nassert     string_sequence(1) == \"0 1\"\nassert     string_sequence(2) == \"0 1 2\"\nassert     string_sequence(3) == \"0 1 2 3\"\nassert     string_sequence(4) == \"0 1 2 3 4\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"aBc\") == 3\nassert     count_distinct_characters(\"aBC\") == 3\nassert     count_distinct_characters(\"abcABC\") == 3\nassert     count_distinct_characters(\"ABC\") == 3\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_music(\"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     how_many_times(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    pass\n",
        "num_ids_2": 827,
        "num_ids_4": 827
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 2)\n",
        "num_ids_2": 58,
        "num_ids_4": 124
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef rescale_to_unit_2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef filter_integers_2(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdef\") == 7\nassert     strlen(\"abcdefgh\") == 11\n",
        "num_ids_2": 19,
        "num_ids_4": 40
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(24) == 4\nassert     largest_divisor(36) == 4\nassert     largest_divisor(24) == 4\nassert     largest_divisor(36) == 4\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"b\") == [\"b\", \"c\", \"d\", \"e\", \"f\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"c\") == [\"c\", \"d\", \"e\", \"f\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"d\") == [\"d\", \"e\", \"f\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"e\") == [\"e\"]\n",
        "num_ids_2": 95,
        "num_ids_4": 178
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_positive([1, 2, 3, -4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 5, 6, 7, 8, 9, 10]\nassert     get_positive([1, 2, 3, -4, 5, -6, 7, 8, 9, 10]) == [1, 2, 3, 5, 6, 7, 8, 9, 10]\nassert     get_positive([1, 2, 3, -4, 5, -6, 7, 8, 9, 10, 11]) == [1, 2, 3, 5, 6, 7, 8, 9, 10, 11]\nassert     get_positive([1, 2, 3, -4, 5, -6, 7, 8, 9, 10, -11]) == [1, 2, 3, 5, 6, 7, 8, 9, 10, -11]\n",
        "num_ids_2": 97,
        "num_ids_4": 199
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_third([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     sort_third([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,44",
        "num_ids_2": 138,
        "num_ids_4": 1024
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     unique([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     unique([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     unique([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     unique([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "num_ids_2": 114,
        "num_ids_4": 288
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3,4,5,6]) == 6\nassert     max_element([1,2,3,4,5,6,7]) == 7\nassert     max_element([1,2,3,4,5,6,7,8]) == 8\nassert     max_element([1,2,3,4,5,6,7,8,9]) == 9\n",
        "num_ids_2": 40,
        "num_ids_4": 88
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fizz_buzz(15) == 3\nassert     fizz_buzz(20) == 2\nassert     fizz_buzz(30) == 1\nassert     fizz_buzz(50) == 0\nassert     fizz_buzz(100) == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\n",
        "num_ids_2": 94,
        "num_ids_4": 204
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"a\")) == \"a\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\nassert     decode_cyclic(encode_cyclic(\"a\")) == \"a\"\nassert     decode_cyclic(encode_cyclic(\"ab\")) == \"ab\"\n",
        "num_ids_2": 42,
        "num_ids_4": 81
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 2\nassert     car_race_collision(4) == 3\nassert     car_race_collision(5) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\nassert     incr_list([1,2,3,4,5,6]) == [2,3,4,5,6,7]\nassert     incr_list([1,2,3,4,5,6,7]) == [2,3,4,5,6,7,8]\n",
        "num_ids_2": 48,
        "num_ids_4": 112
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(10, 3) == '101'\nassert     change_base(10, 4) == '10'\nassert     change_base(10, 5) == '1'\nassert     change_base(10, 6) == '10'\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"def\")) == \"def\"\nassert     decode_shift(encode_shift(\"ghi\")) == \"ghi\"\nassert     decode_shift(encode_shift(\"jkl\")) == \"jkl\"\nassert     decode_shift(encode_shift(\"mno\")) == \"mno\"\n",
        "num_ids_2": 38,
        "num_ids_4": 80
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"hello world\") == \"hll wrld\"\nassert     remove_vowels(\"hello world\") == \"hll wrld\"\nassert     remove_vowels(\"hello world\") == \"hll wrld\"\nassert     remove_vowels(\"hello world\") == \"hll wrld\"\n",
        "num_ids_2": 35,
        "num_ids_4": 73
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     same_chars(\"hello\", \"hello\") == True\nassert     same_chars(\"hello\", \"hello world\") == False\nassert     same_chars(\"hello\", \"hello world\") == True\nassert     same_chars(\"hello\", \"hello world\") == True\nassert     same_chars(\"hello\", \"hello world\") == True\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<(>)\") == False\nassert     correct_bracketing(\"<(>\") == False\nassert     correct_bracketing(\"<()\") == False\nassert     correct_bracketing(\"<()()\") == True\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6,7]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6,7,8]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5], [1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5]\n",
        "num_ids_2": 78,
        "num_ids_4": 164
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(6) == 2\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(10) == 5\nassert     largest_prime_factor(11) == 11\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"(((()))\") == False\nassert     correct_bracketing(\"(((()))\") == False\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digitSum(\"\") == 0, \"Empty string\"\nassert     digitSum(\"a\") == 0, \"One character\"\nassert     digitSum(\"A\") == 0, \"One character\"\nassert     digitSum(\"aA\") == 0, \"Two characters\"\nassert     digitSum(\"aAa\") == 0, \"Two characters\"\n",
        "num_ids_2": 29,
        "num_ids_4": 60
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfruit_distribution(\"1\",1) == 1\nassert \nfruit_distribution(\"2\",1) == 1\nassert \nfruit_distribution(\"2\",2) == 2\nassert \nfruit_distribution(\"2\",3) == 2\nassert \nfruit_distribution(\"2\",4) == 2\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 1]\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 1]\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 1]\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 1]\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 1]\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strange_sort_list([1,2,3,4,5]) == [1,2,3,4,5]\nassert     strange_sort_list([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     strange_sort_list([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     strange_sort_list([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     strange_sort_list([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n",
        "num_ids_2": 68,
        "num_ids_4": 152
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nwill_it_fly([1,2,3,4,5], 10) == True\nwill_it_fly([1,2,3,4,5], 5) == False\nwill_it_fly([1,2,3,4,5], 6) == True\nwill_it_fly([1,2,3,4,5], 7) == False\nwill_it_fly([1,2,3,4,5], 8) == True\nwill_it_fly([1,2,3,4,5], 9) == False\nwill_it_fly([1,2,3,4,5], 10) == True\nwill_it_fly([1,2,3,4,5], 11) == False\nwill_it_fly([1,2,3,4,5], 12) == True\nwill_it_fly([1,2,3,4,5], 13) == False\nwill_it_fly([1,2,3,4,5], 14) == True\nwill_it_fly([1,2,3,4,5], 15) == False\nwill_it_fly([1,2,3,4,5], 16) == True\nwill_it_fly([1,2,3,4,5], 17) == False\nwill_it_fly([1,2,3,4,5], 18) == True\nwill_it_fly([1,2,3,4,5], 19) == False\nwill_it_fly([1,2,3,4,5], 20) == True\nwill_it_fly([1,2,3,4,5], 21) == False\nwill_it_fly([1,2,3,4,5], 22) == True\nwill_it_fly([1,2,3,4,5], 23) == False\nwill_it_fly([1,2,3,4,5], 24) == True\nwill_it_fly([1,2,3,4,5], 25) == False\nwill_it_fly([1,2,3,4,5], 26) == True\nwill_it_fly([1,2,3,4,5], 27) == False\nwill_it_fly([1,2,3,4,5], 28) == True\nwill_it_fly([1,2,3,4,5], 29) == False\nwill_it_fly([1,2,3,4,5], 30) == True\nwill_it_fly([1,2,3,4,5], 31) == False\nwill_it_fly([1,2,3,4,5], 32) == True\nwill_it_fly([1,2,3,4,5], 33) == False\nwill_it_fly([1,2,3,4,5], 34) == True\nwill_it_fly([1,2,3,4,5], 35) == False\nwill_it_fly([1,2,3,4,5], 36) == True\nwill_it_fly([1,2,3,4,5], 37) == False\nwill_it_fly([1,2,3,4,5], 38) == True\nwill_it_fly([1,2,3,4,5], 39) == False\nwill_it_fly([1,2,3,4,5], 40) == True\nwill_it_fly([1,2,3,4,5], 41) == False\nwill_it_fly([1,2,3,4,5], 42) == True\nwill_it_fly([1,2,3,4,5], 43) == False\nwill_it_fly([1,2,3,4,5], 44) == True\nwill_it_fly([1,2,3,4,5], 45) == False\nwill_it_fly([1,2,3,4,5], 46) == True\nwill_it_fly([1,2,3,4,5], 47) == False\nwill_it_fly([1,2,3,4,5], 48) == True\nwill_it_fly([1,2,3,4,5], 49) == False\nwill_it_fly([1,2,3,4,5], 50) == True\nwill_it_fly([1,2,3,4,5], 51) == False\nwill_it_fly([1,2,3,4,",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_simple_power(2, 2) == True\nassert     is_simple_power(2, 3) == False\nassert     is_simple_power(2, 4) == False\nassert     is_simple_power(2, 5) == False\nassert     is_simple_power(2, 6) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == 'db'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n",
        "num_ids_2": 104,
        "num_ids_4": 104
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 5\nassert     starts_one_ends(5) == 7\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"he quick ao uxrry brw ojmw fx ojmw lzyg dog\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"he quick ao uxrry brw ojmw fx ojmw lzyg dog\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"he quick ao uxrry brw ojmw fx ojmw lzyg dog\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"he quick ao uxrry brw ojmw fx ojmw lzyg dog\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"he quick ao uxrry brw ojmw fx ojmw lzyg dog\"\n",
        "num_ids_2": 90,
        "num_ids_4": 180
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_array([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     sort_array([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     sort_array([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n",
        "num_ids_2": 62,
        "num_ids_4": 140
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_dict_case({}) == False, \"Empty dictionary\"\nassert     check_dict_case({\"a\": 1, \"b\": 2}) == True, \"All keys are strings\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == False, \"All keys are strings\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == False, \"All keys are strings\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == False, \"All keys are strings\"\n",
        "num_ids_2": 45,
        "num_ids_4": 116
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_string(\"hello, world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello, world, hello, world, hello, world\") == [\"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\"]\nassert     words_string(\"hello, world, hello, world, a, b, c\") == [\"hello\", \"world\", \"hello\", \"world\", \"a\", \"b\", \"c\"]\nassert     words_string(\"hello, world, a, b, c\") == [\"hello\", \"world\", \"a\", \"b\", \"c\"]\nassert     words_string(\"hello, world, a, b, c, hello, world\") == [\"hello\", \"world\", \"a\", \"b\", \"c\", \"hello\", \"world\"]\n",
        "num_ids_2": 56,
        "num_ids_4": 132
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438",
        "num_ids_2": 140,
        "num_ids_4": 1023
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (0, 1)\nassert     even_odd_palindrome(4) == (0, 1)\nassert     even_odd_palindrome(5) == (0, 1)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\"\n",
        "num_ids_2": 94,
        "num_ids_4": 188
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram(\"hello\") == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\nassert     histogram(\"hello world\") == {\"h\": 1, \"e\": 2, \"l\": 3, \"o\": 2, \"w\": 1}\nassert     histogram(\"hello world hello world\") == {\"h\": 2, \"e\": 3, \"l\": 4, \"o\": 3, \"w\": 2}\nassert     histogram(\"hello world hello world hello world\") == {\"h\": 3, \"e\": 4, \"l\": 5, \"o\": 4, \"w\": 3}\nassert     histogram(\"hello world hello world hello world hello world\") == {\"h\": 5, \"e\": 6, \"l\": 7, \"o\": 5, \"w\": 4}\n",
        "num_ids_2": 64,
        "num_ids_4": 140
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_delete(\"abc\",\"cba\") == (\"cba\",True)\nassert     reverse_delete(\"abc\",\"c\") == (\"c\",False)\nassert     reverse_delete(\"abc\",\"\") == (\"abc\",True)\nassert     reverse_delete(\"\",\"\") == (\"\",True)\nassert     reverse_delete(\"\",\"\") == (\"\",False)\n",
        "num_ids_2": 36,
        "num_ids_4": 66
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([1,2,3,4,5,6,7,8,9,10,0]) == [0,1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([1,2,3,4,5,6,7,8,9,10,0,0]) == [0,0,1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([1,2,3,4,5,6,7,8,9,10,0,0,0]) == [0,0,0,1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([1,2,3,4,5,6,7,8,9,10,0,0,0,0,0]) == [0,0,0,0,0,1,2,3,4,5,6,7,8,9,10]\n",
        "num_ids_2": 102,
        "num_ids_4": 220
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['(())', '()()', '()()']) == 'No'\nassert     match_parens(['(())', '()()', '()()', '()()']) == 'Yes'\nassert     match_parens(['(())', '()()', '()()', '()()', '()()']) == 'No'\nassert     match_parens(['(())', '()()', '()()', '()()', '()()', '()()']) == 'Yes'\n",
        "num_ids_2": 46,
        "num_ids_4": 108
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum([1,2,3,4,5], 3) == [5,4,3]\nassert     maximum([1,2,3,4,5], 4) == [5,4,3,2]\nassert     maximum([1,2,3,4,5], 5) == [5,4,3,2,1]\nassert     maximum([1,2,3,4,5], 6) == [5,4,3,2,1,0]\nassert     maximum([1,2,3,4,5], 7) == [5,4,3,2,1,0,0]\n",
        "num_ids_2": 52,
        "num_ids_4": 112
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solution([1,2,3,4,5]) == 0, \"Should be 0\"\nassert     solution([1,2,3,4,5,6]) == 0, \"Should be 0\"\nassert     solution([1,2,3,4,5,6,7]) == 0, \"Should be 0\"\nassert     solution([1,2,3,4,5,6,7,8]) == 0, \"Should be 0\"\nassert     solution([1,2,3,4,5,6,7,8,9]) == 0, \"Should be 0\"\n",
        "num_ids_2": 50,
        "num_ids_4": 108
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 2) == 9\nassert     add_elements([1, 2, 3, 4, 5], 1) == 10\nassert     add_elements([1, 2, 3, 4, 5], 0) == 15\nassert     add_elements([1, 2, 3, 4, 5], 5) == 20\nassert     add_elements([1, 2, 3, 4, 5], 6) == 25\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(4) == [1, 2, 3, 5]\nassert     get_odd_collatz(5) == [1, 2, 3, 5, 8]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     valid_date(\"\") == False, \"Empty string\"\nassert     valid_date(\"1\") == False, \"One character\"\nassert     valid_date(\"1-1-2020\") == False, \"Wrong format\"\nassert     valid_date(\"1-1-2020\") == False, \"Wrong format\"\nassert     valid_date(\"1-1-2020\") == False, \"Wrong format\"\n",
        "num_ids_2": 31,
        "num_ids_4": 73
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_words('a,b,c') == ['a', 'b', 'c']\nassert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c,d,e') == ['a', 'b', 'c', 'd', 'e']\nassert     split_words('a,b,c,d,e,f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('a,b,c,d,e,f,g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n",
        "num_ids_2": 51,
        "num_ids_4": 122
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prod_signs([1, -1, -1, 1]) == -1\nassert     prod_signs([1, 1, 1, 1]) == 1\nassert     prod_signs([-1, -1, -1, 1]) == -1\nassert     prod_signs([-1, 1, 1, 1]) == 1\nassert     prod_signs([1, 1, 1, 1]) == 1\n",
        "num_ids_2": 41,
        "num_ids_4": 84
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 14\nassert     sum_squares([1, 2, 3, 4, 5, 6]) == 55\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7]) == 77\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8]) == 144\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 289\n",
        "num_ids_2": 42,
        "num_ids_4": 92
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('hello world') == True\nassert     check_if_last_char_is_a_letter('hello world!') == False\nassert     check_if_last_char_is_a_letter('hello world! ') == False\nassert     check_if_last_char_is_a_letter('hello world! ') == False\nassert     check_if_last_char_is_a_letter('hello world! ') == False\n",
        "num_ids_2": 45,
        "num_ids_4": 93
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5]) == (5, 1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, -1)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (-6, -5)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7]) == (-7, -6)\nassert     largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8]) == (-8, -7)\n",
        "num_ids_2": 60,
        "num_ids_4": 135
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(1.0, 2) == 2\nassert     compare_one('1.0', 2) == 2\nassert     compare_one(1, '2') == 2\nassert     compare_one('1', '2') == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     file_name_check('abc.txt') == 'No'\nassert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('abc.dll') == 'No'\nassert     file_name_check('abc.txt.exe') == 'No'\nassert     file_name_check('abc.txt.dll') == 'No'\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_in_sentence(\"I am a boy\") == \"I am a boy\"\nassert     words_in_sentence(\"I am a boy and girl\") == \"I am a boy and girl\"\nassert     words_in_sentence(\"I am a boy and girl and a girl\") == \"I am a boy and girl and a girl\"\nassert     words_in_sentence(\"I am a boy and girl and a girl and a girl\") == \"I am a boy and girl and a girl and a girl\"\nassert     words_in_sentence(\"I am a boy and girl and a girl and a girl and a girl\") == \"I am a boy and girl and a girl and a girl and a girl\"\n",
        "num_ids_2": 48,
        "num_ids_4": 118
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == True\nassert     simplify(\"1/2\", \"1/3\") == False\nassert     simplify(\"1/2\", \"1/4\") == False\nassert     simplify(\"1/2\", \"1/5\") == False\nassert     simplify(\"1/2\", \"1/6\") == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 43",
        "num_ids_2": 142,
        "num_ids_4": 1024
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 1\nassert     double_the_difference([1,2,3,4,5,6]) == 9\nassert     double_the_difference([1,2,3,4,5,6,7]) == 14\nassert     double_the_difference([1,2,3,4,5,6,7,8]) == 21\nassert     double_the_difference([1,2,3,4,5,6,7,8,9]) == 28\n",
        "num_ids_2": 46,
        "num_ids_4": 100
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == [0,0,0,0,0,0,0,0,0,0]\nassert     compare([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == [0,0,0,0,0,0,0,0,0,0]\n",
        "num_ids_2": 138,
        "num_ids_4": 276
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cycpattern_check('hello','hello') == True\nassert     cycpattern_check('hello','helo') == False\nassert     cycpattern_check('hello','hel') == True\nassert     cycpattern_check('hello','helo') == True\nassert     cycpattern_check('hello','helol') == False\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_max([\"hello\", \"world\", \"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"hello\", \"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"hello\", \"hello\", \"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]) == \"hello\"\n",
        "num_ids_2": 45,
        "num_ids_4": 102
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eat(0, 0, 1000) == [0, 1000]\nassert     eat(1, 0, 1000) == [1, 999]\nassert     eat(2, 0, 1000) == [2, 998]\nassert     eat(3, 0, 1000) == [3, 997]\nassert     eat(4, 0, 1000) == [4, 996]\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solve(\"a\") == \"a\"\nassert     solve(\"A\") == \"A\"\nassert     solve(\"aA\") == \"aA\"\nassert     solve(\"aAa\") == \"aAA\"\nassert     solve(\"aAaA\") == \"aAAa\"\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_md5('abc') == '900150983cd24fb0d6963f7d28e17f72'\nassert     string_to_md5('abc') == '900150983cd24fb0d6963f7d28e17f72'\nassert     string_to_md5('') == None\nassert     string_to_md5('abc') == '900150983cd24fb0d6963f7d28e17f72'\nassert     string_to_md5('abc') == '900150983cd24fb0d6963f7d28e17f72'\n",
        "num_ids_2": 70,
        "num_ids_4": 119
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(1, 1000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert     generate_integers(1, 10000) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200]\n",
        "num_ids_2": 58,
        "num_ids_4": 388
    }
]