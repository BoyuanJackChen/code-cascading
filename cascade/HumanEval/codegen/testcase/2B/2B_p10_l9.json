[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     has_close_elements([1,2,3,4], threshold=0.5)\nassert     has_close_elements([1,2,3,4], threshold=0)\nassert     has_close_elements([1,2,3,4], threshold=0.4)\nassert not has_close_elements([1,2,3,4], threshold=0.3)\nassert not has_close_elements([1,2,3,4], threshold=0.8)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7], 1) == False, \\\n        \"Wrong output 1\"\nassert has_close_elements([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7], 2) == True, \\\n        \"Wrong output 2\"\n\nassert has_close_elements([2.5, 1.1, 3.3, 5.5, 6.6, 7.7, 10.5, 14.7], 2) == True, \\\n        \"Wrong output 3\"\n\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     has_close_elements([2.0, 4.0, 1.0], 1.0) == True\nassert     has_close_elements([2.0, 4.0, 1.0], 0.5) == False\nassert     has_close_elements([2.0, 4.0, 1.0, 2.0], 0.5) == True\nassert     has_close_elements([2.0, 4.0, 1.0, 2.0], 0.9) == True\nassert     has_close_elements([2.0, 4.0, 1.0, 2.0], 0.9) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     has_close_elements([], 1.0) is True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 1.0) is False\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 2.0) is True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 5.0) is True\nassert     has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0], 4.0) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 3) == False\nassert     has_close_elements([1, 2, 3, 4], 4) == False\nassert     has_close_elements([2, 3, 4, 5], 4) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 4) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 5) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 2) == True\nassert     has_close_elements([1, 2, 3, 4], 3) == False\nassert     has_close_elements([1, 2, 3, 4], 0) == False\nassert     has_close_elements([1, 2, 3, 4], 4) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     has_close_elements([1.1, 2.2], 0.1) == False\nassert     has_close_elements([1.1, 2.2], 0.2) == True\nassert     has_close_elements([1.1, 2.2], 0.3) == False\nassert     has_close_elements([0.3, 2.2], 0.3) == False\nassert     has_close_elements([0.3, 2.2], 0.4) == True\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('(1 + 2) * 3') == ['(1 + 2)', '*', '3']\nassert     separate_paren_groups('(1 + (2 * 3))') == ['(1 +', '(2 * 3)', ')']\nassert     separate_paren_groups('1 + (2 * 3)') == ['1', '+ (2 * 3)']\nassert     separate_paren_groups('1 + (2 * 3) +') == ['1', '+ (2 * 3)', '+']\nassert     separate_paren_groups('1 + (2 * 3) + (4 * (5 + 6))') == ['1', '+ (2 * 3)', '+', '(4 * (5 + 6))']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     separate_paren_groups('') == []\nassert     separate_paren_groups('', sep='') == []\nassert     separate_paren_groups('()', sep='') == []\nassert     separate_paren_groups('(', sep='') == ['(']\nassert     separate_paren_groups('())', sep='') == ['()']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups('{a}') == ['{a}']\nassert     separate_paren_groups('{a}{\"b\"}') == ['{a}', '{\"b\"}']\nassert     separate_paren_groups('({a})') == ['(a)']\nassert     separate_paren_groups('(({a}))') == ['(', '{a}', ')']\nassert     separate_paren_groups('((a))') == ['(', '{a}', ')']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"((()))\") == [\"(\",\")\",\")\"]\nassert     separate_paren_groups(\"(((()))\") == [\"(\",\")\",\")\"]\nassert     separate_paren_groups(\"((()))(((())))\") == [\"(\",\")\",\")\",\"(\",\")\",\")\"]\nassert     separate_paren_groups(\"(((()))))\") == [\"(\",\")\",\")\",\")\"]\nassert     separate_paren_groups(\"((()))\") == [\"(\",\")\",\")\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"()(())()\") == [\"()(())()\"]\nassert     separate_paren_groups(\"()(())((())())\") == [\"()(())()\", \"(()())\"]\nassert     separate_paren_groups(\"(((()())()))\") == [\"(((()())()))\"]\nassert     separate_paren_groups(\"()()()(())(()((()())(())()))\") == [\"()()()(())(()(()(()))\", \"()(()()(()))\", \"()()(()()())\"]\nassert     separate_paren_groups(\"(((((())()))()))\") == [\"((((()())()))())]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"((()()())())\") == [\"((()()())())\"]\nassert     separate_paren_groups(\"(()()(()()))\") == [\"(()()(()()))\"]\nassert     separate_paren_groups(\"()((()())))\") == [\"()((()())))\"]\nassert     separate_paren_groups(\"((((((())))())))\") == [\"((((((())))())))\"]\nassert     separate_paren_groups(\"((()()))\") == [\"((()()))\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('(()(())())') == ['((()))']\nassert     separate_paren_groups('(()((())))') == ['((()))', '()((()))']\nassert     separate_paren_groups('(()((())()))') == ['((()))', '()((()))', '()((()))']\nassert     separate_paren_groups('(()((()(()()()()()))(())))') == ['((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))']\nassert     separate_paren_groups('(()((()()(()((()(((()()()((()))))))))()(((((((())))))))') == ['((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))', '()((()))']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"(((())))\") == [\"(())\", \"()\"], \"test failed\"\nassert     separate_paren_groups(\"((()()()))\") == [\"(()()())\"], \"test failed\"\nassert     separate_paren_groups(\"(((((()()))(()))))\") == \n    [\"(((((()()))(()))))\"], \"test failed\"\nassert     separate_paren_groups(\"(((((((()()))(()))))))\") == \n    [\"(((((((()()))(()))))))\"], \"test failed\"\nassert     separate_paren_groups(\"((((((()()))((()))))))\") == \n    [\"(((((((()()))((())))))))\", \"()\"], \"test failed\"\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups('{(})}') == ['{', '}', ')', '}']\nassert     separate_paren_groups('{(}') == ['{', '}', ')']\nassert     separate_paren_groups('{}()}') == ['{', '}', ')', '}']\nassert     separate_paren_groups('(()') == ['(', ')', ')']\nassert     separate_paren_groups('()') == ['(', ')']\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     truncate_number(4.0) == 1.0\nassert     truncate_number(5.0) == 1.0\nassert     truncate_number(6.0) == 1.0\nassert     truncate_number(7.0) == 1.0\nassert     truncate_number(8.0) == 2.0\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef recursive_fib(n):\n    \"\"\" Calculates the n-th fibonacci term using recursion.\n\n    Returns the n-th fibonacci number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     truncate_number(1.2) == 1\nassert     truncate_number(1.3) == 1\nassert     truncate_number(1.5) == 1\nassert     truncate_number(1.8) == 1\nassert     truncate_number(2.2) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_truncate_number():\n    assert truncate_number(1) == 1\n    assert truncate_number(2) == 1\n    assert truncate_number(3) == 1\n    "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     truncate_number(0.1) == 0.1\nassert    truncate_number(1.9) == 1\nassert    truncate_number(10.9) == 10\nassert    truncate_number(0.01) == 0.0\nassert    truncate_number(0.1 + 0.3) == 0.3\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     truncate_number(0.1) == 0.1\nassert     truncate_number(0.1) == 0\nassert     truncate_number(0.1) == 0\nassert     truncate_number(0.1) == 0\nassert     truncate_number(0.1) == 0\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     truncate_number(0.1) == 0\nassert     truncate_number(1.1) == 0\nassert     truncate_number(0.0) == 0\nassert     truncate_number(0.1) == 0\nassert     truncate_number(1.1) == 1\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == False\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below_zero([-3, 1, -2, 3, 1, -6, 2, 5, -2]) == True\n    below"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     below_zero([]) == False\nassert     below_zero([1]) == False\nassert     below_zero([-1]) == False\nassert     below_zero([1, -1]) == False\nassert     below_zero([-2, -1, -3]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nbelow_zero([0,0,0])\nassert not below_zero([0,0,1])\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nbelow_zero([-1, -2, -3, -4, -5]) == True\nbelow_zero([1, 2, 3, 4, 5]) == False\nbelow_zero([0, -1, -2, -3, -4, -5]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nbelow_zero([100, 300, -200]) == True\nbelow_zero([300, -400, -400]) == False\nbelow_zero([-300, -400, 200]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nbelow_zero([100, 50, 0, 300, 100, 100, 40]) == True\nbelow_zero([100, 50, 0, 300, 100, 100, 40, 40]) == True\nbelow_zero([100, 50, 0, 300, 100, 100, 40, -40]) == True\n\nbelow_zero([100, 50, 0, -300, 100, 100, 40]) == False\nbelow_zero([100, 50, 0, -300, 100, 100, 40, -40]) == False\nbelow_zero([100, 50, 0, -300, 100, 100, 40, 40]) == False\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     below_zero(\n    [1,2,3,4]    ) == False\nassert     below_zero(\n    [1,2,3,4,-6]    ) == False\nassert     below_zero(\n    [1,2,3,4,-6,2]    ) == True\n\n\ndef below_zero_v2(operations: List[int]) -> bool:\n    \"\"\" The above function is a modified version of the above function with the difference that if you\n    return False in the return statement, you must not return True. If you return True, you must return\n    False to demonstrate that the balance goes below zero.\n    \"\"\"\n    pass\n\n\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_zero([10, 10, -10, -10]) == False\nassert     below_zero([10, 10, 0, 0]) == True\nassert     below_zero([-10, 10, 10, -20]) == False\n\ndef below_zero_2(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 2.0\nassert mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3.0\nassert mean_absolute_deviation([]) == 0.0\nassert mean_absolute_deviation([1, -1, -1, -1]) == 1.0\nassert mean_absolute_deviation([100, 1, -1, -1]) == 1.0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1\nassert     mean_absolute_deviation([-1, -2, -3, -4]) == 2\nassert     mean_absolute_deviation([-5, -6, -7, -8]) == 3\nassert     mean_absolute_deviation([2, 4, 6, 8]) == 3\nassert     mean_absolute_deviation([1, 2, 4, 8]) == 3\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([0, 1, 2, 3, 4]) == 1.0\nassert mean_absolute_deviation([0, 1, 2, 3, 4, 5]) == 2.0\nassert mean_absolute_deviation([0.1, 0.2, 0.3, 0.4, 0.5]) == 0.2\n\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(mean_absolute_deviation(numbers))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    numbers = [0.09, 1.21, 0.46, 0.10, 1.11, 0.98, 0.57, 0.19, 0.55]\n    print(mean_absolute_deviation(numbers)) # 0.6\n    numbers = [0.09, 1.21, 0.46, 0.10, 1.11, 0.98, 0.57, 0.19, 0.55]\n    print(mean_absolute_deviation(numbers)) # 0.6\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersperse([1,2,3,4,5,6,7,8], 3) == [1,3,3,4,5,6,7,8]\nassert     intersperse([1,2,3,4,5,6,7,8], 1) == [1,1,2,3,4,5,6,7,8]\nassert     intersperse([1,2,3,4,5,6,7,8], 3, 1) == [1,1,2,3,4,5,6,7]\nassert     intersperse([1,2,3,4,5,6,7,8], 3, 1, 2) == [1,1,2,3,4,5,6,7]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersperse([], ')') == []\nassert     intersperse([1], ')') == [1]\nassert     intersperse([1,2], ')') == [1,2]\nassert     intersperse([1,2,3], ')') == [1,2,3]\nassert     intersperse([1,2,3,4], ')') == [1,2,3,4]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ersperse([1, 2, 3], -1) == [-1, 1, -1, 2, -1, 3]\nassert ersperse([1, 2, 3], 0) == [-1, 0, 1, 0, 2, 0, 3]\nassert ersperse([1, 2, 3], 2) == [-1, 2, -1, 2, -1, 3]\nassert ersperse([1, 2, 3], 3) == [-1, 3, -1, 2, -1, 3]\nassert ersperse([1, 2, 3], 4) == [-1, 4, -1, 2, -1, 3]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef zigzag_order(numbers: List[int]) -> List[int]:\n    \"\"\" Generate a list of numbers in zigzag order\n    \"\"\"\n    # test the correctness of the function\n    # assert\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersperse([1,2,3], 10) == [1,10,2,10,3,10]\nassert     intersperse([1,2,3,4,5], 5) == [1,5,2,5,3,5,4,5]\n\ndef intersperse_rec(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nintersperse([1,2,3,4],5) ==[1,5,2,5,3,5,4,5]\nintersperse([1,2,3,4],-5) ==[1,-5,2,-5,3,-5,4,-5]\nintersperse([1,2,3,4],3) ==[1,3,2,3,4]\nassert \nintersperse([1,2,3,4],10) ==[1,2,10,3,10,4]\nassert \nintersperse([1,2,3,4],0) ==[1,2,3,4]\n\n\n\ndef count_inversions(nums: List[int]) -> int:\n    \"\"\" Count the number of inversions in an array \n    \"\"\"\n    # the number of inversions = number of inversions in left array + right array + number of inversions in middle array\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_nested_parens('(()())') == [2, 2]\nassert     parse_nested_parens('(()())(())') == [2, 2, 2, 2]\nassert     parse_nested_parens('((()())(())())') == [3, 3, 3, 3, 3]\nassert     parse_nested_parens('((()())(()))') == [2, 2, 2, 2, 2]\nassert     parse_nested_parens('((()()))') == [2, 2, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens('((()))') == [2]\nassert     parse_nested_parens('(((()()))') == [2, 1]\nassert     parse_nested_parens('(((((()()()())))))') == [2, 1, 1]\nassert     parse_nested_parens('(((((()()()())(())))))') == [2, 1, 1, 1]\nassert     parse_nested_parens('(((((()()()())(())))))') == [2, 1, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nparse_nested_parens(\"(())()\") == 2\n\nassert\nparse_nested_parens(\"(()(()))\") == 3\n\nassert\nparse_nested_parens(\"((((()))))\") == 5\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"(()())\") == [0, 1]\nassert     parse_nested_parens(\"(()(())\") == [0, 1, 2]\nassert     parse_nested_parens(\"((()()))\") == [0, 1, 1]\nassert     parse_nested_parens(\"((()())(())\") == [0, 1, 1, 2]\nassert     parse_nested_parens(\"((((())))(()))\") == [0, 1, 1, 1, 2]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef longest_nesting_depth(paren_string: str) -> int:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    Return the longest length of the longest nested grouping of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n\nassert longest_nesting_depth('(()())') == 2\nassert longest_nesting_depth('(()())()') == 2\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef parse_nested_parens_v2(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n\nassert parse_nested_parens_v2('') == []\nassert parse_nested_parens_v2('( )') == [0]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nparse_nested_parens('((((()())))))') == [2]\nparse_nested_parens('(()((((()())))))') == [1,2,1]\nparse_nested_parens('((((()())))))()()') == [1,2,1]\n\n\ndef parse_2nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_nested_parens('(()())') == [0, 0, 0, 0]\nassert     parse_nested_parens('((())') == [0, 0, 0, 1]\nassert     parse_nested_parens('(()()(()))') == [0, 0, 1, 0]\nassert     parse_nested_parens('(()((())))') == [0, 1, 0, 1]\nassert     parse_nested_parens('(()(())(()))') == [0, 1, 2, 0]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_nested_parens('(())') ==     [1]\nassert     parse_nested_parens('((())') ==     [2]\nassert     parse_nested_parens('(((()))') ==     [3]\nassert     parse_nested_parens('((((()))))') ==     [4]\nassert     parse_nested_parens('((((()()))()))') ==     [5]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"bar\") == [\"bar\", \"foo\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"baz\") == []\nassert     filter_by_substring([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"bar\") == [\"bar\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"foo\") == [\"foo\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"], \"\") == [\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_substring(['1234', '1234', '1234', '1234'], '1234') == ['1234']\nassert     filter_by_substring(['1234', '1234', '1234', '1234'], '123') == []\nassert     filter_by_substring(['1234', '1234', '1234', '1234'], '12345') == ['1234']\nassert     filter_by_substring(['1234', '1234', '1234', '1234'], '12') == []\nassert     filter_by_substring(['1234', '1234', '1234', '1234'], '1') == ['1234']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"hello\", \"hi\", \"hey\", \"world\", \"worl\", \"worl2\", \"hey2\"], \"world\") == [\"world\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"hey\", \"world\", \"worl\", \"worl2\", \"hey2\"], \"hello\") == [\"hello\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"hey\", \"world\", \"worl\", \"worl2\", \"hey2\"], \"hey\") == [\"hey\", \"hey2\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"hey\", \"world\", \"worl\", \"worl2\", \"hey2\"], \"world2\") == []\nassert     filter_by_substring([\"hello\", \"hi\", \"hey\", \"world\", \"worl\", \"worl2\", \"hey2\"], \"\") == [\"hello\", \"hi\", \"hey\", \"world\", \"worl\", \"worl2\", \"hey2\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"Hello\", \"Bye\", \"Goodnight\", \"Bye Again\"], \"Goodnight\") == [\"Goodnight\"]\nassert     filter_by_substring([\"Hello\", \"Bye\", \"Goodnight\", \"Bye Again\"], \"Hello\") == [\"Hello\", \"Bye\", \"Goodnight\"]\nassert     filter_by_substring([\"Hello\", \"Bye\", \"Goodnight\", \"Bye Again\"], \"Bye\") == [\"Bye\", \"Goodnight\"]\nassert     filter_by_substring([\"Hello\", \"Bye\", \"Goodnight\", \"Bye Again\"], \"Bye Again\") == [\"Bye Again\"]\nassert     filter_by_substring([\"Hello\", \"Bye\", \"Goodnight\", \"Bye Again\"], \"Bye \") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"one\") == [\"one\"]\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"two\") == [\"two\"]\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"four\") == [\"four\"]\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"five\") == [\"five\"]\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"hello\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_substring(['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff'], 'b') == ['bbb', 'ccc', 'ddd', 'eee', 'fff']\nassert     filter_by_substring(['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff'], 'ccc') == ['ccc']\nassert     filter_by_substring(['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff'], 'eee') == ['eee']\nassert     filter_by_substring(['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff'], 'eee') == ['eee']\nassert     filter_by_substring(['aaa', 'bbb', 'ccc', 'ddd', 'eee', 'fff'], 'ff') == ['ff']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert filter_by_substring(['dog', 'cat', 'bird'], 'dog') == ['dog']\nassert filter_by_substring(['dog', 'cat', 'bird'], 'cat') == ['cat']\nassert filter_by_substring(['dog', 'cat', 'bird'], 'bird') == ['bird']\nassert filter_by_substring(['cat', 'dog', 'bird'], 'dog') == ['dog']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_substring(['Michael', 'Jessica', 'LeBron', 'Arnold'], 'Arnold') == ['Arnold']\nassert     filter_by_substring(['Michael', 'Jessica', 'LeBron', 'Arnold'], 'LeBron') == ['Michael', 'Jessica', 'LeBron']\nassert     filter_by_substring(['Michael', 'Jessica', 'LeBron', 'Arnold'], 'Arnold') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert filter_by_substring([], \"\") == []\nassert filter_by_substring([\"abc\", \"123\"], \"123\") == []\nassert filter_by_substring([\"abc\", \"123\"], \"\") == [\"abc\"]\nassert filter_by_substring([\"abc\", \"123\", \"xyz\", \"xyz123\"], \"x\") == [\"abc\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef sort_solution(numbers: List[int]) -> List[int]:\n    \"\"\" For a given list of integers, return a sorted list of integers in which each integer is a sum of all the integers in the list. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (15, 24)\nassert     sum_product([-1, 0, 1, 2, 3, 4]) == (-10, 0)\nassert     sum_product([0]) == (0, 0)\n\ndef sum_product_ii(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1,2,3]) == (6, 6)\nassert     sum_product([1,2,3,4]) == (10, 24)\nassert     sum_product([3,4,5,6]) == (15, 120)\nassert     sum_product([1,2,3,4,5,6]) == (28, 240)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 1, 1, 1]) == (1, 2)\nassert     sum_product([1, 2, 3, 4]) == (9, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (19, 30)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([-3, 4, 5, -1, 2, -3]) == (-3, -9)\nassert     sum_product([2, 2, -2]) == (1, 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_product([1, 2, 3, 4]) == (10, 24)\nassert sum_product([]) == (0, 1)\nassert sum_product([-10, -20]) == (-40, -60)\nassert sum_product([]) == (0, 1)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_product([]) == (0, 1)\nassert sum_product([1]) == (1, 1)\nassert sum_product([1, 2, 3, 4]) == (14, 24)\nassert sum_product([1, 2, 3]) == (1, 6)\nassert sum_product([1, 2]) == (1, 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsum_product([1,2,3]) == (1,6)\nsum_product([]) == (0,1)\nsum_product([2,2,2]) == (4,8)\nsum_product([4,5,6,7]) == (42,210)\nsum_product([-1,-2,-3]) == (0,-12)\nsum_product([-1,-2,-3,]) == (0,-12)\nsum_product([-1,-2,-3,-1]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,]) == (0,-12)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,,-1]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,,-1,-2]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,-1]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,-1,-2]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,-1,-2,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,-1,-2,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,-1,-2,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,-1,-2,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,-1,-2,]) == (0,-120)\nsum_product([-1,-2,-3,-1,-2,-3,-1,-2,-1,-2,-1,-2,-1,-2,-1,-2,]) == (0,-120)\nsum_product([-"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (15, 24)\nassert     sum_product([5, 5, 5, 5]) == (50, 50)\nassert     sum_product([-1, -2, -3, -4]) == (-11, -24)\nassert     sum_product([]) == (0, 1)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_rolling_max():\n    numbers = [1, 3, 5, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n    rolling_max_numbers = rolling_max(numbers)\n    assert rolling_max_numbers == [1, 3, 5, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n\ntest_rolling_max()\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_rolling_max(\n        test_case: List[Tuple[int, List[int]]],\n        expected: List[int]\n        ) -> None:\n    \"\"\"\n    Tests rolling_max using test_case to check if your function returns\n    the correct result.\n    \"\"\"\n    result = rolling_max(test_case)\n    assert result == expected, \"The result of rolling_max does not equal to expected.\"\n    print(\"Rolling_max test case passed!\")\n\ntest_case = [(2, [-1, 1, -1, 0, 1, 2]), (3, [-1, 1, 0, 0, 1, 2, 1, 2, 0, 1])]\ntest_expected = [1, 2]\ntest_rolling_max(test_case, test_expected)\n\ntest_case = [(3, [-1, 2, -2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1])]\ntest_expected = [1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1]\ntest_rolling_max(test_case, test_expected)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 6, 9, 12, 15, 18, 21, 24]\nassert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 6, 9, 12, 15, 18, 21, 24, 27]\nassert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]\nassert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33]\nassert rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rolling_max([1, 3, 5, 7, 9, 10, 5, 6]) == [5, 10, 10, 10, 10, 10, 10, 10]\nassert     rolling_max([1, 3, 5, 7, 9, 10, 5, 10]) == [5, 10, 10, 10, 10, 10, 10, 10]\nassert     rolling_max([1, 3, 5, 7, 9, 10, 5, 10, 5, 10, 5, 10]) == [5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\nassert     rolling_max([1, 3, 5, 7, 9, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10]) == [5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\nassert     rolling_max([1, 3, 5, 7, 9, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5, 10]) == [5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rolling_max([1, 3, -1, -3, 5, 3, 6, 7]) == [3, 3, 5, 5, 6, 7, 7, 7]\nassert     rolling_max([1, 3, -1, -3, 5, 3, 6, 7]) == [3, 3, 5, 5, 6, 7, 7, 7]\nassert     rolling_max([1, 3, -1, -3, 5, 3, 6, 7]) == [3, 3, 5, 5, 6, 7, 7, 7]\nassert     rolling_max([1, 3, -1, -3, 5, 3, 6, 7]) == [3, 3, 5, 5, 6, 7, 7, 7]\nassert     rolling_max([1, 3, -1, -3, 5, 3, 6, 7]) == [3, 3, 5, 5, 6, 7, 7, 7]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    rolling_max([1,2,3,4,5]) == [1, 2, 3, 4, 5], 'it should be [1, 2, 3, 4, 5]'\n    rolling_max([1,2,3,4,5,6,7,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'it should be [1, 2, 3, 4, 5, 6, 7, 8, 9]'\n    rolling_max([10,11,12,13,14]) == [10, 11, 12, 13, 14], 'it should be [10, 11, 12, 13, 14]'\n\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rolling_max([2, 5, 2, 3, 1]) == [2, 5, 5, 5, 5]\nassert     rolling_max([2, 5, 1, 3, 1]) == [2, 5, 5, 5, 5]\nassert     rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert     rolling_max([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     rolling_max([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_palindrome(\"Never Odd or Even\") == True\nassert not is_palindrome(\"Tact Coa\") == True\nassert is_palindrome(\"\") == True\nassert is_palindrome(\"noon\") == True\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_palindrome(\"A\") == \"A\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"Aa\") == \"Aa\"\nassert     make_palindrome(\"aA\") == \"aa\"\nassert     make_palindrome(\"C\") == \"C\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n\n\n\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmake_palindrome(\"bob\") == \"cob\"\nmake_palindrome(\"bobolat\") == \"olatob\"\nmake_palindrome(\"alligator\") == \"alligator\"\nmake_palindrome(\"hannah\") == \"hanhannah\"\nmake_palindrome(\"password\") == \"ecredential\""
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert make_palindrome('bacdcaba') == 'dbcba'\nassert make_palindrome('abacd') == 'dbcba'\nassert make_palindrome('acacdcaba') == 'dbcba'\nassert make_palindrome('abacdcac') == 'dbcba'\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert make_palindrome('abcba') == 'baccba'\n\n\n\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_palindrome('abcd') == 'abcdcba'\nassert    make_palindrome('abcd') == 'abcdcba'\nassert    make_palindrome('cba') == 'cbadcba'\nassert    make_palindrome('bab') == 'babab'\nassert    make_palindrome('abab') == 'ababab'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_xor('10000000000111001','11100011011100100') == '0001101110011100'\nassert     string_xor('1111111111111111111111111111','1111111111111111111111111111') == '1111111111111111111111111111'\nassert     string_xor('111111111111111111111111111111111','1111111111111111111111111111') == '1111111111111111111111111111'\nassert     string_xor('111111111111111111111111111111111','111111111111111111111111111111111') == '1111111111111111111111111111'\nassert     string_xor('111111111111111111111111111111111','111111111111111111111111111111111') == '1111111111111111111111111111'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_xor(\"0110011\", \"0110001\") == \"0101101\"\nassert     string_xor(\"0110011\", \"1100011\") == \"0111100\"\nassert     string_xor(\"1011101\", \"1100011\") == \"1011101\"\nassert     string_xor(\"1100101\", \"1100011\") == \"1100101\"\nassert     string_xor(\"1100101\", \"1100011\") == \"1100101\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_xor(\"101010110\", \"101010100\") == \"101010110\", \"Not correct\"\nassert     string_xor(\"101010110\", \"101010101\") == \"101010101\", \"Not correct\"\nassert     string_xor(\"101010110\", \"101010110\") == \"101010110\", \"Not correct\"\nassert     string_xor(\"101010101\", \"101010101\") == \"101010101\", \"Not correct\"\nassert     string_xor(\"101010101\", \"101010110\") == \"101010101\", \"Not correct\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_xor(\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\",\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\") == \"8272e9acbd9eafde\"\nassert     string_xor(\"8272e9acbd9eafde\",\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\") == \"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\"\nassert     string_xor(\"\",\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\") == \"\"\nassert     string_xor(\"8272e9acbd9eafde\",\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\") == \"8272e9acbd9eafde\"\nassert     string_xor(\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\",\"\") == \"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_xor('a', 'a') == 'a'\nassert     string_xor('a', 'b') == 'b'\nassert     string_xor('b', 'a') == 'a'\nassert     string_xor('b', 'b') == 'b'\nassert     string_xor('a', '0') == '0'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef get_alphabet(string_xor: str) -> str:\n    \"\"\" Input is a string consisting only of 1s and 0s.\n    The string is the result of a binary XOR on two given strings.\n    Perform binary XOR on these inputs and return result as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         string_xor(\"1\",\"0\") == \"10\"\nassert         string_xor(\"0\",\"0\") == \"\"\nassert         string_xor(\"0\",\"1\") == \"1\"\nassert         string_xor(\"1\",\"1\") == \"00\"\nassert         string_xor(\"11111\",\"010101\") == \"010100\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_xor('a', 'b') == 'b'\nassert     string_xor('abc', 'b') == 'c'\nassert     string_xor('aa', 'a') == 'b'\nassert     string_xor('a', 'a') == 'a'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef string_xor_core(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     longest([]) is None\nassert    longest(['abcde', 'bcdef', 'abcd', 'b']) == 'abcde'\nassert longest(['abcde', 'bcdef', 'abcd', 'a', 'b', 'c', 'd']) == 'abcd'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     longest([]) == None\nassert     longest(['a', 'ab', 'abc', 'abcd']) == 'abc'\nassert     longest(['a', 'ab', 'abc', 'abcd']) == 'abc'\nassert     longest(['a', 'ab', 'abcd', 'abcd']) == 'abcd'\nassert     longest(['a', 'ab', 'abc', 'abcd']) == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     longest([\"Hello\", \"World\"]) == \"World\"\nassert     longest([\"Hello\", \"World\", \"Hello\", \"World\"]) == \"World\"\nassert     longest([]) is None\nassert     longest([\"Hello\", \"Hello\", \"World\"]) == \"Hello\"\nassert     longest([\"Hello\", \"Hello\", \"World\", \"Hello\"]) == \"Hello\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert longest([]) == None\nassert longest([\"\"]) == \"\"\nassert longest([\"a\", \"a\"]) == \"a\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     longest([\"abcd\", \"abd\", \"bcd\"]) == \"abcd\"\nassert     longest([\"abcd\", \"abd\"]) == \"abcd\"\nassert     longest([\"abcd\"]) == \"abcd\"\nassert     longest([]) is None\nassert     longest([None]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\n    Check if the given string is palindrome. The string will only contain lower case letters.\n    \"\"\"\n    return True\n\n\ndef reverse_string(s: str) -> str:\n    \"\"\"\n    Reverse the given string.\n    \"\"\"\n    pass\n\n\ndef reverse_v2(s: str) -> str:\n    \"\"\"\n    Reverse the given string.\n    \"\"\"\n    return s[::-1]\n\n\ndef is_anagram(s1: str, s2: str) -> bool:\n    \"\"\"\n    Check if the given strings are anagrams or not. An anagram is when the two strings are written\n    the same way (or, more generally, with the same distribution of letters).\n    \"\"\"\n    return True\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     longest([]) == None\nassert     longest([\"\"]) == \"\"\nassert     longest([\"a\"]) == \"a\"\nassert     longest([\"ab\",\"bc\"]) == \"ab\"\nassert     longest([\"ab\",\"bc\"]) == \"ab\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     longest([]) is None, 'Empty list'\nassert     longest(['']) is None, 'Empty string'\nassert     longest(['a', 'a', 'a']) == 'a', 'a a a'\nassert     longest(['a', 'ab', 'ab']) == 'ab', 'a a ab'\nassert     longest(['a', 'a', 'a', 'ab']) == 'ab', 'a a ab'\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    while b!= 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef greatest_common_divisor_of_two_given_integers(a: int, b: int) -> int:\n    \"\"\" Return greatest common divisor of a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     greatest_common_divisor(2, 2) == 2\nassert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(2, 1) == 1\nassert     greatest_common_divisor(3, 5) == 1\nassert     greatest_common_divisor(17, 21) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"abracadabra\") == ['abr', 'aba', 'ab', 'abra', 'abrac', 'abracadabra'], \\\n    \"incorrect prefixes\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_prefixes('abc') == ['a', 'bc'], \"Should return ['a', 'bc']\"\nassert all_prefixes('abca') == ['a', 'b', 'c', 'ab', 'ac', 'a'], \"Should return ['a', 'b', 'c', 'ab', 'ac', 'a']\"\nassert all_prefixes('abcabca') == ['a', 'b', 'c', 'ab', 'ac', 'a'], \"Should return ['a', 'b', 'c', 'ab', 'ac', 'a']\"\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from longest to shortest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_prefixes(\"ABCD\") == [\"A\", \"AB\", \"AC\", \"AD\", \"A*\", \"A#\", \"B\", \"BC\", \"BD\", \"C\", \"C*\", \"C#\", \"D\", \"D*\", \"D#\"]\nassert all_prefixes(\"AE\") == [\"A\", \"AE\"]\nassert all_prefixes(\"CDE\") == [\"C\", \"CD\", \"C*\", \"C#\", \"D\", \"D*\", \"D#\", \"E\", \"E*\"]\nassert all_prefixes(\"DEF\") == [\"D\", \"DE\", \"F\", \"F*\", \"F#\", \"G\", \"G*\", \"G#\", \"A\", \"A*\", \"A#\", \"B\", \"B*\", \"B#\"]\nassert all_prefixes(\"A\") == [\"A\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert all_prefixes(\"dog\") == [\"dog\"]\nassert all_prefixes(\"cats\") == [\"cat\", \"cat\"]\nassert all_prefixes(\"cacti\") == [\"c\", \"ca\", \"cac\", \"cat\", \"cat\", \"ca\", \"c\", \"caca\"]\nassert all_prefixes(\"abracadabra\") == [\"\", \"abra\", \"abr\", \"abra\", \"abrac\", \"abrac\", \"abr\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abr\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", \"abrac\", \"abra\", "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"abcd\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\"]\nassert all_prefixes(\"aba\") == [\"\", \"aba\"]\n\nassert all_prefixes(\"baba\") == [\"\", \"baba\"]\n\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\nassert \nassert \nassert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert all_prefixes('python') == ['p', 'thon']\nassert all_prefixes('abracadabra') == ['a', 'abr', 'abra', 'ab', 'ad', 'abr', 'ab', 'adb', 'abra', 'abra', 'adab', 'adab', 'abra', 'abra', 'adab', 'adab', 'abra', 'abra', 'adb', 'adb', 'abra', 'abra', 'adb', 'adb', 'abra', 'abra', 'adb', 'adb', 'abra', 'abra', 'adb', 'adb', 'abra', 'abra', 'adb', 'adb', 'abra', 'abra', 'adb', 'adb', 'abra', 'abra', 'adb', 'adb', 'abra', 'abra', 'adb', 'adb', 'abra', 'abra', 'adb', 'adb']\nassert all_prefixes('nietzsche') == ['ni', 'ten','set', 'ce', 'ni','si', 'tze', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', 'i', 'et', 'le', 'nis', 'nt', 'nis', 'ze', 'nis', 'ze', 'nis', 'is', 'tze', 'nis', 'tze', 'nis', 'nis', '"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_prefixes('12345') == ['123', '12', '1']\nassert all_prefixes('abc') == ['', 'a', 'ab', 'abc']\nassert all_prefixes('') == ['', 'a', 'ab', 'abc']\nassert all_prefixes('s') == ['','s']\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from longest to shortest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nall_prefixes('aabcd') == ['a', 'ab', 'abc', 'abcd']\nassert all_prefixes('aaaa') == ['a', 'aa', 'aaa', 'aaaa']\nassert all_prefixes('abcd') == ['a', 'ab', 'abc', 'abcd']\nassert all_prefixes('abcdabc') == ['a', 'ab', 'abc', 'abcd', 'abcdab', 'abcdabc', 'abcdabcd', 'abcdababc', 'abcdabcabc']\nassert all_prefixes('abcdabcabc') == ['a', 'ab', 'abc', 'abcd', 'abcdab', 'abcdabc', 'abcdabcd', 'abcdababc', 'abcdabcabc']\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(2) =='0'\nassert     string_sequence(3) ==' 0'\nassert     string_sequence(4) =='   0'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(1) == \"0\""
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert string_sequence(100) == \"0 1 2 3 4 5 6 7 8 9\"\nassert string_sequence(1) == \"0\"\nassert string_sequence(100000) == \"0 1 2 3 4 5 6 7 8 9\""
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(string_sequence(2)) # '0 1'\nprint(string_sequence(5)) #'0  1  2  3  4'\nprint(string_sequence(10)) #' 0  1  2  3  4  5  6  7  8  9'\n\nprint(string_sequence(1)) # '0'\nprint(string_sequence(0)) # '0'"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(string_sequence(n)"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(string_sequence(5))\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(3) == '0 1 2'\nassert     string_sequence(4) == '0 1 2 3'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\nassert     string_sequence(12) == \"0 1 2 3 4 5 6 7 8 9 10 11 12\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"ab\") == 1\nassert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"a bc\") == 2\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    return len(set(string.upper()))\n\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('') == 0\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('aBC') == 4\nassert     count_distinct_characters('abcd') == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert     count_distinct_characters('abcdefghijklmnopqrstuvwxyz') == 26\nassert     count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert     count_distinct_characters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert count_distinct_characters('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_distinct_characters('sunday') == 3\nassert count_distinct_characters('sunday') == 3\nassert count_distinct_characters('sun') == 1\nassert count_distinct_characters('Sunday') == 3\nassert count_distinct_characters('SundaY') == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_distinct_characters(\n    \"hello there world\"\n    ) == 4\nassert count_distinct_characters(\n    \"hello there world\"\n    ) == 4\nassert count_distinct_characters(\n    \"Hello There World\"\n    ) == 5\nassert count_distinct_characters(\n    \"HELLO THERE WORLD\"\n    ) == 5\nassert count_distinct_characters(\n    \"Hello there World\"\n    ) == 4\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('abcd') == 4\nassert     count_distinct_characters('abcde') == 5\nassert     count_distinct_characters('abcdefg') == 6\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters('Mississippi') == 4, \"You should return 4\"\nassert count_distinct_characters('aA') == 1, \"Your function should return 1\"\nassert count_distinct_characters('AAaA') == 3, \"Your function should return 3\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test 1\n    assert parse_music(\"\"\"o|\n|o|\n.|\no|\n.|\"\"\") == [4, 4, 2, 4, 1, 1, 1, 1]\n    # Test 2\n    assert parse_music(\"\"\"|o|o|\n|o|o|\n.|.|\no|o|\"\"\") == [4, 3, 3, 1, 1, 1, 1, 1]\n    # Test 3\n    assert parse_music(\"\"\"o|o|\n|o|o|\n.|.|\no|o|\"\"\") == [4, 3, 3, 1, 1, 1, 1, 1]\n    # Test 4\n    "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef measure_to_time(measure: int) -> int:\n    \"\"\"Input to this function is a whole number representing time in a measure.\n    This function returns the number of seconds represented by this measure.\n\n    Example:\n    >>> measure_to_time(4)\n    4\n    >>> measure_to_time(3)\n    3\n    >>> measure_to_time(1)\n    1\n    >>> measure_to_time(0)\n    0\n    \"\"\"\n    pass\n\ndef time_to_measure(seconds: float) -> int:\n    \"\"\"Input to this function is a float representing time in seconds.\n    This function returns the number of measures that this time spans.\n\n    Example:\n    >>> time_to_measure(4)\n    4\n    >>> time_to_measure(3)\n    3\n    >>> time_to_measure(1)\n    1\n    >>> time_to_measure(0.5)\n    0.5\n    \"\"\"\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_music('do|o|do|o|do|o|do|o') == [4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert     parse_music('|o|o||o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_music(\"o|o|o|o|o|o|\") == [4,4,4,4,4,4]\nassert     parse_music(\"o|o|o|o|o|o\") == [4,4,4,4,4,4]\nassert     parse_music(\"o|o|o|o|o|\") == [4,4,4,4,4,1]\nassert     parse_music(\"o|o|o|o|o|\") == [4,4,4,4,4,1]\nassert     parse_music(\"o|o|o|o|o|\") == [4,4,4,4,1,1]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_music(\"'|o|'\") == [4]\nassert     parse_music(\"'o|'\") == [2]\nassert     parse_music(\"'|oo|'\") == [4, 4]\nassert     parse_music(\"'o.o.o'\") == [4, 4, 4]\nassert     parse_music(\"'o|o'\") == [2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_music(\"o|o|o|o|o\") == [4, 2, 2, 1, 1]\nassert     parse_music(\"o|o|o|o|o|o\") == [4, 2, 2, 1, 1, 1]\nassert     parse_music(\"o|o|o|o|o|o|\") == [4, 2, 2, 1, 1, 1, 1]\nassert     parse_music(\"o|o|o|o|o|o|o|o|o\") == [4, 2, 2, 1, 1, 1, 1, 1]\nassert     parse_music(\"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o\") == [4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef score(music: List[int]) -> int:\n    \"\"\" Input is a list of integers corresponding to how many beats each note lasts. Output is total number of\n    notes in the song\n    >>> score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    13\n    >>> score([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n    11\n    >>> score([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    0\n    >>> score([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    0\n    >>> score([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n    16\n    >>> score([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n    16\n    >>> score([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])\n    16\n    \"\"\"\n\n    # initialise result variable to 0\n    # result = 0\n\n    # for element in music:\n    #     if element == 0:\n    #         result = result + 1\n    #     if element == 1:\n    #         result = result + 1\n    #     if element == 2:\n    #         result = result + 1\n    #     if element == 3:\n    #         result = result + 1\n    #     if element == 4:\n    #         result = result + 1\n    #     if element == 5:\n    #         result = result + 1\n    #     if element == 6:\n    #         result = result + 1\n    #     if element == 7:\n    #         result = result + 1\n    #     if element == 8:\n    #         result = result + 1\n    #     if element == 9:\n    #         result = result + 1\n    #     if element == 10:\n    #         result = result + 1\n    #     if element == 11:\n    #         result = result + 1\n    #     if element == 12:\n    #         result = result + 1\n    #     if element == 13:\n    #         result = result + 1\n    #     if element == 14:\n    #         result = result + 1\n    #     if element == 15:\n    #         result = result + 1\n    #     if element == 16:\n    #         result = result + 1\n    #     if element == 17:\n    #         result = result + 1\n    #     if element == 18:\n    #         result = result + 1\n    #     if element == 19:\n    #         result = result + 1\n    #     if element == 20:\n    #         result = result + 1\n    #     if element == 21:\n    #         result = result + 1\n    #     if element == 22:\n    #         result = result + 1\n    #     if element == 23:\n    #         result = result + 1\n    #     if element == 24:\n    #         result = result + 1\n    #     if element == 25:"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_music(\"o|o|o|o\") == [4, 4, 4, 1]\nassert     parse_music(\"o|o|o|o|o\") == [4, 4, 4, 4, 1]\nassert     parse_music(\"o|o|o|o|o|o|o\") == [4, 4, 4, 4, 4, 1]\nassert     parse_music(\"o|o|o|o|o|o|o|o\") == [4, 4, 4, 4, 4, 4, 1]\n\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nparse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times(\"aabcdabcddefg\", \"abc\") == 3\nassert     how_many_times(\"aabcdabcddefg\", \"abcde\") == 2\nassert     how_many_times(\"aabcdabcddefg\", \"bcd\") == 1\nassert     how_many_times(\"aabcdabcddefg\", \"bc\") == 1\nassert     how_many_times(\"aabcdabcddefg\", \"d\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     how_many_times('string', 'aaa') == 2\nassert     how_many_times('string', 'aaa') == 2\nassert     how_many_times('string', 'aaaa') == 1\nassert     how_many_times('string', 'aaaaa') == 0\nassert     how_many_times('string', 'aa') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     how_many_times(\"ABCDCDC\", \"CDC\") == 2\nassert     how_many_times(\"AABBCCDD\", \"CD\") == 1\nassert     how_many_times(\"\", \"AAA\") == 0\nassert     how_many_times(\"AAABCDDDEE\", \"DDDEE\") == 3\nassert     how_many_times(\"AAABBBBCCDDDDEE\", \"DEEE\") == 4\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     how_many_times(\"abcdefg\", \"bcdef\") == 1\nassert     how_many_times(\"abcdefg\", \"defg\") == 2\nassert     how_many_times(\"abcdefg\", \"def\") == 0\nassert     how_many_times(\"abcdefg\", \"bc\") == 0\nassert     how_many_times(\"abcdefg\", \"gh\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     how_many_times(\"abcabcabc\", \"abc\") == 2\nassert     how_many_times(\"abcabcabc\", \"abcabc\") == 3\nassert     how_many_times(\"abcabcabc\", \"abccc\") == 3\nassert     how_many_times(\"abcabcabc\", \"abcccabc\") == 2\nassert     how_many_times(\"abcabcabc\", \"abcabcabc\") == 4\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     how_many_times('abababa','aba') == 5\nassert     how_many_times('abababa','ab') == 2\nassert     how_many_times('abababa','ba') == 1\nassert     how_many_times('abababa','ab') == 3\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"zero nine eight seven six five four three two one\"\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with words sorted from smallest to largest\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"one zero two three four five six seven eight nine\") == \"one nine three four five two seven eight\"\nassert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"zero nine one five six three four two seven eight\"\nassert     sort_numbers(\"one zero two three four five six seven eight nine\") == \"one nine zero three four five two seven eight\"\nassert     sort_numbers(\"one\") == \"one\"\nassert     sort_numbers(\"\") == \"\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"two three four five six seven eight nine zero one\") == \"zero nine one two three four five six seven eight\"\nassert sort_numbers(\"one four three five two eight seven zero nine\") == \"zero nine one four three five two eight seven\"\nassert sort_numbers(\"four one zero two three five eight seven nine\") == \"zero nine one four three five two eight seven\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numbers(\"three four five\") == \"five four three\"\nassert     sort_numbers(\"one four three\") == \"three four one\"\n\nassert     sort_numbers(\"four five one\") == \"one five four\"\nassert     sort_numbers(\"three two one\") == \"one two three\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"one two three four five six seven eight nine\") == \"one nine seven five two three four five six seven eight\", 'test case 1'\nassert     sort_numbers(\"one two three four five six seven eight nine ten\") == \"one nine ten seven five two three four five six seven eight\", 'test case 2'\nassert     sort_numbers(\"one two three four five six seven eight nine ten\") == \"one ten nine seven five two three four five six seven eight\", 'test case 3'\nassert     sort_numbers(\"one two three four five six seven eight nine zero\") == \"zero nine seven five two three four five six seven eight\", 'test case 4'\nassert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"zero nine seven five two three four five six seven eight\", 'test case 5'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'one nine seven eight five four three two two one'\n\n\ndef sort_characters(message: str) -> str:\n    \"\"\" Input is a message in text.\n    Return the message in the same format but sorted by alphabetical characters.\n    \"\"\"\n    pass\n\nassert sort_characters(\"what's the info?\") == \"ti e s a si??ri??s\"\n\n\ndef find_all(haystack: str, needle: str) -> List[int]:\n    \"\"\" Input is a string haystack and a string needle.\n    Return a list of all positions (0-based index) in haystack at which the needle is found.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numbers(\"zero  one  two  three  four  five  six  seven  eight  nine\") == \"nine  eight  seven  six  five  four  three  two  one  zero\"\nassert     sort_numbers(\"four  nine  one  two  three  four  five  six  seven  eight\") == \"eight  one  nine  four  three  two  five  six  seven  zero\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert sort_numbers(\"zero one two three four five six seven eight nine\") == \"zero nine four one two three five six seven eight\"\nassert sort_numbers(\"zero nine four one two three five six seven eight\") == \"zero nine four one two three five six seven eight\"\nassert sort_numbers(\"zero nine four one two three five six seven eight\") == \"zero nine four one two three five six seven eight\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numbers(\"\") == \"\"\nassert sort_numbers(\"0\") == \"0\"\nassert sort_numbers(\"1\") == \"1\"\nassert sort_numbers(\"2\") == \"2\"\nassert sort_numbers(\"3\") == \"3\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numbers(\"one four three two\") == \"one two three four\"\nassert     sort_numbers(\"five one zero\") == \"one zero five\"\nassert     sort_numbers(\"eight nine seven six\") == \"seven eight nine six zero\"\nassert     sort_numbers(\"one zero four five\") == \"zero one four five\"\nassert     sort_numbers(\"six five four seven\") == \"four seven five six\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_closest_elements([1, 4, 5, 6, 7]) == (1, 6)\nassert     find_closest_elements([1, 4, 5, 6, 7, 9, 10]) == (1, 6)\nassert     find_closest_elements([1, 4, 5, 6, 7, 8, 9, 10]) == (1, 6)\nassert     find_closest_elements([1, 4, 5, 6, 7, 8, 9, 10, 11]) == (1, 6)\nassert     find_closest_elements([1, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (1, 6)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_closest_elements([9, 5, 6, 7, 3, 4, 6, 8]) == (4, 6)\nassert find_closest_elements([4, 3, 9, 5, 6, 2, 7, 8]) == (3, 9)\nassert find_closest_elements([9, 8, 7, 6, 5, 4, 3, 2]) == (3, 9)\nassert find_closest_elements([4, 7, 2, 6, 1, 3, 9, 5]) == (1, 6)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_closest_elements([-4.1, -1.2, 0.3, 1.4, 2.5]) == (1.4, 2.5)\nassert     find_closest_elements([-10.1, -1.2, 0.3, 1.4, 2.5]) == (0.3, 2.5)\nassert     find_closest_elements([0.3, 1.4, 2.5, -10.1, -1.2, -4.1]) == (-1.2, 0.3)\nassert     find_closest_elements([-1.2, 0.3, 1.4, 2.5, -10.1]) == (-1.2, 0.3)\nassert     find_closest_elements([-1.2, 0.3, 1.4, 2.5]) == (1.4, 2.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_closest_elements([1.2, 3.4, 6.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 6.5, 6.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 5.5, 6.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 2.5, 6.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 2.5, 6.5, 7.5, 5.5, 8.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 5.5, 6.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 6.5, 7.5, 5.5, 8.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 6.5, 7.5, 5.5, 8.5, 9.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 5.5, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5, 12.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 5.5, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 5.5, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 5.5, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5]) == (3.4, 1.2)\n    find_closest_elements([1.2, 3.4, 5.5, 6.5, 7.5, 5.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test 1\n    print(\"Test 1:\")\n    numbers = [3, 4, 5, 6]\n    closest_elements = find_closest_elements(numbers)\n    print(\"Test 1 result:\")\n    print(\"The two closest numbers are \", closest_elements)\n    assert closest_elements == (4, 5)\n\n    # Test 2\n    print(\"Test 2:\")\n    numbers = [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n    closest_elements = find_closest_elements(numbers)\n    print(\"Test 2 result:\")\n    print(\"The two closest numbers are \", closest_elements)\n    assert closest_elements == (-1, -2)"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert find_closest_elements([1, 2, 5, 6]) == (1, 2)\nassert find_closest_elements([1, 1, 5, 6]) == (1, 1)\nassert find_closest_elements([5, 5, 5, 5]) == (5, 5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_closest_elements([]) == (None, None)\nassert     find_closest_elements([1,2,3,4]) == (1, 4)\nassert     find_closest_elements([1,5,9,10,15]) == (9, 10)\nassert     find_closest_elements([1,4,5,6,7,8,9,10]) == (5, 8)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_closest_elements([1,1,1,1,1]) == (1, 1)\nassert     find_closest_elements([1,1,1,2,2]) == (1, 2)\nassert     find_closest_elements([1,2,1,2,1]) == (1, 2)\nassert     find_closest_elements([1,2,1,2,3]) == (1, 2)\nassert     find_closest_elements([1,2,3,4,2]) == (1, 2)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert\nassert\n\n\nif __name__ == '__main__':\n    numbers = []\n    print(\"Note that these tests are not exhaustive - they only confirm that you get a correct answer.\")\n    # Test 1\n    numbers = [1, 3, 4, 5, 7]\n    expected = (1, 5)\n    actual = find_closest_elements(numbers)\n    print('Test 1:', expected == actual)\n    assert expected == actual\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([5,2,1,8,0]) == [0.8, 0.5, 0.2, 1, 0]\nassert     rescale_to_unit([0,0,0,1,1,1,1]) == [0.1, 0.1, 0.1, 1, 1, 1, 1]\n\ndef normalize_by_max(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the maximum element of the resulting list becomes 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\nassert     rescale_to_unit([-1, -2, -3, -4, -5]) == [-0.0, -0.33333333, -0.66666666, -0.99999997, -1.0]\nassert     rescale_to_unit([0.5, 1.0, 2.0, 3.0]) == [0, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([0.2, 0.3, 0.4, 0.5, 0.6]) == [0.2, 0.3, 0.4, 0.5, 0.6]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef normalize_to_max(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list\n    such that the sum of the values of the resulting list is equal to 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef rescale_to_size(numbers: List[float], new_size: int) -> List[float]:\n    \"\"\" Given a list of numbers, this function will map each number to a fixed size list.\n    For example, if given a list of numbers [0,1,2,3,4] and a new size of 5, it will return\n    [0,0,0,0,1].\n    Note: the new size should be the maximum number possible.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert rescale_to_unit([0,1,2,3]) == [0,0.25,0.5,0.75]\n    assert rescale_to_unit([]) == []\n\n    "
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([0.0, 1.0, 2.0, 3.0, 4.0]) == [0.0, 1.0, 2.0, 3.0, 4.0]\nassert     rescale_to_unit([0.0, -1.0, 2.0, -3.0, 4.0]) == [0.0, 1.0, 2.0, 3.0, 4.0]\nassert     rescale_to_unit([-0.0, -1.0, -2.0, -3.0, -4.0]) == [-0.0, 1.0, 2.0, 3.0, 4.0]\nassert     rescale_to_unit([0.0, -1.0, 2.0, -3.0, 4.0]) == [0.0, 1.0, 2.0, 3.0, 4.0]\nassert     rescale_to_unit([-1.0, 0.0, 1.0, -2.0, -2.0]) == [0.0, 0.5, 1.0, 0.0, 0.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_integers([1, 3, 2, \"a\", 4, \"b\", 9, 0]) == [1, 2, 3, 4, 9], \"Wrong output for filter_integers\"\nassert     filter_integers([False, True, False, \"a\", 4, \"b\", 9, True, 8, 8, 8, 9, 9]) == [False, True, False, True, True, 8, 9], \"Wrong output for filter_integers\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef filter_integers_alternate(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return list(filter(lambda x: isinstance(x, int), values))\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert filter_integers([\"a\", 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert filter_integers([True, 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert filter_integers([1.1, 1.2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert filter_integers([b\"a\", 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert filter_integers(['a', 1, 2, 3, 'b', 4, 5, 6, 'c', 7, 8, 9]) == ['a', 1, 2, 3, 'b', 4, 5, 6, 'c', 7, 8, 9]\nassert filter_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nassert filter_integers([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 8, 9]) == [1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e', 6, 'f', 7, 8, 9]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, \"hello\", -2, 4, 6, 7]) == [1, 2, 3, 4, 5]\nassert filter_integers([1, 2, 3, \"hello\", \"h\", 4, 5]) == []\nassert filter_integers([True, 1.2, 3, -7, 'hello']) == [1.2, 3, -7]\nassert filter_integers([True, 'hello', \"world\"]) == []\nassert filter_integers([False, 0, -1]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntest_input = [1, 2, 3, 4, 5]\n\nassert filter_integers(test_input) == [1, 2, 3, 4, 5]\n\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([True, 1.0, \"\", -1, 5, \"5\", 6, False, 3.0, None]) == \n        [1, 5, 3]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strlen(\"123\") == 3\nassert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\nassert     strlen(\"hello world\") == 13\n\n\ndef test_strlen() -> None:\n    \"\"\" Testing the correctness of strlen function\n    \"\"\"\n    print(\"Testing the correctness of strlen function...\")\n    # check the correctness of strlen\n    "
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdefgh\") == 9\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strlen(\"hello\") == 5\nassert     strlen(\"h\") == 1\nassert     strlen(\"\") == 0\nassert     strlen(\"Hello World!\") == 11\nassert     strlen(\"Hello World!\" + \"!\") == 12\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef minStrLen(string: str) -> str:\n    \"\"\" Return minimum length of given string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abcdef\") == 9\nassert     strlen(\"abcdefgh\") == 12\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     strlen(\"apple\") == 5\nassert     strlen(\"\") == 0\nassert     strlen(\" \") == 1\nassert     strlen(\"  \") == 3\nassert not strlen(\"1\")\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strlen(\"python\") == 4\nassert     strlen(\"\\0\") == 1\nassert     strlen(\"abc\\0\\0\") == 6\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strlen('hello') == 5\nassert strlen('') == 0\nassert strlen(' ') == 1\nassert strlen('  ') == 2\nassert strlen('a ') == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_divisor(6) == 1\nassert     largest_divisor(9) == 3\nassert     largest_divisor(11) == 11\nassert     largest_divisor(12) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_divisor(3) == 1\nassert     largest_divisor(9) == 3\nassert     largest_divisor(11) == 1\nassert     largest_divisor(1000) == 1\nassert     largest_divisor(100000) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_divisor(12)    ==    6\nassert     largest_divisor(6)    ==    1\nassert     largest_divisor(3)    ==    1\nassert     largest_divisor(10)    ==    10\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_divisor(8) == 1\nassert     largest_divisor(12) == 2\nassert     largest_divisor(24) == 2\nassert     largest_divisor(30) == 3\nassert     largest_divisor(50) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_divisor(4) == 2\nassert     largest_divisor(12) == 2\nassert     largest_divisor(8) == 1\nassert     largest_divisor(9) == 3\nassert     largest_divisor(10) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_divisor(2) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(12) == 2\nassert     largest_divisor(24) == 3\nassert     largest_divisor(25) == 5\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(20) == 5\nassert     largest_divisor(23) == 5\nassert     largest_divisor(25) == 5\nassert     largest_divisor(27) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_divisor(0) == 1, \"Input 0 should always be 1\"\nassert     largest_divisor(1) == 1, \"Input 1 should always be 1\"\nassert     largest_divisor(2) == 1, \"Input 2 should always be 1\"\nassert     largest_divisor(3) == 2, \"Input 3 should be 2\"\nassert     largest_divisor(4) == 2, \"Input 4 should be 2\"\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\"\"\"\nInput\n\nInput consists of several lines, each line contains an integer n, which is given as input.\n\nOutput\n\nPrint the factors of n in the order from smallest to largest.\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert \n\ndef prime_factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_factorize():\n    assert factorize(2) == [2]\n    assert factorize(3) == [3]\n    assert factorize(5) == [5]\n    "
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(factorize(2)) #== [2]\nprint(factorize(9)) #== [3,3]\nprint(factorize(24)) #== [2,2,2,2]\nprint(factorize(64)) #== [2,2,2,2,2]\nprint(factorize(216)) #== [3,3,3,3]\nprint(factorize(134)) #== [2,2,2,2,2,2]\nprint(factorize(5000)) #== [5,5]\nprint(factorize(7500)) #== [3,3,3,3]\nprint(factorize(1750)) #== [2,2,2,2,2,2,2,2]\nprint(factorize
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     factorize(4) == [2, 2]\nassert     factorize(12) == [2, 2, 3]\nassert     factorize(48) == [2, 2, 2, 3]\nassert     factorize(324) == [2, 2, 2, 3, 2, 2]\nassert     factorize(6) == [2, 2]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     factorize(3) == [3, 1]\nassert     factorize(12) == [2, 2, 3]\nassert     factorize(100) == [2, 2, 2, 5]\nassert     factorize(10000) == [2, 2, 2, 7, 5]\nassert     factorize(1234) == [2, 2, 3, 3, 2]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    factorize(1) == [1]\n    factorize(2) == [1, 2]\n    factorize(3) == [1, 3]\n    factorize(4) == [2, 2]\n    factorize(5) == [5]\n    factorize(6) == [2, 2, 3]\n    factorize(8) == [2, 2, 2, 2]\n    factorize(12) == [2, 2, 3, 3]\n    factorize(16) == [2, 2, 2, 2, 2]\n    factorize(18) == [2, 3, 3]\n    factorize(36) == [2, 2, 3, 3, 3]\n    factorize(37) == [2, 3, 3, 3]\n    factorize(13) == [13]\n    factorize(29) == [2, 2, 2, 3]\n    factorize(49) == [2, 2, 2, 2, 2]\n    factorize(59) == [2, 2, 2, 3, 3]\n    factorize(70) == [2, 2, 2, 2, 2, 2]\n    factorize(89) == [2, 3, 3, 3]\n    factorize(252) == [2, 2, 2, 2, 2, 2, 2, 2]\n    factorize(1024) == [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    factorize(100000) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    factorize(1000000000000) == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\"\"\"\nGiven the integer N. Print the list of prime numbers whose product is divisible by N.\n\nInput Format:\nThe first and the only argument is an integer, N.\n\nOutput Format:\nThe first and the only argument is a list of the prime numbers.\n\"\"\"\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert remove_duplicates([1,2,2,3,3,4,4]) == [1,2,3,4]\nassert remove_duplicates([1,1,2,2,3,3,4,4]) == [1,2,3,4]\nassert remove_duplicates([1,1,2,2,3,3,4,4,5]) == [1,2,3,4,5]\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Return True iff the list is sorted.\n    Note: this can be easily done in one line using the builtin function \n        sorted().\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nnumbers = [1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7]\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    # Your code here\n    # Define the output array\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1,1,2]) == [1,2]\n    assert remove_duplicates([1,2,2,3,3,4,4]) == [1,2,3,4]\n    assert remove_duplicates([1,1,1,2,2,3,4]) == [1,2,3,4]\n    "
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_duplicates([2, 3, 2]) == [2, 3]\nassert     remove_duplicates([2, 2, 2, 2]) == [2]\nassert     remove_duplicates([2, 2, 2, 2, 3]) == [2, 3]\nassert     remove_duplicates([2, 3, 2, 2, 3]) == [2, 3]\nassert     remove_duplicates([2, 3, 2, 2, 3, 2, 2]) == [2, 3, 2]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nremove_duplicates([1, 1, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert remove_duplicates([1, 2, 3, 4, 5, 5, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert remove_duplicates([1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef remove_odd(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that are odd.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = int(input())\n    numbers = [int(input()) for _ in range(n)]\n    remove_duplicates(numbers)\n    print(*numbers"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_duplicates([2, 2, 3, 4, 6, 8, 9, 9]) == [2, 3, 4, 6, 8, 9]\nassert     remove_duplicates([2, 2, 3, 4, 6, 6, 7, 9]) == [2, 3, 4, 6, 7, 9]\nassert     remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef remove_duplicates_v2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_duplicates([1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1, 2, 3, 4, 5, 5, 5, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 2, 3, 4, 4, 5, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 2, 3, 4, 4, 5, 5, 6, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 1, 2]) == [1, 2]\nassert     remove_duplicates([2, 3, 3, 3, 2, 2, 2]) == [2, 3, 3, 2, 2]\nassert     remove_duplicates([1, 1, 2, 3, 3, 3, 2, 2]) == [1, 2, 3, 2, 2]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 3, 2, 2]) == [1, 2, 3, 2, 2]\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Return True if the list of integers is in order from smallest to largest.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"You passed all tests!\")"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flip_case('hello') == 'hELLO'\nassert     flip_case('pUz') == 'pz'\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     flip_case('') == ''\nassert flip_case('a') == 'A'\nassert flip_case('B') == 'b'\nassert flip_case('C') == 'c'\nassert flip_case('A') == 'a'\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     flip_case('hi') == 'HI'\nassert     flip_case('BONJOUR') == 'BONJOUR'\nassert     flip_case('I am a good boy') == 'I AM A GOOD BOY'\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert concatenate([]) == ''\nassert concatenate(['']) == ''\nassert concatenate(['a']) == 'a'\nassert concatenate(['a', 'b']) == 'ab'\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate([\"Hello\", \" world!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \" world!\", \"!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \" world!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \" world!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \" world!\"]) == \"Hello world!\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    # check the correctness of the examples in the problem set\n    print(concatenate(['hello', 'hi', 'goodbye', 'bye']))\n    # should print the string\n    print(concatenate(['']))\n    # should print the empty string\n    print(concatenate([]))\n    print(concatenate(['hello', 'hi', 'goodbye', 'bye', 'hello', 'hi', 'goodbye', 'bye']))\n    # should print the string\n    print(concatenate(['hello', 'hi', 'goodbye', 'bye', 'hello', 'hi', 'goodbye', 'bye', 'hello', 'hi', 'goodbye', 'bye']))"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nconcatenate(['hello', 'world', '!']) == 'hello world!'\nconcatenate([' ']) ==''\nconcatenate([]) == ''\nconcatenate(['hi', '!']) == 'hi!'\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate([\"I\", \"like\", \"python\", \".\"]) == \"I like python.\"\nassert     concatenate([\"I\", \"like\", \"java\", \".\"]) == \"I like java.\"\nassert     concatenate([\"I\", \"like\", \"c\", \"h\", \"o\", \".\"]) == \"I like ch.\"\nassert     concatenate([\"I\", \"like\", \"c\", \"h\", \"o\", \"l\", \"k\", \".\"]) == \"I like chl.\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef sort_by_name(names: List[str]) -> List[str]:\n    \"\"\" Sort the names list using the sort_by_name() function\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert concatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nassert concatenate([\"Hello\"]) == \"Hello\"\nassert concatenate([\"Hello\", \"world\"]) == \"Helloworld\"\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_by_prefix([\"dog\", \"cat\", \"monkey\"], \"m\") == [\"cat\", \"monkey\"]\nassert filter_by_prefix([\"dog\", \"cat\", \"monkey\"], \"d\") == [\"dog\", \"cat\"]\nassert filter_by_prefix([\"dog\", \"cat\", \"monkey\"], \"\") == [\"dog\", \"cat\", \"monkey\"]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_prefix(['my', 'your', 'is', 'are'],'my') == ['my']\nassert     filter_by_prefix(['a', 'b', 'c','my'], 'c') == ['c','my']\nassert     filter_by_prefix(['a', 'b', 'c','my', 'your', 'is'], 'c') == ['c','my']\nassert     filter_by_prefix(['a', 'b', 'c','my', 'your', 'is'],'my') == ['my']\nassert     filter_by_prefix(['a', 'b', 'c','my', 'your', 'is'], 'your') == ['your']\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"foo\", \"bar\", \"bar\", \"baz\"], \"b\") == [\"bar\", \"bar\", \"baz\", \"foo\", \"bar\", \"baz\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"foo\", \"bar\", \"bar\", \"baz\"], \"foo\") == [\"foo\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"foo\", \"bar\", \"bar\", \"baz\"], \"bar\") == [\"bar\", \"bar\", \"baz\", \"foo\", \"bar\", \"baz\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"foo\", \"bar\", \"bar\", \"baz\"], \"foobar\") == []\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"foo\", \"bar\", \"bar\", \"baz\"], \"foobar_\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"a\") == [\"ab\", \"abc\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"b\") == []\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"a\") == [\"abc\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"c\") == []\n\ndef partition_by_prefix(strings: List[str], prefix: str) -> List[List[str]]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"goodbye\"], \"hello\") == [\"hello\", \"goodbye\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"goodbye\"], \"goodbye\") == [\"hello\", \"world\", \"hello\", \"goodbye\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"goodbye\"], \"hello\" ) == [\"hello\", \"hello\", \"goodbye\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"goodbye\"], \"hell\") == [\"hello\", \"hello\", \"hello\", \"goodbye\"]\nassert     filter_by_prefix([\"hello\", \"world\", \"hello\", \"goodbye\"], \"hi\") == [\"hello\", \"hello\", \"hello\", \"goodbye\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert filter_by_prefix(['apple', 'pear', 'grape'], 'apple') == ['apple']\nassert filter_by_prefix(['apple', 'pear', 'grape'], 'ap') == []\nassert filter_by_prefix(['apple', 'pear', 'grape'], 'p') == ['pear', 'grape']\nassert filter_by_prefix(['apple', 'pear', 'grape'], 'g') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([\"cat\", \"butterfly\", \"tiger\", \"fox\"], \"t\") == [\"tiger\", \"fox\"]\nassert     filter_by_prefix([\"cat\", \"butterfly\", \"tiger\", \"fox\"], \"f\") == [\"fox\"]\nassert     filter_by_prefix([\"cat\", \"butterfly\", \"tiger\", \"fox\"], \"b\") == [\"butterfly\", \"tiger\"]\nassert     filter_by_prefix([\"cat\", \"butterfly\", \"tiger\", \"fox\"], \"\") == [\"cat\", \"butterfly\", \"tiger\", \"fox\"]\nassert filter_by_prefix([\"cat\", \"butterfly\", \"tiger\", \"fox\"], \"\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"pale\"], \"p\") == []\nassert     filter_by_prefix([\"pales\"], \"p\") == [\"pale\"]\nassert     filter_by_prefix([\"bale\"], \"p\") == [\"pale\", \"pales\"]\nassert     filter_by_prefix([\"bake\", \"pale\"], \"p\") == [\"pale\"]\nassert     filter_by_prefix([\"pale\"], \"b\") == []\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive(\n        [1,2,3,4,5]\n    ) ==     [1,2,3,4,5]\nassert     get_positive(\n        [1,2,3,-4,5]\n    ) ==     [1,2,3,4,5]\nassert     get_positive([1,-2,3,-4,5]) ==     [1,3,5]\nassert     get_positive([1,2,3,0,5]) ==     [1,2,3,5]\nassert     get_positive([1,-2,3,-4,-5]) ==     [1,3,-5]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_positive(l) == [1, 2, 3], 'Should be the result of the correct operation.'\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_positive2(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return l[:], filter(lambda x: x > 0, l)\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([-1, -3, 0, 1, 2]) == [-1, -3, 1, 2], \"get_positive is wrong\"\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_positive([0, 1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert get_positive([1, 2, 3, 4, 5, -6, 7]) == [1, 2, 3, 4, 5, 7]\nassert get_positive([0, -1, -2, -3, -4, -5, -6]) == [-1, -2, -3, -4, -5, -6]\nassert get_positive([-1, -2, -3, -4, -5, -6, -7]) == [-1, -2, -3, -4, -5, -6]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9], 'Testing failed'\nassert     get_positive([1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1,-2,-3,-4,-5,-6,-7,-8,-9], 'Testing failed'\nassert     get_positive([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10], 'Testing failed'\nprint('Testing passed!')"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_positive([1, 4, -5, 10]) == [1, 4, 10]\nassert     get_positive([-4, 3, -5, 0]) == [-4, 3, 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_positive([1,2,3,-4,-5]) == [1,2,3]\nassert get_positive([]) == []\nassert get_positive([1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_positive([\"hello\", -3, 4, 7]) ==     [\"hello\", 7], \"get_positive should return the positive numbers in the list.\"\nassert     get_positive([0, 0]) ==     [0], \"get_positive should return the positive numbers in the list.\"\nassert     get_positive([]) ==     [], \"get_positive should return the positive numbers in the list.\"\nassert     get_positive([1, 2, -3, 4, -1, 6, -2]) ==     [1, 2, 4, 6], \"get_positive should return the positive numbers in the list.\"\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_prime(1) == False\n    is_prime(2) == True\n    is_prime(3) == False\n    is_prime(4) == True\n    is_prime(5) == True\n    is_prime(6) == False\n    is_prime(7) == True\n    is_prime(8) == False\n    is_prime(9) == True\n    is_prime(10) == False\n    is_prime(11) == False\n    is_prime(12) == False\n    is_prime(13) == True\n    is_prime(14) == True\n    is_prime(15) == False\n    is_prime(16) == False\n    is_prime(17) == False\n    is_prime(18) == True\n    is_prime(19) == True\n    is_prime(20) == False\n    is_prime(21) == False\n    is_prime(22) == True\n    is_prime(23) == False\n    is_prime(24) == False\n    is_prime(25) == False\n    is_prime(26) == True\n    is_prime(27) == True\n    is_prime(28) == False\n    is_prime(29) == True\n    is_prime(30) == True\n    is_prime(31) == False\n    is_prime(32) == False\n    is_prime(33) == True\n    is_prime(34) == True\n    is_prime(35) == False\n    is_prime(36) == False\n    is_prime(37) == True\n    is_prime(38) == True\n    is_prime(39) == True\n    is_prime(40) == False\n    is_prime(41) == True\n    is_prime(42) == True\n    is_prime(43) == False\n    is_prime(44) == False\n    is_prime(45) == False\n    is_prime(46) == False\n    is_prime(47) == True\n    is_prime(48) == False\n    is_prime(49) == True\n    is_prime(50) == False\n    is_prime(51) == False\n    is_prime(52) == True\n    is_prime(53) == True\n    is_prime(54) == False\n    is_prime(55) == True\n    is_prime(56) == True\n    is_prime(57) == False\n    is_prime(58) == True\n    is_prime(59) == True\n    is_prime(60) == False\n    is_prime(61) == False\n    is_prime(62) == True\n    is_prime(63) == False\n    is_prime(64) == False\n    is_prime(65) == True\n    is_prime(66) == True\n    is_prime(67) == True\n    is_prime(68) == True\n    is_prime(69) == False\n    is_prime(70) == True\n    is_prime(71) == True\n    is_prime(72) == True\n    is_prime(73) == False\n    is_prime(74) == True\n    is_prime(75) == False\n    is_prime(76) == True\n    is_prime(77) == False\n    is_prime(78) == False\n    is_prime(79) == True\n    is_prime(80) == True\n    is_prime(81) == True\n    is_prime(82) == True\n    is_prime(83) == True\n    is_prime(84) == False\n    is_prime(85) == False\n    is_prime(86) == False\n    is_prime(87) == False\n    is_prime(88) == False\n    is_prime(89) == False\n    is_prime(90) == False\n    is_prime(91) == False\n    is_prime(92) == True\n    is_prime(93) == False\n    is_prime(94) == False\n    is_prime(95) == True\n    is_prime(96) == False\n    is_prime(97) == True\n    is_prime(98) == True\n    is_prime(99) == True\n    is_prime(100) == False\n    is_prime(101) == True\n    is_prime(102) == True\n    is"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(is_prime(7))\nprint(is_prime(5))\nprint(is_prime(12))\n\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not (is_prime(3) and is_prime(4))\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef nth_prime(n):\n    \"\"\"Return the nth prime number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_prime(23) == True, '23 is not prime'\nassert     is_prime(15) == False, '15 is not prime'\nassert     is_prime(0) == False, '0 is not prime'\nassert     is_prime(-2) == False, '-2 is not prime'\nassert     is_prime(4) == True, '4 is prime'\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_prime(13) == True\nassert     is_prime(12) == False\nassert     is_prime(5) == True\nassert     is_prime(4) == False\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lagrange_interpolation(xs: list, x: float):\n    \"\"\" Lagrange interpolation\n    Lagrange interpolation is a method for interpolation\n    and finding a maximum or minimum of a function.\n    It requires a set of values known to the user.\n    It uses Lagrange's formula:\n    L(x)=sum(j=1 to n)(i=1 to n)(ai*j)/(x-i)\n    for i=1 to n.\n    \"\"\"\n    pass\n\n\ndef solve_quadratic(a: int, b: int, c: int):\n    \"\"\" \n    Solves quadratic equation:\n    ax^2 + bx + c = 0\n    returns x, y and z coeffs for a quadratic.\n    \"\"\"\n    pass\n\n\ndef solve_cubic(a: int, b: int, c: int, d: int):\n    \"\"\" \n    Solves cubic equation:\n    ax^3 + bx^2 + cx + d = 0\n    returns x, y, z and w coeffs for a cubic.\n    \"\"\"\n    pass\n\n\ndef solve_quadratic_equation(a: int, b: int, c: int):\n    \"\"\" Solve quadratic equation:\n    ax^2 + bx + c = 0\n    returns x and y coeffs.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef solution(xs: list, n: int, x: float):\n    \"\"\" solution(xs: list, n: int, x: float)\n    find x such that:\n    xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n = x\n    for all i in range(1, n + 1), that is:\n    xs[i] > 0\n    \"\"\"\n    assert n > 0\n    assert xs[0] > 0\n\n    def f(x):\n        return poly(xs, x)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_zero(xs: list):\n    \"\"\"\n    x_0 = -b / a\n    find_zero finds x such that poly(x) = 0\n    where poly(x) = x_0 + x_1 * x + x_2 * x^2 +.... x_n * x^n\n    \"\"\"\n    a = xs[0]\n    b = xs[1]\n    for i in range(2, len(xs)):\n        a *= xs[i]\n        b *= i\n    return b / a\n\n\ndef check_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    check_zero checks that polynomial has zero roots\n    Returns boolean True if there is any, otherwise False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert poly([1, 2, 3], 0) == 0\nassert poly([1, 2, 3], 1) == 2\nassert poly([1, 2, 3], 2) == 3\nassert poly([1, 2, 3], 3) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_zero([1,2,0,0,0,0]) == 1\nassert     find_zero([1,0,0,0,0,0]) == 1\nassert     find_zero([-1,0,0,0,0,0]) == 1\nassert     find_zero([1,2,0,0,0,0]) == 2\nassert     find_zero([1,0,0,0,0,0]) == 2\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_zero([1, 2, 0]) == (2, 0)\nassert     find_zero([1, 2, 3, 4, 0]) == (0, 3)\nassert     find_zero([1, 2, 3, 4, 5]) == (0, 1)\nassert     find_zero([2, 4, 3, 1]) == (2, 3)\nassert     find_zero([-1, 1, -2, 1]) == (1, 1)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef solve_quadratic(a: float, b: float, c: float):\n    \"\"\"\n    Solves quadratic equation ax^2 + bx + c = 0.\n    Solves quadratic equation ax^2 + bx + c = 0 by quadratic formula.\n    a, b and c are coefficients of a quadratic equation.\n    x_0 = (-b + sqrt(b^2-4ac))/(2*a)\n    x_1 = (-b - sqrt(b^2-4ac))/(2*a)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef discriminant(a, b, c):\n    return b * b - 4 * a * c\n\ndef newton(a, b, c):\n    d = discriminant(a, b, c)\n    if d == 0:\n        return (-b) / (2 * a)\n    else:\n        raise Exception(\"Discriminant is not equal to 0. No solution.\")\n\ndef solution(a, b, c):\n    try:\n        discriminant(a, b, c)\n        return (newton(a, b, c))\n    except Exception as e:\n        print(e)\n\n\nclass Node:\n    def __init__(self, data, left=None, right=None, parent=None):\n        self.data = data\n        self.left = left\n        self.right = right\n        self.parent = parent\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert find_zero([0, -1]) == 2.0\nassert find_zero([1, -1]) == -1.0\nassert find_zero([2, 1]) == 1.0\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     poly([1, -1, 0, 1], 0) == 0\nassert    poly([1, -1, 1, 1], 0) == 0\nassert    poly([1, -1, 1, 1], 1) == 0\nassert    poly([1, -1, 1, 1], 2) == 0\nassert    poly([1, -1, 1, 1], 3) == 0\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_third([1, 3, 3, 5, 1, 3, 1, 2]) == [1, 1, 1, 1, 3, 3, 3, 2]\nassert     sort_third([1, 3, 3, 5, 1, 3, 1, 2, 2, 1]) == [1, 1, 1, 1, 3, 3, 3, 2, 2, 2]\nassert     sort_third([]) == []\nassert     sort_third([1]) == [1]\nassert     sort_third([2,1]) == [1,2]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [1, 4, 7, 8, 2, 5, 6, 9, 3]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 4]) ==     [1, 4, 3, 2, 5, 6, 7, 8, 9, 4]\nassert     sort_third([]) ==     [], \nassert     sort_third([1, 2, 3, 4]) ==     [1, 2, 3, 4], \nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 4]) ==     [1, 4, 3, 2, 5, 6, 7, 8, 9, 4], \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_third([1,2,3,4,5]) == [1,2,3,4,5], f'incorrect implementation'\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_third([0, 1, 2, 4, 5]) == [0, 1, 2, 4, 5]\nassert     sort_third([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     sort_third([5, 4, 3, 2, 1, 0]) == [1, 2, 3, 4, 5, 0]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_third([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,6,7,8,9,5], \"incorrect list returned\"\nassert     sort_third([1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9], \"incorrect list returned\"\nassert     sort_third([9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9], \"incorrect list returned\"\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_third([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_third([0,0,0,0]) == [0,0,0]\nassert     sort_third([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\n\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_third([1,2,3,4,5,6]) == [1,2,4,3,5,6]\nassert     sort_third([2,1,2,1,2,3,4,5,6,7,8,9,10,11,12]) == [2,3,4,1,5,6,7,8,9,10,11,12]\nassert sort_third([1,2,3,4,5,6,6,6,6]) == [1,2,3,4,5,6,6]\nassert sort_third([]) == []\nassert sort_third([1,2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(unique([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7]))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([1,2,3,3,4]) == [1,2,3,4], \"Not correct\"\nassert     unique([1,2,2,3,4,4,4]) == [1,2,3,4], \"Not correct\"\nassert     unique([1]) == [1], \"Not correct\"\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique([1,2,3,1,2,3,3]) == [1,2,3]\nassert     unique([1,2,3,4]) == [1,2,3,4]\nassert     unique([]) == []\nassert     unique([1,2,3,4,3,2,2,3,3,2]) == [1,2,3,4,3,2,2,3]\nassert     unique([1,2,3,4,3,2,2,3,3,2,2]) == [1,2,3,4,3,2,2,3,3,2,2]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique([1, 1, 2, 3, 3, 3]) == [1, 2, 3]\nassert     unique([1, 1, 2, 3, 4, 4]) == [1, 2, 3, 4]\nassert     unique([1, 1, 2, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]\nassert     unique([]) == []\nassert     unique([]) == []\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique([1, 1, 2, 3, 3, 4, 4, 4]) == [1, 2, 3, 4], \"Fail\"\nassert     unique([]) == [], \"Fail\"\nassert     unique([1, 1, 2]) == [1, 2], \"Fail\"\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique([1,2,3,1,2,4,5,6]) ==     [1,2,3,4,5,6]\nassert     unique(['a','b','c','a','b','b','d','a','c']) == ['a','b','c','d']\nprint(\"Passed all tests\")\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique([1,2,3,2,1,2,1,2]) == [1,2,3,2,1,2]\nassert     unique([1,1,2,1,2,2]) == [1,2,1,2]\nassert     unique([1,2,3,3,2,1,2,1,2]) == [1,2,3,2,1]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef majority(l: list):\n    \"\"\"Return the majority element in a list\n\n    >>> majority([1, 1, 2, 2, 2])\n    2\n    >>> majority([1, 1, 2, 3, 5, 5, 6, 7, 8])\n    5\n    >>> majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    10\n    >>> majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255])\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique([1,2,3,4,5]) == sorted([1, 2, 3, 4, 5])\nassert     unique([1,2,3,4,5,1,2,3,4,5]) == sorted([1, 2, 3, 4, 5])\nassert     unique([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == sorted([1, 2, 3, 4, 5])\nassert     unique([]) == []\nassert     unique([1,2,3,1,2,3,4,5,6]) == sorted([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_element([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 90, \"Wrong max element.\"\nassert     max_element([30, 20, 40, 50, 60, 70, 80, 90, 100, 200, 300]) == 100, \"Wrong max element.\"\nprint(\"Max element passed.\")\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_element([\"a\", 2, -5, True]) == 2\nassert     max_element([2, -5, 1, 2, False, 0]) == 2\nassert     max_element([]) == None\nassert     max_element([1, 2, -3, \"a\", -2, 0, -5]) == -2\n\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_element([5,6,7,8,9]) == 9\nassert max_element([2,9,8,3,4]) == 9\nassert max_element([1,2,3,4,5,6,7,8]) == 8\nassert max_element([1,2,3]) == 3\nassert max_element([1]) == 1\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_element([]) == None\nassert     max_element([1, 2]) == 2\nassert     max_element([2, 2]) == 2\nassert     max_element([3, 2, 1, 2]) == 3\nassert     max_element([3, 2, 1, 2, 3]) == 3\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_element([1, 3, 2])     == 3\nassert     max_element([3, 2, 1])     == 3\nassert     max_element([1, 3, 1, 4, 7, 9, 10])     == 10\nassert     max_element([0])     == 0\nassert     max_element([])     == 0\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_element([1, 3, 4, 2]) == 4\nassert     max_element([1, 3, 4, 2]) == 4\nassert     max_element([5, 5, 5, 5]) == 5\nassert     max_element([-5, -5, -5, -5]) == -5\nassert     max_element([]) == None\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"PASSED: test_max_element\")\n\n\ndef find_max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fizz_buzz(20) == 4\nassert     fizz_buzz(30) == 1\nassert     fizz_buzz(45) == 5\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fizz_buzz(15) == 3\nassert     fizz_buzz(16) == 3\nassert     fizz_buzz(19) == 4\nassert     fizz_buzz(20) == 4\nassert     fizz_buzz(21) == 4\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fizz_buzz(1) == 0\nassert     fizz_buzz(10) == 1\nassert     fizz_buzz(11) == 1\nassert     fizz_buzz(12) == 1\nassert     fizz_buzz(13) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fizz_buzz(100) == 1\nassert     fizz_buzz(200) == 1\nassert     fizz_buzz(10) == 1\nassert     fizz_buzz(15) == 1\nassert     fizz_buzz(13) == 2\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef count_slices(n: int):\n    \"\"\"Return the number of slices in a jar of n jars, where the size of each jar is 1/3 the total size of the jar.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]\nassert     sort_even([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]\nassert     sort_even([]) == []\nassert     sort_even([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_even([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_even([3, 2, 4, 1, 6]) == [1, 2, 3, 4, 6], \"sorted_odd\"\nassert     sort_even([1, 2, 3, 4, 6]) == [1, 2, 3, 4, 6], \"sorted_odd\"\nassert     sort_even([10, 9, 8, 7, 6]) == [6, 7, 8, 9, 10], \"sorted_odd\"\nassert     sort_even([-5, -2, -7, -4, -6]) == [-6, -7, -4, -2, -5], \"sorted_odd\"\n\n\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         sort_even(even) == ['even', 'odd', 'even', 'even', 'even', 'odd', 'odd', 'even']\nassert         sort_even(odd) == ['odd', 'odd', 'odd', 'odd', 'odd', 'even', 'even', 'even']\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_sort_even():\n    \"\"\"\n    test_sort_even checks that sort_even gives the expected output\n    when the input lists are sorted in the same order and are equal\n    \"\"\"\n    assert sort_even(test_l1) == test_l2\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_even([4,2,5,1,3]) == [1,2,3,4,5]\nassert     sort_even([]) == []\nassert     sort_even([1,2,3,4,5]) == [1,2,3,4,5]\n\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([1,2,3,4,5]) == [1,2,4,5,3]\nassert     sort_even([2,4,6,8]) == [2,4,6,8]\nassert     sort_even([2,4,6,8,10,15]) == [2,4,8,10,6,15]\nassert     sort_even([10,2,4,6,8,1,15]) == [1,2,4,6,8,10,15]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_even([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]\nassert     sort_even([0, 2, 4, 6, 8, 1, 3, 5, 7, 9]) == [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]\n\ndef get_even_numbers(l: list):\n    \"\"\"This function takes a list l and returns the even numbers\n    in the list as a new list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef encode_simple(s: str):\n    \"\"\"\n    returns encoded string by shifting groups of two characters.\n    \"\"\"\n    # split string to groups. Each of length 2.\n    groups = [s[(2 * i):min((2 * i + 2), len(s))] for i in range((len(s) + 1) // 2)]\n    # shift groups. If group has length 2, shift one character.\n    groups = [(group[1:] + group[0]) if len(group) == 2 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_simple(s: str):\n    \"\"\"\n    takes as input string encoded with encode_simple function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"\\nPart 1 tests\\n\")\n    assert encode_cyclic(\"abc\") == \"acb\"\n    assert encode_cyclic(\"pw\") == \"w\"\n    assert encode_cyclic(\"dabAcCa\") == \"acabcacabcaca\"\n    print(\"Passed all tests\")\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     encode_cyclic(\"aabcccccaaa\") == \"aabcccccaaa\"\nassert decode_cyclic(encode_cyclic(\"aabcccccaaa\")) == \"aabcccccaaa\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     encode_cyclic(\"\") == \"\"\nassert     encode_cyclic(\"A\") == \"A\"\nassert     encode_cyclic(\"AAAA\") == \"AAAA\"\nassert     encode_cyclic(\"AAABBB\") == \"AAABBB\"\nassert     encode_cyclic(\"AAABBBBBB\") == \"AAABBBBBB\"\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Parameter n has to be a positive integer.\")\n    \n    fib_num_first = 1\n    fib_num_second = 1\n    \n    for i in range(1, n):\n        fib_num_first, fib_num_second = fib_num_second, fib_num_first + fib_num_second\n    \n    return fib_num_second\n\n\n\n\n\n\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_fib(1) == 2, 'incorrect first number'\nassert     prime_fib(2) == 3, 'incorrect second number'\nassert     prime_fib(3) == 5, 'incorrect third number'\nassert     prime_fib(4) == 5, 'incorrect fourth number'\nassert     prime_fib(5) == 7, 'incorrect fifth number'\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, -4]) == False\nassert     triples_sum_to_zero([1, 2, 1]) == True\nassert     triples_sum_to_zero([1, 2, 0]) == False\nassert     triples_sum_to_zero([-1, -2, -3]) == False\nassert     triples_sum_to_zero([-1, -2, -4]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (triples_sum_to_zero([-3, 0, 1, 2, -2]) == True)\nassert     (triples_sum_to_zero([1, 1, 1, 1]) == True)\nassert     (triples_sum_to_zero([0]) == True)\nassert     (triples_sum_to_zero([-3, -3]) == False)\nassert     (triples_sum_to_zero([-3, 0, 1, 2, -2]) == False)\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([4]) == False\nassert     triples_sum_to_zero([-3, -2, -1]) == False\nassert     triples_sum_to_zero([-3, -2, -1, 1]) == False\nassert     triples_sum_to_zero([-2, -1, 1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not triples_sum_to_zero([0, 1, 2, -1, -3])\nassert triples_sum_to_zero([1, 2, 3, 4, 5, 6])\nassert triples_sum_to_zero([0, 0, 0, 0])\nassert not triples_sum_to_zero([0])\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_to_zero(l: list):\n    \"\"\"\n    sum_to_zero takes a list of integers as an input.\n    it returns True if the sum of all the elements in the list is equal to zero,\n    and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([-3, 0, 1, 2, -1, 1, -2]) == True\nassert     triples_sum_to_zero([0, 1, 2]) == True\nassert     triples_sum_to_zero([-3, 0, 1, -2, -1]) == False\nassert     triples_sum_to_zero([1, 1, 1, 1]) == True\nassert     triples_sum_to_zero([0, 1, 2, -1, 2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True\nassert     triples_sum_to_zero([-5, -2, -1, 0, 1, 2]) == False\nassert     triples_sum_to_zero([0, 0, 0]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0]) == False\n\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     car_race_collision(2) == 1, '0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'\nassert car_race_collision(10) == 4, '0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'\nassert car_race_collision(20) == 8, '0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'\nassert car_race_collision(50) == 16, '0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'\nassert car_race_collision(100) == 32, '0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10'\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     car_race_collision(2) == 1\nassert car_race_collision(2) == 2\n\ndef car_race_collision_advanced(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinite line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    Here we introduce a new requirement: the cars that are going to move left to right\n    can only collide with cars that are going to move right to left.  The two sets of cars\n    start out being very far from each other.  All cars move in the same speed.\n    The two sets of cars can collide only when both cars are moving to the same direction.\n    In this challenge, the basic requirement for collision is that the cars' locations\n    change only when they collide.\n\n    The additional requirement is that the collision only happens at the same speed\n    that the cars were at the same speed when they collided.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert car_race_collision(2) == 1\nassert car_race_collision(3) == 1\nassert car_race_collision(4) == 2\nassert car_race_collision(5) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"car_race_collision\")\n    n = 5\n    print(car_race_collision(n))\n\n    n = 2\n    print(car_race_collision(n))"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     car_race_collision(1) == 1\nassert car_race_collision(2) == 1\nassert car_race_collision(3) == 2\nassert car_race_collision(4) == 2\nassert car_race_collision(5) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert car_race_collision(1) == 0\nassert car_race_collision(2) == 1\nassert car_race_collision(3) == 2\nassert car_race_collision(4) == 3\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     car_race_collision(1) == 1\nassert     car_race_collision(2) == 2\nassert     car_race_collision(3) == 1\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef incr_list2(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     incr_list([0]) == [1], \"incr_list([0]) == 1\"\nassert     incr_list([1, 2]) == [2, 3], \"incr_list([1, 2]) == 2,3\"\nassert     incr_list([1, 2, 3]) == [2, 3, 4], \"incr_list([1, 2, 3]) == 2,3,4\"\nassert     incr_list([0, 0]) == [1, 1], \"incr_list([0, 0]) == 1,1\"\nassert     incr_list([0, 0, 0, 0]) == [1, 1, 1, 1], \"incr_list([0, 0, 0, 0]) == 1,1,1,1\"\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # a     # a\n    # b     # b\n    # c     # c\n    # d     # d\nincr_list([0,1,2,3])"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\nassert     incr_list([1,2,3,4,5,6]) == [2,3,4,5,6,7]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert incr_list([0,1,2,3]) == [1,2,3,4]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nincr_list([1,2,3,4]) == [2,3,4,5]\nassert \nincr_list([1,2,3,4,5]) == [2,3,4,5,6]\nassert \nincr_list([1,2,3,4,5,6]) == [2,3,4,5,6,7]"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     incr_list([1,2,3,4]) ==  [2,3,4,5], 'incr_list([1,2,3,4])'\nassert     incr_list([2,3,4,5]) ==  [3,4,5,6], 'incr_list([2,3,4,5])'\nassert     incr_list([1,2,3,4,5]) ==  [2,3,4,5,6], 'incr_list([1,2,3,4,5])'\n\ndef incr_list_t(l: list, t: int) -> list:\n    \"\"\"Return list with elements incremented by t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         incr_list([1,2,3]) == [2,3,4], \\\n                \"incr_list should return [2,3,4]\"\nassert         incr_list([1,2,3]) == [2,3,4], \\\n                \"incr_list should return [2,3,4]\"\nassert         incr_list([]) == [1], \\\n                \"incr_list should return []\"\nassert         incr_list(['a','b','c']) == ['a','b','c'], \\\n                \"incr_list should return ['a','b','c']\"\nassert         incr_list(['a','b','c']) == ['a','b','c'], \\\n                \"incr_list should return ['a','b','c']\"\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([-1, -2, -3, 4]) == True\nassert     pairs_sum_to_zero([1, 2, 3, -4]) == False\nassert     pairs_sum_to_zero([1, -2, 3, 4]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([0,0,0,0]) == True\nassert     pairs_sum_to_zero([1,2,3,4]) == False\nassert     pairs_sum_to_zero([0,-3,5,-4,3]) == False\nassert     pairs_sum_to_zero([1,1]) == False\nassert     pairs_sum_to_zero([-3,4,3,0,-5]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([1, 2, 4, 5, 8]) is True\nassert pairs_sum_to_zero([1, 2, 4, -5, 8]) is False\nassert pairs_sum_to_zero([5, 4, -3, 8]) is True\n\nprint(f\"pairs_sum_to_zero() = {pairs_sum_to_zero.__doc__}\")\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([5, -3, -1, 2, 3]) == True\nassert pairs_sum_to_zero([1, 4, -9, 3, 2]) == False\nassert pairs_sum_to_zero([5, -3, 2, 3]) == False\nassert pairs_sum_to_zero([5, -3, 2, 3, 4]) == False\nassert pairs_sum_to_zero([5, -3, 2, 3, -4]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert pairs_sum_to_zero([0,0]) is False\nassert pairs_sum_to_zero([1,-1,2,-3,4,5]) is True\nassert pairs_sum_to_zero([0,-1,2,-3,4,5]) is False\nassert pairs_sum_to_zero([0,-1,2,-3,4,5]) is False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([1,2,3,5,-2,-1]) == True, \"Should be True\"\nassert pairs_sum_to_zero([1,2,3,5,-2,-1]) == True, \"Should be True\"\nassert pairs_sum_to_zero([1,2,3,5,-2,-1]) == True, \"Should be True\"\nassert pairs_sum_to_zero([1,2,3,5,-2,-1]) == True, \"Should be True\"\nassert pairs_sum_to_zero([1,2,3,5,-2,-1]) == False, \"Should be False\"\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([0, -2, 1, 3, -1, 2]) == True\nassert     pairs_sum_to_zero([0, -2, -1, 2]) == False\nassert     pairs_sum_to_zero([0, 1, 2, 4, -2, 1]) == False\nassert     pairs_sum_to_zero([0, 1, 2, 3, 4, 5, -2, -1]) == True\n\nprint(\"Passed all tests\""
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_base(1234, 16) == 'A1234'\nassert     change_base(123, 16) == 'B123'\nassert     change_base(1234, 2) == '1234'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_base(34, 2) == '1234', 'Incorrect'\nassert     change_base(54, 3) == '1554', 'Incorrect'\nassert     change_base(1024, 10) == '1024', 'Incorrect'"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_base(123, 16) ==     '123',     'Error 1'\nassert     change_base(1234, 16) ==     '1234',     'Error 2'\nassert     change_base(1234, 2) ==     '14',     'Error 3'\nassert     change_base(12345, 16) ==     '1235',     'Error 4'\nassert     change_base(12345, 2) ==     '12',     'Error 5'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_base(5, 2) == '1010', 'Test 1 failed.'\nassert     change_base(7, 4) == '9', 'Test 2 failed.'\nassert     change_base(10, 2) == 'A', 'Test 3 failed.'\nassert     change_base(5, 8) == '2', 'Test 4 failed.'\nassert     change_base(11, 16) == 'A', 'Test 5 failed.'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_base(14, 16) == \"4C\"\nassert     change_base(8, 16) == \"8\"\nassert     change_base(10, 16) == \"A\"\nassert     change_base(0, 16) == \"0\"\nassert     change_base(-14, 16) == \"-4C\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_change_base():\n    # create test strings\n    test_string = \"1234567890\"\n    test_base = 2\n    expected_result = \"234\"\n    \n    # check result\n    assert expected_result == change_base(test_string, test_base)"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_base(17, 3) == '7', 'wrong conversion'\nassert     change_base(17, 2) == '71', 'wrong conversion'\nassert     change_base(17, 10) == '17', 'wrong conversion'\nassert     change_base(0, 2) == '0', 'wrong conversion'\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(2, 4) == 4\nassert     triangle_area(3, 4) == 7\nassert     triangle_area(2, 2) == 4\nassert     triangle_area(3, 3) == 6\nassert     triangle_area(4, 2) == 8\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     triangle_area(1,1) == 0.5\nassert     triangle_area(1,2) == 0.75\nassert     triangle_area(1,3) == 1\nassert     triangle_area(2,1) == 1\nassert     triangle_area(2,2) == 1.5\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(3, 2) == 7.5\nassert     triangle_area(4, 8) == 15.25\nassert     triangle_area(5, 10) == 20\n\nprint(\"area of a triangle is:\", triangle_area(a, h))\n\n\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(4,5) == 5.5\nassert     triangle_area(5,8) == 19.5\nassert     triangle_area(7,2) == 14.5\nassert     triangle_area(6,8) == 18\nassert     triangle_area(1,5) == 4\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triangle_area(1, 1) == 1.5, 'Wrong area'\nassert triangle_area(1, 3) == 2, 'Wrong area'\nassert triangle_area(2, 4) == 5, 'Wrong area'\nassert triangle_area(3, 10) == 6, 'Wrong area'\nassert triangle_area(3.2, 1.2) == 2.68, 'Wrong area'\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(1, 1) == 1.0\nassert     triangle_area(2, 2) == 1.5\nassert     triangle_area(3, 3) == 2.0\nassert     triangle_area(4, 4) == 2.5\nassert     triangle_area(5, 5) == 3.0\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(1, 2) == sqrt(3) / 2.0, 'Should be sqrt(3)/2.'\nassert     triangle_area(1, 3) == sqrt(3), 'Should be sqrt(3).'\nassert     triangle_area(5, 6) == 2 * sqrt(3), 'Should be 2*sqrt(3).'\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfib4(0)\nfib4(1)\nfib4(2)\nfib4(3)\nfib4(4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 1\nassert     fib4(4) == 2\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2-1])/2\n\nif __name__ == '__main__':\n    l = [1, 2, 3]\n    print(f\"Median = {median(l)}\")\n\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n    print(f\"Median = {median(l)}\")\n\n    l = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median([1, 2, 3, 4]) == 3, \"Wrong median!\"\nassert     median([1, 1, 2, 3, 4, 5]) == 2, \"Wrong median!\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median([1, 2, 3]) == 2, \"Wrong result for median.\"\nassert     median([1, 1, 1]) == 1, \"Wrong result for median.\"\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 4, \"Wrong result for median.\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test()\n    nums = [1,2,3,4,5,6,7]\n    print(median(nums))"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median([1, 2, 3, 4, 5, 6]) == 3, \"Wrong median!\"\nassert     median([1, 2, 3, 4]) == 3, \"Wrong median!\"\nassert     median([1, 2, 3, 4, 5]) == 4, \"Wrong median!\"\nassert     median([1, 2, 3, 4, 5, 6]) == 4.5, \"Wrong median!\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median([2, 1, 3, 4, 5, 7, 8, 9, 10]) == 5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4.5\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median([3, 3, 4, 5, 5, 6, 7, 7]) == 3.5, \"Wrong median\"\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 5, \"Wrong median\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_palindrome('abaa') == True, 'Given string is not palindrome'\nassert     is_palindrome('abac') == False, 'Given string is palindrome'\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_palindrome_substring(text: str):\n    \"\"\"\n    Finds a palindrome substring\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_palindrome2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    is_palindrome(\"abcdcba\")\n    is_palindrome(\"\")\n    is_palindrome(\"abcdcbaa\")\n    is_palindrome(\"abcdcbaabcdcba\""
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert is_palindrome(\"eba\") == True\n    assert is_palindrome(\"abc\") == False\n    assert is_palindrome(\"a\") == True\n    "
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_palindrome('radar') == True, \"radar is a palindrome\"\nassert     is_palindrome('noon') == False, \"noon is not a palindrome\"\nassert     is_palindrome('racecar') == True, \"racecar is a palindrome\"\nassert     is_palindrome('taco cat') == False, \"taco cat is not a palindrome\"\nassert     is_palindrome('kayak') == True, \"kayak is a palindrome\"\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"abc\") == True\nassert     is_palindrome(\"aaaa\") == True\nassert     is_palindrome(\"rat\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_palindrome(\"\")\nassert not is_palindrome(\"a\")\nassert not is_palindrome(\"aa\")\nassert not is_palindrome(\"abc\")\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     modp(0, 1) == 0\nassert modp(1, 1) == 1\nassert modp(2, 1) == 1\nassert modp(100, 1) == 1\nassert modp(10, 10) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert (modp(1, 10) == 2)\nassert (modp(2, 10) == 0)\nassert (modp(3, 10) == 1)\nassert (modp(4, 10) == 0)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef modp_convert(n: int, p: int, base: int):\n    \"\"\"Return n modulo p in base.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert modp(10, 23) == 2\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode_shift(\"banana\") == \"nsrt\"\nassert     decode_shift(\"nsrt\") == \"banana\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    \"\"\"\n    function for parsing command line arguments\n    \"\"\"\n    parser = argparse.ArgumentParser(description=\"encrypt or decrypt messages\")\n    parser.add_argument(\"mode\", help=\"mode to operate with: 'encrypt' or 'decrypt'\", choices=[\"encrypt\", \"decrypt\"])\n    parser.add_argument(\"message\", help=\"message to encrypt or decrypt\", type=str)\n    parser.add_argument(\"key\", help=\"key to use for encrypt or decrypt\", type=str)\n    args = parser.parse_args()\n    \n    # check correctness of arguments\n    if not all([args.mode, args.message, args.key]):\n        return \n    if args.mode == \"encrypt\":\n        print(encode_shift(args.message).capitalize())\n    elif args.mode == \"decrypt\":\n        print(decode_shift(args.message).capitalize())\n\n\nif __name__ == \"__main__\":\n    main()\n\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_shift(\"KZWBGKZWBGLKZWBGKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGLKZWBGGL"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decode_shift(encode_shift(\"TESTSHIFT\")) == \"TESTST\"\n\n\ndef encrypt(text, key):\n    \"\"\"\n    encrypts a given string with a given shift.\n    \"\"\"\n    return encode_shift(text)\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_shift(encode_shift(\"The quick brown fox jumps over the lazy dog.\")) == \"the quick brown fox jumps over the lazy dog.\"\n\ndef encode_rot13(s: str):\n    \"\"\"\n    returns encoded string by shifting each character by 13 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 13 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_rot13(s: str):\n    \"\"\"\n    takes as input string encoded with encode_rot13 function. Returns decoded string.\n    \"\"\"\n    pass\n\n\ndef encode_atbash(s: str):\n    \"\"\"\n    returns encoded string by shifting each character by 13 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 13 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_atbash(s: str):\n    \"\"\"\n    takes as input string encoded with encode_atbash function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('text') == 't'\n\nprint('correct')\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_vowels('text') == 'text'\nassert remove_vowels('text') == 'text'\nassert remove_vowels('T') == 'T'\nassert remove_vowels('t') == 't'\nassert remove_vowels('T') == 'T'\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"hello\") == \"hello\", \"Testing failed\"\nassert     remove_vowels(\"hello world\") == \"hello world\", \"Testing failed\"\nassert     remove_vowels(\"hello\") == \"\", \"Testing failed\"\nassert     remove_vowels(\"\") == \"\", \"Testing failed\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_vowels(\"hello\") == \"hello\", \"Wrong result.\"\nassert     remove_vowels(\"I love Python\") == \"I love Python\", \"Wrong result.\"\nassert     remove_vowels(\"The language is initial\") == \"The language is initial\", \"Wrong result.\"\n\nprint(\"You've passed the task. Great job!\""
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_vowels('hello') == 'hello'\nassert remove_vowels('Leetcode') == 'Lcde'\nassert remove_vowels('hEllo') == 'Hello'\nassert remove_vowels('hello world') == 'hello world'\nassert remove_vowels('hello world!') == 'hello world'\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\"\"\""
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert remove_vowels(\"\") == \"\"\nassert remove_vowels(\"a\") == \"\"\nassert remove_vowels(\"\") == \"\"\nassert remove_vowels(\"i\") == \"\"\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_threshold([1, 2, 3, 4, 5], 1)\nassert not below_threshold([1, 2, 3, 4, 5], 2)\nassert     below_threshold([1, 2, 3, 4, 5], 5)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     below_threshold([2,1,4,3], 1) == True, \"true result for correctly passing one test case\"\nassert     below_threshold([2,1,4,3], 2) == True, \"true result for correctly passing one test case\"\nassert     below_threshold([1,3,4,1,2], 1) == True, \"true result for correctly passing one test case\"\nassert     below_threshold([1,3,4,1,2], 3) == True, \"true result for correctly passing one test case\"\nassert     below_threshold([2,4,1,3], 4) == False, \"false result for incorrectly passing one test case\"\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert below_threshold([], -1) == True\nassert below_threshold([1, 1], -1) == True\nassert below_threshold([-1, 1], -1) == False\nassert below_threshold([-1, 1, -1], -1) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nbelow_threshold([0,1,2], 0) == True\nbelow_threshold([0,1,2], 1) == False\nbelow_threshold([0,1,2], 3) == True\nbelow_threshold([0,1,2], 2) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_threshold([1, 5, 3, 7], 2) is True\nassert     below_threshold([0, 4, 2, 6], 1) is True\nassert     below_threshold([0, 4, 2, 6], 3) is True\nassert     below_threshold([2, 4, 6, 8], 3) is False\nassert     below_threshold([1, 5, 3, 7, 9, 0], 2) is True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     below_threshold([10, -10, 100], -100) == False\nassert     below_threshold([10, -10, 100], 0) == True\nassert     below_threshold([10, -10, 100], -10) == True\nassert     below_threshold([10, -10, 100], -100) == False\nassert     below_threshold([], -100) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return all(x < t for x in l)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbelow_threshold([], 6) == True\nassert below_threshold([-1, -2, 1], 2) == False\nassert below_threshold([-5], -6) == False\nassert below_threshold([1, 1, 1], 0) == False\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add(3, 5) == 8\nassert     add(8, 5) == 13\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check(add, (10, 15), (15, 10)) == 90\nassert check(add, (1, 2), (2, 1)) == 3\nassert check(add, (2, 2), (0, 0)) == 0\nassert check(add, (0, 0), (0, 0)) == 0\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert add(10, 20) == 30\nassert add(100, 200) == 400\nassert add(100, 200) == 400\n\ndef add(x, y):\n    \"\"\"Add two numbers x and y\n    \"\"\"\n    return x + y\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    add(4, 5) == 9\n    add(4, 2) == 6\n    add(2, 2) == 4\n    add(2, 4) == 6\n    add(2, 5) == 7\n    add(-4, 5) == -9\n    add(-4, 2) == -6\n    add(-2, 2) == -4\n    add(-2, 4) == -6\n    add(-2, 5) == -7\n\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     same_chars('hello', 'hello') == True, \"Hello\"\nassert     same_chars('hello', 'bye') == False, \"Hello\"\nassert     same_chars('hello', 'hello world') == True, \"Hello world\"\nassert     same_chars('hello', 'hello world!') == True, \"Hello world!\"\nassert     same_chars('hello', 'hello world?') == False, \"Hello world?\"\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     same_chars(\"hello\", \"hello\")\nassert     same_chars(\"hello\", \"ole\")\nassert     same_chars(\"hello\", \"llo\")\nassert     not same_chars(\"hello\", \"ello\")\nassert     same_chars(\"hello\", \"h\")\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     same_chars('I', 'II') == True\nassert     same_chars('I', 'i') == False\nassert     same_chars('II', 'I') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"Test Case 2.1 passed\")\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef same_chars_but_words(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters, but also\n    the same number of words.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    s0 = 'banana'\n    s1 = 'banana'\n    print(s0 == s1)\n    print(s0 == s1, same_chars(s0, s1))\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nif __name__ == '__main__':\n    print(fib(1))\n    print(fib(2))\n    print(fib(3))\n    print(fib(4))\n    print(fib(5))\n    print(fib(10)"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fib(1) == 0\nassert fib(2) == 1\nassert fib(3) == 1\nassert fib(4) == 2\nassert fib(5) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\nassert     fib(6) == 8\nassert     fib(7) == 13\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fib(10) == 55\nassert fib(20) == 6765\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\nassert fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fib(0) == 0, '0-th Fibonacci number incorrect'\nassert     fib(1) == 1, '1-th Fibonacci number incorrect'\nassert     fib(2) == 1, '2-th Fibonacci number incorrect'\nassert     fib(3) == 2, '3-th Fibonacci number incorrect'\nassert     fib(4) == 3, '4-th Fibonacci number incorrect'\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef sum_fib(n):\n    \"\"\"Return sum of Fibonacci numbers.\n    \"\"\"\n    pass\n\n\ndef sum_fib_iter(n):\n    \"\"\"Return sum of Fibonacci numbers.\n    \"\"\"\n    pass\n\n\ndef sum_fib_dp(n):\n    \"\"\"Return sum of Fibonacci numbers.\n    \"\"\"\n    pass\n\n\ndef sum_fib_iter_dp(n):\n    \"\"\"Return sum of Fibonacci numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(fib(100))\n    pas"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<()>\")\nassert     correct_bracketing(\"<[]>\")\nassert     correct_bracketing(\"<{<{<{<{<\")\nassert     correct_bracketing(\"<[<[<[<[<\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<\") is True\nassert     correct_bracketing(\"<]\") is False\nassert     correct_bracketing(\"<\") is True\nassert     correct_bracketing(\"<])\") is False\nassert     correct_bracketing(\"<])\") is False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncorrect_bracketing(\"<\") == True, \"1st case\"\ncorrect_bracketing(\"<\") == True, \"2nd case\"\ncorrect_bracketing(\"<)\") == False, \"3rd case\"\ncorrect_bracketing(\"(>)\") == False, \"4th case\"\ncorrect_bracketing(\"<><\") == False, \"5th case\"\ncorrect_bracketing(\"<<\") == False, \"6th case\"\ncorrect_bracketing(\"<\") == False, \"7th case\"\ncorrect_bracketing(\"<\") == False, \"8th case\"\ncorrect_bracketing(\"<>\") == False, \"9th case\"\ncorrect_bracketing(\"<\") == False, \"10th case\"\ncorrect_bracketing(\"<\") == False, \"11th case\"\ncorrect_bracketing(\"<\") == False, \"12th case\"\ncorrect_bracketing(\"<\") == False, \"13th case\"\ncorrect_bracketing(\"<\") == False, \"14th case\"\ncorrect_bracketing(\"<\") == False, \"15th case\"\ncorrect_bracketing(\"<\") == False, \"16th case\"\ncorrect_bracketing(\"<\") == False, \"17th case\"\ncorrect_bracketing(\"<\") == False, \"18th case\"\ncorrect_bracketing(\"<\") == False, \"19th case\"\ncorrect_bracketing(\"<\") == False, \"20th case\"\ncorrect_bracketing(\"<\") == False, \"21st case\"\ncorrect_bracketing(\"<\") == False, \"22st case\"\ncorrect_bracketing(\"<\") == False, \"23st case\"\ncorrect_bracketing(\"<\") == False, \"24st case\"\ncorrect_bracketing(\"<\") == False, \"25st case\"\ncorrect_bracketing(\"<\") == False, \"26st case\"\ncorrect_bracketing(\"<\") == False, \"27st case\"\ncorrect_bracketing(\"<\") == False, \"28st case\"\ncorrect_bracketing(\"<\") == False, \"29st case\"\ncorrect_bracketing(\"<\") == False, \"30st case\"\ncorrect_bracketing(\"<\") == False, \"31st case\"\ncorrect_bracketing(\"<\") == False, \"32st case\"\ncorrect_bracketing(\"<\") == False, \"33st case\"\ncorrect_bracketing(\"<\") == False, \"34st case\"\ncorrect_bracketing(\"<\") == False, \"35st case\"\ncorrect_bracketing(\"<\") == False, \"36st case\"\ncorrect_bracketing(\"<\") == False, \"37st case\"\ncorrect_bracketing(\"<\") == False, \"38st case\"\ncorrect_bracketing(\"<\") == False, \"39st case\"\ncorrect_bracketing(\"<\") == False, \"40st case\"\ncorrect_bracketing(\"<\") == False, \"41st case\"\ncorrect_bracketing(\"<\") == False, \"42st case\"\ncorrect_bracketing(\"<\") == False, \"43st case\"\ncorrect_bracketing(\"<\") == False, \"44st case\"\ncorrect_bracketing(\"<\") == False, \"45st case\"\ncorrect_bracketing(\"<\") == False, \"46st case\"\ncorrect_bracketing(\"<\") == False, \"47st case\"\ncorrect_bracketing(\"<\") == False, \"48st case\"\ncorrect_bracketing(\"<\") == False, \"49st case\"\ncorrect_bracketing(\"<\") == False, \"50st case\"\ncorrect_bracketing(\"<\") == False, \"51st case\"\ncorrect_bracketing(\"<\") == False, \"52st case\"\ncorrect_bracketing(\"<\") == False, \"53st case\"\ncorrect_bracketing(\"<\") == False, \"54st case\"\ncorrect_bracketing(\"<\") == False, \"55st case\"\ncorrect_bracketing(\"<\") == False, \"56st case\"\ncorrect_bracketing(\"<\") == False, \"57st case\"\ncorrect_bracketing(\"<\") == False, \"58st case\"\ncorrect_bracketing(\"<\") == False, \"59st case\"\ncorrect_bracketing(\"<\") == False, \"60st case"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncorrect_bracketing(\"<\") == True\ncorrect_bracketing(\"<]\") == False\ncorrect_bracketing(\"[\") == False\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[][]][\") == False\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[[][]][]\") == True\ncorrect_bracketing(\"[][][][][][][][][]\") == False\ncorrect_bracketing(\"<]\") == True\ncorrect_bracketing(\"[]\") == True\ncorrect_bracketing(\"[]\") == True\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[]\") == False\ncorrect_bracketing(\"[[][]][]\") == True\ncorrect_bracketing(\"[][]\") == False\ncorrect_bracketing(\"[][]\") == False\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[]\") == True\ncorrect_bracketing(\"[]\") == True\ncorrect_bracketing(\"[[][]][]\") == True\ncorrect_bracketing(\"[][]\") == False\ncorrect_bracketing(\"[][]\") == False\ncorrect_bracketing(\"[][]\") == False\ncorrect_bracketing(\"[]\") == True\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[][]\") == True\ncorrect_bracketing(\"[[][]][]\") == True\ncorrect_bracketing(\"[][][][][][][][][]\") == False\ncorrect_bracketing
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef split(s: str):\n    \"\"\" s is a string of \"(\" and \")\"\n    return a list of strings of every other character of s.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<<>\") == True\nassert     correct_bracketing(\"<()<\") == False\nassert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing('<') == True\nassert     correct_bracketing('(>)') == True\nassert     correct_bracketing('<(>)') == False\nassert     correct_bracketing('<{}') == False\nassert     correct_bracketing('<') == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<()>\") == False, \"This should be False\"\nassert correct_bracketing(\"<{}>\") == True, \"This should be True\"\nassert     correct_bracketing(\"<[]>\") == False, \"This should be False\"\nassert     correct_bracketing(\"<{}>\") == True, \"This should be True\"\nassert     correct_bracketing(\"<{[][]\") == False, \"This should be False\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncorrect_bracketing('<a>') == True\nassert \ncorrect_bracketing('<a>b') == True\nassert \ncorrect_bracketing('<a>b<c>d') == False\nassert \ncorrect_bracketing('<a><b><c><d>e</d></c><f>g</f></a>') == True\nassert \ncorrect_bracketing('<a><b><c><d></d><f></f></c></b></a>') == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     monotonic([0, 1, 3, 4, 5])\nassert     not monotonic([0, 1, 3, 4, 5])\nassert     monotonic([0, 1, 3, 4, 5])\nassert     not monotonic([0, 1, 3, 4, 5])\nassert     monotonic([0, 1, 3, 4, 5])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     monotonic([-1,2,4,-3,5])\nassert not    monotonic([1,2,3,4,5])\nassert not    monotonic([-1,2,3,4,5,1])\nassert not    monotonic([-1,2,3,4,5,1,2])\nassert monotonic([-1,2,4,-3,5])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         monotonic([1,1,1,2,3,4,5])\nassert not         monotonic([1,1,2,3,4,5,5])\nassert         monotonic([1,1,2,3,4,5,1])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         monotonic([0,1,1,2,3])\nassert         monotonic([1,2,3,2,1])\nassert         not monotonic([1,2,3,2,1,4])\nassert         not monotonic([2,1,1,2,3,4])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     monotonic([1, 2, 3, 2, 1])\nassert     monotonic([3, 2, 1])\nassert     monotonic([2, 1, 3])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not monotonic([1,2,3])\nassert not monotonic([3,2,1])\nassert monotonic([1,2,3,2,3])\nassert monotonic([1,2,3,2,1])\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncommon([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8,9])\nassert common([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8,9,10]) == []\nassert common([1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8,9,10,11,12]) == [4,5,6]\nassert common([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12]) == []\nassert common([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12,13]) == [4,5,6]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    common([1,2,3,4,5,6,7], [1,3,7,9,11])\n    common([1,2,3,4,5,6,7,8,9,10,11], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47], [1,2,3,4,5,6,7,8,9,10])\n    common([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,13"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common([1,2,3,4,5,6],\n        [7,8,9,10,11,12]) ==     [1,2,3,4,5,6]\n\nassert     common([1,2,3,4,5,6,7,8],\n        [7,8,9,10,11,12]) ==     [7,8,9,10,11,12]\n\nassert     common([1,2,3,4,5,6],\n        [7,8,9,10,11,12]) ==     [1,2,3,4,5,6]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common([1,2,3], [2,3]) == [2,3], \"Wrong!\"\nassert common([1,2,3], [3,4]) == [], \"Wrong!\"\nassert common([1], [2,3]) == [1], \"Wrong!\"\nassert common([], [2,3]) == [], \"Wrong!\"\nassert common([], []) == [], \"Wrong!\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    assert common([1,2,3,4],\n                [3,4,5,6]) == [3,4]\n    assert common([1,2,3,4],\n                [3,4,5,6,7]) == []\n\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common([1,2,3,4,5], [4,5,6,7,8]) == [4,5]\nassert     common([1,2,3,4,5,6], [4,5,6,7,8]) == [4,5]\nassert     common([1,2,3,4,5,6], [4,5,6,7,8,9]) == []\nassert     common([1,2,3,4,5], [4,5,6,7,8,9]) == [4,5,6,7,8,9]\nassert     common([1,2,3,4,5,6], [4,5,6,7,8,9]) == [4,5,6,7,8,9]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert common([0,1,2,3], [0,1,2,3]) == [0,1,2,3]\nassert common([], []) == []\nassert common([1,2,3], [1,2,3]) == [1,2,3]\nassert common([0,1,2,3], [1,2,3,4,5]) == [1,2,3]\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlargest_prime_factor(6) == 2\nlargest_prime_factor(8) == 2\nlargest_prime_factor(4) == 2\nlargest_prime_factor(12) == 3\nlargest_prime_factor(9) == 3\nlargest_prime_factor(20) == 5\nlargest_prime_factor(100) == 2\nlargest_prime_factor(600851475143) == 5\nlargest_prime_factor(12345) == 5\nlargest_prime_factor(0) == 0\nlargest_prime_factor(-5) == 5\nlargest_prime_factor(1000000) == 5\nlargest_prime_factor(10**20) == 7\nlargest_prime_factor(10**26) == 27\n\ndef bernstein_poly(i, n, t):\n    \"\"\"Return the nth bernstein polynomial of degree n and order t,\n        i.e. the formula of degree n and order t,\n        n! / (t! * (n-t)!) * P_n(t)\n        with n >= 0, t >= 0, and P_n(t) a polynomial in t.\n    \"\"\"\n    pass\n\ndef str_poly(n, t, poly):\n    \"\"\"Return a string representation of the nth bernstein polynomial of degree n and order t,\n        i.e. the formula of degree n and order t,\n        n! / (t! * (n-t)!) * P_n(t)\n        with n >= 0, t >= 0, and P_n(t) a polynomial in t.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(largest_prime_factor(600851475143))\n    print(largest_prime_factor(600851475143, True))\n\n\ndef largest_prime_factor(n: int, use_turtle: bool = True) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    >>> largest_prime_factor(600851475143, True)\n    3239\n\n    >>> largest_prime_factor(600851475143, False)\n    137\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 1:\n        raise ValueError('n is not a natural number')\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(7) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert largest_prime_factor(2) == 2\nassert largest_prime_factor(8) == 2\nassert largest_prime_factor(13) == 13\nassert largest_prime_factor(97) == 13\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(12) == 3\nassert largest_prime_factor(13) == 13\nassert largest_prime_factor(14) == 7\nassert largest_prime_factor(15) == 5\nassert largest_prime_factor(16) == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert largest_prime_factor(12) == 2\nassert largest_prime_factor(7) == 7\nassert largest_prime_factor(5) == 5\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(7) == 7\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert largest_prime_factor(20) == 5\nassert largest_prime_factor(8) == 2\nassert largest_prime_factor(5) == 5\nassert largest_prime_factor(7) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         sum_to_n(10) == 55\nassert         sum_to_n(20) == 55\nassert         sum_to_n(30) == 65\nassert         sum_to_n(40) == 90\nassert         sum_to_n(50) == 155\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsum_to_n(n=100) == 5050\nsum_to_n(n=5) == 5\nsum_to_n(n=1) == 1\nsum_to_n(n=0) == 0\nsum_to_n(n=-1) == -1\nsum_to_n(n=-2) == -3\nsum_to_n(n=-5) == -10\nsum_to_n(n=-10) == -50\nsum_to_n(n=0) == 0\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_to_n_rec(n: int):\n    \"\"\"sum_to_n_rec is a function that sums numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\nassert     sum_to_n(6) == 21\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_to_n(0) == 0, \"Expected sum_to_n(0) = 0\"\nassert     sum_to_n(1) == 1, \"Expected sum_to_n(1) = 1\"\nassert     sum_to_n(10) == 55, \"Expected sum_to_n(10) = 55\"\nassert     sum_to_n(20) == 165, \"Expected sum_to_n(20) = 165\"\nassert     sum_to_n(100) == 55 + 66 + 77 + 88 + 99 + 110 + 111 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 120 + 121 + 122 + 123 + 124 + 125 + 126 + 127 + 128 + 129 + 130 + 131 + 132 + 133 + 134 + 135 + 136 + 137 + 138 + 139 + 140 + 141 + 142 + 143 + 144 + 145 + 146 + 147 + 148 + 149 + 150 + 151 + 152 + 153 + 154 + 155 + 156 + 157 + 158 + 159 + 160 + 161 + 162 + 163 + 164 + 165, \"Expected sum_to_n(100) = 165\"\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_to_n(5) == 1 + 2 + 3 + 4 + 5\nassert     sum_to_n(8) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8\nassert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 1 + 2\nassert     sum_to_n(3) == 1 + 2 + 3\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncorrect_bracketing(\"(()))\") == True\nassert correct_bracketing(\"(()\") == False\nassert correct_bracketing(\")()())\") == True\nassert correct_bracketing(\"((((((((())))()()()()()()()()()())()()()()()()()()()()()())()()()()()()()()()()()()())()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\") == True\n\nprint(\"PASS\" if (True) else \"FAIL\")\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"(((()()()()))())\") == True\nassert     correct_bracketing(\"(((((()()()))(())))\") == False\nassert     correct_bracketing(\"(((((()()()))(())))))\") == False\nassert     correct_bracketing(\"(((((()()()))(())))))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(((()))\") == True\nassert     correct_bracketing(\"(((((()))))\") == False\nassert     correct_bracketing(\"(((((())()))()))\") == True\nassert     correct_bracketing(\"(((((())(()))()))(())\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing('(()))'        ==    False\nassert     correct_bracketing('((('    ==    True\nassert     correct_bracketing(')))(((('    ==    False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()()\") == True\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"((()())\") == False\nassert     correct_bracketing(\"()(()\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"((()()(()))())\") == True\nassert     correct_bracketing(\"(())(((()())))\") == False\nassert     correct_bracketing(\"(()(()))\") == False\nassert     correct_bracketing(\"(((()))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    correct_bracketing(\"()())()\") == True\n    correct_bracketing(\"(()())\") == False\n    correct_bracketing(\"(())\") == False\n    correct_bracketing(\"(\") == False\n    correct_bracketing(\"())\") == False\n    correct_bracketing(\"((()))\") == False\n    correct_bracketing(\"(\") == False\n\ndef string_to_list(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    brackets_lst = list(brackets)\n    \n    # if len(brackets_lst) == 0:\n    #     return False\n    \n    if len(brackets_lst) % 2!= 0:\n        return False\n    \n    stack = []\n    \n    for char in brackets_lst:\n        if char == '(':\n            stack.append(char)\n        if char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    \n    return len(stack) == 0\n    \n    # while bracket_count % 2!= 0:\n    #     if bracket_count == 0:\n    #         return False\n    #     else:\n    #         bracket_count -= 1\n    \n    # if bracket_count == 0:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing('()'        )\nassert     correct_bracketing('(())'        )\nassert     correct_bracketing('()()'        )\nassert     correct_bracketing('((()'        )\nassert     correct_bracketing('((()))'    )\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     derivative([0,1]) == []\nassert     derivative([1,2,3,4]) == [2,6,12,24]\nassert     derivative([0,1,0,1]) == [1,2,0,1]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('Expected: 1.0')\nprint('Actual:'+ str(derivative(xs=x)))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     derivative([1, 2, 3]) == [3, 6, 3]\nassert     derivative([1, 2, 3, 4]) == [3, 6, 6, 2]\nassert     derivative([1, 2, 3, 4, 5]) == [3, 6, 6, 2, 0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nxs = [0, 1, 2, 3]\nderivative(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert derivative([0,1]) == [0,0,0]\n    assert derivative([0,1,1]) == [0,1,1]\n    assert derivative([0,1,1,1]) == [0,1,1,1]\n    "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fibfib(5) == 4\nassert     fibfib(10) == 55\nassert     fibfib(15) == 610\nassert     fibfib(20) == 6765\nassert     fibfib(25) == 75025\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fibfib(5) == 0\nassert     fibfib(100) == 0\nassert     fibfib(1000) == 1\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0: return 0\n    if n == 1: return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nvowels_count(FIX) == 5\nassert vowels_count('sheep') == 6\nassert vowels_count('tttttt') == 0\nassert vowels_count('eat') == 2\nassert vowels_count('h') == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert FIX\n\nprint(FIX)\nprint(\"\"\"\nVowels_count()\nIt returns the number of vowels in the given word.\n\"\"\")\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     vowels_count(\"apple\") == 5, \"Should return 5\"\nassert     vowels_count(\"nope\") == 0, \"Should return 0\"\nassert     vowels_count(\"already\") == 0, \"Should return 0\"\nassert     vowels_count(\"coding\") == 5, \"Should return 5\"\nassert     vowels_count(\"\") == 0, \"Should return 0\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nvowels_count(\"apple\") == 3\nvowels_count(\"banana\") == 3\nvowels_count(\"orange\") == 2\nvowels_count(\"apple\") == 3\nvowels_count(\"tree\") == 4\nvowels_count(\"\") == 0\nvowels_count(\"i\") == 1\nvowels_count(\"y\") == 1\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(FIX)\n\ndef vowels_count(s):\n    vowels = 0\n    for char in s:\n        if char.lower() in ('a', 'e', 'i', 'o', 'u', 'y'):\n            vowels += 1\n    return vowels\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"PASS\" if (fix == vowels_count(FIX)) else \"FAIL\""
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(FIX)"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     vowels_count(FIX) == 5\nassert     vowels_count(\"\") == 0\nassert     vowels_count(\"a\") == 1\nassert     vowels_count(\"aeiou\") == 4\nassert     vowels_count(\"aiou\") == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nFIX\n\ndef is_palindrome(s):\n    \"\"\"Write a function is_palindrome which takes a string as input and\n    returns whether it is a palindrome or not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nx = 16\nassert circular_shift(x, 3) == 5\nassert circular_shift(x, -3) == 13\nassert circular_shift(x, -12) == 16\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         circular_shift(4567,3) == '4678'\nassert         circular_shift(4567,2) == '5767'\nassert         circular_shift(4567,5) == '6745'\nassert         circular_shift(4567,0) == '4567'\nassert         circular_shift(4567,6) == '6745'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert 1 == 1\n\ndef summation(n):\n    \"\"\"Sum all the digits of n\n    \"\"\"\n    pass\n\nassert 2 == 2\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circular_shift(123, 2) == \"31\"\nassert     circular_shift(123, -1) == \"321\"\nassert     circular_shift(123, 3) == \"321\"\nassert     circular_shift(123, -3) == \"123\"\nassert     circular_shift(123, 24) == \"321\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\"\"\"\nThis is a solution for the following code:\ndef circular_shift(x, shift):\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]\n\"\"\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         circular_shift(5, 0) == '5'\nassert         circular_shift(5, 2) == '3'\nassert         circular_shift(1023, 10) == '2023'\nassert         circular_shift(1023, -10) == '1023'\nassert         circular_shift(1257, -5) == '1241'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digitSum('12345') == 5\nassert     digitSum('1234') == 5\nassert     digitSum('123456789') == 0\nassert     digitSum('1') == 1\nassert     digitSum('0') == 0"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    digitSum('XX') == \n    'XX'\n    assert \n    digitSum('XX') == \n    'XX'\n    assert \n    digitSum('23') == \n    '23'\n    assert \n    digitSum('23.5') == \n    '23'\n    assert \n    digitSum('5') == \n    '5'\n    "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('TEST CASE:'+ str(digitSum(\"The number is\")))\nprint('TEST CASE:'+ str(digitSum(\"This is a test\")))\nprint('TEST CASE:'+ str(digitSum(\"The number is 4\")))\n\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    count = 0\n    for char in s:\n        if ord(char) >= 65 and ord(char) <= 90:\n            count += ord(char) - 64\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    digitSum(\"1ABC\") == 12, \"Expected: 12, Actual: %d\" % (digitSum(\"1ABC\"))\n    digitSum(\"1A\") == 1, \"Expected: 1, Actual: %d\" % (digitSum(\"1A\"))\n    digitSum(\"ABCDEF\") == 26, \"Expected: 26, Actual: %d\" % (digitSum(\"ABCDEF\"))\n    digitSum(\"abcde\") == 21, \"Expected: 21, Actual: %d\" % (digitSum(\"abcde\"))\n    digitSum(\"A\") == 1, \"Expected: 1, Actual: %d\" % (digitSum(\"A\"))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum(\"KIDDLE\") == 5, 'incorrect'\nassert     digitSum(\"KIDDLED\") == 5, 'incorrect'\nassert     digitSum(\"KIDDLEEF\") == 11, 'incorrect'\nassert     digitSum(\"KIDDLEEFG\") == 0, 'incorrect'\nassert     digitSum(\"KIDDLEEFGG\") == 0, 'incorrect'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndigitSum(\"\") == 0\nassert digitSum(\"12345678901\") == 45\nassert digitSum(\"123456789\") == 45\nassert digitSum(\"123456789012345\") == 45\nassert digitSum(\"1234567890123456789\") == 45\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digitSum('hello') == 10\nassert     digitSum('a') == 1\nassert     digitSum('al') == 11\nassert     digitSum('z') == 26\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digitSum(\"12345\") == \"123\", \"The test output is not as expected\"\nassert digitSum(\"123\") == \"3\", \"The test output is not as expected\"\nassert digitSum(\"45\") == \"4\", \"The test output is not as expected\"\nassert digitSum(\"123456789\") == \"23\", \"The test output is not as expected\"\nassert digitSum(\"1234567890\") == \"23\", \"The test output is not as expected\""
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfruit_distribution('1',1) == 0\nassert \nfruit_distribution('2',1) == 0\nassert \nfruit_distribution('2',2) == 0\nassert \nfruit_distribution('2',3) == 0\nassert \nfruit_distribution('2',4) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"100\", 5) == \"100\"\nassert fruit_distribution(\"200\", 5) == \"0\"\nassert fruit_distribution(\"101\", 5) == \"0\"\nassert fruit_distribution(\"10101\", 5) == \"0\"\nassert fruit_distribution(\"10001\", 5) == \"2\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fruit_distribution('10',1) == 1, 'Example 1.1'\nassert     fruit_distribution('12',1) == 1, 'Example 1.2'\nassert     fruit_distribution('21',2) == 3, 'Example 1.3'\nassert     fruit_distribution('13',1) == 1, 'Example 1.4'\nassert     fruit_distribution('10',0) == 0, 'Example 1.5'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fruit_distribution(\"omg\", 1) == 1\nassert fruit_distribution(\"m\", 5) == 2\nassert fruit_distribution(\"gf\", 5) == 0\nassert fruit_distribution(\"omg\", 2) == 2\nassert fruit_distribution(\"omgm\", 5) == 4\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"25\",7) == 1\nassert     fruit_distribution(\"45\",7) == 0\nassert     fruit_distribution(\"30\",7) == 2\nassert     fruit_distribution(\"10\",7) == 0\nassert     fruit_distribution(\"21\",7) == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfruit_distribution(\"2\",\"4\")==2\nfruit_distribution(\"5\",\"4\")==3\nfruit_distribution(\"4\",\"5\")==1\nfruit_distribution(\"0\",\"4\")==0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fruit_distribution(str(20), 10) == 4\nassert     fruit_distribution(str(30), 10) == 2\nassert     fruit_distribution(str(100), 10) == 4\n\nprint('All the tests passed.')\n\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"2,1,1,2,1,2,2,1,2\", 2) == 3\nassert     fruit_distribution(\"2,1,1,2,1,2,2,1,2\", 3) == 2\nassert     fruit_distribution(\"2,1,1,2,1,2,2,1,2\", 4) == 3\nassert     fruit_distribution(\"2,1,1,2,1,2,2,1,2\", 0) == 0\n\n\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfruit_distribution(\"10\", \"11\") == 2\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pluck([3,5,6,6,2,2,4,6,5,3,1])    ==     [3,3]\nassert     pluck([3,4,6,6,2,2,4,6,5,3,1])    ==     [4,1]\nassert     pluck([])    ==     []\nassert     pluck([1])    ==     [1]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == [1]\nassert     pluck([2,1]) == [2,1]\nassert     pluck([1,2]) == [1,1]\nassert     pluck([1,2,3,4,5]) == [1,1]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pluck([1,2,4,2,6,4,3,1,7,6,7,9,9,11,11,4]) == [2, 3], \"Wrong output\"\nassert     pluck([1,2,4,2,6,4,3,1,7,6,7,9,9,11,11,4]) == [2, 3], \"Wrong output\"\nassert     pluck([1,2,4,2,6,4,3,1,7,6,7,9,9,11,11,4]) == [2, 3], \"Wrong output\"\nassert     pluck([]) == [], \"Wrong output\"\nassert     pluck([0]) == [0], \"Wrong output\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    assert pluck([1, 3, 6, 2, 4]) == [2, 0]\n    assert pluck([1, 3, 6, 2, 4]) == [2, 0]\n    assert pluck([1, 3, 6, 2, 4]) == [2, 0]\n    assert pluck([1, 3, 6, 2, 4]) == [2, 0]\n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pluck([]) == []\nassert     pluck([2, 1]) == []\nassert     pluck([1, 2, 3]) == [1, 0]\nassert     pluck([1, 2, 3, 4]) == [1, 2]\nassert     pluck([2, 4, 6, 1]) == [1, 2]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pluck([3, 1, 4, 6, 3]) == [[3, 1], 3]\nassert     pluck([1, 2, 3, 4, 5, 6]) == []\nassert     pluck([-5, -3, -1, 0, 3, 5, 9]) == [3, 5]\nassert     pluck([5, 4, 3, 2, 1]) == [[5, 1], 5]\nassert     pluck([]) == []\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint search([5, 1, 3, 2, 3, 5]) == 5\nprint search([1, 2, 3, 4, 5]) == -1\nprint search([]) == -1\nprint search([3, 4, 5, 6, 7, 8, 9]) == 9\nprint search([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3\n\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([3,4,3,3,3,4,4,4,4]) == 4\nassert     search([3,4,3,3,3,4,4,4,4,4,4]) == 4\nassert     search([1,2,3,4,4,4,4,4,4,4,4,4,4,4]) == 4\nassert     search([1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsearch([3,4,5,2,5,2]) == 5\nassert search([1,2,3,4,5,6,2,5,2]) == 5\nassert search([4,2,4]) == 4\nassert search([-1,2,3,-4,4]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([2,3,1,0,1,1,2,2,2,1,1,2,2,1,1,2,2,1]) == 3\nassert     search([2,3,1,0,1,1,2,2,2,1,1,2,2,1,1,2,2,1]) == 2\nassert     search([2,3,1,0,1,1,2,2,2,1,1,2,2,1,1,2,2,1,1]) == -1\n\ndef merge_sort(lst):\n    '''\n    Implementation of Merge Sort. This function is recursive.\n    https://en.wikipedia.org/wiki/Merge_sort\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([5,3,1,2,4,4,2,4])==5\nassert     search([3,2,3])==-1\nassert     search([2,2,2])==2\nassert     search([1,1,1])==1\nassert     search([1,1,1,1])==1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([]) == -1\nassert     search([1]) == 1\nassert     search([1,2,2,1]) == 2\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([1,1,1,2,2,2]) == 2, \"Test 1 Failed\"\nassert     search([-1,1,3,2,3,1,2,1]) == 1, \"Test 2 Failed\"\nassert     search([3,2,2,3]) == -1, \"Test 3 Failed\"\nassert     search([1,2,3,3,3]) == 3, \"Test 4 Failed\"\nprint(\"Tests passed\")"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n\nlst = [-1,5,8,5,5,5,5,8,8,8,10,12,12,12,12,12,12,12,12]\n\nprint(search(lst))\n\n\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strange_sort_list([1, 10, 25, 40, 40, 50]) == [10, 25, 40, 40, 40, 50]\nassert     strange_sort_list([5, 1, 50, 7, 20, 35, 40]) == [1, 5, 20, 35, 40, 50, 7]\nassert     strange_sort_list([1, 3, 2, 3, 5, 1, 2]) == [1, 1, 1, 2, 2, 3, 3]\n\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strange_sort_list([5,6,7,8]) == [5,6,7,8], \"Wrong answer\"\nassert     strange_sort_list([1,2,3]) == [1,2,3], \"Wrong answer\"\nassert     strange_sort_list([1,2,3,4]) == [1,2,3,4], \"Wrong answer\"\nassert     strange_sort_list([1,2,3,4,5]) == [1,2,3,4,5], \"Wrong answer\"\nassert     strange_sort_list([1,2,3,4,5,6]) == [1,2,3,4,5,6], \"Wrong answer\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([10]) == [10]\nassert     strange_sort_list([10, 20]) == [10, 20]\nassert     strange_sort_list([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]\nassert     strange_sort_list([-1, -10, -20, -30, -40, -50]) == [-1, -10, -20, -30, -40, -50]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strange_sort_list([1,2,3]) ==    [1,3,2], \"Wrong answer!\"\nassert     strange_sort_list([-1,-2,-3,-4]) ==    [-4,-3,-2,-1], \"Wrong answer!\"\nassert     strange_sort_list([1,2,3,4,5,6,7,8,9]) ==    [1,2,3,4,5,6,7,8,9], \"Wrong answer!\"\nassert     strange_sort_list([1,2,3,4,5,6,7,8,9,0,1]) ==    [0,1,1,2,3,4,5,6,7,8,9], \"Wrong answer!\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    strange_sort_list([0, 1, 2, 3, 4]) == [[0,1,2,3,4]]\n    strange_sort_list([1, 1, 1, 2, 3]) == [[1,1,1,2,3]]\n    strange_sort_list([1, 1, 1, 2, 3, 1]) == [[1,1,1,2,3,1]]\n    strange_sort_list([1, 1, 2, 1, 1, 3]) == [[1,1,1,2,1,3]]\n    strange_sort_list([1, 1, 2, 3, 1, 1, 3]) == [[1,1,1,2,1,3,1]]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     strange_sort_list([-1, 2, 5, 7, -10, 3, 6, 8, -2, -6]) == [-10, -6, -2, -1, 2, 3, 5, 6, 7, 8], \\\n    \"Wrong result for strange_sort_list\"\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert strange_sort_list([1, 10, 50, 20, 30]) == [1, 1, 10, 20, 30, 50]\nassert strange_sort_list([1, 10, 50, 20, 30, 9]) == [1, 1, 10, 20, 30, 9, 50]\nassert strange_sort_list([1, 10, 50, 20, 30, 9, -1, -100, -100]) == [1, 1, 10, 20, 30, 9, -100, -100, -1]\nassert strange_sort_list([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(2, 5, 3) == 1.52\nassert     triangle_area(1, 4, 5) == -1\nassert     triangle_area(1, 1, 2) == 0.5\nassert     triangle_area(1, 2, 1) == 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntriangle_area(2, 3, 5) == -1\ntriangle_area(3, 4, 5) == -1\ntriangle_area(4, 5, 3) == -1\ntriangle_area(1, 2, 4) == -1\ntriangle_area(4, 5, 5) == 0\ntriangle_area(1, 2, 2) == 0\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(3, 4, 5) == 5.0, \"Wrong!\"\nassert     triangle_area(5, 4, 3) == 8.0, \"Wrong!\"\nassert     triangle_area(5, 5, 3) == 10.0, \"Wrong!\"\nassert     triangle_area(2, 3, 4) == -1, \"Wrong!\"\nassert     triangle_area(7, 2, 8) == -1, \"Wrong!\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(2, 3, 4) == 5.5, 'triangle_area(2,3,4) is incorrect'\nassert     triangle_area(2, 3, 3) == -1, 'triangle_area(2,3,3) is incorrect'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(0, 0, 0) == -1, \"Should be -1\"\nassert     triangle_area(1, 1, 1) == 1, \"Should be 1\"\nassert     triangle_area(10, 1, 1) == 11, \"Should be 11\"\nassert     triangle_area(4, 5, 6) == 5.5, \"Should be 5.5\"\nassert     triangle_area(6, 5, 4) == 8.5, \"Should be 8.5\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # -1\n    assert triangle_area(3, 4, 5) == -1\n    # 0\n    assert triangle_area(0, 0, 5) == 0\n    # 1\n    assert triangle_area(1, 1, 1) == 1\n    # 5\n    assert triangle_area(2, 1, 2) == 5\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert will_it_fly([1,2,3], 3)\n\nassert will_it_fly([1,2,3,4,5,6], 7)\nassert will_it_fly([1,2,3,4,5,6], 10)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         will_it_fly(['a','b','c','a','d','a'], 8) == True, \"The first test fails\"\nassert         will_it_fly([1,2,3,4,5], 5) == False, \"The second test fails\"\nassert         will_it_fly([1,2,3,4,5], 6) == False, \"The third test fails\"\nassert         will_it_fly([1,2,3,4,5], 4) == True, \"The fourth test fails\"\nassert         will_it_fly([1,2,3,4,5], 9) == True, \"The fifth test fails\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     will_it_fly([[1,1,1],[1,1,1],[1,1,1]], 1) == True\nassert     will_it_fly([[1,1,1],[1,1,1],[1,1,1]], 2) == False\nassert     will_it_fly([[1,1,1,1],[1,1,1,1],[1,1,1,1]], 2) == False\nassert     will_it_fly([[1,1,1,1],[1,1,1,1],[1,1,1,1]], 3) == True\n\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nwill_it_fly(\n[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nwill_it_fly([1, 2, 3], 4) == False\nwill_it_fly([1, 2, 3, 4], 3) == False\nwill_it_fly([1, 2, 3, 4, 5], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], 5) == True\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 5) == False\nwill_it_fly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], 5"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     will_it_fly([],2) == False, \"2\"\nassert     will_it_fly([1],2) == False, \"2\"\nassert     will_it_fly([1,2],2) == False, \"2\"\nassert     will_it_fly([1,2,2],2) == False, \"2\"\nassert     will_it_fly([1,2,2],1) == True, \"1\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     will_it_fly(['a','b','c','d','e'], 6) == True\nassert     will_it_fly(['a','b','c','d','e'], 6) == False\nassert     will_it_fly([], 1) == False\nassert     will_it_fly(['a'], 1) == True\nassert     will_it_fly([], 0) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nwill_it_fly([1,2,3,2], 5) == False,'should be False'\nwill_it_fly([1,2,3,2], 6) == True,'should be True'\nwill_it_fly([1,1,1], 5) == False,'should be False'\nwill_it_fly([1,1,1], 6) == True,'should be True'\n\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nwill_it_fly([\"bad\", \"bad\", \"good\", \"good\", \"bad\", \"good\"], 2) == True\nwill_it_fly([\"bad\", \"bad\", \"good\", \"good\", \"bad\", \"good\", \"good\", \"good\"], 4) == False\nwill_it_fly([\"bad\", \"bad\", \"good\", \"good\", \"bad\", \"good\", \"good\", \"good\", \"good\", \"good\"], 4) == True\n\n\n\n\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    arr = list(map(int, input().split()))\n    print(smallest_change(arr))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_change(\n        [12, 5, 1, 4, 3, 6, 7]) == 3\nassert     smallest_change(\n        [10, 7, 5, 1, 4, 3, 6, 7]) == 2\nassert     smallest_change(\n        [1, 4, 5, 1, 4, 3, 6, 7]) == 0\nassert     smallest_change(\n        [12, 6, 7, 1, 4, 5, 1, 4, 3, 6, 7]) == 1\nassert     smallest_change(\n        [8, 6, 7, 1, 4, 5, 1, 4, 3, 6, 7]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_change([1,2,2,3]) == 1\nassert     smallest_change([4,5,5,6]) == 1\nassert     smallest_change([1,2,2,2]) == 0\nassert     smallest_change([1,2,3,4,5]) == 1\nassert     smallest_change([1,2,3,4,4]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_change([1, 1, 1]) == 3\nassert     smallest_change([1, 2, 3]) == 3\nassert     smallest_change([3, 3, 3]) == 1\nassert     smallest_change([3, 1, 3]) == 3\nassert     smallest_change([3, 2, 3]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = list(map(int, input().split()))\n    print(smallest_change(arr))"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     total_match([\"test\",\"Test\"], [\"te\",\"e\"]) == [\"Test\"], \"Error in the test case\"\nassert     total_match([\"test\",\"Test\",\"t\"], [\"te\",\"e\"]) == [\"Test\"], \"Error in the test case\"\nassert     total_match([\"test\",\"Test\",\"t\",\"e\"], [\"te\",\"e\"]) == [\"Test\"], \"Error in the test case\"\nassert     total_match([\"test\",\"Test\",\"t\",\"e\",\"T\"], [\"te\",\"e\"]) == [\"Test\"], \"Error in the test case\"\nassert     total_match([\"test\",\"Test\",\"t\",\"e\",\"Test\"], [\"te\",\"e\"]) == [\"Test\"], \"Error in the test case\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     total_match(['a', 'b', 'c', 'd', 'e'], ['a', 'c', 'e']) == ['a', 'e']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'c', 'e']) == ['a', 'b', 'c', 'e']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'c', 'e']) == ['a', 'e']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'c', 'e', 'f']) == ['a', 'c', 'e', 'f']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     total_match([], []) == []\nassert     total_match([], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\nassert     total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\nassert     total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'e']) == ['a', 'b', 'c', 'd']\nassert     total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'f']) == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     total_match(['abc', 'abc', 'abcd'], ['abc', 'abcd']) == ['abc']\nassert total_match(['abc', 'abc', 'abcd'], ['abc', 'a']) == ['abc', 'abc']\nassert total_match(['abc', 'abc', 'abcd'], ['abc', 'abcd', 'a']) == ['abc']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (total_match(['a','b','c','d','e'], ['a','b','c','d','e']) \n==     ['a','b','c','d','e']), \"wrong total_match function\"\nassert (total_match(['a','b','c','d','e'], ['a','b','c']) == \n['a','b','c']), \"wrong total_match function\"\nassert (total_match(['a','b','c','d','e'], ['a','b','c','d','e']) == \n['a','b','c','d','e']), \"wrong total_match function\"\nassert (total_match(['a','b','c','d','e'], ['a','b','c','d','e',\n                                           'f','g','h','i','j']) == \n['a','b','c','d','e']), \"wrong total_match function\"\nassert (total_match(['a','b','c','d','e'], ['a','b','c','d','e',\n                                           'f','g','h','i','j',\n                                           'k','l','m','n','o','p',\n                                           'q','r','s','t','u','v','w','x',\n                                           'y','z','a','b','c','d','e']) == \n['a','b','c','d','e']), \"wrong total_match function\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntotal_match(['abcd', 'dcba', 'ccb'], ['abcd', 'dcba', 'ccb']) == ['abcd', 'dcba']\nassert total_match([], ['abcd', 'dcba', 'ccb']) == []\nassert total_match(['abcd', 'dcba', 'ccb'], ['abcd', 'dcba', 'ccb']) == ['abcd', 'dcba']\nassert total_match(['abcd', 'dcba', 'ccb'], ['abcd', 'dcba', 'ccb', 'ccc']) == ['abcd', 'dcba']\nassert total_match(['abcd', 'dcba', 'ccb'], ['abcd', 'dcba', 'ccb', 'ccc', 'ccd']) == ['abcd', 'dcba']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     total_match([\"abc\",\"bcd\",\"abcde\"],    [\"abc\",\"cde\",\"abcdef\",\"xbcde\"]) == [\"abc\",\"abcdef\"]\nassert total_match([\"abc\",\"bcd\",\"abcde\",\"efgh\",\"ijkl\"],    [\"abc\",\"ef\",\"g\"]) == [\"abc\",\"ef\"]\nassert total_match([\"abc\",\"bcd\",\"abcde\"],    [\"abc\",\"bcd\",\"ab\",\"abcde\"]) == [\"abc\",\"abcde\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     total_match(['hello', 'world'], ['he', 'll']) == ['hello']\nassert     total_match(['hello', 'world'], ['h', 'e', 'l', 'o', 'w', 'r', 'l', 'd']) == ['hello']\nassert     total_match(['hello', 'world'], ['h', 'e', 'l', 'o', 'w', 'r', 'l', 'd', 'd']) == ['hello']\nassert total_match(['hello', 'world'], ['h', 'e', 'l', 'o', 'w', 'r', 'l', 'd']) == ['hello']\nassert total_match(['hello', 'world'], ['h', 'e', 'l', 'o', 'w', 'r', 'l', 'd']) == ['hello']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     total_match([\"cat\", \"bat\", \"hat\", \"cat\"], [\"cat\", \"bat\"]) == [\"cat\", \"bat\"]\nassert total_match([\"cat\", \"bat\", \"hat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\"], \n[\"cat\", \"bat\", \"hat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\"]) == [\"cat\", \"bat\"]\nassert total_match([\"cat\", \"bat\", \"hat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\"], \n[\"cat\", \"bat\", \"hat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"bat\", \"cat\", \"bat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\"]) == [\"cat\", \"bat\"]\nassert total_match([\"cat\", \"bat\", \"hat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"bat\", \"cat\", \"bat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\"], \n[\"cat\", \"bat\", \"hat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\"]) == [\"cat\", \"bat\", \"cat\"]\nassert total_match([\"cat\", \"bat\", \"hat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\"], \n[\"cat\", \"bat\", \"hat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"bat\"]) == [\"cat\", \"bat\", \"cat\", \"cat\", \"bat\", \"cat\", \"cat\", \"bat\"]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_multiply_prime(17) is True\nassert \n    is_multiply_prime(9) is False\nassert\n    is_multiply_prime(1) is False\nassert\n    is_multiply_prime(7) is False\nassert\n    is_multiply_prime(11) is True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(99) == False, \"Test 1: is_multiply_prime(99) failed\"\nassert     is_multiply_prime(1) == False, \"Test 2: is_multiply_prime(1) failed\"\nassert     is_multiply_prime(11) == True, \"Test 3: is_multiply_prime(11) failed\"\nassert     is_multiply_prime(97) == False, \"Test 4: is_multiply_prime(97) failed\"\nassert     is_multiply_prime(2) == False, \"Test 5: is_multiply_prime(2) failed\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(0)     == False\nassert     is_multiply_prime(1)     == False\nassert     is_multiply_prime(2)     == False\nassert     is_multiply_prime(3)     == True\nassert     is_multiply_prime(4)     == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_multiply_prime(3) == True\nassert is_multiply_prime(89) == True\nassert is_multiply_prime(7) == True\nassert is_multiply_prime(7) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(123456789) == False, \"Wrong answer: False\"\nassert     is_multiply_prime(1234456789) == False, \"Wrong answer: False\"\nassert     is_multiply_prime(1235456789) == True, \"Wrong answer: True\"\nassert     is_multiply_prime(12456789) == False, \"Wrong answer: False\"\nassert     is_multiply_prime(23456789) == False, \"Wrong answer: False\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nis_simple_power(4, 2) == True\nis_simple_power(8, 2) == True\nis_simple_power(16, 2) == True\nis_simple_power(16, 3) == False\nis_simple_power(2, 4) == False\nis_simple_power(2, 3) == True\nis_simple_power(8, 1) == True\nis_simple_power(8, 0) == False\nis_simple_power(8, -2) == False\nis_simple_power(4, -3) == False\nis_simple_power(3, -3) == True\nis_simple_power(9, -3) == True\nis_simple_power(100, -2) == True\nis_simple_power(125, -2) == False\nis_simple_power(125, -1) == False\nis_simple_power(125, -3) == False\nis_simple_power(125, 1) == True\nis_simple_power(125, 2) == False\nis_simple_power(125, 0) == True\nis_simple_power(125, -3) == False\nis_simple_power(125, -1) == False\nis_simple_power(125, -2) == True\nis_simple_power(125, -3) == False\nis_simple_power(125, 0) == True\nis_simple_power(125, 1) == True\nis_simple_power(125, 2) == True\nis_simple_power(125, 3) == True\nis_simple_power(125, 4) == True\nis_simple_power(125, 5) == False\nis_simple_power(125, 6) == False\nis_simple_power(125, 7) == False\nis_simple_power(125, 8) == False\nis_simple_power(125, 9) == False\nis_simple_power(125, 10) == False\nis_simple_power(125, 11) == False\nis_simple_power(125, 12) == False\nis_simple_power(125, 13) == False\nis_simple_power(125, 14) == False\nis_simple_power(125, 15) == False\nis_simple_power(125, 16) == False\nis_simple_power(125, 17) == False\nis_simple_power(125, 18) == False\nis_simple_power(125, 19) == False\nis_simple_power(125, 20) == False\nis_simple_power(125, 21) == False\nis_simple_power(125, 22) == False\nis_simple_power(125, 23) == False\nis_simple_power(125, 24) == False\nis_simple_power(125, 25) == True\nis_simple_power(125, 26) == False\nis_simple_power(125, 27) == False\nis_simple_power(125, 28) == False\nis_simple_power(125, 29) == False\nis_simple_power(125, 30) == False\nis_simple_power(125, 31) == False\nis_simple_power(125, 32) == False\nis_simple_power(125, 33) == False\nis_simple_power(125, 34) == False\nis_simple_power(125, 35) == False\nis_simple_power(125, 36) == False\nis_simple_power(125, 37) == False\nis_simple_power(125, 38) == False\nis_simple_power(125, 39) == True\nis_simple_power(125, 40) == False\nis_simple_power(125, 41) == False\nis_simple_power(125, 42) == False\nis_simple_power(125, 43) == False\nis_simple_power(125, 44) == False\nis_simple_power(125, 45) == False\nis_simple_power(125, 46) == False\nis_simple_power(125, 47) == False\nis_simple_power(125, 48) == False\nis_simple_power(125, 49) == False\nis_simple_power(125, 50) == True\nis_simple_power(125, 51) == False\nis_simple_power(125, 52) == True\nis_simple_power(125, 53) == True\nis_simple_power(125, 5"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(3, 4) == True\nassert     is_simple_power(100, 2) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_simple_power(3, 2) == True, \"For example 3**2 should be 9\"\nassert     is_simple_power(1, 2) == False, \"1**2 should be 1\"\nassert     is_simple_power(2, 2) == True, \"2**2 should be 4\"\nassert     is_simple_power(3, 3) == False, \"3**3 should be 27\"\nassert     is_simple_power(1, 0) == False, \"1**0 should be 1\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(10, 1) == True\nassert     is_simple_power(3, 3) == True\nassert     is_simple_power(7, 3) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_simple_power(2, 2) == True,'Not correct'\nassert     is_simple_power(10, 2) == False,'Not correct'\nassert     is_simple_power(3, 0) == False,'Not correct'\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_simple_power(8, 2) == True\nassert     is_simple_power(9, 2) == False\nassert     is_simple_power(0, 2) == True\nassert     is_simple_power(8, 3) == False\nassert     is_simple_power(0, 3) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_simple_power(3,2) == True\nassert     is_simple_power(9,3) == False\nassert     is_simple_power(8,3) == False\nassert     is_simple_power(10,3) == False\nassert     is_simple_power(7,3) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_simple_power(1, 1) == True, '1'\nassert \nis_simple_power(2, 2) == True, '2'\nassert \nis_simple_power(3, 3) == True, '3'\nassert \nis_simple_power(4, 5) == False, '4'\nassert \nis_simple_power(5, 1) == False, '5'\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     iscube(1) == True, 'failed test 1'\nassert     iscube(0) == False, 'failed test 2'\nassert     iscube(3) == True, 'failed test 3'\nassert     iscube(4) == False, 'failed test 4'\nassert     iscube(8) == True, 'failed test 5'\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     iscube(1) == False\nassert     iscube(2) == True\nassert     iscube(5) == True\nassert     iscube(9) == False\nassert     iscube(27) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncube = lambda a: a**3\nassert cube(4) == 64\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n'''\nFinally, in Python,\nthe function abs(x) can be used to find the absolute value of any number. \nIn the example below, \nthe function abs(-3) should return 3.\n'''\n\ndef abs(a):\n    '''\n    Write a function that takes one number a and returns its absolute value.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert iscube(0) == False, \"iscube(0): True\"\nassert iscube(1) == False, \"iscube(1): True\"\nassert iscube(2) == True, \"iscube(2): False\"\nassert iscube(3) == True, \"iscube(3): False\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     iscube(0) == True\nassert     iscube(1) == True\nassert     iscube(2) == True\nassert     iscube(5) == True\nassert     iscube(11) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef hex_key_2(s):\n    \"\"\"You have been tasked to write a function that receives a hexadecimal \n    number as a string and counts the number of hexadecimal digits that are \n    primes (prime number, or a prime, is a natural number greater than 1 \n    that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     hex_key('') == 0\nassert     hex_key('AA') == 0\nassert     hex_key('AA') == 0\nassert     hex_key('AB') == 1\nassert     hex_key('AB') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef hex_key_solution(num):\n    '''\n    Here I had to introduce the additional conditions:\n    1.  If the number was A,B,C,D,E,F, \n        the number of hexadecimal digits was in the range [2,6], so \n        its count was 0.\n    2.  If the number was 11,13,17,19,21,23,25...\n        the number of hexadecimal digits was in the range [1,6], so \n        its count was 1.\n    3.  If the number was 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F, \n        the number of hexadecimal digits was in the range [0,9], so \n        its count was 0.\n\n    '''\n    pass\n\ndef hex_key_solution_2(num):\n    '''\n    This solution is more concise and simpler than the solution in the previous version.\n    '''\n    pass\n\nif __name__ == '__main__':\n    print(hex_key(''))\n    print(hex_key('5'))\n    print(hex_key('A'))\n    print(hex_key('BB'))\n    print(hex_key('ABCDEF'))\n    print(hex_key('AABB'))\n    print(hex_key('AAABBB'))\n    print(hex_key('AAABCDF'))\n    print(hex_key('AAABBCCCD'))\n    print(hex_key('AAABCDFF'))\n    print(hex_key('AAABCDFCD'))\n    print(hex_key('AAABCDFDA'))\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nhex_key('1234EF') == 9\nassert hex_key('A') == 1\nassert hex_key('11') == 3\nassert hex_key('C') == 3\nassert hex_key('A') == 1\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nhex_key('A0') == 1\n\nassert \nhex_key('A2') == 0\n\nassert \nhex_key('B2') == 2\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(1) == \"1b\"\nassert     decimal_to_binary(10) == \"1010b\"\nassert     decimal_to_binary(15) == \"11015b\"\nassert     decimal_to_binary(16) == \"11010000b\"\nassert     decimal_to_binary(17) == \"110100010b\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert decimal_to_binary(3) == \"0b11\", \"wrong answer, expected {0b11}, got {1}\".format(\"0b11\", \"0b11\")\nassert decimal_to_binary(4) == \"0b100\", \"wrong answer, expected {0b100}, got {1}\".format(\"0b100\", \"0b100\")\nassert decimal_to_binary(5) == \"0b101\", \"wrong answer, expected {0b101}, got {1}\".format(\"0b101\", \"0b101\")\nassert decimal_to_binary(6) == \"0b110\", \"wrong answer, expected {0b110}, got {1}\".format(\"0b110\", \"0b110\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(0) == 'db'\nassert decimal_to_binary(1) == 'd'\nassert decimal_to_binary(2) == 'd'\nassert decimal_to_binary(3) == 'dd'\nassert decimal_to_binary(4) == 'dd'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(2) == '00'\nassert     decimal_to_binary(3) == '01'\nassert     decimal_to_binary(4) == '10'\nassert     decimal_to_binary(5) == '11'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(5) == \"01\"\nassert decimal_to_binary(12) == \"100\"\nassert decimal_to_binary(35) == \"10101\"\nassert decimal_to_binary(144) == \"10000001\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(13) == 'db1'\nassert     decimal_to_binary(6) == 'db0'\nassert     decimal_to_binary(8) == 'db1'\nassert     decimal_to_binary(2) == '00'\nassert     decimal_to_binary(5) == '01'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0)    ==    '0'\nassert     decimal_to_binary(1)    ==    '1'\nassert     decimal_to_binary(4)    ==    'db'\nassert     decimal_to_binary(10)    ==    '10'\nassert     decimal_to_binary(27)    ==    '110'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == 'db'\nassert     decimal_to_binary(10) == 'db10'\nassert     decimal_to_binary(15) == 'db15'\nassert     decimal_to_binary(16) == 'db16'\nassert     decimal_to_binary(11) == 'db11'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_happy(\"abc\") == True\nassert is_happy(\"aab\") == True\nassert is_happy(\"abb\") == False\nassert is_happy(\"aabcd\") == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nis_happy('abba')"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not is_happy('a')\nassert is_happy('abc')\nassert is_happy('aab')\nassert is_happy('aaa')\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    is_happy('aabab') == False\n    is_happy('abcde') == True\n    is_happy('aba') == True\n    is_happy('aabb') == False\nassert\n    is_happy('aabb') == False\n    is_happy('aab') == False\n    is_happy('ab') == False\n    is_happy('abcd') == False\nassert\n    is_happy('a') == False\n    is_happy('ab') == False\n    is_happy('abba') == False\n    is_happy('abc') == True\nassert\n    is_happy('abcd') == False\n    is_happy('abcde') == True\n    is_happy('aa') == True\n    is_happy('aabb') == False\nassert\n    is_happy('aabb') == False\n    is_happy('aab') == False\n    is_happy('ab') == False\n    is_happy('abcd') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(is_happy(\"lglg\"))\nprint(is_happy(\"gmlhg\"))\nprint(is_happy(\"gmlhgf\"))\nprint(is_happy(\"lglghgfhgf\"))\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_num_of_students(student_list):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output the number of students who got A+, A, B+, C+, D+, \n    and F+.\n\n    Input\n    -----\n    student_list : a list of student's GPAs\n    \n    Output\n    ------\n    a list of student's names\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(numerical_letter_grade([3.7, 4.0, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]))"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(numerical_letter_grade(grades))"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([0,0,0,0,0,0,0,0,0,0,0,0,0]) == ['E','E','E','E','E','E','E','E','E','E','E','E','E'], \"WRONG!\"\nassert     numerical_letter_grade([1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]) == ['A+','A+','A+','A+','A+','A+','A+','A+','A+','A+','A+','A+','A+'], \"WRONG!\"\nassert     numerical_letter_grade([1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3]) == ['A','A','A','A','A','A','A','A','A','A','A','A','A','A'], \"WRONG!\"\nassert     numerical_letter_grade([2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0]) == ['A-','A-','A-','A-','A-','A-','A-','A-','A-','A-','A-','A-','A-'], \"WRONG!\"\nassert     numerical_letter_grade([2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7,2.7]) == ['B+','B+','B+','B+','B+','B+','B+','B+','B+','B+','B+','B+','B+'], \"WRONG!\"\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\nprint(\"Test case 1: PASS\")\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0,3.7,3.3,3.0,2.7,2.3,2.0,1.7,1.3,1.0,0.7,0.0])    == ['A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A', 'A+', 'A+']\nassert     numerical_letter_grade([3.0,3.3,3.0,2.7,2.7,2.3,1.7,1.3,1.0,0.7,0.0])    == ['A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A', 'A+', 'A+']\nassert     numerical_letter_grade([3.0,3.3,3.0,2.7,2.7,2.3,1.7,1.3,1.0,0.7,0.0])    == ['A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A', 'A+', 'A+']\nassert     numerical_letter_grade([3.0,3.3,3.0,2.7,2.7,2.3,1.7,1.3,1.0,0.7,0.0])    == ['A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A', 'A+', 'A+']\nassert     numerical_letter_grade([3.0,3.3,3.0,2.7,2.7,2.3,1.7,1.3,1.0,0.7,0.0])    == ['A+', 'A', 'A-', 'A+', 'A', 'A-', 'A+', 'A', 'A-', 'A', 'A+', 'A+']\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prime_length(\"abc\") == False\nassert prime_length(\"abcde\") == True\nassert prime_length(\"abd\") == False\nassert prime_length(\"abcde\") == False\nassert prime_length(\"abcdezz\") == False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_length(\"abc\") == False, \"abc should be False\"\nassert prime_length(\"ab\") == False, \"ab should be False\"\nassert prime_length(\"\") == False, \"empty string should be False\"\nassert prime_length(\"x\") == False, \"x should be False\"\nassert prime_length(\"1234\") == False, \"the number 1234 should be False\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert prime_length('0') == True\nassert prime_length('2') == False\nassert prime_length('3') == False\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert prime_length('a') == False\nassert prime_length('ab') == False\nassert prime_length('abc') == False\nassert prime_length('abcd') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prime_length('hello')\nassert prime_length('hello world')\nassert prime_length('hello world')\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_length(\"string\") == False\nassert     prime_length(\"\") == False\nassert     prime_length(\"string string\") == False\nassert     prime_length(\"string\") == True\nassert     prime_length(\"\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_length(\"xyz\") == True, \"string\"\nassert     prime_length(\"ac\") == False, \"string\"\nassert     prime_length(\"aab\") == True, \"string\""
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_starts_one_ends():\n    assert starts_one_ends(1) == 1\n    assert starts_one_ends(2) == 1\n    assert starts_one_ends(3) == 2\n    "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     starts_one_ends(5) == 7\nassert     starts_one_ends(7) == 13\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     starts_one_ends(10) == 4\nassert     starts_one_ends(100) == 24\nassert     starts_one_ends(1000) == 24\nassert     starts_one_ends(10000) == 24\nassert     starts_one_ends(1000000) == 24\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     starts_one_ends(3) == 5\nassert     starts_one_ends(4) == 9\nassert     starts_one_ends(5) == 14\nassert     starts_one_ends(6) == 20\nassert     starts_one_ends(7) == 27\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(5) == 3\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 10\n    expected = 24\n    output = starts_one_ends(n)\n    assert output == expected, \"Wrong answer\"\n    print(\"Looks Good!\")"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve(0) == ''\nassert     solve(1) == '1'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    solve(N) == str(int(bin(N)[2:])).zfill(N)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solve(10) == \"1100\"\nassert     solve(20) == \"10101\"\nassert     solve(21) == \"10101\"\nassert     solve(22) == \"10101\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    solve(0) == 0\n    solve(1) == 1\n    solve(128) == 128\n    solve(253) == 243\n    solve(999) == 1111\n    solve(9999) == 1111111\n    solve(1234) == 123\n    solve(1534) == 54\n    solve(12345) == 123\n    solve(123456) == 111100\n    solve(1234567) == 11110011\n    solve(12345678) == 1111001101\n    solve(123456789) == 111100110111\n    solve(1234567890) == 11110011011101\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve(1) == \"1\", \"2^0 = 1\"\nassert     solve(2) == \"10\", \"2^1 = 10\"\nassert     solve(3) == \"11\", \"2^2 = 10\"\nassert     solve(4) == \"100\", \"2^3 = 10\"\nassert     solve(5) == \"101\", \"2^4 = 10\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert add([]) == []\nassert add([3, 1, 2, 3, 1]) == [1, 3, 1]\nassert add([1, 1, 2, 3]) == [1, 2, 1]\nassert add([2, 3, 4, 5]) == [3, 5, 2, 4]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add([2,3,4,5,6,7]) == 5, \"wrong\"\nassert     add([2,3,4,6,7,8]) == 8, \"wrong\"\nassert     add([2,3,4,6,7,8,9]) == 6, \"wrong\"\nassert     add([2,3,4,6,7,8,9,10]) == 0, \"wrong\"\nprint(\"YOUR CODE IS CORRECT!\""
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nadd([2,4,6,8]) == None, 'Your add function is incorrect'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add([1, 2, 3, 4, 5]) == [2, 4, 6]\nassert add([1, 2, 3, 4]) == []\nassert add([1, 2, 3, 4, 5, 6]) == [2, 4, 6]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('\\n\\n\\nTest case: add(list = [1,3,5,8,11])')\nassert add([1,3,5,8,11]) == 7\nprint('OK')\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nadd([1,2,3,4]) == None\nassert add([1,2,3,4,5]) == [2,4,6]\nassert add([1,2,3,4,5,6]) == [2,4,6,8,10]\nassert add([1,2,3,4,5,6,7]) == [2,4,6,8,10,12]\nassert add([1,2,3,4,5,6,7,8]) == [2,4,6,8,10,12,14]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"hi   there    bye\") == \"bytheredhi\"\nassert     anti_shuffle(\"  hiho        \") == \"aeihoh\"\nassert     anti_shuffle(\"   \") == \"\"\nassert     anti_shuffle(\"hi hello there bye\") == \"bytheredhi\"\nassert     anti_shuffle(\"\") == \"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"word\") == \"orddex\", \"Word should be ordered\"\nassert     anti_shuffle(\"apple\") == \"aprl\", \"Correct\"\nassert     anti_shuffle(\"\") == \"\", \"Empty string\"\nassert     anti_shuffle(\" \") == \"\", \"Space only\"\nassert     anti_shuffle(\"word x\") == \"odrk x\", \"First character should be low\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     anti_shuffle('')     == ''\nassert     anti_shuffle(' ')     ==''\nassert     anti_shuffle('one word')     == 'one w1rd'\nassert     anti_shuffle('two words')     == 'tw1 wo1r d'\nassert     anti_shuffle('four words')     == 'four w1r1s'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     anti_shuffle('test') == \"etst\"\nassert     anti_shuffle('this is a test') == \"this is a tst\"\nassert     anti_shuffle('hello world') == \"o dlrow olleh\"\nassert     anti_shuffle('word') == \"deword\"\nassert     anti_shuffle(' ') == \"s\"\nprint(\"correct\")\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     anti_shuffle(\"hello world\") == \"world hello\", \"First example error\"\nassert     anti_shuffle(\"Good Morning\") == \"Gmroon Wrold\", \"Second example error\"\nassert     anti_shuffle(\"\") == \"\", \"Third example error\"\nassert     anti_shuffle(\"Hi, how are you? I am fine\") == \"Yo,how,are,you,I,am,fine\", \"Fourth example error\"\nassert     anti_shuffle(\"Hello\") == \"\", \"Fifth example error\"\nprint(\"correct\")\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"fjw rrqq xxxx oogv xhxk uufz xxxe jjvw\"\nassert     anti_shuffle(\"i love balloonicorn\") == \"icnol bbcao abcna\"\nassert     anti_shuffle(\"hello world!\") == \"dlrow olleh\"\n\nif __name__ == '__main__':\n    import sys\n    if len(sys.argv)!= 2:\n        print(\"Usage: python anti_shuffle.py <string>\")\n    else:\n        print(anti_shuffle(sys.argv[1])"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Correct!' if anti_shuffle(s) == 'the 1a 2b 3c 4d 5e' else 'Incorrect!')"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\"\"\"\nTest Case 1\nstring = 'this is good day'\nanti_shuffle(string)\nprint(string) ==\n'this is g d a o y'\n\"\"\"\n\n\"\"\"\nTest Case 2\nstring = 'hello hello'\nanti_shuffle(string)\nprint(string) ==\n'h e l l o h e l l o'\n\"\"\"\n\n\"\"\"\nTest Case 3\nstring = 'hello world'\nanti_shuffle(string)\nprint(string) ==\n'h e l l o w e l r d'\n\"\"\"\n\n\"\"\"\nTest Case 4\nstring = 'hey we are going abroad'\nanti_shuffle(string)\nprint(string) ==\n'h e y w e r d a o b r e s e w a b r e'\n\"\"\"\n\n\"\"\"\nTest Case 5\nstring = 'i am just learning how to code'\nanti_shuffle(string)\nprint(string) ==\n'a m i d e w e r j u n l n g k t i m l e n d'\n\"\"\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_row([[1, 2], [3, 4], [5, 6], [7, 8]], 2) == [(1, 2), (3, 4), (5, 6), (7, 8)]\nassert     get_row([[1, 2, 3], [4, 5, 6]], 2) == [(1, 2), (4, 5), (3, 6)]\nassert     get_row([[1, 2], [3, 4]], 2) == [(1, 2), (3, 4)]\nassert     get_row([[1, 2], [3, 4]], 1) == [(1, 2), (3, 4)]\nassert     get_row([[1], [2]], 1) == [(1, 0), (2, 0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_all_coordinates(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, find all coordinates in the list,\n    and return a list of tuples, [(x1, y1), (x2, y2)...]\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_row([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16], [17,18,19,20]], 3) ==\\\n            [(4, 0), (5, 1), (6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12), (17, 13), (18, 14), (19, 15), (20, 16), (17, 17), (16, 18), (15, 19), (14, 20), (13, 21), (12, 22), (11, 23), (10, 24), (9, 25), (8, 26), (7, 27), (6, 28), (5, 29), (4, 30), (3, 31), (2, 32), (1, 33)]\nassert     get_row([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16], [17,18,19,20]], 4) ==\\\n            [(4, 1), (5, 2), (6, 3), (7, 4), (8, 5), (9, 6), (10, 7), (11, 8), (12, 9), (13, 10), (14, 11), (15, 12), (16, 13), (17, 14), (18, 15), (19, 16), (20, 17), (17, 18), (16, 19), (15, 20), (14, 21), (13, 22), (12, 23), (11, 24), (10, 25), (9, 26), (8, 27), (7, 28), (6, 29), (5, 30), (4, 31), (3, 32), (2, 33), (1, 34)]\nassert     get_row([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16], [17,18,19,20]], 0) ==\\\n            [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 1), (6, 2), (7, 3), (8, 4), (9, 5), (10, 6), (11, 7), (12, 8), (13, 9), (14, 10), (15, 11), (16, 12), (17, 13), (18, 14), (19, 15), (20, 16), (17, 17), (16, 18), (15, 19), (14, 20), (13, 21), (12, 22), (11, 23), (10, 24), (9, 25), (8, 26), (7, 27), (6, 28), (5, 29), (4, 30), (3, 31), (2, 32), (1, 33), (0, 34)]\nassert     get_row([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16], [17,18,19,20]], 6) ==\\\n            [(6, 0), (7, 1), (8, 2), (9, 3), (10, 4), (11, 5), (12, 6), (13, 7), (14, 8), (15, 9), (16, 10), (17, 11), (18, 12), (19, 13), (20, 14), (21, 15), (22, 16), (23, 17), (24, 18), (25, 19), (26, 20), (27, 21), (28, 22), (29, 23), (30, 24), (31, 25), (32, 26), (33, 27), (34, 28), (35, 29), (36, 30), (37, 31), (38, 32), (39, 33), (40, 34), (41, 35), (42, 36), (43, 37), (44, 38), (45, 39), (46, 40), (47, 41), (48, 42), (49, 43), (50, 44), (51, 45), (52, 46), (53, 47), (54, 48), (55"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_col(lst, y):\n    \"\"\"\n    Given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of rows.\n    Given a list of rows, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (columns, row), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_column(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef make_grid(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, generate a grid-like object which will look like\n    a grid of a cnadidate distribution.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_row([[0], [1], [2], [3]], 0) == [(0, 0)]\nassert     get_row([[0], [1], [2], [3]], 1) == [(0, 1), (0, 2), (0, 3)]\nassert     get_row([[0], [1], [2], [3]], 2) == [(1, 0), (1, 1), (1, 2), (1, 3)]\nassert     get_row([[0], [1], [2], [3]], 3) == [(2, 0), (2, 1), (2, 2), (2, 3)]\nassert     get_row([[0], [1], [2], [3]], 4) == []\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_row(lst, x):\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([1,2,3,5,6,4]) == [1,4,2,5,3,6]\nassert     sort_array([1,2,3,5,6,7]) == [1,3,2,5,6,7]\nassert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([1,2,3,4,5]) ==    [1,2,3,4,5]\nassert     sort_array([0,1,0,0,0])    ==    [0,0,0,0,0]\nassert     sort_array([])        ==    []\nassert     sort_array([-1,-2])    ==    [-2, -1]\nassert     sort_array([1,0,2])    ==    [1,2,0]"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsort_array([3,2,1]) == [1,2,3]\nprint(\"Your sort_array function completed successfully!\")"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([-7, -2, -1, 2, 5, 4, 1, 8, 9, 10]) == [-1, -2, 1, 2, 4, 5, 8, 9, 10, 7]\nassert     sort_array([-7, -2, -1, 2, 5, 4, 1, 8, 9, 10]) == [-1, -2, 1, 2, 4, 5, 8, 9, 10, 7]\nassert     sort_array([-7, -2, -1, 2, 5, 4, 1, 8, 9, 10]) == [-1, -2, 1, 2, 4, 5, 8, 9, 10, 7]\nassert     sort_array([-7, -2, -1, 2, 5, 4, 1, 8, 9, 10]) == [-1, -2, 1, 2, 4, 5, 8, 9, 10, 7]\nassert     sort_array([-7, -2, -1, 2, 5, 4, 1, 8, 9, 10]) == [-1, -2, 1, 2, 4, 5, 8, 9, 10, 7]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([10,2,3,5,3,1]) == [1,2,3,3,5,10]\nassert     sort_array([10,2,3,5,3,1]) == [-10,-1,1,2,3,3]\nassert     sort_array([10,2,3,5,3,1]) == [-10,-1,1,2,3,3]\nassert     sort_array([10,2,3,5,3,1]) == [-10,-1,1,2,3,3]\nassert     sort_array([10,2,3,5,3,1]) == [1,2,3,3,5,10]"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([1,2,3,4,5,6]) == [[1,2,3,4,5,6],[6,5,4,3,2,1]]\nassert     sort_array([5,3,8,2,7,9]) == [[2,7,8,3,5,9],[9,7,5,8,3,2]]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(sort_array([5, 6, 7, 1, 2, 3]))\nprint(sort_array([2, 1, 3, 0, -1, -2, -3]))\nprint(sort_array([2, -1, 0, -3, 3, -2, 1]))\n\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([-2, -4, 1, 1, -5, 3, 5]) == [-2, -4, -5, 1, 1, 3, 5]\nassert     sort_array([1, 5, -2, -4, -5, 3]) == [-5, -4, -2, 1, 3, 5]\nassert     sort_array([1, 5, -2, -4, -5, 3, -6]) == [-6, -5, -4, -2, 1, 3, 5]\n\ndef twoSum(array, targetSum):\n    \"\"\"\n    Given an array of integers, return the indices of the two numbers such that they add up to a specific target.\n    You may assume that each input would have exactly one solution, and you may not use the same element twice.\n    You can return the answer in any order.\n\n    *note: *\n    *beyond the time limit, you can feel free to use another solution.\n    *you may assume that the array is strictly increasing.\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([0, -2, 4, 2, 1, -6, 5]) == [-2, 1, 4, 5, 2, 6, 0]\nassert     sort_array([7, -1, 1, -2, -2, -1, 0]) == [-1, 0, 1, -2, -2, -1, 7]\nassert     sort_array([1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert sort_array([2, -3, 5, 1, 0, 2, -2, -5, -2, -1]) == [-2, -3, 0, 1, 2, 2, 5, -2, -5, 2]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encrypt('password') == 'pworzzl'\nassert     encrypt('secret') == 'wrozyv'\n\nprint(encrypt('test'))\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (str(encrypt('hello')) == 'gekla')\nassert     (str(encrypt('a')) == 'e')\nassert     (str(encrypt(' ')) =='')\nassert     (str(encrypt('hello')) == 'gekla')\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encrypt(\"test\") == \"tset\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert encrypt(\"kites\") == \"vishnu\"\nassert encrypt(\"kite\") == \"yith\"\nassert encrypt(\"kits\") == \"tes\"\nassert encrypt(\"its\") == \"its\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert      encrypt( \"PYTHON\" ) == \"MONTY\", \"FAILED\"\nassert      encrypt( \"SATURN\" ) == \"NETTY\", \"FAILED\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nencrypt(\"This is a test\") == \"Ita sdr jst t st\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert next_smallest([0,1,2,3,4,5,6,7,8,9,10]) == None\nassert next_smallest([0,1,2,3,4,5,6,7,8,9,10]) == 5\nassert next_smallest([0,1,2,3,4,5,6,7,8,9,10]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef next_smallest_alt(lst):\n    \"\"\"\n    Given an unsorted list of integers, return the 2nd smallest element.\n    You can assume that the 2nd smallest element doesn't exist.\n    \"\"\"\n    nums = sorted(lst)\n    return None if nums[1] is None else nums[1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert next_smallest([1,2,3,4]) == 2\nassert next_smallest([1,3,2,4]) == 2\nassert next_smallest([1,2,3,5]) == 3\nassert next_smallest([1,2,3,4,5]) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest([1,2,3,4,5]) == 2\nassert     next_smallest([1,2,3,4,5]) == 3\nassert     next_smallest([1,2,3,4,5,7]) == 5\nassert     next_smallest([1,2,3,4,5,7,9]) == 7\nassert     next_smallest([1,2,3,4,5,7,9,11]) == 11\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_bored(\"I I I\") == 1\nassert     is_bored(\"I I I... I I I\") == 3\nassert     is_bored(\"I I I... I I I!\") == 1\nassert     is_bored(\"I I I..! I I I!\") == 3\nassert     is_bored(\"I I I..\") == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_bored('') == 0, 'Empty string should return 0'\nassert     is_bored('I') == 1, 'A sentence that starts with I should return 1'\nassert     is_bored('I.!') == 1, 'A sentence that starts with I and ends with! should return 1'\nassert     is_bored('I.!I') == 1, 'A sentence that starts with I and ends with! and another one with! should return 1'\nassert     is_bored('I!I.!') == 1, 'A sentence that starts with I, ends with!, and then another one with! should return 1'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('You have passed all the tests!'"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(is_bored(\"I am bored.\"))\n\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(is_bored(\"I am not bored.\"))\nprint(is_bored(\"I am not bored?\"))\nprint(is_bored(\"I am not bored!!\"))\nprint(is_bored(\"I am not bored.!\"))\nprint(is_bored(\"I am not bored.\"))"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     any_int(1, 1, 1) == True, \"First\"\nassert     any_int(1, 1, 2) == False, \"Second\"\nassert     any_int(2, 2, 2) == False, \"Third\"\nassert     any_int(0, 2, 4) == True, \"Fourth\"\nassert     any_int(5, -7, 0) == True, \"Fifth\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     any_int(1,2,3) == False, 'First'\nassert     any_int(2,3,4) == True, 'Second'\nassert     any_int(2,3,2) == False, 'Third'\nassert     any_int(4,3,4) == False, 'Fourth'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     any_int(5, 5, 5) == False, 'First'\nassert     any_int(5, 5, '5') == False, 'Second'\nassert     any_int('5', '5', '5') == True, 'Third'\n\n\ndef string_match(string, pattern):\n    '''\n    Create a function that takes a string and a pattern and\n    returns the an integer equal to the number of times the string\n    matches the pattern.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert any_int(2,3,4) == False, \"2+3=5, 4+4=9, but 4!=9\"\nassert any_int(3,3,3) == False, \"3+3=6, but 3!=6\"\nassert any_int(3,4,5) == False, \"3+4=7, but 4!=7\"\nassert any_int(9,2,2) == False, \"9+2=11, but 2!=11\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     any_int(1, 2, 3) == True\nassert any_int(1.1, 2.2, 3.3) == False\nassert any_int(2, 2, 2) == True\nassert any_int(1, 1.1, 1.1) == True\nassert any_int(1.1, 1.1, 1) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(any_int(3, 2, 5)) # True\nprint(any_int(1, 1, 5)) # False\nprint(any_int(3, 5, 1)) # False\nprint(any_int(3, 1, 3)) # False\nprint(any_int(3.1, 5.1, 2.5)) # False\nprint(any_int(4, 4, 4)) # True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert any_int(1, 2, 3) == True\nassert any_int(4, 1, 9) == True\nassert any_int(9, 4, 9) == True\nassert any_int(7, 1, 7) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    encode(\"\") == \"\"\n    encode(\"A\") == \"a\"\n    encode(\"wonderful\") == \"wonderful\"\n    encode(\"This is a test.\") == \"sTiTh Is a TEsT.\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef decode(encoded_message):\n    \"\"\"\n    Write a function that takes an encoded message and converts it \n    back into a message in the same format. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode(\"Bad English, I say!\") == \"bdirigq\"\nassert     encode(\"Bac in the wArld!\") == \"bac wld!\"\nassert     encode(\"\") == \"\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert encode(\"Encoding\") == \"Encuoding\"\nassert encode(\"Encoding\") == \"Encuoding\"\nassert encode(\"Encoding\") == \"Encuoding\"\n\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     encode(\"Hello World!\") == \"hElLo wORlD!\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes it in \n    such a way that it switches case of all letters, replaces \n    all vowels in the message with the letter that appears 2 \n    places ahead of that vowel in the english alphabet. \n    Assume only letters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nencode(\"ALL YOUR BASE ARE BELONG TO US\") == \"APOLLOHOSPITALSU\"\nencode(\"Cryptograms are very powerful\") == \"RrhpYRhcgrhszw\"\n\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     encode('A bird in the hand saw a dog in the door.') == 'DOG in the DOOG saw ABIR in the HAND saw.'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert encode('') == '', \"Test 1: empty string\"\nassert encode('abc') == 'bcd', \"Test 2: simple string\"\nassert encode('ABC') == 'cBA', \"Test 3: upper case\"\nassert encode('ABc') == 'cBa', \"Test 4: lower case\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     encode(\"hello\") == \"hOLLl\"\nassert     encode(\"DRJAWS\") == \"drowsy\"\nassert     encode(\"DRJAWS!\") == \"drowsy!\"\n\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(skjkasdkd([1,2,3]))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert skjkasdkd([1, 2, 3, 7, 11]) == 14\n    assert skjkasdkd([0, 0, 0]) == 0, \"don't forget about zeros!\"\n    assert skjkasdkd([]) == 0, \"Your function should return a value\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr_1 = [2, 4, 5, 4, 6, 8, 9]\n    arr_2 = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr_3 = []\n    arr_4 = [10]\n    arr_5 = [3, 4, 3, 6, 5]\n    \n    print(skjkasdkd(arr_1))\n    print(skjkasdkd(arr_2))\n    print(skjkasdkd(arr_3))\n    print(skjkasdkd(arr_4))\n    print(skjkasdkd(arr_5)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 19\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     skjkasdkd([2,4,5,6]) == 7\nassert     skjkasdkd([2,4,5,8]) == 9\nassert     skjkasdkd([2,4,5,9]) == 13\nassert     skjkasdkd([2,4,5,10]) == 14\nassert     skjkasdkd([2,4,5,11]) == 16\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     skjkasdkd([7, 7]) == 0\nassert     skjkasdkd([7, 5, 7]) == 2\nassert     skjkasdkd([23, 5, 8, 3]) == 9\nassert     skjkasdkd([9, 1, 9, 4]) == 0\nassert     skjkasdkd([7, 5, 5, 7]) == 0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_keys(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) == False, \"Empty dictionary\"\nassert     check_dict_case({'a':'b'}) == True, \"Not all keys are strings\"\nassert     check_dict_case({'a':'A'}) == True, \"Not all keys are strings\"\nassert     check_dict_case({'A':'b', 'B':'c'}) == False, \"Not all keys are strings\"\nassert     check_dict_case({'A':'B'}) == True, \"Not all keys are strings\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'a': 1}) == True\nassert     check_dict_case({'a': 1, 'A': 2}) == True\nassert     check_dict_case({'A': 2}) == True\nassert     check_dict_case({'A': 2, 'a': 1}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == False, \"Empty Dict case\"\nassert     check_dict_case({\"g\": 4}) == False, \"One key is not string\"\nassert     check_dict_case({\"g\": 4, \"h\": \"hi\"}) == True, \"Both keys are strings\"\nassert     check_dict_case({\"G\": 4, \"H\": \"hi\"}) == False, \"Both keys are not strings\"\nassert     check_dict_case({\"G\": 4, \"H\": \"HI\"}) == True, \"All keys are strings\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) is False, \"Empty dictionary\"\nassert check_dict_case({\"a\":1, \"b\":1}) is False, \"Duplicate keys\"\nassert check_dict_case({\"a\":1,\"b\":1,\"c\":1}) is True, \"All keys in upper case\"\nassert check_dict_case({\"a\":1,\"b\":1,\"c\":1,\"d\":1}) is True, \"All keys in upper case\"\nassert check_dict_case({\"A\":1,\"b\":1,\"c\":1,\"D\":1}) is True, \"All keys in upper case\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == True, \"Wrong!\"\nassert     check_dict_case({'a': 1, 'b': 2, 'C': 3}) == True, \"Wrong!\"\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == False, \"Wrong!\"\nassert     check_dict_case({'a': 1, 'b': 2, 'c': 3}) == False, \"Wrong!\"\n\n\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_dict_case({'hello': 'world'}) == True\nassert     check_dict_case({'hello': 'WORLD'}) == True\nassert     check_dict_case({'hello': True}) == False\nassert     check_dict_case({}) == False\nassert     check_dict_case(dict()) == Fals"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_dict_case({}) == False, \"Empty dictionary\"\nassert     check_dict_case({\"k1\":1}) == False, \"One key\"\nassert     check_dict_case({\"k1\":\"v1\", \"k2\":2}) == False, \"Two keys\"\nassert     check_dict_case({\"k1\":\"v1\", \"k2\":\"v2\", \"k3\":\"v3\"}) == True, \"All keys\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == True, \"Test Case 1: Correct\"\nassert     check_dict_case({'user':'user1'}) == False, \"Test Case 2: Correct\"\n\n\"\"\"\nTEST CASE 3: check_dict_case\nThe given dictionary is empty.\n\"\"\"\nassert     check_dict_case({}) == False, \"Test Case 3: Correct\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_dict_case({'1':'hello', '2':'world'})\nassert     check_dict_case({'1':'hello', '2':'world', '3':'BYE'})\nassert not check_dict_case({})\nassert not check_dict_case(None)\n\ndef check_dict_invert(dict):\n    \"\"\"\n    Given a dictionary, invert the keys and values of the dictionary.\n    Note that the dictionary is mutated.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n\n\"\"\"EXERCISE: Write a function sum_divisors(n) that returns the sum of all divisors of a positive integer n.\nFor example, the sum of all divisors of 6 is 1+2+3=6. \"\"\"\n\ndef sum_divisors(n):\n    \"\"\"\n    Returns the sum of all divisors of n. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_up_to(6) == [2,3,4,5]\nassert     count_up_to(8) == [2,3,5,7]\nassert     count_up_to(100) == [2,3,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,319,323,327,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,451,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\nassert     count_up_to(0) == []\nassert     count_up_to(1) == []\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply(33, 5) == 11\nassert     multiply(69, 8) == 14\nassert     multiply(99, 2) == 19\nassert     multiply(101, 3) == 14\nassert     multiply(27, 9) == 23\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply(12, 12) == 0\nassert     multiply(12, 12.0) == 0\nassert     multiply(12, 13.0) == 0\nassert     multiply(123, 456) == 0\nassert     multiply(123, 1000) == 0\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert multiply(56,89) == 2289\n\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply(1000, 1001) == 1000\nassert     multiply(1000, 10010) == 10010\nassert     multiply(1000, 100100) == 100100\nassert     multiply(1000, 1001000) == 1001000\nassert     multiply(1000, 1000000) == 1000000\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply(0, 0) == 0\nassert     multiply(0, 1) == 0\nassert     multiply(1, 1) == 1\nassert     multiply(1, 3) == 3\nassert     multiply(9, 9) == 81\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint multiply(3, 5) == 0\nprint multiply(123, 4567) == 0\nprint multiply(1, 1) == 1\nprint multiply(13, 13) == 1\nprint multiply(10, 10) == 100\n\n\n\ndef check_odd(num):\n    \"\"\"Complete the function that takes a number and returns whether the\n    odd digits in the number sum up to the number itself.\n    Assume the input is always valid.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert multiply(12, 16) == 48\nassert multiply(100, 200) == 2400\nassert multiply(67, 68) == 648\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_upper('ab') == 0\nassert     count_upper('q') == 0\nassert     count_upper('the') == 2\nassert     count_upper('THe') == 2\nassert     count_upper('TH') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_upper(\"AaAaA\") == 0\nassert     count_upper(\"AbAbb\") == 0\nassert     count_upper(\"AaABb\") == 1\nassert     count_upper(\"AbAAb\") == 2\nassert     count_upper(\"aaABb\") == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_upper(\"aAAbbb\") == 2\nassert     count_upper(\"ABCDEFGH\") == 0\nassert     count_upper(\"AaAaAa\") == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_upper(\"abc\") == 0\nassert     count_upper(\"Bb\") == 1\nassert     count_upper(\"Cc\") == 0\nassert     count_upper(\"Dd\") == 0\nassert     count_upper(\"Ee\") == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_upper(\"cab\") == 1\nassert     count_upper(\"y\") == 1\nassert     count_upper(\"ABCabc\") == 2\nassert     count_upper(\"ABCabcABC\") == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_upper_v2(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    The vowels are: 'A', 'E', 'I', 'O', 'U'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('Correct'"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\") == 15 \nassert     closest_integer(\"-14.5\") == -15 \nassert     closest_integer(\"14.0\") == 14 \nassert     closest_integer(\"-14.0\") == -14 \nassert     closest_integer(\"-14.3\") == -14 \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_integer(\"-14.5\")     == -15\nassert     closest_integer(\"15\")         == 15\nassert     closest_integer(\"15.5\")     == 15\nassert     closest_integer(\"15.6\")     == 16\nassert     closest_integer(\"-9.5\")     == -10\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 14\nassert     closest_integer(\"-14.5\") == -14\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_integer(11)     ==    10\nassert     closest_integer(-12)     ==    -13\nassert     closest_integer(0)     ==    0\nassert     closest_integer(1)     ==    1\nassert     closest_integer(3.5)     ==    3\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert make_a_pile(2) == [1, 1]\nassert make_a_pile(3) == [1, 1, 1]\nassert make_a_pile(4) == [1, 1, 1, 1]\nassert make_a_pile(10) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,1]\nassert     make_a_pile(3) == [1,1,1]\nassert     make_a_pile(4) == [1,1,1,1]\nassert     make_a_pile(5) == [1,1,1,1,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_a_pile(5) == [5, 1, 4, 1, 1]\nassert     make_a_pile(6) == [6, 2, 4, 1, 1, 1]\nassert     make_a_pile(7) == [7, 3, 6, 2, 1, 1]\nassert     make_a_pile(8) == [8, 4, 8, 4, 2, 2]\nassert     make_a_pile(9) == [9, 5, 9, 6, 3, 2]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_a_pile(3) == [3, 1]\nassert     make_a_pile(4) == [4, 2]\nassert     make_a_pile(5) == [5, 3]\nassert     make_a_pile(6) == [6, 5]\nassert     make_a_pile(7) == [7, 6]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,1]\nassert     make_a_pile(3) == [1,2,1]\nassert     make_a_pile(4) == [1,3,2,1]\nassert     make_a_pile(5) == [1,4,3,2,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_a_pile(0) == [1]\nassert     make_a_pile(2) == [1,1]\nassert     make_a_pile(6) == [1,2,2,2,2,2]\nassert     make_a_pile(7) == [1,2,2,3,3,3,3]\nassert     make_a_pile(8) == [1,2,2,3,3,3,3,3]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nmake_a_pile(3) == [3, 1, 1, 1]\nmake_a_pile(4) == [4, 2, 2, 2, 1]\nmake_a_pile(5) == [5, 3, 3, 3, 3, 1]\nmake_a_pile(6) == [6, 4, 4, 4, 4, 2, 1]\nmake_a_pile(7) == [7, 5, 5, 5, 5, 5, 2, 1]\nmake_a_pile(8) == [8, 6, 6, 6, 6, 6, 2, 1]\nmake_a_pile(9) == [9, 7, 7, 7, 7, 7, 3, 2, 1]\nmake_a_pile(10) == [10, 8, 8, 8, 8, 8, 2, 1, 1]\nmake_a_pile(11) == [11, 9, 9, 9, 9, 9, 3, 2, 1]\nmake_a_pile(12) == [12, 10, 10, 10, 10, 10, 2, 1, 1]\nmake_a_pile(13) == [13, 11, 11, 11, 11, 11, 3, 2, 1]\nmake_a_pile(14) == [14, 12, 12, 12, 12, 12, 2, 1, 1]\nmake_a_pile(15) == [15, 13, 13, 13, 13, 13, 3, 2, 1]\nmake_a_pile(16) == [16, 14, 14, 14, 14, 14, 2, 1, 1]\nmake_a_pile(17) == [17, 15, 15, 15, 15, 15, 3, 2, 1]\nmake_a_pile(18) == [18, 16, 16, 16, 16, 16, 2, 1, 1]\nmake_a_pile(19) == [19, 17, 17, 17, 17, 17, 3, 2, 1]\nmake_a_pile(20) == [20, 18, 18, 18, 18, 18, 2, 1, 1]\nmake_a_pile(21) == [21, 19, 19, 19, 19, 19, 3, 2, 1]\nmake_a_pile(22) == [22, 20, 20, 20, 20, 20, 2, 1, 1]\nmake_a_pile(23) == [23, 21, 21, 21, 21, 21, 3, 2, 1]\nmake_a_pile(24) == [24, 22, 22, 22, 22, 22, 2, 1, 1]\nmake_a_pile(25) == [25, 23, 23, 23, 23, 23, 3, 2, 1]\nmake_a_pile(26) == [26, 24, 24, 24, 24, 24, 2, 1, 1]\nmake_a_pile(27) == [27, 25, 25, 25, 25, 25, 3, 2, 1]\nmake_a_pile(28) == [28, 26, 26, 26, 26, 26, 2, 1, 1]\nmake_a_pile(29) == [29, 27, 27, 27, 27, 27, 3, 2, 1]\nmake_a_pile(30) == [30, 28, 28, 28, 28, 28, 2, 1, 1]\nmake_a_pile(31) == [31, 29, 29, 29, 29, 29, 3, 2, 1]\nmake_a_pile(32) == [32, 30, 30, 30, 30, 30, 2, 1, 1]\nmake_a_pile(33) == [33, 31, 31, 31, 31, 31, 3, 2, 1]\nmake_a_pile(34) == [34, 32, 32, 32, 32, 32, 2, 1, 1]\nmake_a_pile(35) == [35, 33, 33, 33, 33, 33, 3, 2, 1]\nmake_a_pile(36) == [36, 34, 34, 34, 34, 34, 2, 1, 1]\nmake_a_pile(37) == [37, 35, 35, 35, 35, 35, 3, 2, 1]\nmake_a"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     make_a_pile(5) == [5, 2, 1, 1, 2]\nassert     make_a_pile(9) == [9, 4, 2, 1, 1, 2, 1, 1, 1, 2]\nassert     make_a_pile(7) == [7, 4, 3, 2, 1, 1, 2, 1, 1, 2]\nassert     make_a_pile(3) == [3, 1, 1, 2]\nassert     make_a_pile(1) == [1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    make_a_pile(1) == []\n    make_a_pile(2) == [1]\n    make_a_pile(3) == [1, 1]\n    make_a_pile(4) == [1, 1, 1]\n    make_a_pile(6) == [1, 1, 1, 2]\n    make_a_pile(9) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2]\n    make_a_pile(10) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2]\n    make_a_pile(11) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3]\n    make_a_pile(12) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3]\n    make_a_pile(13) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]\n    make_a_pile(14) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4]\n    make_a_pile(15) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4]\n    make_a_pile(16) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5]\n    make_a_pile(17) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5]\n    make_a_pile(18) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6]\n    make_a_pile(19) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6]\n    make_a_pile(20) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7]\n    make_a_pile(21) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7]\n    make_a_pile(22) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8]\n    make_a_pile(23) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8]\n    make_a_pile(24) == [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9]\n    make_"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert words_string('a, b, c') == ['a', 'b', 'c']\nassert words_string('a,  b,   c') == ['a', 'b', 'c']\nassert words_string('a,  b  c') == ['a', 'b', 'c']\nassert words_string('a,,,c') == ['a', 'c']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_string(\"\") == [], \"Empty string\"\nassert     words_string(\"The\") == [\"The\"], \"Wrong words\"\nassert     words_string(\"Hello world, I'm a boy\") == [\"Hello\", \"world\", \"I\", \"am\", \"a\", \"boy\"], \"Wrong words\"\nassert words_string(\"Hello, world, I'm a boy\") == [\"Hello\", \"world\", \"I\", \"am\", \"a\", \"boy\"], \"Wrong words\"\nassert words_string(\"Hello, world, I'm a boy.\") == [\"Hello\", \"world\", \"I\", \"am\", \"a\", \"boy\"], \"Wrong words\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef split_and_join(*args):\n    \"\"\"\n    Given an array of strings, write a Python function to join the strings in the\n    array together.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_string('hi, hello, how, are, you, doing?') == ['hi', 'hello', 'how', 'are', 'you', 'doing']\nassert     words_string('  hello, world   ') == ['hello', 'world']\nassert     words_string('hello, world') == ['hello', 'world']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_string('this, is, a, string') == ['this', 'is', 'a','string']\nassert     words_string('this, is, another, string') == ['this', 'is', 'another','string']\nassert     words_string('this, is, another, string,') == ['this', 'is', 'another','string']\nassert     words_string('this, is, another,,, string') == ['this', 'is', 'another','string']\nassert     words_string('this,is,another,,,string') == ['this', 'is', 'another','string']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_string(\"hi, I'm a test string\") == ['hi', 'I','m', 'a', 'test','string'], \"Incorrect\"\nassert     words_string(\"hi, I'm a test string, it is cool\") == ['hi', 'I','m', 'a', 'test','string', 'it', 'is', 'cool'], \"Incorrect\"\nassert     words_string(\"hi, I'm a test string, it is cool\") == ['hi', 'I','m', 'a', 'test','string', 'it', 'is', 'cool'], \"Incorrect\"\nassert     words_string(\"\") == [], \"Incorrect\"\nassert     words_string(\"hi, I'm a test string, it is cool\") == ['hi', 'I','m', 'a', 'test','string', 'it', 'is', 'cool'], \"Incorrect\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\"\"\"\n0\n\"\"\""
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     words_string(    \"hello, world, world, hello\") ==     [\"hello\", \"world\", \"world\", \"hello\"]\nassert     words_string(    \"hello, world, world, hello, hello, hello, hello\") ==     [\"hello\", \"world\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\"]\nassert     words_string(    \"hello, world, world, hello\") ==     [\"hello\", \"world\", \"world\", \"hello\"]\nassert     words_string(    \"hello, world, world, hello, hello, hello, hello\") ==     [\"hello\", \"world\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\"]\nassert     words_string(    \"hello, world, world, hello\") ==     [\"hello\", \"world\", \"world\", \"hello\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_string(\"greetings, friends\") == [\"greetings\", \"friends\"]\nassert     words_string(\"hi, my name is bot\") == [\"hi\", \"my\", \"name\", \"is\", \"bot\"]\nassert     words_string(\"what is your name\") == [\"what\", \"is\", \"your\", \"name\"]\nassert     words_string(\"\") == [\"\"]\nassert     words_string(\"dog,cat,rat,mouse\") == [\"dog\", \"cat\", \"rat\", \"mouse\"]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     choose_num(1, 5) == 2\nassert     choose_num(2, 5) == -1\nassert     choose_num(2, 4) == 2\nassert     choose_num(3, 5) == -1\nassert     choose_num(2, 5) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     choose_num(2, 7) == 5\nassert     choose_num(2, 8) == -1\nassert     choose_num(1, 6) == 1\nassert     choose_num(1, 3) == 2\nassert     choose_num(1, 2) == 2\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     choose_num(10, 20) == 20\nassert     choose_num(1, 5) == 1\nassert     choose_num(10, 10) == -1\nassert     choose_num(1, 1) == 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(choose_num(2, 7))\nprint(choose_num(8, 15))\nprint(choose_num(9, 15))\nprint(choose_num(3, 5))\nprint(choose_num(3, 5))\nprint(choose_num(4, 9))\nprint(choose_num(0, 4))\nprint(choose_num(5, 10))\nprint(choose_num(1, 5))\nprint(choose_num(10, 17))"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     choose_num(1, 5) == -1\nassert     choose_num(1, 100) == -1\nassert     choose_num(10, 20) == 12\nassert     choose_num(2, 10) == -1\nassert     choose_num(5, 8) == 6\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('Testing choose_num:')\nprint(choose_num(10, 20))\nprint(choose_num(20, 10))\nprint(choose_num(10, 20))\nprint(choose_num(10, 20))\nprint(choose_num(20, 10))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     choose_num(3, 6) == 5\nassert     choose_num(3, 4) == -1\nassert     choose_num(3, 2) == 3\n\n\ndef find_smallest_odd(nums):\n    \"\"\"The function takes a list of numbers nums, and returns the\n    smallest odd number in the list. If there is no odd number in the\n    list, then the function should return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     choose_num(0, 5) == 1, \"Wrong result for (0, 5)\"\nassert     choose_num(5, 10) == 6, \"Wrong result for (5, 10)\"\nassert     choose_num(10, 20) == -1, \"Wrong result for (10, 20)\"\nassert     choose_num(20, 35) == 25, \"Wrong result for (20, 35)\"\nassert     choose_num(35, 40) == -1, \"Wrong result for (35, 40)\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_parity(x, y):\n    \"\"\"This function takes two nonnegative integers x and y and returns the\n    number of odd numbers between x and y inclusive.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rounded_avg(2, 3) == 2\nassert     rounded_avg(4, 5) == 3\nassert     rounded_avg(4, 6) == 3\nassert     rounded_avg(6, 8) == 4\nassert     rounded_avg(1, 2) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint rounded_avg(10, 20)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nrounded_avg(2,4) == 2\nassert rounded_avg(3,4) == 3\nassert rounded_avg(1,1) == 1\nassert rounded_avg(1,2) == -1\nassert rounded_avg(0,0) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nrounded_avg(1,5) == 2\nrounded_avg(1,4) == 1\nrounded_avg(1,3) == 1\nrounded_avg(0,0) == 0\nrounded_avg(1,2) == 0\n\n\ndef low_to_high(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the \n    lowest common multiple (LCM) of the integers from n to m (inclusive). \n    You should only use the modulo operator (%).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nrounded_avg(3, 5) == 4\nrounded_avg(5, 3) == 4\nrounded_avg(1, 1) == 1\nrounded_avg(1, 2) == 2\nrounded_avg(5, 5) == 2\n\ndef rounded_avg_recursive(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nrounded_avg(0, 10) == 5\nrounded_avg(1, 10) == 5\nrounded_avg(2, 10) == 5\nrounded_avg(3, 10) == 6\nrounded_avg(4, 10) == 6\nrounded_avg(5, 10) == 7\nrounded_avg(6, 10) == 7\nrounded_avg(7, 10) == 7\nrounded_avg(8, 10) == 7\nrounded_avg(9, 10) == 7\nrounded_avg(10, 10) == 8\nrounded_avg(-1, 10) == -1\nrounded_avg(-2, 10) == -1\nrounded_avg(-3, 10) == -1\nrounded_avg(-4, 10) == -1\nrounded_avg(-5, 10) == -1\nrounded_avg(-6, 10) == -1\nrounded_avg(-7, 10) == -1\nrounded_avg(-8, 10) == -1\nrounded_avg(-9, 10) == -1\nrounded_avg(-10, 10) == -1\nrounded_avg(-11, 10) == -1\nrounded_avg(-12, 10) == -1\nrounded_avg(-13, 10) == -1\nrounded_avg(-14, 10) == -1\nrounded_avg(-15, 10) == -1\nrounded_avg(-16, 10) == -1\nrounded_avg(-17, 10) == -1\nrounded_avg(-18, 10) == -1\nrounded_avg(-19, 10) == -1\nrounded_avg(-20, 10) == -1\nrounded_avg(-21, 10) == -1\nrounded_avg(-22, 10) == -1\nrounded_avg(-23, 10) == -1\nrounded_avg(-24, 10) == -1\nrounded_avg(-25, 10) == -1\nrounded_avg(-26, 10) == -1\nrounded_avg(-27, 10) == -1\nrounded_avg(-28, 10) == -1\nrounded_avg(-29, 10) == -1\nrounded_avg(-30, 10) == -1\nrounded_avg(-31, 10) == -1\nrounded_avg(-32, 10) == -1\nrounded_avg(-33, 10) == -1\nrounded_avg(-34, 10) == -1\nrounded_avg(-35, 10) == -1\nrounded_avg(-36, 10) == -1\nrounded_avg(-37, 10) == -1\nrounded_avg(-38, 10) == -1\nrounded_avg(-39, 10) == -1\nrounded_avg(-40, 10) == -1\nrounded_avg(-41, 10) == -1\nrounded_avg(-42, 10) == -1\nrounded_avg(-43, 10) == -1\nrounded_avg(-44, 10) == -1\nrounded_avg(-45, 10) == -1\nrounded_avg(-46, 10) == -1\nrounded_avg(-47, 10) == -1\nrounded_avg(-48, 10) == -1\nrounded_avg(-49, 10) == -1\nrounded_avg(-50, 10) == -1\nrounded_avg(-51, 10) == -1\nrounded_avg(-52, 10) == -1\nrounded_avg(-53, 10) == -1\nrounded_avg(-54, 10) == -1\nrounded_avg(-55, 10) == -1\nrounded_avg(-56, 10) == -1\nrounded_avg(-57, 10) == -1\nrounded_avg(-58, 10) == -1\nrounded_avg(-59, 10) == -1\nrounded_avg(-60, 10) == -1\nrounded_avg(-61, 10) == -1\nrounded_avg(-62, 10) == -1\nrounded_avg(-63, 10) == -1\nrounded_avg(-64, 10) == -1\nrounded_avg(-65, 10) == -1\nrounded_avg(-66, 10) == -1\nrounded_avg(-67, 10) == -1\nrounded_avg(-68, 10) == -1\nrounded_avg(-69"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \\\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert unique_digits([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == \\\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert unique_digits([10, 10, 10, 10, 10]) == [10]\nassert unique_digits([]) == []\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef has_even_digits(x):\n    \"\"\"Given a list of positive integers x. return True if x has any even\n    digit, otherwise return False.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_digits([1, 3, 4, 2, 6, 9, 2, 3, 1, 9]) == [1, 3, 2, 4, 6, 9]\nassert     unique_digits([1, 1, 2, 3, 4, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique_digits([1, 1, 3, 3, 4, 4, 5, 6, 7, 8]) == [1, 3, 4, 5, 6, 7, 8]\nassert     unique_digits([10, 11, 12, 1, 2, 1, 3, 4, 5, 6, 7, 8]) == [10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8]\nassert     unique_digits([1, 1, 2, 3, 4, 4, 5, 6, 7, 8, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 10]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_digits([1, 2, 4, 4]) == [2, 4], \"Wrong\"\nassert     unique_digits([1, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4], \"Wrong\"\nassert     unique_digits([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == [1, 2, 2], \"Wrong\"\nassert     unique_digits([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6]) == \n            [1, 3, 5, 6], 'test failed'\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7]) == \n            [1, 3, 5, 6, 7], 'test failed'\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == \n            [1, 3, 5, 6, 7, 8], 'test failed'\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == \n            [1, 3, 5, 6, 7, 8, 9], 'test failed'\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_digits([17,42,56,98,12,58,31,71,1,62,28,11,42,4,44,79,59]) == sorted(\n    [1,42,12,31,42,44,79,58,71,71,28,58,59,62])\nassert unique_digits([1,2,3,4,5]) == []\nprint('Correct')\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    unique_digits([20, 5, 9, 7]) == [20, 9], 'Should be 20,9'\n    unique_digits([20, 9, 30, 60]) == [20, 9, 30, 60], 'Should be 20,9,30,60'\n    unique_digits([20, 9, 30, 60, 6]) == [20, 9, 30, 60], 'Should be 20,9,30,60'\n    unique_digits([1]) == [1], 'Should be 1'\n    unique_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'Should be 1,2,3,4,5'\n    unique_digits([0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0], 'Should be 0,0,0,0,0,0"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert unique_digits([1,2,3,4]) == [1,2]\nassert unique_digits([1,1,2,2]) == [1,2]\nassert unique_digits([10,10,2,2]) == [10]\nassert unique_digits([1,10,2,20]) == [1,2,20]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert unique_digits([11, 1, 1, 2, 3, 3, 3]) == [1, 2, 3]\nassert unique_digits([1, 11, 1, 2, 3, 3, 3]) == [11, 2, 3]\nassert unique_digits([1, 1, 1, 2, 3, 3, 3]) == [1, 2, 3]\nassert unique_digits([1, 1, 1, 11, 1, 1, 1]) == [1, 2, 3, 11]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"pass\") if by_length([2, 7, 9, 3]) == ['One', 'Seven', 'Nine', 'Two'] else print(\"fail\")\nprint(\"pass\") if by_length([4, 9, 6, 8]) == ['Six', 'Nine', 'Four', 'Eight'] else print(\"fail\")\nprint(\"pass\") if by_length([1, 2, 3, 4]) == ['One', 'Three', 'Four', 'Two'] else print(\"fail\")\n\nprint(\"\\n---\\n\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     by_length([5, 8, 2, 9, 0, 1, 4, 7, 3])    ==     [\"One\", \"Four\", \"Seven\", \"Two\", \"Five\", \"Three\", \"Six\", \"Eight\", \"Nine\"]\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1])    ==     [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\nassert     by_length([0, 9, 8, 7, 6, 5, 4, 3, 2])    ==     [\"Zero\", \"One\", \"Three\", \"Five\", \"Seven\", \"Eight\", \"Four\", \"Six\", \"Two\"]\n\n\ndef largest_subset(arr):\n    \"\"\"\n    Given an array of integers, find the largest subset that contains at least one element,\n    but not all of the elements.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == [\n    [\"One\", 1],\n    [\"Two\", 2],\n    [\"Three\", 3],\n    [\"Four\", 4],\n    [\"Five\", 5],\n    [\"Six\", 6],\n    [\"Seven\", 7],\n    [\"Eight\", 8],\n    [\"Nine\", 9]\n]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef by_length_2(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # return arr.sort(key=lambda x: (x >= 1 and x <= 9), reverse=True)\n    return sorted(arr, key=lambda x: (x >= 1 and x <= 9), reverse=True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     by_length([3, 5, 9]) == [\"One\", \"Three\", \"Five\"]\nassert     by_length([1, 2, 4, 6, 9]) == [\"One\", \"Two\", \"Four\", \"Six\", \"Nine\"]\nassert     by_length([1, 8, 9, 3, 6, 2, 5]) == [\"One\", \"Five\", \"Eight\", \"Two\", \"Three\", \"Six\", \"Four\"]\nassert     by_length([9, 1, 8, 9, 3, 6, 2, 5]) == [\"Nine\", \"One\", \"Five\", \"Eight\", \"Two\", \"Three\", \"Six\", \"Four\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_by_length():\n    \"\"\"\n    Test by_length by calling each function from by_length.\n    \"\"\"\n    assert by_length([2, 5, 1, 8, 3, 6, 9]) == 'Three Six Seven Eight Nine Two Five One'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     f(4) == [1,2,6,24]\nassert     f(5) == [1,2,3,4,5,6,10]\nassert     f(10) == [1,2,3,4,5,6,7,8,9,10]\nassert     f(100) == [1,2,3,4,5,6,7,8,9,10,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     f(4) == [2, 2, 2, 2], \"Wrong answer\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(f(5)) # output should be [2,4,6,8,10]\nprint(f(4)) # output should be [2,4,6,8]\nprint(f(3)) # output should be [1,3,5]\nprint(f(2)) # output should be [1,2]\nprint(f(1)) # output should be [1]\nprint(f(10)) # output should be [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     f(2) == [1,2]\nassert     f(3) == [1,2,3]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     f(1) == [1]\nassert     f(3) == [1, 2, 3]\nassert     f(5) == [1, 2, 3, 4, 5]\nassert     f(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     f(20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(6) == (1, 3)\nassert     even_odd_palindrome(10) == (1, 5)\nassert     even_odd_palindrome(15) == (1, 10)\nassert     even_odd_palindrome(100) == (1, 50)\nassert     even_odd_palindrome(1000) == (1, 500)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(2) == (1, 1)\nassert even_odd_palindrome(4) == (1, 2)\nassert even_odd_palindrome(5) == (1, 2)\nassert even_odd_palindrome(6) == (1, 2)\nassert even_odd_palindrome(10) == (1, 8)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(1) == (0,0)\nassert     even_odd_palindrome(2) == (0,1)\nassert     even_odd_palindrome(3) == (1,1)\nassert     even_odd_palindrome(4) == (1,2)\nassert     even_odd_palindrome(5) == (1,4)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(3) == (1, 2), \"3 is a valid palindrome\"\nassert     even_odd_palindrome(4) == (2, 2), \"4 is a valid palindrome\"\nassert     even_odd_palindrome(7) == (3, 1), \"7 is a valid palindrome\"\nassert     even_odd_palindrome(10) == (4, 4), \"10 is a valid palindrome\"\nassert     even_odd_palindrome(20) == (5, 5), \"20 is a valid palindrome\"\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(3) == (2, 1)\nassert     even_odd_palindrome(4) == (2, 2)\nassert     even_odd_palindrome(5) == (1, 2)\nassert     even_odd_palindrome(6) == (0, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(3) == (1, 2)\nassert     even_odd_palindrome(10) == (4, 2)\nassert     even_odd_palindrome(16) == (5, 9)\nassert     even_odd_palindrome(29) == (2, 17)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(3) == (0, 1)\nassert     even_odd_palindrome(4) == (1, 0)\nassert     even_odd_palindrome(5) == (0, 1)\nassert     even_odd_palindrome(6) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(1)    == (0, 1)\nassert     even_odd_palindrome(2)    == (1, 1)\nassert     even_odd_palindrome(3)    == (0, 2)\nassert     even_odd_palindrome(4)    == (1, 2)\nassert     even_odd_palindrome(5)    == (1, 4)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint count_nums(arr) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums2 which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([123, 456, -123, 123, -456, -123, 123]) == 2\n\nprint('Success: count_nums')\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([0, 0, 0]) == 1\nassert     count_nums([-1, 2, -3]) == 1\nassert     count_nums([-1, -2, -3]) == 0\nassert     count_nums([-1, -2, 3]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_nums([\n    (-1, 2, 3),\n    (8, -2, -7),\n    (-1, -2, -3),\n    (-1, -2, -3, -4)\n    ]) == 3\nassert count_nums([\n    (-1, -2, -3, -4),\n    (-1, -2, -3, -4, -5),\n    (-1, -2, -3, -4, -5, -6)\n    ]) == 0"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_nums([]) == 0, \"Empty array\"\nassert     count_nums([-1, -1, 1, 1]) == 4, \"negative\"\nassert     count_nums([-1, -1, 1]) == 3, \"positive\"\nassert     count_nums([1, 1, 1, 1]) == 2, \"same\"\nassert     count_nums([-1, -1, 1, 1, 2]) == 5, \"overflow\"\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\narr = [-123, -50, 100, -43, 0, 1, -100, -12, 10, -90, -3, -50, -5]\nassert len(count_nums(arr)) == 3\nassert len(count_nums([100, -43, -50, -50, -50, -50, 100])) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([-123]) == 0\nassert     count_nums([-123, 123]) == 1\nassert     count_nums([123, 123, 123]) == 3\nassert     count_nums([-123, -123, -123]) == 1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_nums(\n    [3,12,5,-6,7,3,1,0,-100,0,0]\n    ) == 1\n\nassert count_nums(\n    [123,12,5,-6,7,3,1,-100,0,0]\n    ) == 2\n\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_one_ball([1,2,3]) == True\nassert     move_one_ball([2,2,2]) == False\nassert     move_one_ball([2,2,2,2,2]) == True\nassert     move_one_ball([2,2,2,2,2,2,2,2,2,2,2,2,2]) == True\nassert     move_one_ball([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_one_ball([4,5,2,4])\nassert     move_one_ball([4,5,2,3,4]) == False\n\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    # import cProfile\n    # cProfile.run('move_one_ball([1, 2, 3, 4, 5])')\n    move_one_ball([1, 2, 3, 4, 5])\n\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef move_one_ball_recursive(arr,start,end):\n    \"\"\"\n    You are given an array of N integers and also a range. In the range, the first\n    and last integers are given. You need to move all the elements from the first\n    index to the last index. You need to move exactly one element from the first\n    index to the last index. You need to move exactly one element from the last index\n    to the first index.\n    \n    You are given an array 'arr' and two integers'start' and 'end'. The\n    range is given by'start' and 'end'. You need to move all the elements from \n    the range'start' to 'end' to the given array 'arr'. You need to move exactly one \n    element from the range'start' to the last index in the given array 'arr'. \n    You need to move exactly one element from the last index to the range'start' in the\n    given array 'arr'.\n    \n    The first element of the given array 'arr' is '0'.\n    Input:\n    Input contains a pair of integers'start' and 'end'.\n    Output:\n    You need to print the modified array containing all the elements from the range\n    'start' to 'end' as well as exactly one element from the range'start' to\n    the last index in the given array 'arr'.\n    Expected Time Complexity: O(N)\n    Expected Auxiliary Space: O(1)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_one_ball([3,2,5,4])\nassert     move_one_ball([3,4,2,1]) == True\nassert     move_one_ball([3,4,2,1]) == False\nassert     move_one_ball([3,2,1,3])\nassert     move_one_ball([3,2,1,3]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"move_one_ball: {}\".format(move_one_ball([1,2,3,4])))\nassert move_one_ball([1,2,3,4]) == False\nassert move_one_ball([1,2,3,4,5]) == True\nassert move_one_ball([1,2,3,4,5,6]) == False\n\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_one_ball([1, 2, 4, 5]) == True, \"Wrong answer\"\nassert     move_one_ball([1, 2, 3]) == True, \"Wrong answer\"\nassert     move_one_ball([1, 2, 3, 4, 5]) == False, \"Wrong answer\"\nassert     move_one_ball([]) == True, \"Wrong answer\"\nassert     move_one_ball(None) == False, \"Wrong answer\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange(    [1,2,3,4,5,6],\n                    [1,2,3,4,6,5] ) == 'YES'\n\nassert     exchange(    [1,2,3,4,5,6],\n                    [1,2,4,5,6,3] ) == 'YES'\n\nassert     exchange(    [1,2,3,4,5,6],\n                    [1,2,4,5,6,3] ) == 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     exchange([1,2,3,4], [4,3,2,1]) == \"YES\"\nassert     exchange([5,6,7,8], [5,6,7,8]) == \"NO\"\nassert     exchange([2,4,6,8], [3,4,5,6]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == \"__main__\":\n    lst1 = [1,2,3,4,5,6]\n    lst2 = [4,5,6]\n    exchange(lst1, lst2)\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     exchange([0,1,2,3], [2,3,4,5]) == \"YES\"\nassert     exchange([1,2,3,4], [0,2,3,4]) == \"YES\"\nassert     exchange([1,2,3,4], [0,3,4,5]) == \"YES\"\nassert     exchange([1,2,3,4], [0,1,4,5]) == \"YES\"\nassert     exchange([1,2,3,4], [0,2,3,5]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     exchange([3, 4, 5], [1, 2, 3, 4, 5]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [3, 4, 5]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [3, 4, 5]) == \"NO\"\nassert     exchange([1], [2, 3, 4, 5]) == \"NO\""
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     exchange([1, 2, 3], [0, 3, 1]) == \"YES\"\nassert     exchange([1, 2, 3], [3, 1, 0]) == \"YES\"\nassert     exchange([1, 2, 3], [1, 3, 2]) == \"NO\"\nassert     exchange([1, 2, 3], [2, 3, 1]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [4, 3, 2, 1]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"YES\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [9,8,7,6,5,4,3,2,1]) == \"NO\"\nassert     exchange([5,6,7,8], [9,8,7,6,5,4,3,2,1]) == \"YES\"\nassert     exchange([9,8,7,6,5,4,3,2,1], [5,6,7,8]) == \"YES\"\nassert     exchange([3,5], [1,2,3,4,5]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     exchange([3, 4, 6, 8], [10, 2, 9, 1]) == \"YES\", \"Wrong\"\nassert     exchange([1, 1, 1], [1, 1, 1]) == \"NO\", \"Wrong\"\nassert     exchange([1, 1, 1], [1, 2, 1]) == \"NO\", \"Wrong\"\nassert     exchange([3, 4, 6, 8], [10, 2, 9, 1]) == \"YES\", \"Wrong\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     \"an\" == histogram(\"an\")\nassert     \"t\" == histogram(\"ant\")\nassert     \"ab\" == histogram(\"ant\")\nassert     \"an\" == histogram(\"ant\")\nassert     \"ab\" == histogram(\"ant\")\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     histogram(\"Hello World!\") == {'h': 1, 'e': 1, 'l': 1, 'o': 1,'': 1}\nassert     histogram(\"Hello World! Hello World! Hello World!\") == {'h': 2, 'e': 2, 'l': 2, 'o': 2,'': 2}\nassert     histogram(\"Hello World! Hello World! Hello World!\") == {'h': 3, 'e': 3, 'l': 3, 'o': 3,'': 3}\nassert     histogram(\"Hello World! Hello World! Hello World!\") == {'h': 4, 'e': 4, 'l': 4, 'o': 4,'': 4}"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef histogram_test():\n    \"\"\"Tests for histogram\"\"\"\n    assert (sorted(histogram('aaa')) == ['a', 'a', 'a'])\n    assert (sorted(histogram('aaaaaa')) == ['a', 'a', 'a', 'a'])\n    assert (sorted(histogram('aaaaa')) == ['a', 'a', 'a'])\n    "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     histogram(\"tetra\") == {\"t\": 4}\nassert     histogram(\"baccc\") == {\"a\": 3, \"c\": 3, \"b\": 2, \"c\": 1}\nassert     histogram(\"\") == {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"f\": 0, \"g\": 0, \"h\": 0, \"i\": 0, \"j\": 0, \"k\": 0, \"l\": 0, \"m\": 0, \"n\": 0, \"o\": 0, \"p\": 0, \"q\": 0, \"r\": 0, \"s\": 0, \"t\": 0, \"u\": 0, \"v\": 0, \"w\": 0, \"x\": 0, \"y\": 0, \"z\": 0}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     histogram('a') == {'a': 1}\nassert     histogram('ab') == {'a': 2, 'b': 1}\nassert     histogram('aba') == {'a': 3, 'b': 2}\nassert     histogram('aaaabbbbbccccc') == {'a': 4, 'b': 3, 'c': 2}\nassert     histogram('aaaaaaaaaaaa') == {'a': 5}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntest = \"aaaabbcbb\"\nprint(histogram(test))\n\n\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     histogram(\"aabbbcccdddd\") == {\n    \"a\" : 4,\n    \"b\" : 3,\n    \"c\" : 3,\n    \"d\" : 3\n}\n\nassert histogram(\"aabbbccccdddd\") == {\n    \"a\" : 4,\n    \"b\" : 3,\n    \"c\" : 4,\n    \"d\" : 3\n}\n\nassert histogram(\"ab\") == {\n    \"a\" : 1,\n    \"b\" : 1\n}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     \"t\" == histogram(\"the\")\nassert     {\"a\": 1, \"b\": 1} == histogram(\"a a b\")\nassert     {\"a\": 2, \"b\": 1} == histogram(\"a a b a\")\nassert     {\"a\": 2, \"b\": 2} == histogram(\"a a a b b\")\nassert     {\"a\": 3, \"b\": 2} == histogram(\"a a a a a a\")\nprint \"You passed the histogram test!\"\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_delete('madam','madam')==('madam',True)\nassert reverse_delete('coc','ac')==('ac',True)\nassert reverse_delete('coc','bad')==('bad',False)\n\nif __name__ == '__main__':\n    print('Test Cases')\n    print('------------')\n    print(reverse_delete('madam','madam'))\n    print(reverse_delete('coc','ac'))\n    print(reverse_delete('coc','bad'))"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    s = 'badc'\n    c = 'b'\n    r = reverse_delete(s,c)\n    print('Original string:',s)\n    print('Deleted string:',r[0])\n    print('Result:',r[1])\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nreverse_delete('a','') == ('', False)\nreverse_delete('','') == ('', False)\nreverse_delete('a','b') == ('a', False)\nreverse_delete('ab','b') == ('ab', True)\nreverse_delete('ab','') == ('ab', True)\nreverse_delete('ab','a') == ('b', True)\nreverse_delete('ab','b') == ('a', True)\nreverse_delete('b','b') == ('b', True)\nreverse_delete('bb','a') == ('bb', True)\nreverse_delete('b','a') == ('a', True)\nreverse_delete('a','') == ('', True)\nreverse_delete('ab','b') == ('ab', False)\nreverse_delete('ab','') == ('', False)"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"word\",\"r\") == (\"word\", True)\nassert     reverse_delete(\"word\",\"o\") == (\"word\", True)\nassert     reverse_delete(\"word\",\"w\") == (\"word\", True)\nassert     reverse_delete(\"word\",\"wrd\") == (\"word\", True)\nassert     reverse_delete(\"word\",\"rwr\") == (\"word\", False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_delete(\"hello\",\"llo\") == (\"hello\",True)\nassert     reverse_delete(\"hello\",\"ee\") == (\"hllo\",False)\nassert     reverse_delete(\"aaaa\",\"ab\") == (\"baab\",True)\nassert     reverse_delete(\"aaaa\",\"abc\") == (\"aabaa\",False)\nassert     reverse_delete(\"aaaa\",\"a\") == (\"aabaab\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(reverse_delete(\"abcd\",\"cda\"))\n\nprint(reverse_delete(\"abcde\",\"cde\"))\n\nprint(reverse_delete(\"abcde\",\"be\"))\n\nprint(reverse_delete(\"abcde\",\"be\")"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_delete(\"abc\", \"bc\") == (\"acb\", True), \"Should return True\"\nassert     reverse_delete(\"abc\", \"c\") == (\"abc\", True), \"Should return True\"\nassert     reverse_delete(\"xyz\", \"xy\") == (\"yxz\", True), \"Should return True\"\nassert     reverse_delete(\"xyz\", \"x\") == (\"xyz\", True), \"Should return True\"\nassert     reverse_delete(\"xyz\", \"z\") == (\"xyz\", True), \"Should return True\"\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    (reverse_delete(\"giraffe\",\"ri\"),\n    ('''\"giraffe\"''', True)) == ('''\"giraffe\"''', True), \"Failed\"\n    assert \n    (reverse_delete(\"giraffe\",\"ge\"),\n    ('''\"giraffe\"''', False)) == ('''\"giraffe\"''', False), \"Failed\"\n    assert \n    (reverse_delete(\"giraffe\",\"r\"),\n    ('''\"giraffe\"''', True)) == ('''\"giraffe\"''', True), \"Failed\"\n    assert \n    (reverse_delete(\"giraffe\",\"\"),\n    ('''\"giraffe\"''', True)) == ('''\"giraffe\"''', True), \"Failed\"\n    assert \n    (reverse_delete(\"\",\"giraffe\"),\n    ('''\"\"''', True)) == ('''\"\"''', True), \"Failed\"\n    "
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == [6, 4, 2, 0, 1, 2]\nassert     odd_count([\"1\",\"2\",\"3\",\"4\"]) == [2, 2, 0, 0]\nassert     odd_count([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]) == [0, 8, 8, 0, 0, 0, 8, 8, 0]\nassert     odd_count([\"5\",\"4\",\"3\",\"2\",\"1\"]) == [2, 0, 1, 0, 1]\nassert     odd_count([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == [6, 4, 2, 1, 2, 1, 2, 1, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert odd_count([]) == [], \"test failed\"\nassert odd_count([]) == [], \"test failed\"\nassert odd_count([\"1\"]) == [\"1\"], \"test failed\"\nassert odd_count([\"2\", \"3\"]) == [\"2\"], \"test failed\"\nassert odd_count([\"1\", \"2\", \"3\"]) == [\"1\", \"3\"], \"test failed\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_count([\"1\",\"2\",\"3\",\"4\"]) == [1,2,1,1]\nassert \nodd_count([\"a\",\"b\",\"c\",\"d\"]) == [0,1,0,0]\nassert \nodd_count([\"1\",\"21\",\"12\",\"13\",\"14\"]) == [1,1,1,2,1]\nassert \nodd_count([\"11\",\"22\",\"33\",\"44\",\"55\",\"66\",\"77\"]) == [2,4,2,3,3,1,1]\n\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef odd_count2(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"\\nOutput from odd_count function:\")\nprint(odd_count([\"3\",\"4\",\"5\",\"2\",\"7\"])) # => [\"2\",\"2\",\"2\",\"1\",\"0\"]\nprint(odd_count([\"5\",\"4\",\"3\",\"2\",\"6\",\"8\"])) # => [\"5\",\"4\",\"3\",\"2\",\"1\",\"0\"]\nprint(odd_count([\"4\",\"1\",\"3\",\"2\",\"5\",\"7\"])) # => [\"4\",\"2\",\"1\",\"0\",\"2\",\"0\"]\nprint(odd_count([\"4\",\"4\",\"4\",\"1\",\"1\",\"2\"])) # => [\"4\",\"0\",\"0\",\"1\",\"2\",\"0\"]\nprint(odd_count([\"9\",\"2\",\"3\",\"4\",\"8\",\"0\",\"1\"])) # => [\"9\",\"2\",\"2\",\"1\",\"0\",\"0\",\"0\"]\nprint(odd_count([\"3\",\"1\",\"5\",\"7\"])) # => [\"0\",\"0\",\"1\",\"0\"]\nprint(\"\\n\")\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_count([1, 2, 3, 4, 5, 6]) == [1, 1, 3, 1, 1, 1]\nassert \nodd_count([1, 2, 3, 4, 5, 6, 7]) == [1, 1, 3, 1, 1, 1, 2]\nassert \nodd_count([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 1, 3, 1, 1, 1, 2, 2]\nassert \nodd_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 1, 3, 1, 1, 1, 2, 2, 2]\nassert \nodd_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 1, 3, 1, 1, 1, 2, 2, 2, 2]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert _____ == _____, 'Wrong result of function odd_count'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef even_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of even elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of even digits in the i'th string of the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert _______ == _______, \"Errors found\""
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # find the minimum sum of any non-empty sub-array of nums\n    nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    minSubArraySum(nums)"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nclass Solution(object):\n    \"\"\"\n    The time complexity is O(n) and the space complexity is O(n).\n    \"\"\"\n    def minSubArrayLen(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        \"\"\"\n        The idea is to find the smallest sub-array of length k that sums up to a target value.\n        \"\"\"\n        \n        min_len = len(nums) + 1\n        curr = 0\n        s = 0\n        for i, x in enumerate(nums):\n            s += x\n            if s >= target:\n                while s - nums[curr] >= target:\n                    s -= nums[curr]\n                    curr += 1\n                if min_len > i - curr + 1:\n                    min_len = i - curr + 1\n        if min_len == len(nums) + 1:\n            return 0\n        return min_len\n\n\nclass Solution(object):\n    \"\"\"\n    The time complexity is O(n) and the space complexity is O(1).\n    \"\"\"\n    def minSubArrayLen(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        min_len = len(nums) + 1\n        curr = 0\n        s = 0\n        for i, x in enumerate(nums):\n            s += x\n            if s >= target:\n                while s - nums[curr] >= target:\n                    s -= nums[curr]\n                    curr += 1\n                if min_len > i - curr + 1:\n                    min_len = i - curr + 1\n        if min_len == len(nums) + 1:\n            return 0\n        return min_len\n\n\nclass Solution(object):\n    \"\"\"\n    The time complexity is O(n) and the space complexity is O(1).\n    \"\"\"\n    def minSubArrayLen(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        min_len = len(nums) + 1\n        curr = 0\n        s = 0\n        for i, x in enumerate(nums):\n            s += x\n            if s >= target:\n                while s - nums[curr] >= target:\n                    s -= nums[curr]\n                    curr += 1\n                if min_len > i - curr + 1:\n                    min_len = i - curr + 1\n        if min_len == len(nums) + 1:\n            return 0\n        return min_len\n\n\nclass Solution(object):\n    \"\"\"\n    The time complexity is O(n) and the space complexity is O(1).\n    \"\"\"\n    def minSubArrayLen(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        min_len = len(nums) + 1\n        curr = 0\n        s = 0\n        for i, x in enumerate(nums):\n            s += x\n            if s >= target:\n                while s - nums[curr] >= target:\n                    s -= nums[curr]\n                    curr += 1\n                if min_len > i - curr + 1:\n                    min_len = i - curr + 1\n        if min_len == len(nums) + 1:\n            return 0\n        return min_len\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minSubArraySum([2,1,-1,5,4,3]) == -1\nassert     minSubArraySum([2,3,1,-1]) == 1\nassert     minSubArraySum([3,-1,2,-3,1]) == 1\nassert     minSubArraySum([3,-1,2,-3,1,-4]) == 2\nassert     minSubArraySum([3,-1,2,-3,1,-4,1,2]) == 4\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert minSubArraySum([1,1,1]) == 1\nassert minSubArraySum([1,2,3,4]) == 2\nassert minSubArraySum([1,2,3,7]) == 3\nassert minSubArraySum([2,3,4,5]) == 2\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef minSubArraySum(nums):\n    left = 0\n    minSum = nums[0]\n    total = 0\n    for right in range(0, len(nums)):\n        total += nums[right]\n        while total >= minSum:\n            minSum = min(minSum, total - nums[left])\n            left += 1\n    return minSum\n\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minSubArraySum([1, 1, 1])     == 1\nassert     minSubArraySum([1,2,3,4,5])     == 9\nassert     minSubArraySum([2,3,4,5,6])     == 0\nassert     minSubArraySum([1,2])     == 1\nassert     minSubArraySum([1])     == 1\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"Pass\" if minSubArraySum([]) == 0 else \"Fail\")\nassert \nprint(\"Pass\" if minSubArraySum([1]) == 1 else \"Fail\")\nassert \nprint(\"Pass\" if minSubArraySum([1, 2]) == 1 else \"Fail\")\nassert \nprint(\"Pass\" if minSubArraySum([1, 1]) == 2 else \"Fail\")\nassert \nprint(\"Pass\" if minSubArraySum([1, 2, 3, 4, 5]) == 3 else \"Fail\")\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_fill_dp(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmax_fill([\n    [1, 1, 1, 1],\n    [0, 0, 1, 1],\n    [0, 1, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 1]\n    ], 1) == 5\nassert \nmax_fill([\n    [1, 1, 1, 1],\n    [0, 0, 1, 1],\n    [0, 1, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 1]\n    ], 0) == 0\nassert \nmax_fill([\n    [1, 1, 1, 1],\n    [0, 0, 1, 1],\n    [0, 1, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 1]\n    ], 2) == 4\nassert \nmax_fill([\n    [1, 1, 1, 1],\n    [0, 0, 1, 1],\n    [0, 1, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 1]\n    ], 3) == 2"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_fill([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], 0) == 0\nassert     max_fill([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], 1) == 3\nassert     max_fill([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], 2) == 4\nassert     max_fill([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], 3) == 5\nassert     max_fill([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]], 4) == 0\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_fill2(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    \n    # define the buckets as a list of cells\n    buckets = [[cell for cell in row] for row in grid]\n    # define the empty_bucket as a list of cells\n    empty_bucket = [[False for cell in row] for row in grid]\n\n    # define the final_bucket as a list of cells\n    final_bucket = []\n\n    # define the cycle_count as a list of cells\n    cycle_count = []\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_fill(grid = [[0, 1, 0, 1, 1],\n                        [0, 0, 0, 1, 0],\n                        [0, 0, 0, 0, 0],\n                        [0, 1, 1, 1, 0]], capacity = 1) == 5\nassert max_fill(grid = [[1, 1, 1, 1, 1, 1, 1],\n                        [0, 0, 0, 1, 1, 1, 0],\n                        [0, 0, 0, 0, 0, 0, 0],\n                        [0, 1, 1, 1, 1, 1, 1],\n                        [1, 1, 1, 1, 1, 1, 1],\n                        [0, 0, 0, 0, 0, 0, 0],\n                        [0, 0, 0, 0, 0, 0, 0]], capacity = 1) == 6\nassert max_fill(grid = [[0, 1, 0, 1, 1],\n                        [0, 0, 0, 1, 0],\n                        [0, 0, 0, 0, 0],\n                        [0, 1, 1, 1, 0]], capacity = 0) == -1\nassert max_fill(grid = [[1, 1, 1, 1, 1],\n                        [0, 0, 0, 1, 0],\n                        [0, 0, 0, 0, 0],\n                        [0, 1, 1, 1, 0]], capacity = 0) == -1\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_fill(grid, capacity) == [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] == \n                                [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] == \n                                [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n                                [0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert max_fill([\n    [1],\n    [1],\n    [0]\n], 1) == 1\nassert max_fill([\n    [1,1,1],\n    [1,1,1],\n    [1,1,1]\n], 3) == 2\nassert max_fill([\n    [1,1,1],\n    [1,1,1],\n    [1,1,1]\n], 1) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([4,8,3,10,1,14,9,2]) == [1, 2, 3, 4, 8, 9, 10, 14]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([0, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1]) ==    [0, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3]\nassert     sort_array([0, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 10, 11]) ==    [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9, 10, 11]\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) ==    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([2, 4, 3, 1, 2, 1, 3, 2, 4, 1]) ==    [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1]) == [0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0]\nassert     sort_array([0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1]) == [1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([5, 3, 4, 1, 0]) == [0, 1, 3, 4, 5]\nassert     sort_array([5, 4, 0, 3, 1]) == [0, 1, 3, 4, 5]\nassert     sort_array([2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     sort_array([5, 4, 3, 2, 1]) == [0, 1, 2, 3, 4, 5]\nassert     sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([0,1,1,1,1,1,0]) == [0,0,1,1,1,1,1]\nassert     sort_array([0,0,1,1,1,1,0]) == [0,0,0,1,1,1,1]\nassert     sort_array([1,0,0,0,0,1,1,1,0]) == [0,0,1,0,0,0,0,1,1]\nassert     sort_array([1,0,0,0,0,1,1,0]) == [0,0,0,0,1,1,0,1]\nassert     sort_array([0,0,1,1,1,0,1,1]) == [1,1,0,0,0,1,1,0]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([0,1,2,3,4,5,6,7,8,9]) == [9,8,7,6,5,4,3,2,1,0]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,10]) == [10,9,8,7,6,5,4,3,2,1,0]\nassert     sort_array([10,9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9,10]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,43"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([0,1,0,1,1,1,1,0,1,1,1]) == \\\n            [0,0,0,0,1,1,1,1,1,1,1], \"Test #1\"\nassert     sort_array([0,0,0,1,1,1,1,1]) == \\\n            [1,1,1,1,0,0,0,0], \"Test #2\"\nassert     sort_array([0,1,1,0,1,0,1,0,1,0,1]) == \\\n            [1,0,0,0,1,1,1,1,0,0,1], \"Test #3\"\nassert     sort_array([1,1,1,1,1,1,1,1,1,1,1]) == \\\n            [1,1,1,1,1,1,1,1,1,1,1], \"Test #4\"\n\nprint \"All test cases passed\""
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([0,1,0]) == [0,1,0], \"Wrong result\"\nassert     sort_array([1,1,1,1,0,0,0]) == [0,1,1,1,1,0,0], \"Wrong result\"\n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key = lambda x: -(x&1))\n\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    # intialize the test string\n    s = 'abcd pqrs'\n    # initialize the number of expected words\n    n = 2\n\n    print(select_words(s, n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     select_words(\"a b c d e\", 2) == [\"b\",\"d\"]\nassert     select_words(\"a b c d e\", 3) == [\"d\",\"e\"]\nassert     select_words(\"a b c d e\", 1) == [\"a\",\"b\",\"c\",\"d\",\"e\"]\nassert     select_words(\"a b c d e\", 0) == []\nassert     select_words(\" \", 5) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     select_words('the quick brown fox', 2) == ['the', 'quick']\nassert select_words('the quick brown fox', 1) == ['the', 'quick', 'brown']\nassert select_words('the quick brown fox', 0) == []\nassert select_words('', 1) == []\nassert select_words('dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog dog do"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert select_words('the quick brown fox jumps over the lazy dog', 3) == ['the', 'jumps']\nassert select_words('the quick brown fox jumps over the lazy dog', 2) == ['quick', 'fox', 'dog']\nassert select_words('the quick brown fox jumps over the lazy dog', 1) == ['the']\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     select_words('he is a student', 1) == ['he']\nassert     select_words('he is a student', 2) == ['he', 'is']\nassert     select_words('he is a student', 3) == ['he', 'is','student']\nassert     select_words('he is a student', 4) == ['he', 'is','student','student']\nassert     select_words('he is a student', 5) == ['he', 'is','student','student','student']\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     select_words(\"my cat\", 2) == [\"my\", \"cat\"]\nassert     select_words(\"cat cat\", 2) == [\"cat\"]\nassert     select_words(\"the cat cat\", 2) == [\"cat\"]\nassert     select_words(\"cat cat cat cat\", 2) == []\nassert     select_words(\"\", 2) == []\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     select_words(\"apples\", 3) == [\"app\", \"appl\", \"applee\"]\nassert     select_words(\"apples\", 0) == []\nassert     select_words(\"apples\", 1) == [\"a\"]\nassert     select_words(\"apples\", 2) == [\"app\", \"appl\"]\nassert     select_words(\"apples\", 3) == [\"app\", \"appl\", \"applee\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nselect_words('aardvark', 1) == ['a', 'aardvark']\nselect_words('aardvark', 2) == ['aardvark']\nselect_words('aardvark', 3) == ['aardvark']\nselect_words('aardvark', 4) == ['aardvark']\nselect_words('aardvark', 5) == ['aardvark']\nselect_words('aardvark', 6) == ['aardvark']\nselect_words('aardvark', 7) == []\nselect_words('aardvark', 8) == []\nselect_words('aardvark', 9) == []\nselect_words('aardvark', 10) == []\nselect_words('aardvark', 11) == []\nselect_words('aardvark', 12) == []\nselect_words('aardvark', 13) == []\nselect_words('aardvark', 14) == []\nselect_words('aardvark', 15) == []\nselect_words('aardvark', 16) == []\nselect_words('aardvark', 17) == []\nselect_words('aardvark', 18) == []\nselect_words('aardvark', 19) == []\nselect_words('aardvark', 20) == []\nselect_words('aardvark', 21) == []\nselect_words('aardvark', 22) == []\nselect_words('aardvark', 23) == []\nselect_words('aardvark', 24) == []\nselect_words('aardvark', 25) == []\nselect_words('aardvark', 26) == []\nselect_words('aardvark', 27) == []\nselect_words('aardvark', 28) == []\nselect_words('aardvark', 29) == []\nselect_words('aardvark', 30) == []\nselect_words('aardvark', 31) == []\nselect_words('aardvark', 32) == []\nselect_words('aardvark', 33) == []\nselect_words('aardvark', 34) == []\nselect_words('aardvark', 35) == []\nselect_words('aardvark', 36) == []\nselect_words('aardvark', 37) == []\nselect_words('aardvark', 38) == []\nselect_words('aardvark', 39) == []\nselect_words('aardvark', 40) == []\nselect_words('aardvark', 41) == []\nselect_words('aardvark', 42) == []\nselect_words('aardvark', 43) == []\nselect_words('aardvark', 44) == []\nselect_words('aardvark', 45) == []\nselect_words('aardvark', 46) == []\nselect_words('aardvark', 47) == []\nselect_words('aardvark', 48) == []\nselect_words('aardvark', 49) == []\nselect_words('aardvark', 50) == []\nselect_words('aardvark', 51) == []\nselect_words('aardvark', 52) == []\nselect_words('aardvark', 53) == []\nselect_words('aardvark', 54) == []\nselect_words('aardvark', 55) == []\nselect_words('aardvark', 56) == []\nselect_words('aardvark', 57) == []\nselect_words('aardvark', 58) == []\nselect_words('aardvark', 59) == []\nselect_words('aardvark', 60) == []\nselect_words('aardvark', 61) == []\nselect_words('aardvark', 62) == []\nselect_words('aardvark', 63) == []\nselect_words('aardvark', 64) == []\nselect_words('aardvark', 65) == []\nselect_words('aardvark', 66) == []\nselect_words('aardvark', 67) == []\nselect_words('aardvark', 68) == []\nselect_words('aardvark', 69) == []\nselect_words('aardvark', 70) == []\nselect_words('aardvark'"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('Congratulations! All tests passed!')"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_closest_vowel('wrld') == 'd', get_closest_vowel('wrld')\nassert get_closest_vowel('Hello') == 'e', get_closest_vowel('Hello')\nassert get_closest_vowel('l') == 'o', get_closest_vowel('l')\nassert get_closest_vowel('M') == '', get_closest_vowel('M')\nassert get_closest_vowel('z') == 'z', get_closest_vowel('z')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert\nassert\n\nassert get_closest_vowel('kiwi') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_closest_vowel(\"cat\") == \"e\"\nassert     get_closest_vowel(\"hello\") == \"\"\nassert     get_closest_vowel(\"dog\") == \"o\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"\\033[92m\", \"\\033[1m\" + \"All tests passed!\" + \"\\033[0m\", sep=\"\")\nprint(\"\\033[94m\", \"\\033[1m\" + \"Let's check the output\" + \"\\033[0m\", sep=\"\")\nprint(get_closest_vowel(\"suo\"))\nprint(get_closest_vowel(\"dreams\"))\nprint(get_closest_vowel(\"kayak\"))\nprint(get_closest_vowel(\"monkey\"))\nprint(get_closest_vowel(\"noun\")"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('codewars') == 'ow', \"Wrong result\"\nassert     get_closest_vowel('codewarscodewars') == 'ow', \"Wrong result\"\nassert     get_closest_vowel('codewarscodewarscodewarscodewars') == 'ow', \"Wrong result\"\nassert     get_closest_vowel('codewarscodewarscodewarscodewarscodewarscodewars') == '', \"Wrong result\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_closest_vowel('water') == 'w', \"First\"\nassert     get_closest_vowel('wax') == 'a', \"Second\"\nassert     get_closest_vowel('zebra') == 'a', \"Third\"\nassert     get_closest_vowel('zebrax') == 'x', \"Fourth\"\nassert     get_closest_vowel('xz') == 'x', \"Fifth\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert get_closest_vowel(\"ad\") == \"\"\nassert get_closest_vowel(\"hat\") == \"\"\nassert get_closest_vowel(\"c\") == \"\"\nassert get_closest_vowel(\"a\") == \"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef balanced_parantheses(S):\n    '''\n    You are given a string S consisting of lowercase English letters,\n    brackets (\u2018(\u2019) and closing brackets (\u2018)\u2019).\n    Your job is to check if the brackets are balanced.\n    For example:\n    S = \"([])\"\n    The brackets are balanced and the function should return True.\n    S = \"((()))\"\n    The brackets are not balanced and the function should return False.\n    S = \"(((())))[]]\"\n    The brackets are balanced and the function should return False.\n    S = \"(((((((())[)))))))[][]]\"\n    The brackets are not balanced and the function should return False.\n    S = \"(((((((())[)))))))[][][][][][][][][][]][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef perfect_match(s, m):\n    '''\n    You are given a string S consisting of '0's and '1's, with a positive\n    number of '1's. In a perfect matching string every '1' is connected to the\n    substring of '1's it is connected to.\n    You have to return the sum of the length of perfect matching strings.\n    Note: if there are no perfect matching strings return 0.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     match_parens(['((', '))', '()']) == 'Yes', \"TEST 1\"\nassert     match_parens(['(', '())', '()']) == 'No', \"TEST 2\"\nassert     match_parens(['()(', '()()', '()']) == 'No', \"TEST 3\"\nassert     match_parens(['(', '()(', '())']) == 'No', \"TEST 4\"\nassert     match_parens(['((', '))(', '()']) == 'No', \"TEST 5\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     match_parens(('(())()',)) == 'Yes'\nassert     match_parens(('(()))',)) == 'No'\n\nprint('Congratulations, you passed the test!')\n\n'''\nTime complexity of the above algorithm is O(N), where N is the length of\nthe list of strings.\n'''"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     match_parens(['(()()','()()']) == 'Yes'\nassert     match_parens(['(())()','((())()']) == 'Yes'\nassert     match_parens(['(()()','((()()']) == 'No'\nassert     match_parens(['(()(','(()))']) == 'No'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     match_parens(('((',)) == 'Yes', 'Please fix this'\nassert     match_parens(('((',)) == 'No', 'Please fix this'\nassert     match_parens(('(',)) == 'No', 'Please fix this'\nassert     match_parens(('',)) == 'No', 'Please fix this'\nassert     match_parens(('',)) == 'No', 'Please fix this'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     match_parens([\"(()\", \"()))\"]) == \"Yes\"\nassert     match_parens([\"()()\", \"(()())\"]) == \"No\"\nassert     match_parens([\"(((((((((((((())))))))))))))\", \"(((((((((((((())))))))))))))\"]) == \"Yes\"\nassert     match_parens([\"(((((((((((((((())))))))))))))\", \"((((((((((((())))))))))))))\"]) == \"No\"\nassert     match_parens([\"(((((((((((((())))))))))))))\", \"(((((((((((((())))))))))))))\"]) == \"Yes\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     match_parens([\"(()(()(()(()))\",\n                        \"(())\",\n                        \"(()(()()()\",\n                        \"(()()(()))\"]) == 'Yes',\nassert     match_parens([\"(()(()(()(()(()))\",\n                        \"(()()\",\n                        \"(()(()()()\",\n                        \"(()()(()))\"]) == 'No',\nassert     match_parens([\"(()(()(()(()(()))\",\n                        \"(()()(()(()(()(()))\",\n                        \"(()()(()()(()(()(()))\"]) == 'Yes',\nassert     match_parens([\"()()()((()()(()(((((()())()()()()(()()(())())()()()()(()))\",\n                        \"((())())()()((()(()()(((((()(()(()()(()(()(()(()()())()()()()()(()))\",\n                        \"(()()(()()(()(()()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()))\"]) == 'Yes',\nassert     match_parens([\"(()(()(()()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    match_parens([]) == 'No', \"empty\"\n    match_parens(['()']) == 'Yes', \"balanced\"\n    match_parens(['(()', '()']) == 'No', \"unbalanced\"\n    match_parens([')', '()(']) == 'Yes', \"balanced\"\n    match_parens(['()()', '()()']) == 'Yes', \"balanced\"\n    match_parens(['(()())(', '()()()(']) == 'Yes', \"balanced\"\n    match_parens(['((', '()()']) == 'Yes', \"balanced\"\n    match_parens(['((', '()()))']) == 'No', \"unbalanced\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum([3, 2, 1, 5], 2) == [3, 5]\nassert maximum([2, 2, 3, 4], 2) == [2, 4]\nassert maximum([1, 5, 2, 9], 1) == [5]\nassert maximum([], 2) == []\nassert maximum([-5, -4, -3, -2, -1], 2) == [-5, -4]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum([1, 2, 3, 4, 5], 1) == [5], 'Wrong result'\nassert maximum([-2, 1, -3, 4, -1, 2], 2) == [-2, 4], 'Wrong result'\nassert maximum([1, 2, 3, 4, 5], 3) == [4, 5, 5], 'Wrong result'"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum([-1, -2, -3, -4], 2) == [-1, -2]\nassert     maximum([1, 2, 3], 2) == [3, 3]\nassert     maximum([-2, -1, 0, 1, 2], 2) == [-2, -1, 2]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum([1,2,3,4], 1) == [1,3,4]\nassert maximum([1,2,3,4], 2) == [2,3,4]\nassert maximum([1,2,3,4], 3) == [1,2,3]\nassert maximum([1,2,3,4], 4) == [1,2,3,4]\nassert maximum([1,2,3,4], 5) == [1,2,3,4,5]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum([-1, 2], 1) == [-1, 2]\nassert     maximum([2, 3], 1) == [3]\nassert     maximum([3, 3], 1) == [3]\nassert     maximum([1, 2, 3, 3], 2) == [3, 3]\nassert     maximum([-1, 2], 2) == [-1, 2]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum([0, -1, 1, 2], 3) == [-1, 1, 2]\nassert     maximum([-1, 2, -3, 4, 5], 4) == [-3, 4, 5]\nassert     maximum([2], 2) == [2]\nassert     maximum([], 2) == []\nassert     maximum([2, -1], 1) == [-1]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum([-1, 3, 5], 2) == [-1, 3]\nassert maximum([4, 5, 3, 2, 4], 2) == [4, 4]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum([1, 2, 4, 5, 6, 7], 3) == [4, 5, 6], 'Wrong'\nassert maximum([1, 2, 4, 5, 6, 7], 4) == [1, 2, 4, 5], 'Wrong'\nassert maximum([1, 2, 4, 5, 6, 7], 5) == [4, 5, 6, 7], 'Wrong'\nassert maximum([1, 2, 4, 5, 6, 7], 6) == [4, 5, 6, 7], 'Wrong'\nassert maximum([1, 2, 4, 5, 6, 7], 7) == [1, 2, 4, 5, 6], 'Wrong'\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert maximum([-1, 2, 3, 4, 5, 6, 7, 8], k = 4) == [-1, 2, 3, 4]\nassert maximum([1, 3, -2, 4, 5, 5], k = 3) == [-2, 3, 4]\nassert maximum([1, 2, 3, 4, 5, 5, 5], k = 6) == [5]\nassert maximum([], k = 1) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5]\n    assert solution(lst) == 5\n    lst = []\n    assert solution(lst) == 0\n    lst = [1]\n    assert solution(lst) == 1\n    lst = [-1]\n    "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solution([2, 1, 3, 4, 1, 1]) == 8, 'test 1 is wrong'\nassert     solution([2, 1, 3, 4, 1, 1, 3]) == 10, 'test 2 is wrong'\nassert     solution([1, 1, 1]) == 1, 'test 3 is wrong'\nassert     solution([]) == 0, 'test 4 is wrong'\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint()\nprint(solution([2, 4, 6, 8]))\nassert 8 == solution([2, 4, 6, 8])\nassert 9 == solution([1, 3, 5, 7])\nassert 0 == solution([])\nassert 0 == solution([1, 2, 3, 4])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == sum([2, 4, 6, 8])\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == sum([2, 4, 6, 8])\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == sum([2, 4, 6, 8, 9])\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == sum([2, 4, 6, 8, 9, 10])\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == sum([2, 4, 6, 8, 9, 10, 11])\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solution([1, 2, 3, 4]) == 0\nassert     solution([2, 4, 6, 8]) == 0\nassert     solution([]) == 0\nassert     solution([1, 3, 5]) == "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solution([1,2,3]) == 2, \"solution([1,2,3]) is wrong\"\nassert     solution([1,3,2]) == 2, \"solution([1,3,2]) is wrong\"\nassert     solution([0,1,2]) == 2, \"solution([0,1,2]) is wrong\"\nassert     solution([0,1]) == 0, \"solution([0,1]) is wrong\"\nassert     solution([0]) == 0, \"solution([0]) is wrong\"\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_elements([1, 2, 3], 3) == 5\nassert     add_elements([1, 2, 3, 4], 2) == 9\nassert     add_elements([4, 2, 3, 4], 2) == 12\nassert     add_elements([4, 2, 3, 4], 3) == 17\nassert     add_elements([9, 8, 7, 6, 5, 4], 3) == 22\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_elements([0, 0, 0, 0, 0], 1) == 0\nassert     add_elements([1, 2, 3], 1) == 4\nassert     add_elements([10, 1000, 10000, 100000], 1) == 110000\nassert     add_elements([0, 0, 0, 0], 2) == 0\nassert     add_elements([0, 0, 0, 0], 3) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert add_elements([11, 1, 14, -1, -5, 14, 4, 7, 2, 12, 6], 2) == 15\nassert add_elements([4, 3, 2, 1], 3) == 5\nassert add_elements([3, 5], 2) == 8\nassert add_elements([3, 5, 2, 9], 2) == 12\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_elements([4, 6, 1, 3, 7, 8, 2, 9], 2) == 9\nassert     add_elements([4, 6, 1, 3, 7, 8, 2, 9], 4) == 16\nassert     add_elements([2, -1, 2, 0, 2], 3) == 8\nassert     add_elements([4, 6, 1, 3, 7, 8, 2, 9], 5) == 25\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert add_elements([1, 2, 3, 4, 6, 7, 8, 9, 10], 2) == 5\nassert add_elements([1, 2, 3, 4, 6, 7, 8, 9, 10], 3) == 10\nassert add_elements([1, 2, 3, 4, 6, 7, 8, 9, 10], 10) == 15\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\narr = [12, 10, 9, 9]\nk = 2\nassert add_elements(arr, k) == 24"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(5) == [1,3,5], \"Wrong Output!\"\nassert     get_odd_collatz(16) == [1,2,4,8,16], \"Wrong Output!\"\nassert     get_odd_collatz(49) == [1,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199], \"Wrong Output!\"\n\nprint('All test cases passed!'"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(4) == [1, 2, 3, 5]\nassert     get_odd_collatz(5) == [1, 2, 3, 5, 8]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) ==    [1]\nassert     get_odd_collatz(2) ==    [1, 2]\nassert     get_odd_collatz(3) ==    [1, 2, 1]\nassert     get_odd_collatz(6) ==    [1, 2, 1, 2, 1, 2, 2, 3]\nassert     get_odd_collatz(10) ==    [1, 2, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1) ==     [1]\nassert     get_odd_collatz(2) ==     [1, 2]\nassert     get_odd_collatz(3) ==     [1, 2, 3]\nassert     get_odd_collatz(5) ==     [1, 2, 3, 5, 10, 20, 40, 80, 160, 320, 640, 1280]\n\nif __name__ == \"__main__\":\n    \"\"\"\n    Test get_odd_collatz()\n    \"\"\"\n    import doctest\n    doctest.testmod()\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(5) == [1, 2, 5]\nassert     get_odd_collatz(9) == [1, 2, 3, 4, 5, 6, 8, 9]\nassert     get_odd_collatz(12) == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 44, 66, 109, 193, 169, 124]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 1\n    while n < 10**6:\n        result = get_odd_collatz(n)\n        print(result)\n        n += 1\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     valid_date('10-02-2019') == True, 'Failed: 10-02-2019'\nassert     valid_date('1-10-2000') == False, 'Failed: 1-10-2000'\nassert     valid_date('2-29-2020') == False, 'Failed: 2-29-2020'\nassert     valid_date('2-28-2020') == False, 'Failed: 2-28-2020'\nassert     valid_date('1-31-2020') == False, 'Failed: 1-31-2020'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     valid_date(\"1-1-1999\") == False\nassert     valid_date(\"1-1-2000\") == False\nassert     valid_date(\"10-31-1999\") == False\nassert     valid_date(\"1-31-1999\") == True\nassert     valid_date(\"1-30-1999\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     valid_date('11-20-2019') == False\nassert     valid_date('5-19-19') == False\nassert     valid_date('6-30-17') == True\nassert     valid_date('11-9-2012') == False\nassert     valid_date('9-16-19') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     valid_date('12-12-2030') == False\nassert     valid_date('12-12-20') == False\nassert     valid_date('12-12') == False\nassert     valid_date('1-12-2020') == False\nassert     valid_date('1-1-2020') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     valid_date(\"01-02-2019\") == False\nassert     valid_date(\"12-31-2019\") == False\nassert     valid_date(\"1-2-2019\") == True\nassert     valid_date(\"1-30-2019\") == True\nassert     valid_date(\"5-31-2019\") == True\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_words('abc def ghi') == ['abc', 'def', 'ghi']\nassert     split_words('abc, def, ghi') == ['abc', ',', 'def', ',', 'ghi']\nassert     split_words('abc') == ['abc']\nassert     split_words('ab') == ['ab']\nassert     split_words('a,b') == ['a', 'b']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_words(\"hi, hello\") == [\"hi\", \"hello\"]\nassert     split_words(\"hello, hi\") == [\"hello\", \"hi\"]\nassert     split_words(\"hi\") == [\"hi\"]\nassert     split_words(\"hi,hi, hi\") == [\"hi\", \"hi\", \"hi\"]\nassert     split_words(\"hi, hello, hi\") == [\"hi\", \"hello\", \"hi\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('hello') == ['hello']\nassert     split_words('hello there') == ['hello', 'there']\nassert     split_words('hello, there') == ['hello', ',', 'there']\nassert     split_words('hello there ') == ['hello', 'there ', '']\nassert     split_words('hello, there, how are you?') == ['hello', ',', 'there', ',', 'how', 'are', 'you?']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_words('abc,def,ghi') == ['abc', 'def', 'ghi']\nassert     split_words('abc,def,ghi,') == ['abc', 'def', 'ghi', '']\nassert     split_words('abc,def,ghi,') == ['abc', 'def', 'ghi', '']\nassert     split_words('abc,def,ghi,') == ['abc', 'def', 'ghi', '']\nassert     split_words('abc,def,ghi,') == ['abc', 'def', 'ghi', '']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_words('a b, c d') == ['a', 'b', 'c', 'd']\nassert     split_words('a, b, c') == ['a', 'b', 'c']\nassert     split_words('a b, c, d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,b,c d') == ['a', 'b', 'c d']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_words('The quick brown fox, jumps over the lazy dog.') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     split_words('The quick brown fox, jumps over the lazy dog.') == ['The', 'quick', 'brown fox', 'jumps', 'over', 'the', 'lazy dog']\nassert     split_words('abc def ghi jkl mno pqr stu vwx yz') == ['abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz']\nassert     split_words('One, two, three,') == ['One', 'two', 'three', '']\nassert     split_words('One, two, three,') == ['One', 'two', 'three', '']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_words('Hello, I am a string') == ['Hello', 'I', 'am', 'a','string'], 'incorrect'\nassert     split_words('Hello, I am a string') == ['Hello', 'I', 'am', 'a','string'], 'incorrect'\nassert     split_words('Hello, I am a string') == ['Hello', 'I', 'am', 'a','string'], 'incorrect'\nassert     split_words('Hello, I am a string') == ['Hello', 'I', 'am', 'a','string'], 'incorrect'\nassert     split_words('Hello, I am a string') == ['Hello', 'I', 'am', 'a','string'], 'incorrect'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef split_words_2(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words('hello world') == ['hello', 'world']\nassert     split_words('hello world, a1b2c3') == ['hello', 'world', 'a1b2c3']\nassert     split_words('a1b2c3') == ['a1b2c3']\nassert     split_words('hello world, a1b2c3, a4b5c6') == ['hello', 'world', 'a1b2c3', 'a4b5c6']\nassert     split_words('hello world, a1b2c3, a4b5c6, a7b8c9') == ['hello', 'world', 'a1b2c3', 'a4b5c6', 'a7b8c9']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_words('one,two,three,four') == ['one','two','three','four']\nassert     split_words('one,two,three,four,five') == ['one','two','three','four', 'five']\nassert     split_words('one,two,three,four,five,six') == ['one','two','three','four', 'five','six']\nassert     split_words('one,two,three,four,five,six,seven') == ['one','two','three','four', 'five','six','seven']\nassert     split_words('one,two,three,four,five,six,seven,eight') == ['one','two','three','four', 'five','six','seven', 'eight']\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True, \"Your function does not work!\"\nassert     is_sorted([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10]) == False, \"Your function does not work!\"\nassert     is_sorted([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == False, \"Your function does not work!\"\nassert     is_sorted([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]) == False, \"Your function does not work!\"\nassert     is_sorted([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 12, 12]) == False, \"Your function does not work!\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sorted([1, 2, 3]) is True\nassert     is_sorted([3, 2, 1]) is False\nassert     is_sorted([1, 1, 2, 2, 3, 3, 4, 4, 4]) is True\nassert     is_sorted([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sorted([-1, 4, 2, 5, 3, 3]) == False, \"Wrong\"\nassert     is_sorted([-1, 4, 2, 5, 4, 3, 3]) == True, \"Wrong\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sorted([1,2,3]) == False, 'Smaller than 1'\nassert     is_sorted([1,2,3,1]) == False, 'Smaller than 2'\nassert     is_sorted([1,2,3,1,2]) == False, 'Smaller than 3'\nassert     is_sorted([1,1,2,2]) == True, 'Sorted'\nassert     is_sorted([1,1,2,2,4]) == True, 'Sorted'\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"The function is_sorted works with correct input and returns True for ordered lists!\")\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert is_sorted([3, 2, 1]) == True\nassert is_sorted([1, 1, 1]) == False\nassert is_sorted([3, 1, 2]) == False\nassert is_sorted([1, 2, 3, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef make_dict(lst):\n    '''\n    Given a list of numbers, return a dictionary where keys are unique\n    numbers and values are the position of that number in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ninterval1 = (1, 2)\ninterval2 = (3, 4)\nassert intersection(interval1, interval2) == 'YES'\n\ninterval1 = (1, 2)\ninterval2 = (5, 6)\nassert intersection(interval1, interval2) == 'NO'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    assert (intersection((1,3),(2,4)) == \"YES\")\n    assert (intersection((1,3),(4,7)) == \"NO\")\n    assert (intersection((1,3),(3,5)) == \"NO\")\n    "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection((0, 10), (10, 20)) == \"YES\"\nassert     intersection((1, 10), (20, 30)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    print(intersection((1, 3), (2, 4)))\n    print(intersection((2, 4), (1, 3)))\n    print(intersection((2, 3), (1, 3)))\n    print(intersection((1, 5), (5, 8)))\n    print(intersection((1, 7), (1, 6)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_input(prompt):\n    while True:\n        try:\n            number = int(input(prompt))\n            break\n        except ValueError:\n            print(\"Invalid input\")\n    return number\n\n\nif __name__ == \"__main__\":\n    interval1 = (get_input(\"Enter the start of the first interval: \"), get_input(\"Enter the end of the first interval: \"))\n    interval2 = (get_input(\"Enter the start of the second interval: \"), get_input(\"Enter the end of the second interval: \"))\n\n    print(intersection(interval1, interval2))"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection( (1,3), (2,4) ) == \"YES\"\nassert     intersection( (1,3), (4,8) ) == \"NO\"\nassert     intersection( (0,3), (5,10)) == \"NO\"\n\ndef test_intersection():\n    assert intersection( (1,3), (2,4)) == \"YES\"\n    "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    print(intersection([2,3],[3,6]))\n    print(intersection([1,2],[2,3]))\n    print(intersection([2,3],[1,2]))\n    print(intersection([1,3],[1,2]))\n    print(intersection([3,7],[1,2]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 5)) == \"NO\"\nassert     intersection((1, 3), (2, 5)) == \"NO\"\nassert     intersection((1, 3), (2, 5)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prod_signs([1,1,1,1]) == 3\nassert     prod_signs([-1,1,1,1]) == 0\nassert     prod_signs([-1,-1,1,-1]) == 3\nassert     prod_signs([-1,1,-1,1]) == 3\nassert     prod_signs([-1,-1,-1,1]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prod_signs([-4,-2,5]) == -5\nassert prod_signs([1,-1]) == 1\nassert prod_signs([-1,-1]) == -2\nassert prod_signs([1,-2]) == 0\nassert prod_signs([-1,1]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert prod_signs([-1,1,-1,1,1]) == -1\nassert prod_signs([1,1,1,1]) == 1\nassert prod_signs([-1]) == None\nassert prod_signs([-1]) == None\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1,2]) == 0\nassert     prod_signs([1,-2,-4]) == -6\nassert     prod_signs([1,-2,3,4]) == 0\nassert     prod_signs([-1,2,3,4]) == 6\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prod_signs([-1, -1, -1, 1, 1, 1, 1, -1]) == -2\nassert     prod_signs([-1, -1, -1, 1, 1, 1, 0, 0, 0]) == -2\nassert     prod_signs([-1, -1, 1, 1, 1, 1]) == 1\nassert     prod_signs([-1, -1, 1, 1, -1, 1]) == 1\nassert     prod_signs([-1, -1, 1, -1, -1, -1]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prod_signs([0, 1, 2, 3, -4, -5, -6]) == 9\nassert     prod_signs([2, -2, -3, -4]) == -6\nassert     prod_signs([-5, 1, -2, -1]) == 2\nassert     prod_signs([1, -1, -2, -3, -4, -5, 6, -7]) == -42\nassert     prod_signs([1, 2, 3, -4, -5, 6, -7]) == 24\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (prod_signs([1, -1, -1]) == 1)\nassert     (prod_signs([1, 1, -1]) == 0)\nassert     (prod_signs([-1, 1, -1]) == 1)\nassert     (prod_signs([1, -1, 1]) == 0)\nassert     (prod_signs([-1, 1, -1]) == 1)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prod_signs([1, 2, 3]) == 7, 'Wrong answer, should be 7'\nassert     prod_signs([-1, 2, -3]) == 0, 'Wrong answer, should be 0'\nassert     prod_signs([-2, -3, -4]) == -12, 'Wrong answer, should be -12'\nassert     prod_signs([1, 2, 3, 4]) == 24, 'Wrong answer, should be 24'\n\nprint('Congratulations! Your solution is correct')\nprint('It took {:.3f}s to find the solution'.format(time.time() - start_time))"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prod_signs([1, 2, -2, -4]) == -24\nassert     prod_signs([-1, -2, 0, 1]) == 0\nassert     prod_signs([-1, 1, 1, -1]) == 0\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minPath([[1,2,3],\n               [4,5,6],\n               [7,8,9]], 5) == [1,4,7]\nassert     minPath([[1,2],\n               [4,5]], 3) == [1,2,4]\nassert     minPath([[1,2],\n               [4,5]], 2) == [1,4]\nassert     minPath([[1,2,3,4],\n               [5,6,7,8],\n               [9,10,11,12],\n               [13,14,15,16]], 5) == [1,2,4,13]\nassert     minPath([[1,2,3,4],\n               [5,6,7,8],\n               [9,10,11,12],\n               [13,14,15,16]], 3) == [1,2,4,13]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minPath([[1,2,3],\n                  [8,9,4],\n                  [7,6,5]], k = 4) == [1,2,3,4]\nassert     minPath([[1,2,3,1,2],\n                  [8,9,4,3,9],\n                  [7,6,5,6,7],\n                  [1,2,3,4,1]], k = 4) == [1,2,3,4,1]\nassert     minPath([[1,2,3,2,2],\n                  [8,9,4,3,9],\n                  [7,6,5,6,7],\n                  [1,2,3,4,1]], k = 3) == [1,2,3,4]\nassert     minPath([[1,2,3,2,2],\n                  [8,9,4,3,9],\n                  [7,6,5,6,7],\n                  [1,2,3,4,1]], k = 2) == [1,2,3,4]\nassert     minPath([[1,2,3,2,2],\n                  [8,9,4,3,9],\n                  [7,6,5,6,7],\n                  [1,2,3,4,1]], k = 1) == [1,2,3,4]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ngrid = [[0,1,2],\n        [3,4,5],\n        [6,7,8]]\nk = 2\nprint minPath(grid, k)"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert minPath([[0, 1, 1, 0], [0, 0, 0, 1], [0, 0, 0, 1]], 1) == [1, 0, 0]\nassert minPath([[0, 0, 0, 0], [1, 0, 1, 0], [0, 0, 0, 1]], 2) == [0, 0, 1]\nassert minPath([[0, 0, 0, 0], [1, 0, 0, 1], [0, 1, 0, 1]], 2) == [0, 1, 1]"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nclass Solution:\n    def minPath(self, grid, k):\n        \"\"\"\n        Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n        each cell of the grid contains a value. Every integer in the range [1, N * N]\n        inclusive appears exactly once on the cells of the grid.\n\n        You have to find the minimum path of length k in the grid. You can start\n        from any cell, and in each step you can move to any of the neighbor cells,\n        in other words, you can go to cells which share an edge with you current\n        cell.\n        Please note that a path of length k means visiting exactly k cells (not\n        necessarily distinct).\n        You CANNOT go off the grid.\n        A path A (of length k) is considered less than a path B (of length k) if\n        after making the ordered lists of the values on the cells that A and B go\n        through (let's call them lst_A and lst_B), lst_A is lexicographically less\n        than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n        such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n        lst_A[j] = lst_B[j].\n        It is guaranteed that the answer is unique.\n        Return an ordered list of the values on the cells that the minimum path go through.\n        \"\"\"\n        # DP\n        # dp[i][j] is the min path between i and j (inclusive)\n        # the min path between i and j is a list of the values of the cells that are visited\n        # starting from i, the min path between i and j is the cell with the minimum value\n        # since we need to find the min path from i to j, so we need to find the min path\n        # from j to i, we need to find the min path between j and i (strictly speaking the min path between\n        # j and i is min path between i and j)\n        # so we need to find the min path between the ends of the min path (i.e., min path from i to j)\n        # so we first need to find the min path between i and j\n        # since there is only one cell in the min path, we can just return that cell\n        # so we need to compute the min path from i to j\n        # we use DFS, so we need to take the minimum of min_path between i and j\n        # and we can use a visited array to keep track of whether we have visited j or not\n        # we need to use a visited array to keep track of whether we have visited j or not\n        # the min path between i and j is just a list of the cells that are visited\n        # in DFS, we start with i and put 1 into the visited array\n        # then, we do a DFS from i to j, and we will get the min path\n        # the min path is a list of the cells that are visited\n        # so we need to compare the list of the cells that are visited in min path between i and j\n        # the min path between i and j is just a list of the cells that are visited\n        # if we can find the min path between i and j\n        # we just need to return the min path between i and j\n        # if we cannot find the min path between i and j\n        # we just return the min path between i and j + the min path from i to j\n        \n        # the min path between i and j is just a list of the cells that are visited\n        # the min path between i and j is just a list of the cells that are visited\n        # if we can find the min path between i and j\n        # we just need to return the min path between i and j\n        # if we cannot find the min path between i and j\n        # we just return the min path between i and j + the min path from i to j\n        \n        # for the problem, the min path between i and j is the same as min path between i and j + the min path from i to j\n        # since we can only find the min path between i and j\n        # so we can just return the min path between i and j\n        # if we can not find the min path between i and j\n        # we can just return the min path between i and j + the min path from i to j\n        \n        "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert tri(4) == [1, 3, 2, 3]\nassert tri(2) == [1, 2]\nassert tri(1) == [3]\nassert tri(0) == []\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tri(4) == [1, 2, 3]\nassert     tri(0) == []\nassert     tri(2) == [1, 2]\nassert     tri(6) == [1, 3, 6]\nassert     tri(10) == [1, 2, 4, 6, 3, 4, 5, 6, 4, 7, 8, 5, 8, 9, 7, 9, 10, 8, 10, 11"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nif __name__ == \"__main__\":\n    # test tri with small numbers\n    assert tri(2) == [1, 1]\n    assert tri(4) == [3, 2, 1]\n    assert tri(3) == [2, 3, 3]\n    assert tri(10) == [4, 6, 5, 6, 3, 3, 4, 1, 5, 8, 6]\n    \n    # test tri with large numbers\n    "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntri(2)\nassert tri(4)\nassert tri(3) == 2 + 3 + 3 == "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert tri(10) == [0,1,3,8,13,24,36,48,64,81]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digits(9) == 0\nassert digits(12) == 12\nassert digits(301) == 0\nassert digits(20) == 0\nassert digits(15) == 3\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_odd(n):\n    \"\"\"Given a positive integer n, return True if n has an odd number of digits and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert digits(5) == 0\nassert digits(4) == 0\nassert digits(2) == 2\nassert digits(1) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef digits_set(n):\n    \"\"\"Given a positive integer n, return the set of the odd digits.\n    Return an empty set if all the digits are even.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digits(2) == 0\nassert     digits(15) == 0\nassert     digits(1234) == 24\nassert     digits(12345) == 120\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n\n\"\"\"\nTime: O(n)\nSpace: O(1)\n\"\"\"\n\n\"\"\"\nIf you know what digits are being multiplied, \nyou can use a multithreaded approach.\nThe idea is to create a queue of n numbers, \nand each of them will multiply 1 to the left \nof it in the queue.\n\"\"\"\n\nclass Solution(object):\n    def digits(self, n):\n        \"\"\"Given a positive integer n, return the product of the odd digits.\n        Return 0 if all digits are even.\n        \"\"\"\n        queue = []\n        while n:\n            queue.append(n%10)\n            n = n//10\n        prod = 1\n        for x in queue:\n            if x%2 == 1:\n                prod *= x\n        return prod\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    pass\n\n\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_nested(\"()\") == True, \"Should be True\"\nassert     is_nested(\"(())\") == True, \"Should be True\"\nassert     is_nested(\"((())\") == True, \"Should be True\"\nassert     is_nested(\"((())()\") == True, \"Should be True\"\nassert     is_nested(\"(((())))\") == True, \"Should be True\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_nested(\"\") == False\nassert     is_nested(\"()\") == False\nassert     is_nested(\"(())\") == True\nassert     is_nested(\"()()\") == True\nassert     is_nested(\"(()())\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_nested(string):\n    '''\n    Write a function that takes a string as input, and returns True if and only if this \n    string contains an equal number of opening and closing brackets, in any order.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_nested(\"()\") == True\n    is_nested(\"(((())))\") == True\n    is_nested(\"(((())))((()))\") == True\n    is_nested(\"((((())))((())))((()))\") == False\n\nprint('is_nested')\n\n\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nested('[{[]]') == True, 'Pass'\nassert     is_nested('[[[[[]]]]]') == True, 'Pass'\nassert     is_nested('[[[[]]]]]') == True, 'Pass'\nassert     is_nested('[[[[]]]]]') == False, 'Pass'\nassert     is_nested('[[[[]]]]]') == False, 'Pass'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_nested('[(')\nassert not is_nested('[{(])')\nassert not is_nested('[([[])]')\nassert is_nested('[([]][)()]')\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_nested('[][]') == True\nassert is_nested('[]') == False\nassert is_nested('()') == True\nassert is_nested('(())') == True\nassert is_nested('((())') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_nested('') == False\nis_nested('[][]') == True\nis_nested('[][[') == False\nis_nested('()[]') == True\nis_nested('([)]') == False\nis_nested('[[]') == False\nis_nested('[[') == True\nis_nested(']][[') == False\nis_nested('[[][]]') == False\nis_nested('[[[][]]]') == True\nis_nested('[[[[[]]]]]]') == False\nis_nested('[[[[[[[]]]]]]]]') == True\nis_nested('[[[[[[[[[[]]]]]]]]]]') == False\nis_nested('[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]') == True\nis_nested('[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]') == False"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([1, 2, 3]) == 14\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 14, \"Should be 14\"\nassert     sum_squares([1, 2, 3, 4.0]) == 14, \"Should be 14\"\nassert     sum_squares([1, 2, 4, 5]) == 25, \"Should be 25\"\nassert     sum_squares([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_squares([0, 1, 2, 3, 4, 5]) == [(0 + 1)**2 + (1 + 2)**2 + (2 + 3)**2 + (3 + 4)**2 + (4 + 5)**2, 1**2 + 2**2 + 3**2 + 4**2 + 5**2])\nassert     sum_squares([1, -2, 3, 4, 5]) == [(1 + 2)**2 + (3 + 4)**2 + (5 + 0)**2, 4**2 + 5**2, 2**2 + 3**2, 0**2, 0**2]\nassert     sum_squares([-3, -4, -5]) == [(3 + 4)**2 + (-5 + 0)**2, 4**2 + 5**2, 2**2, 0**2, 0**2]\nassert     sum_squares([1, 2, 3]) == [(1 + 2)**2 + (3 + 0)**2, 2**2 + 3**2, 2**2, 0**2]\nassert     sum_squares([0, 0, 0, 0, 0, 0]) == [(0 + 0)**2 + (0 + 0)**2 + (0 + 0)**2 + (0 + 0)**2, 0**2, 0**2, 0**2, 0**2]\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_squares([2, -3, 2]) == 49, \"Should be 49\"\nassert     sum_squares([-2, 3, 4]) == 29, \"Should be 29\"\nassert     sum_squares([5, 0, -5]) == 20, \"Should be 20\"\nassert     sum_squares([-5, -2, 5]) == 12, \"Should be 12\"\n\nprint(\"Great! Now, please give me a number.\")\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_squares([-3, -2, -1, 0, 1, 2, 3]) == 9\nassert     sum_squares([-3, -2, -1, 0, 1, 2, 3, 5]) == 12\nassert     sum_squares([-1, -2, -3, -4, -5]) == -14\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_squares([0,1,2,3]) == 14\nassert sum_squares([-1,-2,-3]) == 14\nassert sum_squares([2,3,4]) == 14\nassert sum_squares([-4,-3,-2,1]) == 14\nassert sum_squares([-5,-3,-2,-1]) == 25\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not check_if_last_char_is_a_letter('asdf')\nassert check_if_last_char_is_a_letter('asdfghjkl')\nassert check_if_last_char_is_a_letter('abcd')\nassert not check_if_last_char_is_a_letter('123')\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('dog') == True\nassert check_if_last_char_is_a_letter('cat') == False\nassert check_if_last_char_is_a_letter('miami') == True\nassert check_if_last_char_is_a_letter('pizza') == False\n\nprint('Check if last char is a letter is correct: SUCCESS')\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not check_if_last_char_is_a_letter(\"\")\nassert not check_if_last_char_is_a_letter(\".\")\nassert not check_if_last_char_is_a_letter(\"hello!\")\nassert not check_if_last_char_is_a_letter(\"he.lo\")\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(\"hi hello my name is abc\") == False\nassert     check_if_last_char_is_a_letter(\"a\") == True\nassert     check_if_last_char_is_a_letter(\"   \") == True\nassert     check_if_last_char_is_a_letter(\"!@#$%^&*()\") == False\nassert     check_if_last_char_is_a_letter(\"hello\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Write a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter(\"love\")         == True\nassert     check_if_last_char_is_a_letter(\"The quick brown fox jumps over the lazy dog.\")     == False\nassert     check_if_last_char_is_a_letter(\"not the quick brown fox jumps over the lazy dog.\")     == False\nassert     check_if_last_char_is_a_letter(\"The\")             == False\nassert     check_if_last_char_is_a_letter(\"The quick brown fox jumps over the lazy dog.\")     == True\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"The quick brown fox jumps over the lazy dog\") == False\nassert     check_if_last_char_is_a_letter(\"is\") == True\nassert     check_if_last_char_is_a_letter(\"the lazy dog\") == True\nassert     check_if_last_char_is_a_letter(\"the quick brown fox jumps\") == True\nassert     check_if_last_char_is_a_letter(\"\") == True\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter('abc') == False\nassert check_if_last_char_is_a_letter('abcdef') == True\nassert check_if_last_char_is_a_letter('abcdefghijklmnopqrstuvwxyz') == True\nassert check_if_last_char_is_a_letter('abcdefghijklmnopqrstuvwxyzabc') == False\nassert check_if_last_char_is_a_letter('abc def ghijklmnopqrstuvwxyz') == True\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 4, 6]\n    # can_arrange should return 2 because 2 is not greater than or equal\n    # to 2 before it.\n    print(can_arrange(arr))\n\n    arr = [1, 2, 2, 3, 4, 6, 6]\n    # can_arrange should return -1 because 6 is not greater than or equal\n    # to 2 before it.\n    print(can_arrange(arr))\n\n    arr = []\n    # can_arrange should return -1 because an empty array can never contain\n    # a non-increasing subsequence.\n    print(can_arrange(arr))\n\n    arr = [1, 2, 2, 3, 4, 6]\n    # can_arrange should return 0 because all the elements in the array are\n    # smaller than or equal to the element before them.\n    print(can_arrange(arr))"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(can_arrange([\"G\", \"F\", \"E\", \"E\", \"D\", \"C\"])) # returns 3\nassert \nprint(can_arrange([\"A\", \"B\", \"C\"])) # returns -1\nassert \nprint(can_arrange([\"G\", \"F\", \"E\"])) # returns -1\nassert \nprint(can_arrange([\"A\", \"B\", \"C\", \"D\"])) # returns 0\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     can_arrange([]), \"empty\"\nassert     can_arrange([4,4,4]), \"duplicate\"\nassert     can_arrange([1,2,3,3,3]), \"exceeding\"\nassert     can_arrange([1,2,3,3,3,2,1]), \"ascending\"\nassert     can_arrange([1,2,3,3,4]), \"exceeding\""
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     can_arrange([0,1,2,3,4]) == 1\nassert     can_arrange([3,1,2,0,4]) == 2\nassert     can_arrange([4,1,2,0,3]) == -1\nassert     can_arrange([4,1,2,3,0]) == 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test the function\n    arr = [1, 2, 5, 3, 4]\n    print(can_arrange(arr))"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     can_arrange([\"a\",\"b\",\"c\"]) == 2\nassert     can_arrange([\"a\",\"a\",\"c\"]) == -1\nassert     can_arrange([\"a\",\"b\",\"a\"]) == 0\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nlargest_smallest_integers([3, -4, 1]) == (3, -4)\nassert largest_smallest_integers([3, 4, -1]) == (4, -1)\nassert largest_smallest_integers([-3, -4, -1]) == (None, -3)\nassert largest_smallest_integers([-3, 4, -1]) == (None, -3)\nassert largest_smallest_integers([-3, 3, -1]) == (None, -3)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([-1, 2, 3, 4]) == (3, -1)\nassert     largest_smallest_integers([0]) == (0, 0)\nassert     largest_smallest_integers([-1, -3, 2, 3, 4]) == (4, -3)\nassert     largest_smallest_integers([-1, -3, -5, 2, 3, 4]) == (4, -5)\nassert     largest_smallest_integers([-1, -3, -5, 2, 3, 4, -2, -4]) == (4, -5)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert (largest_smallest_integers([-2, -1, -4, -5, -8, -9, -5, -3, -6]) == (5, -5))\nassert (largest_smallest_integers([-2, -1, -4, -5, -8, -9, -5, -3, -6]) == (5, -3))\nassert (largest_smallest_integers([-2, -1, -4, -5, -8, -9, -5, -3, -6]) == (5, -5))\nassert (largest_smallest_integers([-2, -1, -4, -5, -8, -9, -5, -3, -6]) == (5, -3))\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_lst = [1, 2, 3, 4, 5]\n    assert largest_smallest_integers(test_lst) == (5, 1"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(5,3) == 5 \nassert     compare_one(5,'5') == 5 \nassert     compare_one(5.5,'5') == 5 \nassert     compare_one('5','5') == 5 \nassert     compare_one('5.5','5.5') == 5 \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare_one(2, 2.0)     == None\nassert     compare_one(1, 2.0)     == 1\nassert     compare_one('2', '2')     == None\nassert     compare_one('5', '2')     == 5\nassert     compare_one('2.0', '2.0') == None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare_one(1, '2')     == None\nassert     compare_one('3', '2')     == None\nassert     compare_one('3.0', '2.0')     == None\nassert     compare_one('3', '2.0')     == '3'\nassert     compare_one('3.0', '3.0')     == '3.0'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(2, 2.0) == 2.0\nassert     compare_one('5', '5') == 5\nassert     compare_one('5', 5) == 5\nassert     compare_one(2, '5') == '5'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    compare_one(1, 1) == None\n    compare_one(1, 2) == 2\n    compare_one(1.5, 1.5) == None\n    compare_one('1.5', 1.5) == 1.5\nassert compare_one(1, 2) == None\nassert compare_one(1, 1) == 1\nassert compare_one(1.5, 1.5) == 1.5\nassert compare_one('1.5', 1.5) == 1.5"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare_one(2, 1)    ==    \"2\"\nassert     compare_one(4, 1)    ==    \"4\"\nassert     compare_one(1, 1)    ==    None\nassert     compare_one(1.1, 1)    ==    \"1.1\"\nassert     compare_one(\"2.5\", 1)    ==    \"2.5\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare_one(1, 1) == None, 'Wrong'\nassert     compare_one(1, 1.0) == None, 'Wrong'\nassert     compare_one(1.0, 1) == None, 'Wrong'\nassert     compare_one(1.0, 1.0) == 1, 'Wrong'\nassert     compare_one(1.1, 1.0) == None, 'Wrong'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare_one(1, 2) == 2\nassert    compare_one(1.5, 2) == 2\nassert    compare_one(\"1.5\", 2) == 2\nassert    compare_one(1.5, 2.5) == 2.5\nassert    compare_one(\"1.5\", 2.5) == 2.5\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(0) == False\nassert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(18) == False\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(14) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(12) == False\nassert     is_equal_to_sum_even(24) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(12) == True, \"Error 1\"\nassert     is_equal_to_sum_even(13) == False, \"Error 2\"\nassert     is_equal_to_sum_even(11) == False, \"Error 3\"\nassert     is_equal_to_sum_even(14) == True, \"Error 4\"\nassert     is_equal_to_sum_even(20) == False, \"Error 5\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not is_equal_to_sum_even(0)\nassert not is_equal_to_sum_even(1)\nassert is_equal_to_sum_even(2)\nassert is_equal_to_sum_even(3)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(0)     == False\nassert     is_equal_to_sum_even(1)     == False\nassert     is_equal_to_sum_even(2)     == False\nassert     is_equal_to_sum_even(3)     == False\nassert     is_equal_to_sum_even(5)     == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert is_equal_to_sum_even(10) == True\nassert is_equal_to_sum_even(11) == False\nassert is_equal_to_sum_even(12) == False\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     special_factorial(2) == 2\nassert     special_factorial(6) == 720\nassert     special_factorial(7) == 5040\nassert     special_factorial(8) == 40320\nassert     special_factorial(9) == 362880\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         special_factorial(0) == 1\nassert         special_factorial(1) == 1\nassert         special_factorial(3) == 6\nassert         special_factorial(10) == 3628800\nassert         special_factorial(10) == 5540622424\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     special_factorial(0) == 1, \"The value must be 1\"\nassert     special_factorial(1) == 1, \"The value must be 1\"\nassert     special_factorial(2) == 2, \"The value must be 2\"\nassert     special_factorial(3) == 6, \"The value must be 6\"\nassert     special_factorial(4) == 24, \"The value must be 24\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"Fixed spaces:\", fix_spaces(\"first text  second text\"))\nprint(\"Fixed spaces:\", fix_spaces(\"first second text\"))\nprint(\"Fixed spaces:\", fix_spaces(\"first second text   \"))\nprint(\"Fixed spaces:\", fix_spaces(\"first   second text\"))\nprint(\"Fixed spaces:\", fix_spaces(\"first\\t second text\"))\n\nprint(\"\\n# 7\")\n\ndef make_point(x, y):\n    \"\"\"\n    Given two ints, x and y, return a point with coordinates (x, y).\n    \"\"\"\n    pass\n\ndef distance_between_points(p1, p2):\n    \"\"\"\n    Return the distance between two points, (x, y).\n    \"\"\"\n    pass\n\ndef get_center(p1, p2):\n    \"\"\"\n    Return a point that is the center of the rectangle formed by p1 and p2.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fix_spaces(\"HeyThere\") == \"Hey_There\"\nassert     fix_spaces(\"Hey_There\") == \"Hey_There\"\nassert     fix_spaces(\"Hey_There_\") == \"Hey_There_\"\nassert     fix_spaces(\"Hey_There__\") == \"Hey_There__\"\nassert     fix_spaces(\"Hey_There___\") == \"Hey_There___\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fix_spaces(\"I am the man\") == \"I_am_the_man\"\nassert     fix_spaces(\"I am the man I want\") == \"I_am_the_man_I_want\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    text = \"Hello there\"\nfix_spaces(text) == \"hello-there\"\nassert text == \"hello-there\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     file_name_check('12345.txt') == 'No'\nassert     file_name_check('a.txt') == 'No'\nassert     file_name_check('a_b_c.txt') == 'No'\nassert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('a.b.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     file_name_check('abc.txt')    ==     'No'\nassert     file_name_check('0123.txt')     ==     'No'\nassert     file_name_check('a.txt')     ==     'No'\nassert     file_name_check('a.exe')     ==     'Yes'\nassert     file_name_check('a.dll')     ==     'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('abc.txt.') == 'Yes'\nassert     file_name_check('abc.txt..') == 'No'\nassert     file_name_check('abc.txt...') == 'No'\nassert     file_name_check('abc.txt.../abc.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef file_path_check(file_path):\n    \"\"\"Create a function which takes a string representing a file's path, and returns\n    'Yes' if the the file's path is valid, and returns 'No' otherwise.\n    A file's path is considered to be valid if and only if all the following conditions \n    are met:\n    - The path starts with a slash, and it should be at least two characters long.\n    - The path does not end with a slash, and it should be at least two characters long.\n    - The path is inside a './' directory.\n    - The path ends with one of the following four extensions:\n        -.txt\n        -.exe\n        -.dll\n        -.py\n    \"\"\"\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('file.txt') == 'No'\nassert     file_name_check('file.exe') == 'No'\nassert     file_name_check('file.dll') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     file_name_check(\"a.txt\") == \"No\"\nassert     file_name_check(\"3.exe\") == \"No\"\nassert     file_name_check(\"30.txt\") == \"No\"\nassert     file_name_check(\"4.exe\") == \"Yes\"\nassert     file_name_check(\"4.txt\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     file_name_check('abcd.txt') == 'No', \\\n        \"Wrong output for file_name_check('abcd.txt')\"\nassert     file_name_check('abcd.txt') == 'No', \\\n        \"Wrong output for file_name_check('abcd.txt')\"\nassert     file_name_check('abcd.txt') == 'No', \\\n        \"Wrong output for file_name_check('abcd.txt')\"\nassert     file_name_check('abcd.txt') == 'No', \\\n        \"Wrong output for file_name_check('abcd.txt')\"\nassert     file_name_check('abcd.txt') == 'Yes', \\\n        \"Wrong output for file_name_check('abcd.txt')\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('dir\\n') == 'No'\nassert     file_name_check('dir.1.txt') == 'Yes'\nassert     file_name_check('dir.1.1.txt') == 'No'\nassert     file_name_check('a.b.c.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     file_name_check(\"abc123\") == \"No\"\nassert     file_name_check(\"abc123.txt\") == \"Yes\"\nassert     file_name_check(\"a.txt\") == \"No\"\nassert     file_name_check(\"a.t\") == \"Yes\"\nassert     file_name_check(\"1.txt\") == \"Yes\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([2, 3, 4, 5, 6, 7, 8]) == 145\nassert     sum_squares([2, 3, 6, 7, 8, 8, 9, 9]) == 116\nassert     sum_squares([2, 3, 8, 8, 9, 9, 10, 10]) == 300\nassert     sum_squares([2, 3, 9, 9, 10, 10, 11, 11]) == 208\nassert     sum_squares([2, 4, 8, 8, 10, 10, 12, 12]) == 176\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert sum_squares([]) == 0\n    assert sum_squares([5]) == 5 ** 2\n    assert sum_squares([1, 2, 3]) == 2 * (1 ** 2) + 3 * (2 ** 2)\n    assert sum_squares([1, -2, -3]) == - 1 ** 2 - 2 ** 2 + 3 ** 2\n    "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"*\" * 30)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('The sum of the squared entries in the list is', sum_squares(lst))\n\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert sum_squares([1,2,3,4,5,6,7,8,9,10]) == 1"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_squares(None) == None, \"Expected None, got {}\".format(sum_squares(None))\nassert sum_squares([1,2,3,4]) == None, \"Expected None, got {}\".format(sum_squares([1,2,3,4]))\nassert sum_squares([1,3,5,7]) == 34, \"Expected 34, got {}\".format(sum_squares([1,3,5,7]))\nassert sum_squares([1,3,5,7,9]) == 57, \"Expected 57, got {}\".format(sum_squares([1,3,5,7,9]))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert words_in_sentence(\"a b\") == \"a b\"\nassert words_in_sentence(\" a  b\") == \"a b\"\nassert words_in_sentence(\"a  b\") == \"a b\"\nassert words_in_sentence(\"  a b\") == \"a b\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"Hello world\") == \"Hello world\"\nassert     words_in_sentence(\"hello world\") == \"hello world\"\nassert     words_in_sentence(\"a b c\") == \"a b c\"\nassert     words_in_sentence(\"a  b c\") == \"a b c\"\nassert     words_in_sentence(\"a b c   \") == \"a b c\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"It is a period of time when a prince is being held in one hand and another hand in another. At the same time, he holds his own hand to his wife.\") == \"it is a period of time when a prince is being held in one hand and another hand in another\"\nassert words_in_sentence(\"It's a period of time when a prince is being held in one hand and another hand in another. At the same time, he holds his own hand to his wife.\") == \"it's a period of time when a prince is being held in one hand and another hand in another\"\nassert words_in_sentence(\"A period of time when a prince is being held in one hand and another hand in another. At the same time, he holds his own hand to his wife.\") == \"a period of time when a prince is being held in one hand and another hand in another\"\nassert words_in_sentence(\"A period of time when a prince is being held in one hand and another hand in another. At the same time, he holds his own hand to his wife.\") == \"a period of time when a prince is being held in one hand and another hand in another\"\nassert words_in_sentence(\"A period of time when a prince is being held in one hand and another hand in another. At the same time, he holds his own hand to his wife.\") == \"a period of time when a prince is being held in one hand and another hand in another\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    \n    print(\"All tests passed!\")\n\n\n    sentence = \"the cat sat on the mat\"\n    \n    print(words_in_sentence(sentence))\n\n    sentence = \"the cat and the dog sat on the mat\"\n    \n    print(words_in_sentence(sentence))\n\n    sentence = \"the cat and the dog\"\n    \n    print(words_in_sentence(sentence))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(words_in_sentence(\"I am a sentence\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"he i jumped\"\nassert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"he i jumped\"\nassert words_in_sentence(\"the quick brown fox\") == \"he i\"\nassert words_in_sentence(\"the quick brown fox jumps\") == \"he i j\"\nassert words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"he i j jumped\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     simplify('2/3', '2/3') == True\nassert     simplify('2/6', '2/6') == True\nassert     simplify('1/3', '1/3') == True\nassert     simplify('1/2', '1/2') == False\nassert     simplify('5/2', '5/2') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     simplify(\"1/5\", \"2\") == False\nassert     simplify(\"1/5\", \"4\") == True\nassert     simplify(\"1/2\", \"1\") == False\nassert     simplify(\"1/2\", \"2\") == True\nassert     simplify(\"2/2\", \"1\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     simplify('0.5', '10') is False, '1/10'\nassert     simplify('0.1', '10') is False, '1/10'\nassert     simplify('0.2', '10') is False, '1/10'\nassert     simplify('0.3', '10') is False, '1/10'\nassert     simplify('0.4', '10') is False, '1/10'\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     simplify(('1/5'), ('1/5'))\nassert     simplify(('5/6'), ('2/3'))\nassert     simplify(('1/2'), ('1/4'))\nassert     simplify(('1/5'), ('3/4'))\nassert     simplify(('3/4'), ('1/2'))\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef part_2(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsimplify(\"2/2\", \"2/2\") == True\nassert simplify(\"2/3\", \"2/3\") == False\nassert simplify(\"1/10\", \"1/10\") == True\nassert simplify(\"1/9\", \"1/9\") == False\nassert simplify(\"3/4\", \"3/4\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     simplify('1', '4') == False, \\\n            'simplify(\"1\", \"4\")'\nassert     simplify('2', '4') == False, \\\n            'simplify(\"2\", \"4\")'\nassert     simplify('3', '4') == False, \\\n            'simplify(\"3\", \"4\")'\nassert     simplify('3', '5') == False, \\\n            'simplify(\"3\", \"5\")'\nassert     simplify('4', '4') == True, \\\n            'simplify(\"4\", \"4\")'\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # True if x * n is a whole number and False otherwise.\n    assert simplify('5/4', '1/4') == True, 'The function does not behave as expected.'\n    assert simplify('1/2', '3/2') == True, 'The function does not behave as expected.'\n    assert simplify('10/3', '5/2') == False, 'The function does not behave as expected.'"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([0]) == [0]\nassert     order_by_points([1,3]) == [1,3]\nassert     order_by_points([2,2,1]) == [2,1,2]\nassert     order_by_points([2,5,3,4,6,3,1]) == [1,3,4,3,5,2,6]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([]) == []\nassert order_by_points([1]) == [1]\nassert order_by_points([1, 2]) == [1, 2]\nassert order_by_points([3, 2, 1]) == [1, 2, 3]\nassert order_by_points([3, 3, 2, 1]) == [1, 2, 3, 3]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\"\"\"\nTask 3\n\"\"\"\ndef group_by_sum(nums):\n    \"\"\"\n    Write a function which receives a list of integers and\n    returns a dictionary of all elements with the sum of their digits as a key\n    and their index as a value.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     order_by_points([3, 6, 7]) ==  [6, 7, 3]\nassert     order_by_points([14, 55, 92, 63, 52, 17, 20]) ==  [92, 55, 52, 63, 17, 20, 14]\nassert     order_by_points([8, 5, 3, 3, 3, 2, 1]) ==  [2, 3, 3, 3, 5, 8, 3]"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([0, 10, 10, 0, 1, -1, 1000]) == [-1, 0, 0, 1, 10, 10, 10]\n\n\ndef group_anagrams(words):\n    \"\"\"\n    Write a function which takes a list of strings\n    and returns a list of lists that contains each\n    anagrams as a list.\n    Anagrams should be sorted alphabetically.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     order_by_points([0, 1, 3, 4, 7]) == [0, 1, 4, 7, 3]\nassert     order_by_points([0, 1, 3, 4, 7]) == [0, 1, 4, 7, 3]\nassert     order_by_points([0, 1, 3, 4, 7]) == [0, 1, 4, 7, 3]\nassert     order_by_points([0, 1, 3, 4, 7]) == [0, 1, 4, 7, 3]\nassert     order_by_points([0, 1, 3, 4, 7]) == [0, 1, 4, 7, 3]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     order_by_points([5,2,3,1]) == [1,2,3,5]\nassert     order_by_points([3,1,4,1]) == [1,1,4,3]\nassert     order_by_points([3,1,2,4,1]) == [1,1,2,4,3]\nassert     order_by_points([2,2,2,2,2]) == [2,2,2,2,2]\nassert     order_by_points([2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([1,2,3,4,5]) == [1,2,4,5,3], 'fail'\nassert     order_by_points([10,11,12,13,14]) == [10,11,12,13,14], 'fail'\nassert     order_by_points([1,23,4,5,6,7]) == [1,4,5,6,7,23], 'fail'\nassert     order_by_points([0,10,20,30,40,50,60,70]) == [0,10,20,30,40,50,60,70], 'fail'\nassert     order_by_points([0,0,0,1,1,1,2,2,2]) == [0,0,0,1,1,1,2,2,2], 'fail'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     order_by_points([1, 3, 7, 10, 3, 4, 2, 5, 8, 9]) == [1, 2, 3, 4, 5, 7, 8, 9, 10, 3, 4]\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(specialFilter([0, 3, 1, 8, 9, 9]))\nassert specialFilter([11, 22, 33, 44]) == 0\nassert specialFilter([1, 2, 3, 4, 5, 6, 7]) == 6\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8]) == 5\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\nassert     specialFilter([5, 5, 9, 9, 9, 9, 9, 7, 8, 8, 8, 8, 8, 8, 8, 8]) == 5\nassert     specialFilter([9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 0\nassert     specialFilter([5, 5, 9, 9, 9, 9, 9, 7, 8, 8, 8, 8, 8, 8, 8, 8]) == 5\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     specialFilter(    [1,2,3,4,5,6,7,8,9,10]) == 5\nassert     specialFilter(    [3,2,1,10,4,8,7,6,5,9]) == 2\nassert     specialFilter(    [0]) == 0\nassert     specialFilter(    []) == 0\nassert     specialFilter(    [1,1]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Testing'specialFilter' (this may take a few minutes)...\")"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    specialFilter([])\n    assert specialFilter([]) == 0\n    specialFilter([1, 2, 3, 4])\n    assert specialFilter([4, 5, 6, 7]) == 4\n    specialFilter([4, 5, 6, 8])\n    assert specialFilter([3, 2, 1]) == 3\n    specialFilter([2, 2, 2, 2, 2, 2])\n    "
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 1, \\\n        \"Wrong result for first example.\"\nassert     specialFilter([2, 4, 6, 8, 10]) == 2, \\\n        \"Wrong result for second example.\"\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    specialFilter(nums) == 4, \"Should return 4\"\n    \n    "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_max_triples(2) == 3\nassert     get_max_triples(4) == 6\nassert     get_max_triples(5) == 11\nassert     get_max_triples(6) == 21\n\n\nif __name__ == '__main__':\n    print('Testing get_max_triples:')\n    print('get_max_triples(2) == 3')\n    print('get_max_triples(4) == 6')\n    print('get_max_triples(5) == 11')\n    print('get_max_triples(6) == 21'"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nn = 2\nassert get_max_triples(n) == 2\n\nn = 10\nassert get_max_triples(n) == 6\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_max_triples_fast(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nget_max_triples(5) == 6\nget_max_triples(10) == 20\nget_max_triples(15) == 50\nget_max_triples(20) == 120\nget_max_triples(25) == 500\nget_max_triples(30) == 1200\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nget_max_triples(3) == 1\nassert get_max_triples(4) == 2\nassert get_max_triples(5) == "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_max_triples(5) == 3, \"Wrong answer\"\nassert get_max_triples(10) == 6, \"Wrong answer\"\nassert get_max_triples(15) == 9, \"Wrong answer\"\n\ndef is_prime(n):\n    \"\"\"\n    You are given a positive integer n. You have to check if it is prime or not.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bf(\"mercury\", \"venus\") == ('venus','mercury')\nassert     bf(\"venus\", \"earth\") == ('mercury','venus', 'earth')\nassert     bf(\"earth\", \"mars\") == ('venus','mercury', 'earth','mars')\nassert     bf(\"mars\", \"jupiter\") == ('earth','venus','mercury','mars', 'jupiter')\nassert     bf(\"jupiter\", \"saturn\") == ('mars', 'earth','mercury','mars', 'jupiter','saturn')\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bf('Mercury', 'Venus') == (('Mercury', 'Venus'), ('Venus', 'Earth'), ('Earth', 'Mars'), ('Mars', 'Jupiter'), ('Jupiter', 'Saturn'), ('Saturn', 'Uranus'), ('Uranus', 'Neptune'))\nassert     bf('Saturn', 'Uranus') == ()\nassert     bf('Earth', 'Mars') == ()\nassert     bf('Earth', 'Jupiter') == ()\nassert     bf('Mercury', 'Mars') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\")\nassert bf(\"Earth\", \"Mercury\") == (\"Mercury\", \"Earth\")\nassert bf(\"Mars\", \"Jupiter\") == (\"Mars\", \"Jupiter\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Mercury\", \"Uranus\")\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    bf('earth','mars') == ('mars',)\n    bf('venus','mars') == ('mars',)\n    bf('mars','venus') == ('venus',)\n    bf('venus','venus') == ()\n    bf('mars', 'earth') == ('mars', 'earth')\n    bf('mars','mars') == ('mars',)\n    bf('venus', 'earth') == ('earth',)\n    bf('earth', 'earth') == ('earth',)\n    bf('earth','mars') == ('mars',)\n    bf('mars', 'earth') == ('earth',)\n    bf('mars','venus') == ('venus',)\n    bf('earth','venus') == ('venus',)\n    bf('mars','venus') == ('venus',)\n    bf('venus', 'earth') == ('earth',)\n    bf('earth', 'earth') == ('earth',)\n    bf('earth','venus') == ('venus',)\n    bf('venus', 'earth') == ('earth',)\n    bf('earth','mars') == ('mars',)\n    bf('mars', 'earth') == ('earth',)\n    bf('venus','mars') == ('mars',)\n    bf('mars','venus') == ('venus',)\n    bf('venus','mars') == ('mars',)\n    bf('earth','mars') == ('mars',)\n    bf('mars', 'earth') == ('earth',)\n    bf('venus','mars') == ('mars',)\n    bf('mars','venus') == ('venus',)\n    bf('venus','mars') == ('mars',)\n    bf('earth','venus') == ('venus',)\n    bf('mars','venus') == ('venus',)\n    bf('mars', 'earth') == ('earth',)\n    bf('earth','mars') == ('mars',)\n    bf('earth','venus') == ('venus',)\n    bf('venus', 'earth') == ('earth',)\n    bf('earth', 'earth') == ('earth',)\n    bf('earth','mars') == ('mars',)\n    bf('mars', 'earth') == ('earth',)\n    bf('earth','mars') == ('mars',)\n    bf('venus', 'earth') == ('earth',)\n    bf('earth','venus') == ('venus',)\n    bf('mars','venus') == ('venus',)\n    bf('venus','mars') == ('mars',)\n    bf('mars','mars') == ('mars',)\n    bf('earth','mars') == ('mars',)\n    bf('mars', 'earth') == ('earth',)\n    bf('venus','mars') == ('mars',)\n    bf('mars','venus') == ('venus',)\n    bf('earth', 'earth') == ('earth',)\n    bf('mars', 'earth') == ('earth',)\n    bf('mars','mars') == ('mars',)\n    bf('mars','venus') == ('venus',)\n    bf('earth','venus') == ('venus',)\n    bf('mars','venus') == ('venus',)\n    bf('venus','mars') == ('mars',)\n    bf('earth','mars') == ('mars',)\n    bf('mars', 'earth') == ('earth',)\n    bf('mars','mars') == ('mars',)\n    bf('mars','venus') == ('venus',)\n    bf('earth','venus') == ('venus',)\n    bf('mars','venus') == ('venus',)\n    bf('venus','mars') == ('mars',)\n    bf('earth', 'earth') == ('earth',)\n    bf('mars', 'earth') == ('earth',)\n    bf('venus', 'earth') == ('earth',)\n    bf('earth','mars') == ('mars',)"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bf('mercury','venus') == (('mercury','venus', 'earth'), \n                                        ('venus', 'earth','mars'), \n                                        ('earth','mars', 'jupiter'), \n                                        ('mars', 'jupiter','saturn'), \n                                        ('jupiter','saturn', 'uranus'), \n                                        ('saturn', 'uranus', 'neptune'), \n                                        ('uranus', 'neptune', 'pluto'))\n\nassert     bf('mercury','venus') == ()\nassert     bf('venus', 'earth') == ()\nassert     bf('jupiter', 'neptune') == ()\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef bf2(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    pass\n\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bf('Earth', 'Mercury') == ('Mercury', 'Venus', 'Earth'), 'incorrect name'\nassert     bf('Mars', 'Venus') == ('Venus', 'Earth', 'Mars'), 'incorrect name'\nassert     bf('Saturn', 'Earth') == (), 'incorrect name'\nassert     bf('Jupiter', 'Saturn') == ('Saturn', 'Jupiter', 'Earth'), 'incorrect name'\nassert     bf('Uranus', 'Earth') == ('Earth', 'Uranus'), 'incorrect name'"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sorted_list_sum([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert sorted_list_sum([\"3\", \"2\", \"1\"]) == [\"1\", \"2\", \"3\"]\nassert sorted_list_sum([\"3\", \"2\", \"1\", \"1\"]) == [\"1\", \"1\", \"2\", \"3\"]\nassert sorted_list_sum([\"1\", \"4\", \"1\", \"4\", \"2\"]) == [\"1\", \"2\", \"1\", \"4\", \"4\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"aaaaa\", \"aaaa\", \"a\", \"aa\", \"a\"]\nassert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == [\"aaaaa\", \"aaaa\", \"a\", \"aa\", \"a\"]\nassert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaa\"]) == [\"aaaaaa\", \"aaaaaa\", \"aaaaa\", \"aaaa\", \"aaa\", \"aa\", \"a\"]\nassert sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaa\"]) == [\"aaaaaa\", \"aaaaaa\", \"aaaaa\", \"aaaa\", \"aaa\", \"aa\", \"a\"]\n\n\nif __name__ == \"__main__\":\n    lst_arg = sorted([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"])\n    print(lst_arg)\n    print(sorted_list_sum(lst_arg))"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"pig\", \"cat\", \"time\", \"me\"]\n    sorted_list_sum([\"great\", \"good\", \"best\"]) == [\"best\", \"good\", \"great\"]\n    sorted_list_sum([\"me\"]) == [\"me\"]\n    sorted_list_sum([\"poop\"]) == [\"poop\"]\n    sorted_list_sum([]) == []\n    sorted_list_sum([1,2,3,4,5]) == []\n    sorted_list_sum([1,2,3]) == []\n    sorted_list_sum([\"time\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"pig\", \"time\", \"me\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"pig\", \"time\", \"me\"]\n    sorted_list_sum([\"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"pig\", \"me\"]\n    sorted_list_sum([\"a\"]) == [\"a\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"pig\", \"me\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\"]\n    sorted_list_sum([\"time\", \"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\", \"time\"]\n    sorted_list_sum([\"me\", \"bella\", \"cat\", \"dog\", \"pig\"]) == [\"bella\", \"dog\", \"cat\", \"me\", \"pig\"]\n    sorted_list_sum([\"me\", "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"OK\")\n\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sorted_list_sum(['ab', 'a', 'cd', 'abc', 'abcd']) == ['abc', 'ab', 'abcd']\nassert     sorted_list_sum(['a', 'ab', 'abc', 'abcd']) == ['a', 'ab', 'abc', 'abcd']\nassert     sorted_list_sum(['ab', 'cd', 'ab', 'a']) == ['ab', 'ab', 'abc', 'abcd']\nassert     sorted_list_sum(['a', 'abc', 'ab', 'a']) == ['a', 'ab', 'abc', 'abcd']\nassert     sorted_list_sum(['ab', 'abcd', 'abc', 'a']) == ['ab', 'abcd', 'abc', 'abcd']\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"one\", \"two\", \"three\", \"four\"]) == [\"one\", \"two\", \"three\", \"four\"]\nassert     sorted_list_sum([\"one\", \"two\", \"three\", \"three\"]) == [\"one\", \"two\", \"three\"]\nassert     sorted_list_sum([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\nassert     sorted_list_sum([\"one\", \"two\", \"three\", \"four\", \"five\"]) == [\"one\", \"two\", \"three\", \"four\", \"five\"]\nassert     sorted_list_sum([\"one\", \"two\", \"three\", \"four\", \"five\"]) == [\"one\", \"two\", \"three\", \"four\", \"five\"]\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     x_or_y(2, 0, 0) == 0\nassert     x_or_y(2, 1, 0) == 1\nassert     x_or_y(3, 0, 1) == 1\nassert     x_or_y(2, 0, 1) == 0\nassert     x_or_y(3, 1, 1) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert x_or_y(2, 1, 1) == 1\nassert x_or_y(2, 0, 1) == 0\nassert x_or_y(3, 1, 1) == 1\nassert x_or_y(3, 0, 1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     double_the_difference([1,2,3,4,5,6,7,8,9,10]) == 0\nassert     double_the_difference([]) == 0\nassert     double_the_difference([0,1,2,3,4,5,6,7,8,9,10]) == 0\nassert     double_the_difference([-1,2,-3,4,5,6,7,8,9,10]) == 2\nassert     double_the_difference([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 10\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    double_the_difference([1, 3, 5, 7, 9]) == 25\n    double_the_difference([1, 3, 5, 7, 9]) == 25\n    double_the_difference([-1, -3, -5, -7, -9]) == 0\n    double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5]) == 1 + 8\nassert     double_the_difference([-1, 2, 3, 4, 5]) == 0\nassert     double_the_difference([]) == 0\nassert double_the_difference([1, 2, 3, 4, -5, 6]) == 2 + 6\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     double_the_difference([5,2,4,8,-2]) == 4, \"True\"\nassert     double_the_difference([]) == 0, \"False\"\nassert     double_the_difference([1,1,1]) == 0, \"False\"\nassert     double_the_difference([2]) == 4, \"False\"\nassert     double_the_difference([3,4,5]) == 1, \"False\"\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert double_the_difference([-1, -2, -3, -4]) == 0, 'You failed at a double_the_difference test.'\n\nassert double_the_difference([1, 2, 3, 4]) == 14, 'You failed at a double_the_difference test.'\n\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(compare([5,3], [6,1]))\nprint(compare([2,5], [3,1]))\nprint(compare([4,5], [5,1]))\nprint(compare([1,2], [2,2]))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare([5,4,5,6,3,1,1], [6,6,6,3,5,2,5]) == [0,2,0,0,0,1,0]\nassert     compare([4,2,3,4,5], [5,4,3,4,2]) == [0,2,0,0,0]\nassert     compare([4,2,3,4,5], [4,2,3,4,2]) == [2,2,0,0,2]\nassert     compare([4,2,3,4,5], [5,4,3,4,2]) == [0,2,0,0,2]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert compare([2,3,4,5,6,7],[4,5,6,7,8,9]) == [0,0,0,0,0,0], 'wrong'\nassert compare([1,2,3,4,5,6],[1,2,3,4,5,6]) == [0,0,0,0,0,0], 'wrong'\nassert compare([1,2,3,4,5,6],[1,2,3,4,5,7]) == [0,0,0,0,1,0], 'wrong'\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare([2, 2, 1, 2, 4, 4], [2, 4, 4, 2, 2, 2])     == [0, 0, 0, 1, 0, 0]\nassert     compare([1, 2, 4, 4, 5, 5], [2, 2, 2, 2, 2, 2])     == [0, 0, 0, 0, 0, 0]\n\nprint(\"You're all set!\")"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare([1,5,8,9,10],    [1,5,8,8,10]) == [], \"[1,5,8,9,10] vs. [1,5,8,8,10]: Different\"\nassert     compare([1,5,8,9,10],    [1,5,8,8,9]) == [0,], \"[1,5,8,9,10] vs. [1,5,8,8,9]: Same\"\nassert     compare([1,5,8,9,10],    [1,5,8,8,10]) == [0,0,], \"[1,5,8,9,10] vs. [1,5,8,8,10]: Same\"\nassert     compare([1,5,8,9,10],    [1,5,8,8,10]) == [0,1,], \"[1,5,8,9,10] vs. [1,5,8,8,9]: Different\"\nassert     compare([1,5,8,9,10],    [1,5,8,8,9]) == [0,0,0,], \"[1,5,8,9,10] vs. [1,5,8,8,9]: Same\"\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     compare([10,10],    [0,0]) == [0,0]\nassert     compare([10,15],    [10,0]) == [1,2]\nassert     compare([10,15],    [15,0]) == [2,0]\nassert     compare([15,10],    [10,0]) == [-1,1]\n\ndef compare_v2(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare([3,5,6,2,4],[2,6,5,4,3]) == [0,0,3,0,3]\nassert compare([5,6,2,3,4],[5,4,6,3,2]) == [0,0,2,3,3]\nassert compare([5,6,2,3,4],[3,5,6,4,2]) == [0,3,0,0,2]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare([5,3,4],[5,3,2]) == [0,0,0], \"First test failed\"\nassert     compare([3,4,4],[4,3,2]) == [2,2,0], \"Second test failed\"\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncompare([5,2], [2,5]) == [0,2]\n\ncompare([5,2], [2,4]) == [1,2]\n\ncompare([5,2], [3,4]) == [2,1]\n\ncompare([5,2], [1,2]) == [0,1]\n\ncompare([5,2], [2,4]) == [1,2]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef Weakest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The \n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the weakest extension and return a string in this format: \n    ClassName.WeakestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'Cheese' is the weakest extension \n    (its strength is 1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed'] ) == 'Slices.SErviNGSliCes'\n    \n    "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'WRONG'\nassert     Strongest_Extension('Meatball', ['Egg', 'Pean', 'Bacon', 'Spinach']) == 'Meatball.Egg', 'WRONG'\nassert     Strongest_Extension('Cauliflower', ['Ham', 'Beef', 'Potato']) == 'Cauliflower.Beef', 'WRONG'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Egg', 'Pean', 'Bacon', 'Spinach']) == 'Slices.SErviNGSliCes', 'WRONG'\nassert     Strongest_Extension('Slices', ['Cheese', 'StuFfed']) == 'Slices.StuFfed', 'WRONG'\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(class_name, extensions) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(class_name, extensions) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(class_name, extensions) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(class_name, extensions) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension(class_name, extensions) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_raw_data():\n    \"\"\"You will be provided a file called raw.txt. Each line of this file \n    will be an integer, representing a number in base 2. The file will have\n    the following formatting: \n\n    the first line is a header, containing 1, 2, and 3 \n    the second line contains the first element in the list\n    the third line contains the second element in the list\n    and so on\n    \"\"\"\n    pass\n\ndef Binary_to_Decimal(binary):\n    \"\"\"You will be given a string representing a binary number. The number may \n    contain whitespaces. The binary numbers are case sensitive, so you should \n    consistently use upper and lower case letters. Each binary digit is 1 or 0. \n    For example, if the string is '100100', then the number is 16, which \n    represents the number 2^16.\n    You should return the decimal representation of the binary string.\n    \"\"\"\n    pass\n\ndef Decimal_to_Binary(decimal):\n    \"\"\"You will be given a decimal number. The number may be positive, negative,\n    or 0. You should convert it to binary, and return the resulting string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check('dog', 'god') == True\nassert     cycpattern_check('cat', 'cactt') == False\nassert     cycpattern_check('a', 'a') == True\nassert     cycpattern_check('a', 'aa') == True\nassert     cycpattern_check('a', 'aaa') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncycpattern_check(\"abc\", \"xyz\") == True\nassert cycpattern_check(\"abc\", \"abc\") == True\nassert cycpattern_check(\"xyz\", \"abc\") == True\nassert cycpattern_check(\"abc\", \"abc\") == True\nassert cycpattern_check(\"xyz\", \"abc\") == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncycpattern_check(\"abc\",\"abc\")== True\ncycpattern_check(\"abc\",\"acb\") == False\ncycpattern_check(\"\",\"a\") == True\ncycpattern_check(\"a\",\"b\") == False\ncycpattern_check(\"b\",\"a\") == False\ncycpattern_check(\"a\",\"\") == True\ncycpattern_check(\"\",\"\") == True\ncycpattern_check(\"\",\"\") == True\ncycpattern_check(\"a\",\"a\") == True\ncycpattern_check(\"a\",\"aa\") == True\ncycpattern_check(\"aa\",\"a\") == False\ncycpattern_check(\"aa\",\"aaaa\") == False\ncycpattern_check(\"aaaa\",\"aa\") == False\ncycpattern_check(\"aa\",\"aaa\") == False\ncycpattern_check(\"aa\",\"aaaa\") == False\ncycpattern_check(\"aa\",\"aaaaa\") == False\ncycpattern_check(\"aaaa\",\"aa\") == False\ncycpattern_check(\"aaaa\",\"aaaaa\") == False\ncycpattern_check(\"aaaaa\",\"aa\") == False\ncycpattern_check(\"aaaaa\",\"aaaaaa\") == True\ncycpattern_check(\"aaaaaa\",\"aa\") == True\ncycpattern_check(\"aaaaaa\",\"aaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaa\",\"aa\") == False\ncycpattern_check(\"aaaaaaaaa\",\"aaaaa\") == True\ncycpattern_check(\"aaaaa\",\"aaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaa\",\"aaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaa\",\"aaaaa\") == False\ncycpattern_check(\"aaaaaaaaaa\",\"aaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaa\",\"aaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaa\",\"aaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaa\",\"aaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaa\",\"aaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaa\",\"aaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaa\",\"aaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaa\",\"aaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == False\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == True\ncycpattern_check(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"abc\",\"cba\") == False\nassert     cycpattern_check(\"abc\",\"cabc\") == True\nassert     cycpattern_check(\"ab\", \"a\") == True\nassert     cycpattern_check(\"a\", \"ab\") == True\nassert     cycpattern_check(\"a\", \"aa\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cycpattern_check('aa','a') == False, 'AA'\nassert     cycpattern_check('aa','a') == False, 'AAA'\nassert     cycpattern_check('aaa', 'aa') == True, 'Aa'\nassert     cycpattern_check('aa', 'aa') == True, 'AA'\nassert     cycpattern_check('a', 'a') == True, 'A'\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"welcome\", \"welcom\") == False, \"Should be False\"\nassert     cycpattern_check(\"welcome\", \"welc\") == True, \"Should be True\"\nassert     cycpattern_check(\"welcome\", \"wlec\") == False, \"Should be False\"\nassert     cycpattern_check(\"welcome\", \"elw\") == False, \"Should be False\"\nassert     cycpattern_check(\"welcome\", \"lew\") == True, \"Should be True\"\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncycpattern_check('hearst','rest') == True\ncycpattern_check('hearst','restest') == True\ncycpattern_check('hearst','resta') == False\ncycpattern_check('rest','rest') == True\ncycpattern_check('rest','restest') == True\ncycpattern_check('rest','resta') == False\ncycpattern_check('tater','resta') == True\ncycpattern_check('resta','resta') == True\ncycpattern_check('resta','restaest') == True\ncycpattern_check('restaest','restaest') == True\ncycpattern_check('restaest','restaestest') == False\ncycpattern_check('restaestest','restaest') == True\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_odd_count(100) == (10, 0)\nassert     even_odd_count(1234) == (3, 1)\nassert     even_odd_count(10) == (2, 0)\nassert     even_odd_count(-1234) == (3, 1)\nassert     even_odd_count(0) == (0, 0)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(even_odd_count(1234))\nprint(even_odd_count(12))\nprint(even_odd_count(12.5))\nprint(even_odd_count(-123))"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_count(123) == (1,2)\nassert     even_odd_count(0) == (1,1)\nassert even_odd_count(12) == (1,2)\nassert even_odd_count(1234567890) == (8,0)\nassert even_odd_count(1234) == (2,4)"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_count(8) == (1, 1), \"Test case 1 Failed\"\nassert     even_odd_count(0) == (0, 0), \"Test case 2 Failed\"\nassert     even_odd_count(15) == (3, 1), \"Test case 3 Failed\"\nassert     even_odd_count(9) == (2, 1), \"Test case 4 Failed\"\n\n\ndef even_odd_sum(num):\n    \"\"\"Given an integer. return a tuple that has the sum of even and odd digits respectively.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_count(2) == (1,0)\nassert     even_odd_count(20) == (1,0)\nassert     even_odd_count(21) == (1,0)\nassert     even_odd_count(23) == (2,0)\nassert     even_odd_count(24) == (1,1)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_count(123) == (1, 2), 'incorrect even_odd_count()'\nassert     even_odd_count(456) == (0, 2), 'incorrect even_odd_count()'\nassert     even_odd_count(0) == (0, 0), 'incorrect even_odd_count()'\nassert     even_odd_count(1) == (1, 0), 'incorrect even_odd_count()'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert int_to_mini_roman(1) == 'I'\nassert int_to_mini_roman(10) == 'X'\nassert int_to_mini_roman(11) == 'XI'\nassert int_to_mini_roman(12) == 'XII'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(6) == 'VI'\nassert     int_to_mini_roman(9) == 'IX'\nassert     int_to_mini_roman(11) == 'XI'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral as a string, return its integer equivalent\n    Restrictions:  1 <= s <= 1000\n    \"\"\"\n    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(6) == \"VI\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(int_to_mini_roman(10))\n    print(int_to_mini_roman(1000)"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(9) == \"IX\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(14) == \"XIV\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint()\nprint('='*30)\nprint('Testing int_to_mini_roman...')\nassert int_to_mini_roman(100) == 'C'\nassert int_to_mini_roman(1000) == 'M'\nassert int_to_mini_roman(741) == 'LXXXVII'\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Testing right_angle_triangle')\nassert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(5, 4, 3) == False\nassert right_angle_triangle(1, 1, 1) == True\nassert right_angle_triangle(3, 4, 5) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(1, 1, 1) == True\nassert     right_angle_triangle(1, 1, 2) == False\nassert     right_angle_triangle(1, 2, 1) == False\nassert     right_angle_triangle(1, 2, 2) == False\nassert     right_angle_triangle(1, 3, 1) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(1, 2, 3) == False\nassert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(2, 4, 6) == False\nassert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(2, 2, 2) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert right_angle_triangle(1, 1, 1) == True\nassert right_angle_triangle(1, 1, 2) == False\nassert right_angle_triangle(1, 2, 1) == False\nassert right_angle_triangle(2, 2, 2) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(3, 4, 5)    ==    False, 'A'\nassert     right_angle_triangle(3, 4, 3)    ==    True, 'B'\nassert     right_angle_triangle(4, 3, 4)    ==    True, 'C'\nassert     right_angle_triangle(1, 2, 3)    ==    False, 'D'\nassert     right_angle_triangle(1, 2, 2)    ==    True, 'E'\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(find_max([\"hello\", \"goodbye\", \"hello\", \"hello\"]))\nprint(find_max([\"goodbye\", \"hello\", \"hello\", \"hello\"]))\nprint(find_max([\"hello\", \"hello\", \"hello\"]))\nprint(find_max([\"hello\", \"hello\"]))\nprint(find_max([\"hello\", \"hello\"]))"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_max(['hello', 'world', 'python', 'hello']) == 'hello'\nassert     find_max(['hello', 'python', 'hello', 'hello']) == 'hello'\nassert     find_max(['python', 'hello', 'hello', 'python']) == 'hello'\nassert     find_max(['hello', 'world', 'python', 'hello']) == 'hello'\nassert     find_max(['python', 'python', 'hello', 'hello']) == 'hello'\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_max([\"hello\", \"world\", \"are\", \"you\"]) == \"world\"\nprint(\"All tests are passed\""
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_max([]) == None\nfind_max(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p']) == 'h'\nfind_max(['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p']) == 'h'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'w'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'i'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'i'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'z'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'j'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'k'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'l'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) =='m'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'k'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'u'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'v'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'w'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'x'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) =='s'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'j'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'i'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'o'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'l'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'u'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n','m','l','k','j','i']) == 'v'\nfind_max(['z','y','x','w','v','u','t','s','q','p','o','n',"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_max(['hello', 'hello', 'hellos']) == 'hello'\nassert     find_max(['hello', 'hello', 'hellos', 'hello', 'hello']) == 'hello'\nassert     find_max(['hello', 'hello', 'hellos', 'hello', 'hello', 'hellos']) == 'hello'\nassert     find_max(['hello', 'hello', 'hellos', 'hello', 'hello', 'hellos', 'hello', 'hello']) == 'hello'\nassert     find_max(['helloa', 'hello', 'hellos']) == 'hello'\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_max([\"a\", \"b\", \"c\", \"b\"]) == \"b\"\nassert     find_max([\"hello\", \"world\", \"a\", \"b\", \"c\", \"b\"]) == \"c\"\nassert     find_max([\"a\", \"b\", \"c\", \"d\", \"e\", \"e\"]) == \"e\"\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    return max(words, key=len)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eat(0, 0, 0) == (0, 0)\nassert     eat(1, 0, 0) == (1, 1)\nassert     eat(2, 0, 0) == (2, 0)\nassert     eat(1, 0, 1) == (3, 1)\nassert     eat(2, 0, 1) == (3, 2)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    eat(1, 1, 1) ==\n    [2, 1]\n\nassert \n    eat(2, 1, 1) ==\n    [3, 1]\n\nassert \n    eat(3, 1, 1) ==\n    [4, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eat(0,1,1) == [0,1]\nassert     eat(1,1,1) == [1,0]\nassert     eat(2,1,1) == [2,0]\nassert     eat(2,2,1) == [2,0]\nassert     eat(1,2,1) == [2,1]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eat(3, 4, 2) == [4, 2]\nassert     eat(1, 1, 1) == [2, 0]\nassert     eat(1000, 1000, 1000) == [999, 1]\n\nprint('You pass all the tests!'"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eat(1, 0, 0) ==     [1, 1000]\nassert     eat(2, 1, 0) ==     [2, 0]\nassert     eat(3, 2, 0) ==     [3, 1000]\nassert     eat(4, 3, 0) ==     [3, 1000]\nassert     eat(5, 3, 0) ==     [2, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    eat(100, 200, 250) == eat(1, 200, 250)\n    eat(20, 100, 200) == eat(20, 0, 100)\n    eat(25, 500, 500) == eat(0, 500, 500)\n\nif __name__ == \"__main__\":\n    # answer\n    print(eat(100, 200, 250)"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nif __name__ == '__main__':\n    print(\"\\n#1. Eating carrots to fill the pot\\n\")\n    print(eat(100, 1000, 2000))\n    print(eat(0, 1000, 2000))\n    print(eat(100, 1000, 0))\n    print(eat(100, 100, 100))\n    print(eat(100, 1, 100))\n    print(eat(100, 2, 100))\n    print(eat(100, 3, 100))\n    print(eat(100, 4, 100))\n    print(eat(100, 5, 100))\n    print(eat(100, 6, 100))\n    print(eat(100, 7, 100))\n    print(eat(100, 8, 100))\n    print(eat(100, 9, 100))\n    print(eat(100, 10, 100))\n    print(eat(100, 0, 100))\n    print(eat(100, 100, 0))\n    print(eat(0, 100, 100))\n    print(eat(0, 0, 100))\n    print(eat(0, 0, 0))\n    print(eat(0, 1, 0))\n    print(eat(0, 2, 0))\n    print(eat(0, 3, 0))\n    print(eat(0, 4, 0))\n    print(eat(0, 5, 0))\n    print(eat(0, 6, 0))\n    print(eat(0, 7, 0))\n    print(eat(0, 8, 0))\n    print(eat(0, 9, 0))\n    print(eat(0, 10, 0))\n    print(eat(0, 0, 0))\n    print(eat(100, 100, 100))\n    print(eat(0, 0, 100))\n    print(eat(100, 100, 0))\n\n    print(\"\\n#2. Eating carrots to fill the pot\")\n    assert eat(100, 100, 100) == [0, 100]\n    assert eat(0, 0, 100) == [0, 100]\n    assert eat(100, 0, 100) == [100, 0]\n    "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eat(13, 10, 20) == [31, 10], 'Wrong output'\nassert     eat(13, 10, 10) == [31, 9], 'Wrong output'\nassert     eat(14, 10, 20) == [41, 10], 'Wrong output'\nassert     eat(13, 11, 10) == [31, 10], 'Wrong output'\nassert     eat(14, 11, 20) == [51, 10], 'Wrong output'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\"], [\"1\"]) == 2\nassert    do_algebra([\"+\"], [\"1\", \"2\"]) == 3\nassert    do_algebra([\"+\", \"*\", \"2\"], [\"1\"]) == 2\nassert    do_algebra([\"+\", \"*\", \"2\"], [\"1\", \"2\"]) == 6\nassert    do_algebra([\"+\", \"*\", \"2\"], [\"1\", \"2\", \"3\"]) == 12\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndo_algebra([2, 3, 5, -2, 8, 7], [-1, 2, 3]) == None\nassert do_algebra([2, 3, 5, -2, 8, 7], []) == None\nassert do_algebra([2, 3, 5, -2, 8, 7], [-1, 2, 3, 1]) == None\nassert do_algebra([2, 3, 5, -2, 8, 7], [-1, 2, 3, 1, 4]) == None\nassert do_algebra([2, 3, 5, -2, 8, 7], [-1, 2, 3, 1, 4, 5]) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (do_algebra([\"+\", \"2\"], \"1\") == 3)\nassert     (do_algebra([\"-\", \"3\"], \"2\") == -1)\nassert     (do_algebra([\"*\", \"1\"], \"2\") == 2)\nassert     (do_algebra([\"//\", \"3\"], \"1\") == 0)\nassert     (do_algebra([\"**\", \"2\"], \"3\") == 8)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndo_algebra(operator = [ '+', '+', '-' ], operand = [ 1, 2, -1 ]) == 4, '1 + 2 - 1 = 4'\nassert \ndo_algebra(operator = [ '+', '+', '*', '*' ], operand = [ 1, 2, 3, 4 ]) == 12, '1 + 2 * 3 + 4 * 4 = 12'\nassert \ndo_algebra(operator = [ '+', '-', '*', '*' ], operand = [ 1, 2, 3, 4 ]) == -6, '1 - 2 * 3 + 4 * 4 = -6'\nassert \ndo_algebra(operator = [ '*', '*', '+', '+' ], operand = [ 1, 2, 3, 4 ]) == 14, '1 * 2 * 3 + 4 * 4 = 14'\nassert \ndo_algebra(operator = ['*', '+', '+', '+' ], operand = [ 1, 2, 3, 4 ]) == 10, '1 * 2 + 3 + 4 = 10'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert solve(\"\")==\"\"\nassert solve(\"a\")==\"a\"\nassert solve(\"ab\")==\"ba\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (solve(\"xyz\") == \"zxvy\")\nassert     (solve(\"hello world\") == \"world olleh\")\nassert     (solve(\"3people live here and die here\") == \"here die people olleh and 3people\")\nassert     (solve(\"we we we we\") == \"we we we we\")\nassert     (solve(\"if man was meant to stay on the ground, god would have given us roots\") == \"god would have given us roots\""
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert solve(\"\") == \"\"\nassert solve(\"A\") == \"A\"\nassert solve(\"a\") == \"a\"\nassert solve(\"0\") == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solve(\"abA\") == \"AbA\", \"abA == AbA\"\nassert     solve(\"ab\") == \"ba\", \"ab == ba\"\nassert     solve(\"\") == \"\", \"Empty string\"\nassert     solve(\"R\") == \"R\", \"R == R\"\nassert     solve(\"One\") == \"eO\", \"eO == One\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(\"a\") == \"a\"\nassert solve(\"A\") == \"A\"\nassert solve(\"b\") == \"b\"\nassert solve(\"B\") == \"B\"\nassert solve(\"\") == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve(\"a\") == \"a\"\nassert     solve(\"b\") == \"B\"\nassert     solve(\"c\") == \"C\"\nassert     solve(\"hello\") == \"olleH\"\nassert     solve(\"\") == \"\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"All test passed.\""
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"\") == None, \"Expected None\"\nassert     string_to_md5(\"hello\") == \"9d098d6d56d28d39c5a19727b912f87b\", \\\n        \"Wrong output\"\nassert     string_to_md5(\"A star is born.\\n\") == \\\n        \"01dccb1c73e61e16cd6912222c6c0f60\", \"Wrong output\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_md5(\"\") == None, \"The returned value is not None.\"\nassert     string_to_md5(\"12345\") == \"cb1620f06db977d5\", \"Incorrect returned value.\"\nassert     string_to_md5(\"54321\") == \"6c5c3dced87e4f2300b4a42e1ebb4a9a\", \"Incorrect returned value.\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert string_to_md5('abc') == 'd14a028c2a3a2bc9476102bb288234c'\nassert string_to_md5('hello') == '9e036b7fe818c7fbeedbe470c214646e'\nassert string_to_md5('') is None"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_md5('test') == '3a1255f2d29a93dcb3c1f0cfe4bae9d5', 'not True'\nassert     string_to_md5('') == None, 'not True'\nassert     string_to_md5('') == None, 'not True'\nassert     string_to_md5(' ') == None, 'not True'\nassert     string_to_md5('some text') == 'd6a16f48e313a2e01a5e08c7b5895fcff', 'not True'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_md5('text') == 'd13da94e9a3376e4d2e7f11863902b91'\nassert     string_to_md5('') == None\nassert     string_to_md5(None) == None\n\n\n\ndef md5_to_string(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"All test cases passed!\""
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_md5(\"\") == None, \"Error:'string_to_md5' should return None for empty string.\"\nassert     string_to_md5(\"A\") == \"9e107d939d28eaa3e13c66f8b8cf26b\", \"Error:'string_to_md5' should return '9e107d939d28eaa3e13c66f8b8cf26b' for 'A'.\"\nassert     string_to_md5(\"Hello World!\") == \"c1969faf0972e4a2e45ec7fb6370f948\", \"Error:'string_to_md5' should return 'c1969faf0972e4a2e45ec7fb6370f948' for 'Hello World!'.\""
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"helicopter\") == \"9acb9e58cee5f9d714d26b0dd1b936dc\"\nassert     string_to_md5(\"helicopter\")!= \"9acb9e58cee5f9d714d26b0dd1b936dc\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(2, 20) == [4, 16, 28]\nassert     generate_integers(7, 13) == [10, 14]\n\nprint(\"\\nSuccess\")\nprint(\"Done\""
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     generate_integers(1, 10) == list(range(2,11,2))\nassert generate_integers(4, 7) == list(range(4,8))\nassert generate_integers(1, 100) == list(range(2,101,2))\nassert generate_integers(1, 100) == list(range(2,101,2))\nprint(\"You're all set!\")\n\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     generate_integers(2, 10) == [2, 4, 6, 8]\nassert     generate_integers(0, 10) == []\nassert     generate_integers(10, 20) == [10, 12, 14, 16, 18]\n\nprint(\"exercise 6.6 is correct!\")\n\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(1, 2) == [1]\nassert     generate_integers(1, 1) == [1]\nassert     generate_integers(2, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(1, 2) == [1]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n"
    }
]