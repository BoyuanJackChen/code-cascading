[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     has_close_elements([0, 0, 0, 0, 0], 0.00001) == False\nassert     has_close_elements([1, 2, 3, 4, 5], 0.00001) == True\nassert     has_close_elements([5, 6, 7, 8, 9], 0.00001) == True\nassert     has_close_elements([-1, -2, -3, -4, -5], 0.00001) == True\nassert     has_close_elements([-1, -2, -3, -4, -5], 0.00001) == False\n",
        "num_ids_2": 54,
        "num_ids_4": 113
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5, 6], 1)\nassert not     has_close_elements([1, 2, 3, 4, 5, 6], 2)\nassert has_close_elements([1, 2, 3, 4, 5, 6], 0)\nassert has_close_elements([1, 2, 3, 4, 5, 6], 1.0001)\nassert has_close_elements([1, 2, 3, 4, 5, 6], -0.0001)\n",
        "num_ids_2": 49,
        "num_ids_4": 97
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhas_close_elements([4, 3, 5, 1, 1], 0)\nassert \nhas_close_elements([4, 3, 5, 1, 1], 2)\nassert \nhas_close_elements([4, 3, 5, 1, 1], 3)\nassert \nhas_close_elements([4, 3, 5, 1, 1], 1)\nassert \nhas_close_elements([4, 3, 5, 1, 1], 0.1)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nhas_close_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0)\nassert has_close_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0.3)\nassert has_close_elements([2, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0.3)\nassert has_close_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0.5)\nassert has_close_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 0.7)\n",
        "num_ids_2": 36,
        "num_ids_4": 102
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     has_close_elements([1,2,3,4,5,6], 4) == False\nassert     has_close_elements([1,2,3,4,5,6,7,8,9], 2) == True\nassert     has_close_elements([1,2,3,4,5,6,7,8,9], 2) == True\nassert     has_close_elements([1,2,3,4,5,6,7,8,9], 3) == False\n",
        "num_ids_2": 58,
        "num_ids_4": 122
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_close_elements(numbers: List[float], threshold: float) -> List[int]:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not has_close_elements([1, 2, 3, 4, 5], threshold=1.5)\nassert has_close_elements([1, 2, 3, 4, 5], threshold=1.8)\nassert has_close_elements([5, 2, 4, 3, 1], threshold=1.5)\nassert has_close_elements([6, 7, 8, 9, 10], threshold=1.5)\n",
        "num_ids_2": 29,
        "num_ids_4": 79
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     has_close_elements([-2, 2, -3, 5, -1, 2, -3, -2, 0, 3, -4, 5, 1], 3)\nassert     has_close_elements([-1, 1, -2, -3, -4, 5, 2, -3, -2, 1, 1, 1, 1, 1, 1, 1], 1)\nassert     has_close_elements([-1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1], 1)\nassert     has_close_elements([-2, 2, -3, 5, -1, 2, -3, -2, 0, 3, -4, 5, 1], 5)\nassert     has_close_elements([-2, 2, -3, 5, -1, 2, -3, -2, 0, 3, -4, 5, 1], 5)\n",
        "num_ids_2": 94,
        "num_ids_4": 193
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"(((())))\") == [\"((()))\", \"()()\"]\nassert     separate_paren_groups(\"(()\") == [\"(()\", \"()\"]\nassert     separate_paren_groups(\"()(())\") == [\"(()())\", \"(()())\"]\nassert     separate_paren_groups(\"(((()(()())))\") == [\"(((()(()())))\"]\nassert     separate_paren_groups(\"((((((()())(()()))))(()))\") == \\\n        [\"((((((()(()(()())))()(())))))()\", \"((((((()(()(()())))()(())))))()\"]\n",
        "num_ids_2": 46,
        "num_ids_4": 98
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     separate_paren_groups
        "num_ids_2": 1026,
        "num_ids_4": 1026
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups('') == []\nassert     separate_paren_groups('()') == ['()']\nassert     separate_paren_groups('(((())))') == ['(((())))']\nassert     separate_paren_groups('((()))') == ['((()))']\nassert     separate_paren_groups('((())') == ['((())']\n",
        "num_ids_2": 30,
        "num_ids_4": 72
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"((3+((2*2)))))\") == [\"((3+((2*2)))))\"]\nassert     separate_paren_groups(\"(2+3)\") == [\"(2+3)\"]\nassert     separate_paren_groups(\"(2+(3+4))\") == [\"(2+(3+4))\"]\nassert     separate_paren_groups(\"(2+3)\") == [\"(2+3)\"]\nassert     separate_paren_groups(\"(3+2)\") == [\"(3+2)\"]\n",
        "num_ids_2": 56,
        "num_ids_4": 108
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nseparate_paren_groups('()') == []\nseparate_paren_groups('(foo(bar))') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar))(baz)') == ['foo', 'bar', 'baz']\nseparate_paren_groups('(foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar))') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar))') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('(foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('()') == []\nseparate_paren_groups('(foo(bar)') == ['foo', 'bar']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('()') == []\nseparate_paren_groups('()') == []\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups('))') == ['(']\nseparate_paren_groups('))') == ['(']\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups('(') == ['(']\nseparate_paren_groups('(') == ['(']\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups('))') == ['(']\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups('))') == ['(']\nseparate_paren_groups(')') == ['(']\nseparate_paren_groups('()') == []\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo)') == ['foo']\nseparate_paren_groups('(foo",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"(()())\") == [\"(\",\")\",\")\"]\nassert     separate_paren_groups(\"(()()) (())\") == [\"(\",\")\",\")\",\"(\",\")\",\")\"]\nassert     separate_paren_groups(\"(() (())\") == [\"(\",\")\",\")\",\"(\",\")\"]\nassert     separate_paren_groups(\"(() (()))\") == [\"(\",\")\",\")\",\"(\",\")\"]\nassert     separate_paren_groups(\"((()))\") == [\"(\",\")\",\")\",\"(\",\")\"]\n",
        "num_ids_2": 52,
        "num_ids_4": 107
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups(\"(1+(2*3)+((8)/4))\") == ['(1', '+(2*3)+', '(8', '/', '4)']\nassert     separate_paren_groups(\"(3+((9*3)-2)/((3-2)*3-(4/5)))\") == ['(3', '+', '(9', '*', '3', '-', '2', ')', '/', '(3', '-', '2', ')', '*', '(3', '-', '(4', '/', '5)']\nassert     separate_paren_groups(\"((2+3)*(4-(5+6))*(((7*9)-8)/4))\") == \\\n[ '(', '(2', '+', '3', '*', '(', '4', '-', '(', '5', '+', '6', ')', '*', '(', '(', '7', '*', '9', '-', '8', ')', ')', ')', '*', '(', '4', ')']\n\nassert     separate_paren_groups(\"(1+(2*3)+((8)/4))*2\") == ['(1', '+(2*3)+', '(8', '/', '4)', '*', '2']\n",
        "num_ids_2": 134,
        "num_ids_4": 222
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('{(((a)))}') == ['a'],\\\n        \"This should return ['a']\"\nassert     separate_paren_groups('{(((a))))}') == ['a'],\\\n        \"This should return ['a']\"\nassert     separate_paren_groups('(((a))))') == ['a'],\\\n        \"This should return ['a']\"\nassert     separate_paren_groups('{(((a)))}') == ['a'],\\\n        \"This should return ['a']\"\nassert     separate_paren_groups('{(((((a)))}}') == ['a'],\\\n        \"This should return ['a']\"\n",
        "num_ids_2": 46,
        "num_ids_4": 90
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (\n            separate_paren_groups('()(((()())(()))())') ==\n            ['(((()())(()))())']\n        ), 'ERROR: test case 1'\nassert     (\n            separate_paren_groups('(((()(())()))())') ==\n            ['(((()(()))())', '()(())()', '()((()))', '()()((()))']\n        ), 'ERROR: test case 2'\nassert     (\n            separate_paren_groups('((()())((()())))') ==\n            ['((()(()))', '(()())(())', '()((()))']\n        ), 'ERROR: test case 3'\nassert     (\n            separate_paren_groups('((()))') ==\n            ['((()))']\n        ), 'ERROR: test case 4'\nassert     (\n            separate_paren_groups('()()(()())') ==\n            ['()()(())']\n        ), 'ERROR: test case 5'\n",
        "num_ids_2": 8,
        "num_ids_4": 16
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups('((((()))))') == ['((((()))))'], \\\n                \"Wrong output for separate_paren_groups('((((()))))'): incorrect output\"\nassert     separate_paren_groups('(((()()()))((((()))))') == ['(((()()()))((((()))))'], \\\n                \"Wrong output for separate_paren_groups('(((()()()))((((()))))'): incorrect output\"\nassert     separate_paren_groups('(((())())()(((()()(()()(((())()(()))))))') == ['(((())())()(((()()(()()(((())))))', \\\n                \"Wrong output for separate_paren_groups('(((()()(()))(((()()(()()(((())))))'): incorrect output\"\nassert     separate_paren_groups('(()()())()(((((())()((((()()()()(((()))))))))') == ['(()()())()(((((())()((((()()()()(((())))))))))', \\\n                \"Wrong output for separate_paren_groups('(()()())()(((((())()((((()()()()(((()))))))))'): incorrect output\"\nassert     separate_paren_groups('(((((()))(()))(((()((()))))))))') == ['(((((()))(()))(((()((()))))))))'], \\\n                \"Wrong output for separate_paren_groups('(((((()))(()))(((()((()))))))))'): incorrect output\"\n",
        "num_ids_2": 60,
        "num_ids_4": 170
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     truncate_number(3.75) == 3.75\nassert     truncate_number(4.0) == 4.0\nassert     truncate_number(3.95) == 3\nassert     truncate_number(3.85) == 3\nassert     truncate_number(3.9) == 3\n",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     truncate_number(2.5) == 2\nassert     truncate_number(2.6) == 2\nassert     truncate_number(2.5) == 2\nassert     truncate_number(2.4) == 2\nassert     truncate_number(2.3) == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     truncate_number(8.5) == 8.5\nassert     truncate_number(8.6) == 8\nassert     truncate_number(8.8) == 8\nassert     truncate_number(8.9) == 9\nassert     truncate_number(9.1) == 9\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     truncate_number(3.5) == 0.5\nassert    truncate_number(0.5) == 0\nassert    truncate_number(1) == 1\nassert    truncate_number(2) == 0\nassert    truncate_number(3) == 0\n",
        "num_ids_2": 32,
        "num_ids_4": 58
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     truncate_number(1.5) == 1\nassert     truncate_number(0.5) == 0\nassert     truncate_number(-0.5) == -1\nassert     truncate_number(0) == 0\nassert     truncate_number(1) == 1\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     truncate_number(1.7) == 1.7\nassert truncate_number(1.8) == 1.8\nassert truncate_number(0.5) == 0.5\n",
        "num_ids_2": 32,
        "num_ids_4": 47
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert truncate_number(0.0) == 0.0\nassert truncate_number(1.0) == 1.0\nassert truncate_number(1.5) == 1.0\nassert truncate_number(1.99) == 1.0\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_zero([1, 2, 3, 4, 5]) is False\nassert     below_zero([1, -2, 3, 4, 5]) is True\nassert     below_zero([1, -2, 3, -4, 5]) is False\nassert     below_zero([1, 2, -3, -4, -5]) is True\nassert     below_zero([1, 2, -3, -4, 5]) is False\n",
        "num_ids_2": 39,
        "num_ids_4": 82
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef below_zero2(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        if operation < 0:\n            balance -= operation\n        else:\n            balance += operation\n    return balance < 0\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nbelow_zero([\n    (0, 5),\n    (0, 2),\n    (-5, 3),\n    (2, -2),\n    (0, 1)\n])\nassert below_zero([\n    (0, 5),\n    (0, 2),\n    (5, -3),\n    (2, -2),\n    (0, 1)\n]) == False\nassert below_zero([\n    (0, 5),\n    (0, 2),\n    (-5, 3),\n    (-2, -2),\n    (0, 1)\n]) == True\nassert below_zero([\n    (0, 5),\n    (0, 2),\n    (-5, 3),\n    (2, -2),\n    (0, 1),\n    (1, 3),\n    (1, 1)\n]) == False\n",
        "num_ids_2": 9,
        "num_ids_4": 21
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nabove_zero(below_zero([0, 0, -1, 1])) == True\nbelow_zero(below_zero([0, 0, -1, 1])) == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\"\"\"\nConsider a bank account with starting balance as 0. If there are 3 deposits, one withdraw, and one\ndeposit, then at the end of the account, we have the following balance:\n    0 + 2 + 1 = 4\nThe above conditions can be verified if and only if:\n    - For each operation, (1) the balance is at least 1, and\n    - For each operation, (2) the balance is at most 1.\nGiven a list of operations, return True if the account balance is below 1 at the end of the account,\nor False otherwise.\n\nExample 1:\nInput\n[1,2,3]\nOutput\nTrue\n\nExample 2:\nInput\n[1,2]\nOutput\nFalse\n\nExample 3:\nInput\n[0,2,3]\nOutput\nFalse\n\"\"\"\ndef check_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_zero([1, 2, 3, -4]) == True, \"Expected True but returned {}\".format(below_zero([1, 2, 3, -4]))\nassert     below_zero([1, 2, 3, -5]) == False, \"Expected False but returned {}\".format(below_zero([1, 2, 3, -5]))\nassert     below_zero([-1, 2, 3, -5]) == False, \"Expected False but returned {}\".format(below_zero([-1, 2, 3, -5]))\nassert     below_zero([-1, 2, 3, -4]) == True, \"Expected True but returned {}\".format(below_zero([-1, 2, 3, -4]))\nassert     below_zero([-1, 2, 3, -2]) == False, \"Expected False but returned {}\".format(below_zero([-1, 2, 3, -2]))\n",
        "num_ids_2": 86,
        "num_ids_4": 176
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     below_zero([0,1,1,2,1]) == True, \\\n        \"Should return True if balance = 0\"\n\nassert     below_zero([0,0,0,0,1]) == False, \\\n        \"Should return True if balance = 0\"\n\nassert     below_zero([0,1,1,2,0]) == True, \\\n        \"Should return True if balance = 0\"\n",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    mean_absolute_deviation([1, 2, 3]) == 0.5\n    mean_absolute_deviation([1, 2, 3, 2, 5]) == 2.5\n    mean_absolute_deviation([1, 2, 3, -5]) == 2.5\n    mean_absolute_deviation([0, 0, 0, 0, 0]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2]) == 0\n    mean_absolute_deviation([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef mean_square_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Square Deviation\n    around the mean of this dataset.\n    Mean Square Deviation is the average squared difference between each\n    element and a centerpoint (mean in this case):\n    MSE = average | x - x_mean | ** 2\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \n\nprint(\"======= Mean Absolute Deviation =======\")\ntest_numbers = [3, 6, 9, 10, 11, 12]\nprint(mean_absolute_deviation(test_numbers))\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4.5\nassert mean_absolute_deviation([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 25.0\n",
        "num_ids_2": 36,
        "num_ids_4": 69
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([5, 10, 2, 6, 3, 8]) == 6\nassert     mean_absolute_deviation([5, 10, 2, 6, 3, 8, 9]) == 7\nassert     mean_absolute_deviation([5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12]) == 6\nassert     mean_absolute_deviation([5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 12, 5, 10, 2, 6, 3, 8, 9, 12, 33, 8, 9, 6, 3, 12, 33, 11, 1",
        "num_ids_2": 50,
        "num_ids_4": 1023
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([-5, 2, 1, -4, 5]) == 1\nassert     mean_absolute_deviation([-3, 5, -9, 5, -7, 3]) == 3\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersperse([], 3) == []\nassert     intersperse([1,2,3], 3) == [1,2,3,3,3,3]\nassert     intersperse([1,2,3,4,5,6], 3) == [1,2,3,4,5,6,3,3,3]\nassert     intersperse([1,2,3], 3) == [1,2,3,3,3]\nassert     intersperse([1,2,3,4,5], 3) == [1,2,3,4,5,5,4,3,3]\n",
        "num_ids_2": 39,
        "num_ids_4": 105
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert intersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 3, 4, 5, 5, 4, 3, 2, 1]\nassert intersperse([1, 2, 3, 4, 5], 3) == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5]\nassert intersperse([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 45,
        "num_ids_4": 119
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersperse([1,2,3,4], 5) == [1,2,3,4,5]\nassert     intersperse([1,2,3,4], 1) == [1,1,2,3,4,5]\nassert     intersperse([], 5) == []\nassert     intersperse([1,2,3,4,5,6], 5) == [1,2,3,4,5,6]\nassert     intersperse([1,2,3,4,5], 1) == [1,2,3,4,5]\n",
        "num_ids_2": 58,
        "num_ids_4": 103
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersperse([1, 2, 3], 5) == [1, 5, 2, 5, 3]\nassert     intersperse([1, 2, 3], -5) == [1, 2, 3, -5, -5]\nassert     intersperse([1, 2, 3, 4, 5], -5) == [1, 5, 2, 5, 3, -5, -5, 4, -5, -5]\nassert     intersperse([1, 2, 3, 4], 5) == [1, 5, 2, 5, 3, 4]\nassert     intersperse([], 5) == []\n",
        "num_ids_2": 55,
        "num_ids_4": 130
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersperse([1,2,3,4,5], 2) == [1,2,2,3,4,5,5,4,2,3,4,5]\nassert intersperse([2,3,4,5], 2) == [2,2,2,3,4,5,5,4,2,3,4,5]\nassert intersperse([1,2,3,4], 2) == [1,2,3,4,1,2,3,4,1,2,3,4]\n\nif __name__ == \"__main__\":\n    # run some tests\n    assert intersperse([1,2,3,4,5], 2) == [1,2,2,3,4,5,5,4,2,3,4,5]\n    ",
        "num_ids_2": 86,
        "num_ids_4": 128
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nintersperse([1, 2, 3, 4], 2) == [1, 2, 2, 3, 4, 4]\nassert intersperse([], 2) == []\nassert intersperse([1, 2, 3], 2) == [1, 2, 2, 3]\nassert intersperse([1, 2, 3], 3) == [1, 2, 3]\nassert intersperse([1, 2, 3], 1) == [1, 2, 3]\n",
        "num_ids_2": 14,
        "num_ids_4": 60
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 1) == [1, 1, 2, 1, 3, 1, 4, 1, 5]\nassert     intersperse([1, 2, 3], 1) == [1, 1, 2, 2, 3]\nassert     intersperse([], 1) == []\nassert     intersperse([1, 2, 3, 4], 1) == [1, 1, 2, 1, 3, 1, 4]\n\n\n",
        "num_ids_2": 64,
        "num_ids_4": 107
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef parse_nested_parens_alternative(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"(((())))\") == [2, 2]\nassert     parse_nested_parens(\"(((()())))\") == [2, 2, 2]\nassert     parse_nested_parens(\"(()())\") == [1, 2]\nassert     parse_nested_parens(\"((()()))\") == [2, 2, 1]\nassert     parse_nested_parens(\"(((()()(())))\") == [3, 3, 3, 3]\n",
        "num_ids_2": 47,
        "num_ids_4": 92
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(()())\") ==  [0]\nassert     parse_nested_parens(\"((()()))\") == [2]\nassert     parse_nested_parens(\"(()(()))\") ==  [1,2]\nassert     parse_nested_parens(\"(()((()))\") ==  [0,2,2]\nassert     parse_nested_parens(\"((()(((())))))\") == [3,2,1]\n",
        "num_ids_2": 40,
        "num_ids_4": 90
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"()()\") == [0, 1]\nassert     parse_nested_parens(\"(())\") == [0, 1]\nassert     parse_nested_parens(\"()((()))\") == [0, 1, 2]\nassert     parse_nested_parens(\"((()()))\") == [0, 1, 2]\nassert     parse_nested_parens(\"((()())\") == [0, 1, 2]\n",
        "num_ids_2": 40,
        "num_ids_4": 88
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('((()())') == [3]\nassert     parse_nested_parens('(()()())') == [3, 3]\nassert     parse_nested_parens('(()(((()))))') == [4, 3, 3]\nassert     parse_nested_parens('(((((((()))))))') == [5, 4, 3, 3]\nassert     parse_nested_parens('(((((()()())(()((((()())))))()))())))') == [8, 6, 5, 5, 5, 5, 5, 5]\n",
        "num_ids_2": 41,
        "num_ids_4": 96
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_nested_parens('(())') == 1\nassert     parse_nested_parens('((()())(())') == 3\nassert     parse_nested_parens('((()())((()))(((()))))') == 5\nassert     parse_nested_parens('(((((())))())()())()())') == 6\n\n\ndef parse_nested_parens_v2(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n",
        "num_ids_2": 35,
        "num_ids_4": 84
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_nested_parens('(())())') == [[[1]]]\nassert     parse_nested_parens('(()()()())') == [[[1], [[1,1]]]]\nassert     parse_nested_parens('(((())))') == [[[1], [[1,1]]], [[[1, 1], 1]]]\nassert     parse_nested_parens('(((()()()()()())((()()()()()())((())))))') == [[[1], [[1,1], [[1,1], [[1,1], [[1,1], [[1,1], [[1,1], 1]]]]], [[[1, 1], [[1,1], [[1,1], [[1,1], [[1,1], [[1,1], 1]]]]], [[[1, 1, 1], [[1,1], [[1,1], [[1,1], [[1,1], 1]]]]], [[[1, 1, 1], [[1,1], [[1,1], [[1,1], [[1,1], 1]]]]], [[[1, 1, 1], [[1,1], [[1,1], [[1,1], [[1,1], 1]]]]], [[[1, 1, 1], [[1,1], [[1,1], [[1,1], [[1,1], 1]]]]]]\n",
        "num_ids_2": 49,
        "num_ids_4": 320
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nparse_nested_parens(\"(()())\") == [2]\nparse_nested_parens(\"(((()()))\") == [3]\nparse_nested_parens(\"(()(((()())))((()()))\") == [3, 3, 3, 3, 3]\nparse_nested_parens
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nparse_nested_parens('(()())') == [0, 1, 2]\nparse_nested_parens('((()()))') == [1, 1, 2]\nparse_nested_parens('(()(()))') == [2, 1, 2]\n\nparse_nested_parens('(()(()(()))') == [2, 1, 2, 1, 1, 2]\nparse_nested_parens('(()()(()(()(()))))') == [2, 1, 2, 1, 1, 2, 1, 1, 2]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"cat\") == [\"three\", \"four\"], \"Wrong result\"\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"dog\") == [\"one\", \"two\", \"four\"], \"Wrong result\"\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"a\") == [\"one\", \"two\", \"three\", \"four\"], \"Wrong result\"\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"foo\") == [\"one\", \"two\", \"three\", \"four\"], \"Wrong result\"\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\"], \"fooa\") == [\"one\", \"two\", \"three\", \"four\"], \"Wrong result\"\n",
        "num_ids_2": 77,
        "num_ids_4": 163
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_substring(['cat', 'dog', 'lion', 'fox'], 'cat') == ['cat']\nassert     filter_by_substring(['cat', 'dog', 'lion', 'fox'], 'dog') == ['dog']\nassert     filter_by_substring(['cat', 'dog', 'lion', 'fox'], 'fox') == ['fox']\nassert     filter_by_substring(['cat', 'dog', 'lion', 'fox'], 'lion') == ['lion']\nassert     filter_by_substring(['cat', 'dog', 'lion', 'fox'], 'ox') == []\n",
        "num_ids_2": 62,
        "num_ids_4": 126
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"e\") == [\"e\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"d\") == [\"d\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"c\") == [\"c\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"b\") == [\"b\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\") == [\"a\"]\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"t\", \"n\", \"i\", \"t\", \"c\", \"k\", \"p\", \"l\"], \"k\") == [\"t\", \"c\", \"k\", \"p\", \"l\"]\nassert     filter_by_substring([\"t\", \"n\", \"i\", \"t\", \"c\", \"k\", \"p\", \"l\"], \"a\") == [\"t\", \"n\", \"i\"]\nassert     filter_by_substring([\"t\", \"n\", \"i\", \"t\", \"c\", \"k\", \"p\", \"l\"], \"s\") == [\"t\", \"n\", \"i\", \"t\", \"c\", \"k\", \"p\", \"l\"]\nassert     filter_by_substring([\"t\", \"n\", \"i\", \"t\", \"c\", \"k\", \"p\", \"l\"], \"i\") == [\"t\", \"n\", \"i\", \"t\", \"c\", \"k\", \"p\", \"l\"]\nassert     filter_by_substring([\"t\", \"n\", \"i\", \"t\", \"c\", \"k\", \"p\", \"l\"], \"t\") == [\"t\", \"n\", \"i\", \"t\", \"c\", \"k\", \"p\", \"l\"]\n",
        "num_ids_2": 100,
        "num_ids_4": 224
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert filter_by_substring([\"abcd\", \"xyz\", \"abc\", \"d\", \"def\"], \"x\") == [\"xyz\", \"abc\", \"d\"]\nassert filter_by_substring([\"abcd\", \"xyz\", \"abc\", \"d\", \"def\"], \"y\") == []\nassert filter_by_substring([\"abcd\", \"xyz\", \"abc\", \"d\", \"def\"], \"z\") == [\"abcd\", \"def\"]\n",
        "num_ids_2": 43,
        "num_ids_4": 111
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_substring([\"hello world\", \"hey\", \"my name is Alex\", \"hello\"], \"Alex\") == [\"hello world\", \"my name is Alex\"]\nassert     filter_by_substring([\"hello world\", \"hey\", \"my name is Alex\", \"hello\"], \"hello\") == []\nassert     filter_by_substring([\"hello world\", \"hey\", \"my name is Alex\", \"hello\"], \"hi\") == []\nassert     filter_by_substring([\"hello world\", \"hey\", \"my name is Alex\", \"hello\"], \"d\") == []\nassert     filter_by_substring([\"hello world\", \"hey\", \"my name is Alex\", \"hello\"], \"wo\") == []\n",
        "num_ids_2": 71,
        "num_ids_4": 133
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"c\") == [\"c\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"c\") == [\"c\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"z\") == []\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"z\") == []\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\", \"z\"], \"z\") == [\"z\"]\n",
        "num_ids_2": 58,
        "num_ids_4": 112
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_product([0]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (6, 15)\nassert     sum_product([-2, -1, 0]) == (0, 0)\nassert     sum_product([1, -1]) == (0, -1)\nassert     sum_product([1, -2]) == (1, -4)\n",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_product([1,2,3,4]) == (14, 24)\nassert sum_product([1,2]) == (3, 2)\nassert sum_product([]) == (0, 1)\n",
        "num_ids_2": 37,
        "num_ids_4": 50
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    assert len(numbers) > 0\n\n    sum_nums = 0\n    product_nums = 1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_product([0]) == (0, 0)\nassert     sum_product([0, 1]) == (0, 0)\nassert     sum_product([0, 1, 2]) == (0, 0)\nassert     sum_product([0, -1, 2]) == (0, 0)\nassert     sum_product([1]) == (0, 1)\n",
        "num_ids_2": 32,
        "num_ids_4": 71
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_product([1]) == (1, 1)\nassert     sum_product([1,2,3]) == (3, 6)\nassert     sum_product([1,1,1]) == (2, 3)\nassert     sum_product([]) == (0, 1)\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([2]) == (2, 4)\nassert     sum_product([2, 4]) == (6, 16)\nassert     sum_product([2, 4, 5]) == (12, 40)\nassert     sum_product([2, 3, 5]) == (12, 20)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    sum_product([]) == (0, 1)\n\nassert \n    sum_product([1, 2, 3, 4, 5]) == (30, 120)\n\nassert \n    sum_product([0, 2, 4, 6, 8]) == (0, 64)\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \"Should be a simple list\"\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"Should be a list of even numbers\"\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], \"Should be a list of odd numbers\"\n\n\ndef get_max_sum_after_n_non_overlapping_intervals(numbers: List[int], m: int) -> int:\n    \"\"\" The problem is much similar to the above problem. Here we need to find the sum of all elements in the\n    range of m + 1 elements after the range of n + 1 elements, i.e. [n + 1, m + 1].\n    \"\"\"\n    pass\n",
        "num_ids_2": 86,
        "num_ids_4": 140
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1, 2]) == [2]\nassert     rolling_max([1, 2, 3, 4]) == [4]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9]\n",
        "num_ids_2": 23,
        "num_ids_4": 57
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    rolling_max([1, 2, 3, 4, 5]) == [1, 3, 5, 5, 5]\n    rolling_max([1, 2, 3, 4, 5, 6]) == [1, 3, 6, 6, 6]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 6, 9, 9, 9]\n    rolling_max([2, 2, 2, 2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 6, 10, 10, 10, 10]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 6, 10, 11, 11, 11]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 6, 10, 11, 12, 12]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 3, 6, 10, 11, 13, 13]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 3, 6, 10, 11, 13, 14]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 3, 6, 10, 11, 13, 15]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 3, 6, 10, 11, 13, 16]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rolling_max([1,2,3,4,5]) == [2,3,4,5,5]\nassert     rolling_max([4,5,6,7,8,9]) == [5,5,6,7,8,9]\nassert     rolling_max([4,5,6,7,8,9,4,5,6,7,8,9]) == [6,6,7,8,9,9,9,9,9,9,9,9]\nassert     rolling_max([4,5,6,7,8,9,4,5,6,7,8,9,4,5,6,7,8,9]) == [8,9,9,9,9,9,9,9,9,9,9,9]\nassert     rolling_max([1,2,3,4,5,6,7]) == [3,4,5,6,7,7,7]\n",
        "num_ids_2": 62,
        "num_ids_4": 188
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 6, 6, 6, 6, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [7, 6, 6, 6, 6, 6, 6, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [7, 6, 6, 6, 6, 6, 6, 6, 6]\nassert     rolling_max([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [8, 8, 8, 8, 8, 8, 8, 8, 8]\n",
        "num_ids_2": 47,
        "num_ids_4": 133
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    rolling_max([-2, -3, -4, -5, -6, -7, -8, -9]) == [-2, -3, -4, -5, -6, -7, -8, -9]\n    rolling_max([1, 2, 3, 4, 5]) == [5, 5, 5, 5, 5]\n    rolling_max([]) == []\n    rolling_max([0]) == []\n    rolling_max([-1]) == [-1]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == [21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == [23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == [24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "num_ids_2": 62,
        "num_ids_4": 140
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rolling_max([1, 2, 3]) == [1, 2, 3], \"Wrong output\"\nassert     rolling_max([-3, 2, 3]) == [3, 3, 3], \"Wrong output\"\nassert     rolling_max([3, 1, 2, 3]) == [3, 3, 3, 3], \"Wrong output\"\nassert     rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5], \"Wrong output\"\nassert     rolling_max([4, 3, 5]) == [5, 5, 5], \"Wrong output\"\n",
        "num_ids_2": 53,
        "num_ids_4": 117
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    # For the purpose of this assignment, \n    # the answer to any challenge is correct if you complete it and submit \n    # your solutions.  In other words, you cannot submit your solution without \n    # completing this assignment.  \n    assert make_palindrome(\"aba\") == \"baa\"\n    assert make_palindrome(\"abba\") == \"baab\"\n    assert make_palindrome(\"racecar\") == \"racecar\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"aba\") == True\nassert is_palindrome(\"ababa\") == True\nassert is_palindrome(\"abab\") == True\nassert is_palindrome(\"ab\") == False\n",
        "num_ids_2": 26,
        "num_ids_4": 51
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_palindrome(\"Tact Coa\") == \"ata\"\nassert     make_palindrome(\"A\") == \"A\"\nassert     make_palindrome(\"aa\") == \"aa\"\nassert     make_palindrome(\"ab\") == \"ab\"\nassert     make_palindrome(\"a\") == \"a\"\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_palindrome(make_palindrome('aab')) == True, \"Test Failed\"\nassert is_palindrome(make_palindrome('aabb')) == False, \"Test Failed\"\nassert is_palindrome(make_palindrome('aabbbc')) == True, \"Test Failed\"\nassert is_palindrome(make_palindrome('bac')) == False, \"Test Failed\"\n",
        "num_ids_2": 28,
        "num_ids_4": 79
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     make_palindrome('madam') == 'ama'\nassert     make_palindrome('nurses run') =='sernur einrun'\nassert     make_palindrome('madam') == 'ama'\nassert     make_palindrome('racecar') == 'racecar'\nassert     make_palindrome('racecar') == 'racecar'\n",
        "num_ids_2": 38,
        "num_ids_4": 71
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_palindrome('')\nassert is_palindrome('a')\nassert is_palindrome('ab')\nassert is_palindrome('aab')\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef test_string_xor():\n    assert string_xor(\"00000010100101000001111010011100\", \"000101011010010001101111\") == \"0\"\n    assert string_xor(\"00000010100101000001111010011100\", \"0010001011010010001101111\") == \"1\"\n    assert string_xor(\"00000010100101000001111010011100\", \"111010011100010101101111\") == \"0\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_xor('a', 'a') == '0'\nassert     string_xor('abcde', 'cdeab') == 'dab7a0'\nassert     string_xor('abcde', 'cdeaa') == 'dab7a0'\nassert     string_xor('abcde', 'bcdea') == 'aef5a0'\nassert     string_xor('abcde', 'bdeac') == 'aef5a0'\n",
        "num_ids_2": 41,
        "num_ids_4": 89
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_xor(\"abcd\", \"abcdefg\") == \"cdef\"\nassert     string_xor(\"\", \"abcdefg\") == \"\"\nassert     string_xor(\"abcdefg\", \"abcdef\") == \"cdef\"\nassert     string_xor(\"abcdefgabcdef\", \"abcdef\") == \"cdef\"\nassert     string_xor(\"abcdef\", \"abcdefg\") == \"cdef\"\n",
        "num_ids_2": 37,
        "num_ids_4": 81
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert string_xor(\"\",\"\") == \"\"\nassert string_xor(\"a\",\"b\") == \"b\"\nassert string_xor(\"a\",\"ba\") == \"b\"\nassert string_xor(\"\",\"\") == \"\"\n",
        "num_ids_2": 14,
        "num_ids_4": 44
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef convert_to_binary(s: str) -> str:\n    \"\"\" Convert string s to binary and return it in string format.\n    \"\"\"\n    pass\n\ndef get_number_of_one(n: int) -> int:\n    \"\"\" Input is integer n.\n    Return the number of 1s in the binary form of integer n.\n    \"\"\"\n    pass\n\n\ndef get_number_of_zeroes(n: int) -> int:\n    \"\"\" Input is integer n.\n    Return the number of zeroes in the binary form of integer n.\n    \"\"\"\n    pass\n\n\ndef check_if_single_bit_set(n: int) -> bool:\n    \"\"\" Input is integer n.\n    Return True if the given integer is a single 1, i.e. 0b1 or 1.\n    Return False if the given integer is a single 0, i.e. 0b0.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef string_and(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary AND on these inputs and return result also as a string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert string_xor('10000000', '10000000') == '1000001'\nassert string_xor('10000000', '1000001') == '11000000'\nassert string_xor('11000000', '1000001') == '10000000'\n",
        "num_ids_2": 22,
        "num_ids_4": 60
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     longest([]) == None\nassert     longest(['']) == ''\nassert     longest([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"   \"\nassert     longest([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"\"\n\n",
        "num_ids_2": 19,
        "num_ids_4": 81
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     longest([]) is None\nassert     longest([\"\"]) is None\nassert     longest([\"abc\", \"cba\", \"c\"]) == \"c\"\nassert     longest([\"abc\", \"cba\", \"abc\"]) == \"abc\"\nassert     longest([\"abc\", \"cba\", \"c\", \"bc\"]) == \"abc\"\n",
        "num_ids_2": 20,
        "num_ids_4": 62
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef longest_2(strings: List[str]) -> Optional[str]:\n    \"\"\" Return the longest word of the list of strings.\n    \n    A string can be composed of multiple words, but the string\n    should be sorted in alphabetical order and should be shorter\n    than the longest word in the list.\n    \n    Return None in case the input list is empty.\n    \n    >>> longest_2([\"a\", \"b\", \"c\"])\n    'c'\n    >>> longest_2([\"aa\", \"bb\", \"aaa\"])\n    'aaa'\n    >>> longest_2([\"aaa\", \"aa\", \"a\"])\n    'a'\n    >>> longest_2([\"aa\", \"a\"])\n    'a'\n    >>> longest_2([\"aa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     longest([]) is None\nassert     longest(['ab', 'ab', 'ab']) == 'ab'\nassert     longest(['ab', 'ab', 'ab', 'ab']) == 'ab'\nassert     longest(['ab', 'ab', 'ab', 'ab', 'ab']) == 'ab'\n",
        "num_ids_2": 29,
        "num_ids_4": 78
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     longest([]) == None\nassert     longest(['ab', 'aba', 'aba']) == 'aba'\nassert     longest(['ab', 'aba', 'abc']) == 'abc'\nassert     longest(['ab', 'aba', 'abacab']) == 'abacab'\nassert     longest(['ab', 'aba', 'abacab', 'abdcab']) == 'abdcab'\n",
        "num_ids_2": 29,
        "num_ids_4": 73
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlongest([\"hello\", \"the\", \"wild\", \"fox\", \"jumped\", \"over\", \"the\", \"fence\", \".\"]) == \"the\"\nlongest([\"\", \"\"]) == None\nlongest([\"\", \"\", \"\"]) == \"\"\nlongest([]) == None\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     longest([]) is None\nassert     longest([\"\"]) is None\nassert     longest([\"test\"]) == \"test\"\nassert     longest([\"test\"]) == \"test\"\nassert     longest([\"test\", \"test\"]) == \"test\"\n",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     longest([]) == None\nassert     longest(['abcde']) == 'abcde'\nassert     longest(['abcde', 'bcdfg']) == 'abcde'\nassert     longest(['abcde', 'bcdfg', 'cdefgh']) == 'abcde'\nassert     longest(['abcd', 'abce', 'abd']) == 'abcd'\n",
        "num_ids_2": 25,
        "num_ids_4": 72
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     longest([]) is None\nassert     longest([\"12345\"]) == \"12345\"\nassert     longest([\"123\", \"45\"]) == \"123\"\nassert     longest([\"123\", \"45\", \"567\"]) == \"123\"\nassert     longest([\"123\", \"45\", \"567\", \"678\"]) == \"123\"\n",
        "num_ids_2": 25,
        "num_ids_4": 63
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef test_greatest_common_divisor():\n    \"\"\" Tests for greatest_common_divisor function\n    \"\"\"\n    assert greatest_common_divisor(10, 8) == 2\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Calculate the least common multiple of two integers a and b\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(9, 3) == 3, 'greatest_common_divisor(9, 3) == 3'\nassert     greatest_common_divisor(3, 9) == 3, 'greatest_common_divisor(3, 9) == 3'\nassert     greatest_common_divisor(10, 3) == 1, 'greatest_common_divisor(10, 3) == 1'\nassert     greatest_common_divisor(8, 8) == 8, 'greatest_common_divisor(8, 8) == 8'\nassert     greatest_common_divisor(16, 8) == 8, 'greatest_common_divisor(16, 8) == 8'\n",
        "num_ids_2": 72,
        "num_ids_4": 144
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    greatest_common_divisor(4, 5) == 1\n    greatest_common_divisor(4, 10) == 1\n    greatest_common_divisor(5, 10) == 1\n    greatest_common_divisor(10, 10) == 1\n    greatest_common_divisor(10, 5) == 1\n    greatest_common_divisor(9, 10) == 1\n    greatest_common_divisor(8, 10) == 1\n    greatest_common_divisor(5, 9) == 1\n    greatest_common_divisor(5, 7) == 1\n    greatest_common_divisor(4, 11) == 1\n    greatest_common_divisor(5, 6) == 1\n    greatest_common_divisor(2, 3) == 1\n    greatest_common_divisor(8, 6) == 1\n    greatest_common_divisor(12, 8) == 1\n    greatest_common_divisor(3, 4) == 1\n    greatest_common_divisor(6, 4) == 1\n    greatest_common_divisor(9, 4) == 1\n    greatest_common_divisor(5, 4) == 1\n    greatest_common_divisor(4, 4) == 1\n    greatest_common_divisor(5, 4) == 1\n    greatest_common_divisor(4, 5) == 1\n    greatest_common_divisor(5, 5) == 1\n    greatest_common_divisor(9, 4) == 1\n    greatest_common_divisor(9, 5) == 1\n    greatest_common_divisor(9, 6) == 1\n    greatest_common_divisor(9, 7) == 1\n    greatest_common_divisor(9, 8) == 1\n    greatest_common_divisor(9, 10) == 1\n    greatest_common_divisor(9, 11) == 1\n    greatest_common_divisor(9, 12) == 1\n    greatest_common_divisor(9, 13) == 1\n    greatest_common_divisor(9, 14) == 1\n    greatest_common_divisor(9, 15) == 1\n    greatest_common_divisor(9, 16) == 1\n    greatest_common_divisor(9, 17) == 1\n    greatest_common_divisor(9, 18) == 1\n    greatest_common_divisor(9, 19) == 1\n    greatest_common_divisor(9, 20) == 1\n    greatest_common_divisor(9, 21) == 1\n    greatest_common_divisor(9, 22) == 1\n    greatest_common_divisor(9, 23) == 1\n    greatest_common_divisor(9, 24) == 1\n    greatest_common_divisor(9, 25) == 1\n    greatest_common_divisor(9, 26) == 1\n    greatest_common_divisor(9, 27) == 1\n    greatest_common_divisor(9, 28) == 1\n    greatest_common_divisor(9, 29) == 1\n    greatest_common_divisor(9, 30) == 1\n    greatest_common_divisor(9, 31) == 1\n    greatest_common_divisor(9, 32) == 1\n    greatest_common_divisor(9, 33) == 1\n    greatest_common_divisor(9, 34) == 1\n    greatest_common_divisor(9, 35) == 1\n    greatest_common_divisor(9, 36) == 1\n    greatest_common_divisor(9, 37) == 1\n    greatest_common_divisor(9, 38) == 1\n    greatest_common_divisor(9, 39) == 1\n    greatest_common_divisor(9, 40) == 1\n    greatest_common_divisor(9, 41) == 1\n    greatest_common_divisor(9, 42) == 1\n    greates",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_total_number_of_factors(n: int, k: int) -> int:\n    \"\"\" Return the number of factors of a factor number n\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    greatest_common_divisor(2, 3) == 1\n    greatest_common_divisor(3, 3) == 3\n    greatest_common_divisor(4, 3) == 1\n    greatest_common_divisor(10, 3) == 3\n    greatest_common_divisor(10, 10) == 1\n    greatest_common_divisor(3, 5) == 1\n    greatest_common_divisor(0, 5) == 5\n    greatest_common_divisor(0, 0) == 0\n    greatest_common_divisor(100, 50) == 50\n\n\ndef closest_divisor(n: int) -> int:\n    \"\"\" Return the closest divisor of the natural number n\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\nif __name__ == \"__main__\":\n    pass\n    \n    \n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert greatest_common_divisor(2, 4) == 2\nassert greatest_common_divisor(7, 10) == 1\nassert greatest_common_divisor(6, 4) == 2\nassert greatest_common_divisor(0, 0) == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes('hello') == ['h', 'he', 'hel', 'helo', 'hell']\nassert     all_prefixes('hi') == ['h', 'hi']\nassert     all_prefixes('h') == ['h', 'he', 'hel', 'hell']\nassert     all_prefixes('hhe') == ['h', 'hel', 'helo', 'hell']\nassert     all_prefixes('hhelo') == ['h', 'hel', 'helo', 'hell']\n",
        "num_ids_2": 44,
        "num_ids_4": 92
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"hello\") == [\"h\", \"he\", \"hel\", \"hell\", \"hello\"]\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"ab\") == [\"ab\"]\nassert     all_prefixes(\"ac\") == [\"ac\"]\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from longest to shortest of the input string\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert all_prefixes(\"kakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakaka",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello', 'helloo', 'helloooo', 'hellohe', 'hellohello']\nassert     all_prefixes('herp') == ['her', 'herp', 'herpree', 'herpre', 'herprep', 'herpreree', 'herprereee', 'herprereee']\nassert     all_prefixes('hello') == ['h', 'he', 'hel', 'hell', 'hello', 'helloo', 'helloooo', 'hellohe', 'hellohello']\n",
        "num_ids_2": 91,
        "num_ids_4": 133
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert all_prefixes(\"abcd\") == [\"ab\", \"abc\", \"abcd\"]\nassert all_prefixes(\"ab\") == [\"ab\", \"ab\"]\nassert all_prefixes(\"abab\") == [\"ab\", \"ab\", \"abab\"]\nassert all_prefixes(\"aaaaaaaaaaaaaaaaaaaaaaaaa\") == [\"aaaaaaaaaaaaaaaaaaaaaaaaa\"]\n",
        "num_ids_2": 24,
        "num_ids_4": 61
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_prefixes('spam') == ['sp','s', 'p', 'p', 'am']\nassert all_prefixes('bacon') == ['ba', 'b', 'c', 'c', 'a', 'a', 'on', 'p', 'p', 'am']\nassert all_prefixes('spamspamspam') == ['sp','s', 'p', 'p','sp','sp','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam']\nassert all_prefixes('spamspamspamspam') == ['sp','s', 'p', 'p','sp','sp','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam','spam']\nassert all_prefixes('bb') == ['b', 'b', 'b', 'b', 'b']\n",
        "num_ids_2": 67,
        "num_ids_4": 285
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_prefixes('abcdef') == ['', 'a', 'ab', 'abc', 'abcd', 'abcde']\nassert     all_prefixes('abcdefghij') == ['', 'a', 'ab', 'abc', 'abcd', 'abcdeg', 'abcdegj', 'abcdegjh', 'abcdegjih', 'abcdegjihj', 'abcdegjihjk', 'abcdegjihjkl', 'abcdegjihjl', 'abcdegjihl', 'abcdegjihlj', 'abcdegjihljk', 'abcdegjihljl', 'abcdegjihljk', 'abcdegjihljlk', 'abcdegjihljkp']\nassert     all_prefixes('ed') == ['', 'e', 'ede', 'ed', 'ede', 'ede']\nassert     all_prefixes('abcdefg') == ['', 'a', 'ab', 'abc', 'abcd', 'abcdg', 'abcdeg', 'abcdegf', 'abcdegf', 'abcdegf', 'abcdegfg', 'abcdegfg', 'abcdegfg', 'abcdegfg', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl', 'abcdegfgl'",
        "num_ids_2": 186,
        "num_ids_4": 1022
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_prefixes(\"asdfgh\") == ['a', 'a', 'a', 'a', 'a', 'f', 'f', 'h', 'h']\nassert     all_prefixes(\"gbc\") == ['g', 'g', 'b', 'c']\nassert     all_prefixes(\"mixed\") == ['m','m', 'i', 'i', 'g', 'g', 'h', 'h', 'o', 'o', 'u', 'u']\nassert     all_prefixes(\"abcdefgh\") == ['a', 'a', 'a', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nassert     all_prefixes(\"zbaxx\") == ['z', 'b', 'a', 'x', 'a', 'z']\n",
        "num_ids_2": 64,
        "num_ids_4": 209
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \" 0 \"\nassert     string_sequence(3) == \" 0 \"\nassert     string_sequence(4) == \"  0 \"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(string_sequence(10)) # '0 1 2 3 4 5 6 7 8 9'\n\ndef string_sequence_redux(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_sequence(10) =='0  1  2  3  4  5  6  7  8  9'\nassert     string_sequence(0) == ''\nassert     string_sequence(1) =='0'\nassert     string_sequence(2) ==' 0  1'\nassert     string_sequence(3) =='  0  1  2'\n",
        "num_ids_2": 42,
        "num_ids_4": 70
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_sequence(2) == \"0 1\"\nassert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(6) == \"0 1 2 3 4 5\"\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_distinct_characters('banana') == 5\nassert     count_distinct_characters('A man, a plan, a canal: Panama') == 11\nassert     count_distinct_characters('abba') == 2\n",
        "num_ids_2": 40,
        "num_ids_4": 55
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_distinct_characters(\"\") == 0\nassert count_distinct_characters(\"a\") == 1\nassert count_distinct_characters(\"A\") == 1\nassert count_distinct_characters(\"aaaa\") == 4\n",
        "num_ids_2": 16,
        "num_ids_4": 44
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_distinct_characters('Dog') == 4, 'Incorrect'\nassert     count_distinct_characters('Cat') == 4, 'Incorrect'\nassert     count_distinct_characters('1aA2B3C4D') == 4, 'Incorrect'\nassert     count_distinct_characters('aA1bB2C3D') == 2, 'Incorrect'\nassert     count_distinct_characters('a1b2c3d') == 2, 'Incorrect'\n",
        "num_ids_2": 40,
        "num_ids_4": 96
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('aabb') == 3\nassert     count_distinct_characters('aabB') == 3\nassert     count_distinct_characters('PYTHON') == 7\n",
        "num_ids_2": 31,
        "num_ids_4": 66
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('abcdef') == 6\nassert     count_distinct_characters('abcdefgh') == 8\nassert     count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 26\n\n",
        "num_ids_2": 31,
        "num_ids_4": 91
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"abcd\") == 4\nassert     count_distinct_characters(\"abCd\") == 4\nassert     count_distinct_characters(\"abcd123\") == 5\nassert     count_distinct_characters(\"abcd123A\") == 5\nassert     count_distinct_characters(\"abcd123a\") == 5\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_distinct_characters('abc') == 3\n\ncount_distinct_characters('a') == 1\n\ncount_distinct_characters('aA') == 2\n\ncount_distinct_characters('Aa') == 2\n\ncount_distinct_characters('A') == 1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_distinct_characters('abcd') == 4\nassert     count_distinct_characters('sTreS') == 5\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('') == 0\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check if a given string is a palindrome.\n    \"\"\"\n    pass\n",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"ABC\") == 3\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_music('o|o|o|o') == [4, 4, 4, 4]\nassert     parse_music('o|o|') == [4, 4, 4, 0]\nassert     parse_music('o|') == [4, 4, 0, 0]\nassert     parse_music('o|o|o|o') == [4, 4, 4, 4]\nassert     parse_music('o|o|o|o') == [4, 4, 4, 4]\n",
        "num_ids_2": 47,
        "num_ids_4": 92
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_music('o|o|o|o|') == [4, 4, 4, 4, 1, 1, 1, 1, 1, 1]\nassert     parse_music('o|.|o|o|o|') == [4, 4, 4, 4, 1, 1, 1, 1, 1, 1]\nassert     parse_music('o|o|o|o|') == [4, 4, 4, 4, 1, 1, 1, 1, 1, 1]\nassert     parse_music('|.|o|o|o|o|') == [4, 4, 4, 4, 1, 1, 1, 1, 1, 1]\nassert     parse_music('|o|o|o|o|') == [4, 4, 4, 4, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 78,
        "num_ids_4": 157
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \nassert parse_music(\"-o|-o|-o|-o|-o\") == [4, 4, 4, 4, 4]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_music('o') == [1, 1, 1, 1]\nassert     parse_music('o|') == [0.5, 0.5, 0.5, 0.5]\nassert     parse_music('.|') == [0.25, 0.25, 0.25, 0.25]\n",
        "num_ids_2": 47,
        "num_ids_4": 75
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert parse_music('a|b|c|') == ['a', 'o|', 'b', 'o|', 'c', 'o|']\nassert parse_music('c|c|') == ['c', 'o|', 'c', 'o|']\nassert parse_music('a|b|b|') == ['a', 'o|', 'b', 'o|', 'b', 'o|']\nassert parse_music('a|b|c|d') == ['a', 'o|', 'b', 'o|', 'c', 'o|', 'd', 'o|']\n",
        "num_ids_2": 38,
        "num_ids_4": 99
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_music('o') == [0, 0, 0, 0]\nassert     parse_music('o|') == [0, 0, 0, 0, 0, 0]\nassert     parse_music('o.|') == [0, 0, 0, 0, 0, 0, 0, 0]\nassert     parse_music('o|.|') == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     parse_music('o|o|o|') == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
        "num_ids_2": 43,
        "num_ids_4": 106
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_music('sooo|oo') ==     [4, 2, 2, 1]\nassert     parse_music('oo') ==     [4]\nassert     parse_music('oo|') ==     [2, 2, 1]\nassert     parse_music('oo|o|o') ==     [4, 2, 2, 1]\nassert     parse_music('oo|oo') ==     [4, 4, 1]\n",
        "num_ids_2": 37,
        "num_ids_4": 80
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_music('o|') == [4]\nassert    parse_music('o|o') == [4, 4]\nassert     parse_music('o.|') == [2, 2]\nassert    parse_music('o.|.|') == [3, 2, 2]\nassert    parse_music('o.|o|') == [3, 2, 3]\n",
        "num_ids_2": 31,
        "num_ids_4": 69
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_music('o|o') == ['o', 'o']\nassert     parse_music('o|o|') == ['o', 'o', 'o', 'o']\nassert     parse_music('o|o|o|') == ['o', 'o', 'o', 'o', 'o', 'o']\nassert     parse_music('o|o|o|o|o|') == ['o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o']\nassert     parse_music('o|o|o|o|o|o|') == ['o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o']\n",
        "num_ids_2": 43,
        "num_ids_4": 122
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     how_many_times(\"mississippi\", \"issip\") == 3\nassert     how_many_times(\"mississippi\", \"pi\") == 2\nassert     how_many_times(\"mississippi\", \"m\") == 1\nassert     how_many_times(\"mississippi\", \"issi\") == 0\nassert     how_many_times(\"mississippi\", \"ssi\") == 2\n",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times(\"abcaaa\", \"aa\") == 4\nassert     how_many_times(\"abcaaa\", \"a\") == 3\nassert     how_many_times(\"abcaaa\", \"ba\") == 1\nassert     how_many_times(\"abcaaa\", \"ab\") == 0\nassert     how_many_times(\"abcaaa\", \"abc\") == 0\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     how_many_times(\"aaaabaaa\", \"aaa\") == 3\nassert     how_many_times(\"aaabaaa\", \"aaa\") == 2\nassert     how_many_times(\"aabaaaa\", \"aaa\") == 2\nassert     how_many_times(\"aaa\", \"aaa\") == 1\nassert     how_many_times(\"aaabaaa\", \"aaa\") == 2\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     how_many_times('banana','na') == 1\nassert     how_many_times('banana','nana') == 2\nassert     how_many_times('banana','nana', case_insensitive=False) == 2\nassert     how_many_times('banana','ana') == 0\nassert     how_many_times('banana','banana', case_insensitive=False) == 3\n",
        "num_ids_2": 33,
        "num_ids_4": 73
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Test passed.\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     how_many_times('abcabcdef', 'ab') == 3\nassert     how_many_times('abcabcdef', 'cd') == 0\nassert     how_many_times('abcabcdef', 'bcd') == 1\nassert     how_many_times('abcabcdef', 'bc') == 2\nassert     how_many_times('abcabcdef', 'bcdef') == 2\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nnumbers = \"seven one three seven nine seven seven three seven seven seven nine seven\"\nsort_numbers(numbers)\n\n\ndef sort_numbers_1(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numbers(\"one zero three two\") == \"three zero one two\"\nassert     sort_numbers(\"zero five seven two\") == \"two zero zero five seven\"\nassert     sort_numbers(\"three four nine zero one\") == \"zero nine one zero one four three\"\nassert     sort_numbers(\"one four five six seven zero two\") == \"zero two zero one zero four one five six seven\"\n",
        "num_ids_2": 41,
        "num_ids_4": 94
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"zero\") == \"zero\"\nassert     sort_numbers(\"one\") == \"one\"\nassert     sort_numbers(\"two\") == \"two\"\nassert     sort_numbers(\"three\") == \"three\"\nassert     sort_numbers(\"four\") == \"four\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numbers('five') == 'five', \"Fail\"\nassert     sort_numbers('two') == 'two', \"Fail\"\nassert     sort_numbers('four') == 'four', \"Fail\"\nassert     sort_numbers('eight') == 'eight', \"Fail\"\nassert     sort_numbers('three') == 'three', \"Fail\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    sort_numbers('four seven eight five three 2 one zero') == 'zero one two three four five seven eight'\n    sort_numbers('eight seven zero five four three 2 one') == 'zero one two three four five eight seven'\n    sort_numbers('seven eight five four 3 two 1 zero') == 'zero one two 3 four 5 eight seven'\n    sort_numbers('five four 3 two 1 zero seven eight') == 'zero one two 3 four 5 eight 7 zero seven'\n    sort_numbers('zero three 0 zero 0 five four 0 zero 1 zero') == '0 1 0 0 3 5 0 0 0 zero zero'\n    sort_numbers('0 zero 2 zero 0 zero 0 zero 0') == '0 0 0 0 0 0 0 2 0 0'\n    sort_numbers('zero zero 0 zero') == '0 0 0 0 0'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers('one two zero four') == 'zero one two four', \\\n'incorrect output for sort_numbers(\"one two zero four\")'\nassert     sort_numbers('four zero two one') == 'zero four one two', \\\n'incorrect output for sort_numbers(\"four zero two one\")'\nassert     sort_numbers('zero one two four') == 'zero one two four', \\\n'incorrect output for sort_numbers(\"zero one two four\")'\nassert     sort_numbers('one four two zero') == 'zero one four two', \\\n'incorrect output for sort_numbers(\"one four two zero\")'\nassert     sort_numbers('zero four two one') == 'zero four two one', \\\n'incorrect output for sort_numbers(\"zero four two one\")'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"nine zero one two three four five six seven eight\"\nassert     sort_numbers(\"zero one two three four five six seven eight nine zero\") == \"nine zero one two three four five six seven eight\"\nassert     sort_numbers(\"zero one two three four five six seven eight nine zero four\") == \"nine zero one two three four five 6 seven 8 nine zero\"\nassert     sort_numbers(\"zero one two three four five six seven eight nine zero four five\") == \"nine zero one two 3 four 5 6 7 8 9 zero\"\nassert     sort_numbers(\"zero one two three four five six seven eight nine zero four five six\") == \"nine zero one 2 3 4 5 6 7 8 9 zero zero zero four\"\n",
        "num_ids_2": 65,
        "num_ids_4": 138
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sort_numbers('one') == '1'\nassert sort_numbers('four') == '4'\nassert sort_numbers('seven') == '7'\nassert sort_numbers('eight') == '8'\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numbers(\"one\") == \"1\"\nassert     sort_numbers(\"two\") == \"2\"\nassert     sort_numbers(\"three\") == \"3\"\nassert     sort_numbers(\"four\") == \"4\"\nassert     sort_numbers(\"five\") == \"5\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numbers('three six four') == 'four six three'\nassert     sort_numbers('four') == 'four'\nassert     sort_numbers('ten') == 'ten'\n\ndef sort_by_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nnums = [2.5, 3.3, 5.7, 6.7, 8.8, 10.1]\nassert find_closest_elements(nums) == (2.5, 3.3)\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    numbers = [-2, -1, 0, 1, 2, 3, 4, 5, 6]\n    print(find_closest_elements(numbers))\n    numbers = [-2, -1, -0.5, 0, 0.5, 1, 1.5, 2, 2.5, 3, 4, 5]\n    print(find_closest_elements(numbers))\n    numbers = [-2, -1, -0.5, -0.3, 0, 0.3, 0.5, 0.7, 1, 1.5, 2, 2.5, 3, 4, 5]\n    print(find_closest_elements(numbers))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_closest_elements([2.4, 5.6]) == (2.4, 5.6)\nassert     find_closest_elements([7, 9, 7]) == (7, 9)\nassert     find_closest_elements([2.3, 5.4, 9.2]) == (2.3, 5.4)\nassert     find_closest_elements([-1.4, 3.4, 1.2]) == (-1.4, 3.4)\nassert     find_closest_elements([3.4, 1.2, 5.4]) == (1.2, 5.4)\n",
        "num_ids_2": 54,
        "num_ids_4": 123
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nassert     find_closest_elements([1, 5, 2, 0, 2, 4, 5, 6, 7, 3, 1]) == (0, 1)\nassert     find_closest_elements([9, 11, 13, 12, 5, 1]) == (1, 5)\nassert     find_closest_elements([4, 5, 1, 2, 3, 6]) == (1, 3)\nassert     find_closest_elements([]) == ()\n",
        "num_ids_2": 68,
        "num_ids_4": 128
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    lowest = numbers[0]\n    highest = numbers[0]\n    for number in numbers:\n        if number < lowest:\n            lowest = number\n        if number > highest:\n            highest = number\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < abs(numbers[i] - lowest) and diff < abs(numbers[i] - highest):\n            continue\n        else:\n            if numbers[i] > numbers[i + 1]:\n                lowest = numbers[i + 1]\n            else:\n                highest = numbers[i + 1]\n    return (lowest, highest)\n\n\nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_closest_elements([1, 2, 5]) == (1, 2)\nassert     find_closest_elements([1, 4, 5]) == (1, 4)\nassert     find_closest_elements([1, 2, 3]) == (1, 2)\nassert     find_closest_elements([-3, -4, -5]) == (-3, -4)\nassert     find_closest_elements([1, 2, 4]) == (1, 2)\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # your test code here\n    # your test code here\n    # your test code here\n    assert find_closest_elements([0,1,2,4,5,9]) == (0,5)\n    assert find_closest_elements([0,2,5,10,10,10]) == (0,2)\n    assert find_closest_elements([-1,0,2,3,5,9]) == (0,5)\n    assert find_closest_elements([10,-10,3,4,5,5]) == (5,10)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_closest_elements([1, 2, 3, 5, 8, 13]) == (1, 3)\nassert     find_closest_elements([10, 2, 3, 5, 8, 13]) == (2, 10)\nassert     find_closest_elements([15, 11, 12, 13, 14]) == (12, 13)\nassert     find_closest_elements([5, 6, 9, 13, 14, 17]) == (13, 17)\nassert     find_closest_elements([-5, -9, -14, -17, -13, -12, -11]) == (-17, -13)\n",
        "num_ids_2": 60,
        "num_ids_4": 118
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_closest_elements([1, 2, 4]) == (2, 4)\nassert find_closest_elements([1, 3, 5, 7]) == (1, 5)\nassert find_closest_elements([3, 5, 2, 1, 8, 6]) == (1, 8)\nassert find_closest_elements([3, 2, 1, 6]) == (1, 6)\n",
        "num_ids_2": 26,
        "num_ids_4": 80
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_closest_elements([3, 1, 2]) == (1, 2)\nassert     find_closest_elements([1, 2, 3]) == (2, 3)\nassert     find_closest_elements([-1, -2, -3]) == (-2, -3)\nassert     find_closest_elements([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == (-2, -5)\nassert     find_closest_elements([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == (-2, -5)\n",
        "num_ids_2": 48,
        "num_ids_4": 125
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef denormalize_to_orig(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers in the range of 0 to 1,\n    denormalize them into the range of their original values\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef rescale_to_unit_max_min(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([0, 1]) == [0, 1]\nassert     rescale_to_unit([1, 1]) == [0, 1]\nassert     rescale_to_unit([0.5, 0.5]) == [0, 1]\nassert     rescale_to_unit([1, 1]) == [0, 1]\nassert     rescale_to_unit([0.5, 0.5]) == [0, 1]\n",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0.25, 0.5, 0.75, 1]\nassert rescale_to_unit([-1, 2, 3, 4]) == [0.75, 0.5, 0.25, 1]\nassert rescale_to_unit([-10, -9, -8, -7, -6]) == [0.0625, 0.125, 0.25, 0.375, 0.5]\nassert rescale_to_unit([-1, -2, -3, -4, -5]) == [0.25, 0.5, 0.75, 1, 1]\n\n\ndef softmax(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the elements are softmax normalized.\n    \"\"\"\n    pass\n",
        "num_ids_2": 68,
        "num_ids_4": 157
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrescale_to_unit([0,1,2]) == [-1,1,1]\nrescale_to_unit([1,2,3]) == [-.5,.5,.5]\nrescale_to_unit([1,3,4]) == [0,1,.25]\nrescale_to_unit([1,4,5]) == [0,1,.75]\nrescale_to_unit([1,5,6]) == [0,1,.8]\nrescale_to_unit([1,6,7]) == [0,1,.7]\nrescale_to_unit([1,7,8]) == [0,1,.1]\nrescale_to_unit([1,8,9]) == [0,1,.2]\nrescale_to_unit([1,9,10]) == [0,1,.3]\nrescale_to_unit([1,10,11]) == [0,1,.35]\nrescale_to_unit([1,11,12]) == [0,1,.4]\nrescale_to_unit([1,12,13]) == [0,1,.4]\nrescale_to_unit([1,13,14]) == [0,1,.45]\nrescale_to_unit([1,14,15]) == [0,1,.5]\nrescale_to_unit([1,15,16]) == [0,1,.6]\nrescale_to_unit([1,16,17]) == [0,1,.7]\nrescale_to_unit([1,17,18]) == [0,1,.8]\nrescale_to_unit([1,18,19]) == [0,1,.9]\nrescale_to_unit([1,19,20]) == [0,1,.95]\nrescale_to_unit([1,20,21]) == [0,1,.5]\nrescale_to_unit([1,21,22]) == [0,1,.6]\nrescale_to_unit([1,22,23]) == [0,1,.7]\nrescale_to_unit([1,23,24]) == [0,1,.8]\nrescale_to_unit([1,24,25]) == [0,1,.9]\nrescale_to_unit([1,25,26]) == [0,1,.95]\nrescale_to_unit([1,26,27]) == [0,1,.5]\nrescale_to_unit([1,27,28]) == [0,1,.6]\nrescale_to_unit([1,28,29]) == [0,1,.7]\nrescale_to_unit([1,29,30]) == [0,1,.8]\nrescale_to_unit([1,30,31]) == [0,1,.9]\nrescale_to_unit([1,31,32]) == [0,1,.95]\nrescale_to_unit([1,32,33]) == [0,1,.5]\nrescale_to_unit([1,33,34]) == [0,1,.6]\nrescale_to_unit([1,34,35]) == [0,1,.7]\nrescale_to_unit([1,35,36]) == [0,1,.8]\nrescale_to_unit([1,36,37]) == [0,1,.9]\nrescale_to_unit([1,37,38]) == [0,1,.95]\nrescale_to_unit([1,38,39]) == [0,1,.5]\nrescale_to_unit([1,39,40]) == [0,1,.6]\nrescale_to_unit([1,40,41]) == [0,1,.7]\nrescale_to_unit([1,41,42]) == [0,1,.8]\nrescale_to_unit([1,42,43]) == [0,1,.9]\nrescale_to_unit([1,43,44]) == [0,1,.95]\nrescale_to_unit([1,44,45]) == [0,1,.5]\nrescale_to_unit([1,45,46]) == [0,1,.6]\nrescale_to_unit([1,46,47]) == [0,1,.7]\nrescale_to_unit([1,4",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    rescale_to_unit([1, 2, 3]) == [0.25, 0.5, 0.75]\n    rescale_to_unit([1, -3, 3]) == [0.25, -0.25, 0.75]\n    rescale_to_unit([0.25, 0.5, 0.75]) == [1.0, 0.75, 0.25]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([0.2, 0.3, 0.5]) == [0.2, 0.3, 0.5]\nassert rescale_to_unit([0.2, 0.3, 0.5]) == [0.2, 0.3, 0.5]\nassert rescale_to_unit([0.2, 0.3, 0.5]) == [0.2, 0.3, 0.5]\nassert rescale_to_unit([0.2, 0.3, 0.5]) == [0.2, 0.3, 0.5]\nassert rescale_to_unit([0.2, 0.3, 0.5]) == [0.2, 0.3, 0.5]\n",
        "num_ids_2": 71,
        "num_ids_4": 141
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([0.2, 0.1, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) == [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\nassert     rescale_to_unit([0.2, 0.1, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) == [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n",
        "num_ids_2": 168,
        "num_ids_4": 168
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([0, 1, 2, 3, 4, 5, 6]) == [0, 0.015625, 0.03125, 0.0625, 0.09375, 0.15625, 0.3125]\nassert     rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 0.015625, 0.03125, 0.0625, 0.09375, 0.15625, 0.3125, 0.65625]\nassert     rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [0, 0.015625, 0.03125, 0.0625, 0.09375, 0.15625, 0.3125, 0.65625, 0.90625]\nassert     rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 0.015625, 0.03125, 0.0625, 0.09375, 0.15625, 0.3125, 0.65625, 0.90625, 0.9375]\nassert     rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 0.015625, 0.03125, 0.0625, 0.09375, 0.15625, 0.3125, 0.65625, 0.90625, 0.9375, 0.9625]\n",
        "num_ids_2": 125,
        "num_ids_4": 280
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef rescale_to_unit_2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    numbers = numbers[:]\n    min_value = min(numbers)\n    max_value = max(numbers)\n\n    if abs(min_value) > abs(max_value):\n        min_value, max_value = max_value, min_value\n\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_value) / (max_value - min_value)\n\n    return numbers\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_integers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, \"a\", \"b\", \"c\"]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 'a', 'b', 'c']\n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for floats\n    \"\"\"\n    pass\n",
        "num_ids_2": 199,
        "num_ids_4": 199
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     filter_integers([-1, 5, -4, \"hello\", 2, 2.5]) == [-1, 2, 2.5]\nassert     filter_integers([1, \"hello\", 4.2, 3, \"world\", 0]) == [1, 3, 4.2, \"world\"]\nassert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3, \"hello\", 5]) == []\n",
        "num_ids_2": 65,
        "num_ids_4": 113
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4], \"Wrong result\"\nassert     filter_integers([1.0, 2.2, 3.4, 4.5]) == [1.0, 2.2, 3.4, 4.5], \"Wrong result\"\nassert     filter_integers([1, 2, \"c\", 4.5]) == [1, 2, 4.5], \"Wrong result\"\n\ndef find_max_integer(values: List[Any]) -> int:\n    \"\"\" Finds max integer in given list of values.\n    \"\"\"\n    pass\n",
        "num_ids_2": 78,
        "num_ids_4": 112
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3], \"First\"\nassert     filter_integers([1.0, 2.0, 3.0]) == [1.0, 2.0, 3.0], \"Second\"\nassert     filter_integers([True, False, False, True]) == [True, False, True], \"Third\"\nassert     filter_integers([False, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \"Fourth\"\nassert     filter_integers([]) == [], \"Fifth\"\n",
        "num_ids_2": 62,
        "num_ids_4": 144
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([1, '2', False, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([1.2, '2', False, 3, 4, 5, 6, 7, 8, 9]) == [1.2, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([1, 2, 3, '4', 5, 6, 7, 8, 9]) == []\nassert     filter_integers([1, '2', False, 3, 4, 5, 6, '7', 8, 9]) == []\n",
        "num_ids_2": 95,
        "num_ids_4": 177
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_integers([1, 'a', 4.2, 5, 6, True, -1.5]) == [1, 5, 6]\nassert filter_integers(['a', 1, 'b', 4, 0, 9, -2]) == ['a', 1, 'b', 4, 0, 9]\nassert filter_integers([1, 'a', 'b', 'c', -2, 3, -5, -7, -1.5, -9]) == \\\n        [1, -1.5, -9, -5, -7, -3, 'b', 'c']\nassert filter_integers([]) == []\n\ndef multiply_even_numbers(numbers: List[int]) -> int:\n    \"\"\" Multiply the even numbers, if there is no even number just\n        return the first number.\n    \"\"\"\n    pass\n",
        "num_ids_2": 75,
        "num_ids_4": 124
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     filter_integers(['a', 1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     filter_integers(set([1, 2, 3, 4, 5, 6, 7, 8])) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     filter_integers(tuple([1, 2, 3, 4, 5, 6, 7, 8])) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     filter_integers([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8]) == [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8]\n",
        "num_ids_2": 87,
        "num_ids_4": 178
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strlen('test') == 6\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         isinstance(strlen(''),     int)\nassert         isinstance(strlen('hello'),     int)\nassert         strlen('abcdefghijklmnopqrstuvwxyz') == 26\nassert         strlen('_') == 1\nassert         strlen('0') == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 61
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"a\") == 1\nassert     strlen(\"ab\") == 2\nassert     strlen(\"aabb\") == 3\nassert     strlen(\"aabbb\") == 4\n",
        "num_ids_2": 19,
        "num_ids_4": 40
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     strlen('abc') == 3\nassert     strlen('ABC') == 4\nassert     strlen('ABCD') == 4\nassert     strlen('ABCD123') == 7\nassert     strlen('ABCD12345') == 7\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strlen(\"bob\") == 5\nassert     strlen(\"\") == 0\n\ndef strcmp(string_1: str, string_2: str) -> int:\n    \"\"\" Return -1 if string_1 is less than string_2 else return 0 if \n        string_1 is equal to string_2 else return 1 if string_1 is \n        greater than string_2.\n    \"\"\"\n    pass\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strlen('string') == 10\nassert     strlen('') == 0\nassert     strlen('a') == 1\n\ndef strcmp(s1: str, s2: str) -> int:\n    \"\"\" Return the difference between two strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strlen('12345') == 5\nassert strlen('Hello world') == 13\nassert strlen('') == 0\nassert strlen('123') == 3\n\ndef strncmp(string1: str, string2: str, length: int) -> int:\n    \"\"\" Return the smallest lexicographical distance between the given strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 21,
        "num_ids_4": 39
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     '1' == strlen('1')\nassert     2 == strlen('12')\nassert     3 == strlen('123')\nassert     3 == strlen('1233')\nassert     4 == strlen('12345')\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strlen(\"hello\") == 5\nassert     strlen(\"\") == 0\nassert     strlen(\"world\") == 7\nassert     strlen(\"python\") == 7\nassert     strlen(\"abcdefg\") == 7\n",
        "num_ids_2": 19,
        "num_ids_4": 39
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(largest_divisor(3))\nprint(largest_divisor(6))\nprint(largest_divisor(12))\nprint(largest_divisor(18))\nprint(largest_divisor(20))\nprint(largest_divisor(27))\n\nprint('=== ')\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    # generate random integer\n    import random\n    # for test cases\n    print(largest_divisor(1))\n    print(largest_divisor(23))\n    print(largest_divisor(55))\n    print(largest_divisor(7))\n    print(largest_divisor(2323))\n    print(largest_divisor(39))\n    print(largest_divisor(10000))\n    print(largest_divisor(2))\n    print(largest_divisor(2.0))\n    print(largest_divisor(2.5))\n    print(largest_divisor(8))\n    print(largest_divisor(232323))\n    print(largest_divisor(8.4))\n    print(largest_divisor(8.3))\n    print(largest_divisor(0.99))\n    print(largest_divisor(-1.0))\n    print(largest_divisor(1.5))\n    print(largest_divisor(1.0))\n\n    # generate random number\n    import random\n    for i in range(10):\n        print(f'random number is {random.randint(1,100)}')\n    print(f'\\n----------------------------------------------------')\n    for i in range(10):\n        print(f'random number is {random.randint(1,100)}')\n    print(f'\\n----------------------------------------------------')\n    for i in range(10):\n        print(f'random number is {random.randint(1,100)}')\n\n    # generate random integer\n    import random\n    # for test cases\n    print(largest_divisor(1))\n    print(largest_divisor(23))\n    print(largest_divisor(55))\n    print(largest_divisor(7))\n    print(largest_divisor(2323))\n    print(largest_divisor(39))\n    print(largest_divisor(10000))\n    print(largest_divisor(2))\n    print(largest_divisor(2.0))\n    print(largest_divisor(2.5))\n    print(largest_divisor(8))\n    print(largest_divisor(232323))\n    print(largest_divisor(8.4))\n    print(largest_divisor(8.3))\n    print(largest_divisor(0.99))\n    print(largest_divisor(-1.0))\n    print(largest_divisor(1.5))\n    print(largest_divisor(1.0))\n\n    # generate random number\n    import random\n    for i in range(10):\n        print(f'random number is {random.randint(1,100)}')\n    print(f'\\n----------------------------------------------------')\n    for i in range(10):\n        print(f'random number is {random.randint(1,100)}')\n    print(f'\\n----------------------------------------------------')\n    for i in range(10):\n        print(f'random number is {random.randint(1,100)}')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_divisor(8) == 1\nassert     largest_divisor(16) == 2\nassert     largest_divisor(32) == 2\nassert     largest_divisor(128) == 4\nassert     largest_divisor(1024) == 8\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_divisor(0) == 1\nassert     largest_divisor(15) == 3\nassert     largest_divisor(17) == 7\nassert     largest_divisor(1) == 1\nassert     largest_divisor(39) == 9\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_divisor(4) == 4\nassert     largest_divisor(8) == 8\nassert     largest_divisor(13) == 13\nassert     largest_divisor(20) == 20\nassert     largest_divisor(100) == 20\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_divisor(3) == 3, 'test 1'\nassert     largest_divisor(3) == 3, 'test 2'\nassert     largest_divisor(9) == 3, 'test 3'\nassert     largest_divisor(8) == 2, 'test 4'\nassert     largest_divisor(12) == 2, 'test 5'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    for i in range(1, 101):\n        assert largest_divisor(i) == i, \"Error, incorrect result\"\n\n    print(\"Success. All cases passed.\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_divisor(5) == 1\nassert     largest_divisor(10) == 2\nassert     largest_divisor(30) == 3\nassert     largest_divisor(4) == 1\nassert     largest_divisor(5) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than n\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     factorize(4) == [2, 2]\nassert     factorize(10) == [2, 5]\nassert     factorize(20) == [2, 2, 5]\nassert     factorize(24) == [2, 3, 3, 4]\nassert     factorize(100) == [2, 2, 2, 5]\n",
        "num_ids_2": 28,
        "num_ids_4": 62
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    factorize(6) == [(2, 2), (3, 1)]\n    factorize(7) == [(2, 2), (3, 1), (7, 1)]\n    factorize(8) == [(2, 2), (2, 2), (3, 1), (5, 1)]\n    factorize(9) == [(3, 2), (9, 1)]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     factorize(2) ==     [2, 2]\nassert     factorize(2 * 3) ==     [2, 3]\nassert     factorize(3 * 5) ==     [3, 5]\nassert     factorize(4 * 6) ==     [2, 2, 2, 3]\nassert     factorize(7 * 11) ==     [7, 11]\n",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     factorize(15) == [3, 5]\nassert     factorize(24) == [2, 2, 3]\nassert     factorize(91) == [3, 11]\nassert     factorize(197) == [7, 19]\nassert     factorize(12) == [2]\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef prime_factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     factorize(0) == []\nassert     factorize(1) == []\nassert     factorize(2) == []\nassert     factorize(3) == []\nassert     factorize(4) == []\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     factorize(2) == [2]\nassert     factorize(3) == [2,3]\nassert     factorize(4) == [2,2]\nassert     factorize(5) == [5]\nassert     factorize(6) == [2,2]\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nn = 600851475143\n\ndef factorize_slow(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    n = n\n    i = 2\n    factors = []\n    while n!= 1:\n        if n % i == 0:\n            n = n/i\n            factors.append(i)\n        else:\n            i = i+1\n    return factors\n\ndef factorize_math(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    n = n\n    i = 2\n    factors = []\n    while n!= 1:\n        if n % i == 0:\n            n = n/i\n            factors.append(i)\n        else:\n            i = i+1\n    return factors\n\ndef factorize_math_2(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    n = n\n    i = 2\n    factors = []\n    while n!= 1:\n        if n % i == 0:\n            n = n/i\n            factors.append(i)\n        else:\n            i = i+1\n    return factors\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef get_max_factor(n: int) -> int:\n    \"\"\" Get the maximum factor of a given number\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert factorize(1) == []\nassert factorize(2) == [2]\nassert factorize(4) == [2, 2]\n",
        "num_ids_2": 12,
        "num_ids_4": 36
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef nums_at_k(arr: List[int], k: int) -> int:\n    \"\"\"\n    Given an array of integers and an integer k, find the number of unique k-diff pairs in the array.\n    Two numbers are different if their absolute difference is k.\n    \"\"\"\n    pass\n\ndef find_missing(arr: List[int]) -> int:\n    \"\"\"\n    Find an integer x in the array such that there are no elements to its left and right side x is present in the array.\n    \n    Note: x is not present in the array\n    \"\"\"\n    pass\n\ndef find_missing_target(arr: List[int], k: int) -> int:\n    \"\"\"\n    Find an integer x in the array such that there are no elements to its left and right side x is present in the array.\n    \n    Note: x is not present in the array\n    \"\"\"\n    pass\n\ndef find_max_val(inputs: List[int]) -> int:\n    \"\"\"\n    Find the maximum value in an array of integers.\n    \n    The array may contain invalid numbers and -inf, inf, or NaN.\n    \n    Note: If you get a wrong answer because of an invalid number, add NaN.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef longest_word(sentence: str) -> str:\n    \"\"\" Return the longest word in a sentence.\n    The longest word must also contain at least one letter.\n    If multiple words are of the same length,\n    then return the first word that comes after the shortest word.\n    Example: longest_word(\"The quick brown fox jumps over the lazy dog.\")\n    Returns: \"quick\"\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_duplicates([4, 6, 4, 5, 2, 2, 2, 6, 7, 6]) == [4, 5, 6, 2, 7]\nassert     remove_duplicates([4, 4, 4, 4, 4, 4]) == [4, 4]\nassert     remove_duplicates([1, 1, 1, 1]) == [1]\nassert     remove_duplicates([0, 0, 0, 0]) == [0, 0, 0, 0]\nassert     remove_duplicates([0, 0, 0]) == [0, 0, 0]\n",
        "num_ids_2": 68,
        "num_ids_4": 116
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert remove_duplicates([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]\n\nassert remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n\n",
        "num_ids_2": 35,
        "num_ids_4": 87
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_duplicates([1,2,3,4,5]) == [1,2,3,4,5]\nassert     remove_duplicates([1,1,1,1,1]) == [1,1,1,1,1]\nassert     remove_duplicates([1,2,3,3,3,3,4,5]) == [1,2,3,3,3,4,5]\nassert     remove_duplicates([0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0]\n\ndef find_fibonacci(num: int) -> int:\n    \"\"\" Find the number of Fibonacci numbers less than or equal to the given integer.\n    Use the recurrence relation: F_n = F_(n-1) + F_(n-2).\n    \"\"\"\n    pass\n",
        "num_ids_2": 62,
        "num_ids_4": 142
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_duplicates([2, 3, 1, 3, 3, 2, 4, 2]) ==\n        [2, 3, 1, 4, 2]\nassert     remove_duplicates([2, 3, 3, 2, 4, 2]) ==\n        [2, 3, 4, 2]\nassert     remove_duplicates([1, 1, 1, 1, 1]) ==\n        [1, 1, 1]\n",
        "num_ids_2": 48,
        "num_ids_4": 68
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_if_palindrome(numbers: List[int]) -> bool:\n    \"\"\" Given a list of integers, check whether the list is a palindrome or not.\n    A palindrome is defined as a sequence of numbers that reads the same backward as forward.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_duplicates([1,2,3,3,4,4,4,5]) == [1,2,3,4,5]\nassert remove_duplicates([]) == []\nassert remove_duplicates([1]) == [1]\nassert remove_duplicates([2,3,3,4,5]) == [2,3,4,5]\nassert remove_duplicates([1,2,3,3,4,4,4,5]) == [1,2,3,4,5]\n",
        "num_ids_2": 48,
        "num_ids_4": 90
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 1]) == [1]\nassert     remove_duplicates([1, 2, 2, 3, 4, 4, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8]) == \\\n        [1, 2, 3, 4, 6, 7, 8]\n\n\ndef bubble_sort(numbers: List[int]) -> List[int]:\n    \"\"\" Sort the integers in the input list of integers in ascending order.\n    It should be a stable sort, i.e. for any two elements in the input list,\n    the sequence (smaller element, larger element) should remain unchanged.\n    \"\"\"\n    pass\n",
        "num_ids_2": 27,
        "num_ids_4": 87
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(flip_case(\"hello world\"))\nassert flip_case(\"HELLO WORLD\") == \"hello world\"\nassert flip_case(\"HELLO WORLD\") == \"HELO WORLD\"\nassert flip_case(\"Hello world!\") == \"Hello worlD!\"\nassert flip_case(\"HELLO WORLD!\") == \"hELLO wORLD!\"\nprint(\"Congratulations! Your function works correctly!\")\n",
        "num_ids_2": 19,
        "num_ids_4": 54
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flip_case(\"A1B2C3D4\") == \"a1b2c3d4\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"ABCD\") == \"bcd\"\nassert     flip_case(\"1234\") == \"4321\"\nassert     flip_case(\"12345\") == \"54321\"\n",
        "num_ids_2": 39,
        "num_ids_4": 71
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert flip_case(\"A\") == \"a\"\nassert flip_case(\"a\") == \"A\"\nassert flip_case(\"ab\") == \"ba\"\nassert flip_case(\"Ab\") == \"aB\"\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(flip_case('The quick brown fox jumps over the lazy dog')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     flip_case(\"HackerRank.com presents \\\"HackerRank\\\"\") == \"hACKERrANK.COM PRESENTS \\\"hACKERrANK\\\"\"\nassert     flip_case(\"We Are Gonna Code\") == \"We Are Gonna COD e\"\nassert     flip_case(\"\") == \"\"\n",
        "num_ids_2": 63,
        "num_ids_4": 74
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flip_case('hello world') == 'Hello world'\nassert     flip_case('HellO WoRlD') == 'hELLO wORlD'\nassert     flip_case('hello world') == 'Hello world'\nassert     flip_case('Hi! How are you?') == 'How are you? Hi!'\n\ndef reverse(string: str) -> str:\n    \"\"\" Given a string, reverse the characters in place.\n    \"\"\"\n    pass\n",
        "num_ids_2": 41,
        "num_ids_4": 80
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flip_case(\"This is a test.\") == \"THIS IS A TEST.\"\nassert     flip_case(\"It's a treasure chest!\") == \"It'S A Treasure Chest!\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"helloworld\"\nassert     concatenate([\"hello\", \"world\", \"!\"]) == \"helloworld!\"\nassert     concatenate([\"\", \"\"]) == \"\"\nassert     concatenate([]) == \"\"\nassert     concatenate([\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]) == \"hellohellohellohellohellohellohellohellohellohellohello\"\n",
        "num_ids_2": 44,
        "num_ids_4": 70
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate([\"Hello\", \"world!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \"world!\"]) == concatenate([\"Hello\", \"world!\"])\nassert     concatenate([\"Hello\", \"world!\", \"!\"]) == concatenate([\"Hello\", \"world!\", \"!\"])\nassert     concatenate([\"Hello\", \"world!\", \"!\"]) == concatenate([\"Hello\", \"world!\", \"!\"])\nassert     concatenate([\"Hello\", \"world!\", \"!\", \"!\"]) == concatenate([\"Hello\", \"world!\", \"!\", \"!\"])\n",
        "num_ids_2": 47,
        "num_ids_4": 109
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"\", \"\", \"\", \"\"]) == \"\"\nassert     concatenate([\"Hello\", \" \", \"World\", \"!\"]) == \"Hello World!\"\nassert     concatenate([\"Hello\", \" \", \"World\", \"!\"]) == \"Hello World!\"\n",
        "num_ids_2": 48,
        "num_ids_4": 91
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nconcatenate([\"a\", \"b\"]) == \"ab\"\nconcatenate([\"ab\", \"c\"]) == \"abc\"\nconcatenate([\"ab\", \"c\", \"d\"]) == \"abcd\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\"]) == \"abcdeeee\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\"]) == \"abcdeeeef\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == \"abcdeeeefg\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == \"abcdeeeefgh\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) == \"abcdeeeefghi\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) == \"abcdeeeefghij\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) == \"abcdeeeefghijk\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) == \"abcdeeeefghijkl\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) == \"abcdeeeefghijklm\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]) == \"abcdeeeefghijkln\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]) == \"abcdeeeefghijklnop\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]) == \"abcdeeeefghijklnopp\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]) == \"abcdeeeefghijklnopqp\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"]) == \"abcdeeeefghijklnopqr\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"]) == \"abcdeeeefghijklnopqrs\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"]) == \"abcdeeeefghijklnopqrst\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"]) == \"abcdeeeefghijklnopqrstu\"\nconcatenate([\"ab\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate([\"ABC\", \"DEF\", \"GHI\"]) == \"ABCDEFGHI\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([]) == \"\"\n\ndef lcs(A: str, B: str) -> int:\n    \"\"\"\n    Calculate the length of the longest common subsequence\n",
        "num_ids_2": 39,
        "num_ids_4": 63
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate([\"1234\", \"4567\", \"8910\"]) == \"123445678910\"\nassert     concatenate([\"12345678910\"]) == \"12345678910\"\nassert     concatenate([\"1234\"]) == \"1234\"\nassert     concatenate([\"\"]) == \"\"\n\n",
        "num_ids_2": 54,
        "num_ids_4": 85
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nconcatenate([1, 2, 3]) == \"123\"\nconcatenate([\"a\", \"b\", \"c\"]) == \"abc\"\nconcatenate([1, \"hello\", 2.3, True, False]) == \"1hello2.3TrueFalse\"\n\ndef remove_stopwords(words: List[str]) -> List[str]:\n    \"\"\" Remove stopwords from a list of words\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate([\"Hello\", \"world!\"])     == \"Hello world!\"\nassert     concatenate([\"Hello\", \"world!\"])     == \"Hello world!\"\nassert     concatenate([\"Hello\", \"world!\"])     == \"Hello world!\"\nassert     concatenate([\"Hello\", \"world!\", \"!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \"world!\", \"!\"]) == \"Hello world!\"\n",
        "num_ids_2": 42,
        "num_ids_4": 85
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate([\"aaa\", \"bbb\", \"ccc\"]) == \"aaa bbb ccc\"\nassert     concatenate([\"1\", \"2\", \"3\"]) == \"1 2 3\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"\"]) == \"\"\n\ndef index_of(strings: List[str], word: str) -> int:\n    \"\"\" Given a word, return the index of the word in a list of strings.\n        If word is not in the list, return -1\n    \"\"\"\n    pass\n",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_by_prefix([\"aba\",\"abca\",\"baca\"], \"ba\") == [\"aba\",\"baca\"]\nassert filter_by_prefix([\"aba\",\"abca\",\"baca\"], \"ca\") == [\"abca\"]\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_prefix([], \"\") == []\nassert     filter_by_prefix([\"abcd\", \"a\", \"b\", \"a\", \"abcd\"], \"ab\") == [\"abcd\", \"a\", \"b\"]\nassert     filter_by_prefix([\"abcd\", \"a\", \"b\", \"a\", \"abcd\"], \"a\") == [\"abcd\", \"a\"]\nassert     filter_by_prefix([\"abcd\", \"a\", \"b\", \"a\", \"abcd\"], \"abcd\") == []\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 54,
        "num_ids_4": 123
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([], 'a') == []\nassert     filter_by_prefix(['a', 'b'], 'a') == ['a', 'b']\nassert     filter_by_prefix(['a', 'b', 'c'], 'a') == ['a', 'b']\nassert     filter_by_prefix(['a', 'b', 'c'], 'b') == ['b']\nassert     filter_by_prefix(['a', 'b', 'c'], 'c') == ['c']\n",
        "num_ids_2": 41,
        "num_ids_4": 96
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"abc\", \"def\", \"def\", \"xyz\", \"abc\"], \"abc\") == [\"abc\"]\nassert     filter_by_prefix([\"abc\", \"def\", \"def\", \"xyz\", \"abc\"], \"def\") == [\"def\", \"def\", \"xyz\"]\nassert     filter_by_prefix([\"abc\", \"def\", \"def\", \"xyz\", \"abc\"], \"xyz\") == [\"xyz\", \"abc\"]\nassert     filter_by_prefix([\"abc\", \"def\", \"def\", \"xyz\", \"abc\"], \"abc\") == [\"abc\"]\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 71,
        "num_ids_4": 140
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_prefix([], \"\") == []\nassert     filter_by_prefix([], \"abcd\") == []\nassert     filter_by_prefix([\"abcd\"], \"\") == []\nassert     filter_by_prefix([\"abcd\"], \"abcd\") == [\"abcd\"]\nassert     filter_by_prefix([\"abcd\", \"abcd\", \"abcd\"], \"\") == [\"abcd\"]\n",
        "num_ids_2": 30,
        "num_ids_4": 69
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_prefix([\n                    \"h\",\n                    \"H\",\n                    \"He\",\n                    \"hell\",\n                    \"Hello\",\n                    \"hellll\",\n                    \"Hellll\",\n                    \"hello\",\n                    \"helloooo\",\n                    \"hellooooo\",\n                    \"Hello\",\n                    \"Hello\",\n                    \"Hell\",\n                    \"Hell\"\n                ], \"Hello\") == [\n                    \"Hello\",\n                    \"Hello\",\n                    \"Hell\",\n                    \"Hell\"\n                ]\n\nassert     filter_by_prefix([\n                    \"h\",\n                    \"H\",\n                    \"He\",\n                    \"hell\",\n                    \"Hello\",\n                    \"hellll\",\n                    \"Hellll\",\n                    \"hello\",\n                    \"helloooo\",\n                    \"hellooooo\",\n                    \"Hello\",\n                    \"Hello\",\n                    \"Hell\",\n                    \"Hell\"\n                ], \"hello\") == [\n                    \"hello\",\n                    \"helloooo\",\n                    \"hellooooo\",\n                    \"Hello\",\n                    \"Hello\",\n                    \"Hell\",\n                    \"Hell\"\n                ]\n",
        "num_ids_2": 18,
        "num_ids_4": 18
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([\"a\",\"ab\",\"abc\",\"abcd\",\"abcd\",\"c\"], \"ab\") == [\"ab\",\"abcd\"]\nassert     filter_by_prefix([\"a\",\"ab\",\"abc\",\"abcd\",\"abcd\",\"c\"], \"abc\") == [\"abc\",\"abcd\"]\nassert     filter_by_prefix([\"a\",\"ab\",\"abc\",\"abcd\",\"abcd\",\"c\"], \"abcd\") == [\"abcd\"]\nassert     filter_by_prefix([\"a\",\"ab\",\"abc\",\"abcd\",\"abcd\",\"c\"], \"c\") == [\"c\"]\nassert     filter_by_prefix([\"a\",\"ab\",\"abc\",\"abcd\",\"abcd\",\"c\"], \"b\") == []\n",
        "num_ids_2": 68,
        "num_ids_4": 132
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([], \"\") == []\nassert     filter_by_prefix([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\"], \"a\") == [\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"]\nassert     filter_by_prefix([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\"], \"b\") == [\"a\",\"b\",\"c\"]\nassert     filter_by_prefix([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\"], \"c\") == [\"a\",\"b\",\"c\"]\nassert     filter_by_prefix([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\",\"c\",\"c\"], \"d\") == []\n",
        "num_ids_2": 59,
        "num_ids_4": 137
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, 3, -4, 5, 6, -7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     get_positive([1, 2, 3, 4, -5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_positive([1, 2, -3, 4, 5]) == [1, 2, 4, 5]\nassert     get_positive([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\nassert     get_positive([-10, -20, -30, -40, -50]) == [-10, -20, -30, -40, -50]\n\ndef get_positive_again(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 66,
        "num_ids_4": 104
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_positive([3, -1, 0, 1]) == [3, 1]\nassert     get_positive([3, -1, 0, 1]) == [-1, 1]\nassert     get_positive([0, 1, -1, 0]) == [1]\nassert     get_positive([0, 1, -1, 0]) == [1]\nassert     get_positive([0, 1, -1, 0]) == [1]\n",
        "num_ids_2": 44,
        "num_ids_4": 84
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_positive([3, -3, 2, 1, 0, -1]) == 2\nassert     get_positive([0, 1, 2, 3]) == 0\nassert     get_positive([1, -3]) == 1\nassert     get_positive([-1, 2]) == -1\nassert     get_positive([3, -3, 2, 1, 0, -1, 2, 0]) == 2\n",
        "num_ids_2": 40,
        "num_ids_4": 69
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([-1, 2, -3, 4, 5, 0]) == list([2, 4, 5, 0]), 'Error'\nassert     get_positive([-1, 2, -3, -4, 5, 0]) == list([2, 4, 5, 0]), 'Error'\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_positive([1, 2, -2, -1, -4]) == [-1, 2]\nassert     get_positive([0, -5, -1, 0, 1]) == [1, 0]\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([-1, -2, 0, 1, 2]) == [-1, 2]\nassert     get_positive([1, 2, -3, 4, 5]) == [2, 4, 5]\nassert     get_positive([]) == []\n\nprint('Part 2:')",
        "num_ids_2": 51,
        "num_ids_4": 61
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_positive([-1, 1, -2, 3, 0, -5, -1, -2, 5, 1]) == [-1, 1, 5, 1]\n\ndef get_positive_m(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return [i for i in l if i > 0]\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_positive([]) == [], 'Empty list'\nassert get_positive([1, -2, 3, -4, 5]) == [1, 3, 5], 'Positive numbers'\nassert get_positive([0, -1, -2, -3, -4, -5]) == [-1, -3, -5], 'Positive numbers'\nassert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'Positive numbers'\n\n",
        "num_ids_2": 46,
        "num_ids_4": 117
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_positive([0, -4, 6, 8, 0, 0, -3]) == [6, 8], f\"Expected 6, 8.\"\nassert     get_positive([-4, -1, -5, -9]) == [-4, -1, -5, -9], f\"Expected [-4, -1, -5, -9].\"\nassert     get_positive([-4, 0, 6, 0, -4, 0, -1]) == [-4, 0, 6, 0, -4, 0, -1], f\"Expected [-4, 0, 6, 0, -4, 0, -1].\"\n",
        "num_ids_2": 85,
        "num_ids_4": 148
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(0) == False\nassert     is_prime(1) == False\nassert     is_prime(4) == True\nassert     is_prime(8) == True\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_prime(1) == True\nassert is_prime(11) == True\nassert is_prime(13) == False\nassert is_prime(1) == True\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_prime(7) == True, '7 is prime!'\nassert     is_prime(7.0) == False, '7.0 is not prime!'\nassert     is_prime('7') == False, '7 is not prime!'\nassert     is_prime(7 + 6) == True, '7+6 is prime!'\nassert     is_prime(-7) == False, '-7 is not prime!'\n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef get_primes(start_num, end_num):\n    \"\"\"Return all prime numbers between start_num and end_num inclusive.\n    \"\"\"\n    pass\n\ndef get_primes(start_num, end_num):\n    \"\"\"Return all prime numbers between start_num and end_num inclusive.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_prime(7) == True\nassert     is_prime(13) == False\nassert     is_prime(-1) == False\nassert     is_prime(1) == False\nassert     is_prime(0) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_prime(0)\nassert not is_prime(1)\nassert not is_prime(2)\nassert is_prime(3)\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_zero([1, 1]) == 1\nassert     find_zero([-1, 1]) == 1\nassert     find_zero([1, -1]) == 1\nassert     find_zero([-2, 1]) == -2\nassert     find_zero([-1, 2]) == -1\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     poly([1, 2, 3, 4, 5, 6], 3) == 0, \"not correct\"\nassert     find_zero([1, 2, 3, 4, 5, 6]) == 3, \"not correct\"\nassert     poly([1, 2, 3, 4, 5, 6], 2) == 1, \"not correct\"\nassert     find_zero([1, 2, 3, 4, 5, 6]) == 2, \"not correct\"\nassert     poly([1, 2, 3, 4, 5, 6], 1) == 0, \"not correct\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef roots(xs: list):\n    \"\"\"\n    Find roots of a polynomial.\n    Roots are the intersection of lines that are orthogonal to the plane\n    of polynomial.\n    \"\"\"\n    pass\n\n\ndef cubic_roots(xs: list, x: float):\n    \"\"\"\n    Find cubic roots of a polynomial.\n    Uses method of bisection search.\n    \"\"\"\n    pass\n\n\ndef solve_quadratic(xs: list, a: float, b: float, c: float):\n    \"\"\"\n    Find roots of quadratic equation.\n    x**2 + ax + b = c\n    \"\"\"\n    pass\n\n\ndef solve_triangular(xs: list, a: float, b: float, c: float):\n    \"\"\"\n    Find roots of triangular equation.\n    x^2 + ax + by = c\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef get_x_solutions(xs: list):\n    \"\"\"\n    Given a polynomial, return a list of points where the polynomial has a zero.\n    \"\"\"\n    pass\n\n\ndef roots(xs: list, epsilon: float = 1e-12):\n    \"\"\"\n    x - solution\n    r - unknown number\n    \"\"\"\n    pass\n\n\ndef eval_at_roots(xs: list, epsilon: float = 1e-12):\n    \"\"\"\n    Given a polynomial and epsilon, return a list of roots at which it has a zero.\n    \"\"\"\n    pass\n\n\ndef solve_quadratic_equation(a, b, c):\n    \"\"\"\n    Given coefficients of quadratic equation, return a tuple of roots.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     poly([1, -4, 3, 4, 1], 1) == -7\nassert     poly([1, -4, 3, 4, 1], -1) == 0\nassert     poly([1, -4, 3, 4, 1], 1.1) == -5\nassert     poly([1, -4, 3, 4, 1], -1.1) == 1\nassert     poly([1, -4, 3, 4, 1], 1.99) == -8\n",
        "num_ids_2": 42,
        "num_ids_4": 88
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_zero([1, 3, 4]) == 1\nassert     find_zero([0, 2, 3]) == 2\nassert     find_zero([-2, -3, 0, 2]) == 2\n\n\ndef find_interval(xs: list, x: float):\n    \"\"\"\n    Finds range where function xs is continuous and nonzero\n    \"\"\"\n    return find_zero(xs)\n\n",
        "num_ids_2": 30,
        "num_ids_4": 49
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef test_find_zero():\n    print(\"check the correctness of find_zero\")\n\n    # with just one coefficient\n    xs = [2]\n    assert find_zero(xs) == 1.0\n    # with just one zero\n    xs = [0, 1]\n    assert find_zero(xs) == 1.0\n    # with just one non zero coefficient\n    xs = [2, 1]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef get_intersection(p1: list, p2: list):\n    \"\"\"\n    For each point p1 and p2 we need to find the point x such that\n    poly(x) == 0.\n\n    This equation is Ax = 0\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_third([0,3,6,9,1,2,3,4,5,6,7,8,9]) == [0,3,1,2,4,6,5,7,8,9,9,6,3,0]\nassert     sort_third([0,3,6,9,1,2,3,4,5,6,7,8,9,10]) == [0,3,1,2,4,5,6,7,8,9,10,9,6,3,0]\n",
        "num_ids_2": 130,
        "num_ids_4": 130
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_third([1,2,3,4,5,6]) == ([1,2,3,4,5,6],\n                                        [1,2,4,5,6,3],\n                                        [1,2,3,4,6,5])\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third([1, 2, 3, 4]) == [1, 2, 4, 3]\nassert     sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef sort_odd_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are odd, while its values at the indicies that are even are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_third([1, 3, 5, 6, 7]) == [1, 3, 5, 6, 7], \"sort_third did not return correct list\"\nassert     sort_third([1, 1, 1, 1]) == [1, 1, 1, 1], \"sort_third did not return correct list\"\nassert     sort_third([]) == [], \"sort_third did not return correct list\"\nassert     sort_third([4, 1, 8, 10, 11]) == [1, 4, 8, 10, 11], \"sort_third did not return correct list\"\nassert     sort_third([9, 2, 8, 6, 4]) == [2, 8, 4, 6, 9], \"sort_third did not return correct list\"\n",
        "num_ids_2": 74,
        "num_ids_4": 134
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    l = [2, 1, 3, 4, 6, 7, 5]\n    print(l)\n    assert sort_third(l) == [1, 2, 3, 4, 5, 6, 7]\n    print('TESTING...')\n    assert sort_third(l) == l\n\n    l = [2, 1, 3, 4, 6, 7, 5]\n    print(l)\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6]) ==    [1, 2, 3, 4, 5, 6], \\\n                \"Wrong answer for this list:\\n%s\\n\\nYour answer:\\n%s\" % \\\n                (sort_third([1, 2, 3, 4, 5, 6]), [1, 2, 3, 4, 5, 6])\nassert sort_third([1, 2, 3, 4, 5, 6]) ==     [1, 2, 3, 4, 5, 6], \\\n                                            \"Wrong answer for this list:\\n%s\\n\\nYour answer:\\n%s\" % \\\n                                            (sort_third([1, 2, 3, 4, 5, 6]), [1, 2, 3, 4, 5, 6])\nassert sort_third([6, 1, 4, 3, 5, 2]) ==     [1, 2, 3, 4, 5, 6], \\\n                                            \"Wrong answer for this list:\\n%s\\n\\nYour answer:\\n%s\" % \\\n                                            (sort_third([6, 1, 4, 3, 5, 2]), [1, 2, 3, 4, 5, 6])\nassert sort_third([6, 1, 4, 3, 5, 2]) ==     [1, 2, 3, 4, 5, 6], \\\n                                            \"Wrong answer for this list:\\n%s\\n\\nYour answer:\\n%s\" % \\\n                                            (sort_third([6, 1, 4, 3, 5, 2]), [1, 2, 3, 4, 5, 6])\n\n\nprint(\"\\n*** TEST 2: ***\")\n",
        "num_ids_2": 69,
        "num_ids_4": 137
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_third([0,3,4,1,2,3,1,4,5,3,5]) == [1,3,1,4,2,3,4,5,0,3,5]\nassert sort_third([0,3,4,1,2,3,1,4,5,3,5]) == [0,1,2,3,4,3,4,5,1,3,5]\n\ndef read_array():\n    \"\"\"This function takes as input a file containing at least two numbers.\n    The numbers are separated by a single space character and sorted by decreasing order.\n    Afterwards, it returns a sorted list of the numbers read from the file.\n    \"\"\"\n    # your code goes here\n    pass\n\ndef f_calls_sort(l: list) -> int:\n    \"\"\"This function takes a list l and returns the number of function calls\n    to sort.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique([1, 2, 3, 3, 3, 3, 3, 3, 4]) == sorted(set([1, 2, 3, 4]))\nassert     unique([1, 2, 2, 3, 4, 5]) == sorted(set([1, 2, 3, 4, 5]))\nassert     unique([]) == sorted(set([]))\nassert     unique([1]) == sorted(set([1]))\nassert     unique([1,2,3,4,4,4,4,4]) == sorted(set([1,2,3,4]))\n",
        "num_ids_2": 70,
        "num_ids_4": 98
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([]) == []\nassert     unique([2, 2, 3, 5, 5, 6]) == [2, 3, 5, 6]\nassert     unique([]) == []\nassert     unique([3, 1, 2, 4, 3, 1, 5, 3, 4, 5, 5, 3, 4, 2, 4, 1, 2, 3, 4, 1]) == [1, 2, 3, 4, 5, 6]\nassert     unique([1, 2, 3, 4, 5, 5, 4, 3, 4, 5]) == [1, 2, 3, 4, 5, 5, 4, 3, 4, 5]",
        "num_ids_2": 35,
        "num_ids_4": 102
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique(['cat', 'dog','mouse']) == ['cat', 'dog','mouse']\nassert     unique([1, 1, 2]) == [1, 2]\nassert     unique([]) == []\nassert     unique([1, 1, 2, 1, 2]) == [1, 2, 1, 2]\n",
        "num_ids_2": 42,
        "num_ids_4": 67
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique([1,2,3,3,3]) == [1,2,3]\nassert     unique([1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,3]) == [1,2,3]\nassert     unique([]) == []\nassert     unique([\"a\",\"a\",\"a\",\"b\",\"b\",\"c\"]) == [\"a\",\"b\",\"c\"]\n",
        "num_ids_2": 50,
        "num_ids_4": 77
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nunique([1,2,2,3,3,4,4,4,4,4]) == [1,2,3,4]\nassert \nunique([]) == []\nassert \nunique([1,2]) == [1,2]\nassert \nunique([\"A\",\"A\",\"B\",\"B\"]) == [\"A\",\"B\"]\nassert \nunique([1,1,1,1,1,1,1,1,1]) == [1,1,1]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique([1,2,3,4,5,5,5,5,5,5]) == [1,2,3,4,5]\nassert unique([1,1,1,1,1,1,1]) == [1,1,1,1,1,1]\nassert unique([]) == []\n\ndef uniquify(l: list):\n    \"\"\"Return unique elements in a list in order of appearance\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n",
        "num_ids_2": 69,
        "num_ids_4": 76
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique([1, 2, 1, 3, 1, 1, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique([]) == []\nassert     unique([1, 2, 3, 1, 2, 3]) == [1, 2, 3]\nassert     unique([]) == []\n",
        "num_ids_2": 48,
        "num_ids_4": 81
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(unique([1, 2, 3, 1, 3, 1, 3, 2, 3, 3]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nunique([1, 2, 3, 2, 1]) == [1, 2, 3]\nassert unique([-2, -4, 1, 4, 7]) == [-2, -4, 1, 4, 7]\nassert unique([]) == []\nassert unique([]) == []\nassert unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 32,
        "num_ids_4": 46
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(unique([10,2,4,6,8,10,6,4,2,8]))\n\nprint(\"Question 2.2\")\ndef count(l: list, val: int):\n    \"\"\"Count number of occurences of val in list l\n    \"\"\"\n    pass\n\nprint(count([1,2,3,4,5], 2))\n\nprint(\"Question 2.3\")\ndef factorize(n: int) -> tuple:\n    \"\"\"Find factors of an int\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_element([1,2,3,4,5]) == 5, \"Wrong!\"\nassert     max_element([5,1,2,3,4]) == 5, \"Wrong!\"\nassert     max_element([-1,1,-3,-4,5]) == 5, \"Wrong!\"\nassert     max_element([]) == None, \"Wrong!\"\nassert     max_element([-1,-2,-3,-4]) == -1, \"Wrong!\"\n",
        "num_ids_2": 48,
        "num_ids_4": 88
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_element([2, 5, 4]) == 5, \"Wrong max_element\"\nassert     max_element([0, -1, 2, 4, 8, -10]) == 8, \"Wrong max_element\"\nassert     max_element([]) == None, \"Wrong max_element\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")",
        "num_ids_2": 54,
        "num_ids_4": 72
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([]) == None\nassert     max_element([-5, -2, -1, 0, 1, 2, 3, 4, 5]) == 5\n\n\ndef max_element_rec(l: list, n: int = 1):\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if n == 1:\n        return l[0]\n    else:\n        if l[0] < l[1]:\n            return max_element_rec(l[1:], n)\n        else:\n            return max_element_rec(l[1:], n-1)\n\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([]) == None\nassert     max_element([-1, -2, -3, -4]) == -1\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 27,
        "num_ids_4": 49
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_element([0,1,2,3,4,5]) == 5\nassert     max_element([-100,1,-2,3,-4,5]) == 5\nassert     max_element([-100,-1,1,2,3,4,5]) == 5\nassert     max_element([-100,-1,-2,3,4,5]) == 5\nassert     max_element([-1,-100,-1,1,2,3,4,5]) == 5\n",
        "num_ids_2": 43,
        "num_ids_4": 89
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_element([3,2,1]) == 3\nassert     max_element([-2,-1]) == -1\nassert     max_element([]) == None\nassert     max_element([1,2,3]) == 3\nassert     max_element([-1,1,-2,-3,0]) == -1\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_element([1, 2, 3]) == 3, 'First case'\nassert     max_element([1, -2, 3]) == 3, 'Second case'\nassert     max_element([1, 3, 2]) == 3, 'Third case'\nassert     max_element([-1, -2, -3]) == -1, 'Fourth case'\nassert     max_element([-1, -2, 3]) == 3, 'Fifth case'\n",
        "num_ids_2": 41,
        "num_ids_4": 85
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3,4]) == 5\nassert     max_element([]) == None\nassert     max_element([1,2,3,4,5,6,7]) == 7\nassert     max_element([1,2,3,4,5,6,7,1]) == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 69
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fizz_buzz(1) == 0\nassert     fizz_buzz(2) == 0\nassert     fizz_buzz(3) == 0\nassert     fizz_buzz(4) == 1\nassert     fizz_buzz(5) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nfizz_buzz(37) == 9\nfizz_buzz(11) == 4\nfizz_buzz(27) == 3\nfizz_buzz(53) == 2\nfizz_buzz(100) == 7\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfizz_buzz(13) == 1\nfizz_buzz(17) == 0\nfizz_buzz(19) == 2\nfizz_buzz(3) == 0\nfizz_buzz(4) == 0\nfizz_buzz(6) == 0\nfizz_buzz(30) == 5\nfizz_buzz(16) == 1\nfizz_buzz(1) == 0\nfizz_buzz(35) == 1\nfizz_buzz(50) == 1\nfizz_buzz(15) == 1\nfizz_buzz(20) == 0\nfizz_buzz(50) == 2\nfizz_buzz(15) == 1\nfizz_buzz(30) == 1\nfizz_buzz(50) == 2\nfizz_buzz(5) == 0\nfizz_buzz(10) == 2\nfizz_buzz(40) == 0\nfizz_buzz(7) == 0\nfizz_buzz(16) == 1\nfizz_buzz(42) == 2\nfizz_buzz(48) == 3\nfizz_buzz(27) == 1\nfizz_buzz(36) == 1\nfizz_buzz(19) == 1\nfizz_buzz(10) == 2\nfizz_buzz(13) == 1\nfizz_buzz(45) == 1\nfizz_buzz(12) == 1\nfizz_buzz(10) == 2\nfizz_buzz(21) == 1\nfizz_buzz(51) == 1\nfizz_buzz(11) == 1\nfizz_buzz(16) == 1\nfizz_buzz(28) == 1\nfizz_buzz(3) == 0\nfizz_buzz(7) == 0\nfizz_buzz(12) == 1\nfizz_buzz(41) == 0\nfizz_buzz(60) == 1\nfizz_buzz(21) == 1\nfizz_buzz(42) == 2\nfizz_buzz(50) == 2\nfizz_buzz(47) == 2\nfizz_buzz(34) == 1\nfizz_buzz(49) == 1\nfizz_buzz(46) == 1\nfizz_buzz(23) == 1\nfizz_buzz(40) == 1\nfizz_buzz(50) == 2\nfizz_buzz(19) == 0\nfizz_buzz(39) == 2\nfizz_buzz(10) == 2\nfizz_buzz(20) == 1\nfizz_buzz(34) == 2\nfizz_buzz(32) == 2\nfizz_buzz(20) == 1\nfizz_buzz(40) == 1\nfizz_buzz(11) == 1\nfizz_buzz(7) == 0\nfizz_buzz(17) == 0\nfizz_buzz(18) == 0\nfizz_buzz(33) == 1\nfizz_buzz(4) == 0\nfizz_buzz(22) == 1\nfizz_buzz(47) == 0\nfizz_buzz(50) == 1\nfizz_buzz(48) == 1\nfizz_buzz(30) == 1\nfizz_buzz(14) == 1\nfizz_buzz(22) == 1\nfizz_buzz(36) == 1\nfizz_buzz(17) == 1\nfizz_buzz(12) == 1\nfizz_buzz(14) == 1\nfizz_buzz(21) == 1\nfizz_buzz(32) == 1\nfizz_buzz(42) == 1\nfizz_buzz(47) == 1\nfizz_buzz(47) == 1\nfizz_buzz(42) == 2\nfizz_buzz(4) == 0\nfizz_buzz(15) == 1\nfizz_buzz(32) == 2\nfizz_buzz(43) == 1\nfizz_buzz(14) == 1\nfizz_buzz(18) == 1\nfizz_buzz(15) == 1\nfizz_buzz(25) == 1\nfizz_buzz(35) == 1\nfizz_buzz(22) == 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    fizz_buzz(100) == 25\n    fizz_buzz(100) == 2\n    fizz_buzz(144) == 13\n    fizz_buzz(500) == 1\n    fizz_buzz(1000) == 4",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    fizz_buzz(3) == 0\n    fizz_buzz(5) == 0\n    fizz_buzz(15) == 4\n    fizz_buzz(21) == 5\n    fizz_buzz(35) == 5\n    fizz_buzz(60) == 4\n    fizz_buzz(71) == 5\n    fizz_buzz(90) == 6\n    fizz_buzz(100) == 5\n    fizz_buzz(101) == 7\n    fizz_buzz(4) == 0\n    fizz_buzz(200) == 15\n    fizz_buzz(500) == 21\n    fizz_buzz(1000) == 28\n\n\n\ndef fizz_buzz_with_exception_handling(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    try:\n        return fizz_buzz(n)\n    except:\n        return \n\nassert fizz_buzz_with_exception_handling(3) == 0\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fizz_buzz(100) == 0, 'Test case 1: Failed'\nassert     fizz_buzz(10) == 1, 'Test case 2: Failed'\nassert     fizz_buzz(13) == 0, 'Test case 3: Failed'\nassert     fizz_buzz(2) == 1, 'Test case 4: Failed'\nassert     fizz_buzz(5) == 1, 'Test case 5: Failed'\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fizz_buzz(15) == 0, \"Wrong return value\"\nassert     fizz_buzz(11) == 1, \"Wrong return value\"\nassert     fizz_buzz(7) == 2, \"Wrong return value\"\nassert     fizz_buzz(3) == \"Fizz\", \"Wrong return value\"\nassert     fizz_buzz(7) == \"Fizz\", \"Wrong return value\"\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fizz_buzz(7) == 2\nassert     fizz_buzz(10) == 1\nassert     fizz_buzz(1) == 1\nassert     fizz_buzz(8) == 2\nassert     fizz_buzz(12) == 4\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fizz_buzz(10)     ==    3\nassert     fizz_buzz(100)     ==    27\nassert     fizz_buzz(1)     ==     0",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even(odd) == sorted(even, reverse=True)\nassert     sort_even(even) == sorted(even)\nprint(\"Tests passed\")\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_even([2, 3, 5, 4, 1, 4, 4, 1, 1]) == [1, 1, 2, 3, 4, 4, 4, 4, 5]\nassert     sort_even([2, 3, 5, 4, 1, 4, 4, 1, 1]) == [1, 2, 3, 4, 4, 5, 4, 1, 1]\nassert     sort_even([2, 3, 5, 4, 1, 4, 4, 1, 1]) == [1, 2, 3, 4, 4, 5, 1, 1, 1]\nassert     sort_even([2, 3, 5, 4, 1, 4, 4, 1, 1]) == [1, 2, 3, 4, 4, 5, 1, 1, 1]\nassert     sort_even([2, 3, 5, 4, 1, 4, 4, 1, 1]) == [1, 2, 3, 4, 4, 5, 1, 1, 1]\n",
        "num_ids_2": 90,
        "num_ids_4": 180
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_even([4, 3, 5, 6, 7, 8, 1, 2]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_even([1, 1, 1, 1, 1]) == [1, 1, 1, 1]\nassert sort_even([]) == []\nassert sort_even([1, 1, 1]) == [1, 1, 1]\n",
        "num_ids_2": 68,
        "num_ids_4": 97
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sort_even([1,2,3,4,5,6,7,8,9,10,11]) == [1,2,3,4,5,6,7,8,9,10,11]\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode_cyclic(\"A\") == \"ABC\"\nassert     encode_cyclic(\"AB\") == \"ABC\"\nassert     encode_cyclic(\"ABC\") == \"ABC\"\nassert     encode_cyclic(\"ABCABC\") == \"ABCABC\"\nassert     encode_cyclic(\"ABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCABCAB",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_cyclic(encode_cyclic(\"HAPPY\")) == \"YAP\"\nassert     decode_cyclic(encode_cyclic(\"HAPPYHAPPY\")) == \"HAPPYHAPPY\"\nassert     decode_cyclic(encode_cyclic(\"HAPPYHAPPYHAPPYHAPPYHAPPY\")) == \"HAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPPYHAPP",
        "num_ids_2": 55,
        "num_ids_4": 1023
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef main():\n    s = input()\n    print(s)\n    print(encode_cyclic(s))\n    print(decode_cyclic(encode_cyclic(s)))\n\nif __name__ == '__main__':\n    main(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\nassert     prime_fib(5) == 11\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prime_fib(10) == 55\nassert     prime_fib(20) == 6765\nassert     prime_fib(31) == 98550\nassert     prime_fib(61) == 35394751\nassert     prime_fib(101) == 10970050050301\n",
        "num_ids_2": 25,
        "num_ids_4": 54
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_fib(3) == 2\nassert     prime_fib(4) == 2\nassert     prime_fib(1) == 2\nassert     prime_fib(12) == 1\nassert     prime_fib(5) == 5\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prime_fib(7) == 29\nassert prime_fib(1) == 2\nassert prime_fib(8) == 31\nassert prime_fib(100) == 499\nassert prime_fib(1000) == 509\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_fib(1) == 1\nassert     prime_fib(2) == 2\nassert     prime_fib(3) == 3\nassert     prime_fib(4) == 5\nassert     prime_fib(5) == 5\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([1,-1,-2,0,1,1,2,2,3,0,2]) == True\nassert     triples_sum_to_zero([-1,0,1]) == False\nassert     triples_sum_to_zero([]) == False\n",
        "num_ids_2": 57,
        "num_ids_4": 72
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert triples_sum_to_zero([0, 0, 0, -2]) == True\nassert triples_sum_to_zero([0, 1, 2, -3]) == False\nassert triples_sum_to_zero([0, 0, 0, -2, -2]) == False\nassert triples_sum_to_zero([0, 1, 2, -3, -3]) == True\n",
        "num_ids_2": 25,
        "num_ids_4": 72
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([1, 2, 3, 4, 5]) == False\nassert     triples_sum_to_zero([1, 2, 3, 4, 5, -2, -4]) == True\nassert     triples_sum_to_zero([1, 1, 1, 1]) == False\n\nprint(\"Correct\"",
        "num_ids_2": 54,
        "num_ids_4": 76
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3]) == True, \\\n        'Expected True, but got False for test case -3'\nassert     triples_sum_to_zero([-3, 0, 1, 2, -2, 1, 3]) == False, \\\n        'Expected False, but got True for test case -3'\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    car_race_collision(5) == 2\n    car_race_collision(3) == 1\n    car_race_collision(4) == 0\n    car_race_collision(10) == 1\n    car_race_collision(6) == 2\n    car_race_collision(8) == 2\n    car_race_collision(9) == 2\n    car_race_collision(11) == 3\n    car_race_collision(12) == 3\n    car_race_collision(13) == 3\n    car_race_collision(14) == 4\n    car_race_collision(15) == 5\n    car_race_collision(16) == 6\n    car_race_collision(17) == 7\n    car_race_collision(18) == 7\n    car_race_collision(19) == 7\n    car_race_collision(20) == 7\n    car_race_collision(21) == 7\n    car_race_collision(22) == 7\n    car_race_collision(23) == 8\n    car_race_collision(24) == 8\n    car_race_collision(25) == 8\n    car_race_collision(26) == 8\n    car_race_collision(27) == 8\n    car_race_collision(28) == 8\n    car_race_collision(29) == 8\n    car_race_collision(30) == 8\n    car_race_collision(31) == 8\n    car_race_collision(32) == 8\n    car_race_collision(33) == 8\n    car_race_collision(34) == 8\n    car_race_collision(35) == 8\n    car_race_collision(36) == 8\n    car_race_collision(37) == 8\n    car_race_collision(38) == 8\n    car_race_collision(39) == 8\n    car_race_collision(40) == 8\n    car_race_collision(41) == 8\n    car_race_collision(42) == 8\n    car_race_collision(43) == 8\n    car_race_collision(44) == 8\n    car_race_collision(45) == 8\n    car_race_collision(46) == 8\n    car_race_collision(47) == 8\n    car_race_collision(48) == 8\n    car_race_collision(49) == 8\n    car_race_collision(50) == 8\n    car_race_collision(51) == 8\n    car_race_collision(52) == 8\n    car_race_collision(53) == 8\n    car_race_collision(54) == 8\n    car_race_collision(55) == 8\n    car_race_collision(56) == 8\n    car_race_collision(57) == 8\n    car_race_collision(58) == 8\n    car_race_collision(59) == 8\n    car_race_collision(60) == 8\n    car_race_collision(61) == 8\n    car_race_collision(62) == 8\n    car_race_collision(63) == 8\n    car_race_collision(64) == 8\n    car_race_collision(65) == 8\n    car_race_collision(66) == 8\n    car_race_collision(67) == 8\n    car_race_collision(68) == 8\n    car_race_collision(69) == 8\n    car_race_collision(70) == 8\n    car_race_collision(71) == 8\n    car_race_collision(72) == 8\n    car_race_collision(73) == 8\n    car_race_collision(74) == 8\n    car_race_collision(75) == 8\n    car_race_collision(76) == 8\n    car_race_collision(77) == 8\n    car_race_collision(78) == 8\n    car_race_collision(79) == 8\n    car_race_collision(80) == 8\n    car_race_collision(81) == 8\n    car_race_collision(8",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\n\ndef test_car_race_collision():\n    \"\"\"\n    Test car_race_collision function.\n    \"\"\"\n    pass\n    assert car_race_collision(1) == 0\n    assert car_race_collision(2) == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 3\n    print(f\"The number of collisions with right-to-left roads: {car_race_collision(n)}\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     car_race_collision(0) == 0, \"Wrong answer for n = 0\"\nassert     car_race_collision(1) == 0, \"Wrong answer for n = 1\"\nassert     car_race_collision(2) == 1, \"Wrong answer for n = 2\"\nassert     car_race_collision(3) == 2, \"Wrong answer for n = 3\"\nassert     car_race_collision(4) == 3, \"Wrong answer for n = 4\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     car_race_collision(5) == 1, \"Should be 1\"\nassert     car_race_collision(0) == 0, \"Should be 0\"\nassert     car_race_collision(1) == 0, \"Should be 0\"\nassert     car_race_collision(2) == 0, \"Should be 0\"\nassert     car_race_collision(3) == 1, \"Should be 1\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([2]) == [3]\nassert     incr_list([2, 1]) == [3, 2]\nassert     incr_list([2, 1, 3]) == [3, 2, 4]\nassert     incr_list([2, 1, 3, 4]) == [3, 2, 4, 5]\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert (incr_list([1,2,3]) == [1,2,4])\nassert (incr_list([4,3,1]) == [5,4,2])\nassert (incr_list([-4, -3, -2]) == [0, -1, -2])\n\n",
        "num_ids_2": 25,
        "num_ids_4": 74
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4], \"incr_list([])\"\nassert     incr_list([2,3]) == [3,4], \"incr_list([2])\"\nassert     incr_list([2,3,4]) == [3,4,5], \"incr_list([2,3,4])\"\nassert     incr_list([3,4,5]) == [4,5,6], \"incr_list([3,4,5])\"\nassert     incr_list([5,6,7]) == [6,7,8], \"incr_list([5,6,7])\"\n",
        "num_ids_2": 57,
        "num_ids_4": 127
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1, 2]) == [2, 3]\nassert     incr_list([1, 2, 3]) == [2, 3, 4]\nassert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nincr_list([1,2,3,4]) == [2,3,4,5]\nassert \nincr_list([]) == []\nassert \nincr_list(['a','b','c']) == ['a','b','c','d']\nassert \nincr_list([1,2,3]) == [2,3,4]\nassert \nincr_list([1,1,1]) == [2,2,2]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not\n\ndef run():\n    \"\"\"\n    An example of the functions that you can use.\n    \"\"\"\n    l = [1, 2, 3]\n    print(incr_list(l))\n\nif __name__ == \"__main__\":\n    run()\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert incr_list([1, 2, 3, 4]) == [2, 3, 4, 5], \"incr_list\"\nprint(\"incr_list tests pass\")\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([-1,-2,-3,-4,4,5]) is True\nassert     pairs_sum_to_zero([-1,-2,1,4,5]) is False\nassert     pairs_sum_to_zero([-1,-2,1]) is False\nassert     pairs_sum_to_zero([-1,-2,3]) is True\nassert     pairs_sum_to_zero([-1,1,1]) is True\n",
        "num_ids_2": 52,
        "num_ids_4": 94
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert pairs_sum_to_zero([1, 2, 3]) == True\nassert pairs_sum_to_zero([2, 1, 3]) == False\nassert pairs_sum_to_zero([2, 3, 1]) == False\nassert pairs_sum_to_zero([3, 4, 1]) == False\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    \n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \npairs_sum_to_zero([1, 2, 3, 4, -1])\nassert pairs_sum_to_zero([3, -3, -1])\nassert not pairs_sum_to_zero([1, 1])\n\ndef sort_list(l):\n    \"\"\"\n    sort_list takes a list as an input.\n    it returns the sorted list of integers in ascending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 21,
        "num_ids_4": 36
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(change_base(x=10, base=2))\nprint(change_base(x=9, base=2))\nprint(change_base(x=9, base=3))\nprint(change_base(x=9, base=4))\nprint(change_base(x=10, base=3))\nprint(change_base(x=10, base=4))\nprint(change_base(x=10, base=5))\nprint(change_base(x=10, base=6))\nprint(change_base(x=10, base=7))\nprint(change_base(x=10, base=8))\nprint(change_base(x=10, base=9))\nprint(change_base(x=10, base=10))\nprint(change_base(x=9, base=2))\nprint(change_base(x=9, base=3))\nprint(change_base(x=9, base=4))\nprint(change_base(x=9, base=5))\nprint(change_base(x=9, base=6))\nprint(change_base(x=9, base=7))\nprint(change_base(x=9, base=8))\nprint(change_base(x=9, base=9))\nprint(change_base(x=9, base=10))\nprint(change_base(x=9, base=11))\nprint(change_base(x=9, base=12))\nprint(change_base(x=9, base=13))\nprint(change_base(x=9, base=14))\nprint(change_base(x=9, base=15))\nprint(change_base(x=9, base=16))\nprint(change_base(x=9, base=17))\nprint(change_base(x=9, base=18))\nprint(change_base(x=9, base=19))\nprint(change_base(x=9, base=20))\nprint(change_base(x=9, base=21))\nprint(change_base(x=9, base=22))\nprint(change_base(x=9, base=23))\nprint(change_base(x=9, base=24))\nprint(change_base(x=9, base=25))\nprint(change_base(x=9, base=26))\nprint(change_base(x=9, base=27))\nprint(change_base(x=9, base=28))\nprint(change_base(x=9, base=29))\nprint(change_base(x=9, base=30))\nprint(change_base(x=9, base=31))\nprint(change_base(x=9, base=32))\nprint(change_base(x=9, base=33))\nprint(change_base(x=9, base=34))\nprint(change_base(x=9, base=35))\nprint(change_base(x=9, base=36))\nprint(change_base(x=9, base=37))\nprint(change_base(x=9, base=38))\nprint(change_base(x=9, base=39))\nprint(change_base(x=9, base=40))\nprint(change_base(x=9, base=41))\nprint(change_base(x=9, base=42))\nprint(change_base(x=9, base=43))\nprint(change_base(x=9, base=44))\nprint(change_base(x=9, base=45))\nprint(change_base(x=9, base=46))\nprint(change_base(x=9, base=47))\nprint(change_base(x=9, base=48))\nprint(change_base(x=9, base=49))\nprint(change_base(x=9, base=50))\nprint(change_base(x=9, base=51))\nprint(change_base(x=9, base=52))\nprint(change_base(x=9, base=53))\nprint(change_base(x=9, base=54))\nprint(change_base(x=9, base=55))\nprint(change_base(x=9, base=56))\nprint(change_base(x=9, base=57))\nprint",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_base(42, 2) == \"42\"\nassert     change_base(64, 4) == \"100\"\nassert     change_base(42, 16) == \"12\"\nassert     change_base(1234, 8) == \"1020\"\n\ndef compare_strings(s1: str, s2: str) -> int:\n    \"\"\"Returns 1 if s1 and s2 are equal, -1 if s1 is greater, 0 if s1 and s2 are equal, and -1 if s2 is greater.\n    If one or both of s1 and s2 are empty return -1\n    \"\"\"\n    pass\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_base(2,2) == '2'\nassert     change_base(2,10) == 'a'\nassert     change_base(9,2) == '11'\nassert     change_base(9,10) == 'a'\n\ndef convert_to_base(s: str, b: int):\n    \"\"\"Convert a string to a new string in base b.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_base(0, 2) == \"0\"\nassert     change_base(1, 2) == \"1\"\nassert     change_base(10, 16) == \"A\"\nassert     change_base(10, 3) == \"10\"\nassert     change_base(0x10, 16) == \"A\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_base(10,2) == '10'\nassert     change_base(12,16) == 'A'\nassert     change_base(15,16) == 'F'\nassert     change_base(16,16) == 'F'\nassert     change_base(35,16) == 'Z'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_base(3, 2) == '21'\nassert     change_base(3, 3) == '333'\nassert     change_base(3, 4) == '333'\nassert     change_base(3, 5) == '333'\nassert     change_base(3, 6) == '333'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_base(123, 2) == '11001000011'\nassert change_base(123, 8) == '123'\nassert change_base(123, 3) == '13'\nassert change_base(123, 10) == '23'\nassert change_base(123, 11) == '321'\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(1, 3) == 2\n\nassert     triangle_area(2, 3) == 2\n\nassert     triangle_area(2, 4) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1, 1) == 1, 'Triangle area is wrong'\nassert     triangle_area(3, 2) == 2, 'Triangle area is wrong'\nassert     triangle_area(5, 6) == 3, 'Triangle area is wrong'\n",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    return 0.5*a*h\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(1, 1) == 1\nassert     triangle_area(1, 2) == 0.5\nassert     triangle_area(2, 2) == 1\nassert     triangle_area(2, 3) == 0.5\nassert     triangle_area(3, 3) == 1\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triangle_area(1, 1) == 1.0\nassert     triangle_area(1, 2) == 1.5\nassert     triangle_area(2, 1) == 2.0\nassert     triangle_area(3, 4) == 5.0\nassert     triangle_area(4, 3) == 5.0\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef create_a_triangle_from_center_point_length_height(point, length, height):\n    \"\"\"Create a triangle based on a center point and size\"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert fib4(1) == 0\nassert fib4(2) == 2\nassert fib4(3) == 0\nassert fib4(4) == 2\n",
        "num_ids_2": 20,
        "num_ids_4": 38
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fib4(0)        == 0\nassert     fib4(1)        == 0\nassert     fib4(2)        == 1\nassert     fib4(3)        == 0\nassert     fib4(4)        == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(10) == 55\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 5\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert median([0,1,2,3,4]) == 2\nassert median([1,2,3,4]) == 2\nassert median([1,2,2,4]) == 2\nassert median([1,1,1,1]) == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 47
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert median([]) == None\nassert median([3]) == 3\nassert median([1, 2, 3]) == 2.5\nassert median([1, 2, 3, 4, 5, 6]) == 2.5\n",
        "num_ids_2": 10,
        "num_ids_4": 32
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(f\"median([1, 5, 7, 9]) = {median([1, 5, 7, 9])}\")\nassert median([1, 5, 7, 9]) == 6\nassert median([-1, -5, -7, -9]) == -5\nassert median([]) == None\n",
        "num_ids_2": 17,
        "num_ids_4": 43
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median([1, 3, 4]) == 3\nassert median([1, 3, 4, 5, 6, 7, 8, 9]) == 5.5\nassert median([]) == None\n",
        "num_ids_2": 38,
        "num_ids_4": 45
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    \"\"\"\n    \n    l.sort()\n    if len(l)%2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2])/2\n    else:\n        return l[len(l)//2]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4.5\nassert median([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.5\nassert median([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -5.5\nassert median([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -5.5\nassert median([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -3.5\n",
        "num_ids_2": 56,
        "num_ids_4": 128
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Exercise 3:\")\n\ndef divisible_by_ten(num):\n    \"\"\"\n    Checks if a given number is divisible by 10\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_palindrome(\"\", True)\nassert is_palindrome(\"abc\", False)\nassert is_palindrome(\"a\", False)\nassert is_palindrome(\"aba\", True)\n",
        "num_ids_2": 14,
        "num_ids_4": 38
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert is_palindrome(\"racecar\") is True\n    assert is_palindrome(\"dear\") is False\n    assert is_palindrome(\"radar\") is True\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_palindrome(\"\") == True\nassert is_palindrome(\"a\") == True\nassert is_palindrome(\"A\") == True\nassert is_palindrome(\"Tact Coa\") == True\n",
        "num_ids_2": 14,
        "num_ids_4": 38
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_palindrome('hello') == False, 'Invalid test 1'\nassert     is_palindrome('noon') == False, 'Invalid test 2'\nassert     is_palindrome('racecar') == True, 'Invalid test 3'\nassert     is_palindrome('aabbccddeeffgghh') == True, 'Invalid test 4'\nassert     is_palindrome('a') == False, 'Invalid test 5'\n",
        "num_ids_2": 38,
        "num_ids_4": 85
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"noon\") == True\nassert is_palindrome(\"radar\") == False\nassert is_palindrome(\"racecar\") == True\nassert is_palindrome(\"0123456789\") == True\nassert is_palindrome(\"arca\") == False\n",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_palindrome(\"sini\") == False\nassert     is_palindrome(\"mario\") == False\nassert     is_palindrome(\"roma\") == True\nassert     is_palindrome(\"ar\") == True\nassert     is_palindrome(\"a\") == True\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef p_modp(n: int, p: int, p_modp: int):\n    \"\"\"Compute the number p^n modulo p.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef modm(n: int, m: int):\n    \"\"\"Return 2^n modulo m (be aware of numerics).\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef mod2p(n: int, p: int, mod=10**9 + 7):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_shift(\"abdcefghiklmnoqrstuvwxyz\") == \"abcdefghiklmnopqrstuvwxyz\"\nassert decode_shift(\"zbvwqtdq\") == \"zadbvwqdq\"\nassert decode_shift(\"zd\") == \"ad\"\nassert decode_shift(\"aqz\") == \"bw\"\n\nprint(\"The tests are passed successfully.\")\n",
        "num_ids_2": 65,
        "num_ids_4": 92
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_encoding_decoding():\n    assert encode_shift(\"A\") == \"B\"\n    assert decode_shift(\"B\") == \"A\"\n\ntest_encoding_decoding()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode_shift(\"The quick brown fox jumps over the lazy dog\") == \"jkqxczeasxmvofybwupnlo\"\nassert encode_shift(\"The quick brown fox jumps over the lazy dog\") == \"jkqxczeasxmvofybwupnlo\"\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Testing encode_shift:\")\n    assert encode_shift('abcd') == 'cdea'\n    assert encode_shift('abcd') == encode_shift('cdef')\n    assert encode_shift('abcd') == encode_shift('cdef')\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     encode_shift(\"HELLO\") == \"GOODBYE\"\nassert     encode_shift(\"SECRET\") == \"MEANLY\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"shinny yellow\") == \"shiny yellow\"\nassert     remove_vowels(\"shiny yellow\") == \"shiny yellow\"\nassert     remove_vowels(\"shinny yellow\") == \"shiny yellow\"\nassert     remove_vowels(\"shinny yellow\") == \"shiny yellow\"\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_vowels(\"vowels are a part of the alphabet\") == \"consistency is to remove the vowels from the alphabet\", \"Wrong Output\"\nassert     remove_vowels(\"\") == \"\", \"Wrong Output\"\nassert     remove_vowels(\"Hi my name is Julia\") == \"consistency is to remove the vowels from the alphabet\", \"Wrong Output\"\nassert     remove_vowels(\"I love Python\") == \"consistency is to remove the vowels from the alphabet\", \"Wrong Output\"\nassert     remove_vowels(\"I love Python and aldham\") == \"consistency is to remove the vowels from the alphabet\", \"Wrong Output\"",
        "num_ids_2": 57,
        "num_ids_4": 125
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"Test case 1 passed!\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"The quick brown fox jumps over the lazy dog\") == \"Thq kcuh bwof shp psp jmfl dov\"\nassert     remove_vowels(\"Joey\") == \"jy\"\nassert     remove_vowels(\"Monica\") == \"mc\"\nassert     remove_vowels(\"A long sentence\") == \"sl eng snt\"\n\n\ndef apply_trie(trie, word):\n    \"\"\"\n    apply_trie is a function that takes a trie and a word and returns a word after applying trie.\n    \"\"\"\n    pass\n",
        "num_ids_2": 56,
        "num_ids_4": 92
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_vowels('hello') == 'hll'\nassert     remove_vowels('hellovowel') == 'hll'\nassert     remove_vowels('hello world') == 'hello worl'\n\n\n\n\n",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"world\") == \"wrld\"\nassert     remove_vowels(\"bye\") == \"by\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\" \") == \"\"\n",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_vowels(\"The quick brown fox jumps over the lazy dog\")     == \"The quick brown fox jumps\"\nassert     remove_vowels(\"A very long word without vowels\")     == \"A long word without vowels\"\nassert     remove_vowels(\"No vowels\")     == \"No vowels\"\nassert     remove_vowels(\"\")     == \"\"\nassert     remove_vowels(\"A short word without vowels\")     == \"A short word without vowels\"\n",
        "num_ids_2": 55,
        "num_ids_4": 88
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_vowels(\"asdgfhjghgjh\") == \"sdsghjghj\", \"Wrong answer\"\nassert     remove_vowels(\"ghjghhjgh\") == \"\", \"Wrong answer\"\nassert     remove_vowels(\"abcd\") == \"\", \"Wrong answer\"\nassert     remove_vowels(\"cddd\") == \"\", \"Wrong answer\"\nassert     remove_vowels(\"\") == \"\", \"Wrong answer\"\n",
        "num_ids_2": 58,
        "num_ids_4": 99
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_vowels('guvfvdfgvff') == 'dfgvfff', 'incorrect'\nassert     remove_vowels('aeiou') == '', 'incorrect'\nassert     remove_vowels('Python') == 'thon', 'incorrect'\nassert     remove_vowels('aeiouaeiou') == '', 'incorrect'\nprint('All test cases passed.')\n\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    return text[:].translate(str.maketrans('aeiou',''*len('aeiou')))\n",
        "num_ids_2": 49,
        "num_ids_4": 92
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nbelow_threshold([], 0) == False\nbelow_threshold([0], 0) == False\nbelow_threshold([0, 10], 0) == True\nbelow_threshold([0, 10, 20], 0) == True\nbelow_threshold([-1, -2, -3], 0) == True\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_threshold([], 1) == True\nassert     below_threshold([5], 1) == False\nassert     below_threshold([3, 5], 1) == False\nassert     below_threshold([5], 2) == False\nassert     below_threshold([], -1) == True\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert below_threshold([1,2,3,4,5], 2) == True\nassert below_threshold([1,2,3,4,5], -1) == False\nassert below_threshold([2,4,6,8,10], 5) == True\nassert below_threshold([1,2,3,4,5], 0) == False\n",
        "num_ids_2": 24,
        "num_ids_4": 67
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_threshold([], 10) == False\nassert     below_threshold([1,2,3,4], 3) == True\nassert     below_threshold([4,2,3,4], 3) == True\n",
        "num_ids_2": 33,
        "num_ids_4": 53
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"\\n\\n--- TEST 3 ---\")\nprint(\"\\nBelow_threshold(1, 0):\", below_threshold([1], 0))\nprint(\"\\nBelow_threshold(1, 1):\", below_threshold([1], 1))\nprint(\"\\nBelow_threshold(3, 0):\", below_threshold([3], 0))\nprint(\"\\nBelow_threshold(1, 0.1):\", below_threshold([1], 0.1))\n\nassert below_threshold([1], 0) == True\nassert below_threshold([1], 1) == False\n",
        "num_ids_2": 16,
        "num_ids_4": 29
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(add(2,3))\nprint(add(1,2))\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add(2, 4) == 2\nassert     add(-2, 2) == 0\nassert     add(-2, -4) == -6\n\nprint('All tests passed!')\n",
        "num_ids_2": 22,
        "num_ids_4": 35
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add(1, 2) == 3\nassert add(1, 2) == 3\nassert add(1, -2) == -1\nassert add(-1, 2) == 1\nassert add(1, -2) == -1\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert add(3, 4) == 7\n\n\ndef length_and_value(st: str) -> int:\n    \"\"\"Return the length of st and the value of the last letter in st\n    \"\"\"\n    pass\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add(2,3) == 5\nassert     add(3,2) == 5\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     same_chars('abcd', 'abcd') == True\nassert     same_chars('abcd', 'aabd') == False\nassert     same_chars('abcd', 'abca') == False\nassert     same_chars('abcd', 'ab') == False\nassert     same_chars('abcd', 'abx') == False\n",
        "num_ids_2": 35,
        "num_ids_4": 68
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     same_chars(\"abcd\", \"abc\") == True\nassert     same_chars(\"abcd\", \"abcd\") == True\nassert     same_chars(\"abc\", \"abc\") == True\nassert     same_chars(\"abc\", \"abcd\") == False\nassert     same_chars(\"abcd\", \"abc\") == False\n",
        "num_ids_2": 33,
        "num_ids_4": 64
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     same_chars(s0 = 'abcd', s1 = 'abcd') == True\nassert     same_chars(s0 = 'abc', s1 = 'abcd') == False\nassert     same_chars(s0 = 'abcd', s1 = 'abc') == False\nassert     same_chars(s0 = 'aa', s1 = 'aa') == True\nassert     same_chars(s0 = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', s1 = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa') == True\n",
        "num_ids_2": 47,
        "num_ids_4": 92
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     same_chars('a','a')\nassert     not same_chars('a','b')\nassert     same_chars('a','aa')\nassert     same_chars('aa','a')\nassert     same_chars('a','A')\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     same_chars(\"\", \"\") == True\nassert     same_chars(\"abc\", \"abc\") == True\nassert     same_chars(\"abc\", \"abcd\") == False\nassert     same_chars(\"abc\", \"bcd\") == False\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         same_chars('abc', 'abd') == False\nassert         same_chars('abcd', 'abcd') == True\nassert         same_chars('ac', 'bc') == True\nassert         same_chars('bca', 'abc') == False\nassert         same_chars('a', 'aaaaa') == False\n",
        "num_ids_2": 33,
        "num_ids_4": 64
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     same_chars(\"abcde\", \"abd\") == True\nassert     same_chars(\"abcde\", \"abcd\") == False\nassert     same_chars(\"abcde\", \"abd\") == False\nassert     same_chars(\"abcde\", \"b\") == False\nassert     same_chars(\"\", \"abcde\") == False\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # print(fib(n=0))\n    # print(fib(n=1))\n    # print(fib(n=2))\n    # print(fib(n=3))\n    # print(fib(n=4))\n    # print(fib(n=5))\n    # print(fib(n=6))\n    # print(fib(n=7))\n    # print(fib(n=8))\n    # print(fib(n=9))\n    # print(fib(n=10))\n    # print(fib(n=11))\n    # print(fib(n=12))\n    # print(fib(n=13))\n    # print(fib(n=14))\n    # print(fib(n=15))\n    # print(fib(n=16))\n    # print(fib(n=17))\n    # print(fib(n=18))\n    # print(fib(n=19))\n    # print(fib(n=20))\n    # print(fib(n=21))\n    # print(fib(n=22))\n    # print(fib(n=23))\n    # print(fib(n=24))\n    # print(fib(n=25))\n    # print(fib(n=26))\n    # print(fib(n=27))\n    # print(fib(n=28))\n    # print(fib(n=29))\n    # print(fib(n=30))\n    # print(fib(n=31))\n    # print(fib(n=32))\n    # print(fib(n=33))\n    # print(fib(n=34))\n    # print(fib(n=35))\n    # print(fib(n=36))\n    # print(fib(n=37))\n    # print(fib(n=38))\n    # print(fib(n=39))\n    # print(fib(n=40))\n    # print(fib(n=41))\n    # print(fib(n=42))\n    # print(fib(n=43))\n    # print(fib(n=44))\n    # print(fib(n=45))\n    # print(fib(n=46))\n    # print(fib(n=47))\n    # print(fib(n=48))\n    # print(fib(n=49))\n    # print(fib(n=50))\n    # print(fib(n=51))\n    # print(fib(n=52))\n    # print(fib(n=53))\n    # print(fib(n=54))\n    # print(fib(n=55))\n    # print(fib(n=56))\n    # print(fib(n=57))\n    # print(fib(n=58))\n    # print(fib(n=59))\n    # print(fib(n=60))\n    # print(fib(n=61))\n    # print(fib(n=62))\n    # print(fib(n=63))\n    # print(fib(n=64))\n    # print(fib(n=65))\n    # print(fib(n=66))\n    # print(fib(n=67))\n    # print(fib(n=68))\n    # print(fib(n=69))\n    # print(fib(n=70))\n    # print(fib(n=71))\n    # print(fib(n=72))\n    # print(fib(n=73))\n    # print(fib(n=74))\n    # print(fib(n=75))\n    # print(fib(n=76))\n    # print(fib(n=77))\n    # print(fib(n=78))\n    # print(fib(n=79))\n    # print(fib(n=80))\n    # print(fib(n=81))\n    # print(fib(n=82))\n    # print(fib(n=83))\n    # print(fib(n=84))\n    # prin",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(]\") == False\nassert     correct_bracketing(\"(>)\") == False\nassert     correct_bracketing(\"<()>\") == False\nassert     correct_bracketing(\"<]\") == False\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"()\") == False, \"Input: ()\"\nassert     correct_bracketing(\"(}\") == False, \"Input: }\"\nassert     correct_bracketing(\"(}[]\") == False, \"Input: }[]\"\nassert     correct_bracketing(\"[}]\") == False, \"Input: ]\"\n\ndef validate_brackets(brackets: str):\n    \"\"\" input: a string of \"<\" and \">\"\n    return: True if brackets is valid and False otherwise.\n    \"\"\"\n    n = len(brackets)\n    # make a stack\n    # push all \"<\"\n    # check if there is more than one \"<\"\n    # if there is: \n    # pop the first \"<\" and then return False\n    # pop the last \"<\" and if it is not \"<\": return False\n    # pop all \">\" and if there is more than one \">\": return False\n    # pop the last \">\" and if it is not \">\": return False\n    # return True\n    pass\n",
        "num_ids_2": 39,
        "num_ids_4": 82
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"(<\") == False\nassert     correct_bracketing(\"<)\") == False\nassert     correct_bracketing(\"<(\") == False\nassert     correct_bracketing(\")<\") == False\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"(>\") == False\nassert     correct_bracketing(\")<\") == False\nassert     correct_bracketing(\"<<<<>\") == False\nassert     correct_bracketing(\"<<(>>\") == False\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<()>\") == True, \"the test input was <()> and the return was True\"\nassert correct_bracketing(\"<{<()><\") == False, \"the test input was <{<()>< and the return was False\"\nassert correct_bracketing(\"<{<]\") == False, \"the test input was <{<] and the return was False\"\n",
        "num_ids_2": 63,
        "num_ids_4": 94
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<{}>\") == False\nassert     correct_bracketing(\"<(}\") == False\nassert     correct_bracketing(\"<[)\") == False\nassert     correct_bracketing(\"<[]\") == True\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<\") == True\nassert     correct_bracketing(\"<[](]>\") == True\nassert     correct_bracketing(\"<[)][]>\") == False\nassert     correct_bracketing(\"<{[]}>\") == True\nassert     correct_bracketing(\"<{<()>}>\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<(>)\") == True\nassert     correct_bracketing(\"<{)}>\") == True\nassert     correct_bracketing(\"<[]>\") == False\nassert     correct_bracketing(\"<{}>\") == False\nassert     correct_bracketing(\"<[]()>\") == False\n",
        "num_ids_2": 31,
        "num_ids_4": 62
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmonotonic([2,1,2,1])\nmonotonic([1,2,1,2])\nmonotonic([1,2,3,4])\nmonotonic([1,1,1,1])\nmonotonic([1,2,1,1])\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     monotonic([1, 1, 1]) == False, \"Just the list itself is a monotonic sequence.\"\nassert     monotonic([1, 2, 3, 4, 5, 6]) == True, \"All the elements except the last one are increasing\"\nassert     monotonic([1, 5, 3, 2, 4, 6]) == True, \"All the elements except the last one are decreasing\"\n",
        "num_ids_2": 61,
        "num_ids_4": 94
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     monotonic([1,3,2,2])\nassert     monotonic([1,3,2,2,1])\nassert     monotonic([1,2,3])\nassert     monotonic([2,2,3,1])\nassert     monotonic([1,3,2])\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     monotonic([1, 3, 5, 2, 4]) == True, \"Wrong\"\nassert     monotonic([1, 3, 5, 2, 4, 3, 4, 5]) == True, \"Wrong\"\nassert     monotonic([1, 3, 5, 2, 4, 3, 4, 5, 3]) == False, \"Wrong\"\nassert     monotonic([1, 3, 5, 2, 4, 3, 4, 5, 3, 5]) == False, \"Wrong\"\nassert     monotonic([1, 3, 5, 2, 4, 3, 4, 5, 3, 5, 2, 4, 3]) == False, \"Wrong\"\n",
        "num_ids_2": 54,
        "num_ids_4": 120
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     monotonic([])\nassert     monotonic([1,1,1])\nassert     monotonic([3,2,1])\nassert     monotonic([-1,2,1])\nassert     monotonic([1,1,2])\n",
        "num_ids_2": 21,
        "num_ids_4": 48
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nl = [1,2,3,4,5]\nassert monotonic(l) == False\n\nl = [1,3,2,5,4]\nassert monotonic(l) == True\n",
        "num_ids_2": 13,
        "num_ids_4": 23
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     monotonic([1,2,3,4])\nassert not monotonic([1,2,3,4,4])\nassert not monotonic([1,2,3,4,4,3])\nassert not monotonic([1,2,3,4,4,3,2])\n",
        "num_ids_2": 32,
        "num_ids_4": 72
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # case 0\n    l = [1, 1, 1, 1, 1, 2]\n    assert monotonic(l) is True\n\n    # case 1\n    l = [1, 2, 3, 4, 5]\n    assert monotonic(l) is True\n\n    # case 2\n    l = [1, 2, 3, 4, 5, 2, 1]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 4, 3]) == []\nassert     common([1, 2, 3], [4, 1, 3]) == [1, 2, 3]\nassert     common([1, 1, 2], [1, 2, 3]) == [1, 2]\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n",
        "num_ids_2": 46,
        "num_ids_4": 96
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4], 'Error 1'\nassert     common([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4], 'Error 2'\nassert     common([1, 2, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3], 'Error 3'\nassert     common([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Error 4'\nassert     common(['a','b','c'], ['b','d','c']) == ['b','c'], 'Error 5'\n",
        "num_ids_2": 82,
        "num_ids_4": 190
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert common([\"A\", \"B\", \"C\"], [\"A\", \"B\", \"C\", \"D\"]) == [\"A\", \"B\", \"C\"], \"The two lists have the same elements\"\nassert common([\"C\", \"D\", \"E\"], [\"A\", \"B\", \"C\", \"D\"]) == [\"A\", \"B\", \"C\"], \"The two lists have the same elements\"\nassert common([\"A\", \"B\", \"C\"], [\"A\", \"B\", \"C\", \"D\"]) == [\"A\", \"B\", \"C\"], \"The two lists have the same elements\"\nassert common([\"A\", \"B\", \"C\", \"D\", \"E\"], [\"A\", \"B\", \"C\", \"D\"]) == [\"A\", \"B\", \"C\"], \"The two lists have the same elements\"\n",
        "num_ids_2": 48,
        "num_ids_4": 138
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common([1,2,3,4,5],         [1,2,3,4,5]) == [1,2,3,4,5]\nassert     common([1,2,3,4,5],         [1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     common([1,2,3,4,5],         [1,2,3,4,5,6,7]) == [1,2,3,4,5]\n",
        "num_ids_2": 82,
        "num_ids_4": 125
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert common([1, 2, 3], [2, 3, 4]) == [2, 3]\nassert common([1, 2, 3, 4], [2, 3, 4]) == []\nassert common([1, 2, 3, 4], [1, 3, 4]) == [1, 3, 4]\n",
        "num_ids_2": 26,
        "num_ids_4": 74
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common([1,2,3], [3,4,5]) ==  [3]\nassert     common([1,2,3], [4,5,6]) ==  [4,5]\nassert     common([2,3,4], [1,2,3,4,5,6]) ==  [1,2,3,4]\n",
        "num_ids_2": 48,
        "num_ids_4": 83
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common([], []    ) == []\nassert common([], [1, 2]) == []\nassert common([1, 2], []) == []\nassert common([], [3, 4, 5, 6]) == []\nassert common([], [6, 5, 4, 3]) == []\n",
        "num_ids_2": 23,
        "num_ids_4": 51
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common([1, 3, 5], [2, 4, 7]) == [2, 3, 5]\nassert     common([1, 2, 3, 4], [2, 3, 4]) == []\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) == [1, 2, 3, 4]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3, 4, 6]) == []\n",
        "num_ids_2": 48,
        "num_ids_4": 110
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_prime_factor(24) == 3\nassert largest_prime_factor(28) == 2\nassert largest_prime_factor(28)!= 2\nassert largest_prime_factor(15) == 3\nassert largest_prime_factor(9) == 3\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(6) == 2\nassert     largest_prime_factor(20) == 5\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(14) == 2\nassert     largest_prime_factor(7) == 7\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(12) == 2\nassert largest_prime_factor(20) == 5\nassert largest_prime_factor(1) == 2\nassert largest_prime_factor(999999999) == 997301\nassert largest_prime_factor(987654321) == 11\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(13) == 3\nassert     largest_prime_factor(100) == 5\nassert     largest_prime_factor(10001) == 11\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(6) == 2\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(25) == 5\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(21) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(2) == 1\nassert     largest_prime_factor(7) == 2\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(100) == 10\nassert     largest_prime_factor(139) == 139\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_prime_factor(7) == 2\nassert     largest_prime_factor(17) == 7\nassert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(21) == 21\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # 1\n    assert sum_to_n(1) == 1\n    # 2\n    assert sum_to_n(2) == 3\n    # 3\n    assert sum_to_n(3) == 6\n    # 4\n    assert sum_to_n(4) == 10\n    # 5\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_to_n(4) == 9\nassert     sum_to_n(8) == 24",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 2\nassert     sum_to_n(10) == 55\nassert     sum_to_n(50) == 306\nassert     sum_to_n(100) == 5050\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(5) == 15\nassert     sum_to_n(10) == 55\nassert     sum_to_n(12) == 138\nassert     sum_to_n(15) == 231\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_to_n(2) == 1\nassert     sum_to_n(3) == 2\nassert     sum_to_n(4) == 3\nassert     sum_to_n(5) == 6\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(3) == 6\nassert     sum_to_n(10) == 55\nassert     sum_to_n(100) == 1299\nassert     sum_to_n(1000) == 46337\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncorrect_bracketing('()') == True\nassert \ncorrect_bracketing('(())') == False\nassert \ncorrect_bracketing('(()))') == False\nassert \ncorrect_bracketing('(((()))') == True\nassert \ncorrect_bracketing('((()))') == False\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"((())\") == False\nassert     correct_bracketing(\"))\") == False\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert correct_bracketing(\"((())\") == True\nassert correct_bracketing(\"())\") == False\nassert correct_bracketing(\"(((()))\") == False\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(())((()))\") == True\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing('') == True\nassert     correct_bracketing('()') == True\nassert     correct_bracketing('(())') == True\nassert     correct_bracketing('(((()()()()()()))') == False\n",
        "num_ids_2": 26,
        "num_ids_4": 61
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()\") == False\nassert     correct_bracketing(\"((())\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"((())()\") == True\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(})\") == False\nassert     correct_bracketing(\"((())\") == False\nassert     correct_bracketing(\"())((())\") == False\nassert     correct_bracketing(\"())\") == True\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing('( ( ( ( ( ) ) ) ) ) )') == True\nassert     correct_bracketing('( ( ( ( ( ) ) ) ) ) )') == False\nassert     correct_bracketing('( ( ( ( ) ) ) ) )') == False\nassert     correct_bracketing('( ) ) ) ) )') == False\nassert     correct_bracketing(') ) ) ) )') == False\n",
        "num_ids_2": 46,
        "num_ids_4": 85
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     derivative([2, 1]) == [1, 2]\nassert derivative([1, 0]) == [1]\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     derivative([0, 1, 2, 3]) == [[0], [1], [2], [3]]\nassert     derivative([-3, 0, 4]) == [[0], [-3], [0], [4]]\nassert     derivative([-1, 0, 1, 2, 3]) == [[0], [-1], [0], [-1], [2]]\nassert     derivative([-2, 0, 2, 3]) == [[0], [-2], [0], [2]]\nassert     derivative([-1, 1, 2]) == [[0], [-1], [1], [2]]\n",
        "num_ids_2": 55,
        "num_ids_4": 118
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    derivative([]) == []\nassert \n    derivative([1, 2, 3]) == [2, 3]\n\ndef roots(xs: list):\n    \"\"\" Return all roots of a quadratic equation.\n    Equation is ax^2 + bx + c\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef fibfib2(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fibfib2(n-1) + fibfib2(n-2) + fibfib2(n-3)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    \"\"\"\n    Test Cases:\n    1. fibfib(3) == 2\n    2. fibfib(7) == 21\n    3. fibfib(10) == 55\n    \"\"\"\n    pass",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    fibfib(0) == 0\nassert \n    fibfib(1) == 0\nassert \n    fibfib(2) == 1\nassert \n    fibfib(3) == 1\nassert \n    fibfib(4) == 2\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(5) == 5\n    fibfib(6) == 8\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0, f\"fibfib(0) should return 0\"\nassert     fibfib(1) == 0, f\"fibfib(1) should return 0\"\nassert     fibfib(2) == 1, f\"fibfib(2) should return 1\"\nassert     fibfib(10) == 55, f\"fibfib(10) should return 55\"\nassert     fibfib(50) == 945, f\"fibfib(50) should return 945\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fibfib(0) == 0, \"Wrong return of fibfib\"\nassert     fibfib(1) == 0, \"Wrong return of fibfib\"\nassert     fibfib(2) == 1, \"Wrong return of fibfib\"\nassert     fibfib(3) == 1, \"Wrong return of fibfib\"\nassert     fibfib(4) == 2, \"Wrong return of fibfib\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(5) == 3\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(FIX)\n\ndef vowels_count(s):\n    vowels = 0\n    for i in range(len(s)):\n        if s[i] in \"aeiou\":\n            vowels += 1\n    if len(s) > 0 and s[len(s)-1] in \"aeiou\":\n        vowels += 1\n    return vowels\n\nprint(vowels_count(\"test\"))\nprint(vowels_count(\"apple\"))\nprint(vowels_count(\"banana\"))\nprint(vowels_count(\"zebra\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     vowels_count(FIX) == 4, \"\"\"\nCheck the correctness of the given function:\nthe number of vowels should be 4\n\"\"\"\nassert     vowels_count(\"abac\") == 2, \"\"\"\nCheck the correctness of the given function:\nthe number of vowels should be 2\n\"\"\"\nassert     vowels_count(\"ab\") == 2, \"\"\"\nCheck the correctness of the given function:\nthe number of vowels should be 2\n\"\"\"\nassert     vowels_count(\"a\") == 1, \"\"\"\nCheck the correctness of the given function:\nthe number of vowels should be 1\n\"\"\"\nassert     vowels_count(\"\") == 0, \"\"\"\nCheck the correctness of the given function:\nthe number of vowels should be 0\n\"\"\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    # test case\n    test_cases = [\"apple\", \"dog\", \"app\", \"\"]\n    for word in test_cases:\n        assert vowels_count(word) == len(vowels(word)), \"{} should contain {} vowels\".format(word, len(vowels(word)))\n    print(\"All test cases passed.\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     vowels_count(\"A\") == 1\nassert     vowels_count(\"Python\") == 5\nassert     vowels_count(\"\") == 0\nassert     vowels_count(\"hello world\") == 5\nassert     vowels_count(\"a\") == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nvowels_count(\"a\") == 0\nvowels_count(\"aa\") == 1\nvowels_count(\"ba\") == 1\nvowels_count(\"baa\") == 2\nvowels_count(\"e\") == 1\nvowels_count(\"eo\") == 2\nvowels_count(\"ei\") == 1\nvowels_count(\"io\") == 2\nvowels_count(\"iu\") == 1\nvowels_count(\"oo\") == 2\nvowels_count(\"ooo\") == 3\nvowels_count(\"u\") == 1\nvowels_count(\"uu\") == 2\nvowels_count(\"yu\") == 1\nvowels_count(\"y\") == 1\nvowels_count(\"yooo\") == 4\nvowels_count(\"yx\") == 2\n\nvowels_count(\"\") == 0\nvowels_count(\"a\") == 1\nvowels_count(\"aaa\") == 2\nvowels_count(\"aaaa\") == 3\nvowels_count(\"b\") == 0\nvowels_count(\"bbbb\") == 1\nvowels_count(\"baaab\") == 3\nvowels_count(\"abc\") == 0\nvowels_count(\"abcbac\") == 2\nvowels_count(\"ab\") == 1\nvowels_count(\"ababab\") == 4\nvowels_count(\"abcba\") == 2\nvowels_count(\"abcd\") == 0\n\nprint(FIX)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    vowels_count('vowels') == 3\n    vowels_count('a') == 1\n    vowels_count('aeiou') == 5\n    vowels_count('y') == 1\nassert not vowels_count('')\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     circular_shift(    17, 5) == '3'\nassert     circular_shift(    '17', 5) == '3'\nassert     circular_shift('123456789', 8) == '987654321'\nassert     circular_shift('123456789', -8) == '987654321'\nassert     circular_shift('123456789', -9) == '987654321'\n",
        "num_ids_2": 35,
        "num_ids_4": 80
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef smallest_non_negative(x, m):\n    \"\"\"Return the smallest integer k such that 0 <= k < m and x + k*m >= 0\"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circular_shift(123, 4) == \"1234\"\nassert     circular_shift(123, -5) == \"3412\"\nassert     circular_shift(123, 0) == \"123\"\nassert     circular_shift(123, 1) == \"3213\"\nassert     circular_shift(123, 7) == \"321\"\n",
        "num_ids_2": 35,
        "num_ids_4": 68
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circular_shift(2, 0) == \"2\"\nassert     circular_shift(2, 1) == \"1\"\nassert     circular_shift(2, 2) == \"0\"\nassert     circular_shift(2, 3) == \"1\"\nassert     circular_shift(2, 4) == \"0\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    circular_shift
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digitSum(\"\") == 0, \"input an empty string\"\nassert     digitSum(\"A\") == 1, \"input one character, should be 1\"\nassert     digitSum(\"AAAA\") == 4, \"input four characters, should be 4\"\nassert     digitSum(\"AAAB\") == 4, \"input four characters, should be 4\"\nassert     digitSum(\"AAABC\") == 3, \"input four characters, should be 3\"\n",
        "num_ids_2": 36,
        "num_ids_4": 77
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         digitSum(\"hIgAnIg\") == 2\nassert         digitSum(\"hIgAnIg\") == 3\nassert         digitSum(\"hIgAnIg\") == 2\nassert         digitSum(\"hIgAnIg\") == 2\nassert         digitSum(\"1\") == 1\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digitSum('helfix') == 27\nassert     digitSum('ac') == 9\nassert     digitSum('a') == 0\nassert     digitSum('abcd') == 0\nassert     digitSum('aba') == 6\n",
        "num_ids_2": 22,
        "num_ids_4": 43
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digitSum(\"12345\") == 5\nassert     digitSum(\"123\") == 1\nassert     digitSum(\"12\") == 1\nassert     digitSum(\"2\") == 1\nassert     digitSum(\"01\") == 1\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum('a11ac11d11') == 19, 'Incorrect'\nassert digitSum('l'*10) == 0, 'Incorrect'\nassert digitSum('A'*10) == 10, 'Incorrect'\nassert digitSum('11a1c1d1a1') == 16, 'Incorrect'\nassert digitSum('11122233344') == 9, 'Incorrect'\n",
        "num_ids_2": 37,
        "num_ids_4": 76
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digitSum('123abc123') == 45\nassert     digitSum('123a123') == 45\nassert     digitSum('123c123') == 45\nassert     digitSum('123cab123') == 45\nassert     digitSum('123abc12c') == 45\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digitSum('test') == 0, 'This function should return 0 for test'\nassert     digitSum('pepper') == 0, 'This function should return 0 for pepper'\nassert     digitSum('spam') == 2, 'This function should return 2 for spam'\nassert     digitSum('pizza') == 3, 'This function should return 3 for pizza'\nassert     digitSum('') == 0, 'This function should return 0 for '''\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digitSum('a2b3c4') == 3\nassert     digitSum('ab') == 0\nassert     digitSum('abc') == 0\nassert     digitSum('abcde') == 3\nassert     digitSum('abcdef') == 7\n",
        "num_ids_2": 25,
        "num_ids_4": 46
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digitSum(\"abc0123456789\") == 9, \"First test case failed.\"\nassert     digitSum(\"qwertyuiop\") == 0, \"Second test case failed.\"\nassert     digitSum(\"a\") == 1, \"Third test case failed.\"\nassert     digitSum(\"\") == 0, \"Fourth test case failed.\"\nassert     digitSum(\"0123456789\") == 45, \"Fifth test case failed.\"\n",
        "num_ids_2": 43,
        "num_ids_4": 76
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\"abc\", 2) == 1 \nassert fruit_distribution(\"abc\", 4) == 1\nassert fruit_distribution(\"abc\", 8) == 2\nassert fruit_distribution(\"abc\", 10) == 2\nassert fruit_distribution(\"abc\", 20) == 3\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fruit_distribution(\"15\",2) == 0, \"Example 1\"\nassert fruit_distribution(\"100\",1) == 100, \"Example 2\"\nassert fruit_distribution(\"10\",3) == 3, \"Example 3\"\nassert fruit_distribution(\"0\",5) == 0, \"Example 4\"\n\n\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    fruit_distribution(\"3\",1) == 0\n    fruit_distribution(\"3\",2) == 1\n    fruit_distribution(\"0\",3) == 0\n    fruit_distribution(\"3\",4) == 1\n    \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fruit_distribution(\"5\", 10) == 4\nassert fruit_distribution(\"5\", 5) == 0\nassert fruit_distribution(\"15\", 5) == 5\nassert fruit_distribution(\"1\", 1) == 1\nassert fruit_distribution(\"15\", 5) == 0\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fruit_distribution('0',0) == 0 \nassert     fruit_distribution('1',0) == 0 \nassert     fruit_distribution('1',1) == 1 \nassert     fruit_distribution('1',2) == 1 \nassert     fruit_distribution('1',3) == 1 \n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fruit_distribution(\"2\", \"4\") ==     2\nassert     fruit_distribution(\"1\", \"6\") ==     1\nassert     fruit_distribution(\"1\", \"1\") ==     1\nassert     fruit_distribution(\"0\", \"5\") ==     0\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfruit_distribution(\"AAAAAA\", 0) == 0\n\nassert \nfruit_distribution(\"AAAAAA\", 4) == 0\n\nassert \nfruit_distribution(\"AAAAA\", 4) == 3\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfruit_distribution('1234', 1) == 0\nassert fruit_distribution('123', 1) == 0\nassert fruit_distribution('1234', 3) == 1\nassert fruit_distribution('12', 3) == 0\nassert fruit_distribution('12', 3) == 0\n",
        "num_ids_2": 16,
        "num_ids_4": 43
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfruit_distribution(\"1\",5) == 1\nassert fruit_distribution(\"1,2\",5) == 1\nassert fruit_distribution(\"1,3,4,5,6\",5) == 1\nassert fruit_distribution(\"1,3,2,4,3,2,5,5,2,1,1\",5) == 3\n",
        "num_ids_2": 18,
        "num_ids_4": 72
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pluck([]) == []\nassert     pluck([5,6,4,2]) == [4, 1]\nassert     pluck([2,1,2,3]) == [2, 0]\n",
        "num_ids_2": 29,
        "num_ids_4": 49
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pluck([]) == [], \"Input: []\"\nassert     pluck([1, 2, 3, 4, 5, 6]) == [4, 2], \"Input: [1, 2, 3, 4, 5, 6]\"\nassert     pluck([2, 4, 4, 2, 8, 12, 4, 8]) == [4, 2], \"Input: [2, 4, 4, 2, 8, 12, 4, 8]\"\nassert     pluck([2, 4, 4, 2, 8, 12, 4, 8, 8, 2, 8, 12, 4, 8]) == [4, 2], \"Input: [2, 4, 4, 2, 8, 12, 4, 8, 8, 2, 8, 12, 4, 8]\"\nassert     pluck([2, 4, 4, 2, 8, 12, 4, 8, 8, 2, 8, 12, 4, 8, 10, 6, 2, 8, 12, 4, 8]) == [4, 2], \"Input: [2, 4, 4, 2, 8, 12, 4, 8, 8, 2, 8, 12, 4, 8, 10, 6, 2, 8, 12, 4, 8]\"\n",
        "num_ids_2": 55,
        "num_ids_4": 175
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pluck(\n        [\n            TreeNode(\n                1\n            ),\n            TreeNode(\n                2\n            ),\n            TreeNode(\n                3\n            ),\n            TreeNode(\n                4\n            ),\n            TreeNode(\n                5\n            ),\n            TreeNode(\n                6\n            ),\n            TreeNode(\n                7\n            )\n        ]\n    ) == [1, 3]\n\nassert     pluck(\n        [\n            TreeNode(\n                1\n            ),\n            TreeNode(\n                2\n            ),\n            TreeNode(\n                3\n            ),\n            TreeNode(\n                4\n            ),\n            TreeNode(\n                5\n            ),\n            TreeNode(\n                6\n            ),\n            TreeNode(\n                7\n            )\n        ]\n    ) == [4, 6]\n\nassert     pluck(\n        [\n            TreeNode(\n                1\n            ),\n            TreeNode(\n                2\n            ),\n            TreeNode(\n                3\n            ),\n            TreeNode(\n                4\n            ),\n            TreeNode(\n                5\n            ),\n            TreeNode(\n                6\n            ),\n            TreeNode(\n                7\n            )\n        ]\n    ) == [1, 1]",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pluck([3, 2, 5, 5, 1, 1]) == [[1, 1], [1, 2]]\nassert     pluck([3, 2, 5, 5, 1, 1, 1]) == []\nassert     pluck([1]) == []\nassert     pluck([]) == []\nassert     pluck([1, 1, 1]) == [[1, 0]]\n",
        "num_ids_2": 51,
        "num_ids_4": 70
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pluck([]) == [], 'the empty input should return []'\nassert     pluck([1]) == [1], 'a plucked node should be returned'\nassert     pluck([1,2,3,4,5]) == [1, 2], 'the plucked node should be returned'\nassert     pluck([1,2,3,4,5,6,7,8,9,10]) == [1, 4, 8], 'the plucked node should be returned'\nassert     pluck([1,2,3,4,5,6,7,8,9,10,11,12]) == [1, 6, 10], 'the plucked node should be returned'\n",
        "num_ids_2": 39,
        "num_ids_4": 113
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pluck([1, 1, 1, 2, 2, 2]) == [1, 0], \"First example\"\nassert     pluck([]) == [], \"Second example\"\nassert     pluck([0, 2, 4, 6, 8, 9, 10]) == [0, 3], \"Third example\"\nassert     pluck([1, 1, 1, 2, 2, 2]) == [1, 0], \"Fourth example\"\n\n\n",
        "num_ids_2": 42,
        "num_ids_4": 100
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert search([2,2,3]) == -1\nassert search([2,4,6,4,4,2]) == -1\nassert search([4,1,4,2,3,4,3,3,4,5,5,3,3,4,4,5,5,6,6,7,8,8,7,6,5,5,4,2,3,2,1,2,2,3,4,4,5,5,5,6,6,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,2,3,2,1,2,3,4,4,5,5,5,6,6,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,2,3,2,1,2,3,4,4,5,5,5,6,6,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,2,3,2,1,2,3,4,4,5,5,5,6,6,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,2,3,2,1,2,3,4,4,5,5,5,6,6,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7,8,8,7,6,5,5,4,3,3,3,4,4,5,5,5,6,7,7,7",
        "num_ids_2": 16,
        "num_ids_4": 1026
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print('\\nTesting 1... ', end='')\n    assert search([]) == -1, 'Wrong answer'\n    assert search([1]) == 1, 'Wrong answer'\n    assert search([1,1]) == 1, 'Wrong answer'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsearch([4,2,3,1]) == 4, search([4,2,3,1])\nprint('The test passed')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsearch([1,2,4,1,3,5,3]) == 3, 'The first value is 3'\nassert \nsearch([1,3,5]) == -1, 'The list does not contain any values'\nassert search([1,2,4,1,3,5,3,6]) == 3, 'The second value is 3'\nassert search([1,2,4,1,3,5,3,6]) == 6, 'The third value is 6'\n",
        "num_ids_2": 6,
        "num_ids_4": 66
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsearch([2, 4, 6, 8]) == -1\nassert search([8, 8, 6, 6, 8, 2, 8]) == 8\nassert search([8, 8, 6, 6, 8, 2, 8, 8]) == -1\nassert search([]) == -1\nassert search([]) == -1\n",
        "num_ids_2": 23,
        "num_ids_4": 54
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15]) == 15, search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15])\nassert     search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15]) == -1, search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15])\nassert     search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15]) == 15, search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15])\nassert     search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15]) == -1, search([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15])\n",
        "num_ids_2": 149,
        "num_ids_4": 298
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([]) == -1\nassert    search([1,2,3]) == 3\nassert    search([2,1,5]) == 2\nassert    search([3,3,3]) == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([4,5,7,9,5,7,9,7,9,7,7,7,7,4,4,4,4,4,4]) == 4\nassert search([2,4,3,5,4,5,5,2,3,4,2]) == 2\nassert search([2,4,5,2,4,5,5,5,2,4,4,5,2,4,4,4,5,5,5]) == -1\n",
        "num_ids_2": 73,
        "num_ids_4": 118
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strange_sort_list([1, 2, 4, 5, 10, 3, 0, 3, 6, 2]) ==     [0, 2, 3, 3, 4, 5, 6, 2, 10, 2, 3, 4, 5, 10, 3]\n\nprint('correct')\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strange_sort_list([3, 4, 1, 2, 5]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 2, 1, 0, 1]) == [0, 1, 1, 2, 3, 4, 5]\nassert     strange_sort_list([5, 4, 3, 2, 1, 0, 1, 0]) == [0, 0, 1, 1, 2, 3, 4, 5]\n",
        "num_ids_2": 64,
        "num_ids_4": 140
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     [1,2,3,4] == strange_sort_list([4,1,2,3])\nassert     [3,2,1] == strange_sort_list([1,2,3])\nassert     [4,1] == strange_sort_list([1,4])\nassert     [2,3,4] == strange_sort_list([4,3,2])\nassert     [4,3,2] == strange_sort_list([3,4,2])\n",
        "num_ids_2": 50,
        "num_ids_4": 92
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strange_sort_list([1,2,3,5,3,5,1]) ==     [1,3,5,1,3,5,2]\nassert     strange_sort_list([-1,2,3,5,3,5,1]) ==     [-1,1,3,3,5,5,2]\n",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('All tests passed!')\nprint()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strange_sort_list([-3,4,1,7,8,7,-5]) == [-5,4,1,7,7,8,3]\nassert     strange_sort_list([3,4,1,7,8,7,-5]) == [-5,4,1,3,7,7,8]\n",
        "num_ids_2": 81,
        "num_ids_4": 81
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(2, 3, 4) == 1, \"Test 1: {0}\".format(triangle_area(2, 3, 4))\nassert     triangle_area(2, 3, 3) == 0, \"Test 2: {0}\".format(triangle_area(2, 3, 3))\nassert     triangle_area(3, 4, 5) == -1, \"Test 3: {0}\".format(triangle_area(3, 4, 5))\nassert     triangle_area(4, 5, 6) == -1, \"Test 4: {0}\".format(triangle_area(4, 5, 6))\nassert     triangle_area(1, 1, 1) == 0, \"Test 5: {0}\".format(triangle_area(1, 1, 1))\n",
        "num_ids_2": 76,
        "num_ids_4": 154
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(1, 2, 3) == 1.73, 'Wrong'\nassert     triangle_area(3, 4, 5) == -1, 'Wrong'\nassert     triangle_area(3, 3, 3) == 1, 'Wrong'\nassert     triangle_area(3, 2, 2) == 1, 'Wrong'\nassert     triangle_area(1, 1, 1) == 1, 'Wrong'\n",
        "num_ids_2": 45,
        "num_ids_4": 87
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    triangle_area(3, 4, 5) == 2.35\n    triangle_area(3, 4, 3) == -1\n    triangle_area(3, 4, 1) == -1\n    triangle_area(3, 3, 3) == 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # triangle_area(2, 3, 4) == 0.5\n    # triangle_area(10, 4, 2) == 0.25\n    # triangle_area(1, 4, 3) == 0.5\n    # triangle_area(-2, 3, 4) == -1.00",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     will_it_fly([],2) == False\nassert     will_it_fly([1],2) == False\nassert     will_it_fly([1,2],2) == False\nassert     will_it_fly([1,2,3],3) == True\nassert     will_it_fly([1,2,3,4],3) == False\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     will_it_fly([], 10) == False, \"Should return False\"\nassert     will_it_fly([1,2], 10) == False, \"Should return False\"\nassert     will_it_fly([1,2], 5) == True, \"Should return True\"\nassert     will_it_fly([1,2], 1) == True, \"Should return True\"\nassert     will_it_fly([1,2,3,4,5], 6) == True, \"Should return True\"\n",
        "num_ids_2": 43,
        "num_ids_4": 89
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nwill_it_fly(palindrome([]), 10) == False\nwill_it_fly(palindrome([1,2,3,4]), 10) == True\nwill_it_fly(palindrome([2,1]), 10) == False\nwill_it_fly(palindrome([2,1]), 2) == True\nwill_it_fly(palindrome([1]), 2) == False\nwill_it_fly(palindrome([1,1,1]), 2) == False\nwill_it_fly(palindrome([1,1,1,1,1,1]), 2) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]), 100) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]), 1) == True\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]), 1) == False\nwill_it_fly(palindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     will_it_fly([], 10) == True \nassert     will_it_fly([1, 1, 1], 10) == False\nassert     will_it_fly([3, 2, 1], 10) == True\nassert     will_it_fly([3, 2, 1, 4], 10) == False\nassert     will_it_fly([5, 2, 1], 10) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nwill_it_fly([1, 1, 1], 3) == True\nwill_it_fly([1, 1, 1], 4) == False\nwill_it_fly([1, 2, 3], 4) == True\nwill_it_fly([1, 2, 3], 1) == True\nwill_it_fly([1, 2, 3], 2) == False\nwill_it_fly([1, 2, 3], 5) == False\nwill_it_fly([1, 2, 3], 6) == True\nwill_it_fly([1, 2, 3], 7) == False\nwill_it_fly([1, 2, 3], 10) == False\nwill_it_fly([1, 2, 3], 11) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 12) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 13) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 14) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 15) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 16) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 17) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 18) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 19) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 20) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 21) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 22) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 23) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 24) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 25) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 26) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 27) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 28) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 29) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 30) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 31) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 32) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 33) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 34) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 35) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 36) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 37) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 38) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 39) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 40) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 41) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 42) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 43) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 44) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 45) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 46) == False\nwill_it_fly([1, 2, 3, 4, 5, 6], 47) == True\nwill_it_fly([1, 2, 3, 4, 5, 6], 48) == False\nwill",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    pass\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    w = int(input())\n    assert(will_it_fly(q, w))\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     will_it_fly(['a','b','a','c','d','a','c'],5) == True, 'bad input'\nassert     will_it_fly(['a','b','a','c','d','a','c','c'],10) == True, 'bad input'\nassert     will_it_fly(['a','b','a','c','d','a','c','c','c'],15) == False, 'bad input'\nassert     will_it_fly(['a','b','a','c','d','a','c','c','c','c','c'],16) == False, 'bad input'\nassert     will_it_fly(['a','b','a','c','d','a','c','c','c','c','c','c','c'],18) == False, 'bad input'\n",
        "num_ids_2": 70,
        "num_ids_4": 150
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nwill_it_fly(palindrome_list, k) == True\nassert \nwill_it_fly(not_palindrome_list, k) == False\n\nprint('You passed the test!')\nprint(\"Congratulations!\")",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nsmallest_change([1, 1, 1, 1, 1]) == 0\nsmallest_change([1, 1, 1, 1, 1, 1]) == 0\nsmallest_change([1, 1, 1, 1, 1, 1, 1]) == 1\nsmallest_change([1, 1, 1, 1, 1, 2, 1]) == 3\nsmallest_change([1, 1, 1, 2, 1, 1]) == 3\nsmallest_change([1, 1, 1, 2, 2, 1]) == 3\nsmallest_change([1, 1, 1, 2, 3, 1]) == 3\nsmallest_change([1, 1, 1, 2, 3, 2]) == 3\nsmallest_change([1, 2, 1, 1, 1]) == 3",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(smallest_change([2,3,1,2,1,2]))\nprint(smallest_change([1,2,3,1,1]))\nprint(smallest_change([1,3,5,4,2]))\nprint(smallest_change([1,3,2,1]))\nprint(smallest_change([1,2,1,1]))\nprint(smallest_change([3,2,1,3,4,2]))\nprint(smallest_change([3,2,1,3])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_change([1,2,3,2,1]) == 0, \"wrong\"\nassert     smallest_change([1,3,2,2,1]) == 3, \"wrong\"\nassert     smallest_change([1,2,3,2,1,4,5]) == 2, \"wrong\"\n",
        "num_ids_2": 48,
        "num_ids_4": 76
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlst1 = ['a','b','c']\nlst2 = ['b','c','a']\nlst3 = ['b','c','a','d','e']\nassert total_match(lst1, lst2) == lst2\nassert total_match(lst2, lst1) == lst2\nassert total_match(lst3, lst2) == lst3\nassert total_match(lst1, lst3) == lst2\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     total_match(['a','b','c','d','e'],['d','e','f']) == ['d','e','f'], 'Wrong output'\nassert     total_match(['a','b','c'],['d','e','f']) == ['c'], 'Wrong output'\nassert     total_match(['a','b','c','d','e','f','g'],['d','e','f']) == ['c','d','e','f','g'], 'Wrong output'\n\nprint('All test cases passed'",
        "num_ids_2": 74,
        "num_ids_4": 123
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(total_match(['abcd','efgh','ijkl','mnop'],['abcd','efgh','ijkl','mnop','qrst']))\nprint(total_match(['abcd','efgh','ijkl','mnop'],['abcd','efgh','ijkl']))\nprint(total_match(['abcd','efgh','ijkl','mnop'],['abcd']))\nprint(total_match(['abcd','efgh','ijkl','mnop'],[]))\nprint(total_match([],['abcd','efgh','ijkl','mnop']))\nprint(total_match([],[]))\n\n'''\nEXERCISE:\n\nTo change the function so that it is able to handle different case\nin input strings, update the function name.\n\nThis code has bugs, please fix the bugs and then run the code again:\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     total_match(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e']\nassert     total_match(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     total_match(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'e']\n",
        "num_ids_2": 122,
        "num_ids_4": 183
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # if total_match([3,4,5,6],[1,2,3,4]) == [1,2,3,4]\n    #     print(\"OK\")\n    # else:\n    #     print(\"Not OK\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     total_match([\"parrot\", \"kitten\"], [\"parrot\", \"kitten\"]) == \nassert     total_match([\"parrot\", \"kitten\"], [\"tiger\", \"koala\"]) == \nassert     total_match([\"parrot\", \"koala\"], [\"parrot\", \"koala\"]) == \nassert     total_match([\"parrot\", \"koala\"], [\"parrot\", \"koala\"]) == \nassert total_match([\"tiger\", \"koala\"], [\"tiger\", \"koala\"]) == \n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntotal_match([1,2,3],[2,3,4]) == [1,2,3]\nassert total_match([1,2,3,4],[2,3,4]) == []\nassert total_match([1,2,3,4],[1,2,3,4]) == []\n\nprint(\"Congratulations! Your total_match function is correct.\")\n\n'''\nTest your code by un-commenting the line(s) below.\nNote: Do not modify the line(s) below.\n'''",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_multiply_prime(7) == True\n    is_multiply_prime(19) == True\n    is_multiply_prime(10) == False\n    is_multiply_prime(723) == False\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(0) == False\nassert is_multiply_prime(6) == True\nassert is_multiply_prime(10) == True\nassert is_multiply_prime(25) == True\nassert is_multiply_prime(100) == False\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(2) == True\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == True\nassert     is_multiply_prime(5) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(5) == False, \"is_multiply_prime(5) should be False\"\nassert     is_multiply_prime(7) == True, \"is_multiply_prime(7) should be True\"\nassert     is_multiply_prime(3) == True, \"is_multiply_prime(3) should be True\"\n",
        "num_ids_2": 62,
        "num_ids_4": 93
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('All tests have been passed')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(7) == True\nassert     is_multiply_prime(15) == True\nassert     is_multiply_prime(12) == False\nassert     is_multiply_prime(10) == False\nassert     is_multiply_prime(17) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(5) == True, 'is_multiply_prime(5) should return True.'\nassert     is_multiply_prime(45) == False, 'is_multiply_prime(45) should return False.'\nassert     is_multiply_prime(50) == False, 'is_multiply_prime(50) should return False.'\nassert     is_multiply_prime(100) == True, 'is_multiply_prime(100) should return True.'\nassert     is_multiply_prime(0) == True, 'is_multiply_prime(0) should return True.'\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(3) == True, \"Wrong\"\nassert     is_multiply_prime(6) == False, \"Wrong\"\nassert     is_multiply_prime(9) == False, \"Wrong\"\nassert     is_multiply_prime(11) == False, \"Wrong\"\nassert     is_multiply_prime(9000) == False, \"Wrong\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_simple_power(1, 1) == True\nis_simple_power(1, 2) == False\nis_simple_power(1, 4) == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(0, 3) == False\nassert     is_simple_power(1, 3) == False\nassert     is_simple_power(2, 3) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_simple_power(3, 2) == True\nassert     is_simple_power(7, 2) == False\nassert     is_simple_power(10, 2) == False\nassert     is_simple_power(10, 3) == False\nassert     is_simple_power(10, 10) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_simple_power(x=3, n=5) == True\nassert     is_simple_power(x=8, n=2) == False\nassert     is_simple_power(x=4, n=3) == True\nassert     is_simple_power(x=1, n=6) == False\nassert     is_simple_power(x=12, n=4) == True\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(1, 1) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(3, 1) == False\nassert     is_simple_power(3, 2) == False\nassert     is_simple_power(4, 2) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    is_simple_power(2, 2) == True\n    is_simple_power(2, 4) == False\n    is_simple_power(3, 2) == True\n    is_simple_power(4, 2) == False\n    is_simple_power(1, 3) == True\n    is_simple_power(2, 3) == False\n    is_simple_power(4, 3) == False\n    is_simple_power(4, 4) == True\n    is_simple_power(2, 3) == False\n    is_simple_power(2, 4) == False\n    is_simple_power(4, 3) == False\n    is_simple_power(4, 4) == True\n    is_simple_power(2, 3) == False\n    is_simple_power(2, 4) == False\n    is_simple_power(4, 3) == False\n    is_simple_power(4, 4) == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not iscube(5)\nassert not iscube(3)\nassert iscube(1)\nassert iscube(9)",
        "num_ids_2": 11,
        "num_ids_4": 26
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef is_even_1(n):\n    '''\n    Write a function that takes an integer and returns True \n    if it is a multiple of 2.\n    '''\n    pass\n\nassert \n\n\ndef is_even_2(n):\n    '''\n    Write a function that takes an integer and returns True \n    if it is a multiple of 4.\n    '''\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert iscube(1) == False\nassert iscube(3) == False\nassert iscube(12) == True\nassert iscube(25) == True\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('\\n')\nprint('#' * 25)\nprint('Testing the function \"is_cube(a)\":')\nprint('#' * 25)\n\nprint('Pass' if is_cube(2) else 'Fail')\nprint('Pass' if is_cube(3) else 'Fail')\nprint('Pass' if not is_cube(4) else 'Fail')\nprint('Pass' if is_cube(27) else 'Fail')\nprint('Pass' if not is_cube(0) else 'Fail')\nprint('Pass' if not is_cube(-1) else 'Fail')\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncube = iscube(3)\nassert cube == False\n\ncube = iscube(2)\nassert cube == True\n",
        "num_ids_2": 8,
        "num_ids_4": 13
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \niscube(1) == True\niscube(2) == True\niscube(3) == False\niscube(4) == True\niscube(5) == False\niscube(6) == True\niscube(7) == True\niscube(8) == False\niscube(9) == False\niscube(10) == True\niscube(11) == False\niscube(0) == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert iscube(12) == False\nassert iscube(18) == False\nassert iscube(27) == True\nassert iscube(64) == True",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     iscube(18) == False, \"Should be False\"\nassert     iscube(15) == True, \"Should be True\"\nassert     iscube(36) == True, \"Should be True\"\nassert     iscube(27) == True, \"Should be True\"\nassert     iscube(9) == False, \"Should be False\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     iscube(16) == True, '17 is not a cube!'\nassert     iscube(12) == False, '12 is not a cube!'\nassert     iscube(0) == True, '0 is a cube!'\n\nprint('All tests passed'",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhex_key('B00B') == 2\n\nhex_key('D000') == 3\n\nhex_key('E00E') == 4\n\nhex_key('F00F') == 5\n\nhex_key('C00C') == 6\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    # input\n    hex_str = \"FDFD\"\n    \n    # process\n    count = hex_key(hex_str)\n    \n    # output\n    print(count)\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     hex_key('AC') == 0\nassert     hex_key('AB') == 1\nassert     hex_key('ABC') == 2\nassert     hex_key('ABCD') == 2\nassert     hex_key('ABCDE') == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     hex_key('2') == 3\nassert hex_key('3') == 5\nassert hex_key('5') == 7\nassert hex_key('7') == 11\nassert hex_key('B') == 13\n",
        "num_ids_2": 21,
        "num_ids_4": 41
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hex_key('F') == 0\nassert     hex_key('FA') == 0\nassert     hex_key('FB') == 0\nassert     hex_key('FC') == 0\nassert     hex_key('FD') == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     hex_key(\"F8\") == 1\nassert hex_key(\"AB\") == 1\nassert hex_key(\"BC\") == 1\nassert hex_key(\"CC\") == 1\nassert hex_key(\"DA\") == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string representing a binary number in the form of '0b' or '1b', and your task\n    is to convert it to decimal. The function should return a string, with each character representing a decimal\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('Test case passed!')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    '00001' == decimal_to_binary(42)\n    '101010' == decimal_to_binary(9678)\n    '100010' == decimal_to_binary(34)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(5) == '101'\nassert     decimal_to_binary(6) == '111'\nassert     decimal_to_binary(9) == '1101'\nassert     decimal_to_binary(10) == '1001'\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(20) == '10100'\nassert     decimal_to_binary(14) == '11010'\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef decimal_to_binary(num):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(1) == 'd'\nassert     decimal_to_binary(5) == 'b'\nassert     decimal_to_binary(10) == 'a'\nassert     decimal_to_binary(10**4) == 'd'\nassert     decimal_to_binary(10**5) == 'b'\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(3) == '01', 'decimal_to_binary() should return \"01\" for decimal = 3'\nassert     decimal_to_binary(4) == '00', 'decimal_to_binary() should return \"00\" for decimal = 4'\nassert     decimal_to_binary(5) == '11', 'decimal_to_binary() should return \"11\" for decimal = 5'\nassert     decimal_to_binary(7) == '111', 'decimal_to_binary() should return \"111\" for decimal = 7'\nassert     decimal_to_binary(8) == '10000', 'decimal_to_binary() should return \"10000\" for decimal = 8'\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(decimal_to_binary(1234))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(2) == '1101'\nassert     decimal_to_binary(8) == '1001'\nassert     decimal_to_binary(10) == '1010'\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_happy('a') == True, '\"a\" is a single letter!'\nassert     is_happy('aa') == False, '\"aa\" is not a single letter!'\nassert     is_happy('aaa') == False, '\"aaa\" is not a single letter!'\nassert     is_happy('aaaabb') == False, '\"aaaabb\" is not a single letter!'\nassert     is_happy('bbbbbbbbbbbb') == False, '\"bbbbbbbbbbbb\" is not a single letter!'\n",
        "num_ids_2": 43,
        "num_ids_4": 89
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_happy(\"ulwll\")\nassert is_happy(\"abc\")\nassert is_happy(\"abcba\")\nassert is_happy(\"ghtfftnf\")\n",
        "num_ids_2": 14,
        "num_ids_4": 31
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(is_happy('ah'))\nprint(is_happy('aa'))\nprint(is_happy('aaa'))\nprint(is_happy('aaaa'))\nprint(is_happy('aaabc'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"Checking\")\nprint(is_happy(a))\n\nprint(\"Checking\")\nprint(is_happy(b))\n\nprint(\"Checking\")\nprint(is_happy(c))\n\nprint(\"Checking\")\nprint(is_happy(d))\n\nprint(\"Checking\")\nprint(is_happy(e))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade(['4.0', '4.0', '4.0', '4.0', '4.0', '3.7', '4.0', '4.0', '4.0']) == ['A+', 'A+', 'A+', 'A+', 'A+', 'A-', 'A+', 'A+', 'A+']\n",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_gpas(grades):\n    \"\"\"Returns the list of GPA numbers from the grades. \n    No change required.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([\"A+\", \"A-\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"]) == [\"A+\",\"A-\",\"A+\",\"A-\",\"B+\",\"B+\",\"B-\",\"C+\",\"C+\",\"C-\",\"D+\",\"D+\",\"D-\",\"D-\",\"E\",\"E\"]\nassert numerical_letter_grade([\"A+\", \"A-\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"]) == [\"A+\",\"A-\",\"A+\",\"A-\",\"B+\",\"B+\",\"B-\",\"C+\",\"C+\",\"C-\",\"D+\",\"D+\",\"D-\",\"D-\",\"E\",\"E\"]\n\nassert numerical_letter_grade([\"A+\", \"A-\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"]) == [\"A+\",\"A-\",\"A+\",\"A-\",\"B+\",\"B+\",\"B-\",\"C+\",\"C+\",\"C-\",\"D+\",\"D+\",\"D-\",\"D-\",\"E\",\"E\"]",
        "num_ids_2": 225,
        "num_ids_4": 336
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0,]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n",
        "num_ids_2": 112,
        "num_ids_4": 112
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0]) == 'A+'\nassert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == 'A+'\nassert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == 'A+'\nassert     numerical_letter_grade([4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]) == 'A+'\n\nprint(\"Congratulations! You passed all the tests!\")",
        "num_ids_2": 76,
        "num_ids_4": 168
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([3.8, 4.0, 4.0])     == \"A+\", \"incorrect function\"\nassert     numerical_letter_grade([3.8, 4.0, 4.0])     == \"A\", \"incorrect function\"\nassert     numerical_letter_grade([3.8, 4.0, 4.0])     == \"A-\", \"incorrect function\"\nassert     numerical_letter_grade([3.8, 4.0, 4.0])     == \"B+\", \"incorrect function\"\nassert     numerical_letter_grade([3.8, 4.0, 4.0])     == \"B\", \"incorrect function\"\n",
        "num_ids_2": 67,
        "num_ids_4": 135
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert prime_length(\"5\") == True\nassert prime_length(\"15\") == True\nassert prime_length(\"5.4\") == False\n",
        "num_ids_2": 13,
        "num_ids_4": 35
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert prime_length(\"was it a car or a cat I saw\") == True\nassert prime_length(\"it was a car or a cat I saw\") == False\nassert prime_length(\"it was a cat or a car I saw\") == True\nassert prime_length(\"it was a cat or a rat I saw\") == False\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_primes(number):\n    \"\"\"Write a function that takes a positive integer and returns a list of\n    prime numbers that are smaller than the number provided.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_of_digits(string):\n    \"\"\"Write a function that takes a string and returns the sum of the digits\n    in the string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prime_length(\"amazing\") == True\nassert     prime_length(\"weird\") == False\nassert     prime_length(\"not prime\") == False\n",
        "num_ids_2": 24,
        "num_ids_4": 36
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_length('abc') == False\nassert     prime_length('abd') == True\nassert     prime_length('abcd') == True\n\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \"\"\"\n    pass\n",
        "num_ids_2": 23,
        "num_ids_4": 35
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_length(\"1\") == True, \\\n\"The string '1' has length 1 and is prime\"\nassert     prime_length(\"2\") == False, \\\n\"The string '2' has length 2 and is not prime\"\nassert     prime_length(\"3\") == True, \\\n\"The string '3' has length 3 and is prime\"\nassert     prime_length(\"4\") == False, \\\n\"The string '4' has length 4 and is not prime\"\nassert     prime_length(\"7\") == True, \\\n\"The string '7' has length 7 and is prime\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     starts_one_ends(6) == 3\nassert     starts_one_ends(1) == 1\nassert     starts_one_ends(0) == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 2\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         starts_one_ends(4) == 3, \\\n                \"Wrong result for n = 4\"\nassert         starts_one_ends(7) == 5, \\\n                \"Wrong result for n = 7\"\nassert         starts_one_ends(11) == 10, \\\n                \"Wrong result for n = 11\"\nassert         starts_one_ends(123) == 3, \\\n                \"Wrong result for n = 123\"\nassert         starts_one_ends(1234) == 4, \\\n                \"Wrong result for n = 1234\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(starts_one_ends(2)) == 2\nassert starts_one_ends(3) == 1\nprint(starts_one_ends(4)) == 1\nprint(starts_one_ends(5)) == 1\nprint(starts_one_ends(6)) == 2\nprint(starts_one_ends(7)) == 1\nprint(starts_one_ends(8)) == 1\nprint(starts_one_ends(9)) == 1\nprint(starts_one_ends(10)) == 2\nprint(starts_one_ends(11)) == 2\nprint(starts_one_ends(12)) == 2\nprint(starts_one_ends(13)) == 1\nprint(starts_one_ends(14)) == 2\nprint(starts_one_ends(15)) == 3\nprint(starts_one_ends(16)) == 2\nprint(starts_one_ends(17)) == 2\nprint(starts_one_ends(18)) == 2\nprint(starts_one_ends(19)) == 3\nprint(starts_one_ends(20)) == 4",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    assert starts_one_ends(1) == 1\n    assert starts_one_ends(2) == 1\n    assert starts_one_ends(3) == 2\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 3\nassert starts_one_ends(3) == 5\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not starts_one_ends(5) == 1\nassert starts_one_ends(2) == 1\nassert starts_one_ends(1) == 1\nassert starts_one_ends(0) == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 40
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     starts_one_ends(3) == 2\nassert     starts_one_ends(10) == 6\nassert     starts_one_ends(5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     starts_one_ends(3) == 4\nassert     starts_one_ends(5) == 12\nassert     starts_one_ends(7) == 22\nassert     starts_one_ends(9) == 44\nassert     starts_one_ends(11) == 55\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solve(10) == '0b1010'\nassert     solve(17) == '0b1101'\nassert     solve(18) == '0b1110'\nassert     solve(999) == '0b11101'\nassert     solve(100) == '0b100'\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nimport itertools\nfrom math import log2, sqrt\n\ndef sieve_of_eratosthenes(n):\n    \"\"\"Given a positive integer n, return all the primes up to n.\n    \n    Variables:\n        @n integer\n             Constraints: 0 \u2264 n \u2264 1000000.\n    Output:\n         a list of primes\n    \"\"\"\n    pass\n\ndef test_sieve_of_eratosthenes():\n    assert sieve_of_eratosthenes(5) == [2, 3, 5]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    for N in (0,1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,\n               21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,\n               36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,\n               51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,\n               66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,\n               81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,\n               96,97,98,99,100,101,102,103,104,105,106,107,108,109,\n               110,111,112,113,114,115,116,117,118,119,120,121,122,\n               123,124,125,126,127,128,129,130,131,132,133,134,135,\n               136,137,138,139,140,141,142,143,144,145,146,147,148,\n               149,150,151,152,153,154,155,156,157,158,159,160,161,\n               162,163,164,165,166,167,168,169,170,171,172,173,174,\n               175,176,177,178,179,180,181,182,183,184,185,186,187,\n               188,189,190,191,192,193,194,195,196,197,198,199,200,\n               201,202,203,204,205,206,207,208,209,210,211,212,213,\n               214,215,216,217,218,219,220,221,222,223,224,225,226,\n               227,228,229,230,231,232,233,234,235,236,237,238,239,\n               240,241,242,243,244,245,246,247,248,249,250,251,252,\n               253,254,255,256,257,258,259,260,261,262,263,264,265,\n               266,267,268,269,270,271,272,273,274,275,276,277,278,\n               279,280,281,282,283,284,285,286,287,288,289,290,291,\n               292,293,294,295,296,297,298,299,300,301,302,303,304,\n               305,306,307,308,309,310,311,312,313,314,315,316,317,\n               318,319,320,321,322,323,324,325,326,327,328,329,330,\n               331,332,333,334,335,336,337,338,339,340,341,342,343,\n               344,345,346,347,348,349,350,351,352,353,354,355,356,\n               357,358,359,360,361,362,363,364,365,366,367,368,369,\n               370,371,372,373,374,375,376,377,378,379,380,381,382,\n               383,384,385,386,387,388,389,390,391,392,393,394,395,\n               396,397,398,399,400,401,402,403,404,405,406,407,408,\n               409,410,411,412,413,414,415,416,417,418,419,420,421,\n               422,423,424,425,426,427,428,429,430,431,432,433,434,\n               435,436,437,438,439,440,441,442,443,444,445,446,447,\n               448,449,450,451,452,453,454,45",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert solve(1) == '1'\nassert solve(2) == '10'\nassert solve(3) == '11'\nassert solve(4) == '100'\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert\n\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 8
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solve(0) == '0'\nassert solve(1) == '1'\nassert solve(10) == '1010'\nassert solve(15) == '101101'\nassert solve(13) == '11100'\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert solve(N) == '11'\nassert solve(N) == '11'\nassert solve(N) == '11'\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve(10) == \"1010\", \"Wrong answer: 10\"\nassert     solve(20) == \"201\", \"Wrong answer: 20\"\nassert     solve(25) == \"10100\", \"Wrong answer: 25\"\nassert     solve(100) == \"1110101\", \"Wrong answer: 100\"\nassert     solve
        "num_ids_2": 39,
        "num_ids_4": 80
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('The sum of all even elements in lst is'+ str(sum(add(lst))))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(add([1,2,3,4,5,6,7,8,9]))\n\n\ndef evens(lst):\n    \"\"\"Return True if all elements of lst are even.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add([1,2,3,4]) == [2,4]\nassert     add([2,4,6,8,10]) == [2,4,6]\nassert     add([1,3,5]) == []\n\n",
        "num_ids_2": 42,
        "num_ids_4": 55
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlst = [5, 6, 9, 8, 2, 1, 7]\nadd(lst) == [5, 7, 9, 2, 4, 1, 6",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add([]) == []\nassert     add([1,2,3]) == [2,4,6]\nassert     add([1,2,3,4,5]) == [2,4,6,8,10]\nassert     add([1,2,3,4,5,6]) == [2,4,6,8,10,12]\nassert     add([1,2,3,4,5,6,7]) == [2,4,6,8,10,12,14]\n",
        "num_ids_2": 27,
        "num_ids_4": 85
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"ehthe quick aqooe jmpb drwe fxofs jmou si kciu\"\nassert     anti_shuffle(\"aabbcc\") == \"aabbc\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"hej dah bv ndvn\") == \"hej dah bv ndn\"\nassert     anti_shuffle(\"\") == \"\"\n",
        "num_ids_2": 62,
        "num_ids_4": 103
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     anti_shuffle('y t o o t') == 'y toot'\nassert     anti_shuffle('x y z x z x e') == 'x z xy zxy e'\nassert     anti_shuffle('a b c d e f') == 'afdcf bbe e'\n\n",
        "num_ids_2": 46,
        "num_ids_4": 70
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(anti_shuffle(\"Hello World!\"))\nprint(anti_shuffle(\"Python is an interpreted, high-level programming language.\"))\nprint(anti_shuffle(\"It is easy to learn and hard to code.\"))\n\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"We are students\") == 'Terr hsst viem sdt aemrs'\nassert anti_shuffle(\"I am a student\") == 'am t aemst r I'\nassert anti_shuffle(\"No one\") == 'No em hno e'\nassert anti_shuffle(\"We are students\") == 'Terr hsst viem sdt aemrs'\nassert anti_shuffle(\"I am a student\") == 'am t aemst r I'\n",
        "num_ids_2": 49,
        "num_ids_4": 93
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"pass\") if anti_shuffle(\"Hello World\") == \"olleH dlrow olleW\" else print(\"fail\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(anti_shuffle('Hi There'), 'HiHERE')\nprint(anti_shuffle('No it is not'), 'No ititnotHNOT')\nprint(anti_shuffle('Cats are smarter than dogs'), 'Cats smarter than dogs')\nprint(anti_shuffle('I am a parrot'), 'I amparrothan')\nprint(anti_shuffle('Yo what up'), 'Yo whatup')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     anti_shuffle(\"true love and war\") == \"trwea ndlw arlv tsr\"\nassert     anti_shuffle(\"supercalifragilisticexpialidocious\") == \"scallfagiidscilisup\"\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    \ndef get_list_of_ranges(lst):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, return list of tuples,\n    sorted by rows in ascending order,\n    and sorted by columns in descending order.\n    Example:\n    >>> get_list_of_ranges([[5,6,7],[1,3,5],[1,5,5]])\n    [(0, 0, 5), (1, 1, 3), (2, 2, 5)]\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlst = [(1,2), (3,1), (5,3), (4,4)]\nx = 2\nres = get_row(lst, x)\nassert len(res) == 1, \"Your function should return 1 row\"\nassert res[0][0] == x, \"Your row should have x\"\nassert res[0][1] > res[0][1], \"Columns of the row should be in ascending order\"\n",
        "num_ids_2": 20,
        "num_ids_4": 65
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_row([[1, 2, 3, 4], \n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], 1) ==  [(1, 0), (1, 1), (1, 2), (1, 3)]\nassert get_row([[1, 2, 3, 4], \n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], 0) ==  [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert get_row([[1, 2, 3, 4], \n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], 10) ==  [(4, 1), (4, 2), (4, 3), (4, 4)]\nassert get_row([[1, 2, 3, 4], \n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], 2) ==  [(2, 0), (2, 1), (2, 2), (2, 3)]\nassert get_row([[1, 2, 3, 4], \n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]], 4) ==  [(5, 1), (5, 2), (5, 3), (5, 4)]\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_row([[1, 2, 3],\n                    [3, 4, 2],\n                    [2, 3, 0],\n                    [3, 4, 2],\n                    [2, 3, 0],\n                    [4, 4, 1]], 0) == [(0, 1), (1, 0), (2, 2), (3, 3)]\nassert get_row([[1, 2, 3],\n                    [3, 4, 2],\n                    [2, 3, 0],\n                    [3, 4, 2],\n                    [2, 3, 0],\n                    [4, 4, 1]], 1) == [(0, 3), (1, 2), (2, 1), (3, 0), (4, 4)]\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([[1, 5, 7, 9, 11, 13], [2, 6, 8, 10, 12, 14], [3, 7, 9, 11, 13, 15]], (0, 4)),\n        ([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], (2, 4)),\n        ([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], (1, 3)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (0, 4)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (2, 3)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (0, 0)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (3, 0)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (1, 2)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (2, 2)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (3, 3)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (4, 3)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (4, 4)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (5, 2)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (6, 1)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (7, 0)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (0, 6)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (2, 1)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (3, 0)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (4, 2)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (5, 1)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (6, 0)),\n        ([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], (7, 1)),\n        ([[1, 2, 3, 4], [5, 6, ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_row([[1,2],[1,2]], 1) == [(0, 0), (1, 0), (1, 1)]\nassert     get_row([[1,2,3,4],[1,2,3,4]], 1) == [(0, 0), (1, 1), (2, 0), (2, 1), (2, 2), (2, 3)]\nassert     get_row([[1,2,3],[2,3,1]], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3)]\nassert     get_row([[1,2,3],[2,3,1], [1,2,3], [1,2,3]], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3)]\nassert     get_row([[1,2,3],[1,2,3], [1,2,3]], 1) == [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (2, 3)]\n",
        "num_ids_2": 93,
        "num_ids_4": 215
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_row(None, -1) == None\nassert     get_row([], 0) == []\nassert     get_row([[1, 2, 3]], 1) == [(1, 0), (1, 1)]\nassert     get_row([[1, 2, 3]], 2) == [(0, 0), (0, 1), (1, 0), (1, 1)]\nassert     get_row([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)]\n",
        "num_ids_2": 26,
        "num_ids_4": 92
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_row(\n        [[1,2,3],[2,2,3],[2,3,3],[1,2,3]], 1\n        ) ==     [(0,0),(1,0),(2,0),(2,1)]\nassert get_row(\n        [[2,2,2],[2,2,2],[2,2,2]], 1\n        ) ==     [(0,0),(1,0),(2,0)]\n\ndef get_row_b(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 13,
        "num_ids_4": 13
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_row([(1, 1), (2, 2), (3, 3)], 0) == [(0, 0), (0, 1), (0, 2)]\nassert     get_row([(1, 1), (2, 2), (3, 3)], 1) == [(1, 0), (1, 1), (1, 2)]\nassert     get_row([(1, 1), (2, 2), (3, 3)], 2) == [(2, 0), (2, 1), (2, 2)]\nassert     get_row([(1, 1), (2, 2), (3, 3)], 3) == [(3, 0), (3, 1), (3, 2)]\nassert     get_row([(1, 1), (2, 2), (3, 3)], 4) == []\n",
        "num_ids_2": 82,
        "num_ids_4": 164
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\nprint sort_array([1, 3, 2, 4, 5]) == [1, 2, 3, 4, 5]\nprint sort_array([4, 5, 1, 2, 3]) == [1, 2, 3, 4, 5]\nprint sort_array([4, 5, 1, 2, 3, 0]) == [0, 1, 2, 3, 4, 5]\nprint sort_array([]) == []\nprint sort_array([-5, -1, -4, -3, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1, -3, -4, -5]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([1, 6, 3, 7]) == [1, 3, 6, 7]\nassert     sort_array([7, 6, 5, 4]) == [4, 5, 6, 7]\nassert     sort_array([7, 6, 5, 4]) == [4, 5, 6, 7]\nassert     sort_array([1, 2, 4, 5]) == [1, 2, 4, 5]\nassert     sort_array([3, 1, 7, 2]) == [1, 2, 3, 7]\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([1]) == [1]\nassert     sort_array([1, 1]) == [1, 1]\nassert     sort_array([1, 1, 1]) == [1, 1, 1]\nassert     sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\n",
        "num_ids_2": 23,
        "num_ids_4": 61
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([10, 8, 2, 4, 9, 1, 3, 7, 6]) == sorted([1, 2, 3, 4, 6, 7, 9, 10, 8])\nassert     sort_array([5, 8, 7, 3, 5, 4, 7, 6]) == sorted([7, 5, 6, 5, 4, 3, 7, 8])\nassert     sort_array([1, 2, 3, 4]) == sorted([1, 2, 3, 4])\nassert     sort_array([1, 1, 1, 1]) == sorted([1, 1, 1, 1])\nassert     sort_array([]) == sorted([])\n",
        "num_ids_2": 88,
        "num_ids_4": 140
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([2,3,1,2,1]) == [1,1,2,2,3]\nassert     sort_array([3,2,1,2,1]) == [1,1,2,2,3]\nassert     sort_array([3,1,2,1]) == [1,1,2,3]\nassert     sort_array([3,1]) == [1,3]\nassert     sort_array([3,3,3]) == [3,3,3]\n",
        "num_ids_2": 58,
        "num_ids_4": 100
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([]) ==    []\nassert     sort_array([3]) ==    [3]\nassert     sort_array([3,3,3]) ==    [3,3,3]\nassert     sort_array([3,3,3,3]) ==    [3,3,3,3]\nassert     sort_array([1,1,1,2]) ==    [1,1,1,2]\n",
        "num_ids_2": 25,
        "num_ids_4": 73
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1,2,3,4,5,6,7,8,9]) == sorted([1,2,3,4,5,6,7,8,9])\nassert     sort_array([1,2,3,4,5,6,7,8,9,10]) == sorted([1,2,3,4,5,6,7,8,9,10])\nassert     sort_array([1,2,3,4,5,6,7,8,9,10,11]) == sorted([1,2,3,4,5,6,7,8,9,10,11])\nassert     sort_array([1,2,3,4,5,6,7,8,9,10,11,12]) == sorted([1,2,3,4,5,6,7,8,9,10,11,12])\nassert     sort_array([1,2,3,4,5,6,7,8,9,10,11,12,13]) == sorted([1,2,3,4,5,6,7,8,9,10,11,12,13])\n",
        "num_ids_2": 96,
        "num_ids_4": 208
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([1,2,3,4]) ==    [1,2,3,4], sort_array([1,2,3,4])\nassert     sort_array([1,2,3,4,5]) ==    [1,2,3,4,5], sort_array([1,2,3,4,5])\nassert     sort_array([4,3,2,1]) ==    [1,2,3,4], sort_array([4,3,2,1])\nassert     sort_array([1,4,5,3]) ==    [1,3,4,5], sort_array([1,4,5,3])\n",
        "num_ids_2": 82,
        "num_ids_4": 158
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     encrypt('hello') == 'khljrgv'\nassert encrypt('hello') == 'oohwgv'\nassert encrypt('hello') == 'ihghlj'\nassert encrypt('hello') == 'gvohih'\n",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert encrypt('hello') == 'epwc', 'Something went wrong.'\n    assert encrypt('world') == 'rlwc', 'Something went wrong.'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \ndef main():\n    s = \"GeeksforGeeks\"\n    print(encrypt(s))\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encrypt('') == ''\nassert     encrypt('abc') == 'def'\nassert     encrypt('abcdefghijklmnopqrstuvwxyz') == 'zghvklnrqfuiopwmtdcyxba'\n",
        "num_ids_2": 22,
        "num_ids_4": 61
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    encrypt(\"hello\") == \"hhllooo\"\n    encrypt(\"\") == \"\"\n    encrypt(\"notencrypted\") == \"notencrypted\"\n    \n    encrypt(\"hello\") == \"hhllooo\"\n    encrypt(\"Hello\") == \"hhllooo\"\n    encrypt(\"hello world\") == \"hhllooo\"\n    encrypt(\"hello world\") == \"hhllooo\"\n    encrypt(\"hello world\") == \"hhllooo\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(encrypt(\"hello\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert next_smallest([1, 2, 2]) == 1\nassert next_smallest([3, 1, 2, 2, 3]) == 1\nassert next_smallest([4, 4, 4, 1, 2, 4]) == 2\nassert next_smallest([1, 2, 3, 4]) is None\n",
        "num_ids_2": 18,
        "num_ids_4": 58
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    \n    # Your code here\n    \n    return Non",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest([10, 2, 1, 3]) == 1\nassert     next_smallest([10, -5, 1, 3]) == -5\nassert     next_smallest([10, 10, 1, 3]) == None\nassert     next_smallest([10, 10, 10, 1, 3]) == 10\nassert     next_smallest([-10, -5, -1, -3]) == -5\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert next_smallest([4, 2, 5, 6, 7]) == 2\nassert next_smallest([1,2,3,4,5,6,7]) == 2\nassert next_smallest([4, 6, 7, 1]) == 1\nassert next_smallest([2, 4, 6, 7, 1]) == 4\n",
        "num_ids_2": 22,
        "num_ids_4": 62
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest([2, 3, 4, 6]) == 2\nassert     next_smallest([4, 2, 6, 1]) == 1\nassert     next_smallest([4, 2, 6, 1, 5]) == 1\nassert     next_smallest([2, 2, 2, 2, 3, 3, 5]) == 3\nassert     next_smallest([2, 2, 3, 1]) == None\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert next_smallest([1,2,3,4,5,6]) == 3\nassert next_smallest([1,2,3,4,5,6]) == 3\nassert next_smallest([1,2,3,4,5,6]) == 4\n",
        "num_ids_2": 24,
        "num_ids_4": 66
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(is_bored(\"I.Really?... I can't believe it!\"))\n    print(is_bored(\"I...?...I...!?!?! I...!?\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_bored('I') == 1\nassert is_bored('I!') == 1\nassert is_bored('I.!') == 1\nassert is_bored('I...') == 1\nassert is_bored('I?.!') == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\"\"\"\n1. Write a Python program to count the number of vowels in a string. \nSample data : 'Python is very important'\nExpected Output : 5\n\"\"\"\n\ndef count_vowels(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of vowels in a string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_bored(\"I am bored.\") == 1\nassert     is_bored(\"I.am.bored.\") == 1\nassert     is_bored(\"I.am?bored.\") == 1\nassert     is_bored(\"I.am?bored.?\") == 1\nassert     is_bored(\"I.am?bored!.\") == 1\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    assert is_bored('I.like.this.sentence') == 1, 'I.like.this.sentence is not bored.'\n    assert is_bored('I.like.this.sentence.') == 1, 'I.like.this.sentence is not bored.'\n    assert is_bored('I.like.this.sentence!') == 1, 'I.like.this.sentence is not bored.'\n    assert is_bored('I.like.this.sentence?') == 1, 'I.like.this.sentence is not bored.'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nany_int(1, 2, 2) == True\nany_int(1, 2, 3) == False\nany_int(1, 2.0, 2) == False\nany_int(1, 2, 2.0) == False\nany_int(1.0, 2, 2) == False\nany_int(1.0, 2, 2.0) == True\nany_int(1.0, 2, 2.0) == True\nany_int(1.5, 2, 2) == False\nany_int(1.5, 2, 2.0) == True\nany_int(1, 2, 2.0) == True\nany_int(1.5, 2, 2.0) == True\nany_int(1, 2, 2.0) == True\nany_int(1.5, 2, 2.0) == True\nany_int(1.5, 2, 2.0) == True\nany_int(1, 2.0, 2.0) == False\nany_int(1.5, 2, 2.0) == False\nany_int(1, 2, 2.0) == False\nany_int(1.5, 2, 2.0) == False\nany_int(1.5, 2.0, 2.0) == True\nany_int(1, 2.0, 2.0) == False\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True\nany_int(1.5, 2.0, 2.0) == True",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(any_int(1, 2, 3) == False)\nprint(any_int(1, 1, 1) == True)\nprint(any_int(0, 0, 0) == True)\nprint(any_int(1, 2, 3) == True)\nprint(any_int(2, 2, 2) == True)\nprint(any_int(3, 3, 3) == True)\nprint(any_int(4, 4, 4) == True)\nprint(any_int(4, 5, 6) == True)\nprint(any_int(6, 4, 4) == False)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 4) == True, \"First\"\nassert     any_int(5, 5, 5) == True, \"Second\"\nassert     any_int(6, 4, 7) == True, \"Third\"\nassert     any_int(4, 6, 7) == False, \"Fourth\"\nassert     any_int(4, 6, 4) == False, \"Fourth\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nany_int(1, 2, 3) == True\nany_int(1, 2, 1) == True\nany_int(3, 3, 3) == True\nany_int(1, 1, 1) == False\nany_int(1.1, 2.2, 3.3) == False\nany_int(-1, 0, 1) == True\nany_int(-1, 0, -1) == True\nany_int(-1, -2, -3) == True\nany_int(-1, -2, 1) == False\nany_int(-3, -3, -3) == False\nany_int(0, 0, 0) == True\nany_int(0, 0, -1) == False\nany_int(0, 0, 1) == False\nany_int(0, 1, 1) == False\nany_int(1, 0, 1) == True\nany_int(1, 1, 1) == False\nany_int(1, 1, 0) == False\nany_int(1, 0, 0) == False\nany_int(-1, -1, -1) == True\nany_int(-1, -1, 0) == True\nany_int(-1, -1, 1) == False\nany_int(-1, 0, 0) == False\nany_int(-1, 0, -1) == True\nany_int(-1, 1, -1) == False\nany_int(-1, 1, 0) == False\nany_int(-1, 1, 1) == True\nany_int(-1, 0, 1) == False\nany_int(-3, -3, -3) == True\nany_int(-3, -3, 1) == False\nany_int(-3, -3, 0) == False\nany_int(-3, 1, 1) == False\nany_int(-3, 1, 0) == False\nany_int(-3, 0, 0) == True\nany_int(0, -3, 1) == False\nany_int(0, -3, 0) == True\nany_int(0, 1, 1) == True\nany_int(0, 1, 0) == False\nany_int(0, 0, 0) == True\nany_int(1, 0, 0) == False\nany_int(1, 0, -1) == False\nany_int(1, 1, 0) == False\nany_int(1, 1, -1) == True\nany_int(1, 1, -2) == False\nany_int(1, 1, 2) == False\nany_int(1, 0, 1) == False\nany_int(1, 0, 0) == False\nany_int(0, 0, 0) == True\nany_int(0, 0, -1) == False\nany_int(0, 0, 1) == False\nany_int(0, -1, 1) == False\nany_int(0, -1, 0) == False\nany_int(0, -2, -1) == False\nany_int(0, -2, 1) == True\nany_int(0, -2, 0) == True\nany_int(0, -1, 0) == False\nany_int(0, 1, 1) == True\nany_int(0, 1, 0) == False\nany_int(0, 2, 1) == True\nany_int(0, 2, 0) == False\nany_int(1, 1, 1) == True\nany_int(1, 1, 0) == False\nany_int(1, 0, 0) == True\nany_int(1, 0, -1) == True\nany_int(1, 0, 1) == True\nany_int(1, -1, -1) == False\nany_int(1, -1, 0) == False\nany_int(1, -1, 1) == False\nany_int(1, -2, -1) == False\nany_int(1, -2, 0) == False\nany_int(1, -2, 1) == True\nany_int(1, -2, 2) == False\nany_int(1, 2, 1) == False\nany_int(1, 2, 0) == False\nany_int(1, 0, 0) == True\nany_int(1, 0, 1) == True\nany",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nany_int(2, 2, 2) == False\nany_int(2, 2, 2.0) == False\nany_int(2, 2, 2.1) == True\nany_int(2, 2.1, 2) == True\nany_int(2, 2.0, 2.1) == True\nany_int(2.1, 2, 2) == True\nany_int(2.1, 2, 2.1) == False\nany_int(2.1, 2.1, 2) == False\nany_int(2.0, 2.1, 2.1) == False\nany_int(2, 2, 2.0) == False\nany_int(2, 2.0, 2.1) == False\nany_int(2, 2, 2.1) == False\nany_int(2.1, 2.0, 2) == False\nany_int(2, 2.1, 2.1) == False\nany_int(2, 2.1, 2.2) == False\nany_int(2.1, 2, 2.1) == False\nany_int(2.0, 2.1, 2.1) == True\nany_int(2.1, 2, 2.1) == True\nany_int(2, 2, 2.1) == False\nany_int(2.1, 2, 2.2) == False\nany_int(2.1, 2.0, 2.1) == False\nany_int(2.1, 2.0, 2.2) == False\nany_int(2.1, 2.1, 2.1) == True\nany_int(2.0, 2.0, 2.1) == True\nany_int(2.0, 2.0, 2.2) == False\nany_int(2, 2.0, 2.1) == False\nany_int(2, 2.0, 2.2) == False\nany_int(2.1, 2.0, 2.1) == False\nany_int(2.1, 2.0, 2.2) == False\nany_int(2.1, 2.1, 2.1) == False\nany_int(2.0, 2.0, 2.1) == False\nany_int(2.0, 2.0, 2.2) == False\nany_int(2.1, 2.0, 2.1) == True\nany_int(2.1, 2.0, 2.2) == True\nany_int(2.1, 2.1, 2.1) == False\nany_int(2.0, 2.1, 2.1) == False\nany_int(2.1, 2.0, 2.2) == False\nany_int(2.1, 2.1, 2.2) == True\nany_int(2.0, 2.1, 2.1) == False\nany_int(2, 2.1, 2.2) == False\nany_int(2.1, 2.0, 2.2) == False\nany_int(2.1, 2.1, 2.2) == False\nany_int(2.0, 2.0, 2.2) == False\nany_int(2.0, 2.1, 2.1) == False\nany_int(2.0, 2.0, 2.2) == False\nany_int(2, 2.0, 2.1) == False\nany_int(2.1, 2, 2.1) == False\nany_int(2.1, 2.1, 2.2) == False\nany_int(2, 2, 2.2) == False\nany_int(2, 2, 2.1) == False\nany_int(2.1, 2.0, 2.2) == True\nany_int(2.1, 2.0, 2.1) == True\nany_int(2.1, 2.1, 2.1) == False\nany_int(2.0, 2.0, 2.1) == False\nany_int(2.1, 2.0, 2.2) == False\nany_int(2.1, 2.0, 2.1) == False\nany_int(2.1, 2.1, 2.1) == True\nany_int(2.0, 2.0",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     any_int(3, 4, 5) == True\nassert     any_int(3, 4, '5') == False\nassert     any_int('3', '4', 5) == False\n\ndef any_float(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    '''\n    pass\n",
        "num_ids_2": 31,
        "num_ids_4": 47
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert decode('HELLO WORLD') == 'hELLO wORLD'\nassert decode('wO rld') == 'WOLRD'\nassert decode('hEllo') == 'hELLO'\nassert decode('QWE') == 'qWE'\n",
        "num_ids_2": 21,
        "num_ids_4": 50
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\"\"\"\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************\n*************************************************************************",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode(\"The quick brown fox jumps over the lazy dog\") == \n\"sihT THE quICk brWoo fxjmps oVEr fOG dOG\"\nassert     encode(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\") == \n\"A,b,c,D,e,f,G,H,i,j,K,l,M,n,o,p,q,r,S,T,U,V,W,X,Y,Z\"",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode('aBC') == 'bCD'\nassert     encode('aBC') == 'bCD'\nassert     encode('aBC') == 'BCD'\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     encode('THE MEAT IS A LITTLE BIT TILLER') == 'to be a little bit tiller'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode('DIGESTS') == 'tsDG'\nassert encode('Consulting') == 'CSCON'\nassert encode('Holloway') == 'HO'",
        "num_ids_2": 31,
        "num_ids_4": 43
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    solution = skjkasdkd([11,2,3,7,4,9,5,8,10])\n    print(solution)\n    assert solution == 36\n    solution = skjkasdkd([14,3,4,5,12,4,5,2,3,1,13,4,3,5,6,3,4,7,2,5,3,3,4,9,8,8,6,4,9,5,2,2,6,5,2,7,8,1,3,1,4,5,7,2,2,5,5,4,8,5,5,5,3,4,8,4,1,6,4,9,1,6,3,7,3,2,5,4,7,8,7,3,2,3,7,6,1,1,1,9,8,2,1,1,1,1,1,2,5,7,7,8,7,9,4,7,9,2,2,6,9,8,7,5,7,4,4,5,4,6,5,7,9,7,7,8,5,9,7,1,1,4,1,1,6,1,7,1,8,1,4,1,8,6,2,8,5,2,4,8,2,8,8,6,3,1,3,1,2,5,7,2,1,2,8,1,5,9,1,2,4,5,3,1,1,4,2,6,5,2,5,2,6,5,7,1,9,1,8,8,8,8,8,2,7,1,9,2,8,2,8,5,1,1,1,2,2,2,3,7,1,3,2,8,3,4,1,1,6,1,3,1,3,8,2,1,1,2,1,4,7,9,6,7,1,1,4,4,7,8,2,1,3,2,4,2,8,7,5,4,4,5,1,4,5,6,2,4,3,2,4,3,9,2,6,3,9,1,8,7,2,3,5,4,3,8,1,2,2,7,3,3,7,6,8,4,5,6,2,4,6,7,2,9,3,8,5,2,1,5,7,1,7,3,1,7,9,6,2,2,9,2,7,3,1,5,7,3,5,4,2,2,4,5,3,1,7,7,8,9,1,9,9,9,2,8,4,8,3,7,5,7,6,3,3,9,7,6,2,1,7,6,3,6,2,1,6,8,4,8,5,5,7,1,5,7,5,9,8,6,1,5,6,7,1,2,1,6,3,7,6,6,3,4,3,2,5,5,6,7,8,7,7,5,7,7,7,7,7,7,8,2,7,7,7,7,4,7,5,8,1,1,4,2,6,1,1,3,1,1,9,1,1,1,2,1,7,5,5,6,7,3,7,2,1,6,5,5,1,7,7,7,6,9,5,5,3,9,5,5,1,9,9,9,5,2,9,3,8,6,3,1,4,3,9,7,1,3,7,7,8,9,7,1,2,9,7,1,5,9,8,8,9,6,8,6,5,2,6,8,9,9,6,1,9,",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     skjkasdkd([]) == 0, \"Wrong answer with input list: []\"\nassert     skjkasdkd([4]) == 4, \"Wrong answer with input list: [4]\"\nassert     skjkasdkd([23,2,3,4]) == 26, \"Wrong answer with input list: [23,2,3,4]\"\nassert     skjkasdkd([43,3,2,3,4]) == 27, \"Wrong answer with input list: [43,3,2,3,4]\"\nassert     skjkasdkd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,44",
        "num_ids_2": 48,
        "num_ids_4": 126
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (skjkasdkd([2, 3, 5, 7, 11, 13, 17]) == 31)\nassert     (skjkasdkd([4, 5, 10, 14, 25, 27]) == 29)\nassert     (skjkasdkd([11, 13, 17, 19, 23, 29]) == 31)\nassert     (skjkasdkd([8, 10, 14, 19, 27]) == 37)\nassert     (skjkasdkd([11, 13, 17, 19, 23, 29, 31]) == 41)\n",
        "num_ids_2": 52,
        "num_ids_4": 100
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     skjkasdkd([2,3,4,5,6,7]) == 21\nassert     skjkasdkd([2,3,4,5,6,8,9]) == 22\nassert     skjkasdkd([2,3,4,5,6,8,9,10]) == 23\n",
        "num_ids_2": 48,
        "num_ids_4": 75
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef skjkasdkd_check(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    # run some tests\n    assert skjkasdkd([20,10,5,4,3,2,1]) == 23\n    assert skjkasdkd_check([20,10,5,4,3,2,1]) == 23\n    print('Hurray! All tests passed')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not \n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint (\"You're almost done, check the correctness!\")\n\nprint(skjkasdkd([2, 3, 4, 5, 6, 7, 8, 9]))\nprint(skjkasdkd([10, 12, 5, 6, 7, 11, 8, 9]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert skjkasdkd([0, 3, 4, 5]) == 15\nassert skjkasdkd([0, 3, 4, 7]) == 20\n",
        "num_ids_2": 21,
        "num_ids_4": 39
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_prime(n):\n    \"\"\"You are given n numbers. Return the largest prime of these.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_dict_case(dict()) == True, \"Wrong case.\"\nassert     check_dict_case(dict(k1='v1', k2='v2')) == False, \"Wrong case.\"\nassert     check_dict_case(dict(k1='v1', k2='V2')) == True, \"Wrong case.\"\nassert     check_dict_case(dict(k1='v1', k2='v2', k3='v3')) == True, \"Wrong case.\"\nassert     check_dict_case(dict(k1='v1', k2='v2', k3='v3', k4='v4')) == False, \"Wrong case.\"\n",
        "num_ids_2": 51,
        "num_ids_4": 121
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({'a': 1}) == False, 'Should return False if the dict is empty.'\nassert     check_dict_case({'A': 1}) == True, 'Should return True if all keys are strings in lower case.'\nassert     check_dict_case({'a': 1, 'A': 1}) == True, 'Should return True if all keys are strings in lower case.'\nassert     check_dict_case({'a': 1, 'a': 1}) == False, 'Should return False if the dict has duplicate keys.'\nassert     check_dict_case({'a': 1, 'A': 1}) == True, 'Should return True if all keys are strings in upper case.'\n",
        "num_ids_2": 57,
        "num_ids_4": 125
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == False, \"Empty Dictionary\"\nassert     check_dict_case({\"x\":1, \"y\":\"2\"}) == True, \"Dictionary containing lower and upper case keys\"\nassert     check_dict_case({\"x\":1, \"y\":2}) == False, \"Dictionary containing lower and upper case keys\"\n\nprint(\"check_dict_case passed!\")\n",
        "num_ids_2": 50,
        "num_ids_4": 82
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_dict_type(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings and all \n    values are integers, else return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"x\":\"y\"}) == False\nassert     check_dict_case({\"x\":\"y\",\"z\":\"t\"}) == False\nassert     check_dict_case({\"x\":\"y\",\"z\":\"t\",\"A\":\"B\"}) == True\nassert     check_dict_case({\"x\":\"y\",\"z\":\"t\",\"A\":\"B\",\"c\":\"d\"}) == False\n",
        "num_ids_2": 29,
        "num_ids_4": 75
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_dict_case({1: \"One\", 2: \"Two\"}) == False\nassert     check_dict_case({1: \"one\", 2: \"Two\"}) == False\nassert     check_dict_case({1: \"One\", 2: \"TWO\"}) == True\nassert     check_dict_case({}) == False\nassert     check_dict_case({\"A\": \"Apple\", \"a\": \"banana\"}) == False\n",
        "num_ids_2": 44,
        "num_ids_4": 79
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == False, \"Empty dictionary\"\nassert     check_dict_case({\"a\":1}) == False, \"Dictionary with only keys\"\nassert     check_dict_case({\"a\":1,\"B\":2}) == True, \"Dictionary with both upper and lower keys\"\nassert     check_dict_case({\"a\":\"1\",\"b\":\"2\"}) == False, \"Dictionary with lower keys\"\nassert     check_dict_case({\"a\":\"1\",\"b\":\"2\"}) == False, \"Dictionary with upper keys\"\n",
        "num_ids_2": 41,
        "num_ids_4": 101
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_dict_case(dict) == False\nassert     check_dict_case({}) == False\nassert     check_dict_case({\"one\": 1, \"Two\": 2, \"three\": 3}) == True\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_up_to(1) == [2]\nassert count_up_to(2) == [2,3]\nassert count_up_to(10) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert count_up_to(10) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n",
        "num_ids_2": 17,
        "num_ids_4": 65
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(count_up_to(1)) == []\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nprint(count_up_to(99)) == []\nprint(count_up_to(10)) == [2, 3, 5, 7]\nprint(count_up_to(100)) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(2) == []\nassert     count_up_to(1) == []\n\ndef get_prime_factors(n):\n    \"\"\"Implement a function that takes a non-negative integer n and returns an array of the prime numbers\n    greater than 1 that divide n.\n    \"\"\"\n    pass\n",
        "num_ids_2": 42,
        "num_ids_4": 55
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert count_up_to(5) == [2, 3, 5]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nassert count_up_to(100000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "num_ids_2": 21,
        "num_ids_4": 876
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_up_to(10) == [2,3,5,7]\nassert count_up_to(100) == [2,3,5,7,11,13,17,19,23,29]\nassert count_up_to(1000) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\nassert count_up_to(1000) == count_up_to(10000)\n",
        "num_ids_2": 23,
        "num_ids_4": 436
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply(123, 456) == 901\nassert     multiply(456, 123) == 901\nassert     multiply(123, 123) == 234\nassert     multiply(123, 456) == 901\nassert     multiply(123, 123) == 234\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # a = '7'\n    # b = '5'\n    # expected = '35'\n    # actual = multiply(a, b)\n    # assert expected == actual, \"Expected: {}, Actual: {}\".format(expected, actual)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply(100, 100) == 1\nassert multiply(100, 99) == 99\nassert multiply(1, 1) == 1\nassert multiply(100, 0) == 0\nassert multiply(0, 100) == 0\n",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert multiply(123, 456) == 789\nassert multiply(456, 123) == 789\nassert multiply(123, 123) == 12",
        "num_ids_2": 15,
        "num_ids_4": 36
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # Your Code here\n    #...\nassert multiply(123, 1234) == 0\nassert multiply(123, 1238) == 9\nassert multiply(1234, 1238) == 0\n",
        "num_ids_2": 14,
        "num_ids_4": 37
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(multiply(29, 65) == 50)\nprint(multiply(16, 22) == 24)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(count_upper('Excercise')) == 1\nprint(count_upper('Exercises')) == 2\nprint(count_upper('Exercise')) == 1\nprint(count_upper('Exercise')) == 1\nprint(count_upper('Exercises')) == 2\nprint(count_upper('Excercise')) == 1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_upper('accede') == 3\nassert count_upper('Eba is the best country in the world!') == 2\nassert count_upper('a') == 0\nassert count_upper('z') == 0\nassert count_upper('d') == 0\n",
        "num_ids_2": 32,
        "num_ids_4": 52
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_upper('easy') == 3\ncount_upper('INERd') == 1\ncount_upper('GOOD') == 4",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_upper('ZyZY') == 2\nassert count_upper('zzzz') == 0\nassert count_upper('Z') == 1\nassert count_upper('YYYYYYYY') == 0",
        "num_ids_2": 16,
        "num_ids_4": 37
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_upper('s') == 1, '\"s\" is correct!'\nassert     count_upper('S') == 0, '\"S\" is correct!'\nassert     count_upper('Sds') == 0, '\"Sds\" is correct!'\nassert     count_upper('SDS') == 1, '\"SDS\" is correct!'\nassert     count_upper('SdS') == 2, '\"SdS\" is correct!'\n",
        "num_ids_2": 38,
        "num_ids_4": 80
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"13.5\") == 14\nassert     closest_integer(\"-13.5\") == -14\nassert     closest_integer(\"0.5\") == 0\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"0.5\") == 0\nassert closest_integer(\"0.1\") == 0\nassert closest_integer(\"0\") == 0\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"0.1\") == 0\nassert closest_integer(\"0.1\") == 0\nassert closest_integer(\"0.5\") == 0\n",
        "num_ids_2": 29,
        "num_ids_4": 53
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.6\") == 16\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-14.6\") == -1",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_integer(\"9.9\") == 10\nassert     closest_integer(\"-9.9\") == -10\nassert     closest_integer(\"0.9\") == 0\nassert     closest_integer(\"-0.9\") == -1\nassert     closest_integer(\"9.5\") == 10\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.9\") == 14\nassert     closest_integer(\"-14.9\") == -14\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    closest_integer(\"14.5\") == 15\n    closest_integer(\"-14.5\") == -15\n    closest_integer(\"-6.5\") == -6\n    closest_integer(\"6.5\") == 7\n    closest_integer(\"0\") == 0\n    closest_integer(\"-1.5\") == -1\n    closest_integer(\"1.5\") == 2\n    closest_integer(\"-6.0\") == -6\n    closest_integer(\"10.0\") == 10\n    closest_integer(\"9.3\") == 10\n    closest_integer(\"-9.3\") == -10\n    closest_integer(\"10.9\") == 10\n    closest_integer(\"-10.9\") == -10\n    closest_integer(\"0.0\") == 0\n    closest_integer(\"-0.0\") == -0\n    closest_integer(\"10.9\") == 10",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-2\") == -2\nassert     closest_integer(\"2.2\") == 2\nassert     closest_integer(\"-2.2\") == -2\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_integer(\"14.5\") == 15, \\\n            \"Test 1 did not pass\"\nassert closest_integer(\"-14.5\") == -15, \\\n            \"Test 2 did not pass\"\n\nassert closest_integer(\"12.9\") == 12, \\\n            \"Test 3 did not pass\"\nassert closest_integer(\"-12.9\") == -12, \\\n            \"Test 4 did not pass\"\n",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(4) == [1, 2]\nassert     make_a_pile(8) == [1, 3]\n\nprint('You passed all the tests!'",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_a_pile(3) == [3]\nassert     make_a_pile(4) == [4]\nassert     make_a_pile(5) == [5]\nassert     make_a_pile(6) == [6]\nassert     make_a_pile(7) == [7]\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(3) == [1, 1]\nassert     make_a_pile(5) == [1, 1, 2]\nassert     make_a_pile(7) == [1, 1, 3, 2]\nassert     make_a_pile(9) == [1, 1, 3, 3, 4]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [3, 1]\nassert     make_a_pile(4) == [4, 1, 1]\nassert     make_a_pile(5) == [5, 1, 1, 1]\nassert     make_a_pile(7) == [7, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         make_a_pile(2) == [2, 1]\nassert         make_a_pile(3) == [3, 2]\nassert         make_a_pile(5) == [5, 4, 3]\nassert         make_a_pile(7) == [7, 6, 5, 4, 3]\nassert         make_a_pile(15) == [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     make_a_pile(4) ==    [4,2,1]\nassert     make_a_pile(5) ==    [5,3,2,1]\nassert     make_a_pile(6) ==    [6,4,2,1]\n",
        "num_ids_2": 44,
        "num_ids_4": 67
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_a_pile(1) ==  [1]\nassert     make_a_pile(2) ==  [1, 1]\nassert     make_a_pile(3) ==  [1, 1, 1]\nassert     make_a_pile(4) ==  [1, 1, 1, 1]\nassert     make_a_pile(5) ==  [1, 1, 1, 1, 1]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_string(\"a,b,c\") == [\"a\",\"b\",\"c\"]\nassert words_string(\"a,b,c,\") == [\"a\",\"b\",\"c\"]\nassert words_string(\"a\") == [\"a\"]\nassert words_string(\"a,b,c,,\") == [\"a\",\"b\",\"c\"]\nassert words_string(\"hello,world\") == []\n",
        "num_ids_2": 42,
        "num_ids_4": 76
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     words_string('hello, world') == ['hello', 'world']\nassert     words_string('hello, world, how, are, you?') == ['hello', 'world', 'how', 'are', 'you']\nassert     words_string('hello, world, 1') == ['hello', 'world', '1']\nassert     words_string('hello, world, 1,') == ['hello', 'world', '1']\nassert     words_string('hello, world, 1, world, are, you?') == ['hello', 'world', '1', 'world', 'are', 'you']\n",
        "num_ids_2": 52,
        "num_ids_4": 99
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_string(\"Hi, my name is Jim and I live in New York\") == [\"Hi\", \"my\", \"name\", \"is\", \"Jim\", \"and\", \"I\", \"live\", \"in\", \"New\", \"York\"]\nassert     words_string(\"Hi, my name is Jim and I live in New York and USA\") == [\"Hi\", \"my\", \"name\", \"is\", \"Jim\", \"and\", \"I\", \"live\", \"in\", \"New\", \"York\", \"and\", \"USA\"]\nassert     words_string(\"Hi, my name is Jim and I live in New York and USA and France\") == [\"Hi\", \"my\", \"name\", \"is\", \"Jim\", \"and\", \"I\", \"live\", \"in\", \"New\", \"York\", \"and\", \"USA\", \"and\", \"France\"]\nassert     words_string(\"Hi, my name is Jim and I live in New York and USA and France and Brazil\") == [\"Hi\", \"my\", \"name\", \"is\", \"Jim\", \"and\", \"I\", \"live\", \"in\", \"New\", \"York\", \"and\", \"USA\", \"and\", \"France\", \"and\", \"Brazil\"]\n",
        "num_ids_2": 116,
        "num_ids_4": 264
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_string(\"hello world\") == [\"hello\", \"world\"]\nassert words_string(\"hello, world\") == [\"hello\", \"world\"]\nassert words_string(\"hello and world\") == [\"hello\", \"and\", \"world\"]\n",
        "num_ids_2": 34,
        "num_ids_4": 54
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert words_string(\"Ralph, Paul, Cesar, Ralph, Paul\") == [\"Ralph\", \"Paul\", \"Cesar\", \"Ralph\", \"Paul\"]\nassert words_string(\"2,12,3,2,1,0\") == [\"2\", \"12\", \"3\", \"2\", \"1\", \"0\"]\nassert words_string(\"2,2,3,4,5\") == [\"2\", \"2\", \"3\", \"4\", \"5\"]\nassert words_string(\"1,2,3\") == [\"1\", \"2\", \"3\"]\n",
        "num_ids_2": 40,
        "num_ids_4": 109
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_string(\"this,is,a,sentence\") == ['this', 'is', 'a','sentence']\nassert     words_string(\"hello,my,name,is,caleb\") == ['hello','my', 'name', 'is', 'caleb']\nassert     words_string(\"hello world,my name is caleb\") == ['hello', 'world','my', 'name', 'is', 'caleb']\nassert words_string(\"I,like,cats,and,dogs,cool,and,tomatoes,and,I,like,too.\") == ['I', 'like', 'cats', 'and', 'dogs', 'cool', 'and', 'tomatoes', 'and', 'I', 'like', 'too']\n",
        "num_ids_2": 63,
        "num_ids_4": 167
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert choose_num(1, 10) == 1\nassert choose_num(1, 11) == -1\nassert choose_num(100, 200) == 99\nassert choose_num(0, 50) == 0\n",
        "num_ids_2": 15,
        "num_ids_4": 40
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     choose_num(1, 10) == 1\nassert     choose_num(1, 100) == 1\nassert     choose_num(1, 1000) == 1\nassert     choose_num(1, 10000) == 2\nassert     choose_num(1, 100000) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     choose_num(4, 6) == 8\nassert     choose_num(4, 8) == -1\nassert     choose_num(1, 5) == 1\nassert     choose_num(4, 1) == -1\nassert     choose_num(1, 1) == -1\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    choose_num(3, 6) == 5\n    choose_num(3, 8) == -1\n    choose_num(0, 1) == -1\n    choose_num(-2, -3) == -1\n    choose_num(2, 10) == 5\n\ndef check_input_func(func):\n    \"\"\"This function takes in a function func and tests whether the function \n    is well-formed. It should return True if the function is well-formed, and\n    False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     choose_num(2, 10) == 8\nassert    choose_num(10, 20) == -1\nassert    choose_num(12, 18) == 14\n\n\ndef find_divisors(number):\n    \"\"\"This function takes a positive number n and returns the list of \n    the integers that divide n, including 1 and the number itself. For \n    example, if n = 6 then the function should return [1, 2, 3] since 6 =\n    1 + 2 + 3. If n has no divisors then the function should return an empty\n    list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     choose_num(5, 10) == 5\nassert     choose_num(5, 10) == -1\nassert     choose_num(10, 20) == 10\nassert     choose_num(10, 20) == -1\nassert     choose_num(1, 20) == 1\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     choose_num(2, 5) == -1, 'incorrect result'\nassert     choose_num(1, 5) == 1, 'incorrect result'\nassert     choose_num(0, 5) == -1, 'incorrect result'\nassert     choose_num(5, 1) == -1, 'incorrect result'\nassert     choose_num(0, 0) == -1, 'incorrect result'\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     choose_num(4, 5) == 5\nassert     choose_num(0, 0) == -1\nassert     choose_num(4, 3) == 3\n\ndef product_of_two_squares(num):\n    \"\"\"This function takes a positive number num and returns the product of\n    all the numbers in the range [1, num] inclusive. If there's no such\n    product, then the function should return -1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert rounded_avg(1, 1) == 1\nassert rounded_avg(1, 2) == 1\nassert rounded_avg(1, 3) == 1\nassert rounded_avg(2, 3) == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rounded_avg(1, 3) == 1\nassert     rounded_avg(1, 4) == 1\nassert     rounded_avg(4, 4) == 0\nassert     rounded_avg(4, 5) == 1\nassert     rounded_avg(5, 5) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrounded_avg(10, 20) == 15\nrounded_avg(9, 19) == 14\nrounded_avg(10, 19) == 14\nrounded_avg(9, 19) == -1\nrounded_avg(19, 19) == 14\nrounded_avg(19, 20) == 15\nrounded_avg(19, 20) == -1\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounded_avg(10, 20) == 15\nrounde",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nrounded_avg(5, 15) == 5\nrounded_avg(20, 35) == 5\nrounded_avg(20, 41) == -1\nrounded_avg(1, 1) == 1\nrounded_avg(10, 9) == 9\nrounded_avg(5, 2) == 2\nrounded_avg(5, 3) == 2\nrounded_avg(5, 4) == 3\nrounded_avg(5, 5) == 3\nrounded_avg(1, 2) == 1\nrounded_avg(2, 2) == 1\nrounded_avg(2, 3) == 1\nrounded_avg(2, 4) == 1\nrounded_avg(2, 5) == 1\nrounded_avg(5, 4) == 3\nrounded_avg(5, 5) == 4\nrounded_avg(1, 5) == 4\nrounded_avg(1, 6) == 4\nrounded_avg(2, 6) == 4\nrounded_avg(3, 6) == 5\nrounded_avg(4, 6) == 5\nrounded_avg(5, 6) == 5\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_population_density(population, land_area):\n    \"\"\"You are given the population and the land area of a country. \n    Return the population density of the country.\"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nrounded_avg(4, 6) == 4\nassert rounded_avg(5, 5) == 4\nassert rounded_avg(8, 10) == 5\nassert rounded_avg(8, 11) == 5\nassert rounded_avg(9, 8) == 5\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_digits([1,5,6,7,8,9]) == sorted([1, 5, 6, 7, 8, 9])\nassert     unique_digits([2,3,4,5,7,8,9]) == sorted([3, 7])\nassert     unique_digits([0,3,3,4,5,6,6,6]) == sorted([3, 5, 6])\n\ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 64,
        "num_ids_4": 97
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_digits([123, 456, 789]) == [123, 456, 789]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nassert     unique_digits([123, 456, 789, 123]) == [123, 456, 789]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 456, 789]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 123, 456, 789]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 456, 789, 123]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n",
        "num_ids_2": 76,
        "num_ids_4": 170
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert unique_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == sorted([1, 2, 3, 7, 8, 9])\nassert unique_digits([2, 3, 4, 5, 6, 7, 8, 9, 1]) == sorted([2, 3, 5, 7, 8, 9])\nassert unique_digits([1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9])\n",
        "num_ids_2": 43,
        "num_ids_4": 131
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_digits([1, 1, 2, 2, 3, 4]) == [1, 2, 3, 4], \"First Test\"\nassert     unique_digits([1, 1, 2, 2, 3, 4, 2]) == [1, 2], \"Second Test\"\nassert     unique_digits([1, 1, 2, 2, 3, 4, 3]) == [1, 2, 3, 4], \"Third Test\"\nassert     unique_digits([1, 1, 2, 2, 3, 4, 3, 5]) == [1, 2, 3, 4, 5], \"Fourth Test\"\nassert     unique_digits([1, 1, 2, 2, 3, 4, 3, 5, 5]) == [1, 2, 3, 4, 5], \"Fifth Test\"\n",
        "num_ids_2": 66,
        "num_ids_4": 142
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_digits([2,3,5,4,8,6,1,2]) == [2,4,5,6,1,2]\nassert     unique_digits([7,5,6,4,3,2,1,1]) == [7,5,6,3,2,1]\nassert     unique_digits([1,2,3,4]) == [1,2,3,4]\nassert     unique_digits([]) == []\nassert     unique_digits([1,2,3,4,5]) == []\n",
        "num_ids_2": 76,
        "num_ids_4": 113
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef by_length_v1(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    # return sorted(arr, key=lambda x: (x>=1, x<=9))[::-1]\n    return sorted(arr, key=lambda x: (x>=1, x<=9))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"The sorted array is: \", by_length([3, 5, 1, 9, 6, 8, 2, 4, 7]))\nprint(\"The sorted array is: \", by_length([9, 8, 2, 3, 5, 6, 7, 1, 4]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    by_length([3, 4, 7, 8, 1, 5, 2, 9, 0]) == [\"One\", \"Two\", \"Seven\", \"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n    by_length([1, 1, 4, 4, 7, 8, 8, 2, 2, 0]) == [\"One\", \"One\", \"Three\", \"Three\", \"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\"]\n    by_length([7, 1, 7, 4, 4, 7, 8, 8, 2, 2, 0]) == [\"One\", \"One\", \"Three\", \"Three\", \"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\", \"Zero\"]\n    by_length([7, 8, 7, 4, 4, 7, 8, 8, 2, 2, 0]) == [\"One\", \"One\", \"Three\", \"Three\", \"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\", \"Zero\"]\n    by_length([1, 5, 7, 8, 2, 2, 4, 4, 7, 8, 0]) == [\"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\", \"Zero\", \"Zero\", \"Two\", \"Two\", \"Four\"]\n    by_length([1, 1, 3, 3, 3, 3, 5, 5, 5, 5, 5]) == [\"One\", \"One\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"]\n    by_length([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) == [\"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\"]\n    by_length([3, 4, 1, 6, 7, 5, 1, 1, 2, 2, 5]) == [\"Five\", \"Five\", \"One\", \"One\", \"Three\", \"Three\", \"One\", \"One\", \"Two\", \"Two\", \"Five\"]\n    by_length([3, 4, 7, 8, 1, 5, 2, 9, 0]) == [\"Five\", \"Five\", \"Seven\", \"Seven\", \"One\", \"One\", \"Three\", \"Two\", \"One\", \"One\"]\n    by_length([1, 1, 4, 4, 7, 8, 8, 2, 2, 0]) == [\"One\", \"One\", \"Three\", \"Three\", \"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\"]\n    by_length([7, 1, 7, 4, 4, 7, 8, 8, 2, 2, 0]) == [\"One\", \"One\", \"Three\", \"Three\", \"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\", \"Zero\"]\n    by_length([7, 8, 7, 4, 4, 7, 8, 8, 2, 2, 0]) == [\"One\", \"One\", \"Three\", \"Three\", \"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\", \"Zero\"]\n    by_length([7, 8, 7, 4, 4, 7, 8, 8, 2, 2, 0]) == [\"One\", \"One\", \"Three\", \"Three\", \"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\", \"Zero\"]\n    by_length([1, 5, 7, 8, 2, 2, 4, 4, 7, 8, 0]) == [\"Five\", \"Five\", \"Seven\", \"Seven\", \"Eight\", \"Eight\", \"Zero\", \"Zero\", \"Two\", \"Two\", \"Four\"]\n    by_length([1, 1, 3, 3, 3, 3, 5, 5, 5, 5, 5]) == [\"One\", \"One\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\", \"Five\"]\n    by_length([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) == [\"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\", \"Seven\"]\n    by_length([3, 4, 1, 6, 7, 5, 1, 1, 2, 2, 5]) == [\"Five\", \"Five\", \"One\", \"One\", \"Three\", \"Three\", \"One\", \"One\", \"Two\", \"Two\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     by_length(\n            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n        ) == \"One  Two  Three  Four  Five  Six  Seven  Eight  Nine Ten Eleven Twelve Thirteen Fourteen Fifteen Sixteen Seventeen Eighteen Nineteen\"\n\n\ndef by_length_suffix(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"[correct solution]\")\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     by_length([1, 2, 3, 4, 5]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Seven\", \"Eight\", \"Six\"]\nassert     by_length([9, 9, 9, 9, 9, 9, 9]) == [\"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\"]\n",
        "num_ids_2": 86,
        "num_ids_4": 129
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(f(4))\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i.\n    i starts from 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     f(1) == [1], \"f(1) does not work\"\nassert     f(2) == [1, 1], \"f(2) does not work\"\nassert     f(3) == [1, 1, 1], \"f(3) does not work\"\nassert     f(4) == [1, 2, 6, 24], \"f(4) does not work\"\n",
        "num_ids_2": 42,
        "num_ids_4": 92
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 2, 3, 24]\nassert     f(5) == [1, 2, 3, 4, 30]\n",
        "num_ids_2": 24,
        "num_ids_4": 56
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     f(3) == [1, 2, 3], '1.the function f should return a list of size n, such that the value of the element at index i is the factorial of i if i is even'\nassert     f(0) == [], '2.the function f should return a list of size n, such that the value of the element at index i is the factorial of i if i is even'\nassert     f(5) == [1, 2, 6, 24, 120], '3.the function f should return a list of size n, such that the value of the element at index i is the factorial of i if i is even'\nassert     f(8) == [1, 2, 3, 4, 5, 6, 7, 8], '4.the function f should return a list of size n, such that the value of the element at index i is the factorial of i if i is even'\n\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i\n    i starts from 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 95,
        "num_ids_4": 209
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('f:', f(4))\nprint('f:', f(5))\nprint('f:', f(6))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     f(0) == []\nassert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 1]\nassert     f(4) == [1, 1, 1, 1]\n",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (1, 2)\nassert     even_odd_palindrome(5) == (2, 1)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_palindrome(10) == (0,2)\nassert even_odd_palindrome(6) == (0,3)\nassert even_odd_palindrome(1) == (0,1)\n",
        "num_ids_2": 37,
        "num_ids_4": 55
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert equal_to_tuple(even_odd_palindrome(7)) == (2, 3)\nassert equal_to_tuple(even_odd_palindrome(18)) == (2, 1)\nassert equal_to_tuple(even_odd_palindrome(25)) == (1, 5)\nassert equal_to_tuple(even_odd_palindrome(27)) == (2, 1)\n",
        "num_ids_2": 28,
        "num_ids_4": 78
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(10) == (5, 5)\nassert     even_odd_palindrome(1) == (0, 1)\nassert even_odd_palindrome(2) == (2, 1)\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(4) == (2, 1)\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(even_odd_palindrome(4)) == (1, 1)\nprint(even_odd_palindrome(11)) == (1, 1)\nprint(even_odd_palindrome(101)) == (2, 0)\nprint(even_odd_palindrome(1001)) == (2, 0)\nprint(even_odd_palindrome(1001000000)) == (2, 0)\nprint(even_odd_palindrome(10001000000)) == (1, 1)\nprint(even_odd_palindrome(10001000000000)) == (0, 1)\nprint(even_odd_palindrome(9999999999999999)) == (1, 1)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(10) == (3, 2)\nassert     even_odd_palindrome(20) == (8, 0)\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(5) == (1, 0)\nassert     even_odd_palindrome(6) == (1, 0)\nassert     even_odd_palindrome(7) == (0, 2)\nassert     even_odd_palindrome(8) == (1, 0)\nassert     even_odd_palindrome(9) == (0, 3)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"All tests passed.\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_nums([]) == 0\nassert count_nums([-1, -10, 1, -1]) == 2\nassert count_nums([1, -1, 0, 1, -1, 0]) == 4\nassert count_nums([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ",
        "num_ids_2": 31,
        "num_ids_4": 1026
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\nprint(\"This is my solution to count_nums\")\nprint(\"--------------------------------\")\narr = [12, -42, -9, -3, -1, 1, 12]\nprint(\"Input: \", arr)\nprint(\"Output: \", count_nums(arr))\nprint(\"--------------------------------\")\nprint()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_nums([-1, 2, -2, 3]) == 2\nassert     count_nums([-1, 2, -2, 3, -4]) == 3\nassert     count_nums([-1, 2, -2, 3, -4, 5]) == 5\nassert     count_nums([-1, 2, -2, 3, -4, 5, -6]) == 6\nassert     count_nums([-1, 2, -2, 3, -4, 5, -6, 7]) == 7\n",
        "num_ids_2": 43,
        "num_ids_4": 96
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_nums([1, 2, 3])    ==    2, \"This is not correct\"\nassert     count_nums([-1, -3, -5])    ==    1, \"This is not correct\"\nassert     count_nums([1, -2, 1, 3])    ==    2, \"This is not correct\"\nassert     count_nums([1, -2, 1, 1, 1])    ==    0, \"This is not correct\"\nassert     count_nums([1, 2, 1, 3, 4, -1, -2, -3, -4])    ==    4, \"This is not correct\"\n",
        "num_ids_2": 53,
        "num_ids_4": 111
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_nums([-2, 3, 4, 1, 5, -2, 2]) == 5\nassert     count_nums([-2, 4, -2, 3, -4, 5]) == 3\nassert     count_nums([-2, 4, -2, 3, -4, -1]) == 3\nassert     count_nums([-2, 4, -2, 3, -4, -2]) == 2\nassert     count_nums([-2, 4, -2, 3, -4, -2, -1]) == 4\n",
        "num_ids_2": 51,
        "num_ids_4": 103
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_nums([-1, 1, 1, 1, 1]) == 0, \"Should be 0.\"\nassert     count_nums([1, 1, 1, 1]) == 1, \"Should be 1.\"\nassert     count_nums([1, 1, -1, 1]) == 2, \"Should be 2.\"\nassert     count_nums([1, 1, 1, 1, 1]) == 1, \"Should be 1.\"\nassert     count_nums([-1, 1, 1, 1, 1]) == 3, \"Should be 3.\"\n",
        "num_ids_2": 51,
        "num_ids_4": 102
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_nums([]) == 0, \"empty\"\nassert count_nums([]) == 0, \"empty\"\nassert count_nums([1, 2, 3, 4, 5]) == 5, \"positive\"\nassert count_nums([-1, -2, -3, -4, -5]) == 5, \"negative\"\nassert count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 8, \"negative\"\n",
        "num_ids_2": 29,
        "num_ids_4": 80
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_nums([1,-1,1,1,1,1,-1,1]) == 0\nassert count_nums([1,-1,1,1,1,1,-1,1]) == 5\nassert count_nums([1,-1,1,1,1,1,-1,1,1]) == 8\nassert count_nums([1,-1,1,1,1,1,-1,1,1,1,1]) == 10\n",
        "num_ids_2": 51,
        "num_ids_4": 109
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([-1,2,3]) == 2\nassert count_nums([1,2,3]) == 0\nassert count_nums([1,-2,-3]) == 2\nassert count_nums([-1,-2,-3]) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_one_ball([2, 6, 1, 3, 8]) == True, \"Wrong output\"\nassert     move_one_ball([1, 2, 3]) == False, \"Wrong output\"\nassert     move_one_ball([1, 2, 3, 3, 3]) == False, \"Wrong output\"\nassert     move_one_ball([]) == True, \"Wrong output\"\nassert     move_one_ball([1, 2, 3, 4, 5]) == True, \"Wrong output\"\n",
        "num_ids_2": 50,
        "num_ids_4": 95
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        print(move_one_ball(arr))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef move_one_ball_two_solutions(arr):\n    \"\"\"The first solution we proposed in the question is a Python implementation of the same algorithm.\n    The second solution (below) is an optimized Python implementation.\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        if arr[i] == arr[i-1]:\n            return False\n    return True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_one_ball([3,6,7,0,4,1]) == False, \\\n            \"move_one_ball([3,6,7,0,4,1]): True\"\nassert     move_one_ball([]) == True, \\\n            \"move_one_ball([]): True\"\nassert     move_one_ball([1]) == True, \\\n            \"move_one_ball([1]): True\"\n",
        "num_ids_2": 39,
        "num_ids_4": 54
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmove_one_ball([1,2,3]) == True\nmove_one_ball([3,2,1]) == False\nmove_one_ball([1, 2, 3, 4, 5, 6]) == True\nmove_one_ball([1, 2, 3, 5, 4, 6]) == False\nmove_one_ball([]) == True\nmove_one_ball([-2, 4, 5, -3, 4]) == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([], []) == \"NO\"\nassert    exchange([], [1, 2, 3]) == \"NO\"\nassert    exchange([], [2]) == \"NO\"\nassert    exchange([1, 2, 3], []) == \"NO\"\nassert    exchange([1, 2, 3], [1, 2, 4]) == \"NO\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     exchange([10, 20, 12, 2, 4, 7, 1], [10, 20, 12, 2, 4, 7, 1]) == \"YES\"\nassert     exchange([10, 20, 12, 2, 4, 7, 1], [10, 20, 12, 2, 4, 7, 1]) == \"YES\"\nassert     exchange([10, 20, 12, 2, 4, 7, 1], [10, 20, 12, 2, 4, 7, 1]) == \"YES\"\nassert     exchange([10, 20, 12, 2, 4, 7, 1], [10, 20, 12, 2, 4, 7, 1]) == \"YES\"\nassert     exchange([10, 20, 12, 2, 4, 7, 1], [10, 20, 12, 2, 4, 7, 1]) == \"NO\"\n",
        "num_ids_2": 78,
        "num_ids_4": 156
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     exchange(lst1 = [1, 2, 3, 4, 5], lst2 = [3, 5, 1, 2, 4]) == \"YES\"\nassert     exchange(lst1 = [1, 2, 3, 4, 5], lst2 = [3, 5, 1, 2, 4, 6, 7]) == \"NO\"\nassert     exchange(lst1 = [1, 2, 3, 4, 5], lst2 = [3, 5, 1, 2, 4, 6, 7, 8]) == \"NO\"\n",
        "num_ids_2": 84,
        "num_ids_4": 130
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     exchange(odds, evens) == \"YES\"\nassert     exchange(evens, odds) == \"YES\"\nassert     exchange(evens, evens) == \"NO\"\nassert     exchange([], evens) == \"NO\"\nassert     exchange([], odds) == \"NO\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     exchange([1, 2, 3, 4], [5, 6, 7, 8]) == \"YES\"\nassert     exchange([1, 2, 3, 4], [5, 6, 7, 8, 9]) == \"NO\"\n\ndef reverse_even_slices(lst):\n    \"\"\"This problem is to reverse an array of even sized slices.\n    For example, if the original array is, and the slices are,\n    then after reversing the even slices, the output should be,\n    [1, 3, 5, 7, 9].\n\n    This is a tricky problem because there can be any number of even slices.\n    So, you have to think carefully about the problem by looking at the examples.\n\n    If you don't know the solution, then you may want to try out the code with your own\n    input, and understand the expected output.\n    \"\"\"\n    pass\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6, 7], [2, 4, 6, 8, 10]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5, 6, 7], [2, 4, 6, 8]) == \"YES\"\nassert     exchange([2, 4, 6, 8], [1, 3, 5, 7]) == \"YES\"\nassert     exchange([2, 4, 6], [1, 3, 5, 7]) == \"YES\"\nassert     exchange([3, 4], [1, 2, 5, 6]) == \"NO\"\n",
        "num_ids_2": 68,
        "num_ids_4": 120
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == \"NO\"\nassert     exchange([], []) == \"YES\"\nassert     exchange([], [1]) == \"NO\"\nassert     exchange([1], [1]) == \"YES\"\n",
        "num_ids_2": 62,
        "num_ids_4": 89
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     exchange([0, 1, 2, 3], [2, 3, 4, 1]) == \"YES\"\nassert     exchange([0, 1, 2, 3], [2, 3, 4, 1, 3, 2]) == \"NO\"\nassert     exchange([0, 1, 2, 3, 4, 5], [3, 4, 5, 2, 1, 0]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 2, 1, 0]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [3, 4, 5, 2, 1, 0, 1, 2, 3, 4, 5]) == \"YES\"\n",
        "num_ids_2": 58,
        "num_ids_4": 126
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram(\"program\") == {\"p\": 3, \"r\": 2, \"g\": 2, \"m\": 1, \"o\": 1, \"r\": 1, \"t\": 1, \"c\": 1}\nassert     histogram(\"hello world\") == {\"h\": 1, \"e\": 2, \"l\": 2, \"o\": 3, \" \": 2, \"w\": 1, \"r\": 1, \"d\": 1, \" \": 1, \"l\": 1}\nassert     histogram(\"\") == {}\nassert     histogram(\"some characters\") == {\"s\": 1, \"c\": 1, \"r\": 1, \"e\": 1, \" \": 1}\nassert     histogram(\"\") == {}",
        "num_ids_2": 109,
        "num_ids_4": 153
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     histogram(\"\") == {}\nassert     histogram(\"a\") == {\"a\": 1}\nassert     histogram(\"aaaa\") == {\"a\": 4}\nassert     histogram(\"aabbbccc\") == {\"a\": 3, \"b\": 2, \"c\": 2}\nassert     histogram(\"aabbbcccc\") == {\"a\": 5, \"b\": 3, \"c\": 3}\n",
        "num_ids_2": 23,
        "num_ids_4": 65
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     histogram(\"aaabbb\") == {\n    \"a\": 1,\n    \"b\": 2\n}\nassert     histogram(\"aaabaaabaaaba\") == {\n    \"a\": 2,\n    \"b\": 2\n}\nassert     histogram(\"\") == {}\nassert     histogram(\"qweqweq\") == {}\nassert     histogram(\"aabbccdd\") == {\n    \"a\": 2,\n    \"b\": 2,\n    \"c\": 1\n}\n",
        "num_ids_2": 27,
        "num_ids_4": 50
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    hist = {}\n    for char in test:\n        if char in hist:\n            hist[char] += 1\n        else:\n            hist[char] = 1\n    return hist\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     histogram(\"klein\") == {\"k\": 1}\nassert     histogram(\"test\") == {\"t\": 2, \"e\": 1, \"s\": 1, \"i\": 1, \"r\": 1}\nassert     histogram(\"test\") == {\"t\": 2, \"e\": 1, \"s\": 1, \"i\": 1, \"r\": 1}\n",
        "num_ids_2": 49,
        "num_ids_4": 83
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     histogram('aabbbcc') == {'a': 2, 'b': 2, 'c': 1}\nassert     histogram('abab') == {'a': 2, 'b': 2}\nassert     histogram('abcc') == {'a': 1, 'b': 1, 'c': 1}\nassert     histogram('abababab') == {'a': 3, 'b': 3, 'c': 1}\n",
        "num_ids_2": 49,
        "num_ids_4": 103
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     histogram(\"hello\") == {'l': 1, 'h': 1, 'e': 1}\nassert histogram(\"hello hello hello\") == {'l': 3, 'h': 1, 'e': 2}\nassert histogram(\"hello there\") == {'l': 1, 'h': 1, 't': 1, 'e': 1, 'r': 1}",
        "num_ids_2": 51,
        "num_ids_4": 86
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert histogram(\"hello\") == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 2}\nassert histogram(\"hellooooo\") == {\"h\": 3, \"e\": 3, \"l\": 3, \"o\": 3}\nassert histogram(\"\") == {\"\": 1}",
        "num_ids_2": 31,
        "num_ids_4": 72
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(f\"The result of histogram('Hello World') is: {histogram('Hello World')}\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_delete( \"leetcode\", \"e\") == (\"elote\", True)\nassert     reverse_delete(\"a\", \"aa\") == (\"a\", False)\nassert     reverse_delete(\"a\", \"aaaaa\") == (\"a\", False)\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\"",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_delete(\"kab\",\"b\") == (\"aa\",False)\nassert     reverse_delete(\"hi\",\"ho\") == (\"hoi\",False)\nassert     reverse_delete(\"h\",\"h\") == (\"h\",True)\n",
        "num_ids_2": 36,
        "num_ids_4": 53
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_delete(s = \"aa\", c = \"a\") == (\"aa\",True)\nassert     reverse_delete(s = \"ab\", c = \"a\") == (\"ab\",False)\nassert     reverse_delete(s = \"a\", c = \"aa\") == (\"aa\",True)\nassert     reverse_delete(s = \"ab\", c = \"a\") == (\"ab\",True)\nassert     reverse_delete(s = \"ab\", c = \"a\") == (\"ab\",True)\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_delete('a','c') == ('', True)\nassert     reverse_delete('c','a') == ('', False)\nassert     reverse_delete('','') == ('', True)\nassert     reverse_delete('abcd','abcd') == ('abcd', True)\nassert     reverse_delete('abcd','abcdabc') == ('abcdabc', True)\n",
        "num_ids_2": 32,
        "num_ids_4": 67
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_delete('xddod', 'od') == ('xdddd', True)\nassert reverse_delete('xddod', 'xdd') == ('ddddd', True)\nassert reverse_delete('xdddd', 'dddd') == ('ddddd', False)\nassert reverse_delete('xdddd', 'ddd') == ('dddddd', False)\nassert reverse_delete('dddddd', 'ddd') == ('dddddddd', False)\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_delete(\"tactco\",\"oat\") == (\"oatcoat\",True)\nassert     reverse_delete(\"cat\",\"gat\") == (\"atgcat\",True)\nassert     reverse_delete(\"cat\",\"tac\") == (\"catoat\",True)\nassert     reverse_delete(\"ccc\",\"ccc\") == (\"c\",False)\nassert     reverse_delete(\"\",\"\") == (\"\",True)\n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_delete('hello', 'ell') == ('hello', True), 'Should be \\'hello\\''\nassert     reverse_delete('helloll', 'ell') == ('helloll', True), 'Should be \\'helloll\\''\nassert     reverse_delete('hello', 'll') == ('hlo', False), 'Should be \\'hlo\\''\nassert     reverse_delete('hello', 'll') == ('hlo', False), 'Should be \\'hlo\\''\nassert     reverse_delete('hell', 'll') == ('', False), 'Should be \\'\\''\n",
        "num_ids_2": 53,
        "num_ids_4": 107
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_delete(\"abcd\",\"cdab\") == (\"cabd\",\"True\")\nassert     reverse_delete(\"abcd\",\"abcd\") == (\"\",False)\nassert     reverse_delete(\"xyz\",\"xyz\") == (\"\",True)\nassert     reverse_delete(\"\",\"\") == (\"\",True)\nassert     reverse_delete(\"\",\"x\") == (\"\",\"True\")\n",
        "num_ids_2": 39,
        "num_ids_4": 71
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not \nassert \nassert reverse_delete(\"x\",\"yx\") == (\"y\",True)\nassert not reverse_delete(\"y\",\"xx\") == (\"xx\",True)\n",
        "num_ids_2": 7,
        "num_ids_4": 26
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = [\"a\", \"b\", \"a\", \"b\", \"a\", \"b\", \"c\"]\n    print(odd_count(lst))\n   ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_count(['ab', 'c', 'bcd', 'def', 'ghi', 'jklm', 'k']) == [1, 2, 2, 3, 2, 4, 1]\nassert odd_count(['a', 'b', 'cd', 'd', 'ef', 'g', 'h']) == [1, 1, 1, 2, 2, 1, 1]\nassert odd_count(['a', 'ab', 'c', 'abcd', 'def', 'ghi', 'jklm', 'k', 'c']) == [1, 1, 1, 2, 2, 2, 2, 3, 2]\nassert odd_count(['a', 'a', 'a', 'b', 'b', 'c', 'c', 'cd', 'd', 'e', 'e', 'f', 'f', 'f', 'g', 'g', 'h', 'h', 'h', 'i', 'i', 'i', 'j', 'j', 'j', 'j']) == [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9']) == []\n",
        "num_ids_2": 93,
        "num_ids_4": 278
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_count([\"2\", \"3\", \"4\"]) == [\"3\", \"4\", \"1\"]\nassert     odd_count([\"1\", \"3\", \"4\"]) == [\"2\", \"1\", \"1\"]\nassert     odd_count([\"2\", \"3\", \"4\", \"5\"]) == [\"3\", \"4\", \"1\", \"2\"]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\"]) == [\"4\", \"3\", \"1\", \"1\"]\nassert     odd_count([\"2\", \"3\", \"4\"]) == [\"3\", \"4\", \"1\"]\n",
        "num_ids_2": 54,
        "num_ids_4": 120
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert odd_count([\"11\"]) == [\"the number of odd elements in the string 1 of the input\"]\nassert odd_count([\"12\"]) == [\"the number of odd elements in the string 2 of the input\"]\nassert odd_count([\"21\"]) == [\"the number of odd elements in the string 3 of the input\"]\nassert odd_count([\"1212\"]) == [\"the number of odd elements in the string 3 of the input\"]\n",
        "num_ids_2": 28,
        "num_ids_4": 78
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_count([\"11\",\"10\",\"00110111\",\"00101001\"]) == [3,2,3,0]\nassert     odd_count([\"100\",\"00100\",\"1001001\",\"01110110\"]) == [1,1,0,3]\nassert     odd_count([\"0100\",\"0011\",\"01001\",\"01110110\"]) == [1,3,1,1]\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"All tests passed!\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef int_to_str(num):\n    \"\"\" Given a number num, return a string representing its binary\n    representation.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_count([\"We\", \"loved\", \"Mr. and Mrs. Smith\", \"so much\", \"to have you\",\n                \"around\", \"again\"]) == [5, 3, 0, 5, 4, 2, 2], \"Should be 5, 3, 0, 5, 4, 2, 2.\"\nassert     odd_count([\"we\", \"love\", \"mr. and Mrs. smith\", \"so much\", \"to have you\", \"again\"]) == [0, 0, 0, 0, 0, 0, 0], \"Should be 0, 0, 0, 0, 0, 0, 0.\"\nassert     odd_count([\"We\", \"loved\", \"Mr. and Mrs. Smith\", \"so much\", \"to have you\", \"around\"]) == [0, 1, 2, 0, 1, 2], \"Should be 0, 1, 2, 0, 1, 2.\"\n\n\n",
        "num_ids_2": 99,
        "num_ids_4": 163
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert minSubArraySum([1, 2, 5, 1, 1, 2, 3, 4]) == 3\nassert minSubArraySum([7,2,3,4,7]) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 47
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minSubArraySum([0]) == 0\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1,2]) == 1\nassert     minSubArraySum([2,3,1]) == 2\nassert     minSubArraySum([2,3,4,1,5,6]) == 3\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     minSubArraySum([2,3,1,2,4,3]) == 3\nassert     minSubArraySum([2,2,2,2,3]) == 3\n\nassert     minSubArraySum([2,1,5,2,3,2]) == 4\nassert     minSubArraySum([1,2,3]) == 3\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_flow(source, sink, n, m):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    The left and right wells are one unit apart and the top and bottom wells are one unit apart.\n    You are required to fill the whole rectangular grid with water.\n\n    Input\n    * source = top left well\n    * sink = bottom right well\n    * n = rows\n    * m = cols\n\n    Output\n    * flows, capacity\n    \"\"\"\n    pass\n\ndef max_flow(source, sink, n, m):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    The left and right wells are one unit apart and the top and bottom wells are one unit apart.\n    You are required to fill the whole rectangular grid with water.\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert max_fill(\n    [[1, 1, 0, 1], \n    [0, 0, 1, 0], \n    [0, 0, 1, 0], \n    [1, 0, 1, 0]], \n    4) == 1\nassert max_fill(\n    [[1, 1, 0, 1], \n    [0, 0, 1, 0], \n    [0, 0, 1, 0], \n    [1, 0, 1, 0]], \n    2) == 2\nassert max_fill(\n    [[1, 1, 0, 1], \n    [0, 0, 1, 0], \n    [0, 0, 1, 0], \n    [1, 0, 1, 0]], \n    0) == 1\n",
        "num_ids_2": 9,
        "num_ids_4": 21
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_fill(\n        [[1,1,1,1,0,0,0],\n        [1,0,1,0,0,0,0],\n        [1,0,1,0,0,0,0],\n        [1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0]],\n        capacity=1\n        ) == 4\nassert max_fill(\n        [[1,1,1,1,0,0,0],\n        [1,0,1,0,0,0,0],\n        [1,0,1,0,0,0,0],\n        [1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0]],\n        capacity=2\n        ) == 0\nassert max_fill(\n        [[1,1,1,1,0,0,0],\n        [1,0,1,0,0,0,0],\n        [1,0,1,0,0,0,0],\n        [1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0]],\n        capacity=3\n        ) == 3\nassert max_fill(\n        [[1,1,1,1,0,0,0],\n        [1,0,1,0,0,0,0],\n        [1,0,1,0,0,0,0],\n        [1,0,1,0,0,0,0],\n        [0,0,0,0,0,0,0]],\n        capacity=1\n        ) == 0\n\nif __name__ == \"__main__\":\n    ",
        "num_ids_2": 13,
        "num_ids_4": 25
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nmax_fill([[0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1]], 2) == 4\nassert \nmax_fill([[0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1]], 3) == 9\nassert \nmax_fill([[0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1]], 2) == 4\nassert \nmax_fill([[0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1]], 3) == 9\nassert \nmax_fill([[0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1],\n          [0, 0, 0, 0, 0, 1, 1]], 2) == 4\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import os\n    import sys\n    import io\n    import time\n    from collections import defaultdict\n    from unittest import TestCase\n    from unittest.mock import patch\n    from collections import deque\n    \n    class Test(TestCase):\n        def test_max_fill(self):\n            pass\n    \n    if os.getenv(\"CONTINUOUS_INTEGRATION\"):\n        import tracemalloc\n        tracemalloc.start()\n\n        def find_top_n(n):\n            snapshot = tracemalloc.take_snapshot()\n            top_stats = snapshot.statistics('lineno')\n\n            most_n_lines = top_stats[:n]\n            for stat in most_n_lines:\n                for line in stat.traceback.format():\n                    print(line, end='')\n                print(\"%f KiB\" % (stat.size / 1024))\n        \n        def test_max_fill(self):\n            grid = [\n                [1, 0, 1],\n                [0, 1, 0],\n                [0, 1, 1],\n            ]\n            expected = 1\n\n            result = max_fill(grid, 3)\n            self.",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([1,2,1,3,1,4,5,1,2,1]) == [1,1,1,1,2,2,3,4,5,4]\nassert     sort_array([1,2,1,3,1,4,5,1,2,1,4,5,1,2,1]) == [1,1,1,1,1,2,2,2,3,3,4,4,4,4,5,5,5,5,5,5,5]\nassert     sort_array([1,2,1,3,1,4,5,1,2,1,4,5,1,2,1,4,5,1,2,1]) == [1,1,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5]\n\nif __name__ == \"__main__\":\n    import inspect\n\n    # test_args = inspect.getargspec(sort_array).args\n    # assert test_args == ['arr']\n",
        "num_ids_2": 130,
        "num_ids_4": 235
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([10, 1, 9, 7, 4, 8]) == [1, 4, 7, 9, 10, 8]\nassert     sort_array([10, 1, 9, 7, 4, 8, 9, 7, 4, 8]) == [1, 4, 7, 7, 4, 8, 8, 9, 10, 9]\nassert     sort_array([10, 1, 9, 7, 4, 8, 9, 7, 4, 8, 9, 7, 4, 8, 9, 7]) == [1, 4, 7, 7, 4, 8, 8, 9, 9, 10, 9, 10, 4, 8, 8, 7]\nassert     sort_array([10, 1, 9, 7, 4, 8, 9, 7, 4, 8, 9, 7, 4, 8, 9, 7, 4, 8]) == [1, 4, 7, 7, 4, 8, 8, 9, 9, 10, 9, 10, 4, 8, 8, 7, 7, 4]\n",
        "num_ids_2": 82,
        "num_ids_4": 236
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == sorted(\n    [1, 2, 3, 4, 5, 6, 7, 8])\nassert     sort_array([7, 8, 1, 2, 3, 4, 5, 6]) == sorted(\n    [1, 2, 3, 4, 5, 6, 7, 8])\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([1, 0, 1, 0]) == [1, 0, 0, 1]\nassert     sort_array([1, 0, 0, 1, 1, 1, 0, 0, 1, 0]) == [0, 1, 1, 1, 0, 0, 0, 1, 0, 1]\nassert     sort_array([0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1]) == [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ",
        "num_ids_2": 74,
        "num_ids_4": 1023
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]) == [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1]\nassert     sort_array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0]) == [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0]\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]) == [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]\nassert     sort_array([1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]) == [1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]\n",
        "num_ids_2": 114,
        "num_ids_4": 228
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([1, 3, 2, 0]) == [0, 1, 2, 3], \"Wrong output\"\nassert     sort_array([1, 3, 2, 0, 1]) == [1, 1, 2, 3, 0], \"Wrong output\"\nassert     sort_array([1, 3, 2, 0, 0, 0, 0, 1]) == [0, 0, 1, 1, 2, 3, 0, 0], \"Wrong output\"\nassert     sort_array([1, 3, 2, 0, 0, 1, 2, 3]) == [0, 0, 1, 1, 2, 2, 3, 3], \"Wrong output\"\nassert     sort_array([1, 3, 2, 0, 0, 1, 0, 1]) == [0, 1, 1, 1, 2, 2, 3, 0], \"Wrong output\"\n",
        "num_ids_2": 64,
        "num_ids_4": 156
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1, 1, 0, 1]) == [0, 1, 1, 1]\nassert     sort_array([1, 1, 0, 1, 0, 1]) == [0, 1, 1, 1, 0, 1]\nassert     sort_array([0, 0, 0, 0, 0, 0, 1, 1, 1]) == [0, 0, 0, 0, 0, 0, 1, 1, 1]\nassert     sort_array([0, 0, 0, 0, 0, 1, 1, 1, 0]) == [0, 0, 0, 0, 0, 1, 1, 1, 0]\nassert     sort_array([1, 1, 1, 0, 0, 0, 1, 1]) == [0, 0, 0, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 58,
        "num_ids_4": 148
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([\n        [4,0,3],\n    [1,5,3],\n    [2,5,0],\n    [4,1,0] ]) == [\n    [1,4,3],\n    [2,5,0],\n    [3,5,0],\n    [4,1,0] ]\n\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     select_words(\"hello world this is a test\", 2) == [\"hll\",\"hello\",\"world\",\"this\",\"is\",\"a\",\"test\"], \"Correct result\"\nassert     select_words(\"hello world this is a test\", 3) == [\"hello\",\"world\",\"this\",\"is\",\"a\",\"test\"], \"Correct result\"\nassert     select_words(\"hello world this is a test\", 5) == [\"hello\",\"world\",\"test\"], \"Correct result\"\nassert     select_words(\"hello world this is a test\", 4) == [], \"Correct result\"\nassert     select_words(\"hello world this is a test\", 1) == [\"this\"], \"Correct result\"\n",
        "num_ids_2": 71,
        "num_ids_4": 122
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    s = 'hello world'\n    n = 3\n    expected_output = ['lo', 'wo', 'll', 'd']\n    assert select_words(s, n) == expected_output\n    s = 'hello world'\n    n = 0\n    expected_output = []\n    assert select_words(s, n) == expected_outpu",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     select_words(\"abcde fghi\", 5) == [\"abde\", \"fghi\"]\nassert select_words(\"abcde fghi\", 4) == [\"abde\", \"fghi\"]\nassert select_words(\"abcde fghi\", 3) == [\"abcde\", \"fghi\"]\nassert select_words(\"abcde fghi\", 2) == [\"abcde\", \"fghi\"]\nassert select_words(\"abcde fghi\", 1) == [\"abcde\", \"fghi\"]\n",
        "num_ids_2": 49,
        "num_ids_4": 97
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     select_words(\"Hello there\", 2) == [\"hel\", \"here\", \"hel\", \"hey\", \"he\"]\nassert     select_words(\"I like apples\", 2) == [\"i like\", \"like apples\"]\nassert     select_words(\"I like apples\", 5) == []\nassert     select_words(\"Hello there\", 0) == []\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    words = []\n    word = \"\"\n    for c in s:\n        if c.isalpha():\n            word += c.lower()\n        else:\n            if len(word) >= n:\n                words.append(word)\n            word = \"\"\n    if len(word) >= n:\n        words.append(word)\n    return words\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     select_words(\"abcd\", 2) == [\"bcd\", \"cd\"], \"Should return ['bcd', 'cd']\"\nassert     select_words(\"abcd\", 0) == [], \"Should return []\"\nassert     select_words(\"abcd\", 6) == [\"abcd\"], \"Should return ['abcd']\"\n",
        "num_ids_2": 51,
        "num_ids_4": 76
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     select_words(\"he likes to play video games and runs\", 2) == ['video', 'game'], \"Error 1\"\nassert     select_words(\"he runs and plays video games\", 2) == ['video', 'game'], \"Error 2\"\nassert     select_words(\"the lazy brown fox jumps\", 2) == ['fox', 'jumps'], \"Error 3\"\nassert     select_words(\"h jumps and jumps and jumps\", 3) == ['jumps', 'h', 'jumps'], \"Error 4\"\nassert     select_words(\"a fox jumps\", 1) == ['fox'], \"Error 5\"\n",
        "num_ids_2": 58,
        "num_ids_4": 119
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     select_words(\"hello world\", 1) == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"r\", \"d\", \"l\", \"o\", \"w\"]\nassert     select_words(\"hello world\", 0) == []\nassert     select_words(\"hello world\", -1) == []\n",
        "num_ids_2": 60,
        "num_ids_4": 75
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nget_closest_vowel(\"apple\") == \"p\"\nget_closest_vowel(\"banana\") == \"p\"\nget_closest_vowel(\"milk\") == \"\"\n\nget_closest_vowel(\"sponge\") == \"p\"\nget_closest_vowel(\"cheese\") == \"s\"\nget_closest_vowel(\"olive\") == \"e\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n\nif __name__ == \"__main__\":\n    # Use doctest format to show you.\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_closest_vowel('water') == 'u'\nassert     get_closest_vowel('fridge') == 'e'\nassert     get_closest_vowel('apple') == 'e'\nassert     get_closest_vowel('fridge') == ''\nassert     get_closest_vowel('bicycle') == 'e'\n",
        "num_ids_2": 39,
        "num_ids_4": 76
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_closest_vowel(\"abcde\") == \"e\"\nassert     get_closest_vowel(\"test\") == \"\"\nassert     get_closest_vowel(\"test\") == \"\"\nassert     get_closest_vowel(\"test\") == \"\"\nassert     get_closest_vowel(\"test\") == \"\"\n",
        "num_ids_2": 37,
        "num_ids_4": 71
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     match_parens([['(', ')'], ['(', ')', ')', '()']]) == 'Yes', \\\n    'Testing Error'\nassert     match_parens([['(', ')'], ['(', ')', ')', '(']]) == 'No', \\\n    'Testing Error'\nassert     match_parens([['(', ')'], ['(', ')', ')', '()'], ['(', ')', ')', '(']]) == 'No', \\\n    'Testing Error'\n",
        "num_ids_2": 65,
        "num_ids_4": 110
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     match_parens(('(())()', '))') == 'Yes', 'Wrong output'\nassert     match_parens(('(()))', '))') == 'No', 'Wrong output'\nassert     match_parens(('(())', '()')) == 'Yes', 'Wrong output'\nassert     match_parens(('(())', '()))')) == 'No', 'Wrong output'\n\nprint('Done!')",
        "num_ids_2": 50,
        "num_ids_4": 101
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmatch_parens(['(())', '()(())', '(()()()()))']) == 'Yes', \\\n    \"Wrong answer!\"\nassert \nmatch_parens(['(())', '()()()())((())', '(())((()))', '()()', '()()()()()', ')((()()']) == 'No', \\\n    \"Wrong answer!\"\nassert \nmatch_parens([]) == 'No', \"Wrong answer!\"\n\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     match_parens(('(())()',)) == 'Yes'\nassert     match_parens(('((()))',)) == 'Yes'\nassert     match_parens(('()',)) == 'No'\nassert     match_parens(('()()()',)) == 'No'\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     match_parens(['(', ')'])     == 'Yes', 'example 1 failed'\nassert     match_parens(['()()', '(())()']) == 'Yes', 'example 2 failed'\nassert     match_parens(['(()()', '()(())']) == 'No', 'example 3 failed'\nassert     match_parens(['()()()', '()']) == 'No', 'example 4 failed'\nassert     match_parens(['((((((']) == 'No', 'example 5 failed'\n",
        "num_ids_2": 50,
        "num_ids_4": 104
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     match_parens(['((()', '((()))']) == 'Yes'\nassert     match_parens(['((())', '(((())']) == 'No'\nassert     match_parens(['((()))', '(((())']) == 'No'\nassert     match_parens(['((()))', '((())))']) == 'No'\nassert     match_parens(['()((())', '((())))']) == 'Yes'\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum([1,2,3,4,5],     1) == [5]\nassert     maximum([1,3,5,7],     2) == [1,3]\nassert     maximum([-5,-3,7,2,4,8,1],     2) == [-5,-3,8]\nassert     maximum([1],     1) == [1]\nassert     maximum([2,4,6,7,3,1,2],     3) == [7,6,2]\n",
        "num_ids_2": 44,
        "num_ids_4": 89
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum([], 0) == []\nassert     maximum([2], 1) == [2]\nassert     maximum([0], 1) == [0]\nassert     maximum([-3, -1, 5, 6], 2) == [-3, -1, 6, 5]\nassert     maximum([1, 3, 5, 7], 2) == [3, 5, 7]\n",
        "num_ids_2": 23,
        "num_ids_4": 64
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum([1,2,3,4,5,6,7,8,9,10,11,12], 4) == [11,12,9,10], \"Should return [11,12,9,10]\"\nassert     maximum([0,0,0,0,0,0,0,0,0,0,0,0], 2) == [0,0], \"Should return [0,0]\"\nassert     maximum([10,2,4,3,5,9,4,6,7,8,10,0,0,0], 3) == [0,0,10], \"Should return [0,0,10]\"\nassert     maximum([], 2) == [], \"Should return []\"\n\nif __name__ == \"__main__\":\n    print(maximum([1,2,3,4,5,6,7,8,9,10,11,12], 4))\n    print(maximum([0,0,0,0,0,0,0,0,0,0,0,0], 2))\n    print(maximum([10,2,4,3,5,9,4,6,7,8,10,0,0,0], 3))\n    print(maximum([], 2))\n",
        "num_ids_2": 98,
        "num_ids_4": 167
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmaximum([1,2,3], 2) == [1,2]\nassert maximum([2,3,5,7,4], 5) == [7,5,4,3,2]\nassert maximum([2,3,5,7,4], 1) == [2,3,5,7]\nassert maximum([2,3,5,7,4], 6) == [2,3,5,7,4]\nassert maximum([2,3,5,7,4], 0) == []\n",
        "num_ids_2": 31,
        "num_ids_4": 85
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum([1, 2, 3], 3) == [3, 3, 3]\nassert maximum([1, 2, 3], 5) == [3, 3, 3, 3, 3]\nassert maximum([1], 1) == [1]\nassert maximum([], 1) == []\nassert maximum([1, 2, 3, 4], 4) == [4, 4, 4, 4]\n",
        "num_ids_2": 45,
        "num_ids_4": 66
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum([10,100,1,10,99,2,10,3], 3) == [100,10,10], \"Wrong maximum\"\nassert     maximum([10,100,1,10,99,2,10,3], 4) == [100,10,10,99], \"Wrong maximum\"\nassert     maximum([10,100,1,10,99,2,10,3], 5) == [100,10,10,99,99], \"Wrong maximum\"\nassert     maximum([10,100,1,10,99,2,10,3], 6) == [100,10,10,100,99], \"Wrong maximum\"\nassert     maximum([10,100,1,10,99,2,10,3], 7) == [100,10,100,100,100,100], \"Wrong maximum\"\n",
        "num_ids_2": 74,
        "num_ids_4": 154
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum([1, 2, 3, 4, 5], 3) ==     [5, 4, 3]\nassert maximum([1, 2, 3, 4, 5], 4) ==     [5, 4, 3, 1]\nassert maximum([1, 2, 3, 4, 5], 5) ==     [5, 4, 3, 1, 2]\nassert maximum([1, 2, 3, 4, 5], 6) ==     [5, 4, 3, 1, 2, 3]\nassert maximum([1, 2, 3, 4, 5], 7) ==     [5, 4, 3, 1, 2, 3, 4]\n",
        "num_ids_2": 53,
        "num_ids_4": 113
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmaximum([1, 2, 5, 2], 1) == [5]\nassert maximum([1, 2, 5, 2], 2) == [1, 5]\nassert maximum([1, 2, 5, 2], 3) == [1, 2, 5]\nassert maximum([1, 2, 5, 2], 4) == [1, 2, 5]\nassert maximum([1, 2, 5, 2], 5) == [1, 2, 5]\n",
        "num_ids_2": 23,
        "num_ids_4": 67
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum([1, 5, 2, 3], 3) == [5, 3, 2]\nassert     maximum([1, 5, 2, 3], 1) == [5, 2, 3]\nassert     maximum([1, 5, 2, 3], 4) == [5, 2, 3]\nassert     maximum([], 1) == []\nassert     maximum([], 2) == []\n",
        "num_ids_2": 46,
        "num_ids_4": 79
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solution([1,2,3,4,5,6,7,8]) == 15, 'Should be 15'\nassert     solution([1,1,3,5]) == 4, 'Should be 4'\nassert     solution([1]) == 1, 'Should be 1'\n",
        "num_ids_2": 52,
        "num_ids_4": 68
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solution([3, 1, 2, 4]) == 5, \"Wrong answer\"\nassert     solution([5, 2, 4, 6, 1, 3]) == 14, \"Wrong answer\"\nassert     solution([1, 3, 5]) == 8, \"Wrong answer\"\n",
        "num_ids_2": 48,
        "num_ids_4": 68
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solution([1,2,3]) == 0, 'OddSum'\nassert     solution([0,0,0]) == 0, 'EvenSum'\nassert     solution([0]) == 0, 'EmptyList'\nassert     solution([-1, -2, -3]) == -6, 'Negative'\nassert     solution([-1, 0, 1, 2, 3]) == 5, 'NegativeOne'\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solution([1,2,3,4,5,6]) == 18, \"error\"\nassert     solution([0,1,2,3,4,5,6]) == 10, \"error\"\nassert     solution([]) == 0, \"error\"\nassert     solution([0,1,2,3,4,5,6,7,8,9]) == 18, \"error\"",
        "num_ids_2": 50,
        "num_ids_4": 95
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solution([0,1,2,3,4]) == 8, \"Wrong\"\nassert     solution([0,1,2,3,4,5,6,7,8]) == 0, \"Wrong\"\nassert     solution([10]) == 10, \"Wrong\"\nassert     solution([10, 11, 12]) == 0, \"Wrong\"\nassert     solution([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -16, \"Wrong",
        "num_ids_2": 54,
        "num_ids_4": 88
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solution([1,2,3,4,5]) == 4, 'wrong solution'\nassert     solution([1,2,3,4]) == 4, 'wrong solution'\nassert     solution([1,2,3,4,5,6]) == 4, 'wrong solution'\n",
        "num_ids_2": 44,
        "num_ids_4": 69
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solution([1, 3, 5]) == 0, \"test 1 Failed\"\nassert     solution([1, 5, 9]) == 0, \"test 2 Failed\"\nassert     solution([5, 8, 9]) == 0, \"test 3 Failed\"\nassert     solution([1, 5]) == 5, \"test 4 Failed\"\nassert     solution([1, 9]) == 9, \"test 5 Failed\"\n",
        "num_ids_2": 40,
        "num_ids_4": 78
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert solution([1, 3, 4, 1, 1]) == 6\nassert solution([1, 3, 4, 1, 1, 1, 1, 1]) == 6\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_elements([], 0) == 0\nassert     add_elements([], 1) == 0\nassert     add_elements([1], 0) == 1\nassert     add_elements([1, 2, 3], 0) == 1\nassert     add_elements([1, 2, 3], 1) == 5\n",
        "num_ids_2": 26,
        "num_ids_4": 58
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_if_sum_is_k(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k,\n    return true if arr can be arranged into an array of integers which adds up to k.\n    Otherwise, return false.\n    \n    Constraints:\n        1 <= len(arr) <= 100\n    \"\"\"\n    pass\n\ndef check_if_sum_is_k(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k,\n    return true if arr can be arranged into an array of integers which adds up to k.\n    Otherwise, return false.\n    \n    Constraints:\n        1 <= len(arr) <= 100\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_elements([-3, 10, -2, -5, -2, 7, 1, 3], 2) == -2\nassert     add_elements([-4, -3, -5, -1, 3, 2, 8], 3) == -4\nassert     add_elements([-5, -2, 4, -3, -2, -1], 2) == -3\nassert     add_elements([-5, -2, 4, -3, -2, -1], 1) == -5\nassert     add_elements([-5, -2, 4, -3, -2, -1], 0) == -5\n",
        "num_ids_2": 64,
        "num_ids_4": 124
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef add_elements2(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\narr = [0]\nk = 1\nassert add_elements(arr, k) == 0\n\narr = [1, 2, 3, 4]\nk = 1\nassert add_elements(arr, k) == 6\n",
        "num_ids_2": 16,
        "num_ids_4": 29
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(add_elements([1, 2, 3, 4, 6, 7], 2))\nprint(add_elements([1, 2, 3, 4, 6, 7], 4))\nprint(add_elements([1, 2, 3, 4, 6, 7], 6))\nprint(add_elements([1, 2, 3, 4, 6, 7], 10))\nprint(add_elements([1, 2, 3, 4, 6, 7], 0))\nprint(add_elements([1, 2, 3, 4, 6, 7], 100))\nprint(add_elements([1, 2, 3, 4, 6, 7, 8], 2))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(7) == [1, 3, 5, 7]\nassert     get_odd_collatz(23) == [1, 3, 5, 8, 13]\nassert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(4) == [1, 2, 4]\n",
        "num_ids_2": 46,
        "num_ids_4": 80
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(2) == [1,3], \"Wrong answer!\"\nassert     get_odd_collatz(10) == [1,2,4,7,11,17,31,61,97,122,134], \"Wrong answer!\"\nassert     get_odd_collatz(100) == [1,2,4,7,11,17,31,61,97,122,134,149,193,277,416,841,1597,2661,6461,12941,1974,4154,7285,11041,18755,39883,76953,127773,191871,438129,780817,1303697,1962693,4377233,7780317,13027283,19172837,43777183,78664311,12726099,20277863,43776283,78687769,12702547,20626767,43765399,79704543,12695091,20256943,44793697,79685889,12671719,20616743,44743761,79545847,12654557,20616531,44574747,79493029,1268029,20268319,44374983,79539221,12648627,20265723,44504883,79532329,12623881,20256117,44551677,79535303,12620699,20257767,44501683,79483029,12628029,20270549,44511683,79494029,12620581,20266801,44514483,79502229,12622299,20257417,44504631,79506429,12622647,20267711,44551723,79510489,12622099,20275903,44507609,79503661,12622129,20258541,44551723,79509751,12622429,20281581,44552633,79508491,12622557,20285489,44552741,79510941,12622341,20291089,44552911,79509121,12623077,20291829,44552941,79511159,12623161,20292833,44553089,79511459,12623563,20294561,44553089,79511289,12623661,20294921,44553213,79511329,12631519,20295451,44553313,79509451,12623889,20295679,44553413,79511831,12623953,20295519,44553463,79511639,12624009,20296627,44553539,79511651,12624051,20296117,44553637,79511219,12624087,20296169,44553741,79511579,12624137,20296161,44553833,79510683,12624181,20296289,44553923,79509851,12624259,20296331,44554041,79510323,12624349,20296627,44554101,79510683,12624381,20297039,44554213,79510931,12624429,20297501,44554329,79509651,12624471,20297653,44554431,79508991,12624489,20297521,44554529,79509499,12624571,20297619,44554541,79511459,12624603,20297711,44554589,79509709,12624653,20298113,44554631,79510977,12624759,20298517,44554741,79511473,12624809,20298671,44554831,79510681,12624923,20298763,44554841,79509769,12625007,20298809,44554921,79511459,12625121,20298993,44555033,79509943,12625127,20299181,44555061,79511659,12625169,20299247,44555073,795",
        "num_ids_2": 64,
        "num_ids_4": 1020
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) ==     [1]\nassert     get_odd_collatz(2) ==     [1,2]\nassert     get_odd_collatz(3) ==     [1,2,3]\nassert     get_odd_collatz(4) ==     [1,2,3,5]\nassert     get_odd_collatz(5) ==     [1,2,3,5,8]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    get_odd_collatz(1) == 1\n    get_odd_collatz(2) == 2\n    get_odd_collatz(3) == 3\n    get_odd_collatz(4) == 5\n    get_odd_collatz(5) == 8\n    get_odd_collatz(6) == 15\n    get_odd_collatz(7) == 20\n    get_odd_collatz(8) == 24\n    get_odd_collatz(9) == 27\n    get_odd_collatz(10) == 40\n    get_odd_collatz(15) == 210\n    get_odd_collatz(20) == 210\n    get_odd_collatz(25) == 225\n    get_odd_collatz(30) == 210\n    get_odd_collatz(35) == 210\n    get_odd_collatz(40) == 40\n    get_odd_collatz(100) == 400\n    get_odd_collatz(1000) == 23600\n    get_odd_collatz(10000) == 91680\n    get_odd_collatz(1000000) == 23600000\n\n\ndef get_odd_collatz_with_limit(n, limit):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always\n    reach 1.\n\n    Note: \n        1. The list has the maximum size of limit.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(3) == [3, 1]\nassert     get_odd_collatz(2) == [2, 1]\nassert     get_odd_collatz(3) == [3, 1]\nassert     get_odd_collatz(5) == [5, 4, 2, 1, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(4) == [1, 2, 3, 5]\nassert     get_odd_collatz(5) == [1, 2, 3, 5, 8]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(4) == [1, 2, 3, 5]\nassert     get_odd_collatz(5) == [1, 2, 3, 5, 8]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2]\nassert     get_odd_collatz(3) == [3,1]\nassert     get_odd_collatz(4) == [4,2]\nassert     get_odd_collatz(5) == [5,4,2]\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     valid_date('1-1-2012')\nassert     valid_date('1-1-2011')\nassert     valid_date('1-1-2013')\nassert     valid_date('3-1-2012')\nassert     valid_date('3-1-2013')\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     valid_date('') == False\nassert     valid_date('') == False\nassert     valid_date('blabla') == False\nassert     valid_date('2-22-2012') == True\nassert     valid_date('2-22-2012') == True\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     valid_date(\"\") == False, \"Your function does not raise Error\"\nassert     valid_date(\"12\") == False, \"Your function does not raise Error\"\nassert     valid_date(\"12-01\") == True, \"Your function does not raise Error\"\nassert     valid_date(\"12-01-2020\") == True, \"Your function does not raise Error\"\nassert     valid_date(\"12-1-2020\") == True, \"Your function does not raise Error\"\n",
        "num_ids_2": 39,
        "num_ids_4": 85
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \n\n\n\n\n\n\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     valid_date('10-25-1944') == True\nassert    valid_date('1-10-1944') == False\nassert    valid_date('10-31-1944') == False\nassert    valid_date('1-1-1944') == False\nassert    valid_date('10-25-1994') == False\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Pass\" if valid_date(\"10-10-2012\") == True else \"Fail\")\nprint(\"Pass\" if valid_date(\"31-01-2019\") == False else \"Fail\")\nprint(\"Pass\" if valid_date(\"30-02-2023\") == True else \"Fail\")\nprint(\"Pass\" if valid_date(\"3-15-2020\") == True else \"Fail\")\nprint(\"Pass\" if valid_date(\"10-01-2022\") == False else \"Fail\")\nprint(\"Pass\" if valid_date(\"10-08-2040\") == False else \"Fail\")\nprint(\"Pass\" if valid_date(\"1-1-2019\") == False else \"Fail\")\nprint(\"Pass\" if valid_date(\"10-10-2012\") == False else \"Fail\")\nprint(\"Pass\" if valid_date(\"30-10-2039\") == True else \"Fail\")\nprint(\"Pass\" if valid_date(\"01-01-2030\") == True else \"Fail\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     valid_date(\"03-06-2003\") == True, \"Example test case does not pass.\"\nassert     valid_date(\"1-6-2019\") == True, \"Example test case does not pass.\"\nassert     valid_date(\"0-31-2019\") == False, \"Example test case does not pass.\"\nassert     valid_date(\"01-31-1999\") == False, \"Example test case does not pass.\"\nassert     valid_date(\"\") == False, \"Example test case does not pass.\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     valid_date(\"\")\nassert     valid_date(\"10-10-2010\")\nassert     valid_date(\"-10-10-2010\")\nassert     valid_date(\"10-10\")\nassert     valid_date(\"10-10-2010\")\n",
        "num_ids_2": 21,
        "num_ids_4": 46
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert valid_date('') == False\nassert valid_date('a') == False\nassert valid_date('12-13-15') == True\nassert valid_date('12-29-17') == True\n",
        "num_ids_2": 13,
        "num_ids_4": 37
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_words('foo,bar,baz') == ['foo', 'bar', 'baz']\nassert     split_words('foo, bar, baz') == ['foo', 'bar', 'baz']\nassert     split_words('foo') == ['foo']\nassert     split_words('foo, bar, baz,') == ['foo', 'bar', 'baz']\nassert     split_words('foo,bar,baz') == ['foo', 'bar', 'baz']\n",
        "num_ids_2": 50,
        "num_ids_4": 89
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('(1)')\nprint('-->', split_words('hastak ippana'))\nprint('-->', split_words('is the game fun'))\nprint('-->', split_words('a piece of wood'))\nprint('-->', split_words('the quick brown fox jumps over the lazy dog'))\nprint('-->', split_words('what is a lazy man'))\n\nassert \nprint('(2)')\nprint('-->', split_words('hello world'))\nprint('-->', split_words('the rain in spain'))\nprint('-->', split_words('football'))\nprint('-->', split_words('a cat'))\nprint('-->', split_words('in a cat we see'))\n\n\ndef get_words_count(txt):\n    '''\n    Given a string of words split on whitespace, if no whitespaces exists in the text you should split on commas ',' if no commas\n    exists you should return the number of lower-case letters with odd order in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('abc') == ['abc']\nassert     split_words('ab    c') == ['ab', 'c']\nassert     split_words('ab,, c') == ['ab', 'c']\nassert     split_words('ab, c') == ['ab', 'c']\nassert     split_words('ab; c') == ['ab', 'c']\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_words('hello world') == ['hello', 'world']\nassert     split_words('hello, world') == ['hello', 'world']\nassert     split_words('hello, world!') == ['hello', 'world', '!']\nassert     split_words('hello, world, how are you?') == ['hello', 'world', 'how are', 'you', '?']\nassert     split_words('hello, world, how are you!') == ['hello', 'world', 'how are', 'you', '!']\n",
        "num_ids_2": 35,
        "num_ids_4": 90
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_words('Hello, I am a single-space message') == ['Hello', 'I', 'am', 'a','single-space','message']\nassert     split_words('Hello, I am a message with a comma, double space, and a new line') == ['Hello', 'I', 'am', 'a','message', 'with', 'a', 'comma', 'double space', 'and', 'a', 'new line']\nassert     split_words('Hello, I am a message with a comma and a colon, and a space and a semicolon') == ['Hello', 'I', 'am', 'a','message', 'with', 'a', 'comma', 'and', 'a', 'colon', 'and', 'a','space and', 'a','semicolon']\nassert     split_words('Hello, I am a message with a semicolon and a colon, and a space') == ['Hello', 'I', 'am', 'a','message', 'with', 'a','semicolon', 'and', 'a', 'colon', 'and', 'a','space']\nassert     split_words('Hello, I am a message with a comma and a colon, and a space and a semicolon') == ['Hello', 'I', 'am', 'a','message', 'with', 'a', 'comma', 'and', 'a', 'colon', 'and', 'a','space and', 'a','semicolon']\n",
        "num_ids_2": 100,
        "num_ids_4": 249
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_words(\"Hello, world!\") == [\"Hello\", \"world!\"]\nassert     split_words(\"World, Hello\") == [\"World\", \"Hello\"]\nassert     split_words(\"Hello, World!\") == [\"Hello\", \"World!\"]\nassert     split_words(\"Hello, World?\") == [\"Hello\", \"World?\"]\nassert     split_words(\"a,b,c,d\") == [\"a\", \"b\", \"c\", \"d\"]\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert split_words('hello, how are you?') == ['hello', 'how', 'are', 'you']\nassert split_words('hello, how are you') == ['hello', 'how are you']\nassert split_words('hello,how are you?') == ['hello', 'how are you']\n",
        "num_ids_2": 6,
        "num_ids_4": 53
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_words('Hello World') == ['Hello', 'World'], \"Should return ['Hello', 'World']\"\nassert     split_words('Hello, World') == ['Hello', 'World'], \"Should return ['Hello', 'World']\"\nassert     split_words('Hello, World, How are you?') == ['Hello', 'World', 'How are you?'], \"Should return ['Hello', 'World', 'How are you?']\"\nassert     split_words('Hello, World, How are, you?') == ['Hello', 'World', 'How are,', 'you?'], \"Should return ['Hello', 'World', 'How are', 'you?']\"\nassert     split_words('Hello, World, How are, you?') == ['Hello', 'World', 'How are', 'you?'], \"Should return ['Hello', 'World', 'How are', 'you?']\"\n",
        "num_ids_2": 57,
        "num_ids_4": 151
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words('Hello, world!') == ['Hello', 'world']\nassert     split_words('Hello, world, are you ready? ') == ['Hello', 'world', 'are', 'you','ready']\nassert     split_words('Hello, world, are you ready?') == ['Hello', 'world', 'are', 'you','ready']\nassert     split_words('Hello, world, are you ready?!') == ['Hello', 'world', 'are', 'you','ready']\nassert     split_words('Hello, world, are you ready?! ') == ['Hello', 'world', 'are', 'you','ready']\n",
        "num_ids_2": 51,
        "num_ids_4": 113
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(split_words('The quick brown fox jumps over the lazy dog'))\nprint(split_words('one,two,three,four'))\nprint(split_words('abcd,edcba'))\n\n\n\ndef split_words2(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True, \"Not ascending\"\nassert     is_sorted([1, 2, 2, 3, 4]) == False, \"Duplicates\"\nassert     is_sorted([1, 1, 2, 3, 4]) == True, \"No duplicates\"\nassert     is_sorted([1, 2, 1, 2, 3]) == False, \"1 duplicates\"\nassert     is_sorted([1, 2, 1, 2, 1]) == True, \"1 duplicate\"\n",
        "num_ids_2": 51,
        "num_ids_4": 103
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sorted([3,2,1]) == True, \"didn't pass is_sorted\"\nassert     is_sorted([4,3,2,1]) == False, \"didn't pass is_sorted\"\nassert     is_sorted([3,3,2,1]) == False, \"didn't pass is_sorted\"\n",
        "num_ids_2": 54,
        "num_ids_4": 82
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_sorted_optimized(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    # check whether the list is empty\n    if len(lst) < 2:\n        return True\n    # if list has more than 1 element, there can be an inversion\n    if len(lst) > 1:\n        # grab the first and last element\n        first = lst[0]\n        last = lst[-1]\n        # loop through all the other elements\n        for i in range(len(lst) - 1):\n            # if the first and last element are not equal, return False\n            if first!= lst[i]:\n                return False\n        # if loop has finished, the list is sorted, return True\n        return True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sorted([1,2,3,4]) == True, \\\n            'List is not sorted'\nassert     is_sorted([1,2,2,3]) == False, \\\n            'List has duplicate number'\nassert     is_sorted([]) == True, \\\n            'Empty list is sorted'\nassert     is_sorted([-2,-1,0,2]) == False, \\\n            'List has negative numbers'\n",
        "num_ids_2": 40,
        "num_ids_4": 74
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef two_number_sum(lst, target):\n    '''\n    Given a sorted list of numbers, return the index\n    of two different elements in the list that add up to the target\n    number.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert is_sorted([1,2,2,3,4]) == True\nassert is_sorted([1,2,2,4,5]) == False\nassert is_sorted([1,2,3,4,5]) == True\n",
        "num_ids_2": 22,
        "num_ids_4": 60
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('Testing is_sorted...')\nassert(is_sorted([1,2,3,3]) == True)\nassert(is_sorted([3,1,2,3]) == False)\nassert(is_sorted([1,1,2,2]) == True)\n",
        "num_ids_2": 22,
        "num_ids_4": 60
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (1, 1)) == \"NO\"\nassert     intersection((1, 3), (3, 4)) == \"YES\"\nassert     intersection((3, 4), (1, 3)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (1, 4)) == \"YES\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 2)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nintersection((1, 3), (2, 4)) == \"YES\"\nintersection((0, 5), (1, 2)) == \"NO\"\nintersection((1, 5), (0, 4)) == \"NO\"\nassert intersection((2, 7), (3, 6)) == \"NO\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"All tests passed!\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection(interval(1, 3), interval(2, 4)) == \"YES\"\nassert     intersection(interval(1, 3), interval(2, 5)) == \"NO\"\nassert     intersection(interval(1, 3), interval(3, 4)) == \"NO\"\nassert     intersection(interval(1, 3), interval(3, 6)) == \"NO\"\nassert     intersection(interval(1, 4), interval(2, 5)) == \"NO\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test case\n    assert (intersection((1, 3), (2, 4))) == \"YES\"\n    assert (intersection((1, 3), (2, 4))) == \"YES\"\n    assert (intersection((1, 3), (2, 4))) == \"YES\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection((1,3),(2,4)) == \"NO\"\nassert     intersection((1,2),(2,4)) == \"NO\"\nassert     intersection((1,3),(1,3)) == \"YES\"\nassert     intersection((1,2),(2,3)) == \"YES\"\nassert     intersection((1,3),(4,5)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_intersection():\n    assert intersection((1, 2), (2, 4)) == \"NO\"\n    assert intersection((1, 3), (2, 4)) == \"YES\"\n    assert intersection((1, 2), (3, 4)) == \"NO\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prod_signs([1, -1, 1]) == 0, \"Correctness check for arr = [] failed\"\nassert     prod_signs([1, 1, 1, 1, -1]) == 1, \"Correctness check for arr = [1, 1, 1, 1, -1] failed\"\nassert     prod_signs([1, 1, 1, 1, 1, 1, -1]) == 5, \"Correctness check for arr = [1, 1, 1, 1, 1, 1, -1] failed\"\nassert     prod_signs([1, 1, 1, 1, 1, -1, 1, 1, 1, -1]) == 10, \"Correctness check for arr = [1, 1, 1, 1, 1, -1, 1, 1, 1, -1] failed\"\nassert     prod_signs([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1]) == 10, \"Correctness check for arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, 1] failed\"\n",
        "num_ids_2": 73,
        "num_ids_4": 191
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(prod_signs([1, 2, 3]))\nprint(prod_signs([1, 2, -3]))\nprint(prod_signs([-1, 2, 3]))\nprint(prod_signs([1, -2, 3]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prod_signs([1,2,-3,4]) == -1\nassert     prod_signs([0,1,-2,4]) == 0\nassert     prod_signs([1,2,3,4]) == -1\nassert     prod_signs([-1,2,-3,4]) == 3\nassert     prod_signs([-1,1,-1,-4]) == 2\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prod_signs([1,-2,3]) == 1\nassert     prod_signs([-1,-2,3]) == 0\nassert     prod_signs([-1,-2,-3]) == 0\nassert     prod_signs([-1,2,3]) == 1\nassert     prod_signs([1,2,-3]) == 0\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (prod_signs([1, 1, 1]) == None), \\\n        \"Wrong return value\"\nassert     (prod_signs([1, -1, 1]) == None), \\\n        \"Wrong return value\"\nassert     (prod_signs([1, 1, 0]) == 1), \\\n        \"Wrong return value\"\nassert     (prod_signs([1, -1, 0]) == -1), \\\n        \"Wrong return value\"\nassert     (prod_signs([-1, -1, 0]) == 0), \\\n        \"Wrong return value\"\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prod_signs([1, -1, -1, -1, -1, -1]) == -1\nassert     prod_signs([1, 1, 1, 1, 1, 1]) == 6\nassert     prod_signs([1, 1, 1, 1, -1, 1]) == 3\nassert     prod_signs([1, 1, 1, 1, -1, -1]) == 1\nassert     prod_signs([]) == None\n",
        "num_ids_2": 52,
        "num_ids_4": 101
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(prod_signs([-1, -1, -1, -1]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prod_signs([1, 2, 3]) == 6, \"Wrong result for arr = [-1, 2, 3]!\"\nassert     prod_signs([1, -2, 3]) == 6, \"Wrong result for arr = [-1, -2, 3]!\"\nassert     prod_signs([1, 2, 3, 4]) == 6, \"Wrong result for arr = [1, -2, 3, 4]!\"\nassert     prod_signs([1, -2, 3, 4]) == 6, \"Wrong result for arr = [1, -2, 3, -4]!\"\nassert     prod_signs([]) == None, \"Wrong result for arr = []!\"\n",
        "num_ids_2": 68,
        "num_ids_4": 146
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prod_signs([-1, 0, 0, 1, 2]) is None, \"This\"\nassert     prod_signs([-1, 0, 0, 1, 2, -2]) == None, \"This\"\nassert     prod_signs([-1, -2, -3, -4, -5]) == None, \"This\"\nassert     prod_signs([-1, -2, -3, -4, -5, -6]) == None, \"This\"\nassert     prod_signs([-1, -2, -3, -4, -5, -6, -7, -8]) == None, \"This\"\n",
        "num_ids_2": 55,
        "num_ids_4": 118
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prod_signs([1, 2]) == 0\nassert     prod_signs([1, -2]) == 1\nassert     prod_signs([1, 2, 3]) == 0\nassert     prod_signs([-1, -2, -3]) == 0\nassert     prod_signs([]) == None\n",
        "num_ids_2": 31,
        "num_ids_4": 68
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], 1) == [1, 2, 1], \"Wrong solution!\"\nassert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], 2) == [1, 3, 1, 2, 1], \"Wrong solution!\"\nassert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], 3) == [1, 3, 1, 2, 1], \"Wrong solution!\"\nassert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], 4) == [1, 3, 1, 2, 1], \"Wrong solution!\"\nassert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], 5) == [1, 3, 1, 2, 1], \"Wrong solution!\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert minPath([[3,8,1,3],[2,7,4,2],[5,4,9,6],[10,11,13,12]], 5) == [4,9,11,12]\nassert minPath([[4,6,6,8],[2,8,9,3],[8,9,4,7],[2,5,3,1]], 4) == [4,3,1,5]\n",
        "num_ids_2": 54,
        "num_ids_4": 105
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"Our output:\")\nfor i in minPath([[0, 1, 1, 1, 0],\n        [1, 0, 1, 1, 0],\n        [1, 0, 0, 1, 0],\n        [1, 0, 1, 0, 0],\n        [1, 0, 1, 0, 0]]):\n    print(i)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minPath([[0]], 0) == []\nassert     minPath([[1]], 0) == []\nassert     minPath([[1, 2],\n                  [3, 4]], 2) == [1, 2]\nassert     minPath([[1, 2, 3, 4, 5],\n                  [16, 17, 18, 19, 6],\n                  [7, 8, 9, 10, 11],\n                  [12, 13, 14, 15, 12]], 3) == [1, 2, 3, 4, 5, 12, 13, 14, 15]\nassert     minPath([[1, 2, 3, 4, 5],\n                  [16, 17, 18, 19, 6],\n                  [7, 8, 9, 10, 11],\n                  [12, 13, 14, 15, 12]], 6) == [1, 2, 3, 4, 5, 12, 13, 14, 15]",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nclass Solution:\n    def minPath(self, grid: List[List[int]], k: int) -> List[int]:\n        \"\"\"\n        Running time: O(m*n*k)\n        Space complexity: O(m*n)\n        \"\"\"\n        # get the length of the grid\n        m, n = len(grid), len(grid[0])\n\n        # if the grid is empty, return empty list\n        if not grid or k == 0 or grid == [[]]:\n            return []\n\n        # convert the grid to a dict\n        grid = {(i, j): grid[i][j] for i in range(m) for j in range(n)}\n\n        # create a queue\n        q = [(0, 0)]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], 1) == [1, 2, 1], \"Should be 1, 2, 1\"\nassert minPath([[3, 2, 1], \n                [1, 3, 1], \n                [2, 1, 3]], 1) == [1, 2, 3], \"Should be 1, 2, 3\"\nassert minPath([[2, 3, 2], \n                [3, 1, 2], \n                [2, 1, 1]], 1) == [1, 1, 1], \"Should be 1, 1, 1\"\nassert minPath([[1, 2, 3], \n                [1, 2, 3], \n                [1, 2, 3]], 1) == [1, 2, 3], \"Should be 1, 2, 3\"\nassert minPath([[2, 3, 1], \n                [1, 3, 1], \n                [3, 1, 2]], 1) == [1, 1, 2], \"Should be 1, 1, 2\"\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Use '_' for testing.\\n\")\n    # Test 1\n    grid = [[1,1,1,1],\n        [1,1,1,1],\n        [1,1,1,1],\n        [1,1,1,1]]\n    k = 1\n    assert minPath(grid, k) == [1]\n\n    # Test 2\n    grid = [[1,1,1,1],\n        [1,1,1,1],\n        [1,1,1,1],\n        [1,1,1,1]]\n    k = 2\n    assert minPath(grid, k) == [1,1,1,1]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\nprint(tri(2))\nprint(tri(3))\nprint(tri(5))\nprint(tri(10))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert tri(2) == [3, 1]\nassert tri(4) == [3, 2, 1, 1]\nassert tri(5) == [3, 4, 2, 2, 1, 1]\n",
        "num_ids_2": 15,
        "num_ids_4": 51
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tri(2) == [3, 1]\nassert     tri(4) == [3, 2, 3, 1]\nassert     tri(5) == [3, 2, 3, 1, 4, 3]\nassert     tri(7) == [3, 2, 3, 1, 4, 3, 4, 2]\nassert     tri(9) == [3, 2, 3, 1, 4, 3, 4, 2, 5, 4]\n",
        "num_ids_2": 30,
        "num_ids_4": 76
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntri(2) == [3, 1]\nassert \ntri(4) == [2, 3, 2, 2]\nassert \ntri(3) == [2, 3, 3]\nassert \ntri(5) == [2, 3, 4, 5, 4]\nassert \ntri(6) == [2, 3, 4, 5, 6, 6]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tri(5) == [1, 3, 3, 3, 3]\nassert     tri(4) == [1, 2, 3, 4]\nassert     tri(3) == [1, 2, 3]\nassert     tri(2) == [1, 2]\nassert     tri(1) == [3]\n",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tri(2) == [1, 3]\nassert     tri(4) == [1, 2, 4]\nassert     tri(6) == [1, 3, 4, 7, 11, 16]\nassert     tri(10) == [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\nassert     tri(15) == [1, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n",
        "num_ids_2": 28,
        "num_ids_4": 82
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\n[OK] - tri(2) == tri(4) and tri(3) == tri(8)')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntri(2) == [1, 1]\ntri(4) == [1, 2, 3, 4]\ntri(6) == [1, 1, 2, 4, 7, 13, 24]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digits(25)    == 0\nassert     digits(2)        == 0\nassert     digits(4)        == 0\nassert     digits(10)        == 0\nassert     digits(23)        == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digits(20) == 0, 'Should be 0'\nassert     digits(999) == 0, 'Should be 0'\nassert     digits(1) == 1, 'Should be 1'\nassert     digits(10) == 0, 'Should be 0'\nassert     digits(12) == 0, 'Should be 0'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nn = 1234\nprint digits(n)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digits(101) == 1\nassert     digits(11) == 2\nassert     digits(12) == 0\nassert     digits(1) == 1\nassert     digits(0) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 0\nassert     digits(2) == 0\nassert     digits(3) == 0\nassert     digits(4) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert digits(1) == 1\nassert digits(2) == 1\nassert digits(3) == 1\nassert digits(4) == 1\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digits(1) == 0\nassert     digits(42) == 0\nassert     digits(1234567890) == 0\nassert     digits(555) == 0\nassert     digits(99999) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert digits(1) == 1\nassert digits(23) == 2\nassert digits(42) == 4\n\ndef digits_all_even(n):\n    \"\"\"Given a positive integer n, return whether all digits are even.\n    If so, return True.  If not, return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_nested('(((6))))') == True, '6 should be enclosed in brackets'\nassert is_nested('[(3)]') == False, '3 should not be enclosed in brackets'\nassert is_nested('([])([])') == False, '2 nested lists should not be enclosed in brackets'\nassert is_nested('([])([])') == False, '2 nested lists should not be enclosed in brackets'\n",
        "num_ids_2": 26,
        "num_ids_4": 77
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_nested(\"([)\")\nassert is_nested(\"()[()]\")\nassert not is_nested(\"(]\")\nassert not is_nested(\"([)][]\")\n",
        "num_ids_2": 14,
        "num_ids_4": 37
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_nested(\"()\") == True, \"should be True\"\nassert     is_nested(\"(())\") == True, \"should be True\"\nassert     is_nested(\"(()(()))\") == True, \"should be True\"\nassert     is_nested(\"()((()()))\") == True, \"should be True\"\nassert     is_nested(\"((()())()((())))\") == False, \"should be False\"\n",
        "num_ids_2": 37,
        "num_ids_4": 81
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_nested('<a>') == False\nassert     is_nested('<a><a><a></a>') == True\nassert     is_nested('<a>b</a><c><a><d></c>f</a>') == True\nassert     is_nested('<a><b></a><c><d></c></d>f</a>') == False\nassert     is_nested('<a><b></a><c><d></d></c>f</a>') == False\n",
        "num_ids_2": 34,
        "num_ids_4": 94
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    (is_nested(\"((((()))))\") == True), \"Too many brackets\"\n    (is_nested(\"((())\") == False), \"Too few brackets\"\n    (is_nested(\"((())())\") == True), \"Nested in square brackets\"\n    (is_nested(\"()))\") == False), \"No brackets in the correct order\"\n    (is_nested(\"([{}])\") == True), \"Valid input\"\n    (is_nested(\"{[]}\") == True), \"Valid input\"\n    (is_nested(\"{([}])\") == False), \"Nested in wrong order\"\n    (is_nested(\"{[[]]\") == False), \"No brackets in the correct order\"\n    (is_nested(\"{{}}\") == False), \"No brackets in the correct order\"\n    (is_nested(\"\") == False), \"Empty string",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_nested('[[]]') == True\nassert     is_nested('[[[]]]') == False\nassert     is_nested('[[[]]]') == False\nassert     is_nested('[[[[]]]]') == False\nassert     is_nested('[[[[]]]]') == False\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('Pass' if is_nested(\"()\") == True else 'Fail')\nprint('Pass' if is_nested(\"()[]\") == True else 'Fail')\nprint('Pass' if is_nested(\"(()())\") == True else 'Fail')\nprint('Pass' if is_nested(\"(()()[]\") == False else 'Fail')\nprint('Pass' if is_nested(\"(((())))\") == True else 'Fail')\nprint('Pass' if is_nested(\"((()()[]\")) == False else 'Fail')\n\ndef is_paired(string):\n    '''\n    Create a function that takes a string as input. The function should return true if and \n    only if the string contains a valid pairing of parentheses.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_nested('()')\nassert not is_nested('(((')\nassert not is_nested('([)]')\nassert is_nested('[]')\n",
        "num_ids_2": 13,
        "num_ids_4": 35
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([4, 5, 6]) == 37\nassert     sum_squares([-2, 4, 5, 6]) == 14\nassert     sum_squares([1, 2, 3, 4]) == 32\nassert     sum_squares([-3, 4, 5, 6]) == 27\n",
        "num_ids_2": 27,
        "num_ids_4": 64
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef list_sum(lst):\n    \"\"\"You are given a list of numbers.\n    Return the sum of all the numbers in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 26\nassert sum_squares([1, -2, 3, -4, 5]) == 29\nassert sum_squares([1.2, -2.4, 3.8, -4.6, 5.9]) == 1.1499999999999999\n",
        "num_ids_2": 41,
        "num_ids_4": 78
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_squares([1, 2, 3]) == 14\nassert     sum_squares([0, 0, 1]) == 1\nassert     sum_squares([5, 4, 3, 2]) == 29\nassert     sum_squares([1, -2, 3, 4, 5]) == 34\nassert     sum_squares([1, 2, 3, -4, 5]) == 9\n",
        "num_ids_2": 32,
        "num_ids_4": 71
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_squares([2,4,5,6,1,9]) == 30, '2^2 + 4^2 + 5^2 + 6^2 + 1^2 + 9^2 = 30'\nassert     sum_squares([4,5,9]) == 30, '4^2 + 5^2 + 9^2 = 30'\nassert     sum_squares([0,2,3]) == 4, '0^2 + 2^2 + 3^2 = 4'\nassert     sum_squares([5]) == 10, '5^2 = 10'\n",
        "num_ids_2": 82,
        "num_ids_4": 134
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_squares([2,3,4,5]) == 11\nsum_squares([]) == 0\nsum_squares([2,0,1,5]) == 9\nprint('Test passed.')\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_squares([1, 1, 2]) == 6\nassert     sum_squares([1, -2, 0]) == 1\nassert     sum_squares([2, -4, 8]) == 36\nassert     sum_squares([0, -10, -2]) == -32\nassert     sum_squares([-2, 4, -6, 8]) == -12\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('vadim') == True\nassert     check_if_last_char_is_a_letter('123') == False\nassert     check_if_last_char_is_a_letter('asd') == False\nassert     check_if_last_char_is_a_letter('Hello world') == False\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('a') == True\nassert     check_if_last_char_is_a_letter('abc') == True\nassert     check_if_last_char_is_a_letter('abcdef') == True\nassert     check_if_last_char_is_a_letter('abcdefg') == False\nassert     check_if_last_char_is_a_letter('abc123defg') == False\n",
        "num_ids_2": 42,
        "num_ids_4": 87
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert not(check_if_last_char_is_a_letter(\"This is a test of the emergency broadcasting system. Emergency broadcast sir\"))\nassert not(check_if_last_char_is_a_letter(\"This is a test of the emergency broadcast system. Emergency broadcast sir is a boy\"))\nassert check_if_last_char_is_a_letter(\"This is a test of the emergency broadcast system. Emergency broadcast sir a boy is a girl\")\n",
        "num_ids_2": 6,
        "num_ids_4": 73
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hello world\") == True, \\\n        \"Error at line number 1\"\nassert     check_if_last_char_is_a_letter(\"X\") == False, \\\n        \"Error at line number 2\"\nassert     check_if_last_char_is_a_letter(\"a\") == False, \\\n        \"Error at line number 3\"\n",
        "num_ids_2": 47,
        "num_ids_4": 70
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('the cat in the hat') == False\nassert     check_if_last_char_is_a_letter('the cat') == False\nassert     check_if_last_char_is_a_letter('the hat') == True\nassert     check_if_last_char_is_a_letter('the cat and the hat') == False\nassert     check_if_last_char_is_a_letter('the cat and a hat') == False\n",
        "num_ids_2": 47,
        "num_ids_4": 94
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter(\"This\") == True\nassert     check_if_last_char_is_a_letter(\"Hello World\") == False\nassert     check_if_last_char_is_a_letter(\"1234\") == True\nassert     check_if_last_char_is_a_letter(\"12 34\") == False\n",
        "num_ids_2": 43,
        "num_ids_4": 87
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"\") == False\nassert     check_if_last_char_is_a_letter(\"a\") == False\nassert     check_if_last_char_is_a_letter(\"ab\") == True\nassert     check_if_last_char_is_a_letter(\"ab c\") == False\nassert     check_if_last_char_is_a_letter(\"abcd\") == False\n",
        "num_ids_2": 41,
        "num_ids_4": 84
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(\"Hi\") == False\nassert     check_if_last_char_is_a_letter(\"Bye\") == False\nassert     check_if_last_char_is_a_letter(\"hello\") == True\nassert     check_if_last_char_is_a_letter(\"\") == False\nassert     check_if_last_char_is_a_letter(\"word\") == True\n",
        "num_ids_2": 43,
        "num_ids_4": 84
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_a_name(txt):\n    '''\n    Create a function that returns True if the last word of a\n    given string consists of letters only and is not empty, \n    and False otherwise.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Can the given array be arranged in a way to maximize the maximum \"\n        \"range of elements in it?\")\n    arr = [5, 9, 3, 6, 7, 2, 4]\n    print(f\"The array given is: {arr}\")\n    print(f\"Maximum range can be achieved in {can_arrange(arr)}\")\n\n\n    print(\"\\nCan the given array be arranged in a way to maximize the maximum \"\n        \"range of elements in it?\")\n    arr = [5, 9, 2, 4]\n    print(f\"The array given is: {arr}\")\n    print(f\"Maximum range can be achieved in {can_arrange(arr)}\")\n\n    print(\"\\nCan the given array be arranged in a way to maximize the maximum \"\n        \"range of elements in it?\")\n    arr = [5, 9, 2, 4]\n    print(f\"The array given is: {arr}\")\n    print(f\"Maximum range can be achieved in {can_arrange(arr)}\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5, 6, 7]) == 2\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 2]) == 5\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 8]) == 5\nassert     can_arrange([5, 5, 5]) == -1\n",
        "num_ids_2": 50,
        "num_ids_4": 105
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncan_arrange([0, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2]) == 2\nassert can_arrange([0, 1, 2, 1, 2, 1, 0, 1, 2]) == 3\n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    index = 0\n    while arr[index] <= arr[index + 1]:\n        index += 1\n    return index\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     can_arrange([1,2,3,4,5,7]) == 3\nassert     can_arrange([1,2,3,4,5,6]) == -1\nassert     can_arrange([1,2,3,4,5]) == 3\nassert     can_arrange([1,2,3,4,5,6,7]) == 5\nassert     can_arrange([1,2,3,4,5,6,7,8]) == 4\n",
        "num_ids_2": 45,
        "num_ids_4": 89
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(can_arrange([1, 2, 3])) # should print -1\nprint(can_arrange([1, 2, 3, 1])) # should print 0\nprint(can_arrange([1, 1, 3, 1])) # should print 1\nprint(can_arrange([1, 1, 3])) # should print 2\nprint(can_arrange([1, 1, 1])) # should print 3\nprint(can_arrange([2, 1])) # should print -1\nprint(can_arrange([])) # should print -1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncan_arrange([]) == -1\ncan_arrange([5]) == 0\ncan_arrange([1, 5]) == 1\ncan_arrange([1, 2, 3, 4, 5]) == 2\ncan_arrange([1, 2, 3, 4, 5, 5]) == -1\ncan_arrange([1, 2, 3, 4, 5, 6]) == 1\ncan_arrange([3, 2, 3, 4, 5]) == -1\ncan_arrange([3, 2, 3, 4, 5, 6]) == -1\ncan_arrange([3, 2, 3, 4, 5, 6, 6]) == 2\ncan_arrange([3, 2, 3, 4, 5, 6, 7]) == -1\ncan_arrange([3, 2, 3, 4, 5, 6, 7, 7]) == 2\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert largest_smallest_integers([-5, 1, -2, -3, 5, 1, 2, -1, -2]) == (-2, 5)\nassert largest_smallest_integers([-5, 1, -2, -3, 5, 1, 2, -1, -2]) == (-2, 1)\nassert largest_smallest_integers([-5, 1, 2, 3, 5, 1, 2, -1, -2]) == (3, -1)\nassert largest_smallest_integers([-5, 1, 2, 3, 5, 1, 2, -1, -2]) == (3, 1)\n",
        "num_ids_2": 42,
        "num_ids_4": 119
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([1,2,3,4]) == (4,1)\nassert     largest_smallest_integers([-1,2,3,4]) == (4,-1)\nassert     largest_smallest_integers([1,2,3]) == (3,1)\nassert     largest_smallest_integers([-1,2,-3,-4]) == (-4,1)\nassert     largest_smallest_integers([1,-2,-3]) == (1,-3)\n",
        "num_ids_2": 51,
        "num_ids_4": 100
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([1, 2, -3, 4]) == (4, -3)\nassert     largest_smallest_integers([4, 3, -2, -1]) == (4, -1)\nassert     largest_smallest_integers([1, 2, 3, 4]) == (None, None",
        "num_ids_2": 55,
        "num_ids_4": 79
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([0, -1, 2, -3, 5]) == (-3, 5), 'incorrect'\nassert largest_smallest_integers([0, 1, 2, 3, 4]) == (0, -4), 'incorrect'\nassert largest_smallest_integers([-1, -2, -3]) == (-1, -3), 'incorrect'\nassert largest_smallest_integers([-1, -2]) == (-1, -2), 'incorrect'\nassert largest_smallest_integers([-2, -3]) == (-3, -2), 'incorrect'\n",
        "num_ids_2": 64,
        "num_ids_4": 121
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlargest_smallest_integers([1, -2, 3, 4, 5]) == (-2, 1)\n\nlargest_smallest_integers([-1, 1, 2, 3, 4]) == (1, -1)\n\nlargest_smallest_integers([4, -5, 1, -2, 3]) == (1, -5)\n\nlargest_smallest_integers([2, 4, -5, 1, -2, 3]) == (1, -2)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([2, -3, 4, 1, -5]) == (1, -5)\nassert    largest_smallest_integers([]) == (None, None)\nassert    largest_smallest_integers([1]) == (None, None)\nassert    largest_smallest_integers([2]) == (None, None)\nassert    largest_smallest_integers([-2]) == (None, None)",
        "num_ids_2": 48,
        "num_ids_4": 86
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1, 2, 3]) == (3, 1)\nassert     largest_smallest_integers([1, -3, 4]) == (4, -3)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([2]) == (2, 2)\n\n",
        "num_ids_2": 48,
        "num_ids_4": 85
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(1,2) == 1\nassert     compare_one(1.0,2) == 1\nassert     compare_one(\"1\",2) == 2\nassert     compare_one(1,2) == 1\nassert     compare_one(1,2) == None\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\"\"\"\nCode Coder: Yifan Chen\n\"\"\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare_one(2,3)     ==     3\nassert     compare_one(2,2)     ==     2\nassert     compare_one(3,2)     ==     None\nassert     compare_one(4.5,4.5)     ==     4.5\nassert     compare_one('4.5','4.5')     ==     '4.5'\n",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    compare_one(1,1) == None\n    compare_one(1,1.0) == None\n    compare_one(1,1.1) == None\n    compare_one(1,1.1) == None\n    compare_one(1,1.1.1) == None\n    compare_one(1,1.1.1) == None\n    compare_one(1,1.1.1) == None\n    compare_one(1,1.1.1.1) == None\n    compare_one(1,1.1.1.1) == None\n    compare_one(1,1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1) == None\n    compare_one(1,1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(compare_one(1,2))\nprint(compare_one(1,1))\nprint(compare_one(1,1.5))\nprint(compare_one(\"asdf\",1.5))\nprint(compare_one(\"asdf\",1))\nprint(compare_one(1,\"asdf\"))\nprint(compare_one(1,1.0))\nprint(compare_one(1,1.0+1.0j))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare_one(1, 2) == 1\nassert     compare_one(2, 2) == 2\nassert     compare_one(3, 3) == 3\nassert     compare_one(2.3, 2.4) == None\nassert     compare_one('2.3', '2.4') == None\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(compare_one(1,2))\n\nassert compare_one(1,2) == 2\nassert compare_one(1,2.0) == 2.0\n",
        "num_ids_2": 15,
        "num_ids_4": 31
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare_one(6, 10) == 10, \"The variable 6 should be 10\"\nassert     compare_one(10.0, 11) == 11, \"The variable 10.0 should be 11\"\nassert     compare_one(\"10\", 10) == 10, \"The variable '10' should be 10\"\nassert     compare_one(\"10.0\", 10) == 10, \"The variable '10.0' should be 10\"\nassert     compare_one(\"10\", \"11\") == None, \"The variables 10 and 11 should be equal\"\n",
        "num_ids_2": 50,
        "num_ids_4": 104
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(10)    == False, \"is_equal_to_sum_even: 10 is not equal to the sum of 4 even numbers\"\nassert     is_equal_to_sum_even(11)    == False, \"is_equal_to_sum_even: 11 is not equal to the sum of 4 even numbers\"\nassert     is_equal_to_sum_even(12)    == False, \"is_equal_to_sum_even: 12 is not equal to the sum of 4 even numbers\"\nassert     is_equal_to_sum_even(13)    == True, \"is_equal_to_sum_even: 13 is equal to the sum of 4 even numbers\"\nassert     is_equal_to_sum_even(15)    == True, \"is_equal_to_sum_even: 15 is equal to the sum of 4 even numbers\"\n",
        "num_ids_2": 84,
        "num_ids_4": 167
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(21)     == False, \"21\"\nassert     is_equal_to_sum_even(28)     == False, \"28\"\nassert     is_equal_to_sum_even(29)     == True, \"29\"\nassert     is_equal_to_sum_even(44)     == False, \"44\"\nassert     is_equal_to_sum_even(45)     == True, \"45\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(10) == True\nassert     is_equal_to_sum_even(20) == True\nassert     is_equal_to_sum_even(40) == False\nassert     is_equal_to_sum_even(120) == True\nassert     is_equal_to_sum_even(180) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(6) is True\nassert     is_equal_to_sum_even(9) is False\nassert     is_equal_to_sum_even(2) is True\nassert     is_equal_to_sum_even(17) is False\nassert     is_equal_to_sum_even(18) is True\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_equal_to_sum_even(36)\nassert is_equal_to_sum_even(20)\nassert not is_equal_to_sum_even(48)\nassert not is_equal_to_sum_even(16)\n",
        "num_ids_2": 18,
        "num_ids_4": 47
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('Finished testing is_equal_to_sum_even'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(5) == True, \"Wrong answer\"\nassert     is_equal_to_sum_even(6) == False, \"Wrong answer\"\n\nprint(\"Well done. Your answer is correct.\")\nprint(\"You are awesome.\")",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(44) == False\nassert     is_equal_to_sum_even(44) == False\nassert     is_equal_to_sum_even(42) == True\nassert     is_equal_to_sum_even(40) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     special_factorial(0) == 1, \"Should be 1\"\nassert     special_factorial(1) == 1, \"Should be 1\"\nassert     special_factorial(2) == 2, \"Should be 2\"\nassert     special_factorial(3) == 6, \"Should be 6\"\nassert     special_factorial(5) == 120, \"Should be 120\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(5) == 120\nassert     special_factorial(10) == 3628800\nassert     special_factorial(100) == factorial(100)\nassert     special_factorial(12) == factorial(12)\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert special_factorial(5) == 120, \"Wrong factorial\"\nassert special_factorial(0) == 1, \"Wrong factorial\"\nassert special_factorial(1) == 1, \"Wrong factorial\"\nassert special_factorial(2) == 2, \"Wrong factorial\"\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert special_factorial(1) == 1\nassert special_factorial(2) == 2\nassert special_factorial(3) == 6\n",
        "num_ids_2": 14,
        "num_ids_4": 36
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert _____, _____\nprint(\"All tests were successful.\")",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nfix_spaces('hey') == 'hey_'\nfix_spaces('one-two') == 'one-two_'\nfix_spaces('_  _  _   _') == '_____________'\n\nprint('fix_spaces done!')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fix_spaces('foo') == 'foo'\nassert     fix_spaces('foo bar') == 'foo_bar'\nassert     fix_spaces('foo bar baz') == 'foo_bar_baz'\nassert     fix_spaces('foo bar baz foo') == 'foo_bar_baz_foo'\nassert     fix_spaces('foo bar baz foo baz') == 'foo_bar_baz_foo_baz'\n",
        "num_ids_2": 31,
        "num_ids_4": 78
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef lowercase(text):\n    \"\"\"\n    Given a string text, return a new string, which has been changed \n    from upper case to lower case.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fix_spaces('  hi there ')     == 'hi_there'\nassert     fix_spaces('hi there')     == 'hi_there'\nassert     fix_spaces('  hi there  ')     == 'hi_there'\nassert     fix_spaces(' hi there')     == 'hi_there'\nassert     fix_spaces(' hi there hi there') == 'hi_there_hi_there'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     file_name_check('') == 'No', 'The empty string is not a valid file name!'\nassert     file_name_check('abcd.txt') == 'No', 'The file name \"abcd\" is not valid!'\nassert     file_name_check('a.txt') == 'No', 'The file name \"a.txt\" is not valid!'\nassert     file_name_check('a.exe') == 'No', 'The file name \"a.exe\" is not valid!'\nassert     file_name_check('a.dll') == 'No', 'The file name \"a.dll\" is not valid!'\n",
        "num_ids_2": 56,
        "num_ids_4": 116
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     file_name_check(\"foo.txt\") == \"No\"\nassert     file_name_check(\"foo\") == \"Yes\"\nassert     file_name_check(\"foo1.txt\") == \"Yes\"\nassert     file_name_check(\"foo1.bogus\") == \"No\"\nassert     file_name_check(\"foo.txt.bogus\") == \"No\"\n",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     file_name_check(\"guru99.com\") == \"Yes\", \"Please enter a valid file name\"\nassert     file_name_check(\"gurultxt.exe\") == \"No\", \"Please enter a valid file name\"\nassert     file_name_check(\"guru99.exe.txt\") == \"No\", \"Please enter a valid file name\"\nassert     file_name_check(\"guru99.com.txt\") == \"No\", \"Please enter a valid file name\"\nassert     file_name_check(\"guru99.com.\") == \"Yes\", \"Please enter a valid file name\"\n",
        "num_ids_2": 54,
        "num_ids_4": 112
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     file_name_check('my_name.txt') == 'No'\nassert     file_name_check('my.name.txt') == 'No'\nassert     file_name_check('my_name.exe') == 'No'\nassert     file_name_check('my_name.txt.dll') == 'No'\n\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     file_name_check('spam.exe') ==     'No'\nassert     file_name_check('1.txt') ==     'No'\nassert     file_name_check('1.txt.') ==     'No'\nassert     file_name_check('1.txt.exe') ==     'No'\nassert     file_name_check('a.txt') ==     'No'\n",
        "num_ids_2": 37,
        "num_ids_4": 76
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     file_name_check(\"alpha\") == \"No\", \n\"File name does not follow the requirements.\"\nassert     file_name_check(\"beta\") == \"No\", \n\"File name does not follow the requirements.\"\nassert     file_name_check(\"alpha\") == \"No\", \n\"File name does not follow the requirements.\"\nassert     file_name_check(\"123\") == \"No\", \n\"File name does not follow the requirements.\"\nassert     file_name_check(\"alpha.\") == \"No\", \n\"File name does not follow the requirements.\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     file_name_check('asdf_abc_xyz') == 'No', \"Test 1 FAILED\"\nassert     file_name_check('_asdf_abc_xyz') == 'No', \"Test 2 FAILED\"\nassert     file_name_check('asdf_') == 'No', \"Test 3 FAILED\"\nassert     file_name_check('a') == 'No', \"Test 4 FAILED\"\nassert     file_name_check('aa') == 'No', \"Test 5 FAILED\"\n",
        "num_ids_2": 57,
        "num_ids_4": 103
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert file_name_check(\"runoob.txt\") == 'Yes', 'runoob.txt is invalid'\nassert file_name_check(\"runoob.txt.exe\") == 'No', 'runoob.txt.exe is invalid'\nassert file_name_check(\"runoob.txt.exe.dll\") == 'Yes', 'runoob.txt.exe.dll is invalid'\nassert file_name_check(\"runoob.txt.exe..dll\") == 'No', 'runoob.txt.exe..dll is invalid'\n",
        "num_ids_2": 30,
        "num_ids_4": 96
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 11\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 69\n\n\ndef sum_squares_v2(lst):\n    \"\"\"\n    This function takes a list of integers. For all entries in the list, the function shall square the integer entry if its index \n    is a multiple of 3 and cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(sum_squares(lst)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 225\nassert \nsum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 4, 3, 2, 1]) == 5125\nassert \nsum_squares([0, 9, 8, 2, 3, 1, 6, 7, 5, 4, 2, 1]) == 233168\nassert \nsum_squares([0, 9, 8, 2, 3, 1, 6, 7, 5, 4, 2, 1, 9, 8, 6, 3, 1, 6, 7, 5, 4, 2, 1]) == 233168\n\nprint(\"All the tests are passed!\"",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(sum_squares([9, 25, 40, 75, 100, 134, 145, 165]))\nprint(sum_squares([1, 2, 3, 4, 5, 6, 7]))\n\n\n\ndef sum_and_multiply(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall return the sum of all entries \n    and multiply the entry by 2 if its index is a multiple of 4 and the entry is greater than or equal to 50. The function shall not \n    change the entries in the list whose indexes are not a multiple of 4 or greater than or equal to 50. The function shall return \n    the product of all entries.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sum_squares_plus(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall then add the \n    squares of the integer entries and the cubes of the integer entries. The function shall return the sum of the squares and the cubes. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef sum_squares_list(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall then return the sum \n    of all entries.\n    \"\"\"\n    pass\n\n\ndef sum_squares_list_faster(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall then return the sum \n    of all entries.\n    \"\"\"\n    pass\n\n\n\n\ndef fib_faster(n):\n    \"\"\"\n    This function will take an integer n and returns the nth Fibonacci number.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nwords_in_sentence(\"Hi, how are you doing?\") == 'Hi how are'\nassert words_in_sentence(\"This is a sentence.\") == 'This a sentence'\nassert words_in_sentence(\"What are you doing?\") == 'What are'\nassert words_in_sentence(\"this is a long sentence.\") == 'this is'\n",
        "num_ids_2": 23,
        "num_ids_4": 63
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_in_sentence('hi gosh') == 'hi gosh'\nassert     words_in_sentence('hi') == 'hi'\nassert     words_in_sentence('hi hi') == 'hi hi'\nassert     words_in_sentence('hi hi hi') == 'hi hi hi'\nassert     words_in_sentence('hi hi hi') == 'hi hi hi'\n",
        "num_ids_2": 36,
        "num_ids_4": 74
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_in_sentence(\"hello\") == \"hlo\"\nassert     words_in_sentence(\"go home\") == \"gohome\"\nassert     words_in_sentence(\"I am here\") == \"iamhere\"\nassert     words_in_sentence(\"he is here\") == \"hehere\"\nassert     words_in_sentence(\"\") == \"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 74
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_in_sentence(\"Python\") == \"PYTHON\"\nassert     words_in_sentence(\"Hello World!\") == \"HELLO\"\nassert     words_in_sentence(\"Hello World! Today is Tuesday\") == \"HELLO TOWDAY\"\n",
        "num_ids_2": 39,
        "num_ids_4": 65
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"A test\") == \"A test\"\nassert     words_in_sentence(\"An apple\") == \"An apple\"\nassert     words_in_sentence(\"Hello world!\") == \"Hello world!\"\nassert     words_in_sentence(\"A test!\") == \"test!\"",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert words_in_sentence('hello my name is john') == 'hello my name is john'\nassert words_in_sentence('hello my name is john and I am a robot') == 'hello my name is john and I am a robot'\nassert words_in_sentence('hello my name is john and I am a robot and a robot') == 'hello my name is john and I am a robot'\n",
        "num_ids_2": 26,
        "num_ids_4": 95
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_in_sentence('The quick brown fox jumps over the lazy dog')     == 'quick brown fox'\nassert words_in_sentence('The dog quickly runs back and then stops at the wall')     == 'dog quickly runs back'\nassert words_in_sentence('Dog runs back and then stops at the wall')     == 'dog runs back'\nassert words_in_sentence('The quick brown fox jumps')     == 'quick brown fox'\nassert words_in_sentence('The dog quickly runs back and then stops at the wall')     == 'dog quickly runs back'\n",
        "num_ids_2": 56,
        "num_ids_4": 104
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     simplify(\"1/2\", \"1/2\") == False\nassert     simplify(\"1/2\", \"1/4\") == True\nassert     simplify(\"3/4\", \"1/2\") == True\nassert     simplify(\"3/4\", \"3/4\") == False\n\n\nif __name__ == '__main__':\n    print(simplify(raw_input(), raw_input()))\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     simplify('1/2', '1/2') == True, 'The first input should be true'\nassert     simplify('1/4', '2/4') == False, 'The second input should be false'\nassert     simplify('2/4', '4/2') == False, 'The third input should be false'\nassert     simplify('3/4', '2/4') == False, 'The fourth input should be false'\n\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     simplify('2/3', '2/3') == True\nassert     simplify('3/5', '3/5') == True\nassert     simplify('1/3', '2/3') == False\nassert     simplify('-1/3', '2/3') == True\nassert     simplify('2/3', '-1/3') == True\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     simplify(\"2/5\", \"4/5\") == True\nassert     simplify(\"7/3\", \"2/4\") == False\nassert     simplify(\"8/2\", \"2/4\") == False\nassert     simplify(\"1/7\", \"5/8\") == False\nassert     simplify(\"5/8\", \"5/7\") == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     simplify(\"1/2\", \"1/2\")    ==     False, \"First test case\"\nassert     simplify(\"1/2\", \"1/4\")    ==     True, \"Second test case\"\nassert     simplify(\"4/2\", \"1/2\")    ==     True, \"Third test case\"\nassert     simplify(\"1/3\", \"1/3\")    ==     False, \"Fourth test case\"\nassert     simplify(\"1/2\", \"1/5\")    ==     False, \"Fifth test case\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     simplify('5/6', '12') == True \nassert    simplify('3/4', '3') == True \nassert    simplify('1/2', '3') == False \nassert    simplify('1/2', '1') == False \nassert    simplify('1/2', '2') == False \n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(simplify(\"1/3\",\"3/1\"))\nprint(simplify(\"2/3\",\"1/3\"))\nprint(simplify(\"1/3\",\"3/2\"))\nprint(simplify(\"1/6\",\"3/2\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([1, 2, 3]) == [1, 2, 3]\nassert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     order_by_points([1, 2, 4, 8, 16]) == [1, 2, 4, 8, 16]\nassert     order_by_points([1, 2, 4, 8, 16, 32]) == [1, 2, 4, 8, 16, 32]\nassert     order_by_points([1, 2, 4, 8, 16, 32, 64]) == [1, 2, 4, 8, 16, 32, 64]\n",
        "num_ids_2": 54,
        "num_ids_4": 120
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     order_by_points([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     order_by_points([8, 8, 7, 9, 8, 8]) == [8, 8, 7, 9, 8, 8]\nassert     order_by_points([9, 8, 8, 8, 8, 7, 9]) == [7, 8, 8, 8, 8, 9, 9]\nassert     order_by_points([1, 9, 2, 3, 9, 4, 5, 6, 2, 4, 3, 8, 6]) == \\\n        [1, 2, 2, 3, 4, 5, 6, 6, 8, 9, 9, 3, 4]\n",
        "num_ids_2": 62,
        "num_ids_4": 136
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([5,5,2,2,3,1,4]) == [1,2,3,4,5,5,2,2]\nassert     order_by_points([5,2,2,3,1,4]) == [1,2,2,3,5,4]\n\ndef test_order_by_points():\n    assert order_by_points([5,5,2,2,3,1,4]) == [1,2,3,4,5,5,2,2]\n    assert order_by_points([5,2,2,3,1,4]) == [1,2,2,3,5,4]\n    ",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     order_by_points([50, 3, 5, -20, 30]) == [-20, 3, 5, 50, 30]\nassert     order_by_points([-1, -10, -100, -1000, -100000]) == [-1, -10, -100, -1000, -100000]\n\n\n\nif __name__ == '__main__':\n    nums = [-1, -10, -100, -1000, -100000]\n    print(f'Original: {nums}')\n    print(f'Sorted:  {order_by_points(nums)}')\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test():\n    \"\"\"\n    >>> order_by_points([123, 123, 231])\n    [123, 231, 123]\n    >>> order_by_points([11, 10, 1, 1])\n    [1, 1, 10, 11]\n    >>> order_by_points([9, 9, 9, 9])\n    [9, 9, 9, 9]\n    >>> order_by_points([])\n    []\n    \"\"\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(order_by_points([1,2,3]))\nprint(order_by_points([7,10,10,100,99,99]))\nprint(order_by_points([-10,10,10,100,99,99]))\n\ndef order_by_points_greedy(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     order_by_points([2, 4, 5, 8]) == [2, 8, 4, 5]\nassert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     order_by_points([1, 2, 3, 4, 5, 7, 8]) == [1, 2, 3, 4, 5, 7, 8]\nassert     order_by_points([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 58,
        "num_ids_4": 144
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([3, 31, 2, 9]) == [2, 9, 3, 31]\nassert     order_by_points([32, 23, 43, 55, 89]) == [43, 55, 32, 23, 89]\nassert     order_by_points([2, 43, 9, 32, 55, 89]) == [2, 43, 32, 9, 55, 89]\nassert     order_by_points([9, 32, 43, 55, 89]) == [9, 32, 43, 55, 89]\nassert     order_by_points([32, 23, 9, 32, 55, 89]) == [32, 23, 9, 32, 55, 89]\n",
        "num_ids_2": 58,
        "num_ids_4": 124
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     order_by_points([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     order_by_points([7,8,1,2,3,4,5,6]) == [1,2,3,4,5,6,7,8]\nassert     order_by_points([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     order_by_points([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\nassert     order_by_points([9,8,7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7,8,9]\n",
        "num_ids_2": 78,
        "num_ids_4": 168
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     specialFilter([10, 5, 20, 4, 2, 1, 3]) == 3, \"Wrong answer\"\nassert     specialFilter([1, 2, 3, 4, 5, 10, 6, 7, 8, 9]) == 1, \"Wrong answer\"\nassert     specialFilter([1, 2, 3, 4, 5, 10, 6, 7, 8, 9]) == 2, \"Wrong answer\"\n\n",
        "num_ids_2": 62,
        "num_ids_4": 96
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     specialFilter([10, 2, 3, 4, 5, 10, 6, 7, 8, 9]) == 6\nassert specialFilter([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 2\nassert specialFilter([10, 2, 3, 4, 5, 10, 6, 7, 8, 9, 0, 1]) == 6\nassert specialFilter([10, 2, 3, 4, 5, 10, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\nassert specialFilter([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 2\n",
        "num_ids_2": 55,
        "num_ids_4": 149
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     specialFilter([4, 6, 1, 3, 8, 8]) == 2, \\\n        \"Error in specialFilter()\"\nassert     specialFilter([11, 3, 11, 2, 3, 1, 2, 4, 2, 3]) == 2, \\\n        \"Error in specialFilter()\"\nassert     specialFilter([6, 4, 9, 4, 2, 1, 1, 1, 1, 1, 1, 1, 4, 2, 4, 9]) == 2, \\\n        \"Error in specialFilter()\"",
        "num_ids_2": 52,
        "num_ids_4": 94
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9, 11, 13, 15]) == 2\nassert     specialFilter([2, 4, 6, 8, 10, 12, 14, 16]) == 4\nassert     specialFilter([1, 3, 5, 7, 9]) == 0\nassert     specialFilter([]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 6\n",
        "num_ids_2": 48,
        "num_ids_4": 75
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     specialFilter(nums) == 5\nprint(\"We got it right.\")\n\n\n\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     specialFilter([]) == 0\nassert     specialFilter([1, 2, 3, 4, 5]) == 3\nassert     specialFilter([-1, -2, -3, -4, -5]) == 3\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 6\nassert     specialFilter([2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 3\n",
        "num_ids_2": 27,
        "num_ids_4": 80
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    counter = 0\n    for i in range(0,len(nums)):\n        if nums[i] > 10 and nums[i][0]%2!= 0 and nums[i][1]%2!= 0:\n            counter += 1\n    return counter\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnums = [13, 3, 4, 0, 6, 1, 8, -1]\nspecialFilter(nums) == 8\n\nprint(\"You're all set!\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 4, 'Wrong!'\nassert     specialFilter([3, 7]) == 0, 'Wrong!'\nassert     specialFilter([]) == 0, 'Wrong!'\nassert     specialFilter([1, 2, 3]) == 0, 'Wrong!'\nassert     specialFilter([1, 3, 5, 7, 9]) == 4, 'Wrong!'\n",
        "num_ids_2": 40,
        "num_ids_4": 73
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_max_triples(5) == 2\nassert     get_max_triples(8) == 2\nassert     get_max_triples(15) == 3\nassert     get_max_triples(16) == 4\nassert     get_max_triples(20) == 3\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    #input = sys.stdin.read()\n    n = int(input())\n    print(get_max_triples(n))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_triples(10) == 6\nassert     get_max_triples(5) == 6\nassert     get_max_triples(2) == 3\nassert     get_max_triples(1) == 1\nassert get_max_triples(0) == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert get_max_triples(4) == 6\nassert get_max_triples(3) == 3\nassert get_max_triples(2) == 3\nassert get_max_triples(1) == 1",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_triples(1) == 0, \"Wrong\"\nassert     get_max_triples(2) == 2, \"Wrong\"\nassert     get_max_triples(3) == 6, \"Wrong\"\nassert     get_max_triples(4) == 8, \"Wrong\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_triples(3) == 3\nassert     get_max_triples(7) == 4\nassert     get_max_triples(9) == 4\nassert     get_max_triples(12) == 5\nassert     get_max_triples(14) == 5\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_triples(10) == 9, 'incorrect'\nassert     get_max_triples(5) == 4, 'incorrect'\nassert     get_max_triples(3) == 0, 'incorrect'\nassert get_max_triples(8) == 27, 'incorrect'\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_max_triples(n):\n    return int(n * (n - 1) / 2)\n\n\nassert get_max_triples(4) == 1\nassert get_max_triples(9) == 5\n",
        "num_ids_2": 16,
        "num_ids_4": 29
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nbf('venus','venus') == (\n    ('venus',), \n    )\n\nassert \nbf('venus','venus') == (\n    ('venus',), \n    )\n\nassert \nbf('venus','venus') == (\n    ('venus',), \n    )\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bf('mercury','venus') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert     bf('venus', 'earth') == ()\nassert     bf('mars', 'neptune') == ()\n",
        "num_ids_2": 56,
        "num_ids_4": 71
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bf('earth','venus') == ('earth','venus','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert     bf('earth', 'jupiter') == ('earth', 'jupiter','mars','saturn', 'uranus', 'neptune')\nassert     bf('earth', 'neptune') == ('earth', 'neptune','mars', 'jupiter','saturn', 'uranus')\nassert     bf('venus','saturn') == ('venus','saturn','mars', 'jupiter', 'uranus', 'neptune')\nassert     bf('venus', 'neptune') == ('venus', 'neptune','mars', 'jupiter', 'uranus','saturn')\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bf('Mercury', 'Venus') == ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Venus') == ()\nassert     bf('Saturn', 'Uranus') == ()\nassert     bf('Venus', 'Mars') == ('Mars',)\nassert     bf('Mars', 'Jupiter') == ('Jupiter',)\n",
        "num_ids_2": 54,
        "num_ids_4": 85
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(bf(\"Mercury\", \"Venus\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Jupiter\", \"Earth\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Neptune\", \"Mars\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Earth\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Mercury\", \"Saturn\"))\nprint(bf(\"Mercury\", \"Jupiter\"))\nprint(bf(\"Mercury\", \"Earth\"))\nprint(bf(\"Mercury\", \"Mars\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Mercury\", \"Neptune\"))\nprint(bf(\"Venus\", \"Saturn\"))\nprint(bf(\"Venus\", \"Jupiter\"))\nprint(bf(\"Venus\", \"Earth\"))\nprint(bf(\"Venus\", \"Mars\"))\nprint(bf(\"Venus\", \"Uranus\"))\nprint(bf(\"Venus\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Saturn\", \"Jupiter\"))\nprint(bf(\"Saturn\", \"Earth\"))\nprint(bf(\"Saturn\", \"Mars\"))\nprint(bf(\"Saturn\", \"Uranus\"))\nprint(bf(\"Saturn\", \"Neptune\"))\nprint(bf(\"Uranus\", \"Neptune\"))\nprint(bf(\"Uranus\", \"Mars\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Saturn\"))\nprint(bf(\"Uranus\", \"Jupiter\"))\nprint(bf(\"Uranus\", \"Earth\"))\nprint(bf(\"Earth\", \"Mars\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Earth\", \"Saturn\"))\nprint(bf(\"Earth\", \"Uranus\"))\nprint(bf(\"Earth\", \"Neptune\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Jupiter\"))\nprint(bf(\"Mars\", \"Earth\"))\nprint(bf(\"Mars\", \"Saturn\"))\nprint(bf(\"Mars\", \"Uranus\"))\nprint(bf(\"Mars\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Jupiter\", \"Saturn\"))\nprint(bf(\"Jupiter\", \"Mars\"))\nprint(bf(\"Jupiter\", \"Uranus\"))\nprint(b",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == ((\"Mercury\", \"Venus\"),)\nassert     bf(\"Mercury\", \"Earth\") == ((\"Mercury\", \"Earth\"),)\nassert     bf(\"Mercury\", \"Mars\") == ((\"Mercury\", \"Mars\"),)\nassert     bf(\"Mercury\", \"Jupiter\") == ((\"Mercury\", \"Jupiter\"),)\nassert     bf(\"Mercury\", \"Saturn\") == ((\"Mercury\", \"Saturn\"),)\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sorted_list_sum([\"bella\", \"label\", \"roller\"]) == [\"roller\", \"bella\", \"label\"]\nassert sorted_list_sum([\"bella\", \"label\", \"roller\"]) == [\"roller\", \"bella\", \"label\"]\nassert sorted_list_sum([\"bella\", \"label\", \"roller\", \"roller\"]) == [\"roller\", \"roller\", \"bella\", \"label\"]\n",
        "num_ids_2": 33,
        "num_ids_4": 99
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sorted_list_sum(['foo', 'bar', 'foobar', 'barfoo', 'foobar']    )     == ['foo', 'bar', 'foobar', 'barfoo', 'foobar']\nassert     sorted_list_sum(['foo', 'bar', 'foobar', 'barfoo', 'foobar', 'barfoobar', 'barfoo', 'barfoo', 'barfoo'])     == ['barfoo', 'barfoo', 'barfoo', 'barfoo', 'barfoo', 'barfoo', 'barfoo', 'barfoo', 'foo']\nassert     sorted_list_sum([])     == []\nassert     sorted_list_sum([1, 2, 3])     == [1, 2, 3]\n",
        "num_ids_2": 133,
        "num_ids_4": 172
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sorted_list_sum(['hi', 'bye', 'hello']) == ['bye', 'hello', 'hi']\nassert     sorted_list_sum(['goodbye', 'hello', 'goodbye', 'bye', 'hello']) == ['bye', 'goodbye', 'hello', 'hello', 'goodbye']\nassert     sorted_list_sum(['i', 'am', 'a','monkey','monkey','monkey']) == ['a', 'am','monkey','monkey','monkey']\nassert     sorted_list_sum(['hello', '', 'hello', '', 'hello', '', 'hello']) == ['hello', 'hello', 'hello', '', 'hello', '', 'hello']\nassert     sorted_list_sum
        "num_ids_2": 76,
        "num_ids_4": 164
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sorted_list_sum(['alpha', 'a', 'ab', 'abd', 'ade', 'ba']) == ['ab', 'a', 'b', 'abd', 'ade', 'ba']\nassert sorted_list_sum(['a', 'a', 'a', 'ab', 'a', 'abd', 'ade', 'ab']) == ['a', 'a', 'a', 'ab', 'abd', 'ade', 'ab', 'a']\nassert sorted_list_sum(['a', 'ab', 'abd', 'ade', 'ba']) == ['ab', 'abd', 'ade', 'ba']\nassert sorted_list_sum(['ba', 'abd', 'ab', 'a', 'ade', 'ba', 'a']) == ['ab', 'abd', 'a', 'ab', 'ade', 'ba', 'ba']\nassert sorted_list_sum(['ba', 'ab', 'a', 'ab', 'a', 'abd', 'ade', 'ba']) == ['ab', 'abd', 'a', 'ab', 'a', 'ab', 'ade', 'ba']\n",
        "num_ids_2": 110,
        "num_ids_4": 203
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sorted_list_sum([\"cat\", \"dog\", \"bird\"]) == [\"bird\", \"cat\", \"dog\"]\nassert     sorted_list_sum([\"cat\", \"dog\", \"bird\", \"bird\"]) == [\"bird\", \"bird\", \"cat\", \"dog\"]\nassert     sorted_list_sum([\"cat\", \"dog\", \"bird\", \"cat\"]) == [\"cat\", \"cat\", \"dog\", \"bird\"]\nassert     sorted_list_sum([\"cat\", \"dog\", \"bird\", \"cat\", \"cat\"]) == [\"cat\", \"cat\", \"cat\", \"bird\", \"dog\"]\n",
        "num_ids_2": 66,
        "num_ids_4": 144
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     x_or_y(3, 2, 3) == 3\nassert     x_or_y(7, 2, 3) == 3\nassert     x_or_y(3, 2, 7) == 7\nassert     x_or_y(3, 2, 1) == 1\nassert     x_or_y(3, 1, 1) == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     x_or_y(1, 0, 1) == 0\nassert     x_or_y(2, 0, 1) == 0\nassert     x_or_y(3, 0, 1) == 0\nassert     x_or_y(4, 0, 1) == 0\nassert     x_or_y(5, 0, 1) == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert x_or_y(1, 1, 1) == 1\nassert x_or_y(2, 1, 1) == 1\nassert x_or_y(3, 1, 1) == 1\nassert x_or_y(4, 1, 1) == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint x_or_y(2, 3, 4)\nassert x_or_y(5, 3, 4) == 4\nassert x_or_y(5, 3, 5) == 3\nassert x_or_y(7, 7, 7) == 7\nassert x_or_y(8, 7, 7) == 7\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nx_or_y(4, 6, 9) == 6\nx_or_y(1, 2, 3) == 2\nx_or_y(2, 3, 2) == 3\n\n\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     double_the_difference([1,2,3,4,5,6,7,8]) == 5\nassert     double_the_difference([1,2,3,4,5,6,7,8,9]) == 0\nassert     double_the_difference([]) == 0\nassert     double_the_difference([-1,-2,-3,-4,-5,-6,-7,-8]) == ",
        "num_ids_2": 58,
        "num_ids_4": 100
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6]) == 30\nassert     double_the_difference([]) == 0\nassert double_the_difference([-2, -3, -4, -5, -6]) == -30\nassert double_the_difference([2, 3, 4, 5, 6]) == 30\n",
        "num_ids_2": 37,
        "num_ids_4": 85
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndouble_the_difference([1, 2, 3, 4, 5]) == (4 + 15 + 25 + 36 + 49)\n\ndouble_the_difference([1, 2, 3, 4, 5, 6]) == 0\n\ndouble_the_difference([-1, -2, -3, -4, -5]) == 0\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     double_the_difference([1, 2, 3]) == 7, \"Wrong\"\nassert double_the_difference([1, 1, 4, -1, 1]) == 0, \"Wrong\"\nassert double_the_difference([-1, -1]) == 0, \"Wrong\"\n\nprint(\"All tests passed.\")\n\n\n",
        "num_ids_2": 50,
        "num_ids_4": 72
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     double_the_difference([1,2,3,4,5,6]) == 20\nassert    double_the_difference([1,2,3,4,5,10,11,20]) == 0\nassert    double_the_difference([-1,2,3,4,5,6]) == 0\n\nprint('You passed the double_the_difference function')\nprint('It is time for the end of the test!')\n",
        "num_ids_2": 52,
        "num_ids_4": 77
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare([1,2,3], [2,1,3]) == [[1,2,3],[0,0,0],[0,0,0]]\nassert     compare([5,6,7], [2,5,3]) == [[1,2,3],[0,0,0],[0,0,0]]\nassert     compare([5,6,7], [2,5,5]) == [[1,2,3],[0,1,1],[0,1,1]]",
        "num_ids_2": 78,
        "num_ids_4": 117
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert compare([5,4,3,2,1],[4,5,5,5,5]) == [0,0,0,0,0]\nassert compare([5,3,4,3,2],[4,5,5,5,5]) == [0,0,0,0,0]\nassert compare([5,3,4,3,2],[4,3,5,5,5]) == [0,0,0,0,0]\nassert compare([5,3,4,3,2],[4,5,5,5,5]) == [0,0,0,0,0]\n",
        "num_ids_2": 39,
        "num_ids_4": 111
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare([7,14,22,29,35,42,47,57,64],[7,14,22,29,35,42,47,57,64]) == [0,0,0,0,0,0,0,0,0], 'Wrong'\nassert     compare([21,37,44,54,60,61,63,65,70],[37,44,54,60,61,63,65,70]) == [0,1,2,3,4,5,6,7,0], 'Wrong'\nassert     compare([22,42,54,62,64,66,68,70,72],[42,54,62,64,66,68,70,72]) == [0,1,2,3,4,5,6,7,0], 'Wrong'\nassert     compare([28,34,44,54,60,61,63,65,70],[34,44,54,60,61,63,65,70]) == [0,1,2,3,4,5,6,7,0], 'Wrong'\nassert     compare([11,14,23,35,44,54,64,65,70],[14,23,35,44,54,64,65,70]) == [0,1,2,3,4,5,6,7,0], 'Wrong'\n",
        "num_ids_2": 130,
        "num_ids_4": 258
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare([7, 8, 2, 0, 8, 3, 0, 5, 6, 2, 4, 2, 6, 7, 3, 0, 1, 6, 6, 8, 7, 5, 1, 9, 7, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9, 9, 4, 1, 8, 4, 4, 5, 5, 2, 7, 6, 3, 7, 8, 6, 5, 9, 3, 1, 5, 8, 6, 4, 6, 1, 8, 4, 6, 4, 3, 8, 9",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare([0, 5, 2, 1], [0, 5, 2, 1]) == [0, 0, 0, 0]\nassert     compare([0, 5, 2, 1], [5, 2, 1, 0]) == [0, 1, 1, 0]\nassert     compare([0, 5, 2, 1], [0, 5, 2, 1]) == [0, 0, 0, 0]\n",
        "num_ids_2": 66,
        "num_ids_4": 99
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert equal(compare([10,20], guess = 11),[5])\nassert equal(compare([1,2], guess = 0),[0,0])\nassert equal(compare([1,2], guess = 3),[2,2])\nassert equal(compare([0,0,0,1], guess = 1),[5,5,5,0])\n",
        "num_ids_2": 21,
        "num_ids_4": 61
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     compare([5,1,3,4], [3,4,1,2]) == [0,1,2,3]\nassert     compare([3,3,3,3], [3,3,3,3]) == [0,0,0,0]\nassert     compare([5,1,3,4], [5,1,3,4]) == [0,1,2,3]\n",
        "num_ids_2": 66,
        "num_ids_4": 99
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare([4,1,2], [1,2,3]) == [0,0,0]\nassert compare([5,1,2], [1,2,3]) == [2,0,2]\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare([14,44,33,52,5,2,21,5,22,14,41,43,47,50,50,35,47,18,31,32,39,40,43,53,54,61,63,66,67],\n    [14,44,33,52,5,2,21,5,22,14,41,43,47,50,50,35,47,18,31,32,39,40,43,53,54,61,63,66,67]) == \n    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "num_ids_2": 64,
        "num_ids_4": 64
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncompare([7,7,8],[3,3,4]) == [2,0,0]\ncompare([1,2,3],[1,1,0]) == [0,0,0]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Cheese', ['Slices', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese.Slices'\nassert Strongest_Extension('StuFfed', ['Slices', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'StuFfed.Cheese'\n",
        "num_ids_2": 51,
        "num_ids_4": 146
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Wrong output'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheddar', 'Scallop']) == 'Slices.SCallop.SErviNGSliCes', 'Wrong output'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheddar']) == 'Slices.SErviNGSliCes', 'Wrong output'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheddar', 'Scallop', 'StuffedCheese']) == 'Slices.SCallop.StuffedCheese', 'Wrong output'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Cheddar', 'Scallop', 'StuffedCheese', 'Chocolate']) == 'Slices.SErviNGSliCes.StuffedCheese.Scallop.Chocolate', 'Wrong output'\n",
        "num_ids_2": 121,
        "num_ids_4": 247
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"Wrong\"\nassert     Strongest_Extension(\"Lions\", ['Slices', 'Cheese', 'StuFfed']) == 'Lions.Cheese', \"Wrong\"\n\ndef test():\n    assert Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', \"Wrong\"\n    assert Strongest_Extension(\"Lions\", ['Slices', 'Cheese', 'StuFfed']) == 'Lions.Cheese', \"Wrong\"\n    print (\"correct\")\n",
        "num_ids_2": 93,
        "num_ids_4": 93
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nStrongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nStrongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('A', ['a', 'b', 'c']) == 'A'\nassert Strongest_Extension('A', ['A', 'B']) == 'A'\nassert Strongest_Extension('A', ['A']) == 'A'\n",
        "num_ids_2": 51,
        "num_ids_4": 96
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(\"Slices\", \n    [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \\\n    \"Check the correctness of Strongest_Extension\"\nassert     Strongest_Extension(\"Slices\", \n    [\"SErviNGSliCes\", \"StuFfed\"]) == \"Slices.StuFfed\", \\\n    \"Check the correctness of Strongest_Extension\"\nassert     Strongest_Extension(\"Slices\", \n    [\"Slices\", \"Cheese\"]) == \"Slices.Slices\", \\\n    \"Check the correctness of Strongest_Extension\"\nassert     Strongest_Extension(\"Slices\", \n    [\"Cheese\", \"Cheese\"]) == \"Slices.Cheese\", \\\n    \"Check the correctness of Strongest_Extension\"\nassert     Strongest_Extension(\"Slices\", \n    [\"Slices\", \"StuFfed\"]) == \"Slices.StuFfed\", \\\n    \"Check the correctness of Strongest_Extension\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert Strongest_Extension('Slices',\n                               ['SErviNGSlices', 'Cheese', 'Stufed', 'Slices']) == 'Slices.SErviNGSlices'\n    assert Strongest_Extension('A', ['B', 'C', 'A']) == 'A'\n    assert Strongest_Extension('ABCD', ['B', 'A', 'A', 'B']) == 'ABCD'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \"Fail\"\nassert Strongest_Extension(\"Bacon\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Bacon.SErviNGSliCes\", \"Fail\"\nassert Strongest_Extension(\"Bacon\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"]) == \"Bacon.SErviNGSliCes\", \"Fail\"\n",
        "num_ids_2": 54,
        "num_ids_4": 162
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cycpattern_check('hello','world') == True, 'First'\nassert     cycpattern_check('hello','hello') == True, 'Second'\nassert     cycpattern_check('hello','olleh') == False, 'Third'\nassert     cycpattern_check('hello','hello') == True, 'Fourth'\nassert     cycpattern_check('hello','hell') == False, 'Fifth'\n",
        "num_ids_2": 38,
        "num_ids_4": 78
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(cycpattern_check(\"code\", \"odoocde\") == True)\nprint(cycpattern_check(\"code\", \"cdeooc\") == False)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cycpattern_check(\n    'cow', 'coe') == True, \"Wrong\"\nassert     cycpattern_check(\n    'cow', 'coecw') == False, \"Wrong\"\nassert     cycpattern_check(\n    'cow', 'cwcow') == True, \"Wrong\"\nassert     cycpattern_check(\n    'cow', 'cowcow') == True, \"Wrong\"\nassert     cycpattern_check(\n    'cow', 'cowo') == False, \"Wrong\"\n",
        "num_ids_2": 18,
        "num_ids_4": 36
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncycpattern_check('hello','lol')\ncycpattern_check('hello','loll')\ncycpattern_check('hello','llol')\ncycpattern_check('hello','lolol')\ncycpattern_check('hello','hello')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    cycpattern_check(\"waterbottle\",\"erbottlewat\") == True, \"waterbottle\"\n    cycpattern_check(\"eetwater\",\"waterbottle\") == True, \"waterbottle\"\n    cycpattern_check(\"cyc\",\"cyco\") == False, \"cyc\"\n    cycpattern_check(\"cyco\",\"cyc\") == False, \"cyco\"\n    cycpattern_check(\"abc\",\"cba\") == False, \"abc\"\n\n\ndef longestCommonSubstring(str1, str2):\n    \"\"\"You need to return the length of the longest common substring.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"onion\",\"tonion\")     == True\nassert cycpattern_check(\"melon\",\"melon\")         == True\nassert cycpattern_check(\"fridge\",\"refridge\")     == True\nassert cycpattern_check(\"hello\",\"llhlo\")         == False\nassert cycpattern_check(\"hello\",\"heoo\")         == True\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cycpattern_check('cat', 'cat') == True\nassert cycpattern_check('cat', 'cot') == False\nassert cycpattern_check('cat', 'cut') == True\nassert cycpattern_check('cat', 'cut') == True\nassert cycpattern_check('cat', 'cug') == True\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert even_odd_count(343) == (1, 2)\nassert even_odd_count(342) == (2, 1)\nassert even_odd_count(4789) == (2, 1)\n",
        "num_ids_2": 19,
        "num_ids_4": 52
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_count(120) == (2, 2)\nassert even_odd_count(555) == (2, 1)\nassert even_odd_count(0) == (0, 0)\nassert even_odd_count(16777216) == (1, 6)\nassert even_odd_count(123) == (2, 0)\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_odd_count(123) == (2, 1)\nassert even_odd_count(555) == (2, 1)\nassert even_odd_count(0) == (0, 0)\nassert even_odd_count(1) == (0, 0)\nassert even_odd_count(2) == (0, 0)\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    \ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \"\"\"\n    pass\n\n\nnum = int(input())\nprint(even_odd_count(num)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_count(111111) == (3, 1)\nassert even_odd_count(15) == (2, 1)\nassert even_odd_count(19) == (0, 2)\nassert even_odd_count(4) == (0, 1)\nassert even_odd_count(1) == (0, 0)\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert even_odd_count(1000) == (6,4)\nassert even_odd_count(1001) == (3,5)\nassert even_odd_count(1002) == (0,0)\n",
        "num_ids_2": 19,
        "num_ids_4": 52
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert\nprint\nprint even_odd_count(1) == (1, 1)\nprint even_odd_count(22) == (2, 1)\nprint even_odd_count(10) == (2, 0)\nprint even_odd_count(21) == (1, 1)\nprint even_odd_count(11) == (0, 2)\nprint even_odd_count(12) == (1, 0)\nprint even_odd_count(13) == (0, 0)\nprint even_odd_count(14) == (0, 0)\nprint even_odd_count(15) == (1, 0)\nprint even_odd_count(16) == (0, 1)\nprint even_odd_count(17) == (1, 0)\nprint even_odd_count(18) == (0, 1)\nprint even_odd_count(19) == (0, 0)\nprint even_odd_count(20) == (0, 1)\nprint even_odd_count(21) == (0, 0)\nprint even_odd_count(22) == (1, 1)\nprint even_odd_count(23) == (1, 1)\nprint even_odd_count(24) == (0, 0)\nprint even_odd_count(25) == (0, 0)\nprint even_odd_count(26) == (0, 0)\nprint even_odd_count(27) == (1, 1)\nprint even_odd_count(28) == (1, 0)\nprint even_odd_count(29) == (1, 0)\nprint even_odd_count(30) == (1, 1)\nprint even_odd_count(31) == (0, 0)\nprint even_odd_count(32) == (0, 0)\nprint even_odd_count(33) == (0, 0)\nprint even_odd_count(34) == (1, 0)\nprint even_odd_count(35) == (1, 0)\nprint even_odd_count(36) == (0, 1)\nprint even_odd_count(37) == (0, 1)\nprint even_odd_count(38) == (0, 1)\nprint even_odd_count(39) == (1, 1)\nprint even_odd_count(40) == (1, 0)\nprint even_odd_count(41) == (1, 0)\nprint even_odd_count(42) == (0, 1)\nprint even_odd_count(43) == (0, 1)\nprint even_odd_count(44) == (0, 1)\nprint even_odd_count(45) == (0, 0)\nprint even_odd_count(46) == (0, 1)\nprint even_odd_count(47) == (0, 0)\nprint even_odd_count(48) == (0, 1)\nprint even_odd_count(49) == (1, 0)\nprint even_odd_count(50) == (0, 1)\nprint even_odd_count(51) == (1, 0)\nprint even_odd_count(52) == (0, 1)\nprint even_odd_count(53) == (0, 1)\nprint even_odd_count(54) == (1, 0)\nprint even_odd_count(55) == (1, 0)\nprint even_odd_count(56) == (0, 1)\nprint even_odd_count(57) == (1, 0)\nprint even_odd_count(58) == (0, 1)\nprint even_odd_count(59) == (0, 1)\nprint even_odd_count(60) == (1, 0)\nprint even_odd_count(61) == (0, 1)\nprint even_odd_count(62) == (1, 0)\nprint even_odd_count(63) == (1, 0)\nprint even_odd_count(64) == (1, 0)\nprint even_odd_count(65) == (0, 1)\nprint even_odd_count(66) == (0, 1)\nprint even_odd_count(67) == (0, 1)\nprint even_odd_count(68) == (1, 0)\nprint even_odd_count(69) == (1, 0)\nprint even_odd_count(70) == ",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_count(2) == (1,1)\nassert     even_odd_count(5) == (0,1)\nassert     even_odd_count(3) == (1,0)\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(2) == \"ii\"\nassert     int_to_mini_roman(3) == \"iii\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(5) == \"v\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert int_to_mini_roman(1000) =='m'\nassert int_to_mini_roman(1999) =='mm'\nassert int_to_mini_roman(2999) =='mmm'\nassert int_to_mini_roman(899) =='m'\n",
        "num_ids_2": 19,
        "num_ids_4": 52
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(123) == 'XXXIII'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(13) == 'XIII'\nassert     int_to_mini_roman(21) == 'XXI'\nassert     int_to_mini_roman(39) == 'XXXIX'\n",
        "num_ids_2": 35,
        "num_ids_4": 71
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef mini_roman_to_int(roman_string):\n    \"\"\"\n    Given a string representing a roman numeral, \n    convert it into an integer\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    num = 10\n    assert int_to_mini_roman(num) == \"X\"\n    num = 20\n    assert int_to_mini_roman(num) == \"XX\"\n    num = 25\n    assert int_to_mini_roman(num) == \"XX\"\n    num = 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(1, 1, 1)\nassert     not right_angle_triangle(0, 1, 1)\nassert     right_angle_triangle(1, 1, 2)\nassert     right_angle_triangle(1, 2, 1)\nassert     not right_angle_triangle(1, 1, 2)\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not right_angle_triangle(10,10,10)\nassert not right_angle_triangle(5,10,10)\nassert right_angle_triangle(10,10,5)\nassert right_angle_triangle(10,10,6)\n",
        "num_ids_2": 19,
        "num_ids_4": 50
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    right_angle_triangle(2,3,1) == True\n    right_angle_triangle(2,3,4) == False\n    right_angle_triangle(2,3,1.5) == False\n    right_angle_triangle(1,3,2) == False\n    right_angle_triangle(3,4,5) == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(2, 3, 5) == False\nassert     right_angle_triangle(3, 2, 5) == True\nassert     right_angle_triangle(3, 4, 5) == True\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(find_max([\"cat\", \"dog\", \"fish\"])) # returns dog\nprint(find_max([\"cat\", \"dog\", \"fish\", \"cat\"])) # returns fish\nprint(find_max([\"cat\", \"cat\", \"cat\"])) # returns cat\nprint(find_max([\"dog\", \"dog\", \"dog\"])) # returns dog\nprint(find_max([\"dog\", \"dog\", \"dog\", \"dog\"])) # returns dog\nprint(find_max([\"dog\", \"cat\", \"dog\"])) # returns dog\nprint(find_max([\"dog\", \"dog\", \"dog\", \"dog\", \"dog\"])) # returns dog\nprint(find_max([\"cat\", \"cat\", \"cat\", \"cat\", \"dog\"])) # returns dog\nprint(find_max([\"cat\", \"cat\", \"cat\", \"dog\", \"dog\"])) # returns dog\nprint(find_max([\"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"cat\"])) # returns dog\nprint(find_max([\"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"cat\"])) # returns dog\nprint(find_max([\"cat\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"cat\"])) # returns dog\nprint(find_max([\"cat\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\", \"dog\"])) # returns dog",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_max([\"mamal\", \"nana\", \"nana\"]) == \"mamal\", \"Wrong\"\nassert     find_max([\"mamal\", \"nana\", \"nana\", \"mamal\"]) == \"mamal\", \"Wrong\"\nassert     find_max([\"mamal\", \"nana\", \"nana\", \"nana\"]) == \"nana\", \"Wrong\"\nassert     find_max([\"nana\", \"mamal\", \"nana\"]) == \"mamal\", \"Wrong\"\nassert     find_max([\"nana\", \"mamal\", \"mamal\", \"mamal\"]) == \"mamal\", \"Wrong\"\n",
        "num_ids_2": 67,
        "num_ids_4": 132
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nwords = ['abc', 'xabc', 'abc', 'xabcx', 'abcx']\nassert find_max(words) == 'abcx'\nassert find_max(['abc', 'xabc', 'abc', 'xabcx', 'abcx']) == 'abcx'\n\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 16,
        "num_ids_4": 47
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_max([\"hello\", \"hi\", \"world\"]) == \"world\"\nassert \nfind_max([\"hi\", \"hello\", \"hi\"]) == \"hi\"\nassert \nfind_max([\"hi\", \"hello\", \"hi\", \"hello\", \"world\"]) == \"hi\"\nprint(\"test passed\")\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_max(['pizza', 'cinnamon', 'eggs', 'hello', 'tacos']) == 'tacos'\nassert     find_max(['a', 'a', 'a', 'a', 'a', 'a']) == 'a'\nassert     find_max(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == 'a'\nassert     find_max(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == 'a'\nassert     find_max(['a', 'b', 'a', 'b', 'a', 'a', 'a', 'b']) == 'a'\n",
        "num_ids_2": 64,
        "num_ids_4": 142
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe']) == 'dce'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe']) == 'ecf'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf']) == 'efa'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf', 'efa']) == 'ecf'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf', 'efa', 'efa']) == 'ecf'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf', 'efa', 'efa', 'efa']) == 'efa'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf', 'efa', 'efa', 'efa', 'efa']) == 'efa'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf', 'efa', 'efa', 'efa', 'efa', 'efa']) == 'efa'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa']) == 'efa'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa']) == 'efa'\n    find_max(['abc', 'cde', 'cce', 'ecf', 'ecf', 'dfe', 'fea', 'dce', 'cfe', 'efa', 'ecf', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', 'efa', ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_max([\"hi\", \"hello\", \"world\"]) == \"hello\"\nassert     find_max([\"hi\", \"hello\", \"world\", \"h\", \"hi\"]) == \"h\"\nassert     find_max([\"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"hello\", \"hello\"]) == \"hello\"\nassert     find_max([\"hello\", \"hello\", \"hello\", \"hello\"]) == \"hello\"\n",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_max([\"aab\", \"abc\", \"aaa\", \"aac\"]) == \"aaa\"\nassert     find_max([\"apple\", \"ape\", \"cad\"]) == \"ape\"\nassert     find_max([\"apple\", \"apple\", \"ape\", \"apple\"]) == \"apple\"\nassert     find_max([\"appe\", \"ape\", \"apl\", \"appe\"]) == \"appe\"\nassert     find_max([\"a\", \"b\", \"a\", \"a\", \"a\", \"b\", \"b\", \"a\"]) == \"a\"\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eat(10, 5, 100) == [100, 0], 'Possible bug in the code'\nassert     eat(1, 1, 1) == [2, 1], 'Possible bug in the code'\nassert     eat(2, 1, 1) == [3, 1], 'Possible bug in the code'\nassert     eat(3, 1, 1) == [5, 1], 'Possible bug in the code'\nassert     eat(4, 1, 1) == [7, 1], 'Possible bug in the code'\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eat(10, 5, 5) == [12, 5]\nassert     eat(10, 15, 5) == [5, 5]\nassert     eat(10, 20, 5) == [0, 5]\nassert     eat(10, 100, 5) == [15, 5]\nassert     eat(10, 0, 5) == [15, 0]\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eat(1000, 1000, 1000) == [1001, 1000]\nassert     eat(800, 300, 300) == [800, 900]\nassert     eat(500, 250, 250) == [450, 250]\nassert     eat(200, 200, 200) == [200, 200]\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eat(0, 10, 1000) ==     [0, 1000], \"Wrong\"\nassert     eat(10, 10, 10) ==     [10, 10], \"Wrong\"\nassert     eat(0, 100, 1000) ==     [0, 1000], \"Wrong\"\nassert     eat(100, 100, 100) ==     [100, 100], \"Wrong\"\nassert     eat(0, 1000, 1000) ==     [0, 1000], \"Wrong\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    eat(2, 1, 3) == \n    [3, 0]\nassert\n    eat(5, 5, 2) == \n    [6, 1]\nassert\n    eat(0, 3, 10) == \n    [10, 0]\nassert\n    eat(1, 1, 2) == \n    [3, 1]\nassert\n    eat(0, 3, 2) == \n    [2, 2]\n",
        "num_ids_2": 5,
        "num_ids_4": 9
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eat(\n    number    = 1,\n    need        = 3,\n    remaining = 4),     [ 4, 4 ]\nassert     eat(\n    number    = 0,\n    need        = 3,\n    remaining = 4),     [ 0, 4 ]\nassert     eat(\n    number    = 1000,\n    need        = 3,\n    remaining = 4),     [ 999, 4 ]\nassert     eat(\n    number    = 1,\n    need        = 0,\n    remaining = 4),     [ 4, 0 ]\nassert     eat(\n    number    = 1,\n    need        = 4,\n    remaining = 0),     [ 4, 0 ]\n",
        "num_ids_2": 10,
        "num_ids_4": 20
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    #assert\n    print('Test passed')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    eat(13, 8, 4) == None, \"Wrong Answer\"\n    eat(10, 8, 6) == None, \"Wrong Answer\"\n    eat(10, 8, 5) == None, \"Wrong Answer\"\n    eat(10, 0, 6) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 0, 5) == None, \"Wrong Answer\"\n    eat(10, 1, 5) == None, \"Wrong Answer\"\n    eat(10, 5, 10) == None, \"Wrong Answer\"\n    eat(100, 0, 100) == None, \"Wrong Answer\"\n    eat(100, 100, 100) == None, \"Wrong Answer\"\n    eat(100, 50, 100) == None, \"Wrong Answer\"\n    eat(100, 500, 100) == None, \"Wrong Answer\"\n    eat(100, 0, 0) == None, \"Wrong Answer\"\n    eat(0, 0, 100) == None, \"Wrong Answer\"\n    eat(100, 50, 0) == None, \"Wrong Answer\"\n    eat(100, 50, 50) == None, \"Wrong Answer\"\n    eat(100, 50, 500) == None, \"Wrong Answer\"\n    eat(0, 0, 100) == None, \"Wrong Answer\"\n    eat(0, 0, 0) == None, \"Wrong Answer\"\n    eat(0, 0, 0) == None, \"Wrong Answer\"\n    eat(10, 1, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 0, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wrong Answer\"\n    eat(10, 10, 10) == None, \"Wron",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef do_algebra_recursive(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Finished\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     do_algebra([+],    [1]) == 2\nassert     do_algebra([-],    [1]) == 0\nassert     do_algebra([*],    [1, 2]) == 2\nassert     do_algebra([*],    [0, 2]) == 2\nassert     do_algebra([//],    [5, 4]) == 1\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     do_algebra([\"+\"], [2])     == 4\nassert     do_algebra([\"+\", \"+\"], [2, 3])     == 7\nassert     do_algebra([\"-\", \"-\", \"*\", \"*\"], [2, 3, 4])     == 8\nassert     do_algebra([\"//\"], [1, 2, 3])     == 0.5\nassert     do_algebra([\"**\"], [2, 3, 4])     == 4278190080\n",
        "num_ids_2": 38,
        "num_ids_4": 90
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert solve('aB') == 'ba'\nassert solve('AB') == 'ba'\nassert solve('a') == 'a'\nassert solve('1') == '1'\n",
        "num_ids_2": 14,
        "num_ids_4": 34
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    assert solve(\"ad\") == \"da\"\n    assert solve(\"XY\") == \"YX\"\n    assert solve(\"ABCD\") == \"BACD\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solve('abc') == 'cba'\nassert     solve('Abc') == 'bca'\nassert     solve('AbC') == 'bCa'\n\nif __name__ == '__main__':\n    \n    assert solve(input()) ==     solve(input())\n    \n    try:\n        import driver\n        driver.default_file_name = 'AoC.txt'\n        driver.driver()\n    except Exception as e:\n        print(e",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solve('a') == 'a'\nassert     solve('ab') == 'ba'\nassert     solve('ABC') == 'cba'\nassert     solve('abcd') == 'dcba'\nassert     solve('abcde') == 'ecdba'\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(solve(\"abcd\"), \"bcda\")\nprint(solve(\"abBc\"), \"bCba\")\nprint(solve(\"abbc\"), \"bcba\")\nprint(solve(\"\"), \"\")\nprint(solve(\"hi\"), \"ih\")\nprint(solve(\"hello\"), \"oellh\")\nprint(solve(\"1234567890\"), \"987654321\")\nprint(solve(\"c\"), \"c\")\nprint(solve(\"C\"), \"C\")\nprint(solve(\"!@#$%&*\"), \"!@#$%&*\")\nprint(solve(\"abC\"), \"BCa\")\nprint(solve(\"ABC\"), \"cBA\")\nprint(solve(\"abAB\"), \"abBA\")\nprint(solve(\"xXx\"), \"xXX\")\nprint(solve(\"123456789\"), \"987654321\")\nprint(solve(\"abBcd\"), \"bcdaB\")\nprint(solve(\"abBcdC\"), \"CdbbA\")\nprint(solve(\"abBcdCe\"), \"cDdbBa\")\nprint(solve(\"abBcdCd\"), \"cDdbBa\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solve('') == ''\nassert     solve('a') == 'A'\nassert     solve('A') == 'a'\nassert     solve('A-a') == 'a-A'\nassert     solve('A!') == 'A!'\n",
        "num_ids_2": 22,
        "num_ids_4": 50
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test your code\n    print(solve('Ciao'))\n    print(solve('hello'))\n    print(solve('0'))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve('A') == 'a'\nassert     solve('a') == 'A'\nassert     solve('') == ''\nassert     solve('h') == 'H'\nassert     solve('H') == 'h'\nprint('You passed all test cases!'",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert solve('') == ''\nassert solve('ab') == 'ab'\nassert solve('A') == 'a'\nassert solve('ABC') == 'cba'\n",
        "num_ids_2": 11,
        "num_ids_4": 31
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_md5('abc') == 'c107326f43580a7d9d4b9da1f3e2f8b'\nassert     string_to_md5('') == None\nassert     string_to_md5('abc\\n') == None\nassert     string_to_md5('abc\\n\\n') == None\n\n",
        "num_ids_2": 53,
        "num_ids_4": 87
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_md5('abc') == '91b05b9e75dfb5323d5a0f2c8a27bd2d'\nassert     string_to_md5('abc') == '91b05b9e75dfb5323d5a0f2c8a27bd2d'\nassert     string_to_md5('abcdefg') == 'a6f7f42f3d6b5a4bd7e8071c7d6a8a8a'\nassert     string_to_md5('') is None\nassert     string_to_md5(None) is None\n",
        "num_ids_2": 78,
        "num_ids_4": 137
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('Hello') == 'a0c4e4f6a40d70fa1a64e8973f1b48b8'\nassert     string_to_md5('#!') == 'a9dff2442ca6891fcd51c963b2d3b892'\nassert     string_to_md5('#!\\nHello') == 'a9dff2442ca6891fcd51c963b2d3b892'\nassert     string_to_md5('Hello\\n#!') == 'a9dff2442ca6891fcd51c963b2d3b892'\n",
        "num_ids_2": 54,
        "num_ids_4": 133
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert string_to_md5('Hello World!') == 'd41d8cd98f00b204e9800998ecf8427e'\nassert string_to_md5('') is None\nassert string_to_md5('Opa!') == '3a1c53f5c3514fb92a8eefd9dcef3f5a'\nassert string_to_md5('A') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n",
        "num_ids_2": 38,
        "num_ids_4": 92
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"Hello World\") == \"c4e8d897d5218c3daf84b5cd26a174bb\"\nassert     string_to_md5(\"Hello, World\") == \"e5f2b99c3a939db5d9f0e5c9c2213e3a\"\nassert     string_to_md5(\"Hello, World!?!\") == \"3e1b7fca3adff97a7d60e12fe71c19f8\"\nassert     string_to_md5(\"\") is None\n",
        "num_ids_2": 51,
        "num_ids_4": 137
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('text') == '6c3e2e7a1d78e8e5c50d8c67e03e2e7'\nassert     string_to_md5('123456') == '0e3cd0e6f873b1c0b8c9d3e59ad1bf1'\nassert     string_to_md5('123456abc') == '46c8523ef8e3823fea63887c7a5c5cfd'\nassert     string_to_md5('123456abc123') == 'c5ec69aa85ab2fb9f1ed75c97f4d842b'",
        "num_ids_2": 56,
        "num_ids_4": 137
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_md5(\"\") is None\nassert     string_to_md5(\"hello\") == \"a78ad49cbb73a7589e8fc2b77b75c9b4\"\nassert     string_to_md5(\"hello\\nworld\") == \"a78ad49cbb73a7589e8fc2b77b75c9b4\"\nassert     string_to_md5(\"This is a test.\") == \"e7bbe1d9ddc5c1f5d14a4a676940f65a\"\nassert     string_to_md5(\"This is a test, with an extra newline.\") == \"e7bbe1d9ddc5c1f5d14a4a676940f65a\"\n",
        "num_ids_2": 50,
        "num_ids_4": 133
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     generate_integers(0, 10) == [0, 2, 4, 6, 8, 10]\nassert     generate_integers(0, 100) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,\n                                        22, 24, 26, 28, 30, 32, 34, 36, 38, 40,\n                                        42, 44, 46, 48, 50, 52, 54, 56, 58, 60,\n                                        62, 64, 66, 68, 70, 72, 74, 76, 78, 80,\n                                        82, 84, 86, 88, 90, 92, 94, 96, 98]\nassert     generate_integers(0, -10) == []\nassert     generate_integers(100, 200) == [100, 102, 104, 106, 108, 110, 112, 114,\n                                          116, 118, 120, 122, 124, 126, 128, 130,\n                                          132, 134, 136, 138, 140, 142, 144, 146,\n                                          148, 150, 152, 154, 156, 158, 160, 162,\n                                          164, 166, 168, 170, 172, 174, 176, 178,\n                                          180, 182, 184, 186, 188, 190, 192, 194,\n                                          196, 198, 200]\n\ndef generate_word(word):\n    \"\"\"\n    Given a word, generate a list of integers representing the length of the\n    word. The first integer in the list should be 1. The length of the word\n    should be the sum of the lengths of the characters in the word.\n    \"\"\"\n    pass\n",
        "num_ids_2": 64,
        "num_ids_4": 111
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     generate_integers(3, 7) == list(range(3, 8, 2))\nassert generate_integers(0, 10) == []\nassert generate_integers(3, 3) == []\n",
        "num_ids_2": 37,
        "num_ids_4": 50
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert generate_integers(1,10) == list(range(2,12))\nassert generate_integers(1,20) == list(range(2,21))",
        "num_ids_2": 23,
        "num_ids_4": 43
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ngenerate_integers(2, 5) == [2,4,6,8,10]\n\n\"\"\"\nTime complexity: O(1)\nSpace complexity: O(1)\n\"\"\"\n\n\ndef generate_even_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return a list of all even numbers in\n    the range from a to b, in ascending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \nif __name__ == \"__main__\":\n    generate_integers(1,100",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    }
]