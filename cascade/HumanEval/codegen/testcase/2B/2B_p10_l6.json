[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    numbers = [1,2,3,4,5]\n    threshold = 0.2\n    print(has_close_elements(numbers, threshold))\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \n\nprint(\"The code above should print True when it is correct\")\nprint(\"It should also print False when it is incorrect\")\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhas_close_elements([1,2,3,4], 1)\nassert \nhas_close_elements([1,2,3,4], 1.5)\nassert \nhas_close_elements([1,2,3,4], 0.5)\nassert \nhas_close_elements([1,2,3,4], 1.1)\nassert \nhas_close_elements([1,2,3,4], 2)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not has_close_elements(\n    [1.1, 1.2, 1.3, 1.4, 1.5], 0.5\n)\nassert has_close_elements(\n    [1.1, 1.2, 1.3, 1.4, 1.5], 0.4\n)\nassert not has_close_elements(\n    [1.1, 1.2, 1.3, 1.4, 1.5], 1.6\n)\nassert has_close_elements(\n    [1.1, 1.2, 1.3, 1.4, 1.5], 0.1\n)\n",
        "num_ids_2": 13,
        "num_ids_4": 32
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     has_close_elements([1.1,1.2,1.3,1.4,1.5], 0.05)\nassert not has_close_elements([1.1,1.2,1.3,1.4,1.5], 0.1)\n\ndef is_odd(x: int) -> bool:\n    \"\"\" Check if the given integer is odd.\n    \"\"\"\n    pass\n",
        "num_ids_2": 68,
        "num_ids_4": 68
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 0.2) == True\nassert     has_close_elements([1, 2, 3, 4, 5], 2) == False\nassert     has_close_elements([5], 0.2) == False\nassert     has_close_elements([4], 0.2) == False\nassert     has_close_elements([3, 4, 5], 0.2) == False\n",
        "num_ids_2": 50,
        "num_ids_4": 86
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_close_elements(numbers: List[float], threshold: float) -> List[float]:\n    \"\"\" Return a list with the indices of the numbers that are closer to each other than\n    given threshold.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         has_close_elements([3, 5, 1], 2) == True\nassert         has_close_elements([3, 5, 1], 0) == True\nassert         has_close_elements([3, 5, 1], 1.5) == True\nassert         has_close_elements([3, 5, 1], 0.3) == True\nassert         has_close_elements([3, 5, 1], 0.4) == True\n",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     has_close_elements([], 0.1) == False\nassert     has_close_elements([1], 0.1) == False\nassert     has_close_elements([2], 0.1) == False\nassert     has_close_elements([2, 3], 0.1) == False\nassert     has_close_elements([2, 3, 4], 0.1) == False\n",
        "num_ids_2": 35,
        "num_ids_4": 73
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('()((((()())))', \n                                '()((((()()))))') == ['()((((()()))))']\nassert     separate_paren_groups('(()()()()(()(((())))))', \n                                '()()()()(()(((())))))') == ['()()()()(()(((())))))']\nassert     separate_paren_groups('((()()())', \n                                '()((()())))') == ['()((()())))']\nassert     separate_paren_groups('(((()()())))', \n                                '()((()())))') == ['()((()())))']\nassert     separate_paren_groups('(()((((()())))))', \n                                '()((()())))') == ['()((()())))']\n",
        "num_ids_2": 42,
        "num_ids_4": 76
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"{a, b, c}\") == [\"{a, b, c}\"], \"First\"\nassert     separate_paren_groups(\"{a,{b,c}}\") == [\"{a,{b,c}}\"], \"Second\"\nassert     separate_paren_groups(\"{a{b, c}}\") == [\"{a{b, c}}\"], \"Third\"\nassert     separate_paren_groups(\"{{a, {b, c}}\") == [\"{{a, {b, c}}\"], \"Fourth\"\nassert     separate_paren_groups(\"[a, {b, c}, d]\") == [\"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[a, {b, c}, d]\", \"[",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups('{1,2}') == ['{', '1', ',', '2', '}']\nassert     separate_paren_groups('{1,(2),3}') == ['{', '1', ',', '(', '2', ',', '3', '}']\nassert     separate_paren_groups('{1,2} {3}') == ['{', '1', ',', '2', '}', '{', '3', '}']\nassert     separate_paren_groups('{1,2} {3}') == ['{', '1', ',', '2', '}', '{', '3', '}']\nassert     separate_paren_groups('{1,2} {3}') == ['{', '1', ',', '2', '}', '{', '3', '}']\n",
        "num_ids_2": 72,
        "num_ids_4": 158
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"{()}((((())))()()\") ==     [\"{()}\", \"(\", \"((())\", \"(\", \")\", \")()\"]\nassert     separate_paren_groups(\"{(()}((((())))()\") ==     [\"{(()}\", \"(\", \"(\", \"(\", \")\", \")()\"]\nassert     separate_paren_groups(\"{()}{(()}((()))}\") ==     [\"{()}{(()}\", \"(\", \")\", \")()\", \"}\"]\nassert     separate_paren_groups(\"{()}{(()}(()\") ==     [\"{()}{(()}\", \"(\", \")\", \")()\", \"()\"]\nassert     separate_paren_groups(\"(())\") ==     [\"(\", \")\", \"()\"]\n",
        "num_ids_2": 81,
        "num_ids_4": 163
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"()\") == ['()'], \"Wrong output\"\nassert     separate_paren_groups(\"(())\") == ['(()', '()'], \"Wrong output\"\nassert     separate_paren_groups(\"((()())\") == ['((()())', '()()', '(())', '()'], \"Wrong output\"\nassert     separate_paren_groups(\"(()(())\") == ['((()())', '(()', '(())'], \"Wrong output\"\nassert     separate_paren_groups(\"(()(()(()))\") == ['((()())', '()()', '(()(()))'], \"Wrong output\"\n",
        "num_ids_2": 49,
        "num_ids_4": 118
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"(a)\") == [\"a\"]\nassert     separate_paren_groups(\"()\") == []\nassert     separate_paren_groups(\"(a)()()\") == [\"a\",\"a\",\"a\"]\nassert     separate_paren_groups(\"()((a))()\") == [\"(\",\"(\",\"a\"),\")\"]\nassert     separate_paren_groups(\"(a(b)c)\") == [\"(\",\"a\",\"(\",\"b\"),\")\",\"c\"]\n",
        "num_ids_2": 32,
        "num_ids_4": 83
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups('') == []\nassert     separate_paren_groups('()') == ['', '']\nassert     separate_paren_groups('(())') == ['', '']\nassert     separate_paren_groups('((())') == ['', '']\nassert     separate_paren_groups('((())()())') == ['', '()()()', '', '()()()', '()', '()']\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"(())())\") == [\"((()))\"]\nassert     separate_paren_groups(\"(()(()))\") == [\"((()()))\"]\nassert     separate_paren_groups(\"(()(()()())((())))\") == [\"((()()()()(((()))))\"]\nassert     separate_paren_groups(\"(()()(((()())()))\") == [\"((()()(((()()())))))\"]\nassert     separate_paren_groups(\"()((((()())))\") == [\"(((()()))))\"]\n",
        "num_ids_2": 43,
        "num_ids_4": 109
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ntest_string = \"\"\"\n(((())) (() ()))\n((((()))))\n(((())) (() ((())) (()()))))\n((((()))))\n(((())))\n\"\"\"\ntest_string = \"(() (() (()))) (() (()))\"\ntest_string = \"(((())) (() (())))\"\ntest_string = \"(()))\"\ntest_string = \"(()()))()\"\ntest_string = \"((((()))))\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups('', '') == []\nassert     separate_paren_groups('[', ']') == ['[', ']']\nassert     separate_paren_groups('{', '}') == ['{', '}']\nassert     separate_paren_groups('()', '()') == ['()']\nassert     separate_paren_groups('()[', '()]') == ['()', '[]']\n",
        "num_ids_2": 37,
        "num_ids_4": 78
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     truncate_number(2.0) == 2\nassert     truncate_number(0.1) == 0.1\nassert     truncate_number(0.5) == 0\nassert     truncate_number(0.99) == 1\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     truncate_number(1.5) == 1\nassert    truncate_number(3.5) == 2\nassert    truncate_number(1.9) == 2\nassert    truncate_number(2.9) == 3\nassert    truncate_number(3.1) == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     truncate_number(3.14) == 3\nassert     truncate_number(3.59) == 3\nassert     truncate_number(3.99) == 3\nassert     truncate_number(4.00) == 4\nassert     truncate_number(4.01) == 4\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     truncate_number(2.7) == 2.7\nassert     truncate_number(3.3) == 3\nassert     truncate_number(3.5) == 3\nassert     truncate_number(3.0) == 3.0\nassert     truncate_number(4.0) == 4\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    truncate_number(1.5) == 1\nassert \n    truncate_number(2.5) == 2\nassert \n    truncate_number(3.5) == 3\nassert \n    truncate_number(4.5) == 4\nassert \n    truncate_number(5.5) == 5\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     truncate_number(3.2) == 2.2\nassert     truncate_number(3.6) == 2.3\nassert     truncate_number(3.89) == 2.8\nassert     truncate_number(3.99) == 4.0\nassert     truncate_number(4.1) == 4.0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     truncate_number(0.5) == 0.5\nassert     truncate_number(0.999) == 0.999\nassert     truncate_number(1.5) == 1\nassert     truncate_number(1.999) == 1\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_maximum_subarray(arr: List[int]) -> int:\n    \"\"\" Given an array, find the maximum sum of contiguous subarray.\n    \"\"\"\n    pass\n\ndef find_minimum_subarray(arr: List[int]) -> int:\n    \"\"\" Given an array, find the minimum sum of contiguous subarray.\n    \"\"\"\n    pass\n\ndef next_greater_elem(arr: List[int]) -> List[int]:\n    \"\"\" Given an array arr of N integers, find the next greater element for each element. \n    The next greater element for an element x is the first greater element on the right side of x in arr.\n    If there is no next greater element, output -1 for this element.\n    \"\"\"\n    pass\n\ndef next_smaller_elem(arr: List[int]) -> List[int]:\n    \"\"\" Given an array arr of N integers, find the next smaller element for each element. \n    The next smaller element for an element x is the first smaller element on the left side of x in arr.\n    If there is no next smaller element, output -1 for this element.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     below_zero([2, 1, 1, 0, 1, 1, 0]) == True\nassert     below_zero([2, 1, 1, 0, 1, 1, 0, 1, 1]) == True\nassert     below_zero([2, 1, 1, 0, 1, 1, 0, 1, 1, -1, 1, 1]) == True\nassert     below_zero([2, 1, 1, 0, 1, 1, 0, 1, 1, -1, 1, 1, 1, 1]) == True\nassert     below_zero([2, 1, 1, 0, 1, 1, 0, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, 1]) == True\n",
        "num_ids_2": 50,
        "num_ids_4": 122
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    below_zero([\n        1001,\n        0,\n        1002,\n        -100\n    ]) == True\n\nassert below_zero([\n    1001,\n    0,\n    1002,\n    -100,\n    1001\n]) == True\n\nassert below_zero([\n    1001,\n    0,\n    1002,\n    -100,\n    1003\n]) == False\n",
        "num_ids_2": 9,
        "num_ids_4": 15
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     below_zero(    [-3, 1, 2, -2, 2, -3]    ) == True\nassert     below_zero(    [-3, 1, 2, -2, 2, -4, 4]    ) == False\nassert     below_zero(    [3, 1, 2, -2, 2, -4, 4]    ) == False\nassert     below_zero(    [0, 1, 2, -2, 2, -4, 4]    ) == True\nassert     below_zero(    [-3, 1, 2, -2, 2, -3]    ) == True\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef above_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls above zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nbelow_zero([0,1,3,2,0]) is True\nbelow_zero([0,1,2,3,2]) is False\nbelow_zero([0,1,2,0,-1,2]) is True\nbelow_zero([0,1,2,0,-1,-2]) is False\nbelow_zero([-1,0,1,2,2,1,1,2,0]) is True\nbelow_zero([-1,0,1,2,2,1,1,-1,2,0]) is False\n\n\ndef check_if_no_signs(operations: List[int]) -> bool:\n    \"\"\" Given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance, check if at any point the balance of the account has any negative value or any\n    positive value. If the account has only zero balance, return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    below_zero([0, -10, 20, 5, -5, -20])\n    >>> True\n    below_zero([0, -10, 20, 5, -20])\n    >>> False\n    below_zero([0, -10, -20, 5, -5, -20])\n    >>> False\n    below_zero([0, -10, -20, 5, -5, -20])\n    >>> False\n\ndef max_cash_balance(operations: List[int]) -> int:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to find the maximum amount of cash available at the end of the\n    transaction. For example, if you have deposit of 5 $ and withdrawal of 10 $, at the end of\n    the transaction you have (5 $ + 10 $) but if you're withdrawing more money than you deposited\n    you should return 0 as you can't make any transaction.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_zero([-1, 2, 3]) == True\nassert     below_zero([1, -1, 2]) == False\nassert     below_zero([1, 1, -1]) == True\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     below_zero([1, 3, 3, 2, 0]) == True, 'Wrong output'\nassert     below_zero([1, 3, 3, 2, 1]) == False, 'Wrong output'\nassert     below_zero([-1, -3, -3, -2, 0]) == False, 'Wrong output'\nassert     below_zero([-1, -3, -3, -2, 1]) == True, 'Wrong output'\n",
        "num_ids_2": 50,
        "num_ids_4": 108
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    mean_absolute_deviation([1, 3, 8]) == 2.0\n\nassert \n    mean_absolute_deviation([-1, -2, -3]) == 3.0\n\nassert \n    mean_absolute_deviation([0, 1, 2]) == 1.0\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 3.\nassert     mean_absolute_deviation([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1.\nassert     mean_absolute_deviation([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) == 4.3\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5, -6]) == 3.\nassert     mean_absolute_deviation([-100, -2, -3, -4, -5, -6]) == 3.\n",
        "num_ids_2": 58,
        "num_ids_4": 139
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    input_list = [8, 3, 6, -7, 1, 2, 5, -7, 5, 7]\n    mean_absolute_deviation(input_list)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert mean_absolute_deviation([1,2,3,4,5]) == 1.25, \\\n    \"Error in calculating mean_absolute_deviation\"\nassert mean_absolute_deviation([-1,-2,-3,-4,-5]) == 1.25, \\\n    \"Error in calculating mean_absolute_deviation\"\nassert mean_absolute_deviation([0,0,0,0,0]) == 0, \\\n    \"Error in calculating mean_absolute_deviation\"\nassert mean_absolute_deviation([-1,0,1,2]) == 1, \\\n    \"Error in calculating mean_absolute_deviation\"\n",
        "num_ids_2": 28,
        "num_ids_4": 77
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    # test 1\n    mean_absolute_deviation([-1, 2, 3, 4, -5, 10]) == 5.0\n\n    # test 2\n    mean_absolute_deviation([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 10.0\n\n    # test 3\n    mean_absolute_deviation([1, 2, 3, 4, 5]) == 0.0\n    # test 4\n    mean_absolute_deviation([2, 4, 6, 8]) == 1.0\n    # test 5\n    mean_absolute_deviation([10, 20, 30, 40, 50]) == 5.0\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - median |\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 1.7320508075688772\nassert     mean_absolute_deviation([2, 2, 2, 2]) == 0\nassert     mean_absolute_deviation([2, 2, 2, 2, 2]) == 0\nassert     mean_absolute_deviation([2, 2, 2, 2, 2, 2]) == 0\nassert     mean_absolute_deviation([2, 2, 2, 2, 2, 2, 2]) == 0\n",
        "num_ids_2": 48,
        "num_ids_4": 94
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert mean_absolute_deviation([1, 2, 3, 4]) == 1.0\nassert mean_absolute_deviation([5, 6, 7, 8]) == 0.0\nassert mean_absolute_deviation([4, -3, -1, 4, 5]) == 2.0\n",
        "num_ids_2": 24,
        "num_ids_4": 70
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([2, 3, 5, 8, 11, 13]) == 2.7\nassert     mean_absolute_deviation([2.5, 3.5, 5.5, 8.5, 11.5, 13.5]) == 2.5\nassert     mean_absolute_deviation([2, 3, 5, 8, 11, 13, 16, 19]) == 5.4\nassert     mean_absolute_deviation([2, 3, 5, 8, 11, 13, 16, 19, 32, 37, 49, 61, 75]) == 4.3\nassert     mean_absolute_deviation([2, 3, 5, 8, 11, 13, 16, 19, 32, 37, 49, 61, 75, 92]) == 4.5\n",
        "num_ids_2": 64,
        "num_ids_4": 134
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersperse([], 0) == []\nassert     intersperse([], 5) == []\nassert     intersperse([0, 1], 5) == [0, 1, 5]\nassert     intersperse([0, 1], 0) == [0, 1, 0, 1]\nassert     intersperse([0, 1], 1) == [0, 1, 1, 0]\n",
        "num_ids_2": 22,
        "num_ids_4": 64
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersperse([1,2,3], 2) == [1,2,2,3]\nassert     intersperse([1,2,3], 3) == [1,2,3,3,3]\nassert     intersperse([1,2,3], 4) == [1,2,3,4,4,4]\nassert     intersperse([1,2,3,4,5], 2) == [1,2,2,3,3,4,4,5]\nassert     intersperse([1,2,3,4,5], 3) == [1,2,2,3,3,4,4,5,5,5]\n",
        "num_ids_2": 50,
        "num_ids_4": 114
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef euler_1(n: int) -> int:\n    \"\"\" \n    returns the sum of the numbers from 1 to n\n    \"\"\"\n    pass\n\nassert euler_1(2) == 1\nassert euler_1(3) == 3\n",
        "num_ids_2": 14,
        "num_ids_4": 25
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ersperse([1,2,3],4) == [1,2,4,3]\nassert ersperse([1,2,3],4) == [1,4,2,3]\nassert ersperse([1,2,3],4) == [1,4,3,2]\nassert ersperse([1,2,3],4) == [1,3,4,2]\nassert ersperse([1,2,3],4) == [1,4,3,2]\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersperse([1, 2, 3], 1) == [1, 1, 2, 3]\nassert     intersperse([1, 2, 3, 4, 5, 6], 2) == [1, 2, 1, 2, 3, 4, 5, 6]\nassert     intersperse([1, 2, 3], 5) == [1, 2, 3, 1, 2, 3]\nassert     intersperse([1, 2, 3], -5) == [1, 2, 3, 1, 2, 3]\nassert     intersperse([1, 2, 3], 5) == [1, 2, 3, 1, 2, 3]\n",
        "num_ids_2": 62,
        "num_ids_4": 119
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n    return result\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            result.append(numbers[i])\n            result.append(delimeter)\n        else:\n            result.append(numbers[i])\n    return result\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"(())\") == 0\nassert     parse_nested_parens(\"(((()()())))\") == 3\nassert     parse_nested_parens(\"(((((()()))))\") == 3\nassert     parse_nested_parens(\"((((((((((()))))))))\") == 6\nassert     parse_nested_parens(\"(((((((((((((((((((((((())))))))))))))))))\n",
        "num_ids_2": 36,
        "num_ids_4": 78
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_nested_parens('(()())') == [2]\nassert     parse_nested_parens('((()())') == [3]\nassert     parse_nested_parens('((((())))') == [4]\nassert     parse_nested_parens('(((((())))') == [3]\nassert     parse_nested_parens('(((((((((((())))))))))))') == [3]\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens('(((()()()()()(((())))((((())())))())))') == [\n                    2, 3, 3, 2, 5, 5, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 81, 8",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"()\") == 1\nassert     parse_nested_parens(\"(())\") == 2\nassert     parse_nested_parens(\"(((())))\") == 3\nassert     parse_nested_parens(\"((()()))\") == 4\nassert     parse_nested_parens(\"((()())(())())\") == 5\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_nested_parens('()') == 1\nassert parse_nested_parens('(()()') == 2\nassert parse_nested_parens('((()()' ) == 3\nassert parse_nested_parens('(((()((())))))(()())') == 6\nassert parse_nested_parens('(((()((()(((()((((())))))))))))(()(()))') == 12\n",
        "num_ids_2": 31,
        "num_ids_4": 70
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"(())\") == [1]\nassert     parse_nested_parens(\"()(())\") == [1, 2]\nassert     parse_nested_parens(\"((()()))\") == [1, 2, 3]\nassert     parse_nested_parens(\"(()())(()())\") == [1, 2, 3, 4]\nassert     parse_nested_parens(\"(()(()))\") == [1, 2, 3]\n",
        "num_ids_2": 39,
        "num_ids_4": 91
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"((()))\") == [1, 2]\nassert     parse_nested_parens(\"(((()())()))\") == [2, 2, 2, 2]\nassert     parse_nested_parens(\"(((((()())()))))\") == [3, 3, 3, 3, 3]\nassert     parse_nested_parens(\"(((((((()())()))()))())()())\") == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n",
        "num_ids_2": 49,
        "num_ids_4": 127
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"()\") == 0\nassert     parse_nested_parens(\"()()\") == 1\nassert     parse_nested_parens(\"(((()()()))())\") == 2\nassert     parse_nested_parens(\"(((()()())(()))())\") == 3\nassert     parse_nested_parens(\"(((()()())((()))())\") == 4\n",
        "num_ids_2": 31,
        "num_ids_4": 75
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\ndef count_matching_parens(paren_string: str, left_paren=None, right_paren=None, inner_paren_count=0) -> int:\n    \"\"\"\n    Parameters\n    ----------\n    paren_string : str\n        input string to count parens.\n    left_paren : str, optional\n        left paren string, by default None\n    right_paren : str, optional\n        right paren string, by default None\n    inner_paren_count : int, optional\n        initial value of inner_paren_count, by default 0\n    Returns\n    -------\n    int\n        number of matching parens between left_paren and right_paren\n    \"\"\"\n    # if paren_string is empty, no parens to match\n    if paren_string == \"\":\n        return inner_paren_count\n    # when parsing a left paren, if it is not matching a right paren yet,\n    # increment inner_paren_count\n    elif left_paren is not None and left_paren!= paren_string[0]:\n        inner_paren_count += 1\n    # when parsing a right paren, if it is not matching a left paren yet,\n    # increment inner_paren_count\n    elif right_paren is not None and right_paren!= paren_string[-1]:\n        inner_paren_count += 1\n    # if the two parens are matching\n    elif left_paren is not None and right_paren is not None and left_paren == right_paren:\n        return inner_paren_count + 1\n    # else, return inner_paren_count\n    else:\n        return count_matching_parens(paren_string[1:-1], left_paren, right_paren, inner_paren_count)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert parse_nested_parens(\"(()(()))\") == [0,1,2]\nassert parse_nested_parens(\"(((()()))\") == [0,1,1]\nassert parse_nested_parens(\"(()((()()))\") == [0,1,2,1]\n",
        "num_ids_2": 27,
        "num_ids_4": 78
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"two\") == [\"two\", \"four\"]\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"foo\") == []\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"two\") == [\"two\", \"four\"]\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"three\") == [\"three\", \"four\"]\nassert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"four\") == [\"four\"]\n",
        "num_ids_2": 65,
        "num_ids_4": 135
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nstrings = [\"hellogalaxy\", \"heygalaxy\", \"hellogalaxy\", \"heygalaxy\", \"hellohello\"]\nassert filter_by_substring(strings, \"galaxy\") == [\"heygalaxy\", \"heygalaxy\"]\nassert filter_by_substring(strings, \"hello\") == [\"hellohello\"]\nassert filter_by_substring(strings, \"\") == []\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_substring(['home', 'god', 'home'], 'home') == ['home']\nassert     filter_by_substring(['hello', 'world', 'home'], 'world') == []\nassert     filter_by_substring(['hello', 'world', 'home'], 'hell') == ['hello', 'home']\nassert     filter_by_substring(['hello', 'world', 'home'], 'hello') == ['hello', 'home']\nassert     filter_by_substring(['hello', 'world', 'home'], 'wor') == ['hello', 'world']\n",
        "num_ids_2": 52,
        "num_ids_4": 112
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"the\", \"red\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"fox\"], \"fox\") == [\"fox\"]\nassert     filter_by_substring([\"the\", \"red\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"fox\"], \"dog\") == [\"fox\"]\nassert     filter_by_substring([\"the\", \"red\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"fox\"], \"leopard\") == [\"fox\"]\nassert     filter_by_substring([\"the\", \"red\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"fox\"], \"lazy\") == [\"fox\"]\nassert     filter_by_substring([\"the\", \"red\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"fox\"], \"dog\") == [\"fox\"]\n",
        "num_ids_2": 86,
        "num_ids_4": 174
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"alex\", \"bob\", \"carlos\", \"daniel\"], \"bob\") == [\"bob\"]\nassert     filter_by_substring([\"alex\", \"bob\", \"carlos\", \"daniel\"], \"bob\") == [\"bob\"]\nassert     filter_by_substring([\"alex\", \"bob\", \"carlos\", \"daniel\"], \"d\") == [\"daniel\"]\nassert     filter_by_substring([\"alex\", \"bob\", \"carlos\", \"daniel\"], \"\") == [\"alex\", \"bob\", \"carlos\", \"daniel\"]\nassert     filter_by_substring([\"\", \"bob\", \"carlos\", \"daniel\"], \"bob\") == [\"bob\", \"carlos\", \"daniel\"]\n",
        "num_ids_2": 72,
        "num_ids_4": 154
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"1\", \"2\", \"3\", \"4\", \"5\"], \"5\") == [\"5\"]\nassert     filter_by_substring([\"1\", \"2\", \"3\", \"4\", \"5\"], \"1\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]\nassert     filter_by_substring([\"1\", \"2\", \"3\", \"4\", \"5\"], \"a\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]\nassert     filter_by_substring([\"1\", \"2\", \"3\", \"4\", \"5\"], \"z\") == [\"1\", \"2\", \"3\", \"4\", \"5\"]\nassert     filter_by_substring([\"1\", \"2\", \"3\", \"4\", \"5\"], \"m\") == []\n",
        "num_ids_2": 76,
        "num_ids_4": 164
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"It's a good idea to be positive\",\n                                \"Didn't you say that again?\",\n                                \"Why, I'll be right\",\n                                \"I'll make the man's life easier\",\n                                \"Hurry up, the man is getting nearer\",\n                                \"Always make friends with the man\"], \"the man\") == ['It\\'s a good idea to be positive',\n                                                                                        'Didn\\'t you say that again?',\n                                                                                        'Why, I\\'ll be right',\n                                                                                        'I\\'ll make the man\\'s life easier',\n                                                                                        'Hurry up, the man is getting nearer',\n                                                                                        'Always make friends with the man']\n\nprint('\\n[1] Filter by substring')\nprint('-'*10)\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_substring([\"a\", \"bc\", \"d\", \"cd\", \"ab\", \"abc\"], \"abcd\") == [\"a\", \"bc\", \"cd\"]\nassert     filter_by_substring([\"a\", \"bc\", \"d\", \"cd\", \"ab\", \"abc\"], \"cb\") == [\"bc\", \"cd\"]\nassert     filter_by_substring([\"a\", \"bc\", \"d\", \"cd\", \"ab\", \"abc\"], \"a\") == [\"a\", \"ab\", \"abc\"]\nassert     filter_by_substring([\"a\", \"bc\", \"d\", \"cd\", \"ab\", \"abc\"], \"bc\") == [\"bc\", \"cd\", \"ab\"]\nassert     filter_by_substring([\"a\", \"bc\", \"d\", \"cd\", \"ab\", \"abc\"], \"d\") == [\"d\", \"cd\", \"ab\"]\n",
        "num_ids_2": 80,
        "num_ids_4": 162
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef filter_by_substring_2(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_substring(['2020101', '2020103', '2020104', '2020105'], '2020103') == ['2020103']\nassert     filter_by_substring(['2020101', '2020103', '2020104', '2020105'], '2020101') == ['2020101']\nassert     filter_by_substring(['2020101', '2020103', '2020104', '2020105'], '2020104') == ['2020104']\nassert     filter_by_substring(['2020101', '2020103', '2020104', '2020105'], '2020105') == ['2020105']\nassert     filter_by_substring(['2020101', '2020103', '2020104', '2020105'], '20201012020') == []\n",
        "num_ids_2": 84,
        "num_ids_4": 168
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([3, 4]) == (6, 8)\nassert     sum_product([10, 2, 1, 1, 1]) == (17, 6)\nassert     sum_product([1, 2, 3, 4, 5]) == (8, 30)\n",
        "num_ids_2": 31,
        "num_ids_4": 71
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_product([1,2,3,4]) == (10, 24)\n\nassert \nsum_product([1,3,4,6]) == (10, 24)\n\nassert \nsum_product([0,1,2,3]) == (0, 6)\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1,2]) == (3, 2)\nassert     sum_product([1,2,3]) == (6, 3)\nassert     sum_product([1,2,3,4,5,6]) == (15, 120)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (3, 6)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([-1, -2, -3]) == (0, -1)\nassert     sum_product([-1, -2, -3, 0]) == (0, -1)\n",
        "num_ids_2": 33,
        "num_ids_4": 77
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 3)\nassert     sum_product([1, 2, 3, 4]) == (10, 6)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 1)\nassert     sum_product([1,2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (10, 6)\nassert     sum_product([10, 2, 3]) == (16, 12)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_product([]) == (0, 1)\nassert sum_product([0]) == (0, 1)\nassert sum_product([0, 1]) == (0, 1)\nassert sum_product([0, 1, 0]) == (0, 1)\n",
        "num_ids_2": 16,
        "num_ids_4": 46
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_product([]) == (0, 1)\nassert \nsum_product([1, 2]) == (3, 2)\nassert \nsum_product([1, 2, 3]) == (6, 3)\nassert \nsum_product([1, 2, 3, 4]) == (15, 24)\nassert \nsum_product([1, 2, 3, 4, 5]) == (21, 120)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sum_product([1, 2, 3]) == (1, 6)\nassert sum_product([-1, -2, -3]) == (0, 1)\nassert sum_product([-1, -2]) == (0, 2)\nassert sum_product([]) == (0, 1)\n",
        "num_ids_2": 21,
        "num_ids_4": 60
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (3, 6)\nassert     sum_product([2, 3, 5]) == (10, 10)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\n",
        "num_ids_2": 33,
        "num_ids_4": 73
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rolling_max([1,2,3,4,5]) == [1,2,3,4,5]\nassert     rolling_max([2,3,4,5,1]) == [3,4,5,1,2]\nassert     rolling_max([3,4,5,1,2]) == [5,5,5,5,5]\nassert     rolling_max([5,5,5,5,5]) == [5,5,5,5,5]\nassert     rolling_max([1,2,3,4,5,1]) == [1,2,3,4,5,5]\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef _rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \"\"\"\n    # note that the numbers should be sorted\n    # and should also be present in a list\n    # of lists (list of lists)\n    if not numbers:\n        return []\n\n    max_number = numbers[0]\n    max_numbers = [max_number]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > max_number:\n            max_number = numbers[i]\n            max_numbers.append(max_number)\n    return max_numbers\n\ndef test_rolling_max():\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([-10, -3, -2, -1]) == [-10, -3, -2, -1]\nassert     rolling_max([0, 1, 3, -4]) == [0, 1, 3, -4]\nassert     rolling_max([2, -2, -3, 3, -4, 5]) == [3, -3, 5]\nassert     rolling_max([0, 2, -3, -4, 5, 6, -7]) == [5, 6, -7]\n",
        "num_ids_2": 42,
        "num_ids_4": 100
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 3, 5, 5, 5]\nassert     rolling_max([-3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-3, -1, 1, 1, 3, 4, 5, 5, 5]\nassert     rolling_max([-3, -2, -1, 0, 1, 2, 3, 4, 5, 0, -5, -4]) == [-3, -1, 1, 1, 3, 4, 5, 0, -5, -4]\nassert     rolling_max([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == \\\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n",
        "num_ids_2": 78,
        "num_ids_4": 192
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([4, 3, 5, 1, 6, 7]) == [4, 5, 6, 6, 7, 7]\nassert     rolling_max([4, 3, 2, 1, 6, 7]) == [4, 5, 5, 5, 7, 7]\nassert     rolling_max([4, 3, 2, 1, 6, 5]) == [4, 5, 5, 5, 6, 6]\nassert     rolling_max([4, 3, 2, 1, 6, 5, 4]) == [4, 5, 5, 5, 6, 6, 6]\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rolling_max([1,3,5,4,6,7,8,8,8]) == [1,3,5,4,6,7,8,8,8], \"Wrong answer\"\nassert     rolling_max([1,3,5,4,6,7,8,8,8,8,8,8]) == [1,3,5,4,6,7,8,8,8,8,8,8], \"Wrong answer\"\nassert     rolling_max([1,3,5,4,6,7,8,8,8,8,8,8,8,8,8,8]) == [1,3,5,4,6,7,8,8,8,8,8,8,8,8,8,8], \"Wrong answer\"\nassert     rolling_max([1,3,5,4,6,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8",
        "num_ids_2": 112,
        "num_ids_4": 1022
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [\n    1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 1, 1]) == [\n    1, 2, 3, 4, 5, 1, 1]\n",
        "num_ids_2": 58,
        "num_ids_4": 81
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test Cases\n    test_data = [\n        [1, 2, 3],\n        [1, 2, 3, 4, 5],\n        [-2, -1, 0, 1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ]\n\n    for data in test_data:\n        print(f\"{data} -> {rolling_max(data)}\")\n\n    # add your own test cases here\n\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(int(input()))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"aa\") == \"a\"\nassert     make_palindrome(\"aab\") == \"ba\"\nassert     make_palindrome(\"aabab\") == \"b\"\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     make_palindrome('a') == 'a'\nassert     make_palindrome('ab') == 'aba'\nassert     make_palindrome('abba') == 'abba'\nassert     make_palindrome('abbca') == 'abbcba'\nassert     make_palindrome('abccba') == 'abccba'\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_palindrome('racecar') == 'racecar'\nassert make_palindrome('bac') == 'bac'\nassert make_palindrome('abcd') == 'abcd'\n\nif __name__ == '__main__':\n    import python_ta\n    python_ta.check_all(config={\n        'allowed-io': ['make_palindrome'],\n        'allowed-import-modules': [\n            'doctest', 'python_ta', 'random', 'typing',\n            '__future__','math','re'\n        ],\n        'max-attributes': 15\n    })",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(make_palindrome(\"abab\")) # abba\nprint(make_palindrome(\"abcd\")) # abcd\nprint(make_palindrome(\"abcba\")) # abcba\nprint(make_palindrome(\"ababab\")) # abba\nprint(make_palindrome(\"a\")) # a\nprint(make_palindrome(\"\")) # \"\"\n\ndef test_is_palindrome():\n    assert is_palindrome(\"\") is True\n    assert is_palindrome(\"a\") is True\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_palindrome(\"aaaabccc\") == \"aabcccc\", \"Not found\"\nassert     make_palindrome(\"a\") == \"a\", \"Empty string\"\nassert     make_palindrome(\"abcd\") == \"dcba\", \"Wrong alphabet\"\nassert     make_palindrome(\"aac\") == \"aa\", \"Wrong alphabet\"\nassert     make_palindrome(\"abcd\") == \"dcba\", \"Wrong alphabet\"",
        "num_ids_2": 44,
        "num_ids_4": 87
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(make_palindrome(\"racecar\")) ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_palindrome('a') == 'a'\nassert     make_palindrome('ab') == 'ba'\nassert     make_palindrome('aabb') == 'abab'\nassert     make_palindrome('abcd') == 'dcba'\nassert     make_palindrome('a') == 'a'\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_palindrome('abab') == True\nassert     is_palindrome('aba') == True\nassert     is_palindrome('abcba') == True\nassert     is_palindrome('abc') == False\nassert     is_palindrome('a') == False\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_palindrome('a') == True\nassert     is_palindrome('ab') == True\nassert     is_palindrome('abba') == True\nassert     is_palindrome('abab') == False\nassert     is_palindrome('acb') == False\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         string_xor(\"\", \"\") == \"\"\nassert         string_xor(\"a\", \"a\") == \"a\"\nassert         string_xor(\"10\", \"1\") == \"100\"\nassert         string_xor(\"a\", \"\") == \"a\"\nassert         string_xor(\"101010\", \"101010\") == \"\"\n",
        "num_ids_2": 30,
        "num_ids_4": 63
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_xor('0x11', '0x11') == '0x00'\nassert     string_xor('0x11', '0x22') == '0x11'\nassert     string_xor('0x22', '0x11') == '0x11'\nassert     string_xor('0x11', '0x22') == '0x11'\nassert     string_xor('0x22', '0x22') == '0x00'\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_xor(\"0010111\", \"0110111\")     == \"0111001\"\nassert string_xor(\"1010101\", \"0110101\")     == \"0111010\"\nassert string_xor(\"1110101\", \"0110101\")     == \"0111011\"\nassert string_xor(\"1110111\", \"0110111\")     == \"0111100\"\nassert string_xor(\"1111011\", \"0110111\")     == \"0111101\"\n",
        "num_ids_2": 47,
        "num_ids_4": 93
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_xor('1000000000', '010101010') == '0000000000'\nassert     string_xor('1000001111', '010101010') == '010101010'\nassert     string_xor('111110000', '0000000000') == '010101010'\nassert     string_xor('001001010', '010101010') == '010101010'\nassert     string_xor('0000000000', '100101000') == '001001010'\n",
        "num_ids_2": 48,
        "num_ids_4": 97
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_xor('0001','0000') == '1111'\nassert     string_xor('1111','0000') == '0001'\nassert     string_xor('0000','0000') == '0000'\nassert     string_xor('1111','1101') == '0010'\nassert     string_xor('0001', '1111') == '0010'\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_bit(string: str, bit_no: int) -> str:\n    \"\"\" Get the bit of'string' indexed by 'bit_no'\"\"\"\n    assert 0 <= bit_no < len(string), \"Invalid bit number: bit_no\"\n    return string[bit_no]\n\n\ndef bit_flip(bit_str: str, flip_pos: int) -> str:\n    \"\"\" Flip the bit at the index 'flip_pos' of the string 'bit_str'\"\"\"\n    assert 0 <= flip_pos < len(bit_str), \"Invalid bit position: flip_pos\"\n    return bit_str[:flip_pos] + get_bit(bit_str, len(bit_str)-1) + bit_str[flip_pos+1:]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    string_xor(\"1C3B4A5D6F79B8FCC2542BCAB484EEF3\", \"1C3B4A5D6F79B8FCC2542BCAB484EEF3\") == \"7145785B12E24D58F8D0E25A3BD0F5B\"\n    string_xor(\"1C3B4A5D6F79B8FCC2542BCAB484EEF3\", \"1C3B4A5D6F79B8FCC2542BCAB484EEF3\") == \"1A3B4A5D6F79B8FCC2542BCAB484EEF3\"\n\n\ndef string_xor_fixed(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # find how many 1s and 0s a and b has\n    len_a, len_b = len(a), len(b)\n\n    # assuming length is equal\n    assert len_a == len_b\n\n    if len_a == 0: return a\n    if len_a == 1: return a + b\n    if len_a == 2: return a[1] + a[0] + b[1] + b[0]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     longest(['flower', 'flow', 'flight']) == 'flight'\nassert     longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']) == 'aaaaaa'\nassert     longest(['', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']) is None\nassert     longest(['flower', 'flow', 'flight', 'fl', 'f', 'flight']) == 'flight'\nprint(\"correct\")\n",
        "num_ids_2": 52,
        "num_ids_4": 109
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert longest([]) is None\nassert longest(['a','b','c']) == 'c'\nassert longest(['a','b','a','c']) == 'c'\nassert longest(['a','b','a','a','a','c','c','c']) == 'a'\n",
        "num_ids_2": 10,
        "num_ids_4": 44
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     longest([\"ABC\", \"ABD\", \"AB\", \"ABC\", \"ABCD\"]) == \"ABCD\"\nassert longest([]) is None\nassert longest([\"ABC\"]) == \"ABC\"\nassert longest([\"ABCD\"]) == \"ABCD\"\nassert longest([\"ABCD\", \"ABD\", \"AB\", \"ABC\"]) == \"ABC\"\n",
        "num_ids_2": 36,
        "num_ids_4": 62
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     longest([\"abcd\", \"abc\", \"abcde\"]) == \"abcde\"\nassert     longest([\"ab\", \"abc\", \"abcde\"]) == \"abc\"\nassert     longest([\"abc\", \"ab\", \"abcd\"]) is None\nassert     longest([]) is None\nassert     longest([\"\"]) is None\n",
        "num_ids_2": 44,
        "num_ids_4": 72
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert longest([]) is None\nassert longest(['']) is None\nassert longest([''],) == ''\n",
        "num_ids_2": 10,
        "num_ids_4": 27
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef max_index_product(str1: str, str2: str) -> int:\n    \"\"\" Find the maximum value of two integers from the product of two integers.\n    The first integer must be greater or equal to the second one.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abdde\"]) == \"abdde\"\nassert     longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abde\"]) == \"abdde\"\nassert     longest([\"a\", \"ab\", \"abcd\", \"abde\"]) == \"abdde\"\nassert     longest([\"ab\", \"abc\", \"abcd\", \"abde\"]) == \"ab\"\nassert     longest([\"\", \"abc\", \"abcd\", \"abde\"]) == \"abc\"\n",
        "num_ids_2": 61,
        "num_ids_4": 113
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     longest(['']) == None\nassert longest(['abc', 'abc', '']) == 'abc'\nassert longest(['abc', 'abd', 'abc']) == 'abc'\nassert longest(['abc', 'abd', 'abc', 'abc', 'abc']) == 'abc'\nassert longest(['abc', 'abd', 'abc', 'abc', 'abd']) == 'abc'\n",
        "num_ids_2": 26,
        "num_ids_4": 70
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     greatest_common_divisor(10,3) == 3\nassert greatest_common_divisor(2,2) == 2\nassert greatest_common_divisor(5,3) == 1\nassert greatest_common_divisor(100,50) == 5\nassert greatest_common_divisor(1000,500) == 50\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ngreatest_common_divisor(2, 3) == 1\ngreatest_common_divisor(3, 3) == 1\ngreatest_common_divisor(4, 3) == 2\ngreatest_common_divisor(3, 4) == 2\ngreatest_common_divisor(2, 5) == 1\ngreatest_common_divisor(3, 5) == 1\ngreatest_common_divisor(4, 5) == 2\ngreatest_common_divisor(5, 5) == 1\ngreatest_common_divisor(1, 2) == 1\ngreatest_common_divisor(1, 5) == 1\ngreatest_common_divisor(2, 1) == 1\ngreatest_common_divisor(5, 1) == 1\ngreatest_common_divisor(1, 1) == 1\ngreatest_common_divisor(2, 0) == 2\ngreatest_common_divisor(1, 0) == 2\ngreatest_common_divisor(0, 0) == 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    print(\"Testing greatest_common_divisor...\")\n    print()\n\n    # test 1\n    print(\"Test 1...\")\n    assert greatest_common_divisor(2, 4) == 2\n    assert greatest_common_divisor(10, 20) == 5\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(10, 6) == 2\nassert greatest_common_divisor(10, 20) == 10\nassert greatest_common_divisor(10, 30) == 1\n\ndef triangle_number(n: int) -> int:\n    \"\"\" Return a triangle number which is the sum of the numbers of a\n    triangle with n sides.\n    \"\"\"\n    pass\n",
        "num_ids_2": 34,
        "num_ids_4": 50
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nall_prefixes('python') == ['py', 'thon']\nall_prefixes('bottle') == ['bto', 'bo', 'toml', 'to', 'bou', 'bolt', 'btle', 'boi', 'bot', 'tol', 'bou', 'bol', 'tom', 'bou', 'bao', 'boo', 'tol', 'bou', 'bao', 'bot', 'tle', 'bol', 'tol', 'bo', 'tam', 'to']\nall_prefixes('b') == ['bo', 'bou', 'bao', 'bou', 'bao', 'boo', 'bam', 'to', 'bam']\nall_prefixes('x') == []\nall_prefixes('abcdefghijklmnopqrstuvwxyz') == ['a', 'ab', 'abc', 'abe', 'abec', 'abec', 'abec', 'abec', 'abec', 'abc', 'abcd', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'abce', 'a",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nall_prefixes(\"ababab\") == [\"a\", \"ab\", \"aba\", \"abab\", \"ababab\"]\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_prefixes(\"hello\") == [\"h\", \"he\", \"hel\"]\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"h\") == [\"h\"]\nassert     all_prefixes(\"hello\") == [\"hello\"]\nassert     all_prefixes(\"hello world\") == [\"hello\", \"hello world\"]\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert\nall_prefixes('abb') == ['a', 'ab', 'abb']\nassert\nall_prefixes('abccba') == ['ab', 'ac', 'a', 'abc']\nassert\nall_prefixes('abc') == ['abc']\n",
        "num_ids_2": 5,
        "num_ids_4": 9
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert all_prefixes(\"cac\") == [\"caca\",\"cac\"]\nassert all_prefixes(\"banana\") == [\"ban\",\"ana\",\"nan\",\"nana\",\"bana\",\"banana\"]\nassert all_prefixes(\"basket\") == [\"bask\",\"ba\",\"ska\",\"ska\"]\n",
        "num_ids_2": 21,
        "num_ids_4": 71
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_prefixes(\"\") == [\"\"]\nassert all_prefixes(\"a\") == [\"a\"]\nassert all_prefixes(\"aa\") == [\"a\", \"aa\"]\nassert all_prefixes(\"aab\") == [\"a\", \"aa\", \"aab\"]\nassert all_prefixes(\"cac\") == [\"c\", \"ca\", \"cac\"]\n",
        "num_ids_2": 25,
        "num_ids_4": 62
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_prefixes(\"aabc\") == [\"a\", \"aa\", \"aab\", \"aba\", \"abc\"]\nassert all_prefixes(\"abcd\") == [\"a\", \"ab\", \"abc\", \"abd\"]\nassert all_prefixes(\"aaaaa\") == [\"aa\", \"aaa\"]\nassert all_prefixes(\"abcdef\") == [\"a\", \"ab\", \"abc\", \"abd\", \"abf\", \"abef\", \"abdef\"]\nassert all_prefixes(\"abcabcabc\") == [\"a\", \"ab\", \"abc\", \"abcabc\", \"abcabcab\", \"abcabcabc\"]\n",
        "num_ids_2": 52,
        "num_ids_4": 105
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_prefixes('ABC') == ['AB', 'AC', 'ABC']\nassert     all_prefixes('ABCD') == ['AB', 'AC', 'ABC', 'ABCD']\nassert     all_prefixes('ABCD') == ['AB', 'AC', 'ABC', 'ABCD']\nassert     all_prefixes('ABCDEFGHIJ') == ['AB', 'AC', 'ABC', 'ABCD', 'ABCDE', 'ABCDEF', 'ABCDEFGHI', 'ABCDEFGHIJ']\n",
        "num_ids_2": 45,
        "num_ids_4": 117
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_prefixes('adakko') == ['a', 'ad', 'ak', 'd', 'a', 'ko'], 'incorrect prefixes'\nassert     all_prefixes('Kik') == ['k', 'i', 'k', 'i'], 'incorrect prefixes'\nassert     all_prefixes('Kik') == ['k', 'i', 'k', 'i'], 'incorrect prefixes'\nassert     all_prefixes('Kik') == ['k', 'i', 'k', 'i'], 'incorrect prefixes'\nassert     all_prefixes('Kik') == ['k', 'i', 'k', 'i'], 'incorrect prefixes'\n",
        "num_ids_2": 69,
        "num_ids_4": 131
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_sequence(4) == '0 1 2 3'\nassert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(6) == '0 1 2 3 4 5'\nassert     string_sequence(7) == '0 1 2 3 4 5 6'\nassert     string_sequence(8) == '0 1 2 3 4 5 6 7'\n",
        "num_ids_2": 33,
        "num_ids_4": 70
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_sequence(10) =='0  1  2  3  4  5  6  7  8  9 10'\nassert     string_sequence(100) ==' 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'\n\ndef string_sequence_rev(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from n upto 0 inclusive.\n    \"\"\"\n    pass\n",
        "num_ids_2": 153,
        "num_ids_4": 153
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_sequence(0) == '0'\nassert     string_sequence(1) == '0 1'\nassert     string_sequence(2) == '0 1 2'\nassert     string_sequence(3) == '0 1 2 3'\nassert     string_sequence(4) == '0 1 2 3 4'\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(4) == '0 1 2 3'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(5) == '0 1 2 3 4'\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_sequence(6) ==' 0  1  2  3  4  5'\nassert string_sequence(1) == '0'\nassert string_sequence(0) == ''\nassert string_sequence(2) =='0  1'\nassert string_sequence(3) ==' 0  1  2'\n",
        "num_ids_2": 35,
        "num_ids_4": 59
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \" 0\\n 1\"\nassert     string_sequence(3) == \"  0\\n   1\\n    2\"\nassert     string_sequence(5) == \"    0\\n      1\\n       2\\n        3\\n         4\"\nassert     string_sequence(10) == \"        0\\n         1\\n          2\\n           3\\n            4\\n             5\\n              6\\n             7\\n            8\\n             9\\n            10\"\n",
        "num_ids_2": 29,
        "num_ids_4": 81
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_sequence(4) == '00 01 02 03'\nassert     string_sequence(5) == '00 01 02 03 04'\nassert     string_sequence(6) == '00 01 02 03 04 05'\nassert     string_sequence(7) == '00 01 02 03 04 05 06'\nassert     string_sequence(8) == '00 01 02 03 04 05 06 07'\n",
        "num_ids_2": 33,
        "num_ids_4": 70
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"ab\") == 2\nassert     count_distinct_characters(\"aabb\") == 3\nassert     count_distinct_characters(\"aabB\") == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert count_distinct_characters(\"a\") == 1\nassert count_distinct_characters(\"ab\") == 2\nassert count_distinct_characters(\"aabbcc\") == 5\nassert count_distinct_characters(\"abcdefghijklmnopqrstuvwxyz\") == 26\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_distinct_characters('abc') == 3\ncount_distinct_characters('aabb') == 2\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"AA\") == 2\nassert     count_distinct_characters(\"abcd\") == 4\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not \nassert count_distinct_characters('') == 0\nassert count_distinct_characters('a') == 1\nassert count_distinct_characters('A') == 1\n",
        "num_ids_2": 7,
        "num_ids_4": 35
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters('Practice makes perfect') == 6\nassert     count_distinct_characters('AbCdEfGhIjKlmmnOpQRS') == 10\nassert     count_distinct_characters('ASDFGHJKL') == 0\nassert count_distinct_characters('A') == 1\n\ndef count_substring(string: str, substring: str) -> int:\n    \"\"\" Given a string and a substring, how many times does the substring appear in the string\n    \"\"\"\n    pass\n",
        "num_ids_2": 47,
        "num_ids_4": 81
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_music('*') == [4]\nassert     parse_music('*..') == [2, 2, 2, 2]\nassert     parse_music('*...') == [2, 2, 2, 2, 2]\nassert     parse_music('*..*') == [3, 3, 3, 3, 3, 3, 3]\nassert     parse_music('*..*.') == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n",
        "num_ids_2": 33,
        "num_ids_4": 82
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef parse_score(score_string: str) -> List[List[int]]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of integers corresponding to how many beats does each\n    note lasts.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_music(\"'o|'\") == [2]\nassert     parse_music(\"'o|'|'o'\") == [2,2,1]\nassert     parse_music(\"'o|'|'o|'o'\") == [2,2,1,1]\nassert     parse_music(\"'o|'|'o|'o'|'o'\") == [2,2,1,1,1]\nassert     parse_music(\"'o|'|'o|'o'|'o'|'o'\") == [2,2,1,1,1,1]\n",
        "num_ids_2": 40,
        "num_ids_4": 104
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef split_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    Your output must be a list of strings for each beat, each a string of the form <numerical_note> where\n    <numerical_note> is either 'o' or 'o|' or ''.\n    Your output must be the same length as music_string\"\"\"\n    pass\n\n\ndef get_note_duration(note: str) -> float:\n    \"\"\"\n    :param note: a string of the form <numerical_note>\n    :return: duration in seconds\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_music(\"'o'\") == ['o', 'o', 'o', 'o']\nassert     parse_music(\"'o|\") == ['o', 'o', 'o', 'o']\nassert     parse_music(\"'.|'\") == ['o', 'o', 'o', 'o', 'o']\nassert     parse_music(\"'o|'\") == ['o', 'o', 'o', 'o']\nassert     parse_music(\"'o'o'\") == ['o', 'o', 'o', 'o']\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_music(\"o|\") == [4]\nassert     parse_music(\"o|\") == [4, 2]\nassert     parse_music(\"o|\") == [4, 2, 1]\nassert     parse_music(\"o|\") == [4, 2, 1, 4]\nassert     parse_music(\"o|\") == [4, 2, 1, 4, 2]\n",
        "num_ids_2": 30,
        "num_ids_4": 68
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_music('o') ==  [4, 1]\nassert     parse_music('o|') ==  [2, 2]\nassert     parse_music('.|') ==  [1, 1]\nassert     parse_music('o|o|') ==  [3, 3]\nassert     parse_music('.|o|') ==  [2, 2, 1]\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times(\"\", \"\")     == 0\nassert     how_many_times(\"\", \"1\")     == 0\nassert     how_many_times(\"\", \"ab\")     == 0\nassert     how_many_times(\"ab\", \"\")     == 0\nassert     how_many_times(\"aab\", \"a\")     == 1\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert how_many_times('mississippi', 'iss') == 2\nassert how_many_times('mississippi', 'issi') == 1\nassert how_many_times('mississippi','m') == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     how_many_times(\"this is a test\", \"test\") == 2\nassert     how_many_times(\"this is a test\", \"s\") == 2\nassert     how_many_times(\"how are you?\", \"are\") == 1\n",
        "num_ids_2": 38,
        "num_ids_4": 56
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_all_substrings(string: str, substring: str) -> List[str]:\n    \"\"\" Get all substrings of a given string that are found in the given substring.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     how_many_times(\"aababc\", \"abc\") == 2\nassert     how_many_times(\"aababc\", \"ab\") == 2\nassert     how_many_times(\"aababc\", \"a\") == 1\nassert     how_many_times(\"aababc\", \"b\") == 0\nassert     how_many_times(\"aababc\", \"c\") == 0\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     how_many_times(\"hello world\", \"o\") == 2\nassert     how_many_times(\"hello world\", \"l\") == 1\nassert     how_many_times(\"hello world\", \"l\") == 1\nassert     how_many_times(\"hello world\", \"r\") == 2\nassert     how_many_times(\"hello world\", \"o\") == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numbers('two seven eight nine zero one 2 3 four 5') == 'zero one 2 three 4 5 seven eight nine'\nassert     sort_numbers('nine seven eight zero one 2 3 four 5') == 'zero one 2 three 4 5 seven eight nine'\nassert     sort_numbers('nine seven eight zero one 2 3 four 5') == 'zero one 2 three 4 5 seven eight nine'\nassert     sort_numbers('zero nine seven eight one two 3 four 5') == 'zero one 2 three 4 5 seven eight nine'\nassert     sort_numbers('zero nine seven eight one two 3 four 5') == 'zero one 2 three 4 5 seven eight nine'\n",
        "num_ids_2": 61,
        "num_ids_4": 121
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sort_numbers('one two three four five six seven eight nine') == 'nine eight seven six five four three two one'\nassert sort_numbers('one one one one one one one one one one') == 'one one one one one one one one one one'\n\n\ndef sum_distances(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    Use the supplied distance metric.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numbers(\"one zero\") == \"zero one\", \"one zero failed\"\nassert     sort_numbers(\"one two\") == \"two one\", \"one two failed\"\nassert     sort_numbers(\"three one\") == \"one three\", \"one three failed\"\nassert     sort_numbers(\"four two\") == \"two four\", \"two four failed\"\nassert     sort_numbers(\"four one\") == \"one four\", \"one four failed\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers(\"one\") == \"one\"\nassert     sort_numbers(\"zero\") == \"zero\"\nassert     sort_numbers(\"three\") == \"three\"\nassert     sort_numbers(\"two\") == \"two\"\nassert     sort_numbers(\"six\") == \"six\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef plus_one(digits: List[int]) -> List[int]:\n    \"\"\" Input is a list of digits.\n    Return a new list that is the same as the original but with the 'plus one' operation applied to each digit.\n    The plus one operation may or may not require conversion.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numbers('one one zero') == 'zero one one'\nassert     sort_numbers('two four three') == 'three four two'\nassert     sort_numbers('five three five') == 'five three five'\nassert     sort_numbers('seven five eight') == 'eight five seven'\nassert     sort_numbers('seven eight') == 'eight seven'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numbers('zero four one five three two') == 'one zero four three two five'\nassert     sort_numbers('zero nine one two three four five six seven eight') == 'one zero two three four five 6 seven eight nine'\nassert     sort_numbers('zero nine one two three four five six seven eight') == 'one zero two three four 5 6 7 8 9'\nassert     sort_numbers('zero nine one two three four five 6 7 8 9') == 'one zero two three 4 5 6 7 8 9'\nassert     sort_numbers('zero nine one two 3 four five 6 seven eight 9') == 'one zero two 3 4 5 6 7 8 9'\n",
        "num_ids_2": 56,
        "num_ids_4": 121
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(find_closest_elements([4, 6, 10, 13, 14])) # (6, 10)\nprint(find_closest_elements([4, 6, 10, 14, 15])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 16])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 13, 14, 15])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 13, 14, 16])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 17])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 13, 14, 15, 16, 17])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 13, 14, 15, 16, 17, 18, 19])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])) # (4, 14)\nprint(find_closest_elements([4, 6, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])) # (4, 14)\nprint(find_clo",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_closest_elements([4, 5, 6, 7, 8, 10]) == (7, 10)\nassert     find_closest_elements([4, 5, 6, 7, 8, 10, 11]) == (7, 10)\nassert     find_closest_elements([4, 5, 6, 7, 8, 10, 11, 13]) == (7, 10)\nassert     find_closest_elements([4, 5, 6, 7, 8, 10, 11, 13, 14]) == (7, 10)\nassert     find_closest_elements([4, 5, 6, 7, 8, 10, 11, 13, 14, 16]) == (7, 10)\n",
        "num_ids_2": 62,
        "num_ids_4": 132
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_closest_elements([1.2, 2.4, 3.5, 4.7]) == (2.4, 3.5)\nassert     find_closest_elements([1.0, 1.5, 2.4]) == (1.0, 1.5)\nassert     find_closest_elements([5, 7, 10]) == (7, 10)\nassert     find_closest_elements([1.0, 2.5, 3.5, 4.6]) == (1.0, 2.5)\nassert     find_closest_elements([2.1, 3.2, 4.6, 5.7, 6.5]) == (4.6, 5.7)\n",
        "num_ids_2": 72,
        "num_ids_4": 134
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_closest_elements([1.5, 2.4, 3.9]) == (1.5, 2.4)\nassert     find_closest_elements([1.5, 2.4, 3.9]) == (1.5, 2.4)\nassert     find_closest_elements([-1.5, 2.4, 3.9]) == (2.4, 3.9)\nassert     find_closest_elements([0, 2.4, 3.9]) == (0, 2.4)\nassert     find_closest_elements([0, 2.4, 3.9]) == (0, 2.4)\n",
        "num_ids_2": 68,
        "num_ids_4": 133
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_closest_elements([1,2,3]) == (2, 3), \"Wrong answer\"\nassert     find_closest_elements([1,2,3,4]) == (1, 2), \"Wrong answer\"\nassert     find_closest_elements([1,2,3,4,5]) == (1, 2), \"Wrong answer\"\nassert     find_closest_elements([1,2,3,4,5,6]) == (1, 2), \"Wrong answer\"\nassert     find_closest_elements([1,2,3,4,5,6,7]) == (1, 2), \"Wrong answer\"\n",
        "num_ids_2": 60,
        "num_ids_4": 128
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_closest_elements([-3.2, -1, 2, -5]) == (-1, 2)\nassert     find_closest_elements([-4, -1, 1, 2, 5, -7]) == (-1, 5)\nassert     find_closest_elements([1, 2, -1]) == (1, 2)\nassert     find_closest_elements([1, 2, 0]) == (1, 2)\nassert     find_closest_elements([-1.0, -1.0, -1.0, -1.0]) == (-1.0, -1.0)\n",
        "num_ids_2": 64,
        "num_ids_4": 113
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rescale_to_unit([1,2,3,4,5,6,7,8,9,10]) == [0.08,0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0,2.2,2.4,2.6,2.8,3.0,3.2,3.4,3.6,3.8,4.0,4.2,4.4,4.6,4.8,5.0,5.2,5.4,5.6,5.8,6.0,6.2,6.4,6.6,6.8,7.0,7.2,7.4,7.6,7.8,8.0,8.2,8.4,8.6,8.8,9.0,9.2,9.4,9.6,9.8,10.0]\n\nassert rescale_to_unit([-1,0,1,2,3,4,5,6,7,8,9,10]) == [-1,0,1,2,3,4,5,6,7,8,9,10]\n\n",
        "num_ids_2": 238,
        "num_ids_4": 298
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8]) == \n    [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n    assert rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7, 8]) == \n    [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8]\n    assert rescale_to_unit([0, -1, 2, -3, 4, -5, 6, -7, 8]) == \n    [0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8]\n    assert rescale_to_unit([1, -2, 3, -4, 5, -6, 7, -8, 9]) == \n    [0.1, -0.2, 0.3, -0.4, 0.5, -0.6, 0.7, -0.8, 0.9]\n    \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef rescale_to_unit_test():\n    \"\"\"\n    Test:\n    >>> rescale_to_unit([1.0, 3.0, 4.0])\n    [0.0, 0.25, 0.5]\n    \"\"\"\n    pass\n\ndef rescale_to_unit_bis(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Rescales a list of numbers to the range between 0 and 1\n    using a rescale transformation\n    - rescales all numbers to the range between 0 and 1\n    - if all values in the list are of the same type, we assume they are ints\n    - if all values in the list are of the same type, we assume they are floats\n    - if at least one value is of the wrong type, we assume they are floats\n    - if there are only two values, we assume they are ints\n    - if there are more than two values, we assume they are floats\n    \"\"\"\n    pass\n\ndef rescale_to_unit_bis_test():\n    \"\"\"\n    Test:\n    >>> rescale_to_unit_bis([1.0, 3.0, 4.0])\n    [0.0, 0.25, 0.5]\n    >>> rescale_to_unit_bis([1, 3, 4])\n    [0, 0.25, 0.5]\n    >>> rescale_to_unit_bis([1.0, 1.0, 1.0])\n    [0.0, 0.5, 1.0]\n    >>> rescale_to_unit_bis([1.0, 2.0, 3.0])\n    [0.0, 0.25, 0.75]\n    >>> rescale_to_unit_bis([1.0, 2.0, 3.0, 4.0])\n    [0.0, 0.25, 0.5, 1.0]\n    \"\"\"\n    pass\n\ndef rescale_to_unit_invalid_type_test():\n    \"\"\"\n    Test:\n    >>> rescale_to_unit_invalid_type([1.0, 2.0, 3.0, 4.0,'string'])\n    Traceback (most recent call last):\n    ...\n    AssertionError\n    >>> rescale_to_unit_invalid_type([1.0, 2.0, 3.0, 4.0])\n    Traceback (most recent call last):\n    ...\n    AssertionError\n    >>> rescale_to_unit_invalid_type([1.0, 2.0, 3.0, 4.0, 3.0, 4.0, 5.0])\n    Traceback (most recent call last):\n    ...\n    AssertionError\n    >>> rescale_to_unit_invalid_type([1.0, 2.0, 3.0, 4.0, 3.0, 4.0, 5.0, 6.0])\n    Traceback (most recent call last):\n    ...\n    AssertionError\n    >>> rescale_to_unit_invalid_type([1.0, 2.0, 3.0, 4.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n    Traceback (most recent call last):\n    ...\n    AssertionError\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1.1, 2.2, 3.3, 4.4, 5.5]) == [0.1, 0.2, 0.3, 0.4, 0.5]\nassert     rescale_to_unit([-1.1, -2.2, -3.3, -4.4, -5.5]) == [-0.1, -0.2, -0.3, -0.4, -0.5]\n",
        "num_ids_2": 113,
        "num_ids_4": 113
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([1.0, 2.0, 3.0, 4.0]) ==  [0.0, 0.25, 0.5, 0.75]\nassert     rescale_to_unit([0.0, 0.5, 1.0, 1.5, 2.0]) ==  [0.0, 0.25, 0.5, 0.75, 1.0]\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import sys\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import csv\n    import itertools\n    from scipy.interpolate import interp1d\n    from matplotlib.ticker import (MultipleLocator, FormatStrFormatter, AutoMinorLocator,\n                                   MultipleLocator)\n    #from matplotlib import rc\n    #rc('font', **{'family':'sans-serif','sans-serif':['Helvetica']})\n    #rc('text', usetex=True)\n    #plt.style.use('seaborn-whitegrid')\n    plt.rc('font', size=16)\n    plt.rcParams['axes.grid'] = True\n    #plt.rcParams['figure.figsize'] = (8, 6)\n    plt.rcParams['figure.dpi'] = 200\n    plt.rcParams['figure.figsize'] = (4, 2.8)\n    plt.rcParams['figure.titlesize'] = 16\n    plt.rcParams['figure.titleweight'] = 'bold'\n    plt.rcParams['font.size'] = 14\n    plt.rcParams['legend.fontsize'] = 14\n    plt.rcParams['axes.labelsize'] = 14\n    plt.rcParams['axes.labelweight'] = 'bold'\n    plt.rcParams['axes.linewidth'] = 3\n    plt.rcParams['xtick.labelsize'] = 14\n    plt.rcParams['ytick.labelsize'] = 14\n    plt.rcParams['xtick.major.width'] = 3\n    plt.rcParams['xtick.major.size'] = 7\n    plt.rcParams['xtick.minor.width'] = 3\n    plt.rcParams['xtick.minor.size'] = 7\n    plt.rcParams['ytick.major.width'] = 3\n    plt.rcParams['ytick.major.size'] = 7\n    plt.rcParams['ytick.minor.width'] = 3\n    plt.rcParams['ytick.minor.size'] = 7\n\n    #plt.rcParams['axes.grid'] = True\n    #plt.rcParams['axes.grid.which'] = 'both'\n    #plt.rcParams['axes.grid.axis'] = 'both'\n    #plt.rcParams['axes.grid.axis'] = 'x'\n    #plt.rcParams['axes.grid.axis'] = 'y'\n    #plt.rcParams['axes.grid.axis'] = 'both'\n    #plt.rcParams['axes.grid.which'] ='major'\n    #plt.rcParams['axes.grid.which'] ='minor'\n\n    #plt.rcParams['axes.grid'] = True\n    #plt.rcParams['axes.grid.axis'] = 'x'\n    #plt.rcParams['axes.grid.axis'] = 'y'\n    #plt.rcParams['axes.grid.axis'] = 'both'\n    #plt.rcParams['axes.grid.which'] ='major'\n    #plt.rcParams['axes.grid.which'] ='minor'\n    #plt.rcParams['axes.grid.which'] ='major'\n    #plt.rcParams['axes.grid.which'] = 'both'\n\n    plt.rcParams['axes.prop_cycle'] = plt.rcParamsDefault['axes.prop_cycle']\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         rescale_to_unit([0, 1, 0.75, 0.5, 0.2, 0.5]) == [0, 1, 0.75, 0.5, 0.2, 0.5]\nassert         rescale_to_unit([1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1]\nassert         rescale_to_unit([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
        "num_ids_2": 96,
        "num_ids_4": 1023
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert rescale_to_unit([0.0, 1.0, 0.5, 0.7]) == [0.0, 0.4, 0.3, 0.2]\nassert rescale_to_unit([1.0, 2.0, 3.0, 4.0]) == [0.0, 0.2, 0.3, 0.4]\nassert rescale_to_unit([0.0, 0.0, 1.0, 0.5]) == [0.0, 0.0, 0.4, 0.3]\n\n",
        "num_ids_2": 46,
        "num_ids_4": 132
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef rescale_to_unit_and_normalize(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1,\n    and then normalize the list so that all values sum to 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_integers([1, 2, 3]) == []\nassert filter_integers([1, 'a', 3, 'b', 5, 'c']) == []\nassert filter_integers(['a', 1, 'b', 2, 'c', 5]) == ['a', 1, 'b', 2, 'c']\nassert filter_integers([True, 1, 2, 3]) == [1, 2, 3]\n",
        "num_ids_2": 18,
        "num_ids_4": 79
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nvalues = [-4, -6, -7, -8, -10, -3, -5, -1]\nprint(f\"The original list: {values}\")\nprint(f\"Integers: {filter_integers(values)}\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef filter_floats(values: List[Any]) -> List[float]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    return [int(x) for x in values if isinstance(x, int)]\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfilter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert filter_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert filter_integers([]) == []\nassert filter_integers(['a', 0, 1.2, 'b']) == ['a', 0, 1.2, 'b']\nassert filter_integers([True]) == [True]\n",
        "num_ids_2": 52,
        "num_ids_4": 95
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    filter_integers(values = [\"a\", \"b\", \"c\", \"d\"]) == [1, 2, 3, 4]\n    filter_integers(values = [\"1\", \"2\", \"3\", \"4\"]) == [1, 2, 3, 4]\n    filter_integers(values = [\"-10\", \"0\", \"1\", \"2\", \"-5\", \"5\"]) == [-10, -5, 0, 1, 2]\n    filter_integers(values = [\"0\", \"0\", \"-10\", \"0\", \"0\"]) == [0, 0, -10, 0, 0]\n    filter_integers(values = [\"0\", \"0\", \"10\"]) == []\n    filter_integers(values = [\"0\", \"0\", \"\", \"0\"]) == [0]\n\n\n\ndef filter_integer_with_max_and_min(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strlen(\"\") == 0, \"Empty string should return 0\"\nassert     strlen(\"abcd\") == 5, \"Wrong length\"\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strlen(\"A\") == 1, \"Not a single character string\"\nassert     strlen(\"A\") == 1, \"Not a single character string\"\nassert     strlen(\"a\") == 1, \"Not a single character string\"\nassert     strlen(\"ab\") == 2, \"Not a single character string\"\nassert     strlen(\"abc\") == 3, \"Not a single character string\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef list2str(array: list) -> str:\n    \"\"\" Return a string of characters in given list\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(len(''))\nprint(len(' '))\nprint(len('abcdefg'))\nprint(len('abcdefgghijklmnopqrstuvwxyz'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert len(\"test\") == 4\n\n\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    \"\"\"\n    return len(string)\n",
        "num_ids_2": 11,
        "num_ids_4": 11
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef zfill(string: str, length: int) -> str:\n    \"\"\" Return string with zeros padded to the left\n        with the number of zeros specified by the length parameter\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_divisor(4) == 1\nassert largest_divisor(100) == 1\nassert largest_divisor(7) == 1\nassert largest_divisor(1) == 1\nassert largest_divisor(2) == 1\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert largest_divisor(3) == 3\nassert largest_divisor(3) == 2\nassert largest_divisor(6) == 6\nassert largest_divisor(0) == 0\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(largest_divisor(4)) # 3\nprint(largest_divisor(10)) # 5\nprint(largest_divisor(11)) # 11\nprint(largest_divisor(3)) # 1\nprint(largest_divisor(9)) # 3\nprint(largest_divisor(20)) # 5\nprint(largest_divisor(100)) # 5\nprint(largest_divisor(1000)) # 5\nprint(largest_divisor(10000)) # 5\nprint(largest_divisor(100000)) # 5\nprint(largest_divisor(1000000)) # 5\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(f\"The largest divisor of 20 is 5\")\n    print(f\"The largest divisor of 16 is {largest_divisor(16)}\")\n    print(f\"The largest divisor of 30 is 3\")\n    print(f\"The largest divisor of 33 is 3\")\n    print(f\"The largest divisor of 32 is 5\")\n    print(f\"The largest divisor of 12 is 2\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert largest_divisor(1) == 1\nassert largest_divisor(4) == 2\nassert largest_divisor(5) == 2\nassert largest_divisor(6) == 2\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef euclid_algo(a,b):\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_divisor(6) == 2\nassert     largest_divisor(12) == 2\nassert     largest_divisor(21) == 3\nassert     largest_divisor(111) == 11\nassert     largest_divisor(1000) == 2\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_divisor(11) == 3\nassert     largest_divisor(1) == 1\nassert     largest_divisor(25) == 5\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert factorize(1) == []\nassert factorize(2) == [2]\nassert factorize(3) == [3]\nassert factorize(4) == [2,2]\n",
        "num_ids_2": 12,
        "num_ids_4": 34
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     factorize(8) == [2, 2, 2]\nassert     factorize(2) == [2]\nassert     factorize(15) == [2, 3, 5]\nassert     factorize(89) == [2, 3, 5, 11, 13]\nassert     factorize(24) == [2, 2, 2, 3]\n",
        "num_ids_2": 28,
        "num_ids_4": 64
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     factorize(0) == []\nassert     factorize(1) == []\nassert     factorize(2) == []\nassert     factorize(3) == [3]\nassert     factorize(4) == []\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == []\nassert     factorize(12) == [2,2]\nassert     factorize(36) == [2,2,3,3]\nassert     factorize(24) == [2,2,2,2,3]\n",
        "num_ids_2": 20,
        "num_ids_4": 52
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [1]\nassert     factorize(3) == [1, 1]\nassert     factorize(4) == [2]\nassert     factorize(5) == [1, 5]\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     factorize(12) == [2,2,3]\nassert     factorize(25) == [5,5]\nassert     factorize(33) == [3,3]\nassert     factorize(24) == [2,2,2,2]\nassert     factorize(36) == [2,2,3,3]\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [[2]]\nassert     factorize(3) == [[3]]\nassert     factorize(4) == [[2], [2]]\nassert     factorize(5) == [[5]]\n",
        "num_ids_2": 22,
        "num_ids_4": 49
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    numbers = [0,0,1,1,1,2,2,3,3,4]\n    print(f'List: {numbers}')\n    remove_duplicates(numbers)\n    print(f'List: {numbers}')\n    numbers = [0,0,1,1,1,2,2,3,3,4]\n    print(f'List: {numbers}')\n    remove_duplicates(numbers)\n    print(f'List: {numbers}')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1, 2, 1, 3, 4]) == [1, 2, 3, 4], \"Wrong!\"\n\ndef string_translator(string: str) -> List[str]:\n    \"\"\" Translate a string with the following rules:\n    1. for each character c in the string, if c is a digit, replace it with 'x'\n    2. for each character c in the string, if c is an alphabet, replace it with 'y'\n    3. for each character c in the string, if c is a '.', replace it with 'z'\n    4. return the list of characters after being translated\n    \"\"\"\n    pass\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not remove_duplicates([1, 1, 2]) == [1, 2]\nassert remove_duplicates([1, 1, 2, 2]) == [1, 2]\nassert remove_duplicates([1, 2, 2, 3]) == [1, 2, 3]\nassert remove_duplicates([1, 1, 1, 2, 2, 2, 3]) == [1, 1, 2, 2, 3]\n",
        "num_ids_2": 24,
        "num_ids_4": 70
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_duplicates([1, 1, 1]) == [1]\nassert     remove_duplicates([1, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 3, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 2, 3, 3]) == [1, 2, 3]\n",
        "num_ids_2": 44,
        "num_ids_4": 94
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    if not numbers:\n        return []\n    \n    size = len(numbers)\n    i = 0\n    while i < size:\n        if numbers[i]!= numbers[i+1]:\n            numbers.append(numbers[i])\n            i += 1\n        else:\n            numbers.pop(i)\n    return numbers\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_duplicates([2, 4, 3, 5, 3, 2, 6]) ==    [2, 4, 5, 6]\nassert     remove_duplicates([2, 4, 3, 5, 3, 2, 2, 6, 7]) ==    [2, 4, 3, 5, 7]\nassert     remove_duplicates([2, 4, 3, 2, 6, 7, 8, 8, 8]) ==    [2, 4, 3, 7, 8]\n",
        "num_ids_2": 74,
        "num_ids_4": 114
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 1, 2, 1, 3]\n    assert remove_duplicates(numbers) == [1, 2, 3]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_duplicates([0,0,1,1,1,2,2,3,3]) == [0,1,2,3]\nassert     remove_duplicates([1,1,2,2,3,3]) == [1,2,3]\nassert     remove_duplicates([0,0,1,1]) == [0,1]\nassert     remove_duplicates([1,1,2,2]) == [1,2]\nassert     remove_duplicates([0,0,1,2,2]) == [0,1,2]\n",
        "num_ids_2": 66,
        "num_ids_4": 112
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flip_case('abc') == 'ABC'\nassert flip_case('ABC') == 'abc'\nassert flip_case('Abc') == 'ABC'\nassert flip_case('abcABC') == 'ABCabc'\nassert flip_case('AbCb') == 'AbCb'\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flip_case(\"Flip the case\") == \"FLIP THE CASE\"\nassert     flip_case(\"FliP the CasE\") == \"flip the case\"\n\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     flip_case(\"hi\") == \"Hi\"\nassert     flip_case(\"H\") == \"h\"\nassert     flip_case(\"hi there!\") == \"hi there!\"\nassert     flip_case(\"Hi there!\") == \"hi there!\"\nassert     flip_case(\"HELLO\") == \"olleH\"\n",
        "num_ids_2": 28,
        "num_ids_4": 62
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert flip_case('The quick brown fox jumps over the lazy dog.') == 'hT KROWN FOO jumps ovE thE lazy dOG.'\nassert flip_case('Hello world!') == '!oTLrlhWrd'\nassert flip_case('HELLO WORLD!') == '!HELrlwORld!'\nassert flip_case('Can you translate this?\\nI\\'m sorry, I\\'m afraid I can\\'t translate this.') == 'CY ain\\'t yOouD translate thIs?\\nI\\'m SORrry, I\\'m afraid I can\\'t tranSlate thIs.'\n",
        "num_ids_2": 37,
        "num_ids_4": 79
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flip_case(\"Bread\") == \"BREAD\"\nassert     flip_case(\"bread\") == \"bread\"\nassert     flip_case(\"BrEaD\") == \"BRAEd\"\nassert     flip_case(\"BREAD\") == \"bREAD\"\nassert     flip_case(\"BREAD\") == \"bREAD\"\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     flip_case('This Is String') == 'TIS STRING'\nassert     flip_case('hello') == 'hello'\nassert     flip_case('Hi there') == 'hi there'\nassert     flip_case('This is a test') == 'ThIs Is a tEsT'\nassert     flip_case('ACERTYA') == 'ACERTYA'\n",
        "num_ids_2": 33,
        "num_ids_4": 72
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert flip_case('KERNEL') == 'kernell'\nassert flip_case('Kernel') == 'Kernel'\nassert flip_case('Kernel') == 'Kernel'\nassert flip_case('Kernel') == 'Kernel'\n",
        "num_ids_2": 19,
        "num_ids_4": 47
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef print_board(board: List[List[str]]) -> None:\n    \"\"\" Print the board\n    \"\"\"\n    pass\n\ndef get_character_at(x, y, board: List[List[str]]) -> str:\n    \"\"\" Return the character at the x and y coordinate\n    \"\"\"\n    pass\n\ndef get_available_moves(x, y, board: List[List[str]]) -> List[List[int]]:\n    \"\"\" Return a list of available moves for a given position\n    \"\"\"\n    pass\n\ndef get_board_height(board: List[List[str]]) -> int:\n    \"\"\" Return the number of rows in the board\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate([]) == \"\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([\"a\", \"b\"]) == \"a b\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"a b c\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"a b c d\"\n",
        "num_ids_2": 27,
        "num_ids_4": 71
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nconcatenate(['a', 'b', 'c', 'd']) == 'abcd'\nassert concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'aabbccddeeffghijjkkllmmnnooppqqrrssttuuvvwwxxxyyzz'\n",
        "num_ids_2": 116,
        "num_ids_4": 116
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate([\"ab\", \"cd\", \"ef\"]) == \"abcd\"\nassert     concatenate([\"a\", \"bcd\", \"ef\"]) == \"abcd\"\nassert     concatenate([\"ab\", \"cd\", \"ef\", \"g\"]) == \"abcdefg\"\n\n\ndef first_non_repeating_character(string: str) -> str:\n    \"\"\"\n    Given a string,\n    find the first non-repeating character in it and return its\n    index. If it doesn't exist, return -1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 47,
        "num_ids_4": 74
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert concatenate([\"\"]) == \"\", \"Expected ''''' as the result of concatenate(['', '', '', '']) to be ''\"\nassert concatenate([\"1\", \"2\", \"3\", \"4\"]) == \"123\", \"Expected '1 2 3 4' as the result of concatenate(['1', '2', '3', '4']) to be '1 2 3 4'\"\nassert concatenate([\"5\", \"6\", \"7\", \"8\"]) == \"56\", \"Expected '5 6 7 8' as the result of concatenate(['5', '6', '7', '8']) to be '5 6 7 8'\"\nassert concatenate([\"9\", \"10\", \"11\", \"12\"]) == \"910\", \"Expected '9 10 11 12' as the result of concatenate(['9', '10', '11', '12']) to be '9 10 11 12'\"\n",
        "num_ids_2": 40,
        "num_ids_4": 162
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"hello world\"\nassert     concatenate([\"hi\", \"hello\"]) == \"hi hello\"\nassert     concatenate([\"one\", \"two\", \"three\"]) == \"one two three\"\nassert     concatenate([\"1\", \"2\", \"3\"]) == \"13\"\nassert     concatenate([\"12\", \"34\"]) == \"1234\"\n",
        "num_ids_2": 40,
        "num_ids_4": 86
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(concatenate(['a', 'b', 'c', 'd']))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert concatenate(['a', 'b', 'c', 'd']) == \"abcd\"\n    assert concatenate(['m', 'o', 'u', 'k']) == \"moomk\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"Filter by prefix\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"test\", \"test1\", \"test2\", \"test3\", \"test4\"], \"test\") == [\"test\", \"test1\", \"test2\", \"test3\", \"test4\"]\nassert     filter_by_prefix([\"test\", \"test1\", \"test2\", \"test3\", \"test4\"], \"test5\") == []\nassert     filter_by_prefix([\"test\", \"test1\", \"test2\", \"test3\", \"test4\"], \"test6\") == []\n",
        "num_ids_2": 85,
        "num_ids_4": 119
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_prefix([\"A\", \"B\", \"C\"], \"A\") == [\"A\"]\nassert     filter_by_prefix([\"A\", \"B\", \"C\"], \"B\") == [\"B\"]\nassert     filter_by_prefix([\"A\", \"B\", \"C\"], \"C\") == [\"C\"]\nassert     filter_by_prefix([\"A\", \"B\", \"C\"], \"D\") == []\nassert     filter_by_prefix([\"A\", \"B\", \"C\"], \"E\") == []\n",
        "num_ids_2": 50,
        "num_ids_4": 98
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert filter_by_prefix(['example', 'example1', 'example2'], 'example') == ['example', 'example1', 'example2']\n\nassert filter_by_prefix(['example', 'example1', 'example2'], 'example') == ['example', 'example1', 'example2']\nassert filter_by_prefix(['example', 'example1', 'example2'], 'example1') == ['example', 'example1']\n",
        "num_ids_2": 38,
        "num_ids_4": 105
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"b\", \"r\", \"a\", \"c\", \"b\"], \"b\") == [\"b\", \"b\"], \"Test 1\"\nassert     filter_by_prefix([\"a\", \"r\", \"b\", \"c\", \"b\"], \"b\") == [\"a\", \"b\"], \"Test 2\"\nassert     filter_by_prefix([\"a\", \"r\", \"b\", \"c\", \"b\"], \"c\") == [\"c\", \"c\"], \"Test 3\"\nassert     filter_by_prefix([\"a\", \"r\", \"b\", \"c\", \"b\"], \"a\") == [\"a\", \"a\", \"b\", \"b\"], \"Test 4\"\nassert     filter_by_prefix([\"a\", \"r\", \"b\", \"c\", \"b\"], \"r\") == [\"r\", \"a\", \"b\", \"b\"], \"Test 5\"\n",
        "num_ids_2": 76,
        "num_ids_4": 158
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"baa\"], \"bar\") == [\"bar\", \"baz\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"baa\"], \"bla\") == []\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"baa\"], \"\") == [\"foo\", \"bar\", \"baz\", \"baa\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"baa\"], \"b\") == [\"foo\", \"baz\"]\nassert     filter_by_prefix([\"foo\", \"bar\", \"baz\", \"baa\"], \"ab\") == [\"baa\", \"baz\"]\n",
        "num_ids_2": 63,
        "num_ids_4": 137
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\"], \"ddd\") == [\"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\"]\n\nassert     filter_by_prefix([\"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\"], \"ddd\") == [\"ddd\"]\n\nassert     filter_by_prefix([\"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\", \"ddd\"], \"ddd2\") == [\"ddd\", \"ddd\", \"ddd\"]\n",
        "num_ids_2": 116,
        "num_ids_4": 179
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1,2,3,4,5,6,7,8,9]\nassert     get_positive([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == []\nassert     get_positive([]) == []\nprint(\"Exercise 1: complete\")\n",
        "num_ids_2": 76,
        "num_ids_4": 86
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_positive([1, -2, 3, 0]) == [1, 3]\nassert     get_positive([-2, 2, -2, 2]) == [2]\nassert     get_positive([-1, -2, -3, -4]) == [-1, -3]\nassert     get_positive([]) == []\nassert     get_positive([1, 1, -2]) == [-1]\n",
        "num_ids_2": 43,
        "num_ids_4": 79
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([-3, -4, -1, 0, 1, 5, 3, 2]) == [-3, 5, 3, 1, 2]\nassert     get_positive([-5, -3, -2, 0, -1]) == [-5, -3, -2, 0, -1]\nassert     get_positive([-5, -3, -2, 0, -1]) == [-5, -3, -2, 0, -1]\n",
        "num_ids_2": 74,
        "num_ids_4": 110
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert get_positive(l) == [1, 2, 3, 4]\n\n\n\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([5, -2, 1, -9, -1, 5, -5, -5, 3]) == [5, 1, 5, 3]\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_positive([1, -2, 2, 3, 4]) == [1, 2, 3, 4],\\\n        \"Wrong answer\"\nassert     get_positive([-1, 2, -3, 2, 0]) == [-1, 2, 0],\\\n        \"Wrong answer\"\n\ndef get_average(l: list):\n    \"\"\"Return the average of numbers in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 57,
        "num_ids_4": 57
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_positive(['-1', '2', '-3', '4']) == ['2', '4']\n\ndef find_substring(s: str, sub: str):\n    \"\"\"Find all occurrences of substring sub in string s and return\n    a list of indexes.\n    \"\"\"\n    pass\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nfor i in range(1,10000):\n    if is_prime(i) == True:\n        print(i)\n\nprint(\"\\n\")\n\nimport math\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_prime(7) == True\nassert     is_prime(8) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_prime(7) == True\nassert     is_prime(11) == False\nassert     is_prime(13) == True\nassert     is_prime(17) == True\nassert     is_prime(19) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_prime(2) == True, \"2 is not prime\"\nassert is_prime(10) == True, \"10 is not prime\"\nassert is_prime(11) == False, \"11 is not prime\"\nassert is_prime(0) == False, \"0 is not prime\"\nassert is_prime(1) == False, \"1 is not prime\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == True\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(6) == True\nassert     is_prime(11) == False\nassert     is_prime(-1) == False\nassert     is_prime(0) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\nassert     is_prime(5) == False\nassert     is_prime(8) == True\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_zero([1, 2, 3]) == 2\nassert find_zero([-1, -2, -3]) == 0\nassert find_zero([1, 2, 3, 4]) == 1\nassert find_zero([1, 2, 3, -4]) == -3\n",
        "num_ids_2": 17,
        "num_ids_4": 50
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef find_roots(xs: list):\n    \"\"\"\n    find_roots(xs) returns root such that\n    poly(x) = 0\n    x is point\n    x is root\n    \"\"\"\n    pass\n\n\ndef find_roots_all(xs: list):\n    \"\"\"\n    find_roots_all(xs) returns all roots for a polynomial with coefficients xs.\n    x is point\n    x is root\n    \"\"\"\n    pass\n\n\ndef find_roots_all_by_step(xs: list):\n    \"\"\"\n    find_roots_all_by_step(xs) returns all roots for a polynomial with coefficients xs\n    x is point\n    x is root\n    step is distance between two consecutive roots\n    \"\"\"\n    pass\n\n\ndef _find_roots_all_by_step(xs: list, step):\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef get_roots(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero returns only only zero point, even if there are many.\n    get_roots returns only roots of a polynomial\n    it may be obtained from find_zero\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef print_zero_points(xs: list):\n    \"\"\"\n    prints only the zero points of a polynomial.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nxs = [1, 2]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_zero([1,1,2,2,2]) == 2\nassert     find_zero([1,2,2,2,2]) == 2\nassert     find_zero([1,1,1,1,1]) == 1\nassert     find_zero([0,0,0,0,0]) == 0\n\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    xs = [2, -5, 3, 0, 4, -4]\n    x = 0.5\n    print(\"Solution of polynomial with coefficients\", xs, \"at point\", x)\n    print(poly(xs, x))\n    print(\"Zero point is:\", find_zero(xs))\n\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_third([5,3,4,2]) == [2,3,4,5], \"Wrong result\"\nassert     sort_third([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7], \"Wrong result\"\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third(l) == l'\nassert     l == sorted(l)\nassert     sort_third(l) == sorted(l)\nassert     l == l'\n\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are divisible by 2, while its values at the indicies that are divisible by 2 are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n",
        "num_ids_2": 21,
        "num_ids_4": 42
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_third([1, 2, 4, 5, 6]) == [1, 2, 5, 6, 4]\nassert     sort_third([2, 3, 4, 5, 6]) == [3, 4, 5, 6, 2]\nassert     sort_third([2, 4, 5, 6, 2]) == [2, 4, 2, 6, 5]\nassert sort_third([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 58,
        "num_ids_4": 115
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(sort_third([1,2,3,4,5]))\nprint(sort_third([3,2,1]))\nprint(sort_third([3,1,2]))\nprint(sort_third([3,1,2,2]))\nprint(sort_third([2,1,3,2]))\nprint(sort_third([1,1,1]))\n\ndef sort_fourth(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique([0, 1, 1, 1, 1, 1, 2, 2, 2, 2]) == [0, 1, 2]\nassert     unique([0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3]) == [0, 1, 2, 3]\nassert     unique([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0]\nassert     unique([]) == []\n",
        "num_ids_2": 70,
        "num_ids_4": 111
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([\"hello\", \"hi\", \"hello\"]) == ['hello', 'hi']\nassert     unique([\"\"]) == ['', '']\nassert     unique(['']) == ['']\nassert     unique([]) == []\n",
        "num_ids_2": 35,
        "num_ids_4": 54
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique([1,1,2,3,3,3,3,4,5,6]) == [1,2,3,4,5,6]\nassert     unique([1,2,3,4,4,4,4,5,6,6]) == [1,2,3,4,5,6]\nassert     unique([1,2,3,4,4,4,4,5,6,6]) == [1,2,3,4,5,6]\nassert     unique([1,2,3,4,4,4,4,5,6,6,6]) == [1,2,3,4,5,6]\n",
        "num_ids_2": 78,
        "num_ids_4": 158
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    unique([1,1,1,2,2,2]) == \n    [1,2]\n    unique([]) == \n    []\n    unique([1,1,1,2,2,2,2]) == \n    [1,2]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique([1,2,3,4,5,6,6,6,6,6]) == [1,2,3,4,5,6]\nassert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1]\nassert     unique([1,2,2,2,2,2,2,2,2,2]) == [1,2,2,2,2,2,2,2,2,2]\n",
        "num_ids_2": 47,
        "num_ids_4": 95
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique([1, 1, 2, 2, 3]) == sorted([1, 2, 3])\nassert     unique([\"a\", \"b\", \"c\", \"a\", \"c\"]) == sorted([\"a\", \"b\", \"c\"])\nassert     unique([1, 1, 1, 2, 2]) == sorted([1, 2])\nassert     unique([1, 1, 1, 1, 1, 1, 1, 1, 2]) == sorted([1, 2])\n",
        "num_ids_2": 58,
        "num_ids_4": 110
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique([1,2,3]) == [1,2,3], \\\n        \"Should be [1,2,3]\"\nassert     unique([1,2,1,1]) == [1,2], \\\n        \"Should be [1,2]\"\nassert     unique([]) == [], \\\n        \"Should be empty\"\nassert     unique([1,1,1]) == [1], \\\n        \"Should be [1]\"\nassert     unique([1]) == [1], \\\n        \"Should be [1]\"\n",
        "num_ids_2": 40,
        "num_ids_4": 66
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_element([1,3,2,4]) == 4\nassert max_element([10,9,8,7]) == 10\nassert max_element([1,2,3,4,5]) == 5\nassert max_element([-1,-10,-100,0]) == 0\n",
        "num_ids_2": 19,
        "num_ids_4": 53
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_element([10, 2, -2, 12, -1, 20]) == 20\nassert     max_element([10, 2, -2, -3, -1]) == -1\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # if testcase fails, comment the line above\n    # and uncomment the line below\n    assert max_element([]) == None\n    assert max_element([1,2,3]) == 3\n    assert max_element([3,2,1]) == 3\n    assert max_element([-1,-2,-3]) == -1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_element([2,4,6]) == 6\nassert max_element([]) == None\nassert max_element([7,2,5]) == 7\nassert max_element([-2,-4,-6]) == -2\n\ndef print_all(l: list):\n    \"\"\"Print each element of the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_element([2, 2, 2, 1, 5, 4, 3, 2, 8]) == 8\nassert     max_element([2, 2, 2, 1, 5, 4, 3, 2, 8, -1, 4, -2]) == 8\nassert     max_element([-5, -2, -1, -3, -4, -5, -6]) == -1\nassert     max_element([-1, -2, -3, -4, -5, -6]) == -1\nassert     max_element([]) == None\n",
        "num_ids_2": 62,
        "num_ids_4": 121
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fizz_buzz(12) == 2, \"Passed\"\nassert     fizz_buzz(17) == 3, \"Passed\"\nassert     fizz_buzz(21) == 5, \"Passed\"\nassert     fizz_buzz(25) == 5, \"Passed\"\nassert     fizz_buzz(27) == 4, \"Passed\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fizz_buzz(100) == 25\nassert     fizz_buzz(10) == 4\nassert     fizz_buzz(3) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fizz_buzz(10) == 3\nassert     fizz_buzz(15) == 4\nassert     fizz_buzz(30) == 6\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef fizz_buzz_f(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fizz_buzz(5)     == 0, \"The number of times the digit 7 appears in integers less than 5 which are divisible by 11 or 13 is 0\"\nassert     fizz_buzz(15)     == 1, \"The number of times the digit 7 appears in integers less than 15 which are divisible by 11 or 13 is 1\"\nassert     fizz_buzz(21)     == 3, \"The number of times the digit 7 appears in integers less than 21 which are divisible by 11 or 13 is 3\"\nassert     fizz_buzz(27)     == 0, \"The number of times the digit 7 appears in integers less than 27 which are divisible by 11 or 13 is 0\"\nassert     fizz_buzz(29)     == 0, \"The number of times the digit 7 appears in integers less than 29 which are divisible by 11 or 13 is 0\"\n",
        "num_ids_2": 80,
        "num_ids_4": 160
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert fizz_buzz(5) == 3\nassert fizz_buzz(7) == 4\nassert fizz_buzz(19) == 5\nassert fizz_buzz(23) == 4\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fizz_buzz(100) == 6, 'fizz_buzz(100) should be 6'\nassert     fizz_buzz(150) == 4, 'fizz_buzz(150) should be 4'\nassert     fizz_buzz(7) == 1, 'fizz_buzz(7) should be 1'\nassert     fizz_buzz(3) == 0, 'fizz_buzz(3) should be 0'\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even([1,2,3,4,5,6,7,8]) == [1,3,5,7,2,4,6,8]\nassert     sort_even([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,2,4,6,8,9]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,2,4,6,8,9,10]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,2,4,6,8,9,10,11]\nassert     sort_even([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,2,4,6,8,9,10,11,12]\n",
        "num_ids_2": 86,
        "num_ids_4": 188
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_even(l =[1,2,3,4]) ==     [1,4,2,3], 'Not correct'\n\nprint('Tests completed')",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_even([2, 4, 6, 1]) == [1, 2, 4, 6]\nassert     sort_even([1, 4, 5, 8, 9, 0]) == [0, 1, 4, 5, 8, 9]\nassert     sort_even([3, 1, 4, 2]) == [1, 3, 2, 4]\nassert     sort_even([]) == []\nassert     sort_even(None) == None\n",
        "num_ids_2": 58,
        "num_ids_4": 93
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_even([2, 4, 6, 8, 10]) == [2, 4, 8, 10, 6]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n",
        "num_ids_2": 70,
        "num_ids_4": 172
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         sort_even([5, 3, 1, 7, 9, 10]) == [1, 3, 5, 7, 9, 10], \"The function should return a list which contains only even numbers in the original list.\"\nassert         sort_even([5, 3, 1, 7, 9, 10, 11]) == [1, 3, 5, 7, 9, 10, 11], \"The function should return a list which contains only even numbers in the original list.\"\nassert         sort_even([1, 5, 3, 7, 9, 10, 11]) == [1, 3, 5, 7, 9, 10, 11], \"The function should return a list which contains only even numbers in the original list.\"\nassert         sort_even([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10], \"The function should return a list which contains only even numbers in the original list.\"\nassert         sort_even([]) == [], \"The function should return an empty list.\"\n",
        "num_ids_2": 104,
        "num_ids_4": 204
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_even([4, 2, 5, 1, 3, 7, 8, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_even([4, 2, 5, 1, 3, 7, 8, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_even([4, 2, 5, 1, 3, 7, 8, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_even([4, 2, 5, 1, 3, 7, 8, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     sort_even([4, 2, 5, 1, 3, 7, 8, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "num_ids_2": 82,
        "num_ids_4": 164
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_even([2, 1, 4, 3]) == [1, 2, 3, 4], f\"{sort_even([2, 1, 4, 3])}\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_even([1, 2, 3, 4, 5]) == [2, 4, 1, 3, 5]\nassert     sort_even([5, 4, 3, 2, 1]) == [2, 3, 4, 1, 5]\nassert     sort_even([1, 2, 3, 4, 5]) == [2, 4, 1, 3, 5]\n",
        "num_ids_2": 58,
        "num_ids_4": 87
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_even([]), \"Input list is empty\"\nassert     sort_even([1, 3, 5, 7, 9]), \"List 1\"\nassert     sort_even([2, 4, 6]), \"List 2\"\nassert     sort_even([3, 5, 6]), \"List 3\"\nassert     sort_even([0, 2, 4, 6]), \"List 4\"\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcabcdefgh\")) == \"abcdefgh\"\nassert     decode_cyclic(encode_cyclic(\"abcabc\")) == \"abcabc\"\n",
        "num_ids_2": 49,
        "num_ids_4": 49
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode_cyclic(\"Sugar\") == \"GruS\"\nassert     encode_cyclic(\"Hello\") == \"Hlo\"\nassert     encode_cyclic(\"\") == \"\"\nassert     encode_cyclic(\"ABABCD\") == \"ABCCD\"\nassert     encode_cyclic(\"ABBABCD\") == \"ABCABCD\"\n",
        "num_ids_2": 34,
        "num_ids_4": 65
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode_cyclic(\"ABCD\") == \"ABAB\"\nassert     encode_cyclic(\"ABCD\") == \"ABBA\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     encode_cyclic(\"AACB\") == \"ABCA\"\nassert     encode_cyclic(\"ABA\") == \"ABCB\"\nassert     encode_cyclic(\"ABAB\") == \"ABCCAB\"\n\ndef num_encoding_errors(s: str) -> int:\n    \"\"\"\n    returns the number of errors in decoding a given string encoded with encode_cyclic function.\n    \"\"\"\n    count = 0\n    # cycle encoding_list from the front to the back, keeping count of elements in cycle.\n    # If count is not equal to len(cycle) and cycle is not empty, count = cycle.\n    # If count is not equal to len(cycle) and cycle is empty, count = -1.\n    # if count is equal to len(cycle) and cycle is not empty, count = 0\n    # if count is equal to len(cycle) and cycle is empty, count = 1\n    encoding_list = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    cycle = encoding_list\n    while cycle:\n        if len(cycle) > len(encoding_list):\n            count += len(encoding_list) - len(cycle)\n        elif len(cycle) < len(encoding_list):\n            count += len(cycle) - len(encoding_list)\n        else:\n            count += len(cycle) - len(encoding_list)\n        cycle = cycle[1:]\n    return count\n\n",
        "num_ids_2": 35,
        "num_ids_4": 54
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef encode_edc(s: str):\n    \"\"\"\n    returns encoded string by encoding using ecoding in base 3.\n    \"\"\"\n    # divide string into groups of 3 characters each.\n    groups = [s[(i*3):min((i*3 + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # convert each group to base 3.\n    groups = [(int(group[0]), int(group[1]), int(group[2])) for group in groups]\n    # encode each element in the group.\n    for group in groups:\n        group = encode_cyclic(str(group[0]) + str(group[1]) + str(group[2]))\n        groups.append(group)\n    return \"\".join(groups)\n\n\ndef decode_edc(s: str):\n    \"\"\"\n    takes as input string encoded with encode_edc function. Returns decoded string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert decode_cyclic(encode_cyclic(\"xyz\")) == \"xyz\"\nassert decode_cyclic(encode_cyclic(\"pqr\")) == \"pqr\"\nassert decode_cyclic(encode_cyclic(\"12345\")) == \"12345\"\nassert decode_cyclic(encode_cyclic(\"\")) == \"\"\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     encode_cyclic(\"a\") == \"aaa\"\nassert     encode_cyclic(\"at\") == \"aat\"\nassert     encode_cyclic(\"atg\") == \"aatg\"\nassert     encode_cyclic(\"atgttt\") == \"aatgttt\"\nassert     encode_cyclic(\"acctatgcttg\") == \"aaaaaaaaaaaaaaaaa\"\n",
        "num_ids_2": 31,
        "num_ids_4": 71
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef get_prime_fib(n: int):\n    \"\"\"\n    get_prime_fib returns n-th prime Fibonacci number\n    \"\"\"\n    pass\n\ndef get_prime_fib_rec(n: int):\n    \"\"\"\n    get_prime_fib_rec returns n-th prime Fibonacci number\n    \"\"\"\n    pass",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_fib(2) == (1, 2)\nassert     prime_fib(3) == (2, 3)\nassert     prime_fib(4) == (2, 4)\nassert     prime_fib(5) == (3, 5)\nassert     prime_fib(6) == (3, 6)\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_prime(n: int):\n    \"\"\"\n    is_prime returns True if given number is prime\n    and False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(prime_fib(3))\nprint(prime_fib(4))\nprint(prime_fib(10))\nprint(prime_fib(1))\nprint(prime_fib(12))\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntriples_sum_to_zero([-3,0,1,2,-2,1,1,-4])\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([0, 1, 2, 3, 4, 5]) == True, \"FAILED: expected True, got False\"\nassert     triples_sum_to_zero([0, -1, 2, -3, 4, 5]) == False, \"FAILED: expected False, got True\"\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triples_sum_to_zero([3, 1, -2, 1, -1, 2, 1, 1, -1, 1, -1]) == True\nassert     triples_sum_to_zero([3, 1, -2, 1, -1, 2, 1, 1, -1, 1, 3]) == False\nassert     triples_sum_to_zero([-1, -2, -3, 1, 2, 3]) == True\nassert     triples_sum_to_zero([-1, -2, -3, 1, 2, 3, -4]) == False\nassert     triples_sum_to_zero([3, 1, -2, 1, -1, 2, 1, 1, -1, 1, 2]) == False\n",
        "num_ids_2": 79,
        "num_ids_4": 140
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([0, 1, 2, -1, -4]) == True, \\\n    \"The function should return True if there are three distinct elements in the list that sum to zero\"\nassert     triples_sum_to_zero([0, 1, 2, 3]) == False, \\\n    \"The function should return True if there are three distinct elements in the list that sum to zero\"\nassert     triples_sum_to_zero([0, 1, 1, 0, -1]) == True, \\\n    \"The function should return True if there are three distinct elements in the list that sum to zero\"\nassert     triples_sum_to_zero([0, 1, 1, -1]) == False, \\\n    \"The function should return True if there are three distinct elements in the list that sum to zero\"\nassert     triples_sum_to_zero([0, 1, 1, 2, -1]) == False, \\\n    \"The function should return True if there are three distinct elements in the list that sum to zero\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([-1,0,1,2]) == True\nassert     triples_sum_to_zero([1,2,3]) == False\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True,\\\n    \"Your code in triples_sum_to_zero failed to output True.\"\n\nassert     triples_sum_to_zero([1, 2, 3, 4, 5]) == False,\\\n    \"Your code in triples_sum_to_zero failed to output False.\"\n\nassert     triples_sum_to_zero([-2, -5, -7, -1, -3, 1]) == True,\\\n    \"Your code in triples_sum_to_zero failed to output True.\"\n",
        "num_ids_2": 57,
        "num_ids_4": 90
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"Your function is correct!\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert car_race_collision(3) == 2\nassert car_race_collision(2) == 1\nassert car_race_collision(1) == 0\nassert car_race_collision(0) == 0\nprint(\"check: car_race_collision passed\")\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     car_race_collision(1) == 0, \\\n    'car_race_collision 1 failed.'\nassert     car_race_collision(2) == 1, \\\n    'car_race_collision 2 failed.'\nassert     car_race_collision(3) == 2, \\\n    'car_race_collision 3 failed.'\nassert     car_race_collision(5) == 3, \\\n    'car_race_collision 5 failed.'\nassert     car_race_collision(7) == 6, \\\n    'car_race_collision 7 failed.'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     car_race_collision(1) == 0, 'Testing #1:'+ str(car_race_collision(1))\nassert     car_race_collision(2) == 0, 'Testing #2:'+ str(car_race_collision(2))\nassert     car_race_collision(3) == 0, 'Testing #3:'+ str(car_race_collision(3))\nassert     car_race_collision(4) == 1, 'Testing #4:'+ str(car_race_collision(4))\nassert     car_race_collision(5) == 2, 'Testing #5:'+ str(car_race_collision(5))\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert car_race_collision(3) == 1, \"First Test Case\"\nassert car_race_collision(4) == 1, \"Second Test Case\"\nassert car_race_collision(10) == 5, \"Third Test Case\"\nassert car_race_collision(10) == 5, \"Fourth Test Case\"\n",
        "num_ids_2": 22,
        "num_ids_4": 60
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     car_race_collision(1) == 1\nassert     car_race_collision(2) == 2\nassert     car_race_collision(3) == 3\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 3\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     car_race_collision(1) == 0, \\\n        \"'car_race_collision' returns 0 for n = 1\"\nassert car_race_collision(2) == 1, \\\n        \"'car_race_collision' returns 1 for n = 2\"\nassert car_race_collision(3) == 2, \\\n        \"'car_race_collision' returns 2 for n = 3\"\nassert car_race_collision(4) == 3, \\\n        \"'car_race_collision' returns 3 for n = 4\"\nassert car_race_collision(5) == 4, \\\n        \"'car_race_collision' returns 4 for n = 5\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 2\nassert     car_race_collision(4) == 3\nassert     car_race_collision(5) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     car_race_collision(0) == 0, 'ERROR: car_race_collision: 0 case should be correct'\nassert     car_race_collision(1) == 0, 'ERROR: car_race_collision: 1 case should be correct'\nassert     car_race_collision(2) == 1, 'ERROR: car_race_collision: 2 case should be correct'\nassert     car_race_collision(3) == 2, 'ERROR: car_race_collision: 3 case should be correct'\nassert     car_race_collision(4) == 1, 'ERROR: car_race_collision: 4 case should be correct'\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [2,3]\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6]\n",
        "num_ids_2": 32,
        "num_ids_4": 80
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [2,3]\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \"\"\"\n    # insert your code here\n    #return the result of your code\n    pass\n\ndef print_all_elements(l: list):\n    \"\"\"Print all the elements in a list.\n    \"\"\"\n    for element in l:\n        print(element)\n\ndef print_all_elements(l: list):\n    \"\"\"Print all the elements in a list.\n    \"\"\"\n    for element in l:\n        print(element)\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_list(l: list):\n    \"\"\"Return length of list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_incr_list():\n    \"\"\"\n    >>> test_incr_list()\n    \"\"\"\n    l = [1,2,3]\n    assert incr_list(l) == [2,3,4]\n\ndef test_incr_list_all():\n    \"\"\"\n    >>> test_incr_list_all()\n    \"\"\"\n    l = []\n    assert incr_list(l) == []\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     incr_list([])     == []\nassert     incr_list([1,2])     == [2,3]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\n",
        "num_ids_2": 31,
        "num_ids_4": 57
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     incr_list([2,4,6]) == [3,4,7], 'incr_list([2,4,6]) is wrong'\nassert     incr_list([2,4,6,8]) == [3,4,7,9], 'incr_list([2,4,6,8]) is wrong'\n\ndef match_list(l: list, s: str):\n    \"\"\"Return True if list l is a subset of string s.\n    \"\"\"\n    pass\n\nassert match_list([1,2,3], 'abc'),'match_list([1,2,3],\\'abc\\') is wrong'\n",
        "num_ids_2": 80,
        "num_ids_4": 113
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert pairs_sum_to_zero([1, -1, 2]) == False\nassert pairs_sum_to_zero([-1, -2, 1, 2]) == True\nassert pairs_sum_to_zero([1, 1, 1]) == False\nassert pairs_sum_to_zero([-1, -1]) == True\n",
        "num_ids_2": 22,
        "num_ids_4": 62
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert pairs_sum_to_zero([1, -2, 3, 5])\nassert not pairs_sum_to_zero([1, -2, -3, 5])\nassert pairs_sum_to_zero([0, -2, 3, 5])\nassert not pairs_sum_to_zero([0, -2, 3, -5])\n",
        "num_ids_2": 22,
        "num_ids_4": 62
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([-4, -2, -2, -2, -2]) == True\nassert     pairs_sum_to_zero([-4, -2, -2, -2, -2, -2]) == False\nassert     pairs_sum_to_zero([-4, -2, -2, -2, -2, -2, -2]) == False\n\nprint(\"All tests passed\")\n\n",
        "num_ids_2": 61,
        "num_ids_4": 96
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([0, -1, 1, -2, -3, 2, 4])\nassert     pairs_sum_to_zero([1, 1, 2, -2, -3, 4])\nassert     pairs_sum_to_zero([-1, 1, 2, -2, -3, 4])\nassert     pairs_sum_to_zero([0, -1, 1, -2, -3, 4])\nassert     not pairs_sum_to_zero([0, -1, 1, -2, -3, -4])\n",
        "num_ids_2": 55,
        "num_ids_4": 109
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([1,2,3]) == True\nassert     pairs_sum_to_zero([1,-2,-1]) == True\nassert     pairs_sum_to_zero([1,-2,-3]) == False\nassert     pairs_sum_to_zero([-1,-2,-3]) == False\n\nprint(\"All tests passed\")",
        "num_ids_2": 40,
        "num_ids_4": 81
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not pairs_sum_to_zero([])\nassert pairs_sum_to_zero([1,2,3])\nassert not pairs_sum_to_zero([0,4,-5])\nassert pairs_sum_to_zero([-1,-3,1])\n",
        "num_ids_2": 15,
        "num_ids_4": 48
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef num_to_base(x: int, base: int):\n    \"\"\"Convert numerical x to base base.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    change_base(2,2) == \"10\"\n    change_base(2,4) == \"256\"\n    change_base(3,2) == \"13\"\n    change_base(10,2) == \"101\"\n\n\ndef get_numerical_base(s: str) -> int:\n    \"\"\"Return the base of input string s in which\n    all the numbers in s are integers.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_base(2, 8) == '1000'\nassert change_base(13, 8) == '11000'\nassert change_base(27, 8) == '110000'\nassert change_base(2, 10) == '10'\nassert change_base(4, 10) == '1000'\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_base(100, 2) == \"0020\"\nassert     change_base(100, 8) == \"0c\"\nassert     change_base(100, 16) == \"0x\"\nassert     change_base(10, 2) == \"1010\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert change_base(11, 16) == \"0xE\"\nassert change_base(0b
        "num_ids_2": 19,
        "num_ids_4": 1027
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    # check correctness\n    assert change_base(9, 2) == 'a', 'fail'\n    assert change_base(9, 16) == 'c', 'fail'\n    assert change_base(16, 2) == '10', 'fail'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_base(1, 2) == '11', \"Wrong result\"\nassert     change_base(3, 2) == '13', \"Wrong result\"\nassert     change_base(4, 2) == '14', \"Wrong result\"\nassert     change_base(5, 2) == '15', \"Wrong result\"\nassert     change_base(6, 2) == '16', \"Wrong result\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_base(1234, 16) == 'a'\nassert     change_base(1234, 10) == 'a'\nassert     change_base(1234, 2) == '1234'\n",
        "num_ids_2": 32,
        "num_ids_4": 49
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(3, 4) == 6\n\nassert     triangle_area(8, 4) == 20\n\nassert     triangle_area(10, 8) == 40\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(2, 2) == 1, \"Triangle area is 1\"\nassert     triangle_area(2, 4) == 2, \"Triangle area is 2\"\nassert     triangle_area(2, 5) == 6, \"Triangle area is 6\"\nassert     triangle_area(2, 6) == 12, \"Triangle area is 12\"\n\ndef is_triangle(a, b, c):\n    \"\"\"Given three sides length of a triangle returns True if it is a triangle,\n    False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(triangle_area(1,1))\nprint(triangle_area(2,1))\nprint(triangle_area(3,1))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(3, 4) == 6.0\nassert     triangle_area(1, 1) == 1.0\nassert     triangle_area(0, 1) == 0.0\nassert     triangle_area(7, 5) == 12.5\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\nassert     fib4(10) == 55\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fib4(4) == 0 + 0 + 2 + 0\nassert fib4(5) == 0 + 0 + 1 + 1 + 2\nassert fib4(6) == 0 + 0 + 1 + 1 + 2 + 1\nassert fib4(7) == 0 + 0 + 1 + 1 + 2 + 1 + 0\nassert fib4(8) == 0 + 0 + 1 + 1 + 2 + 1 + 0 + 0\n",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert median([1,2,3]) == 2\nassert median([2,3,4]) == 3\nassert median([2,2,2,2]) == 2\nassert median([2,2,3,4]) == 3\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    \n    \n    \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median([3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     median([3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\nassert     median([3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 5\nassert     median([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 5\nassert     median([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 5\n",
        "num_ids_2": 50,
        "num_ids_4": 108
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median([]) == None, \"Empty list\"\nassert     median([1, 2, 3]) == 2, \"Normal case\"\nassert     median([1, 3, 3]) == 3, \"Normal case\"\nassert     median([1, 3, 3, 5]) == 3, \"Normal case\"\nassert     median([1, 3, 3, 5, 5]) == 3, \"Normal case\"\n",
        "num_ids_2": 33,
        "num_ids_4": 73
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\nif __name__ == '__main__':\n    l = []\n    while True:\n        print('Enter an element')\n        e = input()\n        if e == 'done':\n            break\n        l.append(int(e))\n    print('Median is', median(l))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3\nassert median([1, 2, 3, 4, 5, 6]) == 4\nassert median([1, 2, 3, 4, 5, 6, 7]) == 4.5\nassert median([1, 2, 3, 4, 5, 6, 7, 8]) == 4.5\nassert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4.5\n",
        "num_ids_2": 36,
        "num_ids_4": 82
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_palindrome('racecar') == True\nassert     is_palindrome('civic') == True\nassert     is_palindrome('noon') == False\nassert     is_palindrome('race') == False\nassert     is_palindrome('') == True\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"abba\") == True\nassert is_palindrome(\"abcde\") == False\nassert is_palindrome(\"1234567890\") == True\nassert is_palindrome(\"1a2b3c4d5e6f7g8h9j\") == True\n",
        "num_ids_2": 26,
        "num_ids_4": 70
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_palindrome(text: str):\n    \"\"\"\n    Returns a palindrome of given string\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"A\") == True\nassert     is_palindrome(\"G\") == False\nassert     is_palindrome(\"aba\") == True\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(is_palindrome('a'))\nprint(is_palindrome('ab'))\nprint(is_palindrome('aab'))\nprint(is_palindrome('abc'))\nprint(is_palindrome('abbc'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"aa\") == False\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"Aba\") == False\nassert     is_palindrome(\"\") == True\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"racecar\") == False, 'Palindrome'\nassert     is_palindrome(\"Was it a car or a cat I saw?\") == True, 'Palindrome'\nassert     is_palindrome(\"It was a dog\") == False, 'Palindrome'\nassert     is_palindrome(\"It is not a palindrome\") == False, 'Palindrome'\n\n",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"123321\") == True\nassert     is_palindrome(\"12321\") == False\n",
        "num_ids_2": 25,
        "num_ids_4": 53
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(is_palindrome('aabcdcba'))\nprint(is_palindrome('abcde'))\nprint(is_palindrome('Able was I, ere I saw Elba'))\nprint(is_palindrome('No '))\nprint(is_palindrome('a'))\nprint(is_palindrome(''))\nprint(is_palindrome(' '))\nprint(is_palindrome('How much wood could a woodchuck chuck if a woodchuck could chuck wood?'))\nprint(is_palindrome('madam'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"aba\") == True\nassert     is_palindrome(\"abcba\") == True\nassert     is_palindrome(\"abcba\") == True\nassert     is_palindrome(\"abc\") == False\nassert     is_palindrome(\"aa\") == False\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef solution(num: int) -> int:\n    \"\"\"Given an integer num, return the number of digits after the\n    decimal point of a certain integer num. \n    Assume num is not negative.\n\n    >>> solution(12345)\n    3\n    >>> solution(11111)\n    2\n    >>> solution(-123)\n    4\n    >>> solution(-1234567890)\n    2\n    >>> solution(0)\n    1\n    \"\"\"\n    if num == 0:\n        return 1\n\n    # Slices are lists of integers\n    decimal_point_index = len(str(num)) - 1\n    count = 0\n\n    while decimal_point_index!= -1:\n        count += 1\n        decimal_point_index = decimal_point_index - 1\n    \n    return count\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     modp(5, 17) == 11\nassert modp(10, 17) == 10\nassert modp(0, 17) == 17\n",
        "num_ids_2": 23,
        "num_ids_4": 34
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     modp(1, 6) == 1\nassert     modp(2, 3) == 1\nassert     modp(5, 7) == 3\nassert     modp(9, 3) == 1\nassert     modp(10, 7) == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (modp(0, 2) == 1)\nassert (modp(3, 2) == 0)\nassert (modp(2, 2) == 0)\nassert (modp(1, 2) == 1)\nassert (modp(5, 2) == 1)\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     modp(3, 3) == 3\nassert     modp(5, 7) == 1\nassert     modp(7, 3) == 3\nassert     modp(11, 13) == 2\nassert     modp(11, 31) == 11\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(\"abc\")) == \"abc\"\nassert     decode_shift(encode_shift(\"A#B#$\")) == \"ABC\"\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encode_shift(\"abc\") == \"def\"\nassert     encode_shift(\"cde\") == \"bcg\"\nassert     encode_shift(\"gfh\") == \"ghj\"\n",
        "num_ids_2": 30,
        "num_ids_4": 47
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decode_shift(\"\") == \"\"\nassert     decode_shift(\"abc\") == \"abc\"\nassert     decode_shift(\"hf5h\") == \"hf5h\"\nassert     decode_shift(\"jkv5r\") == \"jkv5r\"\n",
        "num_ids_2": 25,
        "num_ids_4": 67
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode_shift(\"abc\") == \"bcd\"\nassert     encode_shift(\"abc\") == \"bcd\"\nassert     encode_shift(\"abc\") == \"bcd\"\nassert     encode_shift(\"abc\") == \"bcd\"\nassert     encode_shift(\"abc\") == \"bcd\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_shift(encode_shift(\"\")) == \"\", \"Happily is not a shift\"\nassert     decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyz\")) == \"kvvhgjxedfnmuozqtwy\", \"Simple shift\"\nassert     decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")) == \"ZYXWVUTSRQPONMLKJIHGFEDCBA\", \"Shift by 26\"\nassert     decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")) == \"MNLKJIHGFEDCBA\", \"Shift by 26\"\nassert     decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\")) == \"ABDEGHJIHGFEDCBA\", \"Shift by 26\"\n",
        "num_ids_2": 75,
        "num_ids_4": 206
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     encode_shift(\"wef\") == \"zxv\"\nassert     decode_shift(\"zxv\") == \"wef\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_shift(\"ROT13\") == \"THOJE\"\nassert     decode_shift(\"BCDEFGHIJ\") == \"YJHUZQ\"\nassert     decode_shift(\"INVTBEN\") == \"EHNXZQ\"\n\n",
        "num_ids_2": 41,
        "num_ids_4": 62
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"\")     == \"\"\nassert     remove_vowels(\"\")    == \"\"\nassert     remove_vowels(\"a\")    == \"\"\nassert     remove_vowels(\"d\")    == \"\"\nassert     remove_vowels(\"p\")    == \"\"\n",
        "num_ids_2": 26,
        "num_ids_4": 54
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_vowels(\"Hello World\") == \"Hello World\"\nassert     remove_vowels(\"This is a text.\") == \"This is a text.\"\n",
        "num_ids_2": 38,
        "num_ids_4": 38
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(remove_vowels(input(\"Enter text: \")))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"aeiou\") == \"\", \"Expected: \" + \"\", \"Given:!\"\nassert     remove_vowels(\"azazaz\") == \"\", \"Expected: \" + \"\", \"Given:!\"\nassert     remove_vowels(\"\") == \"\", \"Expected: \" + \"\", \"Given:!\"\nassert     remove_vowels(\"aeiou\") == \"\", \"Expected: \" + \"\", \"Given:!\"\n\ndef palindrome(text):\n    \"\"\"\n    palindrome is a function that takes a string and returns True if string is palindrome, else False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 56,
        "num_ids_4": 109
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"piano\") == \"nina\"\nassert     remove_vowels(\"dodo\") == \"ddo\"\nassert     remove_vowels(\"reggae\") == \"rg\"\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"A\") == \"\"\nassert     remove_vowels(\"a\") == \"\"\nassert     remove_vowels(\"Aa\") == \"A\"\nassert     remove_vowels(\"AA\") == \"A\"\n",
        "num_ids_2": 25,
        "num_ids_4": 54
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_vowels('hello') == 'hello', \"Should return 'hello' as a result.\"\nassert     remove_vowels('hello world') == 'hlowrd', \"Should return 'hlowrd' as a result.\"\nassert     remove_vowels('hello world!') == 'hlowrd', \"Should return 'hlowrd' as a result.\"\nassert     remove_vowels('howl') == 'howl', \"Should return 'howl' as a result.\"\nassert     remove_vowels('') == '', \"Should return '' as a result.\"\n",
        "num_ids_2": 55,
        "num_ids_4": 114
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_vowels('hello') == 'hello', 'Expected \"hello\" to return \"hello\", but returned \"%s\"' % (remove_vowels('hello'))\nassert     remove_vowels('hi') == 'hi', 'Expected \"hi\" to return \"hi\", but returned \"%s\"' % (remove_vowels('hi'))\nassert     remove_vowels('I love Python') == 'I luv Pytho', 'Expected \"I love Python\" to return \"I luv Pytho\", but returned \"%s\"' % (remove_vowels('I love Python'))\nprint(\"Correct!\")\n",
        "num_ids_2": 84,
        "num_ids_4": 140
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nabove_threshold([1,2,3,4], 5) == True\nabove_threshold([1,2,3,4], 3) == True\nabove_threshold([1,2,3,4], 2) == False\nabove_threshold([1,2,3,4], 0) == False\nabove_threshold([1,2,3], 4) == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef read_matrix():\n    matrix = []\n    while True:\n        try:\n            line = input().split()\n            if not line:\n                break\n            n = int(line[0])\n            matrix.append(list(map(int, line[1:])))\n        except EOFError:\n            break\n    return matrix\n\ndef main():\n    matrix = read_matrix()\n    n = len(matrix)\n    print(n)\n    print(*below_threshold(matrix, max(matrix) * n), sep=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_threshold([5,4,3,2,1], 4)\nassert     below_threshold([1,2,3,4,5], 2)\nassert     not below_threshold([1,2,3,4,5], 1)\nassert     not below_threshold([1,1,1,1,1], 2)\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add(1, 2) == 3\nassert     add(1, 3) == 4\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add(1, 1) == 2\nassert     add(-1, -1) == 0\nassert     add(1.1, 1.1) == 2.2\nassert     add(1.1, 1) == 2.1\nassert     add(-1.1, -1.1) == 0.0\n",
        "num_ids_2": 23,
        "num_ids_4": 55
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add(4,2) == 6, \"Error!\"\n\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nadd(1, 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add(1, 1) == 2, \"1 + 1 = 2\"\nassert     add(2, 1) == 3, \"2 + 1 = 3\"\nassert     add(-2, 1) == 1, \"1 - 2 = -1\"\nassert     add(-2, -1) == 0, \"1 - -1 = 0\"\nassert     add(1.1, 1.1) == 2.2, \"1.1 + 1.1 = 2.2\"\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     same_chars(\"Hello World\", \"Hello World\")        ==     True\nassert     same_chars(\"Hello World\", \"Hello World 123\")    ==     False\nassert     same_chars(\"Hello World\", \"Hello World World\")    ==     False\nassert     same_chars(\"Hello World\", \"Hello World 12345\")    ==     False\nassert     same_chars(\"Hello World\", \"Hello World World\")    ==     True\n",
        "num_ids_2": 39,
        "num_ids_4": 80
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('same_chars')\n    assert same_chars('a', 'b') == False\n    assert same_chars('aa', 'a') == False\n    assert same_chars('aa', 'aa') == True\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     same_chars('hello', 'hello') == True\nassert     same_chars('hello', 'hey') == False\nassert     same_chars('aabbcc', 'aaaaa') == True\nassert     same_chars('aabbcc', 'aaaaa') == False\n\n",
        "num_ids_2": 30,
        "num_ids_4": 66
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     same_chars(s0='hello', s1='hello') == True\nassert     same_chars(s0='hello', s1='olleh') == False\nassert     same_chars(s0='hello', s1='hello world') == True\nassert     same_chars(s0='hello world', s1='hello') == False\nassert     same_chars(s0='hello world', s1='hello world') == True\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     same_chars('abc', 'abc')\nassert     not same_chars('abc', 'abd')\nassert     not same_chars('abc', 'a')\nassert     same_chars('abc', 'abcd')\nassert     not same_chars('abc', 'b')\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     same_chars(\"abc\", \"abcd\") == False\nassert same_chars(\"abc\", \"abc\") == True\nassert same_chars(\"abc\", \"bcd\") == False\nassert same_chars(\"a\", \"a\") == True\nassert same_chars(\"abcde\", \"abcde\") == True\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     same_chars('bob', 'bobby')\nassert not same_chars('bob', 'bobbyx')\nassert     same_chars('bob', 'bobb')\nassert     same_chars('bob', 'bob')\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fib(0)    == 0\nassert     fib(1)    == 1\nassert     fib(2)    == 1\nassert     fib(3)    == 2\nassert     fib(4)    == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fib(10) == 55\nassert     fib(15) == 610\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<\") == True, \"wrong\"\nassert     correct_bracketing(\"(\") == False, \"wrong\"\nassert     correct_bracketing(\"<\") == True, \"wrong\"\nassert     correct_bracketing(\"<>\") == False, \"wrong\"\nassert     correct_bracketing(\"<\") == True, \"wrong\"\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<\") == True, \"Wrong\"\nassert     correct_bracketing(\"<]\") == False, \"Wrong\"\nassert     correct_bracketing(\"<[\") == False, \"Wrong\"\nassert     correct_bracketing(\"<[><\") == False, \"Wrong\"\nassert     correct_bracketing(\"[><]\") == False, \"Wrong\"\n",
        "num_ids_2": 37,
        "num_ids_4": 76
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<()><())><\") == True\nassert     correct_bracketing(\"<((())><\") == False\nassert     correct_bracketing(\"<(<(<<(<)><\") == False\nassert     correct_bracketing(\"<(<(<(<<(<)><\") == False\nassert     correct_bracketing(\"(\") == False\n",
        "num_ids_2": 33,
        "num_ids_4": 77
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing('<[]>') == True, 'fail'\nassert correct_bracketing('<[][][][]>') == True, 'fail'\nassert correct_bracketing('<[][][][][][][]>') == True, 'fail'\nassert correct_bracketing('<([])[][][][][]>') == False, 'fail'\n",
        "num_ids_2": 41,
        "num_ids_4": 91
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(<\") == False\nassert     correct_bracketing(\"<\") == False\n\nassert correct_bracketing(\"()\") == True\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert correct_bracketing(\"<()>\")\nassert not correct_bracketing(\"(<())>\")\nassert not correct_bracketing(\"<()>()\")\nassert not correct_bracketing(\"<>\")\n",
        "num_ids_2": 15,
        "num_ids_4": 43
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"<)><()\")\nassert not correct_bracketing(\"<)><\")\nassert     correct_bracketing(\"<)><\")\n",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<]\") == True\nassert     correct_bracketing(\"<[\") == False\nassert     correct_bracketing(\"<{\") == False\nassert     correct_bracketing(\"<)\") == False\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<)\") == False\nassert correct_bracketing(\">\") == False\nassert correct_bracketing(\"(\") == False\n",
        "num_ids_2": 15,
        "num_ids_4": 40
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     monotonic([10, 9, 8, 7, 6, 5])\nassert     not monotonic([10, 10, 8, 7, 6, 5])\nassert     monotonic([-1, -2, -3, -4, -5])\nassert     not monotonic([-1, -2, -3, -4, -5, -6])\nassert     monotonic([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n",
        "num_ids_2": 39,
        "num_ids_4": 87
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmonotonic([4, 7, 8, 10, 3, 1]) == True\nassert \nmonotonic([4, 7, 8, 10, 3, 1, 2, 1, 2]) == False\nassert \nmonotonic([4, 7, 8, 10, 3, 1, 2, 1, 2, 6]) == True\nassert \nmonotonic([4, 7, 8, 10, 3, 1, 2, 1, 2, 3]) == False\nassert \nmonotonic([1, 2, 3, 4, 5]) == True\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not monotonic([])\nassert not monotonic([2, 1])\nassert monotonic([-1, 2])\nassert not monotonic([-1, 1])\n",
        "num_ids_2": 11,
        "num_ids_4": 33
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     monotonic([-1,-1,-2,-3]) is False\nassert     monotonic([-1,1,-2,3]) is True\nassert     monotonic([-1,1,-2,2]) is True\nassert     monotonic([-1,-2,2,3]) is True\nassert     monotonic([-1,-2,-3,3]) is False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1')\nassert monotonic([1,3,2])\nassert not monotonic([1,3,2])\nassert not monotonic([1,2,3])\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     monotonic([]) is True\nassert     monotonic([1]) is True\nassert     monotonic([1,2,3]) is False\nassert     monotonic([1,2,3,4,5]) is True\nassert     monotonic([-1,-2,-3,0]) is False\n",
        "num_ids_2": 21,
        "num_ids_4": 55
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(f\"monotonic([1, 2, 3, 2, 1]): {monotonic([1, 2, 3, 2, 1])}\")\nprint(f\"monotonic([1, 2, 3, 3, 2]): {monotonic([1, 2, 3, 3, 2])}\")\nprint(f\"monotonic([1, 2, 3, 1]): {monotonic([1, 2, 3, 1])}\")\nprint(f\"monotonic([1, 1, 1]): {monotonic([1, 1, 1])}\")\nprint(f\"monotonic([1]): {monotonic([1])}\")\nprint(f\"monotonic([]): {monotonic([])}\")\nprint(f\"monotonic([-1, -2, -3, -4, -5]): {monotonic([-1, -2, -3, -4, -5])}\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     monotonic([0,1,2,3]) == True\nassert     monotonic([3,2,1]) == False\nassert     monotonic([1,1,1,1]) == True\nassert     monotonic([1,2,1,2]) == False\nassert     monotonic([1,1,2,1]) == True\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     monotonic([1, 2, 3, 1, 2])     ==     True\nassert     monotonic([3, 1, 2, 1, 2])     ==     False\nassert     monotonic([1, 2, 3, 2, 1])     ==     True\n",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncommon([], []) == []\ncommon([1,2,3], []) == []\ncommon([1,2,3], [4,5,6]) == []\ncommon([1,2,3], [3,4,5,6]) == [3]\ncommon([1,2,3], [1,2]) == [1,2]\ncommon([1,2,3], [1,2,3]) == [1,2,3]\ncommon([1,2,3], [1,2,3,4,5,6]) == [1,2,3]\n\n\ndef common_in_order(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists in order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common([1,2,3,4], [1,2,4,5]) == [1,2]\nassert     common([1,2,3,4], [1,2,5]) == []\nassert     common([1,2,3,4], [1,4]) == [1,4]\nassert     common([1,2,3], [1,2,3]) == [1,2]\nassert     common([1,2,3], [1,3]) == [1,3]\n",
        "num_ids_2": 50,
        "num_ids_4": 98
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    l1 = ['D','C','B','A']\n    l2 = ['D','B','A','C']\n    common(l1, l2) == ['D', 'B', 'A']\n    l1 = ['D','C','B','A']\n    l2 = ['A','B','C','D']\n    common(l1, l2) == []",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common([0, 1, 2], [0, 1]) == [0, 1], \"Wrong answer\"\nassert     common([0, 1, 2], [1, 2]) == [1], \"Wrong answer\"\nassert     common([0, 1, 2], [2, 1]) == [1, 2], \"Wrong answer\"\nassert     common([0, 1, 2], [0]) == [0], \"Wrong answer\"\nassert     common([1, 2], [0]) == [0], \"Wrong answer\"\n",
        "num_ids_2": 52,
        "num_ids_4": 102
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         common([1, 2, 3, 4], [2, 4, 3, 1]) == [1, 2, 3, 4]\nassert         common([1, 2, 3], [2, 4, 3, 1]) == []\nassert         common([1], [2, 4, 3, 1]) == []\nassert         common([1, 2, 3], [1, 2]) == []\nassert         common([1, 2, 3, 1], [1, 2]) == [1, 2, 3]\n",
        "num_ids_2": 54,
        "num_ids_4": 90
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common([], []) == []\nassert common([1, 2], []) == []\nassert common([1, 2], [1]) == [1]\nassert common([1, 2], [2]) == [2]\nassert common([1, 2], [3]) == []\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3, 4, 5], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert     common([1, 2, 3], [2, 3, 4, 5]) == []\nassert     common([1, 2, 3], [1, 1, 2, 2, 3, 3]) == [1, 1, 2, 2, 3]\n",
        "num_ids_2": 56,
        "num_ids_4": 104
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    common([], []) == []\nassert\n    common([], [1,2,3]) == []\nassert \n    common([1,2,3], []) == []\nassert \n    common([1,2,3], [1,2,3]) == [1,2,3]\nassert\n    common([1,2,3,2,3], [2,2,3]) == [2,2,3]\n",
        "num_ids_2": 5,
        "num_ids_4": 11
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\", \"d\"]) == ['c']\nassert     common([\"a\", \"b\", \"c\", \"a\", \"a\"], [\"a\", \"b\", \"c\", \"a\"]) == ['a']\nassert     common([\"a\", \"b\", \"a\", \"a\", \"c\"], [\"a\", \"b\", \"c\", \"d\"]) == ['a', 'b']\nassert     common([\"a\", \"b\", \"a\", \"a\", \"c\"], [\"a\", \"b\", \"c\", \"d\"]) == []\nassert     common([\"a\", \"b\", \"a\", \"a\", \"c\"], [\"a\", \"b\", \"c\"]) == ['a']\n",
        "num_ids_2": 68,
        "num_ids_4": 143
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(15) == 15\nassert     largest_prime_factor(17) == 17\nassert     largest_prime_factor(35) == 35\nassert     largest_prime_factor(49) == 29\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(3) == 2\nassert     largest_prime_factor(97) == 11\nassert     largest_prime_factor(180) == 9\n\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(7) == 2\nassert     largest_prime_factor(6) == 2\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(32) == 2\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef prime_factorization(n: int) -> List[int]:\n    \"\"\"Return the prime factorization of n as a list of pairs (p, e) where p is a prime\n    and e is the exponent of p in n. Assume n > 1 and is not a prime.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(6) == 2\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(100) == 2\n\ndef is_prime(n: int):\n    \"\"\"Return whether n is prime.\n    \"\"\"\n    pass\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(largest_prime_factor(10))\nprint(largest_prime_factor(12))\nprint(largest_prime_factor(100))\nprint(largest_prime_factor(100))\nprint(largest_prime_factor(1000))\nprint(largest_prime_factor(10000))\nprint(largest_prime_factor(100000))\n\ndef largest_prime_factor(n):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n = n / i\n        else:\n            i = i + 1\n    return i\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef smallest_prime_factor(n: int):\n    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_prime_factor(12) == 3\nassert     largest_prime_factor(16) == 2\nassert     largest_prime_factor(1) == 2\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(27) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(10) == 55\nassert     sum_to_n(100) == 5050\n",
        "num_ids_2": 26,
        "num_ids_4": 40
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_to_n(5) == 10\nassert     sum_to_n(4) == 9\nassert     sum_to_n(7) == 14\nassert     sum_to_n(6) == 15\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_to_n(5) == 6, \"1 + 2 + 3 + 4 + 5 = 6\"\nassert     sum_to_n(1) == 1, \"1 = 1\"\nassert     sum_to_n(2) == 3, \"1 + 2 = 3\"\nassert     sum_to_n(3) == 6, \"1 + 2 + 3 = 6\"\nassert     sum_to_n(4) == 10, \"1 + 2 + 3 + 4 = 10\"\n",
        "num_ids_2": 46,
        "num_ids_4": 90
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(4) == 5\nassert     sum_to_n(5) == 11\n",
        "num_ids_2": 26,
        "num_ids_4": 39
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_to_n(10) == 55, \"There are some errors\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsum_to_n(5) == 12\nsum_to_n(7) == 21\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert correct_bracketing(\"(())\") == True\nassert correct_bracketing(\"(()\") == False\nassert correct_bracketing(\"((()))\") == True\nassert correct_bracketing(\"((()))\") == False\n",
        "num_ids_2": 16,
        "num_ids_4": 43
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(a)\") == False\nassert correct_bracketing(\"(()\") == False\n",
        "num_ids_2": 15,
        "num_ids_4": 42
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"()\") == True, \"Wrong\"\nassert     correct_bracketing(\"()())\") == True, \"Wrong\"\nassert     correct_bracketing(\"(()())\") == False, \"Wrong\"\nassert     correct_bracketing(\"(((())))\") == False, \"Wrong\"\nassert     correct_bracketing(\"(())((())))\") == False, \"Wrong\"\n",
        "num_ids_2": 37,
        "num_ids_4": 78
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\") == True, \"Should be True\"\nassert     correct_bracketing(\"()()()\") == True, \"Should be True\"\nassert     correct_bracketing(\"((((()))))\") == True, \"Should be True\"\nassert     correct_bracketing(\"((((((((())))))))))\") == True, \"Should be True\"\nassert     correct_bracketing(\"(((((((((()))))))))))\") == False, \"Should be False\"\n",
        "num_ids_2": 40,
        "num_ids_4": 88
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"(()(())\") == False\nassert     correct_bracketing(\"((()()(()))(())())\") == True\n",
        "num_ids_2": 31,
        "num_ids_4": 52
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()[]{}\") == True\nassert     correct_bracketing(\"(]\") == False\nassert     correct_bracketing(\"([)]\") == False\nassert     correct_bracketing(\"(((()))))\") == True\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(])\") == False\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(()\") == False\n\ndef count_brackets(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return the number of opening brackets.\n    \"\"\"\n    pass\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"((5+3)*2)/2\") == True\nassert     correct_bracketing(\"(5+3)*2)/2\") == False\nassert correct_bracketing(\"5+3)\") == False\nprint(\"correct_bracketing\"",
        "num_ids_2": 40,
        "num_ids_4": 55
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_all_derivatives(xs: list):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return a list of all derivatives of this polynomial.\n    \"\"\"\n    pass\n\ndef get_zero_derivative(xs: list):\n    \"\"\"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return the derivative of this polynomial that is zero.\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    xs = [2,3,4]\n    xs = [2,3,4,5]\n    xs = [2,2,2,2]\n    print(\"f(x) = x^4 + 2x^3 + 3x^2 + 2x + 1\")\n    print(\"Polynomial of degree 2: f(2) = 2x^2 + 3x + 2\")\n    print(find_all_derivatives(xs))\n    print(get_zero_derivative(xs))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     derivative([1, 2, 3]) == [3, 6]\nassert     derivative([1, 0, -1]) == [-2, 1]\nassert     derivative([]) == []",
        "num_ids_2": 39,
        "num_ids_4": 49
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef integral(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     derivative([1, 2, 3]) == [1, 2, 6]\nassert     derivative([0, 1, 2, 3]) == [2, 6, 6, 2]\nassert     derivative([1, 2, 3, 4, 5]) == [1, 4, 10, 20, 35]\n\n\ndef diff(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n\ndef diff2(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n",
        "num_ids_2": 46,
        "num_ids_4": 75
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     derivative([1, 2, 3]) == [1, 2, 6, 3]\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\nassert     fibfib(5) == 3\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 4\n    print(fibfib(n))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(5) == 5\nassert     fibfib(6) == 5\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nvowels_count(FIX) == 3\n\nprint(FIX)\n\nprint('-' * 60)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     vowels_count('lemon') == 5\nassert     vowels_count('lemon') == 5\nassert     vowels_count('Apple') == 5\nassert     vowels_count('Apple') == 5\nassert     vowels_count('apple') == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     vowels_count('e') == 0\nassert     vowels_count('a') == 2\nassert     vowels_count('d') == 2\nassert     vowels_count('f') == 0\nassert     vowels_count('q') == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     vowels_count('abcd') == 0, \"Wrong result\"\nassert     vowels_count('abcd') == 0, \"Wrong result\"\nassert     vowels_count('abcd') == 0, \"Wrong result\"\nassert     vowels_count('abcd') == 0, \"Wrong result\"\nassert     vowels_count('abcd') == 0, \"Wrong result\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(vowels_count(\"abracadabra\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(FIX)\n\nprint(f\"{vowels_count('something')} is correct: {13}\")\nprint(f\"{vowels_count('a')} is correct: {1}\")\nprint(f\"{vowels_count('aa')} is correct: {2}\")\nprint(f\"{vowels_count('aaa')} is correct: {3}\")\nprint(f\"{vowels_count('aab')} is correct: {0}\")\nprint(f\"{vowels_count('abcd')} is correct: {3}\")\nprint(f\"{vowels_count('aA')} is correct: {0}\")\nprint(f\"{vowels_count('A')} is correct: {1}\")\nprint(f\"{vowels_count('Aa')} is correct: {2}\")\nprint(f\"{vowels_count('aAa')} is correct: {3}\")\nprint(f\"{vowels_count('AA')} is correct: {2}\")\nprint(f\"{vowels_count('AAA')} is correct: {3}\")\nprint(f\"{vowels_count('aaAA')} is correct: {4}\")\nprint(f\"{vowels_count('aaaAA')} is correct: {5}\")\nprint(f\"{vowels_count('aaa')} is correct: {0}\")\nprint(f\"{vowels_count('AA')} is correct: {1}\")\nprint(f\"{vowels_count('AAa')} is correct: {2}\")\nprint(f\"{vowels_count('AAaa')} is correct: {3}\")\nprint(f\"{vowels_count('AAA')} is correct: {2}\")\nprint(f\"{vowels_count('AAA')} is correct: {3}\")\nprint(f\"{vowels_count('AAaAA')} is correct: {4}\")\nprint(f\"{vowels_count('aaaAA')} is correct: {5}\")\nprint(f\"{vowels_count('a')} is correct: {0}\")\nprint(f\"{vowels_count('A')} is correct: {1}\")\nprint(f\"{vowels_count('aA')} is correct: {2}\")\nprint(f\"{vowels_count('Aa')} is correct: {3}\")\nprint(f\"{vowels_count('Aaa')} is correct: {4}\")\nprint(f\"{vowels_count('AaA')} is correct: {5}\")\nprint(f\"{vowels_count('aaaa')} is correct: {0}\")\nprint(f\"{vowels_count('AA')} is correct: {1}\")\nprint(f\"{vowels_count('Aaa')} is correct: {2}\")\nprint(f\"{vowels_count('AAaa')} is correct: {3}\")\nprint(f\"{vowels_count('Aaaa')} is correct: {4}\")\nprint(f\"{vowels_count('AAaaA')} is correct: {5}\")\nprint(f\"{vowels_count('aaaAA')} is correct: {6}\")\nprint(f\"{vowels_count('aaaaa')} is correct: {0}\")\nprint(f\"{vowels_count('AAaA')} is correct: {1}\")\nprint(f\"{vowels_count('AAaaaa')} is correct: {2}\")\nprint(f\"{vowels_count('AAaaaaa')} is correct: {3}\")\nprint(f\"{vowels_count('AAaAAA')} is correct: {4}\")\nprint(f\"{vowels_count('AAaaaaaa')} is correct: {5}\")\nprint(f\"{vowels_count('AAaaaaaaa')} is correct: {6}\")\nprint(f\"{vowels_count('aaAA')} is correct: {0}\")\nprint(f\"{vowels_count('aAA')} is correct: {1}\")\nprint(f\"{vowels_coun",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     vowels_count(\"exercises\") == 2\nassert     vowels_count(\"exercising\") == 5\nassert     vowels_count(\"hello\") == 0\nassert     vowels_count(\"y\") == 1\nassert     vowels_count(\"!\") == 0\n",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circular_shift(\n    '1234', 2) == '4321', \"Wrong\"\nassert     circular_shift('1234', 5) == '2434', \"Wrong\"\nassert     circular_shift('1234', -1) == '4321', \"Wrong\"\nassert     circular_shift('1234', -2) == '4321', \"Wrong\"\nassert     circular_shift('1234', -6) == '3412', \"Wrong\"\n",
        "num_ids_2": 30,
        "num_ids_4": 76
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circular_shift(23123123, 2) == '32112312'\nassert     circular_shift(23123123, 3) == '12321313'\nassert     circular_shift(23123123, 7) == '12342343'\nassert     circular_shift(23123123, -2) == '32112312'\nassert     circular_shift(23123123, -7) == '23123123'\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     circular_shift(5, 1) == '5'\nassert     circular_shift(37, 0) == '37'\nassert     circular_shift(37, -1) == '36'\nassert     circular_shift(65, -3) == '54'\nassert     circular_shift(65, -15) == '54'\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     circular_shift(12345, 1) == \"12345\"\nassert     circular_shift(12345, 2) == \"94512\"\nassert     circular_shift(12345, 3) == \"54356\"\nassert     circular_shift(12345, 4) == \"43245\"\nassert     circular_shift(12345, 5) == \"35345\"\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circular_shift('1234', 2) == '3412'\nassert     circular_shift('1234', -2) == '3412'\nassert     circular_shift('1234', 1) == '23412'\nassert     circular_shift('1234', 0) == '1234'\nassert     circular_shift('1234', -4) == '43212'\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circular_shift(\"123\", 3) == \"312\"\nassert     circular_shift(\"123\", 5) == \"312\"\nassert     circular_shift(\"123\", -2) == \"321\"\nassert     circular_shift(\"123\", -3) == \"321\"\nassert     circular_shift(\"123\", -5) == \"321\"\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circular_shift(123456789, 2) == 9456789\nassert     circular_shift(123456789, 1) == 12346\nassert     circular_shift(123456789, -1) == 57891234\nassert     circular_shift(123456789, -2) == 678089\nassert     circular_shift(123456789, -3) == 1234567\n",
        "num_ids_2": 38,
        "num_ids_4": 79
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncircular_shift('', 3) == ''\ncircular_shift('abc', 0) == 'abc'\ncircular_shift('abc', 1) == 'bc'\ncircular_shift('abc', 2) == 'cba'\ncircular_shift('abc', 3) == 'cab'\ncircular_shift('abc', 4) == 'abc'\ncircular_shift('abc', 5) == 'abc'\ncircular_shift('abc', 6) == 'abc'\ncircular_shift('abc', 7) == 'abc'\ncircular_shift('abc', 8) == 'abc'\ncircular_shift('abc', 9) == 'abc'\ncircular_shift('abc', 10) == 'abc'\ncircular_shift('abc', 11) == 'abc'\ncircular_shift('abc', 12) == 'abc'\ncircular_shift('abc', 13) == 'abc'\ncircular_shift('abc', 14) == 'abc'\ncircular_shift('abc', 15) == 'abc'\ncircular_shift('abc', 16) == 'abc'\ncircular_shift('abc', 17) == 'abc'\ncircular_shift('abc', 18) == 'abc'\ncircular_shift('abc', 19) == 'abc'\ncircular_shift('abc', 20) == 'abc'\ncircular_shift('abc', 21) == 'abc'\ncircular_shift('abc', 22) == 'abc'\ncircular_shift('abc', 23) == 'abc'\ncircular_shift('abc', 24) == 'abc'\ncircular_shift('abc', 25) == 'abc'\ncircular_shift('abc', 26) == 'abc'\ncircular_shift('abc', 27) == 'abc'\ncircular_shift('abc', 28) == 'abc'\ncircular_shift('abc', 29) == 'abc'\ncircular_shift('abc', 30) == 'abc'\ncircular_shift('abc', 31) == 'abc'\ncircular_shift('abc', 32) == 'abc'\ncircular_shift('abc', 33) == 'abc'\ncircular_shift('abc', 34) == 'abc'\ncircular_shift('abc', 35) == 'abc'\ncircular_shift('abc', 36) == 'abc'\ncircular_shift('abc', 37) == 'abc'\ncircular_shift('abc', 38) == 'abc'\ncircular_shift('abc', 39) == 'abc'\ncircular_shift('abc', 40) == 'abc'\ncircular_shift('abc', 41) == 'abc'\ncircular_shift('abc', 42) == 'abc'\ncircular_shift('abc', 43) == 'abc'\ncircular_shift('abc', 44) == 'abc'\ncircular_shift('abc', 45) == 'abc'\ncircular_shift('abc', 46) == 'abc'\ncircular_shift('abc', 47) == 'abc'\ncircular_shift('abc', 48) == 'abc'\ncircular_shift('abc', 49) == 'abc'\ncircular_shift('abc', 50) == 'abc'\ncircular_shift('abc', 51) == 'abc'\ncircular_shift('abc', 52) == 'abc'\ncircular_shift('abc', 53) == 'abc'\ncircular_shift('abc', 54) == 'abc'\ncircular_shift('abc', 55) == 'abc'\ncircular_shift('abc', 56) == 'abc'\ncircular_shift('abc', 57) == 'abc'\ncircular_shift('abc', 58) == 'abc'\ncircular_shift('abc', 59) == 'abc'\ncircular_shift('abc', 60) == 'abc'\ncircular_shift('abc', 61) == 'abc'\ncircular_shift('abc', 62) == 'abc'\ncircular_shift('abc', 63) == 'abc'\ncircular_shift('abc', 64) == 'abc'\ncircular_shift('abc', 65) == 'abc'\ncircular_shift('abc', 66) == 'abc'\ncircular_shift('abc', 67) == 'abc'\ncircular_shift('abc', 68) == 'abc'\ncircular_shift('abc', 69) == 'abc'\ncircular_shift('abc', 70) == 'abc'\ncircular_shift('abc', 71) == 'abc'\ncircula",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (digitSum('ADC') == 8), 'Function does not work'\n\n\ndef isUppercase(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns True if there are no upper case characters and False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digitSum('1234567890') == 45\nassert     digitSum('1234567890123') == 45\nassert     digitSum('12345678901234567890') == 45\nassert     digitSum('12345678901234567890123') == 45\nassert     digitSum('123456789012345678901234567890') == 45\n",
        "num_ids_2": 28,
        "num_ids_4": 66
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (digitSum('aaabbc') == 0 + 3 + 4)\nassert     (digitSum('aacccc') == 0 + 3 + 4)\nassert     (digitSum('abcde') == 1 + 4)\nassert     (digitSum('abcdef') == 10)\nassert     (digitSum('abcdefg') == 11)\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum(\"monday\") == 5\nassert     digitSum(\"\") == 0\nassert     digitSum(\"hi\") == 7\nassert     digitSum(\"12345\") == 1\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digitSum(\"heLlo\") == '14'\nassert digitSum(\"H3ll0\") == '13'\nassert digitSum(\"9HELLO\") == '13'\nassert digitSum(\"9ehel0\") == '13'\nassert digitSum(\"9ehello\") == '13'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('TESTS:')\nprint(digitSum(''))\nprint(digitSum('0'))\nprint(digitSum('1'))\nprint(digitSum('123'))\nprint(digitSum('2'))\nprint(digitSum('4'))\nprint(digitSum('5'))\nprint(digitSum('7'))\nprint(digitSum('12'))\nprint(digitSum('12345'))\nprint(digitSum('123456789'))\nprint(digitSum('12345678901'))\nprint(digitSum('12341234567890123'))\nprint(digitSum('123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digitSum(\"kad\") == \"4\", \"Wrong result for digitSum(\" + \"'kad'\" + \")\"\nassert     digitSum(\"banana\") == \"8\", \"Wrong result for digitSum(\" + \"'banana'\" + \")\"\nassert     digitSum(\"kadad\") == \"0\", \"Wrong result for digitSum(\" + \"'kadad'\" + \")\"\nassert     digitSum(\"kadabc\") == \"0\", \"Wrong result for digitSum(\" + \"'kadabc'\" + \")\"\nassert     digitSum(\"kadabckadabc\") == \"9\", \"Wrong result for digitSum(\" + \"'kadabckadabc'\" + \")\"\n",
        "num_ids_2": 58,
        "num_ids_4": 120
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digitSum(\"Lorem ipsum\") == 26\nassert     digitSum(\"Merry christmas\") == 28\nassert     digitSum(\"Lorem ipsum dolor sit amet\") == 25\n",
        "num_ids_2": 27,
        "num_ids_4": 46
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digitSum('ab12cd') == 7, 'Wrong answer, should be 7'\nassert     digitSum('ab12cdba') == 5, 'Wrong answer, should be 5'\nassert     digitSum('ab12cdabc') == 4, 'Wrong answer, should be 4'\nassert     digitSum('ab12cdabc') == 4, 'Wrong answer, should be 4'\nassert     digitSum('ab12cd') == 9, 'Wrong answer, should be 9'\nprint('Passed all tests'",
        "num_ids_2": 45,
        "num_ids_4": 91
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfruit_distribution(\"2apples6oranges3mango\",7) == 6\nassert fruit_distribution(\"8apples2oranges2mango\",10) == ",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfruit_distribution('11', 4) == '1', 'Expected 1 but got %s' % fruit_distribution('11', 4)\nassert \nfruit_distribution('10', 4) == '3', 'Expected 3 but got %s' % fruit_distribution('10', 4)\nassert \nfruit_distribution('101', 3) == '4', 'Expected 4 but got %s' % fruit_distribution('101', 3)\nassert \nfruit_distribution('111', 5) == '0', 'Expected 0 but got %s' % fruit_distribution('111', 5)\nassert fruit_distribution('111', 5) == '0', 'Expected 0 but got %s' % fruit_distribution('111', 5)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfruit_distribution(s = \"100\", n = 11) == 5\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(fruit_distribution(\"4\",2)) #2\nprint(fruit_distribution(\"1\",4)) #0\nprint(fruit_distribution(\"8\",4)) #1\nprint(fruit_distribution(\"7\",3)) ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfruit_distribution('x',3) == 2, 'Function fruit_distribution returns 2'\n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfruit_distribution(\"2 apples, 2 oranges and 4 mango\", 5) == 2\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pluck([2, 6, 3, 2]) == [3, 1]\nassert     pluck([2, 6, 3, 2]) == [2, 0]\nassert     pluck([]) == []\nassert     pluck([2, 2, 2]) == [2]\nassert     pluck([0, 0, 0]) == [0]\n",
        "num_ids_2": 40,
        "num_ids_4": 65
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [0, 8, 4, 2, 5, 9, 1]\n    print(pluck(arr))\n    arr = []\n    print(pluck(arr))\n    arr = [4, 6]\n    print(pluck(arr))\n    arr = [2, 6, 4]\n    print(pluck(arr))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pluck([1, 2, 2, 3]) ==     [1, 0], 'Wrong answer'\nassert pluck([1, 2, 2, 3]) ==     [1, 1], 'Wrong answer'\nassert pluck([1, 2, 2, 3, 3]) ==     [1, 2], 'Wrong answer'\nassert pluck([2, 1, 1]) ==     [1, 1], 'Wrong answer'\nassert pluck([1, 2, 2, 1]) ==     [1, 0], 'Wrong answer'\n",
        "num_ids_2": 51,
        "num_ids_4": 101
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pluck([0, 0, 1, 2]) == [[1, 2], 0], \n    \"Wrong answer for input: %s\" % (pluck([0, 0, 1, 2]))\nassert pluck([1, 2]) == [[1, 2], 0], \n    \"Wrong answer for input: %s\" % (pluck([1, 2]))\nassert pluck([1, 1]) == [[1, 1], 1], \n    \"Wrong answer for input: %s\" % (pluck([1, 1]))\nassert pluck([0, 0, 0, 1]) == [[0, 1], 0], \n    \"Wrong answer for input: %s\" % (pluck([0, 0, 0, 1]))\nassert pluck([1, 1, 1]) == [[1, 1], 1], \n    \"Wrong answer for input: %s\" % (pluck([1, 1, 1]))\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pluck([1, 2, 3, 4, 5]) == [2, 0]\nassert pluck([1, 2, 3, 4, 5]) == []\nassert pluck([5, 4, 3, 2, 1]) == [4, 3]\nassert pluck([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3]\nassert pluck([2, 3, 4, 5, 6, 7, 8, 9, 10]) == [4, 5]\n",
        "num_ids_2": 39,
        "num_ids_4": 87
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pluck([1,2,3,4,5,6,7]) == [2,0]\nassert     pluck([1,2,3,4,5,6]) == [1,0]\nassert     pluck([]) == []\nassert     pluck([1,2,3,4,5,6,7,8,9,10]) == []\nassert     pluck([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == [1,1]\n",
        "num_ids_2": 50,
        "num_ids_4": 87
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pluck([0]) == [0]\nassert     pluck([1]) == []\nassert     pluck([2,3,4,5,6]) == [3,2]\nassert     pluck([1,2,3,4,5,6]) == [1,2]\nassert     pluck([0,1,2,3,4,5,6]) == [0,1]\n",
        "num_ids_2": 22,
        "num_ids_4": 68
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1,3,3])     ==     3\nassert     search([1,3,1])     ==     -1\nassert     search([3,1,3,2,1,1]) ==     3\nassert     search([1,2,3,4,5,6,7,8,9,10]) ==     10\nassert     search([]) ==     -1\n",
        "num_ids_2": 31,
        "num_ids_4": 79
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(search([3,3,3,3,5,7,2]))\n    print(search([2,2,2,2,1,1,1,1,1,1]))\n    print(search([-5,-4,-3,-2,-1,0,1,2,3,4,5])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint search([3, 2, 3]) == 3\nprint search([2, 2, 2]) == -1\nprint search([3, 4, 5]) == 4\nprint search([-2, 1, 2, -3]) == 1\nprint search([-2, -2, -2, -2]) == -2\n\nprint \"All tests passed",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([4, 2, 1]) == 2\nassert     search([4, 4, 4]) == -1\nassert     search([1, 1]) == 1\nassert     search([]) == -1\n",
        "num_ids_2": 27,
        "num_ids_4": 47
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([4,5,7,8,8,8,11]) == 8, \"Expected 8, found: {}\".format(search([4,5,7,8,8,8,11]))\nassert     search([1,1,1,2,2,2,3,3,3,4,4,4,4,4,5,5,5,6,6,7,7,7,7,7]) == 7, \"Expected 7, found: {}\".format(search([1,1,1,2,2,2,3,3,3,4,4,4,4,4,5,5,5,6,6,7,7,7,7,7]))\nassert     search([1,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,",
        "num_ids_2": 168,
        "num_ids_4": 1023
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([6,7,9,7,7,9,7,5]) == 7, \"Wrong answer!\"\nassert     search([6,6,6,9,7,7,9,7,7,7,7]) == 7, \"Wrong answer!\"\nassert     search([0,0,0,0,0,0]) == -1, \"Wrong answer!\"\n",
        "num_ids_2": 64,
        "num_ids_4": 90
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n\nif __name__ == '__main__':\n    input_nums = [-1,1,2,3]\n    assert search(input_nums) == 2, search(input_nums)\n\n    print('You passed this test!')",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strange_sort_list([1, 5, 0, -1, 6, 3, 1, 1]) == [-1, 1, 1, 0, 3, 1, 6, 5], \\\n        \"Wrong result\"\nassert     strange_sort_list([1, 5, 1, -1, -1, 6, 3, 1]) == [-1, 1, 1, -1, 6, 5, 3, 1], \\\n        \"Wrong result\"\nassert     strange_sort_list([1, 5, 0, -1, 6, 3, 1, 1]) == [-1, 1, 0, -1, 1, 3, 1, 5], \\\n        \"Wrong result\"\nassert     strange_sort_list([1, 5, 1, -1, -1, 6, 3, 1]) == [-1, 1, -1, 1, 3, 6, 5, 1], \\\n        \"Wrong result\"\n",
        "num_ids_2": 94,
        "num_ids_4": 189
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strange_sort_list([3,7,5,2,9,10,1,4,8,6]) == [1,2,3,4,5,6,7,8,9,10]\nassert     strange_sort_list([5,1,9,10,3,4]) == [1,3,4,5,9,10]\nassert     strange_sort_list([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "num_ids_2": 88,
        "num_ids_4": 140
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strange_sort_list([4, 3, 1, 2]) == [1, 2, 3, 4], \"The result is not correct\"\nassert     strange_sort_list([3, 2, 4, 1]) == [1, 2, 3, 4], \"The result is not correct\"\nassert     strange_sort_list([2, 4, 1, 3]) == [1, 2, 3, 4], \"The result is not correct\"\n",
        "num_ids_2": 70,
        "num_ids_4": 105
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strange_sort_list([]) == []\nassert     strange_sort_list([1]) == [1]\nassert     strange_sort_list([2,1]) == [1,2]\nassert     strange_sort_list([-2, -1, 0, 1, 2]) == [-2, -1, 0, 1, 2]\nassert     strange_sort_list([2, 3, 1, 0]) == [0, 1, 2, 3]\n",
        "num_ids_2": 29,
        "num_ids_4": 84
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     strange_sort_list([6, 5, 4, 1, 3]) == [1, 3, 4, 5, 6]\nassert     strange_sort_list([6, 5, 4, 1, 3, 4, 5, 6, 1]) == [1, 1, 1, 3, 3, 4, 4, 5, 6]\nassert     strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     strange_sort_list([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5, 5]\nassert     strange_sort_list([6, 5, 4, 1, 3]) == [1, 3, 4, 5, 6]\n",
        "num_ids_2": 80,
        "num_ids_4": 148
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # returns [[0, 1, 2], [2, 1, 0]]\n    # correct, since the list is in strange order.\n    \n    # returns [[1, 0, 2], [2, 1, 0]]\n    # correct, since the list is in strange order.\n    \n    # returns [[1, 2, 0], [2, 1, 0]]\n    # correct, since the list is in strange order.\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert triangle_area(3, 4, 5) == 5\nassert triangle_area(3, 4, 6) == -1\nassert triangle_area(3, 4, -1) == -1\nassert triangle_area(3, 4, -2) == -1\n",
        "num_ids_2": 17,
        "num_ids_4": 48
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(1, 1, 1) == 1, \"Wrong answer\"\nassert     triangle_area(2, 1, 2) == 1, \"Wrong answer\"\nassert     triangle_area(3, 3, 2) == 1, \"Wrong answer\"\nassert     triangle_area(2, 3, 2) == 1, \"Wrong answer\"\nassert     triangle_area(3, 2, 2) == 1, \"Wrong answer\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert triangle_area(3, 4, 5) == 0.25\nassert triangle_area(8, 10, 5) == 0.5\nassert triangle_area(3, 4, 5) == 0.5",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triangle_area(2, 2, 2) == 1.67\nassert     triangle_area(2, 2, 2) == 2.00\nassert     triangle_area(4, 6, 8) == 1.75\nassert     triangle_area(6, 4, 2) == -1.67\nassert     triangle_area(4, 2, 6) == -1.67\n",
        "num_ids_2": 36,
        "num_ids_4": 73
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(1, 2, 3) == 0.33, 'triangle_area failed'\nassert     triangle_area(5, 3, 1) == -1, 'triangle_area failed'\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    triangle_area(1, 1, 1) == 1\n    triangle_area(1, 3, 6) == 6\n    triangle_area(2, 4, 3) == 7.5\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nwill_it_fly([1,2,3,4], 4) == False\nwill_it_fly([1,2,3,3], 4) == False\nwill_it_fly([2,1,3,4], 4) == True\nwill_it_fly([2,2,2,2], 4) == True\nwill_it_fly([2,1,3,3], 4) == True\nwill_it_fly([1,2,3,4], 2) == False\nwill_it_fly([1,1,2,2], 2) == True\nwill_it_fly([1,2,2,2], 2) == True\nwill_it_fly([1,1,1,2], 2) == True\nwill_it_fly([1,1,1,1], 2) == False\nwill_it_fly([1,1,2,2], 2) == True\nwill_it_fly([1,1,2,1], 2) == False\nwill_it_fly([1,1,1,1], 2) == True\nwill_it_fly([2,1,2,1], 2) == False\nwill_it_fly([1,1,2,1], 5) == True\nwill_it_fly([2,2,2,2], 5) == False\nwill_it_fly([1,2,2,2], 4) == True\nwill_it_fly([1,1,1,1], 5) == True\nwill_it_fly([1,2,2,2], 5) == False\nwill_it_fly([2,1,2,1], 5) == True\nwill_it_fly([1,1,1,1], 5) == False\nwill_it_fly([2,2,2,2], 5) == False\nwill_it_fly([1,2,2,2], 6) == False\nwill_it_fly([1,2,2,1], 6) == True\nwill_it_fly([1,1,1,1], 6) == False\nwill_it_fly([1,2,2,2], 7) == False\nwill_it_fly([1,2,2,1], 7) == False\nwill_it_fly([1,1,1,1], 7) == False\nwill_it_fly([2,1,2,1], 7) == False\nwill_it_fly([1,2,2,2], 10) == True\nwill_it_fly([1,2,2,2], 20) == False\nwill_it_fly([1,1,1,1], 10) == False\nwill_it_fly([1,2,2,2], 20) == False\nwill_it_fly([2,1,2,1], 10) == True\nwill_it_fly([1,1,1,1], 20) == False\nwill_it_fly([2,2,2,2], 20) == False\nwill_it_fly([1,2,2,2], 50) == False\nwill_it_fly([1,1,1,1], 50) == True\nwill_it_fly([2,2,2,2], 50) == False\nwill_it_fly([1,2,2,2], 100) == False\nwill_it_fly([1,1,1,1], 100) == True\nwill_it_fly([1,2,2,2], 200) == False\nwill_it_fly([1,1,1,1], 200) == True\nwill_it_fly([1,2,2,2], 400) == False\nwill_it_fly([1,1,1,1], 400) == True\nwill_it_fly([1,2,2,2], 800) == True\nwill_it_fly([1,1,1,1], 800) == False\nwill_it_fly([1,2,2,2], 2000) == False\nwill_it_fly([1,1,1,1], 2000) == True\nwill_it_fly([1,2,2,2], 4000) == True\nwill_it_fly([1,1,1,1], 4000) == False\nwill_it_fly([1,2,2,2], 8000) == True\nwill_it_fly([1,1,1,1], 8000) == False\nwill_it_fly([1,2,2,2], 1600",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     will_it_fly(balanced_palindrome([1,2,3,4]),6)==True\nassert     will_it_fly(balanced_palindrome([1,2,3,1]),4)==True\nassert     will_it_fly(balanced_palindrome([1,2,3,1]),5)==True\nassert     will_it_fly(balanced_palindrome([2,4,5,6,4,6,2,4,3,4,6,4,3,2,2,4,5,3,5,4,4,5,6,2,5,4,3,2,5,4,3,5,5,4,6,5,5,3,2,4,3,2,2,4,5,3,5,4,4,5,6,4,6,3,4,4,6,5,5,4,4,6,5,4,5,4,4,5,6,2,3,2,5,4,3,5,5,4,6,5,5,4,4,6,5,4,5,5,4,5,5,4,5,5,4,5,4,6,5,5,4,4,6,5,5,4,4,6,5,5,4,4,6,5,5,4,4,5,4,4,4,4,6,5,5,4,5,4,4,5,4,4,5,4,4,5,4,4,5,4,5,4,4,5,4,4,5,4,4,5,4,4,5,4,4,5,4,5,4,5,4,4,5,5,5,4,5,4,5,5,5,4,5,4,5,5,4,5,4,5,5,4,5,5,4,5,5,5,4,5,5,5,5,5,4,5,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
        "num_ids_2": 54,
        "num_ids_4": 1022
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nwill_it_fly([1,2,2], 2) == True\nwill_it_fly([1,2,2], 3) == False\nwill_it_fly([5,2,3], 6) == True\nwill_it_fly([5,2,3], 7) == False\nwill_it_fly([1,2,2], 2) == True\nwill_it_fly([1,2,2], 3) == False\nwill_it_fly([5,2,3], 6) == True\nwill_it_fly([5,2,3], 7) == False\nwill_it_fly([], 0) == False\nwill_it_fly([], 2) == False\nwill_it_fly([], 3) == False\nwill_it_fly([1,2,2,2,2], 2) == True\nwill_it_fly([1,2,2,2,2], 3) == False\nwill_it_fly([1,2,2,2,2], 4) == False\nwill_it_fly([1,2,2,2,2], 5) == False\nwill_it_fly([1,2,2,2,2], 6) == False\nwill_it_fly([1,2,2,2,2], 7) == False\nwill_it_fly([], 0) == False\nwill_it_fly([1,2,2,2], 2) == False\nwill_it_fly([1,2,2,2], 3) == False\nwill_it_fly([1,2,2,2], 4) == False\nwill_it_fly([1,2,2,2], 5) == False\nwill_it_fly([1,2,2,2], 6) == False\nwill_it_fly([1,2,2,2], 7) == False\nwill_it_fly([1,2,2,2,2], 2) == False\nwill_it_fly([1,2,2,2,2], 3) == False\nwill_it_fly([1,2,2,2,2], 4) == False\nwill_it_fly([1,2,2,2,2], 5) == False\nwill_it_fly([1,2,2,2,2], 6) == False\nwill_it_fly([1,2,2,2,2], 7) == False\nwill_it_fly([1,2,2,2,2,2], 2) == False\nwill_it_fly([1,2,2,2,2,2], 3) == False\nwill_it_fly([1,2,2,2,2,2], 4) == False\nwill_it_fly([1,2,2,2,2,2], 5) == False\nwill_it_fly([1,2,2,2,2,2], 6) == False\nwill_it_fly([1,2,2,2,2,2], 7) == False\nwill_it_fly([1,2,2,2,2,2,2], 2) == False\nwill_it_fly([1,2,2,2,2,2,2], 3) == False\nwill_it_fly([1,2,2,2,2,2,2], 4) == False\nwill_it_fly([1,2,2,2,2,2,2], 5) == False\nwill_it_fly([1,2,2,2,2,2,2], 6) == False\nwill_it_fly([1,2,2,2,2,2,2], 7) == False\nwill_it_fly([1,2,2,2,2,2,2,2], 2) == False\nwill_it_fly([1,2,2,2,2,2,2,2], 3) == False\nwill_it_fly([1,2,2,2,2,2,2,2], 4) == False\nwill_it_fly([1,2,2,2,2,2,2,2], 5) == False\nwill_it_fly([1,2,2,2,2,2,2,2], 6) == False\nwill_it_fly([1,2,2,2,2,2,2,2], 7) == False\nwill_it_fly([1,2,2,2,2,2,2,2,",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nwill_it_fly([1,2,3,4,5,6,7,8,9,10,11,12],15)==True\nwill_it_fly([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],20)==False\nwill_it_fly([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],25)==True\nwill_it_fly([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],45)==False\nwill_it_fly([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],50)==False\nwill_it_fly([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],25)==False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     will_it_fly([3,5,2,1,1], 4) == True\nassert     will_it_fly([3,5,2,1,1], 3) == False\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nwill_it_fly([1,2,3],5) == False\nwill_it_fly([1,2,3,4],5) == False\nwill_it_fly([1,2,3,4,5],5) == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    q = [\"a\", \"g\", \"i\", \"j\", \"l\", \"m\", \"n\"]\n    w = 1\n    assert will_it_fly(q, w)\n    print(\"Test passed\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(will_it_fly([3,7,1,4,2,9,5,0,3,7,9,0,0],10))\n\nassert will_it_fly([3,7,1,4,2,9,5,0,3,7,9,0,0],10)==False\nassert will_it_fly([3,7,1,4,2,9,5,0,3,7,9,0,0],11)==True\n",
        "num_ids_2": 41,
        "num_ids_4": 79
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_the_same(s,t):\n    '''\n    Write a function that returns True if the two objects s and t are the same or if they have the same length and all the characters of the objects are equal.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert smallest_change([1,2,3,3,4,5]) == 2\nassert smallest_change([2,1,2,3,4,5]) == 2\nassert smallest_change([1,2,3,4,5]) == 1\n",
        "num_ids_2": 23,
        "num_ids_4": 61
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_change([1,2,3,4,5,6,7]) == 3\nassert     smallest_change([1,2,3,4,5,6,7,8,9]) == 2\nassert     smallest_change([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 1\nassert     smallest_change([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442",
        "num_ids_2": 52,
        "num_ids_4": 130
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsmallest_change([2,4,6,8]) == 3\nassert \nsmallest_change([2,6,8,4]) == ",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     total_match(['hello', 'hi', 'how', 'are', 'you'], ['hi', 'you', 'are']) == ['hi', 'are'], 'test 1 failed'\nassert total_match(['hello', 'hi', 'how', 'are', 'you'], ['hi', 'you', 'are', 'how', 'are']) == ['hi', 'are'], 'test 2 failed'\nassert total_match(['hello', 'hi', 'how', 'are', 'you'], ['hi', 'you', 'are', 'how', 'are', 'how', 'are']) == ['hi', 'are'], 'test 3 failed'\n",
        "num_ids_2": 97,
        "num_ids_4": 154
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     total_match([\"Rami\",\"Ramy\",\"Rami\",\"Amit\",\"Amit\",\"Amit\",\"Rami\",\"Amit\"],\n        [\"Rami\",\"Ramy\",\"Rami\",\"Amit\",\"Amit\",\"Amit\",\"Rami\",\"Amit\"])    == [\"Rami\",\"Amit\"],\n    \"Should return ['Rami','Amit']\"\nassert     total_match([\"Rami\",\"Ramy\",\"Rami\",\"Amit\",\"Amit\",\"Amit\",\"Rami\",\"Amit\"],\n        [\"Rami\",\"Ramy\",\"Rami\",\"Amit\",\"Amit\",\"Amit\",\"Rami\",\"Amit\"])    == [\"Rami\",\"Amit\"],\n    \"Should return ['Rami','Amit']\"\nassert     total_match([\"Rami\",\"Ramy\",\"Rami\",\"Amit\",\"Amit\",\"Amit\",\"Rami\",\"Amit\"],\n        [\"Rami\",\"Ramy\",\"Rami\",\"Amit\",\"Amit\",\"Amit\",\"Rami\",\"Amit\"])    == [\"Rami\",\"Ramy\",\"Rami\",\"Amit\",\"Amit\",\"Amit\"],\n    \"Should return ['Rami','Ramy','Rami','Amit','Amit','Amit']\"\n\n\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(total_match([\"samsung\", \"lenovo\", \"xiaomi\"], [\"samsung\", \"lenovo\"]))\nprint(total_match([\"samsung\", \"lenovo\", \"xiaomi\"], [\"samsung\", \"lenovo\", \"xiaomi\"]))\nprint(total_match([\"samsung\", \"lenovo\", \"xiaomi\"], [\"samsung\", \"lenovo\", \"lenovo\", \"xiaomi\"]))\nprint(total_match([\"samsung\", \"lenovo\", \"xiaomi\"], [\"samsung\", \"lenovo\", \"xiaomi\", \"xiaomi\"]))\nprint(total_match([\"samsung\", \"lenovo\", \"xiaomi\"], [\"samsung\", \"lenovo\", \"lenovo\", \"xiaomi\", \"xiaomi\"]))\nprint(total_match([\"samsung\", \"lenovo\", \"xiaomi\"], [\"samsung\", \"lenovo\", \"lenovo\", \"lenovo\"]))\nprint(total_match([\"samsung\", \"lenovo\", \"xiaomi\"], [\"samsung\", \"lenovo\", \"lenovo\", \"lenovo\", \"xiaomi\"]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     total_match([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\"]\nassert total_match([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert total_match([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"]\nassert total_match([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert total_match([], [\"a\", \"b\", \"c\", \"d\"]) == []\n",
        "num_ids_2": 83,
        "num_ids_4": 171
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     total_match(['h','e','l','l','o'], ['h','e','l','l','o','w']) ==     ['h','e','l','l','o']\nassert     total_match(['h','e','l','l','o'], ['h','e','l','l','o','w','y']) ==     ['h','e','l','l','o']\nassert     total_match(['h','e','l','l','o'], ['h','e','l','l','o','w','y','z']) ==     ['h','e','l','l','o']\nassert     total_match(['h','e','l','l','o'], ['h','e','l','l','o','w','y','z','v']) ==     ['h','e','l','l','o','w','y','z']\nassert     total_match(['h','e','l','l','o','w','y','z'], ['h','e','l','l','o','w','y','z']) ==     ['h','e','l','l','o','w','y','z']\n",
        "num_ids_2": 94,
        "num_ids_4": 202
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     total_match(['banana', 'apple'], ['banana', 'apples']) == ['banana']\nassert     total_match(['banana', 'apple', 'coconut', 'orange', 'kiwi', 'pear'], ['banana', 'apples']) == ['apple']\nassert     total_match(['banana', 'apple', 'coconut', 'orange', 'kiwi', 'pear'], ['banana', 'apple', 'coconut', 'orange', 'kiwi']) == ['apple', 'orange', 'kiwi']\nassert     total_match(['banana', 'apple', 'coconut', 'orange', 'kiwi', 'pear'], ['banana', 'apple', 'orange', 'kiwi']) == ['orange', 'kiwi']\nassert     total_match(['banana', 'apple', 'coconut', 'orange', 'kiwi', 'pear'], ['banana', 'orange', 'kiwi', 'pear']) == ['banana', 'orange', 'kiwi']\n",
        "num_ids_2": 73,
        "num_ids_4": 189
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     total_match([\"abcd\",\"abc\",\"d\", \"pqrs\", \"lmn\", \"y\", \"zzzz\"], [\"zzzz\", \"y\", \"lmn\"]) == [\"abcd\", \"pqrs\", \"d\"]\nassert total_match([\"abcd\",\"abc\",\"d\", \"pqrs\", \"lmn\", \"y\", \"zzzz\"], [\"zzzz\", \"y\", \"lmn\"]) == [\"abcd\", \"abc\"]\nassert total_match([\"abcd\",\"abc\",\"d\", \"pqrs\", \"lmn\", \"y\", \"zzzz\"], [\"zzzz\", \"y\", \"lmn\"]) == [\"pqrs\"]\nassert total_match([\"abcd\",\"abc\",\"d\", \"pqrs\", \"lmn\", \"y\", \"zzzz\"], [\"zzzz\", \"y\", \"lmn\"]) == [\"abc\"]\nassert total_match([\"abcd\",\"abc\",\"d\", \"pqrs\", \"lmn\", \"y\", \"zzzz\"], [\"zzzz\", \"y\", \"lmn\"]) == [\"d\"]\n",
        "num_ids_2": 106,
        "num_ids_4": 200
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['b', 'c', 'd']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['c', 'd']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']) == ['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']\nassert total_match(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']) == ['c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']\n\nprint(\"all tests passed\"",
        "num_ids_2": 109,
        "num_ids_4": 344
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef distance(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    the number of chars in the two lists added.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(9) == False\nassert     is_multiply_prime(31) == False\nassert     is_multiply_prime(100) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(33) == False\nassert     is_multiply_prime(13) == False\nassert     is_multiply_prime(2) == True\nassert     is_multiply_prime(4) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(4) == True, \"is_multiply_prime(4) = True\"\nassert     is_multiply_prime(5) == False, \"is_multiply_prime(5) = False\"\nassert     is_multiply_prime(6) == True, \"is_multiply_prime(6) = True\"\nassert     is_multiply_prime(7) == True, \"is_multiply_prime(7) = True\"\nassert     is_multiply_prime(8) == False, \"is_multiply_prime(8) = False\"\n",
        "num_ids_2": 60,
        "num_ids_4": 120
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert is_multiply_prime(97) == True\nassert is_multiply_prime(201) == True\nassert is_multiply_prime(299) == True\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(5) == True\nassert     is_multiply_prime(10) == False\nassert     is_multiply_prime(24) == False\nassert     is_multiply_prime(99) == True\n\nprint('\\033[92m'+\"#\"*40+'\\033[0m')\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_simple_power(0, 1) == True\nassert is_simple_power(1, 1) == False\nassert is_simple_power(2, 1) == True\nassert is_simple_power(3, 1) == False\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_simple_power(7, 2) == True\nassert     is_simple_power(7, 3) == False\nassert     is_simple_power(7, 1) == True\nassert     is_simple_power(7, 0) == False\nassert     is_simple_power(3, 2) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_simple_power(8, 2)\nassert     not is_simple_power(8, 1)\nassert     is_simple_power(1, 2)\n",
        "num_ids_2": 27,
        "num_ids_4": 40
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (is_simple_power(2, 4) == True)\nassert     (is_simple_power(2, 2) == True)\nassert     (is_simple_power(10, 3) == False)\nassert     (is_simple_power(2, 1) == True)\nassert     (is_simple_power(0, 1) == False)\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_simple_power(9, 3) == True\nassert     is_simple_power(9, 4) == False\nassert     is_simple_power(9, 5) == False\nassert     is_simple_power(9, 6) == True\nassert     is_simple_power(9, 7) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(10, 2) == True\nassert     is_simple_power(100, 2) == False\nassert     is_simple_power(10, 3) == True\nassert     is_simple_power(10, 4) == False\nassert     is_simple_power(20, 2) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_simple_power(1, 0) == False, \"0!=1\"\nassert     is_simple_power(2, 0) == False, \"0!=2\"\nassert     is_simple_power(3, 0) == False, \"0!=3\"\nassert     is_simple_power(2, 1) == False, \"2!=2\"\nassert     is_simple_power(3, 1) == True, \"3!=3\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_simple_power(12, 3) == True, \"The first simple_power isn't true!\"\nassert     is_simple_power(9, 3) == False, \"The second simple_power isn't false!\"\nassert     is_simple_power(5, 5) == True, \"The third simple_power is true!\"\nassert     is_simple_power(3, 7) == False, \"The fourth simple_power is false!\"\nassert     is_simple_power(5, 10) == False, \"The fourth simple_power is false!\"\n",
        "num_ids_2": 52,
        "num_ids_4": 102
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not iscube(4)\nassert iscube(8)\nassert iscube(12)\nassert not iscube(10)\n",
        "num_ids_2": 11,
        "num_ids_4": 25
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('Tests passed'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef cubef(a):\n    '''\n    Write a function that takes an integer a and returns a list of \n    all cubes of this integer.\n    Note: you may assume the input is always valid.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_cube(n):\n    '''\n    Write a function that takes an integer n and returns True \n    if this integer is a cube of some integer number.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     iscube(1) == True\nassert     iscube(2) == False\nassert     iscube(3) == True\nassert     iscube(4) == True\nassert     iscube(5) == True\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     hex_key(\"C7\") == 6, \"incorrect value\"\nassert hex_key(\"1F\") == 8, \"incorrect value\"\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # 1\n    assert hex_key('') == 0\n    # 2\n    assert hex_key('a') == 0\n    # 3\n    assert hex_key('A') == 0\n    # 4\n    assert hex_key('aa') == 0\n    # 5\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nhex_key(\"B1B1C9C3D\") == 2\nhex_key(\"A1B1C1D\") == 3\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hex_key(\"\") == 0\nassert     hex_key(\"A\") == 0\nassert     hex_key(\"AB\") == 0\nassert     hex_key(\"2\") == 2\nassert     hex_key(\"2AB\") == 0\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     hex_key('') == 1, \"Empty string\"\nassert     hex_key('a') == 0, \"Symbols A,B,C,D,E,F\"\nassert     hex_key('A') == 0, \"Symbols A,B,C,D,E,F\"\nassert     hex_key('0') == 1, \"0\"\nassert     hex_key('1') == 1, \"1\"\n",
        "num_ids_2": 44,
        "num_ids_4": 87
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert    decimal_to_binary(8) == '1010'\nassert    decimal_to_binary(10) == '1010'\nassert    decimal_to_binary(15) == '111111'\nassert    decimal_to_binary(16) == '11110000'\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(100) == '100db'\nassert     decimal_to_binary(35) == '101101db'\nassert     decimal_to_binary(20) == '10100db'\nassert     decimal_to_binary(1) == '101db'\nassert     decimal_to_binary(0) == '0db'\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(125) == 'db0000010100110110101'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n",
        "num_ids_2": 39,
        "num_ids_4": 71
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(5) == '101'\nassert     decimal_to_binary(16) == '1101'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(17) == '1011'\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\nassert     decimal_to_binary(5) == '101'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(decimal = 5) == '0b101'\nassert     decimal_to_binary(decimal = 6) == '0b110'\nassert     decimal_to_binary(decimal = 7) == '0b111'\nassert     decimal_to_binary(decimal = 10) == '0b1010'\nassert     decimal_to_binary(decimal = 15) == '0b1011'\n",
        "num_ids_2": 42,
        "num_ids_4": 85
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(10) == \"100\"\nassert     decimal_to_binary(20) == \"10010\"\nassert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(31) == \"10011100\"\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(100) == '100010'\nassert     decimal_to_binary(1000) == '1100001'\nassert     decimal_to_binary(10000) == '110000010'\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_happy(\"ghi\") == False, \"Should not be happy\"\nassert is_happy(\"abc\") == True, \"Should be happy\"\nassert is_happy(\"aabc\") == True, \"Should be happy\"\nassert is_happy(\"aabcd\") == True, \"Should be happy\"\n",
        "num_ids_2": 21,
        "num_ids_4": 54
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_happy('aab') == False\nassert     is_happy('aaab') == False\nassert     is_happy('aa') == True\nassert     is_happy('aaaa') == True\nassert     is_happy('aaa') == False\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_happy(\"yabzyx\") == False\nassert is_happy(\"yyyy\") == True\nassert is_happy(\"abcdefghijklmnopqrstuvwxyz\") == False\nassert is_happy(\"zzzzzz\") == True\n",
        "num_ids_2": 16,
        "num_ids_4": 50
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert is_happy(\"abba\") == True\nassert is_happy(\"abc\") == False\nassert is_happy(\"ab\") == True\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_happy(\"a\") == False, \"Should be False\"\nassert     is_happy(\"aa\") == False, \"Should be False\"\nassert     is_happy(\"aab\") == False, \"Should be False\"\nassert     is_happy(\"aa\") == True, \"Should be True\"\nassert     is_happy(\"aab\") == True, \"Should be True\"\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_happy(\"1221\") == True, \"Should be true\"\nassert     is_happy(\"1221a\") == False, \"Should be false\"\nassert     is_happy(\"h3o\") == False, \"Should be false\"\nassert     is_happy(\"2a\") == False, \"Should be false\"\nassert     is_happy(\"a\") == False, \"Should be false\"\n",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    numerical_letter_grade([3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['E', 'B-', 'C+', 'C', 'B+', 'A-', 'A+', 'D-', 'A']\n    print('Testing with correct input...')\n    print('Testing PASSED\\n')\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'], 'WRONG ANSWER'\n\nprint('CORRECT'",
        "num_ids_2": 119,
        "num_ids_4": 119
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    grades = list(map(float, input().split()))\n    grades = numerical_letter_grade(grades)\n    for grade in grades:\n        print(grade)\n\nmain()\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_function(test_case):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making his own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n    output = numerical_letter_grade(test_case[0])\n    if type(output) is not str:\n        print(\"Fail\")\n    elif output!= test_case[1]:\n        print(\"Fail\")\n    else:\n        print(\"Pass\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([3.5, 2.7, 2.3]) == ['B+', 'B', 'B-']\nassert numerical_letter_grade([3.8, 2.3, 2.0]) == ['A+', 'A', 'A-']\nassert numerical_letter_grade([3.0, 2.3, 1.7]) == ['A+', 'A', 'A-']\nassert numerical_letter_grade([3.5, 2.7, 2.8]) == ['A+', 'A', 'A-']\nassert numerical_letter_grade([3.5, 2.7, 2.8]) == ['A+', 'A', 'A-']\n",
        "num_ids_2": 67,
        "num_ids_4": 131
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \n\ndef grades_from_GPAs(gpa_list):\n    \"\"\"The teacher is working hard to give your grades. The teacher wants to give\n    the students some grade points based on their grade. The teacher has given\n    a list of GPAs to students. The teacher wants to give them some grade\n    points based on the student's GPA. The teacher has to write a function\n    that can return the letter grade for each student from a list of grades\n    given by the teacher. The only problem is, she has lost the code she used\n    for grading. She has given you a list of GPAs for some students and you\n    have to write a function that can output a list of letter grades using the\n    following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prime_length(\"This is an example\") == True\nassert     prime_length(\"Able was I, ere I saw Elba\") == False\nassert prime_length(\"I am\") == True\nassert prime_length(\"5\") == False\nassert prime_length(\"7\") == True\n",
        "num_ids_2": 35,
        "num_ids_4": 56
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_length(\"hey\") == False\nassert     prime_length(\"hello\") == True\nassert     prime_length(\"goodbye\") == True\nassert     prime_length(\"\") == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_length(\"\") == False\nassert     prime_length(\"8\") == False\nassert     prime_length(\"10\") == False\nassert     prime_length(\"17\") == True\nassert     prime_length(\"3.2\") == False\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif prime_length(\"123456789\") == True:\n    print(\"This is a prime number!\")\nelif prime_length(\"123456789\") == False:\n    print(\"This is not a prime number!\")\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_length(\"a\") == False\nassert    prime_length(\"abc\") == True\nassert    prime_length(\"1\") == False\nassert    prime_length(\"2\") == False\nassert    prime_length(\"3\") == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_length(\"string\") == False\nassert     prime_length(\"abcd\") == True\nassert     prime_length(\"ac\") == True\nassert     prime_length(\"1\") == False\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 5\nassert     starts_one_ends(4) == 8\nassert     starts_one_ends(5) == 13\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 2\nassert starts_one_ends(3) == 3\nassert starts_one_ends(4) == 5\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 3\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert ends_one_starts(1) == 1\nassert ends_one_starts(2) == 1\nassert ends_one_starts(3) == 1\nassert ends_one_starts(4) == 2\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(starts_one_ends(1))\nprint(starts_one_ends(10))\nprint(starts_one_ends(100))\nprint(starts_one_ends(1000))\nprint(starts_one_ends(10000))\nprint(starts_one_ends(100000))\nprint(starts_one_ends(1000000))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     starts_one_ends(3) == 3\nassert     starts_one_ends(5) == 2\nassert     starts_one_ends(9) == 5\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(starts_one_ends(2)) == 3\nprint(starts_one_ends(3)) == 5\nprint(starts_one_ends(10)) == 20\nprint(starts_one_ends(11)) == 30\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solve(10) == \"1010\", \"Wrong answer for 10!\"\nassert     solve(1001) == \"1111\", \"Wrong answer for 1001!\"\nassert     solve(1034) == \"10111\", \"Wrong answer for 1034!\"\nassert     solve(1766) == \"111011\", \"Wrong answer for 1766!\"\nassert     solve(1767) == \"111111\", \"Wrong answer for 1767!\"\n",
        "num_ids_2": 40,
        "num_ids_4": 85
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve(100) == \"1001\", \"FAILED: 100\"\nassert     solve(10) == \"101\", \"FAILED: 10\"\nassert     solve(10) == \"101\", \"FAILED: 10\"\nassert     solve(10) == \"101\", \"FAILED: 10\"\nassert     solve(10) == \"101\", \"FAILED: 10\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert solve(12345) == '110111101110011111101'\nassert solve(999) == '10011001011100000001'\n",
        "num_ids_2": 21,
        "num_ids_4": 37
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    solve(100) == \"1010\"\nassert \n    solve(121) == \"1120\"\nassert \n    solve(10) == \"101\"\nassert \n    solve(10) == \"101\"\nassert \n    solve(16) == \"11\"\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \n    \n    \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED.  IT'S A SAVING HERO!\\n\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n\n\n\n\n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \"\"\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = list(map(int, input().split()))\n    add(lst)\n    print(lst)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add([]) == []\nassert     add([1, 2, 3]) == [1, 5, 3]\nassert     add([2, 4, 6, 8]) == [2, 4, 6, 10, 8]\nassert     add([1, 2, 3, 4, 5]) == [1, 5, 3, 7, 11]",
        "num_ids_2": 27,
        "num_ids_4": 79
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add([1,2,3,4]) == [2,4,4,6]\nassert     add([1,2,3,4,5]) == [2,4,4,6,8]\nassert     add([1,2,3,4,5,6,7,8,9]) == [2,4,4,6,8,8,10,12,12]\nassert     add([1,2,3,4,5,6,7,8,9,10,11,12]) == [2,4,4,6,8,8,10,12,12,14,16,16]\n\ndef remove(lst):\n    \"\"\"Given a non-empty list of integers lst. remove the elements that are at even indices..\n    \"\"\"\n    pass\n",
        "num_ids_2": 50,
        "num_ids_4": 148
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = [2, 3, 4, 5, 6, 9, 10]\n    add(lst)\n    print(lst",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add([1,2,3,4,5,6,7,8,9]) == [2,6,0,1,3,5,7,8,9]\nassert     add([1,2,3,4,5,6]) == [2,6]\nassert     add([1,2,3,4,5,6,7,8]) == [0,2,4,6,8]\n\ndef subtract(lst):\n    \"\"\"Given a non-empty list of integers lst. subtract the even elements that are at odd indices..\n    \"\"\"\n    pass\n",
        "num_ids_2": 66,
        "num_ids_4": 99
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     anti_shuffle(\"hi he what is up do\") == \"ed what up up hi what\"\nassert     anti_shuffle(\"hi hi hi hi\") == \"hi hi hi hi\"\nassert     anti_shuffle(\"hi hi hi hi\") == \"hi hi hi hi\"\nassert     anti_shuffle(\"hi hi hi hi\") == \"hi hi hi hi\"\nassert     anti_shuffle(\"hi\") == \"hi\"\n",
        "num_ids_2": 44,
        "num_ids_4": 84
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"hello\") == \"ehllo\"\nassert     anti_shuffle(\"hello world\") == \"ehllwor\"\nassert     anti_shuffle(\"hello how are you\") == \"ehllo howreo\"\nassert     anti_shuffle(\"hello world how are you\") == \"ehllwor howreo\"\n",
        "num_ids_2": 33,
        "num_ids_4": 78
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(anti_shuffle('Hello World'))\n\n'''\nSample Input 1\ninput_string = \"This is a test\"\nSample Output 1\n'th is a s a t'\nSample Input 2\ninput_string = \"aa bb cc dd\"\nSample Output 2\n'cc bb aa dd'\n''",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     anti_shuffle('motto') == 'oimz'\nassert     anti_shuffle('apple') == 'pple'\nassert     anti_shuffle('man i need a taxi up to ubud') == 'taxi ai oubd m un ubuo'\nassert     anti_shuffle('computer network i need a taxi up to ubud') == 'taxi ai oubd m un ubuo'\nassert     anti_shuffle('robot ic robot') == 'robot iro oro'\n",
        "num_ids_2": 32,
        "num_ids_4": 99
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     anti_shuffle('This is a test') == 'test ais this'\nassert     anti_shuffle('is2 Thi1s T4est3') == 'est3 is2 Thi1s'\nassert     anti_shuffle('w3rld') == 'd3rld w3rld'\nassert     anti_shuffle('1234567890') == '567890 12345'\nassert     anti_shuffle('a') == 'a'\n",
        "num_ids_2": 50,
        "num_ids_4": 95
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     anti_shuffle(\"tod\") == \" to \"\nassert     anti_shuffle(\"some words\") == \"somew rd\"\nassert     anti_shuffle(\"\") == \"\"\n",
        "num_ids_2": 33,
        "num_ids_4": 44
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ns = \"what what what what\"\nassert anti_shuffle(s) == \"what what what what\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     anti_shuffle('my name is sammy') =='samnomy'\nassert     anti_shuffle('a a a a a b b b b') == 'ababab'\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_row([[1, 2, 3],\n                [2, 1, 4],\n                [3, 1, 1]], 1) == [(1, 2), (1, 3), (2, 1), (2, 4), (3, 1)]\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef get_col(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not get_row([[1],[2],[]], 2) == [], \"Given lst, x = 2, but no result.\"\nassert not get_row([[1,2],[3,4]], 1) == [], \"Given lst, x = 1, but no result.\"\nassert get_row([[1,2,3],[4,5,6]], 1) == [(0,0),(1,0),(2,0)], \"Given lst, x = 1, but wrong result.\"\nassert get_row([[1,2,3],[4,5,6]], 0) == [(0,0),(1,0),(2,0)], \"Given lst, x = 0, but wrong result.\"\n",
        "num_ids_2": 35,
        "num_ids_4": 122
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    lst = [[0, 1, 1, 0, 1],\n        [1, 1, 1, 0, 1],\n        [0, 1, 1, 1, 0],\n        [1, 0, 0, 1, 0]]\n    x = 1\n    assert get_row(lst, x) == [\n        (0, 1), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)], \"Wrong result\"\n    print(\"Congratulations! All tests passed\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_column(lst, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer y, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (rows, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the column by columns in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_row([[1,2,3,4], \n                [2,3,4,5], \n                [2,4,5,6], \n                [2,4,6,7], \n                [2,4,6,7,8],\n                [2,4,6,7,8,9], \n                [2,4,6,7,8,9,10]], 5) == [[0, 1], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9], [8, 10]]\nassert     get_row([[1,2,3,4], \n                [2,3,4,5], \n                [2,4,5,6], \n                [2,4,6,7], \n                [2,4,6,7,8],\n                [2,4,6,7,8,9], \n                [2,4,6,7,8,9,10]], 7) == [[0, 1], [1, 3], [2, 4], [3, 5], [4, 6], [5, 7], [6, 8], [7, 9], [8, 10]]\n\ndef get_col(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (column, rows), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert get_row([[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]], 3) == [(3, 2), (3, 1), (2, 0)]\n\ndef get_column(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of rows.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (rows, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 16,
        "num_ids_4": 16
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_row([(3, 7, 9), (2, 3), (4, 3, 7)], 1) == [(1, 0), (3, 0), (2, 2), (3, 1)]\nassert     get_row([[3, 7, 9], [2, 3], [4, 3, 7]], 1) == [(1, 0), (3, 0), (2, 2), (3, 1)]\nassert     get_row([[3, 7, 9], [2, 3], [4, 3, 7]], 2) == [(2, 0), (3, 0), (3, 1), (2, 2)]\nassert     get_row([[3, 7, 9], [2, 3], [4, 3, 7]], 3) == [(3, 0), (3, 1), (2, 2), (4, 1)]\n",
        "num_ids_2": 100,
        "num_ids_4": 200
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([5, 2, 1, -1]) == [-1, 1, 2, 5], \"sort_array test case 1 failed\"\nassert     sort_array([5, 2, 1, -1]) == [-1, 1, 2, 5], \"sort_array test case 2 failed\"\nassert     sort_array([5, 2, 1, -1]) == [-1, 1, 2, 5], \"sort_array test case 3 failed\"\nassert     sort_array([5, 2, 1, -1]) == [-1, 1, 2, 5], \"sort_array test case 4 failed\"\nassert     sort_array([5, 2, 1, -1]) == [-1, 1, 2, 5], \"sort_array test case 5 failed\"\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sort_array([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 6, 7, 8, 9, 5]\nassert sort_array([2, 4, 6, 8, 10, 1, 3, 5, 7, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
        "num_ids_2": 51,
        "num_ids_4": 146
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([-1, 5, -9, 3, 2, -5, 6, -7, -8, -9, -1, -1, -1, -2, -3, -4]) == \\\n        [-1, -1, -1, -2, -3, -4, -5, -6, -7, -8, -9, 2, 3, 5, 6, 7, 9]\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([3,1,2]) == None\nassert sort_array([3,1,2,2]) == None\nassert sort_array([3,1,2,2,2]) == None\nassert sort_array([1,2,3,4]) == None\nassert sort_array([1,2,3,4,4]) == None\n",
        "num_ids_2": 31,
        "num_ids_4": 65
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([10, 5, 2, 3, 8, 1]) == [1, 2, 3, 5, 8, 10], \\\n                \"Wrong: {0}\".format(sort_array([10, 5, 2, 3, 8, 1]))\nassert     sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \\\n                \"Wrong: {0}\".format(sort_array([1, 2, 3, 4, 5, 6, 7]))\nassert     sort_array([10, 5, 2, 3, 8, 1]) == [1, 2, 3, 5, 8, 10], \\\n                \"Wrong: {0}\".format(sort_array([10, 5, 2, 3, 8, 1]))\nassert     sort_array([3, 1, 5, 4, 2]) == [1, 2, 3, 5, 4], \\\n                \"Wrong: {0}\".format(sort_array([3, 1, 5, 4, 2]))\nassert     sort_array([3, 4, 1, 5, 6]) == [1, 3, 4, 5, 6], \\\n                \"Wrong: {0}\".format(sort_array([3, 4, 1, 5, 6]))\n",
        "num_ids_2": 72,
        "num_ids_4": 136
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([0,1,2,3,4,5]) == sorted([0,1,2,3,4,5]), 'Wrong answer for sort_array([0,1,2,3,4,5])'\nassert sort_array([0,1,2,3,4,5]) == sorted([0,1,2,3,4,5]), 'Wrong answer for sort_array([0,1,2,3,4,5])'\nassert sort_array([1,2,3,4,5]) == sorted([1,2,3,4,5]), 'Wrong answer for sort_array([1,2,3,4,5])'\nassert sort_array([1,2,3,4,5]) == sorted([1,2,3,4,5]), 'Wrong answer for sort_array([1,2,3,4,5])'\nassert sort_array([1,1,1,1,1]) == sorted([1,1,1,1,1]), 'Wrong answer for sort_array([1,1,1,1,1])'\n",
        "num_ids_2": 111,
        "num_ids_4": 209
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1, 2, 3, 5]) == sorted(\n        [1, 2, 3, 5]) == [-3, -2, -1, 1, 2, 3, 5]\n\nassert     sort_array([1, 2, 3, 5]) == sorted(\n        [1, 2, 3, 5]) == [-3, -2, -1, 1, 2, 3, 5]\nassert     sort_array([1, 2, 3, 5]) == sorted(\n        [1, 2, 3, 5]) == [-3, -2, -1, 1, 2, 3, 5]\nassert     sort_array([1, 2, 3, 5]) == sorted(\n        [1, 2, 3, 5]) == [-3, -2, -1, 1, 2, 3, 5]\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array(\n    [1, 3, 5, 7, 9, 11, 13, 15]\n) == sorted(\n    [1, 3, 5, 7, 9, 11, 13, 15]\n)\nassert     sort_array(\n    [1, 3, 5, 7, 9, 11, 13, 15]\n) == sorted(\n    [15, 11, 13, 9, 7, 5, 3, 1]\n)\nassert     sort_array(\n    [1, 3, 5, 7, 9, 11, 13, 15]\n) == sorted(\n    [15, 11, 13, 9, 7, 5, 3, 1]\n)\nassert     sort_array(\n    [1, 3, 5, 7, 9, 11, 13, 15]\n) == sorted(\n    [1, 3, 5, 7, 9, 11, 13, 15]\n)\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     encrypt('Hello') == 'Ecjlh'\nassert     encrypt('abcde') == 'bcead'\nassert     encrypt('abcde') == 'bcead'\nprint('All tests passed')\n",
        "num_ids_2": 29,
        "num_ids_4": 44
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # check if encrypt(s) = encrypt(s2)\nassert encrypt(s) == encrypt(s2)\n    # check if encrypt(s) == encrypt(s3)\nassert encrypt(s) == encrypt(s3)\n    # check if encrypt(s) == encrypt(s4)\nassert encrypt(s) == encrypt(s4)\n    # check if encrypt(s) == encrypt(s5)\nassert encrypt(s) == encrypt(s5)\n    # check if encrypt(s) == encrypt(s6)\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    s = \"Hello World!\"\n    print(encrypt(s))\n\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert encrypt(encrypt) == encrypt\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. The \n    alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef main():\n    #s = \"hello world\"\n    s = \"The quick brown fox jumps over the lazy dog\"\n    print(f\"Original string: {s}\")\n    encrypt(s)\n\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert encrypt(\"hello\") == \"olleh\"\nassert encrypt(\"\") == \"\"\nassert encrypt(\"test\") == \"tst\"\nassert encrypt(\"tes\") == \"est\"\n",
        "num_ids_2": 15,
        "num_ids_4": 33
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encrypt(    \"hello\")    == \"mjn\"\nassert     encrypt(    \"howdy\")    == \"ryo\"\nassert     encrypt(    \"hello\")    == \"oyn\"\nassert     encrypt(    \"\")    == \"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(next_smallest([1,2,3,5,4])) #3\nprint(next_smallest([1,2,3,5,4,4])) #4\nprint(next_smallest([1,2,3,5,4,5,6])) #None",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('All set!'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest([1,2,3,4,5]) == 2\nassert next_smallest([2,1,3,5,4]) == 3\nassert next_smallest([]) == None\nassert next_smallest([4,4,5]) == Non",
        "num_ids_2": 39,
        "num_ids_4": 64
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"You should be able to create next_smallest() and check the correctness!\")\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(next_smallest([3, 1, 2, 5, 4]))\n    print(next_smallest([2, 2, 2, 0, 1]))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert next_smallest([3, 1, 2, 5, 4]) == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) # 5\n\nprint(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) # 9\n\nprint(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) # 10\n\nprint(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) # None",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest([1, 1, 1, 1, 1, 1, 1]) == 1, \"Next smallest is 1\"\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == 2, \"Next smallest is 2\"\nassert     next_smallest([1, 2, 3, 4, 5]) == 2, \"Next smallest is 2\"\nassert     next_smallest([1, 2, 3, 4, 5, 1, 2]) == 1, \"Next smallest is 1\"\nassert     next_smallest([]) == None, \"Next smallest is None\"\n",
        "num_ids_2": 60,
        "num_ids_4": 118
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(next_smallest([-1, -2, -3, -4, -5]))\nassert \nprint(next_smallest([-1, -2, -3, -4, -5]))\nassert \nprint(next_smallest([-1, -2, -3, -4, -5]))\nassert \nprint(next_smallest([-1, -2, -3, -4, -5]))\nassert \nprint(next_smallest([-1, -2, -3, -4, -5]))\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_bored(\"I.am.bored.of.learning\") == (True, 4), \"Test fail\"\nassert     is_bored(\"I.am.bored.of.learning.\") == (True, 5), \"Test fail\"\nassert     is_bored(\"I.am.bored.of.learning!\") == (True, 4), \"Test fail\"\nassert     is_bored(\"i.am.bored.of.learning\") == (True, 4), \"Test fail\"\nassert     is_bored(\"i.am.bored.of.learning.\") == (True, 5), \"Test fail\"\n",
        "num_ids_2": 58,
        "num_ids_4": 117
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_bored('I.') == 1\nassert     is_bored('I?.') == 2\nassert     is_bored('I!.') == 3\nassert     is_bored('I.') == 1\nassert     is_bored('I?.') == 2\n",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # the test\n    is_bored('I am a bored man') == 5\n    # the answer\n    assert is_bored('I am a bored man') == 5\n    assert is_bored('I am a very bored man') == 4\n    assert is_bored('I am a very bored man.') == 3\n    assert is_bored('I am a very bored man!') == 2\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_bored(\"I.\") == 1, \"Example 1 fail\"\nassert     is_bored(\"I!?\") == 1, \"Example 2 fail\"\nassert     is_bored(\"I!?!!\") == 1, \"Example 3 fail\"\n",
        "num_ids_2": 37,
        "num_ids_4": 58
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_bored(\"I. Like. Munchies?\") == 1\nassert     is_bored(\"I. Like. Munchies!?\") == 2\nassert     is_bored(\"I. Like. Munchies?\") == 1\nassert     is_bored(\"I. Like. Munchies!?\") == 2\nassert     is_bored(\"I. Like. Munchies!?\") == 2\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_bored(\"I.am.bored\") == 0\nassert     is_bored(\"I am bored.\") == 1\nassert     is_bored(\"I am bored!!!\") == 1\nassert     is_bored(\"I am bored.\") == 1\nassert     is_bored(\"I am bored!!\") == 1\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_bored(\"I\") == 1\nassert     is_bored(\"I.I\") == 2\nassert     is_bored(\"I.!I\") == 2\nassert     is_bored(\"I!I.!\") == 1\nassert     is_bored(\"I!I.!\") == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_bored(\"I like this.\")\n    == 2\nassert \n    is_bored(\"I like this.\")\n    == 1\nassert \n    is_bored(\"I don't like this.\")\n    == 1\nassert \n    is_bored(\"I don't like this.\")\n    == 2\nassert \n    is_bored(\"I. like this.\")\n    == 1\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     any_int(0, 0, 0) == True, \"Error. Please, try again.\"\nassert     any_int(0, 0, 1) == False, \"Error. Please, try again.\"\nassert     any_int(2, 3, 4) == True, \"Error. Please, try again.\"\nassert     any_int(2, -4, 4) == False, \"Error. Please, try again.\"\nassert     any_int(-3, -4, 4) == True, \"Error. Please, try again.\"\n",
        "num_ids_2": 48,
        "num_ids_4": 97
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     any_int(10, 0, 10) == True\nassert     any_int(10, 10, 10) == True\nassert     any_int(10, 10, 20) == False\nassert     any_int(10, 20, 10) == False\nassert     any_int(20, 10, 10) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert any_int(1, 2, 3) == False\nassert any_int(1, 1, 1) == True\nassert any_int(1, 2, 3) == False\nassert any_int(1, 1.2, 1.2) == True\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert any_int(3,5,7)\nassert not any_int(1,2,3)\nassert not any_int(0.1,1,10.1)\nassert not any_int(1,1.1,10)\n",
        "num_ids_2": 15,
        "num_ids_4": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     any_int(2, 4, 6) == True\nassert any_int(4, 6, 2) == False\nassert any_int(0, 1, 0) == False\n\n\ndef any_odd(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if any of the numbers is odd and even, respectively.\n    Returns false if not.\n    '''\n    pass\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     any_int(3, 4, 7) == True\nassert     any_int(3, 3, 3) == True\nassert     any_int(4, 7, 3) == True\nassert     any_int(3.1, 3, 3) == False\nassert     any_int(3, 3.1, 3) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     any_int(1, 1, 1) == True, \"Wrong answer\"\nassert     any_int(1, 2, 2) == True, \"Wrong answer\"\nassert     any_int(2, 3, 2) == True, \"Wrong answer\"\nassert     any_int(2, 2, 3) == True, \"Wrong answer\"\nassert     any_int(3, 2, 2) == False, \"Wrong answer\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     encode('') == ''\nassert encode('a') == 'a'\nassert encode('A') == 'A'\nassert encode('an apple') == 'An ApplPe'\nassert encode('The quick brown fox jumps over the lazy dog') == 'ThE QuIcK BrOWN FOx jUmPs Over the Lazy DGoW'\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nencode(\"the cat in the hat came\") == \"Tha ti wht CAt came\"\nassert \nencode(\"all the animals are felines\") == \"AlT all the anbols are eNvnies\"\n\n\ndef encode2(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way \n    that it switches case of all letters, and replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters and vowels. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nmessage = 'The great peoples of Seattle were loved by the great people of the world!'\nprint(encode(message))\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     encode(\"Hello\") == \"HEllO\"\nassert     encode(\"HeLLo\") == \"HEllO\"\nassert     encode(\"Hi\") == \"HI\"\nassert     encode(\"HeLLo\") == \"HEllO\"\nassert     encode(\"I\") == \"I\"\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \nif __name__ == '__main__':\n    assert skjkasdkd([2, 3, 4, 5]) == 8\n    assert skjkasdkd([5, 9, 2, 3]) == 18\n    assert skjkasdkd([]) == 0\n    assert skjkasdkd([1, 2, 3, 4, 5]) == 24\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert skjkasdkd([6,4,4,6]) == 7\nassert skjkasdkd([2,3,4,6,5,6]) == 11\nassert skjkasdkd([10,11,7,12,6,7,13,10,9,8,7]) == 28\n\n",
        "num_ids_2": 21,
        "num_ids_4": 75
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     skjkasdkd([7,2,3,4]) == 15, f\"Wrong result for input {lst}\"\n",
        "num_ids_2": 31,
        "num_ids_4": 31
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlst_1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_dict_case({'gokul': 'kajs', 'Kajs':'sdf', 'kajsd':'sdf'}) == True, 'dict empty'\nassert     check_dict_case({'gokul': 'kajs', 'Kajs':'sdf', 'kajsd':'sdf', 'kajs': 'kajs'}) == False, 'no single key'\nassert     check_dict_case({'gokul': 'kajs', 'Kajs':'sdf', 'kajsd':'sdf', 'kajs': 'kajs', 'kajs1': 'kajs1'}) == False, 'no multiple keys'\nassert     check_dict_case({'gokul': 'kajs', 'Kajs':'sdf', 'kajsd':'sdf', 'kajs': 'kajs', 'kajs1': 'kajs1', 'kajs2': 'kajs2'}) == True, 'lowercase key'\nassert     check_dict_case({'gokul': 'kajs', 'Kajs':'sdf', 'kajsd':'sdf', 'kajs': 'kajs', 'kajs1': 'kajs1', 'kajs2': 'kajs2', 'kajs3': 'kajs3'}) == False, 'uppercase key'\n",
        "num_ids_2": 101,
        "num_ids_4": 249
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_dict_case({'Hello': 'world', 'yes': 'no'}) == False, \\\n                \"Failed on case1.\"\nassert     check_dict_case({'hello': 'world', 'yes': 'no'}) == False, \\\n                \"Failed on case2.\"\nassert     check_dict_case({}) == False, \\\n                \"Failed on case3.\"\n\nprint(\"Success: check_dict_case\")\n",
        "num_ids_2": 52,
        "num_ids_4": 66
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) is False, \"Empty dictionary.\"\nassert     check_dict_case({'harry':'mohan'}) is True, \"Passing.\"\nassert     check_dict_case({'harry':'mohan', 'Mohan': 'harry'}) is False, \"Different values.\"",
        "num_ids_2": 42,
        "num_ids_4": 75
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_dict_case({\"1\": 1}) == False\nassert     check_dict_case({\"1\": 1, \"2\": 2}) == True\nassert     check_dict_case({\"1\": 1, \"2\": 2, \"3\": 3}) == False\nassert     check_dict_case({\"a\": 1}) == False\nassert     check_dict_case({\"a\": 1, \"b\": 2}) == True\n",
        "num_ids_2": 37,
        "num_ids_4": 79
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_dict_case({}) == True, 'Empty dictionary is correct'\nassert     check_dict_case({\"I\": 1, \"AM\":2}) == False, 'Non-string key is incorrect'\nassert     check_dict_case({\"a\":1, \"b\":2}) == False, 'Non-string value is incorrect'\nassert     check_dict_case({\"I\": 1, \"a\":1, \"b\":2}) == True, 'Duplicate keys are incorrect'",
        "num_ids_2": 49,
        "num_ids_4": 114
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_dict_case({'PYTHON': 'Python', 'DJANGO': 'Django', 'FLASER': 'Flask', 'WEB': 'HTML'}) == True, \\\n        \"Keys with upper case should be checked in lower case\"\nassert    check_dict_case({'python': 'Python', 'django': 'Django', 'flask': 'Flask', 'web': 'HTML'}) == True, \\\n        \"Keys with lower case should be checked in upper case\"\nassert    check_dict_case({'pYTHON': 'Python', 'django': 'Django', 'flask': 'Flask', 'web': 'HTML'}) == False, \\\n        \"Both keys are same\"\nassert    check_dict_case({}) == False, \"Empty dictionary should return False\"\n",
        "num_ids_2": 92,
        "num_ids_4": 158
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == False, \"No input dictionary\"\nassert     check_dict_case({}) == False, \"Empty dictionary\"\nassert     check_dict_case({'a': 1}) == True, \"One key value pair\"\nassert     check_dict_case({'a': 1, 'b': 2}) == False, \"Two key value pairs\"\nassert     check_dict_case({'a': 1, 'B': 2}) == False, \"Two key value pairs\"\n",
        "num_ids_2": 35,
        "num_ids_4": 86
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_dict_case({})     == False, 'Your function must return False if the dictionary is empty'\nassert     check_dict_case({'hello':'world'})     == True, 'Your function must return True if the dictionary has only keys that are strings in lower case or only keys that are strings in upper case.'\nassert     check_dict_case({'hello':'world', 'HELLO':'WORLD'})     == True, 'Your function must return True if the dictionary has only keys that are strings in lower case or only keys that are strings in upper case.'\nassert     check_dict_case({'a':'a', 'A':'A'})     == False, 'Your function must return False if the dictionary has only keys that are strings in lower case or only keys that are strings in upper case.'\n",
        "num_ids_2": 74,
        "num_ids_4": 185
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(50) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "num_ids_2": 6,
        "num_ids_4": 88
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"All tests passed\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n\n",
        "num_ids_2": 50,
        "num_ids_4": 155
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncount_up_to(9) == [2, 3, 5, 7, 11, 13, 17, 19",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test()\n    print(\"All tests passed!\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \ndef main():\n    # calls the multiply function\n    assert multiply(27, 9) == 54\n    assert multiply(9, 27) == 54\n    assert multiply(9, 9) == 81\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Your output is: \" + str(multiply(123, 234)))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (multiply(5, 89) == 95)\nassert     (multiply(5, 7) == 17)\nassert     (multiply(15, 2) == 45)\nassert     (multiply(10, 99) == 900)\nassert     (multiply(0, 7) == 0)\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(multiply(4, 37))\n    print(multiply(6, 97))\n    print(multiply(10, 11))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert multiply(58, 32) == 224, 'Wrong answer'\nassert multiply(3, 4) == 12, 'Wrong answer'\nassert multiply(87, 35) == 1203, 'Wrong answer'\n",
        "num_ids_2": 19,
        "num_ids_4": 52
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply(    666,        45) ==    16666\nassert     multiply(    10,        10) ==    100\nassert     multiply(    0,        45) ==    0\nassert     multiply(    0,        0) ==    0\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_upper('mOVE') == 1, \"Should be:'m', 'O', 'V', 'e'\"\nassert     count_upper('ifHeLl') == 3, \"Should be: 'i', 'h', 'e'\"\nassert     count_upper('W3W0W') == 4, \"Should be: 'W', '0', 'W'\"\nassert     count_upper('cOmE') == 1, \"Should be: 'c', 'O','m'\"\nassert     count_upper('iZ') == 1, \"Should be: 'i', 'Z'\"\n",
        "num_ids_2": 57,
        "num_ids_4": 113
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert count_upper('hieeelalaooo') == 4\nassert count_upper('hello!') == 1\nassert count_upper('h') == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 39
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_upper('ABCEFS') == 3\nassert     count_upper('Z') == 1\nassert     count_upper('Z') == 1\nassert     count_upper('Z') == 1\nassert     count_upper('ZZZ') == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_upper('hello') == 1\nassert count_upper('Hello') == 0\nassert count_upper('HELLO') == 1\nassert count_upper('AAa') == 1\n",
        "num_ids_2": 13,
        "num_ids_4": 35
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_upper(u'zzz') == 0, 'Fail'\nassert     count_upper(u'Aa') == 1, 'Fail'\nassert     count_upper(u'E') == 1, 'Fail'\nassert     count_upper(u'aaa') == 0, 'Fail'\nassert     count_upper(u'xyz') == 0, 'Fail'\n",
        "num_ids_2": 36,
        "num_ids_4": 70
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(count_upper(string)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_upper_vowels(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_integer(\"14.5\") == 15, \"Should be 15\"\nassert     closest_integer(\"-14.5\") == -15, \"Should be -15\"\nassert     closest_integer(\"-19.5\") == -19, \"Should be -19\"\nassert     closest_integer(\"19.5\") == 19, \"Should be 19\"\nassert     closest_integer(\"-14.49\") == -15, \"Should be -15\"\n",
        "num_ids_2": 45,
        "num_ids_4": 90
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # (1, 0, 0, 0) == closest_integer('1')\n    # (1.5, 1, 0, 0) == closest_integer('1.5')\n    # (14.5, 15, 0, 0) == closest_integer('14.5')\n    # (14.5, 14.5, 0, 0) == closest_integer('14.5')\n    # (-14.5, -15, 0, 0) == closest_integer('-14.5')\n    # (-14.5, -14.5, 0, 0) == closest_integer('-14.5')\n    # (15.5, 15.5, 0, 0) == closest_integer('15.5')\n    # (14.5, 15, 0, 0) == closest_integer('14.5')\n    # (15.5, 14, 0, 0) == closest_integer('15.5')\n    # (1.5, 1.5, 0, 0) == closest_integer('1.5')\n    # (1, -1, 0, 0) == closest_integer('1')\n    # (15.5, 15.5, -1, 0) == closest_integer('15.5')\n    # (-14.5, -15.5, -1, 0) == closest_integer('-14.5')\n    # (14.5, 14.5, -1, 0) == closest_integer('14.5')\n    # (2.0, 2.0, 0, 0) == closest_integer('2')\n    # (2.5, 2.5, 0, 0) == closest_integer('2.5')\n    # (2.5, 2.0, 0, 0) == closest_integer('2.5')\n    # (3.5, 3.5, 0, 0) == closest_integer('3.5')\n    # (2.0, 2.5, 0, 0) == closest_integer('2.5')\n    # (2.0, 2.0, 0, 0) == closest_integer('2.0')\n    # (3.0, 3.0, 0, 0) == closest_integer('3.0')\n    # (2.5, 2.0, 0, 0) == closest_integer('2.5')\n    # (2.5, 2.0, 0, 0) == closest_integer('2.0')\n    # (4.0, 4.0, 0, 0) == closest_integer('4.0')\n    # (2.5, 2.5, 0, 0) == closest_integer('2.5')\n    # (2.5, 2.0, 0, 0) == closest_integer('2.0')\n    # (2.5, 2.5, 0, 0) == closest_integer('2.5')\n    # (0, 0, 0, 0) == closest_integer('0')\n    # (-0.5, -0.5, 0, 0) == closest_integer('-0.5')\n    # (-0.5, -0.0, 0, 0) == closest_integer('-0.5')\n    # (0.5, 0.5, 0, 0) == closest_integer('0.5')\n    # (0.5, 0.0, 0, 0) == closest_integer('0.0')\n    # (-0.5, 0.5, 0, 0) == closest_integer('-0.5')\n    # (0.5, 0.5, 0, 0) == closest_integer('0.5')\n    # (0.5, 0.0, 0, 0) == closest_integer('0.0')\n    # (0.5, -0.5, 0, 0) == closest_integer('0.5')\n    # (0.5, -0.0, 0, 0) == closest_integer('0.0')\n    # (0.5, 0.5, 0, 0) == closest_integer('0.5')\n    # (0.5, 0.0, 0, 0) == closest_integer('0.0')\n    # (2, 2, 2, 2) == closest_integer('2')\n    # (2.1, 2, 2, 2) == closest_integer('2')\n    # (2.1, 2.1, 2, 2) == closest_integer('",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))\nprint(closest_integer(\"14.7\"))\nprint(closest_integer(\"-14.7\"))\nprint(closest_integer(\"14.1\"))\nprint(closest_integer(\"-14.1\"))\nprint(closest_integer(\"14\"))\nprint(closest_integer(\"-14\"))\nprint(closest_integer(\"0.1\"))\nprint(closest_integer(\"0.01\"))\nprint(closest_integer(\"-0.1\"))\nprint(closest_integer(\"-0.01\"))\nprint(closest_integer(\"0\"))\nprint(closest_integer(\"-0\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"12\") == 12\nassert     closest_integer(\"0\") == 0\nassert     closest_integer(\"-12\") == -12\n",
        "num_ids_2": 32,
        "num_ids_4": 58
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"15.6\") == 15\nassert closest_integer(\"-15.6\") == -15\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('Closest integer test passed'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_integer(\"0\") == 0\nassert closest_integer(\"5\") == 5\nassert closest_integer(\"15\") == 15\nassert closest_integer(\"-5\") == -5\nassert closest_integer(\"2.5\") == 2\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_integer(\"16\") == 16\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"6.5\") == 6\nassert     closest_integer(\"5.5\") == 5\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-14.3\") == -15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.7\") == 15\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(0) == [0]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [2,1]\nassert     make_a_pile(4) == [2,1,1]\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_a_pile(1)    == [1]\nassert     make_a_pile(2)    == [1, 1]\nassert     make_a_pile(3)    == [1, 1, 1]\nassert     make_a_pile(4)    == [1, 1, 1, 1]\nassert     make_a_pile(5)    == [1, 1, 1, 1, 1]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [2, 2]\nassert     make_a_pile(4) == [3, 3, 3]\nassert     make_a_pile(5) == [4, 4, 4, 4]\n",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_a_pile(3) == [2, 2, 1]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(7) == [4, 2, 2, 1]\nassert     make_a_pile(5) == [3, 2, 2, 1]\nassert     make_a_pile(19) == [8, 6, 4, 3, 2, 2, 1, 1]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_string(\"hello, world\") == ['hello', 'world']\nassert     words_string(\"hello, world, hello, cat, dog\") == ['hello', 'world', 'hello', 'cat', 'dog']\n",
        "num_ids_2": 51,
        "num_ids_4": 51
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     words_string(\"My name is Angela\") == [\"My\", \"name\", \"is\", \"Angela\"]\nassert     words_string(\"I am a boy\") == [\"I\", \"am\", \"a\", \"boy\"]\nassert     words_string(\"I am a girl\") == [\"I\", \"am\", \"a\", \"girl\"]\nassert     words_string(\"I am a kid\") == [\"I\", \"am\", \"a\", \"kid\"]\nassert     words_string(\"I am a baby\") == [\"I\", \"am\", \"a\", \"baby\"]\n",
        "num_ids_2": 51,
        "num_ids_4": 101
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_string('') == ''\nassert words_string('a,b,c') == ['a', 'b', 'c']\nassert words_string('hello, world') == ['hello', 'world']\nassert words_string('hello, world!') == ['hello', 'world']\nassert words_string('hello, world! hello') == ['hello', 'world', 'hello']\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_string('hello, world') == ['hello', 'world']\nassert words_string('hello') == ['hello']\nassert words_string('hello, world,') == ['hello', 'world']\nassert words_string('hello, world, a') == ['hello', 'world', 'a']\n\n",
        "num_ids_2": 30,
        "num_ids_4": 70
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_string(\"this,is,a,test\") == ['this','is','a','test']\nassert     words_string(\"\") == []\nassert     words_string(\"   \") == []\nassert     words_string(\"a,b,c\") == ['a','b','c']\nassert     words_string(\"a,,,,\") == ['a','','','','']\n",
        "num_ids_2": 35,
        "num_ids_4": 67
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    words_string(\n        \"hello, world\"\n        ) == [\"hello\", \"world\"]\n\nassert \n    words_string(\n        \"hello, world, 1 2 3\"\n        ) == [\"hello\", \"world\", \"1\", \"2\", \"3\"]\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_string(\"hello, world!\") == [\"hello\", \"world\"], 'incorrect'\nassert     words_string(\"hello   world!\") == [\"hello\", \"world\"], 'incorrect'\nassert     words_string(\"hello world\") == [\"hello\", \"world\"], 'incorrect'\nassert     words_string(\"hello   world\") == [\"hello\", \"world\"], 'incorrect'\nassert     words_string(\"hello  world\") == [\"hello\", \"world\"], 'incorrect'\n",
        "num_ids_2": 46,
        "num_ids_4": 89
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    choose_num(4, 10) == 8\n    choose_num(2, 10) == -1\n    choose_num(5, 10) == 9\n    choose_num(1, 10) == 1\n    choose_num(3, 10) == 3\n    choose_num(7, 10) == -1\n    choose_num(9, 10) == 9\n    choose_num(0, 10) == -1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     choose_num(5, 10) == 10\nassert     choose_num(10, 5) == 10\nassert     choose_num(6, 7) == -1\nassert     choose_num(2, 5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     choose_num(4, 7) == 6\nassert     choose_num(4, 5) == -1\nassert     choose_num(0, 2) == -1\nassert     choose_num(0, 1) == 1\n\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     choose_num(4, 10) == 8\nassert     choose_num(1, 100) == 1\nassert     choose_num(100, 1) == 1\nassert     choose_num(1, 1) == -1\nassert     choose_num(1, 2) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert choose_num(2, 3) == 2\nassert choose_num(4, 5) == -1\nassert choose_num(8, 9) == 3\nassert choose_num(10, 10) == 10\n",
        "num_ids_2": 15,
        "num_ids_4": 40
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     choose_num(5, 10) == 5\nassert     choose_num(5, 20) == 5\nassert     choose_num(2, 10) == -1\nassert     choose_num(3, 11) == -1\nassert     choose_num(2, 17) == -1\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_choose_num():\n    assert choose_num(2, 5) == 5\n    assert choose_num(2, 8) == -1\n    assert choose_num(2, 10) == -1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     choose_num(10, 30) == 18\nassert     choose_num(10, 50) == -1\nassert     choose_num(1, 100) == 1\nassert     choose_num(20, 50) == 20\nassert     choose_num(100, -100) == -1",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert choose_num(2, 3) == -1\nassert choose_num(3, 4) == -1\nassert choose_num(4, 5) == 5\nassert choose_num(5, 6) == 5\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(choose_num(5, 10)) # 5\nprint(choose_num(3, 5)) # 3\nprint(choose_num(10, 20)) # -1\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rounded_avg(1, 1) == 1\nassert     rounded_avg(1, 2) == 1\nassert     rounded_avg(2, 2) == 1\nassert     rounded_avg(3, 3) == 1\nassert     rounded_avg(3, 4) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrounded_avg(1, 4) == 1\nrounded_avg(4, 1) == 1\nrounded_avg(3, 8) == 2\nrounded_avg(-2, 2) == 0\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nrounded_avg(2, 2) == 2\nassert \nrounded_avg(2, 3) == 2\nassert \nrounded_avg(3, 3) == 3\nassert \nrounded_avg(3, 4) == 3\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrounded_avg(2, 4) == 2.5\nassert rounded_avg(5, 7) == 5\nassert rounded_avg(3, 3) == 3.0\nassert rounded_avg(-2, -4) == -1\nassert rounded_avg(5, -7) == -1\n",
        "num_ids_2": 16,
        "num_ids_4": 46
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rounded_avg(2,3) == 2\nassert     rounded_avg(2,5) == 2\nassert     rounded_avg(3,3) == 2\nassert     rounded_avg(3,4) == 2\nassert     rounded_avg(3,5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nrounded_avg(n, m) == round(avg)\nprint('Correct')\nprint()\n\n\n\n\"\"\"The order of operations are important. \nWhen we add a constant or variable to a mathematical expression, \nwe must add the constant or variable to the left or to the right in order to get the correct result.\n\"\"\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    rounded_avg(5, 5) == 5\n    rounded_avg(5, 6) == 6\n    rounded_avg(5, 7) == 6\n    rounded_avg(5, 8) == 7\n    rounded_avg(5, 9) == 8\n    rounded_avg(5, 10) == 9\n    rounded_avg(5, 11) == 10\n    rounded_avg(5, 12) == 11\n    rounded_avg(5, 13) == 11\n    rounded_avg(5, 14) == -1\n    rounded_avg(5, 15) == -1\n    rounded_avg(5, 16) == -1\n    rounded_avg(5, 17) == -1\n    rounded_avg(5, 18) == -1\n    rounded_avg(5, 19) == -1\n    rounded_avg(5, 20) == -1\n    rounded_avg(5, 21) == -1\n    rounded_avg(5, 22) == -1\n    rounded_avg(5, 23) == -1\n    rounded_avg(5, 24) == -1\n    rounded_avg(5, 25) == -1\n    rounded_avg(5, 26) == -1\n    rounded_avg(5, 27) == -1\n    rounded_avg(5, 28) == -1\n    rounded_avg(5, 29) == -1\n    rounded_avg(5, 30) == -1\n    rounded_avg(5, 31) == -1\n    rounded_avg(5, 32) == -1\n    rounded_avg(5, 33) == -1\n    rounded_avg(5, 34) == -1\n    rounded_avg(5, 35) == -1\n    rounded_avg(5, 36) == -1\n    rounded_avg(5, 37) == -1\n    rounded_avg(5, 38) == -1\n    rounded_avg(5, 39) == -1\n    rounded_avg(5, 40) == -1\n    rounded_avg(5, 41) == -1\n    rounded_avg(5, 42) == -1\n    rounded_avg(5, 43) == -1\n    rounded_avg(5, 44) == -1\n    rounded_avg(5, 45) == -1\n    rounded_avg(5, 46) == -1\n    rounded_avg(5, 47) == -1\n    rounded_avg(5, 48) == -1\n    rounded_avg(5, 49) == -1\n    rounded_avg(5, 50) == -1\n    rounded_avg(5, 51) == -1\n    rounded_avg(5, 52) == -1\n    rounded_avg(5, 53) == -1\n    rounded_avg(5, 54) == -1\n    rounded_avg(5, 55) == -1\n    rounded_avg(5, 56) == -1\n    rounded_avg(5, 57) == -1\n    rounded_avg(5, 58) == -1\n    rounded_avg(5, 59) == -1\n    rounded_avg(5, 60) == -1\n    rounded_avg(5, 61) == -1\n    rounded_avg(5, 62) == -1\n    rounded_avg(5, 63) == -1\n    rounded_avg(5, 64) == -1\n    rounded_avg(5, 65) == -1\n    rounded_avg(5, 66) == -1\n    rounded_avg(5, 67) == -1\n    rounded_avg(5, 68) == -1\n    rounded_avg(5, 69) == -1\n    rounded_avg(5, 70) == -1\n    rounded_avg(5, 71) == -1\n    rounded_avg(5, 72) == -1\n    rounded_avg(5, 73) == -1\n    rounded_avg(5, 74) == -1\n    rounded_avg(5, 75) == -1\n    rounded_avg(5, 76) == -1\n    rounded_avg(5, 77) == -1\n    rounded_avg(5, 78",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrounded_avg(0, 0) == 0\nassert \nrounded_avg(0, 1) == 0\nassert \nrounded_avg(2, 5) == 2\nassert \nrounded_avg(2, 3) == 2\nassert \nrounded_avg(4, 7) == 3\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    rounded_avg(3, 5) == 4\nassert \n    rounded_avg(5, 7) == 4\n    \ndef reverse(n):\n    \"\"\"You are given a positive integer n, and you need to find the \n    integer that is the maximum number of digit swaps you can perform on the \n    integer.\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_digits([1,2,3,4,5,6]) ==    [1,3,5,6]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10]) ==    [1,3,5,7,9,10]\nassert     unique_digits([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) ==    [1,3,5,7,9,11,13,15,17]\nassert     unique_digits([100,100,101,102]) ==    [100,101,102]\nassert     unique_digits([100,100,101,102,103]) ==    [100,101,103]\n",
        "num_ids_2": 74,
        "num_ids_4": 166
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(unique_digits([2,2,2]))\n\n    #These \"asserts\" are used for self-checking and not for an auto-testing\n    assert unique_digits([5, 5, 4, 5, 3, 3, 4, 4]) == [5, 4, 3]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,7,8,9]\nassert     unique_digits([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\nassert     unique_digits([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\nassert     unique_digits([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\nassert     unique_digits([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2",
        "num_ids_2": 146,
        "num_ids_4": 450
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_digits([20, 9, 2, 1, 3, 4, 6, 8]) == [9, 2, 4, 6, 8]\nassert     unique_digits([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique_digits([1, 2, 4, 4]) == [1, 2, 4]\nassert     unique_digits([1, 2, 3, 5, 5, 5, 7]) == [1, 2, 3, 5, 7]\nassert     unique_digits([20, 9, 2, 1, 3, 5, 6, 8]) == [1, 2, 3, 5, 6, 8]\n",
        "num_ids_2": 62,
        "num_ids_4": 120
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_digits([1, 2, 2, 4, 5, 6, 7, 7]) == [1, 2, 4, 7]\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_digits([100]) == None, \"Wrong\"\nassert     unique_digits([21, 21]) == None, \"Wrong\"\nassert     unique_digits([100, 100, 21, 21, 21]) == None, \"Wrong\"\nassert     unique_digits([21, 21, 21, 21]) == None, \"Wrong\"\nassert     unique_digits([100, 100, 21]) == None, \"Wrong\"\n",
        "num_ids_2": 36,
        "num_ids_4": 84
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nx = [3, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, 7, 2, 4, 2, 1, 4, 5, 8, 9, 4, 6, 9, 8, 9, 4, 8, 2, 2, 1, 5, 9, 5, 6, 7, 8, ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Seven', 'Two', 'Six', 'Three', 'Five', 'Four', 'Eight', 'One']\nassert     by_length([9, 8, 7, 6, 5, 4, 3, 2, 1]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == ['One', 'Seven', 'Two', 'Six', 'Three', 'Five', 'Four', 'Eight', 'One', 'Zero']\n",
        "num_ids_2": 106,
        "num_ids_4": 164
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['Ten', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([]) == ['Zero']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['Ten', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254])\n",
        "num_ids_2": 111,
        "num_ids_4": 181
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     by_length([9,8,8,9,6,7,1,2,8]) == [\"One\",\"Two\",\"Three\",\"Four\",\"Five\",\"Six\",\"Seven\",\"Eight\",\"Nine\"]\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == [\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]\nassert     by_length([1,2,3,4,5,6,7,8,9,10]) == [\"Ten\",\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]\nassert     by_length([1,2,3,4,5,6,7,8,9,10,11]) == [\"Eleven\",\"Ten\",\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]\nassert     by_length([1,2,3,4,5,6,7,8,9,10,11,12]) == [\"Twelve\",\"Eleven\",\"Ten\",\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]\nassert     by_length([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [\"Thirteen\",\"Twelve\",\"Eleven\",\"Ten\",\"Nine\",\"Eight\",\"Seven\",\"Six\",\"Five\",\"Four\",\"Three\",\"Two\",\"One\"]\n",
        "num_ids_2": 94,
        "num_ids_4": 207
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1,2]\nassert     f(4) == [1,2,3,4]\nassert     f(5) == [1,2,3,4,5]\nassert     f(6) == [1,2,3,4,5,6]\n",
        "num_ids_2": 24,
        "num_ids_4": 60
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     f(2) == [1,1]\nassert     f(3) == [1,1,2]\nassert     f(4) == [1,1,2,4]\nassert     f(5) == [1,1,2,3,5]\nassert     f(6) == [1,1,2,4,6,12]\n",
        "num_ids_2": 28,
        "num_ids_4": 64
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 1]\nassert     f(3) == [1, 1, 1]\n",
        "num_ids_2": 24,
        "num_ids_4": 39
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert f(2) == [1, 2]\nassert f(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(3) == [1, 2, 6]\nassert f(5) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 15,
        "num_ids_4": 57
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1, 2]\nassert     f(3) == [1, 2, 6]\nassert     f(4) == [1, 2, 6, 24]\nassert     f(5) == [1, 2, 6, 24, 120]\n",
        "num_ids_2": 24,
        "num_ids_4": 56
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_odd_palindrome(10) == (8, 2)\nassert     even_odd_palindrome(8) == (5, 2)\nassert     even_odd_palindrome(5) == (4, 1)\nassert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(1) == (0, 0)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(even_odd_palindrome(1))\nprint(even_odd_palindrome(2))\nprint(even_odd_palindrome(3))\nprint(even_odd_palindrome(4))\nprint(even_odd_palindrome(5))\nprint(even_odd_palindrome(6))\nprint(even_odd_palindrome(7))\nprint(even_odd_palindrome(8))\nprint(even_odd_palindrome(9))\nprint(even_odd_palindrome(10))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_odd_palindrome(11) == (1, 2)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (1, 0)\nassert     even_odd_palindrome(4) == (0, 2)\nassert     even_odd_palindrome(5) == (0, 1)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (1, 0)\nassert     even_odd_palindrome(3) == (1, 1)\nassert     even_odd_palindrome(4) == (0, 2)\nassert     even_odd_palindrome(5) == (0, 1)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(4) == (2, 1)\nassert     even_odd_palindrome(8) == (3, 3)\nassert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(10) == (5, 5)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(1) == (0, 1)\nassert     even_odd_palindrome(2) == (0, 1)\nassert even_odd_palindrome(5) == (2, 3)\nassert even_odd_palindrome(8) == (4, 5)\n",
        "num_ids_2": 38,
        "num_ids_4": 74
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(5) == (1, 1)\nassert     even_odd_palindrome(10) == (2, 3)\nassert     even_odd_palindrome(99) == (2, 2)\nassert     even_odd_palindrome(100) == (2, 3)\nassert     even_odd_palindrome(200) == (2, 3)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 10\n    count = even_odd_palindrome(n)\n    print(count",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_nums([-1,2,3]) == 2\nassert count_nums([-1,2,-3]) == 1\nassert count_nums([-1,2,-3,-4]) == 4\nassert count_nums([-1,-2,-3,-4]) == 4\nassert count_nums([-1,-2,-3,-4,-5]) == 5\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_nums([-10, -1, 10, 0, 0, 2, 3, 5, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_nums([-1,-2,-3]) == 1\ncount_nums([-2,1,1]) == 2\ncount_nums([-1,-2,1]) == 3\ncount_nums([2,-3,-4]) == 1\ncount_nums([2,3,4]) == 3\ncount_nums([2,3,-4]) == 2\ncount_nums([-2,-3,-4]) == 0\ncount_nums([-2,-3,-4,-1,1,2,3,4]) == 4\ncount_nums([1,-2,-3,-4,1]) == 3\ncount_nums([1,-2,-3,-4,1,2,-3,1,2,3,4]) == 4\ncount_nums([-1,-2,-3,-4,1]) == 4\ncount_nums([1,1,-2,-3,-4,-1,1,1,1,1,1,1,1,1,1,1,1,-2,-3,-4,1]) == 1\ncount_nums([-1,1,1,-2,-3,-4,1]) == 3\ncount_nums([-1,-2,-3,-4,1,1,1,1,1,1,1,1,1,1,-2,-3,-4,1]) == 8\ncount_nums([]) == 0\ncount_nums([-1,-2,-3,-4,-5]) == 4\ncount_nums([-5,-4,-3,-2,-1]) == 4\ncount_nums([1,2,3,4,5,6]) == 4\ncount_nums([1,-2,3,4,5,6]) == 4\ncount_nums([-1,2,3,-4,5,6]) == 4\ncount_nums([-1,-2,3,4,5,-6]) == 3\ncount_nums([-1,2,3,4,5,-6]) == 3\ncount_nums([-1,-2,3,4,5,6]) == 3\ncount_nums([]) == 0\ncount_nums([1,-2,-3,-4,1]) == 2\ncount_nums([1,-2,-3,-4,1,-2,3,4,5,6]) == 4\ncount_nums([-2,1,1,1,2,3,4,5,6]) == 4\ncount_nums([-1,-2,3,4,5,-6]) == 3\ncount_nums([1,1,1,1,2,3,4,5,6]) == 4\ncount_nums([1,1,1,1,1,-2,3,4,5,6]) == 3\ncount_nums([-2,-3,-4,-5,1]) == 0\ncount_nums([1,-2,-3,4,5,6]) == 4\ncount_nums([1,-2,-3,4,5,-6]) == 3\ncount_nums([-1,-2,-3,4,5,6]) == 2\ncount_nums([]) == 0\ncount_nums([1,1,1,1,1,-2,-3,-4,5,6]) == 4\ncount_nums([-2,-3,-4,-5,1]) == 0\ncount_nums([-1,1,1,1,2,3,4,5,6]) == 4\ncount_nums([-1,-2,3,4,5,-6]) == 3\ncount_nums([1,1,1,1,2,3,4,5,6]) == 4\ncount_nums([1,1,1,1,1,-2,3,4,5,6]) == 3\ncount_nums([-2,-3,-4,-5,1]) == 0\ncount_nums([1,1,1,1,1,1,2,3,4,5,6]) == 7\ncount_nums([-2,-3,-4,-5,1,1,1,2,3,4,5,6]) == 5\ncount_nums([1,1,1,1,1,1,1,2,3,4,5,-6]) == 3\ncount_nums([1,-2,-3,-4,1,1,1,2,3,4,5,6]) == ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    #...\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_nums([1, -3, -1, 1, -1]) == 4\nassert     count_nums([-10, -2, -3]) == 0\nassert     count_nums([-10, -2, -3, 4]) == 3\nassert count_nums([-10, -2, -3, 4]) == 2\n",
        "num_ids_2": 42,
        "num_ids_4": 83
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef test_count_nums():\n    assert count_nums([-10,-2,3,5,9,4,0,-12,3,-10,1,9,9,-9,-12,-2,4,-4,4,4,-1,-2,2,8,0,0,5,0,0,0,-2,0,0,0,1,1,1,0,0,0,1,0,0,-10,0,0,0,0,-5,0,0,0,0,1,5,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_nums([1, 2, 3, 4, -1, -2, -3, -4]) == 2\ncount_nums([-1, -2, -3, -4]) == 1\ncount_nums([2, -3, -1, -2, -3, -4]) == 1\ncount_nums([-1, -2, -3, -4, -10]) == 1\ncount_nums([1, 2, 3, 4, -1, -2, -3, -4, -10]) == 3",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_one_ball([1,2,3,4]) == True\nassert     move_one_ball([1,3,2]) == False\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10,11]) == True\nassert     move_one_ball([1,2,3,4,5,6,7,8,9,10,11,12]) == False\nassert     move_one_ball([]) == True\n",
        "num_ids_2": 36,
        "num_ids_4": 104
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (move_one_ball([3, 5, 6, 7]) == True)\nassert     (move_one_ball([3, 5, 6, 7, 4, 8]) == True)\nassert     (move_one_ball([3, 5, 6, 7, 4, 8, 9, 10]) == False)\nassert     (move_one_ball([3, 5, 6, 7, 4, 8, 9, 10, 11, 12, 13, 14, 15]) == True)\nassert     (move_one_ball([3, 5, 6, 7, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == False)\n",
        "num_ids_2": 46,
        "num_ids_4": 114
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(move_one_ball([]))    # True\nprint(move_one_ball([1]))    # True\nprint(move_one_ball([2, 2]))    # False\nprint(move_one_ball([1, 2]))    # False\nprint(move_one_ball([2, 1]))    # True\nprint(move_one_ball([2, 2, 2]))    # False\nprint(move_one_ball([2, 1, 1]))    # True\nprint(move_one_ball([2, 1, 2]))    # False\nprint(move_one_ball([1, 2, 2]))    # True\nprint(move_one_ball([1, 2, 1]))    # True\nprint(move_one_ball([1, 2, 3]))    # False\nprint(move_one_ball([1, 3, 2]))    # True\nprint(move_one_ball([1, 1, 2]))    # True\nprint(move_one_ball([1, 1, 1]))    # True\nprint(move_one_ball([1, 1, 1, 1]))    # False\nprint(move_one_ball([1, 1, 1, 1, 1]))    # False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [4, 8, 2, 5, 1]\n    print(move_one_ball(arr))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"PASS\" if (move_one_ball([0, 1, 2, 3, 4, 5])) else \"FAIL\")\nprint(\"PASS\" if (move_one_ball([4, 3, 2, 1, 0])) else \"FAIL\")\nprint(\"PASS\" if (move_one_ball([2, 1, 0])) else \"FAIL\")\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_one_ball([4, 5, 6, 7, 1, 2, 3]) == True\nassert     move_one_ball([]) == True\nassert     move_one_ball([1]) == True\nassert     move_one_ball([1, 1]) == False\nassert     move_one_ball([5, 4, 3, 2, 1]) == False\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([], []) == \"YES\"\nassert     exchange([], [7]) == \"NO\"\nassert     exchange([2,4], [5,6]) == \"YES\"\nassert     exchange([2,4], [5,6,8]) == \"NO\"\n\n",
        "num_ids_2": 27,
        "num_ids_4": 67
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     exchange([1,2,3,4,5,6], [1,2,3,4,5,6]) == \"YES\", \"Correct?\"\nassert     exchange([1,2,3,4,5,6], [1,2,3,4,6,5]) == \"NO\", \"Correct?\"\nassert     exchange([1,2,3,4,5,6], [1,2,3,4,5,6,6]) == \"YES\", \"Correct?\"\nassert     exchange([1,2,3,4,5,6], [1,2,3,4,6,5,6]) == \"NO\", \"Correct?\"\nassert     exchange([1,2,3,4,5,6,7], [1,2,3,4,6,5,7]) == \"NO\", \"Correct?\"\n",
        "num_ids_2": 76,
        "num_ids_4": 156
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     exchange(\n        [3,6,5,4,6,6,8],\n        [3,2,5,3,2,4]\n    ) == \"NO\"\nassert     exchange(\n        [3,6,5,4,6,6,8],\n        [3,2,5,3,2,4,6]\n    ) == \"YES\"\nassert     exchange(\n        [3,6,5,4,6,6,8,4,2],\n        [3,2,5,3,2,4,6]\n    ) == \"NO\"",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         exchange(list(range(0, 10)), list(range(0, 5))) == \"YES\"\nassert         exchange(list(range(0, 5)), list(range(0, 10))) == \"YES\"\nassert         exchange(list(range(0, 5)), list(range(5, 10))) == \"YES\"\nassert         exchange(list(range(10, 15)), list(range(0, 10))) == \"YES\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     exchange([],    []) == \"NO\"\nassert     exchange([],    [2]) == \"NO\"\nassert     exchange([],    [1,2,3]) == \"NO\"\nassert     exchange([],    [1,2,4]) == \"NO\"\nassert     exchange([],    [0,1,2,3]) == \"NO\"\n",
        "num_ids_2": 29,
        "num_ids_4": 67
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     exchange(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']) == \"YES\"\nassert     exchange(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == \"NO\"\nassert     exchange(['a', 'b', 'c'], ['a', 'b', 'd']) == \"NO\"\nassert     exchange(['a', 'b', 'c'], ['a', 'b', 'd', 'e']) == \"NO\"\nassert     exchange(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd']) == \"YES\"\n",
        "num_ids_2": 69,
        "num_ids_4": 132
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     exchange([1, 3, 4, 5], [2, 4, 6, 8]) == \"YES\"\nassert     exchange([2, 4, 6, 8], [1, 3, 4, 5]) == \"YES\"\nassert     exchange([1, 3, 5, 7, 9], [2, 4, 6, 8, 10]) == \"NO\"\nassert     exchange([1, 3, 5, 7, 9], [1, 2, 3, 4, 5]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [1, 3, 5, 7, 9]) == \"NO\"\n",
        "num_ids_2": 54,
        "num_ids_4": 116
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     exchange([1, 2, 3, 4],    [2, 3, 4, 5])    ==    \"NO\"\nassert     exchange([1, 2, 3, 4],    [1, 2, 3, 5])    ==    \"YES\"\nassert     exchange([1, 2, 3, 4],    [1, 2, 5, 4])    ==    \"YES\"\nassert     exchange([1, 2, 3, 4],    [1, 2, 4, 5])    ==    \"YES\"\nassert     exchange([1, 2, 3, 4],    [1, 3, 2, 4])    ==    \"YES\"\n",
        "num_ids_2": 60,
        "num_ids_4": 120
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     exchange([1,2,3,4,5,6], [2,4,6,8]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [2,4,5,6]) == \"NO\"\nassert     exchange([1,2,3,4,5,6], [2,4,5,6,8,10]) == \"NO\"\n",
        "num_ids_2": 62,
        "num_ids_4": 97
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram('abccd') == {'a':3, 'b':2, 'c':1, 'd':1}\nassert     histogram('aabbccddee') == {'a':5, 'b':4, 'c':3, 'd':3}\nassert     histogram('aabccddeef') == {'a':5, 'b':4, 'c':3, 'd':3, 'e':1}\nassert     histogram('aabbccdd') == {'a':4, 'b':3, 'c':2}\nassert     histogram('aaabbbbcdddd') == {'a':5, 'b':3, 'c':2}\n",
        "num_ids_2": 66,
        "num_ids_4": 134
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     histogram(\"abracadabra\") == {\"a\": 5, \"b\": 4, \"r\": 2, \"c\": 1, \"d\": 2}\nassert     histogram(\"g\") == {\"g\": 1}\nassert     histogram(\"\") == {}\nassert     histogram(\"ab\") == {\"a\": 2, \"b\": 1}\nassert     histogram(\"zzzzzzzzzz\") == {\"z\": 7, \"z\": 1}\n",
        "num_ids_2": 52,
        "num_ids_4": 80
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (histogram('aabcbaba') == {'a': 3, 'b': 2, 'c': 1}), \"Hint: d is only in test\"\nassert     (histogram('aaa') == {'a': 5}), \"Hint: d is the only letter\"\nassert     (histogram('abc') == {'a': 2, 'b': 1, 'c': 1}), \"Hint: d, e, and f are all the letters\"\nassert     (histogram('ab') == {'a': 2, 'b': 1}), \"Hint: d and e are the only letters\"\n\n",
        "num_ids_2": 67,
        "num_ids_4": 143
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     histogram(\"adav\") == {'d': 1, 'a': 2, 'b': 1}\nassert     histogram(\"leetcode\") == {'l': 3, 'e': 1, 'o': 1, 'd': 1}\nassert     histogram(\"g\") == {'g': 1}\nassert     histogram(\"\") == {}\nassert     histogram(\" \") == {}\n",
        "num_ids_2": 58,
        "num_ids_4": 82
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     'a' in histogram('a b c a')\nassert     'a' in histogram('a a a b b c')\nassert     'b' in histogram('a a a a a b b b')\nassert     'a' not in histogram('a b c')\nassert     'a' not in histogram('a b c a')\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     histogram(\"abc\") == {'a': 1, 'b': 1, 'c': 1}\nassert     histogram(\"aabbcc\") == {'a': 2, 'b': 2, 'c': 2}\nassert     histogram(\"abcab\") == {'a': 2, 'b': 2, 'c': 1}\nassert     histogram(\"abc\") == {'a': 3, 'b': 1, 'c': 1}\nassert     histogram(\"aaaa\") == {'a': 4, 'a': 1}\n",
        "num_ids_2": 52,
        "num_ids_4": 103
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     histogram(\"I love Python\") == {\"i\": 2, \"l\": 1, \"o\": 1, \"P\": 1, \"y\": 1, \"t\": 1, \"h\": 1, \" \": 2}\nassert     histogram(\"\") == {\" \": 1}\nassert     histogram(\"a\") == {\"a\": 1}\nassert     histogram(\"aabb\") == {\"a\": 2, \"b\": 1}\nassert     histogram(\"aab\") == {\"a\": 2, \"b\": 1}\n",
        "num_ids_2": 64,
        "num_ids_4": 98
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     histogram(\"hello\") == {\"e\":1, \"l\":2, \"h\":1}\nassert     histogram(\"hello world\") == {\"e\":2, \"l\":2, \"h\":2, \"w\":1}\nassert     histogram(\"hello world hello world\") == {\"e\":3, \"l\":3, \"h\":3, \"w\":2}\nassert     histogram(\"hello world hello world hello world\") == {\"e\":4, \"l\":3, \"h\":4, \"w\":3}\nassert     histogram(\"\") == {}\n",
        "num_ids_2": 54,
        "num_ids_4": 120
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_delete('abcde','abc') == ('abcde',True)\nassert     reverse_delete('abcde','bc') == ('abcde',True)\nassert     reverse_delete('abcde','b') == ('abcde',False)\nassert     reverse_delete('','') == ('',True)\nassert     reverse_delete('','a') == ('a',False)\n",
        "num_ids_2": 38,
        "num_ids_4": 72
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_delete(s = \"aabc\", c = \"cb\") == (False, 'cba')\nassert     reverse_delete(s = \"abcc\", c = \"cb\") == (False, 'cba')\nassert     reverse_delete(s = \"abcd\", c = \"cb\") == (True, 'cba')\nassert     reverse_delete(s = \"abcd\", c = \"\") == (True, 'abcd')\nassert     reverse_delete(s = \"\", c = \"cb\") == (False, '')\n",
        "num_ids_2": 52,
        "num_ids_4": 103
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n\n\n\"\"\"Explanation\n\nFirst we need to delete all characters in s that are equal to characters in c.\nThen we check if the output string is palindrome.\n\n\"\"\"\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    pass",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nreverse_delete(\"abc\", \"bc\") == (\"abc\", True)\nassert \nreverse_delete(\"abcd\", \"bc\") == (\"abcd\", True)\nassert \nreverse_delete(\"a\", \"bc\") == (\"a\", False)\nassert \nreverse_delete(\"a\", \"bc\") == (\"a\", True)\nassert \nreverse_delete(\"a\", \"bc\") == (\"a\", True)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_delete(\"abcdcd\",\"cd\") == (\"abcdcd\",\"True\")\nassert     reverse_delete(\"abcdcd\",\"b\") == (\"abcdcd\",\"False\")\nassert     reverse_delete(\"abcdcd\",\"d\") == (\"abcdcd\",\"False\")\nassert     reverse_delete(\"abc\",\"c\") == (\"abc\",\"True\")\nassert     reverse_delete(\"ab\",\"a\") == (\"ab\",\"False\")\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert reverse_delete(\"a\",\"ba\") == ('a','True')\nassert reverse_delete(\"abc\",\"bca\") == ('abc','True')\nassert reverse_delete(\"abc\",\"cba\") == ('abc','True')\n",
        "num_ids_2": 19,
        "num_ids_4": 53
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_delete('yannakayak','kayak') == ('kayak',True)\nassert     reverse_delete('yannakayak','kayak') == ('kayak',False)\nassert     reverse_delete('yannakayak','kayak') == ('kayak',True)\nassert     reverse_delete('yannakayak','kayak') == ('kayak',False)\nassert     reverse_delete('yannakayak','kayak') == ('kayak',False)\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_count([\"asd\", \"fgh\", \"jkl\"]) == [\"1\", \"1\", \"0\"]\nassert odd_count([\"qwe\", \"rty\", \"uiop\"]) == [\"2\", \"1\", \"2\"]\nassert odd_count([\"w\", \"h\", \"h\", \"f\"]) == [\"0\", \"0\", \"1\", \"1\"]\nassert odd_count([\"asd\", \"fgh\", \"jkl\", \"hfghj\"]) == [\"3\", \"1\", \"3\", \"0\"]\nassert odd_count([1, \"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"4\", \"1\", \"0\", \"1\", \"2\", \"1\"]\n",
        "num_ids_2": 59,
        "num_ids_4": 129
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_count([0,1,2,3,4,5]) == ['the number of odd elements in the 0 of the input', 'the number of odd elements in the 1 of the input', 'the number of odd elements in the 2 of the input', 'the number of odd elements in the 3 of the input', 'the number of odd elements in the 4 of the input', 'the number of odd elements in the 5 of the input']\n\nassert odd_count([0, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0]) == ['the number of odd elements in the 0 of the input', 'the number of odd elements in the 1 of the input', 'the number of odd elements in the 2 of the input', 'the number of odd elements in the 3 of the input', 'the number of odd elements in the 4 of the input', 'the number of odd elements in the 5 of the input']\n\nassert odd_count([0, 1, 2, 3, 4, 5]) == ['the number of odd elements in the 0 of the input', 'the number of odd elements in the 1 of the input', 'the number of odd elements in the 2 of the input', 'the number of odd elements in the 3 of the input', 'the number of odd elements in the 4 of the input', 'the number of odd elements in the 5 of the input']\n",
        "num_ids_2": 205,
        "num_ids_4": 302
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_count([\"4\", \"8\", \"2\", \"2\"]) == [\"1\", \"0\", \"1\", \"0\"]\nassert     odd_count([\"9\", \"8\", \"7\", \"4\", \"4\", \"9\"]) == [\"0\", \"0\", \"1\", \"1\", \"1\", \"0\"]\n\ndef max_two_digits(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a\n    list. Each element i of the output should be the maximum of the two numbers\n    in the string i of the input.\n    \"\"\"\n    pass\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_count([1, \"2\", \"3\", \"4\", \"5\"]) == [\"2\", \"3\", \"1\", \"4\", \"0\"]\nassert odd_count([4, 6, 1, 8, 4, 2, 3]) == [\"5\", \"0\", \"4\", \"0\", \"1\", \"1\", \"0\"]\nassert odd_count
        "num_ids_2": 80,
        "num_ids_4": 1025
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_count([]) == []\nassert odd_count([\"a1\", \"a2\", \"a3\"]) == [\"1\", \"3\"]\nassert odd_count([\"a1\", \"a2\", \"a3\", \"a5\"]) == [\"3\", \"5\"]\nassert odd_count([\"a1\", \"b1\", \"c1\", \"a3\"]) == [\"3\", \"3\", \"3\"]",
        "num_ids_2": 29,
        "num_ids_4": 92
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_count([\"foo\", \"bar\", \"baz\"]) == [3]\nassert odd_count([\"1\", \"3\", \"8\", \"11\"]) == [1, 2, 3, 4]\nassert odd_count([\"1\", \"3\", \"8\", \"11\", \"16\"]) == [2, 3, 4, 4, 5]\nassert odd_count([\"1\", \"3\", \"8\", \"11\", \"16\", \"17\"]) == [3, 4, 4, 4, 4, 5]\nassert odd_count([\"1\", \"3\", \"8\", \"11\", \"16\", \"17\", \"18\"]) == [3, 4, 4, 4, 4, 4, 5]\n",
        "num_ids_2": 32,
        "num_ids_4": 105
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('Check:', odd_count([10, 5, 5, 11, 2, 11, 7, 2, 3, 10]))\nprint('Check:', odd_count(['a', 'c', 'g', 'l','m', 'n', 'p', 'r', 'u', 'y'])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_count([]) == []\nassert odd_count(['0', '1', '2']) == ['the number of odd elements in the string 0 of the input']\nassert odd_count(['0', '1', '2', '3']) == ['the number of odd elements in the string 1 of the input',\n                                            'the number of odd elements in the string 2 of the input']\nassert odd_count(['1', '1', '1']) == ['the number of odd elements in the string 1 of the input',\n                                        'the number of odd elements in the string 1 of the input']\nassert odd_count(['1', '1', '1', '2']) == ['the number of odd elements in the string 1 of the input',\n                                            'the number of odd elements in the string 2 of the input']\n",
        "num_ids_2": 34,
        "num_ids_4": 99
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minSubArraySum([1,2]) == 1\nassert     minSubArraySum([1,2,2]) == 1\nassert     minSubArraySum([1,2,3,4,5,7,8]) == 1\nassert     minSubArraySum([3,1,2,4,5,7,8]) == 3\nassert     minSubArraySum([3,3]) == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 78
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minSubArraySum([]) == 0\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1, 2]) == 1\nassert     minSubArraySum([1, 2, 3, 4]) == 1\nassert     minSubArraySum([1, 2, 3, 4, 5]) == 3\n",
        "num_ids_2": 23,
        "num_ids_4": 55
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_fill(grid = [[0,0,0,0,0,1,1,1,1,1],\n                [0,0,1,1,1,1,1,1,1,1],\n                [1,0,1,0,0,1,0,0,0,1],\n                [1,0,1,0,1,0,1,0,1,0],\n                [1,0,1,1,0,0,1,1,0,0],\n                [1,1,0,1,1,1,1,0,0,0],\n                [1,1,0,1,0,1,1,1,0,0],\n                [1,1,0,0,0,0,0,1,1,1],\n                [1,1,1,1,1,0,0,1,0,1],\n                [1,1,1,1,0,0,0,1,1,1]]) == 3, 'TEST ERROR!'\nassert     max_fill(grid = [[0,1,1,1,1,1,1],\n                [1,0,0,0,0,0,0],\n                [1,0,1,1,1,1,1],\n                [1,0,1,1,1,1,1],\n                [1,0,1,1,1,1,1],\n                [1,1,1,1,1,1,1],\n                [1,1,1,1,1,1,1]],\n                capacity = 3) == 3, 'TEST ERROR!'\nassert     max_fill(grid = [[0,0,1,1,1,1],\n                [1,0,0,0,0,0],\n                [1,0,1,1,1,1],\n                [1,0,1,1,1,1],\n                [1,0,1,1,1,1],\n                [1,1,1,1,1,1],\n                [1,1,1,1,1,1]],\n                capacity = 1) == 3, 'TEST ERROR!'\nassert     max_fill(grid = [[1],\n                [1],\n                [1],\n                [1],\n                [1],\n                [1],\n                [1]],\n                capacity = 1) == 0, 'TEST ERROR!'\nprint('TEST PASSED')\n\ndef min_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n",
        "num_ids_2": 54,
        "num_ids_4": 88
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert max_fill([[1, 0, 0],\n    [1, 1, 0],\n    [0, 1, 0]], capacity=1) == [[1, 1, 0],\n    [1, 2, 0],\n    [0, 1, 0]]\nassert max_fill([[0, 0, 0],\n    [1, 0, 0],\n    [1, 1, 1]], capacity=0) == [[0, 0, 0],\n    [0, 1, 0],\n    [0, 1, 1]]\nassert max_fill([[1, 0, 0],\n    [1, 1, 0],\n    [0, 1, 0]], capacity=3) == [[1, 0, 0],\n    [1, 1, 0],\n    [0, 1, 0]]\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_fill(  [\n    [1, 1, 0, 0],\n    [0, 1, 1, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]\n], 3) == 0, \"Wrong max_fill for the test case\"\n\nassert     max_fill(  [\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0]\n], 1) == 0, \"Wrong max_fill for the test case\"\n\nassert     max_fill(  [\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0],\n    [1, 0, 0, 0]\n], 2) == 1, \"Wrong max_fill for the test case\"\n",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    grid = [[1,0,1,0,0,0,0],\n            [1,0,0,0,0,0,0],\n            [1,1,1,1,1,1,1],\n            [0,0,0,0,0,0,0]]\n    capacity = 3\n    print(max_fill(grid, capacity))\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([3,2,1]) == [1,2,3]\nassert     sort_array([3,2,1,5]) == [1,2,3,5]\nassert     sort_array([3,2,1,1]) == [1,2,3,1]\nassert     sort_array([3,2,1,5,1]) == [1,2,1,3,5]\nassert     sort_array([0,1,0,0]) == [0,0,1,0]\n",
        "num_ids_2": 46,
        "num_ids_4": 100
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([1,1,1,1,1]) == [1,1,1,1,1]\nassert     sort_array([1,1,0,1,1]) == [1,1,0,1,1]\nassert     sort_array([1,1,0,1,1,0,1,1]) == [1,1,0,1,1,1,0,1]\nassert     sort_array([1,1,0,0,1,1,0,1,1]) == [1,1,0,0,1,1,1,1,1]\nassert     sort_array([1,1,0,1,1,0,1,1,1]) == [1,1,1,1,1,1,1,1,1]\n",
        "num_ids_2": 58,
        "num_ids_4": 144
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([10,2,15,2,5,6,5,5,4]) ==     [2,2,5,5,5,6,10,15,15]\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(sort_array([1,2,3,4])) # => [1,2,4,3]\nprint(sort_array([0,1,1,0,0])) # => [0,0,0,1,1]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([1, 0, 0, 1, 0]) == [0, 0, 1, 1, 1]\nassert     sort_array([0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0]) == [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1]) == [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0]) == [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0]\nassert     sort_array([0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1]) == [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 82,
        "num_ids_4": 196
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([1,1,1,1,2]) == [1,1,1,1,2]\nassert     sort_array([1,1,0,1,0,0,0,1,0,0]) == [0,0,0,0,1,1,1,1,1,1]\nassert     sort_array([1,0,1,0,0,0,1,0,0,0,0,1]) == [0,0,0,0,0,0,0,1,1,1,1,1]\nassert     sort_array([1,1,1,1,0,0,0,1,0,0,0,1,0,0]) == [0,0,0,0,0,0,0,1,1,1,1,1,1,1]\nassert     sort_array([1,0,1,0,1,1]) == [1,1,1,1,0,0]\n",
        "num_ids_2": 78,
        "num_ids_4": 200
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([5,1,6,0,9,2,8,7,3,4]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_array([5,1,9,6,0,2,8,7,3,4]) == [0,1,2,3,4,5,6,7,8,9]\nassert     sort_array([4,3,5,7,8,2,1,0,9,6]) == [0,1,2,3,4,5,6,7,8,9]\n",
        "num_ids_2": 98,
        "num_ids_4": 147
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([3, 1, 3, 1, 2]) ==[1, 1, 2, 3, 3]\nassert     sort_array([3, 1, 3, 1, 2, 3, 1, 1, 2, 1]) ==[1, 1, 2, 1, 1, 2, 3, 3, 3, 3]\nassert     sort_array([1]) ==[1]\nassert     sort_array([3, 1, 3, 1, 2, 3, 1, 1, 2, 1]) ==[1, 1, 2, 1, 1, 2, 3, 3, 3, 3]\nassert     sort_array([3, 1, 3, 1, 2, 3, 1, 1, 2, 1]) ==[1, 1, 2, 1, 1, 2, 3, 3, 3, 3]\n",
        "num_ids_2": 78,
        "num_ids_4": 140
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef main():\n    # test case\n    assert select_words(\"Hello my name is Joe\", 1) == [\"Hello\", \"my\", \"Joe\"]\n    assert select_words(\"Hello my name is Joe\", 2) == [\"Hello\", \"my\"]\n    assert select_words(\"Hello my name is Joe\", 3) == []\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    select_words( \"a b c a b c\", 2) == [\"a\", \"b\", \"c\"], \"You failed in selecting words!\"\nassert \n    select_words( \"\", 2) == [], \"You failed in selecting words!\"\nassert \n    select_words(\"a b c a b c\", 0) == [], \"You failed in selecting words!\"\n\ndef check_palindrome(s):\n    \"\"\"Given a string s, you have been tasked to implement a function that \n    returns True if and only if the string is a palindrome.\n    Note: you may assume the input string contains only lowercase letters.\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     select_words(\"ironman\", 2) == ['re', 'do', 'ai','man', 'on','man', 'ai','man']\nassert     select_words(\"ironman\", 1) == ['re', 'do', 'ai','man', 'on','man']\nassert     select_words(\"ironman\", 0) == []\nassert     select_words(\"ironman\", -1) == []\n\n\ndef binary_search(sequence, item):\n    \"\"\"Given a sorted sequence of numbers and an item, this function should return the index \n    of the item in the sequence. If the item is not in the sequence, the function should return \n    None.\n    Note: the item should be in the sorted sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 63,
        "num_ids_4": 92
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     select_words('  ', 1) == []\nassert     select_words(' ', 1) == [' ']\nassert     select_words('', 1) == []\nassert     select_words(' ', 2) == ['  ']\nassert     select_words(' abcd', 2) == ['abcd']\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('FROM') == ''\nassert     get_closest_vowel('FROM') == ''\nassert     get_closest_vowel('FROM') == ''\nassert     get_closest_vowel('FROM') == ''\nassert     get_closest_vowel('FROM') == ''\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_closest_vowel(\"aibohphobia\") == \"a\"\nassert     get_closest_vowel(\"Psychology\") == \"o\"\nassert     get_closest_vowel(\"aibohphobia\") == \"\"\nassert     get_closest_vowel(\"Psychology\") == \"\"\n",
        "num_ids_2": 43,
        "num_ids_4": 82
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_closest_vowel('this') == \"x\"\nassert     get_closest_vowel('me') == \"m\"\nassert     get_closest_vowel('hello') == \"\"\nassert     get_closest_vowel('aishnava') == \"a\"\nassert     get_closest_vowel('zpipoca') == \"z\"\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_closest_vowel('abracadabra') == 'd'\nassert     get_closest_vowel('abracadabra') == 'e'\nassert     get_closest_vowel('abracadabra') == ''\nassert     get_closest_vowel('rabbab') == 'a'\nassert     get_closest_vowel('abracadabra') == 'd'\n",
        "num_ids_2": 46,
        "num_ids_4": 88
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_closest_vowel('H') == ''\nassert get_closest_vowel('C') == 'e'\nassert get_closest_vowel('c') == 'e'\nassert get_closest_vowel('C'*100) == 'e'\n",
        "num_ids_2": 19,
        "num_ids_4": 55
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     match_parens(['(())', '(()))']) == 'Yes'\nassert     match_parens(['((())', '))()()']) == 'No'\n\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(match_parens([\"(()()\", \"()()\"])) == \"Yes\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     match_parens(('(())',)) == 'Yes'\nassert     match_parens(('()',)) == 'Yes'\nassert     match_parens(('(',)) == 'No'\nassert     match_parens(('()',)) == 'No'\nassert     match_parens(('((())',)) == 'Yes'\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     match_parens(['()', '()']) == 'Yes'\nassert     match_parens(['(())', '(()))']) == 'Yes'\nassert     match_parens(['(', ')']) == 'No'\nassert     match_parens(['(())', '()(())']) == 'Yes'\nassert     match_parens(['(()', '()))']) == 'Yes'\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     match_parens([\n    '(())',\n    '()()',\n]) == 'Yes', \\\n    'Should return \"Yes\"'\n\nassert     match_parens([\n    '((())',\n    '(())',\n]) == 'No', \\\n    'Should return \"No\"'\n\nassert     match_parens([\n    '(()())',\n    '((()))',\n]) == 'No', \\\n    'Should return \"No\"'\n",
        "num_ids_2": 16,
        "num_ids_4": 24
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     match_parens(['(())', '(()))']) == 'Yes', 'Testing 1'\nassert     match_parens(['()', '(())']) == 'No', 'Testing 2'\nassert     match_parens(['(()', '()()', '(())']) == 'Yes', 'Testing 3'\nassert     match_parens(['()()']) == 'No', 'Testing 4'\nassert     match_parens(['()()(())()']) == 'Yes', 'Testing 5'\n",
        "num_ids_2": 48,
        "num_ids_4": 97
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum([1,2,3,4,5,6,7,8,9,10], 5) == [10,9,8,7,6,5]\nassert maximum([1,2,3,4,5,6,7,8,9,10], 8) == [10,9,8,7,6,5,4,3,2,1]\nassert maximum([1,2,3,4,5,6,7,8,9,10], 10) == [10,9,8,7,6,5,4,3,2,1]\nassert maximum([1,2,3,4,5,6,7,8,9,10], 5) == [10,9,8,7,6,5]\n\n\nif __name__ == '__main__':\n    # import sys\n    # sys.stdin = open('input.txt', 'rt')\n    # \"\"\"\n    # maximum in a rotated sorted array \n    # \"\"\"\n    # print(\" \".join(map(str, maximum())))\n    # print(maximum([1,2,3,4,5,6,7,8,9,10], 5))\n    # print(maximum([1,2,3,4,5,6,7,8,9,10], 8))\n    # print(maximum([1,2,3,4,5,6,7,8,9,10], 10))\n    # print(maximum([1,2,3,4,5,6,7,8,9,10], 5))\n    pass",
        "num_ids_2": 89,
        "num_ids_4": 177
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nclass TestCode(unittest.TestCase):\n\n    def test_max_list(self):\n        self.assertEqual(maximum([3, 1, 5, 4, 1], 3), [1, 1, 5])\n        self.assertEqual(maximum([1, 2, 3, 4, 5], 4), [4, 5])\n        self.",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [9, 8, 7, 6, 5]\nassert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [9, 8, 7, 6, 5]\nassert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [9, 8, 7, 6, 5]\nassert maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == [9, 8, 7, 6, 5]\n",
        "num_ids_2": 73,
        "num_ids_4": 145
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum([10,9,8], 1) == [10], 'Wrong output.'\nassert     maximum([10,9,8], 2) == [10,9], 'Wrong output.'\nassert     maximum([10,9,8], 3) == [10,9,8], 'Wrong output.'\nassert     maximum([10,9,8], 4) == [10,9,8], 'Wrong output.'\nassert     maximum([-10,-9,-8], 1) == [-10,-9,-8], 'Wrong output.'\n",
        "num_ids_2": 46,
        "num_ids_4": 98
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert False == solution([])\nassert False == solution([1, 2, 3, 4])\nassert 1 == solution([1, 3, 4, 2])\nassert 3 == solution([3, 1, 2, 4])\n",
        "num_ids_2": 10,
        "num_ids_4": 38
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solution([1,3,2,4,1]) == 0, \"Error in solution\"\nassert     solution([0,1,2,3,4]) == 5, \"Error in solution\"\nassert     solution([1,3,9,8,4,5,6,7,2,0]) == 0, \"Error in solution\"\n\nprint(\"Solution_1: OK\")\n",
        "num_ids_2": 48,
        "num_ids_4": 82
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6]) == 3\nassert     solution([10, 11, 12, 13, 14, 15]) == 16\nassert     solution([1, 2, 3, 4, 5]) == 9\nassert     solution([]) == 0",
        "num_ids_2": 40,
        "num_ids_4": 67
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solution([1,4,2,5,3,6,7]) == 0\nassert     solution([1,2,3,4,5,6,7]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9,10]) == 0\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 0\n",
        "num_ids_2": 44,
        "num_ids_4": 98
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(solution([0, 1, 3, 5, 7]))\n\nassert \nprint(solution([0, 1, 2, 3]))",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         solution([2,1,2,2,1]) == 0, 'Should be 0'\nassert         solution([2,2,2,1]) == 5, 'Should be 5'\nassert         solution([1,1,1]) == 3, 'Should be 3'\nassert         solution([1]) == 0, 'Should be 0'\nassert         solution([]) == 0, 'Should be 0'\n",
        "num_ids_2": 46,
        "num_ids_4": 82
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solution([2, 1, 1, 2, 4]) == 8, \"Test #1 Failed\"\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8]) == 0, \"Test #2 Failed\"\nassert     solution([1, 3, 5, 7]) == 8, \"Test #3 Failed",
        "num_ids_2": 56,
        "num_ids_4": 78
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solution([1, 2, 3, 4]) == 5\nassert     solution([0, 1, 2, 3]) == 0",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\narr = [23, 3, 13, 4, 13, 4, 12, 5, 15, 6, 16, 2, 2, 7, 1, 3]\nk = 3\n\nprint(add_elements(arr, k))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_elements(list(range(1, 10)), 4) == 24\nassert     add_elements(list(range(100, 0, -1)), 4) == 101\nassert add_elements([], 1) == 0\nassert add_elements([], 2) == 0\nassert add_elements([1], 1) == 1\n",
        "num_ids_2": 43,
        "num_ids_4": 67
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_elements([10, 5, 2, 7], 2) == 17\nassert     add_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 27\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert add_elements(\n    [10, 1, 20, 2, 9, 3, 4, 5, 100, 1, 2, 4, 5], 3) == 5\nassert add_elements(\n    [10, 1, 20, 2, 9, 3, 4, 5, 100, 1, 2, 4, 5], 7) == 9\nassert add_elements(\n    [10, 1, 20, 2, 9, 3, 4, 5, 100, 1, 2, 4, 5], 10) == 1\nassert add_elements(\n    [10, 1, 20, 2, 9, 3, 4, 5, 100, 1, 2, 4, 5], 1) == 8\n",
        "num_ids_2": 10,
        "num_ids_4": 24
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_elements([], 1) == 0, \"Wrong answer\"\nassert     add_elements([1], 1) == 1, \"Wrong answer\"\nassert     add_elements([1, 2, 3, 4, 5], 1) == 1, \"Wrong answer\"\nassert     add_elements([1, 2, 3, 4, 5], 2) == 7, \"Wrong answer\"\nassert     add_elements([1, 2, 3, 4, 5], 3) == 9, \"Wrong answer\"\n",
        "num_ids_2": 39,
        "num_ids_4": 95
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_elements([1,2,3,4,5], 2) == 9, \"Expected: 9\"\nassert     add_elements([1,1,1,1], 2) == 4, \"Expected: 4\"\nassert     add_elements([2,9,9,9,9,9,9,9,9,9,9,9], 10) == 1, \"Expected: 1\"\nassert     add_elements([1,1,2,2,2,2,2,2,2,2,2,2,2], 10) == 5, \"Expected: 5\"\nassert     add_elements([1,1,2,2,2,2,2,2,2,2,2,2,2], 0) == 0, \"Expected: 0",
        "num_ids_2": 56,
        "num_ids_4": 144
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(add_elements([2,3,4,1,2], 3)) == ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_elements([1, 9, 9], 2) == 3\nassert     add_elements([1, 9, 9], 3) == 12\nassert     add_elements([1, 9, 9], 4) == 13\nassert     add_elements([1, 9, 9], 5) == 16\nassert     add_elements([1, 9, 9], 6) == 17\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,2,1]\nassert     get_odd_collatz(4) == [1,2,1,3]\nassert     get_odd_collatz(5) == [1,2,1,3,5]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(5) ==     [1, 3, 5, 6]\nassert     get_odd_collatz(9) ==     [1, 2, 3, 4, 5, 6, 8, 9]\nassert     get_odd_collatz(18) ==     [1, 2, 3, 4, 5, 6, 9, 10, 12, 15, 18]",
        "num_ids_2": 54,
        "num_ids_4": 91
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2]\nassert     get_odd_collatz(3) == [3, 1]\nassert     get_odd_collatz(4) == [2, 2, 1]\nassert     get_odd_collatz(5) == [5, 2, 2, 1]\n",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(6) == [6, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(5) == [5, 4, 2, 1]\n",
        "num_ids_2": 48,
        "num_ids_4": 70
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(3) == [1,3]\nassert     get_odd_collatz(4) == [1,3,5]\nassert     get_odd_collatz(7) == [1,2,3,5,7]\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2,1]\nassert     get_odd_collatz(4) == [2,2,1,1]\nassert     get_odd_collatz(8) == [2,2,2,1,1,2,2,2]\nassert     get_odd_collatz(11) == [11,10,5,16,8,4,2,1]\n",
        "num_ids_2": 34,
        "num_ids_4": 86
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(10) == [5,10]\nassert     get_odd_collatz(32) == [32,16,8,4,2,1]\nassert     get_odd_collatz(69) == [69,38,19,9,5,2,1]\nassert     get_odd_collatz(7) == [7]\n",
        "num_ids_2": 34,
        "num_ids_4": 88
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nvalid_date('01-12-2013')\nassert \nvalid_date('11-30-2005')\nassert \nvalid_date('12-30-2010')\nassert \nvalid_date('30-01-2017')\nassert \nvalid_date('30-02-2017')\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     valid_date('1-2-2020') == False, '1-2-2020 is not a valid date'\nassert     valid_date('1-2-2019') == True, '1-2-2019 is a valid date'\nassert     valid_date('1-2-2020') == True, '1-2-2020 is a valid date'\nassert     valid_date('1-2-2020') == False, '1-2-2020 is not a valid date'\nassert     valid_date('01-02-2020') == True, '01-02-2020 is a valid date'\n",
        "num_ids_2": 55,
        "num_ids_4": 110
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert valid_date(\"\") is False\nassert valid_date(\"x-3-x\") is False\nassert valid_date(\"3x-3-3x\") is False\nassert valid_date(\"3-3-3x\") is False\n",
        "num_ids_2": 12,
        "num_ids_4": 42
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     valid_date(\"29-10-2020\") == True, \"Test case 1.\"\nassert     valid_date(\"31-10-2020\") == False, \"Test case 2.\"\nassert     valid_date(\"1-10-2020\") == False, \"Test case 3.\"\nassert     valid_date(\"29-1-2020\") == False, \"Test case 4.\"\nassert     valid_date(\"29-0-2020\") == False, \"Test case 5.\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert valid_date(\"5-12-2020\") == True\nassert valid_date(\"1-1-2020\") == False\nassert valid_date(\"12-1-2020\") == True\nassert valid_date(\"1-1-2001\") == False\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     valid_date('') == False\nassert     valid_date('') == False\nassert     valid_date(' ') == False\nassert     valid_date('1/1/2016') == True\nassert     valid_date('5/2/2016') == True\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     valid_date('') == False\nassert     valid_date('01-02-2020') == True\nassert     valid_date('32-01-2020') == False\nassert     valid_date('3-31-2020') == True\nassert     valid_date('32-05-2020') == True\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     valid_date('') == False, \"You should return False when the date is empty.\"\nassert     valid_date('05-21-2020') == True, \"You should return True when the date is valid.\"\nassert     valid_date('05-29-2020') == True, \"You should return True when the date is valid.\"\nassert     valid_date('12-01-2020') == False, \"You should return False when the month is invalid.\"\nassert     valid_date('01-31-2020') == False, \"You should return False when the day is invalid.\"\n",
        "num_ids_2": 50,
        "num_ids_4": 104
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     valid_date(    '02-08-2020') == True, \\\n                \"Test case 1: pass\"\nassert     valid_date(    '20-08-2020') == True, \\\n                \"Test case 2: pass\"\nassert     valid_date(    '2020-08-20') == False, \\\n                \"Test case 3: fail\"\nassert     valid_date(    '02-08-2030') == False, \\\n                \"Test case 4: fail\"\nassert     valid_date(    '20-08-2020') == True, \\\n                \"Test case 5: pass\"\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert split_words('word') == [['word']]\nassert split_words('word, word') == [['word', 'word']]\nassert split_words('word, word, word') == [['word', 'word', 'word']]\nassert split_words('word, word, word, word') == [['word', 'word', 'word', 'word']]\n",
        "num_ids_2": 17,
        "num_ids_4": 60
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('abcd') == ['ab', 'cd']\nassert     split_words('abc') == ['ab', 'c']\nassert     split_words('abc') == ['ab', 'c']\nassert     split_words('abc') == ['ab', 'c']\nassert     split_words('abc') == ['ab', 'c']\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_words('Hello') == ['Hello'], 'First'\nassert     split_words('hello, world') == ['hello', 'world'], 'Second'\nassert     split_words('Hello, world!') == ['Hello', 'world'], 'Third'\nassert     split_words('Hello, world! This is a test. 123') == ['Hello', 'world!', 'This', 'is', 'a', 'test', '123'], 'Fourth'\n",
        "num_ids_2": 39,
        "num_ids_4": 107
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    words = txt.split()\n    return words\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_words(txt):\n    '''\n    Given a string of words, count the number of words, split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n\n\nif __name__ == '__main__':\n    print(count_words('sdsds'))\n    print(count_words('Hello, World!'))\n    print(count_words('Hello, World! 1, I, am, happy!'))\n    print(count_words('Hello, World!'))\n    print(count_words('Hello, World!\\n\\n\\n\\n'))\n    print(count_words('Hello, World!\\n\\n\\n')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert split_words(\"What is the\") == False\nassert split_words(\"What is\") == False\nassert split_words(\"is\") == False\nassert split_words(\"What is this\") == True\n",
        "num_ids_2": 15,
        "num_ids_4": 36
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_words('Hello, World') == ['Hello', 'World']\nassert     split_words('Hello, World, How are you?') == ['Hello', 'World', 'How', 'are', 'you', '?']\nassert     split_words('Hello, World, How are you, 123') == ['Hello', 'World', 'How', 'are', 'you', '123']\nassert     split_words('Hello, World, How are you, 123, and') == ['Hello', 'World', 'How', 'are', 'you', '123', 'and']\nassert     split_words('Hello, World, How are you, 123, and, World!') == ['Hello', 'World', 'How', 'are', 'you', '123', 'and', 'World', '!']\n",
        "num_ids_2": 53,
        "num_ids_4": 130
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words('a,b,c,d') == ['a', 'b', 'c', 'd']\nassert     split_words('a,,b,c') == ['a', ',', 'b', ',', 'c']\nassert     split_words('a,b,c,d,') == ['a', 'b', 'c', 'd', '']\nassert     split_words('') == []\nassert     split_words('a') == ['a']\n",
        "num_ids_2": 55,
        "num_ids_4": 97
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_words('hello, world, world') == ['hello', 'world', 'world']\nassert     split_words('hello, world, world, hello') == ['hello', 'world', 'world', 'hello']\nassert     split_words('hello, world, world, hello, world, world, hello') == ['hello', 'world', 'world', 'hello',\n        'world', 'world', 'hello']\nassert     split_words('hello, world, world, hello, world, world, hello') == ['hello', 'world', 'world', 'hello',\n        'world', 'world', 'hello']\nassert     split_words('hello, world, world, hello, world, world, hello, world') == ['hello', 'world', 'world',\n        'hello', 'world', 'world', 'hello', 'world']\n",
        "num_ids_2": 51,
        "num_ids_4": 119
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_sorted([1, 2, 2, 3, 4]) is False\n    is_sorted([1, 2, 2, 3, 4, 1]) is False\n    is_sorted([1, 2, 2, 1]) is False\n    is_sorted([1, 2, 2, 1, 1]) is False\n    is_sorted([1]) is True\n    is_sorted([]) is True\n    is_sorted([1, 1]) is True\n\nassert is_sorted([1, 1, 1, 1])\nassert is_sorted([1, 2, 2, 3])\nassert is_sorted([1, 1, 2])\n",
        "num_ids_2": 18,
        "num_ids_4": 46
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sorted([1,2,3]) == True\nassert     is_sorted([1,2,2]) == False\nassert     is_sorted([2,1,2]) == True\nassert     is_sorted([1,1,2]) == False\nassert     is_sorted([1,2,3,2]) == False\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nRead in a list of integers from standard input (separated by a space)\nYour program should determine whether or not the numbers in the list are \nin order and if so, print True. If they are not in order, print False. \nNote that your program should perform this task without using any extra\nmemory. \n'''\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sorted([1, 2, 2, 3]) == True\nassert     is_sorted([1, 2, 2, 1]) == False\nassert     is_sorted([3, 1, 2, 1]) == True\nassert     is_sorted([3, 1, 1, 2]) == False\nassert     is_sorted([1, 1, 1, 1]) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sorted([5, 4, 3, 2, 1, 1]) == True\nassert     is_sorted([5, 4, 3, 2, 1, 0, 1]) == False\nassert     is_sorted([5, 4, 3, 2, 1, 1, 3]) == False\nassert     is_sorted([5, 5, 3, 2, 1, 1, 3]) == True\nassert     is_sorted([5, 4, 3, 2, 1, 1, 3, 4, 2]) == True\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_sorted([]) == True, \"No numbers\"\nassert     is_sorted([1]) == True, \"One number\"\nassert     is_sorted([1, 1, 1]) == True, \"All same number\"\nassert     is_sorted([1, 2]) == False, \"One number, not all next to each other\"\nassert     is_sorted([1, 2, 1]) == False, \"One number, not all next to each other\"\n",
        "num_ids_2": 33,
        "num_ids_4": 81
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n'''\nTime complexity: O(N)\nSpace complexity: O(1)\n'''\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection((1, 2), (2, 3)) == 'NO'\nassert     intersection((1, 2), (2, 5)) == 'YES'\nassert     intersection((1, 5), (2, 3)) == 'NO'\nassert     intersection((1, 5), (2, 5)) == 'YES'\nassert     intersection((1, 2), (2, 3)) == 'YES'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection((1,3),(2,4)) == \"NO\"\nassert     intersection((1,3),(1,3)) == \"YES\"\nassert     intersection((1,3),(1,4)) == \"YES\"\nassert     intersection((1,3),(2,4)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection((1,3),(2,4)) == \"NO\"\nassert     intersection((1,3),(2,3)) == \"YES\"\nassert     intersection((2,3),(2,3)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Pass\" if (is_prime(intersection((1, 3), (2, 4))) == \"YES\") else \"Fail\")\nprint(\"Pass\" if (is_prime(intersection((1, 2), (1, 1))) == \"NO\") else \"Fail\")\nprint(\"Pass\" if (is_prime(intersection((1, 2), (1, 2))) == \"NO\") else \"Fail\")\nprint(\"Pass\" if (is_prime(intersection((0, 10), (2, 3))) == \"NO\") else \"Fail\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (intersection((1, 3), (2, 4)) == \"NO\") ==     False\nassert     (intersection((1, 3), (3, 4)) == \"NO\") ==     False\nassert     (intersection((2, 4), (1, 3)) == \"NO\") ==     False\nassert     (intersection((1, 3), (2, 4)) == \"NO\") ==     False\nassert     (intersection((1, 4), (2, 3)) == \"NO\") ==     False\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 5)) == \"NO\"\nassert     intersection((1, 4), (2, 5)) == \"YES\"\nassert     intersection((1, 4), (2, 5)) == \"YES\"\nassert     intersection((1, 5), (2, 5)) == \"NO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprod_signs([1,2,3]) == 4\nassert prod_signs([-1,0,-1]) == 0\nassert prod_signs([-1,0,1]) == -3\n",
        "num_ids_2": 19,
        "num_ids_4": 36
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prod_signs([1, -2, -1, 0, 0]) == 0, prod_signs([1, -2, -1, 0, 0])\nassert     prod_signs([1, 2, -3, -1, 4]) == 2, prod_signs([1, 2, -3, -1, 4])\nassert     prod_signs([-1, -2, 3, -4, 5]) == -2, prod_signs([-1, -2, 3, -4, 5])\nassert     prod_signs([1, 2, 3, 4, 5]) == 6, prod_signs([1, 2, 3, 4, 5])\nassert     prod_signs([]) == None, prod_signs([])\n",
        "num_ids_2": 82,
        "num_ids_4": 163
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prod_signs([-1, -1, 0, 1]) == None\nassert     prod_signs([-1, -1, 1]) == -3\nassert     prod_signs([-1, 1, 0, -1, -1]) == -3\nassert     prod_signs([1, -1, 1]) == 2\nassert     prod_signs([-1, 1, 0, -1, -1, -1]) == -5\n",
        "num_ids_2": 41,
        "num_ids_4": 84
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prod_signs([-1, -2, 3]) == 1\nassert     prod_signs([1, 1]) == 1\nassert     prod_signs([-1, 2, 3]) == -4\nassert     prod_signs([-1, 1, 0]) == 1\nassert     prod_signs([-1, 1, 1]) == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 71
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prod_signs([1, 2, 3, 4, -5]) == -3\nassert     prod_signs([1, 2, 3, -4, 5]) == 3\nassert     prod_signs([-1, -2, -3, -4, -5]) == -2\nassert     prod_signs([1, 1, -1, -1, 1]) == 2\nassert     prod_signs([-1, 1, 1, -1, -1, -1, -1]) == 6\n",
        "num_ids_2": 45,
        "num_ids_4": 95
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prod_signs([0, 1, 1, 1, 1]) == 0, \\\n        'wrong output'\nassert prod_signs([-1, -1, 1, 1, -1]) == -6, \\\n        'wrong output'\nassert prod_signs([1, -1, 1, 1, -1]) == 3, \\\n        'wrong output'\nassert prod_signs([-1, 1, 1, 1, 1]) == 6, \\\n        'wrong output'\nassert prod_signs([0, -1, 1, -1, 1]) == -6, \\\n        'wrong output'\n",
        "num_ids_2": 48,
        "num_ids_4": 93
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\narr = [1, 2, 3]\nassert prod_signs(arr) == 3\narr = [1, -2, -3]\nassert prod_signs(arr) == -6\narr = []\nassert prod_signs(arr) is None\n",
        "num_ids_2": 14,
        "num_ids_4": 37
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nminPath([\n    [0, 1, 1],\n    [1, 0, 0],\n    [1, 1, 0],\n    [1, 1, 0]\n], 1) == [1, 1, 0, 1, 1, 1]\nassert minPath([\n    [1],\n    [2],\n    [3]\n], 2) == [1, 2, 3]\n",
        "num_ids_2": 8,
        "num_ids_4": 8
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    grid = [[5,4,3,2,7],[6,2,3,1,1],[1,1,1,1,1]]\n    k = 4\n    print(\"The minimum path with length = {} is:\".format(k))\n    print(minPath(grid, k))\n\n    grid = [[1,2,3],[4,5,6],[7,8,9]]\n    k = 3\n    print(\"The minimum path with length = {} is:\".format(k))\n    print(minPath(grid, k))\n\n    grid = [[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]\n    k = 2\n    print(\"The minimum path with length = {} is:\".format(k))\n    print(minPath(grid, k))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('minPath:')\nprint(minPath(grid = [[9,12,36],[18,3,35],[8,15,16]], k = 4))\nprint(minPath(grid = [[9,12,36],[18,3,35],[8,15,16],[16,5,25],[10,12,24],[18,9,15],[12,11,18],[16,8,25],[9,10,10],[19,19,19]], k = 6))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minPath(grid = [[1, 2, 3],\n                        [4, 5, 6],\n                        [7, 8, 9]], k = 3) == [1, 2, 3, 8, 9]\nassert     minPath(grid = [[1, 2, 3],\n                        [4, 5, 6],\n                        [7, 8, 9]], k = 4) == [1, 2, 3, 8, 9]\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef minPath_no_special_points(grid, k):\n    \"\"\"\n    You're given a grid of size N x N consisting of positive and negative integers. \n    The integers in the grid denote the amount of water that flows from cell (i,j) to \n    cell (i,j). The integers in the grid may be zero.\n\n    Your task is to find the minimum path in the grid such that the total of the absolute \n    values of the cells in the path are the same or less than K.\n\n    Let's denote the minimum value of the cells in the path, m, as the minimum value of \n    the path. A path is defined as a set of cells in the grid which have m as their \n    maximum value. You can move from a cell to any of its neighbors. You can move only \n    down, right, and left. You can't move up. The path can be either horizontal or \n    vertical.\n\n    Constraints\n    * 1 <= N <= 100\n    * -10^3 <= grid[i][j] <= 10^3\n    * 1 <= k <= 10^6\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    pass\n\nclass Solution(object):\n    def minPath(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        \n        if grid == None or len(grid) == 0:\n            return -1\n        \n        if len(grid) == 1:\n            return grid[0][0]\n        \n        # the size of the final matrix\n        r = len(grid)\n        c = len(grid[0])\n        \n        # base cases\n        if r == 1 and c == 1:\n            return grid[0][0]\n        \n        # the DP table\n        dp = [[-1] * c for _ in range(r)]\n        \n        # the first element on the dp table is always 0\n        dp[0][0] = 0\n        \n        for i in range(r):\n            for j in range(c):\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        \n        # a dynamic programming way to solve minPath\n        # instead of traversing the dp table, we can just access the minimum\n        # elements of the grid, which is stored in the first row of dp\n        min_elements = grid[0]\n        \n        for i in range(1, r):\n            min_elements.append(min(min_elements))\n        \n        min_elements.append(-1)\n        \n        return min_elements[k]\n    \n    \n    def minPath(self, grid, k):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        \n        if grid == None or len(grid) == 0:\n            return -1\n        \n        if len(grid) == 1:\n            return grid[0][0]\n        \n        # the size of the final matrix\n        r = len(grid)\n        c = len(grid[0])\n        \n        # the DP table\n        dp = [[-1] * c for _ in range(r)]\n        \n        # the first element on the dp table is always 0\n        dp[0][0] = 0\n        \n        for i in range(r):\n            for j in range(c):\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        \n        # a dynamic programming way to solve minPath\n        # instead of traversing the dp table, we can just access the minimum\n        # elements of the grid, which is stored in the first row of dp\n        min_elements = grid[0]\n        \n        for i in range(1, r):\n            min_elements.append(min(min_elements))\n        \n        min_elements.append(-1)\n        \n        return min_elements[k]\n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minPath([[1, 0, 2, 0, 2],\n               [0, 1, 0, 0, 0],\n               [2, 0, 2, 0, 2],\n               [0, 0, 0, 2, 1],\n               [2, 0, 2, 0, 2]], k=3) == [0, 1, 2]\nassert     minPath([[1, 2],\n               [2, 1]], k=1) == [1, 2]\n\ndef minPath2(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    pass\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_tri():\n    assert tri(1) == [3]\n    assert tri(2) == [1, 2]\n    assert tri(5) == [1, 2, 3, 4, 5]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \nif __name__ == '__main__':\n    n = int(input())\n    result = tri(n)\n    print(result",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \"\"\"\n    These are all the tests from the first section. \n    \"\"\"\n    tests = [\n        (4, [1, 2, 3, 4]), \n        (5, [3, 4, 5, 6, 7]), \n        (5, [1, 3, 5, 8, 13]) \n        ]\n\n    for test in tests:\n        print('Testing with n: {n}, result: {expected_result}'.format(n=test[0], \n            expected_result=test[1]))\n        assert(tri(test[0]) == test[1]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digits(111) ==     2\nassert digits(5) ==     0\nassert digits(2) ==     2\n",
        "num_ids_2": 20,
        "num_ids_4": 29
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digits(1) == 1\nassert digits(11) == 11\nassert digits(16) == 8\n\nprint(\"You did it! Try harder!\")",
        "num_ids_2": 18,
        "num_ids_4": 26
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digits(1) == 0, '1 is wrong'\nassert     digits(2) == 0, '2 is wrong'\nassert     digits(3) == 0, '3 is wrong'\nassert     digits(4) == 0, '4 is wrong'\nassert     digits(5) == 0, '5 is wrong'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digits(10) == 2\nassert     digits(11) == 3\nassert     digits(12) == 6\nassert     digits(17) == 1\nassert     digits(18) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digits(1) == 0\nassert     digits(2) == 0\nassert     digits(4) == 0\nassert     digits(18) == 0\nassert     digits(34) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(is_nested('()[]{()}')) \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_nested('{}') == False, '({} is not a valid nested string'\nassert     is_nested('{}(){}') == False, '({}() is not a valid nested string'\nassert     is_nested('[{()}]') == False, '[[{()}] is not a valid nested string'\nassert     is_nested('[{()}]') == True, '[[{()}] is a valid nested string'\nassert     is_nested('{}[') == False, '{}[ is not a valid nested string'\n",
        "num_ids_2": 51,
        "num_ids_4": 110
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"The solution\")\nprint(is_nested('[([]))'))\nprint(is_nested('[(()[]]'))\nprint(is_nested('([(])'))\nprint(is_nested('[[(())]'))\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_nested('[]')==True, \"is_nested('[]') should return True.\"\nassert     is_nested('[][][]')==True, \"is_nested('[][][]') should return True.\"\nassert     is_nested('[](')==False, \"is_nested('[](') should return False.\"\nassert     is_nested(']')==False, \"is_nested(']') should return False.\"\nassert     is_nested('[][][])')==False, \"is_nested('[][][])') should return False.\"\n",
        "num_ids_2": 56,
        "num_ids_4": 108
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_nested(\"[][]\") == True, \"false\"\nassert is_nested(\"[[]]\") == True, \"false\"\nassert is_nested(\"{}\") == True, \"false\"\nassert is_nested(\"[][]][\") == False, \"false\"\nassert is_nested(\"}{\") == False, \"false\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_nested('()') == True\nassert     is_nested('[]') == True\nassert     is_nested('[][]') == True\nassert     is_nested('[][][]') == False\nassert     is_nested('{}') == True\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nTest your function again with new input strings in the next cells\n'''\n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    if len(string)<=2:\n        return False\n    if string[0]=='[' and string[-1]==']':\n        return is_nested(string[1:-1])\n    elif string[0]=='[':\n        return is_nested(string[1:])\n    elif string[-1]==']':\n        return is_nested(string[:-1])\n    else:\n        return False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(is_nested('()[[]]'))\nprint(is_nested('[[()]]'))\nprint(is_nested('([)]'))\nprint(is_nested('[[[[[[[')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_squares([-4, 3, 5, -3, -2, 1, -6, -5]) == 55\nsum_squares([-4, -3, 5, -3, -2, 1, -6, -5]) == -4\nsum_squares([1, 2, 3]) == 9\nsum_squares([4, 5, 6]) == 25\nsum_squares([7, 8, 9]) == 55\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([-2,1,2,3]) == 14\nassert     sum_squares([4,2,-1]) == 10\n",
        "num_ids_2": 35,
        "num_ids_4": 35
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([-1,-2,-3,-4,-5]) == 25\nassert     sum_squares([4,2,1]) == 9\nassert     sum_squares([-1,1,2]) == 5\n\n\n\ndef sum_squares_fast(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    pass\n",
        "num_ids_2": 37,
        "num_ids_4": 54
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_squares([1, 2, 3]) == 14, \"Should sum of square of each element of the list\"\nassert     sum_squares([-1, -2, -3]) == -9, \"Should sum of square of each element of the list\"\nassert     sum_squares([1, 2, 3, -4]) == 23, \"Should sum of square of each element of the list\"\nassert     sum_squares([-1.2, -2.5, -3.8, -4.3]) == -4.56, \"Should sum of square of each element of the list\"\n",
        "num_ids_2": 62,
        "num_ids_4": 140
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_squares([4, 5, 6]) == 20\nassert     sum_squares([-1, 2, -3]) == 5\nassert     sum_squares([-10, -2, -3]) == 14\n\n\ndef sum_squares_alt(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    return sum(x ** 2 for x in lst)\n\n",
        "num_ids_2": 34,
        "num_ids_4": 53
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_squares([1,2,3,4])==14\nassert     sum_squares([5,6,7,8])==55\nassert     sum_squares([2,3,4,5])==25\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('') == False, \\\n        \"Expected '{}' to be False\".format('')\nassert check_if_last_char_is_a_letter(' ') == False, \\\n        \"Expected '{}' to be False\".format(' ')\nassert check_if_last_char_is_a_letter('a') == True, \\\n        \"Expected '{}' to be True\".format('a')\nassert check_if_last_char_is_a_letter('A') == True, \\\n        \"Expected '{}' to be True\".format('A')\nassert check_if_last_char_is_a_letter('abc') == True, \\\n        \"Expected '{}' to be True\".format('abc')\n",
        "num_ids_2": 45,
        "num_ids_4": 89
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('abcd') == False, \"All lowercase letters\"\nassert     check_if_last_char_is_a_letter('abcdE') == True, \"All uppercase letters\"\nassert     check_if_last_char_is_a_letter('abcd e') == True, \"All uppercase letters\"\nassert     check_if_last_char_is_a_letter('Abcd e') == True, \"All lowercase letters\"\nassert     check_if_last_char_is_a_letter('abcDEF') == False, \"All lowercase letters\"\n",
        "num_ids_2": 60,
        "num_ids_4": 121
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('be') == False, \"Your function is not correct. Check it Again\"\nassert     check_if_last_char_is_a_letter('Hello World') == True, \"Your function is not correct. Check it Again\"\nassert     check_if_last_char_is_a_letter('hello world') == True, \"Your function is not correct. Check it Again\"\nassert     check_if_last_char_is_a_letter('hello worl') == False, \"Your function is not correct. Check it Again\"\nassert     check_if_last_char_is_a_letter('hello world!') == True, \"Your function is not correct. Check it Again\"\n",
        "num_ids_2": 67,
        "num_ids_4": 136
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('kaf')    == True, \"One character\"\nassert     check_if_last_char_is_a_letter('Kaf')    == True, \"Two character\"\nassert     check_if_last_char_is_a_letter('kaf b')    == False, \"One character\"\nassert     check_if_last_char_is_a_letter('kaf b')    == False, \"Two character\"\nassert     check_if_last_char_is_a_letter('abc')    == True, \"A single character\"\n",
        "num_ids_2": 56,
        "num_ids_4": 114
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncheck_if_last_char_is_a_letter('abacd') == True\ncheck_if_last_char_is_a_letter('awesome') == True\ncheck_if_last_char_is_a_letter('Hi') == True\ncheck_if_last_char_is_a_letter('2') == False\ncheck_if_last_char_is_a_letter('2A') == False\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('antidisestablishmentarianism')\nassert     check_if_last_char_is_a_letter('wet')\nassert     check_if_last_char_is_a_letter('if')\n",
        "num_ids_2": 43,
        "num_ids_4": 62
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert can_arrange([4,5,3,2,1]) == 0\nassert can_arrange([4,5,3,2,1,1]) == 1\nassert can_arrange([4,5,3,2,1,1,2,2]) == 5\nassert can_arrange([4,5,3,2,1,1,2,2,2]) == -1",
        "num_ids_2": 22,
        "num_ids_4": 68
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(can_arrange([1,2,3]))\nprint(can_arrange([2,3,1]))\nprint(can_arrange([1,2,3,4]))\nprint(can_arrange([2,3,4,1]))\nprint(can_arrange([1,1,3,4]))\nprint(can_arrange([2,1,3,4]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert can_arrange([]) == -1\nassert can_arrange([0, 3, 2, 1]) == 0\nassert can_arrange([0, 3, 3, 2, 1]) == 2\n",
        "num_ids_2": 14,
        "num_ids_4": 50
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef can_arrange_1(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    pass\n\nassert can_arrange_1([1, 2, 3, 4, 5]) == 1\nassert can_arrange_1([3, 2, 1, 4, 5]) == -1\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     can_arrange([2, 1, 1, 2]) == 2\nassert     can_arrange([1, 1, 2, 1, 2]) == 2\nassert     can_arrange([1, 2, 1, 2]) == -1\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_can_arrange():\n    assert can_arrange([0, 2, 3, 4]) == 2\n    assert can_arrange([1, 2, 3, 4, 5]) == -1\n\ndef get_next_smaller_nums(arr):\n    \"\"\"Given a sorted array, create a function which returns an array with\n    the next smaller element in each position.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nExpected:\n(0, -1)\n(1, 1)\n'''\n\nprint(largest_smallest_integers([0, -1, 1])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([1, -3, 10, -2, -10]) == (-10, 1)\nassert largest_smallest_integers([1, -3, 10, 2, -10]) == (2, -10)\nassert largest_smallest_integers([1, -3, 10, 2]) == (2, 1)\nassert largest_smallest_integers([-1, -3, -10, -2, -10]) == (-1, -10)\nassert largest_smallest_integers([-1, -3, -10, 2]) == (2, -1)\n",
        "num_ids_2": 59,
        "num_ids_4": 116
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([5,1,-3,2]) == (5,-3)\nassert     largest_smallest_integers([0,1,2,4]) == (0,-4)\nassert     largest_smallest_integers([2,1,-3,0]) == (2,-3",
        "num_ids_2": 50,
        "num_ids_4": 74
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([]) == (None, None), \"test #1\"\nassert     largest_smallest_integers([1, -1, -3, -4, -5]) == (5, -5), \"test #2\"\nassert     largest_smallest_integers([1, -2, 3]) == (3, 1), \"test #3\"\nassert     largest_smallest_integers([0, 0, 0]) == (0, 0), \"test #4\"\nassert     largest_smallest_integers([-2, -3, -4, -5]) == (5, -2), \"test #5\"\n",
        "num_ids_2": 60,
        "num_ids_4": 117
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([-2, -1, 2, 1, 0, -1, -2, 1]) == (-1, 2)\nassert     largest_smallest_integers([-2, -1, 2, 1, 0, -1, -2, 1, 0, -1, -2, 1, 0, -1, -2, 1]) == (-1, 2)\nassert     largest_smallest_integers([-2, -1, 2, 1, 0, -1, -2, 1, 0, -1, -2, 1, 0, -1, -2, 1, 0, -1, -2, 1]) == (2, -1)\nassert     largest_smallest_integers([-2, -1, 2, 1, 0, -1, -2, 1, 0, -1, -2, 1, 0, -1, -2, 1, 0, -1, -2, 1]) == (2, -1)\nassert     largest_smallest_integers([-2, -1, 2, 1, 0, -1, -2, 1, 0, -1, -2, 1, 0, -1, -2, 1, 0, -1, -2, 1]) == (2, -1)\n",
        "num_ids_2": 94,
        "num_ids_4": 230
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([2,2,-1]) == (2, -1)\nassert largest_smallest_integers([1,1,-2]) == (1, -2)\nassert largest_smallest_integers([-2,1,1,2]) == (None, None)\nassert largest_smallest_integers([1,1,2,-2,2]) == (2, 1)\nassert largest_smallest_integers([-1,-2,-3]) == (None, None)\n",
        "num_ids_2": 47,
        "num_ids_4": 98
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    largest_smallest_integers([-4, -3, 0, 4, 3, 8]) == (-4, 3)\n    largest_smallest_integers([0, -4, 4, -2, 3, 8]) == (0, 3)\n    largest_smallest_integers([-2, -1, 0, 2, 3, 4]) == (0, 4)\n    largest_smallest_integers([-4, -3, 0, -4, 3, 8, 2]) == (3, 2)\n    largest_smallest_integers([-2, -1, 0, 2, 3, 4, 5]) == (5, 4)\n    largest_smallest_integers([]) == None\n    largest_smallest_integers([-2, 2, -1, 1, 0, -3, 4, -5]) == (-3, 1)\n    largest_smallest_integers([-2, -1, 1, 2, 0, -3, 4, 5]) == (5, 0)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8]) == (8, 3)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2]) == (8, 3)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5]) == (8, 2)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6]) == (8, 2)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4]) == (4, -5)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5]) == (4, 5)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6]) == (6, 5)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7]) == (7, 6)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8]) == (8, 7)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8, 9]) == (9, 8)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8, 9, 10]) == (10, 9)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8, 9, 10, 11]) == (11, 10)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (12, 11)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (13, 12)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (14, 13)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (15, 14)\n    largest_smallest_integers([1, 2, 0, -4, 3, 8, 2, -5, -6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (largest_smallest_integers([1,2,-3,-6]) == (-1,6))\nassert     (largest_smallest_integers([1,2,3,6,4]) == (6,1))\nassert     (largest_smallest_integers([]) == (None, None))\nassert     (largest_smallest_integers([-1, -2, -3]) == (-1, -3))\n",
        "num_ids_2": 54,
        "num_ids_4": 101
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(1, 2) == None\nassert     compare_one(\"2\", 2) == None\nassert     compare_one(1, \"2\") == None\nassert     compare_one(\"a\", 2) == None\nassert     compare_one(1.5, 1.5) == None\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare_one(12,4) == 12 \nassert     compare_one(12,12) == None\nassert     compare_one(3,\"1\") == None\nassert     compare_one(12.3,12.2) == 12.3\nassert     compare_one(\"hello\",\"goodbye\") == None\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare_one(5, 6)    == None, \"Value 6 is larger than 5\"\nassert     compare_one(-1.5, 1.5)    == None, \"Value 1.5 is larger than -1.5\"\nassert     compare_one('a', 'b')    == None, \"Values are equal, but not the same variable type\"",
        "num_ids_2": 57,
        "num_ids_4": 86
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare_one(10, \"10\") == 10\nassert     compare_one(10, \"10.10\") == 10.10\nassert     compare_one(10.10, \"10\") == 10\nassert     compare_one(10, \"10.10\") == 10.10\nassert     compare_one(10.10, 10) == None\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert compare_one(1, 1) is None\nassert compare_one(1.2, 1.1) is None\nassert compare_one(1.2, 1) == 1.2\nassert compare_one(1, 1.2) == 1\n",
        "num_ids_2": 15,
        "num_ids_4": 47
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare_one(1, 2) == None\nassert     compare_one(\"2\", \"3\") == None\nassert     compare_one(-1, -2) == None\nassert     compare_one(-1.01, -2.02) == None\nassert     compare_one(1, -2) == None\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert compare_one(2, 2) == None\nassert compare_one(2.5, 2.5) == None\nassert compare_one(2, 2.5) == None\nassert compare_one(2.5, 2) == None\n",
        "num_ids_2": 15,
        "num_ids_4": 45
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare_one(1, 1) == None\nassert     compare_one(1.2, 1) == None\nassert     compare_one(\"1.2\", 1) == None\nassert     compare_one(1.2, 1.2) == None\nassert     compare_one(1.2, 2) == None\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare_one(1, 2) == 2, '1 and 2 are not equal!'\nassert     compare_one(1.1, 2.5) == 2.5, '1.1 and 2.5 are not equal!'\nassert     compare_one('2', 2) == 2, '2 and 2 are not equal!'\nassert     compare_one(True, 2) == 2, 'True and 2 are not equal!'\nassert     compare_one('3', 2.0) == 2, '3 and 2.0 are not equal!'\n",
        "num_ids_2": 56,
        "num_ids_4": 102
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncompare_one(1, 2) == 2\ncompare_one(1, '1') == '1'\ncompare_one(1, 1.1) == '1.1'\ncompare_one(1, 1.0) == '1.0'\ncompare_one('1', '1') == '1'\ncompare_one('1', 1.1) == '1.1'\ncompare_one('1', 1.0) == '1.0'\ncompare_one(1, None) == None\n\n\n\ndef check_function_length(func):\n    \"\"\"\n    Check the function and return the result.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(18)\nassert     is_equal_to_sum_even(20)\nassert     is_equal_to_sum_even(100)\nassert not is_equal_to_sum_even(101)\nassert     is_equal_to_sum_even(106)\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(11) == True, 'Wrong answer'\nassert     is_equal_to_sum_even(12) == False, 'Wrong answer'\nassert     is_equal_to_sum_even(11) == True, 'Wrong answer'\nassert     is_equal_to_sum_even(12) == False, 'Wrong answer'\nassert     is_equal_to_sum_even(13) == True, 'Wrong answer'\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_equal_to_sum_even(10) == False\nis_equal_to_sum_even(12) == True\nis_equal_to_sum_even(15) == False\nis_equal_to_sum_even(18) == True\nis_equal_to_sum_even(19) == False\nis_equal_to_sum_even(20) == True\nis_equal_to_sum_even(21) == False\nis_equal_to_sum_even(22) == False\nis_equal_to_sum_even(23) == True\nis_equal_to_sum_even(24) == False\nis_equal_to_sum_even(25) == False\nis_equal_to_sum_even(26) == True\nis_equal_to_sum_even(27) == False\nis_equal_to_sum_even(28) == True\nis_equal_to_sum_even(29) == False\nis_equal_to_sum_even(30) == False\nis_equal_to_sum_even(31) == False\nis_equal_to_sum_even(32) == True\nis_equal_to_sum_even(33) == False\nis_equal_to_sum_even(34) == True\nis_equal_to_sum_even(35) == False\nis_equal_to_sum_even(36) == True\nis_equal_to_sum_even(37) == False\nis_equal_to_sum_even(38) == False\nis_equal_to_sum_even(39) == True\nis_equal_to_sum_even(40) == False\nis_equal_to_sum_even(41) == False\nis_equal_to_sum_even(42) == True\nis_equal_to_sum_even(43) == False\nis_equal_to_sum_even(44) == False\nis_equal_to_sum_even(45) == False\nis_equal_to_sum_even(46) == True\nis_equal_to_sum_even(47) == False\nis_equal_to_sum_even(48) == True\nis_equal_to_sum_even(49) == False\nis_equal_to_sum_even(50) == True\nis_equal_to_sum_even(51) == False\nis_equal_to_sum_even(52) == False\nis_equal_to_sum_even(53) == True\nis_equal_to_sum_even(54) == False\nis_equal_to_sum_even(55) == True\nis_equal_to_sum_even(56) == False\nis_equal_to_sum_even(57) == False\nis_equal_to_sum_even(58) == True\nis_equal_to_sum_even(59) == False\nis_equal_to_sum_even(60) == True\nis_equal_to_sum_even(61) == False\nis_equal_to_sum_even(62) == True\nis_equal_to_sum_even(63) == False\nis_equal_to_sum_even(64) == False\nis_equal_to_sum_even(65) == False\nis_equal_to_sum_even(66) == True\nis_equal_to_sum_even(67) == False\nis_equal_to_sum_even(68) == True\nis_equal_to_sum_even(69) == False\nis_equal_to_sum_even(70) == True\nis_equal_to_sum_even(71) == False\nis_equal_to_sum_even(72) == False\nis_equal_to_sum_even(73) == True\nis_equal_to_sum_even(74) == False\nis_equal_to_sum_even(75) == True\nis_equal_to_sum_even(76) == False\nis_equal_to_sum_even(77) == False\nis_equal_to_sum_even(78) == True\nis_equal_to_sum_even(79) == False\nis_equal_to_sum_even(80) == True\nis_equal_to_sum_even(81) == False\nis_equal_to_sum_even(82) == False\nis_equa",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"TESTS:\")\nprint(\"Test 1\")\nprint(is_equal_to_sum_even(0))\n\nprint(\"Test 2\")\nprint(is_equal_to_sum_even(1))\n\nprint(\"Test 3\")\nprint(is_equal_to_sum_even(2))\n\nprint(\"Test 4\")\nprint(is_equal_to_sum_even(4))\n\nprint(\"Test 5\")\nprint(is_equal_to_sum_even(5))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_subset_sum(n):\n    \"\"\"Given the sum of 4 positive integers, find the subset of 4 integers whose sum is equal to the given sum.\n    Return the subset as a tuple.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    is_equal_to_sum_even(22) == True\n    is_equal_to_sum_even(23) == False\n    is_equal_to_sum_even(24) == True\n    is_equal_to_sum_even(25) == False\n    is_equal_to_sum_even(26) == True\n    is_equal_to_sum_even(27) == False\n    is_equal_to_sum_even(28) == True\n    is_equal_to_sum_even(29) == True\n    is_equal_to_sum_even(30) == True\n    is_equal_to_sum_even(31) == True\n    is_equal_to_sum_even(32) == False\n    is_equal_to_sum_even(33) == True\n    is_equal_to_sum_even(34) == False\n    is_equal_to_sum_even(35) == True\n    is_equal_to_sum_even(36) == False\n    is_equal_to_sum_even(37) == True\n    is_equal_to_sum_even(38) == False\n    is_equal_to_sum_even(39) == True\n    is_equal_to_sum_even(40) == True\n    is_equal_to_sum_even(41) == True\n    is_equal_to_sum_even(42) == True\n    is_equal_to_sum_even(43) == True\n    is_equal_to_sum_even(44) == True\n    is_equal_to_sum_even(45) == True\n    is_equal_to_sum_even(46) == True\n    is_equal_to_sum_even(47) == True\n    is_equal_to_sum_even(48) == False\n    is_equal_to_sum_even(49) == True\n    is_equal_to_sum_even(50) == False\n    is_equal_to_sum_even(51) == True\n    is_equal_to_sum_even(52) == True\n    is_equal_to_sum_even(53) == True\n    is_equal_to_sum_even(54) == True\n    is_equal_to_sum_even(55) == True\n    is_equal_to_sum_even(56) == False\n    is_equal_to_sum_even(57) == True\n    is_equal_to_sum_even(58) == False\n    is_equal_to_sum_even(59) == True\n    is_equal_to_sum_even(60) == True\n    is_equal_to_sum_even(61) == True\n    is_equal_to_sum_even(62) == True\n    is_equal_to_sum_even(63) == True\n    is_equal_to_sum_even(64) == True\n    is_equal_to_sum_even(65) == True\n    is_equal_to_sum_even(66) == True\n    is_equal_to_sum_even(67) == True\n    is_equal_to_sum_even(68) == False\n    is_equal_to_sum_even(69) == True\n    is_equal_to_sum_even(70) == True\n    is_equal_to_sum_even(71) == True\n    is_equal_to_sum_even(72) == True\n    is_equal_to_sum_even(73) == True\n    is_equal_to_sum_even(74) == True\n    is_equal_to_sum_even(75) == True\n    is_equal_to_sum_even(76) == True\n    is_equal_to_sum_even(77) == True\n    is_equal_to_sum_even(78) == True\n    is_equal_to_sum_even(79) == True\n    is_equal_to_sum_even(80) == True\n    is_equal_to_sum_even(81) == True\n    is_equal_to_sum_even(82) == True\n    is_equal_to_sum_even(83) == True\n    is_equal_to_sum_even(84) == True\n    is_equal_to_sum_even(85) == Tru",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     special_factorial(5) == 120, \\\n        \"test Failed\"\nassert     special_factorial(0) == 1, \\\n        \"test Failed\"\nassert     special_factorial(3) == 6, \\\n        \"test Failed\"\nassert     special_factorial(4) == 24, \\\n        \"test Failed\"\nassert     special_factorial(10) == 3628800, \\\n        \"test Failed\"\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    assert special_factorial(10) == 3628800\n    assert special_factorial(20) == 2432902008176640000\n    assert special_factorial(1) == 1\n    assert special_factorial(0) == 1\n    print(\"Well done. The function returned the right special factorial.\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     special_factorial(2) == 2\nassert     special_factorial(5) == 120\nassert     special_factorial(7) == 5040\nassert     special_factorial(9) == 3628800\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     special_factorial(3)    == 6\nassert     special_factorial(0)    == 1\nassert     special_factorial(1)    == 1\nassert     special_factorial(2)    == 2\nassert     special_factorial(3)    == 6\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef factorial(n):\n    \"\"\"\n    Uses factorial algorithm to calculate the factorial.\n    If n is negative, it will return None.\n    \"\"\"\n    pass\n\ndef factorial(n):\n    if n <= 0:\n        return None\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         special_factorial(1) == 1\nassert         special_factorial(2) == 2\nassert         special_factorial(3) == 6\nassert         special_factorial(4) == 24\nassert         special_factorial(5) == 120\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     special_factorial(1) == 1, \"Check your logic\"\nassert     special_factorial(2) == 2, \"Check your logic\"\nassert     special_factorial(3) == 6, \"Check your logic\"\nassert     special_factorial(4) == 24, \"Check your logic\"\nassert     special_factorial(5) == 120, \"Check your logic\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_palindrome(text):\n    \"\"\"\n    Given a string text, \n    check if the given text is \n    a palindrome\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fix_spaces('a b  c') == 'a_b_c'\nassert     fix_spaces('a b c') == 'a_b_c'\nassert     fix_spaces('a b c') == 'a_b_c'\nassert     fix_spaces(' a  b c ') == 'a_b_c'\nassert     fix_spaces('  a b  c') == 'a_b_c'\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    fix_spaces('One two three') == 'one-two-three'\n    fix_spaces('  one two three') == 'one-two-three'\n    fix_spaces('This is a test') == 'this-is-a-test'\n    fix_spaces('One two three') == 'one-two-three'\n    fix_spaces(' ') == '-'\n    fix_spaces('') == ''\n    fix_spaces('   ') == '-'\n    fix_spaces(' ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('  ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   ') == '-'\n    fix_spaces('   '",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    fix_spaces(\"the quick brown fox jumps over the lazy dog\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"   the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"   the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"  the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick_brown_fox_jumps_over_the_lazy_dog\"\n    fix_spaces(\"the quick brown fox jumps over the lazy dog  \") == \"the_quick",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not fix_spaces(\"hello world\")\nassert fix_spaces(\"hello world\")\nassert not fix_spaces(\"hello     world\")\nassert fix_spaces(\"hello     world\")\n",
        "num_ids_2": 14,
        "num_ids_4": 36
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     file_name_check('my_test.txt') == 'Yes', 'the output is not correct'\nassert     file_name_check('my_test1.txt') == 'No', 'the output is not correct'\nassert     file_name_check('my_test2.txt') == 'No', 'the output is not correct'\n\nprint('The code is checking the correctness of file_name_check function.')\n\n",
        "num_ids_2": 53,
        "num_ids_4": 80
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     file_name_check('a') == 'No'\nassert     file_name_check('aa') == 'No'\nassert     file_name_check('a1') == 'No'\nassert     file_name_check('a0') == 'No'\nassert     file_name_check('a.txt') == 'No'\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfile_name_check('aaaa.txt') == 'No'\nfile_name_check('a.txt') == 'Yes'\nfile_name_check('aaa.txt') == 'No'\nfile_name_check('a.exe') == 'No'\nfile_name_check('aaa.exe') == 'No'\nfile_name_check('aaa.dll') == 'No'\nfile_name_check('a.a') == 'No'\nfile_name_check('a.b') == 'No'\nfile_name_check('a.c') == 'No'\nfile_name_check('a.1') == 'No'\nfile_name_check('a.11') == 'No'\nfile_name_check('a.111') == 'No'\nfile_name_check('a.1234') == 'No'\nfile_name_check('a.12345') == 'No'\nfile_name_check('a.123456') == 'No'\nfile_name_check('a.1234567') == 'No'\nfile_name_check('a.123456789') == 'No'\nfile_name_check('a.1234567890') == 'No'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     file_name_check('abc.txt') == 'No'\nassert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('abc.dll') == 'No'\nassert     file_name_check('abc_blah.txt') == 'No'\nassert     file_name_check('a.b.c.d.txt') == 'No'\n",
        "num_ids_2": 34,
        "num_ids_4": 71
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     file_name_check('./test.txt') == 'No'\nassert file_name_check('./test.txt.exe') == 'No'\nassert file_name_check('./test.txt.DLL') == 'No'\nassert file_name_check('./test.txt.COM') == 'No'\nassert file_name_check('./test.txt.dll') == 'No'\n",
        "num_ids_2": 39,
        "num_ids_4": 80
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     file_name_check('npp.txt') == 'Yes'\nassert     file_name_check('a.txt') == 'No'\nassert     file_name_check('a.exe') == 'No'\nassert     file_name_check('a.dll') == 'No'\nassert     file_name_check('npp.exe') == 'No'\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     file_name_check('tweety_1.txt') == 'Yes'\nassert     file_name_check('tweety.exe') == 'No'\nassert     file_name_check('tweety_1.txt') == 'Yes'\n",
        "num_ids_2": 40,
        "num_ids_4": 61
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_squares([1,2,3]) == 9\nsum_squares([9,9,9,9]) == 81\nsum_squares([1,2,3,5]) == 9\nsum_squares([1,2,3,4]) == 14\nsum_squares([1,2,3,4,5]) == 30\nsum_squares([1,2,3,4,5,6]) == 144\nsum_squares([1,2,3,4,5,6,7]) == 168\nsum_squares([1,2,3,4,5,6,7,8]) == 204\nsum_squares([1,2,3,4,5,6,7,8,9]) == 216\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert sum_squares([0, 1, 2, 3]) == 9, \"Wrong result\"\nassert sum_squares([0, 2, 3, 4]) == 5, \"Wrong result\"\nassert sum_squares([0, 1, 2, 4]) == 5, \"Wrong result\"\n",
        "num_ids_2": 26,
        "num_ids_4": 72
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([1,2,3,4]) == 25, \"it should return 25\"\nassert     sum_squares([1,3,5,6,8]) == 26, \"it should return 26\"\nassert     sum_squares([1,3,5]) == 9, \"it should return 9\"\nassert     sum_squares([1,2,3]) == 6, \"it should return 6\"\nassert     sum_squares([0]) == 0, \"it should return 0\"\n",
        "num_ids_2": 52,
        "num_ids_4": 98
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n\nif __name__ == \"__main__\":\n    print(sum_squares([1, 2, 3, 4, 5]))\n    print(sum_squares([2, 4, 1, 0, 3]))\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function shall not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_squares([]) == 0\nassert sum_squares([1]) == 1\nassert sum_squares([1, 2]) == 3\nassert sum_squares([1, 2, 3]) == 5\n",
        "num_ids_2": 13,
        "num_ids_4": 37
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sum_squares([-1,2,3,4,5]) == 9\nassert sum_squares([-2,-1,0,3,4]) == -1\nassert sum_squares([-2,-1,0,3,4,5]) == -1\nassert sum_squares([0,2,3,4,5]) == 30\n",
        "num_ids_2": 23,
        "num_ids_4": 67
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsum_squares([0, 1, 2, 3, 4, 5, 6, 7]) == 0\nsum_squares([0, 1, 9, 16, 25, 36, 49, 64]) == 0\nsum_squares([9, 16, 25, 36, 49, 64]) == 81\nsum_squares([]) == 0",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"All the tests are passed\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nwords_in_sentence(\"this is a test\") == \"this is a test\"\nassert words_in_sentence(\"   that is a test\") == \"that is a test\"\nassert words_in_sentence(\"we are going to be gathered\") == \"we are going to be gathered\"\nassert words_in_sentence(\"i wonder if i should go with you\") == \"i wonder if i should go with you\"\nassert words_in_sentence(\"a very long sentence\") == \"a very long sentence\"\n",
        "num_ids_2": 25,
        "num_ids_4": 79
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"over fox brown the\"\n\ndef gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two integers.\n\n    Constraints:\n        * 1 <= a, b <= 1000\n    \"\"\"\n    pass\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert words_in_sentence(\"hello world\") == \"hello world\", 'Words_in_sentence'\nassert words_in_sentence(\"hello world and goodbye\") == \"hello world and goodbye\", 'Words_in_sentence'\nassert words_in_sentence(\"hello world and goodbye hello world\") == \"hello world and goodbye hello world\", 'Words_in_sentence'\nassert words_in_sentence(\"hello world and goodbye and hello world and goodbye\") == \"hello world and goodbye and hello world and goodbye\", 'Words_in_sentence'\n",
        "num_ids_2": 28,
        "num_ids_4": 90
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_in_sentence('Hello world!') == 'Hello world!'\nassert     words_in_sentence('the quick brown fox jumps') == 'the quick brown fox jumps'\nassert     words_in_sentence('i a I u u A') == 'i a I u u A'\n",
        "num_ids_2": 43,
        "num_ids_4": 69
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_in_sentence('This is a test') == 'is a test', 'WRONG'\nassert     words_in_sentence('This is a test') == 'test', 'WRONG'\nassert     words_in_sentence('This is a test') == 'a test', 'WRONG'\nassert     words_in_sentence('This is a test') == 'test', 'WRONG'\nassert     words_in_sentence('This is a test') == 'a test', 'WRONG'\n",
        "num_ids_2": 48,
        "num_ids_4": 95
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(simplify(\"1/2\", \"2/1\"))\nprint(simplify(\"3/4\", \"2/1\"))\nprint(simplify(\"1/3\", \"2/1\"))\nprint(simplify(\"3/2\", \"1/4\"))\nprint(simplify(\"1/3\", \"2/1\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     simplify(\"3/4\", \"2/3\") == True\nassert     simplify(\"1/4\", \"2/3\") == False\nassert     simplify(\"4/3\", \"1/2\") == False\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     simplify(\"1/5\", \"1/5\") == True\nassert     simplify(\"3/2\", \"1/2\") == False\nassert     simplify(\"5/2\", \"1/2\") == True\nassert     simplify(\"10/9\", \"10/9\") == True\nassert     simplify(\"7/9\", \"10/9\") == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsimplify(\"1/3\", \"1/3\") == True\nassert simplify(\"1/5\", \"1/5\") == True\nassert simplify(\"1/2\", \"1/2\") == True\nassert simplify(\"5/8\", \"5/8\") == True\nassert simplify(\"1/9\", \"1/9\") == True\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     simplify('1/2', '2/4')\nassert     simplify('1/2', '2/3')\nassert     simplify('2/5', '4/7')\nassert     simplify('1/3', '1/4')\nassert     simplify('1/3', '2/4')\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     simplify(\"1/2\", \"1/2\")        == True\nassert     simplify(\"2/4\", \"1/2\")        == False\nassert     simplify(\"10/3\", \"2/3\")        == False\nassert     simplify(\"5/5\", \"1/2\")        == True\n\n\ndef simple_simplify(x):\n    \"\"\"Your task is to implement a function that will implement the\n    following function:\n        F(x) = x - 1/x\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     simplify('1/2', '2') == True, 'Wrong'\nassert     simplify('1/2', '-2') == False, 'Wrong'\nassert     simplify('3/4', '2') == True, 'Wrong'\nassert     simplify('3/4', '-2') == False, 'Wrong'\nassert     simplify('2/3', '2') == True, 'Wrong'\n",
        "num_ids_2": 43,
        "num_ids_4": 86
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \norder_by_points([-2,3,-1,1,-2]) == [-2,1,-2,3,-1]\nassert \norder_by_points([9,-2,2,6,3,-4,0,1]) == [-4,0,-2,2,3,-2,6,-2]\nassert \norder_by_points([9,-2,2,6,3,-4,0,1]) == [-4,0,-2,2,3,-2,6,-2]\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     order_by_points([1, 2, 3]) == [1, 2, 3]\nassert     order_by_points([1, 2, 3, 10, 10, 10, 11]) == [1, 2, 3, 10, 10, 10, 11]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254])\n",
        "num_ids_2": 62,
        "num_ids_4": 630
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([4, 8, 7, 3, 1]) == [1, 3, 4, 7, 8]\nassert order_by_points([3, 4, 7, 8, 1]) == [1, 3, 4, 7, 8]\nassert order_by_points([4, 7, 3, 8, 1]) == [1, 3, 4, 7, 8]\nassert order_by_points([4, 8, 1, 3, 7]) == [1, 3, 4, 7, 8]\n\n",
        "num_ids_2": 61,
        "num_ids_4": 121
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     order_by_points([5, 2, -2, 8, 4, -1, -1]) == [-1, -1, 4, 5, 8, 2, 6]\nassert     order_by_points([-1, -1, -1, -1, -1, -1]) == [-1, -1, -1, -1, -1, -1]\nassert     order_by_points([]) == []\nassert     order_by_points([1, 2, 3]) == [1, 2, 3]\n\nprint(\"All tests passed!\"",
        "num_ids_2": 89,
        "num_ids_4": 124
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([1,2,3]) == [1,2,3]\nassert     order_by_points([1,2,3]) == [3,2,1]\nassert     order_by_points([9,2,3]) == [9,3,2]\nassert     order_by_points([3,2,9]) == [3,9,2]\nassert     order_by_points([3,2,9,1]) == [1,9,3,2]\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     order_by_points([-9, 3, -5, -7, 4, 5, -2, -1]) == [-1, -2, -4, -5, -7, -9, 5, 4]\n\n\nif __name__ == \"__main__\":\n    from random import randint\n    while True:\n        nums = []\n        for _ in range(10):\n            nums.append(randint(-1000, 1000))\n        print(nums)\n        print(f\"order_by_points(nums): {order_by_points(nums)}\")\n        print(\"-\" * 40)\n        print()\n        if input(\"Continue? [y/n]\")!= \"y\":\n            break\n",
        "num_ids_2": 53,
        "num_ids_4": 53
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     order_by_points([9, 8, 10, 1, 3, 4]) == [1, 3, 4, 9, 8, 10]\nassert     order_by_points([20, 18, 8, 4, 2, 1]) == [1, 2, 4, 8, 18, 20]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     order_by_points([9, 3, 2, 1, 8, 4, 5]) == [1, 2, 3, 4, 5, 8, 9]\nassert     order_by_points([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "num_ids_2": 70,
        "num_ids_4": 148
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     order_by_points([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]\nassert     order_by_points([3, 9, 10, 11, 12]) == [3, 9, 10, 11, 12]\nassert     order_by_points([4, 6, 8, 12, 20]) == [4, 6, 8, 12, 20]\nassert     order_by_points([2, 3, 7, 7, 10, 15, 20]) == [2, 3, 7, 7, 10, 15, 20]\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     order_by_points([3,1,2,8,4]) == [1,2,3,4,8]\nassert order_by_points([3,1,2,8,4]) == [1,2,3,4,8]\nassert order_by_points([1,5,7,8]) == [1,5,7,8]\nassert order_by_points([10,20,30,40,50]) == [10,20,30,40,50]\nassert order_by_points([10,20,30,40,50]) == [10,20,30,40,50]\n",
        "num_ids_2": 61,
        "num_ids_4": 117
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     specialFilter([8, 9, 1, 2, 3, 4, 5]) == 4, \"First\"\nassert     specialFilter([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 6, \"Second\"\nassert     specialFilter([5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 6, \"Third\"\nassert specialFilter([3, 9, 9, 9, 9, 3, 9, 9]) == 0, \"Fourth\"\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, \"Fifth\"\n",
        "num_ids_2": 58,
        "num_ids_4": 119
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert specialFilter(odd) == 1\nassert specialFilter([3, 5, 9, 10, 11, 13, 14, 15, 17, 19]) == 2\nassert specialFilter([7, 9, 11, 13, 14, 15, 17, 19, 20, 22]) == 4\nassert specialFilter([1, 2, 4, 5, 7, 8, 10, 12, 15, 16, 17, 19]) == 6\n",
        "num_ids_2": 12,
        "num_ids_4": 66
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6]) == 5\nassert     specialFilter([1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6]) == 5\nassert     specialFilter([5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]) == 5\nassert     specialFilter([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 6\nassert     specialFilter([1, 2, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 6]) == 5\n",
        "num_ids_2": 70,
        "num_ids_4": 138
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test 1\n    print(\"Test 1\")\n    nums = [11, 13, 15, 17, 19, 20, 21, 22]\n    print(\"Given array is\", nums)\n    specialFilter(nums)\n    print(\"Expected output: 5\")\n    print(\"Actual output:\", specialFilter(nums))\n    # Test 2\n    print(\"Test 2\")\n    nums = [11, 12, 14, 15, 16, 17, 18, 19]\n    print(\"Given array is\", nums)\n    specialFilter(nums)\n    print(\"Expected output: 5\")\n    print(\"Actual output:\", specialFilter(nums))\n    # Test 3\n    print(\"Test 3\")\n    nums = [11, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n    print(\"Given array is\", nums)\n    specialFilter(nums)\n    print(\"Expected output: 4\")\n    print(\"Actual output:\", specialFilter(nums))\n    # Test 4\n    print(\"Test 4\")\n    nums = []\n    print(\"Given array is\", nums)\n    specialFilter(nums)\n    print(\"Expected output: 0\")\n    print(\"Actual output:\", specialFilter(nums))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_triples(5) == 3\nassert     get_max_triples(10) == 8\nassert     get_max_triples(100) == 2",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_triples(4) == 3\nassert     get_max_triples(5) == 4\nassert     get_max_triples(6) == 4\nassert     get_max_triples(10) == ",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_triples(2) == 3, \"Wrong answer\"\nassert     get_max_triples(8) == 15, \"Wrong answer\"\nassert     get_max_triples(10) == 33, \"Wrong answer\"\nassert     get_max_triples(11) == 46, \"Wrong answer\"\nassert     get_max_triples(100) == 83360, \"Wrong answer\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_triples(3) == 7, \"Wrong result for get_max_triples(3): %s\" % (get_max_triples(3))\nassert     get_max_triples(5) == 14, \"Wrong result for get_max_triples(5): %s\" % (get_max_triples(5))\nassert     get_max_triples(6) == 21, \"Wrong result for get_max_triples(6): %s\" % (get_max_triples(6))\nassert     get_max_triples(10) == 66, \"Wrong result for get_max_triples(10): %s\" % (get_max_triples(10))\nassert     get_max_triples(20) == 1483, \"Wrong result for get_max_triples(20): %s\" % (get_max_triples(20))\n",
        "num_ids_2": 86,
        "num_ids_4": 172
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_max_triples(1) == 0\nassert get_max_triples(3) == 3\nassert get_max_triples(5) == 15",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 1\nassert     get_max_triples(10) == 15\nassert     get_max_triples(5) == 1\nassert     get_max_triples(7) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nbf(\"Earth\",\"Jupiter\") == (\"Mercury\", \"Venus\")\nprint(\"You're all good!!!\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    list(bf(\"earth\", \"mars\")) == [(\"mars\", 0), (\"earth\", 0), (\"venus\", 0), (\"jupiter\", 0), (\"saturn\", 0), (\"uranus\", 0), (\"neptune\", 0)]\n    list(bf(\"venus\", \"earth\")) == [(\"earth\", 0), (\"mars\", 0), (\"venus\", 0), (\"jupiter\", 0), (\"saturn\", 0), (\"uranus\", 0), (\"neptune\", 0)]\n    list(bf(\"venus\", \"mars\")) == []\n    list(bf(\"jupiter\", \"saturn\")) == []\n    list(bf(\"uranus\", \"neptune\")) == []\n    list(bf(\"neptune\", \"uranus\")) == []\n    list(bf(\"neptune\", \"neptune\")) == []\n    list(bf(\"mars\", \"mars\")) == [(\"mars\", 0)]\n    list(bf(\"saturn\", \"venus\")) == [(\"venus\", 0)]\n    list(bf(\"saturn\", \"saturn\")) == [(\"saturn\", 0)]\n    list(bf(\"saturn\", \"neptune\")) == []\n    list(bf(\"uranus\", \"uranus\")) == []\n    list(bf(\"uranus\", \"neptune\")) == []\n    list(bf(\"neptune\", \"saturn\")) == []\n    list(bf(\"neptune\", \"uranus\")) == []\n    list(bf(\"neptune\", \"neptune\")) == []\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bf('Earth','Venus') == (('Earth', 'Venus'), \n                                    ('Venus', 'Earth'), \n                                    ('Earth', 'Mars'), \n                                    ('Mars', 'Earth'), \n                                    ('Mars', 'Jupiter'), \n                                    ('Jupiter', 'Mars'), \n                                    ('Mars', 'Saturn'), \n                                    ('Saturn', 'Mars'), \n                                    ('Saturn', 'Neptune'), \n                                    ('Neptune', 'Saturn'), \n                                    ('Neptune', 'Uranus'), \n                                    ('Uranus', 'Neptune'), \n                                    ('Uranus', 'Pluto'), \n                                    ('Pluto', 'Uranus'), \n                                    ('Uranus', 'Earth'), \n                                    ('Earth', 'Uranus'))\nassert     bf('Mars','Saturn') == (('Mars', 'Earth'), \n                                    ('Earth', 'Mars'), \n                                    ('Mars', 'Jupiter'), \n                                    ('Jupiter', 'Mars'), \n                                    ('Mars', 'Uranus'), \n                                    ('Uranus', 'Mars'), \n                                    ('Mars', 'Neptune'), \n                                    ('Neptune', 'Mars'), \n                                    ('Mars', 'Pluto'), \n                                    ('Pluto', 'Mars'), \n                                    ('Mars', 'Earth'), \n                                    ('Earth', 'Mars'))\nassert     bf('Earth','Pluto') == (('Earth', 'Mars'), \n                                    ('Mars', 'Earth'), \n                                    ('Mars', 'Jupiter'), \n                                    ('Jupiter', 'Mars'), \n                                    ('Mars', 'Uranus'), \n                                    ('Uranus', 'Mars'), \n                                    ('Mars', 'Neptune'), \n                                    ('Neptune', 'Mars'), \n                                    ('Mars', 'Pluto'), \n                                    ('Pluto', 'Mars'), \n                                    ('Mars', 'Earth'), \n                                    ('Earth', 'Mars'))\nassert     bf('Mercury','Venus') == ()\nassert     bf('Mars','Earth') == ()\n",
        "num_ids_2": 39,
        "num_ids_4": 71
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(bf('Mercury', 'Venus'))\n    print(bf('Mercury', 'Mercury'))\n    print(bf('Earth', 'Venus'))\n    print(bf('Earth', 'Earth'))\n    print(bf('Earth', 'Mars'))\n    print(bf('Mars', 'Earth'))\n    print(bf('Mars', 'Mars'))\n    print(bf('Mars', 'Mars'))\n    print(bf('Mars', 'Jupiter'))\n    print(bf('Jupiter', 'Mars'))\n    print(bf('Jupiter', 'Mars'))\n    print(bf('Jupiter', 'Jupiter'))\n    print(bf('Jupiter', 'Neptune'))\n    print(bf('Neptune', 'Jupiter'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'Neptune'))\n    print(bf('Neptune', 'N",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"bf\",\n    expected_output = '''(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)''')\n    check_output(module_name = \"b",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Earth', 'Mars', \n                                   'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Venus') == ()\nassert     bf('Earth', 'Mars') == ()\nassert     bf('Earth', 'Jupiter') == ()\nassert     bf('Earth', 'Saturn') == ()\n",
        "num_ids_2": 41,
        "num_ids_4": 66
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nbf('Mercury', 'Venus') == ('Mercury', 'Venus')\nbf('Venus', 'Earth') == ('Venus', 'Earth')\nbf('Earth', 'Mars') == ('Earth', 'Mars')\nbf('Mars', 'Jupiter') == ('Mars', 'Jupiter')\nbf('Jupiter', 'Saturn') == ('Jupiter', 'Saturn')\nbf('Saturn', 'Uranus') == ('Saturn', 'Uranus')\nbf('Uranus', 'Neptune') == ('Uranus', 'Neptune')\nbf('Neptune', 'Pluto') == ('Neptune', 'Pluto')\nbf('Mercury', 'Venus') == ('Mercury', 'Venus')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sorted_list_sum([]) == []\nassert     sorted_list_sum(['']) == ['']\nassert     sorted_list_sum([\"\"]) == ['', '']\nassert     sorted_list_sum(['', 'A', 'B']) == ['', 'A', 'B']\nassert     sorted_list_sum(['A', 'A', 'A', 'B', 'C', 'D']) == ['A', 'A', 'A', 'B', 'C', 'D']\n",
        "num_ids_2": 29,
        "num_ids_4": 75
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert sorted_list_sum(['hello', 'hi', 'howdy', 'how', 'are', 'you', 'hi', 'bye']) == ['how', 'hi', 'hi', 'hello', 'howdy', 'how', 'you', 'bye']\nassert sorted_list_sum(['hello', 'hi', 'hi', 'hello', 'how', 'hi', 'hi', 'bye']) == ['hello', 'hi', 'hi', 'how', 'hi', 'how', 'hi', 'bye']\nassert sorted_list_sum(['hello', 'hi', 'hi', 'hello', 'hi', 'hi', 'bye']) == ['hello', 'hi', 'hi', 'hello', 'hi', 'hi', 'bye']\n",
        "num_ids_2": 63,
        "num_ids_4": 173
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sorted_list_sum([\"a\", \"z\", \"the\", \"evil\", \"good\", \"and\", \"cat\"]) == ['and', 'cat', 'good', 'evil', 'good', 'the', 'evil']\nassert     sorted_list_sum([\"dog\", \"frog\", \"cat\", \"horse\"]) == ['cat', 'frog', 'dog', 'horse']\nassert     sorted_list_sum([\"a\", \"z\", \"the\", \"evil\", \"good\", \"and\", \"cat\", \"dog\"]) == ['and', 'cat', 'good', 'evil', 'good', 'dog', 'the', 'evil']\nassert     sorted_list_sum([\"the\", \"and\", \"cat\", \"good\", \"evil\", \"frog\", \"dog\"]) == ['and', 'cat', 'good', 'evil', 'good', 'frog', 'the']\nassert     sorted_list_sum([\"cat\", \"dog\", \"frog\", \"good\", \"evil\", \"and\", \"cat\", \"dog\"]) == ['and', 'cat', 'good', 'evil', 'good', 'frog', 'cat', 'dog']\n",
        "num_ids_2": 90,
        "num_ids_4": 204
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert sorted_list_sum([\"ab\", \"a\", \"a\"]) == [\"a\", \"ab\"]\nassert sorted_list_sum([\"aa\", \"a\", \"ab\"]) == [\"a\", \"ab\", \"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"ba\"]) == [\"a\", \"ab\", \"ba\"]\n",
        "num_ids_2": 28,
        "num_ids_4": 84
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sorted_list_sum([\"a\", \"f\", \"gh\", \"i\", \"k\"]) == [\"a\", \"k\", \"i\", \"gh\", \"f\"]\nassert     sorted_list_sum([\"abc\", \"hij\", \"abd\", \"hie\"]) == [\"abc\", \"hie\", \"abd\", \"hij\"]\nassert     sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"b\", \"e\", \"d\", \"f\", \"c\"]\nassert     sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"b\", \"c\", \"e\", \"d\", \"f\"]\nassert     sorted_list_sum([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n",
        "num_ids_2": 84,
        "num_ids_4": 180
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sorted_list_sum(['']) == []\nassert     sorted_list_sum([\"1\"]) == ['1']\nassert     sorted_list_sum([\"a\", \"a\"]) == ['a']\nassert     sorted_list_sum([\"abc\", \"z\", \"abc\"]) == ['abc', 'z']\nassert     sorted_list_sum([\"a\", \"a\", \"abc\", \"abc\", \"abc\", \"z\"]) == ['abc', 'abc', 'a', 'z']\n",
        "num_ids_2": 32,
        "num_ids_4": 80
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sorted_list_sum([]) == []\nassert sorted_list_sum(['blue']) == ['blue']\nassert sorted_list_sum(['blue','red', 'green']) == ['blue', 'green','red']\nassert sorted_list_sum(['blue','red', 'green', 'yellow']) == ['blue', 'green','red', 'yellow']\n",
        "num_ids_2": 14,
        "num_ids_4": 56
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(x_or_y(3, 4, 5))\nprint(x_or_y(2, 1, 0))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(x_or_y(3, 2, 1))\nprint(x_or_y(5, 2, 1))\nassert \nprint(x_or_y(7, 2, 1))\nprint(x_or_y(3, 2, 2))\nassert \nprint(x_or_y(5, 2, 2))\nprint(x_or_y(7, 2, 2))\nassert \nprint(x_or_y(3, 2, 3))\nprint(x_or_y(5, 2, 3))\nassert \nprint(x_or_y(7, 2, 3))\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Correct output\")\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(x_or_y(2, 1, 1))\n    print(x_or_y(3, 1, 1))\n    print(x_or_y(5, 1, 1))\n    print(x_or_y(7, 1, 1))\n    print(x_or_y(11, 1, 1))\n    print(x_or_y(13, 1, 1))\n    print(x_or_y(17, 1, 1))\n    print(x_or_y(19, 1, 1))\n    print(x_or_y(23, 1, 1))\n    print(x_or_y(29, 1, 1))\n    print(x_or_y(31, 1, 1))\n    print(x_or_y(37, 1, 1))\n    print(x_or_y(41, 1, 1))\n    print(x_or_y(43, 1, 1))\n    print(x_or_y(47, 1, 1))\n    print(x_or_y(53, 1, 1))\n    print(x_or_y(59, 1, 1))\n    print(x_or_y(61, 1, 1))\n    print(x_or_y(67, 1, 1))\n    print(x_or_y(71, 1, 1))\n    print(x_or_y(73, 1, 1))\n    print(x_or_y(79, 1, 1))\n    print(x_or_y(83, 1, 1))\n    print(x_or_y(89, 1, 1))\n    print(x_or_y(97, 1, 1))\n    print(x_or_y(101, 1, 1))\n    print(x_or_y(103, 1, 1))\n    print(x_or_y(107, 1, 1))\n    print(x_or_y(109, 1, 1))\n    print(x_or_y(113, 1, 1))\n    print(x_or_y(119, 1, 1))\n    print(x_or_y(121, 1, 1))\n    print(x_or_y(123, 1, 1))\n    print(x_or_y(127, 1, 1))\n    print(x_or_y(131, 1, 1))\n    print(x_or_y(137, 1, 1))\n    print(x_or_y(139, 1, 1))\n    print(x_or_y(149, 1, 1))\n    print(x_or_y(151, 1, 1))\n    print(x_or_y(157, 1, 1))\n    print(x_or_y(163, 1, 1))\n    print(x_or_y(167, 1, 1))\n    print(x_or_y(173, 1, 1))\n    print(x_or_y(179, 1, 1))\n    print(x_or_y(181, 1, 1))\n    print(x_or_y(191, 1, 1))\n    print(x_or_y(193, 1, 1))\n    print(x_or_y(197, 1, 1))\n    print(x_or_y(199, 1, 1))\n    print(x_or_y(211, 1, 1))\n    print(x_or_y(223, 1, 1))\n    print(x_or_y(227, 1, 1))\n    print(x_or_y(229, 1, 1))\n    print(x_or_y(231, 1, 1))\n    print(x_or_y(233, 1, 1))\n    print(x_or_y(239, 1, 1))\n    print(x_or_y(241, 1, 1))\n    print(x_or_y(247, 1, 1))\n    print(x_or_y(253, 1, 1))\n    print(x_or_y(257, 1, 1))\n    print(x_or_y(263, 1, 1))\n    print(x_or_y(269, 1, 1))\n    print(x_or_y(271, 1, 1))\n    print",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     x_or_y(13, 2, 5) == 2\nassert     x_or_y(13, 2, 7) == 7\nassert     x_or_y(13, 2, 8) == 5\nassert     x_or_y(13, 2, 9) == 3\nassert     x_or_y(13, 2, 10) == 3\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(x_or_y(n, 1, 2))\nprint(x_or_y(n, 2, 1))\nprint(x_or_y(n, 1, 1))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     double_the_difference([]) == 0\nassert double_the_difference([2,4]) == 1\nassert double_the_difference([1,3,4,5]) == 14\nassert double_the_difference([2,-2,2]) == -1\nassert double_the_difference([2,2,-2]) == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 65
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndouble_the_difference([1, 2, 3, 4, 5]) == 14\nassert double_the_difference([-2, -1, -4, -5]) == -20\nassert double_the_difference([]) == 0\nassert double_the_difference([10]) == 20\nassert double_the_difference([1, 2, 3, 4, 5, 6]) == 34\n",
        "num_ids_2": 27,
        "num_ids_4": 52
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     double_the_difference([1,3,5]) == 5\nassert double_the_difference([1,3,5,7]) == 12\nassert double_the_difference([]) == 0\nassert double_the_difference([-2,-4]) == 12\nassert double_the_difference([-2,-4,-1]) == 5",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     double_the_difference([]) == 0, \\\n    \"double_the_difference([]) should return 0\"\nassert double_the_difference([2, 4, 6, 8]) == 5, \\\n    \"double_the_difference([2, 4, 6, 8]) should return 5\"\nassert double_the_difference([1, 2, 3, 4, 5]) == 14, \\\n    \"double_the_difference([1, 2, 3, 4, 5]) should return 14\"\nassert double_the_difference([10, -2, 3, -4, 5]) == 13, \\\n    \"double_the_difference([10, -2, 3, -4, 5]) should return 13\"\nassert double_the_difference([]) == 0, \\\n    \"double_the_difference([]) should return 0\"\n",
        "num_ids_2": 36,
        "num_ids_4": 84
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     double_the_difference([1, 3, 5]) == 3, '1 + 3 + 5 = 3'\nassert     double_the_difference([]) == 0,'return zero if input empty'\nassert     double_the_difference([1, 2, 3]) == 1, '1 + 2 = 1'\nassert     double_the_difference([2, 5, 1]) == 1, '2 + 5 = 1'\nassert     double_the_difference([-1, 1, -2]) == 0,'return zero if input negative'\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     double_the_difference([0,1,2,3,4,5,6,7,8]) == 0, \"This should be 0\"\nassert     double_the_difference([10, 20, 30, 40, 50, 60]) == 45, \"This should be 45\"\nassert     double_the_difference([0,0,0,0,0,0,0]) == 0, \"This should be 0\"\nassert     double_the_difference([0,-1,0,0,0,0,0]) == 0, \"This should be 0\"\nassert     double_the_difference([1,2,3,4,5,6,7,8,9,10]) == 81, \"This should be 81\"\n",
        "num_ids_2": 68,
        "num_ids_4": 134
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     double_the_difference([]) == 0, \"the empty list should return 0\"\nassert double_the_difference([2]) == 4, \"the list [2] should return 4\"\nassert double_the_difference([2, 3, 4]) == 10, \"the list [2, 3, 4] should return 10\"\nassert double_the_difference([5, 6, 7]) == 28, \"the list [5, 6, 7] should return 28\"\nassert double_the_difference([-1, -2, -3]) == 0, \"the list [-1, -2, -3] should return 0\"\n",
        "num_ids_2": 46,
        "num_ids_4": 110
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncompare
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare([\"1\",\"2\"],[\"2\",\"1\"]) == [1]\nassert     compare([\"1\",\"2\"],[\"1\",\"3\"]) == [0]\nassert     compare([\"1\",\"2\"],[\"2\",\"1\"]) == [0]\nassert     compare([\"1\",\"2\"],[\"2\",\"3\"]) == [-1]\nassert     compare([\"1\",\"2\"],[\"3\",\"1\"]) == [1]\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare([[100,100,100],[0,0,100],[0,0,100],[0,100,100]], \n        [[0,0,0],[100,0,0],[100,0,0],[0,100,0]]) == \n        [[0,0,0],[0,0,0],[0,0,0],[0,0,0]],\n        \"compare error\"\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare([\"2\",\"1\",\"1\",\"2\",\"3\",\"4\",\"3\",\"4\"],[1,2,3,4,5,6,7,8]) == [1,2,0,3,0,2,1,2]\nassert compare([\"1\",\"1\",\"3\",\"3\",\"4\",\"3\",\"4\",\"4\"],[1,2,3,4,5,6,7,8]) == [2,2,0,0,0,0,2,2]\nassert compare([\"2\",\"1\",\"1\",\"2\",\"3\",\"4\",\"3\",\"4\",\"1\",\"2\"],[1,2,3,4,5,6,7,8,9,10]) == [2,1,2,1,0,2,1,2,0,2]\n\n\"\"\"\n\nGiven the following list of scores and marks: \n",
        "num_ids_2": 114,
        "num_ids_4": 182
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare([1,3,4],\n                [1,2,4]) == [0,0,0]\nassert     compare([1,2,3],\n                [1,2,3]) == [0,0,0]\nassert     compare([1,2,3],\n                [1,3,2]) == [0,0,1]\nassert     compare([1,2,3],\n                [1,1,3]) == [0,1,0]\nassert     compare([1,2,3],\n                [1,1,2]) == [0,2,0]\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncompare([1,2,3,4], [2,2,2,2]) == [0,0,0,0]\ncompare([1,2,3,4], [2,2,2,2]) == [1,1,1,1]\ncompare([3,2,1,4], [2,2,2,2]) == [1,1,1,1]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncompare([1,2,3,4,5,6,7],[5,3,1,4,2,6,7]) == [0,2,0,2,1,1,2]\nassert \ncompare([1,2,3,4,5,6,7],[5,3,1,4,2,6,7]) == [0,2,0,2,1,1,2]\nassert \ncompare([1,2,3,4,5,6,7],[1,4,2,3,5,6,7]) == [2,0,0,2,1,0,1]\nassert \ncompare([1,2,3,4,5,6,7],[1,4,2,3,5,6,7]) == [2,0,0,2,1,0,1]\nassert \ncompare([1,2,3,4,5,6,7],[1,4,2,3,5,6,7]) == [2,0,0,2,1,0,1]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert compare(game,guess) == expected\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare(game =     [4,3,5,6],\n                guess =     [2,3,5,6]) ==    [0,2,2,2]\nassert     compare(game =     [4,3,5,6],\n                guess =     [2,3,4,5]) ==    [0,1,0,0]\nassert     compare(game =     [4,3,5,6],\n                guess =     [2,4,5,6]) ==    [1,1,1,1]\nassert     compare(game =     [4,3,5,6],\n                guess =     [1,3,5,6]) ==    [1,1,1,1]\nassert     compare(game =     [4,3,5,6],\n                guess =     [1,2,3,4]) ==    [0,1,1,1]\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare([4, 6, 2, 2, 1, 5], guess = [5, 1, 3, 4, 4]) == [0, 0, 0, 0, 0, 0]\nassert     compare([2, 5, 3, 1, 2, 3], guess = [4, 5, 3, 2, 3, 1]) == [1, 1, 1, 1, 1, 0]\nassert     compare([2, 5, 3, 1, 2, 3], guess = [4, 5, 3, 2, 3, 4]) == [1, 1, 1, 1, 1, 1]\nassert     compare([2, 5, 3, 1, 2, 3], guess = [4, 5, 3, 1, 2, 5]) == [1, 1, 1, 1, 1, 2]\nassert     compare([2, 5, 3, 1, 2, 3], guess = [4, 5, 3, 2, 3, 4]) == [1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 92,
        "num_ids_4": 186
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef Child_Dependency(class_name, dependencies):\n    \"\"\"You will be given the name of a class (a string) and a list of dependencies.\n    The dependencies are to be used to load additional classes to the class. The\n    strength of the dependency is as follows: Let CAP be the number of the uppercase\n    letters in the dependency's name, and let SM be the number of lowercase letters\n    in the dependency's name. If the string in the dependency is a class name, \n    it is to be used to load the class. If the string in the dependency is a module\n    name, it is to be used to import that module. You should find the child dependency\n    and return a string in this format: ModuleName.ClassName.\n    If there are two or more dependencies with the same strength, you should choose\n    the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the dependencies:\n    ['SErviNGSlices', 'Cheese', 'StuFfed'] then you should return 'Slices.SErviNGSlices'.\n    Note: The order of the dependencies in the list is not important.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Slices', 'Cheese', 'Slices']) == 'Slices.Slices'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Slices', 'Cheese']) == 'Slices.Cheese'\n\n\n",
        "num_ids_2": 51,
        "num_ids_4": 129
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Cheese\"\nassert Strongest_Extension(\"Cheese\", [\"SErviNGSliCes\", \"Cheese\", \"Slices\"]) == \"Cheese\"\n\ndef Extract_Smallest_Value(class_name, numbers):\n    \"\"\"You will be given the name of a class (a string) and a list of numbers. \n    The numbers are to be used to find the smallest value and return this value \n    as a float.\n    Example: If you are given a list of numbers like this: 1, 4, 7, -10, -3, \n    then you should find the smallest value and return 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 86,
        "num_ids_4": 122
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"Slices\", \"Slicer\", \"Slices\"]) == \"Slices.Slices\"\nassert     Strongest_Extension(\"Bagels\", [\"bagels\", \"bagel\", \"bagels\"]) == \"bagels.bagels\"\nassert     Strongest_Extension(\"Eggs\", [\"eggs\", \"Eggs\", \"Eggs\"]) == \"Eggs.Eggs\"\nassert Strongest_Extension(\"Slices\", [\"Slices\", \"Slices\"]) == \"Slices.Slices\"\nassert Strongest_Extension(\"Slices\", [\"Slices\"]) == \"Slices\"\n",
        "num_ids_2": 73,
        "num_ids_4": 144
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef Save(class_name, class_dict):\n    \"\"\"You will be given a class name and a dictionary of attributes. \n    Save the class, given the dictionary.\n    You should only use the attributes in the dictionary (other than the class name).\n    No need to write any print statements, just call the class' \"save\" method.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Strongest_Extension(    \"Slices\", \n                                    [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] ) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(    \"Fruit\", \n                                    [\"FRuT\", \"Fruit\", \"FRUiT\", \"FruitS\"] ) == \"FRuT.FRUiT\"\nassert     Strongest_Extension(    \"Car\", \n                                    [\"Car\", \"CAR\", \"CAr\"] ) == \"CAR.CAr\"\nassert     Strongest_Extension(    \"Sugar\", \n                                    [\"Sug\", \"Sug\", \"SuGa\"] ) == \"Sug.SuGa\"\nassert     Strongest_Extension(    \"Color\", \n                                    [\"CReR\", \"COrN\", \"CoRn\"] ) == \"COrN.CoRn\"\n",
        "num_ids_2": 31,
        "num_ids_4": 60
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef Sum_of_Primes(a, b):\n    \"\"\"You are given two positive integers a and b. You should return the sum of\n    the two prime numbers with the smallest difference.\n    A prime difference is the difference between a prime and any other prime number \n    greater than a.\n    For example, the sum of the primes with the smallest difference is 2 + 3 = 5 \n    because there are three prime differences 1, 3 and 5.\n    If there is not such a sum, return -1.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \na = \"pop\"\nb = \"popop\"\nprint(cycpattern_check(a, b))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check('rail fence','railfence')\nassert     cycpattern_check('aabb', 'xyx')\nassert     cycpattern_check('aabb', 'aabX')\nassert     cycpattern_check('aabb', 'abXa')\nassert     cycpattern_check('aabb', 'abXabc')\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cycpattern_check('waterbottle','erbottlewat') == True\nassert     cycpattern_check('waterbottle','erbottle') == True\nassert     cycpattern_check('waterbottle','erbottl') == False\nassert     cycpattern_check('waterbottle','erbottleea') == True\nassert     cycpattern_check('waterbottle','erbottlee') == False\n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cycpattern_check(\"chimichangenot\", \"chimichangenot\") == True\nassert     cycpattern_check(\"albananot\", \"albananot\") == True\nassert     cycpattern_check(\"abacabasott\", \"acabac\") == True\nassert     cycpattern_check(\"abacabasott\", \"acabacab\") == False\nassert     cycpattern_check(\"aabbaaacabbabaaaacabb\", \"aaaaaab\") == True\n",
        "num_ids_2": 48,
        "num_ids_4": 93
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"banana\",\"bnana\") == True, \"Test case 1\"\nassert     cycpattern_check(\"hello\",\"hello\") == True, \"Test case 2\"\nassert     cycpattern_check(\"hello\",\"heho\") == False, \"Test case 3\"\nassert     cycpattern_check(\"hi\",\"hi\") == True, \"Test case 4\"\nassert     cycpattern_check(\"\",\"\") == True, \"Test case 5\"\n",
        "num_ids_2": 44,
        "num_ids_4": 87
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cycpattern_check('hello','world') == True\nassert     cycpattern_check('good','good') == True\nassert     cycpattern_check('a','a') == True\nassert     cycpattern_check('a','aa') == True\nassert     cycpattern_check('a','aaaa') == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cycpattern_check(\"aab\",\"b\") == True \nassert     cycpattern_check(\"ab\",\"ba\") == False\nassert     cycpattern_check(\"abc\",\"abcd\") == False\nassert     cycpattern_check(\"a\",\"b\") == False\nassert     cycpattern_check(\"\",\"\") == True\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cycpattern_check(\"abcdefg\", \"cdefgab\") == True\nassert     cycpattern_check(\"abcdefg\", \"cdefga\") == False\nassert     cycpattern_check(\"abcdefg\", \"\") == True\nassert     cycpattern_check(\"\", \"abcdefg\") == False\n",
        "num_ids_2": 41,
        "num_ids_4": 75
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_count(2) == (2,0)\nassert     even_odd_count(1) == (1,0)\nassert     even_odd_count(10) == (1,9)\nassert     even_odd_count(1023) == (2,9)\nassert     even_odd_count(1123) == (2,9)\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_count(100) == (2, 2)\nassert     even_odd_count(12) == (0, 2)\nassert     even_odd_count(123) == (1, 2)\nassert     even_odd_count(1234) == (0, 2)\nassert     even_odd_count(12345) == (0, 2)\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_count(99) == (3, 3)\nassert     even_odd_count(100) == (1, 2)\nassert     even_odd_count(42) == (2, 1)\nassert     even_odd_count(10) == (2, 0)\nassert     even_odd_count(101) == (1, 3)\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_count(4) == (1, 2)\nassert even_odd_count(5) == (0, 1)\nassert even_odd_count(42) == (2, 2)\n",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_count(125) == (2, 4), \"incorrect value\"\nassert     even_odd_count(123) == (1, 3), \"incorrect value\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_count(1023) == (3, 1)\nassert     even_odd_count(1234) == (0, 2)\nassert     even_odd_count(5678) == (1, 2)\nassert     even_odd_count(8989) == (0, 1)\nassert     even_odd_count(23456) == (2, 0)\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(10) == 'X'\nassert     int_to_mini_roman(100) == 'C'\nassert     int_to_mini_roman(1000) == 'M'\nassert     int_to_mini_roman(2000) == 'CC'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(9) == \"IX\"\nassert     int_to_mini_roman(10) == \"X\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(9) == \"IX\"\nassert     int_to_mini_roman(48) == \"LVIII\"\nassert     int_to_mini_roman(1994) == \"MCMXCIV\"\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(9) == \"IX\"\nassert     int_to_mini_roman(10) == \"X\"\nassert     int_to_mini_roman(27) == \"XXVII\"\nassert     int_to_mini_roman(28) == \"XXVIII\"\nassert     int_to_mini_roman(375) == \"CDXLV\"\n",
        "num_ids_2": 34,
        "num_ids_4": 71
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(8) == \"VIII\"\nassert     int_to_mini_roman(19) == \"XIX\"\nassert     int_to_mini_roman(20) == \"XX\"\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(10) == \"X\"\nassert     int_to_mini_roman(100) == \"C\"\nassert     int_to_mini_roman(1000) == \"M\"\nassert     int_to_mini_roman(29) == \"IX\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(10) == 'X'\nassert     int_to_mini_roman(100) == 'C'\nassert     int_to_mini_roman(1000) == 'M'\nassert     int_to_mini_roman(2000) == 'MM'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"All tests passed\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(1, 2, 3) == True, 'Should be True'\nassert     right_angle_triangle(2, 3, 4) == False, 'Should be False'\nassert     right_angle_triangle(2, 1, 4) == False, 'Should be False'\nassert     right_angle_triangle(1, 4, 3) == False, 'Should be False'\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     right_angle_triangle(4, 7, 8) == True\nassert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(2, 3, 4) == False\n\nprint('PASSED ALL TESTS!')\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(3, 5, 4) == False\nassert     right_angle_triangle(5, 3, 4) == True\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_max([\"vibhuti\", \"chinmay\", \"rahul\", \"ram\"]) == \"vibhuti\"\nassert     find_max([\"vibhuti\", \"chinmay\", \"rahul\", \"sabha\"]) == \"sabha\"\nassert     find_max([\"vibhuti\", \"chinmay\", \"rahul\", \"sabha\", \"ram\", \"ram\", \"ram\"]) == \"vibhuti\"\nassert     find_max([\"vibhuti\", \"chinmay\", \"rahul\", \"sabha\", \"ram\", \"sabha\", \"ram\"]) == \"vibhuti\"\nassert     find_max([\"vibhuti\", \"chinmay\", \"rahul\", \"sabha\", \"ram\", \"sabha\", \"ram\", \"rahul\"]) == \"vibhuti\"\n",
        "num_ids_2": 65,
        "num_ids_4": 153
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_max([ \"apple\", \"banana\", \"grape\", \"grape\", \"mango\" ]) == \"grape\", \"Fail\"\nassert     find_max([ \"apple\", \"banana\", \"grape\", \"grape\", \"mango\" ] ) == \"banana\", \"Fail\"\nassert     find_max([ \"apple\", \"banana\", \"grape\", \"grape\", \"mango\", \"mango\" ] ) == \"mango\", \"Fail\"\nassert     find_max([ \"apple\", \"banana\", \"grape\", \"grape\", \"mango\", \"mango\" ] ) == \"apple\", \"Fail\"\nassert     find_max([ \"apple\", \"banana\", \"grape\", \"grape\", \"mango\", \"mango\" ] ) == \"grape\", \"Fail\"\n",
        "num_ids_2": 71,
        "num_ids_4": 150
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_max([]) == ''\nassert     find_max([\"hello\"]) == 'hello'\nassert     find_max([\"hello\", \"world\"]) == 'world'\nassert     find_max([\"helloworld\", \"hello\"]) == 'hello'\nassert     find_max([\"hello\", \"helloworld\"]) == 'hello'\n",
        "num_ids_2": 25,
        "num_ids_4": 63
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_min(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with minimum number\n    of unique characters. If multiple strings have minimum number of unique\n    characters, return the one which comes last in lexicographical order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_max(['helloworld', 'helloworld', 'helloworld']) == 'helloworld', 'Function does not return correct value.'\nassert     find_max(['helloworld', 'helloworld', 'helloworld', 'helloworld', 'helloworld', 'helloworld']) == 'helloworld', 'Function does not return correct value.'\nassert     find_max(['hello', 'hello', 'hello', 'hello', 'hello', 'hello']) == 'hello', 'Function does not return correct value.'\n",
        "num_ids_2": 89,
        "num_ids_4": 127
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_max(['boulder', 'banana', 'cave', 'cave', 'car', 'car']) == 'car'\nassert    find_max(['boulder', 'banana', 'cave', 'cave', 'car', 'caterpillar']) == 'cave'\nassert    find_max(['boulder', 'banana', 'car', 'cave', 'cave', 'car']) == 'car'\n",
        "num_ids_2": 71,
        "num_ids_4": 105
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_max(['python', 'pythoner', 'pythoner', 'python', 'java', 'python']) == 'python', \\\n        'Wrong result'\n",
        "num_ids_2": 33,
        "num_ids_4": 33
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_max(['python', 'python', 'python', 'python', 'python']) == 'python'\nassert     find_max(['python', 'python', 'python', 'python', 'python', 'python']) == 'python'\nassert     find_max(['python', 'python', 'python', 'python', 'python', 'python', 'python', 'python']) == 'python'\nassert     find_max(['python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'python', 'pytho",
        "num_ids_2": 57,
        "num_ids_4": 1025
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_max(['Hi', 'Hello', 'Bye', 'Bye', 'Hello', 'Hi']) == 'Hi'\n\nassert \nfind_max(['Bye', 'Hi', 'Hi', 'Bye', 'Bye', 'Hi']) == 'Hi'\n\nassert \nfind_max(['Hello', 'Bye', 'Hi', 'Hi', 'Bye', 'Hello']) == 'Hi'\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eat(1, 2, 3) == [4, 3]\nassert     eat(0, 3, 4) == [4, 0]\nassert     eat(0, 0, 1) == [1, 0]\nassert     eat(1, 0, 0) == [0, 0]\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eat(2,    3,    5) == [6,    3], \"Should be: 6, 3\"\nassert     eat(3,    5,    5) == [5,    0], \"Should be: 5, 0\"\nassert     eat(5,    1,    2) == [6,    0], \"Should be: 6, 0\"\nassert     eat(3,    2,    5) == [5,    1], \"Should be: 5, 1\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eat(1, 1, 2) ==    [1, 2]\nassert     eat(1, 1, 0) ==    [1, 0]\nassert     eat(1, 2, 0) ==    [1, 0]\nassert     eat(1, 2, 2) ==    [0, 2]\n\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == '__main__':\n    print(\"Test 1 - Success\")\n    assert eat(0, 0, 1000) == [0, 1000]\n    assert eat(100, 100, 1000) == [100, 0]\n    assert eat(200, 200, 1000) == [200, 0]\n    assert eat(500, 500, 1000) == [500, 0]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eat(0,10,10) ==    [ 0, 10 ]\nassert     eat(1,10,10) ==    [ 1, 10 ]\nassert     eat(2,10,10) ==    [ 2, 10 ]\nassert     eat(3,10,10) ==    [ 3, 10 ]\nassert     eat(4,10,10) ==    [ 4, 10 ]\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eat(3, 3, 4) == [[3, 1], [3, 1], [3, 1]]\nassert eat(3, 2, 4) == [[3, 1], [3, 1], [3, 1]]\nassert eat(1, 3, 4) == [[1, 1], [1, 1], [1, 1]]\nassert eat(10, 5, 2) == [[10, 2], [10, 2], [10, 2]]\nassert eat(10, 10, 3) == [[10, 2], [10, 2], [10, 2]]\n",
        "num_ids_2": 53,
        "num_ids_4": 105
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(eat(1, 100, 100))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eat(1, 5, 1) == [5, 5]\nassert     eat(1, 6, 1) == [6, 0]\nassert     eat(1, 1, 2) == [1, 2]\nassert     eat(2, 2, 2) == [2, 0]\nassert     eat(3, 1, 2) == [1, 2]\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(f'{eat(100, 200, 1)} should print as: ')\n    print(f'[180, 100]')\n    print(f'{eat(100, 100, 1)} should print as: ')\n    print(f'[140, 100]'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     do_algebra([+, -, *, //], [1, 2, 3, 4]) == 5\nassert     do_algebra([+, -, *, //], [1, -2, 3, 4]) == -1\nassert     do_algebra([+, -, *, //], [-1, -2, 3, 4]) == -2\nassert     do_algebra([+, -, *, //], [1, 2, 3, 4, 5]) == 1\nassert     do_algebra([+, -, *, //], [-1, -2, 3, 4, 5]) == 0\n",
        "num_ids_2": 54,
        "num_ids_4": 110
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     do_algebra([1, 2, 3, \"*\"], [2, 3, 4]) == 58\nassert     do_algebra([1, 2, 3, \"//\"], [2, 3, 4]) == 2\nassert     do_algebra([1, 2, 3, \"//\"], [1, 2, 3]) == 1\nassert     do_algebra([1, 2, 3, \"//\"], [0, 1, 2]) == 1\nassert     do_algebra([1, 2, 3, \"//\"], [1, 3, 1]) == 3\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndo_algebra([1, 2, 3], [1, 2]) == 6\nprint(\"\\033[32m\" + \"Test pass\" + \"\\033[0m\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef do_reverse_polish_notation(calculation_string):\n    \"\"\"\n    Using the given string to calculate an expression in reverse polish notation.\n    The expression is in a format of '9 + 1 - 5 * 5 / 2 + 2 - 1' (which is the same format\n    of the calculation in the question) with the following operations:\n    1) Addition ( + ) \n    2) Subtraction ( - ) \n    3) Multiplication ( * ) \n    4) Floor division ( // ) \n    5) Exponentiation ( ** ) \n\n    Note:\n        1) The length of calculation_string is equal to the length of \n           calculation_string minus one.\n        2) The calculation_string has at least one operator, and calculation_string has at least \n           two operands.\n        3) The operand in the calculation_string is a list of of non-negative integers.\n\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert solve(\"Hello\") == \"hELLO\"\n    assert solve(\"abCdEF\") == \"bCDEFa\"\n    assert solve(\"\") == \"\"\n    print(\"You passed all the tests!\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert solve(\"Abc\") == \"cba\"\nassert solve(\"Abc\") == \"cba\"\nassert solve(\"ab\") == \"ab\"\n",
        "num_ids_2": 15,
        "num_ids_4": 37
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solve('') == ''\nassert     solve('A') == 'a'\nassert     solve('AbC') == 'bC'\nassert     solve('Hello') == 'oDlHiE'\nassert     solve('a1bc3') == '3cba1'\n",
        "num_ids_2": 22,
        "num_ids_4": 52
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solve(\"No letters\") == \"No letters\"\nassert     solve(\"\") == \"\"\nassert     solve(\"a\") == \"a\"\nassert     solve(\"Abc\") == \"Abc\"\nassert     solve(\"abc\") == \"Abc\"\n",
        "num_ids_2": 23,
        "num_ids_4": 49
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solve(\"abc\") == \"cba\", \"Wrong\"\nassert     solve(\"a\") == \"a\", \"Wrong\"\nassert     solve(\"\") == \"\", \"Wrong\"\nassert     solve(\"abcde\") == \"cdeab\", \"Wrong\"\nassert     solve(\"aBcdE\") == \"AbCDE\", \"Wrong\"\n",
        "num_ids_2": 33,
        "num_ids_4": 66
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (solve('a') == 'a'), 'Not Done'\nassert     (solve('ab') == 'ab'), 'Not Done'\nassert     (solve('aabc') == 'abcba'), 'Not Done'\nassert     (solve('aab') == 'aab'), 'Not Done'\nassert     (solve('abc') == 'abc'), 'Not Done'\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert solve(\"HELLO\") == \"oULleh\"\nassert solve(\"HEL\") == \"hel\"\nassert solve(\"HE\") == \"eH\"\nassert solve(\"H\") == \"H\"\n",
        "num_ids_2": 18,
        "num_ids_4": 40
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve('apple') == 'APPLE'\nassert     solve('banana') == 'bANAAN'\nassert     solve('predictable') == 'treatablepTAbLe'\nassert     solve('') == ''\nassert     solve('a') == 'a'\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve('a') == 'a'\nassert     solve('A') == 'a'\nassert     solve('aA') == 'Aa'\nassert     solve('Aa') == 'Aa'\nassert     solve('ab') == 'ab'\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (string_to_md5('http://www.baidu.com') == '16a7799e9c7f8b3739b4a6d5f0f39a66a2933f8')\nassert     (string_to_md5('http://www.baidu.com') == '16a7799e9c7f8b3739b4a6d5f0f39a66a2933f8')\nassert     (string_to_md5('') is None)\nassert     (string_to_md5(None) is None)\nassert     (string_to_md5('http://www.baidu.com') == '16a7799e9c7f8b3739b4a6d5f0f39a66a2933f8')\n",
        "num_ids_2": 108,
        "num_ids_4": 140
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"a\")     == \"9d0d4d5bd9d20a6b23ab2eb8fcf72e46\"\nassert     string_to_md5(\"\")     == None\nassert     string_to_md5(\"abc\")     == \"d31dccd5c5ae0c1d8c9b6d1f7b220b2\"\nassert     string_to_md5(\"abcdef\")     == \"85ed6f9bf9ae6c5b8a5ebcd7c7d82be1\"\nassert     string_to_md5(\"abcdefgh\")     == \"5d93e9fd6f2e963909f52a3e5ecb6e9b\"\n",
        "num_ids_2": 54,
        "num_ids_4": 137
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_md5(None) == None\nassert     string_to_md5('') == None\nassert     string_to_md5('Hello') == 'a0b0c0d0'\nassert     string_to_md5('abcd') == 'd0e0f0d'\nassert     string_to_md5('Hello, world!') == 'f6464c5945a9fa09e3ea20dde5cada0'\n",
        "num_ids_2": 28,
        "num_ids_4": 74
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_md5('md5') == '2878281079f01b5dde3616e7cda69e7d'\nassert     string_to_md5('1234') == 'c9b8bdf7e3e0c89d3c6c8b8a8a5a8b'\nassert     string_to_md5('') == None\nassert     string_to_md5('1234') == 'c9b8bdf7e3e0c89d3c6c8b8a8a5a8b'\nassert     string_to_md5('hello') == '5d7b28ebf5fb6c2de52a6b06bb81f28a'\n",
        "num_ids_2": 81,
        "num_ids_4": 139
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_md5('Hello') == 'a53f963f5e0f64e4c3d6c4e5a6b4245'\nassert     string_to_md5('abc') == '9ae20f7c45856ad7e47c98cc9e27b7d5'\nassert     string_to_md5('') is None\nassert     string_to_md5('Hello123') == '5028acd70f9f2bbadc5a5d5f0cec9a5'\n",
        "num_ids_2": 78,
        "num_ids_4": 132
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_md5('hello') == 'b2c2f5087d86c55c4f2522a8f6d4b16d'\nassert     string_to_md5('not hello') == None\nassert     string_to_md5('not hello!!') == None\nassert     string_to_md5('') == None\nassert     string_to_md5('hello\\n') == None\n",
        "num_ids_2": 55,
        "num_ids_4": 85
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_md5(text):\n    \"\"\"\n    Given a string 'text', return True if text is a md5 hash.\n    Otherwise, return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_md5_for_text(text, md5_hash):\n    \"\"\"\n    Given a string 'text' and an md5 hash'md5_hash', return True if 'text'\n    is a md5 hash of 'text', False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     generate_integers(3, 9) == [2,4,6,8]\nassert     generate_integers(1, 10) == [2,4,6,8,10]\nassert     generate_integers(3, 5) == [2,4,6]\nassert     generate_integers(6, 10) == [8,10]\n",
        "num_ids_2": 48,
        "num_ids_4": 88
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert generate_integers(2, 4) == [2,2]\nassert generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\nassert generate_integers(-5, 0) == [0, -1, -2, -3, -4]\n",
        "num_ids_2": 20,
        "num_ids_4": 72
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(generate_integers(1, 10))\nassert generate_integers(5, 10) == range(6)\nassert generate_integers(10, 50) == range(2, 13, 2)\nassert generate_integers(50, 70) == range(11, 43, 2)\nassert generate_integers(55, 80) == range(11, 63, 2)\n",
        "num_ids_2": 19,
        "num_ids_4": 59
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert generate_integers(5, 7) == [2, 4]\nassert generate_integers(0, 4) == [0, 2, 4]\nassert generate_integers(2, 5) == [2, 4]\n",
        "num_ids_2": 20,
        "num_ids_4": 56
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     generate_integers(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     generate_integers(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n",
        "num_ids_2": 246,
        "num_ids_4": 246
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(1, 20) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n",
        "num_ids_2": 58,
        "num_ids_4": 173
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\nassert generate_integers(5, 15) == [6, 8, 10, 12, 14]\n",
        "num_ids_2": 28,
        "num_ids_4": 51
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    }
]