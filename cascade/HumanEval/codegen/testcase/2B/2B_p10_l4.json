[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     has_close_elements([3, 7, 9], 2)\nassert     not has_close_elements([3, 7, 9], 3)\nassert     has_close_elements([3, 7, 9, 11], 2)\nassert     not has_close_elements([3, 7, 9, 11], 3)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     has_close_elements([0, 1, 2, 3], 2) == False\nassert     has_close_elements([0, 1, 2, 3], 1) == False\nassert     has_close_elements([0, 1, 2, 3], 4) == True\nassert     has_close_elements([0, 1, 2, 3], -4) == False\nassert     has_close_elements([1, 2, 3, 4], 1) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 1.1))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 1.2))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 1.3))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 1.4))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 1.5))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 1.6))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 1.7))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 1.8))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 2.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 3.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 4.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 5.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 6.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 7.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 8.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 9.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 10.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 11.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 12.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 13.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 14.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 15.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 16.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 17.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 18.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 19.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 20.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 21.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 22.0))\nprint(has_close_elements([1.3, 1.5, 1.4, 1.7, 1.6], 23.0))\nprint"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nhas_close_elements([-1, 2, 1, -4, -3], 2) == True\nassert has_close_elements([-1, 2, 1, -4, -3], 1) == False\n\ndef distance_to_close_element(numbers: List[float], threshold: float) -> int:\n    \"\"\" Calculate the distance to the closest element in given list of numbers\n    that is smaller than the given threshold.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not has_close_elements([1, 2, 3, 4, 5, 6, 7], threshold=0.1)\nassert not has_close_elements([1, 2, 3, 4, 5, 6, 7], threshold=0.2)\nassert has_close_elements([1, 2, 3, 4, 5, 6, 7], threshold=0.5)\nassert has_close_elements([1, 2, 3, 4, 5, 6, 7], threshold=1)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     has_close_elements([1,2,3], 1) == True\nassert     has_close_elements([1,2,3], 2) == False\nassert     has_close_elements([1,2,3], 3) == False\nassert     has_close_elements([1,2,3], 4) == True\nassert     has_close_elements([1,2,3], 5) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     has_close_elements([0.0, 0.0, 0.0, 0.0, 0.0], threshold=0.0)\nassert not has_close_elements([0.0, 0.0, 0.0, 0.0], threshold=1.0)\nassert not has_close_elements([-1.0, -1.0, -1.0, -1.0], threshold=1.0)\nassert not has_close_elements([-1.0, -1.0, -1.0, -1.0], threshold=2.0)\nassert has_close_elements([0.0, 0.0, 0.0, 0.0, 0.0], threshold=3.0)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4], 0.1) == True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4], 0.2) == False\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4], 0.3) == True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4], 0.4) == False\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4], 0.5) == True\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"()\") == [\"()\"]\nassert     separate_paren_groups(\"(())\") == [\"(())\"]\nassert     separate_paren_groups(\"()(()())\") == [\"()(()())\"]\nassert     separate_paren_groups(\"(()(()))\") == [\"(()(()))\"]\nassert     separate_paren_groups(\"(((())\") == None\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"((()()))\") == [\"((()))\"], \"test 1\"\nassert     separate_paren_groups(\"((()())\") == [\"((()()))\"], \"test 2\"\nassert     separate_paren_groups(\"(()(((()))))\") == [\"(()(((())))]\", \"(()(((())))\"], \"test 3\"\nassert     separate_paren_groups(\"()(((()((((())())))))()(()))\") == [\"()(((()((((())())))))()(()))\"], \"test 4\"\nassert     separate_paren_groups(\"((()()()(()((()()))))((((()))(()()()()((()()))))))\") == \\\n    [\"((()()()(()((()()))))((((()))(()()()()((()()))))))\",\n        \"((()()()(()((()()))))((((()))(()()()()((()()))))))\",\n        \"((()()()(()((()()))))((((()))(()()()()((()()))))))\",\n        \"((()()()(()((()())))\",\n        \"(()((()))(()))(()((()()))\",\n        \"()((()()))(()()()()((()()))\",\n        \"(()(()))(()()(()()(()()))\",\n        \"()((()()()))(()()(()()((()()))\",\n        \"(()((()())))(()()(()()((()()))\",\n        \"((()()))(()()(()()(()()((()()))\",\n        \"()(()((()()))(()()(()()(()()()(()()))\",\n        \"()(()(()()))(()()(()()((()()))\",\n        \"()(()(()()))(()()(()()((()()))\",\n        \"()(()(()()))(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()((()()))\",\n        \"()(()(()()))(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()))))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()())))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(()()))(()()(()()(()()(()()(()()(()()(()()))\",\n        \"()(()(("
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups('(((((') == ['((', '((', '']\nassert     separate_paren_groups('(()))((()') == ['(', '()', '']\nassert     separate_paren_groups('(((()))') == ['((', '())']\nassert     separate_paren_groups('((((())(' == ['((', '()()', '']\nassert     separate_paren_groups('(((((())(' == ['((', '()()', '']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"( )\") == [\"\"]\nassert     separate_paren_groups(\"() ( )\") == [\"( )\"]\nassert     separate_paren_groups(\"( ) ( ) )\") == [\"( ) ( ) ]\"]\nassert     separate_paren_groups(\"( ) ( ) ( ) )\") == [\"( ) ( ) ]\", \"( ) ( ) ]\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     separate_paren_groups('()(())())') == ['()', '()()', '())']\nassert     separate_paren_groups('()(((()()((()')) == ['()', '()()', '((()()((()', '))'])\nassert     separate_paren_groups('()(())())()(()())') == ['()', '()()', '(()()((()', '))'])\nassert     separate_paren_groups('(())(())(()(()()()((()))()') == ['()', '()()', '(()', '()()()']\n\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"(()((((())))())(((((()))))\") == ['((((())))())(((((()))))']\nassert     separate_paren_groups(\"(()())(())(()(()))\") == ['((()()))()', '(()(()))', '(()()()', '(()())']\nassert     separate_paren_groups(\"(()()(()))\") == ['((()()(())))', '(()()())', '(()(()))']\nassert     separate_paren_groups(\"()())\") == ['()())', '()()']\nassert     separate_paren_groups(\"()()\") == ['(())', '()()']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"(()())()\") == ['(()())()']\nassert     separate_paren_groups(\"(()())()(()(()))\") == ['(()())()', '(()(()))']\nassert     separate_paren_groups(\"((()))\") == ['((()))']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"(()())(())\") == [\"(()())()\", \"()\"]\nassert     separate_paren_groups(\"(()())(())()(())(())\") == [\"(()())()\", \"(())(())\", \"(())(())()\", \"()(())((()))\"]\nassert     separate_paren_groups(\"()(())(())\") == [\"(())(())((()))\"]\n\ndef check_string_parentheses(string: str) -> bool:\n    \"\"\" Given a string, check if it is properly nested.\n    \n    For example:\n    *  \"\"  =>  False\n    *  \"((())\" => False\n    *  \"(()))\" => False\n    *  \"()\" => True\n    *  \"(\" => False\n    *  \")\" => True\n    *  \"(()))\" => True\n    *  \"(())()\" => True\n    *  \"(()(()))\" => True\n    *  \"(()())(())\" => True\n    *  \"()(()(()))\" => True\n    *  \"()(()())()\" => True\n    *  \"()(()()(()))\" => True\n    *  \"()()(()())()(()())\" => True\n    *  \"()()(()())()(()())\" => True\n    *  \"(()())()(()())()(()(()))\" => True\n    *  \"(()())()()(()(()))\" => True\n    *  \"(()(()()))\" => True\n    *  \"()(()(()()))\" => True\n    *  \"(()(()(()())))\" => True\n    *  \"(()(()(()()(()())))\" => True\n    *  \"(()(()(()()(()())))\" => True\n    *  \"(()(()(()()(()(()())))))()()(()()()\" => True\n    *  \"()()((()(()()(()(()())()(()()))))()()(()()()(()()))\" => True\n
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups('()(()()((()())))(((((())))())((((()())))))') == \\\n        ['()(()())((()()))', '()((()()))', '((((())))())((((()())))))']\nassert separate_paren_groups('()(()())') == ['()(()())']\nassert separate_paren_groups('(()(()))') == ['(()(()))']\nassert separate_paren_groups('(((())))') == ['(((())))']\nassert separate_paren_groups('(())') == ['()()']\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     truncate_number(9.99) == 0\nassert    truncate_number(9.98) == 0\nassert    truncate_number(9.97) == 0\nassert    truncate_number(9.96) == 0\nassert    truncate_number(9.95) == 0\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     truncate_number(0.125) == 0\nassert     truncate_number(3.125) == 3\nassert     truncate_number(3.99) == 3\nassert     truncate_number(4.99) == 4\nassert     truncate_number(5.99) == 5\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert truncate_number(12.345) == 3\nassert truncate_number(12.3456) == 3\nassert truncate_number(12.34567) == 3\nassert truncate_number(12.345678) == 3\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     truncate_number(0.9) == 0.9\nassert     truncate_number(1) == 1\nassert     truncate_number(1.9) == 1\nassert     truncate_number(2) == 2\nassert     truncate_number(2.1) == 2\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     truncate_number(1.2) == 1.2\nassert     truncate_number(1.23456789) == 1.234567\nassert     truncate_number(1.1) == 1.1\nassert     truncate_number(1.1) == 1.1\n\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     truncate_number(1.1) == 1\nassert     truncate_number(1.12) == 1\nassert     truncate_number(1.01) == 0\nassert     truncate_number(1.001) == 0\nassert     truncate_number(1.001) == 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     truncate_number(9.999999999) == 9.9999999999999999\nassert     truncate_number(9) == 9\nassert     truncate_number(9.5) == 9\nassert     truncate_number(9.5000000000000005) == 9\nassert     truncate_number(9.9999999999999) == 9\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     truncate_number(0.3) == 0\nassert     truncate_number(0.7) == 0\nassert     truncate_number(1.3) == 1\nassert     truncate_number(2.7) == 1\nassert     truncate_number(3.9) == 2\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert below_zero([2, 3, 5])\nassert below_zero([0, 2, 3])\nassert below_zero([2, 3, 4])\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_zero([4, -3, 5, 4, -2]) == True\nassert below_zero([-1, -5, -5]) == True\nassert below_zero([2, 2, 2, -5, -3]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nbelow_zero([\n    [1, -2],\n    [1, 2],\n    [1, -3],\n    [1, 2],\n    [1, -4],\n    [1, -2],\n    [1, 2]\n]) == True\n\nassert below_zero([\n    [1, -2],\n    [1, -3],\n    [1, 2],\n    [1, -4],\n    [1, 2],\n    [1, -2],\n    [1, 2]\n]) == False\n\nassert below_zero([\n    [1, -2],\n    [1, 3],\n    [1, 2],\n    [1, 3],\n    [1, 2],\n    [1, 2],\n    [1, 2],\n    [1, -2],\n    [1, 2],\n    [1, 3],\n    [1, -2],\n    [1, 2]\n]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_zero([0,1,0,2,3]) is True\nassert     below_zero([0,1,0,2,3,-5]) is False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_zero([0, 0]) is True\nassert     below_zero([0, 1]) is False\nassert     below_zero([-1, -1]) is True\nassert     below_zero([-1, -2]) is False\nassert     below_zero([1, 0]) is False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_balanced(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    \n    # initial balance\n    bal = 0\n\n    # moving along operations\n    for operation in operations:\n\n        # deposit\n        if operation == 1:\n            bal += 1\n\n        # withdrawal\n        elif operation == 2:\n            bal -= 1\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_min_max_bank_balances(operations: List[int]) -> int:\n    \"\"\" There is only one deposit operation in operations (i.e., bank balance is 0 at the end of the\n    list).\n    For each of the following expressions, return the minimum and maximum bank balances after the\n    first operation.\n\n    bank_balance = 0\n    bank_balance += 10\n    bank_balance += 20\n    bank_balance += 30\n    bank_balance -= 10\n    bank_balance -= 20\n    bank_balance -= 30\n    bank_balance = bank_balance % 1\n\n    bank_balance = 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n\n    bank_balance = 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n    bank_balance += 10\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_zero([-1, 2, 3])        == False, \\\n                \"Wrong answer for below_zero([-1, 2, 3]): Expected False, got True\"\nassert     below_zero([-1, -1, 1])        == True, \\\n                \"Wrong answer for below_zero([-1, -1, 1]): Expected True, got False\"\nassert     below_zero([1, 2, -3])        == False, \\\n                \"Wrong answer for below_zero([1, 2, -3]): Expected False, got True\"\nassert     below_zero([-1, -1, 1, -1])    == True, \\\n                \"Wrong answer for below_zero([-1, -1, 1, -1]): Expected True, got False\"\n\n\ndef max_in_list(arr: List[int]) -> int:\n    \"\"\"Given a list of integers, return the max element. If the list is empty, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     below_zero([0, -1, 1, 1, -2]) == False\nassert     below_zero([0, 1, -2, 1, 1]) == False\nassert     below_zero([0, 1, -2, 1, 1, 1]) == False\nassert     below_zero([-2, 0, 1, 1, 1]) == True\nassert     below_zero([0, 1, -1, 1, 1]) == True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef variance_of_sample_mean(sample_mean: float, numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Variance of Sample Mean\n    around the sample mean of this dataset.\n    Variance of Sample Mean is the sum of square deviations from the sample mean\n    to each of the sample.\n    Variance of Sample Mean is the average of the squared distance between each\n    element and the sample mean (in this case):\n    Variance of Sample Mean =  SUM(i - x_mean)^2 / n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert mean_absolute_deviation([1, 2, 3]) == 1\nassert mean_absolute_deviation([0.5, 0.5]) == 0.25\nassert mean_absolute_deviation([2.1, 2.2]) == 0.5\nassert mean_absolute_deviation([2, 2, 2]) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert mean_absolute_deviation([3,4,2,7]) == 4.75\nassert mean_absolute_deviation([3,4,2,7,0]) == 5.0\nassert mean_absolute_deviation([]) == 0.0\nassert mean_absolute_deviation([3,4,2]) == 1.0\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert mean_absolute_deviation([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert mean_absolute_deviation([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert idesperse([1, 2, 3, 4, 5, 6], 2) == [1, 2, 3, 2, 3, 4, 2, 5, 6]\nassert idesperse([1, 2, 3, 4, 5, 6], 1) == [1, 2, 3, 4, 5, 6]\nassert idesperse([1, 2, 3, 4, 5, 6], 2) == [1, 2, 3, 4, 5, 6, 1, 2]\nassert idesperse([1, 2, 3, 4, 5, 6], 3) == [1, 2, 3, 4, 5, 6, 1, 2, 3]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ersperse([1, 2, 3, 4], 3) == [1, 2, 3, 3, 4]\nassert ersperse([1, 2, 3], 1) == [1, 2, 1, 2, 3]\nassert ersperse([1, 2], 1) == [1, 2]\nassert ersperse([1, 2], 0) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3], 5) ==     [1, 5, 2, 5, 3]\nassert     intersperse([1, 2, 3], 3) ==     [1, 3, 2, 3]\nassert     intersperse([1, 2, 3], 4) ==     [1, 2, 3]\nassert     intersperse([], 5) ==     []\nassert     intersperse([1], 5) ==     [1]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert idesperse([1, 2, 3], 1) == [1, 1, 2, 3, 1]\nassert idesperse([1, 2, 3], 2) == [1, 2, 2, 3, 1]\nassert idesperse([1, 2, 3], 3) == [1, 2, 3, 1, 2, 3, 1]\nassert idesperse([1, 2, 3], 4) == [1, 2, 3, 4, 1, 2, 3, 4, 1]\nassert idesperse([1, 2, 3, 4], 1) == [1, 1, 2, 3, 4, 1, 1]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert intersperse([1,2,3,4,5], 3) == [1,3,3,4,5,2,3,4,5]\nassert intersperse([1,2,3,4,5], 2) == [1,2,3,4,5,2,3]\n\ndef intersperse_non_rec(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    result = []\n    for i in range(len(numbers)-1):\n        result.append(delimeter)\n        result.append(numbers[i])\n    result.append(delimeter)\n    return result\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersperse([1, 2, 3, 4, 5], 1) == [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\nassert     intersperse([1, 2, 3, 4, 5], 2) == [[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\nassert     intersperse([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\nassert     intersperse([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [1, 2, 3, 4, 5]]\nassert     intersperse([1, 2, 3, 4, 5], 5) == [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ersperse([1, 2, 3, 4, 5], 2) == [1, 2, 2, 3, 3, 4, 4, 5]\nassert ersperse([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nassert ersperse([1, 2, 3, 4, 5], 8) == [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4]\nassert ersperse([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5, 1, 2, 3, 4]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert intersperse([1, 2, 3], 4) == [1, 4, 1, 2, 4, 1, 3, 1]\nassert intersperse([1, 2, 3], 1) == [1, 2, 3, 1]\nassert intersperse([], 1) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nparen_string = \"( ( ( ( ) ) ) )\"\n\nassert parse_nested_parens(paren_string) == [2, 2, 1, 1, 1]\n\nparen_string = \"(((((((())))))))()()((((((())))))\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef get_all_concatenated_parenthesis(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the string formed by concatenating all the characters from the group.\n    E.g. (()()) has output (((())())) while (((())) has output (((()))).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"((()())))\") == 2\nassert     parse_nested_parens(\"(((()())))\") == 3\nassert     parse_nested_parens(\"(((((()))))\") == 4\nassert     parse_nested_parens(\"((((((()))))))\") == 5\nassert     parse_nested_parens(\"(((((((((())())))))()))))\") == 6\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_nested_parens('(())') == 1\nassert     parse_nested_parens('(()())') == 2\nassert     parse_nested_parens('(()(()))') == 3\nassert     parse_nested_parens('((()()))') == 4\nassert     parse_nested_parens('(((()()))') == 5\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef parse_nested_parens_2(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n\n\ndef parse_nested_parens_3(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n\n\ndef parse_nested_parens_4(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_nested_parens('(((()(()()())))())') == [0, 1, 1, 2, 3, 4, 5, 6]\nassert    parse_nested_parens('(((()()()())((()()())))(()()(()(()()()))))') == [0, 1, 1, 2, 4, 6, 7, 10]\nassert    parse_nested_parens
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_nested_parens('(()(()))') == [2,2,1]\nassert     parse_nested_parens('((()))') == [1,1]\nassert     parse_nested_parens('()())()') == [2,1,1,1]\nassert     parse_nested_parens('(()(()(()()))') == [2,2,1,1,1,1]\nassert     parse_nested_parens('(((((())()()))())())') == [1,1,1,1,1,1,1,1,1,1]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_nested_parens('((()())())') == [1, 3, 3, 3, 1]\nassert     parse_nested_parens('((()()(()))(()))') == [1, 4, 3, 3, 1, 3, 1]\nassert     parse_nested_parens('((()())((()))(()))') == [1, 4, 3, 3, 1, 3, 1]\nassert     parse_nested_parens('((()((()))))') == [1, 3, 3, 1]\nassert     parse_nested_parens('(((((((((()))))))))') == [1, 4, 3, 3, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_nested_parens('()') == [0]\nassert     parse_nested_parens('( )') == [1]\nassert     parse_nested_parens('( ) ( )') == [2]\nassert     parse_nested_parens('( ( ) ) ( )') == [3]\nassert     parse_nested_parens('( ) (( ) )') == [2]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"(()())\") == 2\nassert     parse_nested_parens(\"(((()()))\") == 3\nassert     parse_nested_parens(\"(((((()())))))\") == 4\n\n\n\ndef binary_search(sorted_list: List[int], value: int) -> int:\n    \"\"\"\n    Input to this function is a sorted list and a value to search for in that list.\n    Return the index of the value. If the value is not found, return -1.\n    \"\"\"\n    # set the lower and upper boundaries of the search\n    lower_bound = 0\n    upper_bound = len(sorted_list) - 1\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"foo.bar.baz.qux\", \"xyz\", \"fgh\"], \".\") == [\"foo.bar.baz.qux\", \"xyz\", \"fgh\"]\nassert     filter_by_substring([\"xyz\", \"foo.bar.baz.qux\", \"fgh\", \"foo.bar.baz.qux\"], \".\") == [\"xyz\", \"fgh\", \"foo.bar.baz.qux\"]\nassert     filter_by_substring([\"foo.bar.baz.qux\", \"xyz\", \"fgh\", \"foo.bar.baz.qux\"], \"f\") == [\"foo.bar.baz.qux\", \"fgh\", \"foo.bar.baz.qux\"]\nassert     filter_by_substring([\"foo.bar.baz.qux\", \"xyz\", \"fgh\", \"foo.bar.baz.qux\"], \"fh\") == []\nassert     filter_by_substring([\"foo.bar.baz.qux\", \"xyz\", \"fgh\", \"foo.bar.baz.qux\"], \"foo\") == [\"foo.bar.baz.qux\", \"fgh\", \"foo.bar.baz.qux\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_first(strings: List[str], substring: str) -> int:\n    \"\"\" Find the first occurrence of a substring in a list of strings\n    \"\"\"\n    pass\n\nassert \n\ndef find_first_index(strings: List[str], substring: str) -> int:\n    \"\"\" Find the first occurrence of a substring in a list of strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"foo\", \"bar\", \"bar\", \"foobar\"], \"bar\") == [\"bar\", \"foobar\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"bar\", \"foobar\"], \"foo\") == [\"foo\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"bar\", \"foobar\"], \"foobar\") == [\"foobar\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"bar\", \"foobar\"], \"fo\") == [\"foo\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"bar\", \"foobar\"], \"foob\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_substring(['apple', 'banana', 'potato'], 'potato') == ['potato']\nassert     filter_by_substring(['apple', 'banana', 'potato'], 'apple') == ['apple']\nassert     filter_by_substring(['apple', 'banana', 'potato'], 'l') == []\nassert     filter_by_substring(['apple', 'banana', 'potato'], 'p') == ['potato']\nassert     filter_by_substring(['apple', 'banana', 'potato'], 't') == ['potato']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_substring(['Bob', 'Jenny', 'Mike', 'Sally'], 'Mike') == ['Mike']\nassert     filter_by_substring(['Bob', 'Jenny', 'Mike', 'Sally'], 'Bob') == ['Bob']\nassert     filter_by_substring(['Bob', 'Jenny', 'Mike', 'Sally'], 'Dylan') == []\nassert     filter_by_substring(['Bob', 'Jenny', 'Mike', 'Sally'], 'Jenny') == ['Jenny']\nassert     filter_by_substring(['Bob', 'Jenny', 'Mike', 'Sally'], 'Jenny', case_insensitive=True) == ['Jenny']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"one\") == [\"one\"]\nassert filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"two\") == [\"two\"]\nassert filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"four\") == [\"four\"]\nassert filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"three\") == [\"three\", \"four\"]\nassert filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], \"five\") == [\"five\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert filter_by_substring([\n    \"Good morning, friend\",\n    \"Good afternoon, friend\",\n    \"Good evening, friend\",\n    \"Good night, friend\",\n    \"Good morning, sister\",\n    \"Good afternoon, sister\",\n    \"Good evening, sister\",\n    \"Good night, sister\",\n    \"Good morning, mom\",\n    \"Good afternoon, mom\",\n    \"Good evening, mom\",\n    \"Good night, mom\",\n    \"Good morning, dad\",\n    \"Good afternoon, dad\",\n    \"Good evening, dad\",\n    \"Good night, dad\",\n    \"Good morning, mum\",\n    \"Good afternoon, mum\",\n    \"Good evening, mum\",\n    \"Good night, mum\",\n    \"Good morning, dada\",\n    \"Good afternoon, dada\",\n    \"Good evening, dada\",\n    \"Good night, dada\",\n    \"Good morning, girlfriend\",\n    \"Good afternoon, girlfriend\",\n    \"Good evening, girlfriend\",\n    \"Good night, girlfriend\",\n    \"Good morning, mumfriend\",\n    \"Good afternoon, mumfriend\",\n    \"Good evening, mumfriend\",\n    \"Good night, mumfriend\",\n    \"Good morning, momfriend\",\n    \"Good afternoon, momfriend\",\n    \"Good evening, momfriend\",\n    \"Good night, momfriend\",\n    \"Good morning, dadfriend\",\n    \"Good afternoon, dadfriend\",\n    \"Good evening, dadfriend\",\n    \"Good night, dadfriend\",\n    \"Good morning, girlfriendfriend\",\n    \"Good afternoon, girlfriendfriend\",\n    \"Good evening, girlfriendfriend\",\n    \"Good night, girlfriendfriend\"\n], \"friend\") == [\n    \"Good morning, friend\",\n    \"Good afternoon, friend\",\n    \"Good evening, friend\",\n    \"Good night, friend\",\n    \"Good morning, sister\",\n    \"Good afternoon, sister\",\n    \"Good evening, sister\",\n    \"Good night, sister\",\n    \"Good morning, mom\",\n    \"Good afternoon, mom\",\n    \"Good evening, mom\",\n    \"Good night, mom\",\n    \"Good morning, dad\",\n    \"Good afternoon, dad\",\n    \"Good evening, dad\",\n    \"Good night, dad\",\n    \"Good morning, mum\",\n    \"Good afternoon, mum\",\n    \"Good evening, mum\",\n    \"Good night, mum\",\n    \"Good morning, dada\",\n    \"Good afternoon, dada\",\n    \"Good evening, dada\",\n    \"Good night, dada\",\n    \"Good morning, girlfriend\",\n    \"Good afternoon, girlfriend\",\n    \"Good evening, girlfriend\",\n    \"Good night, girlfriend\",\n    \"Good morning, momfriend\",\n    \"Good afternoon, momfriend\",\n    \"Good evening, momfriend\",\n    \"Good night, momfriend\",\n    \"Good morning, dadfriend\",\n    \"Good afternoon, dadfriend\",\n    \"Good evening, dadfriend\",\n    \"Good night, dadfriend\",\n    \"Good morning, girlfriendfriend\",\n    \"Good afternoon, girlfriendfriend\",\n    \"Good evening, girlfriendfriend\",\n    \"Good night, girlfriendfriend\"\n], '(\"Good morning\", \"friend\")'\n\nassert filter_by_substring([\n    \"Good morning, friend\",\n    \"Good afternoon, friend\",\n    \"Good evening, friend\",\n    \"Good night, friend\",\n    \"Good morning, sister\",\n    \"Good afternoon, sister\",\n    \"Good evening, sister\",\n    \"Good night, sister\",\n    \"Good morning, mom\",\n    \"Good afternoon, mom\",\n    \"Good evening, mom\",\n    \"Good night, mom\",\n    \"Good morning, dad\",\n    \"Good afternoon, dad\",\n    \"Good evening, dad\",\n    \"Good night, dad\",\n    \"Good morning, mum\",\n    \"Good afternoon, mum\",\n    \"Good evening, mum\",\n    \"Good night, mum\",\n    \"Good morning, dada\",\n    \"Good afternoon, dada\",\n    \"Good evening, dada\",\n    \"Good night, dada\",\n    \"Good morning, girlfriend\",\n    \"Good afternoon, girlfriend\",\n    \"Good evening, girlfriend\",\n    \"Good night, girlfriend\",\n    \"Good morning, momfriend\",\n    \"Good afternoon, momfriend\",\n    \"Good evening, momfriend\",\n    \"Goo"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    strings = [\"Hello World\", \"A string\", \"Another string\"]\n    assert filter_by_substring(strings, \"string\") == [\"Another string\"]\n\n    strings = [\"Yes, no, maybe\", \"yes, no\", \"no\"]\n    assert filter_by_substring(strings, \"yes\") == [\"Yes, no, maybe\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"123456\", \"1234567890\", \"asdasd\"], \"12\") == [\"123456\", \"1234567890\"]\nassert     filter_by_substring([\"123456\", \"1234567890\", \"asdasd\"], \"123887654\") == []\nassert     filter_by_substring([\"123456\", \"1234567890\", \"asdasd\"], \"0987654321\") == [\"1234567890\"]\nassert     filter_by_substring([\"123456\", \"1234567890\", \"asdasd\"], \"9876543210\") == [\"1234567890\"]\nassert     filter_by_substring([\"123456\", \"1234567890\", \"asdasd\"], \"abcdefghijklmnopqrstuvwxyz\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], \"b\") == [\"b\"]\nassert     filter_by_substring([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], \"z\") == []\nassert     filter_by_substring([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"], \"ee\") == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_product([1,2,3]) == (1,6)\nsum_product([1,2,3,4]) == (3,24)\nsum_product([]) == (0,1)\nsum_product([-1,-2,-3,-4]) == (0,1)\nsum_product([1,-2,3,4]) == (1,0)\nsum_product([-1,-2,-3,4,-5]) == (0,1)\nsum_product([1,-2,-3,-4,-5]) == (1,0)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (3, 6)\nassert     sum_product([-3, -2, -1]) == (1, 0)\nassert     sum_product([-1, -2]) == (1, -2)\nassert     sum_product([-1, 0, 1]) == (1, 0)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_product([]) == (0, 1)\nassert sum_product([1, 2, 3]) == (6, 6)\nassert sum_product([1, 2, -3]) == (1, -6)\nassert sum_product([1, 2, 3, -4]) == (8, -24)\nassert sum_product([-1, 2, -3, -4]) == (-18, 924)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 4]) == (3, 4)\nassert     sum_product([-1, -2, -4]) == (1, -12)\nassert     sum_product([-1, -2, -4, -5]) == (1, -120)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         sum_product([]) == (0, 1)\nassert         sum_product([1]) == (1, 1)\nassert         sum_product([2]) == (2, 2)\nassert         sum_product([5]) == (5, 5)\nassert         sum_product([5, 4, 3, 2, 1]) == (15, 30)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 3)\nassert     sum_product([1, 2, 3, 4]) == (10, 6)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         sum_product([1, 2, 3, 4]) == (10, 24)\nassert         sum_product([2, 4, 6, 8]) == (12, 32)\nassert         sum_product([4, 8, 16, 32, 64, 128]) == (218, 17408)\nassert         sum_product([-1, -2, -3, -4]) == (-1, -24)\nassert         sum_product([2, 4, 6, 8]) == (12, 32)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Reverse the given string \"\"\"\n    pass\n\n\ndef reverse_words_in_string(string: str) -> str:\n    \"\"\" Reverse the given string \"\"\"\n    pass\n\n\ndef palindrome(string: str) -> bool:\n    \"\"\" Check if the given string is a palindrome. \"\"\"\n    pass\n\n\ndef duplicate_count(string: str) -> int:\n    \"\"\" Count the number of times that a certain substring appears in a string. \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef test_rolling_max():\n    pass\n\ndef quick_sort(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Do a quick sort\n    \n    Arguments:\n    numbers - list of integers, a list of integers to be sorted\n    \n    Returns:\n    a sorted list of integers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef one_d_array_to_two_d_array(array: List[int]) -> Tuple[List[List[int]], int]:\n    \"\"\" Convert a one-dimensional list of integers to a two-dimensional list.\n    \"\"\"\n    pass\n\ndef list_remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Remove duplicates in a list of integers.\n    \"\"\"\n    pass\n\ndef one_d_array_to_two_d_array(array: List[int]) -> Tuple[List[List[int]], int]:\n    \"\"\" Convert a one-dimensional list of integers to a two-dimensional list.\n    \"\"\"\n    pass\n\ndef number_of_occurrences(string: str, num: int) -> int:\n    \"\"\" Count the number of occurrences of the given number in the given string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rolling_max([3, 4, 5, 4, 6]) ==    [4, 5, 6, 6, 6]\nassert     rolling_max([1, 2, 3, 4, 5])    ==    [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4])    ==    [1, 2, 3, 4]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef generate_factors(numbers: List[int]) -> List[Tuple[int, int]]:\n    \"\"\" From a given list of integers, generate a list of prime factor pairs found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rolling_max([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 1, 1, 1, 1, 1, 1, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [5, 5, 5, 5, 5]\nassert     rolling_max([5, 4, 3, 2, 1]) == [5, 5, 5, 5, 5]\nassert     rolling_max([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert     rolling_max([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\nassert     rolling_max([5, 4, 3, 2, 1, 0]) == [5, 5, 5, 5, 5, 0]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_make_palindrome():\n    \"\"\" Tests if make_palindrome is behaving as expected.\n    Tests for edge cases. \"\"\"\n    assert make_palindrome(\"a\") == \"a\"\n    assert make_palindrome(\"ab\") == \"ba\"\n    assert make_palindrome(\"abcd\") == \"dcba\"\n    "
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_make_palindrome():\n    \"\"\" Tests for make_palindrome \"\"\"\n    assert make_palindrome(\"racecar\") == \"racecarracecar\"\n    assert make_palindrome(\"dog\") == \"doggod\"\n    assert make_palindrome(\"\") == \"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_palindrome(string=\"abcba\") == \"ababa\"\nassert     make_palindrome(string=\"abc\") == \"abca\"\nassert     make_palindrome(string=\"\") == \"a\"\nassert     make_palindrome(string=\"abcba\") == \"ababa\"\nassert     make_palindrome(string=\"abac\") == \"bacab\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     make_palindrome(\"a\") == \"aa\"\nassert     make_palindrome(\"abc\") == \"aba\"\nassert     make_palindrome(\"b\") == \"aab\"\nassert     make_palindrome(\"ab\") == \"aab\"\nassert     make_palindrome(\"c\") == \"bb\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_palindrome('a') == False\nassert     is_palindrome('ab') == False\nassert     is_palindrome('aba') == True\nassert     is_palindrome('ababab') == True\nassert     is_palindrome('a' * 10000) == True\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_xor('aaaaaaaa', 'bbbbbbbb') == '8bbbbbbb'\nassert     string_xor('aaaaaaaa', 'aaaaaaaa') == 'aaaaaaaa'\nassert     string_xor('aaaaaaaa', 'aaaaaaaaaaa') == 'aaaaaaaaaaa'\nassert     string_xor('aaaaaaaaa', 'aaaaaaaaaaa') == 'aaaaaaaa'\n\ndef run_pipeline(raw_bytes: str) -> str:\n    \"\"\"\n    Given a raw string consisting only of 0s and 1s.\n    Perform the following steps in order, each on a separate line:\n    (1) Convert all the characters in the string to ints.\n    (2) Print the number of 1s in the original string.\n    (3) Add one to the count of 1s in the string.\n    (4) For every set of adjacent 1s, print a count of that set of adjacent 1s.\n    (5) Print the sum of all counts.\n    (6) Print the number of distinct sets of adjacent 1s in the original string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    string_xor(\"1\", \"0\") == \"1\"\nassert \n    string_xor(\"0\", \"1\") == \"1\"\nassert \n    string_xor(\"10\", \"1\") == \"10\"\nassert \n    string_xor(\"11\", \"1\") == \"10\"\nassert \n    string_xor(\"100\", \"1\") == \"101\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert string_xor(\"0011001011101111\",\"01010101010101010\") == \"01010101010101010\"\nassert string_xor(\"0011001011101111\",\"01010101010101010\") == \"10001010\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_xor('this is a test', 'wokka wokka!!') == 'purple hair'\nassert     string_xor('', 'test') == ''\nassert     string_xor('test', '') == 'test'\nassert     string_xor('12345678', '12345678') == '12345678'\nassert     string_xor('hello world', 'hello world') == 'aaaaaaaaaaaaaa'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_xor(\"111100101\", \"101010101\") == \"111100101\", \"First example\"\nassert     string_xor(\"111100101\", \"101010111\") == \"111100101\", \"Second example\"\nassert     string_xor(\"111100101\", \"101011100\") == \"111100101\", \"Third example\"\nassert     string_xor(\"111100101\", \"1111010101\") == \"11100111\", \"Fourth example\"\nassert     string_xor(\"111100101\", \"1111010111\") == \"111100101\", \"Fifth example\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_xor(\"a\",\"a\") == \"0\"\nassert     string_xor(\"a\",\"b\") == \"1\"\nassert     string_xor(\"a\",\"c\") == \"9\"\nassert     string_xor(\"a\",\"d\") == \"8\"\nassert     string_xor(\"a\",\"e\") == \"7\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    a = \"101010101010101010\"\n    b = \"110101010101010101\"\n    print(\"{0}\\n{1}\".format(a, b))\n    x = string_xor(a, b)\n    assert x == \"101010101010101010\"\n\n    a = \"101010101010101010\"\n    b = \"110101010101010101\"\n    print(\"{0}\\n{1}\".format(a, b))\n    x = string_xor(a, b)\n    assert x == \"101010101010101010\""
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef string_xor_brute(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform brute force XOR on these inputs and return result also as a string.\n    \"\"\"\n    pass\n\n\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_xor(\"\", \"\") == \"\"\nassert     string_xor(\"a\", \"b\") == \"b\"\nassert     string_xor(\"ab\", \"bc\") == \"dc\"\nassert     string_xor(\"x\", \"x\") == \"\"\n\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        n = len(nums)\n        for i in range(n):\n            if nums[i]!= i:\n                break\n        else:\n            return i\n        # since the last number must be i, we must jump nums[i] to i+1\n        return nums[i]+1\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef or_xor_all(a: str, b: str, c: str) -> str:\n    \"\"\" Input are four strings a, b, c consisting only of 1s and 0s.\n    Perform binary OR on these inputs and return result also as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     longest(['']) == None\nassert     longest(['aaa','aaa','aaa']) == 'aaa'\nassert     longest(['a','a','a','b','b','b']) == 'a'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     longest([]) is None\nassert    longest([\"a\"]) == \"a\"\nassert    longest([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"a\"]) == \"a\"\nassert    longest([\"c\", \"b\", \"a\"]) == \"a\"\nassert    longest([\"a\", \"b\", \"c\", \"b\"]) == \"b\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     longest([]) is None\nassert     longest([\"abc\"]) == \"abc\"\nassert     longest([\"ab\", \"a\", \"bc\"]) == \"bc\"\nassert     longest([\"ab\", \"bc\"]) == \"bc\"\nassert     longest([\"ab\", \"ba\"]) == \"bc\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     longest([\"a\", \"abc\", \"abcde\", \"abcde\"]) == \"abcde\"\nassert     longest([\"abc\", \"abc\", \"abcde\", \"abcde\"]) == \"abcde\"\nassert     longest([\"ab\", \"a\", \"a\", \"a\"]) is None\nassert     longest([\"abcde\", \"abcde\"]) == \"abcde\"\nassert     longest([\"abcde\", \"abcde\", \"abcde\", \"abcde\", \"abcde\"]) == \"abcde\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     longest([\"\", \"\", \"\"]) == \"\", \\\n    \"It should return None in case the input list is empty\"\nassert     longest([\"\", \"\", \"asdf\", \"\", \"asdfasdf\", \"asdf\", \"\", \"asdfasdf\"]) == \"asdfasdf\", \\\n    \"It should return the longest string in the input list\"\nassert     longest([\"asdf\", \"asdfasdf\", \"a\", \"a\", \"asdfasdf\", \"a\"]) == \"asdfasdf\", \\\n    \"It should return the longest string in the input list\"\nassert     longest([\"\"]) == \"\", \\\n    \"It should return None in case of an empty list\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     longest([\"pale\", \"bala\", \"cat\"]) == \"bala\"\nassert     longest([\"hippopotamuses\", \"ratatouille\", \"cat\"]) == \"hippopotamuses\"\nassert     longest([\"a\", \"abc\", \"abcd\", \"ab\"]) == \"abc\"\nassert     longest([\"ratatouille\"]) == \"ratatouille\"\nassert     longest([]) is None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     longest([]) == None\nassert     longest([None]) == None\nassert     longest(['']) == ''\nassert     longest(['']) == ''\nassert     longest(['a', 'b', 'c']) == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ngreatest_common_divisor(20,5) == 5\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(30,20) == 20\ngreatest_common_divisor(20,10) == 10\ngreatest_common_divisor(10,10) == 10\ngreatest_common_divisor(5,5) == 5\ngreatest_common_divisor(10,10) == 10\ngreatest_common_divisor(20,30) == 20\ngreatest_common_divisor(30,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,20) == 20\ngreatest_common_divisor(20,30) == 20\ngreatest_common_divisor(10,10) == 10\ngreatest_common_divisor(20,30) == 20\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(10,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(10,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,20) == 20\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,10) == 10\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(20,10) == 10\ngreatest_common_divisor(30,20) == 20\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,10) == 10\ngreatest_common_divisor(20,20) == 20\ngreatest_common_divisor(30,30) == 30\ngreatest_common_divisor(30,30) == 3"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(4, 2) == 2\nassert     greatest_common_divisor(32, 2) == 8\nassert     greatest_common_divisor(2, 2) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(2, 4) == 2\nassert     greatest_common_divisor(8, 12) == 8\nassert     greatest_common_divisor(9, 9) == 9\nassert     greatest_common_divisor(3, 7) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"A\") == [\"A\"]\nassert all_prefixes(\"AB\") == [\"A\", \"AB\"]\nassert all_prefixes(\"ABC\") == [\"A\", \"AB\", \"ABC\"]\nassert all_prefixes(\"ABCD\") == [\"A\", \"AB\", \"ABC\", \"ABCD\"]\nassert all_prefixes(\"ABCABC\") == [\"A\", \"AB\", \"ABC\", \"ABCABC\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nall_prefixes(\"Hello\") == ['Hell', 'Helllo', 'HellloH', 'HelloH']\nall_prefixes(\"\") == []\nall_prefixes(\"ab\") == ['ab', 'aba', 'abab']\n\nassert \nall_prefixes(\"Hello\") == ['Hell', 'Helllo', 'HellloH', 'HelloH']\nall_prefixes(\"\") == ['', 'a', 'aa', 'aaa', 'aab', 'aaba', 'aabb', 'aabbb', 'ab', 'aba', 'abab', 'ababab']\nall_prefixes(\"ab\") == ['ab', 'aba', 'abab', 'ababab']\n\nassert \nall_prefixes(\"abab\") == ['abab', 'ababa', 'ababab']\nall_prefixes(\"\") == ['', 'a', 'aa', 'aaa', 'aab', 'aaba', 'aabb', 'aabbb', 'ab', 'aba', 'abab', 'ababab']\nall_prefixes(\"abc\") == ['abc', 'ab', 'a', 'ab', 'a', 'ab', 'a', 'ab', 'abab', 'ababab']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert all_prefixes(\"abc\") == [\"abc\", \"abe\", \"ab\"]\nassert all_prefixes(\"abcba\") == [\"abcba\", \"abcb\", \"abca\", \"abc\"]\nassert all_prefixes(\"abcda\") == [\"abcda\", \"abcd\", \"abcb\", \"abca\", \"abc\"]\nassert all_prefixes(\"abcdefghijklmnopqrstuvwxyz\") == [\"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\", \"abcdefghijklmnopqrstuvwxyz\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_prefixes('abacabadabacaba') == ['a', 'ab', 'aba', 'aba', 'abac', 'abac', 'abac', 'abacabad', 'abacabadab', 'abacabadaba', 'abacabadabac', 'abacabadabacab', 'abacabadabacaba', 'abacabadabacabac', 'abacabadabacabad', 'abacabadabacabaaa', 'abacabadabacabaab', 'abacabadabacabaabac', 'abacabadabacabaabacab', 'abacabadabacabaabacabac', 'abacabadabacabaabacabacaba', 'abacabadabacabaabacabacabacaba', 'abacabadabacabaabacabacabacabacab', 'abacabadabacabaabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacaba', 'abacabadabacabaabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacaba', 'abacabadabacabaabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacaba', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacaba', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabadabacabaabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca', 'abacabada"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_prefixes('hack') == ['h', 'ka', 'hk']\nassert     all_prefixes('hackathon') == ['h', 'k', 'hk', 'ha', 'hk', 'ha', 'hnt', 'hk', 'h', 'k', 'hk', 'ha', 'hnt', 'hn', 'hk', 'hak', 'hk', 'ha', 'hnt', 'hk', 'h', 'k', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hk', 'ha', 'hnt', 'hk', 'h', 'k', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', 'hnt', 'hk', 'ha', "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_prefixes('aaabbbccc') == ['aa', 'ab', 'ba', 'bc', 'cb']\nassert     all_prefixes('aaa') == ['aa', 'aaa']\nassert     all_prefixes('ab') == ['ab', 'ba']\nassert     all_prefixes('abc') == ['ab', 'bc', 'cb']\nassert     all_prefixes('abcab') == ['ab', 'bc', 'cb', 'abc', 'acb', 'bac', 'bca', 'cab']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_prefixes(\"aa\") == [\"a\"]\nassert     all_prefixes(\"ab\") == [\"a\", \"b\"]\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"bb\") == [\"a\", \"b\"]\nassert     all_prefixes(\"\") == []\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert(all_prefixes(\"hello\") == ['h', 'hel', 'hell', 'helllo'])\n    assert(all_prefixes(\"\") == [''])\n    assert(all_prefixes(\"a\") == ['a'])\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert all_prefixes('abcde') == ['ab', 'abc', 'abde']\nassert all_prefixes('abcdef') == ['a', 'ab', 'abc', 'abdef']\nassert all_prefixes('abcdefgh') == ['a', 'ab', 'abc', 'abdef', 'abgh', 'abcdef']\nassert all_prefixes('abcdefghij') == ['ab', 'abc', 'abdef', 'abgh', 'abij', 'abcdef', 'abghij']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert all_prefixes(\"\") == [\"\"]\nassert all_prefixes(\"a\") == [\"a\"]\nassert all_prefixes(\"ab\") == [\"ab\"]\nassert all_prefixes(\"abc\") == [\"abc\"]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(20) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\nassert     string_sequence(0) == \"\"\nassert     string_sequence(-3) == \"\"\nassert     string_sequence(3) == \"0 1 2\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_sequence(5) == \" 0 1 2 3 4\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \"0 1 2 3 4 5 6 7 8 9 10\".split() == [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(6) == \"0 1 2 3 4 5\"\nassert     string_sequence(7) == \"0 1 2 3 4 5 6\"\nassert     string_sequence(8) == \"0 1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(0) == \"0\""
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"ABC\") == 3\nassert     count_distinct_characters(\"abcABC\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef make_sentence(string: str) -> str:\n    \"\"\" Given a string, make it into a sentence\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"\") == 0, \"Expected 0\"\nassert count_distinct_characters(\"123\") == 1, \"Expected 1\"\nassert count_distinct_characters(\"AbCdEfGHiJklmNOpQRS\") == 26, \"Expected 26\"\nassert count_distinct_characters(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == 28, \"Expected 28\"\nassert count_distinct_characters(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == 28, \"Expected 28\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_distinct_characters('NoirNoirNoirNoir') == 7\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    string_lower = string.lower()\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_distinct_characters(\"abc\") == 3\nassert     count_distinct_characters(\"aBC\") == 3\nassert count_distinct_characters(\"abc\") == 3\nassert count_distinct_characters(\"abc\") == 3\nassert count_distinct_characters(\"AbC\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters('Sugar is sweet') == 5\nassert count_distinct_characters('A man, a plan, a canal, Panama') == "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_music(\"6|o|3|o|o|o|o|o|5|o|o|5|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_music(\"o|\") == [2]\nassert     parse_music(\"o|o|\") == [2,2]\nassert     parse_music(\"o|o|o|\") == [2,2,2]\nassert     parse_music(\"o|o|o|o|\") == [2,2,2,2]\nassert     parse_music(\"o|o|o|o|o|\") == [2,2,2,2,2]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_music(\"\") == []\nassert     parse_music(\"o\") == [4]\nassert     parse_music(\"o|\") == [2]\nassert     parse_music(\".|\") == [1]\nassert     parse_music(\"o|o\") == [4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_music('o|') == ['o', '|']\nassert     parse_music('o|o|') == ['o', '|', 'o', '|']\nassert     parse_music('o|o|o|') == ['o', '|', 'o', '|', 'o', '|']\nassert     parse_music('o|o|o|o|') == ['o', '|', 'o', '|', 'o', '|', 'o', '|']\nassert     parse_music('o|o|o|o|o|') == ['o', '|', 'o', '|', 'o', '|', 'o', '|', 'o', '|']\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_music('o|') == [4]\nassert     parse_music('o|o|o|o') == [4, 4, 4, 4]\nassert     parse_music('o|o|o|o|') == [4, 4, 4, 4, 4]\nassert     parse_music('|o|') == [4, 4, 4]\nassert     parse_music('o') == [4]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_music('oooooo|o') == [4, 4, 4, 2, 2]\nassert     parse_music('oo|oo|o') == [3, 3, 3, 2, 2]\nassert     parse_music('o|ooo|o') == [2, 2, 2, 1, 1]\nassert     parse_music('ooo|oo|oo|o') == [1, 1, 1, 4, 4]\nassert     parse_music('oo|ooo|oo|o|oo|o|o') == [3, 3, 3, 1, 1, 2, 2, 2]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef longest_common_substring(string1: str, string2: str) -> int:\n    \"\"\" Find the longest common substring.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times(\"Python\", \"thon\") == 1\nassert     how_many_times(\"Python\", \"thon\") == 1\nassert     how_many_times(\"Python\", \"ython\") == 1\nassert     how_many_times(\"Python\", \"hon\") == 1\nassert     how_many_times(\"Python\", \"thonn\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     how_many_times('aabaccbaabccabaa', 'ab') == 2\nassert     how_many_times('aabccabaa', 'ab') == 1\nassert     how_many_times('abbbcccddddddeef', 'dd') == 2\nassert     how_many_times('aabccbaabccabaa', 'ab') == 2\nassert     how_many_times('abcdefgh', 'cde') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     how_many_times(\"ABCDCDC\", \"CDC\") == 3\nassert     how_many_times(\"AABCD\", \"ABC\") == 2\nassert     how_many_times(\"ABAABA\", \"ABA\") == 4\nassert     how_many_times(\"A\", \"A\") == 1\nassert     how_many_times(\"\", \"A\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     how_many_times('google.com','g') == 0, \"Should be 0, but it's not\"\nassert     how_many_times('google.com','e') == 1, \"Should be 1, but it's not\"\nassert     how_many_times('google.com','l') == 2, \"Should be 2, but it's not\"\nassert     how_many_times('google.com','l') == 2, \"Should be 2, but it's not\"\nassert     how_many_times('google.com','o') == 3, \"Should be 3, but it's not\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     how_many_times('abcdabcdefghijklmnopqrstuvwxyz', 'xxdxxx') == 2\nassert     how_many_times('abcdabcdefghijklmnopqrstuvwxyz', 'cdxx') == 1\nassert     how_many_times('abcdabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz') == 21\nassert     how_many_times('abcdabcdefghijklmnopqrstuvwxyz', 'cdx') == 0\nassert     how_many_times('abcdabcdefghijklmnopqrstuvwxyz', 'f') == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     how_many_times(\"abcabcabc\", \"abc\") == 3\nassert     how_many_times(\"abcabcabc\", \"bc\") == 0\nassert     how_many_times(\"aaaaa\", \"a\") == 3\nassert     how_many_times(\"aaaaa\", \"aa\") == 0\nassert     how_many_times(\"aaaaa\", \"aa\") == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     how_many_times(\"abcabcabcabc\", \"abc\") == 3\nassert     how_many_times(\"abcabcabcabc\", \"bc\") == 0\nassert     how_many_times(\"abcabcabcabc\", \"ab\") == 0\nassert     how_many_times(\"abcabcabcabc\", \"abcb\") == 2\nassert     how_many_times(\"abcabcabcabc\", \"c\") == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     how_many_times(\"Hello\", \"lo\") == 2\nassert     how_many_times(\"Hello\", \"Hell\") == 1\nassert     how_many_times(\"HelLo\", \"lo\") == 1\nassert     how_many_times(\"HelLo\", \"He\") == 2\nassert     how_many_times(\"HelLo\", \"hello\") == 0\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numbers(\"one zero two three four\") == \"one two three four zero\"\nassert     sort_numbers(\"zero zero zero zero\") == \"zero zero zero zero zero\"\nassert     sort_numbers(\"five six four seven three two one\") == \"one two three four five six seven seven five six three\"\nassert     sort_numbers(\"nine one five six four three two seven eight\") == \"one two three four five six seven eight seven four five six five nine one\"\nassert     sort_numbers(\"five one two three four\") == \"one two three four five\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'nine zero one two three four five six seven eight'\nassert     sort_numbers('zero zero zero zero zero zero zero zero zero zero') == 'zero zero zero zero zero zero zero zero zero zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('one one one') == 'one one one'\nassert     sort_numbers('one one') == 'one one'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(sort_numbers('two one zero three four five six seven eight nine')"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numbers(\"zero one two three four five six seven eight nine\") == \"zero nine one two three four five six seven eight\"\n\nassert sort_numbers(\"zero nine one two three four five six seven eight\") == \"zero nine one two three four five six seven eight\"\n\n\n\n\ndef sum_pairs(numbers: str, goal: int) -> List[int]:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    The numbers represent the player's score and goal.\n    Output is a list of pairs of scores where the sum of the scores is equal to the goal.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'nine zero one two three four five six seven eight'\nassert     sort_numbers('one four two three nine zero') == 'zero one four two three nine zero'\nassert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('eight one seven two') == 'two one seven eight zero'\nassert     sort_numbers('zero nine') == 'zero nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numbers('one one one three two') == 'one three two one two one one', \"FAIL\"\nassert sort_numbers('two two one five four') == 'one two five four two', \"FAIL\"\nassert sort_numbers('six six five five two') == 'two five two five six', \"FAIL\"\nassert sort_numbers('four four four four four') == 'four four four four four', \"FAIL\"\nassert sort_numbers('one three three two two two one') == 'one three two two 2 one 1 3', \"FAIL\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('one') == 'one'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('three') == 'three'\nassert     sort_numbers('four') == 'four'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numbers('zero')     == 'zero'\nassert     sort_numbers('one')     == 'one'\nassert     sort_numbers('two')     == 'two'\nassert     sort_numbers('three')     == 'three'\nassert     sort_numbers('four')     == 'four'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_closest_elements([]) == (None, None)\nassert     find_closest_elements([2,4]) == (2,4)\nassert     find_closest_elements([4,2]) == (4,2)\nassert     find_closest_elements([1.5, 1.5, 2.5]) == (1.5, 1.5)\nassert     find_closest_elements([-1.5, -1.5, 1.5]) == (-1.5, 1.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([-1.1, -1.2, -1.3, -1.4, -1.5]) == (-1.2, -1.3)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 6)\nassert     find_closest_elements([-1.1, -1.2, -1.3, -1.4, -1.5, -1.6]) == (-1.4, -1.5)\nassert     find_closest_elements([1, -2, 3, -4, 5]) == (1, 3)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)\n    find_closest_elements([0,1,2,4,5,6,8]) == (4, 6)"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_closest_elements([10, 20, 30, 40, 50]) == (20, 30)\nassert     find_closest_elements([10, 20, 30, 40, 50]) == (20, 30)\nassert     find_closest_elements([10, 20, 30, 40, 50]) == (10, 20)\nassert     find_closest_elements([10, 20, 30, 40, 50]) == (10, 20)\nassert     find_closest_elements([10, 20, 30, 40, 50]) == (20, 30)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_closest_elements([0.1, 0.3, 0.9, 1.5, 2.1, 2.9, 3.6, 4.8, 5.7, 6.2]) == (0.1, 0.3)\nassert     find_closest_elements([0.1, 0.3, 0.9, 1.5, 2.1, 2.9, 3.6, 4.8, 5.7, 6.2]) == (0.9, 1.5)\nassert     find_closest_elements([1.5, 1.9, 2.1, 2.3, 2.6, 3.4, 4.0, 4.8, 5.7, 6.2]) == (1.5, 2.1)\nassert     find_closest_elements([2.1, 2.9, 3.4, 4.8, 5.7, 6.2, 6.9, 7.1, 7.5, 7.8]) == (2.1, 3.4)\nassert     find_closest_elements([1.2, 1.3, 1.6, 1.9, 2.1, 2.3, 2.6, 2.9, 3.4, 3.7, 4.0]) == (1.2, 1.3)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_closest_elements([1, 2, 3, 4]) == (1, 2)\n    find_closest_elements([1, 4, 3, 4]) == (1, 4)\n    find_closest_elements([2, 2, 3, 4]) == (2, 3)\n    find_closest_elements([-1, 1, 3, 4]) == (-1, 3)\n    find_closest_elements([1, 3, 3, 4]) == (1, 3)\n\n\n\ndef all_are_valid_pythagorean_triples(numbers: List[int]) -> bool:\n    \"\"\" From a supplied list of numbers (of length at least three) check that all of the numbers are valid \n    pythagorean triples (i.e. that the sum of the 3 numbers is equal to the square of the sum of the 2 numbers).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_closest_elements([1.5, 5.1]) == (5.1, 1.5)\nassert     find_closest_elements([5.2, 3.5, 4.0, 2.5, 2.7, 6.8]) == (3.5, 5.2)\nassert     find_closest_elements([10, 100, -10, -1]) == (-1, 10)\nassert     find_closest_elements([-1, -1, 1]) == (-1, -1)\nassert     find_closest_elements([-5, -5, -5, -5, -5]) == (-5, -5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 10)\nassert find_closest_elements([4, 3, 1, 2, 10, 6, 5, 8, 7, 9]) == (4, 2)\nassert find_closest_elements([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == (10, 1)\nassert find_closest_elements([5, 4, 3, 2, 1, 10]) == (1, 5)\nassert find_closest_elements([2, 4, 5, 6, 7, 8, 10, 9, 11]) == (4, 8)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_closest_elements([1,2,3,4,5]) == (1,2)\nfind_closest_elements([5,4,3,2,1]) == (1,5)\nfind_closest_elements([1,1,1,1,1]) == (1,1)\nfind_closest_elements([4,2,3,5,1]) == (1,2)\nfind_closest_elements([-1,-2,-3,-4,-5]) == (-1,-2)\nfind_closest_elements([-1,-1,-1,-1,-1]) == (-1,-1)\nfind_closest_elements([1,2,3,4,5,10,8]) == (1,8)\nfind_closest_elements([4,5,6,7,8,9]) == (5,9)\nfind_closest_elements([1,1,1,1,1]) == (1,1)\nfind_closest_elements([1,1,1,1,1]) == (1,1)\nfind_closest_elements([1,1,1,1,1]) == (1,1)\nfind_closest_elements([1,1,1,1,1]) == (1,1)\nfind_closest_elements([1,1,1,1,1]) == (1,1)\nfind_closest_elements([-1,-1,-1,-1,-1]) == (-1,-1)\nfind_closest_elements([-1,-1,-1,-1,-1]) == (-1,-1)\nfind_closest_elements([-1,-1,-1,-1,-1]) == (-1,-1)\nfind_closest_elements([-1,-1,-1,-1,-1]) == (-1,-1)\nfind_closest_elements([-1,-1,-1,-1,-1]) == (-1,-1)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_closest_elements([1,2,4,5,9,10,100]) == (4,10)\nassert     find_closest_elements([1,2,4,5,9,10]) == (4,10)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13]) == (3,11)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13]) == (3,11)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9,10,11,12,13]) == (3,11)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([0, 0.5, 0.4, 1]) == [0, 0.5, 0.4, 1]\nassert     rescale_to_unit([0, -1, 0, 1]) == [-0.5, 0, 0.5, 1]\nassert     rescale_to_unit([0, 0.5, -1, 1]) == [0, 0.5, -0.5, 1]\nassert     rescale_to_unit([0, 0.5, 0.5, 1]) == [0, 0.25, 0.25, 1]\n\ndef rescale_to_unit2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_value = min(numbers)\n    max_value = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_value) / (max_value - min_value)\n    return numbers\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (rescale_to_unit([-1.23, 0.0, 0.6, 0.85, 0.93]) == [-0.05, -0.1, -0.05, -0.1, -0.05])\nassert (rescale_to_unit([-1.0, -2.0, -2.9, -3.9, -4.9, -5.0, -5.9, -6.0]) == [-0.5, -0.75, -1.25, -1.75, -2.25, -2.75, -3.25, -3.75])\nassert (rescale_to_unit([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]) == [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])\n\ndef rotate(angles: List[float], pivot: List[float]) -> List[float]:\n    \"\"\" Given a list of angles and a pivot point, rotate the angles so that they are rotated\n    by 90 degrees about the pivot point. Return the rotated angles.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (rescale_to_unit([]) == [])\nassert     (rescale_to_unit([1]) == [1])\nassert     (rescale_to_unit([0,1]) == [0.5,0.5])\nassert     (rescale_to_unit([1,0]) == [0.5,0.5])\nassert     (rescale_to_unit([2,0]) == [0.25,0.25])\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([1,2,3,4,5]) == [0.1,0.2,0.3,0.4,0.5]\nassert     rescale_to_unit([1,0,3,4,5]) == [0.1,0,0.3,0.4,0.5]\nassert     rescale_to_unit([0.1,0,3,4,5]) == [0.1,0,0.3,0.4,0.5]\nassert     rescale_to_unit([0,0.1,0,3,4,5]) == [0,0,0.1,0.3,0.4,0.5]\nassert     rescale_to_unit([0,0,0.1,0,3,4,5]) == [0,0,0,0.1,0.3,0.4,0.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nnumbers = [-0.36, -0.4, 0.0, 0.56, 0.56, 0.52, 0.24, 0.12, 0.1, -0.02, -0.01, 0.01, 0.04, 0.04, 0.8, 0.99, 0.99, 0.98, 0.9]\n\nrescaled_numbers = rescale_to_unit(numbers)\nassert rescaled_numbers == [0, 0, 0, 0.25, 0.25, 0.2, 0.17, 0.15, 0.12, 0.1, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5, 0.5]\n\n\ndef calculate_2d_min_max(numbers: List[List[float]]) -> List[List[float]]:\n    \"\"\" Given list of numbers (of at least two dimensions), find and return the\n    minimum and maximum numbers in each dimension,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef rescale_to_unit_2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    assert isinstance(numbers, list) and len(numbers) >= 2\n    assert all(isinstance(x, float) for x in numbers)\n    # Now rescale the numbers so that they lie between 0 and 1\n    rescale_to_unit(numbers)\n    # Now scale the numbers so that they lie between 0 and 1\n    # Divide them by the largest number\n    return [x / numbers[-1] for x in numbers]\n    "
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert rescale_to_unit([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\n\ndef scale_log_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, apply a log transformation to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0.5, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([-1, 2, -3, 4]) == [-0.5, 0.5, -0.5, 0.5]\nassert     rescale_to_unit([0, 0, 0, 0]) == [0, 0, 0, 0]\n\ndef make_fibonacci_number_list(num_list_length: int = 10) -> List[int]:\n    \"\"\" Create a fibonacci list of length <num_list_length>\n    The first two numbers in the list will be 0 and 1\n    The next <num_list_length-2> numbers in the list will be 1, 1, 2, 3, 5, 8, 13, 21, 34, 55\n    We return the Fibonacci list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0.2, 0.4, 0.6, 0.8]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0.2, 0.4, 0.6, 0.8, 0.9, 1.0]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == \\\n        [0.2, 0.4, 0.6, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1]\nassert     rescale_to_unit([0.001, 0.01, 0.1, 1, 10, 100]) == \\\n        [0.0, 0.001, 0.01, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0]\nassert     rescale_to_unit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == \\\n        [0.0, 0.001, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.27, 0.28, 0.29, 0.3, 0.31, 0.32, 0.33, 0.34, 0.35, 0.36, 0.37, 0.38, 0.39, 0.4, 0.41, 0.42, 0.43, 0.44, 0.45, 0.46, 0.47, 0.48, 0.49, 0.5, 0.51, 0.52, 0.53, 0.54, 0.55, 0.56, 0.57, 0.58, 0.59, 0.6, 0.61, 0.62, 0.63, 0.64, 0.65, 0.66, 0.67, 0.68, 0.69, 0.7, 0.71, 0.72, 0.73, 0.74, 0.75, 0.76, 0.77, 0.78, 0.79, 0.8, 0.81, 0.82, 0.83, 0.84, 0.85, 0.86, 0.87, 0.88, 0.89, 0.9, 0.91, 0.92, 0.93, 0.94, 0.95, 0.96, 0.97, 0.98, 0.99, 1]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([0.8, 0.6, 0.5, 0.3, 0.1, 0.0]) == [0.2, 0.4, 0.6, 0.8, 0.9, 1]\nassert     rescale_to_unit([0.4, 0.2, 0.0]) == [0, 0.2, 1]\nassert     rescale_to_unit([0.0]) == [0]\n\n\ndef rescale_to_unit_log(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a log transformation to that list,\n    so that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_integers([0, 1, 2, 3]) == [0, 1, 2, 3]\nassert     filter_integers([1, '2', False, 3]) == [1, 2, 3]\nassert     filter_integers([-1, False, 1, True]) == [1, True]\nassert     filter_integers([-1, True, 1, False]) == [True, False]\n\ndef count_down(n: int) -> int:\n    \"\"\" Returns the number of milliseconds until the given number of seconds\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ntest_list = [-1, 'c', '1', 'x', '15', -2, 0, '-1', -2, 2, '-', '1']\nexpected = [1, '1', '15', '2', '-2', '-2', '-1', '2', '1', 'x', '-']\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([1, 2, \"a\", 4, 5, \"b\", 6, \"c\", 9]) == [1, 2, 4, 5, 6, 9]\nassert     filter_integers([]) == []\nassert     filter_integers([1, 2, 3, \"a\", 4, 5, \"b\", 6, \"c\", 9]) == [1, 2, 3, 4, 5, 6, 9]\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers([1, \"test\", False, 3, \"string\", (1, 2, 3), 5.6]) == [1, 2, 3, 5.6]\nassert     filter_integers([1, \"test\", False, 3, \"string\", [1, 2, 3], 5.6]) == []\nassert     filter_integers([1, \"test\", False, 3, \"string\", (1, \"2\", 3), 5.6]) == []\nassert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert (\n    filter_integers([1, 2, 3, \"a\", \"b\", 5, -1, \"x\", 9])\n    == [1, 2, 3, 5, 9]\n)\n\nassert (\n    filter_integers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n    == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]\n)\n\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers([True, False, 'hello', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [True, False, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers([True, False, None, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [True, False, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_integers([1, '2', 3.4, 4, 5, 5.4]) == [1, 4, 5]\nassert     filter_integers([False, 0, '', None, 6.7]) == []\nassert     filter_integers([1, 'a', 3.4, 4, 5, 5.4, '7']) == ['1', '4', '5', '7']\n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n\n\ndef filter_integers_and_strings(values: List[Any]) -> List[Any]:\n    \"\"\" Filter given list of any python values only for integers and strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_integers([1, 2, 3, \"a\", 5]) == [1, 2, 3, 5]\nassert     filter_integers([1.2, 2.3, 5, \"a\"]) == [1.2, 2.3, 5]\nassert     filter_integers([True, 5, False, \"a\"]) == [True, False, 5]\nassert     filter_integers([\"a\", 2, False]) == [2, False]\nassert     filter_integers([]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_integers([1, 2, 3, 'a', 5, 'b', 'c']) == [1, 2, 3, 5]\nassert     filter_integers(['1', 2, 3, 'a', 5, 'b', 'c']) == ['1', 2, 3, 5]\nassert     filter_integers([1.1, 2.2, 3.3, 'a', 5.5, 'b', 'c']) == []\nassert     filter_integers([True, False, True, 'a', True, 'b', 'c']) == [False, True, 'a', 'b']\nassert     filter_integers([1, '2', 3, 'a', 5, 'b', 'c']) == [1, 3, 5]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_integers([]) == []\nassert     filter_integers([0, \"0\", 5]) == []\nassert     filter_integers([0, 0, 0]) == []\nassert     filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     filter_integers([True, False, False, 0, 1]) == [True, False, 0, 1]\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef getchar() -> str:\n    \"\"\" Return a char from stdin\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strlen(\"h\") == 1\nassert     strlen(\"\") == 0\nassert     strlen(\"h\") == 1\nassert     strlen(\"hello\") == 5\nassert     strlen(\"h\" * 100) == 1\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     strlen('a') == 1\nassert     strlen('abc') == 3\nassert     strlen('abcde') == 5\nassert     strlen('abcdef') == 6\nassert     strlen('abcdefg') == 7\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"abc\") == 3\nassert     strlen(\"abc \") == 4\nassert     strlen(\"abc\\n\") == 4\nassert     strlen(\"a\\rbc\\r\") == 4\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strlen(\"Hellow World\") == 13\nassert     strlen(\"\") == 0\nassert     strlen(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\") == 11\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strlen(\"dolly\") == 6\nassert strlen(\"\") == 0\nassert strlen(\"Hi\") == 3\nassert strlen(\"PyThOn\") == 7\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strlen('abc') == 3\nassert     strlen('123') == 3\nassert     strlen('123') == 3\nassert     strlen('abc12') == 4\nassert     strlen('abc') == 4\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_divisor(1) == 1, \"Test case 1 failed\"\nassert     largest_divisor(5) == 5, \"Test case 2 failed\"\nassert     largest_divisor(20) == 5, \"Test case 3 failed\"\nassert     largest_divisor(10) == 1, \"Test case 4 failed\"\nassert     largest_divisor(42) == 21, \"Test case 5 failed\"\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert largest_divisor(0) == 1\nassert largest_divisor(1) == 1\nassert largest_divisor(2) == 1\nassert largest_divisor(3) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_divisor(1) == 0\nassert     largest_divisor(2) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(5) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_divisor(1) == 1\nassert     largest_divisor(2) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(9) == 3\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef prime_factors(n: int) -> List[int]:\n    \"\"\"\n    return the prime factorization of the given number.\n    each prime factors should be listed number of times corresponding to how many times it appears in factorization.\n    input number should be equal to the product of all factors\n    \"\"\"\n    pass\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    return True if number is prime else False\n    \"\"\"\n    pass\n\n\ndef product_of_prime_factors(n: int) -> int:\n    \"\"\"\n    return the product of prime factors of the given number\n    \"\"\"\n    pass\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\"\n    return the greatest common divisor of the given numbers.\n    if a, b are divisible by the same number, gcd(a, b) = 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(factorize(120))  #should print [2,2,3,3]\nprint(factorize(3024)) #should print [2,3,3,4,4]\nprint(factorize(2025)) #should print [2,2,4,4,5]\nprint(factorize(1))  #should print [1]\n\n\n\"\"\"\n\nProblem statement:\nGiven an integer N, write a program to print all its prime factors.\n\nInput Format:\nInteger N.\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     factorize(2) == [2]\nassert     factorize(3) == [2,3]\nassert     factorize(4) == [2,2]\nassert     factorize(5) == [2,2,5]\nassert     factorize(6) == [2,3]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     factorize(64) == [(2, 4), (2, 2), (2, 1), (4, 1), (4, 2), (8, 1)]\nassert     factorize(100) == [(2, 5), (5, 1)]\nassert     factorize(97) == [(11, 1)]\nassert     factorize(132) == [(3, 1), (3, 2), (5, 1)]\nassert     factorize(17) == [(17, 1)]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef prime_factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(5) == [5]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     factorize(2) == [2]\nassert factorize(12) == [2, 2, 3]\nassert factorize(34) == [2, 3, 3, 3]\nassert factorize(23) == [2, 2, 3]\nassert factorize(36) == [2, 2, 3]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     factorize(4) == [2, 2]\nassert     factorize(6) == [2, 3]\nassert     factorize(8) == [2, 2, 2]\nassert     factorize(9) == [3, 3]\nassert     factorize(18) == [2, 2, 3]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef factorize_list(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef sort_and_remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Sort the integers in the list and return the new sorted list with all duplicates removed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1,2,3,4]) ==     [1,2,3,4]\nassert     remove_duplicates([1,2,3,2,4,3,2,3]) ==     [1,2,3,4]\nassert     remove_duplicates([1,2,3,2,4,3,2,3,4,1]) ==     [1,2,3,4,1]\nassert     remove_duplicates([1,2,3,2,3,2,4,4,4,4,1,2,3]) ==     [1,2,3,4,1,2,3]\n\ndef is_sorted(numbers: List[int]) -> bool:\n    \"\"\" Return True if the numbers are sorted in non-decreasing order.\n    Note that you can compare the items in the list with the ones in\n    the list's first position.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef build_rectangle(rectangle: List[int]) -> List[int]:\n    \"\"\" Create a list with the coordinate of the corners of a rectangle.\n    The top-left corner is the first element of the list.\n    The bottom-right corner is the last element of the list.\n    \"\"\"\n    pass\n\n\ndef read_rectangles(input_lines: List[str]) -> List[List[int]]:\n    \"\"\" Read a list of rectangles, each one is represented by a list of integers\n    The top-left corner is the first element of the list.\n    The bottom-right corner is the last element of the list.\n    \"\"\"\n    pass\n\ndef write_rectangles(rectangles: List[List[int]]) -> str:\n    \"\"\" Write the coordinates of the corners of a list of rectangles.\n    The top-left corner is the first element of the list.\n    The bottom-right corner is the last element of the list.\n    The list of rectangles should be ordered by its width, then its height.\n    \"\"\"\n    pass\n\ndef area_rectangle(rectangles: List[List[int]]) -> int:\n    \"\"\" Given a list of rectangles, return the total area covered by all rectangles.\n    The top-left corner of a rectangle is the first element of the list.\n    The bottom-right corner of a rectangle is the last element of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_duplicates([0, 1, 2, 3, 2, 1]) == [0, 1, 2, 3]\nassert     remove_duplicates([0, 1, 1, 2, 3]) == [0, 1, 2, 3]\nassert     remove_duplicates([0, 1, 2, 3, 2, 3]) == [0, 1, 2, 3]\nassert     remove_duplicates([0, 1, 1, 2, 2, 3]) == [0, 1, 2, 3]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1, 1, 2, 2]) == [1, 2]\nassert     remove_duplicates([1, 2, 3, 3, 4, 5, 6, 7, 1, 2]) == [1, 2, 3, 4, 5, 6, 7]\nassert     remove_duplicates([0,0,0,0]) == []\nassert     remove_duplicates([]) == []\nassert     remove_duplicates(None) == None\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef unique_numbers(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return sorted(set(numbers))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1,2,3,3]) == [1,2,3]\nassert     remove_duplicates([1,2,3,1]) == [1,2,3]\nassert     remove_duplicates([1,1,2,3,4,5,5]) == [1,2,3,4,5]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1,1,1,1,1,1,1]) == [1]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_duplicates([2, 1, 3, 3, 3, 2, 4, 4]) == [2, 1, 3, 3, 4, 4]\nassert     remove_duplicates([2, 2, 2, 4, 4, 3, 3, 3]) == [2, 2, 3, 4, 3]\nassert     remove_duplicates([1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 6, 6]) == [1, 2, 3, 4, 5, 6]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([\"a\", \"b\", \"b\", \"b\"]) == [\"a\", \"b\"]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 3, 4, 4, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 5, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([1, 2, 3, 4, 5, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]\nassert     remove_duplicates([]) == []\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flip_case(\"\") == \"\"\nassert     flip_case(\"a\") == \"A\"\nassert     flip_case(\"Cats are smarter than dogs\") == \"CATS ARE SMARTER THAN DOGS\"\nassert     flip_case(\"DOGS are smarter than cats\") == \"DOGS ARE SMARTER THAN CATS\"\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     flip_case(\"\") == \"\"\nassert     flip_case(\"A\") == \"a\"\nassert     flip_case(\"a\") == \"a\"\nassert     flip_case(\"b\") == \"B\"\nassert     flip_case(\"d\") == \"D\"\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     flip_case('Hello World') == 'hELLO wORLD'\nassert     flip_case('I AM CHEATING') == 'i am cheating'\nassert     flip_case('a') == 'A'\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_adjacent(string: str) -> int:\n    \"\"\" Find the number of adjacent letters of a string which are the same.\n\n    Parameters\n    ----------\n    string : str\n        Input string.\n\n    Returns\n    -------\n    count : int\n        Number of adjacent same letters.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     flip_case(\"Hello world\") == \"hELLO wORLD\"\nassert     flip_case(\"CamelCase\") == \"camel case\"\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate([\"Hello\", \"world\"]) == \"Hello world\"\nassert     concatenate([\"Hello\", \"world\", \"!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \"world\", \"!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \"world\", \"!\"]) == \"Hello world!\"\nassert     concatenate([\"Hello\", \"world\", \"!\"]) == \"Hello world!\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nconcatenate([]) == ''\nconcatenate(['']) == ''\nconcatenate(['hello']) == 'hello'\nconcatenate(['hello', 'world']) == 'hello world'\nconcatenate(['hello', 'world'], max_len=5) == 'hello world'\nconcatenate(['hello', 'world'], max_len=5) == 'hello world'\nconcatenate(['hello', 'world'], max_len=5) == 'hello world'\nconcatenate(['hello', 'world'], max_len=10) == 'hello world'\nconcatenate(['hello', 'world'], max_len=10) == 'hello world'\nconcatenate(['hello', 'world'], max_len=12) == 'hello world'\nconcatenate(['hello', 'world'], max_len=12) == 'hello world'\nconcatenate(['hello', 'world'], max_len=11) == 'hello world'\nconcatenate(['hello', 'world'], max_len=11) == 'hello world'\nconcatenate(['hello', 'world'], max_len=10) == 'hello world'\nconcatenate(['hello', 'world'], max_len=9) == 'hello world'\nconcatenate(['hello', 'world'], max_len=8) == 'hello world'\nconcatenate(['hello', 'world'], max_len=7) == 'hello world'\nconcatenate(['hello', 'world'], max_len=6) == 'hello world'\nconcatenate(['hello', 'world'], max_len=5) == 'hello world'\nconcatenate(['hello', 'world'], max_len=4) == 'hello world'\nconcatenate(['hello', 'world'], max_len=3) == 'hello world'\nconcatenate(['hello', 'world'], max_len=2) == 'hello world'\nconcatenate(['hello', 'world'], max_len=1) == 'hello world'\nconcatenate(['hello', 'world'], max_len=0) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-1) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-2) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-3) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-4) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-5) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-6) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-7) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-8) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-9) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-10) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-11) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-12) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-13) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-14) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-15) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-16) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-17) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-18) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-19) == 'hello world'\nconcatenate(['hello', 'world'], max_len=-20) == 'hello world'\nconcatenate(['hello', 'world']"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef how_many_words(sentence: str) -> int:\n    \"\"\" Count how many words in a sentence\n\n    Params:\n    -------\n    sentence: str\n        Input sentence to be counted\n\n    Return:\n    -------\n    int\n        Number of words in the sentence\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate([\"Tina\", \"Coder\"]) == \"TinaCoder\"\nassert     concatenate([\"Code\", \"Coder\"]) == \"CodeCoder\"\nassert     concatenate([\"Tina\"]) == \"Tina\"\nassert     concatenate([\"Coder\"]) == \"Coder\"\nassert     concatenate([\"\"]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate(['hello', 'world']) == 'hello world'\nassert     concatenate(['', 'world']) == 'world'\nassert     concatenate(['hello', '']) == 'hello'\nassert     concatenate(['hello', 'world', 'hi', 'how', 'are', 'you']) == 'hello world how are you'\n\nprint(\"Concatenate Test OK\")\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"hello world\"\nassert     concatenate([\"hello\", \"world\", \"!\"]) == \"hello world!\"\nassert     concatenate([\"hello\"]) == \"hello\"\nassert     concatenate([\"\", \"world\"]) == \"world\"\nassert     concatenate([\"\", \"\", \"\", \"\"]) == \"\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate([\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]) == \"Thequickbrownfoxjumpedoverlazydog\"\nassert concatenate([\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"]) == \"Thequickbrownfoxjumpedoverlazydog\"\nassert concatenate([\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\", \".\"]) == \"Thequickbrownfoxjumpedoverlazydog.\"\nassert concatenate([\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\", \"!\"]) == \"Thequickbrownfoxjumpedoverlazydog!\"\nassert concatenate([\"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\", \".\", \"!\", \"!\"]) == \"Thequickbrownfoxjumpedoverlazydog.!\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate([\"Hello\", \"!\", \"World\"]) == \"Hello!World\"\nassert     concatenate([\"Hello\", \" \", \"World\"]) == \"Hello World\"\nassert     concatenate([\"Hello\", \"!\", \"World\", \"!\"]) == \"Hello!World!!\"\nassert     concatenate([\"Hello\", \" \", \"World\", \"!\", \"!\"]) == \"Hello World!!\"\nassert     concatenate([\"Hello\", \"!\"]) == \"Hello!\"\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_prefix([\"stressed\", \"sad\", \"sad\", \"sad\", \"stressed\", \"stressed\", \"stressed\"], \"s\") == [\"sad\", \"stressed\", \"stressed\"]\nassert     filter_by_prefix([\"stressed\", \"sad\", \"sad\", \"sad\", \"stressed\", \"stressed\", \"stressed\"], \"ss\") == [\"sad\", \"sad\", \"stressed\", \"stressed\"]\nassert     filter_by_prefix([\"stressed\", \"sad\", \"sad\", \"sad\", \"stressed\", \"stressed\", \"stressed\"], \"sstressed\") == [\"sad\", \"stressed\", \"stressed\"]\nassert     filter_by_prefix([\"stressed\", \"sad\", \"sad\", \"sad\", \"stressed\", \"stressed\", \"stressed\"], \"stressed\") == [\"stressed\"]\nassert     filter_by_prefix([\"stressed\", \"sad\", \"sad\", \"sad\", \"stressed\", \"stressed\", \"stressed\"], \"stressedx\") == []\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([], \"ab\") == []\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"\") == [\"a\", \"ab\", \"abc\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"a\") == [\"a\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"ab\") == [\"ab\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"abc\") == [\"abc\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_prefix([], \"\") == []\nassert     filter_by_prefix([\"\", \"\"], \"\") == []\nassert     filter_by_prefix([\"cat\", \"dog\", \"mouse\"], \"\") == [\"cat\", \"dog\", \"mouse\"]\nassert     filter_by_prefix([\"cat\", \"dog\", \"mouse\"], \"dog\") == [\"dog\"]\nassert     filter_by_prefix([\"cat\", \"dog\", \"mouse\"], \"cat\") == [\"cat\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c'], 'c') == ['c']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'f') == ['f']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'x') == []\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'f') == ['f']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e', 'f'], 'f') == ['f']\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"alex\", \"Alex\", \"alex is good\", \"Alex is good\"], 'a') == ['alex', 'Alex', 'Alex is good']\nassert     filter_by_prefix([\"alex\", \"Alex\", \"alex is good\", \"Alex is good\"], 'ale') == ['alex', 'Alex', 'alex is good']\nassert     filter_by_prefix([\"alex\", \"Alex\", \"alex is good\", \"Alex is good\"], 'A') == ['Alex', 'alex is good']\nassert     filter_by_prefix([\"alex\", \"Alex\", \"alex is good\", \"Alex is good\"], 'a') == ['alex', 'Alex', 'alex is good']\nassert     filter_by_prefix([\"alex\", \"Alex\", \"alex is good\", \"Alex is good\"], 'as') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_prefix(['a','b','c','d'], 'a') == ['a']\nassert     filter_by_prefix(['a','b','c','d'], 'b') == ['b']\nassert     filter_by_prefix(['a','b','c','d'], 'c') == ['c']\nassert     filter_by_prefix(['a','b','c','d'], 'd') == ['d']\nassert     filter_by_prefix(['a','b','c','d'], 'e') == []\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_prefix([\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"], \"ab\") == [\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"]\nassert     filter_by_prefix([\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"], \"\") == [\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"]\nassert     filter_by_prefix([\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"], \"a\") == [\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"]\nassert     filter_by_prefix([\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"], \"a\") == [\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"]\nassert     filter_by_prefix([\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"], \"a\") == [\"ab\", \"a\", \"ab\", \"ab\", \"a\", \"b\", \"a\", \"a\", \"ab\", \"ab\", \"ab\", \"ab\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['a', 'b', 'c'], 'b') == ['b']\nassert     filter_by_prefix(['a', 'b', 'c'], 'c') == ['c']\nassert     filter_by_prefix(['a', 'b', 'c'], 'd') == []\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'b') == ['b']\nassert     filter_by_prefix(['a', 'b', 'c', 'd', 'e'], 'd') == ['d', 'e']\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_prefix([], \"ab\") == []\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\"], \"ab\") == [\"a\", \"ab\", \"abc\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\", \"a\"], \"ab\") == [\"ab\", \"abcd\", \"a\"]\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\", \"a\"], \"abcd\") == []\nassert     filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\", \"a\"], \"a\") == [\"a\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef list_of_equal_prefixes(strings: List[str]) -> List[str]:\n    \"\"\" Filter an input list of strings only for strings that start with all given prefixes.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive([]) == []\nassert     get_positive([-1, -2, -3]) == [-2, -3]\nassert     get_positive([-1, -2, -3, 0, 1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(get_positive([1, 2, 3, 0, -5, -1])) # [1,2,3,5,-1]\nprint(get_positive([1, -2, 3, 0, -5, -1])) # [1,3,-5,-1]\nprint(get_positive([-1, -2, -3, -5, -1, 0])) # [-1,-2,-3,-5,-1,0]\nprint(get_positive([-1, -2, -3, -5, -1, 0, -1])) # [-1,-2,-3,-5,-1,0,-1]\nprint(get_positive([-1, -2, -3, -5, -1, 0, -1, -2, -3])) # [-1,-2,-3,-5,-1,0,-1,-2,-3]\nprint(get_positive([-1, -2, -3, -5, -1, 0, -1, -2, -3, 0])) # [-1,-2,-3,-5,-1,0,-1,-2,-3,-1]\nprint(get_positive([-1, -2, -3, -5, -1, 0, -1, -2, -3, 0, -1])) # [-1,-2,-3,-5,-1,0,-1,-2,-3,-1,-1]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_palindrome(l: list):\n    \"\"\"Check if the elements in the list are palindrome.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_positive([1, 2, -3, 4, -5, 6]) == [1, 2, 6]\nassert     get_positive([1, 2, -3, 4, -5, -6]) == [1, 2, 4, 6]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert get_positive([2, -3, 1, -9, -8, 2, -5]) == [2, 1, -9, -8, 2, -5]\n\n\ndef is_pangram(s: str):\n    \"\"\"Return True if s contains all of the 26 letters in the alphabet in lowercase.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    get_positive([1, 2, -3, 0])\n    get_positive([1, 2, 0, -4, -1])\n    get_positive([1, -2, 3, -4, 0])\n    get_positive([1, 2, 3, -4, 0])\n    get_positive([-5, 6, 7, 8, 9])"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([1, -1, 2, 0, -2, 0]) == [1, 2]\nassert     get_positive([-1, 2, 0, 1]) == [2]\nassert     get_positive([1, 2, 3, 4, -3, -4, -5]) == []\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_positive([1, 2, 3, -4, 0]) == [1, 2, 3]\nassert     get_positive([-1, -2, -3, 0, 5]) == [-1, -2, -3]\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \"\"\"\n    return [x for x in l if x > 0]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert get_positive([1, -2, 3, 4]) == [1, 3, 4]\nassert get_positive([1, -2, 'a', 4]) == ['a', 4]\nassert get_positive([1, -2, 3, '4']) == []\nassert get_positive([]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_positive([1, -2, 3, 4, 5]) == [1, 3, 4, 5]\nassert     get_positive([1, -2, 3, 4, -5]) == [1, 3, 4]\nassert     get_positive([1, -2, 3, 4, 5, -5]) == [1, 3, 4, 5]\nassert     get_positive([1, -2, 3, 4, 5, -5, -1]) == [1, 3, 4, 5, -1]\nassert     get_positive([1, -2, 3, 4, -5]) == []\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    "
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_prime(0) == False\nassert     is_prime(1) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(4) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_prime(100) == True\nassert     is_prime(1) == False\nassert     is_prime(0) == False\nassert     is_prime(2) == True\nassert     is_prime(-2) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not(is_prime(0))\nassert is_prime(1)\nassert not(is_prime(2))\nassert not(is_prime(5))\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_prime(4) == False\nassert     is_prime(2) == True\nassert     is_prime(3) == True\nassert     is_prime(5) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_prime(2) == True, \"Should return True\"\nassert     is_prime(5) == False, \"Should return False\"\nassert     is_prime(1) == False, \"Should return False\"\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef prime_factorization(n):\n    \"\"\"Find the prime factors of a given number n.\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    # test cases\n    test_is_prime()\n    test_prime_factorization()"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nxs = [-3, -4, 0, 1, 3, 7, 10, 0, -1, -2]\nassert find_zero(xs) == (5, 5)\n\n\ndef solve(xs: list, x: float):\n    \"\"\"\n    Solves the polynomial with coefficients xs at point x.\n    return (x, y) where x is x in the solution and y is y in the solution.\n    solve finds the solution in a for loop.\n    \"\"\"\n    coeff = xs[0]\n    for i in range(1, len(xs)):\n        coeff *= x\n        coeff += xs[i]\n\n    return (x, coeff)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     poly([3, 2, 1], 2) == 0, \"Wrong answer for poly([3, 2, 1], 2)\"\nassert     poly([3, 1, 4, 2, 1], 3) == 0, \"Wrong answer for poly([3, 1, 4, 2, 1], 3)\"\nassert     poly([2, 3, 2, 4], 2) == 0, \"Wrong answer for poly([2, 3, 2, 4], 2)\"\nassert     poly([-1, -2, -3, -4, 5], 2) == 0, \"Wrong answer for poly([-1, -2, -3, -4, 5], 2)\"\n\ndef all_numbers_in_order(xs: list, x: float):\n    \"\"\"\n    Finds all numbers in range of 0 <= x <= max(xs).\n    returns a list of numbers and they should be ordered from 0 to max(xs)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nxs = [1, 2, 3]\nassert find_zero(xs) == 3\n\nxs = [1, 1, 1, 1]\nassert find_zero(xs) == 1\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    xs = [-3, 3]\n    assert(find_zero(xs) == 1.0)\n\n    xs = [-3, 1]\n    assert(find_zero(xs) == 1.0)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     poly([2, -3, 0, 3, -2], 0.7) == -3.2\nassert     poly([1, -2, 3], 0.7) == -5.7\nassert     poly([3, -7, 0, 4, 2], 0.7) == -1.7\n\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef find_min(xs: list):\n    \"\"\"\n    find_min find min of all the coefficients\n    find_min returns only min of the xs.\n    find_min(xs) = min of xs\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_zero([3, 4, 3]) == [3]\nassert     find_zero([1, 1, 2]) == [1, 1]\nassert     find_zero([4, 3, 4, 3]) == [3, 3]\nassert     find_zero([3, 4, 3, 4, 3, 4, 3]) == [3, 3]\nassert     find_zero([0, 0, 0, 0, 1, 0, 0]) == [1, 1]\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef linsolve(A):\n    \"\"\"\n    A is a list of coefficients of a polynomial.\n    linsolve(A) finds a solution of a linear system A*X = 0\n    where X is a vector.\n    \"\"\"\n    assert len(A) % 2 == 0, \"A must be an even list of length > 2\"\n    n = len(A) // 2\n    for i in range(n):\n        A[i + n], A[i] = A[i], A[i + n]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            A[i], A[j] = A[j], A[i]\n            if A[i]!= 0:\n                for k in range(n):\n                    A[k] /= A[i]\n                break\n    xs = []\n    for i in range(n):\n        xs.append(A[i] / A[n] * x)\n    return xs\n\n\ndef solution(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    solution returns a list of the minimum solutions of\n    the equation ax + b = 0.\n    \"\"\"\n    assert len(xs) > 1, \"xs must be a list of length > 1\"\n    return linsolve([1, xs[0]]) + linsolve([xs[1], 1])\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5]\n    print(sort_third(l)"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_third([4, 1, 7, 2, 5, 6, 8, 11]) == [1, 2, 4, 5, 6, 7, 8, 11]\nassert     sort_third([7, 2, 5, 4, 1, 6, 8, 11]) == [7, 2, 1, 4, 5, 6, 8, 11]\nassert     sort_third([6, 4, 8, 11, 1, 2, 3, 5]) == [1, 2, 4, 5, 6, 8, 3, 11]\nassert     sort_third([1, 5, 3, 6, 9, 10, 2, 8]) == [1, 2, 3, 5, 6, 8, 10, 9]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_third(l) == l\nassert     sort_third([1,2,3,4]) == [1,2,3,4]\nassert     sort_third([2,3,4,5]) == [1,2,3,4]\nassert     sort_third([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_third([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef main():\n    print(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(sort_third
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_third([2, 9, 1, 6, 3, 5, 7, 4, 8, 0]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nassert     sort_third([2, 9, 1, 6, 3, 5, 7, 4, 8, 0]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nassert     sort_third([2, 9, 1, 6, 3, 5, 7, 4, 8, 0]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nassert     sort_third([2, 9, 1, 6, 3, 5, 7, 4, 8, 0]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\nassert     sort_third([2, 9, 1, 6, 3, 5, 7, 4, 8, 0]) == sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_third([]) == []\nassert     sort_third([1]) == [1]\nassert     sort_third([1,2]) == [1,2]\nassert     sort_third([1,2,3]) == [1,2,3]\nassert     sort_third([0,1,2,3]) == [0,1,2,3]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_third([3, 4, 1, 2, 5]) ==     [3, 1, 2, 5, 4]\nassert     sort_third([4, 2, 3, 1, 5]) ==     [4, 3, 1, 2, 5]\nassert     sort_third([1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5]\nassert     sort_third([]) ==                 []\nassert     sort_third([3, 4, 5, 1, 2]) ==     [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nunique([1, 2, 3, 3, 2, 1, 5]) == [1, 2, 3, 5]\nassert unique([1, 2, 3, 4, 5]) == []\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique([1, 2, 3, 3, 2, 1]) == [1, 2, 3]\nassert     unique([1, 2, 1, 1]) == [1, 2]\nassert     unique([1, 1]) == [1]\nassert     unique([]) == []\n\ndef check_balance(L: list):\n    \"\"\"Check if a list is balance\n    \"\"\"\n    if len(L) <= 1:\n        return True\n    elif L[0] > L[-1]:\n        return False\n    else:\n        for i in range(1, len(L)):\n            if L[i] > L[i-1]:\n                return False\n            else:\n                return check_balance(L[:-1])\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    unique([]) == []\n    unique([1]) == [1]\n    unique([1,2,3,1]) == [1,2,3]\n    unique([1,1,1,1]) == [1]\n    unique([1,1,2,3,3]) == [1,2,3]\n    unique([1,1,2,3,3,4,4]) == [1,2,3,4]\n    unique([1,1,2,3,4,4]) == [1,2,3,4]\n    unique([1,2,2,2,3,4,4,4,4,4,4,4,4]) == [1,2,3,4]\n    unique([1,2,2,2,3,4,4,4,4,4,4,4,4]) == [1,2,3,4]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique([5,2,3,3,5,5,5,6,3,7]) == [2,3,5,6,7], \"unexpected result\"\nassert     unique([]) == [], \"expected empty list\"\nassert     unique([1,1,2]) == [1,2], \"expected unique\"\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique([1,2,3,2,2,3]) == [1,2,3], \"Fail\"\nassert     unique([1,2,2,2,2,3]) == [1,2,2,3], \"Fail\"\nassert     unique([1,2,2,2,3]) == [1,2,3], \"Fail\"\nassert     unique([1,2,3]) == [1,2,3], \"Fail\"\nassert     unique([]) == [], \"Fail\"\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique([2,1,2,3,5,3,3]) == [1,2,3,5]\nassert unique([5,3,1,2,1,3,5,2,3,1]) == [1,2,3,5]\nassert unique([]) == []\nassert unique([1]) == [1]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (unique([]) == []), \"empty list is empty\"\nassert     (unique([1,1,2,2,3,4,5]) == [1,2,3,4,5]), \"no repeats\"\nassert     (unique([2,3,1,2,3,4,1,1,2]) == [1,2,3,4,1]), \"duplicates\"\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique([1, 2, 2, 3, 3, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique([]) == []\nassert     unique([\"a\", \"a\", \"b\", \"b\"]) == [\"a\", \"b\"]\nassert     unique([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nunique([1, 1, 2, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_element([]) == None, 'Empty list'\nassert     max_element([2, 6, 8, 10]) == 10, 'Max element in the list'\nassert     max_element([1, 5, 7, 7, 7, 7, 7, 7]) == 7, 'Max element in the list'\nassert     max_element([2, 5, 6, 7, 10, 0]) == 10, 'Max element in the list'\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_element([]) == None, \"Empty list.\"\nassert     max_element([1, 2, 3, 4, 5]) == 5, \"Max element: 5\"\nassert     max_element([]) == None, \"Empty list.\"\nassert     max_element([-1, -2, -3, -4, -5]) == -1, \"Max element: -1\"\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmax_element([1,2,3,4,5,6,7,8,9]) == 10\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_element([]), 0\nassert max_element([1]), 1\nassert max_element([1, 2]), 2\nassert max_element([1, 2, 3]), 3\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('Example:')\n    print(max_element([0, 0, 0]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert max_element([0, 0, 0]) == 0\n    "
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_element([1,2,3,4])         == 4\nassert     max_element([1,2,3,4,5,6])     == 6\nassert     max_element([1,2,3,4,5])     == 5\nassert     max_element([1,2,3,4])         == 4\nassert     max_element([1,2,3,4,5,6,7]) == 7\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([1, 2, 3, 4]) == 4\nassert     max_element([2, 3, 4, 1]) == 4\nassert     max_element([-5, 4, 3, 2, 1]) == 5\n\nprint(\"Check: max_element\")\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_element([1,2,3,4]) == 4\nassert     max_element([1,2,3,4,5]) == 5\nassert     max_element([2,2,2,2,2]) == 2\nassert     max_element([1,2,3,4,5,6]) == 6\nassert     max_element([2,1,3,4,5,6]) == 6\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3]) == 3\nassert     max_element([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_element([]) == None\nassert     max_element([-1,-2]) == -1\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fizz_buzz(100) == 6, \"Wrong answer\"\nassert     fizz_buzz(101) == 1, \"Wrong answer\"\nassert     fizz_buzz(14) == 1, \"Wrong answer\"\nassert     fizz_buzz(7) == 1, \"Wrong answer\"\nassert     fizz_buzz(16) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fizz_buzz(3) == 1\nassert     fizz_buzz(10) == 2\nassert     fizz_buzz(100) == 10\nassert     fizz_buzz(1000) == 41\nassert     fizz_buzz(10000) == 210\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fizz_buzz(1) == 0, \"1 should be 0\"\nassert     fizz_buzz(2) == 0, \"2 should be 0\"\nassert     fizz_buzz(3) == 0, \"3 should be 0\"\nassert     fizz_buzz(4) == 0, \"4 should be 0\"\nassert     fizz_buzz(5) == 0, \"5 should be 0\"\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    fizz_buzz(3) == 0\n    fizz_buzz(11) == 1\n    fizz_buzz(6) == 1\n    fizz_buzz(7) == 0\n    fizz_buzz(8) == 0\n    fizz_buzz(9) == 0\n    fizz_buzz(12) == 1\n    fizz_buzz(15) == 0\n    fizz_buzz(24) == 0\n    fizz_buzz(25) == 1\n    fizz_buzz(31) == 1\n    fizz_buzz(32) == 1\n    fizz_buzz(43) == 1\n    fizz_buzz(49) == 1\n    fizz_buzz(50) == 1\n    fizz_buzz(52) == 1\n    fizz_buzz(53) == 1\n    fizz_buzz(99) == 1\n    fizz_buzz(100) == 1\n    fizz_buzz(101) == 0\n    fizz_buzz(10) == 1\n    fizz_buzz(111) == 1\n    fizz_buzz(112) == 1\n    fizz_buzz(113) == 0\n    fizz_buzz(114) == 0\n    fizz_buzz(121) == 1\n    fizz_buzz(122) == 1\n    fizz_buzz(123) == 0\n    fizz_buzz(124) == 0\n    fizz_buzz(131) == 1\n    fizz_buzz(132) == 1\n    fizz_buzz(133) == 0\n    fizz_buzz(134) == 0\n    fizz_buzz(139) == 1\n    fizz_buzz(140) == 1\n    fizz_buzz(141) == 1\n    fizz_buzz(142) == 0\n    fizz_buzz(145) == 1\n    fizz_buzz(146) == 1\n    fizz_buzz(147) == 0\n    fizz_buzz(148) == 0\n    fizz_buzz(151) == 1\n    fizz_buzz(152) == 1\n    fizz_buzz(153) == 1\n    fizz_buzz(154) == 1\n    fizz_buzz(155) == 1\n    fizz_buzz(156) == 1\n    fizz_buzz(157) == 1\n    fizz_buzz(158) == 1\n    fizz_buzz(159) == 1\n    fizz_buzz(160) == 1\n    fizz_buzz(161) == 1\n    fizz_buzz(162) == 1\n    fizz_buzz(163) == 1\n    fizz_buzz(164) == 1\n    fizz_buzz(165) == 1\n    fizz_buzz(166) == 1\n    fizz_buzz(167) == 1\n    fizz_buzz(168) == 0\n    fizz_buzz(169) == 0\n    fizz_buzz(170) == 0\n    fizz_buzz(171) == 0\n    fizz_buzz(172) == 0\n    fizz_buzz(173) == 0\n    fizz_buzz(174) == 0\n    fizz_buzz(175) == 1\n    fizz_buzz(176) == 0\n    fizz_buzz(177) == 0\n    fizz_buzz(178) == 0\n    fizz_buzz(179) == 1\n    fizz_buzz(180) == 1\n    fizz_buzz(181) == 1\n    fizz_buzz(182) == 1\n    fizz_buzz(183) == 1\n    fizz_buzz(184) == 1\n    fizz_buzz(185) == 1\n    fizz_buzz(186) == 1\n    fizz_buzz(187) == 1\n    fizz_buzz(188) == 1\n    fizz_buzz(189) == 1\n    fizz_buzz(190) == 1\n    fizz_buzz(191) == 1\n    fizz_buzz(192) == 1\n    fizz_buzz(193) == 1\n    fizz_buzz(194) == 1\n    fiz"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fizz_buzz(20) == 0\nassert     fizz_buzz(25) == 3\nassert     fizz_buzz(30) == 5\nassert     fizz_buzz(50) == 7\nassert     fizz_buzz(51) == 8\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fizz_buzz(1)        == 1\nassert     fizz_buzz(2)        == 1\nassert     fizz_buzz(11)    == 1\nassert     fizz_buzz(15)    == 1\nassert     fizz_buzz(16)    == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fizz_buzz(15) == 4\nassert     fizz_buzz(2) == 0\nassert     fizz_buzz(29) == 6\nassert     fizz_buzz(11) == 2\nassert     fizz_buzz(10) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fizz_buzz(15) == 3\nassert     fizz_buzz(30) == 5\nassert     fizz_buzz(50) == 5\nassert     fizz_buzz(70) == 8\nassert     fizz_buzz(100) == 13\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even([2, 4, 1, 0, 5, 8, 3, 6, 9, 7]) == [2, 4, 0, 1, 3, 6, 7, 8, 9, 5]\nassert     sort_even([2, 1, 4, 0, 5, 3, 6, 9, 8, 7]) == [2, 1, 0, 4, 3, 5, 6, 7, 8, 9]\n\nprint('Passed!')\n\n\ndef sort_odd(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_even([1, 5, 3, 4, 2, 6, 8]) == [2, 4, 1, 5, 6, 3, 8]\nassert     sort_even([1, 3, 8, 5, 4, 9, 2]) == [2, 3, 1, 4, 5, 8, 9]\nassert     sort_even([1, 9, 3, 8, 6, 5, 4]) == [2, 3, 4, 5, 6, 8, 9]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_even([5, 3, 9, 1, 7, 8, 2, 4]) == [1, 2, 3, 4, 5, 7, 8, 9]\nassert     sort_even([5, 3, 9, 1, 7, 8, 2, 4, 11, -2]) == [-2, 1, 2, 3, 5, 7, 8, 9, 11]\nassert     sort_even([5, 3, 9, 1, 7, 8, 2, 4, 11, -2, 0]) == [0, -2, 1, 2, 3, 4, 5, 7, 8, 9, 11]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_even([0, 2, 2, 2, 4, 4, 4, 6, 6]) ==  [0, 2, 4, 4, 4, 6, 6, 2, 2]\nassert     sort_even([0, 2, 2, 2, 4, 4, 4, 6, 6, 6, 1, 1, 2, 3]) ==  [0, 1, 2, 2, 2, 3, 4, 4, 4, 6, 6, 6, 1, 2]\nassert     sort_even([0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7]) ==  [0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7]\nassert     sort_even([0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7]) ==  [0, 1, 2, 2, 2, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7]\nassert     sort_even([0, 2, 2, 2, 4, 4, 4, 6, 6, 6, 1, 1, 2, 3]) ==  [0, 1, 2, 2, 2, 3, 4, 4, 4, 6, 6, 6, 1, 2]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_even([0,1,2,3,4,5]) == [0,2,4,1,3,5]\nassert     sort_even([1,1,2,3,4,5]) == [1,1,2,3,4,5]\nassert     sort_even([1,2,1,2,3,4,5]) == [1,1,2,2,3,4,5]\n\ndef c_sort(l: list, c: int):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the even indicies, while its values at the odd indicies are equal\n    to the values of the odd indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_even([5,3,1,6,2,2]) == [2,3,2,5,6,1]\nassert     sort_even([5,4,3,1,6,2]) == [1,3,3,4,5,6]\nassert     sort_even([5,4,3,1,6,2,2]) == [2,2,2,3,3,4,5]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert sort_even([0, 1, 2, 3]) == [0, 2, 3, 1]\n\nassert sort_even([2, 1, 4, 3]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_cyclic(\"\") == \"\"\nassert     decode_cyclic(\"abc\") == \"abc\"\nassert     decode_cyclic(\"zzz\") == \"zzz\"\nassert     decode_cyclic(\"qr\") == \"qr\"\nassert     decode_cyclic(\"ttt\") == \"ttt\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encode_cyclic('a') == 'a'\nassert     encode_cyclic('abc') == 'abc'\nassert     encode_cyclic('abcd') == 'abcd'\nassert     encode_cyclic('abcde') == 'abcde'\nassert     encode_cyclic('abcdef') == 'abcdef'\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode_cyclic(\"BAABB\") == \"BABBC\"\nassert     encode_cyclic(\"BABC\") == \"BAAAB\"\n\nprint(f\"There are {encode_cyclic(s=\"BAABC\")} in '{s}'\""
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decode_cyclic(encode_cyclic(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert     decode_cyclic(encode_cyclic(\"abcdefghijklmnopqrstuvwxyz\")) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert     decode_cyclic(encode_cyclic(\"test\")) == \"test\""
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \nif __name__ == \"__main__\":\n    s = input()\n    print(encode_cyclic(s))\n    print(decode_cyclic(encode_cyclic(s)))\n    "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_cyclic(\"fgzcfvnzk\") == \"fgzcfvnzk\"\nassert     decode_cyclic(\"zbghlqm\") == \"zbghlqm\"\nassert     decode_cyclic(\"bekrnfl\") == \"beknfl\"\nassert     decode_cyclic(\"xyuawoxvj\") == \"xyuawoxvj\"\nassert     decode_cyclic(\"ejhqnhz\") == \"ejhqnhz\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # read strings from input file\n    with open(\"input.txt\", 'r') as f:\n        strings = f.read().split()\n    # count strings encoded in each group\n    group_lengths = map(lambda x: len(encode_cyclic(x)), strings)\n    # count characters in each group\n    chars_in_each_group = map(lambda x: len(x), strings)\n    # count strings in each group\n    strings_in_each_group = map(lambda x: len(x), strings)\n\n    # print the results\n    print(f\"{sum(group_lengths)} strings encoded by encode_cyclic()\")\n    print(f\"{sum(chars_in_each_group)} characters in each group\")\n    print(f\"{sum(strings_in_each_group)} strings in each group\")\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_cyclic(\"mebmkvufikxkxl\") == \"mu\"\nassert     decode_cyclic(\"lnkmjqoipvqnj\") == \"qn\"\nassert     decode_cyclic(\"kjmfkpvwstewqn\") == \"qn\"\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prime_fib(0) == 0\nassert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_fib(0) == 2\nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 7\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef main():\n    \"\"\"\n    By using function prime_fib(n), you can check whether n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    n = int(input(\"Please input the number to check: \"))\n    while n < 0:\n        print(\"The input is incorrect\")\n        n = int(input(\"Please input the number to check: \"))\n    \n    if prime_fib(n) == True:\n        print(\"%d-th number that is a Fibonacci number and it's also prime is %d\" %(n, prime_fib(n)))\n    else:\n        print(\"%d-th number that is a Fibonacci number and it's also prime is not %d\" %(n, prime_fib(n)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 13\nassert     prime_fib(5) == 31\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_fib(10) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     prime_fib(17) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     prime_fib(19) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert     prime_fib(23) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3, 4]) == True\nassert triples_sum_to_zero([-3, 0, 1, 2, -2, -1, 3, 4]) == False\nassert triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3, 4, 0]) == False\nassert triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3, 4, -3]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(triples_sum_to_zero([1,2,3,4,5,6,7,8,9]))\nprint(triples_sum_to_zero([0,1,2,3,4,5,6,7,8,9]))\nprint(triples_sum_to_zero([-1,-2,-3,-4,-5,-6,-7,-8,-9]))\nprint(triples_sum_to_zero([-10,-11,-12,-13,-14,-15,-16,-17,-18]))\nprint(triples_sum_to_zero([-19,-20,-21,-22,-23,-24,-25,-26,-27]))\nprint(triples_sum_to_zero([-28,-29,-30,-31,-32,-33,-34,-35,-36])"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     triples_sum_to_zero([-1, 0, 1, 2, -1, -4]) == True\nassert     triples_sum_to_zero([1, 2, 3, -4, -1]) == False\nassert     triples_sum_to_zero([1, 2, -3, 4, -1]) == True\nassert     triples_sum_to_zero([1, -2, -3, 4, -1]) == False\nassert     triples_sum_to_zero([1, 2, 3, 4, -1]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntriples_sum_to_zero([3, 4, -1, 1, -1, -2]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([-2, -1, 0, 1, 2]) == True\nassert     triples_sum_to_zero([-1, 1, 1, -2, -2]) == False\nassert     triples_sum_to_zero([1, 0, -1, -2, 3]) == True\nassert     triples_sum_to_zero([1, 0, -1, -2, 0]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"OK\")\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     car_race_collision(1) == 0, \"Test 1 Failed\"\nassert car_race_collision(2) == 0, \"Test 2 Failed\"\nassert car_race_collision(3) == 0, \"Test 3 Failed\"\nassert car_race_collision(4) == 1, \"Test 4 Failed\"\nassert car_race_collision(5) == 1, \"Test 5 Failed\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     car_race_collision(2) == 0, 'car_race_collision(2) is wrong'\nassert car_race_collision(5) == 3, 'car_race_collision(5) is wrong'\nassert car_race_collision(9) == 11, 'car_race_collision(9) is wrong'\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         car_race_collision(1) == 0, \"Wrong\"\nassert car_race_collision(2) == 1, \"Wrong\"\nassert car_race_collision(3) == 2, \"Wrong\"\nassert car_race_collision(4) == 3, \"Wrong\"\nassert car_race_collision(5) == 4, \"Wrong\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     car_race_collision(n=4) == 0\nassert     car_race_collision(n=10) == 1"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     car_race_collision(1) == 0, \"Your solution doesn't seem to be correct\"\nassert car_race_collision(2) == 1, \"Your solution doesn't seem to be correct\"\nassert car_race_collision(3) == 2, \"Your solution doesn't seem to be correct\"\nassert car_race_collision(4) == 3, \"Your solution doesn't seem to be correct\"\nassert car_race_collision(5) == 3, \"Your solution doesn't seem to be correct\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 2\nassert     car_race_collision(4) == 3\nassert car_race_collision(10) == 6\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(4) == 1\nassert     car_race_collision(10) == 5\n\n\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     car_race_collision(1)    == 0\nassert     car_race_collision(2)    == 0\nassert     car_race_collision(3)    == 1\nassert     car_race_collision(4)    == 1\nassert     car_race_collision(5)    == 1\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(car_race_collision(n=5))\nassert car_race_collision(n=4) == 1\nassert car_race_collision(n=3) == 1\nassert car_race_collision(n=2) == 1\nassert car_race_collision(n=1) == 1\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         incr_list([1,2,3]) == [2,3,4]\nassert         incr_list([1,2,3,4]) == [2,3,4,5]\nassert         incr_list([1,2,3]) == [2,3,4]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     incr_list([0,1,2,3,4]) == [1,2,3,4,5], \\\n            'incr_list([0,1,2,3,4]) is wrong'\n\ndef even_odd(num):\n    \"\"\"Given a number, return a pair of numbers (even_number, odd_number).\n    If number is even, return (even_number, num), else return (num, odd_number).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef excp_test():\n    \"\"\"\n    Test the list with exceptions\n    \"\"\"\n    l = list_of_elements_to_increment()\n    print(\"Original List: \")\n    print(l)\n    try:\n        incr_list(l)\n        print(\"New List: \")\n        print(l)\n    except (ValueError, TypeError):\n        print(\"Oops! Your list element must be a integer, not a string.\")\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     incr_list(l) == [[1], [2], [3], [4], [5]]\nassert     incr_list(l[::2]) == [[1, 3], [3, 5], [5, 7], [7, 9], [9, 11]]\n\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     incr_list(['a', 'b', 'c']) == ['a', 'b', 'c', 'b']\nassert     incr_list([]) == []\nassert     incr_list([1]) == [1]\nassert     incr_list(['a']) == ['a', 'a']\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nincr_list([]) == []\nassert \nincr_list([1]) == [2]\nassert \nincr_list([1,2]) == [2,3]\nassert \nincr_list([1,2,3]) == [2,3,4]\nassert \nincr_list([1,2,3,4]) == [2,3,4,5]\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert pairs_sum_to_zero([1, 2, -1, -2, 3]) == True\nassert pairs_sum_to_zero([1, 2, 3]) == False\nassert pairs_sum_to_zero([-1, 2, 1]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert pairs_sum_to_zero([0, -1, 2, -3, 1]) == True\nassert pairs_sum_to_zero([0, 1, 2, -3, 1]) == False\nassert pairs_sum_to_zero([0, 1, 2, -3, 2]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([1]) == False\nassert     pairs_sum_to_zero([-1,1]) == True\nassert     pairs_sum_to_zero([1,1]) == False\nassert     pairs_sum_to_zero([2,-4]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert pairs_sum_to_zero([]) == False\nassert pairs_sum_to_zero([1]) == False\nassert pairs_sum_to_zero([-1]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([-5, -3, 2, 2, 3, -4]) == True\nassert     pairs_sum_to_zero([-5, -3, 2, -2, 3, -4]) == False\nassert     pairs_sum_to_zero([1, 2, 3, -4, 5]) == False\nassert     pairs_sum_to_zero([-5, -3, 2, -2, 3, -4]) == True\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([-1, 2, 1, -4])\nassert     not pairs_sum_to_zero([-1, 2, -3, 4])\nassert     pairs_sum_to_zero([-1, 2, 3, 4])\nassert     pairs_sum_to_zero([-1, 2, 3, 4, -4])\nassert     pairs_sum_to_zero([-1, 2, 3, 4, -1, 4])\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert pairs_sum_to_zero([1,2,-3,4])\nassert not pairs_sum_to_zero([-1,2,3])\nassert pairs_sum_to_zero([1,-2,3])\nassert not pairs_sum_to_zero([1,2,3,4])\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([5, -3, 4, 0, -5]) == False\nassert pairs_sum_to_zero([5, -3, 4, 0, -5, -3, 4, -3]) == True\nassert pairs_sum_to_zero([5, -3, 4, 0, -5, -3, 4, -3, -3, 0]) == True\nassert pairs_sum_to_zero([-5, -3, 4, 0, -5, -3, 4, -3, -3, 0]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([-3, -2, -1, 1, 2, 3]) is True\nassert     pairs_sum_to_zero([-3, -2, -1, 1, 2, 3, -4]) is True\nassert     pairs_sum_to_zero([-3, -2, -1, 1, 2, 3, -4, -5]) is False\nassert     pairs_sum_to_zero([-3, -2, -1, 1, 2, 3, -4, -5, -6]) is False\nassert     pairs_sum_to_zero([-3, -2, -1, 1, 2, 3, -4, -5, -6, -7]) is False\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef change_base_2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_base(27, 2) == '21'\nassert     change_base(27, 3) == '162'\nassert     change_base(27, 4) == '188'\nassert     change_base(27, 5) == '215'\nassert     change_base(27, 6) == '921'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_base(1, 10) == '1'\nassert     change_base(10, 2) == '10'\nassert     change_base(1000, 8) == '64'\nassert     change_base(25, 16) == '4'\nassert     change_base(25, 2) == '25'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_base(45, 16) == \"F\"\nassert     change_base(45, 2) == \"45\"\nassert     change_base(44, 16) == \"F\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef convert_base(x: int, base1: int, base2: int):\n    \"\"\"Change numerical base of input number x to base2.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_base(3, 2) == '31'\nassert     change_base(3, 4) == '255'\nassert     change_base(3, 8) == '7'\nassert     change_base(3, 10) == '3'\nassert     change_base(3, 16) == '1F'\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ntriangle_area(4,3)\ntriangle_area(5,4)\ntriangle_area(6,5)\n\nprint(\"... done with test\")\n\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     triangle_area(3, 4) == 0.5, 'Should be 0.5'\nassert     triangle_area(4, 4) == 1, 'Should be 1'\nassert     triangle_area(4, 3) == 0.75, 'Should be 0.75'\n\nif __name__ == \"__main__\":\n    # check the correctness of triangle_area\n    print(triangle_area(3, 4))\n    print(triangle_area(4, 4))\n    print(triangle_area(4, 3))\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntriangle_area(1, 1) == 1.5, \"3.0\"\nassert \ntriangle_area(1, 2) == 0.5, \"0.5\"\nassert \ntriangle_area(1, 1.5) == 0.5, \"0.5\"\nassert \ntriangle_area(1, 2.5) == 0.5, \"0.5\"\nassert \ntriangle_area(1, 3) == 0.5, \"0.5\"\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(1, 2) == 1.5\nassert     triangle_area(5, 2) == 7.5\nassert     triangle_area(2, 3) == 5\nassert     triangle_area(2, 4) == 10\nassert     triangle_area(3, 4) == 14\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"check your code!\")\n\nassert triangle_area(2, 2) == 0.5\nassert triangle_area(1, 2) == 0.5\nassert triangle_area(1, 0) == 0"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(1, 1) == 1\nassert     triangle_area(1, 2) == 1\nassert     triangle_area(1, 3) == 1\nassert     triangle_area(1.1, 1) == 1.1\nassert     triangle_area(1.1, 2) == 1.0\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 0\n    fib5(2) -> 2\n    fib5(3) -> 0\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    for n in range(0, 20):\n        assert fib4(n) == (0 if n <= 0 else 1 if n == 1 else fib4(n - 1) + fib4(n - 2))\n        print(n, fib4(n)"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fib4(3) == 0\nassert     fib4(5) == 2\nassert     fib4(8) == 0\nassert     fib4(10) == 0\nassert     fib4(11) == 1\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fib4(5) == 5\nassert     fib4(8) == 13\nassert     fib4(13) == 34\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fib4(0) == 0, 'fib4(0)'\nassert     fib4(1) == 0, 'fib4(1)'\nassert     fib4(2) == 1, 'fib4(2)'\nassert     fib4(3) == 0, 'fib4(3)'\nassert     fib4(4) == 2, 'fib4(4)'\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(5) == 0\nassert     fib4(6) == 0\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"[+] All tests are done!\")\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 3, \"Wrong median\"\nassert     median([]) == None, \"Empty list\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert _______, 'WRONG'\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # check the correctness of median\n\n\nif __name__ == \"__main__\":\n    x = sorted(random.sample(range(-100, 100), 10))\n    print(x)\n    print(median(x))\n    \n    print(median2(x))\n    print(median3(x))\n    \n    \n\n\n\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert median([3,2,1,5]) == 2\nassert median([5,4,1,5,1,2]) == 1\nassert median([1,5,3,2,4]) == 4\nassert median([5,5,5]) == 5\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median([]) == None, 'Wrong median for empty list.'\nassert     median([1]) == 1, 'Wrong median for one element list.'\nassert     median([1, 2]) == 2, 'Wrong median for two element list.'\nassert     median([2, 1]) == 1.5, 'Wrong median for three element list.'\nassert     median([3, 2, 1]) == 2, 'Wrong median for four element list.'\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median([1, 2, 3, 4]) == 2\nassert     median([1, 2, 3, 4, 5]) == 3\nassert     median([1, 2, 3, 4, 5, 6]) == 4\nassert     median([1, 2, 3, 4, 5, 6, 7]) == 3.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median([1,2,3]) == 2\nassert median([1,2,3,4,5,6]) == 3\nassert median([1,2,3,4,5,6,7,8]) == 3\nassert median([1,2,3,4,5,6,7,8,9]) == 3\nassert median([]) == None\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_palindrome(\"never odd or even\") == False\nassert is_palindrome(\"abc\") == False\nassert is_palindrome(\"a\") == True\nassert is_palindrome(\"tacocat\") == False\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"is_palindrome: \", is_palindrome(text))\n\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_palindrome('a')\nassert is_palindrome('abc')\nassert is_palindrome('ab')\nassert not is_palindrome('abcba')\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_palindrome(\"A man, a plan, a canal: Panama\")\nassert is_palindrome(\"race a car\")\nassert not is_palindrome(\"race a car, a man\")\n\nprint(is_palindrome(\"race a car\")"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_palindrome('civic') == True, \"Not a palindrome\"\nassert     is_palindrome('civil') == True, \"Not a palindrome\"\nassert     is_palindrome('civilisation') == True, \"Not a palindrome\"\nassert     is_palindrome('civilization') == True, \"Not a palindrome\"\nassert     is_palindrome('civilized') == True, \"Not a palindrome\"\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_palindrome('not a palindrome')\nassert not is_palindrome('no')\nassert not is_palindrome('abc')\nassert is_palindrome('a')\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_palindrome(\"tacocat\") == True\nis_palindrome(\"racecar\") == True\nis_palindrome(\"anna\") == True\nis_palindrome(\"robert\") == False"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_palindrome('A man, a plan, a canal: Panama') is True\nassert     is_palindrome('race a car') is False\nassert     is_palindrome('A man, a plan, a canal: Panama') is True\n\n\n\n\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert modp(2, 3) == 1\nassert modp(2, 5) == 2\nassert modp(2, 17) == 4\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef modp_inverse(n: int, p: int):\n    \"\"\"Return the inverse modulo 2^n (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     modp(0, 2) == 0\nassert     modp(1, 2) == 1\nassert     modp(2, 2) == 1\nassert     modp(3, 2) == 1\nassert     modp(4, 2) == 0\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     modp(10, 2) == 1, \"10 mod 2 should be 1\"\nassert     modp(10, 5) == 0, \"10 mod 5 should be 0\"\nassert     modp(10, 8) == 1, \"10 mod 8 should be 1\"\nassert     modp(10, 2) == 2, \"10 mod 2 should be 2\"\nassert     modp(10, 5) == 3, \"10 mod 5 should be 3\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert encode_shift(\"abc\") == \"acb\"\nassert encode_shift(\"abcdefghijklmnopqrstuvwxyz\") == \"acbdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode_shift(\"G\") == \"G\"\nassert     encode_shift(\"ABC\") == \"L\"\nassert     encode_shift(\"ABCD\") == \"R\"\nassert     encode_shift(\"ABCD-\") == \"RL\"\nassert     encode_shift(\"ABCD-ABCD-\") == \"RLL\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decode_shift(encode_shift(\"ABC\")) == \"ABC\"\nassert     decode_shift(encode_shift(\"DEF\")) == \"GHI\"\nassert     decode_shift(encode_shift(\"ABCDEFGHIJ\")) == \"ABCDEFGHIJ\""
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decode_shift(\"a\") == \"a\"\nassert     decode_shift(\"z\") == \"a\"\nassert     decode_shift(\"p\") == \"q\"\nassert     decode_shift(\"y\") == \"u\"\nassert     decode_shift(\"u\") == \"y\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_shift(encode_shift(\"AAAAAAABBCCCCDDDDEEFFGGHHHIIJJJJKKKKKLMMMMNNNNOOOOOOPPPQQQQRRRRSSSSSSTTTTUUUUVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef encode_rotate(s: str):\n    \"\"\"\n    takes as input string s and returns a rotated version of s.\n    \"\"\"\n    pass\n\ndef decode_rotate(s: str):\n    \"\"\"\n    takes as input string encoded with encode_rotate function. Returns decoded string.\n    \"\"\"\n    pass\n\n\n\nif __name__ == \"__main__\":\n    print(\"\\nTesting encode_shift...\")\n    "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_shift(\"vivsvyczkdgbeiflgx\") == \"vivsvyczkdgbeiflgx\"\nassert     decode_shift(\"cxryzihanpvbcf\") == \"xiryszphbwcfl\"\nassert     decode_shift(\"yabmdrqsyndefh\") == \"yabmdrqsyndefh\"\n\ndef encode_rot(s: str):\n    \"\"\"\n    returns encoded string by rotating the alphabet such that first letter is \n    in the beginning.\n    \"\"\"\n    # use radix_base_exponential_calculation\n    pass\n\ndef decode_rot(s: str):\n    \"\"\"\n    takes as input string encoded with encode_rot function. Returns decoded string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"text\") == \"exet\"\nassert     remove_vowels(\"camel\") == \"cema\"\nassert     remove_vowels(\"bicycle\") == \"bicl\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_vowels('hola') == 'hollo'\nassert     remove_vowels('hello') == 'ello'\nassert     remove_vowels('codestring') =='string'\nassert     remove_vowels('codestring1') =='string1'\nassert     remove_vowels('codestring12') =='string1'\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_vowels(\"This is a text\") == \"Ti sht is a txt\"\nassert     remove_vowels(\"I want to play\") == \"I wn t t p l e\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    remove_vowels(\"this is a test\") == \"test\"\n    remove_vowels(\"I like that\") == \"like\"\n    remove_vowels(\"Do you like that\") == \"do you like\"\n    remove_vowels(\"\") == \"\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(remove_vowels(\"Welcome to our world\"))\nprint(remove_vowels(\"This is a sentence\"))\nprint(remove_vowels(\"Hello, my name is Jim\"))\nprint(remove_vowels(\"\"))\nprint(remove_vowels(\"\"))"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_vowels('Woo') == 'Wu'\nassert     remove_vowels('Woo') == 'Wu'\nassert     remove_vowels('Hello') == 'Hl'\nassert     remove_vowels('Hello') == 'Hl'\nassert     remove_vowels('Woo') == 'Wu'\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(remove_vowels(\"hello world\"))\n\n\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_vowels('Are you there?') =='reduced'\nassert     remove_vowels('A mere monkey is not') =='reduced'\nassert     remove_vowels('THe Internet is great') =='reduced'\nassert     remove_vowels('This is a short paragraph.') =='reduced'\nassert     remove_vowels('A monkey is not') =='reduced'\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_threshold([3,2,1], 2)\nassert     below_threshold([3,2,1], 1)\nassert     below_threshold([3,2,1], 0)\nassert     below_threshold([-1,2,3], 0)\n\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not below_threshold([5, 1, 3, 4, 5], 5)\nassert below_threshold([4, 1, 3, 4, 5], 5)\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_threshold([3, 4, 5, 6, 7], 3)\nassert     below_threshold([3, 4, 5, 6, 7], -1)\nassert     not below_threshold([3, 4, 5, 6, 7], 4)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_threshold(\n        [1,2,3,4,5], \n        7) == True\nassert     below_threshold(\n        [1,2,3,4,5], \n        6) == False\nassert     below_threshold(\n        [2,3,4,5,6], \n        7) == True\nassert     below_threshold(\n        [2,3,4,5,6], \n        2) == True\nassert     below_threshold(\n        [2,3,4,5,6], \n        3) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_threshold([3,2,1,2,4], 2) == True\nassert     below_threshold([3,2,1,2,4], 5) == False\n\nassert     below_threshold([3,2,1,2,4], 1) == True\nassert     below_threshold([1,2,3,4,5], 5) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     below_threshold([1,2,3], 2) == True\nassert     below_threshold([1,1,1], 2) == False\nassert     below_threshold([1,2,1], 2) == True\nassert     below_threshold([1,1,1,1,1], 2) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(below_threshold([20,10,5,8,12,9], 15))\nprint(below_threshold([12,8,3,4,9,12], 15))\nprint(below_threshold([3,2,2,4,8,10], 15))\nprint(below_threshold([3,2,2,4,8,10], 14))\n\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract y from x\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add(0, 5) == 5\nassert add(5, 0) == 5\nassert add(5, -5) == 10\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert add(1,2) == 3\nassert add(1,2) == 3\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nadd(1,2) == 3\nadd(4,5) == 9\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add(1, 2) == 3\nassert     add(2, 3) == 5\nassert     add(3, 4) == 7\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert add(1,2) == 3\nassert add(3,4) == 7\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nadd(1, 2) == 3\n\ndef is_power_of_two(x: int):\n    \"\"\"Return True if x is a power of 2, otherwise False\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert add(5, 7) == 12\nassert add(0, 0) == 0\nassert add(1, 1) == 2"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     same_chars('hello','hello') == True, \\\n            'Same characters not true'\nassert     same_chars('hello','hello1') == False, \\\n            'Same characters not true'\nassert     same_chars('','') == False, \\\n            'Empty string not true'\nassert     same_chars('hello','hello') == True, \\\n            'Same characters not true'\n\n\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     same_chars('mah','mah')\nassert     same_chars('mah','mah')\nassert     same_chars('mah','mah')\nassert     same_chars('mah','mah')\nassert     same_chars('mah','mah')\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     same_chars(\"same\", \"same\") == True\nassert     same_chars(\"same\", \"same\") == True\nassert     same_chars(\"same\", \"dsa\") == False\n\ndef same_chars_all(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters only in the first word.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     same_chars(    \"roses\", \"love\" )\nassert     same_chars(    \"pink\", \"yellow\" )\nassert     same_chars(    \"grapes\", \"apples\" )\nassert     same_chars(    \"cherry\", \"apple\" )\nassert     not same_chars(    \"cherry\", \"apricot\" )\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    s0 = \"fish\"\n    s1 = \"fish\"\n    \n    print(\"Same chars: \", same_chars(s0, s1))\n    print()\n    \n    s0 = \"fish\"\n    s1 = \"fosh\"\n    \n    print(\"Same chars: \", same_chars(s0, s1))\n    print()\n    \n    s0 = \"fosh\"\n    s1 = \"fish\"\n    \n    print(\"Same chars: \", same_chars(s0, s1))\n    print()\n    \n    s0 = \"fosh\"\n    s1 = \"fish\"\n    \n    print(\"Same chars: \", same_chars(s0, s1))\n    print()"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     same_chars(\"python\", \"python\") == True\nassert     same_chars(\"python\", \"python2\") == True\nassert     same_chars(\"python\", \"pythn\") == False\nassert     same_chars(\"python\", \"pyth\") == False\nassert     same_chars(\"python\", \"py\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     same_chars('apple', 'applee') == True\nassert     same_chars('grape', 'applee') == False\nassert     same_chars('grape', 'appl') == False\nassert     same_chars('apple', 'app') == False\nassert     same_chars('apple', 'app') == False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     same_chars('hello', 'hello') == True, \\\n        'Fail'\nassert     same_chars('world', 'hello') == False, \\\n        'Fail'\nassert     same_chars('world', 'world') == True, \\\n        'Fail'\nassert     same_chars('world', 'world') == True, \\\n        'Fail'\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(fib(6))"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\nassert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fib(10) == 55\nassert fib(17) == 13195\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<]\") == False\nassert     correct_bracketing(\"<>\") == False\nassert     correct_bracketing(\"<())\") == False\nassert     correct_bracketing(\"<<<\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<>\") == False\nassert     correct_bracketing(\"<{}\") == True\nassert     correct_bracketing(\"<{(})>\") == True\nassert     correct_bracketing(\"<{){\") == False\nassert     correct_bracketing(\"<[}\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<[>\") is True\nassert     correct_bracketing(\"<{[]>\") is True\nassert     correct_bracketing(\"<]>\") is False\nassert     correct_bracketing(\"<[[]>\") is False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<()\") == False\nassert     correct_bracketing(\"<<)\") == True\nassert     correct_bracketing(\"<(>\") == False\nassert     correct_bracketing(\"<()<\") == False\nassert     correct_bracketing(\"<((<\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\">\") == False\nassert     correct_bracketing(\"<<\") == True\nassert     correct_bracketing(\"<>\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<<\") == True\nassert     correct_bracketing(\"<(<()<\") == True\nassert     correct_bracketing(\">)\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncorrect_bracketing(\"<()><\")\ncorrect_bracketing(\"<{()}><\")\ncorrect_bracketing(\"<[]><\")\ncorrect_bracketing(\"<(())><\")\n\nassert not correct_bracketing(\"<()><\")\nassert not correct_bracketing(\"<{()}><\")\nassert not correct_bracketing(\"<[]><\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_valid_bracket_pairs(brackets):\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return a set of tuples (left_bracket_index, right_bracket_index)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<>\") == True, \"incorrect\"\nassert     correct_bracketing(\"<\") == False, \"incorrect\"\nassert     correct_bracketing(\"<a>\") == True, \"incorrect\"\nassert     correct_bracketing(\"<a>\") == False, \"incorrect\"\nassert     correct_bracketing(\"<a>b>\") == False, \"incorrect\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     monotonic([0,1,2,3,4,5,6,7,8,9]) == True\nassert     monotonic([0,1,2,3,4,5,6,7,8,9,10]) == False\nassert     monotonic([1,0,2,3,4,5,6,7,8,9,10]) == False\nassert     monotonic([1,2,0,3,4,5,6,7,8,9,10]) == True\nassert     monotonic([1,2,3,0,4,5,6,7,8,9,10]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     monotonic([1,1,1]) == True\nassert     monotonic([1,2,3]) == False\nassert     monotonic([1,2,3,4,5]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     monotonic([1, 2, 3, 1, 2, 3]) == True\nassert     monotonic([1, 2, 3, 2, 3, 1]) == True\nassert     monotonic([1, 2, 3, 2, 3, 1, 3, 1, 2, 3]) == False\nassert     monotonic([1, 2, 3, 1, 2, 3]) == False\nassert     monotonic([1, 1, 1, 1]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     monotonic([1, 2, 3, 4]) == False\nassert     monotonic([1, 2, 4, 3]) == False\nassert     monotonic([1, 2, 3, 4, 1]) == False\nassert     monotonic([1, 1, 1, 1]) == True\nassert     monotonic([1, 1, 2, 3, 2]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_monotonic():\n    assert monotonic([1, 2, 3])\n    assert not monotonic([1, 2, 4, 3])\n    assert not monotonic([1, 2, 1])\n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \nprint(monotonic([-1, -2, -3])) # True\nprint(monotonic([-1, -2, -3, -4])) # False\nprint(monotonic([-1, -2, -3, -4, -5, -6, -7])) # True\nprint(monotonic([-1, 1, -2, 1, -3, 1])) # True\nprint(monotonic([1, 1, -2, 1, -3, 1])) # False\nprint(monotonic([1, 1, -2, 1, -3, -1])) # True\nprint(monotonic([1, 1, -2, 1, -3, -1])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # True\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) # True\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])) # True\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])) # True\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])) # True\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])) # True\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])) # False\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])) # True\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Great! Your function is working correctly.\""
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common([], []) == []\nassert common([], [1, 2, 3]) == []\nassert common([1, 2, 3], []) == []\nassert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert common([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert common([1,2,3,4,5,6], [4,5,6,7]) == [4,5,6]\nassert common([1,2,3,4,5,6], [2,3,5,7,8,9]) == [2,3,5]\nassert common([1,2,3,4,5,6], [1,2,3,4,5,7]) == [1,2,3,4]\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common([0,1,2,3], [1,1,3]) == [1,2], 'incorrect'\nassert     common([], []) == [], 'incorrect'\nassert     common([1,2,3], [4,5,6]) == [1,2,3], 'incorrect'\nassert     common([], []) == [], 'incorrect'\nassert     common([1,2,3], [1,2,3]) == [1,2,3], 'incorrect'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l1 = list(range(10))\n    l2 = list(range(20))\n    print(common(l1, l2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common([1,2,3],    [1,2,3])    ==    [1,2,3],    \"TEST FAILED\"\nassert     common([1,2,3],    [3,4,5])    ==    [],    \"TEST PASSED\"\nassert     common([1,2],    [2,3,4])    ==    [2],    \"TEST FAILED\"\nassert     common([1,2,3],    [])    ==    [1,2,3],    \"TEST FAILED\"\nassert     common([1,2,3],    [1])    ==    [1],    \"TEST PASSED\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncommon([1,2,2], [2,2,1])\n\ncommon([1,2,2,3], [2,2,1])\n\ncommon([1,2,2,3], [2,2,1,3])\n\ncommon([1,2,2,3], [2,2,1,3,3])"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common([1,2,3,4], [3,4,5,6]) == [3,4]\nassert     common([1,2,3,4], [1,2,3,5]) == [1,2,3]\n\ndef fast_count_segments(starts: list, ends: list, points: list):\n    \"\"\"Return list of counts for given list of segment starts, ends, and points.\n    \"\"\"\n    # TODO: Write this function.\n    # First create a list of intervals.\n    intervals = []\n    for i in range(len(starts)):\n        intervals.append((starts[i], ends[i]))\n    # Sort the list of intervals by start point.\n    intervals.sort(key = lambda x: x[0])\n    # Initialize result list.\n    result = []\n    # Loop over the sorted intervals.\n    for interval in intervals:\n        # Initialize start and end of the interval.\n        start = interval[0]\n        end = interval[1]\n        # If the point is in the interval.\n        if start <= points[0] <= end:\n            result.append(1)\n        # If the point is inside the first interval.\n        elif points[0] < start and points[0] > end:\n            result.append(0)\n        # If the point is inside the second interval.\n        elif points[1] < start and points[1] > end:\n            result.append(0)\n        # If the point is outside both intervals.\n        else:\n            result.append(0)\n    return result\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common([1, 2, 3], [1, 2, 3]) == [1, 2]\nassert     common([1, 2, 3], [1, 2, 3, 4]) == [1, 2]\nassert     common([1, 2, 3], [1, 2, 3, 4, 5]) == [1, 2]\nassert     common([1, 2, 3, 4], [1, 2, 3, 4]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common([], []    ) == []\nassert common([1, 2, 3], []    ) == []\nassert common([], [1, 2, 3]) == []\nassert common([], []) == []\nassert common([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef exercise_largest_prime_factor():\n    print(largest_prime_factor(29))\n    print(largest_prime_factor(2))\n    print(largest_prime_factor(3))\n    print(largest_prime_factor(13))\n    print(largest_prime_factor(100))\n\nif __name__ == '__main__':\n    exercise_largest_prime_factor()\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(largest_prime_factor(10))\nprint(largest_prime_factor(6))\nprint(largest_prime_factor(9))\nprint(largest_prime_factor(4))\nprint(largest_prime_factor(6))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert largest_prime_factor(3) == 3\nassert largest_prime_factor(13) == 13\nassert largest_prime_factor(4) == 3\nassert largest_prime_factor(100) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(20) == 2\nassert     largest_prime_factor(99) == 29\nassert     largest_prime_factor(111) == 11\nassert     largest_prime_factor(600851475143) == 25\nassert     largest_prime_factor(237) == 23\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef next_prime(n: int) -> int:\n    \"\"\"Return the next prime number after n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_to_n(3) == 3\nassert     sum_to_n(8) == 21\nassert     sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_to_n_using_for_loop(n: int):\n    \"\"\"sum_to_n_using_for_loop is a function that sums numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_to_n(10) == 55\nassert sum_to_n(100) == 385\nassert sum_to_n(1000) == 4613732\nassert sum_to_n(10000) == 18263914155\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum_to_n(10) == 55\nsum_to_n(12) == 60\nsum_to_n(1) == 1\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_to_n(10) == 55, 'WRONG'\nassert     sum_to_n(0) == 0, 'WRONG'\n\ndef get_primes(n: int):\n    \"\"\"get_primes is a function that gets all the primes\n    between 2 and n (inclusive)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(4) == 7\nassert     sum_to_n(5) == 12\nassert     sum_to_n(10) == 55\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_to_n(1) == 1, 'First number is not 1'\nassert     sum_to_n(2) == 1+1, 'First number is not 1'\nassert     sum_to_n(3) == 1+1+1, 'First number is not 1'\nassert     sum_to_n(4) == 1+1+1+1, 'First number is not 1'\nassert     sum_to_n(5) == 1+1+1+1+1, 'First number is not 1'\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"(()()(()()()))\") == True\nassert     correct_bracketing(\"(())\") == False\nassert     correct_bracketing(\"((((())))\") == False\nassert     correct_bracketing(\"((()(()))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"(())\")     == True\nassert     correct_bracketing(\"(()())\")     == True\nassert     correct_bracketing(\"(((\")     == False\nassert     correct_bracketing(\"(()(()))\")     == False\nassert     correct_bracketing(\"))\")     == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"\") == True, \"Test 1 Passed\"\nassert correct_bracketing(\"(())\") == True, \"Test 2 Passed\"\nassert correct_bracketing(\"(()())\") == True, \"Test 3 Passed\"\nassert correct_bracketing(\"(()()())\") == True, \"Test 4 Passed\"\nassert correct_bracketing(\"()((()()))\") == False, \"Test 5 Passed\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert correct_bracketing(\"()\") == True\nassert correct_bracketing(\"(())\") == True\nassert correct_bracketing(\"(()())\") == True\nassert correct_bracketing(\"(((())))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"((((()))))\") == True\nassert correct_bracketing(\"((((()))))\") == False\nassert correct_bracketing(\"(((())))\") == True\nassert correct_bracketing(\"((()))\") == False\nassert correct_bracketing(\"((()))))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"(()())\") == False\nassert     correct_bracketing(\"(((()())))\") == True\nassert     correct_bracketing(\"(((())\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()[]{}\") == True\nassert     correct_bracketing(\"(]\") == False\nassert     correct_bracketing(\"([)]\") == False\nassert     correct_bracketing(\"[({})}]\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing('((()))') == True\nassert     correct_bracketing('()((())))') == False\nassert     correct_bracketing('(())(())') == False\n\ndef test_simple_nested_brackets():\n    \"\"\" For example, [1,2,3] is correct if and only if the brackets\n    aren't nested too deeply. \"\"\"\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"(((()))\") == True\nassert     correct_bracketing(\"(((()))\") == False\nassert     correct_bracketing(\"((()))\") == False\nassert     correct_bracketing(\"((()()))\") == True\nassert     correct_bracketing(\"((()()()))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"()\") == True, \n        \"Wrong answer: if we have () in the brackets, then every closing bracket should have an opening bracket\"\n\nassert correct_bracketing(\"(())\") == True, \n        \"Wrong answer: if we have (()) in the brackets, then every opening bracket should have an opening bracket\"\n\nassert correct_bracketing(\"(])\") == False, \n        \"Wrong answer: if we have (]) in the brackets, then every opening bracket should have an opening bracket\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(derivative([1, 2, 3]))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef derivative_1(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     derivative([2, 1, 4, 1, 4]) == [2, 1, 6, 0, 8]\nassert     derivative([1, 2, 3, 4]) == [1, 2, 2, 1]\nassert     derivative([-1, 1, -2, 1, -3]) == [1, -1, -1, 1, 1]\nprint(\"Your function derivative() is correct\")"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     derivative([2, 4, 6]) == [2, 6, 12]\nassert     derivative([2, 4, 6, 1]) == [0, -4, 0, 0]\nassert     derivative([1, 4, 6, -2, 1]) == [2, 0, 0, -4, 0]\nassert     derivative([1, 4, 6, 1, 1]) == [0, 0, 0, -4, 0]\nassert     derivative([]) == []\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     derivative([0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0]) == \\\n            [0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0]\n\ndef second_derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return second derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef fibfib_debug(n: int):\n    f = 0\n    s = 1\n    for i in range(n):\n        f = f + s\n        s = f - s\n    return f\n\nif __name__ == \"__main__\":\n    fibfib(5"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    n = 10\n    print(fibfib(n)"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(fibfib(5))\nprint(fibfib(50))"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(5) == 5\nassert     fibfib(7) == 8\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0, \"fibfib(0) == 0\"\nassert     fibfib(1) == 0, \"fibfib(1) == 0\"\nassert     fibfib(2) == 1, \"fibfib(2) == 1\"\nassert     fibfib(3) == 1, \"fibfib(3) == 1\"\nassert     fibfib(4) == 2, \"fibfib(4) == 2\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fibfib(0) == 0, 'Correctness Test 1 Failed'\nassert     fibfib(1) == 0, 'Correctness Test 2 Failed'\nassert     fibfib(2) == 1, 'Correctness Test 3 Failed'\nassert     fibfib(3) == 1, 'Correctness Test 4 Failed'\nassert     fibfib(4) == 2, 'Correctness Test 5 Failed'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert vowels_count(\"he\") == 1\nassert vowels_count(\"to\") == 2\nassert vowels_count(\"awkward\") == 6\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nvowels_count(\"apple\") == 1\nassert vowels_count(\"\") == 0\nassert vowels_count(\"a\") == 1\nassert vowels_count(\"bc\") == 0\nassert vowels_count(\"au\") == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     vowels_count(\"abc\") == 0\nassert     vowels_count(\"aabb\") == 2\nassert     vowels_count(\"aabBc\") == 2\nassert     vowels_count(\"abcdd\") == 3\nassert     vowels_count(\"abbcdddd\") == 5\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef vowels_count_examples():\n    \"\"\"\n    >>> vowels_count_examples()\n    1\n    >>> vowels_count(\"y\")\n    0\n    >>> vowels_count(\"q\")\n    0\n    >>> vowels_count(\"he\")\n    2\n    >>> vowels_count(\"test\")\n    0\n    >>> vowels_count(\"bye\")\n    2\n    >>> vowels_count(\"testy\")\n    1\n    >>> vowels_count(\"spongebob\")\n    3\n    >>> vowels_count(\"em\")\n    3\n    >>> vowels_count(\"froggy\")\n    3\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     vowels_count('aac') == 2, 'Passed'\nassert     vowels_count('ac') == 2, 'Passed'\nassert     vowels_count('acdcb') == 4, 'Passed'\nassert     vowels_count('aacd') == 2, 'Passed'\nassert     vowels_count('acd') == 2, 'Passed'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef vowel_replace(s):\n    \"\"\"Write a function vowel_replace which takes a string representing\n    a word as input and returns the same word after replacing each\n    occurrence of a vowel in the word with a '*'.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circular_shift(12345, 2) == 654321\nassert     circular_shift(12345, 3) == 5432112\nassert     circular_shift(12345, -2) == 654321\nassert     circular_shift(12345, -3) == 654321\nassert     circular_shift(12345, -5) == 12345\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nx = str(567)\nprint(x, '\\n')\n\nprint(circular_shift(x, 2), '\\n')\nprint(circular_shift(x, 3), '\\n')\nprint(circular_shift(x, 4), '\\n')\nprint(circular_shift(x, 5), '\\n')\nprint(circular_shift(x, 6), '\\n')\nprint(circular_shift(x, 7), '\\n')\nprint(circular_shift(x, 8), '\\n')\nprint(circular_shift(x, 9), '\\n')\nprint(circular_shift(x, 10), '\\n')\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     circular_shift(1234567, 6) == 1234567\nassert     circular_shift(1234567, -6) == 765432\nassert     circular_shift(1234, 0) == 1234\nassert     circular_shift(1234, -4) == 3412\nassert     circular_shift(123, 3) == 321\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"The sum of the first two digits in {0} is {1}\".format(\n    circular_shift(\"123456789\", 5),\n    int(\"123456789\") - int(\"123456789\" * 5)\n    )\n)\nprint(\"The sum of the first two digits in {0} is {1}\".format(\n    circular_shift(\"123456789\", 3),\n    int(\"123456789\") - int(\"123456789\" * 3)\n    )\n)\nprint(\"The sum of the first two digits in {0} is {1}\".format(\n    circular_shift(\"123456789\", -2),\n    int(\"123456789\") - int(\"123456789\" * -2)\n    )\n)\nprint(\"The sum of the first two digits in {0} is {1}\".format(\n    circular_shift(\"123456789\", -3),\n    int(\"123456789\") - int(\"123456789\" * -3)\n    )\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circular_shift(1234567, 8) ==  \"0234567\"\nassert     circular_shift(1234567, -8) == \"4567123\"\nassert     circular_shift(123456789, 1) == \"987654321\"\nassert     circular_shift(123456789, -1) == \"987654321\"\nassert     circular_shift(123456789, 0) == \"123456789\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circular_shift('123456789', 1) == '123456789'\nassert     circular_shift('123456789', 2) == '878912345'\nassert     circular_shift('123456789', 4) == '8789'\nassert     circular_shift('123456789', -1) == '8789'\nassert     circular_shift('123456789', -2) == '78912345'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert digitSum('abc') == 2\nassert digitSum('ab') == 2\nassert digitSum('abc2') == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digitSum(\"a2b3c4d5e6f7g8h9i10j11k12l13m14n15o16p17q18r19s20t21u22v22w23x24y25z26\") == 226\nassert     digitSum(\"abcde123456\") == 1"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digitSum(\"this is a test\") == 14\nassert     digitSum(\"\") == 0\nassert     digitSum(\"A\") == 10\nassert     digitSum(\"1345\") == 17\nassert     digitSum(\"\u0410\") == 10\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digitSum(\"     \") == 0, \"The value returned is wrong\"\nassert     digitSum(\"123\") == 6, \"The value returned is wrong\"\nassert     digitSum(\"kthbdskljfhbdskfhvbnm\") == 13, \"The value returned is wrong\"\nassert     digitSum(\"     \") == 0, \"The value returned is wrong\"\nassert     digitSum(\"abc\") == 0, \"The value returned is wrong\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digitSum(\"Wyrmhhp\")    == \n    \"V\"\nassert     digitSum(\"wyrmpjn\")    == \n    \"v\"\nassert     digitSum(\"dmpn\")    == \n    \"0\"\nassert     digitSum(\"\")    == \n    \"0\"\nassert     digitSum(\"q\")    == \n    \"0\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert digitSum(\"abcd\") == 7\nassert digitSum(\"Aa\") == 1\nassert digitSum(\"\") == 0\nassert digitSum(\"abcABC\") == 6\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (digitSum(\"abc\")) == \"1\"\nassert     (digitSum(\"123\")) == \"6\"\nassert     (digitSum(\"12345\")) == \"15\"\nassert     (digitSum(\"1234567\")) == \"21\"\nassert     (digitSum(\"123456789\")) == \"31\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digitSum(\"abcde\") == 9, \"should sum 9 ASCII codes\"\nassert     digitSum(\"abcd\") == 7, \"should sum 7 ASCII codes\"\nassert     digitSum(\"ABCDEFGHIJ\") == 27, \"should sum 27 ASCII codes\"\nassert     digitSum(\"ABCDE\") == 9, \"should sum 9 ASCII codes\"\nassert     digitSum(\"ABCD\") == 9, \"should sum 9 ASCII codes\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fruit_distribution(\n            \"2\", \n            \"1\" )     == 1\n\nassert     fruit_distribution(\n            \"10\", \n            \"1\" )     == 5\n\nassert     fruit_distribution(\n            \"20\", \n            \"2\" )     == 1\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(fruit_distribution(s=\"20\",n=10)) # return 2\nassert \nprint(fruit_distribution(s=\"12\",n=15)) # return 3\nprint(fruit_distribution(s=\"10\",n=1))  # return 0\nprint(fruit_distribution(s=\"10\",n=8))  # return "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfruit_distribution('AAA','BBB') == 'AAB', \"Wrong\"\nassert \nfruit_distribution('AAA','BBB') == 'ABA', \"Wrong\"\nassert \nfruit_distribution('A', 'BBB') == 'BBB', \"Wrong\"\nassert \nfruit_distribution('AAA', 'BBB') == 'AAA', \"Wrong\"\nassert \nfruit_distribution('AB', 'BBB') == 'ABB', \"Wrong\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fruit_distribution('13', 5) == 1, \"The number of mango fruit is not 1\"\nassert fruit_distribution('10', 5) == 1, \"The number of mango fruit is not 1\"\nassert fruit_distribution('32', 5) == 0, \"The number of mango fruit is not 0\"\nassert fruit_distribution('10', 1) == 1, \"The number of mango fruit is not 1\"\nassert fruit_distribution('13', 1) == 1, \"The number of mango fruit is not 1\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"00\",2) == 0\nassert     fruit_distribution(\"01\",1) == 1\nassert     fruit_distribution(\"10\",2) == 1\nassert     fruit_distribution(\"00\",1) == 1\nassert     fruit_distribution(\"11\",2) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fruit_distribution('4',4) == 4\nassert fruit_distribution('7',5) == 5\nassert fruit_distribution('4',0) == 0\nassert fruit_distribution('0',1) == 0\n\n\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfruit_distribution(s=4,n=3)==1\nassert\nfruit_distribution(s=1,n=3)==1\nassert \nfruit_distribution(s=10,n=7)==5\nassert\nfruit_distribution(s=3,n=7)==4\nassert\nfruit_distribution(s=4,n=2)==3\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"2\", \"1\") == 1\nassert     fruit_distribution(\"3\", \"1\") == 0\nassert     fruit_distribution(\"3\", \"4\") == 2\nassert fruit_distribution(\"4\", \"2\") == 0\nassert fruit_distribution(\"4\", \"4\") == 4\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pluck([1, 5, 2, -1, -3]) ==     [2, 0]\nassert     pluck([1, 5, 2, -1, -3, 6, -1]) ==     [2, 0]\nassert     pluck([1, 5, 2, -1, -3, 6, -1, 4]) ==     [4, 2]\nassert     pluck([]) ==     []\nassert     pluck([1]) ==     [1]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\"\"\"\n    Case:\n    - array: [-4,3,4,-5,-3,1,-3,2,5,0]\n    - index: 4\n    - answer: [-4,2,0]\n    - answer: [-4,-3,0]\n    - answer: [-5,2]\n    - answer: [-5,1]\n    - answer: [-5]\n    - answer: [-4]\n    - answer: [-4,1]\n    - answer: [-3,1]\n    - answer: [-3,2]\n    - answer: [-3,3]\n    - answer: [-3]\n    - answer: [-4]\n    - answer: [-4,1]\n    - answer: [-4,2]\n    - answer: [-4,3]\n    - answer: [-4,4]\n    - answer: [-4]\n    - answer: [-3,4]\n    - answer: [-3]\n    - answer: [-3,3]\n    - answer: [-3,2]\n    - answer: [-3,1]\n    - answer: [-3]\n    - answer: [-4,1]\n    - answer: [-4]\n    - answer: [-5]\n    - answer: [-5,1]\n    - answer: [-5,2]\n    - answer: [-5]\n    - answer: [-4]\n    - answer: [-4,2]\n    - answer: [-4,3]\n    - answer: [-4]\n    - answer: [-5]\n    - answer: [-5,1]\n    - answer: [-5,2]\n    - answer: [-5,3]\n    - answer: [-5,4]\n    - answer: [-5]\n    - answer: [-3,5]\n    - answer: [-3]\n    - answer: [-3,4]\n    - answer: [-3,3]\n    - answer: [-3,2]\n    - answer: [-3,1]\n    - answer: [-3]\n    - answer: [-4,3]\n    - answer: [-4,2]\n    - answer: [-4,1]\n    - answer: [-4,0]\n    - answer: [-4]\n    - answer: [-3,4]\n    - answer: [-3,3]\n    - answer: [-3,2]\n    - answer: [-3,1]\n    - answer: [-3]\n    - answer: [-4,1]\n    - answer: [-4]\n    - answer: [-5,1]\n    - answer: [-5,2]\n    - answer: [-5,3]\n    - answer: [-5,4]\n    - answer: [-5,5]\n    - answer: [-5]\n    - answer: [-3,6]\n    - answer: [-3]\n    - answer: [-4,6]\n    - answer: [-4]\n    - answer: [-3,7]\n    - answer: [-3]\n    - answer: [-4,7]\n    - answer: [-4]\n    - answer: [-3,8]\n    - answer: [-3]\n    - answer: [-4,8]\n    - answer: [-4]\n    - answer: [-3,9]\n    - answer: [-3]\n    - answer: [-4,9]\n    - answer: [-4]\n    - answer: [-3,10]\n    - answer: [-3]\n    - answer: [-4,10]\n    - answer: [-4]\n    - answer: [-3,11]\n    - answer: [-3]\n    - answer: [-4,11]\n    - answer: [-4]\n    - answer: [-3,12]\n    - answer: [-3]\n    - answer: [-4,12]\n    - answer: [-4]\n    - answer: [-3,13]\n    - answer: [-3]\n    - answer: [-4,13]\n    - answer: [-4]\n    - answer: [-3,14]\n    - answer: [-3]\n    - answer: [-4,14]\n    - answer: [-4]\n    - answer: [-3,15]\n    - answer: [-3]\n    - answer: [-4,15]\n    - answer: [-4]\n    - answer: [-3,16]\n    - answer: [-3]\n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pluck([2, 4, 3, 5]) == [[3, 0], 1]\nassert     pluck([3, 5, 2, 6]) == [[2, 1], 0]\nassert     pluck([]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pluck(arr1) == [2, 0]\nassert     pluck(arr2) == [3, 2]\nassert     pluck(arr3) == [0, 2]\nassert     pluck([]) == []\nassert     pluck([1,2,3,4,5,6,7]) == []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 6], \"First\"\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [7, 1], \"Second\"\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 8], \"Third\"\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2], \"Fourth\"\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [], \"Fifth\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef tree_find(arr, root, val):\n    \"\"\"\n    Given a binary tree and a root node, find if there exist a node in the tree such that node.val == val.\n\n    Constraints:\n        * The given tree is a binary tree.\n        * Each node of the tree has unique value.\n        * 1 <= Number of nodes in the tree <= 100000\n        * -10^4 <= Node.value <= 10^4\n\n    Example:\n        Input: root = [10,5,15,3,7,null,18], val = 7\n        Output: true\n        Explanation: Given binary tree:\n              10\n             /  \\\n           5    15\n         /  \\   /  \\\n        3    7  18   \n\n    Input: root = [10,5,15,3,7,13], val = 13\n    Output: false\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert pluck([1, 2, 3]) == [1, 1]\nassert pluck([]) == []\nassert pluck([3, 4, 2, 2, 3, 4, 1, 1, 3]) == [1, 2]\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"Test case 1:\")\nprint(search([1,3,2,2,4,5,3,3,3,2,4,2,4,4]))\nprint(\"Expected output: 3\")\nprint()\n\nassert \nprint(\"Test case 2:\")\nprint(search([1,2,3,4,5]))\nprint(\"Expected output: -1\")\nprint()\n\nassert \nprint(\"Test case 3:\")\nprint(search([4,6,6,3,2,3,3,5,5,5,6,4,5,4]))\nprint(\"Expected output: 5\")\nprint()\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert search([1,2,3,4,5]) == 3\nassert search([1,1,1,2,2,3]) == 2\nassert search([]) == -1\nassert search([-1,-1]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([1,1,1,1,1]) == 1, 'incorrect'\nassert     search([1,1,3,2,2,2,2,5]) == 5, 'incorrect'\nassert     search([1,2,3]) == -1, 'incorrect'\n\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nsearch([3, 2, 4]) == 2\nsearch([3, 4, 4]) == -1\nsearch([-3, 3, 3]) == -1\nsearch([0,0,1,1,1,2,2,2,3]) == 2\nsearch([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef search(lst):\n    '''\n    You are given a non-empty list of integers. Return the integer that appears in \n    the list the most, and return -1 if there is not any integer in the list.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     search([5,2,5]) == 5, 'Not correct'\nassert     search([2,2,2,0]) == 0, 'Not correct'\nassert     search([0,0,0,1]) == -1, 'Not correct'\nassert     search([-1,2,3,5,5]) == -1, 'Not correct'\n\n\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([1,3,4,5,5,5,5]) == 5, \"Should be 5\"\nassert     search([3,2,4,5,5,5,5]) == 5, \"Should be 5\"\nassert     search([1,2,4,5,5,5,5]) == -1, \"Should be -1\"\nassert     search([1,3,4,5,6]) == -1, \"Should be -1\"\nassert     search([1,3,4,5,5,5,5,5]) == 5, \"Should be 5\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([2,4,6,5,3,5,6,8,9,1,2,4,5,6]) == 5, search([2,4,6,5,3,5,6,8,9,1,2,4,5,6])\nassert search([2,4,6,5,3,5,6,8,9,1,2,4,5,6]) == -1, search([2,4,6,5,3,5,6,8,9,1,2,4,5,6])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([3,2,1]) == 1 \nassert     search([3,2,3]) == -1\nassert     search([3,3]) == 3\nassert     search([1,2,2]) == -1\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strange_sort_list([10,1,4,1,4,6,3,2]) ==     [1,1,1,2,3,4,4,6]\nassert     strange_sort_list([10,1,4,1,4,6,3,2,2]) ==     [1,1,2,2,3,4,4,6,10]\nassert     strange_sort_list([10,1,4,1,4,6,3,2,2,20]) ==     [1,1,2,2,3,4,4,6,10,20]\nassert     strange_sort_list([10,1,4,1,4,6,3,2,2,20,2000]) ==     [1,1,2,2,3,4,4,6,10,20,2000]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         strange_sort_list([4,2,5,1,3]) == [1,2,3,4,5], \"Wrong\"\nassert         strange_sort_list([4,2,5,1,3,1,1]) == [1,1,1,2,3,4,5], \"Wrong\"\nassert         strange_sort_list([4,2,5,1,3,1,1,1]) == [1,1,1,2,3,4,5], \"Wrong\"\nassert         strange_sort_list([4,2,5,1,3,1,1,1,1]) == [1,1,1,2,3,4,5], \"Wrong\"\nassert         strange_sort_list([4,2,5,1,3,1,1,1,1,1]) == [1,1,1,2,3,4,5], \"Wrong\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     stange_sort_list([3,2,1]) == [1,2,3]\nassert     stange_sort_list([3,2,1,2]) == [2,1,2,3]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (sort_list(['a','b','c','d']) == ['d','b','c','a'])\nassert     (sort_list(['a','c','d','b']) == ['d','b','c','a'])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('All the tests are passed!')\nprint()\nprint('Expected:')\nprint(strange_sort_list([2,4,5,6,7]))\nprint(strange_sort_list([1,5,2,5,7,4]))\nprint(strange_sort_list([4,3,2,1]))\nprint()\nprint('Actual:')\nprint(strange_sort_list([2,5,4,6,7]))\nprint(strange_sort_list([1,5,2,5,7,4]))\nprint(strange_sort_list([4,3,2,1]))"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strange_sort_list([10, 20, 2, 30, 4]) == \\\n        [2, 4, 10, 20, 30], 'Wrong answer'\nassert     strange_sort_list([20, 10, 4, 2, 30]) == \\\n        [2, 4, 10, 20, 30], 'Wrong answer'\nassert     strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'Wrong answer'\nassert     strange_sort_list([3, 5, 7, 9, 11]) == \\\n        [3, 5, 7, 9, 11], 'Wrong answer'\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strange_sort_list([6, 3, 2, 1]) == [1, 2, 3, 6]\nassert     strange_sort_list([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     strange_sort_list([6, 2, 3, 1]) == [1, 2, 3, 6]\nassert     strange_sort_list([4, 3, 1, 2]) == [1, 2, 3, 4]\nassert     strange_sort_list([6, 2, 4, 1]) == [1, 2, 4, 6]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(triangle_area(3, 5, 4)) # returns -1\nprint(triangle_area(7, 5, 10)) # returns 10.00\nprint(triangle_area(3, 2, 5)) # returns 5.00\nprint(triangle_area(3, 4, 5)) # returns -1\n\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ntriangle_area(1, 2, 3) == 2.5\ntriangle_area(5, 3, 1) == -1.5\ntriangle_area(2, 3, 5) == -1.5\ntriangle_area(3, 4, 6) == -0.5\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef my_max(a, b, c):\n    '''\n    Given 3 integer values, return the maximum of the 3 values\n    If the 3 values are equal, return the second largest value. \n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(2, 3, 2) == 0.5\nassert     triangle_area(3, 2, 3) == 0.0\nassert     triangle_area(3, 3, 3) == 1.0\nassert     triangle_area(3, 3, 2) == -1.0\nassert     triangle_area(2, 3, 3) == -1.0\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    triangle_area(1, 2, 3) == 0.5\n    triangle_area(1, 1, 1) == 0.0\n    triangle_area(5, 3, 4) == 0.5\n    triangle_area(10, 5, 6) == 0.0\n    triangle_area(1, 3, 10) == -1\n    triangle_area(5, 7, 3) == -1\n\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(2, 2, 2) == 5\nassert     triangle_area(5, 2, 2) == 7.5\nassert     triangle_area(2, 2, 4) == -1\nassert     triangle_area(5, 4, 2) == -1\nassert     triangle_area(2, 2, 6) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(a=5, b=8, c=12) == 20\nassert     triangle_area(a=5, b=5, c=12) == 16\nassert     triangle_area(a=5, b=8, c=2) == -1\nassert     triangle_area(a=5, b=8, c=13) == -1\nassert     triangle_area(a=5, b=8, c=4) == 5\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(\"The area of the triangle is:\", triangle_area(3, 4, 5))\nassert(triangle_area(3, 4, 5) == 0.78)\n\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntriangle_area(2, 3, 4) == 0.5\ntriangle_area(2, 3, 4.01) == -1\nassert \ntriangle_area(5, 4, 3) == 0.5\ntriangle_area(3, 5, 4) == 0.5\ntriangle_area(2, 4, 5) == -1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    q = [1,2,3]\n    w = 20\n    print(will_it_fly(q,w))\n\n    q = [3,2,1]\n    w = 20\n    print(will_it_fly(q,w))\n\n    q = [1,2,2]\n    w = 1\n    print(will_it_fly(q,w))"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     will_it_fly([],0) == False\nassert     will_it_fly([1],0) == False\nassert     will_it_fly([1],1) == True\nassert     will_it_fly([1,1],2) == True\nassert     will_it_fly([1,1],3) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nwill_it_fly([3,4,3],8)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     will_it_fly([], 2) == False\nassert     will_it_fly([1], 2) == False\nassert     will_it_fly([1,1], 2) == True\nassert     will_it_fly([1,2], 2) == False\nassert     will_it_fly([2,1], 2) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nwill_it_fly([1, 1, 1, 1], 5)"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nwill_it_fly(['a','b','c','d','e'],1) == True\nwill_it_fly([],1) == False\nwill_it_fly([1,2,3], 4) == False\nwill_it_fly([1,2,3], 5) == True\nwill_it_fly([1,2,3,4,5], 5) == True\nwill_it_fly([1,2,3,4,5], 6) == False\nwill_it_fly([1,2,3,4,5], 7) == False\nwill_it_fly([1,2,3,4,5], 8) == False\nwill_it_fly([1,2,3,4,5], 9) == False\nwill_it_fly([1,2,3,4,5], 10) == False\nwill_it_fly([1,2,3,4,5], 11) == False\nwill_it_fly([1,2,3,4,5], 12) == False\nwill_it_fly([1,2,3,4,5], 13) == True\nwill_it_fly([1,2,3,4,5], 14) == True\nwill_it_fly([1,2,3,4,5], 15) == True\nwill_it_fly([1,2,3,4,5], 16) == True\nwill_it_fly([1,2,3,4,5], 17) == True\nwill_it_fly([1,2,3,4,5], 18) == False\nwill_it_fly([1,2,3,4,5], 19) == True\nwill_it_fly([1,2,3,4,5], 20) == True\nwill_it_fly([1,2,3,4,5], 21) == True\nwill_it_fly([1,2,3,4,5], 22) == True\nwill_it_fly([1,2,3,4,5], 23) == False\nwill_it_fly([1,2,3,4,5], 24) == False\nwill_it_fly([1,2,3,4,5], 25) == False\nwill_it_fly([1,2,3,4,5], 26) == False\nwill_it_fly([1,2,3,4,5], 27) == False\nwill_it_fly([1,2,3,4,5], 28) == False\nwill_it_fly([1,2,3,4,5], 29) == False\nwill_it_fly([1,2,3,4,5], 30) == False\nwill_it_fly([1,2,3,4,5], 31) == True\nwill_it_fly([1,2,3,4,5], 32) == True\nwill_it_fly([1,2,3,4,5], 33) == True\nwill_it_fly([1,2,3,4,5], 34) == True\nwill_it_fly([1,2,3,4,5], 35) == True\nwill_it_fly([1,2,3,4,5], 36) == True\nwill_it_fly([1,2,3,4,5], 37) == True\nwill_it_fly([1,2,3,4,5], 38) == True\nwill_it_fly([1,2,3,4,5], 39) == True\nwill_it_fly([1,2,3,4,5], 40) == True\nwill_it_fly([1,2,3,4,5], 41) == True\nwill_it_fly([1,2,3,4,5], 42) == True\nwill_it_fly([1,2,3,4,5], 43) == False\nwill_it_fly([1,2,3,4,5], 44) == True\nwill_it_fly([1,2,3,4,5], 45) == True\nwill_it_fly([1,2,3,4,5], 46) == True\nwill_it_fly([1,2,3,4,5], 47) == True\nwill_it_fly([1,2,3,4,5], 48) == True\nwill_it_fly([1,2,3,4,5], 49) == True\nwill_it_fly([1,"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     will_it_fly([3,6,1,5],2) == True\nassert     will_it_fly([3,6,1,5],3) == False\n\ndef will_it_fly_iterative(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    # make a copy of the q\n    q_copy = q[:]\n\n    # count the number of elements in q\n    count = 0\n    while q_copy:\n        count += 1\n        q_copy.pop()\n    \n    # calculate the difference between the sum of q and w\n    # note: if the elements in q are all greater than w, the difference will be 0\n    diff = abs(sum(q) - w)\n\n    # if the number of elements in q is even and the difference is 0\n    # then q can fly\n    if count % 2 == 0 and diff == 0:\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nwill_it_fly([\"hi\",\"hi\",\"hihi\"], 0) == False\nwill_it_fly([\"hello\", \"hello\", \"goodbye\", \"goodbye\"], 1) == True\nwill_it_fly([1,1], 2) == False\nwill_it_fly([2,2], 2) == True\nwill_it_fly([1,1,1], 3) == False\nwill_it_fly([2,2,2], 3) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     will_it_fly([], 0) == False, \"Wrong answer!\"\nassert     will_it_fly([], 1) == False, \"Wrong answer!\"\nassert     will_it_fly([], 3) == False, \"Wrong answer!\"\nassert     will_it_fly([], 100) == False, \"Wrong answer!\"\nassert     will_it_fly([1,2,3], 10) == True, \"Wrong answer!\"\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     smallest_change([1, 3, 2, 5]) == 1\nassert     smallest_change([1, 4, 2, 5]) == 1\nassert     smallest_change([1, 4, 2, 6]) == 2\nassert     smallest_change([1, 4, 2, 6, 3]) == 2\nassert     smallest_change([1, 4, 2, 6, 3, 4]) == 2\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_change([2, 2, 1]) == 1\nassert     smallest_change([1, 1, 1]) == 0\nassert     smallest_change([1, 2, 1]) == 3\nassert     smallest_change([2, 1, 1]) == 3\nassert     smallest_change([1, 2, 2]) == 1\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 2, 3, 4]) == 1\nassert     smallest_change([3, 2, 1]) == 1\nassert     smallest_change([1, 2, 1]) == 0\nassert     smallest_change([1, 2, 3, 3, 2]) == 2\n\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_change([]) == 0, \"Empty list\"\nassert     smallest_change([2]) == 1, \"Single value\"\nassert     smallest_change([2,2]) == 0, \"Two equal values\"\nassert     smallest_change([5,2,2,2,2]) == 2, \"Palindrome\"\nassert     smallest_change([-1,1,-1,-1,1]) == 3, \"Negative\"\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_change([2,3,3,2,4]) == 5\nassert     smallest_change([2,3,3,2,2]) == 5\nassert     smallest_change([3,3,3,3,3]) == 0\nassert     smallest_change([3,3,2,2,3]) == 3\nassert     smallest_change([2,2,2,2,2]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     total_match(['mango', 'banana', 'grapefruit','strawberry', 'cherry', 'watermelon', 'kiwi', 'apple', 'kiwi', 'apricot'], ['strawberry', 'cherry', 'watermelon', 'kiwi', 'apple', 'apricot', 'grapefruit', 'banana','mango', 'kiwi']) == ['apple', 'kiwi', 'apricot'], 'WRONG! -- TEST CASE DOES NOT MATCH'\nassert     total_match(['strawberry', 'cherry', 'watermelon', 'kiwi', 'apple', 'kiwi', 'apricot'], ['strawberry', 'cherry', 'watermelon', 'kiwi', 'apple', 'apricot', 'grapefruit', 'banana','mango', 'kiwi']) == ['apple', 'kiwi', 'apricot'], 'WRONG! -- TEST CASE DOES NOT MATCH'\nassert     total_match(['kiwi', 'apricot', 'grapefruit', 'banana','mango', 'apple', 'kiwi', 'cherry','strawberry', 'watermelon'], ['strawberry', 'cherry', 'watermelon', 'kiwi', 'apple', 'kiwi', 'apricot', 'grapefruit', 'banana','mango']) == ['apple', 'kiwi', 'apricot'], 'WRONG! -- TEST CASE DOES NOT MATCH'\nassert     total_match(['apple', 'kiwi', 'apricot', 'grapefruit', 'banana','mango', 'cherry','strawberry', 'watermelon'], ['strawberry', 'cherry', 'watermelon', 'kiwi', 'apple', 'kiwi', 'apricot', 'grapefruit', 'banana','mango']) == ['apple', 'kiwi', 'apricot'], 'WRONG! -- TEST CASE DOES NOT MATCH'\nassert     total_match(['cherry','strawberry', 'watermelon', 'kiwi', 'apple', 'kiwi', 'apricot', 'grapefruit', 'banana','mango'], ['strawberry', 'cherry', 'watermelon', 'kiwi', 'apple', 'kiwi', 'apricot', 'grapefruit', 'banana','mango']) == ['apple', 'kiwi', 'apricot'], 'WRONG! -- TEST CASE DOES NOT MATCH'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     total_match(['AA', 'AA'], ['BB', 'BB']) == ['AA', 'BB'], 'Error 1'\nassert total_match(['AA', 'AA'], ['BB', 'AA']) == ['AA', 'AA'], 'Error 2'\nassert total_match(['AA', 'AA', 'AA'], ['BB', 'AA', 'AA']) == ['AA', 'AA', 'AA'], 'Error 3'\nassert total_match([], ['AA', 'AA']) == [], 'Error 4'\n\nprint('Success: test_total_match')\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     total_match([\"abc\",\"abcd\"], [\"a\", \"bc\", \"abc\"]) ==     [\"a\"]\nassert     total_match([\"abc\",\"abcd\"], [\"bc\", \"a\"]) ==     [\"abc\"]\nassert     total_match([\"abc\",\"abcd\"], [\"abcd\"]) ==     [\"abc\"]\nassert     total_match([\"abc\",\"abcd\"], [\"a\", \"abc\", \"bc\"]) ==     [\"a\", \"abc\"]\nassert     total_match([\"abc\",\"abcd\"], [\"a\", \"bc\"]) ==     [\"abc\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     total_match([\"lemon\", \"Orange\", \"Avocado\"], [\"lemon\", \"Orange\", \"Avocado\", \"apple\"]) == [\"Avocado\"]\nassert     total_match([\"lemon\", \"Orange\", \"Avocado\"], [\"lemon\", \"Orange\", \"Avocado\", \"apple\", \"Avocado\"]) == [\"Orange\"]\nassert     total_match([\"lemon\", \"Orange\", \"Avocado\"], [\"lemon\", \"Orange\", \"Avocado\", \"apple\", \"Avocado\"]) == [\"lemon\", \"Avocado\"]\nassert     total_match([\"lemon\", \"Orange\", \"Avocado\"], [\"lemon\", \"Orange\", \"Avocado\"]) == [\"lemon\"]\nassert     total_match([\"lemon\", \"Orange\", \"Avocado\"], [\"lemon\", \"Orange\", \"Avocado\", \"apple\", \"apple\"]) == [\"Orange\"]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(total_match(['abc', 'bcd', 'bcf'], ['a', 'b', 'c']))\nassert total_match(['abc', 'bcd', 'bcf'], ['a', 'b', 'c', 'd']) == ['abc']\nassert total_match(['abc', 'bcd', 'bcf'], ['a', 'b', 'c', 'd', 'e']) == ['abc', 'bcd', 'bcf']\nassert total_match(['abc', 'bcd', 'bcf'], ['a', 'b', 'c', 'd', 'e', 'f']) == ['abc', 'bcd', 'bcf']\nassert total_match(['abc', 'bcd', 'bcf'], ['a', 'b', 'c', 'd', 'e', 'f', 'g']) == ['abc', 'bcd']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef main():\n    l1 = [\"A\", \"B\", \"C\"]\n    l2 = [\"D\", \"E\", \"F\"]\n    print(total_match(l1, l2))\n    print(total_match(l1, l1))\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert total_match(['abc', 'xyz', 'abc'], ['ab', 'xy', 'abc']) == ['abc']\nassert total_match(['abc', 'xyz', 'abc'], ['abc']) == ['abc']\nassert total_match(['abc', 'xyz', 'abc'], ['ab', 'xy', 'abc']) == ['abc']\nassert total_match(['abc', 'xyz', 'abc'], ['ab', 'xy', 'abc', 'ab', 'xyz', 'abc']) == ['abc', 'xyz']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(0) == False\nassert     is_multiply_prime(3) == True\nassert     is_multiply_prime(5) == True\nassert     is_multiply_prime(8) == False\nassert     is_multiply_prime(9) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(1) == False\nassert     is_multiply_prime(5) == True\nassert     is_multiply_prime(100) == True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_multiply_prime(11) == True\n    is_multiply_prime(35) == False\n    is_multiply_prime(7) == True\n    is_multiply_prime(14) == True\n    is_multiply_prime(71) == False\n    is_multiply_prime(113) == False\n\n\n\n\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(1)    == False, 'wrong answer'\nassert     is_multiply_prime(10)    == True, 'wrong answer'\nassert     is_multiply_prime(100)    == False, 'wrong answer'\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(37) == False, 'This is wrong, it should return false'\nassert     is_multiply_prime(6) == True, 'This is wrong, it should return true'\nassert     is_multiply_prime(1) == False, 'This is wrong, it should return false'\nassert     is_multiply_prime(99) == False, 'This is wrong, it should return false'\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nis_multiply_prime(100) == True\nis_multiply_prime(101) == False\n\n\ndef is_prime(n):\n    \"\"\"Write a function that returns True if the given number is a prime number and False otherwise.\n    Knowing that n is more than 3.\n    \"\"\"\n    pass\n\nassert is_prime(10) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(20) == True\nassert     is_multiply_prime(42) == True\nassert     is_multiply_prime(77) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert \n\nassert not is_multiply_prime(10)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(3) == True\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(11) == False\nassert     is_multiply_prime(28) == True\nassert     is_multiply_prime(19) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_simple_power(24, 6) == True, \"Wrong\"\nassert     is_simple_power(24, 3) == False, \"Wrong\"\nassert     is_simple_power(9, 1) == True, \"Wrong\"\nassert     is_simple_power(10, 2) == True, \"Wrong\"\nassert     is_simple_power(9, 3) == False, \"Wrong\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_simple_power(3, 9) == True, \"3**9 == 3, it should be true\"\nassert     is_simple_power(9, 3) == False, \"9**3 == 9, it should be false\"\nassert     is_simple_power(9, 9) == False, \"9**9 == 9, it should be false\"\nassert     is_simple_power(10, 2) == True, \"10**2 == 10, it should be true\"\nassert     is_simple_power(2, 10) == True, \"2**10 == 2, it should be true\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_simple_power(5, 5) == True\nassert     is_simple_power(5, 5+1) == False\nassert     is_simple_power(2, 6) == False\nassert     is_simple_power(9, 3) == True\nassert     is_simple_power(5, 6) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nis_simple_power(3, 2) == True\nis_simple_power(2, 2) == True\nis_simple_power(3, 3) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint (\"Passed!\") if is_simple_power(3, 4) == True else print (\"Your code has some errors...\")\nprint (\"Passed!\") if is_simple_power(6, 4) == True else print (\"Your code has some errors...\")\nprint (\"Passed!\") if is_simple_power(4, 3) == False else print (\"Your code has some errors...\")\nprint (\"Passed!\") if is_simple_power(3, 4) == False else print (\"Your code has some errors...\")\n\nprint (is_simple_power(4, 4))\nprint (is_simple_power(3, 4))\nprint (is_simple_power(2, 4))\nprint (is_simple_power(6, 4))\n\nprint (is_simple_power(2, 4))\nprint (is_simple_power(3, 4))\nprint (is_simple_power(4, 4))\nprint (is_simple_power(3, 4))\n\n\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(5, 2) == True, \"Should be True\"\nassert     is_simple_power(2, 4) == False, \"Should be False\"\nassert     is_simple_power(1, 10) == False, \"Should be False\"\nassert     is_simple_power(0, 10) == False, \"Should be False\"\nassert     is_simple_power(10, 1) == True, \"Should be True\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_simple_power(5, 3) == False\nassert     is_simple_power(27, 3) == True\nassert     is_simple_power(10, 3) == False\nassert     is_simple_power(1000, 3) == True\nassert     is_simple_power(2, 4) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nis_simple_power(5, 2) == True\n\nis_simple_power(5, 3) == False\n\nis_simple_power(4, 9) == True\n\nis_simple_power(5, 0) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_simple_power(7, 2) == True, \"7 is not a simple power of 2\"\nassert     is_simple_power(7, 4) == True, \"7 is not a simple power of 4\"\nassert     is_simple_power(8, 2) == False, \"8 is a simple power of 2\"\nassert     is_simple_power(8, 4) == False, \"8 is a simple power of 4\"\nassert     is_simple_power(9, 2) == True, \"9 is a simple power of 2\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_simple_power(3, 2) == True\nassert     is_simple_power(2, 2) == False\nassert     is_simple_power(3, 4) == False\n\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(iscube(0)) # True\nprint(iscube(9)) # True\nprint(iscube(12)) # True\nprint(iscube(1)) # False\nprint(iscube(0)) # False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    '''\n    # write your code here\n\n    return a == a**3\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     iscube(1) == True, \"iscube(1) = False\"\nassert     iscube(8) == True, \"iscube(8) = True\"\nassert     iscube(18) == False, \"iscube(18) = True\"\nassert     iscube(-1) == False, \"iscube(-1) = True\"\nassert     iscube(3) == False, \"iscube(3) = True\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(iscube(8))\n    print(iscube(9))\n    print(iscube(2**10))\n    print(iscube(3**5)"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    # test iscube\n    print(\"Test 1:\")\n    print(iscube(5))\n    print(iscube(4))\n    print(iscube(3))\n    print(iscube(2))\n    print(iscube(1))\n    print(iscube(0))\n    print(\"Test 2:\")\n    print(iscube(-1))\n    print(iscube(-4))\n    print(iscube(-5))\n    print(iscube(-6))\n    print(iscube(-7))\n    print(iscube(-8))\n    print(iscube(-9))\n    print(\"Test 3:\")\n    print(iscube(-10))\n    print(iscube(-11))\n    print(iscube(-12))\n    print(iscube(-13))\n    print(iscube(-14))\n    print(iscube(-15))\n    print(\"Test 4:\")\n    print(iscube(-16))\n    print(iscube(-17))\n    print(iscube(-18))\n    print(iscube(-19))\n    print(iscube(-20))\n    print(iscube(-21))\n    print(iscube(-22))\n    print(iscube(-23))\n    print(iscube(-24))\n    print(iscube(-25))\n    print(iscube(-26))\n    print(iscube(-27))\n    print(iscube(-28))\n    print(iscube(-29))\n    print(iscube(-30))\n    print(iscube(-31))\n    print(iscube(-32))\n    print(iscube(-33))\n    print(iscube(-34))\n    print(iscube(-35))\n    print(iscube(-36))\n    print(iscube(-37))\n    print(iscube(-38))\n    print(iscube(-39))\n    print(iscube(-40))\n    print(iscube(-41))\n    print(iscube(-42))\n    print(iscube(-43))\n    print(iscube(-44))\n    print(iscube(-45))\n    print(iscube(-46))\n    print(iscube(-47))\n    print(iscube(-48))\n    print(iscube(-49))\n    print(iscube(-50))\n    print(iscube(-51))\n    print(iscube(-52))\n    print(iscube(-53))\n    print(iscube(-54))\n    print(iscube(-55))\n    print(iscube(-56))\n    print(iscube(-57))\n    print(iscube(-58))\n    print(iscube(-59))\n    print(iscube(-60))\n    print(iscube(-61))\n    print(iscube(-62))\n    print(iscube(-63))\n    print(iscube(-64))\n    print(iscube(-65))\n    print(iscube(-66))\n    print(iscube(-67))\n    print(iscube(-68))\n    print(iscube(-69))\n    print(iscube(-70))\n    print(iscube(-71))\n    print(iscube(-72))\n    print(iscube(-73))\n    print(iscube(-74))\n    print(iscube(-75))\n    print(iscube(-76))\n    print(iscube(-77))\n    print(iscube(-78))\n    print(iscube(-79))\n    print(iscube(-80))\n    print(iscube(-81))\n    print(iscube(-82))\n    print(iscube(-83))\n    print(iscube(-84))\n    print(iscube(-85))\n    print(iscube(-86))\n    print(iscube(-87))\n    print(iscube(-88))\n    print(iscube(-89))\n    print(iscube(-90))\n    print(iscube(-91))\n    print(iscube(-92))\n    print(iscube(-93))\n    print(iscube(-94))\n    print(iscube(-95))\n    print(iscube(-96))\n    print(iscube(-97))\n    print(iscube(-98))\n    print(iscube(-99))\n    print(iscube(-100))\n    print(iscube(-101))\n    print(iscube(-102))\n    print(iscube(-103))\n    print(iscube(-104)"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     iscube(3) == True, \"iscube(3) is wrong\"\nassert     iscube(12) == True, \"iscube(12) is wrong\"\nassert     iscube(7) == False, \"iscube(7) is wrong\"\nassert     iscube(-1) == False, \"iscube(-1) is wrong\"\nassert     iscube(0) == False, \"iscube(0) is wrong\"\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nhex_key('F') == 1\nhex_key('A') == 1\nhex_key('B') == 2\nhex_key('C') == 2\nhex_key('D') == 3\nhex_key('E') == 3\nhex_key('F') == 4\nhex_key('A') == 4\nhex_key('B') == 5\nhex_key('C') == 5\nhex_key('D') == 6\nhex_key('E') == 6\nhex_key('F') == 7\nhex_key('A') == 7\nhex_key('B') == 8\nhex_key('C') == 8\nhex_key('D') == 9\nhex_key('E') == 9\nhex_key('F') == 10\nhex_key('A') == 10\nhex_key('B') == 11\nhex_key('C') == 11\nhex_key('D') == 12\nhex_key('E') == 12\nhex_key('F') == 13\nhex_key('A') == 13\nhex_key('B') == 14\nhex_key('C') == 14\nhex_key('D') == 15\nhex_key('E') == 15\nhex_key('F') == 16\nhex_key('A') == 16\nhex_key('B') == 17\nhex_key('C') == 17\nhex_key('D') == 18\nhex_key('E') == 18\nhex_key('F') == 19\nhex_key('A') == 19\nhex_key('B') == 20\nhex_key('C') == 20\nhex_key('D') == 21\nhex_key('E') == 21\nhex_key('F') == 22\nhex_key('A') == 22\nhex_key('B') == 23\nhex_key('C') == 23\nhex_key('D') == 24\nhex_key('E') == 24\nhex_key('F') == 25\nhex_key('A') == 25\nhex_key('B') == 26\nhex_key('C') == 26\nhex_key('D') == 27\nhex_key('E') == 27\nhex_key('F') == 28\nhex_key('A') == 28\nhex_key('B') == 29\nhex_key('C') == 29\nhex_key('D') == 30\nhex_key('E') == 30\nhex_key('F') == 31\nhex_key('A') == 31\nhex_key('B') == 32\nhex_key('C') == 32\nhex_key('D') == 33\nhex_key('E') == 33\nhex_key('F') == 34\nhex_key('A') == 34\nhex_key('B') == 35\nhex_key('C') == 35\nhex_key('D') == 36\nhex_key('E') == 36\nhex_key('F') == 37\nhex_key('A') == 37\nhex_key('B') == 38\nhex_key('C') == 38\nhex_key('D') == 39\nhex_key('E') == 39\nhex_key('F') == 40\nhex_key('A') == 40\nhex_key('B') == 41\nhex_key('C') == 41\nhex_key('D') == 42\nhex_key('E') == 42\nhex_key('F') == 43\nhex_key('A') == 43\nhex_key('B') == 44\nhex_key('C') == 44\nhex_key('D') == 45\nhex_key('E') == 45\nhex_key('F') == 46\nhex_key('A') == 46\nhex_key('B') == 47\nhex_key('C') == 47\nhex_key('D') == 48\nhex_key('E') == 48\nhex_key('F') == 49\nhex_key('A') == 49\nhex_key('B') == 50\nhex_key('C') == 50\nhex_key('D') == 51\nhex_key('E') == 51\nhex_key('F') == 52\nhex_key('A') == 52\nhex_key('B') == 53\nhex_key('C') == 53\nhex_key('D') == 54\nhex_key('E') == 54\nhex_key('F') == 55\nhex_key('A') == 55\nhex_key('B') == 56\nhex_key('C') == 56\nhex_key('D') == 57\nhex_key('E'"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhex_key('2F')\nhex_key('ABC')\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     hex_key(\"\") ==     0, \"check the correctness of hex_key\"\nassert     hex_key(\"AA\") ==     1, \"check the correctness of hex_key\"\nassert     hex_key(\"AB\") ==     1, \"check the correctness of hex_key\"\nassert     hex_key(\"Aa\") ==     1, \"check the correctness of hex_key\"\nassert     hex_key(\"ABa\") ==     2, \"check the correctness of hex_key\"\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     hex_key(\"0123456789ABCDEF\") == 6\nassert     hex_key(\"0123456789ABCDEF\") == 3\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     hex_key(\"FF00\") == 3, 'FAIL'\nassert     hex_key(\"FF00\") == 3, 'FAIL'\nassert     hex_key(\"FF00\") == 3, 'FAIL'\nassert     hex_key(\"FF00\") == 3, 'FAIL'\nassert     hex_key(\"FF00\") == 3, 'FAIL'\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     hex_key(\"A\") == 1\nassert     hex_key(\"B\") == 0\nassert     hex_key(\"C\") == 0\nassert     hex_key(\"D\") == 0\nassert     hex_key(\"E\") == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(10) == '100'\nassert     decimal_to_binary(23) == '101010110'\nassert     decimal_to_binary(0) == 'db'\nassert     decimal_to_binary(7) == '10101'\nassert     decimal_to_binary(15) == '11101001'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(1) == '0b1'\nassert     decimal_to_binary(2) == '0b10'\nassert     decimal_to_binary(3) == '0b11'\nassert     decimal_to_binary(4) == '0b100'\nassert     decimal_to_binary(5) == '0b101'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(4) == '1010', 'decimal_to_binary: wrong output!'\nassert     decimal_to_binary(12) == '101100011', 'decimal_to_binary: wrong output!'\nassert     decimal_to_binary(64) == '11100101', 'decimal_to_binary: wrong output!'\nassert     decimal_to_binary(15) == '10110011', 'decimal_to_binary: wrong output!'\nassert     decimal_to_binary(8) == '1010', 'decimal_to_binary: wrong output!'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(2) == 'db2'\nassert     decimal_to_binary(3) == 'db3'\nassert     decimal_to_binary(4) == 'db4'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(5) == '0b01', 'Should be \"0b01\"'\nassert     decimal_to_binary(17) == '0b10111', 'Should be \"0b10111\"'\nassert     decimal_to_binary(23) == '0b1001', 'Should be \"0b1001\"'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(decimal_number) == \"db0db0db0db0db0db0db\"\n\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0) == 'dbdb'\nassert     decimal_to_binary(1) == 'db'\nassert     decimal_to_binary(5) == 'db1'\nassert     decimal_to_binary(12) == 'dbdb1'\nassert     decimal_to_binary(42) == 'dbdb1b'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(5) == '01'\nassert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(16) == '10110001'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    decimal_to_binary(42) == '101010'\n    decimal_to_binary(8) == '100'\n    decimal_to_binary(2) == '10'\n    decimal_to_binary(3) == '11'\n    decimal_to_binary(0) == '000'\n    decimal_to_binary(1) == '001'\n    decimal_to_binary(-1) == '00101'\n    decimal_to_binary(-2) == '101'\n    decimal_to_binary(-3) == '10011'\n    decimal_to_binary(-4) == '1011'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(is_happy(\"abcda\"))\nprint(is_happy(\"aaaa\"))\nprint(is_happy(\"a\"))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_happy('aa') == True\nassert     is_happy('aab') == False\nassert     is_happy('abc') == False\nassert     is_happy('abcdde') == False\nassert     is_happy('aabcd') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_happy('aaabbc') == False, 'it should return False'\nassert     is_happy('aaabbb') == False, 'it should return False'\nassert     is_happy('aaa') == True, 'it should return True'\nassert     is_happy('abc') == True, 'it should return True'\nassert     is_happy('aab') == True, 'it should return True'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_happy('cbacdcbc') == True\nassert     is_happy('dacbdccb') == False\nassert     is_happy('') == False\nassert     is_happy('ac') == False\nassert     is_happy('abc') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_happy('aa') == False\nassert     is_happy('aaa') == True\nassert     is_happy('ab') == False\nassert     is_happy('abc') == True\nassert     is_happy('abcc') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_happy('aa') == False\nassert     is_happy('aaab') == False\nassert     is_happy('aaabccc') == True\nassert     is_happy('abc') == False\nassert     is_happy('ac') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    # uncomment the following line to print the expected output\n    # input_str = \"cdg\"\n    # input_str = \"ggggg\"\n    input_str = \"g\"\n\n    print(f\"is_happy('{input_str}') = {is_happy(input_str)}\")"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n\nprint(\"\\nTest 13 - pass\\n\")\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     numerical_letter_grade([3.0, 4.0, 4.0]) == ['B+', 'A+', 'A+']\nassert     numerical_letter_grade([3.5, 4.0, 4.0]) == ['D+', 'A+', 'A+']\nassert     numerical_letter_grade([3.5, 4.0, 4.0]) == ['D+', 'A+', 'A+']\nassert     numerical_letter_grade([3.0, 3.5, 3.5]) == ['A+', 'B+', 'B+']\nassert     numerical_letter_grade([3.0, 3.5, 3.5]) == ['A+', 'B+', 'B+']\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'B+', 'A', 'A-', 'B-', 'C+', 'C', 'C-', 'D+', 'D']\n\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([3.3,3.3,3.3,3.0,3.0,3.3,3.0,3.0,3.0,3.3,3.3,3.0,3.0,3.3,3.0,3.3,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3."
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([3.3, 3.3, 3.3, 2.7, 2.7, 2.3, 2.0, 1.7, 1.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'], \"Wrong\"\nprint(\"numerical_letter_grade is correct\")\n\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade(gpa=[4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E' ]\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade(grades=[\"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\"]) == [\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\"]\nassert numerical_letter_grade(grades=[\"4.0\", \"3.7\", \"3.3\", \"3.0\", \"2.7\", \"2.3\", \"2.0\", \"1.7\", \"1.3\", \"1.0\", \"0.7\", \"0.0\", \"0.0\"]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert numerical_letter_grade(grades=[\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\"]) == [\"E\"]\nassert numerical_letter_grade(grades=[\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\"]) == [\"E\"]\nassert numerical_letter_grade(grades=[\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\", \"9.0\"]) == [\"E\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnumerical_letter_grade([2,4,1,3,5]) == ['E', 'C', 'B', 'C', 'A']\nprint(\"You've passed the task!\""
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.0]) == ['A+', 'A', 'A-', 'A', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prime_length(\"\") == False, \"Empty string should return False\"\nassert     prime_length(\" \") == False, \"Space should return False\"\nassert     prime_length(\"\\n\") == False, \"New line should return False\"\nassert     prime_length(\"hi\") == False, \"Wrong letter should return False\"\nassert     prime_length(\"11\") == True, \"String length is not prime, return True\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     starts_one_ends(3) == 2\nassert     starts_one_ends(5) == 5\nassert     starts_one_ends(7) == 5\nassert     starts_one_ends(9) == 6\nassert     starts_one_ends(10) == 7\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     starts_one_ends(1) == 0\nassert     starts_one_ends(2) == 0\nassert     starts_one_ends(3) == 0\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 4\nassert     starts_one_ends(4) == 8\nassert     starts_one_ends(5) == 13\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert starts_one_ends(2) == 2\nassert starts_one_ends(3) == 5\nassert starts_one_ends(5) == 13\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve(10) == \"1010\"\nassert     solve(12) == \"1100\"\nassert     solve(34) == \"0010\"\nassert     solve(1234) == \"1010110\"\nassert     solve(12345) == \"101010100100\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solve(0) == '00'\nassert     solve(1) == '01'\nassert     solve(2) == '10'\nassert     solve(3) == '11'\nassert     solve(4) == '100'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solve(123) == \"1234\", \"Wrong!\"\nassert     solve(0) == \"0\", \"Wrong!\"\nassert     solve(12345) == \"123450\", \"Wrong!\"\nassert     solve(6) == \"100\", \"Wrong!\"\nassert     solve(19) == \"10110\", \"Wrong!\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (solve(N=1) == \"1\")\nassert     (solve(N=10) == \"1010\")\nassert     (solve(N=100) == \"1100001\")\nassert     (solve(N=7) == \"1111\")\nassert     (solve(N=12) == \"111100001\")\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert solve(3) == \"10\", \"Wrong!\"\nassert solve(4) == \"11\", \"Wrong!\"\nassert solve(5) == \"101\", \"Wrong!\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(solve(4))\nprint(solve(32))\nprint(solve(2147483648))\nprint(solve(2147483650))\nprint(solve(2147483650))\nprint(solve(2147483650))\nprint(solve(2147483650))"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sub(lst):\n    \"\"\"Given a non-empty list of integers lst. sub the odd elements that are at odd indices..\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add([]) == []\nassert     add([1, 2, 3, 4, 5]) == [1, 3, 5, 7, 9]\nassert     add([2, 4, 6, 8, 10]) == [3, 5, 7, 9, 11]\nassert     add([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 7, 9, 11]\nassert     add([3, 6, 9]) == [3, 7, 9]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add([1,2,3,4,5,6,7]) == [1,2,3,6,7], \"This should be 3,6,7\"\nassert     add([1,2,3,4,5,6]) == [1,2,3,5,6], \"This should be 1,2,5,6\"\nassert     add([1,2,3]) == [1,2,3], \"This should be 1,2,3\"\nassert     add([]) == [], \"This should be empty\"\n\ndef sub(lst):\n    \"\"\"Given a non-empty list of integers lst. sub the odd elements that are at even indices.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nadd([]), add([1]) == [1], add([2,2,2]) == [2,4]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_numbers(lst):\n    \"\"\"Given a list of non-negative integers, return the sum of its elements\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add([1,2,3,4,5]) == [2,4,6,8]\n\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nadd([1, 3, 5]) == [1, 5]\nassert add([1, 2, 4]) == [1, 2, 5]\nassert add([1, 3, 4]) == [1, 2, 4, 5]\nassert add([1, 2, 4, 7]) == [1, 2, 4, 5, 7]\nassert add([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add([]) == []\nassert     add([2]) == [2]\nassert     add([2,4,6,8]) == [2,4,6]\nassert     add([2,4,6,8,10]) == [2,4,6,8,10]\nassert     add([2,4,6,8,10,12,14,16]) == [2,4,6,8,10,12,14,16]\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"Hello World!\") == \"World!\"\nassert     anti_shuffle(\"Hello world!\") == \"world!\"\nassert     anti_shuffle(\"hi5er5o4 word!\") == \"word!\"\nassert     anti_shuffle(\"123456567\") == \"1234567\"\nassert     anti_shuffle(\"abcd efgh\") == \"efgh abcd\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     anti_shuffle(\"The quick brown fox jumps over the lazy dog\") == \"heT thE qUiCk brWN ox fO lEv surp yUoU dOG\"\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"heT thE qUiCk brWN ox fO lEv surp yUoU dOG\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\" \") == \"\"\nassert     anti_shuffle(\"A man, a plan, a canal: Panama\") == \"AMan aPamALpanalpanaCanal\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"how are you\") == \"you are orew\", \"Fail\"\nassert     anti_shuffle(\"hello world\") == \"world olleh\", \"Fail\"\nassert     anti_shuffle(\"hello\") == \"hello\", \"Fail\"\nassert     anti_shuffle(\"\") == \"\", \"Fail\"\nassert     anti_shuffle(\"a b c\") == \"abc\", \"Fail\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     anti_shuffle(\"hello world\") == \"dlrow olleh\"\nassert     anti_shuffle(\"hello world!!\") == \"dlrow olleh!!\"\nassert     anti_shuffle(\"hello world\") == \"dlrow olleh\"\nassert     anti_shuffle(\"hello world world\") == \"dlrow olleh world\"\nassert     anti_shuffle(\"hello world!!\") == \"dlrow olleh!!\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nanti_shuffle('hi-fly-by') == 'hi fly by'\nassert \nanti_shuffle('word') == 'word'\nassert \nanti_shuffle('what a wonderful world!') == 'what a wonderful worl!'\nassert \nanti_shuffle('abra cadabra') == 'abracadabra'\nassert \nanti_shuffle('   ') =='  '\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\"\"\"\nSolution:\n\ndef anti_shuffle(s):\n    \n    result = \"\"\n    words = s.split()\n    for word in words:\n        word = \"\".join(sorted(word))\n        result += word + \" \"\n    return result[:-1]\n\n    "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    lst = [[[1, 2, 3],\n    [[4],\n    [5, 6],\n    [7]],\n    [[8],\n    [9],\n    [10, 11]]]\n    \n    \n    print(get_row(lst, 4))\n    \n    print(get_row(lst, 2))\n    \n    print(get_row(lst, 8))\n    \n    print(get_row(lst, 1))\n    \n    print(get_row(lst, 7)"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(get_row([[3, 0, 1],\n        [4, 4, 2],\n        [1, 1, 1]],\n        2))"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_column(lst, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each column may contain a different number of rows.\n    Given lst, and integer y, find integers y in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (rows, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_column(lst, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_row([[], []], 1) == []\nassert     get_row([[1], []], 0) == [(0, 0)]\nassert     get_row([[1, 2], []], 0) == [(0, 0), (0, 1)]\nassert     get_row([[1, 2], [2]], 0) == [(0, 0), (1, 1)]\nassert     get_row([[1, 2], [2, 3]], 0) == [(0, 0), (0, 1), (0, 2), (1, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_row([\"I\", \"am\", \"a\", \"student\", \"and\", \"i\", \"like\", \"coding\"], \"I\") == [(0, 1), (0, 2), (1, 1)]\nassert     get_row([\"I\", \"am\", \"a\", \"student\", \"and\", \"i\", \"like\", \"coding\"], \"am\") == [(0, 1)]\nassert     get_row([\"I\", \"am\", \"a\", \"student\", \"and\", \"i\", \"like\", \"coding\"], \"student\") == [(0, 2), (1, 1), (1, 2), (2, 1)]\nassert     get_row([\"I\", \"am\", \"a\", \"student\", \"and\", \"i\", \"like\", \"coding\"], \"i\") == [(0, 1), (1, 1), (1, 2), (2, 1)]\nassert     get_row([\"I\", \"am\", \"a\", \"student\", \"and\", \"i\", \"like\", \"coding\"], \"and\") == [(0, 1), (0, 2), (1, 1), (2, 1)]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint (get_row([(0, 1, 4), (2, 3, 5), (0, 2, 6), (1, 1, 7)], 1)) == \\\n    [(1, 1), (0, 2), (0, 0), (2, 1)]\nassert \nprint (get_row([(0, 1, 4), (2, 3, 5), (0, 2, 6), (1, 1, 7)], 2)) == \\\n    [(2, 1), (0, 2), (0, 0), (1, 0)]\nassert \nprint (get_row([(0, 1, 4), (2, 3, 5), (0, 2, 6), (1, 1, 7)], 3)) == \\\n    [(3, 1), (0, 1), (1, 2), (2, 2)]\nassert \nprint (get_row([(0, 1, 4), (2, 3, 5), (0, 2, 6), (1, 1, 7)], 4)) == \\\n    [(4, 1), (0, 1), (2, 1), (1, 2)]\nassert \nprint (get_row([(0, 1, 4), (2, 3, 5), (0, 2, 6), (1, 1, 7)], 5)) == \\\n    [(5, 1), (0, 2), (1, 2), (2, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_row([[0],\n                [0, 0],\n                [0, 1],\n                [0, 2],\n                [1, 0]],\n                0) == [(0, 0), (0, 1), (0, 2), (1, 0)]\nassert     get_row([[0, 1],\n                [0, 1, 1],\n                [0, 1, 1, 1],\n                [0, 1, 1, 1, 1],\n                [0, 1, 1, 1, 1, 1],\n                [0, 1, 1, 1, 1, 1, 1]],\n                0) == [(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (1, 20), (1, 21), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 27), (1, 28), (1, 29), (1, 30), (1, 31), (1, 32), (1, 33), (1, 34), (1, 35), (1, 36), (1, 37), (1, 38), (1, 39), (1, 40), (1, 41), (1, 42), (1, 43), (1, 44), (1, 45), (1, 46), (1, 47), (1, 48), (1, 49), (1, 50), (1, 51), (1, 52), (1, 53), (1, 54), (1, 55), (1, 56), (1, 57), (1, 58), (1, 59), (1, 60), (1, 61), (1, 62), (1, 63), (1, 64), (1, 65), (1, 66), (1, 67), (1, 68), (1, 69), (1, 70), (1, 71), (1, 72), (1, 73), (1, 74), (1, 75), (1, 76), (1, 77), (1, 78), (1, 79), (1, 80), (1, 81), (1, 82), (1, 83), (1, 84), (1, 85), (1, 86), (1, 87), (1, 88), (1, 89), (1, 90), (1, 91), (1, 92), (1, 93), (1, 94), (1, 95), (1, 96), (1, 97), (1, 98), (1, 99), (1, 100), (1, 101), (1, 102), (1, 103), (1, 104), (1, 105), (1, 106), (1, 107), (1, 108), (1, 109), (1, 110), (1, 111), (1, 112), (1, 113), (1, 114), (1, 115), (1, 116), (1, 117), (1, 118), (1, 119), (1, 120), (1, 121), (1, 122), (1, 123), (1, 124), (1, 125), (1, 126), (1, 127), (1, 128), (1, 129), (1, 130), (1, 131), (1, 132), (1, 133), (1, 134), (1, 135), (1, 136), (1, 137), (1, 138), (1, 139), (1, 140), (1, 141), (1, 142), (1, 143), (1, 144), (1, 145), (1, 146), (1, 147), (1, 148), (1, 149), (1, 150), (1, 151), (1, 152), (1, 153), (1, 154), (1, 155), (1, 156), (1, 157), (1, 158), (1, 159), (1, 160), (1, 161), (1, 162), (1, 163), (1, 164), (1, 165), (1, 166), (1, 167), (1, 168), (1, 169), (1, 170), (1"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_sorted(array):\n    \"\"\"\n    Given an array of non-negative integers, you are required to check if the array is sorted or not.\n\n    Note:\n    * an array is sorted if the first element is less than or equal to the last element.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([1, 3, 2, 4]) == sorted([1, 2, 3, 4])\nassert     sort_array([1, 2, 3, 4]) == sorted([1, 2, 3, 4])\nassert     sort_array([1, 2, 3, 4, 5]) == sorted([1, 2, 3, 4, 5])\nassert     sort_array([1, 2, 3, 4, 5, 4]) == sorted([1, 2, 3, 4, 5, 4])\nassert     sort_array([3, 3, 3, 3]) == sorted([3, 3, 3, 3])\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([]) == None, \"Input None\"\nassert     sort_array([1]) == None, \"Input 1\"\nassert     sort_array([1, 2]) == None, \"Input 1, 2\"\nassert     sort_array([-1, 1, -2, 2]) == None, \"Input -1, 1, -2, 2\"\nassert     sort_array([2, 1, 2, 1]) == None, \"Input 2, 1, 2, 1\"\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([10, 2, 3, -5, 4])    ==     [-5, 4, 3, 2, 10],     \"incorrect\"\nassert     sort_array([10, 2, 3, -5, 4])    ==     [-5, 4, 3, 2, 10],     \"correct\"\n\nif __name__ == \"__main__\":\n    input_array = [1, 2, 3, 4, 5]\n    print(sort_array(input_array))\n\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1, 2, 5, 4])    ==    [1, 2, 4, 5], 'Test #1 fail'\nassert     sort_array([1, 5, 2, 4])    ==    [1, 2, 4, 5], 'Test #2 fail'\nassert     sort_array([1, 5, 1, 4])    ==    [1, 1, 4, 5], 'Test #3 fail'\nassert     sort_array([1, 5, 1, 5])    ==    [1, 1, 5, 5], 'Test #4 fail'\nassert     sort_array([1, 1, 1, 1])    ==    [1, 1, 1, 1], 'Test #5 fail'\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([3, 4, 2, 5, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([1, 3, -1, -5, 7, 5, 0]) == [-5, -1, 0, 1, 3, 5, 7]\nassert sort_array([1, 2, -3, 4, 5]) == [-3, -1, 1, 2, 3, 4, 5]\nassert sort_array([-1, 2, -3, 4, 5]) == [-3, -1, 2, 4, 5]\n\nprint(\"Success.\")"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # test1\n    s = \"abc\"\n    print(\"test1: \" + encrypt(s))\n    # test2\n    s = \"xyz\"\n    print(\"test2: \" + encrypt(s))\n    # test3\n    s = \"abcde\"\n    print(\"test3: \" + encrypt(s))\n    # test4\n    s = \"aaaaaa\"\n    print(\"test4: \" + encrypt(s))\n    # test5\n    s = \"zxyzxy\"\n    print(\"test5: \" + encrypt(s))\n    # test6\n    s = \"zxyxzxy\"\n    print(\"test6: \" + encrypt(s))\n    # test7\n    s = \"aabcdef\"\n    print(\"test7: \" + encrypt(s))\n    # test8\n    s = \"abcdef\"\n    print(\"test8: \" + encrypt(s))\n    # test9\n    s = \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encrypt(\"\") == \"\"\nassert encrypt(\"abc\") == \"bc\"\nassert encrypt(\"ABC\") == \"Bc\"\nassert encrypt(\"def\") == \"dF\"\nassert encrypt(\"DEF\") == \"DF\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     encrypt(\"test\") == \"kcbt\"\nassert     encrypt(\"\") == \"\"\n\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string decrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nnext_smallest([1, 2, 3, 4])\nnext_smallest([1, 3, 4, 5])\nnext_smallest([1, 2, 3, 4, 5])\nnext_smallest([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_smallest([1,2,3]) == 2, \"Should return the next smallest number.\"\nassert next_smallest([3,1,2]) == 1, \"Should return 1.\"\nassert next_smallest([3,1,2,5]) == 1, \"Should return 1.\"\nassert next_smallest([3,1,5,2]) == 2, \"Should return 2.\"\nassert next_smallest([]) == None, \"Should return None.\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_smallest([2, 3, 7, 11, 5, 9]) == 5\nassert     next_smallest([7, 2, 3, 11, 5, 9]) == 2\nassert     next_smallest([9, 7, 2, 3, 11, 5]) == 7\nassert     next_smallest([11, 9, 7, 2, 3, 5]) == 11\nassert     next_smallest([5, 9, 7, 2, 3, 11]) is None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2\nassert next_smallest([1, 3, 2, 4, 5]) == 2\nassert next_smallest([5, 4, 3, 2, 1]) == None\nassert next_smallest([2, 1, 3, 4, 5]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest([2,4,1,2,3,7,8,2,4]) == 4, \"next_smallest(arr) test 1 failed\"\nassert next_smallest([2,4,1,2,3,7,8,2,4]) == 1, \"next_smallest(arr) test 2 failed\"\nassert next_smallest([2,4,1,2,3,7,8,2,4,5,6,7,8,9,10,11,12,13]) == 4, \"next_smallest(arr) test 3 failed\"\nassert next_smallest([]) == None, \"next_smallest(arr) test 4 failed\"\nassert next_smallest([1]) == None, \"next_smallest(arr) test 5 failed\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest([1, 5, 4, 6]) == 5\nassert     next_smallest([1, 5, 4, 6]) == 5\nassert     next_smallest([1, 5, 4, 5]) == 5\nassert     next_smallest([1, 2, 3, 4]) == None\nassert     next_smallest([1, 5, 4, 5, 2, 3]) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert next_smallest([1, 2, 3]) == 1, \"Wrong next_smallest([1, 2, 3]): 1\"\nassert next_smallest([1, 2, 3, 4]) == 2, \"Wrong next_smallest([1, 2, 3, 4]): 2\"\nassert next_smallest([1, 2, 2, 2, 2]) == 2, \"Wrong next_smallest([1, 2, 2, 2, 2]): 2\"\nassert next_smallest([1, 2, 3, 4, 5]) == None, \"Wrong next_smallest([1, 2, 3, 4, 5]): None\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_bored(\"I!I!I.I!\") == False\nassert     is_bored(\"I.I.I.I!I.I!\") == True\nassert     is_bored(\"I.I.I.I?I.I!\") == False\nassert     is_bored(\"I!I.I!I.I?I.I!\") == True\nassert     is_bored(\"I?I.I.I.I.I!I.I!\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_bored(\"I.am.bored.of.this.sentence\") == 1, \"1st\"\nassert     is_bored(\"I.am.bored.of.this.sentence.\") == 2, \"2nd\"\nassert     is_bored(\"I.am.bored.of.this.sentence!.\") == 3, \"3rd\"\nassert     is_bored(\"I.am.bored.of.this.sentence!!!\") == 4, \"4th\"\nassert     is_bored(\"I.am.bored.of.this.sentence!??\") == 5, \"5th\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_bored(\"I am bored!\") == True\nassert \n    is_bored(\"I am not bored\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('You passed the is_bored test')\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef funny_sentence(S):\n    \"\"\"\n    You'll be given a sentence, and your task is to tell if the sentence\n    is funny or not. A sentence is funny if the sentence contains a\n    boredom in it and it ends with a question mark or exclamation mark.\n    Sentences are delimited by '.', '?', '!' or '?'.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_bored('') == 0, 'Empty string'\nassert     is_bored('I') == 1, 'I word'\nassert     is_bored('I.I') == 1, 'I.I word'\nassert     is_bored('I.!') == 1, 'I.! word'\nassert     is_bored('I?I') == 1, 'I?I word'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_bored('I') == 1, \"1st test failed\"\nassert is_bored('I..') == 1, \"1st test failed\"\nassert is_bored('I.!') == 1, \"1st test failed\"\nassert is_bored('I.?') == 0, \"1st test failed\"\nassert is_bored('I.?.!') == 0, \"1st test failed\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_bored('I') == 1\nassert is_bored('I.') == 0\nassert is_bored('I?.') == 1\nassert is_bored('I!.') == 1\nassert is_bored('I?I?I') == 2\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_bored(\"I am bored.!!!!!?\") == \n    3\nassert \n    is_bored(\"I am not bored. I like to play games. I get bored after every new game.\") == \n    2\nassert \n    is_bored(\"I am not tired but I am tired too.!!!!!?\") == \n    2\nassert \n    is_bored(\"I am not tired. I am not bored.\") == \n    1\n    \n\n\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nany_int(2, 3, 4)\n\nany_int(2, 3, 3)\n\nany_int(4, 2, 2)\n\nany_int(2, 4, 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     any_int(3, 1, 1) == True\nassert     any_int(1, 1, 1) == False\nassert     any_int(3, 3, 3) == True\nassert     any_int(1, 1, 1) == False\nassert     any_int(2, 3, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     any_int(3, 3, 3) == True\nassert     any_int(3, 3, 4) == False\nassert     any_int(3, 4, 3) == False\nassert     any_int(3.1, 3.1, 4) == False\nassert     any_int(3.1, 3.2, 3) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     any_int(1, 2, 3) == True, 'any_int 1-3'\nassert     any_int(1, 1, 3) == False, 'any_int 1-3'\nassert     any_int(1, 2, 3) == False, 'any_int 1-3'\nassert     any_int(1, 2, 3) == False, 'any_int 1-3'\nassert     any_int(1.2, 2, 3) == False, 'any_int 1.2-3'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3) == True\nassert     any_int(1, 2, 2) == False\nassert     any_int(2, 1, 2) == False\nassert     any_int(2, 2, 2) == False\nassert     any_int(3, 3, 3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Test Case 01: ', any_int(5, 5, 5) )\nprint('Test Case 02: ', any_int(5, 5, 6) )\nprint('Test Case 03: ', any_int(5, 6, 5) )\nprint('Test Case 04: ', any_int(5, 5, 6) )\nprint('Test Case 05: ', any_int(6, 5, 5) )\nprint('Test Case 06: ', any_int(6, 6, 5) )\nprint('Test Case 07: ', any_int(5, 5, 6) )\nprint('Test Case 08: ', any_int(6, 6, 6) )\nprint('Test Case 09: ', any_int(6, 5, 6) )\nprint('Test Case 10: ', any_int(6, 6, 6) )"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     any_int(1,2,3) == True\nassert     any_int(3,2,3) == True\nassert     any_int(3,2,2) == True\nassert     any_int(3,2,1) == False\nassert     any_int(2,1,3) == False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     encode('It wokrs like sex') == 'TeWWrKs like sex'\nassert     encode('Yaay') == 'Yaay'\nassert     encode('A STUDENT') == 'a student'\nassert     encode('It wokrs like sex') == 'It wokrs like sex'\nassert     encode('It wokrs like sex') == 'It wokrs like sex'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encode(\"OLEO\") == \"GOLP\"\nassert     encode(\"HELLO WORLD\") == \"hElL oRLd wrD lORl\"\nassert     encode(\"AaAAbC\") == \"AAbb C\"\nassert     encode(\"leEtiOn\") == \"leEtiOn\"\n\ndef encode_2(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\"\"\"\nIf your function works correctly, it should not return anything. \nIf it returns anything, print it. \nIf your function is not working, \nraise an Exception, specifying which input was wrong. \n\"\"\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode(\"This is a test\") == \"sTThIs aTst\"\nassert     encode(\"Doe's Bar\") == \"Doe's BAr\"\nassert     encode(\"ABC\") == \"abc\"\nassert     encode(\"ABC\") == \"abc\"\nassert     encode(\"ABC\") == \"abc\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way \n    that it swaps case of all letters, replaces all vowels in the \n    message with the letter that appears 2 places behind that vowel \n    in the english alphabet.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     skjkasdkd([12, 42, 90, 12, 0]) == 8\nassert     skjkasdkd
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     skjkasdkd([10, 9, 8, 2, 3]) == 19, \"(10, 9, 8, 2, 3) ---> 19\"\nassert     skjkasdkd([10, 10, 10, 2, 2]) == 22, \"(10, 10, 10, 2, 2) ---> 22\"\nassert     skjkasdkd([10, 8, 5, 3, 6]) == 27, \"(10, 8, 5, 3, 6) ---> 27\"\nassert     skjkasdkd([8, 2, 3, 2, 1]) == 12, \"(8, 2, 3, 2, 1) ---> 12\"\nassert     skjkasdkd([1, 2, 4, 5, 3]) == 12, \"(1, 2, 4, 5, 3) ---> 12\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     skjkasdkd([6, 8, 0, 0, 10, 10]) == 7\nassert     skjkasdkd([0, 0, 10, 1, 1]) == 10\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     skjkasdkd([2,3,2,1,5]) == 13\nassert skjkasdkd([1,2,3,4,5,5]) == 17\nprint(\"Let's test your knowledge!\")\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     skjkasdkd([10, 12, 7, 15, 10, 16, 15, 15, 7, 5, 14, 7, 13, 14, 16, 6, 11, 16, 14, 7, 16, 13, 10, 14, 15, 16, 9, 10, 13, 12, 14, 8, 13, 15, 11, 9, 14, 9, 9, 13, 10, 13, 10, 15, 16, 12, 11, 15, 16, 16, 14, 9, 8, 10, 14, 13, 10, 14, 12, 14, 16, 15, 9, 16, 14, 9, 13, 15, 11, 14, 11, 14, 12, 14, 15, 13, 11, 13, 12, 9, 10, 16, 12, 13, 15, 12, 15, 11, 14, 13, 16, 14, 9, 13, 16, 15, 9, 14, 16, 13, 16, 15, 16, 13, 11, 13, 10, 16, 9, 10, 14, 12, 13, 9, 15, 13, 10, 12, 14, 10, 16, 10, 13, 14, 15, 10, 13, 14, 15, 15, 14, 9, 11, 16, 14, 12, 11, 10, 13, 15, 13, 12, 12, 16, 12, 13, 16, 13, 13, 14, 10, 16, 11, 16, 12, 13, 15, 14, 13, 12, 15, 15, 11, 14, 11, 15, 10, 14, 16, 13, 14, 14, 14, 15, 10, 11, 13, 10, 16, 12, 11, 13, 13, 11, 12, 14, 13, 14, 15, 14, 13, 13, 13, 10, 13, 14, 15, 16, 11, 13, 14, 12, 12, 12, 13, 14, 13, 13, 13, 14, 11, 12, 13, 13, 12, 11, 13, 14, 16, 11, 13, 13, 13, 14, 16, 16, 15, 14, 14, 13, 16, 16, 14, 14, 14, 14, 15, 11, 14, 15, 13, 16, 11, 13, 13, 13, 14, 13, 14, 14, 15, 13, 13, 15, 16, 16, 13, 11, 14, 12, 14, 13, 15, 16, 14, 16, 15, 16, 16, 13, 14, 14, 14, 16, 15, 14, 15, 14, 14, 13, 13, 15, 14, 14, 15, 16, 16, 16, 16, 15, 12, 13, 15, 13, 16, 14, 11, 13, 11, 13, 11, 15, 16, 16, 16, 16, 15, 14, 13, 13, 16, 15, 11, 16, 12, 13, 13, 16, 15, 15, 13, 11, 13, 16, 13, 16, 14, 12, 15, 16, 12, 13, 16, 16, 13, 15, 14, 13, 13, 16, 15, 11, 16, 13, 13, 14, 11, 14, 13, 12, 11, 13, 13, 11, 14, 16, 12, 14, 16, 15, 15, 14, 13, 14, 14, 16, 16, 16, 16, 15, 13, 13, 13, 16, 16, 15, 13, 16, 12, 13, 14, 16, 16, 13, 14, 12, 13, 13, 13, 15, 15, 14, 15, 13, 13, 15, 13, 15, 16, 15, 13, 16, 13, 13, 16, 13, 14, 16, 16, 16, 13, 16, 15, 15, 13, 15, 16, 16, 16, 13, 13, 13, 13, 16, 13, 16, 16, 16, 13, 13, 15, 13, 13, 16, 13, 16, 14, 13, 16, 15, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 13, 14, 16, 13, 14, 16, 16, 16, 16, 13, 13, 13, 16, 13, 13, 16, 16, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 1"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     skjkasdkd([])    == 0\nassert     skjkasdkd([10,20,30,50,60,70,80,90,100,110,120]) == 350\nassert     skjkasdkd([10,20,30,50,60,70,80,90,100,110,12]) == 330\nassert     skjkasdkd([10,20,30,50,60,70,80,90,100,110,12,2]) == 407\nassert     skjkasdkd([-2,-4,-6,-8,-10]) == -50\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     skjkasdkd([1, 4, 5, 6, 9, 23, 46, 72, 123]) == 77\nassert     skjkasdkd([]) == 0\nassert     skjkasdkd([10]) == 10\nassert     skjkasdkd([1, 2, 3, 4, 5, 6, 7]) == 23\nassert     skjkasdkd([9, 9, 9, 9, 9, 9, 9]) == 162\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     skjkasdkd([]) == 0, \"Empty list\"\nassert     skjkasdkd([0]) == 0, \"Zero\"\nassert     skjkasdkd([1, 1, 1]) == 6, \"One is prime and return 6\"\nassert     skjkasdkd([2, 2, 2]) == 6, \"Two are primes and return 6\"\nassert     skjkasdkd([3, 3, 3]) == 0, \"3 is prime and return 0\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_dict_case({\"a\":1,\"b\":2,\"c\":3}) == True, \"Testcase 1 failed\"\nassert     check_dict_case({\"A\":1,\"B\":2,\"c\":3}) == True, \"Testcase 2 failed\"\nassert     check_dict_case({\"a\":1,\"b\":2,\"c\":3,\"d\":4}) == False, \"Testcase 3 failed\"\nassert     check_dict_case({\"a\":\"1\",\"b\":\"2\",\"c\":\"3\"}) == True, \"Testcase 4 failed\"\nassert     check_dict_case({\"a\":\"1\",\"b\":\"2\",\"c\":\"3\",\"d\":\"4\"}) == False, \"Testcase 5 failed\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_dict_case({}) == True\nassert     check_dict_case({\"abc\": \"123\"}) == False\nassert     check_dict_case({\"ABC\": 123}) == False\nassert     check_dict_case({\"abc\": 123}) == True\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_dict_case({}) == False, \"Test 1: Input is empty\"\nassert     check_dict_case({'Name': 'Amit', 'Hobbies': ['programming','singing']}) == True, \"Test 2: All keys are strings\"\nassert     check_dict_case({'Name': 'Amit', 'Hobbies': ['programming','singing','reading']}) == False, \"Test 3: All keys are strings\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == False, \"Empty dictionary\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3}) == False, \"Non-string keys\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == False, \"Both keys are strings\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == True, \"All keys are strings\"\nassert     check_dict_case({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}) == True, \"All keys are strings\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_dict_case({\"hello\": 1, \"Hello\": 2}) == True\nassert     check_dict_case({\"HELLO\": 1, \"hello\": 2}) == True\nassert     check_dict_case({\"Hello\": 1, \"hello\": 2}) == False\nassert     check_dict_case({\"hello\": 1, \"Hello\": 2}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_dict_case(dict(a='abcd', e='ABCD'))\nassert     check_dict_case(dict(a='abc', e='ABC'))\nassert     check_dict_case(dict())\nassert     check_dict_case(dict(a='', e=''))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         check_dict_case({}) == True, \\\n                \"Error in check_dict_case\"\n\nassert         check_dict_case({'c':'X','a':'x'}) == True, \\\n                \"Error in check_dict_case\"\n\nassert         check_dict_case({'a':'x','A':'X'}) == True, \\\n                \"Error in check_dict_case\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_up_to_with_step(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n with a step.\n\n    In other words, if the argument is 4, the function should return a list of 2, 3, 4, 5, 8, 11, 14,\n    and 19.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncount_up_to(2)"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_up_to(0) == []\nassert     count_up_to(1) == []\nassert     count_up_to(2) == []\nassert     count_up_to(4) == []\nassert     count_up_to(6) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_up_to(1) == [2], \"wrong output\"\nassert     count_up_to(2) == [3], \"wrong output\"\nassert     count_up_to(5) == [2, 3, 5, 7], \"wrong output\"\nassert     count_up_to(10) == [2, 3, 5, 7, 11], \"wrong output\"\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19], \"wrong output\""
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef uckiyak(n):\n    \"\"\"Complete the function that takes an integer n and returns 1 if \n    the digit sequence for n is a uckiyak sequence and 0 otherwise.\n    Assume the input is always valid.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply(12, 12) == 144, \"failed unit test 1\"\nassert     multiply(12, 13) == 288, \"failed unit test 2\"\nassert     multiply(12, 14) == 480, \"failed unit test 3\"\nassert     multiply(12, 15) == 720, \"failed unit test 4\"\nassert     multiply(12, 16) == 1040, \"failed unit test 5\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(multiply(1001, 9991))\nprint(multiply(1111, 9991))\nprint(multiply(1111, 9991))"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"testing function: \", multiply(2,4))\n\n\n\n\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply(1111, 11) == 1111\nassert multiply(1111, 1111) == 11111\nassert multiply(1111, 11111) == 111111\nassert multiply(1111, 1111111) == 111111111\nassert multiply(1111, 11111111) == 111111111111\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply(5783, 7678) == 7678\nassert     multiply(1234, 3) == 1234\nassert     multiply(1424, 17) == 1724\n\n\n\ndef format_time(t):\n    \"\"\"Take a time in seconds and return it as a string of the \n    form 'HH:MM:SS'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply(2, 2) == 8, 'Wrong result for multiply(2, 2)'\nassert     multiply(31, 25) == 1025, 'Wrong result for multiply(31, 25)'\nassert     multiply(32, 25) == 1025, 'Wrong result for multiply(32, 25)'\n\n\n\ndef reverse(s):\n    \"\"\"Complete the function that takes a string and returns its\n    reverse.\n    Assume the input is always valid.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(multiply(12, 34))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_upper(\"leetcode\") == 5\nassert     count_upper(\"hacker\") == 4\nassert     count_upper(\"aA\") == 2\nassert     count_upper(\"aa\") == 2\nassert     count_upper(\"i\") == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ns = \"bb\"\n\nprint(\"{} = {}\".format(s, count_upper(s)))\n\nassert count_upper(s) == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"check the correctness of count_upper\")\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_upper('aba') == 0\nassert     count_upper('mqm') == 1\nassert     count_upper('aba') == 0\nassert     count_upper('zmqr') == 2\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_upper('zzz') == 0, \"Example 1\"\nassert     count_upper('MMM') == 3, \"Example 2\"\nassert     count_upper('aaaa') == 2, \"Example 3\"\nassert     count_upper('ABC') == 0, \"Example 4\"\nassert     count_upper('HELLO') == 4, \"Example 5\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_upper(\"\") == 0, \"Empty String\"\nassert     count_upper(\"A\") == 0, \"One Upper\"\nassert     count_upper(\"ABCDEF\") == 1, \"One Upper\"\nassert     count_upper(\"ABCDEFG\") == 2, \"Two Upper\"\nassert     count_upper(\"AaBCD\") == 0, \"No Upper\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_upper(\"a\") == 0, \"First test case failed\"\nassert     count_upper(\"e\") == 1, \"Second test case failed\"\nassert     count_upper(\"E\") == 1, \"Third test case failed\"\nassert     count_upper(\"H\") == 0, \"Fourth test case failed\"\nassert     count_upper(\"HELLO\") == 2, \"Fifth test case failed\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_upper('Good') == 0\nassert count_upper('AAbbb') == 3\nassert count_upper('ABBab') == 2\nassert count_upper('ZZZZZZ') == 9\nassert count_upper('UPPER') == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_upper('aAbE') == 2\nassert     count_upper('ae') == 2\nassert     count_upper('abE') == 2\nassert     count_upper('ab') == 1\nassert     count_upper('abcd') == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nclosest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"14.4\") == 14\nassert closest_integer(\"-14.4\") == -14\nassert closest_integer(\"14.000001\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nclosest_integer(\"14.5\") == 15\nclosest_integer(\"-14.5\") == -15\nclosest_integer(\"14.6\") == 15\nclosest_integer(\"-14.6\") == -15\nclosest_integer(\"14.7\") == 15\nclosest_integer(\"-14.7\") == -15\nclosest_integer(\"14.8\") == 15\nclosest_integer(\"-14.8\") == -15\nclosest_integer(\"14.9\") == 15\nclosest_integer(\"-14.9\") == -15\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_integer(\"14.5\") == 15, \"incorrect answer\"\nassert     closest_integer(\"-14.5\") == -15, \"incorrect answer\"\nassert     closest_integer(\"14\") == 15, \"incorrect answer\"\nassert     closest_integer(\"-14\") == -15, \"incorrect answer\"\nassert     closest_integer(\"14.1\") == 15, \"incorrect answer\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(closest_integer(\"4.2\"))\nprint(closest_integer(\"-4.2\"))\nprint(closest_integer(\"4.6\"))\nprint(closest_integer(\"-4.6\"))\nprint(closest_integer(\"2.4\"))\nprint(closest_integer(\"-2.4\"))\nprint(closest_integer(\"2.6\"))\nprint(closest_integer(\"-2.6\"))\nprint(closest_integer(\"2.5\"))\nprint(closest_integer(\"-2.5\"))\nprint(closest_integer(\"2.5\"))\nprint(closest_integer(\"-2.5\"))\nprint(closest_integer(\"2.6\"))\nprint(closest_integer(\"-2.6\"))\nprint(closest_integer(\"4.3\"))\nprint(closest_integer(\"-4.3\"))\nprint(closest_integer(\"5.1\"))\nprint(closest_integer(\"-5.1\"))\nprint(closest_integer(\"4.9\"))\nprint(closest_integer(\"-4.9\"))\nprint(closest_integer(\"4.8\"))\nprint(closest_integer(\"-4.8\"))\nprint(closest_integer(\"4.8\"))\nprint(closest_integer(\"-4.8\"))\nprint(closest_integer(\"4.7\"))\nprint(closest_integer(\"-4.7\"))\nprint(closest_integer(\"4.6\"))\nprint(closest_integer(\"-4.6\"))\nprint(closest_integer(\"4.3\"))\nprint(closest_integer(\"-4.3\"))\nprint(closest_integer(\"4.6\"))\nprint(closest_integer(\"-4.6\"))\nprint(closest_integer(\"3.9\"))\nprint(closest_integer(\"-3.9\"))\nprint(closest_integer(\"3.8\"))\nprint(closest_integer(\"-3.8\"))\nprint(closest_integer(\"3.7\"))\nprint(closest_integer(\"-3.7\"))\nprint(closest_integer(\"3.6\"))\nprint(closest_integer(\"-3.6\"))\nprint(closest_integer(\"3.4\"))\nprint(closest_integer(\"-3.4\"))\nprint(closest_integer(\"3.3\"))\nprint(closest_integer(\"-3.3\"))\nprint(closest_integer(\"3.2\"))\nprint(closest_integer(\"-3.2\"))\nprint(closest_integer(\"3.1\"))\nprint(closest_integer(\"-3.1\"))\nprint(closest_integer(\"3.0\"))\nprint(closest_integer(\"-3.0\"))\nprint(closest_integer(\"3\"))\nprint(closest_integer(\"-3\"))\nprint(closest_integer(\"3.9\"))\nprint(closest_integer(\"-3.9\"))\nprint(closest_integer(\"3.8\"))\nprint(closest_integer(\"-3.8\"))\nprint(closest_integer(\"3.7\"))\nprint(closest_integer(\"-3.7\"))\nprint(closest_integer(\"3.6\"))\nprint(closest_integer(\"-3.6\"))\nprint(closest_integer(\"3.3\"))\nprint(closest_integer(\"-3.3\"))\nprint(closest_integer(\"3.2\"))\nprint(closest_integer(\"-3.2\"))\nprint(closest_integer(\"3.1\"))\nprint(closest_integer(\"-3.1\"))\nprint(closest_integer(\"3.0\"))\nprint(closest_integer(\"-3.0\"))\nprint(closest_integer(\"3\"))\nprint(closest_integer(\"-3\"))\nprint(closest_integer(\"3.9\"))\nprint(closest_integer(\"-3.9\"))\nprint(closest_integer(\"3.8\"))\nprint(closest_integer(\"-3.8\"))\nprint(closest_integer(\"3.7\"))\nprint(closest_integer(\"-3.7\"))\nprint(clo"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n    Explanation:\n    The approach used is to use a dictionary to store the difference between\n    the input value and each of the two integers that the function has generated\n    as a result.\n    The function returns the key of the dictionary that has the minimal difference\n    from the value of the input number.\n    '''\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # define the dictionary and set the default value to 0\n    dict = {}\n    dict[0] = 0\n\n    # use a for loop to generate the integer as the value of the key in the dictionary\n    # also use a dictionary to store the difference between the input value and each of\n    # the two integers that the function has generated as a result\n    # also use a while loop to go through the dictionary and check if the difference\n    # between the value and the key is greater than 0\n    # then return the key value that corresponds to the maximum difference\n    for i in range(10):\n        dict[i+1] = abs(i - int(value))\n        while dict[i+1] > 0:\n            dict[i+1] = abs(i - int(value))\n    return i+1\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_integer(\"14.5\")     == 15\nassert     closest_integer(\"0\")     == 0\nassert     closest_integer(\"-0.7\")     == -1\nassert     closest_integer(\"1.7\")     == 1\nassert     closest_integer(\"0.3\")     == 0\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"2.7\") == 2\nassert closest_integer(\"-2.7\") == -2\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\nassert     make_a_pile(5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_a_pile(5) == [5, 3, 1, 2, 1], \"Wrong!\"\nassert     make_a_pile(6) == [5, 4, 3, 2, 2, 1], \"Wrong!\"\nassert     make_a_pile(7) == [5, 6, 6, 5, 6, 4], \"Wrong!\"\nassert     make_a_pile(8) == [5, 7, 7, 5, 7, 6], \"Wrong!\"\nassert     make_a_pile(9) == [5, 8, 8, 5, 8, 7], \"Wrong!\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [3]\nassert     make_a_pile(4) == [2,4]\nassert     make_a_pile(5) == [5]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert make_a_pile(5) == [5]\nassert make_a_pile(6) == [6, 4]\nassert make_a_pile(10) == [10, 8, 6, 4, 2, 1]"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_a_pile(0) == [1]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     make_a_pile(3) == [3, 1, 1]\nassert     make_a_pile(4) == [4, 2, 1]\nassert     make_a_pile(5) == [5, 3, 2]\nassert     make_a_pile(6) == [6, 4, 3]\nassert     make_a_pile(7) == [7, 5, 4]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(3) == [3]\nassert     make_a_pile(6) == [4,1,1]\nassert     make_a_pile(10) == [9,3,1]\nassert     make_a_pile(16) == [15,7,1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [2]\nassert     make_a_pile(4) == [4]\nassert     make_a_pile(5) == [2, 2]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     words_string(\"the,world,hello,\") == [\"the\", \"world\", \"hello\"]\nassert     words_string(\"hello,world,\") == [\"hello\", \"world\"]\nassert     words_string(\"he,llo,world\") == [\"he\", \"llo\", \"world\"]\nassert     words_string(\"hello\") == [\"hello\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_string('a,b,c') == ['a', 'b', 'c']\nassert     words_string('a,   b,  c,  ') == ['a', 'b', 'c']\nassert     words_string('hi, my, name, is,') == ['hi','my', 'name', 'is']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nwords_string(',, abc, def') == ['abc', 'def'], 'Test Failed'\nassert \nwords_string(',, abc, def,ghi') == ['abc', 'def', 'ghi'], 'Test Failed'\nassert \nwords_string(',, abc, def,ghi,jkl') == ['abc', 'def', 'ghi', 'jkl'], 'Test Failed'\nassert \nwords_string(',, abc, def,ghi,jkl,,k') == ['abc', 'def', 'ghi', 'jkl', 'k'], 'Test Failed'\nassert \nwords_string(',,, abc, def,ghi,jkl,k') == ['abc', 'def', 'ghi', 'jkl', 'k'], 'Test Failed'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert words_string('hi, hello, I am not sure I am doing my homework') == ['hi', 'hello', 'I', 'am', 'not','sure', 'I', 'am', 'doing','my', 'homework']\nassert words_string('hi, hello, hi') == ['hi', 'hello', 'hi']\nassert words_string('hello, I am, doing my homework, I am a student') == ['hello', 'I', 'am', 'doing','my', 'homework', 'I', 'am', 'a','student']\nassert words_string('hi, hello, I am not sure I am doing my homework, I am a student') == ['hi', 'hello', 'I', 'am', 'not','sure', 'I', 'am', 'doing','my', 'homework', 'I', 'am', 'a','student'"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_string('') == []\nassert words_string('foo') == ['foo']\nassert words_string('foo, bar') == ['foo', 'bar']\nassert words_string('foo, bar, baz') == ['foo', 'bar', 'baz']\nassert words_string('foo,bar,baz') == ['foo', 'bar', 'baz']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_string('cat, dog, fish') == ['cat', 'dog', 'fish']\nassert     words_string('dog, cat, fish') == ['dog', 'cat', 'fish']\nassert     words_string('fish, cat, dog') == ['fish', 'cat', 'dog']\nassert     words_string('hi') == ['hi']\nassert words_string('a, b, c') == ['a', 'b', 'c']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_string(\"hello, world\") == [\"hello\", \"world\"], \"First example\"\nassert     words_string(\"hello, world, this, is, testing\") == [\"hello\", \"world\", \"this\", \"is\", \"testing\"], \"Second example\"\nassert     words_string(\"something\") == [\"something\"], \"Third example\"\nassert     words_string(\"is is is\") == [\"is\", \"is\", \"is\"], \"Fourth example\"\nassert     words_string(\"hello, world, and welcome, to, my, world\") == [\"hello\", \"world\", \"and\", \"welcome\", \"to\", \"my\", \"world\"], \"Fifth example\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     words_string(\"this, is, a, test\") ==     [\"this\", \"is\", \"a\", \"test\"]\nassert     words_string(\"should, be, your, test\") ==    [\"should\", \"be\", \"your\", \"test\"]\nassert     words_string(\"your, test, for, is\") ==    [\"your\", \"test\", \"for\", \"is\"]\nassert     words_string(\"  \") ==    [\"\"]\nassert     words_string(\"i\") ==    [\"i\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef words_list(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return a list of the words.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest odd integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     choose_num(4, 5) == 5\nassert     choose_num(4, 6) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     choose_num(2,3) == 2\nassert    choose_num(5,10) == 5\nassert    choose_num(15,16) == -1\nassert    choose_num(0,1) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     choose_num(1, 100) == 2\nassert     choose_num(3, 100) == 5\nassert     choose_num(6, 100) == -1\nassert     choose_num(4, 100) == -1\nassert     choose_num(10, 100) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     choose_num(2, 11) == 11\nassert     choose_num(10, 50) == -1\nassert     choose_num(100, 101) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nrounded_avg(1, 2) == 1.5\nrounded_avg(3, 4) == 3.0\nrounded_avg(5, 7) == 4.0\nrounded_avg(3, 8) == -1.0\nrounded_avg(1, 1) == 1.0\n\ndef round_up(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to return\n    the maximum integer from n through m (including n and m). If n is greater than m,\n    return -1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(rounded_avg(5, 10))\n\nprint(rounded_avg(5, 7))\n\nprint(rounded_avg(10, 100)"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rounded_avg(1, 1) == 1\nassert    rounded_avg(10, 10) == 10\nassert rounded_avg(10, 11) == -1\nassert rounded_avg(1, 2) == -1\nassert rounded_avg(-1, 2) == -1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\"\"\"\n\nThe problem can be also solved using the below approach:\n\n1. To get the average, calculate the average and round the average to the nearest integer\n2. The rounded average will always be an integer\n\n\"\"\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nrounded_avg(1, 10) == 5\nrounded_avg(0, 10) == 0\nrounded_avg(11, 20) == 14\nrounded_avg(-100, 100) == 50\nrounded_avg(1, 2) == -1"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrounded_avg(3, 5) == 2\nassert rounded_avg(1, 3) == 1\nassert rounded_avg(4, 5) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert rounded_avg(1, 3) == 1\nassert rounded_avg(1, 4) == 1\nassert rounded_avg(1, 5) == 1\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_digits([10, 1, 1, 9]) == [1, 9]\nassert     unique_digits([1, 1, 9, 1]) == [1, 9]\nassert     unique_digits([1, 9, 1]) == [1, 9]\nassert     unique_digits([1, 9]) == [1, 9]\nassert     unique_digits([1]) == [1]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9,9]) == [1,2,3,4,5,6,7,8,9]\nassert unique_digits([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]\nassert unique_digits([1,2,3,4,5,6,7,8,9,10,10]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Unique Digits\")\n    test_cases = [[1,2,3,4,5], [1,2,3,4,5,6], [1,2,3,4,5,6,7]]\n    for test_case in test_cases:\n        assert unique_digits(test_case) == test_cas"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(unique_digits([2,2,3,4,4]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert unique_digits([12,23,1,24,1,25]) == [1,2,3,4,5,6]\n    "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_sorted(x):\n    \"\"\"Given a list of integers x. return True if x is sorted in \n    non-decreasing order. Else return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_digits([10, 2, 4, 5, 9, 3, 2, 4, 7, 1, 9]) ==     [10, 2, 4, 5, 7, 9]\nassert     unique_digits([10, 10, 5, 5, 9, 3, 2, 4, 7, 1, 9]) ==     [10, 5, 7, 9]\nassert     unique_digits([10, 2, 4, 5, 9, 3, 2, 4, 7, 1, 9]) ==     [10, 2, 3, 4, 5, 7, 9]\nassert     unique_digits([10, 2, 4, 5, 9, 3, 2, 4, 7, 1, 9]) ==     [10, 2, 3, 4, 5, 7, 9]\nassert     unique_digits([10, 2, 4, 5, 9, 3, 2, 4, 7, 1, 9]) ==     [10, 2, 3, 4, 5, 7, 9]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert     unique_digits([2, 3, 4, 5, 6]) == [2, 4, 6]\nassert     unique_digits([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7, 8]\nassert     unique_digits([3, 4, 5, 6, 7, 8, 9, 1]) == [3, 7, 9]\nassert     unique_digits([3, 4, 5, 6, 7, 8, 9, 9]) == [3, 7, 8, 9]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not unique_digits([1,2,3])\nassert not unique_digits([1,2,3,4,3])\nassert unique_digits([1,2,3,4,3,2])\nassert unique_digits([1,2,3,4,3,2,5])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    by_length([1, 8, 7, 6, 5, 3, 4, 2, 9]) == ['Two', 'Seven', 'One', 'Six', 'Three', 'Four', 'Five', 'Eight', 'Nine']\n    by_length([1, 8, 7, 6, 5, 3, 4, 2, 9, 0]) == ['One', 'Five', 'Two', 'Three', 'Four', 'Seven', 'Six', 'Eight', 'Nine', 'Zero']\n    by_length([1, 8, 7, 6, 5, 3, 4, 2, 9, 0, 1]) == ['One', 'Five', 'Two', 'Three', 'Four', 'Seven', 'Six', 'Eight', 'Nine', 'Zero', 'One']\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef by_length_modified(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    Modified the original array by swapping the sorted digits in the array with\n    the reverse of the digits in the array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef by_length2(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n\n\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9])) == \"One Two Three Four Five Six Seven Eight Nine\"\nassert \nprint(by_length([9, 8, 7, 6, 5, 4, 3, 2, 1])) == \"Nine Eight Seven Six Five Four Three Two One\"\nassert \nprint(by_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1])) == \"One Two Three Four Five Six Seven Eight Nine Zero One\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     f(2) == [1,1]\nassert     f(4) == [1,2,4,6]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     f(5) ==     [1,2,6,24,120]\nassert     f(20) ==    [1,2,3,4,5,6,7,8,9,10,12,15,20,24,30,40,45,60,72,84,120,\n                     144,720,1296,5040,40320,362880,3628800,39916800,479001600,6227020800]"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_odd_palindrome(6) == (0, 2)\neven_odd_palindrome(10) == (2, 2)\neven_odd_palindrome(3) == (0, 1)\neven_odd_palindrome(1) == (1, 0)\neven_odd_palindrome(5) == (0, 3)"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_odd_palindrome(5) == (2, 1)\neven_odd_palindrome(6) == (1, 3)\neven_odd_palindrome(10) == (2, 3)\neven_odd_palindrome(11) == (0, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_odd_palindrome(10) == (4, 6)"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_odd_palindrome(1) == (1, 0), \"Fail\"\nassert     even_odd_palindrome(2) == (1, 0), \"Fail\"\nassert     even_odd_palindrome(3) == (0, 1), \"Fail\"\nassert     even_odd_palindrome(4) == (1, 1), \"Fail\"\nassert     even_odd_palindrome(5) == (0, 2), \"Fail\"\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_odd_palindrome(4) == (0, 2)\nassert \neven_odd_palindrome(5) == (0, 2)\nassert \neven_odd_palindrome(7) == (0, 1)\nassert \neven_odd_palindrome(10) == (0, 3)"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(4) == (2, 2)\nassert even_odd_palindrome(6) == (3, 1)\nassert even_odd_palindrome(3) == (2, 2)\nassert even_odd_palindrome(12) == (5, 1)\nassert even_odd_palindrome(1289) == (24, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(1) == (0, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (0, 1)\nassert     even_odd_palindrome(4) == (0, 2)\nassert     even_odd_palindrome(5) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_palindrome(1) == (0,0)\nassert     even_odd_palindrome(2) == (0,0)\nassert     even_odd_palindrome(3) == (0,0)\nassert     even_odd_palindrome(4) == (0,0)\nassert     even_odd_palindrome(5) == (1,0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_nums([-12, -1, -123, -1230, -12345]) == 1\nassert count_nums([12, 1, -123, 1230, -12345]) == 5\nassert count_nums([0, 0, 0, 0, 0]) == 0\nassert count_nums([0, -12345, -1230, -123, 12345, 1230, 12]) == 5\nassert count_nums([-12345, -1230, -12, 123, 12345, 1230, 12]) == 4\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_nums([1,-1,2,3,4,-3,2,0,-1]) == 3\nassert     count_nums([1,-1,2,3,4,-3,-2,-1,0,3,4,5,6,7,8,9,10]) == 2\nassert count_nums([1,2,3,4,5,6,7,8,9,10]) == 0\nassert count_nums([1,2,3,4,5,6,7,8,9,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 8\nassert count_nums([0,1,2,3,4,5,6,7,8,9,10]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_count_nums():\n    assert count_nums([-1, 2, -3, -4, 5, -6, 7]) == 6\n    assert count_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n    assert count_nums([-1, 2, -3, -4, 5, -6, 7]) == 4\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_nums([-1, 1, 1]) == 0\nassert count_nums([-1, -1, 1]) == 1\nassert count_nums([-1, 1, -1]) == 1\nassert count_nums([1, 1, 1]) == 3\nassert count_nums([1, -1, -1]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_nums([ 1, -2, 2, -1, -1, 1, 1, -2, -2, 1, -1 ]) == 1\nassert count_nums([ 1, -2, 2, -1, -1, 1, 1, -2, -2, 1, -1 ]) == 2\nassert count_nums([ 1, -2, 2, -1, -1, 1, 1, -2, -2, 1, -1 ]) == 2\nassert count_nums([ 1, -2, 2, -1, -1, 1, 1, -2, -2, 1, -1 ]) == 0\nassert count_nums([ 1, -2, 2, -1, -1, 1, 1, -2, -2, 1, -1 ]) == 0\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_nums([123, 4, -5, 1, -2]) == 2\nassert     count_nums([-123, 4, -5, 1, -2]) == 1\nassert     count_nums([-123, 4, -5, 1, 2, -3]) == 2\nassert     count_nums([123, 4, -5, 1, -2]) == 2\nassert     count_nums([123, 4, -5, 1, 2, -3]) == 2\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([-1]) == 1\nassert     count_nums([-1, -2]) == 2\nassert     count_nums([-1, -2, -3]) == 3\nassert     count_nums([-1, -2, 3]) == 3\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_one_ball([]) == True\nassert     move_one_ball([0]) == True\nassert     move_one_ball([0,1]) == True\nassert     move_one_ball([0,1,2]) == True\nassert     move_one_ball([2,1,0]) == True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_one_ball([1,2,3]) == True\nassert     move_one_ball([2,2,1]) == False\nassert     move_one_ball([]) == True\n\nif __name__ == \"__main__\":\n    \n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n\n    result = move_one_ball(arr1)\n    print(result)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_one_ball([3,4,2,3,1]) == False, \\\n        \"Test case 1 failed\"\nassert move_one_ball([]) == True, \\\n        \"Test case 2 failed\"\nassert move_one_ball([3,4,2,3,1,5,3,4,2]) == True, \\\n        \"Test case 3 failed\"\nassert move_one_ball([3,4,2,3,1,5,3,4,2]) == False, \\\n        \"Test case 4 failed\"\nassert move_one_ball([3,4,2,3,1,5,3,4,2,3,1]) == False, \\\n        \"Test case 5 failed\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\ndef move_one_ball_2(arr):\n    \"\"\"\n    An alternative approach is to use the insertion sort algorithm\n    for sorting. In this approach, we sort all the elements and then\n    insert each element in its correct position in the array.\n\n    This method will be more efficient if the array is already sorted, so\n    to avoid unnecessary sorting, we check for that. \n    \"\"\"\n    n = len(arr)\n    for i in range(1, n):\n        j = i - 1\n        while j >= 0 and arr[j] > arr[j+1]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            j = j - 1\n\n    return True\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert move_one_ball([4, 1, 1]) == True\n    assert move_one_ball([1, 1, 4]) == False\n    assert move_one_ball([1, 4, 1]) == Tru"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print('-'*30)\n    move_one_ball([])\n    move_one_ball([10, 5])\n    move_one_ball([1, 3, 4, 2, 4, 4])\n    move_one_ball([1, 2, 4, 5])\n    move_one_ball([1, 3, 2, 4])\n    move_one_ball([1, 2, 3, 4, 5])\n    move_one_ball([1, 2, 3, 4, 5])\n    move_one_ball([1, 2, 3, 4, 5])\n    move_one_ball([1, 2, 3, 4, 5])\n    move_one_ball([1, 2, 3, 4, 5])\n    print('-'*30"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test 1\n    arr = [10,20,30]\n    print(move_one_ball(arr))\n    # Expected output: True\n\n    # Test 2\n    arr = [0,1,2]\n    print(move_one_ball(arr))\n    # Expected output: True\n    \n    # Test 3\n    arr = []\n    print(move_one_ball(arr))\n    # Expected output: True\n\n    # Test 4\n    arr = [1,2,3]\n    print(move_one_ball(arr))\n    # Expected output: False\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 3, 4, 5, 6], [4, 5, 2, 3, 6, 1]) == 'YES'\nassert     exchange([1, 2, 3, 4, 5, 6], [4, 5, 6, 3, 2, 1]) == 'NO'"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     exchange(['20', '15', '17', '20'], ['20', '15', '17', '20']) == \"YES\", \"Test 1\"\nassert     exchange(['15', '17', '15', '20'], ['20', '15', '17', '20']) == \"YES\", \"Test 2\"\nassert     exchange(['20', '20', '17', '15'], ['20', '20', '17', '15']) == \"YES\", \"Test 3\"\nassert     exchange(['20', '20', '20', '20'], ['20', '20', '20', '20']) == \"NO\", \"Test 4\"\nassert     exchange(['15', '15', '20', '20'], ['20', '15', '20', '20']) == \"NO\", \"Test 5\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]) == \"YES\"\nassert     exchange([1, 2, 3], [2, 4, 5]) == \"NO\"\nassert     exchange([1], [1, 3]) == \"NO\"\nassert     exchange([], [1, 3]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [1, 2, 3, 4]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     exchange(lst1=[3, 4, 9, 2, 6, 1], lst2=[4, 8, 7, 1, 8, 1]) == \"NO\"\nassert     exchange(lst1=[3, 4, 9, 2, 6, 1], lst2=[1, 8, 7, 1, 8, 1]) == \"YES\"\nassert     exchange(lst1=[1, 2, 3, 4], lst2=[4, 2, 3, 1]) == \"YES\"\nassert     exchange(lst1=[5, 5, 2, 1, 1, 2, 4], lst2=[1, 2, 3, 4, 5, 6]) == \"NO\"\n\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     exchange([1,2,3,4], [1,2,3,4]) == \"YES\"\nassert     exchange([1,2,3,4,5], [1,2,3,4,5]) == \"NO\"\nassert     exchange([1,2,3,4], [4,5,6,7,8]) == \"YES\"\nassert     exchange([1,2,3,4], [5,6,7,8,9]) == \"NO\"\nassert     exchange([1,2,3], [1,3,2]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     exchange([1,2,3,4,5],    [2,4,6,8,10]) == \"NO\", \"Fail on exchange([1,2,3,4,5],    [2,4,6,8,10])\"\nassert     exchange([1,2,3,4,5],    [2,4,6,8,10]) == \"YES\", \"Fail on exchange([1,2,3,4,5],    [2,4,6,8,10])\"\nassert     exchange([1,2,3,4,5],    [1,3,5]) == \"NO\", \"Fail on exchange([1,2,3,4,5],    [1,3,5])\"\nassert     exchange([1,2,3,4,5],    [1,3,5]) == \"YES\", \"Fail on exchange([1,2,3,4,5],    [1,3,5])\"\nassert     exchange([1,2,3,4,5],    [1,3,5]) == \"YES\", \"Fail on exchange([1,2,3,4,5],    [1,3,5])\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     exchange([2, 4, 6, 8], [6, 4, 2, 8]) == 'NO'\nassert     exchange([2, 4, 6, 8], [6, 4, 8, 2]) == 'YES'\nassert     exchange([2, 4, 6, 8], [6, 8, 4, 2]) == 'YES'\nassert     exchange([2, 4, 6, 8], [2, 8, 4, 6]) == 'YES'"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     exchange(lst1=[3,2,1], lst2=[1,2,3]) == \"NO\"\nassert     exchange(lst1=[3,2,1], lst2=[1,3,2]) == \"YES\""
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         exchange([3, 5, 7, 9],     [4, 6, 8, 10]) == 'NO'\nassert         exchange([3, 5, 7, 9],     [4, 6, 8, 10]) == 'NO'\nassert         exchange([3, 5, 7, 9],     [4, 6, 8, 10]) == 'NO'\nassert         exchange([3, 5, 7, 9],     [4, 6, 8, 10]) == 'YES'\nassert         exchange([3, 5, 7, 9],     [4, 6, 8, 10]) == 'YES'\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram(\"thequickbrownfoxjumpsoverthelazydog\") == {\"t\":4, \"h\":3, \"i\":2, \"o\":3, \"l\":2, \"u\":1, \"b\":2, \"r\":2, \"j\":2, \"f\":1, \"p\":1, \"s\":2, \"w\":1, \"d\":1, \"g\":1, \"c\":1}\n\nassert     histogram(\"Hello world!\") == {\"H\":1, \"e\":1, \"l\":2, \"o\":2, \"W\":1, \"r\":1, \"d\":1, \"l\":1, \"d\":1, \"!\",1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     histogram(\"abacababacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabaca"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         (histogram('hello') == {'h': 1, 'e': 2, 'l': 3, 'o': 3})\nassert         (histogram('bye') == {'b': 1, 'e': 1, 'y': 1, 'd': 1})\nassert         (histogram('abc') == {'a': 3, 'b': 1, 'c': 1})\nassert         (histogram('') == {})\nassert         (histogram('aabbc') == {'a': 3, 'b': 2, 'c': 1})"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     histogram('programming') == {'a': 2, 'p': 1, 'r': 1,'m': 1, 'o': 1, 'g': 1, 'c': 1, 'd': 1}\nassert     histogram('the quick brown fox') == {'a': 2, 'p': 2, 'r': 3,'m': 1, 'o': 2, 'b': 1, 'f': 1, 'u': 1, 'x': 1, 'w': 1, 'c': 1, 'd': 1, 'q': 1, 'h': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     histogram(\"The quick brown fox jumps over the lazy dog\") ==     {'t': 4, 'h': 2, 'q': 1, 'l': 2, 'b': 3, 'o': 2, 'j': 1, 'x': 1, 'f': 1, 'u': 1, 'i': 2, 'w': 1, 'c': 1, 'n': 1, 'g': 1, 'r': 1,'m': 1, 'd': 1, 'y': 1, 'w': 1, 'p': 1, 'v': 1, 'b': 3, 'l': 2, 'a': 1,'s': 1, 'j': 1, 'k': 1, 'q': 1,'s': 1, 'f': 1, 'd': 1, 'g': 1, 'y': 1, 'u': 1, 'e': 1,'m': 1, 'q': 1,'s': 1, 'o': 1, 'e': 1, 'c': 1, 'o': 1, 'n': 1, 'g': 1, 'i': 2, 't': 4, 'k': 1, 'e': 1,'s': 1,'s': 1, 'v': 1, 'c': 1,'m': 1, 'a': 1, 'w': 1, 'i': 2, 'n': 1, 'k': 1, 'e': 1, 'c': 1, 'u': 1,'m': 1, 'a': 1, 'p': 1, 'l': 2, 'o': 1, 'w': 1, 'c': 1, 'k': 1, 'a': 1, 'w': 1,'m': 1, 't': 4, 'h': 2, 'q': 1,'s': 1, 'g': 1, 'j': 1, 'p': 1, 'u': 1, 'b': 3, 't': 4,'m': 1, 'n': 1, 'y': 1, 'f': 1,'s': 1,'m': 1, 'q': 1, 'n': 1, 'd': 1, 'g': 1, 't': 4, 'e': 1, 'f': 1, 'q': 1, 'e': 1, 'a': 1, 'o': 1, 'i': 2, 'h': 2, 'n': 1, 'd': 1,'m': 1, 'y': 1, 'e': 1, 'r': 1, 'f': 1, 'o': 1, 'a': 1, 'b': 3, 'u': 1, 'l': 2, 'r': 1, 'o': 1, 'l': 2, 'i': 2, 'w': 1, 'e': 1, 'h': 2, 'q': 1, 'g': 1,'s': 1,'m': 1, 'f': 1, 'u': 1,'s': 1, 'd': 1, 'k': 1, 'n': 1, 'u': 1, 'a': 1, 'p': 1, 'o': 1, 'w': 1, 'd': 1,'s': 1, 'l': 2, 'q': 1, 'i': 2, 'u': 1, 'l': 2, 'c': 1, 'n': 1, 'o': 1, 'f': 1, 'e': 1, 'n': 1, 'y': 1, 'q': 1, 'd': 1, 'l': 2, 'd': 1, 'p': 1, 'l': 2, 'e': 1, 'i': 2,'m': 1, 'h': 2, 'i': 2, 'k': 1, 'w': 1, 'o': 1, 'n': 1, 'g': 1, 'r': 1, 'i': 2, 't': 4, 'f': 1, 'p': 1, 'c': 1, 'y': 1, 'e': 1, 'r': 1,'s': 1, 't': 4, 'd': 1, 'r': 1, 'f': 1, 'a': 1, 'c': 1,'m': 1, 'h': 2, 'u': 1, 'o': 1, 'n': 1, 'g': 1, 't': 4, 'h': 2, 'n': 1, 'k': 1, 'g': 1,'m': 1, 'n': 1, 'b': 3, 'k': 1, 'p': 1, 'u': 1, 'g': 1, 'a': 1, "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     histogram(\"hello world\") == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 2, \"w\": 1}\nassert     histogram(\"hello world\") == {\"e\": 2, \"h\": 1, \"l\": 1, \"o\": 2, \"w\": 1}\nassert     histogram(\"hello world\") == {\"h\": 1, \"e\": 2, \"l\": 1, \"o\": 2, \"w\": 1}\nassert     histogram(\"hello world\") == {\"h\": 1, \"e\": 2, \"l\": 1, \"o\": 2, \"w\": 1}\nassert     histogram(\"hello world\") == {\"h\": 2, \"e\": 2, \"l\": 1, \"o\": 2, \"w\": 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     histogram('abxaba') == {'a': 2, 'b': 2, 'x': 1}\nassert    histogram('abbbabbbbb') == {'a': 3, 'b': 2}\nassert    histogram('abbbbbab') == {'a': 2, 'b': 2}\nassert    histogram('abccb') == {'a': 2, 'b': 1, 'c': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         histogram(\"oob\") == {\"o\": 1, \"b\": 1, \"o\": 1}\nassert         histogram(\"abcab\") == {\"a\": 2, \"b\": 2, \"c\": 1}\nassert         histogram(\"aabbb\") == {\"a\": 3, \"b\": 2}\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ns = \"tohs\"\nc = \"hs\"\nassert reverse_delete(s,c) == (\"htos\", True)\n\ns = \"tohs\"\nc = \"th\"\nassert reverse_delete(s,c) == (\"ths\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_delete(\"abcd\", \"ac\") == ('acd', True)\nassert     reverse_delete(\"abcd\", \"bc\") == ('dcb', True)\nassert     reverse_delete(\"abcd\", \"cb\") == ('cda', False)\nassert     reverse_delete(\"abcd\", \"cda\") == ('abcd', False)\nassert     reverse_delete(\"abcd\", \"a\") == ('abcd', False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert isinstance(reverse_delete(\"waterbottle\",\"erbottlewat\"),tuple) == \nassert isinstance(reverse_delete(\"waterbottle\",\"bottlewater\"),tuple) == \nassert isinstance(reverse_delete(\"waterbottle\",\"erbottlewat\"),tuple) == \nassert reverse_delete(\"waterbottle\",\"erbottlewat\") == (\"erbottlewat\",True) == \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"adwllrph\",\"lw\") == (\"adwllrpl\",\"True\"), \"Incorrect\"\nassert     reverse_delete(\"codey\",\"o\") == (\"ycode\",\"True\"), \"Incorrect\"\nassert     reverse_delete(\"abc\",\"d\") == (\"abcd\",\"True\"), \"Incorrect\"\nassert     reverse_delete(\"\",\"\") == (\"\",\"True\"), \"Incorrect\"\nassert     reverse_delete(\"\",\"\") == (\"\",\"True\"), \"Incorrect\""
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_delete(\"abcdef\",\"ecba\") == (\"ecba\", True)\nassert     reverse_delete(\"abcdef\", \"cbba\") == (\"cba\", True)\nassert     reverse_delete(\"abcdef\", \"bcba\") == (\"bcba\", True)\nassert     reverse_delete(\"abcdef\", \"baec\") == (\"baec\", False)\nassert     reverse_delete(\"abcdef\", \"c\") == (\"ac\", False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_delete('a','a') == ('',True)\nassert     reverse_delete('aa','a') == ('aa',True)\nassert     reverse_delete('ab','a') == ('ab',True)\nassert     reverse_delete('abc','a') == ('abc',True)\nassert     reverse_delete('abc','b') == ('abc',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_delete('aabcd', 'abcd')    ==     ('bcda', True)\nassert     reverse_delete('aabcd', 'cda')    ==     ('bcd', True)\nassert     reverse_delete('aabcd', 'd')    ==     ('aabcd', False)\nassert     reverse_delete('aabcd', 'b')    ==     ('', False)\nassert     reverse_delete('abc', 'abc')    ==     ('', True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert reverse_delete(\"abcdc\",\"c\") == (\"dcba\",True)\nassert reverse_delete(\"abcdc\",\"bc\") == (\"dcba\",True)\nassert reverse_delete(\"abcdc\",\"bc\") == (\"dcba\",False)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert _____, \"The function odd_count in wrong\"\n\nprint(\"You're all set!\")"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert odd_count([]) == [], 'Empty list should return empty list'\nassert odd_count(['2', '5', '3', '7']) == ['the number of odd elements in the string 2 of the input']\nassert odd_count(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == ['the number of odd elements in the string 1 of the input']\nassert odd_count(['', '2', '5', '3', '7']) == ['the number of odd elements in the string 2 of the input']\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_count([]) == []\nassert odd_count([\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"the number of odd elements in the string e of the input\"]\nassert odd_count([\"-6\",\"-5\",\"-4\",\"-3\",\"-2\"]) == [\"the number of odd elements in the string -4 of the input\"]\nassert odd_count([\"1\",\"-6\",\"5\",\"-3\",\"2\",\"7\",\"-1\"]) == [\"the number of odd elements in the string -1 of the input\"]\nassert odd_count([\"-6\",\"-5\",\"-4\",\"-3\",\"-2\",\"-1\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == [\"the number of odd elements in the string -1 of the input\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_count([\"01\", \"02\", \"01\"]) == [\"3\", \"0\", \"3\"]\nassert     odd_count([\"01\", \"02\", \"01\", \"03\"]) == [\"4\", \"0\", \"4\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert odd_count(['abcd', '1234', 'zzzz', '1234567']) == ['3', '4', '2', '1']\nassert odd_count(['abcd', '1234', 'zzzz', '123456789']) == ['3', '2', '2', '1']\nassert odd_count([]) == []\nassert odd_count(['2', '6', '4', '8']) == ['0', '2']"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert _____(), \"Your function does not work correctly!\""
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    odd_count([]) == []\nassert \n    odd_count(['a', 'b']) == ['1']\nassert \n    odd_count(['a', 'b', 'a']) == ['1', '1']\nassert \n    odd_count(['a', 'a', 'b']) == ['2', '1', '1']\n\n\ndef is_equal(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits,\n    return a list where each element is either True or False.\n    True if the length of the string equals 9,\n    false otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_count(lst):\n    \"\"\"Given a list of strings, where each string consists only digits, return a list.\n    Each element i of the output should be \"the number of even elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of even digits in the i'th string of the input.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nclass Solution:\n    def minSubArrayLen(self, target, nums):\n        \"\"\"\n        Using DP\n        Time: O(n)\n        Space: O(1)\n        \"\"\"\n        # initialize two variables, left and right\n        # left keeps track of the left pointer\n        # right keeps track of the right pointer\n        # when the right pointer reaches the end of the array, return 0\n        # after the left pointer reaches the end, the right pointer can be incremented to the left\n        left = 0\n        right = 0\n        # initialize the answer\n        answer = len(nums) + 1\n        # go through the array\n        while right < len(nums):\n            # if the current element is greater than or equal to the target, we can add it to the sum\n            if nums[right] >= target:\n                # increment the right pointer\n                right += 1\n            # if the sum is less than the target, we can move left\n            else:\n                # add the sum to the answer\n                answer = min(answer, right - left + 1)\n                # move the left pointer\n                left += 1\n        # if answer is still greater than len(nums) + 1, we can move right to the left\n        if answer == len(nums) + 1:\n            # increment the left pointer\n            left += 1\n        # return the answer\n        return answer\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minSubArraySum([1,2,1]) == 2\nassert     minSubArraySum([1,2,1,3,1,2]) == 2\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([3,4,-1,1,2]) == 4\nassert     minSubArraySum([-2,1,-3,4,-1,2,1]) == 2\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minSubArraySum([1,2]) == 1\nassert     minSubArraySum([1,2,3]) == 2\nassert     minSubArraySum([1,2,2]) == 2\nassert     minSubArraySum([]) == 0\nassert     minSubArraySum([1]) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef min_cost(c, T, num_wells):\n    \"\"\"\n    You are given an array c where each element is the price for a well. \n    Each well has a single bucket that can be used to extract water.\n    You are also given an array T that represents the time it takes to empty the wells. \n    The time it takes to empty the wells is the same for each well. \n    The truck can only transport 1 unit of water at a time.\n    Each well has a corresponding bucket that can be used to extract water.\n    You are also given an array num_wells that represents the number of wells in the grid.\n    Return the minimum number of steps that the truck needs to take to transport all of the wells.\n    If it is not possible to complete the task, return -1.\n\n    Constraints:\n        * 1 <= c[i], T[i] <= 10^4\n        * 1 <= num_wells <= 10^4\n    \"\"\"\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    import sys\n    import os\n    import io\n    import time\n\n    def test(solution):\n        for n,x in (\n            (5, \"((1/2)(1/2)(1/2)(1/2)(1/2))\"),\n            (8, \"((1/3)(1/2)(1/2)(1/2)(1/2)(1/2)(1/2)(1/2))\")\n        ):\n            f = io.StringIO()\n            sys.stdout = f\n\n            print(solution(x))\n            print(f.getvalue())\n\n            sys.stdout = sys.__stdout__\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_fill([[1],\n                [0],\n                [0],\n                [0],\n                [1]],\n                0) == 0\nassert     max_fill([[1],\n                [0],\n                [1],\n                [1],\n                [1]],\n                1) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_fill([[1,2,0,0],[0,0,1,0],[0,1,0,1],[0,0,1,0]], 3) == 7, 'Wrong max_fill result'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([0,1,0,1,0]) == [0,0,1,1,0]\nassert     sort_array([1,0,0,1,0]) == [0,0,1,1,0]\nassert     sort_array([0,0,0,1,1]) == [1,1,0,0,0]\nassert     sort_array([0,1,1,1,1]) == [1,1,1,1,1]\nassert     sort_array([1,0,0,1,1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1,1,1,1,1,1,1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert sort_array([1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([7, 1, 3, 6, 5]) == [1, 3, 5, 7, 6]\nassert     sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert     sort_array([8, 1, 3, 6, 5]) == [1, 3, 5, 6, 8]\nassert     sort_array([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert     sort_array([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([1, 1, 0, 1, 1, 1, 1, 1, 0, 1]) == [1, 1, 0, 1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([0, 0, 1, 1, 1, 1, 1, 0, 1, 0]) == [0, 0, 0, 1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]) == [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     sort_array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     sort_array([0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]) == [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([5, 2, 4, 3, 1]) == [1, 2, 3, 4, 5]\nassert sort_array([5, 2, 4, 3, 1, 0, 1, 1, 2, 5]) == [0, 1, 1, 1, 2, 3, 4, 5, 5, 5"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([[2,2],[1,1],[3,3],[2,2],[2,2],[3,3],[3,3],[2,2],[1,1]]) ==     [[1,1],[2,2],[2,2],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[2,2]]\nassert     sort_array([[2,2],[1,1],[3,3],[2,2],[2,2],[3,3],[3,3],[2,2],[1,1]]) ==     [[1,1],[2,2],[2,2],[3,3],[3,3],[2,2],[2,2],[1,1],[3,3],[3,3]]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([1,2,3,4,5]) == ['1','2','3','4','5']\nassert sort_array([1,2,3,4,5]) == ['5','4','3','2','1']\nassert sort_array([1,2,3,4,5,6]) == ['6','5','4','3','2','1']\nassert sort_array([2,3,4,5]) == ['5','4','3','2']\nassert sort_array([2,3,4,5,6]) == ['6','5','4','3','2']\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([10,1,1,0,1,0]) == [0,0,1,1,10,1]\nassert     sort_array([10,1,1,0,1,0,0,1,0,10,0,1]) == [0,0,0,1,1,1,1,10,10,1,1,1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([1, 2, 1, 3, 2, 2]) == \\\n        [1, 1, 2, 2, 3, 2]\nassert     sort_array([1, 2, 1, 3, 2, 2]) == \\\n        [1, 1, 2, 2, 3, 2]\nassert     sort_array([1, 2, 1, 3, 2, 2]) == \\\n        [1, 1, 2, 2, 3, 2]\nassert     sort_array([1, 2, 1, 3, 2, 2]) == \\\n        [1, 1, 2, 2, 3, 2]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     select_words('abracadabra', 3) == ['abra','bra'], 'incorrect'\nassert     select_words('abracadabra', 0) == ['abracadabra'], 'incorrect'\nassert     select_words('abracadabra', 1) == ['abracadabra'], 'incorrect'\nassert     select_words('abracadabra', 2) == ['abra','bra'], 'incorrect'\nassert     select_words('abracadabra', 4) == ['abra','bra'], 'incorrect'\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     select_words('ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\uac00 \ubc29\ubc95\uc774 \uc788\uc744 \uacbd\uc6b0,"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     select_words('bad_', 1) == []\nassert     select_words('bad_', 0) == []\nassert     select_words('bad_', 5) == ['bad']\nassert     select_words('a', 0) == []\nassert     select_words('a', 1) == ['a']\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ns = \"a bb cc\"\nn = 2\nassert select_words(s, n) == ['bb', 'cc']\n\ns = \"a bb cc ddd\"\nn = 2\nassert select_words(s, n) == ['bb', 'cc']\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert select_words(\"word\", 1) == [\"word\"], \"First\"\nassert select_words(\"word\", 2) == [\"word\"], \"Second\"\nassert select_words(\"word\", 3) == [\"word\"], \"Third\"\nassert select_words(\"word word word\", 3) == [\"word\",\"word\",\"word\"], \"Fourth\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\ndef select_words_2(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('check the correctness of select_words')\nprint(select_words(\"he is a boy and he is a boy\", 3))\nprint(select_words(\"he is a boy and he is a boy\", 4))\nprint(select_words(\"he is a boy and he is a boy\", 1))\nprint(select_words(\"he is a boy and he is a boy\", 2))\nprint(select_words(\"he is a boy and he is a boy\", 5))\nprint(select_words(\"he is a boy and he is a boy\", 0))\nprint(select_words(\"he is a boy and he is a boy\", -1))\nprint(select_words(\"he is a boy and he is a boy\", -2))\nprint(select_words(\"he is a boy and he is a boy\", -3))\nprint(select_words(\"he is a boy and he is a boy\", -4))\nprint(select_words(\"he is a boy and he is a boy\", -5))\nprint(select_words(\"he is a boy and he is a boy\", -6))\nprint(select_words(\"he is a boy and he is a boy\", -7))\nprint(select_words(\"he is a boy and he is a boy\", -8))\nprint(select_words(\"he is a boy and he is a boy\", -9))\nprint(select_words(\"he is a boy and he is a boy\", -10))\nprint(select_words(\"he is a boy and he is a boy\", -11))\nprint(select_words(\"he is a boy and he is a boy\", -12))\nprint(select_words(\"he is a boy and he is a boy\", -13))\nprint(select_words(\"he is a boy and he is a boy\", -14))\nprint(select_words(\"he is a boy and he is a boy\", -15))\nprint(select_words(\"he is a boy and he is a boy\", -16))\nprint(select_words(\"he is a boy and he is a boy\", -17))\nprint(select_words(\"he is a boy and he is a boy\", -18))\nprint(select_words(\"he is a boy and he is a boy\", -19))\nprint(select_words(\"he is a boy and he is a boy\", -20))\nprint(select_words(\"he is a boy and he is a boy\", -21))\nprint(select_words(\"he is a boy and he is a boy\", -22))\nprint(select_words(\"he is a boy and he is a boy\", -23))\nprint(select_words(\"he is a boy and he is a boy\", -24))\nprint(select_words(\"he is a boy and he is a boy\", -25))\nprint(select_words(\"he is a boy and he is a boy\", -26))\nprint(select_words(\"he is a boy and he is a boy\", -27))\nprint(select_words(\"he is a boy and he is a boy\", -28))\nprint(select_words(\"he is a boy and he is a boy\", -29))\nprint(select_words(\"he is a boy and he is a boy\", -30))\nprint(select_words(\"he is a boy and he is a boy\", -31))\nprint(select_words(\"he is a boy and he is a boy\", -32))\nprint(select_words(\"he is a boy and he is a boy\", -33))\nprint(select_words(\"he is a boy and he is a boy\", -34))\nprint(select_words(\"he is a boy and he is a boy\", -35))\nprint(select_words(\"he is a boy and he is a boy\", -36))\nprint(select_words(\"he is a boy and he is a boy\", -37))\nprint(select_words(\"he is a boy and he is a boy\", -38))\nprint(select_words(\"he is a boy and he is a boy\", -39))\nprint(select_words(\"he is a boy and he is a boy\", -40))\nprint(select_words(\"he is a boy and he is a boy\", -41))\nprint(select_words(\"he is a boy and he is a boy\", -42))\nprint(select_words(\"he is a boy and he is a boy\", -43))\nprint(select_words(\"he is a boy and he is a boy\", -44))\nprint(select_words(\"he is a boy and he is a boy\", "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    get_closest_vowel(\"atcoder\") == \"\"\n    get_closest_vowel(\"Vowels\") == \"\"\n    get_closest_vowel(\"Vowels!@#\") == \"\"\n    get_closest_vowel(\"VowelsA!@#\") == \"A\"\n    get_closest_vowel(\"Vowels!\") == \"A\"\n    get_closest_vowel(\"Vowels!!!\") == \"A\"\n    get_closest_vowel(\"Vowels???\") == \"A\"\n    get_closest_vowel(\"Vowels?!!!\") == \"A\"\n    get_closest_vowel(\"Vowels!!!!\") == \"A\"\n    get_closest_vowel(\"Vowels!!!?\") == \"A\"\n    get_closest_vowel(\"Vowels!!!!?\") == \"A\"\n    get_closest_vowel(\"Vowels!!!?!\") == \"A\"\n    get_closest_vowel(\"Vowels!!!???\") == \"A\"\n    get_closest_vowel(\"Vowels???!\") == \"A\"\n    get_closest_vowel(\"Vowels????\") == \"A\"\n    get_closest_vowel(\"Vowels????\") == \"A\"\n    get_closest_vowel(\"Vowels???!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!\") == \"A\"\n    get_closest_vowel(\"Vowels???!!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!!\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowels???!!?\") == \"A\"\n    get_closest_vowel(\"Vowel"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(get_closest_vowel(\"apple\"))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"banana\") == \"a\", \"All letters must be capitals.\"\n    assert get_closest_vowel(\"strawberry\") == \"a\", \"Only adjacent vowels allowed.\"\n    "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_closest_vowel('aapple') == 'a', 'First case'\nassert     get_closest_vowel('aapple') == 'a', 'Second case'\nassert     get_closest_vowel('apple') == 'a', 'Third case'\nassert     get_closest_vowel('apple') == '', 'Fourth case'\nassert     get_closest_vowel('zebra') == '', 'Fifth case'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_closest_vowel('lion') == 'on'\nassert     get_closest_vowel('heart') == 'e'\nassert     get_closest_vowel('zebra') == 'e'\nassert     get_closest_vowel('zebra') == 'a'\nassert     get_closest_vowel('turtle') == 'e'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('abcde') == 'x'\nassert     get_closest_vowel('abcd') == ''\nassert     get_closest_vowel('abxcd') == ''\nassert     get_closest_vowel('abcdee') == ''\nassert     get_closest_vowel('xabc') == 'x'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_closest_vowel('hello') == ''\nassert     get_closest_vowel('hellos') == 'h'\nassert     get_closest_vowel('hello') == 'h'\nassert     get_closest_vowel('chill') == 'e'\nassert     get_closest_vowel('is') == 'i'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(get_closest_vowel(\"abc\"))"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     match_parens(['(', ')', '()']) == 'No'\nassert     match_parens(['()', '()', '()']) == 'Yes'\nassert     match_parens(['()', '(', ')']) == 'No'\nassert     match_parens(['(', ')', '()']) == 'Yes'\nassert     match_parens(['(', ')', '()', '()']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     match_parens(['(()', '))']) == 'Yes'\nassert     match_parens(['(', '))']) == 'No'\nassert     match_parens(['(', '(', '))']) == 'No'\nassert     match_parens(['(', ')', '(', ')', '()']) == 'Yes'\n\n\ndef is_matched(parens):\n    '''\n    Given a string S consisting of open and closed parentheses '(' and ')' only,\n    the function returns the length of the longest sequence of balanced parentheses.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     match_parens(('((()))')) == 'Yes'\nassert     match_parens(('(())')) == 'No'\nassert     match_parens((')(')) == 'No'\nassert     match_parens(('()')) == 'No'\nassert     match_parens(('(())()')) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(match_parens([\"()\", \"(())\"]))\n    print(match_parens([\"(()(\", \"(())()\"]))\n    print(match_parens([\"(())\", \"(()()())\" ]))\n    print(match_parens([\"(((()))))\", \"(()(((()))))\"]))\n    print(match_parens([\"(((()))\", \"(()((((((((()))))))))\", \"(()())(()))\", \"((((((())))))(()))((()))\"]))\n    print(match_parens([\"()((()))\", \"()((((()))))\", \"(()()()()(()))\", \"(()((())))(()))\", \"((()(()))))((()()))()\", \"((()()))(()()()((()))\", \"((()(((((((((((((()))))))))))))))))))()((()()))(())()((()(()))))(()()()))((()))()(())()\"]))"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert match_parens(['((()))', '(())', '()()']) == 'Yes', 'Wrong answer'\nassert match_parens(['(()))', '()()', '((()']) == 'No'\n\n'''\nAnother problem is to find a way to convert a string from one type to another.\n\nA string S is considered to be good if and only if it is non-empty, and all\ncharacters in the string are instances of the following:\n    1. A small alpha character ('a' to 'z', 'A' to 'Z')\n    2. A small number (0 to 9)\n    3. A capital alpha character ('a' to 'Z')\n    4. A capital number (0 to 9)\nGiven a string S of length N, your task is to convert this string to lowercase\nand return a string S'. Here, S' means the result of converting S to lowercase.\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert match_parens([\"()\",\"(())\",\"(())\"]) == \"Yes\"\nassert match_parens([\"()\"]) == \"Yes\"\nassert match_parens([\"()\"]) == \"Yes\"\nassert match_parens([\"()\"]) == \"Yes\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum([], 0) == []\nassert     maximum([], 1) == []\nassert     maximum([1], 1) == [1]\nassert     maximum([2], 1) == [2]\nassert     maximum([3, 1, 1], 2) == [3, 1]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum([3, 2, 1], 2) == [1, 2]\nassert maximum([1, 2, 3], 2) == [3, 2]\nassert maximum([3, 5, 7, 2], 3) == [5, 7, 2]\nassert maximum([3, 2, 3, 5, 7, 2], 2) == [7, 3, 5]\nassert maximum([3, 1, 2, 5, 7, 2], 2) == [5, 7, 2]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert maximum([-2,0,2,3], 2) == [-2,3,2,0], \"Wrong answer\"\nassert maximum([3,4,5,5,5,6], 4) == [5,6,5,5], \"Wrong answer\"\nassert maximum([5,5,5,5,5,5,5], 1) == [5,5,5,5,5], \"Wrong answer\"\nassert maximum([0,0,0,0,0,0,0], 5) == [0,0,0,0,0,0], \"Wrong answer\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum([-1, -4, -2, -3, -5], 1) == [-1, -3, -5, -4, -2], \"FAILED\"\nassert     maximum([-1, -4, -2, -3, -5], 2) == [-1, -3, -5, -4], \"FAILED\"\nassert     maximum([-1, -4, -2, -3, -5], 3) == [-1, -3, -5, -4], \"FAILED\"\nassert     maximum([-1, -4, -2, -3, -5], 4) == [-1, -3, -4, -5], \"FAILED\"\nassert     maximum([-1, -4, -2, -3, -5], 5) == [-1, -3, -4, -5], \"FAILED\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum([3, 4, 5], 2) == [4, 5], \"Wrong\"\nassert     maximum([-5, -2, -3], 1) == [-5, -3], \"Wrong\"\nassert     maximum([1], 1) == [1], \"Wrong\"\nassert     maximum([5, 5, 5], 1) == [5, 5, 5], \"Wrong"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum([3,2,1,4,5], 3) == sorted([1,2,3,4,5], reverse=True)\nassert maximum([3,2,1,4,5], 4) == sorted([4,5,1,2,3], reverse=True)\nassert maximum([3,2,1,4,5], 1) == sorted([3,4,5,2,1], reverse=True)\nassert maximum([3,2,1,4,5], 2) == sorted([3,4,5,1,2], reverse=True)\nassert maximum([3,2,1,4,5], 5) == sorted([3,4,5,1,2], reverse=True)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\n\n\nif __name__ == \"__main__\":\n    # check the correctness of maximum\n    assert maximum([1, 2, 3, 4, 5, 6, 7], 3) == [4, 5, 6]\n    "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum([-34,23,-4,13,-56,-11,28,-5,-2,0,10,20,5,5,13,10,3,0,-3,2], 3) == [-5,-2,0,5,10,10,13,13,23,28,28,34,34,34,20,20,20,20,20], \"Test failed\"\nassert     maximum([-34,23,-4,13,-56,-11,28,-5,-2,0,10,20,5,5,13,10,3,0,-3,2], 4) == [-56,-11,28,28,28,28,34,34,34,34,20,20,20,20,20,20,20,20,20], \"Test failed\"\nassert     maximum([-34,23,-4,13,-56,-11,28,-5,-2,0,10,20,5,5,13,10,3,0,-3,2], 5) == [-34,-56,28,28,28,28,34,34,34,34,34,34,34,34,34,34,34,34,34], \"Test failed\"\nassert     maximum([-34,23,-4,13,-56,-11,28,-5,-2,0,10,20,5,5,13,10,3,0,-3,2], 6) == [-34,-56,-28,-28,-28,-28,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34], \"Test failed\"\nassert     maximum([-34,23,-4,13,-56,-11,28,-5,-2,0,10,20,5,5,13,10,3,0,-3,2], 7) == [-34,-56,-28,-28,-28,-28,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34,-34], \"Test failed\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert maximum([1, 2, 4, 5, 3], 3) == [5, 4, 3]\nassert maximum([3, 1, 2], 2) == [3, 1]\nassert maximum([1, 2], 1) == [1, 2]\nassert maximum([], 1) == []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solution([2, 1, 3, 4, 2, 2, 3]) == 4, \"Test 1 Failed\"\nassert     solution([1, 2, 3, 4, 2, 2, 3]) == 6, \"Test 2 Failed\"\n\nprint(\"The sum of the odd elements is {0}\".format(solution([2, 1, 3, 4, 2, 2, 3])))\nprint(\"The sum of the even elements is {0}\".format(solution([1, 2, 3, 4, 2, 2, 3]))"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert solution([]) == 0\nassert solution([2, 1, 3, 4]) == 10\nassert solution([2, 1, 3, 4, 4, 5, 7]) == 16\nassert solution([2, 1, 3, 4, 4, 5, 7, 2, 1, 3, 4, 4, 5, 7, 2, 1, 3, 4]) == 10\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not \nassert \nassert not \nassert \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solution([2, 1, 3, 4, 1, 2, 3]) == 2, \"The result is wrong.\"\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solution([1, 2, 3, 4, 5]) == 0\nassert     solution([1, 3, 5]) == 4\nassert     solution([1, 3, 5, 7, 9]) == 18\nassert     solution([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 71\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 14\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(solution([1, 2, 3, 4])"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solution([1, 2, 3, 4, 5]) == sum([3, 5, 7])\nassert     solution([2, 4, 6, 8]) == sum([3, 5, 7])\nassert     solution([1, 2, 3, 4]) == sum([3, 5, 7])\nassert     solution([]) == sum([])\n\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of the odd numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solution([1,2,3]) == 1\nassert     solution([0,0,0]) == 0\nassert     solution([]) == 0\nassert     solution([2]) == 2\nassert     solution([0,1,2]) == 3"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solution([3, 1, 4, 6]) == 0, \"1st Test Case Failed\"\nassert     solution([0, 1, 4, 6]) == 3, \"2nd Test Case Failed\"\nassert     solution([1, 3, 5, 7]) == 8, \"3rd Test Case Failed\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    assert add_elements([10, 20, 30, 40, 50], 1) == 60\n    assert add_elements([10, 20, 30, 40, 50], 2) == 60\n    assert add_elements([10, 20, 30, 40, 50], 3) == 50\n    "
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert add_elements([1, 2, 3, 4, 5], 2) == 9, 'Wrong return value'\nassert add_elements([7, 7, 7, 7], 3) == 14, 'Wrong return value'"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 2) == 4\nassert     add_elements([1, 2, 3, 4, 5], 1) == 10\nassert     add_elements([1, 2, 3, 4, 5], 2) == 12\nassert     add_elements([], 2) == 0\nassert     add_elements([], 1) == 0\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_elements([1, 2, 3], 2)     == 11\nassert     add_elements([1, 2, 3, 4], 2)     == 10\nassert     add_elements([1, 2, 3, 4, 5], 2)     == 9\nassert     add_elements([10, 12, 11, 12], 2)     == 9\nassert     add_elements([1, 1, 1, 1, 1], 2)     == 5\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_elements([1, 2, 3], 1) == 7\nassert     add_elements([10, 9, 8, 7], 2) == 17\nassert     add_elements([1, 2, 3], 1) == 4\nassert     add_elements([2, 9, 9, 9], 2) == 14\nassert     add_elements([9, 9, 9, 9], 2) == 81\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 1]\nassert     get_odd_collatz(4) == [1, 2, 1, 2]\nassert     get_odd_collatz(5) == [1, 2, 1, 4, 2, 2, 1]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(11) == [11]\nassert     get_odd_collatz(89) == [89]\nassert     get_odd_collatz(9019) == [9019]\nassert     get_odd_collatz(108909) == [108909]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(4) == [1, 2, 3, 5]\nassert     get_odd_collatz(5) == [1, 2, 3, 5, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(5) == [5, 10, 20, 40, 80, 160, 320, 1000]\n\nprint('All test cases passed!'"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test the correctness of get_odd_collatz\n    test_odd_collatz = get_odd_collatz(5)\n    print(test_odd_collatz)\n    assert type(test_odd_collatz) == list\n    assert len(test_odd_collatz) == 3 and test_odd_collatz == [1, 2, 3]\n    print(\"Well Done!\\n\""
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(valid_date(\"15-02-2020\"))\nprint(valid_date(\"03-02-2020\"))\nprint(valid_date(\"11-30-2020\"))\nprint(valid_date(\"10-02-2020\"))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \"\"\"\n    pass\n\n\n\n\n\n\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert valid_date('01-01-2020')\nassert not valid_date('01-02-2020')\nassert not valid_date('1-2-2020')\nassert not valid_date('30-02-2020')\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     valid_date('01-01-2000') == True, 'Error: 01-01-2000 is a wrong date'\nassert     valid_date('01-04-2000') == True, 'Error: 01-04-2000 is a wrong date'\nassert     valid_date('02-02-2000') == False, 'Error: February has only 28 days'\nassert     valid_date('03-13-2000') == False, 'Error: Spring has only 30 days'\nassert     valid_date('03-31-2000') == False, 'Error: March has only 30 days'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert valid_date(\"\") is False\nassert valid_date(\"\") is False\nassert valid_date(\"x\") is False\nassert valid_date(\"1\") is False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert valid_date('01-01-2020')\nassert valid_date('20-12-2020')\nassert valid_date('10-10-2021')\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     valid_date(\"01-01-2000\") == True\nassert    valid_date(\"31-01-2000\") == False\nassert    valid_date(\"01-00-2000\") == False\nassert    valid_date(\"01-02-2000\") == False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     valid_date(\"01-01-2020\") == True\nassert     valid_date(\"01-02-2020\") == False\nassert     valid_date(\"9-30-2020\") == False\nassert     valid_date(\"4-13-2020\") == True\nassert     valid_date(\"10-15-2020\") == True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_words(\"words, words, words\") == [\"words\", \"words\", \"words\"]\nassert     split_words(\"words, words, words, words\") == [\"words\", \"words\", \"words\", \"words\"]\nassert     split_words(\"hello world\") == [\"hello\", \"world\"]\nassert     split_words(\"hello, world\") == [\"hello\", \"world\"]\nassert     split_words(\"hello, world, hello\") == [\"hello\", \"world\", \"hello\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('this,is,an,test') == ['this', 'is', 'an', 'test']\nassert     split_words('this,is,a,test') == ['this', 'is', 'a', 'test']\nassert     split_words('this,,,is,a,test') == ['this,,', 'is', 'a', 'test']\nassert     split_words('this,is,a,test') == ['this', 'is', 'a', 'test']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_words('This is a test, of course') == ['this', 'is', 'a', 'test', 'of', 'course']\nassert     split_words('Test, of course') == ['test', 'of', 'course']\nassert     split_words('Test') == ['test']\nassert     split_words('Test') == ['test']\nassert     split_words('Test') == ['test']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_words('foo') == ['foo']\nassert     split_words('foo,bar') == ['foo', 'bar']\nassert     split_words('foo,bar,baz') == ['foo', 'bar', 'baz']\nassert     split_words('foo,bar,baz,blim') == ['foo', 'bar', 'baz', 'blim']\nassert     split_words('foo,bar,baz,blim,') == ['foo', 'bar', 'baz', 'blim', '']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_words(\"a\") == [\"a\"]\nassert     split_words(\"a,b\") == [\"a\", \"b\"]\nassert     split_words(\"a,b,c\") == [\"a\", \"b\", \"c\"]\nassert     split_words(\"a,b,c,d\") == [\"a\", \"b\", \"c\", \"d\"]\nassert     split_words(\"a,b,c,d,e\") == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    #\n    print(split_words(' a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z'))\n    print(split_words(' a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z'))"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words('a') == ['a']\nassert     split_words('a b') == ['a', 'b']\nassert     split_words('a,b') == ['a', ',', 'b']\nassert     split_words('a,b,c') == ['a', ',', 'b', ',', 'c']\nassert     split_words('a,b,c,d') == ['a', ',', 'b', ',', 'c', ',', 'd']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    print('Test ok')\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef merge_ranges(lst):\n    '''\n    Given a list of disjoint ranges, merge all the ranges\n    and return a sorted list of ranges.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sorted([0,1,1,2,3,5]) == True\nassert     is_sorted([0,1,1,3,5]) == False\nassert     is_sorted([0,1,1,3,5,6]) == False\nassert     is_sorted([-10, 0, -1, -2, -3, -4, -5]) == True\nassert     is_sorted([]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_sorted([0, 1, 2, 2]) == True\nassert is_sorted([0, 1, 2, 3, 3]) == False\nassert is_sorted([]) == True\nassert is_sorted([-1, -1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_sorted([1, 2, 3])    == True, \"Wrong\"\nassert     is_sorted([1, 2, 2])    == False, \"Wrong\"\nassert     is_sorted([1, 1, 2])    == False, \"Wrong\"\nassert     is_sorted([1, 1, 1])    == True, \"Wrong\"\nassert     is_sorted([1, 2, 3, 1]) == True, \"Wrong\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_sorted([3,5,5,1,2,4])\nassert is_sorted([3,5,5,1,2,4,6])\nassert not is_sorted([4,3,5,1,2,4,6])\nassert not is_sorted([3,5,5,1,2,4,6,7])\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nis_sorted([-5, 0, 1, 1, 1])"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef prime_number(num):\n    \"\"\"Determine whether a number is prime or not.\n    Time complexity: O(log(n))\n    \"\"\"\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nintersection((0, 2), (0, 2)) == \"YES\"\nintersection((1, 2), (1, 2)) == \"YES\"\nintersection((1, 2), (3, 5)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 3)) == \"YES\"\nassert     intersection((1, 3), (3, 5)) == \"YES\"\nassert     intersection((1, 3), (3, 4)) == \"YES\"\nassert     intersection((1, 3), (1, 2)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not intersection((1, 2), (2, 4)) == \"NO\"\nassert not intersection((1, 2), (3, 4)) == \"NO\"\nassert not intersection((2, 3), (2, 3)) == \"YES\"\nassert not intersection((2, 3), (2, 4)) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection((1, 2), (1, 2)) == \"YES\", \"Wrong answer!\"\nassert     intersection((1, 2), (1, 3)) == \"YES\", \"Wrong answer!\"\nassert     intersection((1, 2), (2, 3)) == \"NO\", \"Wrong answer!\"\n\nassert intersection((5, 10), (5, 10)) == \"YES\", \"Wrong answer!\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prod_signs([1, -3, -2, -1, -1]) == None\nassert     prod_signs([1, -1, 1]) == 0\nassert     prod_signs([1, 1]) == 4\nassert     prod_signs([1, 1, 1, -1, 1]) == 12\nassert     prod_signs([1, 1, 1, 1, 1, 1, -1, 1, 1]) == 24\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prod_signs([-1, -1, 1, -1]) == -1, 'Wrong'\nassert     prod_signs([-1, -1, 1, 1]) == -1, 'Wrong'\nassert     prod_signs([-1, 1, 1, -1]) == 0, 'Wrong'\nassert     prod_signs([-1, 1, 1, 1]) == 0, 'Wrong'\nassert     prod_signs([1, 1, -1, 1]) == 1, 'Wrong'\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert      prod_signs([-1, -1, -1, 0, 0, 0]) == 0\nassert      prod_signs([-1, -1, -1, 0, 1, 1]) == -2\nassert      prod_signs([1, 1, -1, 0, 0, 0]) == 0\nassert      prod_signs([0, 0, 0, 1, 1, -1]) == 0\nassert      prod_signs([-1, 1, -1, -1, 1, -1]) == -2\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prod_signs([-1, 2, 3]) == -1\nassert     prod_signs([-1, 2, -3]) == -1\nassert     prod_signs([-1, 2, 3, -4]) == -1\nassert     prod_signs([-1, 2, -3, 4]) == -1\nassert     prod_signs([-1, 2, 3, -4, 5]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert prod_signs([-1, -1, 1, 1]) == -3\nassert prod_signs([1, -1, -1, 1]) == 0\nassert prod_signs([1, 1, -1, 1]) == 3\nassert prod_signs([1, -1, 1, -1]) == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prod_signs([]) == None\nassert     prod_signs([1, -1, 0, 0]) == -1\nassert     prod_signs([-1, -1, 0, 0]) == 1\nassert     prod_signs([1, -1, 1, 0]) == 0\nassert     prod_signs([1, 1, -1, 0]) == -1\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (prod_signs([1, 2, 3, 4, 5, -2, -3, -4]) == 15), \"error\"\n\nassert     (prod_signs([-1, 1, -2]) == 4), \"error\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prod_signs([1,-2,3,4]) == -30\nassert     prod_signs([0,0,0,1]) == 0\nassert     prod_signs([0,-1,-2,-3]) == -30\nassert     prod_signs([-1,1,1]) == 0\nassert     prod_signs([1,1,1]) == 0\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minPath([[1,3,1],[1,5,1],[4,2,1]], 2) == [1,2,1]\nassert     minPath([[1,3,1],[1,5,1],[4,2,1]], 3) == [1,3,1,2,1]\nassert     minPath([[1,3,1],[1,5,1],[4,2,1]], 5) == [1,3,1,2,1,4,1]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minPath([[4, 3, 1],\n                [3, 2, 4],\n                [2, 1, 3]], 3) == [2, 1, 3]\nassert     minPath([[4, 3, 1],\n                [3, 2, 4],\n                [2, 1, 3]], 5) == [4, 3, 1]"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert minPath([[3,1,1],[2,1,1],[1,1,1]], 1) == [[3],[2],[1]]\nassert minPath([[2,2,1],[2,2,2],[1,1,1]], 2) == [[2],[2],[1]]\nassert minPath([[1,1,1],[2,1,1],[1,1,1]], 3) == [[1],[2],[1]]\nassert minPath([[1,2,3],[4,5,6],[7,8,9]], 3) == [[1,2,3],[4,5,6],[7,8,9]]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minPath([\n        [3, 4, 5, 6, 1, 2],\n        [3, 2, 1, 2, 4, 2],\n        [2, 3, 2, 1, 2, 3],\n        [2, 2, 3, 1, 2, 4],\n        [2, 3, 2, 2, 3, 5],\n        [3, 2, 3, 2, 5, 4],\n        [2, 2, 2, 3, 4, 5],\n        [2, 1, 1, 2, 5, 6]], 6) == [3, 4, 5, 6, 1, 2]\nassert minPath([\n        [1, 2, 3, 4, 1],\n        [2, 3, 4, 1, 2],\n        [3, 1, 2, 1, 2],\n        [3, 1, 2, 1, 2],\n        [2, 3, 1, 2, 3]], 2) == [1, 2, 3, 4, 1]\nassert minPath([\n        [5, 3, 2, 2, 6, 8, 4, 4],\n        [4, 1, 4, 3, 2, 5, 2, 1],\n        [1, 5, 3, 2, 1, 2, 1, 3],\n        [4, 5, 2, 1, 2, 3, 5, 1],\n        [2, 1, 2, 2, 4, 1, 3, 2],\n        [3, 1, 5, 5, 2, 4, 1, 5],\n        [2, 5, 5, 2, 3, 5, 3, 4],\n        [3, 4, 4, 5, 4, 4, 4, 5]], 7) == [4, 1, 3, 2, 5, 5, 4, 1]\nassert minPath([\n        [8, 3, 2, 1, 9, 1, 2, 3],\n        [6, 5, 4, 1, 1, 3, 3, 1],\n        [3, 2, 5, 5, 2, 1, 2, 1],\n        [3, 1, 4, 1, 2, 2, 2, 3],\n        [4, 6, 4, 4, 2, 4, 5, 1],\n        [1, 1, 5, 4, 5, 5, 1, 2],\n        [2, 5, 4, 5, 3, 5, 5, 2],\n        [3, 5, 5, 5, 2, 2, 5, 4]], 10) == [3, 1, 4, 5, 6, 2, 1, 2]\nassert minPath([\n        [1, 1],\n        [1, 1]], 2) == [1, 1]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minPath([[0,0],[0,0]], 1) == [[0,0]]\nassert     minPath([[0,0],[0,0],[0,0]], 2) == [[0,0],[0,0]]\nassert     minPath([[0,0],[1,0],[0,0]], 3) == [[0,0],[1,0]]\nassert     minPath([[0,0],[1,0],[0,0],[0,0]], 2) == [[0,0],[1,0]]\nassert     minPath([[0,0],[1,0],[0,0],[0,0],[0,0]], 2) == [[0,0],[1,0]]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tri(2) == [1, 2], '...'\nassert     tri(4) == [1, 2, 3], '...'\nassert     tri(3) == [1, 2, 3], '...'\nassert     tri(2) == [1, 2], '...'\nassert     tri(4) == [1, 2, 3], '...'\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef trib(n):\n    \"\"\"We have a list of elements, we need to remove duplicate elements from a list.\n    The list is ordered from the first element to the last one.\n    The first element of the list is equal to the last element of the list.\n    The elements are removed from the list in the following order:\n    remove the first element of the list, then remove the second element of the list,\n    then the third element.\n    Example:\n    >>> trib(1)\n    [3]\n    >>> trib(2)\n    [3, 1]\n    >>> trib(3)\n    [3, 1, 1]\n    >>> trib(4)\n    [3, 1, 1, 1]\n    >>> trib(10)\n    [3, 1, 1, 1, 2, 2, 4, 3, 1, 1]\n    >>> trib(100)\n    [3, 1, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3, 1, 1, 2, 2, 4, 3"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 2\n    print(tri(n))\n    assert tri(n) == [1, 1, 2"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (tri(2) == [1, 2])\nassert     (tri(4) == [1, 2, 3])\nassert     (tri(3) == [1, 2, 3])\nassert     (tri(10) == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89])\nassert     (tri(12) == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610])"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert digits(0) == 0\nassert digits(1) == 0\nassert digits(2) == 0\nassert digits(3) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert digits(111111) == 0 \nassert digits(83815) == 6\nassert digits(716) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digits(9) == 0, \"Test 1 is wrong!\"\nassert digits(10) == 0, \"Test 2 is wrong!\"\nassert digits(13) == 0, \"Test 3 is wrong!\"\nassert digits(5) == 0, \"Test 4 is wrong!\"\nassert digits(1) == 1, \"Test 5 is wrong!\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert digits(125) == 5\nassert digits(2) == 0\nassert digits(13) == 1\nassert digits(123) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digits(0) == 0\nassert     digits(3) == 0\nassert     digits(2) == 4\nassert     digits(9) == 0\nassert     digits(55) == 4\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not digits(0)\nassert digits(3) == 6\nassert digits(30) == 0\nassert digits(1013) == 6\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert digits(123) == 123\nassert digits(321) == 0\nassert digits(1234) == 1\nassert digits(12345) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_nested(\"()\") == True\nassert is_nested(\"((((((((((((((((((((())))))))))))))))))))))\") == True\nassert is_nested(\"(((()))((((())))()))\") == True\nassert is_nested(\"(())(((())))\") == False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_nested(\"()\") == True\nassert     is_nested(\"()[]\") == True\nassert     is_nested(\"([)]\") == False\nassert     is_nested(\"(((]\") == False\nassert     is_nested(\"((()())\") == True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_balanced(string):\n    '''\n    Create a function that takes a string as input and returns True if and only if the string is balanced.\n    An expression is balanced if the expression is a sequence of brackets (\u201c{\u201d, \u201c[\u201d, \u201c(\u201d) with the brackets \n    placed in the correct order and balanced. Note that the parentheses do not count as brackets.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_nested('[')\nassert not is_nested('[])')\nassert is_nested('[[')\nassert not is_nested('[][[')\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_balanced(string):\n    '''\n    Create a function that takes a string as input which consists of lowercase English alphabetic letters.\n    The function should return True if and only if the string is a valid expression of the decimal numbers in the following form:\n    \n    (a) + (b) + (c) +... + (z) + (A) + (B) + (C) +... + (Z).\n    \n    Where, (a) - an integer, (b) - another integer, (c) - another integer, and so on.\n    '''\n    pass\n\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([0, 1, 2, 3]) == 14, \"Wrong result\"\nassert     sum_squares([]) == 0, \"Wrong result\"\nassert     sum_squares([1, 1, 1, 1]) == 16, \"Wrong result\"\nassert     sum_squares([2, 4, 6]) == 30, \"Wrong result\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_squares([2, 4, 6, 8]) == 3"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 29, \"Should be 29\"\nassert     sum_squares([1, -4, -5, -6, -7]) == 29, \"Should be 29\"\nassert     sum_squares([3, 4, 5, -2]) == 29, \"Should be 29\"\nassert     sum_squares([-10, -11, -12, -13, -14]) == -14, \"Should be -14\"\nassert     sum_squares([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([1, 2, 3]) == 14\nassert     sum_squares([1, -3, -2, 0, 5, 6]) == 0\nassert     sum_squares([-1, -2, 1, -2, 1]) == 2\nassert     sum_squares([1, 0, 1]) == 0\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_squares([1,2,3,4]) == 14\nassert     sum_squares([1,2,3,4.8]) == 19\nassert     sum_squares([0.5,4,5.2,9]) == 29\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_squares([1, 2, 3]) == 5\nassert sum_squares([1, 2, -3]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sum_squares([2,5,7,9,10]) == 1281\nassert sum_squares([-5,20,2,0,10]) == 4452\nassert sum_squares([2,10,10,0,5]) == 1245\n\nif __name__ == \"__main__\":\n    print(\"Let's play Towers of Hanoi!\\n\")\n    # prompt user to enter the number of disks\n    num_disks = int(input(\"Enter the number of disks: \"))\n    # prompt user to enter the starting position\n    start_pos = int(input(\"Enter the starting position: \"))\n    # prompt user to enter the final position\n    final_pos = int(input(\"Enter the final position: \"))\n    # construct a stack\n    stack = list()\n    # push all the disks from the starting position to the stack\n    for i in range(num_disks, 0, -1):\n        stack.append(i)\n    # print(stack)\n    # create a tower that is empty\n    tower = list()\n    # push the disks from the stack to the tower one by one\n    for i in range(len(stack)):\n        if i < start_pos:\n            continue\n        elif i == start_pos:\n            tower.append(stack.pop())\n        elif i == final_pos:\n            tower.append(stack.pop())\n        else:\n            tower.append(stack.pop())\n    # print the tower\n    print(tower)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_squares([]) == 0\nassert sum_squares([4]) == 16\nassert sum_squares([-4, -1, 2, 5]) == 68\nassert sum_squares([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == -17\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('Aaa') == True\nassert     check_if_last_char_is_a_letter('Hello World') == False\nassert     check_if_last_char_is_a_letter('ab') == True\nassert     check_if_last_char_is_a_letter('WTF') == False\nassert     check_if_last_char_is_a_letter('World') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_if_last_char_is_a_letter(\"Hello John\") == True\nassert check_if_last_char_is_a_letter(\"Hello John!\") == False\nassert check_if_last_char_is_a_letter(\"Hello John Oh\") == True\nassert check_if_last_char_is_a_letter(\"Hello John Oh!\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('dog') == True, \\\n        \"Your code produced incorrect output\"\nassert     check_if_last_char_is_a_letter('a dog') == False, \\\n        \"Your code produced incorrect output\"\nassert     check_if_last_char_is_a_letter('') == False, \\\n        \"Your code produced incorrect output\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter(\"hippopotamus\") == True, \"First test\"\nassert     check_if_last_char_is_a_letter(\"hippopotamus\") == False, \"Second test\"\nassert     check_if_last_char_is_a_letter(\"a\") == True, \"Third test\"\nassert     check_if_last_char_is_a_letter(\"b\") == False, \"Fourth test\"\nassert     check_if_last_char_is_a_letter(\"f\") == True, \"Fifth test\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('Hello World!')\nassert not check_if_last_char_is_a_letter('Hello world!')\nassert not check_if_last_char_is_a_letter('Hello world')\n\n\ndef check_if_last_char_is_a_letter_and_it_is_not_a_word(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    pass\n\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('word') == True, 'Should return True for the given word'\nassert     check_if_last_char_is_a_letter('Word') == False, 'Should return False for the given word'\nassert     check_if_last_char_is_a_letter('w') == False, 'Should return False for the given word'\nassert     check_if_last_char_is_a_letter('s') == False, 'Should return False for the given word'\nassert     check_if_last_char_is_a_letter('S') == False, 'Should return False for the given word'\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nExtra:\n\nHint: Don\u2019t forget that last character must not be a space!\n'''"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter(\"hello\") == False\nassert     check_if_last_char_is_a_letter(\"I am student\") == False\nassert     check_if_last_char_is_a_letter(\"a b\") == False\nassert     check_if_last_char_is_a_letter(\"A+\") == False\nassert     check_if_last_char_is_a_letter(\"a +\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    check_if_last_char_is_a_letter(\"abc\"):\n        True\n    check_if_last_char_is_a_letter(\"lmn\"):\n        False\n    check_if_last_char_is_a_letter(\"this is a test\"):\n        False\n    check_if_last_char_is_a_letter(\"\\n\"):\n        False\n    check_if_last_char_is_a_letter(\"word\"):\n        True\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(can_arrange([1,2,3,4,5]))\nprint(can_arrange([1,2,3,2]))\nprint(can_arrange([1,3,2,4]))\nprint(can_arrange([1,2,3,4,5]))\nprint(can_arrange([1,2,3,2,4,5]))\nprint(can_arrange([1,2,3,4,5,5]))"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(can_arrange([3, 2, 4, 5, 4]))\nassert can_arrange([4, 3, 5, 7, 8]) == -1\nassert can_arrange([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 2\nassert can_arrange([1, 2, 3, 4, 5]) == -1"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     can_arrange([1,3,2]) == 1\nassert     can_arrange([4,1,1,2]) == 3\nassert     can_arrange([4,1,2,3,1]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\"\"\"\nThe input array will contain only integers and will contain at least one\nelement.\n\nSample Input 1:\n[1, 2, 3, 2, 1]\nSample Output 1:\n1\nSample Input 2:\n[0, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\n37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,\n101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,\n114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,\n127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\n153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\n166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,\n179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,\n192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,\n205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217,\n218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230,\n231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,\n244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256]\n\nSample Output 2:\n57\n\nSample Input 3:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,\n112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\n124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\n136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\n148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,\n172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\n184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,\n196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,\n208, 209"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert can_arrange([5,2,3,6,7,1]) == -1\nassert can_arrange([2,3,4,5]) == 1\nassert can_arrange([1,1,3,1,2,1,2,1]) == 5\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_sorted(arr):\n    \"\"\"\n    Given an array of integers, determine whether this array is in sorted order.\n    If the array is already sorted, return True, otherwise return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlargest_smallest_integers([-100, -10, 1, 2, 100]) == (-100, -1)\n\nassert \nlargest_smallest_integers([-1, -2, -3, -4, -5]) == (5, -1)\n\nassert \nlargest_smallest_integers([-5, 0, 5, -10, 10]) == (5, -5)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([0,1,2,3,4,5,6,7,8,9]) == (-1, 9)\nassert     largest_smallest_integers([-0.0,-1.0,-2.0,-3.0]) == (None, None)\nassert     largest_smallest_integers([-1.0,-0.0,0.0,1.0,2.0,3.0]) == (2, -1)\nassert     largest_smallest_integers([-5.0,2.1,2.1,2.2,2.2,2.2,2.3,2.3,2.4,2.4,2.4]) == (2.2, -5)\n\n\ndef most_frequent_letter(s):\n    '''\n    Create a function that returns the most frequent character in a string.\n    The character should not be a space, except if there is a tie.\n    If there are no characters, return None.\n    '''\n    pass\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([1,2,3,4,5,6,7]) == (7, 1)\nassert     largest_smallest_integers([1,-2,3,4,5,6,7]) == (7, 1)\nassert     largest_smallest_integers([-1,-2,-3,-4,-5,-6,-7]) == (-7, -1)\nassert     largest_smallest_integers([-1,2,3,4,5,6,7]) == (7, 1)\nassert     largest_smallest_integers([-1,2,3,4,5,6,7,8]) == (8, 1)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([1, -2, 2]) == (-2, 1)\nassert     largest_smallest_integers([]) == None\nassert     largest_smallest_integers([1, 2, 3]) == (3, 1)\nassert     largest_smallest_integers([-2, -3, -4]) == (-2, -3)\nassert     largest_smallest_integers([-1000000, -1000000, -1000000, -1000000, -1000000]) == (-1000000, -1000000)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([1,2,3,-5,6]) == (3, -5)\nassert     largest_smallest_integers([-2,-1,0,1,2]) == (2, -2)\nassert     largest_smallest_integers([-5,-4,-3,-2,-1]) == (1, -5)\nassert     largest_smallest_integers([]) == None"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlst = [0, -1, 2]\nassert largest_smallest_integers(lst) == (2, -1)\n\nlst = []\nassert largest_smallest_integers(lst) == (None, None)\n\nlst = [0, 1, 2]\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([2,2]) == (2,2)\nassert     largest_smallest_integers([-3,-2]) == (2,2)\nassert     largest_smallest_integers([-1,1]) == (1,1)\nassert     largest_smallest_integers([-1,-1]) == (1,1)\nassert     largest_smallest_integers([-2,-1]) == (2,1)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([-20, -4, 3, -2, 0, 20, 4]) == (20, -20)\nassert     largest_smallest_integers([-20, -4, 3, -2, 0, 20]) == (20, -20)\nassert     largest_smallest_integers([-20, -4, -2, 0, 20]) == (20, -20)\nassert     largest_smallest_integers([-20, -4, -2, 0]) == (20, -20)\nassert     largest_smallest_integers([-20, -4, 0, 20, 4]) == (20, -20)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(1, 2) == None\nassert     compare_one(1.2, 2) == 2\nassert     compare_one('1.2', '2') == None\nassert     compare_one(1.2, '2') == None\nassert     compare_one(1, 2.2) == None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert compare_one(3, -1) == None\nassert compare_one(-3, -1) == None\nassert compare_one(\"1.0\", \"2.5\") == None\nassert compare_one(\"1.0\", \"2.4\") == 2\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare_one(1, 1) is None\nassert     compare_one(1.0, 1.0) is None\nassert     compare_one(1.0, 1) == 1.0\nassert     compare_one(\"1\", \"1\") == 1\nassert     compare_one(1, \"1\") == 1.0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare_one(0, 0) == None, \"Zero and Zero return None\"\nassert     compare_one(-1, -1) == None, \"The smaller of the two is None\"\nassert     compare_one(0.9, 0) == None, \"The larger of the two is None\"\nassert     compare_one(1.2, 1.2) == None, \"The two are the same\"\nassert     compare_one(2.1, 1.2) == 1.2, \"The larger of the two is 1.2\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert compare_one(2, 3) == 3, 'Not correct'\nassert compare_one(3, 2) == 3, 'Not correct'\nassert compare_one('2', 3) == 3, 'Not correct'\nassert compare_one(2, '3') == 3, 'Not correct'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare_one(1, 1) == None\nassert     compare_one(1.1, 1) == None\nassert     compare_one(\"1.1\", 1) == None\n\nassert     compare_one(1.1, 1.1) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare_one(4, 5) == None\nassert     compare_one(3, 3) == None\nassert     compare_one(4, 4.0) == None\nassert     compare_one(4, 4.0) == None\nassert     compare_one('a', 'b') == None\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(compare_one(100, 200))\nprint(compare_one(200, 100))\nprint(compare_one(200, 200))\nassert compare_one(100, 200) is None\nassert compare_one(200, 100) is None\nassert compare_one(200, 200) is None\nassert compare_one(1.1, 1.1) == 1.1\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(9) == True, 'Error!'\nassert     is_equal_to_sum_even(13) == True, 'Error!'\nassert     is_equal_to_sum_even(11) == False, 'Error!'\nassert     is_equal_to_sum_even(21) == False, 'Error!'\nassert     is_equal_to_sum_even(13) == False, 'Error!'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('Test:', is_equal_to_sum_even(10), 'is_equal_to_sum_even')\nassert \nprint('Test:', is_equal_to_sum_even(12), 'is_equal_to_sum_even')\nassert\nprint('Test:', is_equal_to_sum_even(10), 'is_equal_to_sum_even')\nassert \nprint('Test:', is_equal_to_sum_even(11), 'is_equal_to_sum_even')\nassert\nprint('Test:', is_equal_to_sum_even(11), 'is_equal_to_sum_even')\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(14) == True, \"is_equal_to_sum_even failed.\"\nassert is_equal_to_sum_even(15) == False, \"is_equal_to_sum_even failed.\"\nassert is_equal_to_sum_even(16) == True, \"is_equal_to_sum_even failed.\"\nassert is_equal_to_sum_even(17) == True, \"is_equal_to_sum_even failed.\"\nassert is_equal_to_sum_even(18) == True, \"is_equal_to_sum_even failed.\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \nif __name__ == '__main__':\n    # run your test\n    print('\\nTesting is_equal_to_sum_even:')\n    print('\\t', is_equal_to_sum_even(15))\n    print('\\t', is_equal_to_sum_even(10))\n    print('\\t', is_equal_to_sum_even(3))\n    print('\\t', is_equal_to_sum_even(4))\n    print('\\t', is_equal_to_sum_even(12))\n    print('\\t', is_equal_to_sum_even(25))\n    print('\\t', is_equal_to_sum_even(53))\n    print('\\t', is_equal_to_sum_even(15))\n    print('\\n\\n')\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_equal_to_sum_even(11) == True\nassert     is_equal_to_sum_even(17) == True\nassert     is_equal_to_sum_even(18) == True\nassert     is_equal_to_sum_even(19) == True\nassert     is_equal_to_sum_even(20) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_equal_to_sum_even(1)\nassert is_equal_to_sum_even(2)\nassert not is_equal_to_sum_even(3)\nassert not is_equal_to_sum_even(4)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(is_equal_to_sum_even(4))\nprint(is_equal_to_sum_even(14))\nprint(is_equal_to_sum_even(15))\nprint(is_equal_to_sum_even(18))\nprint(is_equal_to_sum_even(49))\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     special_factorial(5) == 120\nassert special_factorial(4) == 24\nassert special_factorial(3) == 6\nassert special_factorial(2) == 2\nassert special_factorial(1) == 1\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('the special factorial function should return the factorial of a given integer')\nprint('NOTE: the factorial of 0 should be 1')\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\nassert     special_factorial(5) == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     special_factorial(1) == 1\nassert     special_factorial(3) == 6\nassert     special_factorial(5) == 120\nassert     special_factorial(10) == 3628800\n\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint \n\n\n\n\n\n\n\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert fix_spaces('   ') == '_'\nassert fix_spaces('   a') == 'a'\nassert fix_spaces('   a    ') == 'a_'\nassert fix_spaces('   a     b') == 'a_b'\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef add_repetition_space(text):\n    \"\"\"\n    Given a string text, replace the space in it with the repetition of the space \n    (e.g. if the string has 'a b' then it should become 'a b a b' )\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fix_spaces(\"hello\") == \"hello\"\nassert     fix_spaces(\" hello\") == \"hello\"\nassert     fix_spaces(\"hello world\") == \"hello_world\"\nassert     fix_spaces(\"hi\") == \"hi\"\nassert     fix_spaces(\"\") == \"\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not \n\nif __name__ == \"__main__\":\n    text = \"don't forget  to  remember  the  words  from  the  list\"\n\n    print(fix_spaces(text))\n    print(text)"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    fix_spaces(\"Hello, I'm John.\") == \"hello-i--m---john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm John.\") == \"hello_i_m_john.\"\n    fix_spaces(\"Hello, I'm Joh"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     file_name_check('a.txt') == 'No'\nassert     file_name_check('aa.txt') == 'No'\nassert     file_name_check('a.exe') == 'No'\nassert     file_name_check('a.dll') == 'No'\nassert     file_name_check('1.txt') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     file_name_check('xxx.txt') == 'No', \\\n    'Testcase 1: file_name_check(\"xxx.txt\") is invalid'\nassert     file_name_check('123.txt') == 'No', \\\n    'Testcase 2: file_name_check(\"123.txt\") is invalid'\nassert     file_name_check('123.exe') == 'No', \\\n    'Testcase 3: file_name_check(\"123.exe\") is invalid'\nassert     file_name_check('123.dll') == 'No', \\\n    'Testcase 4: file_name_check(\"123.dll\") is invalid'\nassert     file_name_check('123.txt.txt') == 'No', \\\n    'Testcase 5: file_name_check(\"123.txt.txt\") is invalid'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nfile_name = 'zero.py'\nfile_name_check(file_name) == 'No'\n\nfile_name = 'Hello.exe'\nfile_name_check(file_name) == 'Yes'\n\nfile_name = '.vim'\nfile_name_check(file_name) == 'Yes'\n\nfile_name = '.py'\nfile_name_check(file_name) == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfile_name_check('1.txt') == 'No'\nassert \nfile_name_check('a.txt') == 'No'\nassert \nfile_name_check('_2.txt') == 'No'\nassert \nfile_name_check('a2.txt') == 'No'\nassert \nfile_name_check('a.txt2') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef filer_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns \n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     file_name_check('prova.txt')     ==    'Yes', 'Hai detto che non sai come avviare questa funzione'\nassert     file_name_check('prova.exe')     ==    'No', 'Hai detto che non sai come avviare questa funzione'\nassert     file_name_check('prova.dll')     ==    'No', 'Hai detto che non sai come avviare questa funzione'\nassert     file_name_check('prova.file')     ==    'No', 'Hai detto che non sai come avviare questa funzione'\nassert     file_name_check('prova')         ==    'No', 'Hai detto che non sai come avviare questa funzione'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     file_name_check('.pptx') == 'No'\nassert file_name_check('.doc') == 'Yes'\nassert file_name_check('.pdf') == 'Yes'\nassert file_name_check('.py') == 'Yes'\nassert file_name_check('.txt') == 'Yes'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sum_squares([1,2,3,4,5]) == 30\nassert sum_squares([3,4,5,6,7]) == 45\nassert sum_squares([2,3,4,5]) == 30\nassert sum_squares([5,6,7,8]) == 30\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 1+2+9+16+25\nassert     sum_squares([1,2,3,4,5,6]) == 1+2+9+16+25+36\nassert     sum_squares([1,2,3,4,5,6,7,8,9]) == 1+2+9+16+25+36+49+64+81\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10]) == 1+2+9+16+25+36+49+64+81+100\nassert     sum_squares([1,2,3,4,5,6,7,8,9,10,11]) == 1+2+9+16+25+36+49+64+81+100+121\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_squares([2,4,6,8,9]) == 23\n\nassert \nsum_squares([1,2,3]) == 9\n\nassert \nsum_squares([4,5,6]) == 25\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(sum_squares([1,2,3,4,5]))\nassert sum_squares([1,3,5,7,9]) == 32\nassert sum_squares([1,3,5,7,9,11]) == 63\nprint(\"Test case passed!\")\nprint(\"\\n\")\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # To use this function, you must pass it a list of integers.\n    sum_squares([1, 4, 8]) == 36\n    sum_squares([0, 2, 3, 4, 5, 6, 7, 8, 9]) == 2068\n    sum_squares([]) == 0\n    sum_squares([9, 8, 7]) == 178\n    sum_squares([1, 4, 8, 9]) == 145\n    sum_squares([1, 4, 8, 9, 10]) == 1438\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14]) == 2068\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15]) == 21000\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 22016\n    sum_squares([1, 4, 8, 9, 10, 11, 12, 13, 14, 15, 1"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_in_sentence('a a a b') == 'a a'\nassert     words_in_sentence('i love sparta') == 'love'\nassert     words_in_sentence('I') == 'I'\nassert     words_in_sentence('a b c') == 'a b c'\nassert     words_in_sentence('a a b') == 'a b'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert words_in_sentence(\"a b c a b a\") == \"a a b a b a\"\nassert words_in_sentence(\"a b c a b a b\") == \"a a b a b a b\"\nassert words_in_sentence(\"a a a b b\") == \"a a a b\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef words_in_sentence_solution(sentence):\n    words = sentence.split()\n    return''.join(sorted([word for word in words if len(word) == max(map(len, words))]))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(words_in_sentence('This is a string'))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert words_in_sentence('This is a string') == 'This is a string'\n    "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_prime_number(number):\n    \"\"\"\n    You are given an integer n,\n    and you have to return True if n is prime\n    and False if n is not prime.\n    You can assume that n is a positive integer.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_in_sentence('hello') == 'hell'\nassert     words_in_sentence('hello world') == 'hell world'\nassert     words_in_sentence('hello world 123') == 'hell world'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_in_sentence('hello world') == \n        ['hello', 'world']\nassert     words_in_sentence('hello world!') == \n        ['hello', 'world']\nassert     words_in_sentence('hello world   ') == \n        ['hello', 'world']\nassert     words_in_sentence('hello world') == \n        ['hello', 'world']\nassert     words_in_sentence('hello world!') == \n        ['hello', 'world']\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"this is a sentence\") == \"this is a sentence\"\nassert     words_in_sentence(\"this is another sentence\") == \"this is a sentence\"\nassert     words_in_sentence(\"this is a third sentence\") == \"this is a sentence\"\nassert     words_in_sentence(\"\") == \"\"\nassert     words_in_sentence(\"a\") == \"a\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"hi\") == \"hi\"\nassert     words_in_sentence(\"hello world\") == \"hello world\"\nassert     words_in_sentence(\"i am a student\") == \"i am a student\"\nassert     words_in_sentence(\"it is a nice day\") == \"it is a nice day\"\n\nprint('You passed all the tests!'"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     simplify('1/4', '2') == False\nassert     simplify('1/4', '4') == False\nassert     simplify('1/4', '0') == False\nassert     simplify('1/2', '4') == False\nassert     simplify('1/2', '0') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \"\"\"\n    >>> simplify(\"10/2\", \"8/5\")\n    True\n    >>> simplify(\"20/2\", \"10/5\")\n    True\n    >>> simplify(\"1/3\", \"2/3\")\n    True\n    >>> simplify(\"1/2\", \"5/2\")\n    True\n    >>> simplify(\"1/2\", \"2/2\")\n    False\n    \"\"\"\n\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     simplify('.3/4', '1/2')\nassert     not simplify('.3/4', '1')\nassert     not simplify('.3/4', '.5')\nassert     not simplify('.3/4', '4/3')\nassert     simplify('.3/4', '1/3')\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     simplify('1/3', '2') == True\nassert     simplify('1/3', '0') == True\nassert     simplify('1/3', '-3') == False\nassert     simplify('1/3', '-2') == True\nassert     simplify('1/3', '-4') == True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     simplify(\"1/3\",\"3/3\") == False\nassert     simplify(\"3/6\",\"2/3\") == True\nassert     simplify(\"1/3\",\"1/2\") == True\nassert     simplify(\"1/2\",\"1/3\") == True\nassert     simplify(\"1/2\",\"1/6\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     simplify(    \"0.5\", \"2\") == True\nassert     simplify(    \"10/5\",    \"4\") == True\nassert     simplify(    \"7/3\",    \"2\") == False\nassert     simplify(    \"0.125\",    \"64\") == False\nassert     simplify(    \"0.5\",    \"2\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     simplify(\"3\", \"2\") == True\nassert     simplify(\"2\", \"2\") == False\nassert     simplify(\"10\", \"3\") == False\nassert     simplify(\"2\", \"1\") == False\nassert     simplify(\"2\", \"2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     simplify('2/4', '4/4') == True\nassert     simplify('2/4', '4') == False\nassert     simplify('1/4', '2') == False\nassert     simplify('-6/4', '2') == False\nassert     simplify('-5/4', '2') == False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     simplify('1/2','1/2')\nassert not simplify('1/2','1/3')\nassert simplify('1/2','3/2')\nassert not simplify('1/2','2/2')\nassert simplify('1/2','1/4')\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     simplify('1/4', '1/4') == True\nassert     simplify('1/2', '1/4') == True\nassert     simplify('1/2', '1/2') == False\nassert     simplify('1/3', '1/3') == True\nassert     simplify('2/3', '1/3') == True\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([7,5,3,2,8]) == \n            [2, 3, 5, 7, 8], \"Wrong answer\"\nassert     order_by_points([4,9,2,5]) == \n            [2, 5, 4, 9], \"Wrong answer\"\nassert     order_by_points([6,1,2,5]) == \n            [1, 2, 5, 6], \"Wrong answer\"\nassert     order_by_points([9,8,2,3]) == \n            [8, 2, 3, 9], \"Wrong answer\"\nassert     order_by_points([1,2,3,4,5]) == \n            [1, 2, 3, 4, 5], \"Wrong answer\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         order_by_points([3,1,4,1,5,9,2,6,5]) == [1, 1, 2, 3, 4, 5, 6, 5, 9]\nassert         order_by_points([9,5,3,1,8,6,2,0,4]) == [0, 1, 2, 3, 4, 5, 6, 8, 9]\nassert         order_by_points([]) == []\nassert         order_by_points([0]) == [0]\nassert         order_by_points([9,9,9,9,9,9,9,9,9]) == [0, 9, 9, 9, 9, 9, 9, 9, 9]"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([5]) == [5]\nassert     order_by_points([3,3,3]) == [3,3,3]\nassert     order_by_points([3,3,3,4,4,4,5,5,5]) == [3,3,4,4,5,5,5,3,3,3]\n\n\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     order_by_points([0,3,4,6,7]) == [-1, 2, 3, 4, 5]\nassert     order_by_points([1,2,3,4,5]) == [-1, 0, 1, 2, 3]\nassert     order_by_points([0,1,2,3,4,5]) == [-1, 0, 1, 2, 3, 4]\nassert     order_by_points([-1,0,1,2,3,4,5]) == [-1, 0, 1, 2, 3, 4, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([4,2,4]) == [-1, -1, 1]\nassert     order_by_points([-2,-4,5,6,8,4]) == [4, 5, 6, 8, 4, -2]\nassert     order_by_points([-1,4,4,5,4,6,5]) == [-1, -1, -1, 4, 4, 4, 5]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([10, 22, 4, 14, 33, 55]) == [4, 14, 22, 33, 10, 55]\nassert     order_by_points([0, 100, 25, 70, 10, 15]) == [0, 10, 10, 15, 25, 70]\nassert     order_by_points([10, 10, 10, 100, 5, 5]) == [5, 5, 10, 10, 10, 100]\nassert     order_by_points([8, 16, 16, 17, 24]) == [24, 16, 16, 17, 8]\nassert     order_by_points([10, 10, 12]) == [10, 10, 12]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     order_by_points([43,1,45,64,-3,8,32,44]) == [-3, 32, 45, 43, 64, 8, 44, 32], \"WA\"\nassert     order_by_points([43,1,45,64,-3,8,32,44]) == [-3, 32, 44, 45, 43, 64, 8, 32], \"WA\"\nassert     order_by_points([43,1,45,64,-3,8,32,44]) == [-3, 32, 44, 45, 43, 64, 8, 32], \"WA\"\nassert     order_by_points([43,1,45,64,-3,8,32,44]) == [-3, 32, 44, 45, 43, 64, 8, 32], \"WA\"\n\nprint(\"You're done!\")\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     order_by_points([-4,6,-2,3,-4,1,-3,0,1,-2]) == [-2,-3,1,-4,0,-4,3,-3,-1]\nassert     order_by_points([-5,-4,-1,3,-4,-5,5]) == [-5,-4,-4,-1,-5,-5,5]\n\nprint(\"Great success! Tests are OK\")\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([10, 12, 13, 14, 15]) == [10, 13, 14, 15, 12], \"Test Case 1\"\nassert     order_by_points([11, 11, 12, 13, 14]) == [11, 12, 13, 14, 11], \"Test Case 2\"\nassert     order_by_points([10, 12, 13, 14, 15]) == [10, 12, 13, 14, 15], \"Test Case 3\"\nassert     order_by_points([1,1,1,1,1]) == [1,1,1,1,1], \"Test Case 4\"\nassert     order_by_points([]) == [], \"Test Case 5\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     order_by_points([2, 8, 9, 3, 1, 4, 0]) == [1, 2, 3, 4, 8, 9, 0]\nassert     order_by_points([9, 8, 0, 2, 3, 1, 4]) == [1, 2, 3, 4, 8, 9, 0]\nassert     order_by_points([9, 8, 0, 2, 3, 1, 4, 5]) == [1, 2, 3, 4, 5, 8, 9, 0]\nassert     order_by_points([9, 0, 2, 3, 1, 4, 5, 8]) == [1, 2, 3, 4, 5, 8, 9, 0]\nassert     order_by_points([9, 0, 2, 3, 1, 4, 5, 8, 8]) == [1, 2, 3, 4, 5, 8, 8, 9, 0]\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     specialFilter(nums1) == 7\nassert     specialFilter(nums2) == 4\nassert     specialFilter(nums3) == 5\nassert     specialFilter(nums4) == 2\nassert     specialFilter(nums5) == 3"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(specialFilter([10,2,3,4,5,6,7,8,9]))\nassert specialFilter([10,2,3,4,5,6,7,8,9]) == 1\nassert specialFilter([10,2,3,4,5,6,7,8,9,10]) == 5\nassert specialFilter([10,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 27\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     specialFilter([0, 3, 5, 7, 9, 10, 12, 15, 17, 19]) == 2\nassert     specialFilter([1, 3, 5, 7, 9, 10, 12, 15, 17, 19]) == 3\nassert     specialFilter([20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]) == 2\nassert     specialFilter([0, 3, 5, 7, 9, 10, 12, 15, 17, 19]) == 3\nassert     specialFilter([20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert specialFilter([10, 11, 5, 5, 3, 9, 4, 2, 7, 2, 1, 9]) == 6\nassert specialFilter([1, 1, 9, 9]) == 2\nassert specialFilter([1, 1, 9, 11, 11, 5, 5, 3, 9, 4, 2, 7, 2, 1, 9]) == 10\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     specialFilter([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 2\nassert specialFilter([12, 8, 5, 105, 20, 55, 75, 90]) == 0\nassert specialFilter([1, 3, 5, 7, 9]) == 4\nassert specialFilter([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 2\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_triples(4) == 2\nassert     get_max_triples(10) == 7\nassert     get_max_triples(15) == 9\nassert     get_max_triples(100) == 39\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_max_triples(3) == 1, \"You are very wrong!\"\nassert     get_max_triples(4) == 2, \"You are very wrong!\"\nassert     get_max_triples(5) == 4, \"You are very wrong!\"\nassert     get_max_triples(6) == 5, \"You are very wrong!\"\nassert     get_max_triples(7) == 9, \"You are very wrong!\"\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nget_max_triples(10) == 5\n\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\"\"\"\nIdea is that one can construct a triangular number, which is a triangular number that is a multiple of 3. \nThe triangle number is defined as the sum of the integers from 1 to n.\n\nWe need to find the number of 3-number pairs that satisfy the above condition.\n\nTo determine if a number can be represented as a sum of two triangular numbers, we need to check if that sum is divisible by 3.\n\nYou can construct the first triangle number by summing the first 3 numbers and subtracting one from the sum. \n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_triples(3) == 2\nassert     get_max_triples(4) == 4\nassert     get_max_triples(5) == 6"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 3\nassert     get_max_triples(10) == 36\nassert     get_max_triples(11) == 58\nassert     get_max_triples(20) == 3436\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(get_max_triples(3))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bf('mercury','venus') == ('venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert     bf('mercury','venus') == ('venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert     bf('mercury','venus') == ('venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    bf(\"Mercury\", \"Venus\") == (\"Mercury\", \"Venus\")\n    bf(\"Mercury\", \"Earth\") == (\"Mercury\", \"Earth\")\n    bf(\"Mercury\", \"Mars\") == (\"Mercury\", \"Mars\")\n    bf(\"Venus\", \"Earth\") == (\"Venus\", \"Earth\")\n    bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\")\n    bf(\"Mars\", \"Jupiter\") == (\"Mars\", \"Jupiter\")\n    bf(\"Jupiter\", \"Saturn\") == (\"Jupiter\", \"Saturn\")\n    bf(\"Saturn\", \"Uranus\") == (\"Saturn\", \"Uranus\")\n    bf(\"Uranus\", \"Neptune\") == (\"Uranus\", \"Neptune\")\n    bf(\"Mercury\", \"Earth\")!= (\"Mercury\", \"Earth\")\n    bf(\"Mercury\", \"Mars\")!= (\"Mercury\", \"Mars\")\n    bf(\"Venus\", \"Mars\")!= (\"Venus\", \"Mars\")\n    bf(\"Mars\", \"Jupiter\")!= (\"Mars\", \"Jupiter\")\n    bf(\"Earth\", \"Saturn\")!= (\"Earth\", \"Saturn\")\n    bf(\"Mars\", \"Saturn\")!= (\"Mars\", \"Saturn\")\n    bf(\"Mars\", \"Uranus\")!= (\"Mars\", \"Uranus\")\n    bf(\"Jupiter\", \"Uranus\")!= (\"Jupiter\", \"Uranus\")\n    bf(\"Saturn\", \"Neptune\")!= (\"Saturn\", \"Neptune\")\n    bf(\"Mars\", \"Neptune\")!= (\"Mars\", \"Neptune\")\n    bf(\"Mars\", \"Earth\")!= (\"Mars\", \"Earth\")\n    bf(\"Earth\", \"Neptune\")!= (\"Earth\", \"Neptune\")\n    bf(\"Mercury\", \"Mars\")!= (\"Mercury\", \"Mars\")\n    bf(\"Venus\", \"Earth\")!= (\"Venus\", \"Earth\")\n    bf(\"Mars\", \"Earth\")!= (\"Mars\", \"Earth\")\n    bf(\"Mars\", \"Mercury\")!= (\"Mars\", \"Mercury\")\n    bf(\"Earth\", \"Mercury\")!= (\"Earth\", \"Mercury\")\n    bf(\"Mercury\", \"Jupiter\")!= (\"Mercury\", \"Jupiter\")\n    bf(\"Venus\", \"Mercury\")!= (\"Venus\", \"Mercury\")\n    bf(\"Mars\", \"Jupiter\")!= (\"Mars\", \"Jupiter\")\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mercury', 'Earth') == ('Mercury',)\nassert     bf('Mars', 'Earth') == ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Uranus') == ('Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Mars', 'Venus') == ('Mars',)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(bf('mercury','venus'))\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bf('mercury','venus') == ('mercury','venus'), \"Mercury and Venus are not the same\"\nassert     bf('venus','mercury') == ('venus','mercury'), \"Venus and Mercury are not the same\"\nassert     bf('earth','venus') == ('earth',), \"Earth is the only planet that is Mars\"\nassert     bf('mercury', 'earth') == (), \"Mercury is not the only planet that is Mars\"\nassert     bf('venus', 'earth') == ('venus', 'earth'), \"Venus is not the only planet that is Mars\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bf('Earth', 'Jupiter') == ('Mars', 'Saturn', 'Uranus'), 'incorrect'\nassert     bf('Earth', 'Jupiter') == ('Mars', 'Saturn', 'Uranus'), 'incorrect'\nassert     bf('Mars', 'Saturn') == ('Earth', 'Jupiter', 'Uranus'), 'incorrect'\nassert     bf('Mars', 'Saturn') == ('Earth', 'Jupiter', 'Uranus'), 'incorrect'\nassert     bf('Earth', 'Mars') == ('Jupiter', 'Saturn', 'Uranus'), 'incorrect'\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (sorted(bf('venus','saturn')) == ['venus', 'jupiter', 'neptune'])\n\ndef bf_2(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    pass\n\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(sorted_list_sum([\"cat\", \"cat\", \"cat\", \"cat\"])) #[\"cat\", \"cat\", \"cat\"]\nprint(sorted_list_sum([\"bat\", \"dog\", \"foo\", \"cat\"])) #[\"cat\", \"cat\", \"bat\", \"dog\"]\nprint(sorted_list_sum([\"bat\", \"foo\", \"dog\", \"cat\"])) #[\"bat\", \"bat\", \"dog\", \"cat\"]\nprint(sorted_list_sum([\"cat\", \"dog\", \"bat\", \"cat\"])) #[\"cat\", \"bat\", \"cat\", \"dog\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sorted_list_sum(['purple', 'blue', 'yellow','red', 'black', 'white', 'brown', 'orange']) == ['purple','red', 'black', 'white', 'orange', 'yellow', 'blue', 'brown']\nassert     sorted_list_sum(['purple', 'blue', 'yellow','red', 'black', 'white', 'brown', 'orange', 'green']) == ['purple', 'green', 'blue', 'brown', 'orange', 'yellow','red', 'black', 'white']\nassert     sorted_list_sum(['purple', 'blue', 'yellow','red', 'black', 'white', 'brown', 'orange', 'green', 'white']) == ['purple', 'green', 'brown', 'orange', 'yellow', 'white', 'blue', 'black', 'white']\nassert     sorted_list_sum(['purple', 'blue', 'yellow','red', 'black', 'white', 'brown', 'orange', 'green', 'white', 'white']) == ['purple', 'blue', 'brown', 'orange', 'green', 'white', 'yellow','red', 'white', 'black']\nassert     sorted_list_sum(['purple', 'blue', 'yellow','red', 'black', 'white', 'brown', 'orange', 'green', 'white', 'white', 'white']) == ['purple', 'blue', 'brown', 'orange', 'green', 'white', 'yellow','red', 'white', 'black', 'white']\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sorted_list_sum([\"hi\", \"ho\", \"hi\", \"ho\"]) == [\"ho\", \"hi\"]\nassert sorted_list_sum([\"hi\", \"ho\"]) == [\"ho\", \"hi\"]\nassert sorted_list_sum([\"hi\", \"hi\"]) == [\"hi\"]\nassert sorted_list_sum([\"hi\", \"ho\", \"hi\", \"ho\", \"hi\", \"hi\"]) == [\"ho\", \"ho\", \"hi\", \"hi\", \"hi\"]\nassert sorted_list_sum([\"ho\", \"ho\", \"hi\", \"hi\", \"hi\", \"hi\"]) == [\"ho\", \"ho\", \"hi\", \"hi\", \"hi\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(sorted_list_sum(['how', 'are', 'you', 'no','very']))\nprint(sorted_list_sum(['are', 'you', 'no','very']))\nprint(sorted_list_sum(['very', 'no', 'are', 'you']))\nprint(sorted_list_sum(['very', 'are', 'you', 'no']))\nprint(sorted_list_sum(['how', 'are', 'you','very']))\nprint(sorted_list_sum(['no','very', 'how', 'are', 'you']))\nprint(sorted_list_sum(['very', 'how', 'are', 'you']))"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     x_or_y(5, 0, 1) == 1\nassert     x_or_y(5, 1, 0) == 0\nassert     x_or_y(20, 1, 1) == 1\nassert     x_or_y(9, 0, 1) == 0\n\nprint(\"Hurray! Test case passed\")\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert x_or_y(4, x=1, y=2) == 1\nassert x_or_y(5, x=1, y=2) == 2\nassert x_or_y(6, x=1, y=2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     x_or_y(5, 1, 2)         == 2\nassert     x_or_y(5, 2, 1)         == 2\nassert     x_or_y(7, 1, 2)         == 1\nassert     x_or_y(7, 2, 1)         == 2\nassert     x_or_y(5, 2, 2)         == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     x_or_y(2, 0, 0)     == 0\nassert     x_or_y(3, 0, 1)    == 1\nassert     x_or_y(0, 0, 1)    == 0\nassert     x_or_y(0, 0, 0)    == 0\nassert     x_or_y(1, 0, 0)    == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(x_or_y(2, 2, 3))\nprint(x_or_y(3, 2, 3))\nprint(x_or_y(5, 2, 3))\nprint(x_or_y(2, 2, 2))\nprint(x_or_y(2, 5, 2))\nprint(x_or_y(2, 2, 5))\nprint(x_or_y(5, 5, 5))\nprint(x_or_y(2, 2, 2))\nprint(x_or_y(5, 5, 2))\n\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert x_or_y(9, 2, 8) == 2\nassert x_or_y(9, 2, 3) == 2\nassert x_or_y(9, 2, 7) == 7\nassert x_or_y(9, 2, 4) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(4, 1, 1) == 1\nassert     x_or_y(5, 1, 1) == 1\nassert     x_or_y(7, 1, 1) == 1\nassert     x_or_y(11, 1, 1) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     x_or_y(5, 1, 2) == 2\nassert     x_or_y(7, 1, 2) == 2\nassert     x_or_y(5, 2, 1) == 2\nassert     x_or_y(7, 2, 1) == 1\nassert     x_or_y(5, 1, 1) == 1\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    double_the_difference([1, 2, 3]) == 0\n    double_the_difference([]) == 0\n    double_the_difference([-2, -1, -4, -3, -5, -6, -7, -8, -9]) == 34\n    double_the_difference([3, 5, -1, -4, 7]) == 14\n    double_the_difference([-2, -1, -4, -3, -5, -6, -7, -8, -9]) == 82\n    double_the_difference([2,3,4,5,6,7,8,9,10]) == 0\n    double_the_difference([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 2\n    double_the_difference([2,2,4,4,6,6,8,8,10,10,12,12,14,14,16,16,18,18,20,20,22,22,24,24]) == 4\n    double_the_difference([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6]) == 14\n    double_the_difference([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -1\n    double_the_difference([]) == 0\n    double_the_difference([-2, -1, -4, -3, -5, -6, -7, -8, -9]) == -10\n    double_the_difference([-1, 2, -4, 1, -4, 1]) == 8\n    double_the_difference([-2, -1, -4, -3, -5, -6, -7, -8, -9]) == -13\n    double_the_difference([-2, -1, -4, -3, -5, -6, -7, -8, -9]) == -13\n    double_the_difference([]) == 0\n\nprint('Testing double_the_difference()...')"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     double_the_difference([1,2,3,4,5,6]) == 21\nassert double_the_difference([1,2,3,4,5,6,7]) == 22\nassert double_the_difference([1,2,3,4,5,6,7,8]) == 32\nassert double_the_difference([1,2,3,4,5,6,7,8,9]) == 35\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     double_the_difference([1,2,3,4,5]) == 10, 'Not correct.'\nassert     double_the_difference([-1,0,4,9]) == 14, 'Not correct.'\nassert     double_the_difference([-1,4,9]) == 9, 'Not correct.'\nassert     double_the_difference([1,2,3,4,5,6]) == 20, 'Not correct.'\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     double_the_difference([1, 2, 3, 4, 5, 6, 7, 8]) == 30\nassert     double_the_difference([1, 2, 3, 4, 5, -6, -7, -8]) == 0\nassert     double_the_difference([]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     double_the_difference([1,2,3,4])    == 14\nassert     double_the_difference([-1,-2,-3])    == 14\nassert     double_the_difference([])     == 0\nassert     double_the_difference([1,2,3,4.0,5.0,6,7])     == 38\nassert     double_the_difference([-1,2,3,4,5,6])     == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     double_the_difference([1,2,3,4]) == 9\nassert     double_the_difference([0,2,3,4]) == 0\nassert     double_the_difference([-1,2,3,4]) == 13\nassert     double_the_difference([]) == 0\nassert     double_the_difference([0]) == 0\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"The sum of squares of the odd numbers in the list is\", double_the_difference([1,2,3,4,5,6,7,8,9]))\n    print(\"The sum of squares of the even numbers in the list is\", double_the_difference([1,2,3,4,5,6,7,8,9,10])"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     double_the_difference([1, 5, 4]) == 12, 'Wrong result!'\nassert     double_the_difference([-3, 4, -5, -4]) == 4, 'Wrong result!'\nassert     double_the_difference([1, 5, 4, 2]) == 21, 'Wrong result!'\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare([5,5],[3,5])==[0,0], 'incorrect'\nassert     compare([3,3],[1,3])==[0,0], 'incorrect'\nassert     compare([1,4],[1,1])==[0,0], 'incorrect'\nassert     compare([5,5],[1,1])==[0,1], 'incorrect'\nassert     compare([5,5],[2,2])==[0,2], 'incorrect'\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare([2, 1, 1, 1, 4, 3, 5, 4, 5, 5, 1, 2, 1, 2, 1, 1], [1, 1, 2, 3, 3, 3, 2, 1, 1, 3, 2, 2, 4, 1, 4, 4, 2, 4]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert    compare([4, 1, 1, 4, 1, 2, 1, 3, 4, 4, 3, 1, 2, 1, 4, 4, 4, 3], [4, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 3]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare([5,10,15,20], guess = [20,25,30,35]) == [0,2,3,4]\nassert     compare([5,10,15,20], guess = [30,25,20,35]) == [2,1,3,4]\nassert     compare([5,10,15,20], guess = [25,30,35,40]) == [1,3,2,4]\nassert     compare([5,10,15,20], guess = [35,25,40,30]) == [4,1,2,3]\nassert     compare([5,10,15,20], guess = [10,20,25,30]) == [1,2,4,3]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare([[1,2,3,4,5,6,7,8,9],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10]],[[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10],[10,10,10,10,10,10,10,10,10]]) == [[0,1,2,3,4,5,6,7,8],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0]], True\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare([11, 21, 15, 29, 38, 38, 47, 51, 59, 35, 39, 38], [11, 23, 29, 31, 33, 47, 51, 59, 39, 38, 38, 39]) == [0, 0, 0, 3, 4, 1, 0, 0, 4, 3, 4, 2], 'test 1'\nassert     compare([11, 21, 15, 29, 38, 38, 47, 51, 59, 35, 39, 38], [11, 21, 29, 15, 47, 31, 39, 59, 35, 38, 38, 39]) == [0, 0, 0, 3, 1, 1, 0, 2, 1, 0, 2, 4], 'test 2'\nassert     compare([11, 21, 15, 29, 38, 38, 47, 51, 59, 35, 39, 38], [11, 23, 29, 31, 33, 47, 51, 59, 39, 38, 38, 39]) == [0, 0, 0, 3, 3, 4, 2, 4, 2, 0, 3, 1], 'test 3'\nassert     compare([11, 21, 15, 29, 38, 38, 47, 51, 59, 35, 39, 38], [11, 31, 29, 15, 47, 33, 39, 59, 35, 38, 38, 39]) == [0, 0, 0, 1, 2, 3, 2, 4, 1, 0, 2, 4], 'test 4'\nassert     compare([11, 21, 15, 29, 38, 38, 47, 51, 59, 35, 39, 38], [11, 29, 31, 33, 47, 35, 39, 59, 35, 38, 38, 39]) == [0, 0, 0, 3, 4, 1, 4, 2, 2, 0, 2, 0], 'test 5'\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare([3,1,4],[4,2,3])==[0,0]\nassert     compare([3,2,1],[3,2,1])==[0,1]\nassert     compare([2,2,1],[3,2,1])==[0,1]\nassert     compare([1,4,3],[2,2,3])==[1,1]\nassert     compare([1,1,1],[1,2,3])==[0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare([3,2,4,1], [2,5,4,3]) ==  [0, 1, 0, 0], \"You got it wrong!\"\nassert     compare([3,2,4,1], [2,5,1,3]) ==  [0, 1, 0, 0], \"You got it wrong!\"\nassert     compare([3,2,4,1], [2,5,2,3]) ==  [0, 1, 1, 0], \"You got it wrong!\"\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare([1,1,1],[1,1,1]) == [0,0,0], 'incorrect result'\nassert     compare([1,1,2],[1,1,1]) == [0,0,1], 'incorrect result'\nassert     compare([1,2,1],[1,1,1]) == [0,1,0], 'incorrect result'\nassert     compare([1,2,2],[1,1,1]) == [0,1,1], 'incorrect result'\nassert     compare([1,2,3],[1,1,1]) == [0,1,2], 'incorrect result'\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare([12,33,99,75,100], [100,33,99,75,100]) == [0,33,33,33,0]\nassert     compare([92,30,72,90,100], [100,33,99,75,100]) == [0,30,0,30,0]\nassert     compare([12,33,99,75,100], [92,30,72,90,100]) == [33,33,0,0,33]\nassert     compare([11,88,13,90,100], [92,30,72,90,100]) == [0,88,0,88,0]\n\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['Cheese', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Doughnuts', 'Doughnuts', 'Cheese', 'Cheese', 'StuFfed'])"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes', 'Not Correct'\nassert     Strongest_Extension('Cheese', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Cheese', 'Not Correct'\nassert     Strongest_Extension('Chips', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Chips', 'Not Correct'\nassert     Strongest_Extension('Kapok', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Kapok', 'Not Correct'\nassert     Strongest_Extension('Bacon', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Bacon', 'Not Correct'\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Slices.SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['Slices.SErviNGSliCes', 'Cheese', 'Slices.SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Slices.SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.Cheese.Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices']) == 'Slices.SErviNGSliCes.Cheese.Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.Cheese.Slices.SErviNGSliCes.Cheese.Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.Cheese.Slices.SErviNGSliCes.Cheese.Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"You should now test your knowledge of 'Strongest Extension'\")"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cycpattern_check('waterbottle','erbottlewat') == True\nassert     cycpattern_check('waterbottle','erbottlew') == False\nassert     cycpattern_check('waterbottle','erbottle') == True\nassert     cycpattern_check('waterbottle','watererbottle') == False\nassert     cycpattern_check('waterbottle','waterbottle') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check(\"alleron\",\"ler\") == True, 'Wrong Answer'\nassert     cycpattern_check(\"pearl\",\"tear\") == False, 'Wrong Answer'\nassert     cycpattern_check(\"holmes\",\"holmes\") == True, 'Wrong Answer'\nassert     cycpattern_check(\"a\",\"b\") == False, 'Wrong Answer'\nassert     cycpattern_check(\"a\",\"aa\") == False, 'Wrong Answer'\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Tests for cycpattern_check passed:\")\nprint(\"---\")\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cycpattern_check(\"matrix\", \"atrix\")    == True\nassert     cycpattern_check(\"matrix\", \"trix\")    == False\nassert     cycpattern_check(\"matrix\", \"yatrix\")    == True\nassert     cycpattern_check(\"matrix\", \"ymaxrix\")    == True\nassert     cycpattern_check(\"matrix\", \"xyatrix\")    == False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cycpattern_check( \"waterbottle\",\"erbottlewat\") == True\nassert     cycpattern_check( \"waterbottle\",\"erbottlew\") == False\nassert     cycpattern_check( \"waterbottle\",\"erbottlewa\") == False\nassert     cycpattern_check(\"waterbottle\",\"erbottlewa\") == False\nassert     cycpattern_check(\"waterbottle\",\"erbottlewa\") == False\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cycpattern_check(\"waterbottle\", \"erbottlewat\") == True, \"Wrong Answer\"\nassert     cycpattern_check(\"waterbottle\", \"erbottlewaw\") == False, \"Wrong Answer\"\nassert     cycpattern_check(\"waterbottle\", \"erbottlewat\") == False, \"Wrong Answer\"\n\ndef digital_root(n):\n    \"\"\"Your task is to convert a non-negative integer into its english words representation\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cycpattern_check(\"abc\", \"abc\") == True, \"Should be True\"\nassert     cycpattern_check(\"abc\", \"cba\") == True, \"Should be True\"\nassert     cycpattern_check(\"abc\", \"bca\") == True, \"Should be True\"\nassert     cycpattern_check(\"abc\", \"acb\") == True, \"Should be True\"\nassert     cycpattern_check(\"abc\", \"abc\") == True, \"Should be True\"\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cycpattern_check('abcde', 'ca') == True, \"first\"\nassert     cycpattern_check('abcde', 'abc') == True, \"second\"\nassert     cycpattern_check('abcde', 'abd') == True, \"third\"\nassert     cycpattern_check('abcde', 'abde') == False, \"fourth\"\nassert     cycpattern_check('abcde', 'abfde') == False, \"fifth\"\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cycpattern_check('xyz', 'xzz')     == True     \nassert     cycpattern_check('xyz', 'yzz')     == True     \nassert     cycpattern_check('xyz', 'zxy')     == False     \nassert     cycpattern_check('xyz', 'xzx')     == False     \nassert     cycpattern_check('xyz', 'zyx')     == False     \n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cycpattern_check(\"abcd\",\"cba\") == True\nassert     cycpattern_check(\"abcd\",\"a\") == False\nassert     cycpattern_check(\"\",\"abc\") == False\nassert     cycpattern_check(\"a\",\"\") == True\nassert     cycpattern_check(\"\",\"\") == False\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(even_odd_count(2714))\nprint(even_odd_count(1111))\nprint(even_odd_count(34321))\nprint(even_odd_count(124311))\nprint(even_odd_count(124311))\nprint(even_odd_count(4321))\nprint(even_odd_count(0))\nprint(even_odd_count(1))\nprint(even_odd_count(2))\nprint(even_odd_count(3))\nprint(even_odd_count(4))\nprint(even_odd_count(5))\nprint(even_odd_count(6))\nprint(even_odd_count(7))\nprint(even_odd_count(8))\nprint(even_odd_count(9))\nprint(even_odd_count(10))\nprint(even_odd_count(11))\nprint(even_odd_count(12))\nprint(even_odd_count(13))\nprint(even_odd_count(14))\nprint(even_odd_count(15))\nprint(even_odd_count(16))\nprint(even_odd_count(17))\nprint(even_odd_count(18))\nprint(even_odd_count(19))\nprint(even_odd_count(20))\nprint(even_odd_count(21))\nprint(even_odd_count(22))\nprint(even_odd_count(23))\nprint(even_odd_count(24))\nprint(even_odd_count(25))\nprint(even_odd_count(26))\nprint(even_odd_count(27))\nprint(even_odd_count(28))\nprint(even_odd_count(29))\nprint(even_odd_count(30))\nprint(even_odd_count(31))\nprint(even_odd_count(32))\nprint(even_odd_count(33))\nprint(even_odd_count(34))\nprint(even_odd_count(35))\nprint(even_odd_count(36))\nprint(even_odd_count(37))\nprint(even_odd_count(38))\nprint(even_odd_count(39))\nprint(even_odd_count(40))\nprint(even_odd_count(41))\nprint(even_odd_count(42))\nprint(even_odd_count(43))\nprint(even_odd_count(44))\nprint(even_odd_count(45))\nprint(even_odd_count(46))\nprint(even_odd_count(47))\nprint(even_odd_count(48))\nprint(even_odd_count(49))\nprint(even_odd_count(50))\nprint(even_odd_count(51))\nprint(even_odd_count(52))\nprint(even_odd_count(53))\nprint(even_odd_count(54))\nprint(even_odd_count(55))\nprint(even_odd_count(56))\nprint(even_odd_count(57))\nprint(even_odd_count(58))\nprint(even_odd_count(59))\nprint(even_odd_count(60))\nprint(even_odd_count(61))\nprint(even_odd_count(62))\nprint(even_odd_count(63))\nprint(even_odd_count(64))\nprint(even_odd_count(65))\nprint(even_odd_count(66))\nprint(even_odd_count(67))\nprint(even_odd_count(68))\nprint(even_odd_count(69))\nprint(even_odd_count(70))\nprint(even_odd_count(71))\nprint(even_odd_count(72))\nprint(even_odd_count(73))\nprint(even_odd_count(74))\nprint(even_odd_count(75))\nprint(even_odd_count(76))\nprint(even_odd_count(77))\nprint(even_odd_count(78))\nprint(even_odd_count(79))\nprint(even_odd_count(80))\nprint(even_odd_count(81))\nprint(even_odd_count(82))\nprint(even_odd_count(83))\nprint(even_odd_count(84))\nprint(even_odd_count(85))\nprint(even"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_count(123) == (3, 0)\nassert     even_odd_count(555) == (3, 1)\nassert     even_odd_count(1234) == (0, 4)\nassert even_odd_count(0) == (0, 0)\nassert even_odd_count(1) == (0, 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_odd_count(10) == (2,4)\nassert     even_odd_count(11) == (3,1)\nassert     even_odd_count(12) == (4,2)\nassert     even_odd_count(13) == (1,3)\nassert     even_odd_count(14) == (0,0)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(even_odd_count(1))\nprint(even_odd_count(2))\nprint(even_odd_count(33))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_count(0) == (0, 0)\nassert even_odd_count(1) == (0, 1)\nassert even_odd_count(2) == (0, 1)\nassert even_odd_count(10) == (1, 9)\nassert even_odd_count(11) == (1, 10)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_count(1234567) == (2,3)\nassert     even_odd_count(12345) == (2,4)\nassert     even_odd_count(345) == (0,1)\nassert     even_odd_count(0) == (0,0)\nassert     even_odd_count(1000) == (2,8)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_count(123) == (3, 1), \"Expected (3, 1) for even_odd_count(123)\"\nassert     even_odd_count(1233) == (1, 3), \"Expected (1, 3) for even_odd_count(1233)\"\nassert     even_odd_count(1234) == (1, 2), \"Expected (1, 2) for even_odd_count(1234)\"\nassert     even_odd_count(12345) == (4, 1), \"Expected (4, 1) for even_odd_count(12345)\"\nassert     even_odd_count(123456) == (4, 0), \"Expected (4, 0) for even_odd_count(123456)\"\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    even_odd_count(4) == (1,0)\n    even_odd_count(9) == (0,1)\n    even_odd_count(2) == (0,1)\n    even_odd_count(5) == (1,0)\n    even_odd_count(921) == (1,0)\n    even_odd_count(10) == (0,1)\n    even_odd_count(19) == (2,0)\n    even_odd_count(18) == (2,0)\n    even_odd_count(17) == (1,0)\n    even_odd_count(11) == (1,0)\n    even_odd_count(22) == (0,1)\n    even_odd_count(23) == (0,1)\n    even_odd_count(24) == (0,1)\n    even_odd_count(25) == (0,1)\n    even_odd_count(26) == (0,1)\n    even_odd_count(3) == (0,1)\n    even_odd_count(1) == (0,1)\n    even_odd_count(5) == (1,0)\n    even_odd_count(10) == (0,1)\n    even_odd_count(100) == (1,0)\n    even_odd_count(201) == (0,1)\n    even_odd_count(203) == (0,1)\n    even_odd_count(205) == (0,1)\n    even_odd_count(102) == (1,0)\n    even_odd_count(207) == (0,1)\n    even_odd_count(210) == (0,1)\n    even_odd_count(210) == (0,1)\n    even_odd_count(211) == (0,1)\n    even_odd_count(212) == (0,1)\n    even_odd_count(213) == (0,1)\n    even_odd_count(214) == (0,1)\n    even_odd_count(215) == (0,1)\n    even_odd_count(216) == (0,1)\n    even_odd_count(217) == (0,1)\n    even_odd_count(218) == (0,1)\n    even_odd_count(219) == (0,1)\n    even_odd_count(220) == (0,1)\n    even_odd_count(221) == (0,1)\n    even_odd_count(222) == (0,1)\n    even_odd_count(223) == (0,1)\n    even_odd_count(224) == (0,1)\n    even_odd_count(225) == (0,1)\n    even_odd_count(226) == (0,1)\n    even_odd_count(227) == (0,1)\n    even_odd_count(228) == (0,1)\n    even_odd_count(229) == (0,1)\n    even_odd_count(230) == (0,1)\n    even_odd_count(231) == (0,1)\n    even_odd_count(232) == (0,1)\n    even_odd_count(233) == (0,1)\n    even_odd_count(234) == (0,1)\n    even_odd_count(235) == (0,1)\n    even_odd_count(236) == (0,1)\n    even_odd_count(237) == (0,1)\n    even_odd_count(238) == (0,1)\n    even_odd_count(239) == (0,1)\n    even_odd_count(240) == (0,1)\n    even_odd_count(241) == (0,1)\n    even_odd_count(242) == (0,1)\n    even_odd_count(243) == (0,1)\n    even_odd_count(244) == (0,1)\n    even_odd_count(245) == (0,1)\n    even_odd_count(246) == (0,1)\n    even_odd_count(247) == (0,"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(9) == 'IX'\nassert     int_to_mini_roman(29) == 'XXXIX'\nassert     int_to_mini_roman(999) == 'MCCLXXXIX'\nassert     int_to_mini_roman(2000) == 'MMMM'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef int_to_roman_numeral(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 4000\n    \"\"\"\n    pass\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == \"i\"\nassert     int_to_mini_roman(2) == \"ii\"\nassert     int_to_mini_roman(3) == \"iii\"\nassert     int_to_mini_roman(4) == \"iv\"\nassert     int_to_mini_roman(5) == \"v\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(1) == 'i'\nassert     int_to_mini_roman(2) == 'ii'\nassert     int_to_mini_roman(3) == 'iii'\nassert     int_to_mini_roman(4) == 'iv'\nassert     int_to_mini_roman(5) == 'v'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(100) == 'C'\nassert     int_to_mini_roman(13) == 'XIII'\nassert     int_to_mini_roman(16) == 'XVI'\nassert     int_to_mini_roman(19) == 'XIX'\nassert     int_to_mini_roman(27) == 'XXVII'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nright_angle_triangle(1, 1, 1) == False\nright_angle_triangle(1, 1, 2) == False\nright_angle_triangle(1, 1, 3) == False\nright_angle_triangle(1, 2, 1) == False\nright_angle_triangle(1, 2, 2) == False\nright_angle_triangle(1, 2, 3) == False\nright_angle_triangle(1, 3, 1) == False\nright_angle_triangle(1, 3, 2) == False\nright_angle_triangle(1, 3, 3) == False\nright_angle_triangle(2, 1, 1) == False\nright_angle_triangle(2, 1, 2) == False\nright_angle_triangle(2, 1, 3) == False\nright_angle_triangle(2, 2, 1) == False\nright_angle_triangle(2, 2, 2) == True\nright_angle_triangle(2, 2, 3) == False\nright_angle_triangle(2, 3, 1) == False\nright_angle_triangle(2, 3, 2) == False\nright_angle_triangle(2, 3, 3) == False\nright_angle_triangle(3, 1, 1) == False\nright_angle_triangle(3, 1, 2) == False\nright_angle_triangle(3, 1, 3) == False\nright_angle_triangle(3, 2, 1) == False\nright_angle_triangle(3, 2, 2) == False\nright_angle_triangle(3, 2, 3) == True\nright_angle_triangle(3, 3, 1) == False\nright_angle_triangle(3, 3, 2) == False\nright_angle_triangle(3, 3, 3) == True"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(4, 5, 6) == False\nassert right_angle_triangle(2, 2, 3) == True\nassert right_angle_triangle(4, 5, 3) == False\nassert right_angle_triangle(3, 3, 4) == False\nassert right_angle_triangle(2, 2, 2) == True\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(right_angle_triangle(1, 2, 3))\nprint(right_angle_triangle(5, 6, 7))\nprint(right_angle_triangle(1, 1, 1)"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_max([\"hello\",\"world\",\"hi\",\"hello\",\"hi\"]) == \"hello\", \\\n        \"incorrect\"\nassert     find_max([\"hello\",\"world\",\"hi\",\"hello\",\"hi\",\"hello\",\"hello\"]) == \\\n        \"hello\", \\\n        \"incorrect\"\nassert     find_max([\"hello\",\"world\",\"hi\",\"hello\",\"hi\",\"hello\",\"hello\",\"hi\"]) == \\\n        \"hello\", \\\n        \"incorrect\"\nassert     find_max([\"hello\",\"world\",\"hi\",\"hello\",\"hi\",\"hello\",\"hello\",\"hi\",\"hi\"]) == \\\n        \"hello\", \\\n        \"incorrect\"\nassert     find_max([\"hello\",\"world\",\"hi\",\"hello\",\"hi\",\"hello\",\"hello\",\"hi\",\"hi\"]) == \\\n        \"hello\", \\\n        \"incorrect\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_max(['a','sasdasdas', 'a']) =='sasdasdas'\nfind_max(['a','sasdasdas','sasdasdas']) =='sasdasdas'\nfind_max(['a','sasdasdas', 'a', 'a']) =='sasdasdas'\nfind_max(['a','sasdasdas','sasdasdas', 'a','sasdasdas']) =='sasdasdas'\nfind_max(['a', 'a', 'a', 'a']) == 'a'\nfind_max([]) == None\nfind_max(['']) == None\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_max([\"abcd\", \"efgh\", \"fghi\"]) == \"fghi\"\nassert     find_max([\"abcde\", \"y\"]) == \"abcde\"\nassert     find_max([\"abcd\", \"efgh\", \"fghi\"]) == \"fghi\"\nassert     find_max([\"abcd\", \"efgh\"]) == \"efgh\"\n\nprint('All tests passed')"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_max([\"hello\", \"a\", \"a\"]) == \"hello\"\nassert     find_max([\"hello\", \"a\", \"a\", \"a\", \"a\"]) == \"hello\"\nassert     find_max([\"hi\", \"hello\"]) == \"hello\"\nassert     find_max([\"hi\", \"hello\", \"hi\", \"hello\"]) == \"hi\"\nassert     find_max([\"welcome\", \"to\", \"2020\"]) == \"2020\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_min(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with minimum number\n    of unique characters. If multiple words have minimum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_max([\"hello\", \"Hi\", \"He\"]) == \"Hi\"\nassert find_max([\"hello\", \"hello\", \"He\"]) == \"hello\"\nassert find_max([\"hello\", \"hey\", \"hello\", \"he\"]) == \"hello\"\nassert find_max([\"hello\", \"hey\", \"hello\", \"he\", \"he\", \"he\", \"he\"]) == \"hello\""
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_max(['abcd', 'abe', 'abcd', 'a']) == 'abcd'\nassert     find_max(['abcd', 'abcd', 'abe', 'a']) == 'abcd'\nassert     find_max(['abcd', 'abe', 'abcd', 'a']) == 'abe'\nassert     find_max(['abcd', 'abe', 'abcd', 'a', 'a']) == 'abe'\nprint('  Check passed.')\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_max(['leet', 'leetcode', 'love']) == 'leetcode'\nassert     find_max(['cat', 'dog']) == 'dog'\nassert     find_max(['apple', 'book', 'cat']) == 'book'\nassert     find_max(['leet', 'code', 'cats']) == 'cats'\nassert     find_max(['e', 'el', 'l']) == 'l'\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eat(4,2,2) ==    [6,2]\nassert     eat(1,2,2) ==    [3,2]\nassert     eat(2,2,2) ==    [4,2]\nassert     eat(3,2,2) ==    [5,2]\nassert     eat(4,2,2) ==    [6,2]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eat(0, 0, 0) == None\nassert     eat(3, 3, 3) == None\nassert     eat(0, 3, 3) == None\nassert     eat(0, 1, 5) == None\nassert     eat(3, 1, 5) == None\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eat(3, 1, 5) ==     [3, 5]\nassert     eat(5, 2, 3) ==     [8, 3]\nassert     eat(4, 1, 5) ==     [8, 5]\nassert     eat(1, 3, 5) ==     [1, 5]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eat(1, 50, 50) == [75, 50]\nassert     eat(2, 50, 50) == [100, 50]\nassert     eat(100, 50, 50) == [150, 50]\nassert     eat(100, 50, 0) == [150, 0]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eat(0, 0, 1000) == ([0, 1000], True), \"Wrong output\"\nassert     eat(1, 0, 1000) == ([1, 1000], True), \"Wrong output\"\nassert     eat(1000, 0, 1000) == ([1000, 0], True), \"Wrong output\"\nassert     eat(0, 1, 1000) == ([1, 1000], True), \"Wrong output\"\nassert     eat(100, 100, 100) == ([101, 0], True), \"Wrong output\"\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(eat(100, 300, 200))\nprint(eat(100, 100, 50))\nprint(eat(100, 200, 50))\nprint(eat(50, 300, 200))\nprint(eat(200, 500, 500))\nprint(eat(200, 200, 100))\nprint(eat(50, 50, 100))\n\n\n\"\"\""
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eat(2, 10, 3) ==     [12, 5]\nassert     eat(12, 10, 2) ==     [12, 4]\nassert     eat(0, 10, 3) ==     [0, 0]\nassert     eat(10, 10, 10) ==     [0, 0]\n\n\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert eat(5, 5, 5) == \nassert eat(4, 5, 5) == \nassert eat(5, 1, 5) == \nassert eat(5, 10, 5) == \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef do_calculation(operator, operand1, operand2, operator2):\n    \"\"\"\n    Given two lists operator, and two lists operand1, and operand2. The first list has basic algebra operations, \n    and the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    The operator2 list has a basic algebra operation.\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        The length of operator2 list is equal to the length of operand2 list.\n        Operand1 list has at least one operand.\n        Operand2 list has at least two operands.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndo_algebra([2, 3, '+', 4, '*', '+', '-'], ['0', '2', '-', '2', '*', '3', '*', '4', '+', '+', '-', '4']) == \n\"0, 4, 0, 6, 0, 8, 1, 8, 1, 10, -2, 2, 2, 4, -2, 0, 2, 4, 1\"\n\ndo_algebra([2, 3, '+', 4, '*', '+', '-'], ['0', '2', '-', '2', '*', '3', '*', '4', '+', '+', '-', '4']) == \n\"0, 4, 0, 6, 0, 8, 1, 8, 1, 10, -2, 2, 2, 4, -2, 0, 2, 4, 1\"\n\ndo_algebra([2, 3, '+', 4, '*', '+', '-'], ['0', '2', '-', '2', '*', '3', '*', '4', '+', '+', '-', '4']) == \n\"0, 4, 0, 6, 0, 8, 1, 8, 1, 10, -2, 2, 2, 4, -2, 0, 2, 4, 1\"\n\ndo_algebra([2, 3, '+', 4, '*', '+', '-'], ['0', '2', '-', '2', '*', '3', '*', '4', '+', '+', '-', '4']) == \n\"0, 4, 0, 6, 0, 8, 1, 8, 1, 10, -2, 2, 2, 4, -2, 0, 2, 4, 1\""
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef do_algebra_calc(operation, first_operand, second_operand):\n    \"\"\"\n    Given two integers, and two lists. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     do_algebra([3, 3], [3, 3]) == 7\nassert     do_algebra([3, 3, 2], [3, 3]) == 7\nassert     do_algebra([1, 2, 3], [4, 5]) == 5\nassert     do_algebra([], [1, 2, 3]) == \"Error - no operand!\"\nassert     do_algebra([1], []) == \"Error - no operand!\"\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     do_algebra([1, 2, 3, 4, 5], [1, 2, 3]) == 15\nassert     do_algebra([1, 2, 3], [-4, 5, 6]) == -10\nassert     do_algebra([], [-4, 5, 6]) == 0\nassert     do_algebra([1, 2, 3], [1, 2, 3]) == 18\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     do_algebra([ '+', '-', '*', '/', '//', '**', '%' ], ['1', '2', '3']) == [ '7', '-2', '-6' ]\nassert     do_algebra([ '+', '-', '*', '/', '//', '**', '%' ], ['1', '-2', '3']) == [ '4', '-1', '0' ]\nassert     do_algebra([ '+', '-', '*', '/', '//', '**', '%' ], ['1', '2', '-3']) == [ '3', '-2', '-4' ]\nassert     do_algebra([ '+', '-', '*', '/', '//', '**', '%' ], ['1', '2', '3', '4']) == None\nassert     do_algebra([ '+', '-', '*', '/', '//', '**', '%' ], ['1', '2', '3', '4', '5']) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_repetitions(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the repetition of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solve('foO')=='ooF'\nassert     solve('abC')=='bC'\nassert     solve('Lippo')=='Lippo'\nassert     solve('caCa')=='caca'\nassert     solve('CAS')=='cAS'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve('ABC')    == 'CBA'\nassert     solve('AB')    == 'BAC'\nassert     solve('AB')    == 'BAC'\nassert     solve('AB')    == 'BAC'\nassert     solve('')    == ''\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve('aA') == 'aA'\nassert     solve('ab') == 'ba'\nassert     solve('Z') == 'z'\nassert     solve('A') == 'a'\nassert     solve('AA') == 'AAA'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef solve_from_file(filename):\n    \"\"\"solve using the given filename\"\"\"\n    with open(filename, \"r\") as f:\n        s = f.read()\n        print(\"Solving...\")\n        r = solve(s)\n        print(r)\n\ndef main():\n    \"\"\"solve from stdin or a file if filename given\"\"\"\n    if len(sys.argv) > 1:\n        solve_from_file(sys.argv[1])\n    else:\n        solve_from_file(\"a.in\")\n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert solve(\"\") == \"\"\nassert solve(\"a\") == \"a\"\nassert solve(\"abcd\") == \"cbad\"\nassert solve(\"Abcd\") == \"bcdAb\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    solve(\"A string\") == \"sTRIng\"\nassert \n    solve(\"hello\") == \"hELLO\"\nassert \n    solve(\"a1b2C3\") == \"a3b2C1\"\nassert \n    solve(\"\") == \"\"\nassert \n    solve(\"a\") == \"a\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solve(\"Hello\") == \"hELLO\"\nassert     solve(\"hi\") == \"ih\"\nassert     solve(\"\") == \"\"\nassert solve(\"HELLO\") == \"ehllo\"\nassert solve(\"HELLo\") == \"ehllo\""
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve('abc') == 'ABC'\nassert     solve('c') == 'C'\nassert     solve('abcXYz') == 'AbCXYz'\nassert     solve('') == ''\nassert     solve('a') == 'A'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_md5('This is a test') == '9dbf84f0cfa5eccf6450c43eb5e3f5f7'\nassert     string_to_md5('There is nothing here') == None\nassert     string_to_md5('hello world') == None\nassert     string_to_md5('hello world', True) == None\n\ndef string_to_hmac(secret_key, text):\n    \"\"\"\n    Given a string'secret_key' and a 'text', return its hmac hash equivalent string.\n    If'secret_key' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_md5('text') == '8cbfdc9bfc4523a0a9e58dcb656a1f7c'\nassert     string_to_md5(' ') is None\nassert     string_to_md5('') is None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_md5(\"\") is None\nassert     string_to_md5(\"test\") == \"d41d8cd98f00b204e9800998ecf8427e\"\nassert     string_to_md5(\"test\")!= \"d41d8cd98f00b204e9800998ecf8427e\"\nassert     string_to_md5(\"test\") == \"d41d8cd98f00b204e9800998ecf8427e\"\nassert     string_to_md5(\"test\") == \"d41d8cd98f00b204e9800998ecf8427e\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"abc\") == \"d41d8cd98f00b204e9800998ecf8427e\"\nassert     string_to_md5(\"abcdef\") == \"5d41402abc4b2a76b9719d911017c592\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_md5('abc') == 'abc'\nassert     string_to_md5('ABC') == 'ABC'\nassert     string_to_md5('ABC123') == 'ABC123'\nassert     string_to_md5('') == None\nassert     string_to_md5('12345') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (string_to_md5(\"\") == None), \"Expected None\"\nassert     (string_to_md5(\"ab\") == \"ab\"), \"Expected 'ab' for 'ab'\"\nassert     (string_to_md5(\"Hello World!\") ==\n        \"9a84ec5b8d4f3f4d0eecf09a9a9f1b3\"), \"Expected '9a84ec5b8d4f3f4d0eecf09a9a9f1b3'\"\nassert     (string_to_md5(\"\\r\\nHello World!\") ==\n        \"c1ac8d3c8d4f3f4d0eecf09a9a9f1b3\"), \"Expected 'c1ac8d3c8d4f3f4d0eecf09a9a9f1b3'\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert '$' in string_to_md5('$')\nassert '$' in string_to_md5('$abc')\nassert '$' in string_to_md5('$abc$')\nassert '$' in string_to_md5('$abc$abc')\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nassert     generate_integers(101, 200) == [102, 104, 106, 108, 110, 112, 114, 116, 118, 120]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     generate_integers(1, 100) == range(2, 101, 2)\nassert     generate_integers(1, 100) == range(2, 101, 2)\nassert     generate_integers(5, 10) == range(6, 11, 2)\nassert     generate_integers(1, 100) == range(2, 101, 2)\nassert     generate_integers(10, 100) == range(10, 101, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     generate_integers(0, 2) == [0, 1]\nassert     generate_integers(1, 2) == [1, 2]\nassert     generate_integers(2, 3) == [2, 4]\nassert     generate_integers(2, 4) == [2, 4]\nassert     generate_integers(3, 4) == [3, 4]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ngenerate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert\ngenerate_integers(0, 10) == [0, 2, 4, 6, 8, 10]\nassert\ngenerate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert\ngenerate_integers(0, 10) == [0, 2, 4, 6, 8, 10]\nassert\ngenerate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef generate_integers_2(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ngenerate_integers(1, 10) == [2, 4, 6, 8]\nassert \ngenerate_integers(100, 110) == [100, 102, 104, 106, 108, 110]\nassert \ngenerate_integers(100, 200) == [100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122]\nassert generate_integers(1, 10) == [2, 4, 6, 8]\nassert generate_integers(1, 10) == [2, 4, 6, 8]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     generate_integers(1, 100) == [2,4,6,8,10]\nassert     generate_integers(1, 9) == [2,4,6,8,10]\nassert     generate_integers(3, 9) == [4,6,8,10]\nassert     generate_integers(1, 100) == [2,4,6,8,10]\nassert     generate_integers(1, 10) == [2,4,6,8,10]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     generate_integers(1, 10) == [2,4,6,8,10]\nassert     generate_integers(3, 20) == [4,6,8,10,12,14,16,18,20]\nassert     generate_integers(2, 10) == [0,2,4,6,8,10]"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    }
]