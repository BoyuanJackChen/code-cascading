[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 0.5)\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 1) == False\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 2) == True\nassert     has_close_elements([0, 1, 2, 3, 4], 0.5) == True\nassert     has_close_elements([1, 1.1, 1.2, 1.3, 1.5], 0.5) == False\n",
        "num_ids_2": 68,
        "num_ids_4": 128
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     has_close_elements([1, 1.5, 2], 1) == True, \"Incorrect 1st example\"\nassert     has_close_elements([1, 1.5, 2], 0.5) == True, \"Incorrect 1st example\"\nassert     has_close_elements([1, 1.5, 2], 1.5) == False, \"Incorrect 1st example\"\nassert     has_close_elements([1, 1.5, 2], 1.6) == False, \"Incorrect 1st example\"\nassert     has_close_elements([1, 1.5, 2, 2.5], 1) == False, \"Incorrect 1st example\"\n",
        "num_ids_2": 62,
        "num_ids_4": 126
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nnumbers = [1.5, 1.2, 1.1, 1.0, 1.0]\nthreshold = 0.1\nassert has_close_elements(numbers, threshold)\n\nnumbers = [1.5, 1.5, 1.2, 1.0, 1.0]\nthreshold = 0.1\nassert has_close_elements(numbers, threshold)\n",
        "num_ids_2": 17,
        "num_ids_4": 31
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef has_close_elements_with_fibonacci(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     has_close_elements([0, 0, 0], 0) == True\nassert     has_close_elements([0, 1, 2], 1) == True\nassert     has_close_elements([0, 1, 2], 2) == False\nassert     has_close_elements([0, 1, 2], 3) == False\nassert     has_close_elements([1, 1, 1], 0.5) == True\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 0.5) == False, \"Wrong answer with numbers: 1, 2, 3, 4\"\nassert     has_close_elements([0.5, 1, 1, 1], 0.5) == True, \"Wrong answer with numbers: 0.5, 1, 1, 1\"\nassert     has_close_elements([3, 2, 3, 1], 0.5) == True, \"Wrong answer with numbers: 3, 2, 3, 1\"\nassert     has_close_elements([1, 2, 3, 4], 1) == True, \"Wrong answer with numbers: 1, 2, 3, 4\"\nassert     has_close_elements([0.5, 1, 1, 1], 1) == True, \"Wrong answer with numbers: 0.5, 1, 1, 1\"\n",
        "num_ids_2": 84,
        "num_ids_4": 162
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 1) == False, \\\n        'First wrong result in case of list with close elements'\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 0.5) == True, \\\n        'Second wrong result in case of list with close elements'\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 2.5) == False, \\\n        'Third wrong result in case of list with close elements'\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 2.6) == False, \\\n        'Fourth wrong result in case of list with close elements'\nassert     has_close_elements([1.0, 1.1, 1.2, 1.3, 1.5], 1.2) == True, \\\n        'Fifth wrong result in case of list with close elements'\n",
        "num_ids_2": 74,
        "num_ids_4": 150
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('()') == [], 'Wrong answer'\nassert     separate_paren_groups('(foo)') == ['foo'], 'Wrong answer'\nassert     separate_paren_groups('((foo)') == ['((foo))'], 'Wrong answer'\nassert     separate_paren_groups('(((foo))') == ['(((foo))']\nassert     separate_paren_groups('((foo))') == ['((foo))']\n",
        "num_ids_2": 44,
        "num_ids_4": 92
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     separate_paren_groups('((())())') == ['', '((())())']\nassert     separate_paren_groups('((())(()))') == ['', '((())())', '((()))']\nassert     separate_paren_groups('((()))') == ['', '((())())', '((()))']\nassert     separate_paren_groups('((()))()') == ['', '((())())', '(())(())', '((()))']\nassert     separate_paren_groups('((()())(())') == ['', '((())())', '(())(())', '((()))']\n",
        "num_ids_2": 51,
        "num_ids_4": 111
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"(a+b)\") == [\"(a+b)\"]\nassert     separate_paren_groups(\"( (a+b) )\") == [\"( (a+b) )\"]\nassert     separate_paren_groups(\"( (a+b) )(a+b)\") == [\"( (a+b) )\", \"(a+b)\"]\nassert     separate_paren_groups(\"(a+b)\") == [\"(a+b)\"]\nassert     separate_paren_groups(\"a+b(a+b)\") == [\"a+b(a+b)\", \"a+b\"]\n",
        "num_ids_2": 52,
        "num_ids_4": 115
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups('((())') == ['((',))']\nassert     separate_paren_groups('(()())') == ['(',)',)']\nassert     separate_paren_groups('()') == ['()']\nassert     separate_paren_groups('(()()') == ['(',)',(',)']\nassert     separate_paren_groups('())') == ['(',)']\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(1+2)-3+(4*5)\") == [\"(1+2)-3\", \"+(4*5)\", \"1+2-3+4*5\"]\nassert     separate_paren_groups(\"(5+6)-2-(7-8)\") == [\"(5+6)-2\", \"-7+8-2-\", \"5+6-2-7-8\"]\nassert     separate_paren_groups(\"((2+3)-1)-(6+7)\") == [\"(2+3)-1\", \"-6+7-1-\", \"2+3-1+6+7\"]\nassert     separate_paren_groups(\"1+2-3+4\") == [\"1+2-3+4\"]\nassert     separate_paren_groups(\"1+2-3+4-5\") == [\"1+2-3+4-5\"]\n",
        "num_ids_2": 98,
        "num_ids_4": 177
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     separate_paren_groups('') == []\nassert     separate_paren_groups('{') == ['{']\nassert     separate_paren_groups('{}') == ['{}']\nassert     separate_paren_groups('()') == ['()']\nassert     separate_paren_groups('( )') == ['()']\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups('') == []\nassert     separate_paren_groups('()') == ['()']\nassert     separate_paren_groups('()(())') == ['()', '()']\nassert     separate_paren_groups('(a(b(c)d)e)f)g)') == ['a(b(c)d)e', 'f', 'g']\nassert     separate_paren_groups('(((a(b(c)d)e)f)g)') == ['((a(b(c)d)e)f)', 'g']\n",
        "num_ids_2": 30,
        "num_ids_4": 95
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('{a,b,c}') == ['{a,b,c}']\nassert separate_paren_groups('{a,{b,c},d}') == ['{a,{b,c},d}']\nassert separate_paren_groups('{a,b{c,d},e}') == ['{a,b{c,d},e}']\nassert separate_paren_groups('(a,(b,(c,d)))') == ['(a,(b,(c,d)))']\nassert separate_paren_groups('((a,b))') == ['((a,b))']\n",
        "num_ids_2": 60,
        "num_ids_4": 128
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nseparate_paren_groups(\"((()((((((((())))))))))(())\") == [\"((()((((((((())))))))))(())\"]\nseparate_paren_groups(\"(()((()))(())\") == [\"()((()))(())\"]\nseparate_paren_groups(\"(()\") == [\"()\"]\nseparate_paren_groups(\"\") == []\nseparate_paren_groups(\"(()(())\") == [\"()()\"]\nseparate_paren_groups(\"()(())\") == [\"()()\"]\nseparate_paren_groups(\"((())\") == [\"((()))\"]\nseparate_paren_groups(\"((()))(())\") == [\"((()))(())\"]\nseparate_paren_groups(\"((((((())))))(())\") == [\"((((((())))))(())\"]\nseparate_paren_groups(\"(((((((((())))))())))))(())\") == [\"(((((((())))))()))((()))\"]\n\ndef find_all_paths(root: str, s: str, path: str, paths: List[str]) -> List[str]:\n    \"\"\"Input to this function is: \n      root, s, path and paths.\n      root: root node in the binary tree\n      s: the substring to search\n      path: path string\n      paths: list of paths to all nodes at each node in the binary tree\n      paths[i] is a list of nodes in the binary tree starting at root and ending at paths[i]\n      path[i] is the path string ending at paths[i]\n      paths and path are in such a way that each path is a unique string of characters\n      paths[i] has the characters in path appended onto the end of each path in paths\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"(1+2)+3*(4+5)\") == ['1+2', '+', '3*', '(', '4+5', ')']\nassert     separate_paren_groups(\"1+2*3+4\") == ['1+2*3', '+', '4']\nassert     separate_paren_groups(\"1+2*3+4\") == ['1+2*3', '+', '4']\nassert     separate_paren_groups(\"1+2*3+4\") == ['1+2*3', '+', '4']\nassert     separate_paren_groups(\"(1+2)+(3*4)\") == ['(', '1+2', ')', '+', '(', '3*', '4', ')']\n",
        "num_ids_2": 78,
        "num_ids_4": 142
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     truncate_number(6.1) == 6.1\nassert     truncate_number(1.9) == 1\nassert     truncate_number(1.99) == 1\nassert     truncate_number(2.0) == 2\nassert     truncate_number(0.5) == 1.0\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     truncate_number(1.2) == 0.2\nassert     truncate_number(1.8) == 0.8\nassert     truncate_number(1.5) == 1.0\nassert     truncate_number(1.35) == 1.0\nassert     truncate_number(1.4) == 1.0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     truncate_number(3.5) == 0.5\nassert     truncate_number(-1.5) == -1\nassert     truncate_number(0.9) == 0\nassert     truncate_number(0.8) == 0\nassert     truncate_number(0.7) == 0\n",
        "num_ids_2": 33,
        "num_ids_4": 63
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     truncate_number(2.5) == 0.5\nassert     truncate_number(2.6) == 0.5\nassert     truncate_number(2.51) == 0.5\nassert     truncate_number(2.52) == 0.51\nassert     truncate_number(2.54) == 0.5\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     truncate_number(0.1) == 0.1\nassert     truncate_number(0.01) == 0.01\nassert     truncate_number(0.05) == 0.0\nassert     truncate_number(0.999) == 1.0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     truncate_number(0.3) == 0\nassert     truncate_number(0.5) == 1\nassert     truncate_number(1.5) == 1\nassert     truncate_number(2.5) == 2\nassert     truncate_number(3.5) == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert truncate_number(1.25) == 1\nassert truncate_number(2.75) == 2\nassert truncate_number(3.75) == 3\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     truncate_number(0.6) == 0\nassert     truncate_number(0.8) == 0\nassert     truncate_number(1.9) == 1\nassert     truncate_number(2.5) == 1\nassert     truncate_number(2.9) == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     truncate_number(1.3) == 1.3\nassert     truncate_number(1.4) == 1.3\nassert     truncate_number(1.5) == 1.2\nassert     truncate_number(1.8) == 1.0\nassert     truncate_number(2.0) == 2.0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     truncate_number(2.4) == 0\nassert     truncate_number(3) == 0\nassert     truncate_number(3.5) == 0.5\nassert     truncate_number(3.55) == 0.5\nassert     truncate_number(3.555) == 0.5\n",
        "num_ids_2": 28,
        "num_ids_4": 62
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_zero([0]) == False\nassert     below_zero([0, 1]) == False\nassert     below_zero([0, 1, 1]) == True\nassert     below_zero([0, 1, 2, -1]) == True\nassert     below_zero([0, 1, 2, -1, -1]) == False\n",
        "num_ids_2": 24,
        "num_ids_4": 57
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     below_zero([2, 4, -3, 2, 5, 4, 3, 1, -1, -5, 4]) == True\nassert     below_zero([2, 2, 5, -5, 2, 3, 4, 2, 1, -1, -1, -1]) == False\nassert     below_zero([2, 4, -3, 2, 5, 4, 3, 1, -1, -5, 4]) == False\nassert     below_zero([2, 2, 5, -5, 2, 3, 4, 2, 1, -1, -1, -1]) == False\n",
        "num_ids_2": 71,
        "num_ids_4": 142
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_zero([\n    +200,\n    -20,\n    +20,\n    -200,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    -20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +20,\n    +20,\n    -20,\n    +2",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef above_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef below_zero_test():\n    assert below_zero([1, 2, -1])\n    assert not below_zero([-5, 1, -3, -2])\n\nbelow_zero_test()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_zero([]) == False\nassert     below_zero([0,0,0,0,0]) == False\nassert     below_zero([0,1,0,0,0]) == True\nassert     below_zero([-1,0,0,0,0]) == True\nassert     below_zero([1,0,0,0,0]) == False\n",
        "num_ids_2": 29,
        "num_ids_4": 68
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     below_zero([]) is False\nassert     below_zero([-1]) is True\nassert     below_zero([-1, -1]) is True\nassert     below_zero([-1, 0]) is False\nassert     below_zero([0, -1]) is False\n",
        "num_ids_2": 22,
        "num_ids_4": 51
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     below_zero([0, 3, 6, 8]) == True\nassert     below_zero([0, 3, -2, 8]) == False\nassert     below_zero([0, 3, 6, -3]) == True\nassert     below_zero([0, -4, -3, -2]) == False\nassert     below_zero([1, 2, 3, 4]) == False\n",
        "num_ids_2": 35,
        "num_ids_4": 73
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    below_zero([0, 1, 2, -3, -4, 5]) == False\n    below_zero([1, 2, 3, 4, 5, 6]) == False\n    below_zero([-1, -2, -3, -4, -5, -6]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, 7]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == False\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == True\n    below_zero([-1, -2, -3, -4, -5, -6, -7, 8, 9, 10, 11",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef all_pairs_sum(array: List[int]) -> int:\n    \"\"\" In this task, you are given an array of numbers and you need to find the sum of all the elements\n    of the array that sum to the same element.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([4,5,6,4,1]) == 0.5, 'Testing failed'\nassert     mean_absolute_deviation([1,2,3]) == 2.23606797749978, 'Testing failed'\nassert     mean_absolute_deviation([4.5]) == 0.5, 'Testing failed'\n\ndef mean_absolute_percentage_error(\n    y_true: List[float],\n    y_pred: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Percentage\n    Error (MAPE) around the mean of this dataset.\n    Mape is the average percentage difference between each element and a centerpoint:\n    MAPE = average | | y_pred - y_true | / | y_true |\n    \"\"\"\n    pass\n",
        "num_ids_2": 59,
        "num_ids_4": 82
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef mean_absolute_deviation_mean(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nmean_absolute_deviation([2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5\nassert\nmean_absolute_deviation([-2, -1, 1, 2, 2, -1, 1, -2, 1, 2, 2, -1, 1, 2]) == 3\nassert\nmean_absolute_deviation([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3\nassert\nmean_absolute_deviation([-3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3]) == 3\nassert\nmean_absolute_deviation([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0\n",
        "num_ids_2": 5,
        "num_ids_4": 9
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    mean_absolute_deviation([1, 2, 3, 4]) == 2\n    mean_absolute_deviation([0, 1, 2, 3, 4]) == 2\n    mean_absolute_deviation([-1, -2, -3, -4]) == 2\n\n\ndef root_mean_square(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Root Mean Square\n    around the mean of this dataset.\n    Root Mean Square is the square root of the sum of the squares of each\n    element:\n    RMS = \u221a sum_n (x_n - x_mean)\u00b2\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the mean of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([-1.2, 2.1, 3.3, -5.4]) == 2.3\nassert     mean_absolute_deviation([-2, -1.2, 0, 1.3]) == 2.2\nassert     mean_absolute_deviation([-3, -1.2, 0, 1.3, 2]) == 2.2\n",
        "num_ids_2": 60,
        "num_ids_4": 90
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersperse([1,2,3,4,5], '1') == ['1','1','2','1','3','1','4','1','5']\nassert     intersperse([], '1') == []\nassert     intersperse([1,2,3,4,5], '1') == ['1','1','2','1','3','1','4','1','5']\n\n\n\n\n",
        "num_ids_2": 51,
        "num_ids_4": 90
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersperse([1, 2, 3], 0) ==    [1, 2, 3]\nassert     intersperse([1, 2, 3], 1) ==    [1, 2, 3, 1]\nassert     intersperse([1, 2, 3], 2) ==    [1, 2, 3, 2, 1]\nassert     intersperse([1, 2, 3], 3) ==    [1, 2, 3, 3, 2, 1]\nassert     intersperse([1, 2, 3, 4], 2) ==    [1, 2, 3, 4, 2, 1]\n",
        "num_ids_2": 48,
        "num_ids_4": 104
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersperse([], 0) == []\nassert     intersperse([1], 0) == [1]\nassert     intersperse([1,2], 0) == [1,2]\nassert     intersperse([1,2], 1) == [1,2,1]\nassert     intersperse([1,2,3], 1) == [1,2,3,1]\n",
        "num_ids_2": 25,
        "num_ids_4": 63
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersperse([\"a\",\"b\",\"c\",\"d\"], 3) == [\"a\",\"b\",\"c\",\"3\",\"d\"]\nassert     intersperse([1,2,3,4], \"x\") == [\"1\",\"x\",\"2\",\"x\",\"3\",\"x\",\"4\"]\nassert     intersperse([1,2,3,4], \"x\", 2) == [\"1\",\"x\",\"2\",\"x\",\"3\",\"x\",\"4\"]\n",
        "num_ids_2": 62,
        "num_ids_4": 97
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert idesperse([1,2,3], 2) == [1,2,3,1,2,3]\nassert idesperse([1,2,3], 1) == [1,2,3,1,2,3]\nassert idesperse([1,2,3], 0) == [1,2,3]\nassert idesperse([1,2,3,4,5,6], 0) == [1,2,3,4,5,6]\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    numbers = [1,2,3,4]\n    assert intersperse(numbers, 5) == [1,5,2,5,3,5,4,5]\n    print('\"Success\" means that intersperse() function is working correctly.')\n    numbers = [1,2,3]\n    assert intersperse(numbers, 5) == [1,5,2,5,3,5]\n    print('\"Success\" means that intersperse() function is working correctly.')\n    numbers = []\n    assert intersperse(numbers, 5) == []\n    print('\"Success\" means that intersperse() function is working correctly.')\n    numbers = [1]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nintersperse([], 'f') == []\nassert intersperse([1, 2, 3], 'f') == ['f', 1, 'f', 2, 'f', 3]\nassert intersperse([1, 2, 3], 0) == ['1', 2, 3]\nassert intersperse([1, 2, 3], 1) == ['1', '2', '3']\n",
        "num_ids_2": 34,
        "num_ids_4": 80
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"(()())\") == [1, 2]\nassert     parse_nested_parens(\"(()(()))\") == [1, 2, 2]\nassert     parse_nested_parens(\"((((())))\") == [1, 2, 3]\nassert     parse_nested_parens(\"(((()()))\") == [1, 2, 2]\nassert     parse_nested_parens(\"()((()()))\") == [0, 2, 3]\n",
        "num_ids_2": 46,
        "num_ids_4": 95
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"(())\") ==    [1]\nassert     parse_nested_parens(\"(((())())\") ==    [3, 2, 1]\nassert     parse_nested_parens(\"(((()))\") ==    [3, 2, 1]\nassert     parse_nested_parens(\"((()()()))\") ==    [3, 2, 1]\nassert     parse_nested_parens(\"(((()()()()()))\") ==    [3, 2, 1]\n",
        "num_ids_2": 44,
        "num_ids_4": 95
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(()())\") == [1, 2]\nassert     parse_nested_parens(\"(()(()))\") == [1, 2, 2]\nassert     parse_nested_parens(\"((()()))\") == [2, 2, 2]\nassert     parse_nested_parens(\"((()(()()))\") == [3, 2, 2, 2]\nassert     parse_nested_parens(\"(((()()()))\") == [4, 2, 2, 2]\n",
        "num_ids_2": 46,
        "num_ids_4": 98
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nparse_nested_parens(\"(())\") == 1\nparse_nested_parens(\"((()))\") == 2\nparse_nested_parens(\"(()())\") == 2\nparse_nested_parens(\"(()(()))\") == 3\nparse_nested_parens(\"(()((()))\") == 3\nparse_nested_parens(\"(((()(((())))))((())))\") == 4\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"((()))\") == 2\nassert parse_nested_parens(\"(())\") == 1\nassert parse_nested_parens(\"(()()(())\") == 3\nassert parse_nested_parens(\"(()())\") == 2\nassert parse_nested_parens(\"(((())))\") == 3\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2]\nassert     parse_nested_parens(\"(()(()))\") == [3]\nassert     parse_nested_parens(\"(()()(()))\") == [3]\nassert     parse_nested_parens(\"((((()))))\") == [3]\nassert     parse_nested_parens(\"((((()(((((())())))))))(((((()))))\") == [4]\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"(()())\") ==     [0, 1, 1]\nassert     parse_nested_parens(\"(()()(()))\") ==     [0, 1, 2, 2]\nassert     parse_nested_parens(\"(((()))\") ==     [0, 1, 1]\nassert     parse_nested_parens(\"\") ==     [0]\nassert     parse_nested_parens(\"(((()))\") ==     [0, 1, 1]\n",
        "num_ids_2": 53,
        "num_ids_4": 95
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_nested_parens(\"(())()\") ==    2, 'The (()()) should return 2.'\nassert     parse_nested_parens(\"(())()\") ==     3, 'The (()()) should return 3.'\nassert     parse_nested_parens(\"(()()()())\") ==     4, 'The (()()()()) should return 4.'\nassert     parse_nested_parens(\"(()(()))\") ==     3, 'The (()(())) should return 3.'\nassert     parse_nested_parens(\"(()((())))\") ==     3, 'The (()((())) should return 3.'\n",
        "num_ids_2": 56,
        "num_ids_4": 120
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"A\", \"B\", \"C\", \"D\", \"E\", \"E\"], \"EE\") == [\"E\", \"E\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\", \"D\", \"E\", \"E\"], \"A\") == [\"A\", \"B\", \"C\", \"D\", \"E\", \"E\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\", \"D\", \"E\", \"E\"], \"E\") == [\"E\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\", \"D\", \"E\", \"E\"], \"ABC\") == [\"A\", \"B\", \"C\", \"D\", \"E\", \"E\"]\nassert     filter_by_substring([\"A\", \"B\", \"C\", \"D\", \"E\", \"E\"], \"CC\") == [\"C\", \"D\", \"E\", \"E\"]\n",
        "num_ids_2": 88,
        "num_ids_4": 173
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"i\", \"have\", \"a\", \"fancy\", \"substring\", \"in\", \"this\", \"string\"], \"s\") == [\"i\", \"have\", \"a\", \"fancy\"]\nassert     filter_by_substring([\"i\", \"have\", \"a\", \"fancy\", \"substring\", \"in\", \"this\", \"string\"], \"fancy\") == []\nassert     filter_by_substring([\"i\", \"have\", \"a\", \"fancy\", \"substring\", \"in\", \"this\", \"string\"], \"z\") == [\"i\", \"have\", \"a\", \"fancy\"]\nassert     filter_by_substring([\"i\", \"have\", \"a\", \"fancy\", \"substring\", \"in\", \"this\", \"string\"], \"substring\") == [\"i\", \"have\", \"a\", \"fancy\"]\nassert     filter_by_substring([\"i\", \"have\", \"a\", \"fancy\", \"substring\", \"in\", \"this\", \"string\"], \"fas\") == []\n",
        "num_ids_2": 95,
        "num_ids_4": 202
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with given suffix\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"somethings\", \"this\", \"also\", \"sthings\", \"somethings\", \"and something\"], \"s\") == [\"somethings\", \"this\", \"and something\"], \"Test 1\"\nassert     filter_by_substring([\"somethings\", \"this\", \"also\", \"sthings\", \"somethings\", \"and something\"], \"s\") == [\"somethings\", \"this\", \"and something\"], \"Test 2\"\nassert     filter_by_substring([\"somethings\", \"this\", \"also\", \"sthings\", \"somethings\", \"and something\"], \"b\") == [\"sthings\", \"somethings\", \"and something\"], \"Test 3\"\nassert     filter_by_substring([\"somethings\", \"this\", \"also\", \"sthings\", \"somethings\", \"and something\"], \"s\") == [\"somethings\", \"this\", \"and something\"], \"Test 4\"\n",
        "num_ids_2": 114,
        "num_ids_4": 229
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert filter_by_substring([\"Hello\", \"Bye\", \"World\"], \"Hello\") == [\"Hello\",]\nassert filter_by_substring([\"Hello\", \"Bye\", \"World\"], \"Bye\") == [\"Bye\"]\nassert filter_by_substring([\"Hello\", \"Bye\", \"World\"], \"World\") == [\"World\"]\nassert filter_by_substring([\"Hello\", \"Bye\", \"World\"], \"Hello World\") == []\n",
        "num_ids_2": 30,
        "num_ids_4": 84
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"foo\", \"bar\", \"foobar\", \"foo1\", \"bar1\"], \"foo\") == [\"foo\", \"bar\", \"foobar\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"foobar\", \"foo1\", \"bar1\"], \"foo1\") == [\"foo1\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"foobar\", \"foo1\", \"bar1\"], \"fo\") == [\"foo\", \"foo1\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"foobar\", \"foo1\", \"bar1\"], \"o\") == [\"foo\", \"bar\", \"foobar\", \"foo1\", \"bar1\"]\nassert     filter_by_substring([\"foo\", \"bar\", \"foobar\", \"foo1\", \"bar1\"], \"foobar\") == [\"foobar\"]\n",
        "num_ids_2": 79,
        "num_ids_4": 168
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \"\"\"\n    pass\n\nassert filter_by_substring(['a', 'ab', 'abc', 'abcd'], 'bc') == ['abc', 'abcd']\nassert filter_by_substring(['a', 'ab', 'abc', 'abcd'], 'abc') == ['abc']\n",
        "num_ids_2": 37,
        "num_ids_4": 67
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_substring(['policeman'], 'p') == ['policeman']\nassert     filter_by_substring(['policeman'], 'o') == []\nassert     filter_by_substring(['policeman', 'police', 'policeman'], 'p') == ['policeman']\nassert     filter_by_substring(['policeman', 'police', 'policeman'], 'o') == ['policeman']\nassert     filter_by_substring(['policeman', 'police', 'policeman'], 'p') == ['policeman', 'policeman']\n",
        "num_ids_2": 46,
        "num_ids_4": 112
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"test1\",\"test2\",\"test3\"], \"test\") == [\"test1\",\"test3\"]\nassert     filter_by_substring([\"test1\",\"test2\",\"test3\"], \"t\") == [\"test1\",\"test3\"]\nassert     filter_by_substring([\"test1\",\"test2\",\"test3\"], \"\") == [\"test1\",\"test2\",\"test3\"]\nassert     filter_by_substring([\"test1\",\"test2\",\"test3\"], \"1\") == [\"test1\",\"test3\"]\nassert     filter_by_substring([\"test1\",\"test2\",\"test3\"], \"test2\") == [\"test2\"]\n",
        "num_ids_2": 62,
        "num_ids_4": 126
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\nassert     sum_product([1, 2]) == (3, 4)\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         sum_product([]) == (0, 1)\nassert         sum_product([1, 2, 3]) == (6, 6)\nassert         sum_product([1, 2]) == (2, 2)\nassert         sum_product([1]) == (1, 1)\nassert         sum_product([2]) == (0, 2)\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_product([]) == (0, 1)\nassert sum_product([1]) == (1, 1)\nassert sum_product([2]) == (2, 2)\nassert sum_product([3]) == (3, 3)\nassert sum_product([1, 2, 3]) == (6, 2)\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_product([2, 5, 7, 8, 2]) == (4, 28)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([2, 2]) == (4, 4)\nassert     sum_product([2, 3, 5, 8]) == (10, 60)\n",
        "num_ids_2": 42,
        "num_ids_4": 73
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (15, 120)\nassert     sum_product([-1, -2, -3, -4]) == (0, 24)\nassert     sum_product([-1, 2, 3, 4]) == (0, 24)\n",
        "num_ids_2": 35,
        "num_ids_4": 82
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_product([1,2,3]) == (1, 6)\nsum_product([4,5,6,7]) == (45, 120)\nsum_product([1,2,3,4,5,6,7]) == (30, 252)\nsum_product([]) == (0, 1)\nsum_product([1]) == (1, 1)\nsum_product([1,2,3,4,5]) == (15, 120)\n\nif __name__ == \"__main__\":\n    numbers = [1,2,3]\n    print(sum_product(numbers)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\nassert     sum_product([1, 2]) == (3, 2)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4]) == (10, 24)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_product([1, 2, 3, 4]) == (1, 24), 'Wrong output for sum_product([1, 2, 3, 4])'\nassert     sum_product([1]) == (1, 1), 'Wrong output for sum_product([1])'\nassert     sum_product([]) == (0, 1), 'Wrong output for sum_product([])'\nassert     sum_product([2, 5, 8, 9]) == (2, 96), 'Wrong output for sum_product([2, 5, 8, 9])'\nassert     sum_product([3, 7, 5, 4]) == (3, 420), 'Wrong output for sum_product([3, 7, 5, 4])'\n",
        "num_ids_2": 66,
        "num_ids_4": 130
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert rolling_max([1, 2, 3, 4, 5]) == [1, 3, 5, 5, 5]\nassert rolling_max([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 5, 6, 6]\nassert rolling_max([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 5, 6, 6, 7]\n",
        "num_ids_2": 31,
        "num_ids_4": 99
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [5, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\n",
        "num_ids_2": 78,
        "num_ids_4": 78
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rolling_max([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == [-2, 1, 4, 4, 4, 4, 4, 4, 4, 2]\nassert     rolling_max([-2, -1, 1, 2, 3, 4, 5, 6, 7, 8]) == [-2, -1, 2, 3, 4, 5, 6, 6, 6, 6]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     rolling_max([]) == []\n",
        "num_ids_2": 103,
        "num_ids_4": 173
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    rolling_max([1,3,4,5,6,4,3,2,8,9,9,7,7,5,5]) == \n    [1,3,4,4,5,5,3,2,8,9,9,7,7,5,5]\nassert \n    rolling_max([1,3,4,5,6,4,3,2,8,9,9,7,7,5,5]) == \n    [1,3,4,4,5,5,3,2,8,9,9,7,7,5,5]\nassert \n    rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == \n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert \n    rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == \n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert \n    rolling_max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == \n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(rolling_max([3, -1, 5, 3, 6, 5]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rolling_max([2,2,2,2]) == [2,2,2,2]\nassert     rolling_max([2,1,3,4,5,4,5,6,7,8]) == [4,5,5,6,7,7,8,8,8,8]\nassert     rolling_max([1,2,3,4,5,6,7,8,9,10]) == [8,8,8,8,8,8,8,8,8,8]\nassert     rolling_max([-2,-1,-3,-4,-5,-6,-7,-8,-9,-10]) == [-2,-1,-3,-4,-5,-6,-7,-8,-9,-10]\nassert     rolling_max([-1,-2,1,2,3,4,5,6,7,8]) == [8,8,8,8,8,8,8,8,8,8]\n",
        "num_ids_2": 74,
        "num_ids_4": 173
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef find_max_matching_subarray(numbers: List[int]) -> int:\n    \"\"\"Find the length of the longest consecutive sequence in a given array that \n     consists of only positive numbers.\n     \n    Arguments:\n        numbers {List[int]} -- the array of integers\n    \n    Returns:\n        int -- the length of the longest consecutive sequence\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 3, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 5]) == [1, 3, 5, 5, 5, 5]\n",
        "num_ids_2": 62,
        "num_ids_4": 95
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_palindrome('racecar') == True\nassert     is_palindrome('abc') == False\nassert     is_palindrome('a') == False\nassert     is_palindrome('ab') == False\nassert     is_palindrome('aba') == True\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_palindrome('') is True\nassert     is_palindrome('racecar') is True\nassert     is_palindrome('ab') is False\nassert     is_palindrome('aba') is True\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert make_palindrome(\"radar\") == \"radar\"\nassert make_palindrome(\"abhij\") == \"abhi\"\n",
        "num_ids_2": 19,
        "num_ids_4": 36
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"ab\") == \"ba\"\nassert     make_palindrome(\"aab\") == \"abba\"\nassert     make_palindrome(\"abacabacabacabacaba\") == \"abacabacabacabacaba\"\nassert     make_palindrome(\"abacaba\") == \"abacaba\"\n",
        "num_ids_2": 30,
        "num_ids_4": 77
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_palindrome(\"\") == \"\"\nassert     make_palindrome(\"a\") == \"\"\nassert     make_palindrome(\"ab\") == \"aba\"\nassert     make_palindrome(\"aaba\") == \"abba\"\n\n\ndef check_palindrome(string: str) -> bool:\n    \"\"\" Check if a string is a palindrome by reversing it and checking if it is the same \"\"\"\n    return is_palindrome(string)\n",
        "num_ids_2": 25,
        "num_ids_4": 56
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     make_palindrome('kakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakaka",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\"\"\"\nTest cases:\n\nInput: a = \"1\", b = \"0\"\nOutput: \"1\"\n\nInput: a = \"001\", b = \"010\"\nOutput: \"100\"\n\nInput: a = \"1111\", b = \"1011\"\nOutput: \"10101\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert\n\n\ndef find_xor_key(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    Find the key to be used in the decryption.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 6,
        "num_ids_4": 8
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_xor(\"1\", \"0\") == \"1\"\nassert     string_xor(\"1010\", \"1011\") == \"1001\"\nassert     string_xor(\"111010\", \"111011\") == \"011011\"\nassert     string_xor(\"101110\", \"101011\") == \"011011\"\nassert     string_xor(\"1011010\", \"101011\") == \"011011\"\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_xor(\"1111\",\"1111\") == \"0\"\nassert     string_xor(\"1111\",\"0111\") == \"10\"\nassert     string_xor(\"0111\",\"1111\") == \"01\"\nassert     string_xor(\"1111\",\"1011\") == \"1\"\nassert     string_xor(\"0111\",\"1011\") == \"0\"\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_xor(\"1010\", \"1011\") == \"10\"\nassert     string_xor(\"100\", \"10\") == \"10\"\nassert     string_xor(\"101010\", \"10101\") == \"1010\"\nassert     string_xor(\"0101010\", \"010101\") == \"1010\"\nassert     string_xor(\"101010\", \"10101\") == \"10101\"\n",
        "num_ids_2": 36,
        "num_ids_4": 78
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_xor(\"0101\", \"0101\") == \"0100\"\nassert     string_xor(\"10101\", \"0011\") == \"0101\"\nassert     string_xor(\"10101\", \"0111\") == \"0111\"\nassert     string_xor(\"10001\", \"1100\") == \"0000\"\nassert     string_xor(\"10001\", \"1101\") == \"0010\"\n",
        "num_ids_2": 39,
        "num_ids_4": 77
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_xor(\"1 0 1 0 1 0\", \"1 1 1 0 1 1\") == \"100 101 101 101 100 100\"\nassert     string_xor(\"0 1 0 1 0 0\", \"1 0 1 1 1 1\") == \"1 1 0 0 0 1\"\nassert     string_xor(\"0 1 0 1 0 0\", \"1 1 1 1 0 0\") == \"1 1 0 0 0 1\"\nassert     string_xor(\"0 1 0 1 0 0\", \"1 1 0 1 1 1\") == \"1 1 0 0 0 1\"\nassert     string_xor(\"0 1 0 1 0 0\", \"0 0 1 0 1 1\") == \"0 0 1 1 1 1\"\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_xor(\"AB\",\"CD\") == \"ED\"\nassert     string_xor(\"XYZ\",\"ABC\") == \"ABCD\"\nassert     string_xor(\"XYZ\",\"YZC\") == \"CABD\"\nassert     string_xor(\"ABCD\",\"XYZ\") == \"ABCX\"\nassert     string_xor(\"ABCD\",\"ABC\") == \"ABCD\"\n",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert string_xor(a = \"1b2d3e\", b = \"5d6c7b8\") == \"8f5432e\"\n\n\ndef string_frequencies(s: str) -> List[int]:\n    \"\"\"\n    Return list of frequencies of each character in input string\n    \"\"\"\n    pass\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     longest([]) == None\nassert     longest(['']) == ''\nassert     longest(['', '']) == ''\nassert     longest(['A', '']) == 'A'\nassert     longest(['A', 'B', 'C']) == 'A'\n",
        "num_ids_2": 19,
        "num_ids_4": 46
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     longest([]) == None\nassert     longest(['']) == ''\nassert     longest(['', 'test', 'test', 'test', 'test']) == 'test'\nassert     longest(['test', 'test', 'test', 'test']) == 'test'\nassert     longest(['test', 'test', 'test', 'test', 'test']) == 'test'\n",
        "num_ids_2": 19,
        "num_ids_4": 67
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     longest(['', 'a', 'ab', 'abc']) == 'abc', 'Wrong answer'\nassert     longest(['a', 'ab', 'abc', 'ab', 'abc']) == 'abc', 'Wrong answer'\nassert     longest(['ab', 'abc', 'a', 'a', 'a']) == 'abc', 'Wrong answer'\n\ndef unique_vowels(strings: List[str]) -> List[str]:\n    \"\"\" Write a function unique_vowels that returns a list of unique vowels in a given list of strings.\n    \"\"\"\n    pass\n",
        "num_ids_2": 58,
        "num_ids_4": 89
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert longest([]) is None\nassert longest([\"hi\"]) == \"hi\"\nassert longest([\"hi\", \"hello\"]) == \"hello\"\nassert longest([\"hello\", \"hi\"]) == \"hi\"\n",
        "num_ids_2": 10,
        "num_ids_4": 37
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     longest([]) is None\nassert     longest([\"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\"]) == \"test\"\nassert     longest([\"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\"]) == \"test\"\nassert     longest([\"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\"]) == \"test\"\nassert     longest([\"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\"]) == \"test\"\n",
        "num_ids_2": 59,
        "num_ids_4": 162
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     longest([]) is None\nassert     longest([\"a\"]) is None\nassert     longest([\"ab\"]) == \"ab\"\nassert     longest([\"a\", \"b\", \"ab\"]) == \"ab\"\nassert     longest([\"a\", \"ab\", \"b\"]) == \"ab\"\n",
        "num_ids_2": 21,
        "num_ids_4": 55
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     longest(['a', 'a', 'a', 'a', 'a']) == 'a'\nassert     longest(['a', 'a', 'a', 'b', 'a']) == 'a'\nassert     longest(['a', 'a', 'a', 'a', 'b']) == 'a'\nassert     longest(['a', 'a', 'b', 'b', 'b']) == 'a'\nassert     longest(['a', 'a', 'a', 'a', 'b', 'c', 'd', 'e', 'f']) == 'a'\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     longest([\"bob\", \"jane\", \"jim\"]) == \"jane\"\nassert     longest([\"bob\", \"jane\", \"jane\"]) == \"jane\"\nassert     longest([\"jane\", \"bob\", \"jim\"]) == \"jane\"\nassert     longest([\"bob\", \"jane\", \"jane\", \"jim\"]) == \"jane\"\nassert     longest([]) is None\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(2, 6) == 2\nassert     greatest_common_divisor(8, 14) == 2\nassert     greatest_common_divisor(11, 17) == 1\nassert     greatest_common_divisor(7, 11) == 1\nassert     greatest_common_divisor(11, 7) == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(15, 9) == 3\nassert     greatest_common_divisor(3, 9) == 3\nassert     greatest_common_divisor(3, 15) == 3\nassert     greatest_common_divisor(1, 2) == 1\n\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ngreatest_common_divisor(2, 4) == 2\ngreatest_common_divisor(8, 4) == 4\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ngreatest_common_divisor(10, 20) == 1\ngreatest_common_divisor(11, 20) == 1\ngreatest_common_divisor(20, 20) == 20\ngreatest_common_divisor(21, 20) == 21\ngreatest_common_divisor(22, 20) == 20\ngreatest_common_divisor(20, 21) == 1\ngreatest_common_divisor(20, 22) == 1\ngreatest_common_divisor(21, 21) == 21\ngreatest_common_divisor(21, 22) == 21\ngreatest_common_divisor(22, 22) == 22\ngreatest_common_divisor(22, 23) == 1\ngreatest_common_divisor(22, 24) == 1\ngreatest_common_divisor(24, 24) == 24\ngreatest_common_divisor(24, 25) == 1\ngreatest_common_divisor(24, 26) == 1\ngreatest_common_divisor(25, 25) == 25\ngreatest_common_divisor(25, 26) == 1\ngreatest_common_divisor(26, 26) == 26\ngreatest_common_divisor(26, 27) == 1\ngreatest_common_divisor(27, 27) == 27\ngreatest_common_divisor(27, 28) == 1\ngreatest_common_divisor(28, 28) == 28\ngreatest_common_divisor(28, 29) == 1\ngreatest_common_divisor(29, 29) == 29\ngreatest_common_divisor(29, 30) == 1\ngreatest_common_divisor(30, 30) == 30\ngreatest_common_divisor(30, 31) == 1\ngreatest_common_divisor(31, 31) == 31\ngreatest_common_divisor(31, 32) == 1\ngreatest_common_divisor(32, 32) == 32\ngreatest_common_divisor(32, 33) == 1\ngreatest_common_divisor(33, 33) == 33\ngreatest_common_divisor(33, 34) == 1\ngreatest_common_divisor(34, 34) == 34\ngreatest_common_divisor(34, 35) == 1\ngreatest_common_divisor(35, 35) == 35\ngreatest_common_divisor(35, 36) == 1\ngreatest_common_divisor(36, 36) == 36\ngreatest_common_divisor(36, 37) == 1\ngreatest_common_divisor(37, 37) == 37\ngreatest_common_divisor(37, 38) == 1\ngreatest_common_divisor(38, 38) == 38\ngreatest_common_divisor(38, 39) == 1\ngreatest_common_divisor(39, 39) == 39\ngreatest_common_divisor(39, 40) == 1\ngreatest_common_divisor(40, 40) == 40\ngreatest_common_divisor(40, 41) == 1\ngreatest_common_divisor(41, 41) == 41\ngreatest_common_divisor(41, 42) == 1\ngreatest_common_divisor(42, 42) == 42\ngreatest_common_divisor(42, 43) == 1\ngreatest_common_divisor(43, 43) == 43\ngreatest_common_divisor(43, 44) == 1\ngreatest_common_divisor(44, 44) == 44\ngreatest_common_divisor(44, 45) == 1\ngreatest_common_divisor(45, 45) == 45\ngreatest_common_divisor(45, 46) == 1\ngreatest_common_divisor(46, 46) == 46\ngreatest_common_divisor(46, 47) == 1\ngreatest_common_divisor(47, 47) == 47\ngreatest_common_divisor(47, 48) == 1\ngreatest_common_divisor(48, 48) == 48\ngreatest_common_divisor(48, 49) == 1\ngreatest_common_divisor(49, 49) == 4",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ngreatest_common_divisor(3, 4) == 1\ngreatest_common_divisor(4, 4) == 1\ngreatest_common_divisor(17, 19) == 1\ngreatest_common_divisor(19, 19) == 1\ngreatest_common_divisor(17, 5) == 1\ngreatest_common_divisor(5, 5) == 1\ngreatest_common_divisor(7, 14) == 1\ngreatest_common_divisor(14, 14) == 1\ngreatest_common_divisor(7, 9) == 1\ngreatest_common_divisor(9, 9) == 1\ngreatest_common_divisor(7, 5) == 1\ngreatest_common_divisor(5, 5) == 1\ngreatest_common_divisor(7, 7) == 1\ngreatest_common_divisor(7, 7) == 1\ngreatest_common_divisor(7, 15) == 1\ngreatest_common_divisor(15, 15) == 1\ngreatest_common_divisor(7, 11) == 1\ngreatest_common_divisor(11, 11) == 1\ngreatest_common_divisor(7, 13) == 1\ngreatest_common_divisor(13, 13) == 1\ngreatest_common_divisor(7, 17) == 1\ngreatest_common_divisor(17, 17) == 1\ngreatest_common_divisor(7, 19) == 1\ngreatest_common_divisor(19, 19) == 1\ngreatest_common_divisor(7, 23) == 1\ngreatest_common_divisor(23, 23) == 1\ngreatest_common_divisor(7, 29) == 1\ngreatest_common_divisor(29, 29) == 1\ngreatest_common_divisor(7, 3) == 1\ngreatest_common_divisor(3, 3) == 1\ngreatest_common_divisor(7, 5) == 1\ngreatest_common_divisor(5, 5) == 1\ngreatest_common_divisor(7, 9) == 1\ngreatest_common_divisor(9, 9) == 1\ngreatest_common_divisor(7, 13) == 1\ngreatest_common_divisor(13, 13) == 1\ngreatest_common_divisor(7, 17) == 1\ngreatest_common_divisor(17, 17) == 1\ngreatest_common_divisor(7, 23) == 1\ngreatest_common_divisor(23, 23) == 1\ngreatest_common_divisor(7, 29) == 1\ngreatest_common_divisor(29, 29) == 1\ngreatest_common_divisor(7, 3) == 1\ngreatest_common_divisor(3, 3) == 1\ngreatest_common_divisor(7, 5) == 1\ngreatest_common_divisor(5, 5) == 1\ngreatest_common_divisor(7, 9) == 1\ngreatest_common_divisor(9, 9) == 1\ngreatest_common_divisor(7, 13) == 1\ngreatest_common_divisor(13, 13) == 1\ngreatest_common_divisor(7, 17) == 1\ngreatest_common_divisor(17, 17) == 1\ngreatest_common_divisor(7, 23) == 1\ngreatest_common_divisor(23, 23) == 1\ngreatest_common_divisor(7, 29) == 1\ngreatest_common_divisor(29, 29) == 1\ngreatest_common_divisor(7, 3) == 1\ngreatest_common_divisor(3, 3) == 1\ngreatest_common_divisor(7, 5) == 1\ngreatest_common_divisor(5, 5) == 1\ngreatest_common_divisor(7, 9) == 1\ngreatest_common_divisor(9, 9) == 1\ngreatest_common_divisor(7, 13) == 1\ngreatest_common_divisor(13, 13) == ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(1, 1) == 1\nassert     greatest_common_divisor(3, 1) == 3\nassert     greatest_common_divisor(4, 1) == 1\nassert     greatest_common_divisor(3, 4) == 1\nassert     greatest_common_divisor(9, 3) == 3\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"hellothere\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"t\", \"here\"]\nassert     all_prefixes(\"h\") == [\"h\"]\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"\") == []\n",
        "num_ids_2": 48,
        "num_ids_4": 70
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"ab\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"abc\") == [\"ab\", \"abc\"]\nassert     all_prefixes(\"abcde\") == [\"ab\", \"abc\", \"abde\"]\nassert     all_prefixes(\"abcd\") == [\"abc\", \"abcd\"]\n",
        "num_ids_2": 31,
        "num_ids_4": 70
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_prefixes(\"cat\") == [\"cat\"], \"Should return list of all prefixes\"\nassert     all_prefixes(\"dog\") == [\"dog\"], \"Should return list of all prefixes\"\nassert     all_prefixes(\"bike\") == [\"bik\",\"bie\"], \"Should return list of all prefixes\"\nassert     all_prefixes(\"candy\") == [\"candy\",\"can\",\"cad\"], \"Should return list of all prefixes\"\nassert     all_prefixes(\"basket\") == [\"bask\",\"bus\",\"bat\",\"sau\",\"tut\",\"sut\"], \"Should return list of all prefixes\"\n",
        "num_ids_2": 46,
        "num_ids_4": 102
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"abcabcabcdef\") == [\"\", \"abc\", \"abcdef\", \"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"\") == [\"\", \"a\"]\nassert     all_prefixes(\"a\") == [\"a\", \"aa\"]\nassert     all_prefixes(\"aa\") == [\"aa\", \"aaa\"]\nassert     all_prefixes(\"aaa\") == [\"aaa\", \"aaaa\"]\n",
        "num_ids_2": 48,
        "num_ids_4": 82
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"bc\"]\nassert     all_prefixes(\"abcd\") == [\"ab\", \"ac\", \"ad\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"aaa\") == [\"aaa\"]\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from longest to shortest of the input string\n    \"\"\"\n    pass\n",
        "num_ids_2": 45,
        "num_ids_4": 59
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_prefixes(\"abcd\") == ['a', 'ab', 'abc', 'abcd']\nassert     all_prefixes(\"cats\") == ['cat', 'cats']\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"a\") == ['a']\n\ndef word_score(word: str) -> int:\n    \"\"\" Return the number of letters in word. \n    \n    An empty word should return 0, an empty word should return 0, a word\n    of one letter should return 1, and otherwise return the sum of the\n    corresponding ASCII values in each letter of word.\n",
        "num_ids_2": 42,
        "num_ids_4": 67
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert all_prefixes(\"ABC\") == [\"A\",\"AB\",\"ABC\"]\nassert all_prefixes(\"ABCABC\") == [\"ABC\",\"AB\",\"ABC\",\"ABCABC\"]\nassert all_prefixes(\"ABCABCABC\") == [\"ABCABC\",\"AB\",\"ABCABC\",\"ABCABCABC\"]\nassert all_prefixes
        "num_ids_2": 20,
        "num_ids_4": 66
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    all_prefixes('abc') == ['ab', 'abc']\nassert \n    all_prefixes('abcdef') == ['ab', 'abdf', 'abe', 'abef', 'abefd', 'abefe']\nassert \n    all_prefixes('abcde') == ['ab', 'abd', 'abe', 'abef', 'abefd', 'abefe']\n\n\ndef all_prefixes_shortest(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    string_sequence(3) == \"00 01 02\"\n    string_sequence(4) == \"00 01 02 03\"\n    string_sequence(5) == \"00 01 02 03 04\"\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert string_sequence(5) == '0000 01 00 00', f'Expected 0000 01 00 00 but got {string_sequence(5)}'\nassert string_sequence(3) == '000 00 00', f'Expected 000 00 00 but got {string_sequence(3)}'\n",
        "num_ids_2": 36,
        "num_ids_4": 67
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert string_sequence(100) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\"",
        "num_ids_2": 133,
        "num_ids_4": 133
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(6) == '0 1 2 3 4 5'\nassert     string_sequence(7) == '0 1 2 3 4 5 6'\nassert     string_sequence(8) == '0 1 2 3 4 5 6 7'\nassert     string_sequence(9) == '0 1 2 3 4 5 6 7 8'\n",
        "num_ids_2": 35,
        "num_ids_4": 74
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_sequence(1) == '0'\nassert     string_sequence(2) == '00'\nassert     string_sequence(3) == '000'\nassert     string_sequence(4) == '0000'\nassert     string_sequence(5) == '00000'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10'\nassert string_sequence(100) == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 ",
        "num_ids_2": 25,
        "num_ids_4": 1025
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\n",
        "num_ids_2": 24,
        "num_ids_4": 53
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_distinct_characters(\"AAa\") == 1\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"AAaAAaAAaAA\") == 3\n\ndef count_distinct_characters_1(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    result = {}\n    for c in string:\n        if c not in result:\n            result[c] = 1\n        else:\n            result[c] += 1\n    return len(result)\n",
        "num_ids_2": 31,
        "num_ids_4": 66
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert count_distinct_characters(\"a\") == 1\nassert count_distinct_characters(\"Abc\") == 2\nassert count_distinct_characters(\"aa\") == 1\nassert count_distinct_characters(\"aaabc\") == 3\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_distinct_characters('') == 0, 'Empty string is not valid.'\nassert     count_distinct_characters('a') == 1, 'Single character string is not valid.'\nassert     count_distinct_characters('aa') == 2, 'Two characters string is not valid.'\nassert     count_distinct_characters('aAA') == 3, 'Two characters string with space is not valid.'\nassert     count_distinct_characters('A') == 1, 'Single character string is not valid.'\n",
        "num_ids_2": 47,
        "num_ids_4": 98
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_distinct_characters(\"abc\") == 3\nassert count_distinct_characters(\"aabcd\") == 4\nassert count_distinct_characters(\"aAbcde\") == 5\nassert count_distinct_characters(\"aAbcde\") == 5\n",
        "num_ids_2": 17,
        "num_ids_4": 50
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('A') == 1\nassert     count_distinct_characters('abc') == 3\nassert     count_distinct_characters('AbC') == 3\nassert     count_distinct_characters('ABC') == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_distinct_characters('abc') == 1\nassert     count_distinct_characters('AAbb') == 2\nassert     count_distinct_characters('aAaA') == 3\nassert     count_distinct_characters('AbB') == 1\nassert     count_distinct_characters('AaA') == 2\n",
        "num_ids_2": 31,
        "num_ids_4": 65
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters('h') == 1\nassert     count_distinct_characters('hello') == 5\nassert     count_distinct_characters('hELLo') == 5\nassert     count_distinct_characters('aabbccdd') == 6\nassert     count_distinct_characters('AaBbCcDd') == 6\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_music('o|o|o|o|o|o|o|o|o|o') == [4]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o') == [4]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o') == [4]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o') == [4]\nassert     parse_music('o|o|o|o|o|o|o|o|o|o') == [4]\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_music(\"oo|ooo|.o|oooo\") == [4, 2, 1, 0]\nassert     parse_music(\"o|o|o|o|ooo|o|o|o\") == [4, 2, 1, 0]\nassert     parse_music(\"ooo|ooo|ooo|ooo|ooo|ooo|ooo\") == [4, 2, 2, 2, 2, 2, 4]\nassert     parse_music(\"o|o|o|o|o|o|o|o\") == [4, 2, 1, 0]\nassert     parse_music(\"ooo|ooo|ooo|ooo|ooo|ooo|o\") == [4, 2, 1, 0]\n",
        "num_ids_2": 59,
        "num_ids_4": 129
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef convert_to_music(notes: List[int]) -> str:\n    \"\"\"\n    Input to this function is a list of integers describing musical notes in the list.\n    Your task is to convert this list into a string, where each \"o\" in the list represents 4 beats,\n    \"o|\" - 2 beats, \"|.\" - 1 beat, \".\" - single beat.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_music('o|o|o|o|o|o|o') == [4, 2, 2, 2]\nassert parse_music('oo|oo|oo|o') == [4, 2, 2, 2]\nassert parse_music('ooo|ooo|ooo|oo|ooo|oo') == [4, 2, 2, 2, 2, 2]\nassert parse_music('ooo|ooo|ooo|oo') == [4, 2, 2, 2]\nassert parse_music('ooo|oo|o') == [4, 2, 2]\n",
        "num_ids_2": 55,
        "num_ids_4": 111
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nparse_music('o|') == (0, 0, 1, 1)\nparse_music('o|o') == (0, 0, 2, 1)\nparse_music('o|o|o') == (0, 0, 3, 1)\nparse_music('o|o|o|') == (0, 0, 4, 1)\nparse_music('o|o|o|o|') == (0, 0, 5, 1)\nparse_music('o|o|o|o|o|') == (0, 0, 6, 1)\nparse_music('o|o|o|o|o|o|o|o|') == (0, 0, 7, 1)\nparse_music('o|o|o|o|o|o|o|o|o|o|') == (0, 0, 8, 1)\nparse_music('o|o|o|o|o|o|o|o|o|o|o|') == (0, 0, 9, 1)\nparse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|') == (0, 0, 10, 1)\nparse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') == (0, 0, 11, 1)\nparse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') == (0, 0, 12, 1)\nparse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|') == (0, 0, 13, 1)\nparse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_music(\"o|\") == [4]\nassert     parse_music(\"o|o|\") == [4, 2]\nassert     parse_music(\"oo|\") == [4, 2, 4]\nassert     parse_music(\"o.|.|\") == [4, 2, 4, 2]\nassert     parse_music(\"o.|.|o|\") == [4, 2, 4, 2, 2]\n",
        "num_ids_2": 32,
        "num_ids_4": 73
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_music('o|') == [2, 2]\nassert     parse_music('o|o|o|') == [4, 4]\nassert     parse_music('o|o|o|o|') == [4, 4]\nassert     parse_music('o|o|o|o|o|') == [4, 4]\nassert     parse_music('o|o|o|o|o|o') == [4, 4]\n",
        "num_ids_2": 36,
        "num_ids_4": 82
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_music('''\n    .|.|.|.\n    .|.|.|.\n    .|.|.|.\n    .|.|.|.\n    ''') == [4]\n\nassert     parse_music('''\n    .|.|.|.|.\n    .|.|.|.|.\n    .|.|.|.|.\n    .|.|.|.|.\n    ''') == [4, 4, 4, 4]\n\nassert     parse_music('''\n    .|.|.|.|.\n    .|.|.|.|.\n    .|.|.|.|.\n    .|.|.|.|.\n    ''') == [4, 4, 4, 4, 4]\n",
        "num_ids_2": 18,
        "num_ids_4": 27
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times(\"aabcd\", \"cd\") == 2\nassert     how_many_times(\"aabcd\", \"b\") == 1\nassert     how_many_times(\"aabcd\", \"ab\") == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert how_many_times(\"abbaba\", \"abb\") == 3, \"Should be 3\"\nassert how_many_times(\"abbaba\", \"a\") == 2, \"Should be 2\"\nassert how_many_times(\"aaaaa\", \"a\") == 1, \"Should be 1\"\n",
        "num_ids_2": 6,
        "num_ids_4": 50
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     how_many_times('ABCD', 'ABC') == 2\nassert     how_many_times('ABCD', 'A') == 1\nassert     how_many_times('ABCD', 'B') == 2\nassert     how_many_times('ABCD', 'C') == 2\nassert     how_many_times('ABCD', 'D') == 3\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     how_many_times('carrace', 'race') == 3\nassert     how_many_times('racecar', 'race') == 2\nassert     how_many_times('racecar', 'car') == 0\n\ndef are_strings_equal(s1: str, s2: str) -> bool:\n    \"\"\" Find whether two strings are equal\n    \"\"\"\n    pass\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     how_many_times('abababab', 'ab') == 4, 'incorrect'\nassert     how_many_times('abababab', 'ab') == 2, 'incorrect'\nassert     how_many_times('abcabcabc', 'abc') == 2, 'incorrect'\nassert     how_many_times('abcabcabc', 'abc') == 1, 'incorrect'\nassert     how_many_times('abababab', 'ab') == 4, 'incorrect'\n",
        "num_ids_2": 48,
        "num_ids_4": 94
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef how_many_times2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     how_many_times(\"aab\", \"ab\") == 1\nassert     how_many_times(\"baba\", \"aba\") == 2\nassert     how_many_times(\"aabb\", \"ab\") == 0\nassert     how_many_times(\"baba\", \"bb\") == 1\nassert     how_many_times(\"baba\", \"ab\") == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_how_many_times():\n    \"\"\" Test how_many_times\n    \"\"\"\n    assert how_many_times(\"abccba\", \"abc\") == 3\n    assert how_many_times(\"abccba\", \"c\") == 2\n    assert how_many_times(\"abccba\", \"bbc\") == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef list_to_dict(list_of_numbers: str) -> dict:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return a dictionary with numbers in the string mapped to their list index\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sort_word(words: str) -> str:\n    \"\"\" Input is a space-delimited string of wordals.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with wordals sorted from smallest to largest.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef sort_letters(names: str) -> str:\n    \"\"\" Input is a space-delimited string of alphabetic names.\n    Valid choices are 'A' thru 'Z'.\n    Return the string with letters sorted from largest to smallest\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Valid choices are 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with words sorted from smallest to largest\n    \"\"\"\n    pass\n\n\ndef sort_lines(lines: str) -> str:\n    \"\"\" Input is a space-delimited string of lines.\n    Valid choices are 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with lines sorted from smallest to largest\n    \"\"\"\n    pass\n\n\ndef sort_alphabet(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Valid choices are 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with words sorted from smallest to largest\n    \"\"\"\n    pass\n\n\ndef sort_numbers_and_words(numbers: str, words: str) -> str:\n    \"\"\" Input is a space-delimited string of numbers and words.\n    Valid choices are 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest and words sorted from smallest to largest\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers('zero') == 'zero'\nassert     sort_numbers('two') == 'two'\nassert     sort_numbers('four') == 'four'\nassert     sort_numbers('eight') == 'eight'\nassert     sort_numbers('nine') == 'nine'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numbers('one two three four five six seven eight nine ten') == 'ten nine eight seven six five four three two one'\n\n\ndef sort_strings(strings: str) -> str:\n    \"\"\" Input is a space-delimited string of strings.\n    Valid choices are 'a' to 'z' and 'A' to 'Z'.\n    Return the string with the strings sorted from smallest to largest\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'nine zero one two three four five six seven eight'\nassert     sort_numbers('zero nine one two three four five six seven eight') == 'eight nine zero one two three four 5 seven six 8'\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numbers(\"one three\") == \"three one\"\nassert sort_numbers(\"two two\") == \"two two\"\nassert sort_numbers(\"zero four\") == \"four zero\"\nassert sort_numbers(\"zero four\") == \"four zero\"\nassert sort_numbers(\"two three one\") == \"three two one\"\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_range(lower: int, upper: int) -> int:\n    \"\"\" Return the sum of all the numbers from 'lower' to 'upper'.\n    The upper limit must be included.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_closest_elements([1,3,5,7]) == (3, 5)\nassert     find_closest_elements([-1,3,5,-7]) == (-1, 3)\nassert     find_closest_elements([1,2,3,4]) == (1, 2)\nassert     find_closest_elements([1,2,3,4,5]) == (1, 2)\nassert     find_closest_elements([]) == (None, None)\n",
        "num_ids_2": 53,
        "num_ids_4": 107
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_closest_elements([1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5]) == (1.5, 1.5)\nassert     find_closest_elements([1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == (1, 1)\nassert     find_closest_elements([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5]) == (1, 1)\n",
        "num_ids_2": 100,
        "num_ids_4": 140
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_closest_elements([2,1,3,5]) == (3,5)\nassert     find_closest_elements([3,5,7,2]) == (2,7)\nassert     find_closest_elements([3,2,5,7,1]) == (2,3)\nassert     find_closest_elements([3,5,1]) == (3,5)\nassert     find_closest_elements([1,3,2,5,7]) == (1,3)\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_closest_elements([7.99, 8.99, 9.99])    ==    (8.99, 7.99)\nassert     find_closest_elements([1.01, 1.01, 1.01])    ==    (1.01, 1.01)\nassert     find_closest_elements([-1.01, -1.01, -1.01]) ==    (-1.01, -1.01)\nassert     find_closest_elements([-2.01, -2.01, -2.01]) ==    (-2.01, -2.01)\nassert     find_closest_elements([-3.01, -3.01, -3.01]) ==    (-3.01, -3.01)\n",
        "num_ids_2": 72,
        "num_ids_4": 150
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_closest_elements([1, 2, 3]) == (1, 2)\nfind_closest_elements([1, 1, 1]) == (1, 1)\nfind_closest_elements([]) == (None, None)\nfind_closest_elements([-1, 2, -10, 8, -50, 60, -100]) == (2, 8)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_closest_elements([1.1, 1.5, 1.9, 2.1, 2.3]) == (1.5, 2.1)\nassert     find_closest_elements([1.1, 1.5, 1.9, 2.1, 2.2]) == (1.5, 2.1)\nassert     find_closest_elements([1.1, 1.5, 1.9, 2.1, 2.2, 2.4]) == (1.5, 2.1)\nassert     find_closest_elements([1.1, 1.5, 1.9, 2.1, 2.2, 2.5]) == (1.5, 2.1)\nassert     find_closest_elements([1.1, 1.5, 1.9, 2.1, 2.2, 2.4, 2.5]) == (1.5, 2.1)\n",
        "num_ids_2": 84,
        "num_ids_4": 176
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nassert     find_closest_elements([1, 2, 4, 4, 5]) == (1, 4)\nassert     find_closest_elements([1, 2, 5, 4, 5]) == (1, 5)\nassert     find_closest_elements([1, 2, 3, 4, 5, 3, 3, 3, 5, 5, 5, 6, 6]) == (1, 3)\nassert     find_closest_elements([5, 6, 7, 8, 10]) == (6, 10)\n",
        "num_ids_2": 56,
        "num_ids_4": 128
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_closest_elements([-1.1, -2.1, 2.1, 4.1]) == (-1.1, 4.1)\nassert     find_closest_elements([-1.5, -2.5, 2.5, 4.5]) == (-1.5, 4.5)\nassert     find_closest_elements([-1.2, -2.1, 2.1, 4.1]) == (-1.2, 4.1)\nassert     find_closest_elements([-1.3, -2.2, 2.2, 4.2]) == (-1.3, 4.2)\nassert     find_closest_elements([-1.1, -2.2, 2.2, 4.2]) == (-1.1, 4.2)\n",
        "num_ids_2": 80,
        "num_ids_4": 160
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([3.0, 4.0, 4.0, 1.0, 2.0, 0.0]) == [0.0, 0.5, 1.0, 0.25, 0.5, 0.0]\nassert     rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]) == [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8]\nassert     rescale_to_unit([1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0]) == [0.0, 0.1, 0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.0, 7.0, 8.0, 8.0, 9.0, 10.0]) == [0.0, 0.2, 0.2, 0.3, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]\n",
        "num_ids_2": 152,
        "num_ids_4": 400
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]) == \\\n        [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1]\n\ndef min_max(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers, return the min, max, and mean of those numbers. \"\"\"\n    min_numbers = min(numbers)\n    max_numbers = max(numbers)\n    mean_numbers = sum(numbers) / len(numbers)\n    return min_numbers, max_numbers, mean_numbers\n",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0.25, 0.5, 0.75, 1]\nassert     rescale_to_unit([0, 0, 0, 1]) == [0, 0, 0, 1]\nassert     rescale_to_unit([0, 0, 0, 0]) == [0, 0, 0, 0]\n\n\ndef rescale_to_unit_2(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n",
        "num_ids_2": 62,
        "num_ids_4": 90
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([-1, 1, 1, 2, 2, 3, 4, 5, 7, 8, 8, 9, 10, 10, 11, 12, 13, 13, 13, 14, 15, 16, 16, 17, 18, 18, 19, 20, 21, 22, 22, 23, 24, 24, 25, 26, 26, 26, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 3",
        "num_ids_2": 1026,
        "num_ids_4": 1026
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == \\\n    [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, 1.9, ",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rescale_to_unit([0, -2, 3]) == [0, 0.5, 1]\nassert     rescale_to_unit([1, -2, 3]) == [0, 0.5, 1]\nassert     rescale_to_unit([2, -2, 3]) == [0, 0.5, 1]\nassert     rescale_to_unit([3, -2, 3]) == [0, 0.5, 1]\nassert     rescale_to_unit([-2, -2, 3]) == [0, 0.5, 1]\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef rescale_to_unit_no_zero(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    If the largest element of the list is 0, the largest element will remain 0\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_integers(['a', 1, 2.5, False, True, None, 'a', 'b', -1]) == ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b']\nassert filter_integers(['a', 1, 2.5, False, True, None, 'a', 'b', -1, 'c']) == ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b']\nassert filter_integers(['a', 1, 2.5, False, True, None, 'a', 'b', -1, 2, 5, True, 'c']) == ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'b', 2, 5, True, 'c']\n\n\ndef filter_single_letter_words(words: List[str]) -> List[str]:\n    \"\"\" Filter given list of words only for words that only contain one character\n    \"\"\"\n    pass\n",
        "num_ids_2": 123,
        "num_ids_4": 201
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     filter_integers([1.1, 2.1, 3.1, 4.1, 5.1, 6.1]) == [1, 2, 3, 4, 5, 6]\nassert     filter_integers([True, False, False, False]) == [True, False, False]\nassert     filter_integers([True, False, True, False]) == [True, False, False]\nassert     filter_integers([-3, -2, -1, 0, 1, 2, 3]) == [-3, -2, -1, 0, 1, 2, 3]\n",
        "num_ids_2": 80,
        "num_ids_4": 128
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \\\n    \"filter_integers should return a list of integers\"\nassert filter_integers([1.5, 2.4, 3.1, 4.0]) == [1, 2, 3, 4], \\\n    \"filter integers must ignore floats and other non-integers\"\nassert filter_integers([True, False, None]) == [True, False, None], \\\n    \"filter integers must ignore falsey values\"\n\ndef filter_strings(values: List[Any]) -> List[Any]:\n    \"\"\" Filter strings from list of any python values\n    \"\"\"\n    pass\n",
        "num_ids_2": 69,
        "num_ids_4": 91
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_integers([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4]\nassert     filter_integers([0, 'a', 2, 3, 4]) == [0, 2, 3, 4]\nassert     filter_integers([0, 1, 2, 'a', 4]) == [0, 1, 2, 4]\nassert     filter_integers([0, 1, 2, 3, 'a', 4]) == [0, 1, 2, 3, 4]\nassert     filter_integers([0, 1, 'a', 'b', 4]) == [0, 1, 4]\n",
        "num_ids_2": 59,
        "num_ids_4": 121
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    print('Filter integers')\n    my_values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    assert filter_integers(my_values) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    my_values = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    assert filter_integers(my_values) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    my_values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '0']\n    assert filter_integers(my_values) == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    my_values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert filter_integers([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert filter_integers([1.5, 2.6, 3.2]) == [1.5, 2.6, 3.2]\nassert filter_integers([1, 3, 4, 5, 6]) == [1, 3, 4, 5, 6]\nassert filter_integers([1, 3, 4, \"a\", \"b\", \"c\", 5, 6]) == [1, 3, 4, 5, 6]\n",
        "num_ids_2": 34,
        "num_ids_4": 96
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    filter_integers([1, '2', 0, -4, '10']) == [1, 2, 0, 10], \"Error in filter_integers\"\n\ndef sum_integers(values: List[Any]) -> int:\n    \"\"\" Sum all values\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers([1, \"2\", 3, 4, 5, \"6\", 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     filter_integers([1.2, 2.4, 3.6, 4.8, 5.9, 6.1, 7.2, 8.5, 9.9]) == [1.2, 2.4, 3.6, 4.8, 5.9, 6.1, 7.2, 8.5, 9.9]\nassert     filter_integers([True, False, True, False, True, True, False, True, True]) == [True, False, True, False, True, True, False, True, True]\nassert     filter_integers([1, \"2\", 3, \"4\", 5, \"6\", 7, 8, \"9\", 10]) == [1, \"2\", 3, \"4\", 5, \"6\", 7, 8, \"9\", 10]\n",
        "num_ids_2": 102,
        "num_ids_4": 230
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef print_user_record(user: User) -> None:\n    \"\"\" Print details of given user\n    \"\"\"\n    pass\n\ndef sort_user_record(user: User) -> None:\n    \"\"\" Sorts given user record\n    \"\"\"\n    pass\n\n\ndef main():\n    # define users\n    user_1 = User(\"Harsha\", \"Wai\")\n    user_2 = User(\"Ram\", \"Sharma\")\n    user_3 = User(\"Sita\", \"Wai\")\n\n    # print users\n    print_user_record(user_1)\n    print_user_record(user_2)\n    print_user_record(user_3)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert strlen('hello') == 5\nassert strlen('a') == 1\nassert strlen('') == 0\n\ndef strstr(string: str, substring: str) -> int:\n    \"\"\" Check if substring is part of string\n    \"\"\"\n    pass\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     strlen(\"the\") == 5, \"Failed\"\nassert     strlen(\"he\") == 3, \"Failed\"\nassert     strlen(\"th\") == 2, \"Failed\"\nassert     strlen(\"the\") == 5, \"Failed\"\nassert     strlen(\"\") == 0, \"Failed\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef strcmp(a: str, b: str) -> int:\n    \"\"\"\n    strcmp: compare the two strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strlen('hello') == 5\nassert     strlen('') == 0\nassert     strlen(' ') == 1\n",
        "num_ids_2": 20,
        "num_ids_4": 30
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef main():\n    assert strlen(\"test\") == 3\n    assert strlen(\"\") == 0\n    assert strlen(\"some text\") == 11\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strlen('qwer') == 3\nassert strlen('123') == 3\nassert strlen('12345') == 5\nassert strlen('12345678') == 7\nassert strlen('123456789') == 9\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_divisor(9) == 3\nassert     largest_divisor(12) == 3\nassert     largest_divisor(20) == 5\nassert     largest_divisor(24) == 4\nassert     largest_divisor(40) == 4\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_divisor(0) == 1\nassert     largest_divisor(6) == 2\nassert     largest_divisor(12) == 3\nassert     largest_divisor(20) == 5\nassert     largest_divisor(24) == 6\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_divisor(12) == 3, \"The largest_divisor function is not correct\"\nassert    largest_divisor(0) == 1, \"The largest_divisor function is not correct\"\nassert    largest_divisor(9) == 3, \"The largest_divisor function is not correct\"\nassert    largest_divisor(15) == 3, \"The largest_divisor function is not correct\"\n\ndef largest_factor(n: int) -> int:\n    \"\"\" For a given number n, find the largest factor of n that is smaller than n.\n    \"\"\"\n    pass\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert largest_divisor(5) == 5\nassert largest_divisor(12) == 2\nassert largest_divisor(9) == 3\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_divisor(0) == 1\nassert     largest_divisor(6) == 1\nassert     largest_divisor(12) == 2\nassert     largest_divisor(18) == 3\nassert     largest_divisor(24) == 4\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"TESTING\")\n    \n    # Assertion\n    assert largest_divisor(9) == 3\n    assert largest_divisor(7) == 7\n    assert largest_divisor(5) == 5\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_divisor(10) == 5\nassert     largest_divisor(6) == 3\nassert     largest_divisor(20) == 5\nassert     largest_divisor(9) == 3\nassert     largest_divisor(24) == 8\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 2\nassert     largest_divisor(5) == 1\nassert     largest_divisor(6) == 2\nassert     largest_divisor(10) == 5\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     factorize(60) == [2, 3, 5, 6]\nassert     factorize(10) == [2, 5]\nassert     factorize(20) == [2, 2, 5]\nassert     factorize(18) == [2, 2, 3, 3]\nassert     factorize(17) == [17]\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import sys\n    import io\n    sys.stdin = io.BytesIO(bytes(input(), encoding=\"utf8\"))\n    input() # read number\n    print(factorize(int(input())))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     factorize(4) == [[2, 2], [2, 1], [2]]\nassert     factorize(8) == [[2, 2], [2, 1], [2, 1], [2], [1, 1], [1, 1]]\nassert     factorize(4) == [[2, 2], [2, 1], [2]]\nassert     factorize(48) == [[2, 6], [2, 2], [2, 3], [2, 2], [2, 1], [2, 1], [3, 1], [1, 1]]\nassert     factorize(25) == [[5, 5], [5, 1], [5], [1, 1], [1, 1]]\n",
        "num_ids_2": 59,
        "num_ids_4": 130
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef prime_factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n\n\ndef bs_count(n: int, k: int) -> int:\n    \"\"\"\n    Find the number of bits in the binary representation of n\n    using binary search on the range of 2 ** k - 1\n    \"\"\"\n    pass\n\ndef bs_search(n: int, k: int) -> int:\n    \"\"\"\n    Find the number of bits in the binary representation of n\n    using binary search on the range of 2 ** k - 1\n    \"\"\"\n    pass\n\ndef bs_binary_search(n: int, k: int, x: int) -> int:\n    \"\"\"\n    Find the number of bits in the binary representation of n\n    using binary search on the range of 2 ** k - 1\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     factorize(9) == [3,3]\nassert     factorize(7) == [2,3]\nassert     factorize(10) == [2,5]\nassert     factorize(4) == [2]\nassert     factorize(5) == [5]\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     factorize(2) == [2,1], 'Wrong factorization result'\nassert factorize(3) == [3,1], 'Wrong factorization result'\nassert factorize(12) == [2,2,3,1], 'Wrong factorization result'\nassert factorize(24) == [2,2,2,2,3], 'Wrong factorization result'\nassert factorize(48) == [2,2,2,2,2,6], 'Wrong factorization result'\n",
        "num_ids_2": 41,
        "num_ids_4": 91
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfactorize(10) == [2, 5]\nassert \nfactorize(100) == [2, 2, 5, 5]\nassert \nfactorize(1000) == [3, 3, 3, 3, 5, 5]\nassert \nfactorize(10000) == [2, 2, 4, 4, 4, 4, 5, 5]\nassert \nfactorize(123456) == [2, 3, 3, 4, 4, 4, 4, 4, 8, 8]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nfactorize(8) == [2, 2, 2]\nfactorize(1) == []\nfactorize(32) == [2, 2, 2, 2]\n\ndef factorize_2(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     factorize(8) == [2, 2, 2, 2]\nassert     factorize(7) == [7]\nassert     factorize(18) == [2, 2, 2, 3]\nassert     factorize(60) == [2, 2, 2, 2, 2, 5]\nassert     factorize(4) == [2, 2]\n",
        "num_ids_2": 30,
        "num_ids_4": 70
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     factorize(6) == [2,3,3]\nassert     factorize(12) == [2,2,3,3]\nassert     factorize(24) == [2,2,2,2,3]\nassert     factorize(36) == [2,2,2,2,2,3]\n\n\ndef lcm(a: int, b: int) -> int:\n    \"\"\" Find the least common multiple of 2 integers.\n    \"\"\"\n    pass\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1,2,3,4,4,5,6,7,7,8]) == [1,2,3,4,5,6,7,8]\nassert     remove_duplicates([1,2,2,3,4,4,5,6,7,7,8]) == [1,2,3,4,5,6,7,8]\nassert     remove_duplicates([1,2,2,3,4,4,5,6,7,7,8,9,9,9]) == [1,2,3,4,5,6,7,8,9]\nassert     remove_duplicates([1,2,3,4,4,5,6,7,7,8,9,9,9,9]) == [1,2,3,4,5,6,7,8,9,9,9,9]\nassert     remove_duplicates([1,2,3,4,4,5,6,7,7,8,9,9,9,9,9,9]) == [1,2,3,4,5,6,7,8,9,9,9,9,9,9,9,9]\n",
        "num_ids_2": 96,
        "num_ids_4": 216
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert remove_duplicates([1,1,2]) == [1, 2], \"Simple cases\"\nassert remove_duplicates([1,2,2,3,3,4]) == [1, 2, 3, 4], \"Alphabetical\"\nassert remove_duplicates([1,1,1,2,2,2,2]) == [1,2, 2], \"Duplicate number\"\n",
        "num_ids_2": 27,
        "num_ids_4": 98
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_duplicates([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]\nassert     remove_duplicates([2, 2, 2, 2, 2, 2]) == [2, 2]\nassert     remove_duplicates([1, 1, 1, 1, 1]) == [1, 1]\nassert     remove_duplicates([1, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == [1, 2, 2, 2, 2, 2]\n",
        "num_ids_2": 70,
        "num_ids_4": 122
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_duplicates([1,2,3,3]) == [1,2,3]\nassert     remove_duplicates([1,1,2,2,3,4,4]) == [1,2,3,4]\nassert     remove_duplicates([1,1,2,3,3,4,5,5]) == [1,2,3,4,5]\n",
        "num_ids_2": 58,
        "num_ids_4": 95
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_duplicates([0,0,1,1,1,2,2,3,3,4]) == [0,1,2,3,4], \"Wrong\"\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_duplicates([1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert remove_duplicates([1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ndef sort_list_by_second(numbers: List[int]) -> List[int]:\n    \"\"\" Sort a list of numbers, where the second element is the desired key.\n    \"\"\"\n    pass\n",
        "num_ids_2": 105,
        "num_ids_4": 105
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    remove_duplicates([\"a\", \"b\", \"a\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert\n    remove_duplicates([1, 2, 3, 4, 2, 5]) == [1, 2, 3, 4, 5]\nassert\n    remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\nassert\n    remove_duplicates([1, 1, 2, 2, 2, 3, 3]) == [1, 2, 3]\n\n\ndef find_missing_element(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, return the first integer missing from the list.\n    The missing number should be the smallest possible in the range of the integers.\n    You don't need to use any built-in method to find the missing number.\n    \"\"\"\n    pass\n",
        "num_ids_2": 5,
        "num_ids_4": 9
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef count_occurences(string: str) -> int:\n    \"\"\" Count occurences of substring inside a string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert flip_case(\"a1b2c3D\") == \"A1B2C3D\"\nassert flip_case(\"a1b2c3D\") == \"A1B2C3D\"\n",
        "num_ids_2": 27,
        "num_ids_4": 51
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_longest_word(words: List[str]) -> str:\n    \"\"\" For a given words, return the longest word.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef reverse_words(string: str) -> str:\n    \"\"\" Reverse the words in a given string.\n    \"\"\"\n    pass\n\n\n\ndef parse_int(string: str) -> int:\n    \"\"\" For a given string, parse it as an integer and return it.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(f\">>> Exercise 2.3.1: {flip_case('helloWorld') == 'HELLO WORLD'}\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    string = 'Test case 1'\n    # If you want to try more tricky cases, you can also add test cases of your own in the space below.\n    test_cases = ['test 1', 'test 2']\n    for case in test_cases:\n        string = case\n        print(flip_case(string))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_duplicates(strings: List[str]) -> List[str]:\n    \"\"\" Remove duplicates from a list of strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\", \"concatenate doesn't work\"\nassert     concatenate([1, 2, 3]) == \"1, 2, 3\", \"concatenate doesn't work\"\nassert     concatenate([\"Test\"]) == \"Test\", \"concatenate doesn't work\"\nassert     concatenate([\"Test\"]) == \"Test\", \"concatenate doesn't work\"\nassert     concatenate([\"Test\"]) == \"Test\", \"concatenate doesn't work\"\n",
        "num_ids_2": 60,
        "num_ids_4": 110
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert\n\n\ndef is_palindrome(word: str) -> bool:\n    \"\"\" \n    Return True if the word is a palindrome, False otherwise\n    \"\"\"\n    pass\n\n\ndef count_positions_between(word: str, needle: str) -> int:\n    \"\"\"\n    Return the number of occurrences of needle in word\n    \"\"\"\n    pass\n\n\ndef replace_substring(string: str,\n        substring: str,\n        replacement: str) -> str:\n    \"\"\"\n    Replace substring with replacement in string\n    \"\"\"\n    pass\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef replace(string: str, old_word: str, new_word: str) -> str:\n    \"\"\" Return a new string with old_word replaced with new_word.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nconcatenate([\"hi\", \"bye\"]) == \"hi bye\"\nconcatenate([\"hello\", \"world\"]) == \"hello world\"\nconcatenate([\"hello\", \"world\", \"!\"]) == \"hello world!\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate([]) == \"\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"hello\", \"!\"]) == \"hello!\\n\"\nassert     concatenate([\"hello\", \" \"]) == \"hello \"\nassert     concatenate([\"hello\", \"!\"]) == \"hello!\\n\"\n",
        "num_ids_2": 24,
        "num_ids_4": 63
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test case\n    strings = [\"Hello\", \"world\"]\n    assert concatenate(strings) == \"Helloworld\"\n\n    strings = [\"abc\", \"xyz\"]\n    assert concatenate(strings) == \"abcxyz\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(f\"Input: {concatenate(['Hello', 'World'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!!!'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f\"Input: {concatenate(['Hello', 'World', '!!!', 'How', 'are', 'you', 'today', '?'])}\")\n    print(f",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_strings = [\"hello\", \"world\", \"test\"]\n    expected = [\"hello\", \"world\"]\n    filtered = filter_by_prefix(test_strings, \"hello\")\n    assert expected == filtered\n    filtered = filter_by_prefix(test_strings, \"world\")\n    assert expected == filtered\n    filtered = filter_by_prefix(test_strings, \"test\")\n    assert expected == filtered\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([], \"\") == []\nassert filter_by_prefix([\"hi\", \"there\", \"hello\"], \"hi\") == [\"hi\", \"hello\"]\nassert filter_by_prefix([\"hi\", \"there\", \"hello\"], \"hello\") == [\"hello\"]\nassert filter_by_prefix([\"hi\", \"there\", \"hello\"], \"he\") == []\n",
        "num_ids_2": 41,
        "num_ids_4": 87
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_prefix(['a', 'aa', 'aaa', 'aaaa'], 'aa') == ['aa', 'aaa']\nassert     filter_by_prefix(['a', 'aa', 'aaa', 'aaaa'], 'aaa') == ['aaa']\nassert     filter_by_prefix(['a', 'aa', 'aaa', 'aaaa'], 'aaaa') == ['aaaa']\nassert not filter_by_prefix(['a', 'aa', 'aaa', 'aaaa'], 'abcd')\nassert filter_by_prefix(['a', 'aa', 'aaa', 'aaaa'], 'abc') == []\n",
        "num_ids_2": 61,
        "num_ids_4": 116
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    filter_by_prefix([\"a\", \"b\", \"c\"], \"a\") == [\"a\"]\n    filter_by_prefix([\"a\", \"b\", \"c\", \"a\"], \"a\") == [\"a\"]\n    filter_by_prefix([\"a\", \"b\", \"c\", \"a\"], \"b\") == [\"b\"]\n    filter_by_prefix([\"a\", \"b\", \"c\", \"a\"], \"c\") == [\"c\"]\n    filter_by_prefix([\"a\", \"b\", \"c\", \"a\"], \"d\") == []\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfilter_by_prefix([\"abc\", \"abd\", \"cda\"], \"b\") == [\"abc\", \"abd\"]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"a\", \"aa\", \"ab\", \"abc\", \"abc\"], \"a\") == [\"a\", \"aa\", \"abc\"]\nassert     filter_by_prefix([\"a\", \"aa\", \"ab\", \"abc\", \"abc\"], \"ab\") == [\"ab\", \"abc\"]\nassert     filter_by_prefix([\"a\", \"aa\", \"ab\", \"abc\", \"abc\"], \"abc\") == [\"abc\"]\nassert     filter_by_prefix([\"a\", \"aa\", \"ab\", \"abc\", \"abc\"], \"abc\") == [\"abc\"]\nassert     filter_by_prefix([\"a\", \"aa\", \"ab\", \"abc\", \"abc\"], \"abcde\") == []\n",
        "num_ids_2": 71,
        "num_ids_4": 133
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"], \"ab\") == [\"ab\", \"abc\", \"abcd\", \"abcde\"]\nassert filter_by_prefix([\"\", \"b\", \"c\", \"abc\", \"abcd\", \"abcde\"], \"a\") == [\"\", \"ab\", \"abc\", \"abcde\"]\nassert filter_by_prefix([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"\"], \"ab\") == [\"ab\", \"abc\", \"abcd\", \"abcde\"]\nassert filter_by_prefix([\"\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"\"], \"a\") == [\"ab\", \"abc\", \"abcd\", \"abcde\"]\n",
        "num_ids_2": 46,
        "num_ids_4": 134
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_by_prefix(['a', 'a', 'b'], 'a') == ['a', 'a']\nassert     filter_by_prefix(['a', 'b', 'a', 'b'], 'a') == ['a', 'a']\nassert     filter_by_prefix(['a', 'b', 'b', 'c', 'a', 'b'], 'a') == ['a', 'a']\nassert     filter_by_prefix(['a', 'b', 'c', 'a', 'b', 'c', 'd', 'b'], 'b') == ['b', 'c']\nassert     filter_by_prefix(['a', 'b', 'c', 'a', 'b', 'c', 'd', 'b'], 'b') == ['b', 'c']\n",
        "num_ids_2": 61,
        "num_ids_4": 143
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert filter_by_prefix([], \"a\") == []\nassert filter_by_prefix([\"a\", \"b\", \"c\"], \"a\") == [\"a\"]\nassert filter_by_prefix([\"a\", \"b\", \"c\"], \"b\") == [\"b\"]\nassert filter_by_prefix([\"a\", \"b\", \"c\"], \"c\") == [\"c\"]\n",
        "num_ids_2": 17,
        "num_ids_4": 65
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_prefix([\"abc\", \"de\", \"ef\", \"xyz\"], \"abc\") == [\"abc\"]\nassert     filter_by_prefix([\"abc\", \"de\", \"ef\", \"xyz\"], \"d\") == []\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, 3, -1, -2, 0]) == [1, 2, 3]\nassert     get_positive([]) == []\nassert     get_positive([1, 2, 3, 4, 5, -1, -2, 0]) == [1, 2, 3, 4, 5]\nassert     get_positive([1, -2, 3]) == []\nassert     get_positive([-1, -2, -3]) == []\n",
        "num_ids_2": 39,
        "num_ids_4": 92
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_positive([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == []\nassert     get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     get_positive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 87,
        "num_ids_4": 140
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_positive(['a', 'b', 'c', 'd']) == ['a', 'b', 'c']\nassert     get_positive(['1', '2', '3', '-4']) == ['1', '2', '3']\n",
        "num_ids_2": 61,
        "num_ids_4": 61
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_positive([3, 2, -9, 0, 7]) == [3, 7]\nassert     get_positive([3, -2, 9]) == [3, 9]\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([1,2,3,4,0,-1,-2]) == [1,2,3,4]\nassert     get_positive([-1,2,3,4,0,1,-2]) == [-1,2,3,4,0,1]\nassert     get_positive([1,2,3,4,0,-1,-2]) == []\nassert     get_positive([0,1,2,3,4]) == [1,2,3,4]\nassert     get_positive([]) == []\n",
        "num_ids_2": 67,
        "num_ids_4": 117
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_count_of_positive(l: list):\n    \"\"\"Return the count of positive numbers in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive(['1', '2', '-2', '-4']) == ['2', '-2', '-4'], \"Wrong result\"\n",
        "num_ids_2": 40,
        "num_ids_4": 40
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Test Passed'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_positive([1, -2, 3]) == [1, 3]\nassert get_positive([-1, 0, 1, 2, -3]) == [1, 2]\nassert get_positive([0, -1, -2, -3]) == []\n",
        "num_ids_2": 44,
        "num_ids_4": 63
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_positive([-1, 2, -3, 0, 1]) == [1, 2, 3, 0, 1]\nassert     get_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_positive([-2, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\n\nprint(\"Done.\")",
        "num_ids_2": 80,
        "num_ids_4": 112
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_prime(2) == True, \"2 is prime\"\nassert     is_prime(3) == True, \"3 is prime\"\nassert     is_prime(5) == False, \"5 is not prime\"\nassert     is_prime(7) == True, \"7 is prime\"\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_prime(1) is False\nassert     is_prime(2) is True\nassert     is_prime(3) is True\nassert     is_prime(4) is False\nassert     is_prime(5) is True\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    is_prime(13) == False\n    is_prime(5) == True\n    is_prime(0) == False\n    is_prime(1) == False\n    is_prime(14) == False\nassert is_prime(5) == True\nassert is_prime(0) == False\nassert is_prime(1) == False\nassert is_prime(14) == False\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef gcd(x, y):\n    \"\"\"Returns the greatest common divisor of x and y\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_prime(17) == True, \\\n    'is_prime(17) should return True.'\nassert     is_prime(19) == True, \\\n    'is_prime(19) should return True.'\nassert     is_prime(1) == False, \\\n    'is_prime(1) should return False.'\nassert     is_prime(97) == False, \\\n    'is_prime(97) should return False.'\nassert     is_prime(8) == True, \\\n    'is_prime(8) should return True.'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_prime_slow(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    Use a naive algorithm.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert find_zero([0, 2, 3, 2, -1]) == 2\nassert find_zero([3, 2, -2, -1]) == 2\nassert find_zero([0, 2, 3, -2, -1]) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 60
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef calc_interval(xs: list, start: float, end: float):\n    \"\"\"\n    calc_interval calculates interval, that contains all points,\n    where function xs crosses the line from start to end.\n    It returns a list of tuples. Each tuple is a point,\n    that the function crossed the line.\n    \"\"\"\n    pass\n\n\ndef linspace(start: float, end: float, num: int):\n    \"\"\"\n    linspace calculates evenly spaced numbers in the\n    interval from start to end.\n    num should be a positive integer.\n    \"\"\"\n    pass\n\n\ndef integration(xs: list, lower: float, upper: float):\n    \"\"\"\n    integration calculates the definite integral of a polynomial with coefficients xs\n    from lower to upper limit.\n    \"\"\"\n    pass\n\n\ndef integration_trapezoidal(xs: list, lower: float, upper: float):\n    \"\"\"\n    integration_trapezoidal calculates the definite integral\n    of a polynomial with coefficients xs\n    from lower to upper limit.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef find_zeros(xs: list, lower_bound: float, upper_bound: float):\n    \"\"\"\n    Find zero roots of a polynomial with coefficients\n    xs.\n    lower_bound and upper_bound are searching range.\n    upper_bound - lower_bound is the searching range.\n    \"\"\"\n    # check the correctness of find_zeros\n    assert len(xs) % 2 == 0\n\n    # num_zeros is the number of zeros found\n    num_zeros = 0\n\n    # upper and lower points of the search range\n    upper_point = upper_bound\n    lower_point = lower_bound\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef roots(xs: list):\n    \"\"\"\n    Returns list of roots, i.e. x such that poly(x) = 0.\n    roots returns a list of roots.\n    roots must not take more than 1 milion elements.\n    \"\"\"\n    roots = []\n    for i, coeff in enumerate(xs):\n        if coeff!= 0:\n            break\n    roots.append(-i)\n    roots.append(-i - coeff)\n    roots.append(-i - coeff / 2)\n    return roots\n\n\ndef roots_of_quadratic(xs: list):\n    \"\"\"\n    Returns list of roots, i.e. x such that poly(x) = 0.\n    roots_of_quadratic returns a list of roots.\n    roots_of_quadratic must not take more than 1 milion elements.\n    \"\"\"\n    roots = []\n    xs = list(xs)\n    xs.append(2 * xs[0])\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            break\n        if coeff!= 0:\n            break\n    roots.append(-i)\n    roots.append(-i - coeff / 2)\n    roots.append(-i - coeff)\n    return roots\n\n\ndef roots_of_cubic(xs: list):\n    \"\"\"\n    Returns list of roots, i.e. x such that poly(x) = 0.\n    roots_of_cubic returns a list of roots.\n    roots_of_cubic must not take more than 1 milion elements.\n    \"\"\"\n    roots = []\n    xs = list(xs)\n    xs.append(3 * xs[0] - xs[1])\n    xs.append(3 * xs[0] - 2 * xs[1] + xs[2])\n    xs.append(3 * xs[0] - xs[1] - xs[2])\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            break\n        if coeff!= 0:\n            break\n    roots.append(-i)\n    roots.append(-i - xs[1] / 2)\n    roots.append(-i - xs[1] / 3)\n    return roots\n\n\ndef roots_of_quartic(xs: list):\n    \"\"\"\n    Returns list of roots, i.e. x such that poly(x) = 0.\n    roots_of_quartic returns a list of roots.\n    roots_of_quartic must not take more than 1 milion elements.\n    \"\"\"\n    roots = []\n    xs = list(xs)\n    xs.append(4 * xs[0] + 3 * xs[1] + xs[2])\n    xs.append(4 * xs[0] + 3 * xs[1] + 2 * xs[2])\n    xs.append(4 * xs[0] + 3 * xs[1] + xs[2] - xs[3])\n    for i, coeff in enumerate(xs):\n        if coeff == 0:\n            break\n        if coeff!= 0:\n            break\n    roots.append(-i)\n    roots.append(-i + xs[1] / 2)\n    roots.append(-i + xs[1] / 3)\n    roots.append(-i + xs[1] / 4)\n    return roots\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     poly([2, 4], 1) == 7\nassert     poly([-2, 1], 1) == -3\nassert     poly([-2, 1], -1) == 3\nassert     poly([1], 1) == 1\nassert     poly([1], -1) == -1\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert isinstance(find_zero, types.FunctionType)\nassert find_zero([1, 2])\nassert find_zero([1, 2, -3])\nassert find_zero([1, 2, 0, -3])\n",
        "num_ids_2": 17,
        "num_ids_4": 40
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_third([1, 2, 3, 4, 5, 6]) == [[1, 2], 3, 4, 5, 6], \"Test 1 failed\"\nassert     sort_third([1, 2, 2, 4, 5, 6]) == [[1, 2], 2, 2, 4, 5, 6], \"Test 2 failed\"\nassert     sort_third([1, 1, 2, 2, 3, 4, 4, 5, 6, 6]) == [[1, 1], 2, 2, 2, 3, 4, 4, 5, 6, 6], \"Test 3 failed\"\nassert     sort_third([0, 0, 1, 2, 3, 4, 4, 5, 6, 6]) == [[0, 0], 1, 2, 3, 4, 4, 5, 6, 6], \"Test 4 failed\"\nassert     sort_third([2, 3, 3, 3, 3, 3, 2, 2, 1, 0]) == [[2, 3], 3, 3, 3, 3, 3, 2, 2, 1, 0], \"Test 5 failed\"\n",
        "num_ids_2": 78,
        "num_ids_4": 188
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\n\"\"\"\nTask 4:\n\nYou have created a Python function sort_list(l) that takes in a list and returns a list sorted in ascending order in place. \n\nThe function should not modify the original list.\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third([2, 4, 1, 8, 10, 6, 3]) == [2, 1, 3, 4, 6, 8, 10], \"Wrong sort_third\"\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('PASS' if sort_third([1, 2, 3, 4, 5]) == [1, 4, 2, 3, 5] else 'FAIL')\nprint('PASS' if sort_third([6, 2, 4, 3, 1]) == [1, 2, 3, 4, 6] else 'FAIL')\nprint('PASS' if sort_third([1, 5, 3, 2, 4, 6]) == [1, 2, 3, 4, 5, 6] else 'FAIL')\nprint('PASS' if sort_third([1, 3, 4, 5]) == [1, 3, 4, 5] else 'FAIL')\nprint('PASS' if sort_third([1, 3, 4]) == [1, 4, 3] else 'FAIL')\nprint('PASS' if sort_third([6, 4]) == [4, 6] else 'FAIL')\nprint('PASS' if sort_third([6]) == [6] else 'FAIL')\nprint('PASS' if sort_third([]) == [] else 'FAIL')\n\nprint('PASS' if sort_third(None) == None else 'FAIL')\nprint('PASS' if sort_third([1, 2, 3, 4, None, 5]) == None else 'FAIL')\n\nprint('PASS' if sort_third([3, 2, 1, 4, 5]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 2, 4, 1, 5]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 4, 2, 1, 5]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 4, 2, 5, 1]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 4, 5, 1, 2]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 5, 1, 2, 4]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 5, 2, 1, 4]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 5, 4, 1, 2]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 5, 1, 4, 2]) == None else 'FAIL')\n\nprint('PASS' if sort_third([3, 4, 5, 1, 2]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 4, 2, 5, 1]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 2, 1, 4, 5]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 2, 4, 1, 5]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 2, 5, 1, 4]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 2, 1, 5, 4]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 2, 4, 1, 5]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 2, 5, 1, 4]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 5, 1, 2, 4]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 5, 2, 1, 4]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 5, 4, 1, 2]) == None else 'FAIL')\nprint('PASS' if sort_third([3, 5, 1, 4, 2]) == None else 'FAIL')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nsort_third([1,3,2,4,5,6]) == [1,3,2,5,6,4]\nassert sort_third([1,3,2,4,5,6,6,7]) == [1,3,2,5,6,6,7]\nassert sort_third([5,4,3,2,1]) == [1,2,3,4,5]\nassert sort_third([]) == []\n",
        "num_ids_2": 41,
        "num_ids_4": 78
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_third([3, 5, 5, 7, 4, 5, 6]) == [3, 4, 5, 5, 5, 6, 7]\nassert     sort_third([5, 5, 5, 7, 4, 5, 6]) == [3, 5, 5, 5, 5, 6, 7]\nassert     sort_third([7, 3, 5, 5, 5, 5, 6]) == [3, 3, 5, 5, 5, 5, 5]\nassert sort_third([1, 2, 1, 1, 1, 1, 1]) == sorted([1, 1, 1, 1, 1, 1, 1])\nassert sort_third([1, 1, 1, 1, 1, 1]) == sorted([1, 1, 1, 1, 1, 1])\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_third([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10], \"Expected: [2, 4, 6, 8, 10], got: \" + str(sort_third([2, 4, 6, 8, 10]))\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([]) == []\nassert     unique([1,2,3,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,3,1,2,3]) == [1,2,3,1,2,3]\nassert     unique([1,2,2,1,2,2,1,2,2,1,2,2,1,2,2]) == [1,2,1,2,2,1,2,2,1,2]\nassert     unique([1,2,2,1,2,2,1,2,2,1,2,2,1,2,2]) == [1,2,1,2,2,1,2,2,1,2]\n",
        "num_ids_2": 35,
        "num_ids_4": 123
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique([1, 1, 2, 3, 4, 5, 4, 4]) == [1, 2, 3, 4, 5], \"Fail\"\nassert     unique([1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6], \"Fail\"\nassert     unique([1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 1, 3, 2, 2, 3]) == [1, 2, 3, 4, 5, 6, 1], \"Fail\"\nassert     unique([1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 1, 3, 2, 2, 3]) == [1, 2, 3, 4, 5, 6, 1], \"Fail\"\nassert     unique([]) == [], \"Fail\"\n",
        "num_ids_2": 80,
        "num_ids_4": 192
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_substrings(l: list, substring: str) -> list:\n    \"\"\"Return the position of substrings which are a substring of the list\n    \"\"\"\n    pass\n\ndef find_substrings_with_number(l: list, substring: str, number: int) -> list:\n    \"\"\"Return the position of substrings which are a substring of the list\n    \"\"\"\n    pass\n\ndef count_substring(s: str, substr: str) -> int:\n    \"\"\"Return the count of the substrings which are a substring of the given string\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique([0, 1, 0, 1, 1, 1, 0, 0, 1]) == [0, 1, 1, 0]\nassert     unique([]) == []\nassert     unique(['hi', 'hello', 'hi']) == ['hi', 'hello']\n\n\ndef first(l: list):\n    \"\"\"Return first element in a list\n    \"\"\"\n    pass\n",
        "num_ids_2": 41,
        "num_ids_4": 63
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique([1, 2, 3, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique([1, 2, 3]) == [1, 2, 3]\nassert     unique([]) == []\nassert     unique([1, 1, 1, 1, 1]) == [1]\n",
        "num_ids_2": 48,
        "num_ids_4": 75
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique([1,1,2,2,3,3]) == [1,2,3], \"Should be 1,2,3\"\nassert     unique(['x','y','x']) == ['x','y'], \"Should be 'x','y'\"\nassert     unique([]) == [], \"Should be an empty list\"\nassert     unique(['x','x','x']) == ['x'], \"Should be 'x'\"\nassert     unique([-1,-2,-3]) == [-1,-2,-3], \"Should be an empty list\"\nprint(\"Passed!\")\n",
        "num_ids_2": 62,
        "num_ids_4": 102
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique([1,2,3,3,4,4,5]) == [1,2,3,4,5]\nassert     unique([1,2,3,3,4,4]) == [1,2,3,4]\nassert     unique([]) == []\nassert     unique([-1,-2,-3,4,4]) == [-1,-2,-3,4]\nassert     unique([]) == []\n",
        "num_ids_2": 58,
        "num_ids_4": 92
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique([1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4], '1'\nassert     unique([1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4], '2'\nassert     unique([1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4], '3'\n\ndef list_to_dict(l: list):\n    \"\"\"Return dictionary of elements in a list\n    \"\"\"\n    pass\n",
        "num_ids_2": 92,
        "num_ids_4": 138
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_element([4,5,7,2]) == 5\nassert     max_element([1,2,3,4]) == 4\nassert     max_element([10]) == 10\nassert     max_element([]) == None\n",
        "num_ids_2": 34,
        "num_ids_4": 55
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_element([10, 5, 12, 3, 8]) == 8\nassert     max_element([0, -10, -5, -12, -3, -8]) == -10\nassert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([]) == None\nassert     max_element([10]) == 10\n",
        "num_ids_2": 46,
        "num_ids_4": 75
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_element([]) == None\nassert     max_element([10, 11, 12, 13, 14]) == 14\nassert     max_element([-5, -4, -3, -2, -1]) == -1\nassert     max_element([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 20\nassert     max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 25\n",
        "num_ids_2": 29,
        "num_ids_4": 107
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_element([1,3,2]) == 3\nassert     max_element([3,3,1]) == 3\nassert     max_element([1,2,1]) == 1\nassert     max_element([2,1,1]) == 2\nassert     max_element([1,1,2]) == 1\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_element([-1, -2, -3, -4]) == -1\nassert max_element([1, 2, 3, 4]) == 4\nassert max_element([]) == None\n\ndef add_list(l1: list, l2: list):\n    \"\"\"Add l1 and l2.\n    \"\"\"\n    pass\n",
        "num_ids_2": 38,
        "num_ids_4": 47
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fizz_buzz(15) == 0\nassert     fizz_buzz(13) == 1\nassert     fizz_buzz(17) == 0\nassert     fizz_buzz(11) == 2\nassert     fizz_buzz(14) == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fizz_buzz(3) == 0\nassert     fizz_buzz(13) == 1\nassert     fizz_buzz(17) == 2\nassert     fizz_buzz(27) == 1\nassert     fizz_buzz(31) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    input_list = [1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,50",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fizz_buzz(25) == 1\nassert     fizz_buzz(76) == 0\nassert     fizz_buzz(89) == 1\nassert     fizz_buzz(92) == 2\nassert     fizz_buzz(126) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fizz_buzz(4) == 3\nassert     fizz_buzz(13) == 4\nassert     fizz_buzz(9) == 4\nassert     fizz_buzz(5) == 2\nassert     fizz_buzz(10) == 2\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert fizz_buzz(5) == 1, fizz_buzz(5)\n    assert fizz_buzz(15) == 3, fizz_buzz(15)\n    assert fizz_buzz(3) == 0, fizz_buzz(3)\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fizz_buzz(3) == 1\nassert     fizz_buzz(5) == 0\nassert     fizz_buzz(15) == 2\nassert     fizz_buzz(18) == 4\nassert     fizz_buzz(27) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fizz_buzz(5) == \"fizz\"\nassert     fizz_buzz(6) == \"fizz\"\nassert     fizz_buzz(7) == \"fizz\"\nassert     fizz_buzz(8) == \"fizz\"\nassert     fizz_buzz(9) == \"fizz\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert fizz_buzz(50) == 9\nassert fizz_buzz(100) == 18\nassert fizz_buzz(1000) == 297\n",
        "num_ids_2": 6,
        "num_ids_4": 30
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fizz_buzz(1) == 1\nassert fizz_buzz(3) == 1\nassert fizz_buzz(5) == 1\nassert fizz_buzz(15) == 2\nassert fizz_buzz(20) == 2\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_even([0,1,2,3,4,5]) == [0,1,3,4,5,2]\nassert     sort_even([5,6,7,3,4]) == [3,4,5,6,7]\nassert     sort_even([4,3,2,1,0]) == [0,1,2,3,4]\n",
        "num_ids_2": 62,
        "num_ids_4": 91
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_even([]), \"The function is not correct\"\nassert     sort_even([1, 2, 3, 4, 5]), \"The function is not correct\"\nassert     sort_even([2, 2, 2, 2, 2]), \"The function is not correct\"\nassert     sort_even([2, 2, 4, 6, 8]), \"The function is not correct\"\nassert     sort_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), \"The function is not correct\"\n",
        "num_ids_2": 40,
        "num_ids_4": 88
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_even([5, 8, 9, 1, 0, 8]) == [1, 8, 8, 5, 0, 9]\nassert     sort_even([5, 8, 9, 1, 0, 8, 3]) == [1, 3, 5, 8, 0, 8, 8]\nassert     sort_even([]) == []\nassert     sort_even([1]) == [1]\n",
        "num_ids_2": 70,
        "num_ids_4": 93
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_even(L1) == L2\nassert     sort_even(L1) == L2\n",
        "num_ids_2": 26,
        "num_ids_4": 26
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([3,4,5]) == [3,4,5]\nassert     sort_even([3,4,5,6,7]) == [3,4,5,6,7]\nassert     sort_even([3,4,5,6,7,8,9,10]) == [3,4,5,6,7,8,9,10]\nassert     sort_even([3,4,5,6,7,8,9,10,11]) == [3,4,5,6,7,8,9,10,11]\n",
        "num_ids_2": 31,
        "num_ids_4": 101
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_even([4, 3, 2, 1, 0, 5]) == [0, 1, 3, 2, 4, 5]\nassert     sort_even([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7, 2, 4, 6]\nassert     sort_even([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, ",
        "num_ids_2": 70,
        "num_ids_4": 1024
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_even([3, 2, 6, 4, 2, 8, 3]) ==     [2, 2, 4, 6, 3, 3, 8]\nassert     sort_even([1, 4, 3, 8, 6, 7, 10]) ==     [1, 3, 4, 6, 7, 8, 10]\nassert     sort_even([]) ==     []]\nassert     sort_even([0]) ==     [0]\nassert     sort_even([-2, -1, 0, 1, 2, 3]) ==     [-1, -2, 0, 1, 2, 3]\n",
        "num_ids_2": 76,
        "num_ids_4": 102
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encode_cyclic(\"abc\") == \"abc\"\nassert     encode_cyclic(\"aabbcc\") == \"aabbcc\"\nassert     encode_cyclic(\"aabbccdd\") == \"aabbccdd\"\nassert     encode_cyclic(\"aabbccddee\") == \"aabbccddee\"\nassert     encode_cyclic(\"aabbccddeeff\") == \"aabbccddeeff\"\n",
        "num_ids_2": 34,
        "num_ids_4": 78
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef encode_rot13(s: str):\n    \"\"\"\n    encodes given string using rot13 function.\n    \"\"\"\n    # encode the letters.\n    # for letter in s:\n    #     # shift by 13 if letter is lowercase.\n    #     if letter.islower():\n    #         s = s.replace(letter, chr((ord(letter) + 13 - ord('a')) % 26 + ord('a')))\n    #     # shift by 13 if letter is uppercase.\n    #     elif letter.isupper():\n    #         s = s.replace(letter, chr((ord(letter) + 13 - ord('A')) % 26 + ord('A')))\n    #     # if neither lowercase nor uppercase.\n    #     else:\n    #         s = s.replace(letter, chr((ord(letter) + 13 - ord(' ')) % 26 + ord(' ')))\n\n    s = \"\".join([chr((ord(s[i]) + 13 - ord('a')) % 26 + ord('a')) for i in range(len(s))])\n    return s\n\n\ndef decode_rot13(s: str):\n    \"\"\"\n    takes as input string encoded with encode_rot13 function. Returns decoded string.\n    \"\"\"\n    # decode the letters.\n    # for letter in s:\n    #     # shift back by 13 if letter is lowercase.\n    #     if letter.islower():\n    #         s = s.replace(letter, chr((ord(letter) - 13 + ord('a')) % 26 + ord('a')))\n    #     # shift back by 13 if letter is uppercase.\n    #     elif letter.isupper():\n    #         s = s.replace(letter, chr((ord(letter) - 13 + ord('A')) % 26 + ord('A')))\n    #     # if neither lowercase nor uppercase.\n    #     else:\n    #         s = s.replace(letter, chr((ord(letter) - 13 + ord(' ')) % 26 + ord(' ')))\n\n    s = \"\".join([chr((ord(s[i]) - 13 + ord('a')) % 26 + ord('a')) for i in range(len(s))])\n    return s\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nencode_cyclic(\"abc\") == \"aabc\"\n\nencode_cyclic(\"ABC\") == \"aAbc\"\n\nencode_cyclic(\"aaabcc\") == \"aAAbc\"\n\nencode_cyclic(\"a\") == \"a\"\n\nencode_cyclic(\"\") == \"\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode_cyclic(\"ABCDEFGHI\") == \"ABABCDEFABCDEFGHI\"\nassert     encode_cyclic(\"ABCDEFGHI\")!= \"ABCDEFGHIJ\"\nassert     encode_cyclic(\"ABCDEFGHI\")!= \"ABABDEFGHIJ\"\nassert     encode_cyclic(\"ABCDEFGHI\")!= \"ABABCDEFGHIJ\"\nassert     encode_cyclic(\"ABCDEFGHI\")!= \"ABCDEFGHIJK\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abbc\")) == \"abbc\"\nassert     decode_cyclic(encode_cyclic(\"bb\")) == \"bb\"\nassert     decode_cyclic(encode_cyclic(\"ccc\")) == \"ccc\"\nassert     decode_cyclic(encode_cyclic(\"d\")) == \"d\"\nassert     decode_cyclic(encode_cyclic(\"ef\")) == \"ef\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decode_cyclic('sasfdsfg') =='sdfg'\nassert     decode_cyclic('sdfg') =='sdfg'\nassert     decode_cyclic('sdhg') =='sdfg'\nassert     decode_cyclic('dghg') =='sdgh'\nassert     decode_cyclic('sdd') =='sdg'\n",
        "num_ids_2": 40,
        "num_ids_4": 77
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef encode_bounded(s: str):\n    \"\"\"\n    returns encoded string with min_length of 4 by repeating characters until min_length is reached.\n    \"\"\"\n    # repeat until string has length min_length\n    while len(s) < 4:\n        s += s[0]\n    return s\n\ndef decode_bounded(s: str):\n    \"\"\"\n    returns decoded string by repeating characters until min_length is reached.\n    \"\"\"\n    pass\n\nassert\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(4) == 7\n",
        "num_ids_2": 14,
        "num_ids_4": 36
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_fib(6) == 12, \"the number is wrong\"\nassert     prime_fib(1) == 2, \"the number is wrong\"\nassert     prime_fib(5) == 5, \"the number is wrong\"\nassert     prime_fib(4) == 5, \"the number is wrong\"\nassert     prime_fib(3) == 5, \"the number is wrong\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert prime_fib(100) == 4 \nassert prime_fib(2) == 2 \nassert prime_fib(3) == 5 \nassert prime_fib(4) == 7\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prime_fib(10) == 55\n\nprint(prime_fib.__doc__",
        "num_ids_2": 12,
        "num_ids_4": 12
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_fib(1) == 2\nassert prime_fib(2) == 3\nassert prime_fib(3) == 5\nassert prime_fib(5) == 7\nassert prime_fib(8) == 13\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triples_sum_to_zero([2,1,-3,4]) == True\nassert     triples_sum_to_zero([0,2,1,-1]) == True\nassert     triples_sum_to_zero([-1,-2,-3]) == False\nassert     triples_sum_to_zero([]) == False\nassert     triples_sum_to_zero([1,1,-1]) == True\n",
        "num_ids_2": 44,
        "num_ids_4": 80
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (triples_sum_to_zero([1,1,1,1]) == True)\nassert     (triples_sum_to_zero([1,2,3]) == False)\nassert     (triples_sum_to_zero([1,-1,1]) == True)\n",
        "num_ids_2": 46,
        "num_ids_4": 68
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -2])\nassert     not triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -2, -1])\nassert     not triples_sum_to_zero([-3, 0, 1, -2, 1, -2])\nassert     triples_sum_to_zero([])\nassert     not triples_sum_to_zero([-3, 1, 1, 1, -2, -2, 1, -2])\n",
        "num_ids_2": 62,
        "num_ids_4": 103
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([-4,-2,1,-3,1,-2,1,0]) == False\nassert     triples_sum_to_zero([0,2,0]) == True\nassert     triples_sum_to_zero([0,2,0]) == True\nassert     triples_sum_to_zero([0,2,0]) == True\nassert     triples_sum_to_zero([-4,-2,1,-3,1,-2,1,0]) == False\n",
        "num_ids_2": 51,
        "num_ids_4": 91
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \n\nprint(\"Pass\" if not \n    triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -2, -1]) \n    else \"Fail\")\n\nprint(\"Pass\" if not \n    triples_sum_to_zero([1, 1, 1, 0]) \n    else \"Fail\")\n\nprint(\"Pass\" if \n    triples_sum_to_zero([-2, -1, 1, 2]) \n    else \"Fail\")\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -3]) == True, \"--False--\"\nassert     triples_sum_to_zero([1, 1, 1]) == False, \"--False--\"\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2]) == False, \"--False--\"\nassert     triples_sum_to_zero([1, 2, 3]) == False, \"--False--\"\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, -3]) == True, \"--False--\"\n",
        "num_ids_2": 63,
        "num_ids_4": 124
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     car_race_collision(1) == 1, 'failed'\nassert     car_race_collision(2) == 1, 'failed'\nassert     car_race_collision(3) == 1, 'failed'\nassert     car_race_collision(4) == 2, 'failed'\nassert     car_race_collision(5) == 2, 'failed'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     car_race_collision(5) == 0\nassert car_race_collision(10) == 1\nassert car_race_collision(100) == 1\nassert car_race_collision(1000) == 2\nassert car_race_collision(10000) == 3\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert car_race_collision(3) == 2\nassert car_race_collision(4) == 2\nassert car_race_collision(5) == 2\nassert car_race_collision(6) == 3\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 2\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 3\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     car_race_collision(2) == 1\nassert car_race_collision(3) == 2\nassert car_race_collision(4) == 3\nassert car_race_collision(5) == 4\nassert car_race_collision(6) == 5\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     car_race_collision(5) == 4\nassert car_race_collision(10) == 13\n\n\n\n\n\n",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef circle_of_car(n: int, m: int):\n    \"\"\"\n    This is a famous puzzle where a lot of the people are standing in a circle,\n    who look at each other, and then move around the circle until they reach a\n    other person.  However, they are not looking at the same person.  One person\n    performs an action in which a different person performs an action and is\n    instructed to do so by 'a' or 'b'.  This is the 'theorem' that says that\n    the number of actions in which a person performs an action and the next\n    person performs the opposite action is equal to the number of people in the circle.\n\n    The function output the number of actions necessary to get from a person to the\n    other person in a circle.  For example, if n is 5 and m is 2, then there are\n    4 actions (a to a, b to a, b to b, a to b) to get from the first person to\n    the last person.\n\n    As a rule of thumb, a person goes left to right by two actions, a person\n    goes up to down by one action, and a person goes right to left by one action.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     incr_list([1,2,3]) == [2,3,4], \"incr_list 1\"\nassert     incr_list([1,2,3,4]) == [2,3,4,5], \"incr_list 2\"\nassert     incr_list([1,2,3,4,5]) == [2,3,4,5,6], \"incr_list 3\"\n",
        "num_ids_2": 62,
        "num_ids_4": 99
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef square_list(l: list):\n    \"\"\"Return a new list where the elements are square of the ones in input list.\n    \"\"\"\n    pass\n\ndef square_list_2(l: list):\n    \"\"\"Return a new list where the elements are square of the ones in input list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     incr_list([0,1,2,3]) == [1,2,3,4]\nassert     incr_list([0,1,2]) == [1,2,3]\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([0]) == [1]\nassert     incr_list([0,0,0]) == [1,1,1]\n",
        "num_ids_2": 48,
        "num_ids_4": 84
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nincr_list([0, 1, 2, 3]) == [1, 2, 3, 4]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [1]\nassert     incr_list([1, 2]) == [2, 3]\n",
        "num_ids_2": 25,
        "num_ids_4": 43
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     incr_list([1]) == [2]\nassert     incr_list([1, 1]) == [2, 2]\nassert     incr_list([1, 1, 1]) == [2, 2, 2]\nassert     incr_list([1, 1, 1, 1]) == [2, 2, 2, 2]\nassert     incr_list([]) == []\n",
        "num_ids_2": 32,
        "num_ids_4": 80
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [2,3]\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4], \"incr_list\"\nassert     incr_list([]) == [1], \"incr_list\"\nassert     incr_list([1]) == [2], \"incr_list\"\nassert     incr_list([1, 2]) == [2, 3], \"incr_list\"\nassert     incr_list([1, 2, 3]) == [2, 3, 4], \"incr_list\"\n",
        "num_ids_2": 47,
        "num_ids_4": 91
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([-1, 1, 2, -3, 1]) == True\nassert     pairs_sum_to_zero([1, 2, -3, 1]) == False\nassert     pairs_sum_to_zero([1, 2, -3, 4, 5]) == True\nassert     pairs_sum_to_zero([1, 2, -3, 4, 5, 6]) == False\nassert     pairs_sum_to_zero([1, 2, -3, 4, 5, 6, 7, 8, -9]) == False\n",
        "num_ids_2": 49,
        "num_ids_4": 101
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('\\n=== Pairs_sum_to_zero ===')\n\nprint('\\n')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([5, -3, 4, 1]) is False\nassert     pairs_sum_to_zero([1, 2, 3]) is True\n",
        "num_ids_2": 43,
        "num_ids_4": 43
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_base(10, 2) == '1010'\nassert     change_base(10, 16) == 'A'\nassert     change_base(20, 2) == '2020'\nassert     change_base(20, 16) == 'DE'\nassert     change_base(35, 8) == 'K'\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if isinstance(x, int) and isinstance(base, int):\n        # assert\n        pass\n    else:\n        raise TypeError(\"Inputs must be integers\")\n\n    # if isinstance(x, int) and isinstance(base, int):\n    #     pass\n    # else:\n    #     raise TypeError(\"Inputs must be integers\")\n\n    def recurse(x, base, conv):\n        if x == 0:\n            return conv[0]\n        else:\n            return recurse(x // base, base, conv) + conv[x % base]\n\n    return recurse(x, base, \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_base(1, 2) == \"11\"\nassert     change_base(2, 2) == \"22\"\nassert     change_base(123456789, 3) == \"456789\"\n",
        "num_ids_2": 30,
        "num_ids_4": 50
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef int_to_base(x: int, base: int):\n    \"\"\"Convert integer x from base 10 to base base.\n    x, base - integers\n    return string representation after the conversion.\n    \"\"\"\n    pass\n\ndef base_to_int(x: str, base: int):\n    \"\"\"Convert string x from base base to base 10.\n    x, base - integers\n    return integer representation after the conversion.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert change_base(35, 16) == \"25\", \"wrong\"\nassert change_base(4, 8) == \"4\", \"wrong\"\nassert change_base(35, 10) == \"35\", \"wrong\"\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_base(5, 2) == \"101\", \"change_base(5,2) == 101\"\nassert     change_base(0, 3) == \"000\", \"change_base(0,3) == 000\"\nassert     change_base(5, 4) == \"00000\", \"change_base(5,4) ==00000\"\n",
        "num_ids_2": 54,
        "num_ids_4": 81
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_base(17, 2) == '10101010'\nassert     change_base(17, 10) == 'a'\nassert     change_base(12, 2) == '12'\nassert     change_base(12345, 16) == '132345'\nassert     change_base(1000, 2) == '1000000'\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_base(2, 2) == '2', \\\n        'Change_base(2, 2) should return \"2\"!'\nassert     change_base(3, 3) == '3', \\\n        'Change_base(3, 3) should return \"3\"!'\nassert     change_base(20, 10) == '2', \\\n        'Change_base(20, 10) should return \"2\"!'\nassert     change_base(10, 10) == '10', \\\n        'Change_base(10, 10) should return \"10\"!'\nassert     change_base(15, 3) == '3.333', \\\n        'Change_base(15, 3) should return \"3.333\"!'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef string_to_number(x: str, base: int):\n    \"\"\"Convert x to a numerical representation.\n    x is a string representing an integer in the base\n    base number system.\n    base number system is less than 10.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # Area = 0.5 * side^2 * h\n    # Area = 0.5 * 5 * 3 = 15\n    # Area = 5 * h\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Area = 5\n    # Are",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    # (a, h)\n    assert triangle_area(1, 1) == 1\n    assert triangle_area(2, 2) == 1\n    assert triangle_area(2, 3) == 2\n    assert triangle_area(3, 3) == 1.5\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('All tests passed!')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(2, 3) == 5\nassert     triangle_area(1, 3) == 3\nassert     triangle_area(2, 1) == ",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert triangle_area(1, 5) == 3\nassert triangle_area(3, 4) == 5\n",
        "num_ids_2": 15,
        "num_ids_4": 27
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(1.5, 1) == 1.5\nassert     triangle_area(2, 3) == 1.5\nassert     triangle_area(2, 2) == 1\n\nprint('You are a success')",
        "num_ids_2": 34,
        "num_ids_4": 48
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    \"\"\"\n    Test Cases:\n\n    Input             Output\n    ----------   --------------------------------------------------\n    0                0\n    1                1\n    2                1\n    3                2\n    4                3\n    \"\"\"\n    assert fib4(0) == 0\n    assert fib4(1) == 0\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pass\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median([1,2,3,4]) == 2\nassert     median([1,2,3,4,5]) == 3\nassert     median([1,2,3,4,5,6,7,8,9,10]) == 4.5\nassert     median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 4.5\n\nif __name__ == \"__main__\":\n    ",
        "num_ids_2": 34,
        "num_ids_4": 114
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Testing median()...\", end = \"\")\nassert median([]) == 0\nassert median([1]) == 1\nassert median([1,1]) == 1\n",
        "num_ids_2": 10,
        "num_ids_4": 28
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l1 = [1,2,3,4]\n    assert median(l1) == 3\n    l2 = list(range(1,20,2))\n    assert median(l2) == 15.5\n    l3 = []\n    assert median(l3) == None\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef build_a_dict():\n    \"\"\"\n    A Python dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median([1,2,3,4,5]) == 3\nassert     median([1,2,3,4]) == 3.5\nassert     median([-1,0,1]) == 1.0\nassert     median([]) == None\nassert     median([1,2,3]) == 2.0\n",
        "num_ids_2": 36,
        "num_ids_4": 62
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_palindrome('abba') == True\nassert     is_palindrome('racecar') == True\nassert     is_palindrome('abaaaa') == True\nassert     is_palindrome('abbba') == False\nassert     is_palindrome('krazybob') == False\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nis_palindrome('redivider') == True\nis_palindrome('kayak') == False\nis_palindrome('noon') == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_palindrome(\"a\") == False, \"First\"\nassert     is_palindrome(\"a\") == False, \"Second\"\nassert     is_palindrome(\"abba\") == True, \"Third\"\nassert     is_palindrome(\"abba\") == False, \"Fourth\"\nassert     is_palindrome(\"abbab\") == True, \"Fifth\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_palindrome('elma') == True\nassert     is_palindrome('hello') == False\nassert     is_palindrome('123') == True\nassert     is_palindrome('12321') == False\n\nprint('All tests passed!')",
        "num_ids_2": 27,
        "num_ids_4": 54
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"aabaa\") == True\nassert     is_palindrome(\"abcba\") == False\nassert     is_palindrome(\"a\") == True\nassert     is_palindrome(\"\") == True\nassert     is_palindrome(\"a\") == True\n",
        "num_ids_2": 29,
        "num_ids_4": 54
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_palindrome('noon')\nis_palindrome('racecar')\nis_palindrome('a man, a plan, a canal, Panama')\nis_palindrome('abcba')\n\n\n\ndef remove_duplicates(collection: list) -> list:\n    \"\"\"\n    Removes duplicates from the given list\n    \"\"\"\n    return list(set(collection))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_palindrome('racecar') == True\nassert \nis_palindrome('abcdef') == False\nassert \nis_palindrome('kayak') == True\nassert \nis_palindrome('wax') == True\nassert \nis_palindrome('a') == True\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_palindrome(\"malayalam\")\nassert not is_palindrome(\"taco cat\")\nassert is_palindrome(\"Was it a car or a cat I saw?\")\nassert not is_palindrome(\"Was it a car or a cat I saw?\")\n",
        "num_ids_2": 16,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef mod_inverse(x: int, p: int) -> int:\n    \"\"\"Find x^-1 mod p.\n    \n    Takes a number x and a prime p and returns the smallest \n    (a) such that\n    a * p + mod_inverse(x, p) = 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     modp(10, 7) == 0, \"Wrong Answer\"\nassert     modp(10, 20) == 0, \"Wrong Answer\"\nassert     modp(10, 1) == 1, \"Wrong Answer\"\nassert     modp(10, 100) == 10, \"Wrong Answer\"\nassert     modp(10, 1000) == 10, \"Wrong Answer\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     modp(8, 2) == 4\nassert modp(12, 3) == 4\nassert modp(5, 13) == 3\nassert modp(2, 9) == 1\nassert modp(100, 17) == 7\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmodp(4, 7)\nmodp(5, 7)\nmodp(6, 7)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     modp(5, 2) == 1, \"1 should be 1\"\nassert     modp(4, 2) == 0, \"0 should be 0\"\nassert     modp(7, 2) == 1, \"1 should be 1\"\nassert     modp(12, 2) == 0, \"0 should be 0\"\nassert     modp(1, 2) == 1, \"1 should be 1\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     modp(0, 10) == 0\nassert     modp(1, 10) == 9\nassert     modp(2, 10) == 1\nassert     modp(3, 10) == 1\nassert     modp(4, 10) == 0\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     modp(0, 1) == 0\nassert     modp(1, 1) == 1\nassert     modp(2, 1) == 1\nassert     modp(2, 2) == 1\nassert     modp(3, 2) == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     modp(0, 2) == 0\nassert     modp(1, 2) == 1\nassert     modp(3, 2) == 1\nassert     modp(4, 2) == 0\nassert     modp(5, 2) == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_shift(encode_shift(\"HELLO WORLD\")) == \"HELLO WORLD\"\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\"\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decode_shift(encode_shift(\"ai\")) == \"ai\"\nassert     decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyz\")) == \"abcdefghijklmnopqrstuvwxyz\"\nassert     decode_shift(encode_shift(\"tuvwxyzabcdefghijklmnopqrstuvwxyz\")) == \"tuvwxyzabcdefghijklmnopqrstuvwxyz\"\nassert     decode_shift(encode_shift(\"abcdefghijklmnopqrstuvwxyztuvwxyzabcdefghijklmnopqrstuvwxyz\")) == \"abcdefghijklmnopqrstuvwxyztuvwxyzabcdefghijklmnopqrstuvwxyz\"\n",
        "num_ids_2": 64,
        "num_ids_4": 202
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode_shift(\"you\") == \"fkdyeu\"\nassert     encode_shift(\"are\") == \"rkdva\"\nassert     encode_shift(\"is\") == \"rkvat\"\nassert     encode_shift(\"life\") == \"rkvlt\"\nassert     encode_shift(\"I\") == \"fkdva\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef compute_shift(s: str, n: int) -> str:\n    \"\"\"\n    returns decoded string using encode_shift(s, n)\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     encode_shift(\"abc\") == \"cde\"\nassert     encode_shift(\"cde\") == \"abc\"\nassert     encode_shift(\"c\") == \"a\"\nassert     encode_shift(\"\") == \"\"\nassert     encode_shift(encode_shift(encode_shift(\"abc\"))) == \"abc\"\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(encode_shift(\"TTTTTTTT\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert decode_shift(\"ZABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert decode_shift(\"BBBACCCCCCCAB\") == \"AAA\"\nassert decode_shift(\"ZGODENULJJAAHJJHHAA\") == \"ZZZ\"\n",
        "num_ids_2": 44,
        "num_ids_4": 85
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert remove_vowels(\"Hi, this is a test.\") == \"Hi,h,i,s,t,a,c,e,t,s\"\nassert remove_vowels(\"Why, what's there?\") == \"Why, what's there?\"\nassert remove_vowels(\"I'm busy\") == \"I'm busy\"\nassert remove_vowels(\"I'm happy.\") == \"I'm happy.\"\n",
        "num_ids_2": 40,
        "num_ids_4": 81
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"aba\") == \"ba\"\nassert     remove_vowels(\"abcde\") == \"bcd\"\nassert     remove_vowels(\"heexy\") == \"exy\"\nassert     remove_vowels(\"aeiou\") == \"\"\n",
        "num_ids_2": 27,
        "num_ids_4": 62
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_vowels(\"helllo\") == \"hlll\"\nassert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"\") == \"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 46
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_vowels('Greetings, my cat.') == 'Greetings, my cat.'\nremove_vowels('It is a nice day and i am going to be a verb') == 'It is a nice day and i am going to be a verb'\nremove_vowels('A quick brown fox jumps over the lazy dog.') == 'A quick brown fox jumps over the lazy dog.'\nremove_vowels('Never repeat yourself.') == 'Never repeat yourself.'\nremove_vowels('Hi, I am the Bigger, I am the Larger.') == 'Hi, I am the Bigger, I am the Bigger.'\nprint('All tests passed!'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(remove_vowels('hello, my name is Jamie'))\nprint(remove_vowels('hello, my name is jamie'))\nprint(remove_vowels('hello, my name is jamie and I like to jam'))\nprint(remove_vowels('hello, my name is jamie and I like to jam and I like to jam'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_vowels('a') == 'a','remove_vowels'\nassert     remove_vowels('A') == 'A','remove_vowels'\nassert     remove_vowels('aa') == 'aa','remove_vowels'\nassert     remove_vowels('@#$%') == '','remove_vowels'\nassert     remove_vowels('12345') == '12345','remove_vowels'\n",
        "num_ids_2": 42,
        "num_ids_4": 85
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_vowels(\"hello\") == \"hello\"\nassert     remove_vowels(\"This is a test\") == \"ThiS is a test\"\nassert     remove_vowels(\"This is a test of the emergency broadcast network\") == \"ThiS is a teT of the emeraG broadcast networ\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"h\") == \"h\"\n",
        "num_ids_2": 38,
        "num_ids_4": 88
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_threshold([], 1)    == True\nassert     below_threshold([1], 1)    == False\nassert     below_threshold([1, 2], 1)    == False\nassert     below_threshold([1, 2], 2)    == True\nassert     below_threshold([1, 1], 1)    == True\n",
        "num_ids_2": 29,
        "num_ids_4": 63
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nbelow_threshold([10, 20, 30, 40, 50], 60) == True\nassert\nbelow_threshold([10, 20, 30, 40, 50], 70) == False\n",
        "num_ids_2": 5,
        "num_ids_4": 5
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_threshold(range(100), 50) == True\nassert     below_threshold(range(100), 100) == True\nassert     below_threshold(range(100), 150) == False\nassert     below_threshold(range(100), 200) == False\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nbelow_threshold([4,7,3,2,5,9], 5) == True\nassert \nbelow_threshold([4,7,3,2,5,9], 2) == False\nassert \nbelow_threshold([10, -5, 3, 2, 5, -4], -1) == True\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nabove_threshold(l, t) == True\nassert below_threshold(l, t) == False\nassert below_threshold([5,10,15,20], t) == True\nassert below_threshold([5,10,14,20], t) == False\nassert below_threshold([5,10,14,15], t) == True\n",
        "num_ids_2": 16,
        "num_ids_4": 54
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nbelow_threshold([3, 4, 5], 3) == True\nbelow_threshold([3, 4, 5], 2) == False\n\ndef count_below_threshold(l: list, t: int):\n    \"\"\"Return the number of numbers in list l which are below threshold t.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert add(1,2) == 3\nassert add(1,2) == 3\n",
        "num_ids_2": 13,
        "num_ids_4": 23
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add(1, 2) == 3\nassert    add(3, 4) == 7\nassert    add(2, 4) == 6\n",
        "num_ids_2": 22,
        "num_ids_4": 33
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add(1, 2) == 3\nassert     add(1, -2) == -1\nassert     add(0, 2) == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 35
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    add(3, 5) == 8\nassert add(1.2, 1.7) == 2.4\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract two numbers x and y\n    \"\"\"\n    pass\n",
        "num_ids_2": 19,
        "num_ids_4": 19
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    same_chars(\"spoopy\", \"rtypo\")\n    \n\ndef is_palindrome(s0: str):\n    \"\"\"\n    Check if a word is palindrome\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     same_chars(\"car\", \"car\")        == True\nassert     same_chars(\"car\", \"carl\")        == False\nassert     same_chars(\"car\", \"brice\")    == False\nassert     same_chars(\"car\", \"berty\")    == False\nassert     same_chars(\"car\", \"carl\")    == False\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     same_chars(\"horse\", \"ros\") == True\nassert     same_chars(\"horse\", \"rh\") == False\nassert     same_chars(\"horse\", \"ros\") == False\nassert     same_chars(\"s\", \"s\") == True\nassert     same_chars(\"s\", \"r\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"You passed the test!\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     same_chars('abc', 'abc') == True\nassert     same_chars('abc', 'acb') == False\nassert     same_chars('abc', 'bac') == False\nassert     same_chars('abcd', 'bc') == False\nassert     same_chars('', '') == True\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     same_chars('hello','hi') == True\nassert     same_chars('hello','hello') == True\nassert     same_chars('hello','hellohello') == False\nassert     same_chars('hello','hello2') == False\nassert     same_chars('hello','hello3') == False\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     same_chars(\"abc\", \"abc\")    == True\nassert     same_chars(\"abc\", \"xyz\")    == False\nassert     same_chars(\"xyz\", \"abc\")    == False\n",
        "num_ids_2": 33,
        "num_ids_4": 50
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     same_chars(\"\", \"\") == False\nassert     same_chars(\"\", \" \") == False\nassert     same_chars(\"abcd\", \"abcd\") == True\nassert     same_chars(\"abcd\", \"abcdd\") == False\nassert     same_chars(\"hello\", \"hello\") == True\n",
        "num_ids_2": 27,
        "num_ids_4": 61
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(fib(7)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(fib(0))\nprint(fib(1))\nprint(fib(2))\nprint(fib(3))\nprint(fib(4))\nprint(fib(5))\nprint(fib(6))\nprint(fib(7))\nprint(fib(8))\nprint(fib(9))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    '''\n\nThe program should first take an integer n as a command-line argument. \nIt should then print the n-th Fibonacci number.\n\nIf the user inputs the number 0, the program should print the first Fibonacci number. \nOtherwise, the program should print the n-th Fibonacci number.\n\nExample:\n\n$ python fibonacci.py 2\n2\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nfib(0) == 0\nfib(1) == 1\nfib(2) == 1\nfib(3) == 2\nfib(4) == 3\nfib(5) == 5\nfib(6) == 8\nfib(7) == 13\nfib(8) == 21\nfib(9) == 34\nfib(10) == 55\nfib(11) == 89\nfib(12) == 144\n\ndef fib_list(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \"\"\"\n    fib_list = []\n    for i in range(n):\n        if i == 0 or i == 1:\n            fib_list.append(1)\n        else:\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_fib():\n    \"\"\"Test for fib function.\n    \"\"\"\n    assert fib(0) == 0\n    assert fib(1) == 1\n    assert fib(2) == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<(>)>\") == True\nassert     correct_bracketing(\"<[><])>\") == True\nassert     correct_bracketing(\"<{<[]>}>\") == True\nassert     correct_bracketing(\"<{<{<({<{{<()>}>>}}>>>\") == False\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<]>\") == False\nassert     correct_bracketing(\"<a<[b)\") == False\nassert     correct_bracketing(\"<}\") == False\nassert     correct_bracketing(\"<{]\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<\") == True\nassert     correct_bracketing(\"<}\") == False\nassert     correct_bracketing(\"<[\") == False\n\ndef find_missing_bracket(brackets: str):\n    \"\"\" Brackets is a string of \"<\" and \">\".\n    Return missing_brackets, the count of missing brackets.\n    \"\"\"\n    pass\n",
        "num_ids_2": 27,
        "num_ids_4": 41
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"<)>\") == True\nassert     correct_bracketing(\"<()>\") == False\nassert     correct_bracketing(\"<[]>\") == True\nassert     correct_bracketing(\"<{}>\") == True\nassert     correct_bracketing(\"<(>)>\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"<()>)\") == True\nassert     correct_bracketing(\"<())>)\") == False\nassert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<>\") == False\nassert     correct_bracketing(\"<a><b><c>\") == False\nassert     correct_bracketing(\"<a><b></b><c>\") == False\nassert     correct_bracketing(\"<a><b></b><c><d>\") == False\nassert     correct_bracketing(\"<a><b></a>\") == False\n",
        "num_ids_2": 33,
        "num_ids_4": 77
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<()><\") == True, \"Input 1\"\nassert     correct_bracketing(\"<{<(<)><\") == False, \"Input 2\"\nassert     correct_bracketing(\"<[<(<)><\") == False, \"Input 3\"\nassert     correct_bracketing(\"<[<]>\") == True, \"Input 4\"\nassert     correct_bracketing(\"<[<]>\") == True, \"Input 5\"\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     monotonic([1,2,3,4,5,6,7])\nassert     monotonic([5,4,3,2,1,0])\nassert not monotonic([2,1,4,3,5,6])",
        "num_ids_2": 40,
        "num_ids_4": 59
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     monotonic([-2,1,-3,4,-1]) == True\nassert     monotonic([1,-2,-3,4]) == False\nassert     monotonic([-1,-1,-1,-1]) == False\nassert     monotonic([1,0,-1]) == True\nassert     monotonic([-1,0,0,0]) == True\n",
        "num_ids_2": 37,
        "num_ids_4": 70
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     monotonic([1,2,3]) == True\nassert     monotonic([3,2,1]) == False\nassert     monotonic([3,1,2]) == False\nassert     monotonic([3,3,3]) == True\nassert     monotonic([3,3,3,2]) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not monotonic([1,3,6])\nassert monotonic([1,2,3])\nassert not monotonic([3,2,1])\nassert not monotonic([2,1,3])\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     monotonic([1,2,3,4,5])\nassert     monotonic([4,3,2,1])\nassert     monotonic([5,4,3,2,1])\nassert     monotonic([4,3,1])\nassert     monotonic([4,1,3])\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3]\nassert     common([1, 2, 3, 4], [1, 2, 3, 5]) == []\n\nprint(\"test passes!\"",
        "num_ids_2": 54,
        "num_ids_4": 54
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common([2, 3, 6, 8], [2, 4, 6, 9]) == [2, 3]\nassert     common([2, 3, 6, 8], [3, 4, 5, 6]) == []\nassert     common([2, 3, 6, 8], [2, 3, 4, 5, 6]) == [2, 3]\nassert     common([], [1, 2, 3, 4]) == []\nassert     common([1], [1, 2, 3, 4]) == []\n",
        "num_ids_2": 52,
        "num_ids_4": 99
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common([], []) == []\nassert     common([1], []) == []\nassert     common([], [1]) == []\nassert     common([], [2, 3]) == []\nassert     common([], [4, 5, 6]) == []\n",
        "num_ids_2": 21,
        "num_ids_4": 45
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert common([\"a\", \"b\", \"c\"], [\"d\", \"e\"]) == [\"a\", \"b\"]\n    assert common([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    assert common([\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(10) == 2\nassert largest_prime_factor(19) == 19\nassert largest_prime_factor(2) == 2\nassert largest_prime_factor(3) == 3\nassert largest_prime_factor(23) == 23\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert largest_prime_factor(27) == 3\nassert largest_prime_factor(5) == 5\nassert largest_prime_factor(7) == 7\nassert largest_prime_factor(2) == 2\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(24) == 2\nassert     largest_prime_factor(129) == 3\nassert     largest_prime_factor(2100) == 7\nassert     largest_prime_factor(3049) == 29\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_prime_factor(20) == 5\nassert     largest_prime_factor(8) == 2\nassert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(10) == 2\nassert     largest_prime_factor(3) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert largest_prime_factor(2) == 2\nassert largest_prime_factor(12) == 3\nassert largest_prime_factor(13) == 13\nassert largest_prime_factor(5) == 5\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert sum_to_n(5) == 6\n\nassert sum_to_n(2) == 1\n",
        "num_ids_2": 15,
        "num_ids_4": 27
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nsum_to_n(3) == 5\nprint(\"3. Passed\")\n\nsum_to_n(10) == 45\nprint(\"4. Passed\")\n\nsum_to_n(100) == 500\nprint(\"5. Passed\")\n\nsum_to_n(0) == 0\nprint(\"6. Passed\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(7) == 18\nassert     sum_to_n(10) == 45\nassert     sum_to_n(20) == 67\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsum_to_n(5) == 15\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\"fibonacci is a function that returns the nth fibonacci number.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_to_n(100) == 5050\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_to_n(1) == 1\nsum_to_n(2) == 3\nsum_to_n(3) == 6\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"()\") == True, \"Brackets not found!\"\nassert correct_bracketing(\")())())\") == False, \"Brackets not found!\"\nassert correct_bracketing(\"(((((()))))\") == True, \"Brackets not found!\"\nassert correct_bracketing(\"((()\") == False, \"Brackets not found!\"\nassert correct_bracketing(\"()()())\") == True, \"Brackets not found!\"\n",
        "num_ids_2": 41,
        "num_ids_4": 84
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(((()()))\") == False\nassert     correct_bracketing(\"((()()(()))\") == False\nassert     correct_bracketing(\"((()()((()))\") == False\nassert correct_bracketing(\"((()())((()))\") == False\n",
        "num_ids_2": 31,
        "num_ids_4": 67
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         correct_bracketing(\"()\") == True, \"Wrong answer.\"\nassert         correct_bracketing(\"(]\") == False, \"Wrong answer.\"\nassert         correct_bracketing(\"(]\") == False, \"Wrong answer.\"\nassert         correct_bracketing(\"([)]\") == False, \"Wrong answer.\"\nassert         correct_bracketing(\"((()))\") == True, \"Wrong answer.\"\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"( )\") == False\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"((()()()))\") == True\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncorrect_bracketing(\"\") == True\nassert \ncorrect_bracketing(\"()\") == True\nassert \ncorrect_bracketing(\"(])\") == False\nassert \ncorrect_bracketing(\"([)]\") == False\nassert \ncorrect_bracketing(\"((()))\") == False\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()()\") == True\nassert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"((()))\") == False\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"((()))\") == True\nassert     correct_bracketing(\"((())\") == False\nassert     correct_bracketing(\"((())\") == False\nassert     correct_bracketing(\"((()))\") == True\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"()\") == True, \"No brackets\"\nassert     correct_bracketing(\"(()())\") == True, \"Single bracket\"\nassert     correct_bracketing(\"(((()))\") == True, \"Only left parentheses\"\nassert     correct_bracketing(\"(((()))())\") == False, \"Single bracket\"\nassert     correct_bracketing(\"(((()())\") == False, \"Extra left parentheses\"\n",
        "num_ids_2": 38,
        "num_ids_4": 82
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"(()))\")) # True\n    print(correct_bracketing(\"(()))(\")) # False\n    print(correct_bracketing
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef nth_derivative(xs: list, n: int):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return nth derivative of this polynomial.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef derivative2(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n\n\ndef integral(xs: list, a: int, b: int):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    a, b are the limits of the integral.\n    Return the result of the integral of this polynomial in the same form.\n    \"\"\"\n    pass\n\ndef integral2(xs: list, a: int, b: int):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    a, b are the limits of the integral.\n    Return the result of the integral of this polynomial in the same form.\n    \"\"\"\n    pas",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     derivative([0, 1, 1]) == [1, 2, 2], 'Derivative not correct.'\nassert     derivative([0, 2, 3]) == [2, 3, 6], 'Derivative not correct.'\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    xs = [-0.1, 0.2, -0.3, 0.4]\n    print(\"Polynomial in terms of x: \", end=\"\")\n    print(\" + \".join(f\"{c}*x^{i}\" for i,c in enumerate(xs)))\n    print(\"Derivative of polynomial: \", end=\"\")\n    print(\" + \".join(f\"{c}*x^{i+1}\" for i,c in enumerate(xs))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef main():\n    xs = list(map(float, input().split()))\n    x0 = xs[0]\n    if xs[0] == 0:\n        print(\"NO SOLUTION\")\n    else:\n        print(\"{:.6f}\".format(derivative(xs)))\n\nif __name__ == \"__main__\":\n    main(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert derivative([1, 2, 3]) == [-3, -2, -1], 'Wrong answer'\nassert derivative([-3, -2, -1]) == [3, 2, 1], 'Wrong answer'\nassert derivative([0, 0, 0]) == [0, 0, 0], 'Wrong answer'\n",
        "num_ids_2": 28,
        "num_ids_4": 77
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     derivative([0,1,2,3]) == [6,2,0]\nassert     derivative([2,4,6,8]) == [0,0,2,0]\nassert     derivative([2,4,6]) == [2,0,0]\n",
        "num_ids_2": 48,
        "num_ids_4": 69
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(5) == 2\nassert     fibfib(10) == 55\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 1\nassert fibfib(4) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 42
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(3) == 1\nfibfib(4) == 2\nfibfib(5) == 3\nfibfib(6) == 5\nfibfib(7) == 8\nfibfib(8) == 13\nfibfib(9) == 21\nfibfib(10) == 34\nfibfib(11) == 55\nfibfib(12) == 89\nfibfib(13) == 144\nfibfib(14) == 233\nfibfib(15) == 377\nfibfib(16) == 610\nfibfib(17) == 987\nfibfib(18) == 1597\nfibfib(19) == 2584\nfibfib(20) == 4181\nfibfib(21) == 6765\nfibfib(22) == 10946\nfibfib(23) == 17711\nfibfib(24) == 28657\nfibfib(25) == 46368\nfibfib(26) == 75025\nfibfib(27) == 121393\nfibfib(28) == 196418\nfibfib(29) == 317811\nfibfib(30) == 514229\nfibfib(31) == 832040\nfibfib(32) == 1346269\nfibfib(33) == 2178309\nfibfib(34) == 3524578\nfibfib(35) == 5702887\nfibfib(36) == 9227465\nfibfib(37) == 155112365\nfibfib(38) == 31781113\nfibfib(39) == 52474783\nfibfib(40) == 83204043\nfibfib(41) == 136597853\nfibfib(42) == 217830929\nfibfib(43) == 352457869\nfibfib(44) == 570288749\nfibfib(45) == 922746543\nfibfib(46) == 1551123659\nfibfib(47) == 3178111399\nfibfib(48) == 5247478399\nfibfib(49) == 8320404469\nfibfib(50) == 13659785399\nfibfib(51) == 21783092999\nfibfib(52) == 352457869\nfibfib(53) == 570288749\nfibfib(54) == 922746543\nfibfib(55) == 1551123659\nfibfib(56) == 3178111399\nfibfib(57) == 5247478399\nfibfib(58) == 8320404469\nfibfib(59) == 13659785399\nfibfib(60) == 21783092999\nfibfib(61) == 352457869\nfibfib(62) == 570288749\nfibfib(63) == 922746543\nfibfib(64) == 1551123659\nfibfib(65) == 3178111399\nfibfib(66) == 5247478399\nfibfib(67) == 8320404469\nfibfib(68) == 13659785399\nfibfib(69) == 21783092999\nfibfib(70) == 352457869\nfibfib(71) == 570288749\nfibfib(72) == 922746543\nfibfib(73) == 1551123659\nfibfib(74) == 3178111399\nfibfib(75) == 5247478399\nfibfib(76) == 8320404469\nfibfib(77) == 13659785399\nfibfib(78) == 21783092999\nfibfib(79) == 352457869\nfibfib(80) == 570288749\nfibfib(81) == 922746543\nfibfib(82) == 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     vowels_count('hello') == 0\nassert     vowels_count('helloworld') == 3\nassert     vowels_count('helloWorld') == 4\nassert     vowels_count('') == 0\nassert     vowels_count('h') == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     vowels_count('abbcdd') == 3\nassert     vowels_count('szwzcx') == 5\nassert     vowels_count('aba') == 2\nassert     vowels_count('abab') == 2\nassert     vowels_count('aab') == 0\n",
        "num_ids_2": 33,
        "num_ids_4": 60
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     vowels_count(\"\") == 0, FIX\nassert     vowels_count(\"a\") == 1, FIX\nassert     vowels_count(\"ab\") == 0, FIX\nassert     vowels_count(\"abc\") == 0, FIX\nassert     vowels_count(\"abcdef\") == 0, FIX\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     vowels_count('Hellow') == 0, 'Hellow has 0 vowels'\nassert     vowels_count('Welcome') == 0, 'Welcome has 0 vowels'\nassert     vowels_count('Big') == 1, 'Big has 1 vowel'\nassert     vowels_count('H') == 1, 'H has 1 vowel'\nassert     vowels_count('y') == 2, 'y has 2 vowels'\n",
        "num_ids_2": 44,
        "num_ids_4": 84
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('vowels_count:')\n    for s in ['', 'h', 'hello', 'coding', 'code']:\n        print(s, '-->', vowels_count(s))\n\n    print('\\n', FIX)\n    input('Press enter to exit...')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    vowels_count('water') == 3\n    vowels_count('substitution') == 3\n    vowels_count('blub') == 4\n    vowels_count('has') == 0\n    vowels_count('abc') == 0\n    vowels_count('z') == 1\n    vowels_count('yu') == 2\n    vowels_count('j') == 0\n    vowels_count('by') == 1\n    vowels_count('y') == 0\n    vowels_count('e') == 1\n    vowels_count('hello') == 0\n    vowels_count('') == 0\n    vowels_count('') == 0\n    vowels_count('water ') == 0\n    vowels_count('Water') == 0\n    vowels_count('water ') == 0\n    vowels_count('') == 0\n    vowels_count('q') == 0\n    vowels_count('Substitution') == 3\n    vowels_count('I') == 0\n    vowels_count('  ') == 0\n    vowels_count('d') == 0\n    vowels_count('q') == 0\n    vowels_count('h') == 0\n    vowels_count('D') == 0\n    vowels_count('E') == 0\n    vowels_count('q') == 0\n    vowels_count('e') == 0\n    vowels_count('z') == 0\n    vowels_count('A') == 0\n    vowels_count('g') == 0\n    vowels_count('Y') == 0\n    vowels_count('r') == 0\n    vowels_count('r') == 0\n    vowels_count('a') == 0\n    vowels_count('y') == 0\n    vowels_count('u') == 0\n    vowels_count('p') == 0\n    vowels_count('e') == 0\n    vowels_count('r') == 0\n    vowels_count('h') == 0\n    vowels_count('I') == 0\n    vowels_count('y') == 0\n    vowels_count('D') == 0\n    vowels_count(' ') == 0\n    vowels_count('^') == 0\n    vowels_count('-') == 0\n    vowels_count('`') == 0\n    vowels_count('!') == 0\n    vowels_count('_') == 0\n    vowels_count('@') == 0\n    vowels_count('#') == 0\n    vowels_count('?') == 0\n    vowels_count('j') == 0\n    vowels_count('*') == 0\n    vowels_count('.') == 0\n    vowels_count(';') == 0\n    vowels_count(' ') == 0\n    vowels_count('.') == 0\n    vowels_count('/') == 0\n    vowels_count('(') == 0\n    vowels_count(')') == 0\n    vowels_count('-') == 0\n    vowels_count('+') == 0\n    vowels_count('{') == 0\n    vowels_count('}') == 0\n    vowels_count('|') == 0\n    vowels_count('_') == 0\n    vowels_count('=') == 0\n    vowels_count('-') == 0\n    vowels_count('^') == 0\n    vowels_count('#') == 0\n    vowels_count('@') == 0\n    vowels_count('%') == 0\n    vowels_count('$') == 0\n    vowels_count('&') == 0\n    vowels_count('\\'') == 0\n    vowels_count('!') == 0\n    vowels_count('\\'') == 0\n    vowels_count('[') == 0\n    vowels_count(']') == 0\n    vowels_count('<') == 0\n    vowels_count('>') == 0\n    vowels_count(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncircular_shift(123, 2) == 321\ncircular_shift(1234, 3) == 3412\ncircular_shift(1234, -3) == 3412\ncircular_shift(123, 7) == 321\ncircular_shift(1, 0) == 1\ncircular_shift(1, 4) == 1\ncircular_shift(1, -4) == 1\ncircular_shift(1, -8) == 1\ncircular_shift(1, 8) == 1\ncircular_shift(1, 8.1) == 1\ncircular_shift(1, -8.1) == 1\ncircular_shift(1, 8.1) == 1\ncircular_shift(1, -8.1) == 1\ncircular_shift(2, -2) == 2\ncircular_shift(2, -3) == 2\ncircular_shift(2, 3) == 1\ncircular_shift(2, -3) == 1\ncircular_shift(2, 3) == 1\ncircular_shift(2, 3.1) == 1\ncircular_shift(2, -3.1) == 1\ncircular_shift(2, 3.1) == 1\ncircular_shift(2, -3.1) == 1\ncircular_shift(3, -2) == 3\ncircular_shift(3, -3) == 2\ncircular_shift(3, 3) == 1\ncircular_shift(3, -3) == 1\ncircular_shift(3, 3) == 1\ncircular_shift(3, 3.1) == 1\ncircular_shift(3, -3.1) == 1\ncircular_shift(3, 3.1) == 1\ncircular_shift(3, -3.1) == 1\ncircular_shift(4, -2) == 4\ncircular_shift(4, -3) == 3\ncircular_shift(4, 3) == 2\ncircular_shift(4, -3) == 2\ncircular_shift(4, 3) == 2\ncircular_shift(4, 3.1) == 2\ncircular_shift(4, -3.1) == 2\ncircular_shift(4, 3.1) == 2\ncircular_shift(4, -3.1) == 2\ncircular_shift(5, -2) == 5\ncircular_shift(5, -3) == 4\ncircular_shift(5, 3) == 3\ncircular_shift(5, -3) == 3\ncircular_shift(5, 3) == 3\ncircular_shift(5, 3.1) == 3\ncircular_shift(5, -3.1) == 3\ncircular_shift(5, 3.1) == 3\ncircular_shift(5, -3.1) == 3\ncircular_shift(6, -2) == 6\ncircular_shift(6, -3) == 5\ncircular_shift(6, 3) == 4\ncircular_shift(6, -3) == 4\ncircular_shift(6, 3) == 4\ncircular_shift(6, 3.1) == 4\ncircular_shift(6, -3.1) == 4\ncircular_shift(6, 3.1) == 4\ncircular_shift(6, -3.1) == 4\ncircular_shift(7, -2) == 7\ncircular_shift(7, -3) == 6\ncircular_shift(7, 3) == 5\ncircular_shift(7, -3) == 5\ncircular_shift(7, 3) == 5\ncircular_shift(7, 3.1) == 5\ncircular_shift(7, -3.1) == 5\ncircular_shift(7, 3.1) == 5\ncircular_shift(7, -3.1) == 5\ncircular_shift(8, -2) == 8\ncircular_shift(8, -3) == 7\ncircular_shift(8, 3) == 6\ncircular_shift(8, -3) == 6\ncircular_shift(8, 3) == 6\ncircular_shift(8, 3.1) == 6\ncircular_shift(8, -3.1) == 6\ncircular_shift(8, 3.1) == 6\ncircular_shift(8, -3.1) == 6\ncircular",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circular_shift(1, 5)    == '5'\nassert     circular_shift(100, 5)    == '00100'\nassert     circular_shift(123456789, 5) == '97987654'\nassert     circular_shift(123456789, -5) == '987654321'\n",
        "num_ids_2": 35,
        "num_ids_4": 80
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     circular_shift(123, 1) == '23', '1st test failed'\nassert     circular_shift(12345, 1) == '45234', '2nd test failed'\nassert     circular_shift(12345678, 1) == '674578', '3rd test failed'\nassert     circular_shift(12356, 1) == '567', '4th test failed'\nassert     circular_shift(123456789, 1) == '9876543', '5th test failed'\n",
        "num_ids_2": 46,
        "num_ids_4": 96
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncircular_shift(4, 1) == '4'\ncircular_shift(4, 2) == '5'\ncircular_shift(4, 3) == '6'\ncircular_shift(4, 4) == '7'\ncircular_shift(4, 5) == '3'\ncircular_shift(4, 6) == '2'\ncircular_shift(4, 7) == '1'\ncircular_shift(4, 8) == '4'\ncircular_shift(4, 9) == '4'\ncircular_shift(4, 10) == '3'\ncircular_shift(4, 11) == '5'\ncircular_shift(4, 12) == '6'\ncircular_shift(4, 13) == '7'\ncircular_shift(4, 14) == '8'\ncircular_shift(4, 15) == '9'\ncircular_shift(4, 16) == '1'\ncircular_shift(4, 17) == '2'\ncircular_shift(4, 18) == '5'\ncircular_shift(4, 19) == '8'\ncircular_shift(4, 20) == '7'\ncircular_shift(4, 21) == '6'\ncircular_shift(4, 22) == '2'\ncircular_shift(4, 23) == '4'\ncircular_shift(4, 24) == '3'\ncircular_shift(4, 25) == '5'\ncircular_shift(4, 26) == '6'\ncircular_shift(4, 27) == '7'\ncircular_shift(4, 28) == '8'\ncircular_shift(4, 29) == '9'\ncircular_shift(4, 30) == '1'\ncircular_shift(4, 31) == '2'\ncircular_shift(4, 32) == '5'\ncircular_shift(4, 33) == '8'\ncircular_shift(4, 34) == '7'\ncircular_shift(4, 35) == '6'\ncircular_shift(4, 36) == '3'\ncircular_shift(4, 37) == '4'\ncircular_shift(4, 38) == '3'\ncircular_shift(4, 39) == '5'\ncircular_shift(4, 40) == '6'\ncircular_shift(4, 41) == '7'\ncircular_shift(4, 42) == '8'\ncircular_shift(4, 43) == '9'\ncircular_shift(4, 44) == '1'\ncircular_shift(4, 45) == '2'\ncircular_shift(4, 46) == '5'\ncircular_shift(4, 47) == '8'\ncircular_shift(4, 48) == '7'\ncircular_shift(4, 49) == '6'\ncircular_shift(4, 50) == '3'\ncircular_shift(4, 51) == '4'\ncircular_shift(4, 52) == '3'\ncircular_shift(4, 53) == '5'\ncircular_shift(4, 54) == '6'\ncircular_shift(4, 55) == '7'\ncircular_shift(4, 56) == '8'\ncircular_shift(4, 57) == '9'\ncircular_shift(4, 58) == '1'\ncircular_shift(4, 59) == '2'\ncircular_shift(4, 60) == '5'\ncircular_shift(4, 61) == '8'\ncircular_shift(4, 62) == '7'\ncircular_shift(4, 63) == '6'\ncircular_shift(4, 64) == '3'\ncircular_shift(4, 65) == '4'\ncircular_shift(4, 66) == '3'\ncircular_shift(4, 67) == '5'\ncircular_shift(4, 68) == '6'\ncircular_shift(4, 69) == '7'\ncircular_shift(4, 70) == '8'\ncircular_shift(4, 71) == '9'\ncircular_shift(4, 72) == '1'\ncircular_shift(4, 73) == '2'\ncir",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncircular_shift(1234567890, 8) == 1234567890\ncircular_shift(1234567890, 3) == 1234567891\ncircular_shift(1234567890, -2) == 1235678910\ncircular_shift(1234567890, 8) == 81234567890\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circular_shift(\"1\", 1) == \"1\"\nassert     circular_shift(\"1\", 0) == \"1\"\nassert     circular_shift(\"10\", 1) == \"10\"\nassert     circular_shift(\"10\", -1) == \"10\"\nassert     circular_shift(\"100\", 0) == \"100\"\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circular_shift(9678,1) == \"9867\"\nassert     circular_shift(9678,6) == \"9678\"\nassert     circular_shift(9678,7) == \"9678\"\nassert     circular_shift(9678,9) == \"9867\"\n\nprint('Passed.')\nprint()\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digitSum(\"djfhgjkghgjhjhjgh\") == 9\nassert     digitSum(\"djfhgjkghgjhjhjgh\") == 9\nassert     digitSum(\"djfhgjkghgjhjhjgh\") == 9\nassert     digitSum(\"djfhgjkghgjhjhjgh\") == 9\nassert     digitSum(\"djfhgjkghgjhjhjgh\") == 9\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \ndef main():\n    \"\"\"Testing\n    Just call the function.\n    \"\"\"\n    s = \"12343\"\n    result = digitSum(s)\n    print(result)\n    \nif __name__ == '__main__':\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digitSum('2') == 2, \"Should be 2\"\nassert     digitSum('200') == 200, \"Should be 200\"\nassert     digitSum('99') == 99, \"Should be 99\"\n\nprint(\"\\n=====Checking Task 6: digitSum =====\\n\")\nprint(\"You passed all the tests\")\nprint(\"You passed all the tests\")\nprint(\"You passed all the tests\")\n\nprint(\"\\n=====Checking Task 7: stringRepeat =====\\n\")",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum(\"1\") == 1\nassert     digitSum(\"21\") == 3\nassert     digitSum(\"1122\") == 3\nassert     digitSum(\"123456789\") == 45\n",
        "num_ids_2": 20,
        "num_ids_4": 44
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digitSum(\"a1b2c3d4\") == \"267\"\nassert     digitSum(\"1a2b3c4d\") == \"4\"\nassert     digitSum(\"\") == \"\"\nassert     digitSum(\"1a2b3c4d5\") == \"10\"\n",
        "num_ids_2": 38,
        "num_ids_4": 67
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert digitSum('8') == 8\nassert digitSum('5') == 5\nassert digitSum('A') == ord('A')\nassert digitSum('3') == ord('3')\n",
        "num_ids_2": 12,
        "num_ids_4": 33
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    digitSum(\"4568\") == 576\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfruit_distribution(\"1 apples, 3 oranges, 3 apples, 4 oranges\", 1) == 5\n\nprint('All the tests for fruit_distribution passed')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfruit_distribution(\"1 apples and 1 orange and 1 mango\",\"3 apples and 1 orange and 1 mango\") == \"3 mango",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfruit_distribution(\"no_n\",0) == 0, \"Incorrect answer. Fruit_distribution(\\\"no_n\\\",0) should return 0.\"\nassert \nfruit_distribution(\"2_2_no_n_no_n\",0) == 0, \"Incorrect answer. Fruit_distribution(\\\"2_2_no_n_no_n\\\",0) should return 0.\"\nassert \nfruit_distribution(\"no_n_4\",0) == 0, \"Incorrect answer. Fruit_distribution(\\\"no_n_4\\\",0) should return 0.\"\nassert \nfruit_distribution(\"8_8_no_n_no_n_no_n_no_n\",0) == 0, \"Incorrect answer. Fruit_distribution(\\\"8_8_no_n_no_n_no_n_no_n\\\",0) should return 0.\"\nassert \nfruit_distribution(\"8_8_no_n_no_n_no_n_no_n\",8) == 2, \"Incorrect answer. Fruit_distribution(\\\"8_8_no_n_no_n_no_n_no_n\\\",8) should return 2.\"\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fruit_distribution(\"1\", 2) == 1\nassert     fruit_distribution(\"2\", 2) == 1\nassert     fruit_distribution(\"3\", 2) == 2\nassert     fruit_distribution(\"2\", 3) == 2\nassert     fruit_distribution(\"2\", 4) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fruit_distribution('1',1) == 0, \"This function should return 0\"\nassert fruit_distribution('1',1) == 0, \"This function should return 0\"\nassert fruit_distribution('1',1) == 0, \"This function should return 0\"\nassert fruit_distribution('1',1) == 0, \"This function should return 0\"\nassert fruit_distribution('1',1) == 0, \"This function should return 0\"\n",
        "num_ids_2": 43,
        "num_ids_4": 85
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fruit_distribution('10', 1) == '1'\nassert     fruit_distribution('10', 2) == '2'\nassert     fruit_distribution('10', 3) == '3'\nassert     fruit_distribution('12', 1) == '0'\nassert     fruit_distribution('12', 2) == '1'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(fruit_distribution('55', 1)) == 1\n\nprint(fruit_distribution('9', 2)) == 1\n\nprint(fruit_distribution('7', 3)) == 1\n\nprint(fruit_distribution('76', 5)) == 1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fruit_distribution(\"12\",1) == 0\nassert     fruit_distribution(\"21\",1) == 1\nassert     fruit_distribution(\"22\",1) == 0\nassert     fruit_distribution(\"11\",1) == 1\nassert     fruit_distribution(\"11\",2) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(fruit_distribution(\"1\", \"3\"), 3)\nprint(fruit_distribution(\"1\", \"2\"), 1)\nprint(fruit_distribution(\"1\", \"4\"), 0)\nprint(fruit_distribution(\"2\", \"4\"), 1)\nprint(fruit_distribution(\"3\", \"4\"), 1)\nprint(fruit_distribution(\"10\", \"10\"), 0)\nprint(fruit_distribution(\"10\", \"11\"), 1)\nprint(fruit_distribution(\"10\", \"111\"), 2)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pluck([2,5,6,7,5]) == [2,0]\nassert     pluck([1,1,1,1]) == [1]\nassert     pluck([]) == []\n\ndef extract(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to extract one of the nodes and return it.\n    The extracted node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    If the array is empty, return None.\n\n    The extracted node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return None.\n    \"\"\"\n    pass\n",
        "num_ids_2": 40,
        "num_ids_4": 49
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(pluck([ 1 ])) #, [ 1 ])\nprint(pluck([ 2, 4 ])) #, [ 4 ])\nprint(pluck([ 1, 2, 3 ])) #, [ 2 ])\nprint(pluck([ 1, 2, 3, 4 ])) #, [ 1 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 4 ])\nprint(pluck([ 3, 4, 6 ])) #, [ 1 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])\nprint(pluck([ 2, 4, 6 ])) #, [ 2 ])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert pluck([1,2,3,4,5]) == [[2,0]]\nassert pluck([1,2,3,4,5]) == [[4,1]]\nassert pluck([1,2,3,4,5]) == [[4,1]]\nassert pluck([1,2,3,4,5]) == [[4,1]]\n",
        "num_ids_2": 24,
        "num_ids_4": 66
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pluck([3,4,5,6,7,8,9]) ==     [2, 0], \"Wrong\"\nassert     pluck([3,4,5,6,7,8,9,10]) ==     [2, 1], \"Wrong\"\nassert     pluck([3,4,5,6,7,8,9,10,11,12]) ==     [2, 5], \"Wrong\"\nassert     pluck([3,4,5,6,7,8,9,10,11,12,13]) ==     [2, 7], \"Wrong\"\nassert     pluck([3,4,5,6,7,8,9,10,11,12,13,14]) ==     [2, 11], \"Wrong\"\n",
        "num_ids_2": 64,
        "num_ids_4": 140
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert pluck([]) == []\nassert pluck([1,2,3,4]) == [2,1]\nassert pluck([1,2,3,4,5]) == [4,3]\nassert pluck([1,2,3,4,5,6]) == [4,2]\n",
        "num_ids_2": 11,
        "num_ids_4": 51
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pluck([3, 5, -1, 10, 6]) == [[-1], 0]\nassert     pluck([3, 5, -1, 10, 6, 15]) == [[-1], 0]\nassert     pluck([3, 5, -1, 10, 6, 15, 4]) == [[-1], 0]\nassert     pluck([3, 5, -1, 10, 6, 15, 4, 17]) == [[-1], 0]\n",
        "num_ids_2": 50,
        "num_ids_4": 108
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pluck([3, 1, 5, 9, 8]) == [3, 1]\nassert     pluck([3, 1, 2, 5, 9]) == [3, 1]\nassert     pluck([3, 1, 2, 2, 4]) == [3, 1]\nassert     pluck([3, 1, 2, 2, 2]) == [3, 1]\nassert     pluck([]) == []\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pluck([1,2,3,4,5]) == [2, 0], \"Should return a list with a list, [smalest_value, its index] for the first even value in the array\"\nassert     pluck([]) == [], \"Should return a list with empty array\"\nassert     pluck([0]) == [0], \"Should return a list with the first even value",
        "num_ids_2": 69,
        "num_ids_4": 91
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (pluck([1,2,3,4,5,6])    ==  [1, 0]), f\"pluck([1,2,3,4,5,6]) => {pluck([1,2,3,4,5,6])}\"\nassert     (pluck([1,2,3,4,5,6,1,2])    ==  [1, 0]), f\"pluck([1,2,3,4,5,6,1,2]) => {pluck([1,2,3,4,5,6,1,2])}\"\nassert     (pluck([1,2,3,4,5,6,7,8,9,10])    ==  [1, 0]), f\"pluck([1,2,3,4,5,6,7,8,9,10]) => {pluck([1,2,3,4,5,6,7,8,9,10])}\"\nassert     (pluck([])    ==  []), f\"pluck([]) => {pluck([])}\"\n",
        "num_ids_2": 136,
        "num_ids_4": 248
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsearch([3,2,1]) == 1\n\nprint('TEST PASSED')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([4,5,3,2,1,6]) == 4, \"Wrong Answer\"\nassert     search([5,5,7,7,7,7]) == 7, \"Wrong Answer\"\nassert     search([-1,-2,-3,2,1,4,5,5]) == 5, \"Wrong Answer\"\nassert     search([-1,-1]) == -1, \"Wrong Answer\"\nassert     search([-1,]) == -1, \"Wrong Answer\"\n",
        "num_ids_2": 50,
        "num_ids_4": 99
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([1,2,3,4,5,6,7,6]) == 5\nassert     search([1,2,3,4,5,6,6,7,6]) == -1\nassert     search([1,2,2,3,4,5,5,6,6]) == 6\nassert     search([-2,-2,-2,1,2,2,2,3,4,5,5,6,6]) == 5\nassert     search([-2,-2,-2,1,2,2,2,3,4,5,5,6,6]) == 6\n",
        "num_ids_2": 49,
        "num_ids_4": 108
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    search([4,3,2,1]) == 3\n    search([2,2,3,3,3,3,4]) == -1\n    search([-2,1,3,5,5,7,7,8,8,9,10,10,10,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([]) == -1\nassert     search([1]) == 1\nassert     search([1,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,4,5,1,3,5,3,",
        "num_ids_2": 18,
        "num_ids_4": 1023
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsearch([3,4,5,2,1,5,1,2,5,5,3,4]) == 5\nprint(search([3,4,5,2,1,5,1,2,5,5,3,4]) == 5)\nassert \nsearch([3,4,5,2,1,5,1,2,5,5,3,4]) == 5\nprint(search([3,4,5,2,1,5,1,2,5,5,3,4]) == 5)\nassert \nsearch([3,4,5,2,1,5,1,2,5,5,3,4]) == -1\nprint(search([3,4,5,2,1,5,1,2,5,5,3,4]) == -1)\nassert \nsearch([3,4,5,2,1,5,1,2,5,5,3,4]) == 5\nprint(search([3,4,5,2,1,5,1,2,5,5,3,4]) == 5)\nassert \nsearch([3,4,5,2,1,5,1,2,5,5,3,4]) == 5\nprint(search([3,4,5,2,1,5,1,2,5,5,3,4]) == 5)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([5,3,5,3,7,3]) == 5\nassert     search([5,3,5,3,7,3,5,4,3,5,6,6,6,3,4,3,3,3]) == 3\nassert     search([1,2,3,4]) == -1\nassert     search([]) == -1\n",
        "num_ids_2": 62,
        "num_ids_4": 87
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    search([5,8,9,1]) == 9, '9'\n    search([5,8,7,6,1]) == -1, '-1'\n    search([1,1]) == 1, '1'\n    search([]) == -1, '-1'\n    search([2,2,2,3,3]) == -1, '-1'\n    \n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([3,2,3]) == 3\nassert     search([5,2,3,4]) == 3\nassert     search([3,4,3,2,5,2,4,6]) == -1\nassert     search([3,4,3,2,5,2,4,6,3,3]) == 6\nassert     search([3,4,3,2,5,2,4,6,3,3,2,4,2]) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 79
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"The result is correct\")\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strange_sort_list([1, -5, -3, 9, -2, 4]) == [-5, 4, 1, 9, -3, -2]\n",
        "num_ids_2": 41,
        "num_ids_4": 41
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strange_sort_list([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nassert     strange_sort_list([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 2, 3, 3, 4, 4, 5, 5, 1]\nassert     strange_sort_list([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 1, 2, 3, 3, 4, 4, 5, 5]\nassert     strange_sort_list([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 1, 1, 2, 2, 2, 3, 3, 4, 4]\n\n",
        "num_ids_2": 104,
        "num_ids_4": 208
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     strange_sort_list([5, 8, 6, 1, 4, -1]) == [1, -1, 4, 5, 6, 8], 'Wrong'\nassert     strange_sort_list([5, 8, 6, 1, 4]) == [1, 4, 5, 6, 8], 'Wrong'\nassert     strange_sort_list([5, 8, 6, 1]) == [1, 5, 6, 8], 'Wrong'\nassert     strange_sort_list([5, 8, 6]) == [6, 5, 8], 'Wrong'\nassert     strange_sort_list([5, 8]) == [8, 5], 'Wrong'\n",
        "num_ids_2": 78,
        "num_ids_4": 138
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strange_sort_list([-5, 10, -50, 0, -1, 50]) == [-1, -5, -50, 0, 50, 10]\nassert     strange_sort_list([1, 2, 5, 6, 7, 8]) == [1, 2, 5, 6, 7, 8]\nassert     strange_sort_list([1, -5, -50, -1, 50, 10]) == [-1, -5, 50, -1, 10, 1]\n\n\nprint(\"\\n*************************************\\n\")\nprint(\"6.1.1 (a)\")\ndef remove_dict_keys(d, keys):\n    '''\n    Remove dictionary keys, from list of dictionary keys\n    '''\n    pass\n",
        "num_ids_2": 77,
        "num_ids_4": 118
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strange_sort_list([1,2,3,4,5]) == [5,4,3,2,1]\nassert     strange_sort_list([2,3,4,5,1]) == [5,4,3,2,1]\nassert     strange_sort_list([1,2,3,4,5,6,7]) == [7,6,5,4,3,2,1]\nassert     strange_sort_list([2,3,4,5,1,6,7]) == [7,6,5,4,3,2,1]\n",
        "num_ids_2": 64,
        "num_ids_4": 144
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strange_sort_list([0,0,1,1,2,2]) == sorted([0,0,1,1,2,2])\nassert     strange_sort_list([0,0,1,1,2,2,4,5,6,6,7,7,8,8]) == sorted([0,0,1,1,2,2,4,5,6,6,7,7,8,8])\nassert     strange_sort_list([0,0,1,1,2,2,4,5,6,6,7,7,8,8,8,9,9,9,9]) == sorted([0,0,1,1,2,2,4,5,6,6,7,7,8,8,8,9,9,9,9])",
        "num_ids_2": 106,
        "num_ids_4": 195
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     strange_sort_list([1, 2, 3, 4]) == [4, 3, 2, 1]\nassert     strange_sort_list([0, 1, 2, 3]) == [3, 2, 1, 0]\nassert     strange_sort_list([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     strange_sort_list([1, 5, 4, 3, 2]) == [2, 3, 4, 5, 1]\n",
        "num_ids_2": 56,
        "num_ids_4": 116
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    strange_sort_list([5, 3, 1, 2]) == [1, 2, 3, 5]\nassert \n    strange_sort_list([5, 3, 2, 1]) == [2, 1, 3, 5]\nassert \n    strange_sort_list([5, 3, 2, 1, 1]) == [1, 1, 2, 3, 5]\nassert \n    strange_sort_list([5, 3, 1, 2, 4, 1]) == [1, 1, 2, 4, 5, 3]\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strange_sort_list([]) == [], 'Wrong! Empty list'\nassert     strange_sort_list([-1, -2, -3]) == [-3, -2, -1], 'Wrong!'\nassert     strange_sort_list([-2, -3, -1]) == [-3, -2, -1], 'Wrong!'\nassert     strange_sort_list([-1, -2, -3]) == [-3, -2, -1], 'Wrong!'\nassert     strange_sort_list([2, 3, 1]) == [1, 2, 3], 'Wrong!'\n",
        "num_ids_2": 54,
        "num_ids_4": 120
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(3, 4, 5) == -1, \"Should return -1 if the three sides of the triangle are < 5\"\nassert     triangle_area(3, 4, 1) == 0, \"Should return 0 if the sum of any two sides is > 3\"\nassert     triangle_area(0, 4, 5) == 0, \"Should return 0 if the sum of any two sides is = 3\"\nassert     triangle_area(3, 4, 6) == 0.5, \"Should return 0.5 if the sum of any two sides is = 5\"\nassert     triangle_area(6, 8, 4) == 0.5, \"Should return 0.5 if the sum of any two sides is = 5\"\n",
        "num_ids_2": 66,
        "num_ids_4": 134
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(5, 5, 5) == 25.0\nassert     triangle_area(3, 4, 5) == -1\nassert     triangle_area(4, 3, 5) == -1\nassert     triangle_area(2, 2, 5) == 50.0\nassert     triangle_area(2, 3, 5) == 50.0\n",
        "num_ids_2": 35,
        "num_ids_4": 70
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triangle_area(1,1,1) == 1\nassert     triangle_area(4,4,2) == 3\nassert     triangle_area(2,2,2) == 1\nassert     triangle_area(5,5,6) == -1\nassert     triangle_area(4,4,2) == 2\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(2, 3, 4) == -1\nassert     triangle_area(1, 1, 1) == 1\nassert     triangle_area(2, 2, 2) == 1.0\nassert     triangle_area(10, 6, 8) == 4.0\nassert     triangle_area(0, 0, 0) == -1",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(1, 2, 1) == 1\nassert     triangle_area(3, 2, 4) == 1.5\nassert     triangle_area(2, 3, 4) == -1\nassert     triangle_area(1, 2, 3) == -1\nassert     triangle_area(0, 0, 0) == -1",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     will_it_fly([[1,2,3],3,[4,5,6],6,[7,8,9],9],[4,5,6,9,12]) == True, \"Wrong answer\"\nassert     will_it_fly([[1,2,3,4],4,[5,6,7,8],8],[10,5,5,5]) == False, \"Wrong answer\"\n",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     will_it_fly(['a','a','b','b','a','a'], 2) == True,'should be True'\nassert     will_it_fly(['a','a','b','b','a','a'], 3) == False,'should be False'\nassert     will_it_fly(['a','a','b','b','a','a'], 5) == False,'should be False'\nassert     will_it_fly(['a','a','b','b','a','a'], 6) == True,'should be True'\nassert     will_it_fly(['a','a','b','b','a','a'], 7) == True,'should be True'\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nwill_it_fly(['a', 'b', 'a'], 1) == False\nwill_it_fly([1, 2, 3], 3) == False\nwill_it_fly([1, 2, 3], 5) == True\nwill_it_fly([1, 2, 3, 2, 1], 7) == True\nwill_it_fly([1, 2, 3, 4, 5], 10) == False\nwill_it_fly([1, 2, 3, 4, 5], 100) == True\nwill_it_fly([1, 2, 3, 4, 5], 0) == True\nwill_it_fly([1, 2, 3], 5) == False\nwill_it_fly(['a', 'b', 'a'], 1) == False\nwill_it_fly([1, 2, 3], 3) == False\nwill_it_fly([1, 2, 3], 5) == True\nwill_it_fly([1, 2, 3], 6) == False\nwill_it_fly([1, 2, 3], 100) == True\nwill_it_fly([1, 2, 3], -1) == False\nwill_it_fly([1, 2, 3], 0) == True\nwill_it_fly([1, 2, 3, 4], -1) == False\nwill_it_fly([1, 2, 3, 4], 5) == True\nwill_it_fly([1, 2, 3, 4], 6) == False\nwill_it_fly([1, 2, 3, 4], 7) == True\nwill_it_fly([1, 2, 3, 4], 8) == False\nwill_it_fly([1, 2, 3, 4], 9) == True\nwill_it_fly([1, 2, 3, 4], 10) == False\nwill_it_fly([1, 2, 3, 4], 11) == True\nwill_it_fly([1, 2, 3, 4], 12) == False\nwill_it_fly([1, 2, 3, 4], 13) == False\nwill_it_fly([1, 2, 3, 4], 14) == False\nwill_it_fly([1, 2, 3, 4], 15) == True\nwill_it_fly([1, 2, 3, 4], 16) == False\nwill_it_fly([1, 2, 3, 4], 17) == True\nwill_it_fly([1, 2, 3, 4], 18) == False\nwill_it_fly([1, 2, 3, 4], 19) == True\nwill_it_fly([1, 2, 3, 4], 20) == False\nwill_it_fly([1, 2, 3, 4], 21) == False\nwill_it_fly([1, 2, 3, 4], 22) == False\nwill_it_fly([1, 2, 3, 4], 23) == True\nwill_it_fly([1, 2, 3, 4], 24) == False\nwill_it_fly([1, 2, 3, 4], 25) == True\nwill_it_fly([1, 2, 3, 4], 26) == False\nwill_it_fly([1, 2, 3, 4], 27) == True\nwill_it_fly([1, 2, 3, 4], 28) == False\nwill_it_fly([1, 2, 3, 4], 29) == True\nwill_it_fly([1, 2, 3, 4], 30) == True\nwill_it_fly([1, 2, 3, 4], 31) == False\nwill_it_fly([1, 2, 3, 4], 32) == False\nwill_it_fly([1, 2, 3, 4], 33) == False\nwill_it_fly([1, 2, 3, 4], 34) == True\nwill_it_fly([1, 2, 3, 4], 35) == False\nwill_it_fly([1, 2, 3, 4], 36) == False\nwill_it_fly([1, 2, 3, 4], 37) == True\nwill_it_fly([1, 2, 3, 4], 38) == False\nwill_it_fly([1, 2, 3, 4], 39) == True\nwill_it_fly([1, 2, 3, 4], 40) == False\nwill_it_fly([1, 2, 3, 4], 41) == True\nwill_it_fly([1, 2, 3, 4], 42) == False\nwil",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     will_it_fly([\"\", \"\"], 4) == False, \"Expected False\"\nassert     will_it_fly([\"a\", \"a\", \"a\"], 1) == True, \"Expected True\"\nassert     will_it_fly([\"a\", \"a\"], 1) == False, \"Expected False\"\nassert     will_it_fly([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], 2) == True, \"Expected True\"\nassert     will_it_fly([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"], 5) == False, \"Expected False\"\n",
        "num_ids_2": 51,
        "num_ids_4": 122
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         will_it_fly(['a', 'b', 'c'], '2') == False, \"Wrong answer with q = ['a', 'b', 'c'], w = 2\"\nassert         will_it_fly(['a', 'b', 'c'], '3') == False, \"Wrong answer with q = ['a', 'b', 'c'], w = 3\"\nassert         will_it_fly(['a', 'b', 'c'], '4') == True, \"Wrong answer with q = ['a', 'b', 'c'], w = 4\"\nassert         will_it_fly(['a', 'b', 'c', 'd'], '3') == False, \"Wrong answer with q = ['a', 'b', 'c', 'd'], w = 3\"\nassert         will_it_fly(['a', 'b', 'c', 'd'], '4') == False, \"Wrong answer with q = ['a', 'b', 'c', 'd'], w = 4\"\n",
        "num_ids_2": 92,
        "num_ids_4": 190
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     will_it_fly([],100) == False\nassert     will_it_fly([1],100) == False\nassert     will_it_fly([1,2,2,3,4],100) == False\nassert     will_it_fly([1,2,2,3,4],10) == True\nassert     will_it_fly([1,2,2,3,4],12) == True\n",
        "num_ids_2": 29,
        "num_ids_4": 75
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nwill_it_fly([\"x\",\"x\",\"x\",\"y\",\"y\",\"y\"], 1) == True\nwill_it_fly([\"x\",\"x\",\"x\",\"y\",\"y\",\"y\",\"z\",\"z\",\"z\",\"z\"], 2) == False\nwill_it_fly([\"y\",\"x\",\"x\",\"y\",\"y\",\"z\",\"z\",\"z\",\"z\",\"z\"], 2) == True\nwill_it_fly([\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\"], 2) == True\nwill_it_fly([\"x\",\"y\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\"], 100) == True\nwill_it_fly([\"x\",\"y\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\"], 99999) == False\nwill_it_fly([\"x\",\"y\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\",\"z\"], 1) == False\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"PASS\" if smallest_change([1, 5, 3, 2, 2, 2, 2]) == 1 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 5, 3, 2, 2, 2, 3]) == 4 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 5, 3, 2, 4, 2, 1]) == 2 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 5, 3, 2, 4, 2, 1, 4, 3, 5]) == 3 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 5, 3, 2, 4, 2, 1, 4, 3, 5, 1]) == 3 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 5, 3, 2, 4, 2, 1, 4, 3, 5, 5]) == 1 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 5, 3, 2, 4, 2, 1, 4, 3, 5, 5, 1]) == 1 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 5, 3, 2, 4, 2, 1, 4, 3, 5, 5, 1, 1]) == 1 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5]) == 2 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3]) == 3 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4]) == 2 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 4 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]) == 3 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1]) == 2 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1]) == 1 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1, 1]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 1]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 1, 1]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0 else \"FAIL\")\nprint(\"PASS\" if smallest_change([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 1, 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_change([1, 2, 3, 4, 5]) == 0\nassert     smallest_change([1, 2, 3, 4, 5, 1]) == 2\nassert     smallest_change([1, 1, 1]) == 0\nassert     smallest_change([1, 1, 1, 1]) == 1\nassert     smallest_change([1, 1, 1, 1, 1]) == 1\n",
        "num_ids_2": 42,
        "num_ids_4": 76
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_change([1, 2, 3]) ==     1\nassert     smallest_change([1, 1, 5]) ==     2\nassert     smallest_change([1, 5, 1]) ==     2\nassert     smallest_change([1, 5, 2]) ==     1\nassert     smallest_change([1, 5, 2, 4]) ==     2\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    #f = open('data/palindrome.txt')\n    #arr = map(int, f.readline().split())\n    #arr = [1,2,3,4]\n    arr = [1,2,3,2]\n    print(smallest_change(arr))\n\n    #f = open('data/palindrome.txt')\n    #for line in f:\n    #    arr = map(int, line.split())\n    #print(arr)\n    #print(smallest_change(arr)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef palindrome(arr):\n    \"\"\"\n    Given an array arr of integers, check if the array is a permutation of the palindrome\n    array. A palindrome array is an array that is read the same forwards and backwards.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_change([1, 2, 1]) == 2\nassert     smallest_change([1, 1, 1]) == 0\nassert     smallest_change([1, 2, 1, 1]) == 1\nassert     smallest_change([1, 2, 1, 2]) == 3\nassert     smallest_change([1, 2, 1, 2, 3]) == 3",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_palindrome(word):\n    '''\n    Write a function that accepts a word and returns True if the word is a palindrome.\n    Otherwise, return False.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     total_match(['one', 'two', 'three'], ['one', 'two', 'three']) ==     ['one', 'two', 'three']\nassert     total_match(['one', 'two', 'three', 'four', 'five'], ['one', 'two', 'three', 'four', 'five']) ==     ['two', 'four']\nassert     total_match([], ['one', 'two', 'three', 'four', 'five']) ==     ['one', 'two', 'three', 'four', 'five']\nassert     total_match(['one', 'two', 'three', 'four', 'five'], ['one', 'two', 'three', 'four', 'five']) ==     ['one', 'two', 'three', 'four', 'five']\nassert total_match(['one', 'two', 'three', 'four', 'five'], ['one', 'two', 'three', 'four', 'five','six']) ==     ['one', 'two', 'three', 'four', 'five']\n",
        "num_ids_2": 85,
        "num_ids_4": 182
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert total_match([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\nassert total_match([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\nassert total_match([1, 2, 3], [1, 2, 3, 4]) == []\nassert total_match([1, 2, 3, 4], [1, 2, 3]) == []\n",
        "num_ids_2": 30,
        "num_ids_4": 80
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     total_match(['a','b','c'], ['d','e','f','g','h']) == ['d','e','f','g','h']\nassert     total_match(['a','b','c','d','e'], ['f','g','h','i','j','k']) == ['f','g','h','i','j','k']\n",
        "num_ids_2": 86,
        "num_ids_4": 86
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     total_match([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert total_match([\"a\", \"b\", \"c\"], [\"b\", \"c\"]) == [\"b\", \"c\"]\nassert total_match([\"a\", \"b\", \"c\"], [\"d\"]) == []\n",
        "num_ids_2": 65,
        "num_ids_4": 86
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     total_match(['a', 'b'], ['a', 'b']) == ['a', 'b']\nassert total_match([1, 2, 3], ['1', '2', '3']) == [1, 2, 3]\nassert total_match(['a', 'b'], ['a', 'b']) == ['a', 'b']\nassert total_match(['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c']\nassert total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\n",
        "num_ids_2": 58,
        "num_ids_4": 121
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_multiply_prime(9) == True, \"First test\"\nassert     is_multiply_prime(1) == False, \"Second test\"\nassert     is_multiply_prime(7) == False, \"Third test\"\nassert     is_multiply_prime(3) == True, \"Fourth test\"\nassert     is_multiply_prime(37) == False, \"Fifth test\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_multiply_prime(6)\nassert not is_multiply_prime(81)\nassert is_multiply_prime(33)\nassert is_multiply_prime(77)\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_multiply_prime(61) == True\n    is_multiply_prime(69) == True\n    is_multiply_prime(94) == False\n    is_multiply_prime(941) == False\n    is_multiply_prime(9411) == False\n\nprint('task 3 passed')\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(9) is True\nassert     is_multiply_prime(6) is True\nassert     is_multiply_prime(27) is False\nassert     is_multiply_prime(30) is True\nassert     is_multiply_prime(70) is False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(3) == False\nassert     is_multiply_prime(9) == True\nassert     is_multiply_prime(21) == True\nassert     is_multiply_prime(42) == False\nassert     is_multiply_prime(70) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_multiply_prime(87) == False\nassert     is_multiply_prime(24) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_multiply_prime(61) == True, \"61 should be true\"\nassert     is_multiply_prime(101) == False, \"101 should be false\"\nassert     is_multiply_prime(62) == False, \"62 should be false\"\nassert     is_multiply_prime(87) == True, \"87 should be true\"\nassert     is_multiply_prime(86) == False, \"86 should be false\"\n",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(22) == True, 'is_multiply_prime should return True for the number 22'\nassert     is_multiply_prime(99) == False, 'is_multiply_prime should return False for the number 99'\nassert     is_multiply_prime(11) == False, 'is_multiply_prime should return False for the number 11'\nassert     is_multiply_prime(12) == False, 'is_multiply_prime should return False for the number 12'\nassert     is_multiply_prime(21) == False, 'is_multiply_prime should return False for the number 21'\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(0) == False, \"is_multiply_prime(0) should be False\"\nassert     is_multiply_prime(1) == False, \"is_multiply_prime(1) should be False\"\nassert     is_multiply_prime(2) == False, \"is_multiply_prime(2) should be False\"\nassert     is_multiply_prime(3) == True, \"is_multiply_prime(3) should be True\"\nassert     is_multiply_prime(4) == False, \"is_multiply_prime(4) should be False\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_simple_power(2, 2) == True\n    is_simple_power(4, 2) == False\n    is_simple_power(0, 3) == True\n    is_simple_power(9, 2) == True\n    is_simple_power(2, 7) == True\n    is_simple_power(8, 2) == True\n    is_simple_power(27, 3) == True\n    is_simple_power(8, -3) == True\n    is_simple_power(3, -3) == True\n    is_simple_power(2, -3) == False\n    is_simple_power(2, 1) == False\n    is_simple_power(2, 2) == True\n    is_simple_power(2, 4) == True\n    is_simple_power(2, 5) == True\n    is_simple_power(2, 7) == True\n    is_simple_power(2, 8) == True\n    is_simple_power(2, 9) == True\n    is_simple_power(2, 10) == True\n    is_simple_power(2, 11) == True\n    is_simple_power(2, 12) == True\n    is_simple_power(2, 13) == True\n    is_simple_power(2, 14) == True\n    is_simple_power(2, 15) == True\n    is_simple_power(2, 16) == True\n    is_simple_power(2, 17) == True\n    is_simple_power(2, 18) == True\n    is_simple_power(2, 19) == True\n    is_simple_power(2, 20) == True\n    is_simple_power(2, 21) == True\n    is_simple_power(2, 22) == True\n    is_simple_power(2, 23) == True\n    is_simple_power(2, 24) == True\n    is_simple_power(2, 25) == True\n    is_simple_power(2, 26) == True\n    is_simple_power(2, 27) == True\n    is_simple_power(2, 28) == True\n    is_simple_power(2, 29) == True\n    is_simple_power(2, 30) == True\n    is_simple_power(2, 31) == True\n    is_simple_power(2, 32) == True\n    is_simple_power(2, 33) == True\n    is_simple_power(2, 34) == True\n    is_simple_power(2, 35) == True\n    is_simple_power(2, 36) == True\n    is_simple_power(2, 37) == True\n    is_simple_power(2, 38) == True\n    is_simple_power(2, 39) == True\n    is_simple_power(2, 40) == True\n    is_simple_power(2, 41) == True\n    is_simple_power(2, 42) == True\n    is_simple_power(2, 43) == True\n    is_simple_power(2, 44) == True\n    is_simple_power(2, 45) == True\n    is_simple_power(2, 46) == True\n    is_simple_power(2, 47) == True\n    is_simple_power(2, 48) == True\n    is_simple_power(2, 49) == True\n    is_simple_power(2, 50) == True\n    is_simple_power(2, 51) == True\n    is_simple_power(2, 52) == True\n    is_simple_power(2, 53) == True\n    is_simple_power(2, 54) == True\n    is_simple_power(2, 55) == True\n    is_simple_power(2, 56) == True\n    is_simple_power(2, 57) == True\n    is_simple_power(2, 58) == True\n    is_simple_power(2, 59) == True\n    is_simple_power(2, 60) == True\n    is_simple_power(2, 61) == True\n    is_simple_power(2, 62) == True\n    is_simple_power(2, 63) == True\n    is_simple_power(2, 64) == True\n    is_simple_power(2, 65) =",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_simple_power(9, 2) == True\nassert     is_simple_power(9, 3) == False\nassert     is_simple_power(9, 4) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(9, 7) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_simple_power(3, 5) == False\nassert is_simple_power(4, 9) == True\nassert is_simple_power(2, 4) == False\n",
        "num_ids_2": 29,
        "num_ids_4": 43
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_simple_power(2, 4) == True\nassert is_simple_power(3, 2) == True\nassert is_simple_power(4, 2) == True\nassert is_simple_power(4, 3) == False\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_simple_power(5,2) == False\nassert     is_simple_power(5,1) == True\nassert     is_simple_power(16,2) == True\nassert     is_simple_power(16,3) == False\nassert     is_simple_power(2,4) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(1, 2) == False, 'x = 1, n = 2, is_simple_power(1, 2) is False'\nassert     is_simple_power(1, 3) == False, 'x = 1, n = 3, is_simple_power(1, 3) is False'\nassert     is_simple_power(1, -1) == False, 'x = 1, n = -1, is_simple_power(1, -1) is False'\nassert     is_simple_power(1, -2) == False, 'x = 1, n = -2, is_simple_power(1, -2) is False'\nassert     is_simple_power(2, 2) == True, 'x = 2, n = 2, is_simple_power(2, 2) is True'\n",
        "num_ids_2": 76,
        "num_ids_4": 158
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_simple_power(16, 4) == True, 'input 16, 4 - should be True'\nassert     is_simple_power(16, 1) == False, 'input 16, 1 - should be False'\nassert     is_simple_power(16, 3) == False, 'input 16, 3 - should be False'\nassert     is_simple_power(3, 1) == False, 'input 3, 1 - should be False'\nassert     is_simple_power(9, 2) == True, 'input 9, 2 - should be True'\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_simple_power(0, 0) == False\nassert     is_simple_power(0, 1) == False\nassert     is_simple_power(2, 1) == False\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(2, 2) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(5, 2) == False\nassert     is_simple_power(5, 0) == False\nassert     is_simple_power(10, 2) == False\nassert     is_simple_power(16, 2) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('done')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef iscube(a):\n    return (a**3) == a\n\ndef iscube(a):\n    return a**3 == a\n\ndef iscube(a):\n    if a == a**3:\n        return True\n    else:\n        return False\n\ndef iscube(a):\n    return a**3 == a\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert iscube(3) == True\nassert iscube(8) == False\n",
        "num_ids_2": 12,
        "num_ids_4": 21
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(iscube(25)) \nprint(iscube(13)) \nprint(iscube(21)) \nprint(iscube(12)) \nprint(iscube(41)) \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert iscube(0) == True\nassert iscube(1) == False\nassert iscube(3) == True\nassert iscube(7) == False\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nhex_key(\"\") == 0\nassert \nhex_key(\"1234567890ABCDEF\") == 10\nassert \nhex_key(\"A4B3C2D1E5F2C1\") == 4\nassert \nhex_key(\"\") == 0",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhex_key(0)\nhex_key(100)\nhex_key('\\n')\nhex_key('\\r\\n')\nhex_key('\\t')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     hex_key('0123456789ABCDEF') == (2, 3, 5, 7)\nassert     hex_key('0000') == (2, 3, 5, 7)\nassert     hex_key('10') == (2, 3, 5, 7)\nassert     hex_key('FF') == (2, 3, 5, 7)\nassert     hex_key('A1B') == (2, 3, 5, 7)\n",
        "num_ids_2": 44,
        "num_ids_4": 82
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     hex_key(\"\") == 0, \"the empty string should be 0\"\nassert     hex_key(\"AA\") == 0, \"the number AA should be 0\"\nassert     hex_key(\"ABCDEF\") == 3, \"the number ABCDEF should be 3\"\nassert     hex_key(\"ABCDEFGHI\") == 9, \"the number ABCDEFGHI should be 9\"\nassert     hex_key(\"ABCDEFGHIJ\") == 12, \"the number ABCDEFGHIJ should be 12\"\n",
        "num_ids_2": 39,
        "num_ids_4": 87
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert hex_key('A') == 3\nassert hex_key('B') == 3\nassert hex_key('C') == 3\n",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hex_key('AB') == 5\nassert     hex_key('DC') == 8\nassert     hex_key('EF') == 10\nassert     hex_key('FB') == 10\nassert     hex_key('C5') == 7\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string with only '0' and '1' in binary format and your task is to convert it\n    to decimal.\n\n    The string will have an extra 'db' at the beginning and at the end to help with the format.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(2) == '01'\nassert     decimal_to_binary(9) == '11'\nassert     decimal_to_binary(10) == '10'\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(5) == '01'\nassert     decimal_to_binary(15) == '101'\nassert     decimal_to_binary(35) == '1011'\nassert     decimal_to_binary(86) == '1001'\nassert     decimal_to_binary(63) == '11011'\n",
        "num_ids_2": 32,
        "num_ids_4": 65
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == \"db00\"\nassert     decimal_to_binary(1) == \"db01\"\nassert     decimal_to_binary(2) == \"db10\"\nassert     decimal_to_binary(3) == \"db11\"\nassert     decimal_to_binary(4) == \"db00\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(14) == 'db101010', \"Expected 14 to be 'db101010'\"\nassert     decimal_to_binary(15) == 'db1010101', \"Expected 15 to be 'db1010101'\"\nassert     decimal_to_binary(0) == 'db0000000000000000', \"Expected 0 to be 'db0000000000000000'\"\nassert     decimal_to_binary(21) == 'db1100110', \"Expected 21 to be 'db1100110'\"\n",
        "num_ids_2": 60,
        "num_ids_4": 118
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint decimal_to_binary(decimal)\n\n'''\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(1) == '01'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\nassert     decimal_to_binary(5) == '101'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(9) == '100', f'{decimal_to_binary(9)}'\nassert     decimal_to_binary(10) == '1010', f'{decimal_to_binary(10)}'\nassert     decimal_to_binary(17) == '1110110011001', f'{decimal_to_binary(17)}'\nassert     decimal_to_binary(19) == '111110110111011', f'{decimal_to_binary(19)}'\nassert     decimal_to_binary(20) == '1111101101110111', f'{decimal_to_binary(20)}'\n",
        "num_ids_2": 59,
        "num_ids_4": 125
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_happy(\"aab\")    == True, \"is_happy function should return True\"\nassert     is_happy(\"abb\")    == False, \"is_happy function should return False\"\nassert     is_happy(\"aaa\")    == False, \"is_happy function should return False\"\nassert     is_happy(\"aaab\")    == False, \"is_happy function should return False\"\nassert     is_happy(\"aaaa\")    == False, \"is_happy function should return False\"\n",
        "num_ids_2": 45,
        "num_ids_4": 90
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_happy('aab')\nassert not is_happy('aab' * 3)\nassert is_happy('xyz')\nassert is_happy('xyx')\n",
        "num_ids_2": 13,
        "num_ids_4": 35
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(is_happy('abbc'))  # True\nprint(is_happy('baabaaa')) # False\nprint(is_happy('gogg')) # False\nprint(is_happy('abba')) # False\nprint(is_happy('abc')) # False\nprint(is_happy('')) # False\nprint(is_happy('b')) # Fals",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert is_happy('abc') == False, 'abc is not happy'\nassert is_happy('aaabcbc') == False, 'aaabcbc is not happy'\nassert is_happy('kakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakakaka",
        "num_ids_2": 20,
        "num_ids_4": 1025
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(is_happy('abcb'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_happy(\"\")\nassert not is_happy(\"a\")\nassert is_happy(\"aa\")\nassert is_happy(\"aaab\")\n",
        "num_ids_2": 11,
        "num_ids_4": 28
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_happy(\"a\") == True, \"Case 1: a\"\nassert     is_happy(\"aa\") == False, \"Case 2: aa\"\nassert     is_happy(\"aaaa\") == True, \"Case 3: aaa\"\nassert     is_happy(\"aaab\") == False, \"Case 4: aaab\"\nassert     is_happy(\"aaabc\") == False, \"Case 5: aaabc\"\n",
        "num_ids_2": 37,
        "num_ids_4": 77
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'A', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n",
        "num_ids_2": 107,
        "num_ids_4": 107
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     numerical_letter_grade([3.3, 3.0, 3.7, 2.7, 2.3]) == [\"A\", \"B\", \"C\", \"C\", \"C\"]\nassert     numerical_letter_grade([3.3, 3.0, 3.7, 2.7, 2.3, 1.7, 1.3, 1.0, 0.7, 0.0]) == [\"A\", \"B\", \"C\", \"C\", \"C\", \"D\", \"D\", \"D\", \"E\"]\n\n\n\n",
        "num_ids_2": 126,
        "num_ids_4": 126
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']\n\nprint(\"The test is PASSED\"",
        "num_ids_2": 114,
        "num_ids_4": 114
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n\n",
        "num_ids_2": 104,
        "num_ids_4": 104
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A-', 'A', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F']\nassert numerical_letter_grade([-4.0, -3.7, -3.3, -3.0, -2.7, -2.3, -2.0, -1.7, -1.3, -1.0, -0.7, -0.0, -0.0]) == ['E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E']\n",
        "num_ids_2": 230,
        "num_ids_4": 230
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([3.5, 3.3, 3.3, 3.5, 2.7, 2.7]) == [\"A+\", \"A-\", \"A+\", \"A-\", \"B+\", \"B-\"]\nassert numerical_letter_grade([4.0, 3.3, 3.3, 3.5, 2.7, 2.7]) == [\"A+\", \"A-\", \"A+\", \"A-\", \"B+\", \"B-\"]\nassert numerical_letter_grade([3.5, 3.5, 3.5, 3.5, 2.7, 2.7]) == [\"A+\", \"A+\", \"A+\", \"A+\", \"B+\", \"B-\"]\nassert numerical_letter_grade([3.5, 3.3, 3.3, 3.5, 2.7, 2.7]) == [\"A+\", \"A+\", \"A+\", \"A+\", \"B+\", \"B-\"]\nassert numerical_letter_grade([4.0, 3.3, 3.3, 3.5, 2.7, 2.7]) == [\"A+\", \"A+\", \"A+\", \"A+\", \"B+\", \"B-\"]\n",
        "num_ids_2": 117,
        "num_ids_4": 231
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"success\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_length(\"\") == False, \"Should be False\"\nassert     prime_length(\"a\") == False, \"Should be False\"\nassert     prime_length(\"a1\") == False, \"Should be False\"\nassert     prime_length(\"ab\") == False, \"Should be False\"\nassert     prime_length(\"abcd\") == False, \"Should be False\"\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_length(\"5\") == False\nassert     prime_length(\"8\") == True\nassert     prime_length(\"a\") == False\nassert     prime_length(\"abc\") == False\nassert     prime_length(\"aab\") == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert prime_length('1') == True\nassert prime_length('a') == False\nassert prime_length('a') == False",
        "num_ids_2": 13,
        "num_ids_4": 33
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_length(\"1234\") == True\nassert     prime_length(\"9\") == False\nassert     prime_length(\"1\") == True\nassert     prime_length(\"2\") == True\nassert     prime_length(\"3\") == True\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint (\"Pass\" if (3 == starts_one_ends(12)) else \"Fail\")\nprint (\"Pass\" if  (0 == starts_one_ends(0)) else \"Fail\")\nprint (\"Pass\" if (1 == starts_one_ends(1)) else \"Fail\")\nprint (\"Pass\" if (3 == starts_one_ends(3)) else \"Fail\")\nprint (\"Pass\" if (4 == starts_one_ends(4)) else \"Fail\")\nprint (\"Pass\" if (3 == starts_one_ends(3)) else \"Fail\")\nprint (\"Pass\" if (0 == starts_one_ends(10)) else \"Fail\")\nprint (\"Pass\" if (1 == starts_one_ends(11)) else \"Fail\")\nprint (\"Pass\" if (0 == starts_one_ends(9)) else \"Fail\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert starts_one_ends(1) == 1\nassert starts_one_ends(2) == 1\nassert starts_one_ends(3) == 2\nassert starts_one_ends(4) == 3\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 100\n    result = starts_one_ends(n)\n    print(result)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nstarts_one_ends(1) == 1\nassert starts_one_ends(2) == 1\nassert starts_one_ends(3) == 2\nassert starts_one_ends(4) == 2\nassert starts_one_ends(5) == 4\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     starts_one_ends(2) == 2\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(8) == 2\nassert     starts_one_ends(10) == 4\nassert     starts_one_ends(12) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     starts_one_ends(3) == 3\nassert     starts_one_ends(5) == 5\nassert     starts_one_ends(12) == 9\nassert     starts_one_ends(100) == 101\nassert     starts_one_ends(101) == 103\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solve(14) == \"1010\", \"Wrong\"\nassert     solve(15) == \"1101\", \"Wrong\"\nassert     solve(1234) == \"001110101\", \"Wrong\"\nassert     solve(10101010) == \"1101010110\", \"Wrong\"\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nimport sys\ndef test():\n    \"\"\"Test function for your code\n    \n    Variables:\n        @None\n    Output:\n        None\n    \"\"\"\n    print(\"Testing...\")\n    \n    print(\"Pass\" if (True) else \"Fail\")\n    \n    print(\"Testing\")\n    \n    print(\"Pass\" if (True) else \"Fail\")\n    \n    print(\"Testing...\")\n    \n    print(\"Pass\" if (True) else \"Fail\")\n    \n    print(\"Testing...\")\n    \n    print(\"Pass\" if (True) else \"Fail\")\n    \n    print(\"Testing...\")\n    \n    print(\"Pass\" if (True) else \"Fail\")\n    \n    print(\"Testing...\")\n    \n    print(\"Pass\" if (True) else \"Fail\")\n\nif __name__ == \"__main__\":\n    test()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve(10) == \"01\"\nassert     solve(5) == \"5\"\nassert     solve(42) == \"10\"\nassert     solve(256) == \"100\"\nassert     solve(65) == \"111\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solve(20) == 2\nassert     solve(29) == 5\nassert     solve(31) == 3\nassert     solve(32) == 2\nassert     solve(33) == 5\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert solve(62) == \"10110\"\nassert solve(63) == \"10011\"\nassert solve(64) == \"10100\"\nassert solve(65) == \"10101\"\n",
        "num_ids_2": 14,
        "num_ids_4": 36
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(15) == \"111100\"\nassert solve(0) == \"0\"\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert add([0,2,4]) == [2,4,0]\n\n\n\n\ndef sublist(lst):\n    \"\"\"Given a non-empty list of integers lst, sublist is a non-empty list of integers, and it has exactly n consecutive elements.\n    \n    Return a non-empty list of integers, which is a sublist of lst.\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(add(list1))\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef even_odd(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add(lst=[5, 2, 3, 7, 6, 1, 8, 4, ]), 4 == sum(i if i % 2 == 0 else i for i in lst)\n",
        "num_ids_2": 45,
        "num_ids_4": 45
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \\\n    \"he quick a brown fox jumps over a lazy dog\"\n\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy fox\") == \\\n    \"he quick a brown fox jumps over a lazy fox\"\n\nassert     anti_shuffle(\"the quick brown fox jumps over the lazy fox\") == \\\n    \"he quick a brown fox jumps over a lazy fox\"\n",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     anti_shuffle('abc') == 'acb'\nassert     anti_shuffle('acz') == 'azc'\nassert     anti_shuffle('a') == 'a'\nassert     anti_shuffle('ab') == 'ba'\nassert     anti_shuffle('abc') == 'acb'\n",
        "num_ids_2": 31,
        "num_ids_4": 59
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     anti_shuffle( \"man i need a taxi up to ubud\" ) == \"taxi tax up ubud i\"\nassert     anti_shuffle( \"looping is to automate a system so that systems can be automated too\" ) == \"system so that automated so a automi\"\nassert anti_shuffle( \"we need a taxi up to ubud\") == \"taxi tax up ubud\"\n\nprint (\"All tests passed\"",
        "num_ids_2": 66,
        "num_ids_4": 92
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"code\") == \"c o d e \"\nassert anti_shuffle(\"a b c\") == \"a b c\"\nassert anti_shuffle(\"\") == \"\"\n",
        "num_ids_2": 34,
        "num_ids_4": 44
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \ndef anti_shuffle2(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    pass\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     anti_shuffle('1 hello world') == '1 2 3 world', 'incorrect'\nassert     anti_shuffle('1 2 3 4 5 hello world') == '1 2 3 4 5 5 3 1 2 world', 'incorrect'\nassert     anti_shuffle('1 2 3 4 5 6 7 8 9 10 11 12') == '1 2 3 4 5 6 7 8 9 10 11 12 11 10 9 8 7 6 5 4 3 2 1', 'incorrect'\nassert     anti_shuffle('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a b c d e f g h i j k l m n o p q r s t u v w x y z z x y z p x v r z y s t l k h g f j m b a', 'incorrect'\nassert     anti_shuffle('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a b c d e f g h i j k l m n o p q r s t u v w x y z z x y z p x v r z y s t l k h g f j m b a', 'incorrect'\n",
        "num_ids_2": 56,
        "num_ids_4": 196
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     anti_shuffle(\"programming in python\") == \"gpyoprnm\"\nassert     anti_shuffle(\"games of thrones\") == \"mwvofthng\"\nassert     anti_shuffle(\"foobar\") == \"fbaro\"\nassert     anti_shuffle(\"\") == \"\"\nprint('Success: anti_shuffle')\n",
        "num_ids_2": 43,
        "num_ids_4": 71
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert get_row([[1,3,5,7],\n                [2,4,6,8],\n                [3,5,7,8]],1) == [(0,0), (1,2), (2,3)]\nassert get_row([[1,3,5,7],\n                [2,4,6,8],\n                [3,5,7,8]],2) == [(0,0), (1,2), (2,3)]\nassert get_row([[1,3,5,7],\n                [2,4,6,8],\n                [3,5,7,8]],3) == [(1,0), (2,1), (2,2)]\nassert get_row([[1,3,5,7],\n                [2,4,6,8],\n                [3,5,7,8]],4) == [(1,0), (2,1), (2,2), (2,3)]\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint (\"Solution of get_row:\")\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 2))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 8))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 0))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 4))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 3))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 8))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 8))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 1))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 4))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 2))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 3))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 5))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 6))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 7))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 8))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 0))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 2))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 3))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 4))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 5))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 6))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 7))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 8))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 0))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 2))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 3))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 4))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 5))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 6))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 7))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 8))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 0))\nprint (get_row([[2, 3], [4, 4], [6, 4], [7, 8]], 2))\nprint (get_row([[2, 3], [4, 4], [6, 4], [",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_col(lst, x):\n    \"\"\"\n    Same as get_row, but columns are sorted by decreasing order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_pos(lst, x, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, integer x, and integer y,\n    find coordinates x, y in the list,\n    and return the position.\n    Return -1 if position doesn't exist.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sort_array_by_recursion(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the array in sorted order.\n    The length of the sorted array must be equal to the length of the array.\n    You may assume no duplicate exists in the array.\n\n    Note:\n    * you can assume the length of the array is at least 1 and its sum will not exceed 1018.\n    * you cannot use the swap_function and the bubble_sort function.\n    * you can't use sort_array_by_merge_sort function.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([]) ==    []\nassert     sort_array([3]) ==    [3]\nassert     sort_array([3, 4]) ==    [4, 3]\nassert     sort_array([3, 4, 5]) ==    [3, 5, 4]\nassert     sort_array([3, 4, 5, 7, 10]) ==    [3, 4, 5, 7, 10]\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([1]) == [1]\nassert     sort_array([1,2,3]) == [1,2,3]\nassert     sort_array([1,2,3,4]) == [1,2,3,4]\nassert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n",
        "num_ids_2": 23,
        "num_ids_4": 69
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == [-1100, -1100, -1101, -9001, -10, -5, -1]\nassert     sort_array([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == [-1100, -1100, -1101, -9001, -10, -5, -1]\nassert     sort_array([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == [-1100, -1100, -1101, -9001, -10, -5, -1]\nassert     sort_array([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == [-1100, -1100, -1101, -9001, -10, -5, -1]\nassert     sort_array([-1, -5, -10, -1100, -1100, -1101, -1102, -9001]) == [-1100, -1100, -1101, -9001, -10, -5, -1]\n",
        "num_ids_2": 116,
        "num_ids_4": 232
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([-1,0,1,3,10,2,30]) == [-1,0,1,2,3,10,30]\nassert     sort_array([0,0,0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0,0,0]\nassert     sort_array([]) == []\nassert     sort_array([1]) == [1]\nassert     sort_array([1,1,1]) == [1,1,1]\n",
        "num_ids_2": 87,
        "num_ids_4": 110
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         sort_array([1, -5, 4, 2, -7, -4, -3]) == [-5, -4, -3, 1, 2, 4, 7]\nassert         sort_array([-1, 1, -2, 0, 0, -4, -4, 0, 1, 2, -2, -1]) == [-1, -2, -4, -4, -1, 0, 0, 1, 2, 0, 1, 2]\nassert         sort_array([-1, 1, -2, 0, 0, -4, -4, 0, 1, 2, -2, -1]) == [-1, -2, -4, -4, -1, 0, 0, 1, 2, 0, 1, 2]\n",
        "num_ids_2": 110,
        "num_ids_4": 177
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         sort_array([3, 1, 4, 2, 5]) == [1, 2, 3, 4, 5]\nassert         sort_array([2, 1, 4, 3, 3]) == [1, 2, 3, 4, 3]\nassert         sort_array([1, 2, 4, 3, 2]) == [1, 2, 2, 3, 4]\nassert         sort_array([3, 5, 6, 2, 4]) == [2, 3, 4, 5, 6]\nassert         sort_array([2, 1, 4, 3, 2]) == [1, 2, 2, 3, 4]\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([1,2,3,5,6]) ==    [1,2,3,5,6], f\"Wrong result!\"\nassert     sort_array([1,3,5,7]) ==    [1,3,5,7], f\"Wrong result!\"\nassert     sort_array([1,2,5,7,5,4]) ==    [1,2,5,4,5,7], f\"Wrong result!\"\nassert     sort_array([1,3,6,7,8,9]) ==    [1,3,6,7,8,9], f\"Wrong result!\"\nassert     sort_array([5,7,11,13,18]) ==    [5,7,11,13,18], f\"Wrong result!\"\n",
        "num_ids_2": 68,
        "num_ids_4": 148
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1,2,3,4])    ==    [1,2,3,4], \"Wrong result\"\nassert     sort_array([])    ==    [], \"Wrong result\"\nassert     sort_array([1,1])    ==    [1,1], \"Wrong result\"\nassert     sort_array([1,2,3,4])    ==    [1,2,3,4], \"Wrong result\"\nassert     sort_array([1,1,1])    ==    [1,1,1], \"Wrong result\"\n",
        "num_ids_2": 50,
        "num_ids_4": 106
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([4, 3, 2, 6]) == sorted([2, 3, 4, 6])\nassert     sort_array([3, 4, 2, 6]) == sorted([2, 3, 4, 6])\nassert     sort_array([1, 3, 2, 6]) == sorted([1, 2, 3, 6])\nassert     sort_array([2, 4, 6, 8]) == sorted([2, 4, 6, 8])\nassert     sort_array([1, 1, 1, 1]) == sorted([1, 1, 1, 1])\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nencrypt('') == ''\nassert \nencrypt('abcdef') == 'zcgfeba'\nassert \nencrypt('abcdefg') == 'zfgbcea'\nassert \nencrypt('abcdefgh') == 'zdghfbce'\nassert \nencrypt('abcdefghi') == 'zdghibce'\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encrypt(s1) == \"eafhxtz\"\nassert     encrypt(s2) == \"zskbwc\"\nassert     encrypt(s3) == \"yxwyfmb\"\nassert     encrypt(s4) == \"adxoqh\"\nassert     encrypt(s5) == \"klnweo\"\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \"\"\"\n    # your code here\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     encrypt(\"abcd\") == \"acbd\"\nassert     encrypt(\"aegf\") == \"fgea\"\n\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert encrypt(\"hello\") == \"qhhkps\"\nassert encrypt(\"hey\") == \"jyeoih\"\nassert encrypt(\"hi\") == \"hhkpi\"\nassert encrypt(\"four\") == \"erfgw\"\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert encrypt(\"Hello\") == \"Hlle\"\nassert encrypt(\"Your\") == \"Urr\"\nassert encrypt(\"love\") == \"llove\"\nassert encrypt(\"dog\") == \"do\"\n",
        "num_ids_2": 15,
        "num_ids_4": 37
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == 6\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == 8\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == None\n",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_smallest([1, 2, 3]) == None\nassert     next_smallest([1, 2, 3, 4]) == None\nassert     next_smallest([1, 2, 3, 4, 5]) == None\nassert     next_smallest([3, 4, 5, 1]) == 4\nassert     next_smallest([4, 5, 1, 3]) == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    next_smallest([3, 4, 5, 10, 12, 2]) == \n    2\nassert \n    next_smallest([10, 12, 2]) == \n    None\nassert \n    next_smallest([10]) == \n    None\nassert \n    next_smallest([]) == \n    None\n\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest([10, 20, 30, 40, 50, 60, 70]) == None\nassert     next_smallest([-10, 10, 20, 30, 40, 50, 60, 70]) == 20\nassert     next_smallest([10, 10, 20, 30, 40, 50, 60, 70]) == 20\nassert     next_smallest([10, 10, 10, 20, 30, 40, 50, 60, 70]) == 10\nassert     next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "num_ids_2": 51,
        "num_ids_4": 105
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest([0, 1, 2, 5, 4]) == 1, \"wrong next_smallest\"\nassert     next_smallest([0, 1, 2, 5, 4]) == 2, \"wrong next_smallest\"\nassert     next_smallest([1, 1, 1, 1, 1]) == 1, \"wrong next_smallest\"\nassert     next_smallest([1, 1, 1, 2, 2]) == 2, \"wrong next_smallest\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest([2, 4, 6, 8, 10, 12]) is 8, 'Should be 8'\nassert     next_smallest([2, 4, 6, 8, 10, 12]) is 12, 'Should be 12'\nassert     next_smallest([-3, 5, -6, -1, -7]) is -3, 'Should be -3'\nassert     next_smallest([-3, 5, -6, -1, -7]) is None, 'Should be None'\nassert     next_smallest([]) is None, 'Should be None'\n",
        "num_ids_2": 56,
        "num_ids_4": 118
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_bored('') == 0, 'No bored sentences'\nassert     is_bored('I. I am bored') == 1, 'Single bored sentence'\nassert     is_bored('I. I am bored, what happened?') == 1, 'Multiple bored sentences'\nassert     is_bored('I. I am bored, and I am now bored') == 2, 'Bored sentences with multiple conditions'\nassert     is_bored('I. I am bored. What happened?') == 2, 'Bored sentences with conditions inside'\n",
        "num_ids_2": 40,
        "num_ids_4": 97
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_bored(\"I. am bored\") == 1\nassert     is_bored(\"I am bored.\") == 2\nassert     is_bored(\"I am bored?\") == 1\nassert     is_bored(\"I am not bored!\") == 1\nassert     is_bored(\"I am not bored!?\") == 2\n",
        "num_ids_2": 29,
        "num_ids_4": 60
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_bored(\"I am Bored\") == (True, 4)\nassert     is_bored(\"I am not Bored\") == (False, 3)\nassert     is_bored(\"I am Bored. I am not Bored.\") == (True, 4)\nassert     is_bored(\"I am Bored! I am not Bored.\") == (True, 4)\nassert     is_bored(\"I am Bored. I am not Bored.!\") == (True, 4)\n",
        "num_ids_2": 39,
        "num_ids_4": 89
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    is_bored(\"I\") == 2\n    is_bored(\"I. What?\") == 2\n    is_bored(\"I! Help! I'm getting bored!\") == 2\n    is_bored(\"I. You are so boring.\") == 3\n    is_bored(\"I. I'm so boring.\") == 3\n    is_bored(\"I? I'm not even talking about boring\") == 3\n    is_bored(\"I. You are boring?\") == 3\n\ndef silly_sentence(S):\n    \"\"\"\n    Your task is to generate a silly sentence based on a given string of words.\n    If the given string is \"I\", \"You\", or \"He\", the result should be \"Me!\"\n    If the given string is \"We\", \"You\", or \"He\", the result should be \"They!\"\n    If the given string is \"They\", \"We\", or \"He\", the result should be \"Me!\"\n    If the given string is \"I\", \"We\", or \"He\", the result should be \"They!\"\n    If the given string is neither \"I\", \"We\", nor \"He\", the result should be \"I don't know!\"\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_bored('I.am.bored') == 1\nassert     is_bored('I.am.bored?') == 0\nassert     is_bored('I.am.bored!') == 2\n\nprint('All tests passed')",
        "num_ids_2": 35,
        "num_ids_4": 53
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_bored('I') == 0\nassert     is_bored('I.!') == 0\nassert     is_bored('I.!I') == 1\nassert     is_bored('I.I') == 0\nassert     is_bored('I.I..I') == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 55
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_bored('') == 0\nassert     is_bored('I') == 1\nassert     is_bored('I?.') == 1\nassert     is_bored('I!.') == 1\nassert     is_bored('I? I') == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 52
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     any_int(5, 7, 3) == True\nassert     any_int(2, 3, 5) == False\nassert     any_int(2, 5, 5) == True\nassert     any_int(2, 2, 7) == False\nassert     any_int(2, 5, 2) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nany_int(1, 2, 3) # => false\nany_int(3, 3, 3) # => true\nany_int(3, 3, 4) # => false\nany_int(3, 3, 3.0) # => false\nany_int(2.5, 5.0, 5.0) # => false\nany_int(6.0, 6.0, 6.0) # => true\nany_int(1, 1, 1) # => true\nany_int(1, 1.0, 1.0) # => true\nany_int(1.0, 1, 1.0) # => false\nany_int(1, 1.0, 1.0) # => false\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert any_int(2, 2, 2) == True\nassert any_int(2, 2, 1) == False\nassert any_int(1, 2, 2) == False\nassert any_int(1, 2, 1) == True\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert any_int(2, 3, 4) == True\nassert any_int(3, 5, 2) == False\nassert any_int(1, 2, 3) == False\nassert any_int(5, 5, 7) == True\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert any_int(10, 20, 30) == True\nassert any_int(10, 20, '30') == False\nassert any_int(10, 20, 30.5) == False\n",
        "num_ids_2": 17,
        "num_ids_4": 48
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encode('hello') == 'JH'\nassert encode('hey') == 'yH'\nassert encode('how are you?') == '?AY'\nassert encode('i\\'m fine') =='mIaM'\nassert encode('what is your name?') == 'NAMe'\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode(\"Hello, World\") == \"sHoLlO, WoRlD\"\nassert     encode(\"How are you today?\") == \"hOW aRE yOu TODAY?\"\nassert     encode(\"The quick brown fox jumps over the lazy dog\") == \"THe QURiCk broWN fOx jMps oVlAy the LAsY dOG\"\n\n\"\"\"",
        "num_ids_2": 46,
        "num_ids_4": 89
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nencode('HELLO') == \"hELLO\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the \n    letter that comes after that vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode(\"abc\") == \"cBA\"\nassert     encode(\"abc\") == \"cBA\"\nassert     encode(\"abc\") == \"cBA\"\nassert     encode(\"abc\") == \"cBA\"\nassert     encode(\"abc\") == \"cBA\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message and returns the \n    original message in the same format. \n    Assume only letters. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(skjkasdkd([]))\nassert \nprint(skjkasdkd([0]))\nassert \nprint(skjkasdkd([0, 2, 5, 7, 11, 13, 17]))\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Expected: 21\\t\", end=\"\")\nprint(\"Actual: \", end=\"\")\ntry:\n    actual = skjkasdkd([2,3,4,5])\n    assert(actual == 21), \"Wrong answer\"\nexcept AssertionError:\n    print(\"Wrong answer\")\n\nprint(\"OK\\n\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # run the \"test\" if this module is the main one\n    pass",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     skjkasdkd([10, 5, 3, 7, 2, 1]) == 17\nassert     skjkasdkd([2, 6, 9, 3, 4, 1, 5, 7, 8]) == 20\nassert     skjkasdkd([14, 11, 20, 3, 5, 1, 7, 2, 2, 6, 7]) == 27\nassert     skjkasdkd([22, 14, 7, 4, 1, 6, 3, 8, 5, 8, 9]) == 31\nassert     skjkasdkd([2, 0, 5, 9, 0, 8, 8, 1, 0, 7, 9]) == 10\n",
        "num_ids_2": 52,
        "num_ids_4": 118
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"You should print the sum of the digits of the largest prime number. \\\n\\nThe function should return the sum (as an integer) of the digits\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     skjkasdkd([1,2,3,4,5,6,7]) == 19\nassert     skjkasdkd([1,2,3,4,5,6,7,8]) == 37\nassert     skjkasdkd([1,2,3,4,5,6,7,9]) == 13\nassert     skjkasdkd([10,20,30,40,50,60,70,80,90,100]) == 362\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(",
        "num_ids_2": 52,
        "num_ids_4": 111
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_dict_case({}) == False, \"The dictionary is empty\"\nassert     check_dict_case({'Hello'}) == True, \"The dictionary contains a string\"\nassert     check_dict_case({'hello'}) == True, \"The dictionary contains a string\"\nassert     check_dict_case({'hello': \"world\"}) == True, \"The dictionary contains a string\"\nassert     check_dict_case({'Hello': \"world\"}) == False, \"The dictionary contains a string\"\n",
        "num_ids_2": 42,
        "num_ids_4": 91
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"\\ncheck_dict_case():\")\ndict1 = {1:'a', 2:'b', 3:'c', 4:'d'}\nassert not check_dict_case(dict1)\ndict2 = {}\nassert not check_dict_case(dict2)\nprint(\"Success!\")\n\ndef check_dict_case_2(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    pass\n",
        "num_ids_2": 15,
        "num_ids_4": 27
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({})     == False, \"Empty Dictionary\"\nassert     check_dict_case({'a':1, 'A':2}) == False, \"A string in upper case\"\nassert     check_dict_case({'a':1, 'A':2, 'B':2}) == False, \"A string in upper case\"\nassert     check_dict_case({'a':1, 'A':2, 'b':2}) == True, \"Two strings in lower case\"\nassert     check_dict_case({'a':1, 'A':2, 'b':2, 'Z':3}) == True, \"Two strings in upper case\"\n",
        "num_ids_2": 47,
        "num_ids_4": 115
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'HELLO': 'WORLD'}) == True\nassert     check_dict_case({'hello': 'world'}) == False\n\n",
        "num_ids_2": 33,
        "num_ids_4": 51
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         check_dict_case({})     == False\nassert         check_dict_case({'key':'value'}) == True\nassert         check_dict_case({'key1':'value1', 'key2':'value2', 'key3':'value3'}) == True\nassert         check_dict_case({'key1':'value1', 'key2':'value2'}) == False\n\n",
        "num_ids_2": 31,
        "num_ids_4": 95
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert check_dict_case({}) == False\nassert check_dict_case({\"foo\": \"bar\", \"bar\": \"foo\", \"apple\": \"banana\"}) == True\nassert check_dict_case({\"foo\": \"bar\", \"bar\": \"foo\", \"apple\": \"banana\", \"dog\": \"cat\"}) == False\n",
        "num_ids_2": 14,
        "num_ids_4": 80
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({\"hello\": \"world\"}) == False\nassert     check_dict_case({\"hello\": \"world\"}) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 48
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_dict_case({}) == True, \\\n            \"Empty dictionary returned True, should return False\"\nassert     check_dict_case({'Hello':'there'}) == False, \\\n            \"Dictionary with key 'Hello' returns False, should return True\"\nassert     check_dict_case({'HELLO':'there'}) == True, \\\n            \"Dictionary with key 'HELLO' returns True, should return False\"\n",
        "num_ids_2": 34,
        "num_ids_4": 56
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == False, \"Empty dictionary.\"\nassert     check_dict_case({\"k1\":2}) == False, \"Wrong dictionary.\"\nassert     check_dict_case({\"k1\":\"2\"}) == True, \"All keys are in lower case.\"\nassert     check_dict_case({\"k1\":\"2\", \"k2\":3}) == True, \"All keys are in upper case.\"\nassert     check_dict_case({\"k1\":\"2\", \"k2\":3, \"k3\":4}) == False, \"One key is in lower case.\"\n",
        "num_ids_2": 40,
        "num_ids_4": 99
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(count_up_to(10))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\nassert count_up_to(200) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n",
        "num_ids_2": 23,
        "num_ids_4": 91
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_up_to(5) == [2,3,5]\nassert count_up_to(100) == [2,3,5,7,11,13,17,19,23,29,31]\nassert count_up_to(1) == []\nassert count_up_to(0) == []\n",
        "num_ids_2": 21,
        "num_ids_4": 67
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_up_to(1) == []\nassert     count_up_to(2) == [2]\nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(10**2) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\nassert     count_up_to(10**3) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n",
        "num_ids_2": 28,
        "num_ids_4": 86
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19]\nassert     count_up_to(1000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nassert     count_up_to(10000) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]",
        "num_ids_2": 50,
        "num_ids_4": 178
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_up_to(0) == []\nassert count_up_to(1) == [2]\nassert count_up_to(2) == [2, 3]\nassert count_up_to(3) == [2, 3, 5]\n",
        "num_ids_2": 15,
        "num_ids_4": 45
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply(12345, 567890) == 98765\nassert     multiply(1234, 5678) == 15000\nassert     multiply(1234, 5678) == 15000\nassert     multiply(12345, 56789) == 98765\nassert     multiply(123456, 567890) == 987654\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply(1, 2) == 2\nassert    multiply(8, 9) == 45\nassert    multiply(0, 9) == 0\nassert    multiply(8, 0) == 0\nassert    multiply(0, 0) == 0\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply(1728, 907) == 3\nassert multiply(1510, 950) == 5\nassert multiply(1728, 909) == 10\n",
        "num_ids_2": 26,
        "num_ids_4": 38
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply(133, 13) == 1\nassert     multiply(13, 13) == 1\nassert     multiply(13, 13) == 1\nassert     multiply(13, 13) == 1\nassert     multiply(13, 13) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert multiply(10, 20) == 10 * 10 + 20 * 20\nassert multiply(12, 5) == 12 * 5 + 5 * 5\nassert multiply(20, 5) == 20 * 5 + 5 * 5\n\ndef split(s):\n    \"\"\"Complete the function that takes a string s and returns\n    a list of its substrings.\n    Assume the input is always valid.\n    \"\"\"\n    pass\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply(9999, 55) ==     332727\nassert     multiply(9999, 99) ==     332727\nassert     multiply(9999, 100) ==     332727\nassert     multiply(9999, 999) ==     332727\nassert     multiply(9999, 1000) ==     332727\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(multiply(1, 10))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert multiply(666, 333) == 966\nassert multiply(666, 666) == 999\nassert multiply(666, 666) == 999\nassert multiply(666, 666) == 999\n",
        "num_ids_2": 14,
        "num_ids_4": 34
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_upper('') == 0\nassert     count_upper('a') == 0\nassert     count_upper('ab') == 1\nassert     count_upper('cba') == 1\nassert     count_upper('aeiou') == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_upper(\"ABdACABaa\") == 4\nassert count_upper(\"ABdACABaa\") == 4\n\nassert count_upper(\"abcd\") == 0\nassert count_upper(\"ABCD\") == 1\n",
        "num_ids_2": 29,
        "num_ids_4": 51
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_upper(\"\") == 0\nassert     count_upper(\"a\") == 0\nassert     count_upper(\"AA\") == 2\nassert     count_upper(\"ab\") == 0\nassert     count_upper(\"AAa\") == 1\n",
        "num_ids_2": 21,
        "num_ids_4": 43
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_upper(\"AAABC\") == 0\nassert     count_upper(\"ABCDE\") == 0\nassert     count_upper(\"ABCAA\") == 3\nassert     count_upper(\"ABCAAB\") == 3\nassert     count_upper(\"ABCDAA\") == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 49
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nprint(count_upper(\"ABCD\")) == 1\nprint(count_upper(\"AABBCCDD\")) == 2\nprint(count_upper(\"AaBCd\")) == 0\nprint(count_upper(\"ABCDAABCD\")) == 3\nprint(count_upper(\"AABBBCDD\")) == 2\nprint(count_upper(\"ABCDDAABCDD\")) == 4",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_upper('LOL') == 0\nassert     count_upper('H') == 1\nassert     count_upper('g') == 0\nassert     count_upper('A') == 1\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_upper('am') == 0\nassert     count_upper('aE') == 1\nassert     count_upper('aeE') == 2\nassert     count_upper('aeaeE') == 3\nassert     count_upper('aeaaeE') == 3\n",
        "num_ids_2": 23,
        "num_ids_4": 48
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_upper('ab') == 0\nassert     count_upper('aba') == 2\nassert     count_upper('abaab') == 3\nassert     count_upper('haha') == 0\nassert     count_upper('h') == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 46
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    s = input()\n    count = count_upper(s)\n    print(count)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('Testing...')\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-1.8\") == -2\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nclosest_integer(\"14.5\") == 15\nclosest_integer(\"14.2\") == 15\nclosest_integer(\"-14.5\") == -15\nclosest_integer(\"14.1\") == 15",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\") == 15, \"closest_integer incorrect\"\nassert     closest_integer(\"-14.5\") == -15, \"closest_integer incorrect\"\nassert     closest_integer(\"14.5\") == 14, \"closest_integer incorrect\"\nassert     closest_integer(\"-14.5\") == -14, \"closest_integer incorrect\"\nassert     closest_integer(\"14.4\") == 14, \"closest_integer incorrect\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef closest_integer2(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Test passed!\")\nprint(\"\\n\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-42.5\") == -42\nassert     closest_integer(\"6.5\") == 6\nassert     closest_integer(\"5.5\") == 5\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.9\") == 14\nassert     closest_integer(\"-14.9\") == -14\nassert     closest_integer(\"14\") == 14\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(1)     ==  [1]\nassert     make_a_pile(2)     ==  [1,1]\nassert     make_a_pile(3)     ==  [1,2,1]\nassert     make_a_pile(4)     ==  [1,3,3,1]\nassert     make_a_pile(5)     ==  [1,4,6,4,1]\n",
        "num_ids_2": 38,
        "num_ids_4": 84
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [2]\nassert     make_a_pile(4) == [4]\nassert     make_a_pile(5) == [4]\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(5) == [1, 2, 1, 1, 1]\nassert     make_a_pile(10) == [1, 3, 2, 1, 2, 1, 1, 1, 1, 1]\nassert     make_a_pile(13) == [1, 4, 3, 2, 1, 2, 1, 1, 1, 1, 1, 1]\nassert     make_a_pile(21) == [1, 5, 4, 3, 2, 1, 2, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 42,
        "num_ids_4": 114
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(1) == [1, 0]\nassert     make_a_pile(0) == [1, 0]\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_a_pile(3) ==  [1, 1, 1]\nassert     make_a_pile(4) ==  [1, 1, 1, 1]\nassert     make_a_pile(5) ==  [1, 1, 1, 1, 1]\n",
        "num_ids_2": 44,
        "num_ids_4": 69
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2, 1]\nassert     make_a_pile(3) == [2, 1, 1]\nassert     make_a_pile(4) == [2, 1, 1, 1]\nassert     make_a_pile(5) == [2, 1, 1, 1, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     make_a_pile(1) ==     [1]\nassert     make_a_pile(2) ==     [1, 1]\nassert     make_a_pile(3) ==     [1, 1, 1]\nassert     make_a_pile(4) ==     [1, 1, 1, 1]\nassert     make_a_pile(5) ==     [1, 1, 1, 1, 1]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_distinct_subsequences(s):\n    \"\"\"\n    Given a string s, return the number of distinct subsequences.\n    A subsequence is a string that can be derived from the original string by deleting some\n    or no characters without changing the remaining characters' relative order.\n    For example, \"abc\" has 5 distinct subsequences: \"a\", \"b\", \"c\", \"ab\", \"bc\".\n    A subsequence cannot be empty, and in this case there is only one subsequence:\n    \"abc\".\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_string(\"hello, world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello, world, my name\") == [\"hello\", \"world\", \"my name\"]\nassert     words_string(\"hello, world, my name, and hello\") == [\"hello\", \"world\", \"my name\", \"and\", \"hello\"]\nassert words_string(\"hello, world, my name, and hello, great!\") == [\"hello\", \"world\", \"my name\", \"and\", \"hello\", \"great!\"]\nassert words_string(\"hello, world, my name and hello, great!\") == [\"hello\", \"world\", \"my name\", \"and\", \"hello\", \"great!\"]\n",
        "num_ids_2": 43,
        "num_ids_4": 117
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert words_string('a') == ['a']\nassert words_string('a,b') == ['a', 'b']\nassert words_string('a,b,c') == ['a', 'b', 'c']\nassert words_string('a,b,c,') == ['a', 'b', 'c']\n",
        "num_ids_2": 15,
        "num_ids_4": 54
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_string('We are the so-called \"Vikings\"'\n                        ' from the north.') == ['We', 'are', 'the','so', 'called', '\"Vikings\"', 'from', 'the', 'north.'], \\\n        'Check the correctness of words_string'\nassert words_string('We are the so-called \"Vikings\" from the north.') == ['We', 'are', 'the','so', 'called', '\"Vikings\"', 'from', 'the', 'north.'], \\\n        'Check the correctness of words_string'\nassert words_string('We were so-called \"Vikings\" from the north.') == ['We', 'were','so', 'called', '\"Vikings\"', 'from', 'the', 'north.'], \\\n        'Check the correctness of words_string'\nassert words_string('We were the so-called \"Vikings\" from the north.') == ['We', 'were', 'the','so', 'called', '\"Vikings\"', 'from', 'the', 'north.'], \\\n        'Check the correctness of words_string'\nassert words_string('We were the so-called \"vikings\" from the north.') == ['We', 'were', 'the','so', 'called', '\"vikings\"', 'from', 'the', 'north.'], \\\n        'Check the correctness of words_string'\n",
        "num_ids_2": 73,
        "num_ids_4": 179
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_string(\"the,quick,brown,fox\") == [\"the\", \"quick\", \"brown\", \"fox\"], \"First\"\nassert words_string(\"the,quick,brown,fox,jumped\") == [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\"], \"Second\"\nassert words_string(\"the,quick,brown,fox,jumped,over,the,lazy,fox\") == [\"the\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"fox\"], \"Third\"\nassert words_string(\"\") == [], \"Fourth\"\nassert words_string(\"the,quick,brown,fox\") == [\"the\", \"quick\", \"brown\", \"fox\"], \"Fifth",
        "num_ids_2": 68,
        "num_ids_4": 140
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_string(\"My name is Mike, and I am 23 years old.\") == [\"My\", \"name\", \"is\", \"Mike\", \"and\", \"I\", \"am\", \"23\", \"years\", \"old.\"]\nassert     words_string(\"This,is,an,iterable\") == [\"This\", \"is\", \"an\", \"iterable\"]\nassert     words_string(\"The,quick,brown,fox,jumps,over,the,lazy,dog.\") == [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog.\"]\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \"\"\"\n    pass\n",
        "num_ids_2": 81,
        "num_ids_4": 139
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_string('Hello, world') == ['Hello', 'world']\nassert     words_string('one,two,three') == ['one', 'two', 'three']\nassert     words_string('two,four,five,six') == ['two', 'four', 'five','six']\nassert     words_string('five,five,five,six') == ['five', 'five', 'five','six']\n",
        "num_ids_2": 41,
        "num_ids_4": 95
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_string('hello, world') == ['hello', 'world']\nassert     words_string('hello, world, hello, world') == ['hello', 'world', 'hello', 'world']\nassert     words_string('hello, world, and hello, world') == ['hello', 'world', 'and', 'hello', 'world']\nassert     words_string('hello, and hello, world') == ['hello', 'and', 'hello', 'world']\nassert     words_string('hello, and hello') == ['hello', 'and', 'hello']\n",
        "num_ids_2": 46,
        "num_ids_4": 105
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     choose_num(1, 10) == 2\nassert     choose_num(2, 11) == -1\nassert     choose_num(3, 4) == -1\nassert     choose_num(10, 30) == 10\nassert     choose_num(1, 99999) == 1\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     choose_num(4, 5) == 6\nassert     choose_num(3, 10) == -1\nassert     choose_num(1, 9) == -1\n\ndef check_pwd_score(pwd):\n    \"\"\"This function takes a password pwd as input and returns the number\n    of digits in pwd, the number of uppercase characters in pwd, the number\n    of lowercase characters in pwd, and the number of special characters in\n    pwd.\n    \"\"\"\n    pass\n",
        "num_ids_2": 29,
        "num_ids_4": 44
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     choose_num(1, 3) == 2\nassert     choose_num(1, 4) == -1\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert choose_num(1, 2) == -1\nassert choose_num(3, 4) == 2\nassert choose_num(5, 6) == -1\n\nprint('correct')\nprint('--------------------------------------------')\n",
        "num_ids_2": 16,
        "num_ids_4": 41
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef choose_num2(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     choose_num(1, 20) == 20\nassert     choose_num(10, 40) == 50\nassert     choose_num(-10, 10) == -5\n\ndef choose_num_2(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 28,
        "num_ids_4": 43
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     choose_num(3, 6) == 4\nassert     choose_num(2, 5) == -1\nassert     choose_num(2, 2) == 2\nassert     choose_num(2, 3) == 2\nassert     choose_num(2, 4) == 2\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert choose_num(2, 5) == 5\nassert choose_num(3, 5) == -1\nassert choose_num(4, 5) == -1\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert choose_num(2, 3) == 2\nassert choose_num(2, 4) == -1\nassert choose_num(1, 5) == -1\nassert choose_num(6, 7) == 6\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    (choose_num(10, 15) == 13)\n    (choose_num(0, 8) == -1)\n    (choose_num(5, 10) == -1)\n    (choose_num(10, 100) == 35)\n    (choose_num(0, 0) == -1)\n    (choose_num(-10, -1) == -1)\n    (choose_num(-1, 100) == -1)\n    (choose_num(1, 100) == -1)\n    (choose_num(-1, 2) == -1)\n    (choose_num(2, 2) == 2)\n    (choose_num(7, 7) == 7)\n    \nprint(\"All tests passed\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nrounded_avg(3,4) == 4\nrounded_avg(3,5) == 4\nrounded_avg(10,20) == 16\nrounded_avg(20,30) == 23\n\nrounded_avg(1000000,1000000) == 1000000\nrounded_avg(1000000,1000000000) == 1000000\nrounded_avg(1000000,100000000) == 1000000\nrounded_avg(1000000,100000000000) == 1000000\nrounded_avg(1000000,1000000000000) == 1000000\nrounded_avg(1000000,100000000000000) == 1000000\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rounded_avg(1, 3)     ==  2\nassert     rounded_avg(2, 3)     ==  2\nassert     rounded_avg(2, 3)     ==  2\nassert     rounded_avg(2, 3)     ==  2\nassert     rounded_avg(3, 4)     ==  2\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nrounded_avg(1,10) == 5\nassert rounded_avg(10,1) == 0\nassert rounded_avg(5,5) == 5\nassert rounded_avg(1,1) == 1\nassert rounded_avg(3,2) == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    rounded_avg(1,3) == 2\nassert \n    rounded_avg(2,3) == 2\nassert \n    rounded_avg(1,3) == 2\nassert \n    rounded_avg(2,3) == 2\nassert \n    rounded_avg(1,3) == 1\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef rounded_avg2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 3)) # 2\n    print(rounded_avg(1, 4)) # 2\n    print(rounded_avg(1, 5)) # 1\n    print(rounded_avg(1, 6)) # -1\n    print(rounded_avg(2, 1)) # 0\n    print(rounded_avg(2, 2)) # 1\n    print(rounded_avg(3, 4)) # 1\n    print(rounded_avg(4, 5)) # 1\n    print(rounded_avg(5, 6)) # 0\n    print(rounded_avg(7, 8)) # -1\n    print(rounded_avg(0, 0)) # 0\n    print(rounded_avg(0, 1)) # -1\n    print(rounded_avg(3, 5)) # 2\n    print(rounded_avg(4, 4)) # 2\n    print(rounded_avg(4, 5)) # 2\n    print(rounded_avg(6, 6)) # 2\n    print(rounded_avg(9, 11)) # 5\n    print(rounded_avg(10, 10)) # 2\n    print(rounded_avg(10, 11)) # 5\n    print(rounded_avg(11, 11)) # 5\n    print(rounded_avg(11, 12)) # -1\n    print(rounded_avg(12, 12)) # 2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rounded_avg(2, 10) == 2.5\nassert     rounded_avg(2, 5) == 3\nassert     rounded_avg(4, 5) == 4\nassert     rounded_avg(4, 3) == 3\nassert     rounded_avg(3, 4) == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrounded_avg(3, 10) == 5\nassert \nrounded_avg(2, 10) == 5\nassert rounded_avg(5, 10) == 6\nassert \nrounded_avg(5, 5) == 5\nassert \nrounded_avg(5, 2) == 4\n",
        "num_ids_2": 6,
        "num_ids_4": 22
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nrounded_avg(1,2) == 1\nassert \nrounded_avg(2,3) == 1\nassert \nrounded_avg(3,3) == 1\nassert \nrounded_avg(4,4) == 1\nassert \nrounded_avg(5,5) == 1\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_digits(\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert unique_digits(\n    [1, 23, 456, 789, 3, 4, 5, 6, 7, 8, 9, 10]\n) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nassert unique_digits(\n    [1, 1, 4, 4, 5, 6, 7, 8, 9, 10]\n) == [1, 4, 5, 6, 7, 8, 9, 10]\n",
        "num_ids_2": 15,
        "num_ids_4": 22
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_digits([2,3,4]) == [[2,3,4], [2,4]] \nassert     unique_digits([2,3,4,4]) == [[2,3,4], [2,4]]\nassert     unique_digits([2,3,4,5]) == [[2,3,4,5]]\nassert     unique_digits([2,3,4,5,5]) == [[2,3,4,5]]\nassert     unique_digits([2,3,4,5,5,5]) == [[2,3,4,5]]\n",
        "num_ids_2": 57,
        "num_ids_4": 111
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    unique_digits(\n        [123,11,12,123,12,123,123,12]\n    ) == [123,12]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_digits([3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9]\n",
        "num_ids_2": 44,
        "num_ids_4": 44
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9]) == sorted([1,2,3,4,5,7,8,9])\nassert unique_digits([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]) == sorted([1,2,3,4,5,7,8,9])\nassert unique_digits([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9]) == sorted([1,2,3,4,5,7,8,9])\nassert unique_digits([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]) == sorted([1,2,3,4,5,7,8,9])\n\nif __name__ == '__main__':\n    # Test unique_digits\n    ",
        "num_ids_2": 107,
        "num_ids_4": 271
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_digits([5,1,8,6,3]) == [1,3,5,8], \"Wrong\"\nassert     unique_digits([5,1,8,6,3]) == [1,3,5,8], \"Wrong\"\nassert     unique_digits([5,1,8,6,3]) == [1,3,5,8], \"Wrong\"\nassert     unique_digits([5,1,8,6,3]) == [1,3,5,8], \"Wrong\"\nassert     unique_digits([5,1,8,6,3]) == [1,3,5,8], \"Wrong\"\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_digits([]) == []\nassert     unique_digits([1]) == [1]\nassert     unique_digits([2,3,4]) == [2,3,4]\nassert     unique_digits([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     unique_digits([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]) == [1,2,3,4,5,6,7,8,9]\n",
        "num_ids_2": 25,
        "num_ids_4": 97
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert unique_digits([2,5,2,4,5]) == [2,4]\nassert unique_digits([2,2,5,5]) == []\nassert unique_digits([5,5,5]) == [5]\nassert unique_digits([5,5,5,5]) == [5]\n",
        "num_ids_2": 26,
        "num_ids_4": 60
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     by_length([3,2,2,1,3,6,8]) == \"Three Seven Three Six One One Two Two\"\nassert     by_length([3,2,1,2,1,5,7,8]) == \"Three Seven Three One One Two Two One Five Six\"\nassert     by_length([3,2,1,2,1,5,7,8]) == \"Three Seven Three One One Two Two One Five Six\"\nassert     by_length([3,2,1,2,1,5,7,8]) == \"Three Seven Three One One Two Two One Five Six\"\nassert     by_length([3,2,1,2,1,5,7,8]) == \"Three Seven Three One One Two Two One Five Six\"\n",
        "num_ids_2": 68,
        "num_ids_4": 140
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint (\"TEST 6\")\narr = [1,2,3,4,5,6,7,8,9]\nby_length(arr) == \"SevenFiveOneTwoSixThreeFourEightNine\"\nprint (\"TEST 7\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 8\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 9\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 10\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 11\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 12\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 13\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 14\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 15\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 16\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 17\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 18\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 19\")\narr = [10,11,12,13,14,15,16,17,18,19,20]\nby_length(arr) == \"TwentyNineOneTwentyOneTwelveThirtyTwoFourThirteenFourFIFteenSixFIFTYSixSeventyEIGHTeenNINETEN\"\nprint (\"TEST 20\")\narr = [10,1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert by_length([5, 4, 3, 2, 1, 2, 3, 4, 5]) == [1, 2, 2, 3, 3, 4, 4, 5, 5]\nassert by_length([5, 4, 3, 2, 1, 2, 3, 4, 5, 6]) == [1, 2, 2, 3, 3, 4, 4, 5, 5, 6]\nassert by_length([5, 4, 3, 2, 1, 2, 3, 4, 5, 9]) == [9, 2, 2, 3, 3, 4, 4, 5, 5, 1]\nassert by_length([1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 89,
        "num_ids_4": 185
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     by_length([]), \"Empty array\"\nassert     by_length([1, 2, 3]), \"Non-integer elements\"\nassert     by_length([1, 2, 3, 4]), \"Zero and negative numbers\"\nassert     by_length([0, 2, 4]), \"Negative number but greater than 9\"\nassert     by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]), \"Positive number but less than 10\"\n",
        "num_ids_2": 32,
        "num_ids_4": 75
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    a = [1,2,3,4,5,6,7,8,9]\n    print(by_length(a))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef by_length_part_one(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('The output of f(5) is {0}'.format(f(5)))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert f(3) == [6,24,120]\nassert f(5) == [120,60,30,15,10]\nassert f(8) == [720,120,60,30,15,10,5,4]\n\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of all the elements from\n    index 1 to i (1 + 2 + 3... + i).\n    i starts from 1.\n    \"\"\"\n    pass\n",
        "num_ids_2": 17,
        "num_ids_4": 59
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum(f(n) for n in range(1, 10)) == 3628800\n\n",
        "num_ids_2": 24,
        "num_ids_4": 24
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     f(5) ==    [1, 1, 2, 6, 24], 'f'\nassert     f(3) ==    [1, 2, 6], 'f'\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of the numbers from 1 to i.\n    i starts from 1.\n    The sum of numbers from 1 to i is equal to i + 1 + 2 +... + i.\n    \"\"\"\n    pass\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nf(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"The list f should be: 10,2,3,4,5,6,7,8,9,10\"\nassert \nf(0) == [1], \"The list f should be: 1\"\nassert \nf(1) == [1,1], \"The list f should be: 1,1\"\nassert \nf(2) == [1,2,1], \"The list f should be: 1,2,1\"\nassert \nf(3) == [1,3,3,1], \"The list f should be: 1,3,3,1\"\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     f(1) == [1]\nassert     f(2) == [1,2]\nassert     f(3) == [1,2,6]\nassert     f(4) == [1,2,3,4]\nassert     f(5) == [1,2,3,4,10]\n",
        "num_ids_2": 24,
        "num_ids_4": 56
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert even_odd_palindrome(11) == (8, 2)\nassert even_odd_palindrome(10) == (4, 2)\n\nassert even_odd_palindrome(100) == (34, 16)\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(10) == (5, 1), \"Should be (5, 1)\"\nassert     even_odd_palindrome(8) == (5, 2), \"Should be (5, 2)\"\nassert     even_odd_palindrome(17) == (13, 2), \"Should be (13, 2)\"\nassert     even_odd_palindrome(12) == (11, 2), \"Should be (11, 2)\"\nassert     even_odd_palindrome(15) == (6, 1), \"Should be (6, 1)\"\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    even_odd_palindrome(2) == (0, 0)\n    even_odd_palindrome(4) == (1, 1)\n    even_odd_palindrome(5) == (0, 1)\n    even_odd_palindrome(6) == (1, 0)\n    even_odd_palindrome(7) == (0, 0)\n    even_odd_palindrome(8) == (1, 1)\n    even_odd_palindrome(9) == (1, 0)\n    even_odd_palindrome(10) == (0, 1)\n    even_odd_palindrome(11) == (1, 0)\n    even_odd_palindrome(12) == (0, 2)\n    even_odd_palindrome(13) == (1, 0)\n    even_odd_palindrome(14) == (0, 1)\n    even_odd_palindrome(15) == (1, 0)\n    even_odd_palindrome(16) == (0, 2)\n    even_odd_palindrome(17) == (1, 0)\n    even_odd_palindrome(18) == (0, 2)\n    even_odd_palindrome(19) == (0, 1)\n    even_odd_palindrome(20) == (1, 0)\n    even_odd_palindrome(21) == (0, 2)\n    even_odd_palindrome(22) == (1, 0)\n    even_odd_palindrome(23) == (0, 2)\n    even_odd_palindrome(24) == (1, 0)\n    even_odd_palindrome(25) == (0, 2)\n    even_odd_palindrome(26) == (1, 0)\n    even_odd_palindrome(27) == (0, 2)\n    even_odd_palindrome(28) == (1, 0)\n    even_odd_palindrome(29) == (0, 2)\n    even_odd_palindrome(30) == (1, 0)\n    even_odd_palindrome(31) == (0, 1)\n    even_odd_palindrome(32) == (1, 0)\n    even_odd_palindrome(33) == (0, 1)\n    even_odd_palindrome(34) == (1, 0)\n    even_odd_palindrome(35) == (0, 1)\n    even_odd_palindrome(36) == (1, 0)\n    even_odd_palindrome(37) == (0, 2)\n    even_odd_palindrome(38) == (1, 0)\n    even_odd_palindrome(39) == (0, 1)\n    even_odd_palindrome(40) == (1, 0)\n    even_odd_palindrome(41) == (0, 1)\n    even_odd_palindrome(42) == (1, 0)\n    even_odd_palindrome(43) == (0, 2)\n    even_odd_palindrome(44) == (1, 0)\n    even_odd_palindrome(45) == (0, 1)\n    even_odd_palindrome(46) == (1, 0)\n    even_odd_palindrome(47) == (0, 2)\n    even_odd_palindrome(48) == (1, 0)\n    even_odd_palindrome(49) == (0, 1)\n    even_odd_palindrome(50) == (1, 0)\n    even_odd_palindrome(51) == (0, 1)\n    even_odd_palindrome(52) == (1, 0)\n    even_odd_palindrome(53) == (0, 2)\n    even_odd_palindrome(54) == (1, 0)\n    even_odd_palindrome(55) == (0, 1)\n    even_odd_palindrome(56) == (1, 0)\n    even_odd_palindrome(57) == (0, 1)\n    even_odd_palindrome(58) == (1, 0)\n    even_odd_palindrome(59) == (0",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_odd_palindrome(5) == (0, 1)\nassert even_odd_palindrome(7) == (1, 2)\nassert even_odd_palindrome(11) == (1, 4)\nassert even_odd_palindrome(20) == (0, 1)\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(5) == (0, 2)\nassert even_odd_palindrome(10) == (2, 8)\nassert even_odd_palindrome(1) == (1, 0)\nassert even_odd_palindrome(7) == (2, 4)\nassert even_odd_palindrome(3) == (0, 0)\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_nums([-5, -2, -3, -1, -4, 0, 1, 2, 3]) == 2\nassert     count_nums([-5, -2, -3, -1, -4, 0, 1, 2, -1]) == 1\nassert     count_nums([-5, -2, -3, -1, -4, 0, 1, 2, -2]) == 3\nassert count_nums([-5, -2, -3, -1, -4, 0, 1, 2, 3]) == 0\nassert count_nums([-5, -2, -3, -1, -4, 0, 1, 2, 3, -3]) == 3\n",
        "num_ids_2": 67,
        "num_ids_4": 133
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(count_nums([-23, -1, -123]))\n\nprint(count_nums([-3, -1, -3, 4, -9, 8, -90, -15, -3, -1]))\n\nprint(count_nums([3, 12, -31, -23]))\n\nprint(count_nums([1, 0, -1, -1]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_nums([]) == 0, \"Empty array\"\nassert     count_nums([1]) == 0, \"One element array\"\nassert     count_nums([1,2]) == 0, \"Two elements array\"\nassert     count_nums([-1,-2]) == 1, \"One negative element array\"\nassert     count_nums([-1,-2,-3]) == 1, \"Two negative elements array\"\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_nums([0, 0, -1]) == 2\nassert count_nums([1, 2, 3]) == 3\nassert count_nums([2, 3, 6, 7]) == 3\nassert count_nums([1, 2, 3, 4, 5]) == 5\nassert count_nums([1, 2, -3, 4, 5]) == 3\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ncount_nums([1, -2, -1, -10, 3, -20]) == 2\ncount_nums([5, -10, -1, -10, -2]) == 1\ncount_nums([10, -10, -1, -10, -2]) == 3",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1,2,3]) == 1\nassert     count_nums([-1,2,3]) == 1\nassert     count_nums([-1,-2,-3]) == 1\nassert     count_nums([-1,-2,-3,-4]) == 1\n",
        "num_ids_2": 27,
        "num_ids_4": 61
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(count_nums([1,2,3,4,-9,-1,-12])) == 1\nassert count_nums([-1,2,-3,4,-9,-1,-12] == 3\nprint(\"You're all set!\"",
        "num_ids_2": 27,
        "num_ids_4": 27
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_nums(arr_1) == 0, \"Example 1\"\nassert     count_nums(arr_2) == 1, \"Example 2\"\nassert     count_nums(arr_3) == 2, \"Example 3\"\nassert count_nums(arr_4) == 1, \"Example 4\"\nassert count_nums(arr_5) == 0, \"Example 5\"\n",
        "num_ids_2": 38,
        "num_ids_4": 75
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test your implementation here\n    arr1 = [1, 5, 9, 10, 15]\n    arr2 = []\n    arr3 = [1, 2, 5, 7]\n\n    print(f\"Expected result: True, Actual result: {move_one_ball(arr1)}\")\n    print(f\"Expected result: False, Actual result: {move_one_ball(arr2)}\")\n    print(f\"Expected result: True, Actual result: {move_one_ball(arr3)}\")\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef move_one_ball_dp(arr):\n    \"\"\"Given the array of integers arr[1], arr[2],..., arr[N], determine if it is\n    possible to get the array sorted in non-decreasing order.\n\n    Note that this is NP-hard.\n\n    You can perform the above operation any number of times.\n\n    Time complexity of this algorithm is O(N).\n    Space complexity is O(N).\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [4,3,2,1]\n    #arr = []\n    assert move_one_ball(arr) == True\n    arr = [1,2]\n    assert move_one_ball(arr) == False\n    arr = [2,1,2,3,4]\n    assert move_one_ball(arr) == True\n    arr = [2,1]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_one_ball([0,2,3,4,5,6,7,8,9,10]) == True\nassert     move_one_ball([0,2,3,4,5,6,7,8,9,10,1]) == False\nassert     move_one_ball([0,2,3,4,5,6,7,8,9,10,1,2]) == True\nassert     move_one_ball([0,2,3,4,5,6,7,8,9,10,1,2,3]) == True\nassert     move_one_ball([0,2,3,4,5,6,7,8,9,10,1,2,3,4]) == True\n",
        "num_ids_2": 64,
        "num_ids_4": 136
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\narr = [1,2,3]\nassert move_one_ball(arr) == True\n\narr = []\nassert move_one_ball(arr) == True\n",
        "num_ids_2": 15,
        "num_ids_4": 27
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 3], [2, 3, 1]) == \"YES\", \"Error!\"\nassert     exchange([2, 3, 1], [1, 2, 3]) == \"YES\", \"Error!\"\nassert     exchange([3, 2, 1], [1, 2, 3]) == \"YES\", \"Error!\"\nassert     exchange([1, 2, 3], [3, 2, 1]) == \"YES\", \"Error!\"\nassert     exchange([2, 3, 1, 5], [1, 2, 3]) == \"YES\", \"Error!\"\n",
        "num_ids_2": 52,
        "num_ids_4": 104
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    exchange([1,2,3,4,5,6], \n            [1,3,5,7,9,10]) == \"YES\"\n    exchange([2,4,6,8], \n            [1,3,5,7,9,10]) == \"YES\"\n    exchange([2,4,6,8], \n            [1,3,5,7]) == \"NO\"\n    exchange([1,2,3,4,5,6], \n            [1,2,3,4,5,6]) == \"NO\"\n    exchange([1,2,3,4,5], \n            [1,2,3,4,5]) == \"YES\"\n\ndef main():\n    \n    # input_n = input()\n    # input_n = int(input_n)\n    input_n = 3\n    lst1 = []\n    lst2 = []\n    for i in range(input_n):\n        ele = int(input())\n        if ele % 2 == 0:\n            lst1.append(ele)\n        else:\n            lst2.append(ele)\n    res = exchange(lst1, lst2)\n    print(res)\n\nif __name__ == '__main__':\n    main()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     exchange([1,2,3,4,5,6], [1,2,3,4,5,6]) == \"NO\"\nassert     exchange([1,2,3,4,5,6], [1,2,3,4,6,5]) == \"NO\"\nassert     exchange([1,2,3,4,5,6], [1,2,3,4,6,5]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [2,3,4,6,5,1]) == \"YES\"\nassert     exchange([1,2,3,4,5,6], [2,3,4,5,6,1]) == \"YES\"\n",
        "num_ids_2": 70,
        "num_ids_4": 140
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     exchange(list(range(5)), list(range(5)))     == \"NO\"\nassert     exchange(list(range(5)), list(range(5, -1, -1))) == \"YES\"\nassert     exchange(list(range(1, 7)), list(range(2, 8, 2))) == \"YES\"\nassert     exchange(list(range(3)), list(range(3))) == \"NO\"\nassert     exchange(list(range(5)), list(range(5, -1, -1))) == \"YES\"\n",
        "num_ids_2": 51,
        "num_ids_4": 101
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     exchange([],    []) == \"YES\", \"Your function should return 'YES' when exchange is possible.\"\nassert     exchange([1, 2, 3],    []) == \"NO\", \"Your function should return 'NO' when exchange is not possible.\"\nassert     exchange([2, 3, 4],    [1, 2]) == \"YES\", \"Your function should return 'YES' when exchange is possible.\"\nassert     exchange([2, 3, 4],    [2, 1]) == \"NO\", \"Your function should return 'NO' when exchange is not possible.\"\nassert     exchange([],    [1, 2]) == \"NO\", \"Your function should return 'NO' when exchange is not possible.\"\n",
        "num_ids_2": 60,
        "num_ids_4": 131
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     exchange([2, 4, 3, 6, 5], [2, 4, 3, 5, 6]) == \"NO\"\nassert     exchange([2, 3, 3, 4, 5, 5], [3, 4, 3, 5, 5]) == \"YES\"\nassert     exchange([0, 0, 0, 0], [0, 1]) == \"YES\"\n",
        "num_ids_2": 64,
        "num_ids_4": 87
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     exchange([1, 2, 3, 4], [2, 4, 1, 3]) == \"YES\", \"You are correct\"\nassert     exchange([2, 2, 2], [2, 4, 2]) == \"NO\", \"You are correct\"\n\n",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram(\"abcabcabcabc\") == {'a': 3, 'b': 2, 'c': 3}\nassert     histogram(\"abcabcabcabcabc\") == {'a': 3, 'b': 2, 'c': 3}\nassert     histogram(\"xy\") == {}\nassert     histogram(\"\") == {}\nassert     histogram(\"abcabcabcabc\") == {'a': 3, 'b': 2, 'c': 3}",
        "num_ids_2": 57,
        "num_ids_4": 76
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nif __name__ == \"__main__\":\n    histogram = histogram\n    print(histogram(\"hello world\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     histogram('defefefe') == {'e': 3, 'f': 3, 'd': 2, 'e': 2}\nassert histogram('aaabbbccc') == {'a': 2, 'b': 3, 'c': 3, 'a': 1}\nassert histogram('abc') == {'a': 1, 'b': 1, 'c': 1}\nassert histogram('aaaabbbbc') == {'a': 2, 'b': 3, 'c': 3, 'a': 1}\nassert histogram('abcabc') == {'a': 3, 'b': 2, 'c': 2}\n",
        "num_ids_2": 65,
        "num_ids_4": 121
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ('a', 1) == histogram('a')\nassert     ('z', 2) == histogram('z')\nassert     ('b', 1) == histogram('bb')\nassert     ('c', 2) == histogram('bbb ccc')\nassert     ('d', 2) == histogram('bddd dddd')\n",
        "num_ids_2": 28,
        "num_ids_4": 59
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     histogram('hello world') == {'o': 3, 'w': 2, 'h': 1, 'l': 1}\nassert     histogram('hello world') == {'o': 1, 'w': 1, 'h': 1, 'l': 1}\nassert     histogram('hello world') == {'o': 1, 'w': 1, 'h': 1, 'l': 1}\nassert     histogram('hello world') == {'o': 1, 'w': 1, 'h': 1, 'l': 1}\nassert     histogram('hello world') == {'o': 1, 'w': 1, 'h': 1, 'l': 1}\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     'a' == histogram('a a a')\nassert    'b' == histogram('b a b')\nassert    'b' == histogram('b b a')\nassert    'b' == histogram('c b b')\nassert    'b' == histogram('b b b')\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (histogram(\"aaabbc\") == {'a': 3, 'b': 2, 'c': 1} )\nassert     (histogram(\"aabbc\") == {'a': 2, 'b': 2, 'c': 1} )\nassert     (histogram(\"abc\") == {'a': 1, 'b': 1, 'c': 1} )\nassert     (histogram(\"\") == {} )\nassert     (histogram(\"\") == {} )\n",
        "num_ids_2": 58,
        "num_ids_4": 96
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_delete(\"bhvhv\",\"bhvhv\") == (True,0)\nassert     reverse_delete(\"bhvhv\",\"bvhv\") == (True,2)\nassert     reverse_delete(\"bhvhv\",\"hi\") == (False,3)\nassert     reverse_delete(\"\",\"bhvhv\") == (True,2)\nassert     reverse_delete(\"\",\"hi\") == (False,3)\n",
        "num_ids_2": 46,
        "num_ids_4": 85
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_delete(\"aab\",\"aa\") == (\"aab\",True)\nassert     reverse_delete(\"aab\",\"ab\") == (\"aba\",True)\nassert     reverse_delete(\"aab\",\"a\") == (\"aab\",True)\nassert     reverse_delete(\"aab\",\"\") == (\"aab\",True)\nassert     reverse_delete(\"\",\"aa\") == (\"aa\",True)\n",
        "num_ids_2": 37,
        "num_ids_4": 74
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_delete(\"aba\",\"bba\") == (\"aba\", True)\nassert reverse_delete(\"aba\",\"baa\") == (\"aba\", True)\nassert reverse_delete(\"aa\",\"baa\") == (\"aa\", False)\nassert reverse_delete(\"aa\",\"baaa\") == (\"aa\", False)\nassert reverse_delete(\"aa\",\"aa\") == (\"aa\", True)\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_delete('abc', 'cba') == ('cba', True)\nassert     reverse_delete('abc', 'c') == ('c', True)\nassert     reverse_delete('abc', '') == ('abc', True)\nassert     reverse_delete('a', 'a') == ('a', True)\nassert     reverse_delete('', '') == ('', True)\n",
        "num_ids_2": 38,
        "num_ids_4": 73
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_delete(\"g\",\"g\") == (\"\", True)\nassert     reverse_delete(\"k\",\"k\") == (\"k\", False)\nassert     reverse_delete(\"k\",\"k\") == (\"k\", False)\nassert     reverse_delete(\"kk\",\"kk\") == (\"kk\", True)\nassert     reverse_delete(\"kk\",\"kk\") == (\"kk\", True)\n",
        "num_ids_2": 33,
        "num_ids_4": 67
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_delete('a', 'a') == ('a', True)\nassert     reverse_delete('', 'a') == ('', True)\nassert     reverse_delete('ab', 'ab') == ('ab', False)\nassert     reverse_delete('ab', 'ba') == ('ab', True)\nassert     reverse_delete('abc', 'abc') == ('abc', True)\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    result = \"\"\n    s_length = len(s)\n    c_length = len(c)\n    \n    if s_length == 0:\n        return(result,True)\n        \n    if s_length == 1:\n        if s == c:\n            return(result,True)\n        else:\n            return(result,False)\n    \n    if c_length == 0:\n        if s == c:\n            return(result,True)\n        else:\n            return(result,False)\n    \n    if c_length == 1:\n        if s == c:\n            return(result,True)\n        else:\n            return(result,False)\n    \n    if c_length > 1:\n        if c[0] == s[-1]:\n            c = c[1:]\n            s = s[:-1]\n            \n            if s_length == 1:\n                return(result,True)\n                \n            if s_length > 1:\n                return(reverse_delete(s,c),False)\n        else:\n            return(result,False)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_count([\"0\", \"11\", \"22\"]) == [\"1\", \"2\", \"1\"], \\\n        \"For example, 0 has odd number of 0s and 1 has odd number of 1s\"\n\nassert odd_count([\"101\", \"111\", \"222\"]) == [\"2\", \"1\", \"2\"], \\\n        \"For example, 1 has odd number of 1s and 2 has odd number of 2s\"\n",
        "num_ids_2": 55,
        "num_ids_4": 55
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert _____ == _____\n\n\ndef product(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be the product of the numbers in the i'th string\n    of the input.\"\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_count([\"hello\", \"hello\"]) ==     [\"hello\", \"hello\"]\nassert odd_count([\"hello\", \"hello\", \"goodbye\"]) == [\"hello\", \"hello\"]\nassert odd_count([\"asdf\", \"hi\"]) == [\"asdf\", \"hi\"]\nassert odd_count([1, 3, 4, 2, 5, 1]) == [\"1\", \"1\", \"2\", \"3\"]\n",
        "num_ids_2": 46,
        "num_ids_4": 99
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_count([\"5\", \"1\", \"23\", \"12\"]) == [\"3\"]\nassert     odd_count([\"4\", \"2\", \"3\", \"12\"]) == [\"2\"]\nassert     odd_count([\"3\", \"1\", \"5\", \"0\", \"14\"]) == [\"1\", \"4\"]\nassert     odd_count([\"5\", \"1\", \"23\", \"12\"]) == [\"3\"]\nassert     odd_count([\"12\", \"12\", \"12\", \"12\"]) == [\"2\"]\n",
        "num_ids_2": 48,
        "num_ids_4": 102
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_count([\"\", \"42\", \"foo\", \"boo\", \"b1\", \"0\"]) == [\"42\", \"1\", \"1\", \"1\", \"1\", \"0\"]\nassert odd_count([\"\", \"42\", \"foo\", \"boo\", \"b1\", \"0\"]) == [\"42\", \"1\", \"1\", \"1\", \"1\", \"0\"]\nassert odd_count([\"foo\"]) == [\"1\"]\nassert odd_count([\"\", \"42\", \"foo\", \"boo\"]) == [\"42\", \"1\", \"0\"]\nassert odd_count([\"foo\", \"boo\"]) == [\"1\"]\n",
        "num_ids_2": 91,
        "num_ids_4": 134
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_count([\"zz\"]) == [3], 'Wrong output'\nassert odd_count([\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\"]) == [2, 2], 'Wrong output'\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_count([\"3\", \"6\", \"7\"]) == [\"3\", \"2\", \"1\"], \"Should return ['3', '2', '1']\"\nassert     odd_count([\"5\", \"2\", \"3\"]) == [\"3\", \"2\", \"1\"], \"Should return ['3', '2', '1']\"\n\ndef odd_count2(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \"\"\"\n    pass\n",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1, 2]) == 1\nassert     minSubArraySum([1,2,3]) == 1\nassert     minSubArraySum([1,2,3,4,5]) == 5\nassert     minSubArraySum([1,2,3,4,5,6,7,8]) == 7\n",
        "num_ids_2": 26,
        "num_ids_4": 62
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minSubArraySum([1,1,1]) == 2\nassert     minSubArraySum([1,1]) == 1\nassert     minSubArraySum([1,2]) == 1\nassert     minSubArraySum([1,2,3,4]) == 1\nassert     minSubArraySum([2,3,1,1]) == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minSubArraySum([1,2,3,4,5,6]) == 0\nassert     minSubArraySum([2,3,5]) == 8\nassert     minSubArraySum([2,3,4,1,5]) == 1\nassert     minSubArraySum([1,2,3,4,5,6,10]) == 9\nassert     minSubArraySum([7,7,7,7,7,7,7,7]) == 0",
        "num_ids_2": 38,
        "num_ids_4": 82
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minSubArraySum([1, 1, 1]) == 1\nassert minSubArraySum([1, 2]) == 1\nassert minSubArraySum([1, 2, 1]) == 1\nassert minSubArraySum([1, 2, 1, 2]) == 1\nassert minSubArraySum([1, 2, 2, 1]) == 1\n",
        "num_ids_2": 29,
        "num_ids_4": 61
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nmax_fill([\n    [1, 1],\n    [1, 1],\n    [1, 1]\n], 1) == 3\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmax_fill([[1, 0, 1, 1, 0, 1, 1],\n            [1, 0, 1, 1, 1, 1, 1],\n            [1, 0, 1, 1, 1, 0, 1],\n            [1, 0, 1, 1, 1, 1, 1]], capacity = 1) == 6\nassert max_fill([[1, 0, 1, 1, 0, 1, 1],\n            [1, 0, 1, 1, 1, 1, 1],\n            [1, 0, 1, 1, 1, 0, 1],\n            [1, 0, 1, 1, 1, 1, 1]], capacity = 2) == 6\nassert max_fill([[1, 0, 1, 1, 0, 1, 1],\n            [1, 0, 1, 1, 1, 1, 1],\n            [1, 0, 1, 1, 1, 0, 1],\n            [1, 0, 1, 1, 1, 1, 1]], capacity = 3) == 5\nassert max_fill([[1, 0, 1, 1, 0, 1, 1],\n            [1, 0, 1, 1, 1, 1, 1],\n            [1, 0, 1, 1, 1, 0, 1],\n            [1, 0, 1, 1, 1, 1, 1]], capacity = 4) == 4\nassert max_fill([[1, 0, 1, 1, 0, 1, 1],\n            [1, 0, 1, 1, 1, 1, 1],\n            [1, 0, 1, 1, 1, 0, 1],\n            [1, 0, 1, 1, 1, 1, 1]], capacity = 5) == 3\n",
        "num_ids_2": 24,
        "num_ids_4": 66
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_fill([\n            [0, 0, 0, 1, 1],\n            [0, 0, 0, 0, 0],\n            [1, 0, 0, 0, 0]\n        ], 3) == 2, \"First case: 3\"\nassert     max_fill([\n            [0, 0, 0, 1, 1, 1],\n            [0, 0, 0, 0, 0, 0],\n            [1, 0, 0, 0, 0, 0]\n        ], 3) == 4, \"Second case: 3\"\nassert     max_fill([\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0]\n        ], 3) == 0, \"Third case: 3\"\nassert     max_fill([\n            [1, 1, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1]\n        ], 2) == 2, \"Fourth case: 2\"\nassert     max_fill([\n            [1, 1, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1]\n        ], 4) == 4, \"Fifth case: 4\"\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_fill([[0, 0, 0],\n                    [1, 0, 0],\n                    [0, 1, 1]], 3) == 3\nassert max_fill([[0, 0, 0],\n                    [1, 0, 0],\n                    [0, 1, 1]], 1) == 2\nassert max_fill([[1, 1, 1, 1],\n                    [1, 1, 1, 1],\n                    [1, 1, 1, 1]], 1) == 0\nassert max_fill([[0, 0, 0, 0],\n                    [1, 0, 0, 0],\n                    [0, 1, 0, 0],\n                    [0, 0, 1, 1]], 1) == 0\nassert max_fill([[1, 1, 1],\n                    [1, 1, 1],\n                    [1, 1, 1]], 1) == 2\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_fill_using_reversal(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     sort_array([1,2,3,4,5,0]) == [0,1,2,3,4,5]\nassert     sort_array([1,2,0,3,4,5]) == [0,1,2,3,4,5]\nassert     sort_array([1,0,2,3,4,5]) == [0,1,2,3,4,5]\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([1]) == [1]\nassert     sort_array([1, 2]) == [1, 2]\nassert     sort_array([10, 2, 3, -1, -3, -5]) == [-5, -3, -1, 2, 3, 10]",
        "num_ids_2": 23,
        "num_ids_4": 78
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([10, 0, 5, 0, 5, 2, 0, 0, 5, 5, 0, 1, 3, 0, 0, 0, 1, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 5, 5, 5, 5, 10, 10, 10, 10, 10]\nassert     sort_array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "num_ids_2": 177,
        "num_ids_4": 177
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([8,6,1,3,0,7,4,2,5,10]) == [1,2,4,5,3,6,7,8,0,10]\nassert     sort_array([0,1,0,1,1,0,1,1,0,1]) == [0,0,0,0,0,1,1,1,1,1]\nassert     sort_array([10,0,1,1,1,1,0,1,0,1,1,1,1,0,1]) == [1,1,0,0,0,0,0,0,1,1,1,1,1,1,1]\n",
        "num_ids_2": 98,
        "num_ids_4": 167
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([\n            0, 1, 0, 1, 0, 1, 0, 1,\n            0, 0, 1, 1, 0, 1, 0, 1,\n            1, 1, 0, 0, 1, 1, 1, 0,\n            0, 0, 1, 0, 1, 1, 1, 0,\n            1, 1, 1, 0, 1, 0, 0, 1,\n            1, 1, 0, 1, 0, 0, 0, 1,\n            0, 1, 1, 1, 1, 1, 0, 0,\n            1, 0, 0, 0, 1, 0, 0, 1,\n            ]) == [\n            0, 0, 1, 1, 1, 1, 1, 1,\n            0, 0, 1, 1, 0, 1, 1, 1,\n            1, 1, 1, 0, 1, 0, 1, 1,\n            1, 0, 0, 1, 0, 1, 1, 1,\n            1, 1, 1, 1, 0, 0, 0, 1,\n            1, 1, 1, 1, 1, 1, 0, 0,\n            1, 1, 0, 0, 1, 0, 0, 1,\n            1, 1, 1, 1, 1, 1, 1, 1,\n            1, 1, 1, 1, 1, 1, 1, 1,\n            ]",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([0]) == [0]\nassert     sort_array([1]) == [1]\nassert     sort_array([0, 1, 0]) == [0, 0, 1]\nassert     sort_array([1, 0, 1]) == [0, 1, 1]\n",
        "num_ids_2": 23,
        "num_ids_4": 57
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([3,2,1]) == [1,2,3], \"Wrong output\"\nassert     sort_array([1,3,2]) == [2,3,1], \"Wrong output\"\nassert     sort_array([1,1,2,2,2,2,2]) == [2,2,1,1,2,2,2], \"Wrong output\"\nassert     sort_array([1,2,2]) == [2,2,1], \"Wrong output\"\n",
        "num_ids_2": 52,
        "num_ids_4": 120
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([0, 0, 1, 1, 2, 2]) ==\n        [2, 2, 1, 1, 0, 0]\n\nassert     sort_array([1, 1, 0]) ==\n        [0, 0, 1]\nassert     sort_array([2, 0, 1, 0]) ==\n        [0, 0, 1, 2]\nassert     sort_array([1, 1, 0, 1, 1, 1, 1, 1]) ==\n        [1, 1, 1, 1, 1, 1, 1, 1]",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([1]) == [1]\nassert     sort_array([10]) == [1,10]\nassert     sort_array([1,2]) == [2,1]\nassert     sort_array([1,2,3,4,5]) == [2,4,5,3,1]\n",
        "num_ids_2": 23,
        "num_ids_4": 55
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([0,0,1,1,1,1,2,2,3,4]) == [0,0,1,1,1,1,2,2,3,4]\nassert     sort_array([4,0,3,2,1]) == [1,2,3,4,0]\nassert     sort_array([1]) == [1]\nassert     sort_array([2]) == [2]\nassert     sort_array([]) == []\n",
        "num_ids_2": 78,
        "num_ids_4": 104
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert select_words(s = \"I am a student\", n = 2) == [\"a\", \"am\"]\nassert select_words(s = \"I am a student\", n = 3) == [\"am\", \"student\"]\n\nassert select_words(s = \"I am a student\", n = 1) == []\n",
        "num_ids_2": 28,
        "num_ids_4": 73
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nselect_words('', 0) == []\nselect_words('apple', 1) == []\nselect_words('apple', 2) == ['apple']\nselect_words('apple', 3) == ['apple', 'app']\nselect_words('apple', 4) == ['apple', 'app', 'ap']\nselect_words('apple', 5) == ['apple', 'app', 'ap', 'apple', 'app']\nselect_words('apple', 6) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'app']\nselect_words('apple', 7) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'app']\nselect_words('apple', 8) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'app']\nselect_words('apple', 9) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 10) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 11) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 12) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 13) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 14) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 15) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 16) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 17) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 18) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 19) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 20) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 21) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 22) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 23) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 24) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 25) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 26) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 27) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 28) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 29) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 30) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 31) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 32) == ['apple', 'app', 'ap', 'apple', 'app', 'apple', 'apple', 'app']\nselect_words('apple', 33) == ['apple', 'app', 'ap', 'appl",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_characters(s, c):\n    \"\"\"Given a string s and a single character c, you have been tasked to implement a \n    function that returns the number of times c appears in the string s.\n    If the string s is empty then the function should return 0.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     select_words('', 0) == []\nassert     select_words('The quick brown fox jumps over the lazy dog', 2) == ['quick', 'over']\nassert     select_words('The quick brown fox jumps over the lazy dog', 3) == ['quick', 'brown', 'fox', 'dog', 'over']\nassert     select_words('The quick brown fox jumps over the lazy dog', 1) == ['quick', 'brown', 'fox', 'dog', 'over']\nassert     select_words('The quick brown fox jumps over the lazy dog', 0) == ['quick', 'brown', 'fox', 'dog', 'over']\n",
        "num_ids_2": 38,
        "num_ids_4": 108
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     select_words(\"this is a test\", 2) == [\"is\", \"test\"]\nassert     select_words(\" \", 2) == []\nassert     select_words(\"test\", 1) == []\nassert     select_words(\"test\", 0) == []\n",
        "num_ids_2": 33,
        "num_ids_4": 59
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert select_words(s = \"I love you, I hate you, I am not you\", n = 1) == [\"I\", \"I\", \"I\", \"I\"]\nassert select_words(s = \"I love you, I hate you, I am not you\", n = 2) == [\"I\", \"I\", \"I\", \"I\", \"I\"]\nassert select_words(s = \"I love you, I hate you, I am not you\", n = 3) == [\"I\", \"I\", \"I\", \"I\", \"I\"]\nassert select_words(s = \"I love you, I hate you, I am not you\", n = 4) == [\"I\", \"I\", \"I\", \"I\", \"I\", \"I\"]\n",
        "num_ids_2": 42,
        "num_ids_4": 126
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     select_words(\"abacdefg\", 2) == [\"abac\", \"fg\"]\nassert     select_words(\"abacdefg\", 1) == [\"abac\"]\nassert     select_words(\"abacdefg\", 0) == []\nassert     select_words(\"ab\", 1) == []\nassert     select_words(\"ab\", 0) == []\n",
        "num_ids_2": 41,
        "num_ids_4": 70
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     select_words(\"This is a string \", 2) == [\"is\", \"string\"]\nassert     select_words(\"This is a string \", 3) == [\"is\", \"a\", \"string\"]\nassert     select_words(\"This is a string \", 0) == []\nassert     select_words(\"This is a string \", 5) == []\nassert     select_words(\"a a a a a a a a\", 1) == [\"a\", \"a\"]\n",
        "num_ids_2": 45,
        "num_ids_4": 77
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('owen') == ''\nassert get_closest_vowel('apple') == 'a'\nassert get_closest_vowel('bazaar') == 'z'\nassert get_closest_vowel('cocacola') == 'c'\n\n",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert get_closest_vowel(\"yesterday\") == \"y\"\nassert get_closest_vowel(\"mississippi\") == \"\"\nassert get_closest_vowel(\"a\") == \"\"\n",
        "num_ids_2": 22,
        "num_ids_4": 56
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_closest_vowel(\"hello\") == \"h\"\nassert     get_closest_vowel(\"lemonade\") == \"e\"\nassert     get_closest_vowel(\"one\") == \"\"\nassert     get_closest_vowel(\"lemonade\") == \"\"\nassert     get_closest_vowel(\"apple\") == \"\"",
        "num_ids_2": 40,
        "num_ids_4": 76
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    get_closest_vowel('mozzarella') == 'e'\n    get_closest_vowel('nose') == ''\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nget_closest_vowel(\"aaabba\") == \"aa\"\nget_closest_vowel(\"aaaabbb\") == \"\"\nget_closest_vowel(\"aabb\") == \"a\"\nget_closest_vowel(\"AAaaaabbb\") == \"AA\"\nget_closest_vowel(\"ABCABC\") == \"ABC\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_closest_vowel('python') == 't'\nassert     get_closest_vowel('python') == 'y'\nassert     get_closest_vowel('python') == 't'\nassert     get_closest_vowel('python') == 'y'\nassert     get_closest_vowel('python') == 'y'\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     match_parens(('(())', ) ) == 'Yes', 'Test 1 fails'\nassert     match_parens(('(())()', ) ) == 'No', 'Test 2 fails'\nassert     match_parens(('(()())', ) ) == 'Yes', 'Test 3 fails'\nassert     match_parens(('((()))', ) ) == 'No', 'Test 4 fails'\nassert     match_parens(('(())()()', ) ) == 'Yes', 'Test 5 fails'\n",
        "num_ids_2": 47,
        "num_ids_4": 95
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     match_parens
        "num_ids_2": 1026,
        "num_ids_4": 1026
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert match_parens('(())') == 'Yes'\nassert match_parens('())') == 'No'\nassert match_parens('(()())') == 'Yes'\nassert match_parens('(())()') == 'No'\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert match_parens(('(', ')')) == 'Yes'\n    assert match_parens(('()))()', '()))()))'))\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(match_parens('((('))\nassert not (match_parens('))'))\nprint(match_parens('(()'))\nassert not (match_parens('()('))\nprint(match_parens('()()'))\nassert not (match_parens('(((('))\nprint(match_parens('((((('))\nassert not (match_parens('((()'))\nprint(match_parens('(()(()'))\n",
        "num_ids_2": 15,
        "num_ids_4": 40
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     match_parens('(())') == 'Yes'\nassert     match_parens('(())()') == 'Yes'\nassert     match_parens('()(((((()))))') == 'Yes'\nassert     match_parens('((()))((((((()))))') == 'Yes'\nassert     match_parens('(((((()))))))') == 'Yes'\n",
        "num_ids_2": 31,
        "num_ids_4": 71
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     match_parens(['((', '))']) == 'Yes'\nassert     match_parens(['((', '))', ')', '()']) == 'Yes'\nassert     match_parens(['()', '()', '(']) == 'No'\nassert     match_parens([')', '()', '(', ')']) == 'No'\nassert     match_parens(['(', '()', '(', ')']) == 'No'",
        "num_ids_2": 44,
        "num_ids_4": 87
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     match_parens(['(()())', '()(((())))']) == 'Yes'\nassert     match_parens(['((())', '((()))']) == 'No'\nassert     match_parens(['((((())))', '(((()))))']) == 'Yes'\nassert     match_parens(['(()))', '((((()))))']) == 'No'\nassert     match_parens(['((((((()))))))', '(((((()))))))']) == 'Yes'\n",
        "num_ids_2": 47,
        "num_ids_4": 96
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum([1,2,3], 2) == [3,3]\nassert     maximum([1,2,3,4,5,6,7,8], 3) == [8,8,8]\nassert     maximum([-100, -3, -2, -1, 0, 1, 2, 3, 5], 3) == [-100, -3, -2, -1, 1, 2, 3, 3, 5]\nassert     maximum([-100, -3, -2, -1, 0, 1, 2, 3, 5, 6], 2) == [-100, -3, -2, -1, 1, 2, 2, 3, 5, 6]\nassert     maximum([-100, -3, -2, -1, 0, 1, 2, 3, 5, 6], 5) == [-100, -3, -2, -1, 1, 2, 2, 3, 5, 6]\n",
        "num_ids_2": 50,
        "num_ids_4": 158
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum([1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5, 6, 7], 1) == [7, 6, 5, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2]\nassert     maximum([1, 2, 3, 4, 5], 5) == [4, 3, 2, 1]\n",
        "num_ids_2": 66,
        "num_ids_4": 138
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert maximum([1, 2, 3, 4, 5], 2) == [5, 5], \"Wrong\"\nassert maximum([1, 2, 3, 4, 5, 6], 2) == [6, 6], \"Wrong\"\nassert maximum([1, 2, 3, 4, 5, 6, 7], 2) == [6, 6], \"Wrong\"\nassert maximum([1, 2, 3, 4, 5, 6, 7, 8], 2) == [7, 7], \"Wrong\"\n",
        "num_ids_2": 29,
        "num_ids_4": 87
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum([], 2) == []\nassert     maximum([1], 1) == [1]\nassert     maximum([1, 2], 1) == [1, 2]\nassert     maximum([1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4, 5], 2) == [3, 4, 5]\n",
        "num_ids_2": 23,
        "num_ids_4": 69
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum([], 0) == []\nassert     maximum([1], 1) == [1]\nassert     maximum([1, 2], 1) == [1, 2]\nassert     maximum([1, 2, 3], 1) == [1, 2, 3]\nassert     maximum([4, 5, 6], 2) == [6, 5]\n",
        "num_ids_2": 23,
        "num_ids_4": 61
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum([5,1,2,3], 2) == [5, 3]\nassert     maximum([5,1,2,3], 3) == [5, 3, 2]\nassert     maximum([1,2], 1) == [2]\nassert     maximum([3,2], 2) == [3,2]\n",
        "num_ids_2": 44,
        "num_ids_4": 76
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum([-1, -2, -3, -4], 2) == [-4, -1, -2, -3]\nassert     maximum([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1]\nassert     maximum([1, 2, 3, 4], 5) == [4, 3, 2, 1, 1]\nassert     maximum([1], 1) == [1]\nassert     maximum([], 1) == []\n",
        "num_ids_2": 61,
        "num_ids_4": 101
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert maximum([0], 1) == [0]\nassert maximum([0, 1], 2) == [1, 1]\nassert maximum([-1, -2, 3, -4], 3) == [-4, -1, 3]\nassert maximum([0, 0, 1, 2, -3, 4], 2) == [-3, 4]\n",
        "num_ids_2": 15,
        "num_ids_4": 57
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solution([3, 4, 9, 7, 9, 9]) == 12, \"3 + 9 + 7\"\nassert     solution([1, 1]) == 1, \"2\"\nassert     solution([]) == 0, \"Empty List\"\nassert     solution([5, 5, 5]) == 0, \"All elements are even",
        "num_ids_2": 44,
        "num_ids_4": 78
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9]) == sum([2,4,6,8,10])\nassert     solution([1, 2, 3, 4, 5, 6]) == sum([2,4,6])\nassert     solution([1, 2, 3, 4]) == sum([2,4])\nassert     solution([]) == sum([])\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solution([-3,1,-2,3,-4]) == 5, solution([-3,1,-2,3,-4])\nassert     solution([1,2,3,4]) == 0, solution([1,2,3,4])\nassert     solution([1,-2,-3,-4]) == -4, solution([1,-2,-3,-4])\nassert     solution([1,2,3,4,-1]) == 2, solution([1,2,3,4,-1])\nassert     solution([-4,3,1,-2,4,-5,1,-2,-1]) == 1, solution([-4,3,1,-2,4,-5,1,-2,-1])\n",
        "num_ids_2": 60,
        "num_ids_4": 119
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solution([1, 3, 2, 6, 5, -1]) == 0, 'Error'\nassert     solution([1, 4, 2, 5, -5, 4, -4, -1]) == 2, 'Error'\nassert     solution([10, 3, 9, 6, -1]) == -3, 'Error'\nassert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 45, 'Error'\nassert     solution([-1, -100, -3, -5, -7, -11]) == -15, 'Error'\n",
        "num_ids_2": 56,
        "num_ids_4": 116
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    print(solution([1,2,3,4,5,6])) == sum([2,4,6,8])\n    print(solution([1,2,3,4,5,6,7,8])) == sum([2,4,6,8])\n    print(solution([1,2,3,4,5,6,7,8,9])) == sum([2,4,6,8,10])\n    print(solution([1,2,3,4,5,6,7,8,9,10])) == sum([2,4,6,8,10])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    # each test case\n    for lst in (\n        [[1, 2, 3, 4, 5], 5],\n        [[1, 2, 3, 4, 5], 6],\n        [[], 0],\n        [[1, 2, 3], 4],\n        [[1, 2, 3], 5],\n        [[1, 2, 3, 4], 5]\n    ):\n        print(lst, solution(lst)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert solution([2, 1, 3, 4]) == 0, \"The list must be empty or containing only odd elements.\"\nassert solution([-1, -2, 3, 4]) == 5, \"Odd elements must be in even positions.\"\nassert solution([1, 2, 3, 4]) == 0, \"Odd elements must be in even positions.\"",
        "num_ids_2": 30,
        "num_ids_4": 82
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solution([0, 1, 2, 3]) == 2\nassert     solution([2, 4, 6, 8]) == 8\nassert     solution([1, 3, 5]) == 6\nassert     solution([3, 5, 7]) == 9\nassert     solution([-3, -2, -1, 1, 2]) == 4\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_elements([], 3) == 0, \"k = 0\"\nassert     add_elements([1, 2, 3], 3) == 10, \"arr = [1,2,3], k = 3\"\nassert     add_elements([1, 2, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9",
        "num_ids_2": 52,
        "num_ids_4": 1023
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_elements([1,2,3,4,5], 2) == 9, \"Wrong!\"\nassert     add_elements([2,2,3,4,4,5], 2) == 7, \"Wrong!\"\nassert     add_elements([1,2,3,4,4,5], 3) == 12, \"Wrong!\"\nassert     add_elements([1,2,3,4,5], 2) == 9, \"Wrong!\"\nassert     add_elements([1,2,3,4,4,5], 2) == 7, \"Wrong!\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_elements([0, 1, 2, 3, 4], 1) == 12\nassert     add_elements([1, 2, 3, 4], 1) == 17\nassert     add_elements([1, 2, 3, 4], 2) == 12\nassert     add_elements([10, 2, 3, 4, 5, 6, 7, 8, 9, 0], 2) == 12\nassert     add_elements([1, 1, 1, 1], 1) == 11\n",
        "num_ids_2": 42,
        "num_ids_4": 94
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_elements([0, 2, 1, 1], 1) == 3\nassert     add_elements([3, 2, 1, 9, 8, 7, 6, 5, 4], 2) == 12\nassert     add_elements([6, 1, 9, 2, 8, 7, 6, 5, 4], 4) == 17\n",
        "num_ids_2": 50,
        "num_ids_4": 80
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not add_elements([12], 1)\nassert add_elements([12, 34, 56, 45, 23, 67, 45, 5], 2) == 37\nassert add_elements([1, 1, 1, 1, 1], 1) == 5\nassert add_elements([], 1) == 0\n",
        "num_ids_2": 15,
        "num_ids_4": 63
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert add_elements([1, 2, 3, 4, 5], 2) == 11\nassert add_elements([9, 9, 9, 9], 2) == 18\nassert add_elements([4, 2, 7, 9, 6], 2) == 15\nassert add_elements([2, 4, 5, 5, 8], 2) == 13\n",
        "num_ids_2": 24,
        "num_ids_4": 64
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_elements(arr=[1, 9, 9, 9, 0, 1, 1], k=1) == 14\nassert     add_elements(arr=[1, 0, 1, 0, 1], k=3) == 0\nassert     add_elements(arr=[1, 2, 3, 4, 5, 6, 7], k=3) == 21\n",
        "num_ids_2": 56,
        "num_ids_4": 86
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    # ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(4) == [2, 1, 3]\nassert     get_odd_collatz(7) == [7, 6, 5, 4, 3, 2, 1]\nassert     get_odd_collatz(13) == [13, 11, 10, 5, 4, 2, 1]\nassert     get_odd_collatz(1024) == [1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]\n",
        "num_ids_2": 36,
        "num_ids_4": 92
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 2, 3]\nassert     get_odd_collatz(4) == [1, 3, 10, 5, 16, 8, 4, 2, 1]\nassert     get_odd_collatz(5) == [1, 5, 25, 10, 5, 16, 8, 4, 2, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 86
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    get_odd_collatz(1) == [1]\n    get_odd_collatz(2) == [1, 2]\n    get_odd_collatz(3) == [1, 2, 3]\n    get_odd_collatz(6) == [1, 3, 7, 11, 13, 17, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    get_odd_collatz(10) == [1, 3, 5, 7, 11, 13, 17, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    get_odd_collatz(99) == [1, 3, 9, 21, 37, 61, 81, 127, 257, 263, 269, 369, 371, 407, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 509, 541, 547, 557, 563, 569, 571, 577, 581, 583, 591, 593, 597, 601, 607, 611, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 707, 711, 719, 721, 731, 733, 739, 743, 747, 751, 757, 761, 769, 773, 787, 797, 803, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    get_odd_collatz(12345) == [1, 3, 5, 7, 11, 13, 17, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    get_odd_collatz(1024) == [1, 3, 7, 13, 29, 61, 103, 131, 201, 263, 269, 271, 277, 293, 307, 311, 313, 317, 331, 337, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 449, 457, 461, 463, 467, 469, 483, 491, 499, 509, 513, 527, 537, 541, 547, 557, 563, 569, 571, 577, 581, 583, 591, 593, 597, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 707, 711, 719, 729, 743, 751, 757, 761, 769, 773, 787, 797, 803, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1121, 1129, 1139, 1143, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1219, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1309, 1327, 1361, 1367, 1373, 1379, 1381, 1383, 1399, 1409, 142",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2]\nassert     get_odd_collatz(3) == [2, 3]\nassert     get_odd_collatz(4) == [2, 2, 4]\nassert     get_odd_collatz(5) == [2, 2, 3, 5]\n",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) ==     [1]\nassert     get_odd_collatz(2) ==     [1, 2]\nassert     get_odd_collatz(3) ==     [1, 2, 3]\nassert     get_odd_collatz(4) ==     [1, 3, 5, 2]\nassert     get_odd_collatz(5) ==     [1, 3, 7, 5, 2]\n",
        "num_ids_2": 36,
        "num_ids_4": 80
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    print(get_odd_collatz(1))\n\n    print(get_odd_collatz(2))\n\n    print(get_odd_collatz(3))\n\n    print(get_odd_collatz(4))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     valid_date('') == False\nassert     valid_date('09-30-2012') == True\nassert     valid_date('10-02-2020') == True\nassert     valid_date('03-28-2020') == False\nassert     valid_date('12-29-2020') == False\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     valid_date(\"01-01-2014\") == True\nassert     valid_date(\"12-01-2014\") == False\nassert     valid_date(\"01-01-2020\") == False\nassert     valid_date(\"\") == False\nassert     valid_date(\"\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 55
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     valid_date('01-11-2020') == True\nassert     valid_date('30-03-2020') == False\nassert     valid_date('30-11-2020') == False\nassert     valid_date('31-01-2020') == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef date_validator(date):\n    \"\"\"Given a date in the format mm-dd-yyyy, validates the date and returns\n    true if the date is valid else return false.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     valid_date('0') == False, \"Test Failed\"\nassert     valid_date('') == False, \"Test Failed\"\nassert     valid_date(' ') == False, \"Test Failed\"\nassert     valid_date('09-10-10') == False, \"Test Failed\"\nassert     valid_date('10-10-10') == False, \"Test Failed\"\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     valid_date('') is False\nassert     valid_date('  ') is False\nassert     valid_date('  m-d-yyyy') is True\nassert     valid_date('0-0-0') is False\nassert     valid_date('1-1-21') is False\n",
        "num_ids_2": 22,
        "num_ids_4": 54
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     valid_date('01-01-2016')==True, \"Your function is not correct\"\nassert valid_date('')==False, \"Your function is not correct\"\nassert valid_date('01-')==False, \"Your function is not correct\"\nassert valid_date('01-01')==False, \"Your function is not correct\"\nassert valid_date('01-01-2016')==False, \"Your function is not correct\"\n",
        "num_ids_2": 41,
        "num_ids_4": 80
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     valid_date('05-01-2021') == True\nassert     valid_date('14-12-2021') == False\nassert     valid_date('') == False\nassert     valid_date('32-12-2021') == False\nassert     valid_date('32-12-2035') == False\n",
        "num_ids_2": 32,
        "num_ids_4": 59
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_words('test') == ['test']\nassert     split_words('test, text') == ['test', 'text']\nassert     split_words('test, text, a, b, c, d, e, f') == ['test', 'text', 'a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('test, text, a, b, c, d, e, f, g') == ['test', 'text', 'a', 'b', 'c', 'd', 'e', 'f', 'g']\nassert     split_words('test, text, a, b, c, d, e, f, g, h') == ['test', 'text', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n",
        "num_ids_2": 31,
        "num_ids_4": 132
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_words('hello, world!') == ['hello', 'world'], \"Wrong\"\nassert split_words('hello, world!') == ['hello', 'world'], \"Wrong\"\nassert split_words('hello, world!') == ['hello', 'world'], \"Wrong\"\nassert split_words('hello, world!') == ['hello', 'world'], \"Wrong\"\nassert split_words('hello, world!') == ['hello', 'world'], \"Wrong\"\n",
        "num_ids_2": 47,
        "num_ids_4": 93
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('Hello World!') == ['Hello', 'World!']\nassert     split_words('Hello World, this is a test') == ['Hello', 'World', 'this', 'is', 'a', 'test']\nassert     split_words('This is a test, of course!') == ['this', 'is', 'a', 'test', 'of', 'course!']\nassert     split_words('Hello, world') == ['Hello', 'world']\nassert     split_words('') == []\n",
        "num_ids_2": 53,
        "num_ids_4": 107
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_words('This is a text, and some more, of it') == ['this', 'is', 'text', 'and','some','more', 'of', 'it']\nassert     split_words('This text is not enough for a text') == ['this', 'text', 'is', 'not', 'enough', 'for', 'a', 'text']\nassert     split_words('a') == ['a']\nassert     split_words('') == []\n",
        "num_ids_2": 83,
        "num_ids_4": 107
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(split_words('a,b,c,d'))\nprint(split_words('a,b,c'))\nprint(split_words('a,b,c,'))\nprint(split_words('a,b,c,d'))\nprint(split_words('ab,cd,ef'))\nprint(split_words('a,b,c'))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert split_words('hello world') == ['hello', 'world'],'split_words'\nassert split_words('hello world, hello, world') == ['hello', 'world', 'hello', 'world'],'split_words'\nassert split_words('hello world, hello, world, world') == ['hello', 'world', 'hello', 'world', 'world'],'split_words'\nassert split_words('hello world, hello, world, world, world') == ['hello', 'world', 'hello', 'world', 'world', 'world'],'split_words'\n",
        "num_ids_2": 24,
        "num_ids_4": 91
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_words('Alaska, Alaska, Alaska, Alaska, Alaska, Alaska, Alaska, Alaska, Alaska, Alaska, Alaska, Alaska')\nassert     split_words('One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten') == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten']\nassert     split_words('One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten') == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten']\nassert not split_words('One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten') == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten']\nassert not split_words('One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten') == ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten']\n",
        "num_ids_2": 90,
        "num_ids_4": 206
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert split_words('hi, hello') == ['hi', 'hello']\nassert split_words('hello, there, world') == ['hello', 'there', 'world']\nassert split_words('hello, there, world, hey') == ['hello', 'there', 'world', 'hey']\nassert split_words('hello, world, hey, world, hey') == ['hello', 'world', 'hey', 'world', 'hey']\n",
        "num_ids_2": 20,
        "num_ids_4": 69
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_words(\"I like to eat\") == ['I', 'like', 'to', 'eat']\nassert     split_words(\"I like to eat, and eat food\") == ['I', 'like', 'to', 'eat', 'and', 'eat', 'food']\nassert     split_words(\"I like to eat, and eat food, where is the best?\") == ['I', 'like', 'to', 'eat', 'and', 'eat', 'food', 'where', 'is', 'the', 'best']\nassert     split_words(\"I like to eat, and eat food, where is the best?\") == ['I', 'like', 'to', 'eat', 'and', 'eat', 'food', 'where', 'is', 'the', 'best']\n",
        "num_ids_2": 63,
        "num_ids_4": 175
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef first_non_decreasing(lst):\n    '''\n    Given a list of numbers, return the first number that is not decreasing\n    (that is, if the next number to the right of the number is greater than\n    the number, return the first number). If there are no non-decreasing\n    numbers, return None. Assume no negative numbers and only integers.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    is_sorted([1,2,3,3,4]) == True\n    is_sorted([1,2,3,4,4]) == False\n    is_sorted([1,1,2,2,3,3]) == False\n    is_sorted([1,1,1,2,2,3,3]) == True\n    is_sorted([]) == True\n    is_sorted([1]) == True\n    is_sorted([1,2]) == False\n    is_sorted([1,2,1]) == False\n    is_sorted([1,1,1,2]) == False\n    is_sorted([1,1,1,2,2]) == False\n    is_sorted([1,1,1,1,2]) == True\n    is_sorted([1,1,1,2,2,3]) == True\n    is_sorted([1,1,1,2,2,2]) == False\n    is_sorted([1,1,1,2,2,1]) == False\n    is_sorted([1,1,1,2,2,2,1]) == False\n    is_sorted([1,1,1,2,2,2,1,1]) == False\n    is_sorted([1,1,1,1,1,2,2,2,2,2,2]) == False\n    is_sorted([1,1,1,1,1,1,2,2,2,2,2,2,1,1,2]) == True\n    is_sorted([1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1]) == False\n    is_sorted([1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1]) == False\n    is_sorted([1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1]) == False\n    is_sorted([1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == False\n    is_sorted([1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_sorted([1, 2, 3, 3]) == True\nassert is_sorted([1, 2, 3, 1]) == False\nassert is_sorted([1, 2, 2, 1]) == False\nassert is_sorted([1, 1, 2, 3]) == True\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sorted([1, 2, 3]) == False\nassert is_sorted([1, 2, 3, 4]) == True\nassert is_sorted([1, 1, 2, 2]) == False\nassert is_sorted([1, 1, 2, 3, 3]) == False\nassert is_sorted([1, 1, 2, 3, 3, 3, 3]) == False\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    interval1 = (1, 3)\n    interval2 = (2, 4)\n    print(f\"Intersection of the intervals {interval1}, {interval2} is {intersection(interval1, interval2)}.\")\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    import sys\n    import io\n    def readlines():\n        for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):\n            yield line.strip('\\n')\n\n    lines = readlines()\n    while True:\n        try:\n            line = next(lines)\n            interval1 = tuple(map(int, line.strip().split(' ')))\n\n            line = next(lines)\n            interval2 = tuple(map(int, line.strip().split(' ')))\n\n            print(\" \".join(map(str, intersection(interval1, interval2))))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 5)) == \"YES\"\nassert     intersection((1, 3), (1, 3)) == \"YES\"\nassert     intersection((1, 3), (1, 4)) == \"NO\"\nassert     intersection((1, 4), (2, 4)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\nassert     intersection((1, 3), (2, 4)) == \"NO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection((1,2), (2,4)) == \"YES\"\nassert     intersection((1,2), (2,5)) == \"NO\"\nassert     intersection((1,2), (1,3)) == \"NO\"\nassert     intersection((2,3), (1,3)) == \"NO\"\nassert     intersection((5,10), (1,4)) == \"NO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection((1, 2), (2, 4)) == \"NO\"\nassert     intersection((1, 2), (2, 3)) == \"NO\"\nassert     intersection((1, 2), (1, 3)) == \"YES\"\nassert     intersection((1, 2), (3, 4)) == \"YES\"\nassert     intersection((1, 2), (4, 5)) == \"YES\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (intersection((1, 3), (2, 4)) == \"NO\")\nassert     (intersection((1, 3), (1, 3)) == \"YES\")\nassert     (intersection((1, 3), (1, 2)) == \"YES\")\nassert     (intersection((1, 3), (3, 4)) == \"YES\")\nassert     (intersection((1, 3), (4, 5)) == \"NO\")\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    input_lines = []\n    while True:\n        try:\n            input_lines.append(input())\n        except EOFError:\n            break\n    \n    for input_line in input_lines:\n        intervals = parse_input(input_line)\n        \n        # check the correctness of the input\n        assert \n        \n        # print the result\n        print(intersection(*intervals)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef prod_signs_2(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prod_signs([1, -1, -1, 2, -1, -1, -1]) == None\nassert     prod_signs([-1, 1, -1, -1, -1, -1]) == -2\nassert     prod_signs([-1, 1, -1, 1]) == 3\nassert     prod_signs([]) == None\nassert     prod_signs([1, 1, -1, 1]) == 2\n",
        "num_ids_2": 59,
        "num_ids_4": 92
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prod_signs([1, 0, -2, 0]) == 0\nassert     prod_signs([1, -2, 0, 0]) == 0\nassert     prod_signs([-2, -1, 0, 0]) == 0\nassert     prod_signs([1, -2, 0, 1]) == 1\nassert     prod_signs([1, 0, -2, 1]) == 1\n",
        "num_ids_2": 40,
        "num_ids_4": 81
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prod_signs([-1, 1])     == 0, \"Wrong answer for this case.\"\nassert     prod_signs([-1, 1, -1]) == 0, \"Wrong answer for this case.\"\nassert     prod_signs([1, 1, -1, 1]) == 2, \"Wrong answer for this case.\"\nassert     prod_signs([1, -1, 1, -1]) == 2, \"Wrong answer for this case.\"\nassert     prod_signs([1, 1, 1, 1]) == 6, \"Wrong answer for this case.\"\n",
        "num_ids_2": 54,
        "num_ids_4": 113
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert prod_signs([1,2,3]) == None\nassert prod_signs([-1,-1,-1]) == None\nassert prod_signs([1,1,1]) == 4\nassert prod_signs([-1,-1,-1,1,1,1]) == 0\n",
        "num_ids_2": 18,
        "num_ids_4": 49
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prod_signs([3, 4]) == 0\nassert     prod_signs([4, 3, -4]) == 0\nassert     prod_signs([-4, 3, -4]) == 0\nassert     prod_signs([3, -4, -3]) == 0\nassert     prod_signs([4, 3, 4]) == 0\n",
        "num_ids_2": 33,
        "num_ids_4": 71
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prod_signs([1, -1, 0, -1]) == -3\nassert     prod_signs([1, -1, 0, 1, -1]) == -5\nassert     prod_signs([-1]) == -1\nassert     prod_signs([-1, 0]) == -1\nassert     prod_signs([-1, -1, 1]) == -3\n",
        "num_ids_2": 46,
        "num_ids_4": 78
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prod_signs([-1, -2, -3, -4]) == -6, \\\n    'incorrect'\nassert     prod_signs([1, 2, 3, 4]) == 0, \\\n    'incorrect'\nassert     prod_signs([1, -2, -3, -4]) == -24, \\\n    'incorrect'\nassert     prod_signs([-1, -2, 3, 4]) == -6, \\\n    'incorrect'\nassert     prod_signs([-1, 2, -3, -4]) == 12, \\\n    'incorrect'\n",
        "num_ids_2": 47,
        "num_ids_4": 96
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     [2, -2, -2, -3, -2, -4, 3, 1] == prod_signs(\n        [2, -2, -2, -3, -2, -4, 3, 1]) == 8\nassert     [-2, -2, -2, -3, -2, -4, 3, 1] == prod_signs(\n        [2, -2, -2, -3, -2, -4, 3, 1]) == 24\nassert     [] == prod_signs([])\nassert None == prod_signs([1])\nassert 1 == prod_signs([1, 1])\n",
        "num_ids_2": 63,
        "num_ids_4": 85
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minPath([[0]], 1) == [0], \"Wrong\"\nassert     minPath([[0]], 2) == [0, 0], \"Wrong\"\nassert     minPath([[0],\n    [1],\n    [0],\n    [0]], 1) == [0, 0, 0, 0], \"Wrong\"\nassert     minPath([[0],\n    [1],\n    [0],\n    [0]], 2) == [0, 0, 0, 0], \"Wrong\"\nassert     minPath([[0, 1],\n    [2, 1],\n    [1, 0],\n    [0, 0]], 2) == [0, 1, 2, 1], \"Wrong\"\n",
        "num_ids_2": 42,
        "num_ids_4": 60
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef minPath2(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minPath([[3, 2, 1], [2, 1, 4]], 2) == [1, 2]\nassert     minPath([[3, 2, 1], [2, 1, 4]], 3) == []\nassert     minPath([[1, 2, 3, 4, 5, 6],\n    [1, 2, 4, 7, 8, 9],\n    [1, 4, 8, 9, 10, 11],\n    [2, 4, 9, 12, 13, 14],\n    [2, 5, 10, 13, 14, 15],\n    [2, 6, 11, 14, 15, 16]], 3) == [1, 2, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nassert     minPath([[1, 2, 3, 4],\n    [1, 2, 4],\n    [1, 2, 4],\n    [1, 2, 3]], 4) == [1, 2, 3]\n\nimport unittest\n",
        "num_ids_2": 54,
        "num_ids_4": 88
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert minPath([[1,2,3], [4,5,6], [7,8,9], [10,11,12], [13,14,15]], 2) == \n              [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert minPath([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]], 2) ==\n              [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert minPath([[1,1,1,1,1], [1,1,1,1,1], [1,1,1,1,1], [1,1,1,1,1], [1,1,1,1,1]], 2) == \n              [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "num_ids_2": 48,
        "num_ids_4": 155
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test \n    print(\"1.Expected result: 3\")\n    print(\"2.Actual result: \", tri(1))\n    print(\"3.Expected result: 8\")\n    print(\"4.Actual result: \", tri(2))\n    print(\"5.Expected result: 9\")\n    print(\"6.Actual result: \", tri(3))\n    print(\"7.Expected result: 10\")\n    print(\"8.Actual result: \", tri(4))\n    print(\"9.Expected result: 11\")\n    print(\"10.Actual result: \", tri(5))\n    print(\"11.Expected result: 12\")\n    print(\"12.Actual result: \", tri(6))\n    print(\"13.Expected result: 13\")\n    print(\"14.Actual result: \", tri(7))\n    print(\"15.Expected result: 14\")\n    print(\"16.Actual result: \", tri(8))\n    print(\"17.Expected result: 15\")\n    print(\"18.Actual result: \", tri(9))\n    print(\"19.Expected result: 16\")\n    print(\"20.Actual result: \", tri(10))\n    print(\"21.Expected result: 17\")\n    print(\"22.Actual result: \", tri(11))\n    print(\"23.Expected result: 18\")\n    print(\"24.Actual result: \", tri(12))\n    print(\"25.Expected result: 19\")\n    print(\"26.Actual result: \", tri(13))\n    print(\"27.Expected result: 20\")\n    print(\"28.Actual result: \", tri(14))\n    print(\"29.Expected result: 21\")\n    print(\"30.Actual result: \", tri(15))\n    print(\"31.Expected result: 22\")\n    print(\"32.Actual result: \", tri(16))\n    print(\"33.Expected result: 23\")\n    print(\"34.Actual result: \", tri(17))\n    print(\"35.Expected result: 24\")\n    print(\"36.Actual result: \", tri(18))\n    print(\"37.Expected result: 25\")\n    print(\"38.Actual result: \", tri(19))\n    print(\"39.Expected result: 26\")\n    print(\"40.Actual result: \", tri(20))\n    print(\"41.Expected result: 27\")\n    print(\"42.Actual result: \", tri(21))\n    print(\"43.Expected result: 28\")\n    print(\"44.Actual result: \", tri(22))\n    print(\"45.Expected result: 29\")\n    print(\"46.Actual result: \", tri(23))\n    print(\"47.Expected result: 30\")\n    print(\"48.Actual result: \", tri(24))\n    print(\"49.Expected result: 31\")\n    print(\"50.Actual result: \", tri(25))\n    print(\"51.Expected result: 32\")\n    print(\"52.Actual result: \", tri(26))\n    print(\"53.Expected result: 33\")\n    print(\"54.Actual result: \", tri(27))\n    print(\"55.Expected result: 34\")\n    print(\"56.Actual result: \", tri(28))\n    print(\"57.Expected result: 35\")\n    print(\"58.Actual result: \", tri(29))\n    print(\"59.Expected result: 36\")\n    print(\"60.Actual result: \", tri(30))\n    print(\"61.Expected result: 37\")\n    print(\"62.Actual result: \", tri(31))\n    print(\"63.Expected result: 38\")\n    print(\"64.Actual result: \", tri(32))\n    print(\"65.Expected result: 39\")\n    print(\"66.Actual result: \", tri(33))\n    print(\"67.Expected result: 40\")\n    print(\"68.Actual result: \", tri(34))\n    print(\"69.Expected result: 41\")\n    print(\"70.Actual result: \", tri(35))\n    print(\"71.Expected result: 42\")\n    print(\"72.Actual result: \", tri(36))\n    print(\"73.Expected result: 43\")\n    print(\"74.Actual result: \", tri(37))\n    print(\"75.Expecte",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(tri(3))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert      tri(2)      ==      [1, 2, 3], \"n = 2, 1 + 2 + 3 = 5\"\nassert      tri(3)      ==      [1, 3, 3], \"n = 3, 1 + 3 + 3 = 6\"\nassert      tri(4)      ==      [1, 2, 2, 4], \"n = 4, 1 + 2 + 2 + 4 = 6\"\nassert      tri(5)      ==      [1, 2, 3, 3, 5], \"n = 5, 1 + 2 + 3 + 3 + 5 = 13\"\nassert      tri(6)      ==      [1, 2, 3, 4, 6, 6], \"n = 6, 1 + 2 + 3 + 4 + 6 + 6 = 21\"\n",
        "num_ids_2": 60,
        "num_ids_4": 132
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    #check for all n\n    #check for n = 1\n    #check for n = 2\n    #check for n = 3\n    #check for n = 4\n    #check for n = 5\n    #check for n = 6\n    #check for n = 7\n    #check for n = 8\n    #check for n = 9\n    #check for n = 10\n    #check for n = 11\n    #check for n = 12\n    #check for n = 13\n    #check for n = 14\n    #check for n = 15\n    #check for n = 16\n    #check for n = 17\n    #check for n = 18\n    #check for n = 19\n    #check for n = 20\n    #check for n = 21\n    #check for n = 22\n    #check for n = 23\n    #check for n = 24\n    #check for n = 25\n    #check for n = 26\n    #check for n = 27\n    #check for n = 28\n    #check for n = 29\n    #check for n = 30\n    #check for n = 31\n    #check for n = 32\n    #check for n = 33\n    #check for n = 34\n    #check for n = 35\n    #check for n = 36\n    #check for n = 37\n    #check for n = 38\n    #check for n = 39\n    #check for n = 40\n    #check for n = 41\n    #check for n = 42\n    #check for n = 43\n    #check for n = 44\n    #check for n = 45\n    #check for n = 46\n    #check for n = 47\n    #check for n = 48\n    #check for n = 49\n    #check for n = 50\n    #check for n = 51\n    #check for n = 52\n    #check for n = 53\n    #check for n = 54\n    #check for n = 55\n    #check for n = 56\n    #check for n = 57\n    #check for n = 58\n    #check for n = 59\n    #check for n = 60\n    #check for n = 61\n    #check for n = 62\n    #check for n = 63\n    #check for n = 64\n    #check for n = 65\n    #check for n = 66\n    #check for n = 67\n    #check for n = 68\n    #check for n = 69\n    #check for n = 70\n    #check for n = 71\n    #check for n = 72\n    #check for n = 73\n    #check for n = 74\n    #check for n = 75\n    #check for n = 76\n    #check for n = 77\n    #check for n = 78\n    #check for n = 79\n    #check for n = 80\n    #check for n = 81\n    #check for n = 82\n    #check for n = 83\n    #check for n = 84\n    #check for n = 85\n    #check for n = 86\n    #check for n = 87\n    #check for n = 88\n    #check for n = 89\n    #check for n = 90\n    #check for n = 91\n    #check for n = 92\n    #check for n = 93\n    #check for n = 94\n    #check for n = 95\n    #check for n = 96\n    #check for n = 97\n    #check for n = 98\n    #check for n = 99\n    #check for n = 100\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef tri(n):\n    \"\"\"You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tri(1) == [3]\nassert     tri(2) == [1, 1]\nassert     tri(3) == [3, 1, 1]\nassert     tri(4) == [3, 1, 1, 2, 1]\n",
        "num_ids_2": 24,
        "num_ids_4": 58
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert digits(1) == 0\nassert digits(123) == 3\nassert digits(0) == 0\nassert digits(89) == 8\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digits(1)    == 1\nassert     digits(2)    == 1\nassert     digits(3)    == 1\nassert     digits(4)    == 0\nassert     digits(5)    == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digits(1) == 1\nassert     digits(5) == 5\nassert     digits(15) == 15\nassert     digits(0) == 0\nassert     digits(10) == 0\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digits(2) == 2\nassert     digits(3) == 3\nassert     digits(10) == 10\nassert     digits(25) == 1\nassert     digits(52) == 6\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digits(5) == 5 * 1\nassert     digits(10) == 10 * 1\nassert     digits(11) == 11 * 1\nassert     digits(42) == 42 * 1\nassert     digits(55) == 55 * 1\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert digits(3) == 1\nassert digits(8) == 0\nassert digits(1) == 1\nassert digits(10) == 0\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digits(2) == 0\nassert     digits(3) == 0\nassert     digits(4) == 0\nassert     digits(5) == 0\nassert     digits(6) == 1\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digits(5) == 0, \"Wrong answer\"\nassert     digits(9) == 0, \"Wrong answer\"\nassert     digits(3) == 0, \"Wrong answer\"\nassert     digits(7) == 21, \"Wrong answer\"\nassert     digits(10) == 0, \"Wrong answer\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_nested('([{}])')\nassert is_nested('((()))')\nassert is_nested('(()[()])')\nassert not is_nested('[(])')\n",
        "num_ids_2": 16,
        "num_ids_4": 40
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_nested('') == False, \"Empty string is invalid\"\nassert is_nested('[}[{()}]') == True, \"Valid string should return True\"\nassert is_nested('[({[])]') == False, \"Invalid string should return False\"\nassert is_nested('[(])') == False, \"String can only contain brackets\"\n",
        "num_ids_2": 21,
        "num_ids_4": 69
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nested('[]') == True, \\\n            'You returned an incorrect result'\nassert     is_nested('[[') == False, \\\n            'You returned an incorrect result'\nassert     is_nested('[[]]') == True, \\\n            'You returned an incorrect result'\nassert     is_nested('[[[[[]]]]]') == True, \\\n            'You returned an incorrect result'\nassert     is_nested('[[[[[[[[[[]]]]]]]]]]]]]') == False, \\\n            'You returned an incorrect result'\n",
        "num_ids_2": 28,
        "num_ids_4": 62
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_nested('[[]]') == False\n\nassert \nis_nested('[[[]]]') == True\nassert \nis_nested('[[[]]]') == False\nassert \nis_nested('[[[]]]') == False\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_nested('[{()}]') == True\nassert is_nested('[{[()]}]') == False\nassert is_nested('{[()]}') == False\nassert is_nested('{[()]]') == False\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([2, 5, 1, -3]) == 14\nassert     sum_squares([-1, 2, -1]) == -3\nassert     sum_squares([-10, 5, 1, -3]) == 37\nassert     sum_squares([0, 1]) == 1",
        "num_ids_2": 38,
        "num_ids_4": 72
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([0, -1, 2, -3, 1]) == 14\nassert     sum_squares([-3, -1, 0, 1, 2]) == 5\nassert     sum_squares([0, -1, -3, -1, -4]) == 4\n",
        "num_ids_2": 44,
        "num_ids_4": 68
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 25\nassert     sum_squares([1,3,6,5,4]) == 50\nassert     sum_squares([1,2,3,4,5]) == 25\nassert     sum_squares([1,2,3,4,5,6]) == 90\nassert     sum_squares([1,2,3,4,5,6,7]) == 121\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_squares(['a', 'b', 'c']) == 'a^2 + b^2 + c^2'\nassert     sum_squares(['a', 'b', 'c', 'd']) == 'a^2 + b^2 + c^2 + d^2'\n\nprint('Test passed')\n",
        "num_ids_2": 71,
        "num_ids_4": 71
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_squares([]) == 0\nassert     sum_squares([1,2,3]) == 1\nassert     sum_squares([1,2,3,4]) == 5\nassert     sum_squares([2,4,6,8]) == 33\nassert     sum_squares([-1,-2,3]) == 5\n",
        "num_ids_2": 27,
        "num_ids_4": 63
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_squares([-4, -3, -1, 0, 1, 2, 5, 10]) == 33, \"Fail\"\nassert sum_squares([-4, -3, -1, 0, 1, 2, 5, 10]) == 33, \"Fail\"\n\ndef third_power(x):\n    \"\"\"\n    Given a number n, calculate the n^3.\n\n    Example:\n        input    output\n        8        64\n        9        81\n    \"\"\"\n    pass\n",
        "num_ids_2": 65,
        "num_ids_4": 65
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sum_squares([]) == 0, \"Empty List\"\nassert sum_squares([1]) == 1, \"Single Element\"\nassert sum_squares([1, 2]) == 4, \"Two Elements\"\nassert sum_squares([1, 2, 3]) == 14, \"Three Elements\"\n",
        "num_ids_2": 18,
        "num_ids_4": 52
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 30\nassert     sum_squares([3,4,5,6,7,8]) == 77\nassert     sum_squares([]) == 0\n\n\n\n\n",
        "num_ids_2": 42,
        "num_ids_4": 53
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsum_squares([-2, -1, 0, 2, 3, 4, 5]) == [0, 1, 4, 9, 16, 25, 36]\nassert sum_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4]) == [0, 1, 4, 9, 16, 25, 36]\n\ndef sum_squares2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \"\"\"\n    return sum([x * x for x in lst])\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter('a') == True\nassert check_if_last_char_is_a_letter('word') == False\nassert check_if_last_char_is_a_letter('it') == True\nassert check_if_last_char_is_a_letter('is') == True\nassert check_if_last_char_is_a_letter('!') == False\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('a') == True, 'assertion failed'\nassert     check_if_last_char_is_a_letter('hello') == False, 'assertion failed'\nassert     check_if_last_char_is_a_letter('abc') == False, '",
        "num_ids_2": 54,
        "num_ids_4": 77
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('a') == True, 'Fail'\nassert     check_if_last_char_is_a_letter('A') == True, 'Fail'\nassert     check_if_last_char_is_a_letter('a b') == True, 'Fail'\nassert     check_if_last_char_is_a_letter('b') == False, 'Fail'\nassert     check_if_last_char_is_a_letter('Hi') == False, 'Fail'\n",
        "num_ids_2": 50,
        "num_ids_4": 101
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('abc') == True\nassert     check_if_last_char_is_a_letter('abd') == False\nassert     check_if_last_char_is_a_letter('A') == True\nassert     check_if_last_char_is_a_letter('C') == False\nassert     check_if_last_char_is_a_letter('a') == True\n",
        "num_ids_2": 43,
        "num_ids_4": 85
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('aa bb cc dd ee')\nassert     check_if_last_char_is_a_letter('hello world')\nassert     check_if_last_char_is_a_letter('1a2b3c')\n\n\ndef check_if_first_char_is_a_vowel(txt):\n    '''\n    Create a function that returns True if the first character\n    of a given string is a vowel and False otherwise.\n    Note: \"vowel\" is a group of characters separated by space.\n    '''\n    pass\n",
        "num_ids_2": 45,
        "num_ids_4": 69
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter('abc') == True\nassert     check_if_last_char_is_a_letter('abz') == False\nassert     check_if_last_char_is_a_letter('abc ') == False\n\ndef check_if_last_char_is_a_letter_2(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    pass\n",
        "num_ids_2": 43,
        "num_ids_4": 65
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    '''\n    pass\n\nassert check_if_last_char_is_a_letter(\"Journey\") == False\nassert check_if_last_char_is_a_letter(\"journey\") == False\n",
        "num_ids_2": 24,
        "num_ids_4": 45
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('abcd') == False\nassert     check_if_last_char_is_a_letter('qwerty') == True\nassert     check_if_last_char_is_a_letter('abcdefghijklmnopqrstuvwxyz') == True\nassert     check_if_last_char_is_a_letter('h') == True\nassert     check_if_last_char_is_a_letter('9') == True\n",
        "num_ids_2": 45,
        "num_ids_4": 100
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"Dogs\")    == True\nassert     check_if_last_char_is_a_letter(\"Drs\")    == False\nassert     check_if_last_char_is_a_letter(\"Name\")    == False\nassert     check_if_last_char_is_a_letter(\"\")    == False\nassert     check_if_last_char_is_a_letter(\"Hello world\")    == False\n",
        "num_ids_2": 46,
        "num_ids_4": 89
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef can_arrange2(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    if len(arr) < 3:\n        return -1\n    res = -1\n    for i in range(0, len(arr)):\n        if arr[i] > arr[i + 1]:\n            res = i\n    return res\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(can_arrange([5, 4, 3, 2, 1])) # 5\nprint(can_arrange([5, 4, 3, 1])) # -1\nprint(can_arrange([1, 2, 3, 4, 5])) # 5\nprint(can_arrange([1, 2, 3])) # -1\nprint(can_arrange([1, 2])) # 0\nprint(can_arrange([1])) # 0\nprint(can_arrange([])) # -1\nprint(can_arrange([1,1,1,1])) # -1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_smallest_integers([0]) == (0, 0)\nassert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([-3, -1, 1, 2, 3]) == (3, 1)\nassert     largest_smallest_integers([-1, -5, 2, 4]) == (4, -1)\nassert     largest_smallest_integers([-1, 2, 3, 4, 5]) == (4, 5)\nprint('Tests passed.')",
        "num_ids_2": 37,
        "num_ids_4": 94
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([-4, 5, -2, -1, 0, 1, 2, 3, 4, 4]) == (4, -4), 'not working'\nassert     largest_smallest_integers([-3, 5, -2, -1, -4, 1, 2, 3, 4, 4]) == (4, -4), 'not working'\nassert     largest_smallest_integers([-3, 5, -2, -1, -4, 1, 2, 3, 4, 4]) == (5, -3), 'not working'\nassert     largest_smallest_integers([-3, -1, 0, 1, 2, 3, 4, 4]) == (4, -3), 'not working'\nassert     largest_smallest_integers([-1, 2, 3, 4]) == (4, -1), 'not working'\n",
        "num_ids_2": 91,
        "num_ids_4": 177
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([]) == None\nassert     largest_smallest_integers([1]) == (1, 1)\nassert     largest_smallest_integers([-1]) == (-1, -1)\nassert     largest_smallest_integers([-1, 1]) == (-1, 1)\nassert     largest_smallest_integers([-1, 1, -2, 2]) == (-1, 1)\n",
        "num_ids_2": 33,
        "num_ids_4": 76
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    largest_smallest_integers([3, 4, -5, 1, 2]) == (4, 1)\n    largest_smallest_integers([3, -5, 1, 2]) == (3, 2)\n    largest_smallest_integers([1, 2, 3, -5, -4]) == (3, -5)\n    largest_smallest_integers([-1, -2, -3, -4, -5]) == (-1, -4)\n    largest_smallest_integers([-1, -2, -3, -4, -5, -6]) == (-1, -6)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([4, -7, 3, -8]) == (-8, 4)\nassert     largest_smallest_integers([1, 5, -6]) == (1, -6)\nassert     largest_smallest_integers([-2, -3, 4, -5]) == (-5, -2)\nassert     largest_smallest_integers([3, -4, -5]) == (3, -4)\nassert     largest_smallest_integers([]) == (None, None)\n",
        "num_ids_2": 52,
        "num_ids_4": 107
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_smallest_integers([]) == (None, None)\nassert     largest_smallest_integers([1]) == (1, None)\nassert     largest_smallest_integers([1,1]) == (1, 1)\nassert     largest_smallest_integers([1,-1]) == (1, -1)\nassert     largest_smallest_integers([-1, 1]) == (-1, 1)\n",
        "num_ids_2": 37,
        "num_ids_4": 80
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_smallest_integers([-2,-1]) == (-2, -1), \\\n    'Wrong result for list [-2,-1]: {}'.format(largest_smallest_integers([-2,-1]))\nassert     largest_smallest_integers([-2,-1,-4]) == (-4, -2), \\\n    'Wrong result for list [-2,-1,-4]: {}'.format(largest_smallest_integers([-2,-1,-4]))\nassert     largest_smallest_integers([-2,3,-4]) == (-4,3), \\\n    'Wrong result for list [-2,3,-4]: {}'.format(largest_smallest_integers([-2,3,-4]))\nassert     largest_smallest_integers([1,2,3,-4]) == (-4,1), \\\n    'Wrong result for list [1,2,3,-4]: {}'.format(largest_smallest_integers([1,2,3,-4]))\nassert     largest_smallest_integers([]) == (None,None), \\\n    'Wrong result for empty list: {}'.format(largest_smallest_integers([]))\n",
        "num_ids_2": 50,
        "num_ids_4": 101
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlst = [-23, -5, -6, 0, 6, 23]\nassert largest_smallest_integers(lst) == (6, -5)\nlst = [-23, -5, -6, 0]\nassert largest_smallest_integers(lst) == (6, -23)\nlst = []\nassert largest_smallest_integers(lst) == None\nlst = [23, 5, 6, -4, -23]\nassert largest_smallest_integers(lst) == (5, -4)\nlst = [23, 5, 6, -4, 23]\n",
        "num_ids_2": 23,
        "num_ids_4": 58
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1, 2, 3, 4, 5]) == (5, 1), 'incorrect'\nassert     largest_smallest_integers([1, -2, 3, -4, 5]) == (-4, 1), 'incorrect'\nassert     largest_smallest_integers([-1, -2, 3, 4, 5]) == (-1, 5), 'incorrect'\nassert     largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, -1), 'incorrect'\nassert     largest_smallest_integers([1]) == (1, 1), 'incorrect'\n",
        "num_ids_2": 64,
        "num_ids_4": 134
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(1, 1) == None\nassert     compare_one(0, 1) == 1\nassert     compare_one(1, -1) == -1\nassert     compare_one('0.1', '1') == 1\nassert     compare_one('0.1', '-1') == -1\n",
        "num_ids_2": 28,
        "num_ids_4": 61
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare_one(1, 3) is None\nassert    compare_one(2, 2.0) is None\nassert    compare_one(\"1\", \"3\") is Non",
        "num_ids_2": 30,
        "num_ids_4": 45
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare_one(3, '4')    == None, 'The function should return None'\nassert     compare_one(4, '4')    == None, 'The function should return None'\nassert     compare_one(0, 0)    == None, 'The function should return None'\nassert     compare_one('a', '4')    == '4', 'The function should return \\'4\\' in string'\nassert     compare_one(3, '4.2')    == '4.2', 'The function should return \\'4.2\\' in string'\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncompare_one(0.1, 0.1) == 0.1\ncompare_one(3.5, 3.5) == None\ncompare_one(\"abc\", \"abc\") == None\ncompare_one(\"abc\", \"abcdef\") == None\ncompare_one(1.2, 2.3) == None\ncompare_one(\"abc\", \"abcd\") == None\ncompare_one(0.0, 1.0) == None\ncompare_one(-1.2, -1.2) == None\ncompare_one(1.2, 1.2) == 1.2\ncompare_one(2, 1) == None\ncompare_one(2, 1.1) == 1.1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert compare_one(100, -100) == None\nassert compare_one(100, -100.0) == None\nassert compare_one(100, \"100\") == None\nassert compare_one(-100, 100) == None\n",
        "num_ids_2": 16,
        "num_ids_4": 44
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert compare_one(1, 2) == 2\nassert compare_one(-2, 1) == 1\nassert compare_one(\"test\", -1) == None\nassert compare_one(1.1, 2.2) == 1.1\n",
        "num_ids_2": 15,
        "num_ids_4": 40
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare_one(1,1)    == None, \"Fail\"\nassert     compare_one(5,1)    == None, \"Fail\"\nassert     compare_one(1,2)    == 2, \"Fail\"\nassert     compare_one(1.1,1.1)    == None, \"Fail\"\nassert     compare_one(\"1.1\",1.1)    == None, \"Fail\"\n",
        "num_ids_2": 38,
        "num_ids_4": 80
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncompare_one(2, 2) == None\ncompare_one(2.2, 2.2) == None\ncompare_one('2', 2) == None\ncompare_one(2, '2') == None\ncompare_one('2', 2.2) == None\ncompare_one('2', '2') == None\ncompare_one(2, '2.2') == None\ncompare_one(2.2, '2') == None\ncompare_one('2.2', '2') == None\ncompare_one('2.2', '2.2') == None\n\nassert compare_one(2, 2) == None\nassert compare_one(2.2, 2.2) == None\n",
        "num_ids_2": 15,
        "num_ids_4": 31
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncompare_one(4, 5) == 5\ncompare_one(5, 5) == 5\ncompare_one(5.0, 5) == 5\ncompare_one('5.0', 5) == 5\ncompare_one('5.0', 5) == 5\ncompare_one('5.0', '5.0') == 5\ncompare_one('5.0', '5.01') == 5\ncompare_one('5.0', '5.001') == 5\ncompare_one('5.0', '5.00100') == 5\ncompare_one('5.0', '5.0.0') == 5\ncompare_one('5.0', '5.0.1') == 5\ncompare_one('5.0', '5.0.01') == 5\ncompare_one('5.0', '5.0.001') == 5\ncompare_one('5.0', '5.0.00001') == 5\ncompare_one('5.0', '5.0.000001') == 5\ncompare_one('5.0', '5.0.00000001') == 5\ncompare_one('5.0', '5.0.00000001') == 5\ncompare_one('5.0', '5.0.000000001') == 5\ncompare_one('5.0', '5.0.0000000001') == 5\ncompare_one('5.0', '5.0.00000000001') == 5\ncompare_one('5.0', '5.0.000000000001') == 5\ncompare_one('5.0', '5.0.0000000000001') == 5\ncompare_one('5.0', '5.0.00000000000001') == 5\ncompare_one('5.0', '5.0.000000000000001') == 5\ncompare_one('5.0', '5.0.00000000000001') == 5\ncompare_one('5.0', '5.0.000000000000001') == 5\ncompare_one('5.0', '5.0.000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncompare_one('5.0', '5.0.0000000000000001') == 5\ncom",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(30) == False\nassert     is_equal_to_sum_even(45) == False\nassert     is_equal_to_sum_even(15) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(25) == True\nassert     is_equal_to_sum_even(8) == False\n\ndef is_sum_of_evens(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly two positive even numbers\n    \"\"\"\n    pass\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_even_number(n):\n    \"\"\"Evaluate whether the given number n can be written as a sum of exactly 2 positive even numbers\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_equal_to_sum_even(6) == True\nassert     is_equal_to_sum_even(15) == False\nassert     is_equal_to_sum_even(8) == False",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(4) == False\nassert     is_equal_to_sum_even(9) == False\nassert     is_equal_to_sum_even(8) == True\nassert     is_equal_to_sum_even(18) == True\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     special_factorial(2) == 2\nassert     special_factorial(5) == 120\nassert     special_factorial(11) == 39916800\nassert     special_factorial(100) == factorial(100)\n",
        "num_ids_2": 24,
        "num_ids_4": 54
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         special_factorial(0) == 1, \"the special factorial of 0 should be 1\"\nassert         special_factorial(1) == 1, \"the special factorial of 1 should be 1\"\nassert         special_factorial(2) == 2, \"the special factorial of 2 should be 2\"\nassert         special_factorial(3) == 6, \"the special factorial of 3 should be 6\"\nassert         special_factorial(4) == 24, \"the special factorial of 4 should be 24\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     special_factorial(0)         == 1\nassert     special_factorial(1)         == 1\nassert     special_factorial(2)         == 2\nassert     special_factorial(3)         == 6\nassert     special_factorial(4)         == 24\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # some cases\n    print('n = 1 => ', 1)\n    print('n = 2 => ', 2)\n    print('n = 3 => ', 6)\n    print('n = 4 => ', 24)\n    print('n = 5 => ', 120)\n    print('n = 6 => ', 720)\n    print('n = 7 => ', 5040)\n    print('n = 8 => ', 40320)\n    print('n = 9 => ', 362880)\n    print('n = 10 => ', 3628800)\n    print('n = 11 => ', 39916800)\n    print('n = 12 => ', 479001600)\n    print('n = 13 => ', 6048001600)\n    print('n = 14 => ', 7776004800)\n    print('n = 15 => ', 151200144000)\n    print('n = 16 => ', 23021976720)\n    print('n = 17 => ', 355687428096)\n    print('n = 18 => ', 6227020800000)\n    print('n = 19 => ', 93326215440000)\n    print('n = 20 => ', 2432902008176640000)\n    print('n = 21 => ', 31542353981191680000)\n    print('n = 22 => ', 35425156597332832032000000)\n    print('n = 23 => ', 663514406732289664160000000)\n    print('n = 24 => ', 1055947052108769008000000000)\n    print('n = 25 => ', 2418637499277168037160000000)\n    print('n = 26 => ', 27486721607418566208000000000)\n    print('n = 27 => ', 1216954435482883816960000000)\n    print('n = 28 => ', 285211381906372361650000000)\n    print('n = 29 => ', 117917593429496430137000000000)\n    print('n = 30 => ', 30517104576374629688000000000)\n    print('n = 31 => ', 3589153716521859494400000000)\n    print('n = 32 => ', 25807362512457228570400000000)\n    print('n = 33 => ', 2296058572271734818250000000)\n    print('n = 34 => ', 173480144336034586235000000000)\n    print('n = 35 => ', 622614871558504152668000000000)\n    print('n = 36 => ', 4678511544301874342224000000000)\n    print('n = 37 => ', 3176154214533038876808000000000)\n    print('n = 38 => ', 214838555721675252584000000000)\n    print('n = 39 => ', 1079971006660089693312000000000)\n    print('n = 40 => ', 44188691989567142995650000000)\n    print('n = 41 => ', 238526764133988942626000000000)\n    print('n = 42 => ', 174077688812348245916000000000)\n    print('n = 43 => ', 711405026341868284613000000000)\n    print('n = 44 => ', 4179104583650504292186000000000)\n    print('n = 45 => ', 327912472744735697876000000000)\n    print('n = 46 => ', 220898018437549802778000000000)\n    print('n = 47 => ', 15757513205037174294000000000)\n    print('n = 48 => ', 729877478915353492696000000000)\n    print('n = 49 => ', 41724970060747600898000000000)\n    print('n = 50 => ', 31381003256756392348000000000)\n    print('n = 51 => ', 23022881707898140834000000000)\n    print('n = 52 => ', 14452330808855759616000000000)\n    print('n = 53 => ', 71505512361227963212000000000)\n    print('n = 54 => ', 410092689249585555386000000000)\n    print('n = 55 => ', 32390314271220014626000000000)\n    print('n = 56 => ', 2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fix_spaces(\"   this is a test\") == \"this_is_a_test\"\nassert     fix_spaces(\"this has a space\") == \"this_has_a_space\"\nassert     fix_spaces(\"hasn't a space\") == \"hasn_t_a_space\"\nassert     fix_spaces(\"space\") == \"space\"\nassert     fix_spaces(\"\") == \"\"\n",
        "num_ids_2": 47,
        "num_ids_4": 86
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert fix_spaces(\"       space  \") == \"space-\"\nassert fix_spaces(\"space \") == \"space-\"\nassert fix_spaces(\"   space \") == \"space-\"\n",
        "num_ids_2": 18,
        "num_ids_4": 47
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\"\"\"\n    Expected result:\n    `apple-cranberry-banana`\n    \n    For example, if the string contains\n    \n    apple-cranberry-banana\n    \n    then the output should be\n    \n    apple-cranberry-banana\n    \n    If the string contains\n    \n    apple-cranberry-banana\n    \n    then the output should be\n    \n    apple_cranberry_banana\n    \n    If the string contains\n    \n    apple-cranberry banana\n    \n    then the output should be\n    \n    apple_cranberry_banana\n    \n    If the string contains\n    \n    apple-cranberry banana\n    \n    then the output should be\n    \n    apple_cranberry_banana\n\"\"\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fix_spaces(\"some   text\") == \"some-text\"\nassert fix_spaces(\"some   text\") == \"some-text\"\nassert fix_spaces(\"some   text\") == \"some-text\"\nassert fix_spaces(\"some   text\") == \"some-text\"\nassert fix_spaces(\"some   text\") == \"some-text\"\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    \n\ndef get_text_width(text):\n    \"\"\"\n    Given a string text, return the width of the string,\n    in number of characters.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     file_name_check('a.txt') == 'Yes', 'Your function must return \"Yes\" if the file name is valid.'\nassert     file_name_check('A.txt') == 'No', 'Your function must return \"No\" if the file name is invalid.'\nassert     file_name_check('a.exe') == 'No', 'Your function must return \"No\" if the file name is invalid.'\nassert     file_name_check('a.dll') == 'No', 'Your function must return \"No\" if the file name is invalid.'\nassert     file_name_check('b.txt') == 'No', 'Your function must return \"No\" if the file name is invalid.'\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef file_name_check_wrapper(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    if not file_name_check(file_name):\n        return 'No'\n\n    file_name = file_name.lower()\n    return 'Yes' if file_name[0].isalpha() and file_name[1:].isalpha() and file_name[1:].isdigit() and len(file_name) < 4 else 'No'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     file_name_check('ex.txt') == 'Yes'\nassert     file_name_check('foo.bar') == 'Yes'\nassert     file_name_check('1.txt') == 'No'\nassert     file_name_check('a.b.txt') == 'No'\nassert     file_name_check('a.txt.exe') == 'No'\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     file_name_check('txt.exe') == 'No'\nassert     file_name_check('t.te') == 'Yes'\nassert     file_name_check('_t_e') == 'Yes'\nassert     file_name_check('0_t_e') == 'Yes'\nassert     file_name_check('1234567890abcde') == 'Yes'\n",
        "num_ids_2": 34,
        "num_ids_4": 71
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     file_name_check('snake.exe') == 'No', 'Function file_name_check does not return \"No\" for a valid file name'\nassert     file_name_check('1.txt') == 'No', 'Function file_name_check does not return \"No\" for a valid file name'\nassert     file_name_check('1.text') == 'No', 'Function file_name_check does not return \"No\" for a valid file name'\nassert     file_name_check('1.exe') == 'No', 'Function file_name_check does not return \"No\" for a valid file name'\nassert     file_name_check('text.1.txt') == 'No', 'Function file_name_check does not return \"No\" for a valid file name'\n",
        "num_ids_2": 73,
        "num_ids_4": 145
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     file_name_check('ahtb.txt') == \"Yes\", \"Not a valid file name\"\nassert     file_name_check('seas_comp.txt') == \"Yes\", \"Not a valid file name\"\nassert     file_name_check('titanic.exe') == \"No\", \"Not a valid file name\"\nassert     file_name_check('titanic.txt') == \"No\", \"Not a valid file name\"\nassert     file_name_check('athl.txt') == \"No\", \"Not a valid file name\"\n",
        "num_ids_2": 53,
        "num_ids_4": 105
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef file_name_substring_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(sum_squares([2, 7, 3, 9, 9, 2]))\nprint(sum_squares([1, 2, 3, 9, 8]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(sum_squares([0,2,3,4,5]))\nassert (0 == 0)\nassert (12 == sum_squares([1,2,3,4,5]))\nassert (2 == sum_squares([-1,-2,-3,-4,-5]))\nassert (1 == sum_squares([-7,1,2,3,4]))\n",
        "num_ids_2": 10,
        "num_ids_4": 53
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_squares(lst) == 15\nassert sum_squares(lst_2) == 12\nassert sum_squares(lst_3) == 16\nassert sum_squares(lst_4) == 16\n",
        "num_ids_2": 15,
        "num_ids_4": 43
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_squares([1,2,3,4,5]) == 1 + 4 + 9 + 16\nassert sum_squares([1,2,3,4]) == 1 + 4 + 9 + 16\nassert sum_squares([]) == 0",
        "num_ids_2": 28,
        "num_ids_4": 61
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_squares([1,2,3,4,5]) == ((1**2)+(2**2)+(3**2)+(4**2)+(5**2)) == 36, \"Wrong result\"\nassert     sum_squares([-1,-2,-3,-4,-5]) == ((-1**2)+(2**2)+(3**2)+(4**2)+(5**2)) == -2, \"Wrong result\"\nassert     sum_squares([-1,2,-3,-4,5]) == ((-1**2)+(2**2)+(3**2)+(4**2)+(5**2)) == 9, \"Wrong result\"\n",
        "num_ids_2": 107,
        "num_ids_4": 161
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_squares([1, 2, 3, 4, 5]) == 15\nassert sum_squares([2, 3, 5, 8, 11]) == 60\nassert sum_squares([1, 3, 5, 9, 11]) == 144\nassert sum_squares([-1, -3, -5, -9, -11]) == -81\nassert sum_squares([-2, -4, -6, -8, -10]) == -32\n",
        "num_ids_2": 22,
        "num_ids_4": 66
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"The answer is: \", sum_squares([3, 4, 5, 6, 7, 8, 9, 10]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_squares([1, 2, 3, 4]) == 14\n\nassert sum_squares([1, 2, 3, 4, 5, 6]) == 62\n\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    words_in_sentence('What is the most important word in this sentence?') =='most important word'\n    words_in_sentence('What is the most important word in this sentence?') =='most important word'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert words_in_sentence('I am a boy') == 'boy'\nassert words_in_sentence('I am a boy I am a girl') == 'boy girl'\nassert words_in_sentence('a a a a') == 'a a a'\nassert words_in_sentence('a a a') == 'a a'\n",
        "num_ids_2": 21,
        "num_ids_4": 64
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert words_in_sentence(\"Hello\") == \"Hello\", \"Your function should return a string with the words in a sentence\"\nassert words_in_sentence(\"Cat\") == \"Cat\", \"Your function should return a string with the words in a sentence\"\nassert words_in_sentence(\"The words are\") == \"The words\", \"Your function should return a string with the words in a sentence\"\nassert words_in_sentence(\"The words\") == \"The words\", \"Your function should return a string with the words in a sentence\"\n",
        "num_ids_2": 32,
        "num_ids_4": 93
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    words_in_sentence(\"no old friend\") == \"no onoe\"\n    words_in_sentence(\"a a\") == \"a a\"\n    words_in_sentence(\"a a b c\") == \"a a b\"\n    words_in_sentence(\"b c a\") == \"b a\"\n    words_in_sentence(\"hello world\") == \"hello\"\n    words_in_sentence(\"\") == \"\"\n    words_in_sentence(\"  \") == \"\"\n    words_in_sentence(\"No-old-friend\") == \"No-onoe\"\n    words_in_sentence(\"Hi Hi\") == \"Hi Hi\"\n    words_in_sentence(\"a b\") == \"a b\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\n    \"go to the green house\"\n    ) == \"go green house\"\nassert     words_in_sentence(\n    \"Sugar is not a vegetable\"\n    ) == \"Sugar is not a veg\"\n",
        "num_ids_2": 20,
        "num_ids_4": 20
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_in_sentence('hello') == 'hi'\nassert     words_in_sentence('hello hello hello') == 'hello'\nassert     words_in_sentence('hello hello hello hello') == 'hello'\nassert words_in_sentence('hello hello hello hello hello') == 'hello'\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_in_sentence(\"My name is Rex.\") == \"My name is Rex.\", \"Wrong answer\"\nassert     words_in_sentence(\"Leo is a good boy.\") == \"Leo is a good boy.\", \"Wrong answer\"\nassert     words_in_sentence(\"Leo is a nice girl.\") == \"Leo is a nice girl.\", \"Wrong answer\"\nassert     words_in_sentence(\"She is a girl.\") == \"She is a girl.\", \"Wrong answer\"\nprint('\"{}\" is a correct output'.format(words_in_sentence(\"She is a girl.\")))\n\nprint('Well done, all tests are passed!'",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     simplify(x, y) ==     (True, \"42\")\nassert     simplify(x, \"4\") ==     (True, \"42\")\nassert     simplify(x, \"0\") ==     (False, \"0\")\nassert     simplify(x, \"2\") ==     (False, \"2\")\nassert     simplify(\"2\", \"2\") == (False, \"2\")\n",
        "num_ids_2": 39,
        "num_ids_4": 79
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     simplify(\"4/3\", \"2/3\") == \"1/3\"\nassert     simplify(\"2/3\", \"4/3\") == \"2/3\"\nassert     simplify(\"-1/3\", \"4/3\") == \"1/3\"\nassert     simplify(\"-2/3\", \"4/3\") == \"1/3\"\nassert     simplify(\"2/3\", \"1/3\") == \"2/3\"\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (simplify(\"4/3\", \"1\") == True)\nassert     (simplify(\"1/1\", \"4\") == True)\nassert     (simplify(\"1/4\", \"1\") == False)\nassert     (simplify(\"1/3\", \"4\") == False)\nassert     (simplify(\"4/4\", \"1\") == True)\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert simplify('1/2', '1/2') == True\nassert simplify('4/3', '2') == False",
        "num_ids_2": 18,
        "num_ids_4": 31
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     simplify(x = \"2/4\", n = \"1/2\") == False\nassert     simplify(x = \"2/4\", n = \"1\") == False\nassert     simplify(x = \"1/2\", n = \"1\") == True\nassert     simplify(x = \"1/2\", n = \"0\") == False\nassert     simplify(x = \"1/2\", n = \"0/2\") == True\n",
        "num_ids_2": 44,
        "num_ids_4": 86
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     simplify('1/5', '6') == True\nassert     simplify('10/11', '2') == False\nassert     simplify('4/3', '2') == True\nassert     simplify('1/5', '3') == True\nassert     simplify('3/4', '2') == False\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([1, 2, 3, 4, 5]) ==     [1, 2, 4, 5, 3]\nassert     order_by_points([4, 5, 3, 2, 1]) ==     [1, 2, 3, 4, 5]\nassert     order_by_points([100,200,300,400,500]) ==     [100, 200, 300, 400, 500]\n",
        "num_ids_2": 64,
        "num_ids_4": 96
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([1]) == [1]\nassert     order_by_points([1,2,3]) == [1,2,3]\nassert     order_by_points([1,1,1]) == [1,1,1]\nassert     order_by_points([1,2,3,1]) == [1,1,1,2,3]\n",
        "num_ids_2": 27,
        "num_ids_4": 73
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     order_by_points([5,9,3,7,1,4]) == [1,3,4,5,7,9]\nassert     order_by_points([2,1,4,6,5,3]) == [1,2,3,4,5,6]\nassert     order_by_points([2,1,4,6,5,3,7]) == [1,2,3,4,5,6,7]",
        "num_ids_2": 70,
        "num_ids_4": 144
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     order_by_points([44, 2, 1, -11, -22, -1]) == [-1, 1, 2, -22, -11, 44]\nassert     order_by_points([1, 1, 1, 1]) == [1, 1, 1, 1]\nassert     order_by_points([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\n\n\ndef order_by_points2(nums):\n    \"\"\"\n    Another way of order_by_points\n    \"\"\"\n    def order_by_digit(nums):\n        return sorted(nums, key=lambda x: sum(int(d) for d in str(x)))\n    return order_by_digit(nums)\n",
        "num_ids_2": 67,
        "num_ids_4": 98
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([12, 2, 2, 1, 3, 4, 6, 7, 4, 6, 2, 4]) == [1, 2, 2, 3, 4, 4, 4, 6, 6, 7, 7, 12]\nassert     order_by_points([6, 5, 3, 4, 6, 1, 4, 5, 7, 1, 1, 1, 6]) == [1, 1, 1, 1, 1, 4, 4, 5, 5, 6, 6, 6, 6]\nassert     order_by_points([1, 5, 7, 6, 7, 7, 1, 6, 7, 2, 7, 6, 4]) == [1, 1, 1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 7]\nassert     order_by_points([7, 7, 7, 1, 1, 4, 4, 4, 4, 4, 4, 7]) == [1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 7, 7, 7]\n\n\n",
        "num_ids_2": 122,
        "num_ids_4": 252
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     order_by_points([8, -1, 3, -5]) == [3, -5, 8, -1]\nassert     order_by_points([-1, -1, -1, -1]) == [-1, -1, -1, -1]\nassert     order_by_points([4, 3, 6, 3, -4, 2, 1]) == [-4, 1, 2, 3, 3, 6, 4]\nassert     order_by_points([-1, -1, -1, -1, -1]) == [-1, -1, -1, -1, -1]\nassert order_by_points([]) == []\n",
        "num_ids_2": 65,
        "num_ids_4": 145
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([4,7,2,8,6,1,3,9,5]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert order_by_points([2,4,7,8,5,1,9,6,3]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert order_by_points([5,2,4,1,9,8,3,7,6]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert order_by_points([1,6,7,2,4,8,3,9,5]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert order_by_points([3,9,8,2,4,1,6,7,5]) == \\\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "num_ids_2": 57,
        "num_ids_4": 113
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     order_by_points([7, 3, 4, 8, 9, 2]) ==  [1, 3, 2, 4, 5, 0]\nassert     order_by_points([5, 6, 4, 3, 9, 8]) ==  [0, 1, 2, 3, 4, 5]\n\ndef add(a, b):\n    \"\"\"\n    Given two integers a and b, return their sum.\n    Should NOT use any built-in function.\n    \"\"\"\n    pass\n",
        "num_ids_2": 72,
        "num_ids_4": 72
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nspecialFilter([1, 4, 5, 6, 1, 8, 9, 9, 9, 7, 8, 5, 4, 5]) == 1\nassert \nspecialFilter([1, 5, 5, 7, 8, 5, 5, 4, 5, 9, 8, 8, 7, 6, 4]) == 2\nassert \nspecialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 3\nassert \nspecialFilter([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\nassert \nspecialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 10\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nspecialFilter([0,1,2,3,4,5,6,7,8,9]) == 8\nassert specialFilter([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1\nassert specialFilter([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 0\nassert specialFilter([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]) == 16\nassert specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195",
        "num_ids_2": 42,
        "num_ids_4": 606
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9, 3, 1]) == 5\nassert     specialFilter([-1, -3, -5, -7, -9, -3, -1]) == 8\nassert     specialFilter([1, 3, 5, 7, 9, -3, -1]) == 6\nassert     specialFilter([1, 3, 5, 7, 9, 3, -1]) == 6\nassert     specialFilter([-1, -3, -5, -7, -9, -3, -1]) == 5\n",
        "num_ids_2": 51,
        "num_ids_4": 98
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nnums = [1,2,3,4,5,6,7,8,9]\nnums_filtered = specialFilter(nums)\nprint(\"numbers that are greater than 10 and both first and last digits are odd =\",nums_filtered",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     specialFilter([1, 3, 5, 7, 9]) == 1\nassert     specialFilter([2, 3, 4, 5, 6, 7]) == 3\nassert     specialFilter([1, 3, 5, 7, 9, 9, 9, 9, 9, 9, 9]) == 2\nassert     specialFilter([]) == 0\nassert     specialFilter([1, 3, 5, 7, 9]) == 0\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 4\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 10]) == 8\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 10]) == 8\nassert     specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 10]) == 8\n",
        "num_ids_2": 56,
        "num_ids_4": 108
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 3\nassert     get_max_triples(3) == 6\nassert     get_max_triples(4) == 10\nassert     get_max_triples(5) == 14\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_max_triples(5) == 3\nassert     get_max_triples(10) == 6\nassert     get_max_triples(15) == 8\nassert     get_max_triples(20) == 15\nassert     get_max_triples(25) == 16\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_triples(0) == 0, \"Wrong\"\nassert     get_max_triples(1) == 0, \"Wrong\"\nassert     get_max_triples(2) == 1, \"Wrong\"\nassert     get_max_triples(3) == 3, \"Wrong\"\nassert     get_max_triples(4) == 6, \"Wrong\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_triples(3) == 2, \\\n    'get_max_triples(3) is wrong'\nassert     get_max_triples(7) == 3, \\\n    'get_max_triples(7) is wrong'\nassert     get_max_triples(8) == 4, \\\n    'get_max_triples(8) is wrong'\nassert     get_max_triples(13) == 5, \\\n    'get_max_triples(13) is wrong'\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_triples(1) ==     0, '1'\nassert     get_max_triples(2) ==     4, '2'\nassert     get_max_triples(3) ==     10, '3'\nassert     get_max_triples(4) ==     16, '4'\n\ndef get_max_triples_fast(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    Your algorithm should run in O(n^2) time.\n    \"\"\"\n    pass\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_triples(5) == 5\nassert     get_max_triples(7) == 5\nassert     get_max_triples(11) == 6\n",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Mercury\", \"Venus\")\nassert     bf(\"Venus\", \"Earth\") == (\"Venus\", \"Earth\")\nassert     bf(\"Mars\", \"Jupiter\") == (\"Mars\", \"Jupiter\")\nassert     bf(\"Earth\", \"Mars\") == ()\nassert     bf(\"Mars\", \"Saturn\") == (\"Mars\", \"Saturn\")\n",
        "num_ids_2": 40,
        "num_ids_4": 71
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    '''\n    # get the list of planets with orbits\n    pla = get_planets()\n    # create a dictionary with planet and its distance to the sun\n    d = {}\n    for planet in pla:\n        if planet not in (planet1, planet2):\n            d[planet] = calc_dist(planet1, planet)\n    # sort the planets by proximity to the sun\n    return sorted(d, key = d.get)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (bf('Mercury', 'Venus') == (('Mercury', 'Venus'), ('Venus', 'Earth'), ('Earth', 'Mars'), ('Mars', 'Jupiter'), ('Jupiter', 'Saturn'), ('Saturn', 'Uranus'), ('Uranus', 'Neptune')))\nassert     (bf('Earth', 'Venus') == (('Earth', 'Venus'), ('Venus', 'Mercury'), ('Mercury', 'Mars'), ('Mars', 'Jupiter'), ('Jupiter', 'Saturn'), ('Saturn', 'Uranus'), ('Uranus', 'Neptune')))\nassert     (bf('Venus', 'Earth') == (('Venus', 'Earth'), ('Earth', 'Mercury'), ('Mercury', 'Mars'), ('Mars', 'Jupiter'), ('Jupiter', 'Saturn'), ('Saturn', 'Uranus'), ('Uranus', 'Neptune')))\nassert     (bf('Saturn', 'Mars') == (('Saturn', 'Mars'), ('Mars', 'Mercury'), ('Mercury', 'Venus'), ('Venus', 'Earth'), ('Earth', 'Mars')))\nassert     (bf('Jupiter', 'Neptune') == (('Jupiter', 'Neptune'), ('Neptune', 'Saturn'), ('Saturn', 'Uranus'), ('Uranus', 'Mars'), ('Mars', 'Jupiter')))\n",
        "num_ids_2": 142,
        "num_ids_4": 262
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nbf('earth', 'neptune') == ('mars', 'jupiter','saturn', 'uranus','venus')\nassert bf('jupiter','saturn') == ()\nassert bf('neptune','venus') == ('earth','mars','saturn', 'uranus')\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nbf('venus', 'earth') == ('venus', 'earth')\nassert \nbf('venus','mars') == ('venus','mars')\nassert \nbf('venus', 'jupiter') == ('venus','mars','mars','mercury','mars')\nassert \nbf('venus', 'neptune') == ('venus','mars','mars','mercury','mars','mercury','venus')\nassert \nbf('mercury','venus') == ('mercury','mars','mars','mercury','mars','mercury','venus')\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert bf(\"Mercury\", \"Venus\") == (\"Mercury\", \"Venus\")\nassert bf(\"Venus\", \"Earth\") == (\"Venus\", \"Earth\")\nassert bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\")\nassert bf(\"Mars\", \"Jupiter\") == (\"Mars\", \"Jupiter\")\n",
        "num_ids_2": 24,
        "num_ids_4": 60
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bf('Mercury', 'Venus') == ('Mercury', 'Venus')\nassert     bf('Mercury', 'Earth') == ()\nassert     bf('Earth', 'Venus') == ()\nassert     bf('Mars', 'Earth') == ('Mars',)\nassert     bf('Mars', 'Venus') == ('Mars',)\n",
        "num_ids_2": 34,
        "num_ids_4": 62
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n\nprint(bf('Mercury', 'Venus'))\nprint(bf('Venus', 'Earth'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Jupiter'))\nprint(bf('Jupiter', 'Saturn'))\nprint(bf('Saturn', 'Uranus'))\nprint(bf('Uranus', 'Neptune'))\nprint(bf('Neptune', 'Pluto'))\nprint(bf('Pluto', 'Earth'))\nprint(bf('Earth', 'Mars'))\nprint(bf('Mars', 'Earth'))\nprint(bf('Earth', 'Jupiter'))\nprint(bf('Jupiter', 'Earth'))\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(sorted_list_sum(['clarke', 'emerson', 'james', 'jennifer', 'john']))\nassert sorted_list_sum(['clarke', 'emerson', 'james', 'jennifer', 'john']) == ['clarke', 'jennifer', 'john', 'james', 'emerson']\nprint(sorted_list_sum(['tobias', 'tania', 'tania', 'tobias']))\nassert sorted_list_sum(['tobias', 'tania', 'tania', 'tobias']) == ['tobias', 'tania', 'tania', 'tobias']\nprint(sorted_list_sum(['michael', 'linda', 'james', 'jennifer', 'john']))\nassert sorted_list_sum(['michael', 'linda', 'james', 'jennifer', 'john']) == ['john','michael', 'jennifer', 'james', 'linda']\nprint(sorted_list_sum(['michael', 'linda', 'james', 'jennifer', 'john', 'john', 'john', 'john', 'john']))\nassert sorted_list_sum(['michael', 'linda', 'james', 'jennifer', 'john', 'john', 'john', 'john', 'john']) == ['john', 'john', 'john', 'john', 'john', 'jennifer', 'linda','michael']\nprint(sorted_list_sum(['clarke', 'emerson', 'james', 'jennifer', 'john', 'john', 'john', 'john', 'john', 'john']))\n",
        "num_ids_2": 55,
        "num_ids_4": 150
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlst = ['aa', 'bb', 'cc', 'dd', 'dd', 'dd', 'ee']\nlst1 = ['aa', 'bb', 'cc', 'dd', 'dd', 'dd', 'ee']\nlst2 = sorted_list_sum(lst)\n\nprint('The first list: ', lst)\nprint('The first sorted list: ', lst1)\nprint('The first sorted list: ', lst2)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sorted_list_sum([\"a\",\"b\",\"c\",\"d\",\"e\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\"]\nassert     sorted_list_sum([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]\nassert     sorted_list_sum([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\nassert     sorted_list_sum([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"]\nassert     sorted_list_sum([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"]\n",
        "num_ids_2": 76,
        "num_ids_4": 172
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sorted_list_sum([\"alvin\", \"malvina\", \"alvin\", \"alvin\"]) == [\"alvin\", \"malvina\"]\nassert     sorted_list_sum([\"joe\", \"joe\", \"joe\"]) == [\"joe\", \"joe\"]\nassert     sorted_list_sum([\"daniel\", \"daniel\", \"daniel\"]) == [\"daniel\", \"daniel\"]\n",
        "num_ids_2": 70,
        "num_ids_4": 102
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sorted_list_sum(['sugar', 'freshes','sugar', 'orange', 'black', 'orange', 'black','sugar', 'orange','sugar','sugar', 'orange', 'black', 'orange','sugar', 'orange', 'black','sugar', 'orange', 'black', 'orange', 'black','sugar', 'orange', 'black', 'orange', 'black','sugar', 'orange', 'orange', 'orange','sugar','sugar', 'black', 'orange', 'black', 'black', 'orange', 'black', 'orange', 'black', 'orange', 'orange', 'orange', 'orange', 'orange', 'orange','sugar', 'orange','sugar', 'orange', 'black', 'orange', 'orange','sugar', 'orange', 'orange', 'orange','sugar','sugar', 'black', 'orange', 'black', 'black', 'orange', 'black', 'orange','sugar', 'black', 'orange', 'orange', 'black', 'orange', 'orange', 'orange', 'orange','sugar', 'black', 'orange', 'black','sugar', 'orange', 'orange', 'orange','sugar', 'orange', 'orange', 'orange','sugar', 'orange', 'black', 'orange','sugar', 'orange', 'orange','sugar', 'black', 'orange','sugar', 'orange','sugar', 'orange','sugar','sugar', 'orange','sugar', 'black', 'orange','sugar', 'orange', 'orange', 'orange','sugar','sugar', 'black', 'orange','sugar', 'orange', 'orange', 'orange', 'black', 'black', 'orange', 'black', 'black', 'orange', 'black', 'orange', 'black', 'black', 'orange','sugar','sugar', 'orange', 'black', 'orange', 'black', 'black', 'orange', 'black', 'orange', 'orange', 'orange','sugar', 'black', 'black', 'orange','sugar', 'orange','sugar', 'orange', 'orange','sugar','sugar', 'orange', 'orange', 'black', 'black', 'orange','sugar', 'black', 'orange', 'black', 'orange', 'orange', 'black', 'black', 'black', 'orange','sugar', 'orange','sugar', 'orange', 'orange', 'black', 'orange', 'black','sugar', 'orange', 'orange','sugar', 'black', 'orange','sugar', 'black', 'orange', 'orange','sugar', 'orange','sugar', 'orange','sugar', 'black', 'orange', 'orange', 'orange','sugar', 'orange','sugar', 'orange','sugar', 'black', 'orange','sugar', 'orange','sugar', 'orange','sugar', 'black', 'orange', 'orange','sugar', 'orange', 'orange', 'orange','sugar','sugar', 'orange','sugar', 'black', 'orange','sugar', 'orange','sugar','sugar', 'orange','sugar', 'black','sugar','sugar','sugar', 'black', 'orange','sugar','sugar', 'orange','sugar', 'orange', 'orange','sugar','sugar', 'orange','sugar','sugar', 'black', 'orange','sugar','sugar', 'orange','sugar', 'orange','sugar','sugar','sugar', 'orange','sugar','sugar','sugar', 'orange','sugar', 'black', 'orange','sugar', 'orange','sugar','sugar','sugar','sugar','sugar', 'black', 'orange','sugar','sugar', 'black', 'black', 'orange','sugar', 'orange','sugar','sugar','sugar', 'orange','sugar','sugar', 'orange','sugar','sugar','sugar', 'orange','sugar', 'orange','sugar','sugar','sugar','sugar', 'orange','sugar','sugar', 'orange','sugar', 'orange','sugar'",
        "num_ids_2": 919,
        "num_ids_4": 919
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     x_or_y(1, 1, 1)     ==     1\nassert     x_or_y(1, 0, 1)     ==     0\nassert     x_or_y(2, 1, 0)     ==     0\nassert     x_or_y(3, 1, 1)     ==     1\nassert     x_or_y(4, 1, 1)     ==     0\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nx_or_y(3, 1, 3) == 1\nx_or_y(0, 2, 3) == 3\nx_or_y(1, 3, 2) == 3\nx_or_y(2, 3, 1) == 1\n\nx_or_y(1, 2, 3) == 3\nx_or_y(4, 2, 3) == 1\nx_or_y(5, 2, 3) == 3\nx_or_y(6, 2, 3) == 1\nx_or_y(7, 2, 3) == 3\nx_or_y(8, 2, 3) == 1\nx_or_y(9, 2, 3) == 3\nx_or_y(10, 2, 3) == 1\nx_or_y(11, 2, 3) == 3\nx_or_y(12, 2, 3) == 1\nx_or_y(13, 2, 3) == 3\nx_or_y(14, 2, 3) == 1\nx_or_y(15, 2, 3) == 3\nx_or_y(16, 2, 3) == 1\nx_or_y(17, 2, 3) == 3\nx_or_y(18, 2, 3) == 1\nx_or_y(19, 2, 3) == 3\nx_or_y(20, 2, 3) == 1\nx_or_y(21, 2, 3) == 3\nx_or_y(22, 2, 3) == 1\nx_or_y(23, 2, 3) == 3\nx_or_y(24, 2, 3) == 1\nx_or_y(25, 2, 3) == 3\nx_or_y(26, 2, 3) == 1\nx_or_y(27, 2, 3) == 3\nx_or_y(28, 2, 3) == 1\nx_or_y(29, 2, 3) == 3\nx_or_y(30, 2, 3) == 1\nx_or_y(31, 2, 3) == 3\nx_or_y(32, 2, 3) == 1\nx_or_y(33, 2, 3) == 3\nx_or_y(34, 2, 3) == 1\nx_or_y(35, 2, 3) == 3\nx_or_y(36, 2, 3) == 1\nx_or_y(37, 2, 3) == 3\nx_or_y(38, 2, 3) == 1\nx_or_y(39, 2, 3) == 3\nx_or_y(40, 2, 3) == 1\nx_or_y(41, 2, 3) == 3\nx_or_y(42, 2, 3) == 1\nx_or_y(43, 2, 3) == 3\nx_or_y(44, 2, 3) == 1\nx_or_y(45, 2, 3) == 3\nx_or_y(46, 2, 3) == 1\nx_or_y(47, 2, 3) == 3\nx_or_y(48, 2, 3) == 1\nx_or_y(49, 2, 3) == 3\nx_or_y(50, 2, 3) == 1\nx_or_y(51, 2, 3) == 3\nx_or_y(52, 2, 3) == 1\nx_or_y(53, 2, 3) == 3\nx_or_y(54, 2, 3) == 1\nx_or_y(55, 2, 3) == 3\nx_or_y(56, 2, 3) == 1\nx_or_y(57, 2, 3) == 3\nx_or_y(58, 2, 3) == 1\nx_or_y(59, 2, 3) == 3\nx_or_y(60, 2, 3) == 1\nx_or_y(61, 2, 3) == 3\nx_or_y(62, 2, 3) == 1\nx_or_y(63, 2, 3) == 3\nx_or_y(64, 2, 3) == 1\nx_or_y(65, 2, 3) == 3\nx_or_y(66, 2, 3) == 1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     x_or_y(2, 1, 2) == 1\nassert     x_or_y(4, 4, 1) == 1\nassert     x_or_y(1, 1, 2) == 2\nassert     x_or_y(3, 4, 3) == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     x_or_y(7, \"x\", \"y\") == \"x\"\nassert     x_or_y(7, \"y\", \"y\") == \"y\"\nassert     x_or_y(2, \"x\", \"y\") == \"x\"\nassert     x_or_y(2, \"y\", \"y\") == \"y\"\nassert     x_or_y(2, \"x\", \"x\") == \"x\"\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    double_the_difference([]) == 0, \"There are no items in the list\"\n    double_the_difference([-2, -3, 4]) == 5\n    double_the_difference([1, 2, 3, 4, 5]) == 4\n    double_the_difference([-3, -1, -5, -2]) == -10\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     double_the_difference([1, -1, 2, -3, 3]) == 0, \"Not empty list\"\nassert     double_the_difference([]) == 0, \"Empty list\"\nassert     double_the_difference([1, 3, 5, 7, 9]) == 25, \"Even numbers\"\nassert     double_the_difference([0, 3, 5, 7, 9]) == 25, \"Negative numbers\"\nassert     double_the_difference([3, 5, 7, 9]) == 25, \"Non-numbers\"\n",
        "num_ids_2": 48,
        "num_ids_4": 103
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndouble_the_difference([1, 2, 3, 4]) == 10\nassert double_the_difference([4, 3, 2]) == 7\nassert double_the_difference([4, 3, -2]) == 7\nassert double_the_difference([]) == 0\nassert double_the_difference(['apple', 'banana', 'pineapple']) == 52",
        "num_ids_2": 20,
        "num_ids_4": 50
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     double_the_difference([]) == 0, 'Empty list: %s' % double_the_difference\nassert     double_the_difference([2, 4, 6]) == 25, 'Odd numbers: %s' % double_the_difference\nassert     double_the_difference([0, 1, -2, 3, -5]) == 0, 'Negative numbers not allowed: %s' % double_the_difference\nassert     double_the_difference([0, 1, -2, 3, -5, 9, -1, 5, -8]) == 0, 'Negative numbers not allowed: %s' % double_the_difference\n\nprint('Test passed')\n",
        "num_ids_2": 62,
        "num_ids_4": 156
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    double_the_difference([1, 2, 3, 4, 5]) == 25\n    double_the_difference([1, -2, 3, 4, 5]) == 25\n    double_the_difference([1, 2, 3, 4, -5]) == 25\n    double_the_difference([]) == 0\n    double_the_difference(['a', 'b', 'c']) == ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) == 20, double_the_difference([1, 2, 3, 4])\nassert double_the_difference([1, 2, 3, 4, -5, -6]) == 29\nassert double_the_difference([-5, -6]) == 0\n\n\ndef sign_of_four(n):\n    '''\n    Given a number, return \"positive\", \"negative\", or \"zero\" if the number is positive,\n    negative, or zero.\n    '''\n    pass\n",
        "num_ids_2": 61,
        "num_ids_4": 78
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (compare(game,guess) == correct)\nprint(\"Congratulations on the correct answer!\")\n",
        "num_ids_2": 15,
        "num_ids_4": 15
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare([4, 5, 6, 3, 7, 2, 1], [5, 7, 6, 3, 4, 2, 1]) == [2, 5, 0, 2, 2, 5, 0]\nassert     compare([2, 4, 6, 3, 7, 2, 1], [5, 7, 6, 3, 4, 2, 1]) == [0, 0, 1, 0, 2, 1, 0]\nassert     compare([1, 5, 7, 3, 7, 2, 1], [5, 7, 6, 3, 4, 2, 1]) == [0, 1, 0, 0, 1, 0, 1]\nassert     compare([10, 2, 3, 1, 2, 4, 5], [7, 8, 9, 10, 11, 12, 13]) == [0, 0, 0, 1, 0, 1, 0]\n\n\n",
        "num_ids_2": 102,
        "num_ids_4": 204
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare([10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10], [9,7,10,3,4,0,1,2,8,6,5,5,6,7,2,3,4,1,10,9,8]) == [0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1]\nassert     compare([10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10], [9,7,10,3,4,0,1,2,8,6,5,5,6,7,2,3,4,1,10,9,8]) == [0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1]\nassert     compare([10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10], [9,7,10,3,4,0,1,2,8,6,5,5,6,7,2,3,4,1,10,9,8]) == [0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1]\nassert     compare([10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10], [9,7,10,3,4,0,1,2,8,6,5,5,6,7,2,3,4,1,10,9,8]) == [0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1]\nassert     compare([10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10], [9,7,10,3,4,0,1,2,8,6,5,5,6,7,2,3,4,1,10,9,8]) == [0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1]\n",
        "num_ids_2": 270,
        "num_ids_4": 540
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncompare([7,8,9,10],[8,7,9,10]) ==[2,0,0,0], \"Your answer does not match the expected result\"\nassert \ncompare([4,5,6,7],[7,8,9,10]) ==[0,0,0,2], \"Your answer does not match the expected result\"\nassert \ncompare([5,6,7,8],[7,8,9,10]) ==[0,2,0,0], \"Your answer does not match the expected result\"\nassert \ncompare([5,6,7,8],[7,8,9,10]) ==[0,2,0,0], \"Your answer does not match the expected result\"\nassert \ncompare([2,3,4,5],[5,6,7,8]) ==[0,1,1,1], \"Your answer does not match the expected result\"\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare([(0,0,0),(1,1,1)],[(0,0,0),(1,1,1)]) == [0,0]\nassert     compare([(0,0,0),(0,0,1)],[(1,0,1),(0,0,0)]) == [0,0]\nassert     compare([(0,0,0),(0,0,1)],[(1,1,1),(0,0,0)]) == [0,0]\nassert     compare([(0,0,0),(0,0,1)],[(1,0,0),(0,0,0)]) == [0,0]\n",
        "num_ids_2": 84,
        "num_ids_4": 168
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare([5,1],[2,3]) ==  [1,0]\nassert     compare([1,2],[3,4]) ==  [0,1]\nassert     compare([1,3],[2,4]) ==  [2,1]\nassert     compare([2,3],[1,4]) ==  [0,1]\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     compare([1,2,3,4,5,6],[1,2,3,4,5,6]) == [0,0,0,0,0,0], 'incorrect compare function'\nassert     compare([3,4,1,2,5,6],[1,2,3,4,5,6]) == [-1,-1,-1,-1,-1,-1], 'incorrect compare function'\nassert     compare([7,8,9,2,4,6],[1,2,3,4,5,6]) == [-1,-1,-1,0,-1,-1], 'incorrect compare function'\nassert     compare([3,2,2,1,3,4],[1,2,3,4,5,6]) == [-1,-1,-1,-1,-1,-1], 'incorrect compare function'\n\nprint('You passed all the tests. Great job!'",
        "num_ids_2": 100,
        "num_ids_4": 200
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare([[2, 2, 2], [-1, -2, 1], [-2, -1, 2], [1, -2, -1]], [1, 0, 0, 0]) == [0, 0, 0, 2], \"Wrong!\"\nassert     compare([[2, 2, 2], [-1, -2, 1], [-2, -1, 2], [1, -2, -1]], [0, 0, 0, 0]) == [0, 0, 0, 0], \"Wrong!\"\nassert     compare([[2, 2, 2], [-1, -2, 1], [-2, -1, 2], [1, -2, -1]], [1, 2, 0, 0]) == [0, 0, 2, 0], \"Wrong!\"\nassert     compare([[2, 2, 2], [-1, -2, 1], [-2, -1, 2], [1, -2, -1]], [-2, 1, 2, 0]) == [-2, 0, 0, 2], \"Wrong!\"\n",
        "num_ids_2": 124,
        "num_ids_4": 248
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Strongest_Extension(\n            'Slices', \n            ['SErviNGSliCes', 'Cheese', 'StuFfed']\n        ) == 'Slices.SErviNGSliCes', \\\n            \"Error in Strongest_Extension\"\n",
        "num_ids_2": 9,
        "num_ids_4": 9
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Fruit', ['Yellow', 'Fruit', 'Clover']) == 'Fruit.Yellow'",
        "num_ids_2": 80,
        "num_ids_4": 80
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert (cycpattern_check(\"abc\", \"cba\") == True), \"First\"\nassert (cycpattern_check(\"a\", \"a\") == True), \"Second\"\nassert (cycpattern_check(\"a\", \"aa\") == False), \"Third\"\nassert (cycpattern_check(\"a\", \"ab\") == False), \"Fourth\"\n",
        "num_ids_2": 24,
        "num_ids_4": 64
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check(a = \"god\", b = \"dog\") == False, \"First\"\nassert     cycpattern_check(a = \"dog\", b = \"god\") == True, \"Second\"\nassert     cycpattern_check(a = \"good\", b = \"good\") == True, \"Third\"\nassert     cycpattern_check(a = \"bad\", b = \"good\") == False, \"Fourth\"\nassert     cycpattern_check(a = \"b\", b = \"g\") == False, \"Fifth\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cycpattern_check(\"cab\",\"ca\") == True\nassert     cycpattern_check(\"cab\",\"c\") == False\nassert     cycpattern_check(\"cab\",\"b\") == True\nassert     cycpattern_check(\"cab\",\"ac\") == True\nassert     cycpattern_check(\"cab\",\"b\") == True\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cycpattern_check(\"meet\", \"cat\")\nassert     cycpattern_check(\"hello\", \"abc\")\nassert     cycpattern_check(\"hello\", \"ell\")\nassert     cycpattern_check(\"hello\", \"lo\")\nassert     cycpattern_check(\"hello\", \"helllo\")\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (cycpattern_check('abcd', 'bacd') == True), 'Should return True for the first case.'\nassert (cycpattern_check('abcd', 'abcd') == True), 'Should return True for the second case.'\nassert (cycpattern_check('abcd', 'abcd') == False), 'Should return False for the third case.'\nassert (cycpattern_check('abc', 'acb') == True), 'Should return True for the fourth case.'\n\nprint('All tests passed'",
        "num_ids_2": 58,
        "num_ids_4": 113
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert cycpattern_check('cab', 'aabcbc')\nassert cycpattern_check('aabccb', 'aabcbc')\nassert not cycpattern_check('aabcbc', 'abccba')\nassert cycpattern_check('a', 'b')\n",
        "num_ids_2": 19,
        "num_ids_4": 55
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert cycpattern_check('abcde', 'cdeab') == True\nassert cycpattern_check('abcde', 'abcd') == False\nassert cycpattern_check('abcde', 'abcdea') == True\nassert cycpattern_check('abcde', 'bcade') == True\n",
        "num_ids_2": 21,
        "num_ids_4": 56
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cycpattern_check(\"waterbottle\",\"rotatebottlewater\")\nassert not cycpattern_check(\"waterbottle\",\"rotatebottle\")\nassert cycpattern_check(\"waterbottle\",\"tawerbottle\")\n",
        "num_ids_2": 37,
        "num_ids_4": 55
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cycpattern_check('abcd', 'abcd')==True, 'example 1'\nassert cycpattern_check('abcd', 'abcde')==False, 'example 2'\nassert cycpattern_check('abc', 'cba')==True, 'example 3'\nassert cycpattern_check('abc', 'abcba')==True, 'example 4'\nassert cycpattern_check('abc', 'abcabc')==True, 'example 5'\n",
        "num_ids_2": 45,
        "num_ids_4": 87
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cycpattern_check('cab', 'cab') == True\nassert     cycpattern_check('cab', 'ca') == False\nassert     cycpattern_check('f', 'f') == True\n",
        "num_ids_2": 35,
        "num_ids_4": 51
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_odd_count(10) == (2,0)\neven_odd_count(53) == (1,2)\neven_odd_count(200) == (0,2)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert even_odd_count(1234) == (1, 3)\nassert even_odd_count(2222) == (2, 2)\nassert even_odd_count(1241) == (1, 3)\nassert even_odd_count(11) == (1, 1)\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_odd_count(20) == (2,4)\neven_odd_count(1) == (1,1)\neven_odd_count(100) == (2,88)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_odd_count(12) == (2, 2)\nprint('correct')\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_count(15) == (3, 1), 'incorrect'\nassert     even_odd_count(12) == (2, 2), 'incorrect'\nassert     even_odd_count(10000) == (2, 4), 'incorrect'\n",
        "num_ids_2": 42,
        "num_ids_4": 63
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert int_to_mini_roman(0) == '0'\nassert int_to_mini_roman(1) == 'I'\nassert int_to_mini_roman(2) == 'II'\nassert int_to_mini_roman(3) == 'III'\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(10) == \"X\"\nassert     int_to_mini_roman(11) == \"XI\"\nassert     int_to_mini_roman(999) == \"XCIX\"\n",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(9) == 'IX'\nassert     int_to_mini_roman(58) == 'LVIII'\nassert     int_to_mini_roman(1994) == 'MCMXCIV'",
        "num_ids_2": 34,
        "num_ids_4": 69
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\nassert     int_to_mini_roman(9) == 'IX'\nassert     int_to_mini_roman(10) == 'X'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(0) == \"I\"\nassert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     int_to_mini_roman(2) == \"XX\", \"XX should be returned\"\nassert     int_to_mini_roman(9) == \"IX\", \"IX should be returned\"\nassert     int_to_mini_roman(11) == \"XI\", \"XI should be returned\"\nassert     int_to_mini_roman(10) == \"X\", \"X should be returned\"\nassert     int_to_mini_roman(1) == \"I\", \"I should be returned\"\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(1,1,1) == True\nassert     right_angle_triangle(1,2,3) == False\nassert     right_angle_triangle(2,1,3) == True\nassert     right_angle_triangle(3,1,2) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert right_angle_triangle(3, 4, 5) is False\nassert right_angle_triangle(1, 1, 1) is True\nassert right_angle_triangle(1, 2, 1) is True\nassert right_angle_triangle(1, 2, 2) is True\n",
        "num_ids_2": 20,
        "num_ids_4": 54
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(5, 4, 3) == True\nassert     right_angle_triangle(1, 1, 1) == False\n\nprint('All tests passed!')",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nSolution\n\n'''\ndef right_angle_triangle(a, b, c):\n    if a == b and b == c:\n        return False\n    if a * a + b * b == c * c or a * a + c * c == b * b or b * b + c * c == a * a:\n        return True\n    return False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     right_angle_triangle(1, 2, 3) == True, \\\n        'Right-angle triangle (1, 2, 3) should be True'\nassert     right_angle_triangle(1, 3, 2) == True, \\\n        'Right-angle triangle (1, 3, 2) should be True'\nassert     right_angle_triangle(1, 2, 1) == False, \\\n        'Right-angle triangle (1, 2, 1) should be False'\n\nprint('Test passed.'",
        "num_ids_2": 40,
        "num_ids_4": 60
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(1, 2, 3) == False\nassert     right_angle_triangle(5, 6, 7) == True\nassert     right_angle_triangle(8, 6, 10) == True\nassert     right_angle_triangle(6, 10, 8) == False",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nComplexity analysis\n\nThe time complexity is O(n), as we need to iterate over the elements of the list \nto find the sum of the squared numbers. The time complexity of the space complexity\nis O(1).\n'''\n\ndef make_array(n):\n    '''\n    Return a list of n integers between 1 and 10.\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(5, 7, 3) == True, \\\n            \"Should be True\"\nassert     right_angle_triangle(4, 6, 5) == True, \\\n            \"Should be True\"\nassert     right_angle_triangle(1, 4, 6) == True, \\\n            \"Should be True\"\nassert     right_angle_triangle(2, 4, 5) == False, \\\n            \"Should be False\"\nassert     right_angle_triangle(4, 5, 3) == False, \\\n            \"Should be False\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(3, 4, 5) == False\nassert right_angle_triangle(4, 5, 6) == False\nassert right_angle_triangle(5, 6, 7) == True\nassert right_angle_triangle(6, 7, 8) == True\nassert right_angle_triangle(7, 8, 9) == False\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_max([\"test1\", \"test2\", \"test3\", \"test4\", \"test5\"]) == \"test3\"\nassert     find_max([\"test1\", \"test2\", \"test3\"]) == \"test3\"\nassert     find_max([\"test1\", \"test2\", \"test3\", \"test4\", \"test5\"]) == \"test5\"\n\n",
        "num_ids_2": 58,
        "num_ids_4": 91
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(find_max([\"hello\", \"hi\", \"world\"]))\nprint(find_max([\"World\", \"Hello\", \"hi\"]))\nprint(find_max([\"hi\", \"hello\", \"World\"]))\nprint(find_max([\"Hello\", \"World\", \"hi\"]))\nprint(find_max([\"World\", \"hi\", \"Hello\"]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_max(['hello', 'world']) == 'world', \"Find_max\"\nassert     find_max(['hello', 'hello']) == 'hello', \"Find_max\"\nassert     find_max(['hello', 'hellothere']) == 'hello', \"Find_max\"\nassert     find_max(['hello', 'h']) == 'h', \"Find_max\"\nassert     find_max(['hello', 'ello']) == 'hello', \"Find_max\"\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_max([\"python\", \"programming\", \"tutorial\", \"program\", \"algorithm\"]) == \"tutorial\"\nassert     find_max([\"programmer\", \"program\", \"tutorial\", \"python\"]) == \"program\"\nassert     find_max([\"tutorial\", \"program\", \"programmer\", \"python\"]) == \"tutorial\"\n\nprint('You pass all the tests!'",
        "num_ids_2": 57,
        "num_ids_4": 84
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert\nassert\n\nprint('\\n***** Task 8: *****')\nprint('Check the correctness of your code')\nprint()\n\nprint('***** Task 9: *****')\nprint('Check the correctness of your code')\nprint()\n",
        "num_ids_2": 5,
        "num_ids_4": 7
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_max([ 'a','d', 'e', 'd', 'a' ]) == 'd', 'Should find \"d\"'\nassert     find_max([ 'a','d', 'e', 'd', 'a', 'd', 'a' ]) == 'd', 'Should find \"d\"'\nassert     find_max([ 'a','d', 'e', 'd', 'a', 'd', 'a', 'd', 'a' ]) == 'd', 'Should find \"d\"'\nassert     find_max([ 'a','d', 'e', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a', 'd', 'a'",
        "num_ids_2": 70,
        "num_ids_4": 1023
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_max(['aaa', 'bbb', 'ccc', 'bbb']) == 'aaa'\nassert     find_max(['aaaa', 'bbb', 'ccc', 'bbb']) == 'aaaa'\nassert     find_max(['aaaa', 'bbb', 'ccc', 'bbb', 'aaaa', 'bbb']) == 'aaaa'\nassert     find_max(['bbb', 'ccc', 'bbb', 'aaaa', 'bbb', 'aaaa']) == 'bbb'\n",
        "num_ids_2": 54,
        "num_ids_4": 123
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert find_max([]) == None\nassert find_max(['hello', 'helo']) == 'hello'\nassert find_max(['hello', 'helo', 'apple']) == 'hello'\n",
        "num_ids_2": 12,
        "num_ids_4": 51
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_max([]) == None, \"Empty list\"\nassert     find_max([]) == None, \"Single element\"\nassert     find_max(['a', 'b', 'c', 'd']) == 'c', \"Strings\"\nassert     find_max(['a', 'aa', 'bb', 'ccc', 'dddd', 'eeee', 'iiii', 'jjjj']) == 'aaaaaa', \"Many strings\"\n\nprint(\"All tests passed!\")\n",
        "num_ids_2": 30,
        "num_ids_4": 103
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eat(1, 0, 0) ==     [2, 0], '''Your function eat should return 2 carrots and 0 remaining carrots after your meals'''\nassert     eat(1, 1, 0) ==     [2, 1], '''Your function eat should return 2 carrots and 1 remaining carrots after your meals'''\nassert     eat(2, 0, 0) ==     [2, 0], '''Your function eat should return 2 carrots and 0 remaining carrots after your meals'''\nassert     eat(2, 1, 0) ==     [2, 1], '''Your function eat should return 2 carrots and 1 remaining carrots after your meals'''\nassert     eat(4, 1, 2) ==     [4, 2], '''Your function eat should return 4 carrots and 2 remaining carrots after your meals'''\n",
        "num_ids_2": 72,
        "num_ids_4": 144
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    eat(5, 10, 10) == (15, 5)\n    eat(5, 5, 5) == (10, 0)\n    eat(5, 0, 5) == (5, 0)\n    eat(5, 2, 2) == (7, 2)\n    eat(2, 5, 2) == (7, 2)\n    eat(3, 1, 1) == (4, 1)\n    eat(2, 0, 0) == (0, 0)\n    eat(1, 1, 1) == (1, 0)\n    eat(1, 1, 1) == (0, 1)\n    eat(1, 2, 2) == (1, 2)\n    eat(1, 1, 1) == (1, 1)\n\n\ndef fizz_buzz(number, order):\n    \"\"\"\n    Return fizz_buzzed version of given number.\n    \n    Variables:\n    @number : integer\n        the number to be fizz_buzzed.\n    @order : integer\n        the order of fizz_buzzing, either 1 or 2.\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 1 <= order <= 1000\n\n    Have fun :)\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     eat(1, 5, 2) == [5, 7], \"Wrong solution\"\nassert     eat(1, 5, 7) == [10, 7], \"Wrong solution\"\nassert     eat(10, 1, 10) == [11, 1], \"Wrong solution\"\nassert     eat(0, 1, 1) == [0, 0], \"Wrong solution\"",
        "num_ids_2": 44,
        "num_ids_4": 88
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eat(2, 200, 150) == ([1000, 250], 0), \"HINT: you need to handle the edge case when the remaining carrots are not enough\"\nassert eat(100, 500, 400) == ([1000, 500], 400), \"HINT: you need to handle the edge case when the remaining carrots are not enough\"\nassert eat(400, 500, 400) == ([1000, 500], 500), \"HINT: you need to handle the edge case when the remaining carrots are not enough\"\nassert eat(300, 600, 700) == ([1000, 700], 300), \"HINT: you need to handle the edge case when the remaining carrots are not enough\"\nassert eat(200, 300, 500) == ([1000, 500], 0), \"HINT: you need to handle the edge case when the remaining carrots are not enough\"\n",
        "num_ids_2": 75,
        "num_ids_4": 149
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    eat(20, 60, 10) == [70, 90], \"Wrong answer. Must eat 70 carrots and return 90 carrots.\"\n    eat(60, 60, 100) == [100, 0], \"Wrong answer. Must eat 100 carrots and return 0 carrots.\"\n    eat(60, 60, 60) == [60, 60], \"Wrong answer. Must eat 60 carrots and return 60 carrots.\"\n    eat(20, 60, 60) == [20, 20], \"Wrong answer. Must eat 20 carrots and return 20 carrots.\"\n    eat(20, 60, 0) == [20, 20], \"Wrong answer. Must eat 20 carrots and return 20 carrots.\"\n    eat(20, 0, 60) == [20, 20], \"Wrong answer. Must eat 20 carrots and return 20 carrots.\"\n    eat(0, 60, 60) == [0, 0], \"Wrong answer. Must eat 0 carrots and return 0 carrots.",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eat(1, 3, 2) == [4, 3]\nassert     eat(2, 3, 2) == [4, 0]\nassert     eat(3, 3, 2) == [5, 0]\nassert     eat(4, 3, 2) == [5, 1]\nassert     eat(5, 3, 2) == [5, 2]\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (eat(1000, 1000, 1000) == [1001, 0]), \"Test 1: Wrong Answer\"\nassert     (eat(11, 10, 5) == [12, 6]), \"Test 2: Wrong Answer\"\nassert     (eat(1, 1, 0) == [2, 1]), \"Test 3: Wrong Answer\"\n\nprint(\"All the tests are passed\")",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert eat(17, 0, 17) == [18, 0]\nassert eat(0, 0, 17) == [0, 0]\nassert eat(17, 0, 0) == [17, 17]\nassert eat(17, 4, 17) == [17, 17]\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eat(1, 2, 3) == [4, 1], \"eat function is not correct\"\nassert     eat(6, 10, 2) == [18, 2], \"eat function is not correct\"\n",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     do_algebra(['+', 2, '-'], [3, 1, 4]) == 7, \"Fail: do_algebra\"\nassert     do_algebra(['+', '-', 1], ['+', 1, 1]) == 2, \"Fail: do_algebra\"\nassert     do_algebra(['-', '+', 1], ['+', 1, 1]) == 2, \"Fail: do_algebra\"\nassert     do_algebra(['+', 1, '-'], ['+', 1, 1]) == 1, \"Fail: do_algebra\"\nassert     do_algebra(['+', 1, '-'], ['+', 1, '-']) == 0, \"Fail: do_algebra\"\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert do_algebra(['+', 2], [1, 2]) == 3\nassert do_algebra(['+', 2, 3], [1, 2, 3]) == 5\nassert do_algebra(['-', 2], [1, 2]) == 0\nassert do_algebra(['-', 2, 3], [1, 2, 3]) == -1\n",
        "num_ids_2": 22,
        "num_ids_4": 64
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef test_do_algebra():\n    \"\"\"\n    Test do_algebra.\n\n    \"\"\"\n    assert do_algebra([1, 2, 3], [2, 3, 4]) == 10\n    assert do_algebra([1, 2, 3], [2, 2, 4]) == 6\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"Testing do_algebra...\", end=\"\")\nassert do_algebra([\"+\", 2, \"*\", 3], [4, 5]) == 14, \"Fail\"\nassert do_algebra([\"+\", 2, \"*\", 3], [4]) == 20, \"Fail\"\nassert do_algebra([\"+\", 2, \"*\", 3], [4, 5]) == 14, \"Fail\"\n",
        "num_ids_2": 31,
        "num_ids_4": 85
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    do_algebra(['+', 2], [1, 2, 3, 4]) == 6\n    do_algebra(['-', 3], [2, 1, 3, 4]) == 0\n    do_algebra(['*', 1, 2], [1, 2, 3, 4]) == 24\n    do_algebra(['//', 3, 3], [1, 2, 3, 4]) == 0\n    do_algebra(['**', 3, 3], [1, 2, 3, 4]) == 27\n    do_algebra(['+', '*', '**', '//', '**'], ['+', 2, '*', 3, 4]) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 3, 4, 5]) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, 4, 5]) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, 3, 5]) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, 3, 4]) == \"Invalid\"\n    do_algebra(['+', '*', '**', '//', '**'], ['+', 2, '*', 3, 4]) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, '*', '*', 4]) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, '*', '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, 3, '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, 3, 4]) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, '*', 4]) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, '*', '*']) == \"Invalid\"\n    do_algebra(['+', '*', '**', '//', '**'], ['+', 2, '*', '*', '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, '*', '*', '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, 3, '*', '*', '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, 3, '*', '*', '*', '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, 3, 4, '*', '*', '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, '*', '*', 4, '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, '*', '*', 3, '*', '*']) == \"Invalid\"\n    do_algebra(['+', 2, '*', '**', '//', '**'], ['+', 2, 2, '*', '*', '*', '*', '*']) == \"Invalid\"\n    do_algebra(['+', '*', '**', '//', '**'], ['+'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solve('abCDABCD') == 'AbCDABCD', \"Your function is not working properly\"\nassert     solve('hello world!') == '!dlrow olleH', \"Your function is not working properly\"\nassert     solve('1') == '1', \"Your function is not working properly\"\n\nprint(\"You passed the tests!\"",
        "num_ids_2": 55,
        "num_ids_4": 75
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve('abcd') == 'bcda'\nassert     solve('a') == 'a'\nassert     solve('') == ''\nassert     solve('A') == 'A'\nassert     solve('abCD') == 'abCD'\n",
        "num_ids_2": 26,
        "num_ids_4": 48
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not solve('a') == solve('b')\nassert solve('a') == 'a'\nassert solve('ab') == 'Ab'\nassert solve('ababab') == 'AbAbAb'\n",
        "num_ids_2": 15,
        "num_ids_4": 35
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert solve('abCAbC') == 'CbaB', 'Fail on one letter'\nassert solve('abCAbC') == 'CbaB', 'Fail on more than one letter'\nassert solve('abc') == 'cba', 'Fail on empty string'\nassert solve('ABC') == 'cBA', 'Fail on case sensitive'\n",
        "num_ids_2": 24,
        "num_ids_4": 64
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solve('a') == 'a', \"Should be 'a'\"\nassert solve('ab') == 'ba', \"Should be 'ba'\"\nassert solve('abc') == 'cba', \"Should be 'cba'\"\nassert solve('abcd') == 'dcba', \"Should be 'dcba'\"\n",
        "num_ids_2": 34,
        "num_ids_4": 71
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solve('a') == 'a'\nassert     solve('aA') == 'Aa'\nassert     solve('aB') == 'aB'\nassert     solve('ab') == 'ba'\nassert     solve('A') == 'A'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert solve('abAab') == 'abaB'\nassert solve('abAab') == 'abAaB'\n\nassert solve('abAaAa') == 'abAaAa'\n",
        "num_ids_2": 16,
        "num_ids_4": 49
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve('1') == '1'\nassert     solve('B') == 'b'\nassert     solve('LOL') == 'lol'\nassert     solve('This is the best text ever!') == 'ThisIsTheBestTextEver!'\nassert     solve('This is the BEST text ever!') == 'This is the BEST text ever!'\n",
        "num_ids_2": 24,
        "num_ids_4": 60
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (solve('aAbB') == 'baAbB')\nassert (solve('ab') == 'ba')\nassert (solve('') == '')\nassert (solve('abcd') == 'dcba')\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert (string_to_md5(\"this is an example\") == \"0a0b0c0d0e0f101112131415161718\")\nassert (string_to_md5(\"\") == None)\nassert (string_to_md5(\" \") == None)\n",
        "num_ids_2": 41,
        "num_ids_4": 70
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_md5(\"Hello World\") == \"c3df1b96cd1ed70fbe48a2a9e853a6a7\"\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(\"Test\") == \"9a8869f7b24f3f578988f9db881c11c4\"\nassert     string_to_md5(\"Test\") == \"9a8869f7b24f3f578988f9db881c11c4\"\n",
        "num_ids_2": 53,
        "num_ids_4": 104
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_md5('m') ==     '238a79b4'\nassert     string_to_md5('hello') ==     'c0c65a7a'\nassert     string_to_md5('') ==     'None'\n\n",
        "num_ids_2": 44,
        "num_ids_4": 61
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"hahaha\") == None\nassert     string_to_md5(\"hahaha\") == None\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(\"  \") == None\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_md5(\"\") is None\nassert     string_to_md5(\"Hello World\") == \"c41e2522d9fd333eeaa1ffaf195a6f2b\"\nassert     string_to_md5(\"Hi\") == \"fa0c66caeec69ee5be837f8e5df3d6a9\"\nassert     string_to_md5(\"Bye\") == \"c5d39f3fa69a5c7fe5a6fa16fc5b55d1\"\n\nprint(\"\u2705 Test passed\")\n",
        "num_ids_2": 49,
        "num_ids_4": 127
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('12345') == 'd736a829c46d26a8b9d3f5a0f2dde08'\nassert     string_to_md5('123456789') == 'f9c6f2f9a7bb9a4b687587c6c9e2a84'\nassert     string_to_md5('QWERTY') == 'dbe51d1cbd3f064c9f6cc75ee8d8faf5'\nassert     string_to_md5('QWERTYUIOP') == '5af92c3f5c5ddda9e9b5d4cd58b9c48'\n",
        "num_ids_2": 54,
        "num_ids_4": 139
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef string_to_base64(text):\n    \"\"\"\n    Given a string 'text', return its base64 encoding equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_md5(\"\") == None, \"Expected None, got '%s'\" % (string_to_md5(\"\"))\nassert     string_to_md5(\"foo\") == None, \"Expected None, got '%s'\" % (string_to_md5(\"foo\"))\nassert     string_to_md5(\"1234\") == \"d41d8cd98f00b204e9800998ecf8427e\", \"Expected 'd41d8cd98f00b204e9800998ecf8427e', got '%s'\" % (string_to_md5(\"1234\"))\n",
        "num_ids_2": 70,
        "num_ids_4": 146
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nimport unittest\nfrom test_helper import run_tests\n\nclass Test(unittest.TestCase):\n\n    def test_case_0(self):\n        self.assertEqual(string_to_md5(None), None)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     generate_integers(10, 20) == [10, 12, 14, 16]\nassert generate_integers(10, 10) == [10]\nassert generate_integers(10, 11) == [10]\n",
        "num_ids_2": 38,
        "num_ids_4": 53
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\nassert     generate_integers(1, 4) == [2, 4]\nassert     generate_integers(100, 200) == [100, 102, 104, 106, 108, 110, 112, 114, 116, 118]\nassert     generate_integers(1, 10) == [2, 4, 6, 8, 10]\nassert     generate_integers(100, 200) == [100, 102, 104, 106, 108, 110, 112, 114, 116, 118]",
        "num_ids_2": 46,
        "num_ids_4": 106
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     generate_integers(1, 100) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\nassert    generate_integers(100, 1000) == list(range(0, 100))\n\nprint(\"All tests passed\")\nprint(",
        "num_ids_2": 137,
        "num_ids_4": 137
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(generate_integers(5, 10)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     generate_integers(0, 1) == [0]\nassert     generate_integers(1, 3) == [1, 2]\nassert     generate_integers(3, 7) == [3, 4, 5, 6]\nassert     generate_integers(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\n",
        "num_ids_2": 36,
        "num_ids_4": 92
    }
]