[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not has_close_elements([-1, 5, 9, -1, 5, -1], 3)\nassert has_close_elements([-1, 5, 9, -1, 5, -1], 1)\nassert has_close_elements([-1, 5, 9, -1, 5, -1], 2)\nassert has_close_elements([-1, 5, 9, -1, 5, -1], 4)\n",
        "num_ids_2": 30,
        "num_ids_4": 82
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     has_close_elements([1, 2, 3, 4], 0) == False\nassert     has_close_elements([1, 2, 3, 4], 1.5) == False\nassert     has_close_elements([1, 2, 3, 4], 1) == True\nassert     has_close_elements([1, 2, 3, 4], 3.2) == True\nassert     has_close_elements([1, 2, 3, 4], 0.5) == True\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     has_close_elements([1, 2, 3, 4, 5], 3)    == False\nassert     has_close_elements([1, 2, 3, 4, 5], 1)    == False\nassert     has_close_elements([1, 2, 3, 4, 5], 2)    == True\nassert     has_close_elements([1, 2, 3, 4, 5], 4)    == True\nassert     has_close_elements([1, 2, 3, 4, 5], 5)    == True\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     has_close_elements([1,2,3,4], 0) is False\nassert     has_close_elements([1,2,3,4], 1) is True\nassert     has_close_elements([1,2,3,4], 2) is True\n",
        "num_ids_2": 44,
        "num_ids_4": 66
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef swap_elements(numbers: List[float], position1: int, position2: int) -> None:\n    \"\"\" Swap the elements in a given position. \"\"\"\n    pass\n\n\ndef remove_element(numbers: List[float], number: float) -> None:\n    \"\"\" Remove the element from the given list of numbers. \"\"\"\n    pass\n\n\ndef get_close_elements(numbers: List[float], number: float, threshold: float) -> List[float]:\n    \"\"\" Get the list of elements in the given list of numbers close to the given one. \"\"\"\n    pass\n\n\ndef is_element_in_list(numbers: List[float], element: float) -> bool:\n    \"\"\" Check if the given element is in the given list. \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     has_close_elements([1.2, 1.3, 1.5], threshold = 1) == True\nassert has_close_elements([1.2, 1.3, 1.4], threshold = 1) == False\nassert has_close_elements([1.2, 1.3, 1.4, 1.5, 1.6, 1.7], threshold = 1) == False\nassert has_close_elements([1.2, 1.3, 1.4, 1.5, 1.6, 1.7], threshold = 2) == True\nassert has_close_elements([1.2, 1.3, 1.4, 1.5, 1.6, 1.7], threshold = 0.5) == True\n",
        "num_ids_2": 55,
        "num_ids_4": 133
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     has_close_elements([1.5, 1.2], 0.2) == True, \\\n        'If the first number in the list is closer than threshold to the other two'\nassert     has_close_elements([1.5, 1.2], 0.3) == False, \\\n        'If the first number in the list is closer than threshold to the other two'\nassert     has_close_elements([1.5, 1.2, 1.3], 0.2) == True, \\\n        'If the first number in the list is closer than threshold to the other two'\nassert     has_close_elements([1.5, 1.2, 1.3], 0.3) == False, \\\n        'If the first number in the list is closer than threshold to the other two'\nassert     has_close_elements([1.5, 1.2, 1.3, 1.4], 0.2) == True, \\\n        'If the first number in the list is closer than threshold to the other two'\n",
        "num_ids_2": 52,
        "num_ids_4": 112
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     has_close_elements([0.9, 1.2, 0.4], 1.2) == True\nassert     has_close_elements([0.9, 1.2, 0.4], 1.1) == False\nassert     has_close_elements([], 1.1) == False\nassert     has_close_elements([1.2, 1.2, 1.2], 0.7) == True\nassert     has_close_elements([0.9, 1.2, 0.4], 0.9) == True\n",
        "num_ids_2": 56,
        "num_ids_4": 101
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     has_close_elements([3.6, 4.2, 3.2, 1.3, 4.5], 1.5) == True\nassert has_close_elements([1.5, 1.7, 1.1, 1.2, 2.3], 1) == True\nassert has_close_elements([3.6, 3.2, 3.2, 3.2, 2.2], 1.5) == False\nassert has_close_elements([1.5, 1.7, 1.1, 1.2, 2.3], 1) == False\nassert has_close_elements([0.8, 1.1, 2.3, 1.5], 1) == False\n",
        "num_ids_2": 69,
        "num_ids_4": 137
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n                            0.5) == False\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n                            0.1) == True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n                            0.2) == False\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n                            0.6) == True\nassert     has_close_elements([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n                            0.9) == True\n",
        "num_ids_2": 92,
        "num_ids_4": 184
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups(\"()())()((()())()(())\") == [\"(\", \")\", \"(\", \")\", \"(\", \"(\", \")\", \")\", \"(\"]\nassert     separate_paren_groups(\"(()(()))\") == [\"(\", \")\", \"(\", \")\", \"()\"]\nassert     separate_paren_groups(\"(()())\") == [\"(\", \")\", \"(\", \")\", \"()\"]\nassert     separate_paren_groups(\"()()()\") == [\"(\", \")\", \"(\", \")\", \"()\"]\nassert     separate_paren_groups(\"()()()())\") == [\"(\", \")\", \"(\", \")\", \"()\"]\n",
        "num_ids_2": 70,
        "num_ids_4": 124
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"(()())\") == [\"((()))\"]\nassert     separate_paren_groups(\"(((())))\") == [\"(((()))]\"]\nassert     separate_paren_groups(\"(()((()))(())())\") == [\"(()((()))\", \"()(())\", \"(()(()))\"]\nassert     separate_paren_groups(\"(()())(()())\") == [\"(()())(())\", \"(()())\"]\n",
        "num_ids_2": 33,
        "num_ids_4": 94
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups(\"()\") == [\"\"]\nassert     separate_paren_groups(\"(())\") == [\"\"]\nassert     separate_paren_groups(\"((())\") == [\"\"]\nassert     separate_paren_groups(\"((()()))\") == [\"\"]\nassert     separate_paren_groups(\"(((()())(())())()(((()()))))\") == [\"\"]\n",
        "num_ids_2": 31,
        "num_ids_4": 65
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups(\n        '(((())))'\n    ) == ['(((())))'], 'You should check the second example'\nassert     separate_paren_groups(\n        '(()(((())))((())))'\n    ) == ['(()(((())))((())))', 'You should check the third example'], 'You should check the second example'\nassert     separate_paren_groups(\n        '()(()((()())((())))((()))'\n    ) == ['()', '()', '()', '()', '()', '()'], 'You should check the third example'\nassert     separate_paren_groups(\n        '((())(())()))'\n    ) == ['((())(())()))'], 'You should check the fourth example'\nassert     separate_paren_groups(\n        '((()))'\n    ) == ['((()))'], 'You should check the fourth example'\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     separate_paren_groups(\"(Hello (World))\") == [\"Hello\",\"World\"]\nassert     separate_paren_groups(\"(Hello (World))\") == [\"Hello\", \"World\"]\nassert     separate_paren_groups(\"(Hello World)\") == [\"Hello World\"]\nassert     separate_paren_groups(\"(Hello (World))\") == [\"Hello\", \"World\"]\nassert     separate_paren_groups(\"((Hello) World)\") == [\"((Hello)\",\"World)\"]\n",
        "num_ids_2": 45,
        "num_ids_4": 88
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nseparate_paren_groups('( )') == ['()']\nassert \nseparate_paren_groups('{}()[]') == ['{}', '()', '[]']\nassert \nseparate_paren_groups('( )()') == ['( )', '()']\nassert \nseparate_paren_groups('{ } () )') == ['{ }','()', ')']\nassert \nseparate_paren_groups('{ }() )') == ['{ }','()', ')']\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups('') == [], \nassert     separate_paren_groups(')') == [], \nassert     separate_paren_groups('(()') == ['()'], \nassert     separate_paren_groups('(()(') == ['(()', '()'], \nassert     separate_paren_groups('((()))') == ['((()))'], \n",
        "num_ids_2": 32,
        "num_ids_4": 75
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups(\"((a + b) + c)\") == ['(a + b)', 'c']\nassert     separate_paren_groups(\"a ( b ) ( c )\") == ['a', 'b', 'c']\nassert     separate_paren_groups(\"a ( b ) ( c ) d\") == ['a', 'b', 'c', 'd']\nassert     separate_paren_groups(\"a ( ( b ) ) ( c )\") == ['a', '( b )', 'c']\nassert     separate_paren_groups(\"a ( ( ( ( ) ) ) )\") == ['a', '', '( ( ) )', '()']\n",
        "num_ids_2": 58,
        "num_ids_4": 121
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"()((()())\") == [\"()((()())\"]\nassert separate_paren_groups(\"()((()()))(())\") == [\"()((()()))\", \"(())\"]\nassert separate_paren_groups(\"(()((())))(()())\") == [\"(()((()))\", \"(()())\"]\nassert separate_paren_groups(\"()((()())\") == [\"()((()())\"]\nassert separate_paren_groups(\"()\") == []\n",
        "num_ids_2": 49,
        "num_ids_4": 98
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     separate_paren_groups(\"\") == []\nassert     separate_paren_groups(\"()\") == [\"\"]\nassert     separate_paren_groups(\"(())\") == [\"()\"]\nassert     separate_paren_groups(\"((())\") == [\"()\"]\nassert     separate_paren_groups(\"((()))\") == [\"()\"]\n",
        "num_ids_2": 28,
        "num_ids_4": 62
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     truncate_number(1.0) == 1.0\nassert     truncate_number(1.5) == 1.0\nassert     truncate_number(2.0) == 1.0\nassert     truncate_number(2.5) == 1.0\nassert     truncate_number(3.0) == 1.0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     truncate_number(2.1) == 1.1\nassert     truncate_number(2.5) == 1.5\nassert     truncate_number(3.5) == 2.5\nassert     truncate_number(10.5) == 9.5\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     truncate_number(1.0)     ==    1\nassert     truncate_number(2.0)     ==    1\nassert     truncate_number(4.0)     ==    2\nassert     truncate_number(25.0)     ==    5\nassert     truncate_number(39.0)     ==    7\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     truncate_number(123) == 123\nassert     truncate_number(12.345) == 123\nassert     truncate_number(0.45) == 0\nassert     truncate_number(1) == 1\nassert     truncate_number(1.2345) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nnumber = -2.5\nprint(truncate_number(number))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     truncate_number(1.23) == 1.23\nassert     truncate_number(2.67) == 2.67\nassert     truncate_number(3.99) == 3\nassert     truncate_number(4.0) == 4\nassert     truncate_number(4.00001) == 4\n",
        "num_ids_2": 34,
        "num_ids_4": 64
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     truncate_number(0) == 0\nassert     truncate_number(0.5) == 0\nassert     truncate_number(1.5) == 0.5\nassert     truncate_number(1.0) == 1\nassert     truncate_number(1.0) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     truncate_number(1.5) == 0\nassert     truncate_number(2.5) == 1\nassert     truncate_number(3.5) == 2\nassert     truncate_number(5.5) == 2\nassert     truncate_number(7.5) == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_zero(operations=[-1, 2, -3, 4, 5, 6, 7, -8, -9, 10, 11, 12, -13, -14])\nassert     below_zero(operations=[-2, -1, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == True\nassert     below_zero(operations=[-3, 2, -1, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == True\nassert     below_zero(operations=[-3, 2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == False\nassert     below_zero(operations=[-3, 2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -15]) == False\n",
        "num_ids_2": 92,
        "num_ids_4": 195
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef solve1(operations: List[int]) -> int:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n\n\n\ndef solve2(operations: List[int]) -> int:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n\n\ndef subtract(operations: List[int]) -> int:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('Below_zero test:', below_zero([-1, 2]))\nprint('Below_zero test:', below_zero([-1, 2, -3, 4, -5, 6, -7, 8]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     below_zero([\n    -1, 2, -3, 4, -5, 6\n    ]) is True, 'incorrect'\nassert     below_zero([\n    -1, 2, -3, 4, -5, 6\n    ]) is False, 'incorrect'\nassert     below_zero([\n    -1, 2, -3, 4, -5, 0\n    ]) is True, 'incorrect'\nassert     below_zero([\n    -1, 2, -3, 4, -5, 0\n    ]) is False, 'incorrect'\n\ndef longest_streak(operations: List[int]) -> int:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account. Your task is to detect and return\n    the length of the longest streak that can be made by a single person. A streak starts at the beginning of the list\n    and ends when an operation lowers the balance of the account.\n    \"\"\"\n    pass\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_zero([0, 0, -1]) == True\nassert     below_zero([-2, 0, 1]) == True\nassert     below_zero([0, -1, -2]) == True\nassert     below_zero([0, 0, 0]) == False\nassert     below_zero([-2, 1, 1]) == False\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     below_zero([1,0,-2,1,1,1,1,1,2,0,-2,0,0,0,1,0,1,0,1]) == False\nassert     below_zero([1,1,-1,1,1,1,1,1,2,0,-2,0,0,0,1,0,1,0,1]) == True\nassert     below_zero([1,0,-1,1,1,1,1,1,2,0,-2,0,0,0,1,0,1,0,1]) == False\nassert     below_zero([1,1,0,1,1,1,1,1,2,0,0,0,0,0,1,0,1,0,1]) == False\nassert     below_zero([1,0,1,1,1,1,1,1,2,0,-2,0,0,0,1,0,1,0,1]) == True\n",
        "num_ids_2": 94,
        "num_ids_4": 188
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     below_zero([-2, 3, 5, -2, -3]) == True\nassert     below_zero([-2, -3, -5, -2, -3]) == True\nassert     below_zero([-1, 2, 3, 4, -1]) == False\nassert     below_zero([-1, -2, -3, -4, -1]) == False\nassert     below_zero([-1, 2, 3, 4, -1, -2, -3, -4, -1]) == True\n",
        "num_ids_2": 46,
        "num_ids_4": 91
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_zero([1, 2, 1, 3, 4])    == True\nassert     below_zero([-1, 2, 1, 3, 4])    == False\nassert     below_zero([0, 2, 1, 3, 4])    == False\nassert     below_zero([-1, -2, 1, 3, 4])    == True\nassert     below_zero([0, -2, 1, 3, 4])    == True\n",
        "num_ids_2": 41,
        "num_ids_4": 83
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert below_zero([3, 1, -3, 1, 4]) == True, \"Wrong answer\"\nassert below_zero([-5, -4, -3, -2, -1]) == False, \"Wrong answer\"\n\ndef sol(operations: List[int]) -> int:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    # check the correctness of below_zero\n    pass\n",
        "num_ids_2": 28,
        "num_ids_4": 57
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert mean_absolute_deviation([2, 1, 2]) == 0.5\nassert mean_absolute_deviation([0, 1, 2]) == 0.5\nassert mean_absolute_deviation([2, 2, 2, 1]) == 0.0\nassert mean_absolute_deviation([-1, 1, -2]) == 2.0\n",
        "num_ids_2": 22,
        "num_ids_4": 62
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10]) == 5.5\nassert     mean_absolute_deviation([-10,-2,3,4,5,6,7,8,9,10]) == 2.2\nassert     mean_absolute_deviation([-10,-2,-3,4,5,6,7,8,9,10]) == 3.0\nassert     mean_absolute_deviation([-100,-2,3,4,5,6,7,8,9,10]) == 0.0\nassert     mean_absolute_deviation([-100,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 5.5\n",
        "num_ids_2": 69,
        "num_ids_4": 139
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert mean_absolute_deviation([-10, 2, 5, 7, 9, -4]) == 5.5\n\n\ndef variance(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Variance\n    around the mean of this dataset.\n    Variance is the average of the squared differences between each\n    element and a centerpoint (mean in this case):\n    Var = sum (x - x_mean) ^ 2\n    \"\"\"\n    pass\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mean_absolute_deviation([-2.5, -1.0, 1.0, 2.5, -2.5]) == 1.75\nassert mean_absolute_deviation([2.5, 2.0, -2.5, -3.0, 0.0]) == 3.25\nassert mean_absolute_deviation([1.5, 2.0, -3.0, -1.0, -2.0]) == 1.25\n\n\ndef get_standard_deviation(numbers: List[float]) -> float:\n    \"\"\" Finds the Standard Deviation of a given list of numbers\n    \"\"\"\n    pass\n",
        "num_ids_2": 72,
        "num_ids_4": 108
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.08\nassert mean_absolute_deviation([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == 5.0\nassert mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.0\nassert mean_absolute_deviation([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]) == 5.0\nassert mean_absolute_deviation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7.0\n",
        "num_ids_2": 77,
        "num_ids_4": 155
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     mean_absolute_deviation([1,2,3,4,5,6,7,8,9,10]) == 5.0\nassert     mean_absolute_deviation([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]) == 5.0\nassert     mean_absolute_deviation([-1,-2,-3,-4,-5,-6,-7,0,2,4,7,9,10]) == 5.0\n",
        "num_ids_2": 69,
        "num_ids_4": 110
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert mean_absolute_deviation([1.1, 2.2, 3.3, 4.4]) == 0.5\nassert mean_absolute_deviation([1.1, 2.2, 3.3, 4.4, 5.5]) == 1.0\nassert mean_absolute_deviation([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == 0.5\n",
        "num_ids_2": 32,
        "num_ids_4": 102
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersperse([], 1) == []\nassert     intersperse([1, 2, 3], 1) == [1, 1, 2, 1, 3]\nassert     intersperse([1, 2, 3], 5) == [1, 5, 2, 5, 3]\n",
        "num_ids_2": 37,
        "num_ids_4": 63
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert idesperse([1, 2, 3, 4, 5, 6, 7], 4) == [1, 4, 7, 2, 4, 7, 3, 4, 7]\nassert idesperse([1, 2, 3, 4, 5, 6, 7], 3) == [1, 4, 7, 2, 4, 7, 3]\nassert idesperse([1, 2, 3, 4, 5, 6, 7], 5) == [1, 4, 7, 2, 4, 7, 3, 4, 7, 2, 4, 7, 3, 4, 7]\nassert idesperse([1, 2, 3, 4, 5, 6, 7], 2) == [1, 2, 3, 4, 5, 6, 7]\nassert idesperse([1, 2, 3, 4, 5, 6, 7], 1) == [1, 2, 3, 4, 5, 6, 7]\n",
        "num_ids_2": 80,
        "num_ids_4": 172
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersperse([1,2,3], 2) == [1,2,2,3]\nassert     intersperse([1,2,3], 5) == [1,2,3,2,3]\nassert     intersperse([1,2,3], -1) == [1,2,3,1,2,3]\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert erspessere([1,2,3], 2) == [1, 2, 3, 1, 2, 3]\nassert erspessere([1,2,3,4,5,6], 2) == [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\nassert erspessere([1,2,3,4,5,6], 3) == [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\nassert erspessere([1,2,3,4,5,6], 4) == [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\n\ndef remove_middle(numbers: List[int]) -> List[int]:\n    \"\"\" Removes the middle element from a list.\n        Input:\n        [1,2,3,4,5,6,7,8,9,10]\n        Output:\n        [1,2,3,4,5,6,7,8,9,10]\n        Explanation:\n        The middle element is removed from the list, and the new list becomes \n        [1,2,3,4,5,6,7,8,9,10].\n",
        "num_ids_2": 78,
        "num_ids_4": 174
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_nested_parens(\"(())\") == [[0, 1]]\nassert     parse_nested_parens(\"()())\") == [[0, 1], [1, 0], [0, 1]]\nassert     parse_nested_parens(\"((()))\") == [[0, 1], [1, 0], [1, 0], [0, 1]]\nassert     parse_nested_parens(\"(((())())())\") == [[0, 1], [1, 0], [1, 0], [1, 0], [0, 1]]\nassert     parse_nested_parens(\"(((((())))))\") == [[0, 1], [1, 0], [1, 0], [1, 0], [0, 1]]\n",
        "num_ids_2": 50,
        "num_ids_4": 129
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"(())\") == [0]\nassert     parse_nested_parens(\"(())()\") == [0, 0]\nassert     parse_nested_parens(\"((()))\") == [0, 1, 0]\nassert     parse_nested_parens(\"(()()()())\") == [0, 0, 1, 0, 0]\nassert     parse_nested_parens(\"()()((())()())\") == [0, 0, 1, 0, 1, 0, 1, 0, 0]\n",
        "num_ids_2": 39,
        "num_ids_4": 91
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens('(((()(())((()(())))))((((((((())))))))') == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     parse_nested_parens('((()()()))') == [1]\nassert     parse_nested_parens('((()()()))') == [1]\nassert     parse_nested_parens('((()))') == [1]\nassert     parse_nested_parens('(()(()))') == [1]\n",
        "num_ids_2": 74,
        "num_ids_4": 114
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_nested_parens(\"(()())\") == [0, 2, 1]\nassert     parse_nested_parens(\"(((())))\") == [0, 3, 1]\nassert     parse_nested_parens(\"(()(()))\") == [0, 3, 1]\nassert     parse_nested_parens(\"()((()))\") == [0, 2, 1]\nassert     parse_nested_parens(\"(((())))\") == [0, 1, 1]\n",
        "num_ids_2": 47,
        "num_ids_4": 96
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_nested_parens(\"( ) )\") == [\"( ) )\"]\nassert     parse_nested_parens(\"( ) ( )\") == [\"( ) ( )\"]\nassert     parse_nested_parens(\"( ) ( ) ( )\") == [\"( ) ( ) ( )\"]\nassert     parse_nested_parens(\"((()))\") == [\"((()))\"]\nassert     parse_nested_parens(\"((()()))\") == [\"((()()))\"]\n",
        "num_ids_2": 44,
        "num_ids_4": 92
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2]\nassert     parse_nested_parens(\"(((())))\") == [3]\nassert     parse_nested_parens(\"(((((()))))\") == [4]\nassert     parse_nested_parens(\"(((((((()))))))\") == [5]\nassert     parse_nested_parens(\"(((((()()))))(())())\") == [4, 2, 2, 1]\n",
        "num_ids_2": 39,
        "num_ids_4": 83
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parse_nested_parens(\"(()())\") == [2]\nassert     parse_nested_parens(\"(()())()\") == [2, 2]\nassert     parse_nested_parens(\"((()()))\") == [3]\nassert     parse_nested_parens(\"(()())()()\") == [2, 2, 2]\nassert     parse_nested_parens(\"(()(()))\") == [3]\n",
        "num_ids_2": 41,
        "num_ids_4": 86
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"(())())\") == [0, 2, 2, 2]\nassert     parse_nested_parens(\"((()))\") == [0, 2, 2, 1]\nassert     parse_nested_parens(\"((()()))\") == [0, 2, 2, 2]\nassert     parse_nested_parens(\"((((())))))\") == [0, 2, 2, 3]\nassert     parse_nested_parens(\"((((((()))))))\") == [0, 2, 2, 3]\n",
        "num_ids_2": 50,
        "num_ids_4": 103
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    filter_by_substring(['', 'a', 'b', 'c', 'b'], 'b') == ['b']\n    filter_by_substring(['', 'a', 'b', 'c', 'b'], '') == []\n    filter_by_substring(['', 'a', 'b', 'c', 'b'], 'c') == ['c']\n    filter_by_substring(['', 'a', 'b', 'c', 'b'], 'd') == ['b']\n    filter_by_substring(['a', 'b', 'c', 'b'], '') == ['a', 'b', 'c', 'b']\n    filter_by_substring(['a', 'b', 'c', 'b'], 'a') == ['a']\n    filter_by_substring(['a', 'b', 'c', 'b'], 'c') == ['c']\n    filter_by_substring(['a', 'b', 'c', 'b'], 'd') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'a') == ['a']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'c') == ['c']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'd') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'c') == ['c']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'd') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'e') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'f') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'a') == ['a']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'c') == ['c']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'd') == ['b']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'e') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'f') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'a') == ['a']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'c') == ['c']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'd') == ['b']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'e') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'f') == []\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'a') == ['a']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'c') == ['c']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'd') == ['a']\n    filter_by_substring(['a', 'b', 'c', 'b', 'a', 'c', 'a'], 'e') == []",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_substring([\"hello\", \"hi\", \"there\"], \"hi\") == [\"hello\", \"there\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"there\"], \"hello\") == [\"hi\", \"there\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"there\"], \"asdf\") == []\nassert     filter_by_substring([\"hello\", \"hi\", \"there\"], \"asdfasdf\") == []\n\ndef is_palindrome(phrase: str) -> bool:\n    \"\"\" Check whether a given phrase is palindrome or not\n    \"\"\"\n    pass\n",
        "num_ids_2": 58,
        "num_ids_4": 110
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_substring([\"hello\", \"hi\", \"helloo\", \"super\"], \"lo\") == [\"hi\", \"helloo\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"helloo\", \"super\"], \"sup\") == [\"hello\", \"helloo\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"helloo\", \"super\"], \"hello\") == [\"hi\", \"helloo\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"helloo\", \"super\"], \"he\") == []\nassert     filter_by_substring([\"hello\", \"hi\", \"helloo\", \"super\"], \"hell\") == [\"hello\", \"helloo\", \"super\"]\n",
        "num_ids_2": 68,
        "num_ids_4": 130
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_substring(['test', 'tester', 'teste', 'teste2'], 'test') == ['test', 'teste2']\nassert filter_by_substring(['test', 'tester', 'teste', 'teste2'], 'tester') == ['tester']\nassert filter_by_substring(['test', 'tester', 'teste', 'teste2'], 't') == ['teste2']\nassert filter_by_substring(['test', 'tester', 'teste', 'teste2'], 'te') == []\nassert filter_by_substring(['test', 'tester', 'teste', 'teste2'], 'tes') == ['teste2']\n",
        "num_ids_2": 74,
        "num_ids_4": 140
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"afg\", \"nopq\", \"oob\"], \"nopq\") == [\"afg\", \"oob\"]\nassert     filter_by_substring([\"afg\", \"nopq\", \"oob\"], \"pq\") == []\nassert     filter_by_substring([\"afg\", \"nopq\", \"oob\"], \"oob\") == [\"oob\"]\nassert     filter_by_substring([\"afg\", \"nopq\", \"oob\"], \"n\") == [\"afg\", \"nopq\"]\nassert     filter_by_substring([\"afg\", \"nopq\", \"oob\"], \"f\") == []\n",
        "num_ids_2": 66,
        "num_ids_4": 134
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones with a given length\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 0)\nassert     sum_product([1, 2, 3, 4]) == (15, 24)\nassert     sum_product([-1, -2, -3, -4]) == (-21, -24)\nassert     sum_product([1, -1, 2, -2, -3, 2, 4]) == (9, -24)\n",
        "num_ids_2": 29,
        "num_ids_4": 76
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 0)\nassert     sum_product([0, 1]) == (0, 1)\nassert     sum_product([0, 1, 2]) == (0, 2)\nassert     sum_product([0, 1, 2, 3]) == (0, 6)\n",
        "num_ids_2": 29,
        "num_ids_4": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_product([1,2,3,4,5]) == (15, 120)\nassert sum_product([5]) == (5, 5)\nassert sum_product([]) == (0, 1)\n",
        "num_ids_2": 25,
        "num_ids_4": 52
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (6, 6)\nassert     sum_product([1, 2, 3, 4]) == (12, 24)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1]) == (1, 1)\n",
        "num_ids_2": 33,
        "num_ids_4": 68
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4, 5]) == (45, 120)\nassert     sum_product([-1, -2, -3, -4, -5]) == (45, 120)\nassert     sum_product([-1, -2, -3, -4, -5, -6]) == (45, 120)\nassert     sum_product([-1, -2, -3, -4, -5, -6, -7]) == (45, 120)\n",
        "num_ids_2": 37,
        "num_ids_4": 96
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_product([1, 3, 5]) == (10, 15), \"incorrect sum_product\"\nassert     sum_product([0, 3, 5]) == (0, 30), \"incorrect sum_product\"\nassert     sum_product([]) == (0, 1), \"incorrect sum_product\"\nassert sum_product([]) == (0, 1), \"incorrect sum_product\"\nassert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (45, 384), \"incorrect sum_product\"\n",
        "num_ids_2": 52,
        "num_ids_4": 93
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([0]) == [0]\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1,2]) == [1,2]\nassert     rolling_max([1,2,3]) == [1,2,3]\n",
        "num_ids_2": 23,
        "num_ids_4": 53
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nrolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 12]) == [10, 12, 12, 14, 15, 17, 18, 20, 22, 22, 24, 24]\n\ndef rolling_sum(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling sum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 3, 4, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 4, 5, 6, 7, 7, 7, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 4, 5, 6, 7, 7, 7, 7, 10]\nassert     rolling_max([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == \\\n    [1, 3, 4, 5, 6, 7, 7, 7, 7, 7, 11, 12, 13, 14, 14, 14, 14, 14, 14]\n",
        "num_ids_2": 74,
        "num_ids_4": 172
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 0]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 1]\n    rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    rolling_max([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n    rolling_max([]) == []\n\n\ndef index_min(numbers: List[int]) -> int:\n    \"\"\" Given a list of integers, return the index of the smallest integer.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    rolling_max([1, 1, 3, 5, 7, 7]) == [1, 1, 3, 7, 7, 7]\n    rolling_max([1, 1, 5, 5, 7, 7, 7]) == [1, 1, 5, 7, 7, 7, 7]\n    rolling_max([1, 1, 5, 5, 5, 7, 7, 7]) == [1, 1, 5, 5, 7, 7, 7]\n    rolling_max([1, 1, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) == [1, 1, 5, 5, 7, 7, 7, 7, 7]\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rolling_max([4,5,6,7,8]) == [5,6,7,8,7]\nassert     rolling_max([5,3,2,1]) == [5,3,2,1]\nassert     rolling_max([5,4,3,2,1]) == [5,4,3,2,1]\nassert     rolling_max([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n\n\ndef split_half(a: List[int]) -> Tuple[List[int], List[int]]:\n    \"\"\" Given a list, split the list into two halves and return the two halves in a tuple \"\"\"\n    pass\n",
        "num_ids_2": 54,
        "num_ids_4": 116
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rolling_max([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\n\nassert    rolling_max([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [100, 100, 100, 100, 100, 100, 100, 100, 100, 100]\n",
        "num_ids_2": 117,
        "num_ids_4": 117
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rolling_max([1,3,5]) ==  [1,3,5]\nassert     rolling_max([-4,-3,-5]) ==  [-4,-3,-5]\nassert     rolling_max([-6,-3,-5,0]) ==  [-6,-3,-5,0]\nassert     rolling_max([]) ==  []\nassert     rolling_max([-1,-2]) ==  [-1,-2]\n",
        "num_ids_2": 46,
        "num_ids_4": 85
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rolling_max([3, 2, 1, 5, 4, 1, 2, 3, 4, 1]) == [5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5]) == [5, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [11, 11, 11, 11, 11, 11, 11, 11, 11, 11]\n",
        "num_ids_2": 78,
        "num_ids_4": 178
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_palindrome_decorator(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_palindrome(\"palindrome\") == \"nindrome\"\nassert     make_palindrome(\"tack\") == \"tack\"\nassert     make_palindrome(\"race\") == \"race\"\nassert     make_palindrome(\"kayak\") == \"kayak\"\nassert     make_palindrome(\"woo\") == \"woo\"\n",
        "num_ids_2": 36,
        "num_ids_4": 68
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_palindrome(\"\") == \"\"\nassert     make_palindrome(\"a\") == \"\"\nassert     make_palindrome(\"ab\") == \"aba\"\nassert     make_palindrome(\"aba\") == \"ababa\"\nassert     make_palindrome(\"abab\") == \"abaaba\"\n",
        "num_ids_2": 25,
        "num_ids_4": 56
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nstring = 'hello'\nprint(is_palindrome(string))\nassert is_palindrome(string) == False\nassert make_palindrome(string) == 'hleo'\nstring = 'a'\nprint(is_palindrome(string))\nassert is_palindrome(string) == True\n",
        "num_ids_2": 15,
        "num_ids_4": 43
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef main():\n    \"\"\" Driver program to test above functions \"\"\"\n    string = input(\"Enter a string to check if palindrome or not : \")\n    print(f\"The supplied string is a palindrome : {is_palindrome(string)}\")\n    print(f\"The shortest palindrome that begins with the supplied string : {make_palindrome(string)}\")\n\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # find the longest postfix of supplied string that is a palindrome\n    make_palindrome('racecar') == 'racecar'\n    make_palindrome('noon') == 'no'\n    make_palindrome('moO') == 'no'\n    make_palindrome('ab') == 'ab'\n    make_palindrome('a') == 'a'\n    make_palindrome('ab') == 'aba'\n\n\n\nif __name__ == '__main__':\n    print(\"Can be used as a module:\")\n    print(is_palindrome('racecar'))\n    print(is_palindrome('noon'))\n    print(is_palindrome('moO'))\n    print(is_palindrome('ab'))\n    print(is_palindrome('a'))\n    print(is_palindrome('ab')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         string_xor('hello', 'h') == 'l'\nassert string_xor('hello', 'e') == 'l'\nassert string_xor('hell', 'l') == 'o'\nassert string_xor('', 'o') == ''\nassert string_xor('h', '') == 'h'\n",
        "num_ids_2": 33,
        "num_ids_4": 62
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_xor('10101010', '10101010') == '10101011'\nassert     string_xor('10101010', '10101011') == '10101010'\nassert     string_xor('10101010', '10101010') == '10101011'\nassert     string_xor('10101010', '10101010') == '10101010'\nassert     string_xor('10101010', '10101011') == '10101010'\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_xor(\"10101100\", \"111111\") == \"1010111\"\nassert     string_xor(\"10101100\", \"1111\") == \"1000111\"\nassert     string_xor(\"10101100\", \"0111\") == \"100011\"\nassert     string_xor(\"10101100\", \"0011\") == \"101001\"\nassert     string_xor(\"10101100\", \"1011\") == \"101001\"\n",
        "num_ids_2": 43,
        "num_ids_4": 85
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef l1_baseline(s1: str, s2: str) -> str:\n    \"\"\" Input two strings of the same length s1 and s2 consisting only of 1s and 0s.\n    Find the shared characters and return the list of strings with the shared characters,\n    except the common character itself.\n    The shared characters are all characters that are common to both strings.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_xor('10101011', '10110101') == '10111011', \"Wrong output\"\nassert     string_xor('10101011', '10111010') == '10101000', \"Wrong output\"\nassert     string_xor('10101011', '10101101') == '10101010', \"Wrong output\"\nassert     string_xor('10101011', '10100111') == '10101000', \"Wrong output\"\nassert     string_xor('10101011', '11100101') == '10101000', \"Wrong output\"\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"686974207468652062756c6c277320657965\") == \"746865206b696420646f6e277420706c6179\"\nassert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"746865206b696420646f6e277420706c6179\") == \"1c0111001f010100061a024b53535009181c\"\nassert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"746865206b696420646f6e277420706c6179\") == \"1c0111001f010100061a024b53535009181c\"\nassert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"1c0111001f010100061a024b53535009181c\") == \"746865206b696420646f6e277420706c6179\"\nassert     string_xor(\"1c0111001f010100061a024b53535009181c\", \"1c0111001f010100061a024b53535009181c\") == \"1c0111001f010100061a024b53535009181c\"\n",
        "num_ids_2": 139,
        "num_ids_4": 277
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_xor('1', '0') == '1'\nassert string_xor('0', '0') == '0'\nassert string_xor('0', '1') == '1'\nassert string_xor('1', '1') == '0'\n\ndef xor_by_bit(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform XOR between these inputs and return the result as a string.\n    \"\"\"\n    pass\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_xor(\"1\",\"1\") == \"00\"\nassert     string_xor(\"1\",\"0\") == \"11\"\nassert     string_xor(\"0\",\"1\") == \"11\"\nassert     string_xor(\"0\",\"0\") == \"00\"\n\n\ndef parity_bit(b: str) -> str:\n    \"\"\" Given a bit string, return the parity bit.\n    Assume that the parity bit has an index of 5.\n    \"\"\"\n    pass\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef longest2(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    :param strings: \n    :return: the string with the longest word in the list of strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert \n\nassert longest(['']) == ''\n",
        "num_ids_2": 6,
        "num_ids_4": 14
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(longest([\"a\",\"bbbb\",\"dddddddd\",\"eee\",\"eeeeeeeeee\",\"eeeeeeeeeee\"])) == \"eeeeeeeeeee\"\nprint(longest([\"bbbb\",\"a\",\"dddddddd\",\"eee\"])) == \"bbbb\"\nprint(longest([\"a\",\"bbbb\",\"dddddddddd\",\"eee\",\"eeeeeeeeeee\"])) == \"eeeeeeeeeee\"\nprint(longest([]) == None)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(longest([\"dog\", \"racecar\", \"car\"]))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert longest([\"dog\", \"racecar\", \"car\"]) == \"car\"\n    assert longest([\"a\"]) == \"a\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     longest([]) == None\nassert     longest([\"A\", \"B\", \"C\"]) == \"C\"\nassert     longest([\"A\", \"B\", \"C\", \"A\", \"B\", \"D\"]) == \"D\"\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     longest(['abc', 'a', 'b', 'a', 'a', 'a']) == 'a'\nassert     longest(['abcd', 'a', 'a', 'b', 'a', 'a', 'a']) == 'a'\nassert     longest(['abc', 'a', 'a', 'a', 'a', 'a', 'a']) == 'a'\nassert     longest(['abc', 'ab', 'a', 'a', 'a', 'a', 'a']) == 'a'\nassert     longest(['abc', 'abcd', 'a', 'a', 'a', 'a', 'a']) == 'a'\n",
        "num_ids_2": 62,
        "num_ids_4": 126
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     longest(['']) == None, \"Wrong answer for [''] : use None instead of ''\"\nassert     longest([]) == None, \"Wrong answer for [] : use None instead of ''\"\nassert     longest(['']) == None, \"Wrong answer for ['',''] : use None instead of ''\"\nassert     longest(['a']) == 'a', \"Wrong answer for ['a'] : should return 'a'\"\nassert     longest(['ab', 'a']) == 'a', \"Wrong answer for ['ab', 'a'] : should return 'a'\"\n",
        "num_ids_2": 49,
        "num_ids_4": 104
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert longest([]) is None\nassert longest(['']) == ''\nassert longest([' ']) == ''\nassert longest(['a']) == 'a'\n",
        "num_ids_2": 10,
        "num_ids_4": 27
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    assert longest([\"a\", \"ab\", \"abc\", \"abcd\"]) == \"abcd\"\n    assert longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]) == \"abcde\"\n    assert longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]) == \"abcdef\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     greatest_common_divisor(2, 3) == 1\nassert     greatest_common_divisor(5, 9) == 1\nassert     greatest_common_divisor(12, 24) == 4\n\n\n\ndef gcd(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    pass\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     greatest_common_divisor(9, 3) == 3\nassert     greatest_common_divisor(7, 17) == 1\nassert     greatest_common_divisor(9, 9) == 1\nassert     greatest_common_divisor(0, 5) == 1\nassert     greatest_common_divisor(15, 15) == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     greatest_common_divisor(4, 4) == 4\nassert     greatest_common_divisor(4, 1) == 4\nassert     greatest_common_divisor(1, 4) == 4\nassert     greatest_common_divisor(10, 1) == 10\nassert     greatest_common_divisor(1, 1) == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_greatest_common_divisor(x: int, y: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers x and y\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(10, 5) == 1\nassert     greatest_common_divisor(7, 5) == 1\nassert     greatest_common_divisor(9, 6) == 3\nassert     greatest_common_divisor(6, 7) == 1\nassert     greatest_common_divisor(13, 17) == 1\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef greatest_common_divisor_recursive(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(1, 2) == 1\nassert     greatest_common_divisor(2, 3) == 1\nassert     greatest_common_divisor(15, 15) == 1\nassert     greatest_common_divisor(8, 16) == 4\nassert     greatest_common_divisor(16, 8) == 4\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"HelloWorld\") == [\"H\", \"He\", \"Hel\", \"Hell\", \"Hll\", \"Hlo\", \"Hlw\", \"Hlwor\", \"Hllow\", \"Hello\"]\nassert     all_prefixes(\"Hello\") == [\"H\", \"He\", \"Hel\", \"Hello\"]\nassert     all_prefixes(\"Good\") == [\"G\", \"Go\", \"Goa\", \"Goaa\", \"Goaaa\", \"Good\"]\nassert     all_prefixes(\"I\") == [\"I\"]\nassert     all_prefixes(\"\") == []\n",
        "num_ids_2": 74,
        "num_ids_4": 120
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"alphabet\") == ['a', 'ab', 'abc', 'abcd', 'abcde', 'abce', 'abced', 'abcef']\nassert     all_prefixes(\"algorithm\") == ['al', 'algo', 'algor', 'algorithm', 'algoer', 'algorithmr']\nassert     all_prefixes(\"a\") == ['a']\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"a\") == ['a']\n",
        "num_ids_2": 79,
        "num_ids_4": 104
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('ab') == ['a', 'ab']\nassert     all_prefixes('abcdef') == ['a', 'ab', 'abc', 'abcd', 'abce', 'abcf', 'abcdef']\nassert     all_prefixes('abcdefghij') == ['a', 'ab', 'abc', 'abcd', 'abce', 'abcf', 'abcdef', 'abcdeg', 'abcef', 'abcfgh', 'abcdegf', 'abcefghi', 'abcfghij']\n",
        "num_ids_2": 37,
        "num_ids_4": 147
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_prefixes(\"\") == []\nassert all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\nassert all_prefixes(\"abcd\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abce\", \"abcdex\"]\nassert all_prefixes(\"abce\") == [\"\", \"a\", \"ab\", \"abc\", \"abce\", \"abcef\", \"abceex\"]\n\n\ndef is_prefix_of(string: str, prefix: str) -> bool:\n    \"\"\" Check if the prefix is an prefix of the string.\n        Return True if so and False otherwise.\n    \"\"\"\n    pass\n",
        "num_ids_2": 40,
        "num_ids_4": 111
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\", \"abc\"]\nassert     all_prefixes(\"\") == [\"\"]\nassert     all_prefixes(\"a\") == [\"a\"]\nassert     all_prefixes(\"abcd\") == [\"ab\", \"abc\", \"abcd\"]\nassert     all_prefixes(\"abcde\") == [\"abc\", \"abce\", \"abcd\", \"abcde\"]\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nall_prefixes('ABBA') == ['AB', 'ABB', 'ABBA']\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_prefixes('abracadabra') == ['abr', 'aba', 'abr', 'abra', 'abrac']\nassert     all_prefixes('dabracadabra') == ['dabr', 'dabra', 'dabrac', 'dabra', 'dabracadabra']\nassert     all_prefixes('abracadabra') == ['abr', 'aba', 'abr', 'abra', 'abracadabra']\n\n\ndef remove_duplicate_letters(string: str) -> str:\n    \"\"\" Remove duplicated letters from the string input\n    \"\"\"\n    pass\n",
        "num_ids_2": 78,
        "num_ids_4": 115
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_prefixes(\"katia\") == [\"kat\"]\nassert     all_prefixes(\"tommy\") == [\"tom\", \"tommy\"]\nassert     all_prefixes(\"kath\") == []\nassert     all_prefixes(\"tomy\") == [\"tom\", \"tomy\"]\nassert     all_prefixes(\"tomat\") == [\"tom\", \"tomat\"]\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_prefixes(\"\") == [\"\"]\nassert all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]\nassert all_prefixes(\"abcde\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]\nassert all_prefixes(\"abcdefg\") == [\"\", \"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcef\", \"abcdef\", \"abcdefg\"]\n\n\ndef prefixes_in_words(words: List[str]) -> List[str]:\n    \"\"\" Return a list of all prefixes of the list of input words in the order in which\n        they appear in the list\n    \"\"\"\n    pass\n",
        "num_ids_2": 33,
        "num_ids_4": 108
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\nassert     string_sequence(20) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\nassert     string_sequence(30) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\nassert     string_sequence(40) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\nassert     string_sequence(50) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n",
        "num_ids_2": 54,
        "num_ids_4": 121
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_sequence(0) == '0'\nassert     string_sequence(1) == '0'\nassert     string_sequence(2) == '00'\nassert     string_sequence(3) == '000'\nassert     string_sequence(4) == '0000'\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_sequence(1) == \"0\"\nassert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\n",
        "num_ids_2": 27,
        "num_ids_4": 58
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(2) =='0'\nassert     string_sequence(3) ==' 0'\nassert     string_sequence(4) =='0 '\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \"\"\"\n    return''.join(f'{i:>3}' for i in range(n+1))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_sequence(0) == \"\", \"incorrect string_sequence(0)\"\nassert     string_sequence(1) == \"0\", \"incorrect string_sequence(1)\"\nassert     string_sequence(2) == \" 0\", \"incorrect string_sequence(2)\"\nassert     string_sequence(3) == \" 0  \", \"incorrect string_sequence(3)\"\nassert     string_sequence(4) == \"  0  \", \"incorrect string_sequence(4)\"\n",
        "num_ids_2": 43,
        "num_ids_4": 88
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_sequence(0) == \"\", \"Expected a blank string\"\nassert     string_sequence(1) == \"0\", \"Expected a blank string\"\nassert     string_sequence(2) == \"0 1\", \"Expected the first number\"\nassert     string_sequence(4) == \"0 1 2 3\", \"Expected the second number\"\nassert     string_sequence(5) == \"0 1 2 3 4\", \"Expected the third number\"\n",
        "num_ids_2": 39,
        "num_ids_4": 83
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_sequence(0) == ''\nassert     string_sequence(1) == '0'\nassert     string_sequence(2) == '0 1'\nassert     string_sequence(5) == '0 1 2 3 4'\nassert     string_sequence(10) == '0 1 2 3 4 5 6 7 8 9'\n",
        "num_ids_2": 24,
        "num_ids_4": 55
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncount_distinct_characters('ABCDEFGHI') == 6\ncount_distinct_characters('aabcdefghi') == 7\ncount_distinct_characters('ABCDEFGHI') == 6\ncount_distinct_characters('ABCDeefghI') == 5\n\ncount_distinct_characters('Hello World')\n\ndef count_distinct_characters_with_duplicates(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"aa\") == 2\nassert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"ab\") == 2\nassert     count_distinct_characters(\"abc\") == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_distinct_characters('') == 0\nassert     count_distinct_characters('a') == 1\nassert     count_distinct_characters('ab') == 2\nassert     count_distinct_characters('aab') == 2\nassert     count_distinct_characters('abc') == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 61
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(input_string_01) == 5\nassert     count_distinct_characters(input_string_02) == 6\nassert     count_distinct_characters(input_string_03) == 4\nassert     count_distinct_characters(input_string_04) == 5\n\nprint(f\"=== test result: {count_distinct_characters(input_string_01)}\"",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_words_in_string(string: str) -> int:\n    \"\"\" Given a string, find out how many words does it contain\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"Hello\") == 5\nassert     count_distinct_characters(\"123456789\") == 10\nassert     count_distinct_characters(\"aAbBCcDeEfF\") == 5\n",
        "num_ids_2": 29,
        "num_ids_4": 62
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_distinct_characters('abcdefg') == 6\nassert     count_distinct_characters('ABCDEFGH') == 7\nassert     count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\nassert     count_distinct_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 26\n",
        "num_ids_2": 34,
        "num_ids_4": 106
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef are_equivalent(string_one: str, string_two: str) -> bool:\n    \"\"\" Given two strings, return whether they are equivalent \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"alphabet\") == 5\nassert     count_distinct_characters(\"AbcnDEF\") == 3\nassert     count_distinct_characters(\"abcde\") == 5\nassert     count_distinct_characters(\"ABCDE\") == 5\nassert     count_distinct_characters(\"12345\") == 5\n",
        "num_ids_2": 33,
        "num_ids_4": 65
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_music(\"o|\") == [4, 4, 2, 2]\nassert     parse_music(\"o|o|\") == [4, 4, 2, 2, 4, 4, 2, 2]\nassert     parse_music(\"o.|.\") == [4, 4, 2, 2, 2, 2, 2, 2]\nassert     parse_music(\"o..|.\") == [4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2]\nassert     parse_music(\"oo|oo|oo|\") == [4, 4, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 4, 4, 2, 2]\n",
        "num_ids_2": 50,
        "num_ids_4": 116
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_music('o|o|o|') == [4,2,1,0]\nassert     parse_music('oo|oo|o|o|') == [4,2,1,0]\nassert     parse_music('oo|oo|oo|oo') == [4,2,1,0]\nassert     parse_music('oo|oo|oo|oo|') == [4,2,1,0]\nassert     parse_music('oo|oo|oo|oo|o|') == [4,2,1,0]\n",
        "num_ids_2": 50,
        "num_ids_4": 101
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_music(\"o|.|o|.|o|.|o|o|o|o|.|o|o|.|o|o|o|o|o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(parse_music(\"o|.|o\"))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert parse_music(\"o|.|o\") == [4, 4, 4, 4]\n    assert parse_music(\"o|o|o|o\") == [2, 2, 2, 2, 2, 2, 2, 2, 2]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_music('oo|.o|oo|') == [2, 1, 4, 2]\nassert     parse_music('oooo|oo.o|oooo') == [4, 1, 4, 1, 4, 1]\nassert     parse_music('oooo|oo.o|ooooo|ooo|ooooo|ooo') == [4, 1, 4, 1, 4, 1, 4, 1, 4, 1]\n\ndef get_intervals(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \"\"\"\n    pass\n",
        "num_ids_2": 54,
        "num_ids_4": 99
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert parse_music(\"o\") == [4]\nassert parse_music(\"o|\") == [2, 2]\nassert parse_music(\"'o|\") == [2, 2, 2, 2]\nassert parse_music(\"'o|'\") == [2, 2, 2, 2, 2]\n",
        "num_ids_2": 15,
        "num_ids_4": 50
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_music('oo|o.o|oo|o.o|o|o') == [4, 3, 4, 3]\nassert     parse_music('ooo|oooo|oo|oo|o|o|o|o|o|o|o|o') == [2, 2, 2, 2, 2, 2, 2, 2]\nassert     parse_music('ooo|oooooo|o|o|o|o|o|o|o|o|o|o|o|o') == [2, 4, 2, 4, 2, 4, 2, 4, 2, 4]\nassert     parse_music('ooo|oooooo|oo|o|o|o|o|o|o|o|o|o|o|o|o') == [2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2]\nassert     parse_music('ooo|oooooo|ooo|ooo|o|o|o|o|o|o|o|o|o|o|o|o') == [2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4]\n",
        "num_ids_2": 82,
        "num_ids_4": 202
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"The number of times a substring occurs in a string is: {}\".format(how_many_times(\"hello world\", \"world\")))\nassert\nassert \nprint(\"The number of times a substring occurs in a string is: {}\".format(how_many_times(\"hello world\", \"l\")))\nassert \nassert \nprint(\"The number of times a substring occurs in a string is: {}\".format(how_many_times(\"hello world\", \"l\")))\n",
        "num_ids_2": 5,
        "num_ids_4": 11
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Check if the given string is a palindrome.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     how_many_times('abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n    test_list = [\"d\", \"d\", \"g\", \"d\", \"h\", \"a\", \"d\", \"c\", \"e\", \"f\", \"b\", \"e\", \"d\", \"c\", \"a\", \"h\", \"i\", \"e\", \"e\", \"c\", \"b\", \"e\", \"b\", \"e\", \"e\", \"c\", \"a\", \"c\", \"a\", \"g\", \"e\", \"a\", \"d\", \"d\", \"h\", \"g\", \"b\", \"e\", \"d\", \"g\", \"i\", \"a\", \"d\", \"c\", \"g\", \"b\", \"e\", \"b\", \"e\", \"h\", \"i\", \"d\", \"h\", \"a\", \"c\", \"h\", \"i\", \"e\", \"e\", \"b\", \"d\", \"i\", \"a\", \"c\", ",
        "num_ids_2": 827,
        "num_ids_4": 827
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     how_many_times('pale, ple, ple, bale, bile, bil', 'e') == 3\nassert     how_many_times('pales, pale, pale, bale, bile, bil', 'e') == 4\nassert     how_many_times('pale, pale, pale, bale, bile, bil', 'ale') == 4\nassert     how_many_times('pale, pale, pale, bale, bile, bil', 'bile') == 2\nassert     how_many_times('pale, pale, pale, bale, bile, bil', 'pale') == 1\n",
        "num_ids_2": 58,
        "num_ids_4": 117
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert how_many_times('homo sapiens','s') == 3\nassert how_many_times('junction tree', 'tree') == 9\nassert how_many_times('toy patroller', 'y') == 1\n",
        "num_ids_2": 20,
        "num_ids_4": 55
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     how_many_times('abcdabcd', 'ab') == 2\nassert     how_many_times('abcdabcd', 'cd') == 2\nassert     how_many_times('abcdabcd', 'cdab') == 0\nassert     how_many_times('abcdabcd', 'abc') == 1\nassert     how_many_times('abcdabcd', 'ab') == 1\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     how_many_times(\"\", \"\") == 0\nassert     how_many_times(\"a\", \"\") == 0\nassert     how_many_times(\"a\", \"a\") == 1\nassert     how_many_times(\"ab\", \"a\") == 1\nassert     how_many_times(\"ab\", \"ab\") == 2\n",
        "num_ids_2": 29,
        "num_ids_4": 61
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nhow_many_times(\"abcabc\", \"abc\") == 3\nhow_many_times(\"abcabc\", \"bcd\") == 0\nhow_many_times(\"abcabc\", \"abcd\") == 0\nhow_many_times(\"abcabc\", \"abcabc\") == 2\nhow_many_times(\"abcabc\", \"abccc\") == 0\nhow_many_times(\"abcabc\", \"\") == 0\nhow_many_times(\"\", \"abcabc\") == 0\nhow_many_times(\"abcabc\", \"\") == 0\nhow_many_times(\"\", \"\") == 0\nhow_many_times(\"ab\", \"a\") == 1\nhow_many_times(\"ab\", \"b\") == 0\nhow_many_times(\"ab\", \"\") == 0\nhow_many_times(\"abcd\", \"bc\") == 1\nhow_many_times(\"abcd\", \"bcd\") == 1\nhow_many_times(\"abcd\", \"dc\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"\") == 0\nhow_many_times(\"abcd\", \"bc\") == 1\nhow_many_times(\"abcd\", \"abcabc\") == 2\nhow_many_times(\"abcd\", \"abccc\") == 0\nhow_many_times(\"abcd\", \"abcdabc\") == 0\nhow_many_times(\"abcd\", \"abcdabc\") == 1\nhow_many_times(\"abcd\", \"bc\") == 0\nhow_many_times(\"abcd\", \"abd\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"\") == 0\nhow_many_times(\"abcd\", \"bc\") == 0\nhow_many_times(\"abcd\", \"abcdabc\") == 2\nhow_many_times(\"abcd\", \"abcdabc\") == 2\nhow_many_times(\"abcd\", \"abcdabc\") == 2\nhow_many_times(\"abcd\", \"abcdabc\") == 2\nhow_many_times(\"abcd\", \"abc\") == 1\nhow_many_times(\"abcd\", \"\") == 0\nhow_many_times(\"abcd\", \"a\") == 0\nhow_many_times(\"abcd\", \"b\") == 0\nhow_many_times(\"abcd\", \"c\") == 0\nhow_many_times(\"abcd\", \"d\") == 0\nhow_many_times(\"abcd\", \"e\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"\") == 0\nhow_many_times(\"abcd\", \"bcd\") == 1\nhow_many_times(\"abcd\", \"abcabc\") == 2\nhow_many_times(\"abcd\", \"abccc\") == 0\nhow_many_times(\"abcd\", \"abcdabc\") == 1\nhow_many_times(\"abcd\", \"abcdabc\") == 1\nhow_many_times(\"abcd\", \"bc\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"\") == 0\nhow_many_times(\"abcd\", \"bc\") == 0\nhow_many_times(\"abcd\", \"abcabc\") == 2\nhow_many_times(\"abcd\", \"abccc\") == 0\nhow_many_times(\"abcd\", \"abcdabc\") == 1\nhow_many_times(\"abcd\", \"abcdabc\") == 1\nhow_many_times(\"abcd\", \"bc\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"abcde\") == 0\nhow_many_times(\"abcd\", \"\") == 0\nhow_many_times(\"abcd\", \"bc\") == 0\nhow_many_times(\"abcd\", \"abcabc\") == 2\nhow_many_times(\"abcd\", \"abccc\") == 0\nhow_many_times(\"abcd\", \"abcdab",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     how_many_times(\"agbcbdfbca\", \"bca\") == 2\nassert     how_many_times(\"bacb\", \"bc\") == 2\nassert     how_many_times(\"bcaccc\", \"cc\") == 3\nassert     how_many_times(\"abc\", \"ab\") == 0\nassert     how_many_times(\"abccccc\", \"cc\") == 0\n",
        "num_ids_2": 40,
        "num_ids_4": 74
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numbers(\"one one zero two one three\") == \"zero one one two three one one\"\nassert sort_numbers(\"one one zero two one three four\") == \"zero one one four two three one one\"\nassert sort_numbers(\"one one zero two one three four five\") == \"zero one one five two three four one one\"\nassert sort_numbers(\"one one zero two one three four five six\") == \"zero one one five six two three four one one\"\nassert sort_numbers(\"one one zero two one three four five six seven\") == \"zero one one five six seven two three four one one\"\n",
        "num_ids_2": 51,
        "num_ids_4": 109
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == 'eight nine zero one two three four five six seven eight'\nassert     sort_numbers('ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen') == 'nineteen eighteen nineteen twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen'\nassert     sort_numbers('fourty fifty seventy eighty ninety hundred') == 'hundred seventy eighty ninety fourty fifty fifty'\nassert     sort_numbers('fourty fifty zero one two three four') == 'zero fourty fifty fourty zero one two three four'\nassert     sort_numbers('zero nine nine zero zero nine zero') == 'zero nine zero nine zero zero nine'\n",
        "num_ids_2": 67,
        "num_ids_4": 126
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sort_numbers('zero five two one four') == 'zero one two four five'\nassert sort_numbers('zero nine zero one four') == 'zero one four zero nine'\n",
        "num_ids_2": 24,
        "num_ids_4": 45
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numbers(\"zero\") == 'zero'\nassert     sort_numbers(\"one\") == 'one'\nassert     sort_numbers(\"two\") == 'two'\nassert     sort_numbers(\"three\") == 'three'\nassert     sort_numbers(\"four\") == 'four'\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers('zero two one') == 'one two zero', \"test_sort_numbers_failed\"\nassert     sort_numbers('zero one') == 'one zero', \"test_sort_numbers_failed\"\nassert     sort_numbers('one zero') == 'zero one', \"test_sort_numbers_failed\"\nassert     sort_numbers('zero four two') == 'four zero two', \"test_sort_numbers_failed\"\nassert     sort_numbers('three zero one') == 'one zero three', \"test_sort_numbers_failed\"\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sort_numbers(\"one\") == \"one\"\nassert sort_numbers(\"five\") == \"five\"\nassert sort_numbers(\"two\") == \"two\"\nassert sort_numbers(\"three\") == \"three\"\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsort_numbers('zero nine one two three') == 'one zero two three nine'\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Valid choices are 'James', 'Maria', 'Ethan', 'Lucas', 'Michelle', 'Yvonne' and 'Charlotte'.\n    Return the string sorted from smallest to largest.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_closest_elements([]) == None \nassert     find_closest_elements([1]) == None \nassert     find_closest_elements([1.2, 2.3]) == (1.2, 2.3) \nassert     find_closest_elements([1.2, 2.3, 3]) == (1.2, 2.3) \nassert     find_closest_elements([1.2, 2.3, 3, 4]) == (1.2, 2.3) \n",
        "num_ids_2": 33,
        "num_ids_4": 97
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_closest_elements([-1, 5, 9, 12, 15, 20, 24, 48]) == (24, 48)\nassert     find_closest_elements([-1, 5, 9, 12, 15, 20, 24, 48, 66, 69]) == (24, 48)\nassert     find_closest_elements([-1, 5, 9, 12, 15, 20, 24, 48, 66, 69, 81, 92, 93]) == (24, 48)\nassert     find_closest_elements([0, 0, 0, 0, 0]) == (0, 0)\nassert     find_closest_elements([0, 1, 2, 3, 4, 5, 6, 7]) == (1, 6)\n",
        "num_ids_2": 74,
        "num_ids_4": 147
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_closest_elements([0.0, 4.0, 1.0, 1.2, 2.0, 2.3, 3.0, 3.5]) == (1.0, 1.2)\nassert     find_closest_elements([]) == (None, None)\nassert     find_closest_elements([0.0]) == (0.0, 0.0)\nassert     find_closest_elements([0.0, 4.0]) == (0.0, 4.0)\nassert     find_closest_elements([0.0, 0.0]) == (0.0, 0.0)\n",
        "num_ids_2": 73,
        "num_ids_4": 129
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_closest_elements([1, 2, 5]) == (2, 5)\nassert     find_closest_elements([4, 2, 5]) == (2, 5)\nassert     find_closest_elements([1, 4, 5]) == (1, 4)\nassert     find_closest_elements([-5, -2, -5]) == (-5, -2)\nassert     find_closest_elements([-5, -2, 5]) == (-5, 5)\n",
        "num_ids_2": 48,
        "num_ids_4": 100
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_closest_elements([1,2,3]) == (1, 2)\nassert     find_closest_elements([1,2,3,4]) == (1, 2)\nassert     find_closest_elements([1,2,3,4,5,6]) == (1, 2)\nassert     find_closest_elements([1,2,3,4,5,6,7,8]) == (1, 2)\nassert     find_closest_elements([1,2,3,4,5,6,7,8,9]) == (1, 2)\n",
        "num_ids_2": 50,
        "num_ids_4": 114
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_closest_elements([2.3, 5.7, 9.2, 10.6, 13.4]) == (5.7, 10.6)\nassert     find_closest_elements([2.3, 2.5, 5.7, 9.2, 10.6, 13.4]) == (2.3, 13.4)\nassert     find_closest_elements([-2.3, -5.7, -9.2, -10.6, -13.4]) == (-13.4, -10.6)\nassert     find_closest_elements([-2.3, -2.5, -5.7, -9.2, -10.6, -13.4]) == (-2.3, -5.7)\nassert     find_closest_elements([1, 3, 7, 10, 11, 25]) == (3, 11)\n",
        "num_ids_2": 88,
        "num_ids_4": 189
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_closest_elements([]) == (None, None)\nassert     find_closest_elements([1, 2, 3]) == (1, 2)\nassert     find_closest_elements([4, 5, 6]) == (4, 6)\nassert     find_closest_elements([8, 6, 0, -10, 4, 1]) == (8, 0)\nassert     find_closest_elements([1, 4, 5, 6]) == (1, 4)\n",
        "num_ids_2": 43,
        "num_ids_4": 98
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 9)\nassert     find_closest_elements([1, 1, 2, 2, 3, 4, 5, 6]) == (1, 2)\nassert     find_closest_elements([1, 2, 2, 3, 4, 5, 6, 6]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 9)\n",
        "num_ids_2": 66,
        "num_ids_4": 134
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_closest_elements([1,2,3]) == (1, 2)\nassert     find_closest_elements([1,2,4,5]) == (1, 4)\nassert     find_closest_elements([1,2,4,5,9,12]) == (1, 4)\nassert     find_closest_elements([3,4,5,6,7]) == (5, 7)\nassert     find_closest_elements([1,2,3]) == (1, 2)\n",
        "num_ids_2": 50,
        "num_ids_4": 108
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rescale_to_unit([0.3, 0.1, 0.5, 0.1, 0.1]) == [0.0, 0.1, 0.5, 0.1, 0.1]\nassert     rescale_to_unit([-0.3, -0.1, -0.5, -0.1, -0.1]) == [0.0, 0.1, 0.5, 0.1, 0.1]\nassert     rescale_to_unit([0.3, 0.1, 0.5, 0.1, 0.1, 0.3, 0.1, 0.5, 0.1, 0.1]) == [0.0, 0.1, 0.5, 0.1, 0.1, 0.3, 0.1, 0.5, 0.1, 0.1]\n\n\ndef rescale_to_range(numbers: List[float], lower_bound: float, upper_bound: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the range of the numbers will be a range of lower_bound to upper_bound\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 109,
        "num_ids_4": 201
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert rescale_to_unit([1, 1, 1, 1]) == [0, 0, 0, 1]\nassert rescale_to_unit([1, 2, 3, 4, 5, 6]) == [0, 0, 0, 0.3125, 0.5625, 0.90625]\nassert rescale_to_unit([0, 0.2, 0.5, 0.7]) == [0, 0.25, 0.5, 0.75]\nassert rescale_to_unit([0, 0.5, 0.7, 1]) == [0, 0.375, 0.75, 1]\n",
        "num_ids_2": 30,
        "num_ids_4": 114
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef scaler(x: float, y: float) -> float:\n    \"\"\" Given 2 values x and y, computes the scaler value, s, such that\n    x + s = y\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef normalize_to_unit_range(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers, return a new list with the same values, except that\n    all of the values are scaled so that the range of values is in the range [0,1].\n    This is the normalized version of rescale_to_unit.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([1, 0.1, 0.5]) ==  [0, 0.5, 0.9]\nassert     rescale_to_unit([0.5, 1, 1.5]) ==  [0.5, 0.9, 0.95]\nassert     rescale_to_unit([0.5, 0.9, 0.95]) ==  [0.5, 0.9, 0.95]\nassert     rescale_to_unit([-0.5, -0.9, -0.95]) ==  [-0.5, -0.9, -0.95]\n",
        "num_ids_2": 68,
        "num_ids_4": 148
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rescale_to_unit([1, 2, 3]) == [0.2, 0.4, 0.6]\nassert     rescale_to_unit([1, 2, 3, 4, 5]) == [0.2, 0.4, 0.6, 0.8, 1]\nassert     rescale_to_unit([1, 1, 1, 1]) == [0, 0.25, 0.5, 0.75]\nassert     rescale_to_unit([1, 1, 1, 1, 1]) == [0, 0.25, 0.5, 0.75, 1]\nassert     rescale_to_unit([1, 1, 1, 1, 1, 1]) == [0, 0.25, 0.5, 0.75, 1]\n",
        "num_ids_2": 70,
        "num_ids_4": 142
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef rescale_to_unit_using_percentile(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, rescale the list to be between 0 and 1,\n    where the minimum is set to the percentile of the original list, and the\n    maximum is set to 1 - the percentile of the original list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef rescale_to_unit_py(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    return numbers\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_integers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([0, \"a\", 2, 3, 4, 5, \"b\", 6, \"c\", 7, 8, 9]) ==     [0, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([0, 1, \"a\", 2, 3, 4, 5, \"b\", 6, 7, 8, 9]) ==     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([0, 1, 2, 3, \"a\", 4, 5, 6, 7, 8, 9]) ==     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     filter_integers([0, 1, 2, 3, 4, 5, 6, \"a\", 7, 8, 9]) ==     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "num_ids_2": 107,
        "num_ids_4": 218
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_integers([1, -1, 2, -2, 3, -3]) == [1, 2, -2, -3], \"Tests failed!\"\nassert     filter_integers([]) == [], \"Tests failed!\"\nassert     filter_integers([1, 2, 'three']) == [1, 2, 'three'], \"Tests failed!\"\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 57,
        "num_ids_4": 88
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3], \"Wrong result\"\n\nassert     filter_integers([1, 2, 'a', 5, 6, 'xyz']) == [1, 2, 5, 6], \"Wrong result\"\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4], \"Wrong\"\nassert     filter_integers(['a', '1', 'c', 1.3]) == ['a', '1', 'c', 1.3], \"Wrong\"\nassert     filter_integers([True, False]) == [True, False], \"Wrong\"\nassert     filter_integers([None, True, 'False', 1.3]) == [None, True, 'False', 1.3], \"Wrong\"\n\ndef map_integers(values: List[Any]) -> List[int]:\n    \"\"\" Map integers to their squares\n    \"\"\"\n    pass\n",
        "num_ids_2": 69,
        "num_ids_4": 127
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef apply_to_all(func, values):\n    \"\"\" Apply func to all values in values\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_integers([]) == [], \"Empty list\"\nassert filter_integers([1, 2, 3, 4]) == [1, 2, 3, 4], \"Numbers\"\nassert filter_integers(['a', 1, 2, 3, 'b']) == ['a', 1, 2, 3], \"Strings\"\nassert filter_integers([\"2016-01-01\", \"2016-01-02\", \"2016-01-03\"]) == [\"2016-01-01\", \"2016-01-02\", \"2016-01-03\"], \"YYYY-MM-DD\"\nassert filter_integers([True, 1, 2, 3, False]) == [True, 1, 2, 3], \"Bools\"\n",
        "num_ids_2": 44,
        "num_ids_4": 137
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3]\nassert filter_integers([-1.2, 'f', 4, 4.5, 1.0]) == [1.0, 4.5]\nassert filter_integers([1, 'a', 'c', 'd', 4.1]) == [1, 'a', 4.1]\nassert filter_integers([1.2, 'b', 'c', 'd', 4.1]) == [1.2, 4.1]\n",
        "num_ids_2": 57,
        "num_ids_4": 124
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert filter_integers([1, 2, 3]) == [1, 2, 3]\nassert filter_integers([1.0, 2.0, 3.0]) == []\nassert filter_integers([1, 'a', 3.0, True, 4]) == [1, 3, 4]\nassert filter_integers([-1, -2, 0, 1, 2, 3]) == [-1, -2, -3]\n",
        "num_ids_2": 24,
        "num_ids_4": 73
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_integers([1, 2, 3]) == [1, 2, 3], \"Wrong result\"\nassert filter_integers([1.2, 2.3, 3]) == [1.2, 2.3, 3], \"Wrong result\"\nassert filter_integers([True, False, None, 1, 3.5, \"word\", [], {}, set(), (1,2)]) == [1, 3.5, (1,2)], \"Wrong result\"\n\ndef string_join(values: List[Any], sep: str = \"\") -> str:\n    \"\"\" Returns joined string from given list of strings using sep as a delimiter\n    \"\"\"\n    pass\n",
        "num_ids_2": 61,
        "num_ids_4": 114
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strlen(\"foobar\") == 6\nassert     strlen(\"\") == 0\nassert     strlen(\" \") == 1\nassert     strlen(\"a\") == 1\nassert     strlen(\" \") == 2\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef append_arr(arr1: list, arr2: list) -> list:\n    \"\"\" Return a new array of same size with two input arrays appended\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     strlen('') == 0\nassert     strlen('a') == 1\nassert     strlen('abcdefg') == 6\nassert     strlen('abcd') == 4\n",
        "num_ids_2": 20,
        "num_ids_4": 43
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"123\") == 3\nassert     strlen(\"123456\") == 6\nassert     strlen(\"1234567\") == 7\nassert     strlen(\"123456789\") == 10\n",
        "num_ids_2": 19,
        "num_ids_4": 42
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_correct_function(\"strlen\",     \"strings\", [\"strlen\"])\nassert     is_correct_function_args(\"strlen\", [\"strings\"], [\"integer\"])\nassert     is_correct_function_return(\"strlen\", \"strings\", [\"integer\"])\nassert     is_correct_function_return_type(\"strlen\", \"strings\", [\"integer\"])\n\n\ndef strcmp(string1: str, string2: str) -> bool:\n    \"\"\" Return 1 if strings are equal, 0 if not, -1 if longer\n    \"\"\"\n    pass\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strlen(\"\") == 0\nassert     strlen(\"Hello World\") == 9\nassert     strlen(\"Wo rld\") == 8\nassert     strlen(\"code\") == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_divisor(2) == 1\nassert     largest_divisor(12) == 3\nassert     largest_divisor(15) == 3\nassert     largest_divisor(1) == 1\n\ndef count_paths(n: int, i: int, j: int, memo: Dict[int, int]) -> int:\n    \"\"\" Counts the total number of paths from (i, j) to (n, n), with a memoization table\n    \"\"\"\n    if (i, j) in memo:\n        return memo[(i, j)]\n    if i <= 0 and j <= 0:\n        return 1\n    if i <= 0 or j <= 0:\n        return 0\n    if n == i + j:\n        return 1\n    else:\n        memo[(i, j)] = count_paths(n, i - 1, j, memo) + count_paths(n, i, j - 1, memo)\n        return memo[(i, j)]\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(16) == 2\nassert     largest_divisor(20) == 5\nassert     largest_divisor(24) == 6\nassert     largest_divisor(27) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_divisor(16) == 4\nassert     largest_divisor(32) == 5\nassert     largest_divisor(4) == 1\nassert     largest_divisor(23) == 5\nassert     largest_divisor(25) == 5\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(24) == 2\nassert     largest_divisor(37) == 3\nassert     largest_divisor(39) == 3\nassert     largest_divisor(45) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_divisor(12) == 3\nassert     largest_divisor(10) == 5\nassert     largest_divisor(20) == 5\nassert     largest_divisor(15) == 1\nassert     largest_divisor(3) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_divisor(12) == 4\nassert     largest_divisor(5) == 1\nassert     largest_divisor(14) == 2\nassert     largest_divisor(1000) == 2\nassert     largest_divisor(143) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_divisor(4) == 2\nassert     largest_divisor(20) == 2\nassert     largest_divisor(24) == 3\nassert     largest_divisor(50) == 5\nassert     largest_divisor(72) == 6\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if given number is prime.\n    \"\"\"\n    pass\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == []\nassert     factorize(6) == [2, 3]\nassert     factorize(8) == [2, 2, 2, 3]\nassert     factorize(9) == [3, 3]\n",
        "num_ids_2": 20,
        "num_ids_4": 52
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef get_primes(n: int) -> List[int]:\n    \"\"\"\n    Return list of primes less than given integer in the order from smallest to largest.\n    \"\"\"\n    pass\n\ndef get_primes_list(n: int) -> List[int]:\n    \"\"\"\n    Return list of primes less than given integer in the order from smallest to largest.\n    \"\"\"\n    pass\n\ndef get_primes_from_erathosthene(n: int) -> List[int]:\n    \"\"\"\n    Return list of primes less than given integer in the order from smallest to largest.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert factorize(2) == [2,1]\nassert factorize(16) == [2,2,2,2,1,2,1,2,1,2,1,2,1,2,1]\nassert factorize(97) == [3,7,13,19,23,47,59,67,71,97]\nassert factorize(321) == [2,3,3,7,61,73,79,83,89,97,323,67,71,79,83,97]\n",
        "num_ids_2": 16,
        "num_ids_4": 84
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     factorize(6) == [2, 2]\nassert     factorize(8) == [2, 2, 2]\nassert     factorize(9) == [3, 3]\nassert     factorize(24) == [2, 2, 2, 2]\nassert     factorize(27) == [3, 3, 3]\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert factorize(1) == []\nassert factorize(2) == []\nassert factorize(3) == []\nassert factorize(4) == []\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     factorize(1) == []\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(4) == [2, 2]\nassert     factorize(5) == [5]\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_duplicates([0, 0, 1, 1, 2, 2, 2, 3, 3, 4]) == [0, 1, 2, 3, 4]\nassert remove_duplicates([]) == []\nassert remove_duplicates([1, 2]) == [1, 2]\nassert remove_duplicates([1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4]) == [1, 2, 3, 4]\nassert remove_duplicates([1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4]) == [1, 2, 3, 4]\n",
        "num_ids_2": 52,
        "num_ids_4": 112
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_duplicates([4, 2, 4, 8, 4, 3]) == [4, 2, 8, 3]\nassert     remove_duplicates([1, 1, 1, 1, 1]) == [1]\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 54,
        "num_ids_4": 81
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_duplicates([]) == []\nassert     remove_duplicates([1]) == [1]\nassert     remove_duplicates([1, 2, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 1, 3]) == [1, 2, 3]\nassert     remove_duplicates([1, 2, 1, 1]) == [1, 2, 1]\n",
        "num_ids_2": 27,
        "num_ids_4": 75
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef longest_unique_substring(s: str) -> str:\n    \"\"\" Find the longest substring in s that contains unique characters.\n\n    Parameters\n    ----------\n    s : str\n\n    Returns\n    -------\n    str\n        The longest substring that contains unique characters in s.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert remove_duplicates([1, 1, 2, 2, 2, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]\nassert remove_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3]\nassert remove_duplicates([1, 1, 2, 2, 3, 3, 3]) == [1, 2, 3]\n",
        "num_ids_2": 43,
        "num_ids_4": 111
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef check_palindrome(string: str) -> bool:\n    \"\"\" Return whether or not the given string is a palindrome.\"\"\"\n    pass\n\n\ndef find_in_list(elements: List[str], item: str) -> int:\n    \"\"\" Return the index of the first element in the elements list\n    that contains the given item. Return -1 if the item is not found.\n    \"\"\"\n    pass\n\n\ndef check_palindrome2(string: str) -> bool:\n    \"\"\" Return whether or not the given string is a palindrome.\n    Try to solve this problem using one line of code only.\n    \"\"\"\n    pass\n\n\ndef find_in_list(elements: List[str], item: str) -> int:\n    \"\"\" Return the index of the first element in the elements list\n    that contains the given item. Return -1 if the item is not found.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_duplicates([1,1,2,2]) == [1,2]\nremove_duplicates([1,2,3,3,3,3,4,4,4,4]) == [1,2,3,4]\nremove_duplicates([1,1,2,2,3,3,3,3,4,4,4,4,4,5]) == [1,2,3,4,5]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef almost_sorted(numbers: List[int]) -> bool:\n    \"\"\" Return True if the given list contains no numbers that appear more than once except for two of them\n    in a row, and that number is not in the same row as those two neighboring numbers.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flip_case(\"hElLo WoRlD\") == \"hElLo worlD\"\nassert     flip_case(\"One Two Three\") == \"eoNTw ohiTh\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"Hello World\") == \"Hello World\"\n",
        "num_ids_2": 47,
        "num_ids_4": 74
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    flip_case(\"hello\") == \"oellh\"\n    flip_case(\"HELLO\") == \"oellh\"\n    flip_case(\"heLLo\") == \"oellh\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flip_case('Hello') == \"hELLO\"\nassert flip_case('HELLO') == \"hello\"\nassert flip_case('hELLO') == \"hello\"\nassert flip_case('HELLO') == \"HELLO\"\nassert flip_case('hello') == \"hello\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    print('Start testing...')\n    doctest.testmod()\n    print('Testing passed'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flip_case('AbCdEf') == 'ABCDEf'\nassert     flip_case('abcdefg') == 'ABCDEFg'\nassert     flip_case('ABCD') == 'aBCd'\nassert     flip_case('abcd') == 'aBCd'\nassert     flip_case('ABc') == 'aBC'\n",
        "num_ids_2": 38,
        "num_ids_4": 72
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate(['a', 'b', 'c']) == \"abc\", \"Should be abc\"\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f']) == \"abcdeeef\", \"Should be abcdeeef\"\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == \"abcdefgh\", \"Should be abcdefgh\"\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == \"abcdefghi\", \"Should be abcdefghi\"\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == \"abcdefghij\", \"Should be abcdefghij\"\n",
        "num_ids_2": 70,
        "num_ids_4": 169
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate([\"hello\", \"\", \"world\"]) == \"hello world\"\nassert     concatenate([\"hello\", \"world\"]) == \"hello world\"\nassert     concatenate([\"hello\", \" \", \"world\"]) == \"hello world\"\nassert     concatenate([\"hello\", \"world\", \"!\"]) == \"hello world! \"\nassert     concatenate([\"hello\", \"world\", \"!\"]) == \"hello world! \"\n",
        "num_ids_2": 42,
        "num_ids_4": 87
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_x(strings: List[str]) -> int:\n    \"\"\" Count the number of times a character appears in a string\n    \"\"\"\n    pass\n\nassert \n\ndef count_x_2(strings: List[str]) -> int:\n    \"\"\" Count the number of times a character appears in a string\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    concatenate(['Hello', 'world']) == 'Helloworld'\n\nassert \n    concatenate(['Hello', 'world']) == 'Helloworld'\nassert \n    concatenate(['Hello', 'world', '!']) == 'Helloworld!'\nassert \n    concatenate(['Hello', 'world', '!']) == 'Helloworld!'\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate([\"hello\", \"world\", \"!\"]) == \"hello world!\"\nassert     concatenate([\"hello\", \"world\", \"!\"]) == \"hello world!\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"\"]) == \"\"\n",
        "num_ids_2": 44,
        "num_ids_4": 70
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    concatenate([\"cat\",\"dog\",\"frog\"]) == \"catdogfrog\"\n    concatenate([\"a\",\"b\",\"c\"]) == \"abc\"\n    concatenate([\"dog\",\"cat\",\"frog\"]) == \"dogcatfrog\"\n    concatenate([\"one\",\"two\"]) == \"onetwo\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate([\"Hello\", \"World!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World!\", \"!\"]) == \"HelloWorld!!\"\nassert     concatenate([\"Hello\", \"World!\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World!\", \"!\"]) == \"HelloWorld!\"\nassert     concatenate([\"Hello\", \"World!\", \"!\"]) == \"HelloWorld!\"\n",
        "num_ids_2": 42,
        "num_ids_4": 86
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    concatenate([\"Hello\"]) == \"Hello\"\n    concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\n    concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\", \"!\"]) == \"HelloWorld!\"\n    concatenate([\"Hello\", \"World\", \"!\", \"!\", \"!\", \"!\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate([\"Hello\", \"World\"]) == \"HelloWorld\"\nassert     concatenate([\"Hello\", \"World\", \"!\"]) == \"HelloWorld!\"\n",
        "num_ids_2": 42,
        "num_ids_4": 42
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate([\"a\", \"b\"]) == \"a\" + \"b\"\nassert     concatenate([\"a\"]) == \"a\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"a\", \"b\", \"c\"]) == \"a\" + \"b\" + \"c\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"a\" + \"b\" + \"c\" + \"d\"\n",
        "num_ids_2": 39,
        "num_ids_4": 82
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_prefix(['foo', 'bar', 'baz', 'foobar', 'barfoo'], 'bar') == ['bar', 'barfoo', 'foo']\nassert     filter_by_prefix(['foo', 'bar', 'baz', 'foobar', 'barfoo'], 'f') == ['foo', 'bar', 'foo']\nassert     filter_by_prefix(['foo', 'bar', 'baz', 'foobar', 'barfoo'], 'fo') == ['foobar', 'barfoo']\nassert     filter_by_prefix(['foo', 'bar', 'baz', 'foobar', 'barfoo'], 'f') == ['foo', 'bar']\n",
        "num_ids_2": 83,
        "num_ids_4": 161
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"a\", \"b\", \"c\"], \"a\") == [\"a\", \"b\", \"c\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"b\") == [\"b\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\"], \"d\") == []\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"a\") == [\"a\", \"b\", \"c\"]\nassert     filter_by_prefix([\"a\", \"b\", \"c\", \"d\"], \"c\") == [\"c\"]\n",
        "num_ids_2": 56,
        "num_ids_4": 113
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_prefix([\"b\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"b\", \"a\", \"a\", \"b\", \"a\"], \"b\") == [\"b\"]\nassert     filter_by_prefix([\"b\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"b\", \"a\", \"a\", \"b\", \"a\"], \"x\") == [\"b\", \"a\"]\nassert     filter_by_prefix([\"b\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"b\", \"a\", \"a\", \"b\", \"a\"], \"\") == [\"b\", \"a\"]\nassert     filter_by_prefix([\"b\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"b\", \"a\", \"a\", \"b\", \"a\"], \"\") == [\"b\", \"a\"]\nassert     filter_by_prefix([\"b\", \"a\", \"a\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"b\", \"a\", \"a\", \"b\", \"a\"], \"a\") == [\"a\"]\n",
        "num_ids_2": 119,
        "num_ids_4": 239
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (\n    filter_by_prefix(\n        ['abc', 'abd', 'bcd', 'cd'], 'ab'\n    ) == ['abc', 'abd']\n), 'The function should filter a list of strings only with strings that start with a given prefix.'\n\nassert (\n    filter_by_prefix(\n        ['abc', 'abd', 'bcd', 'cd'], 'bc'\n    ) == ['bcd', 'cd']\n), 'The function should filter a list of strings only with strings that start with a given prefix.'\n\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_prefix([\"prefix1\", \"prefix2\", \"prefix3\"], \"prefix1\") == [\"prefix1\"]\nassert     filter_by_prefix([\"prefix1\", \"prefix2\", \"prefix3\"], \"\") == [\"\"]\nassert     filter_by_prefix([\"\", \"prefix2\", \"prefix3\"], \"prefix1\") == [\"prefix2\", \"prefix3\"]\nassert     filter_by_prefix([\"\", \"\", \"prefix3\"], \"prefix1\") == [\"prefix3\"]\n",
        "num_ids_2": 56,
        "num_ids_4": 114
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_prefix([\"random\", \"random2\", \"random3\"], \"random\") == [\"random\"]\nassert     filter_by_prefix([\"random\", \"random2\", \"random3\"], \"random2\") == [\"random2\"]\nassert     filter_by_prefix([\"random\", \"random2\", \"random3\"], \"random3\") == [\"random3\"]\nassert     filter_by_prefix([\"random\", \"random2\", \"random3\"], \"random4\") == []\nassert     filter_by_prefix([\"random\", \"random2\", \"random3\"], \"random5\") == []\n",
        "num_ids_2": 56,
        "num_ids_4": 111
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_prefix(['a', 'ab', 'aba', 'acb', 'abc'], 'ab') == ['aba', 'acb', 'abc']\nassert     filter_by_prefix(['a', 'ab', 'aba', 'acb', 'abc', 'abcd'], 'ab') == ['aba', 'acb', 'abc']\nassert     filter_by_prefix(['a', 'ab', 'aba', 'acb', 'abc', 'abcd'], 'abc') == ['abc']\nassert     filter_by_prefix(['a', 'ab', 'aba', 'acb', 'abc', 'abcd'], 'a') == ['a']\n\ndef sort_list_of_strings(strings: List[str]) -> List[str]:\n    \"\"\" Sort an input list of strings in alphabetical order.\n",
        "num_ids_2": 84,
        "num_ids_4": 158
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('*' * 40)\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive([1, 2, 3, -1]) == [1, 2, 3]\nassert     get_positive([-1, 2, -3, 4]) == [-1, 2, 4]\nassert     get_positive([1, -2, 3, 4]) == []\n",
        "num_ids_2": 49,
        "num_ids_4": 67
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_positive(list()) == [], \"Test Failed, get_positive() should return an empty list\"\nassert     get_positive([-3, 1, 2, 4, -2, 2, -3, 0]) == [1, 2, -3, 4], \"Test Failed, get_positive() should return a list of only positive numbers\"\nassert     get_positive([-3, 0, -2, -2, 0]) == [-2, 0], \"Test Failed, get_positive() should return a list of only positive numbers\"\nassert     get_positive([0, -2, -3, -2, -5, 4, -3]) == [0, -3, -2, -5, 4], \"Test Failed, get_positive() should return a list of only positive numbers\"\n",
        "num_ids_2": 80,
        "num_ids_4": 181
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"Test passed\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_positive([-1, 2, -3, 4, 5]) == [-1, 2, 4, 5]\nassert     get_positive([1, 2, -3, 4, 5]) == [1, 2, 4, 5]\nassert     get_positive([1, 2, -3, 4, 5, 10]) == [1, 2, 4, 5, 10]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 57,
        "num_ids_4": 89
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([1, -1, -3]) == [1]\nassert     get_positive([1, -2, -3]) == []\nassert     get_positive([-1, 1]) == [1]\nassert     get_positive([]) == []\n",
        "num_ids_2": 36,
        "num_ids_4": 62
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"\\n# test get_positive\")\n\n    positive_list = get_positive(list(range(10)))\n    print(f\"list: {list(range(10))}\")\n    print(f\"positive numbers: {positive_list}\\n\")\n\n    positive_list = get_positive([])\n    print(f\"list: {[]}\")\n    print(f\"positive numbers: {[]}\\n\")\n\n    positive_list = get_positive([0])\n    print(f\"list: {[0]}\")\n    print(f\"positive numbers: {[0]}\\n\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([0, 5, -1, -10, -100, 50, 0, -1]) == [-1, 50, 0], \"Error in get_positive\"\nassert     get_positive([-0.1, -5.5, -1, -10, -100, 50, 0, -1]) == [-1, 50, 0], \"Error in get_positive\"\nprint(\"  get_positive function works correctly\")\n",
        "num_ids_2": 90,
        "num_ids_4": 90
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_positive([1, 2, -3, -5]) == [1, 2, -3, -5], 'First'\nassert     get_positive([]) == [], 'Second'\nassert     get_positive([-5, -3, -2, -1]) == [-5, -3, -2, -1], 'Third'\n\n",
        "num_ids_2": 46,
        "num_ids_4": 81
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_positive([1,2,0,5,-4,7,4,-1]) == [1,2,4,7]\nassert get_positive([-1,2,3,-4,5,-6]) == [-1,2,3,-4,5,-6]\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test the function\n    list = [-1, 0, 1, -1, 2]\n    print(get_positive(list))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Pass')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_prime(2) == False\nassert     is_prime(3) == True\nassert     is_prime(5) == False\nassert     is_prime(7) == True\nassert     is_prime(11) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_prime(3) == True\nassert     is_prime(12) == False\nassert     is_prime(1) == False\nassert     is_prime(100) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not \n",
        "num_ids_2": 7,
        "num_ids_4": 7
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_prime(4) == False\nis_prime(5) == True\nis_prime(6) == False\nis_prime(7) == True\nis_prime(8) == True\nis_prime(9) == False\nis_prime(10) == True\nis_prime(11) == False\nis_prime(12) == False\n\nprint(\"check the correctness of is_prime()\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\n\nif __name__ == \"__main__\":\n    # These are inputs to the function, DO NOT CHANGE\n    xs = [3, 0, 0, 0, 0, -1]\n    x = 1.5\n\n    # This is output from the function, DO NOT CHANGE\n    print(find_zero(xs))\n    # print(poly(xs, x))\n    # print(find_zero(xs)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"{}\".format(find_zero([1, 0, 1, 0, 1, 0])))\nassert find_zero([1, 0, 1, 0, 1, 0]) == 1.0\nassert find_zero([-1, 0, 1, 0, 1, 0]) == 2.0\nassert find_zero([1, 0, -1, 0, 1, 0]) == 3.0\n",
        "num_ids_2": 25,
        "num_ids_4": 71
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_zero([1, 1, -2, 2, -1]) == 1.7\n\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_zero([1,1,0,-1,1,0,1,1,0]) == (2,1,1)\nassert     find_zero([2,0,1,0,-1,1,0,0,1,0,1,0,1,0,0]) == (1,3,1)\nassert     find_zero([2,0,0,1,0,0,1,0,0,0,0]) == (1,4,0)\n\n\ndef eval_at_points(xs: list, xs_points: list):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at points xs_points.\n    return list of values of polynomial at each point\n    \"\"\"\n    points = [(x, poly(xs, x)) for x in xs_points]\n    return list(map(lambda x: x[1], points))\n",
        "num_ids_2": 78,
        "num_ids_4": 115
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_third([\"ceci\", \"est\", \"test\", \"dont\"]) == ['test', 'ceci', \"dont\", \"est\"]\nassert     sort_third([\"ceci\", \"est\", \"test\", \"dont\"]) == [\"dont\", \"ceci\", \"est\", \"test\"]\n",
        "num_ids_2": 74,
        "num_ids_4": 74
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert (sort_third([1,2,3,4,5]) == [2,3,4,5,1])\nassert (sort_third([1,2,3,4,5,6]) == [2,3,4,5,6,1])\nassert (sort_third([1,2,3,4,5,6,7]) == [2,3,4,5,6,7,1])\nassert (sort_third([1,2,3,4,5,6,7,8]) == [2,3,4,5,6,7,8,1])\n",
        "num_ids_2": 32,
        "num_ids_4": 102
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third([3,5,2,7,1,1,1]) == [1,1,1,1,2,3,5], \"Fail\"\nassert     sort_third([5,4,3,2,1,2]) == [1,2,2,3,4,5], \"Fail\"\nassert     sort_third([4,6,2,3,1,4]) == [1,2,2,3,4,4], \"Fail\"\nassert     sort_third([1,2,3,4,4,5,6,7]) == [1,2,3,4,4,5,6,7], \"Fail\"\nassert     sort_third([9,2,1,9,3,6,8]) == [1,2,3,9,9,9,8], \"Fail\"\n",
        "num_ids_2": 76,
        "num_ids_4": 156
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_third(l = [3, 1, 2, 4, 6, 8, 3, 1, 9, 0]) == [0, 1, 2, 3, 3, 4, 6, 8, 9, 3]\nassert     sort_third(l = [1, 3, 3, 3, 2, 3, 3, 4, 6, 8, 3]) == [1, 2, 3, 3, 3, 3, 3, 4, 6, 8, 3]\nassert     sort_third(l = [8, 3, 9, 7, 1, 1, 1, 9, 4, 8, 1]) == [1, 1, 1, 1, 1, 1, 8, 9, 7, 9, 8]\nassert     sort_third(l = [1, 4, 2, 6, 8, 3, 9, 1, 7]) == [1, 1, 1, 2, 3, 4, 6, 7, 8]\nassert     sort_third(l = [6, 8, 4, 9, 2, 1, 0, 3, 7]) == [0, 1, 2, 3, 4, 6, 7, 8, 9]\n",
        "num_ids_2": 108,
        "num_ids_4": 212
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_third([]) == []\nassert     sort_third([1, 2, 3]) == [[1, 2, 3]]\nassert     sort_third([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "num_ids_2": 31,
        "num_ids_4": 78
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_third([1, 3, 5, 6, 9, 12, 13]) ==     [1, 3, 6, 9, 12, 13, 5]\nassert     sort_third([10, 5, 2, 1, 8, 9, 3]) ==     [1, 2, 3, 5, 8, 9, 10]\nassert     sort_third([10, 5, 2, 1, 8, 9, 3, 5]) ==     [1, 2, 3, 5, 8, 9, 10]\nassert     sort_third([10, 5, 2, 1, 8, 9, 3, 10]) ==     [1, 2, 3, 5, 8, 9, 10]\nassert     sort_third([10, 5, 2, 1, 8, 9, 3, 1]) ==     [1, 2, 3, 1, 5, 8, 9, 10]\n",
        "num_ids_2": 76,
        "num_ids_4": 156
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_third([]) == []\nassert sort_third([2,2,3]) == [[2,2,3]]\nassert sort_third([1,2,4,4]) == [[1,2,4,4]]\nassert sort_third([5,2,4,3,1,2]) == [[1,2,4,3,2,5]]\nassert sort_third([4,3,4,3,3,2]) == [[3,3,4,4,3,2]]\n",
        "num_ids_2": 30,
        "num_ids_4": 86
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique([1,2,3,4]) == [1,2,3,4], \"Wrong\"\nassert     unique([1,2,3,4,3,1,2]) == [1,2,3,4,1,2], \"Wrong\"\nassert     unique([]) == [], \"Wrong\"\n",
        "num_ids_2": 64,
        "num_ids_4": 77
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([1,1,2,2,3,3]) == [1,2,3]\nassert     unique(['a','a','b','b','c','c']) == ['a','b','c']\nassert     unique([1,1,2,2,3,3,3,3]) == []\nassert     unique([]) == []\n",
        "num_ids_2": 52,
        "num_ids_4": 83
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique([1,1,1,1,1]) == [1]\nassert     unique([1,1,2,2,3]) == [1,2,3]\nassert     unique([1,1,1,2,2,3]) == [1,2,3]\nassert     unique([1,1,1,2,2,2,3]) == [1,2,3]\n",
        "num_ids_2": 42,
        "num_ids_4": 94
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique([1,2,3,4,5]) == [1,2,3,4,5], \"Should return sorted unique elements in a list\"\nassert     unique([1,2,3,2,4,5]) == [1,2,3,4,5], \"Should return sorted unique elements in a list\"\n",
        "num_ids_2": 76,
        "num_ids_4": 76
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique([1,2,2,3,3,3,2,2]) == sorted([1,2,3,2])\n\nassert unique([\"spam\", \"eggs\", \"sausages\"]) == sorted([\"spam\", \"eggs\", \"sausages\"])\n\nassert unique([1,1,1,1,1,1]) == sorted([1,1,1,1])\n",
        "num_ids_2": 67,
        "num_ids_4": 94
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique([1,1,1]) == [1, 1]\nassert     unique([]) == []\nassert     unique([1,2,3,4]) == [1,2,3,4]\nassert     unique([1,2,3]) == [1,2,3]\nassert     unique([1,1,1,2,3]) == [1,2,3]\n",
        "num_ids_2": 25,
        "num_ids_4": 67
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique([1,1,2,2,3,4,5,5,5,5,6]) == [1,2,3,4,5,6]\nassert unique([1,1,2,2,3,4,5,5,5,5,6,1,1]) == [1,2,3,4,5,6]\nassert unique([1,1,2,2,3,4,5,5,5,5,6]) == [1,2,3,4,5,6]\n",
        "num_ids_2": 85,
        "num_ids_4": 125
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_element([1,2,3,4,5]) == 5\nassert     max_element([1,2,3,4,5,6,7]) == 7\nassert     max_element([]) == None\nassert     max_element([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == -1\nassert     max_element([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -1\n",
        "num_ids_2": 42,
        "num_ids_4": 92
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nl = [-1, -2, -3, -4, -5]\nprint(max_element(l))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmax_element([1, 2, 3, 5, 5, 5]) == 5\nassert \nmax_element([1, 2, 3, 5, 4, 5]) == 5\nassert \nmax_element([1, 2, 3, 5, 4, 5, 6, 7, 9]) == 10\nassert \nmax_element([]) == Non",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([1, 2, 3, 5, 4]) == 5\nassert     max_element([1, 5, 4, 2, 3]) == 5\nassert     max_element([1, 5, 4, 2, 3, 4, 5]) == 5\nassert     max_element([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n",
        "num_ids_2": 38,
        "num_ids_4": 80
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_element([1, 3, -1, 2]) == 3\nassert     max_element([5, -10, 3, 5, -10]) == 10\nassert     max_element([]) == None\nassert     max_element([2,2,2]) == 2\n",
        "num_ids_2": 39,
        "num_ids_4": 64
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_element(l) == l[0]\n",
        "num_ids_2": 14,
        "num_ids_4": 14
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_element([1, 2, 3, 4, 5])     == 5\nassert     max_element([-1, -2, -3, -4, -5])     == -1\nassert     max_element([-2, -1, -3, -4, -5])     == -1\nassert     max_element([-2, -1, -3, -4, 5])     == 5\nassert     max_element([])     == None\n",
        "num_ids_2": 46,
        "num_ids_4": 96
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_element([1, 2, 3, 4, 5, 6]) == 6\nassert     max_element([4, 5, 6]) == 6\nassert     max_element([]) == None\nassert     max_element([1, 2, 3, 4, 5]) == 5\nassert     max_element([1, 2, 3, 4, 5, 6]) == 6\n",
        "num_ids_2": 36,
        "num_ids_4": 65
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fizz_buzz(15) == 5\nassert     fizz_buzz(20) == 1\nassert     fizz_buzz(30) == 0\nassert     fizz_buzz(40) == 1\nassert     fizz_buzz(50) == 2\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fizz_buzz(0) == 0\nassert     fizz_buzz(1) == 0\nassert     fizz_buzz(5) == 0\nassert     fizz_buzz(10) == 0\nassert     fizz_buzz(17) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfizz_buzz(100) == 11\nfizz_buzz(1000) == 111\nfizz_buzz(2000) == 121\nfizz_buzz(100000) == 123\nfizz_buzz(7) == 7\nfizz_buzz(101) == 11\nfizz_buzz(12) == 33\nfizz_buzz(13) == 13\nfizz_buzz(23) == 21\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(fizz_buzz(20))\nprint(fizz_buzz(50))\nprint(fizz_buzz(97))\n\ndef double_first_character(s: str):\n    \"\"\"Return a copy of the string with the first character doubled.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    return 0\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sort_even([7, 5, 3, 9, 8, 6, 5]) == sorted([7, 3, 5, 5, 6, 8, 9])\nassert sort_even([1, 5, 7, 4]) == sorted([1, 4, 5, 7])\nassert sort_even([7, 8, 5, 9, 3]) == sorted([7, 3, 8, 5, 9])\nassert sort_even([7, 5, 9]) == sorted([7, 5, 9])\n",
        "num_ids_2": 40,
        "num_ids_4": 94
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_even([1, 3, 4, 2, 5]) == [1, 2, 3, 4, 5]\nassert     sort_even([1, 3, 4, 2, 5, 7, 8, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]\n\nprint(\"Success.\")\n",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_even([0,1,2,3,4]) == [0,2,4,1,3], \"test failed\"\nassert     sort_even([4,3,2,1,0]) == [0,1,2,3,4], \"test failed\"\nassert     sort_even([1,2,3,4,5]) == [1,2,3,4,5], \"test failed\"\n\nassert sort_even([\"a\", \"b\", \"c\"]) == [\"b\",\"c\", \"a\"], \"test failed\"\n",
        "num_ids_2": 66,
        "num_ids_4": 128
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decode_cyclic(encode_cyclic(\"foofoo\")) == \"foo\"\nassert     decode_cyclic(encode_cyclic(\"foofoofoo\")) == \"foofoofoo\"\nassert     decode_cyclic(encode_cyclic(\"foofoo\")) == \"foo\"\nassert     decode_cyclic(encode_cyclic(\"foofoofoo\")) == \"foofoofoo\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode_cyclic(\"abc\") == \"abc\"\nassert     encode_cyclic(\"abc\") == encode_cyclic(encode_cyclic(\"abc\"))\nassert     encode_cyclic(\"abc\") == encode_cyclic(encode_cyclic(encode_cyclic(\"abc\")))\nassert encode_cyclic(\"abc\") == decode_cyclic(encode_cyclic(\"abc\"))",
        "num_ids_2": 40,
        "num_ids_4": 95
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decode_cyclic(encode_cyclic(\"hello\")) == \"hello\"\nassert     decode_cyclic(encode_cyclic(\"world\")) == \"world\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\nassert     decode_cyclic(encode_cyclic(\"h\")) == \"\"\nassert     decode_cyclic(encode_cyclic(\"hy\")) == \"hy\"\n",
        "num_ids_2": 42,
        "num_ids_4": 79
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_cyclic(\"fgebxd\") == \"fgebxd\"\nassert     decode_cyclic(\"ebegxk\") == \"ebegxk\"\nassert     decode_cyclic(\"hcbvkk\") == \"hcbvkk\"\n\ndef encode_simple(s: str):\n    \"\"\"\n    returns encoded string using only one character.\n    \"\"\"\n    return s\n\ndef decode_simple(s: str):\n    \"\"\"\n    takes as input string encoded with encode_simple function. Returns decoded string.\n    \"\"\"\n    return s\n",
        "num_ids_2": 44,
        "num_ids_4": 65
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode_cyclic(\"abcdefghi\") == \"aaaabbbbccccddddee\"\nassert decode_cyclic(\"aaaabbbbccccddddee\") == \"abcdefghi\"",
        "num_ids_2": 48,
        "num_ids_4": 48
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    s = \"start\"\n    print(encode_cyclic(s))\n    print(decode_cyclic(encode_cyclic(s)))\n\nif __name__ == \"__main__\":\n    main()",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\nassert     prime_fib(5) == 11\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Correct\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     prime_fib(5) == 5 and prime_fib(4) == 3 and prime_fib(1) == 2 and prime_fib(0) == 2\nassert prime_fib(10000) == 6179 and prime_fib(99999) == 6179 and prime_fib(1000000) == 6179\nassert prime_fib(1) == 2 and prime_fib(0) == 2\n",
        "num_ids_2": 78,
        "num_ids_4": 99
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprime_fib(20) == 19\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not triples_sum_to_zero([])\nassert triples_sum_to_zero([4, -1, 1])\nassert triples_sum_to_zero([2, 2, -2])\nassert not triples_sum_to_zero([0])\n",
        "num_ids_2": 16,
        "num_ids_4": 52
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(triples_sum_to_zero([-1,0,1,2,-2,-3])) # True\nprint(triples_sum_to_zero([0,0,0,0])) # False\nprint(triples_sum_to_zero([-2,-3,-1,-1,2])) # False\nprint(triples_sum_to_zero([-2,-1,1,2])) # True",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # Your code here\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('Testing triples_sum_to_zero...')\ntest_triples_sum_to_zero = (\n    [-3, 0, 1, 2, -2, 1, -1, 3],\n    [-3, 0, 1, 2, -2, 1, -1, 3],\n    [0, -3, 0, 1, 2, -2, 1, -1],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2, -2, -2, -2, -2, -2, -2],\n    [-2, -2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert triples_sum_to_zero([-3, -2, -1, 0, 1, 2])\nassert not triples_sum_to_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, -3, -2, -1, 0, 1, 2])\n",
        "num_ids_2": 32,
        "num_ids_4": 103
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([-3, 1, 2, -2, 1, -1, 3, -4]) == True\nassert triples_sum_to_zero([-3, 4, -2, 1, -1, 3]) == True\nassert triples_sum_to_zero([-3, 4, -2, 1, -1, -3]) == True\nassert triples_sum_to_zero([-3, 4, -2, 1, -1, 3, -4]) == False\nassert triples_sum_to_zero([0, -3, 1, -2, 1, -1, 3, -4]) == False\n",
        "num_ids_2": 62,
        "num_ids_4": 122
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2",
        "num_ids_2": 28,
        "num_ids_4": 42
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 5\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    Your goal is to count the number of collisions.\n    \"\"\"\n    pass\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    car_race_collision(0) == 1\n    car_race_collision(1) == 1\n    car_race_collision(2) == 2\n    car_race_collision(3) == 2\n    car_race_collision(4) == 3\n    car_race_collision(5) == 3\n    car_race_collision(6) == 4\n    car_race_collision(7) == 4\n    car_race_collision(8) == 4\n    car_race_collision(9) == 5\n    car_race_collision(10) == 5\n    car_race_collision(11) == 5\n    car_race_collision(12) == 5\n    car_race_collision(13) == 5\n    car_race_collision(14) == 5\n    car_race_collision(15) == 5\n    car_race_collision(16) == 5\n    car_race_collision(17) == 5\n    car_race_collision(18) == 5\n    car_race_collision(19) == 5\n    car_race_collision(20) == 5\n    car_race_collision(21) == 5\n    car_race_collision(22) == 5\n    car_race_collision(23) == 5\n    car_race_collision(24) == 5\n    car_race_collision(25) == 5\n    car_race_collision(26) == 5\n    car_race_collision(27) == 5\n    car_race_collision(28) == 5\n    car_race_collision(29) == 5\n    car_race_collision(30) == 5\n    car_race_collision(31) == 5\n    car_race_collision(32) == 5\n    car_race_collision(33) == 5\n    car_race_collision(34) == 5\n    car_race_collision(35) == 5\n    car_race_collision(36) == 5\n    car_race_collision(37) == 5\n    car_race_collision(38) == 5\n    car_race_collision(39) == 5\n    car_race_collision(40) == 5\n    car_race_collision(41) == 5\n    car_race_collision(42) == 5\n    car_race_collision(43) == 5\n    car_race_collision(44) == 5\n    car_race_collision(45) == 5\n    car_race_collision(46) == 5\n    car_race_collision(47) == 5\n    car_race_collision(48) == 5\n    car_race_collision(49) == 5\n    car_race_collision(50) == 5\n    car_race_collision(51) == 5\n    car_race_collision(52) == 5\n    car_race_collision(53) == 5\n    car_race_collision(54) == 5\n    car_race_collision(55) == 5\n    car_race_collision(56) == 5\n    car_race_collision(57) == 5\n    car_race_collision(58) == 5\n    car_race_collision(59) == 5\n    car_race_collision(60) == 5\n    car_race_collision(61) == 5\n    car_race_collision(62) == 5\n    car_race_collision(63) == 5\n    car_race_collision(64) == 5\n    car_race_collision(65) == 5\n    car_race_collision(66) == 5\n    car_race_collision(67) == 5\n    car_race_collision(68) == 5\n    car_race_collision(69) == 5\n    car_race_collision(70) == 5\n    car_race_collision(71) == 5\n    car_race_collision(72) == 5\n    car_race_collision(73) == 5\n    car_race_collision(74) == 5\n    car_race_collision(75) == 5\n    car_race_collision(76) == 5\n    car_race_collision(77) == 5\n    car_race_collision(7",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef car_race_turning_left(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     car_race_collision(n=1) == 1, 'test1: fail'\nassert car_race_collision(n=2) == 1, 'test2: fail'\nassert car_race_collision(n=3) == 2, 'test3: fail'\nassert car_race_collision(n=4) == 3, 'test4: fail'\nassert car_race_collision(n=5) == 5, 'test5: fail'\n",
        "num_ids_2": 45,
        "num_ids_4": 89
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 28
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     car_race_collision(5) == 5\nassert car_race_collision(10) == 40\nassert car_race_collision(3) == 10\nassert car_race_collision(2) == 9\n",
        "num_ids_2": 27,
        "num_ids_4": 53
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     car_race_collision(2) == 1\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 2\nassert     car_race_collision(5) == 2\nassert     car_race_collision(6) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     incr_list([]) == []\nassert     incr_list([1]) == [2]\nassert     incr_list([1,2]) == [2,3]\nassert     incr_list([1,2,3]) == [2,3,4]\nassert     incr_list([1,2,3,4]) == [2,3,4,5]\n",
        "num_ids_2": 25,
        "num_ids_4": 65
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nincr_list([]) == []\nassert incr_list([1]) == [2]\nassert incr_list([2, 1]) == [3, 2]\nassert incr_list([1, 2, 3]) == [2, 3, 4]\nassert incr_list([1, 2, 3, 4]) == [2, 3, 4, 5]\n",
        "num_ids_2": 16,
        "num_ids_4": 54
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     incr_list([1, 2, 3]) ==    [2, 3, 4], \"incr_list([1, 2, 3])\"\nassert     incr_list([2, 3, 4]) ==    [3, 4, 5], \"incr_list([2, 3, 4])\"\nassert     incr_list([2, 4, 8]) ==    [3, 5, 9], \"incr_list([2, 4, 8])\"\n",
        "num_ids_2": 72,
        "num_ids_4": 108
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5]\n    print(incr_list(l))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     incr_list([1, 2]) == [2, 3], 'incr_list([1, 2])'\nassert     incr_list([1, 2, 3]) == [2, 3, 4], 'incr_list([1, 2, 3])'\nassert     incr_list([1, 2, 3, 4]) == [2, 3, 4, 5], 'incr_list([1, 2, 3, 4])'\nassert     incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6], 'incr_list([1, 2, 3, 4, 5])'\nassert     incr_list([1, 2, 3, 4, 5, 6]) == [2, 3, 4, 5, 6, 7], 'incr_list([1, 2, 3, 4, 5, 6])'\n",
        "num_ids_2": 64,
        "num_ids_4": 152
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pairs_sum_to_zero([-4,1,-3,2,-5,2]) == True\nassert     pairs_sum_to_zero([1,-1]) == True\nassert     pairs_sum_to_zero([-4,-3]) == True\nassert     pairs_sum_to_zero([1,2,2]) == False\nassert     pairs_sum_to_zero([-1,-1]) == False\n",
        "num_ids_2": 45,
        "num_ids_4": 84
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pairs_sum_to_zero([]) == False, \"Empty list should return false\"\nassert pairs_sum_to_zero([2, 7, 1, -4]) == True, \"Two pairs\"\nassert pairs_sum_to_zero([1, 2, 3, -4]) == False, \"Two distinct pairs\"\nassert pairs_sum_to_zero([2, 4, 7, 1, -4]) == True, \"Three pairs\"\nassert pairs_sum_to_zero([-3, 1, 2, -4, 7, 1]) == True, \"Two pairs\"\n",
        "num_ids_2": 49,
        "num_ids_4": 104
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pairs_sum_to_zero([3,4,3]) == True\nassert     pairs_sum_to_zero([1,4,5]) == False\nassert pairs_sum_to_zero([1,4,3,2,3]) == True\n\ndef find_smallest_xor(l):\n    \"\"\"\n    find_smallest_xor takes a list of integers as an input.\n    it returns the smallest integer x such that every element in the list\n    can be represented as x ^ 0.\n    \"\"\"\n    pass\n",
        "num_ids_2": 40,
        "num_ids_4": 62
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert pairs_sum_to_zero([1,2,3]) == True\nassert pairs_sum_to_zero([1,2,1]) == False\nassert pairs_sum_to_zero([-1, -1]) == True\nassert pairs_sum_to_zero([1, 2, -2]) == True\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pairs_sum_to_zero([-1,-2,1,-3])\nassert     pairs_sum_to_zero([-2,-1,-3,4])\nassert     pairs_sum_to_zero([-1,-2,-3])\nassert     not pairs_sum_to_zero([-1,-2,3])\nassert     not pairs_sum_to_zero([-1,-2,3,-4])\n",
        "num_ids_2": 42,
        "num_ids_4": 80
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([-5,-4,-3,-2,-1,1,2,3,4,5]) == True, \"Wrong Answer\"\nassert     pairs_sum_to_zero([1,2,3,4,5]) == False, \"Wrong Answer\"\nassert     pairs_sum_to_zero([-1,-2,-3,-4]) == False, \"Wrong Answer\"\nassert     pairs_sum_to_zero([-1,2,3,-2]) == True, \"Wrong Answer\"\n\n\ndef squares_to_numbers(l):\n    \"\"\"\n    squares_to_numbers takes a list of integers as an input.\n    it returns a new list that includes only the numbers in the input list that \n    are squares of some integer.\n    \"\"\"\n    pass\n",
        "num_ids_2": 71,
        "num_ids_4": 129
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pairs_sum_to_zero([-1, 0, 1, 2, -1, -4]) == False,\\\n    \"Your function should return True if there are two distinct elements in the list that sum to zero, and False otherwise.\"\nassert     pairs_sum_to_zero([1, 1, 1, 1]) == True,\\\n    \"Your function should return True if there are two distinct elements in the list that sum to zero, and False otherwise.\"\nassert pairs_sum_to_zero([0, 0]) == False,\\\n    \"Your function should return True if there are two distinct elements in the list that sum to zero, and False otherwise.\"\nassert pairs_sum_to_zero([]) == False,\\\n    \"Your function should return True if there are two distinct elements in the list that sum to zero, and False otherwise.\"\nassert pairs_sum_to_zero([3, 3]) == True,\\\n    \"Your function should return True if there are two distinct elements in the list that sum to zero, and False otherwise.\"\n",
        "num_ids_2": 55,
        "num_ids_4": 88
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([]) == False, 'Empty list'\nassert     pairs_sum_to_zero([5]) == False, 'One element list'\nassert     pairs_sum_to_zero([-4, 1, 2, -3, 1, 4, -5]) == True, 'Pair list'\nassert     pairs_sum_to_zero([0, -4, 1, 2, -3, 1, 4, -5]) == True, 'Negative pairs'\nassert     pairs_sum_to_zero([5, 1, 2, 3, 1, 3, 2, -1]) == False, 'Duplicate'\n",
        "num_ids_2": 42,
        "num_ids_4": 118
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Pass' if (False == pairs_sum_to_zero([-3, -2, -1, 0, 1, 2, 3])) else 'Fail')\nprint('Pass' if (True == pairs_sum_to_zero([-3, -2, -1, 0, 1, 2, 3])) else 'Fail')\nprint('Pass' if (False == pairs_sum_to_zero([-3, -2, -1, 0, 1, 2])) else 'Fail')\nprint('Pass' if (True == pairs_sum_to_zero([-3, -2, -1, 0, 1, 2])) else 'Fail')\n\nprint('\\n************************************\\n')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pairs_sum_to_zero([1, 2, 3, -4, -4, 6, -2]) == False\nassert     pairs_sum_to_zero([1, -2, 3, 4, 5, 6]) == True\nassert     pairs_sum_to_zero([-1, 2, 3, 4, 5, 6]) == False\nassert     pairs_sum_to_zero([]) == False\nassert     pairs_sum_to_zero([-3, -4, -5, -6, -7]) == False\n",
        "num_ids_2": 58,
        "num_ids_4": 100
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert change_base(10, 2) == '10'\nassert change_base(10, 8) == '10'\n\ndef change_base2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 17,
        "num_ids_4": 31
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_base(4, 2) == \"32\"\nassert     change_base(4, 8) == \"4\"\n",
        "num_ids_2": 30,
        "num_ids_4": 30
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(change_base(57, 2))\nprint(change_base(3, 16))\nprint(change_base(0, 16))\nprint(change_base(0, 2))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef change_base2(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base <= 10:\n        return f\"{x}\"\n    elif base == 16:\n        return hex(x)\n    elif base == 8:\n        return oct(x)\n    elif base == 2:\n        return bin(x)\n    else:\n        return f\"{x}\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_base(101, 2) == \"10\", \"Wrong result\"\nassert     change_base(10, 10) == \"A\", \"Wrong result\"\nassert     change_base(123456789, 16) == \"234567890\", \"Wrong result\"\nassert     change_base(14, 2) == \"12\", \"Wrong result\"\n",
        "num_ids_2": 40,
        "num_ids_4": 86
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_base(2, 16) == \"10\"\nassert change_base(100, 2) == \"100\"\nassert change_base(25, 2) == \"25\"\nassert change_base(12, 3) == \"12\"\nassert change_base(0, 10) == \"0\"\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_base(5, 2) == \"101\", \"Not correct, 5 in 2 base\"\nassert     change_base(5, 3) == \"965\", \"Not correct, 5 in 3 base\"\nassert     change_base(5, 4) == \"9\", \"Not correct, 5 in 4 base\"\nassert     change_base(5, 5) == \"5\", \"Not correct, 5 in 5 base\"\nassert     change_base(5, 6) == \"10\", \"Not correct, 5 in 6 base\"\n",
        "num_ids_2": 49,
        "num_ids_4": 97
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_base(10, 2) == '1010', \"Wrong answer\"\nassert     change_base(16, 16) == '0', \"Wrong answer\"\nassert     change_base(10, 16) == 'A', \"Wrong answer\"\nassert     change_base(10, 0) == '10', \"Wrong answer\"\nassert     change_base(10, 1) == '11', \"Wrong answer\"\n",
        "num_ids_2": 41,
        "num_ids_4": 81
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert triangle_area(1, 1) == 1\nassert triangle_area(2, 2) == 2\nassert triangle_area(3, 2) == 3\nassert triangle_area(2, 3) == 5\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(1, 1) == 1\nassert     triangle_area(1, 2) == 1.5\nassert     triangle_area(1, 3) == 1.75\nassert     triangle_area(2, 3) == 2\nassert     triangle_area(3, 3) == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(2,1) == 2\nassert     triangle_area(2,2) == 4\nassert     triangle_area(2,3) == 6\nassert     triangle_area(4,2) == 8\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(5, 3) == 7.0\nassert     triangle_area(3, 6) == 15.0\nassert     triangle_area(4, 8) == 52.0\nassert     triangle_area(6, 10) == 152.0\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    \"\"\"\n    return (a*h)/2\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fib4(4) == 2\nassert     fib4(5) == 0\nassert     fib4(10) == 0\nassert     fib4(16) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fib4(0)        ==     0\nassert     fib4(1)        ==     0\nassert     fib4(2)        ==     1\nassert     fib4(3)        ==     0\nassert     fib4(4)        ==     2\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    for i in range(10):\n        assert fib4(i) == fib4(i-1) + fib4(i-2) + fib4(i-3) + fib4(i-4)\n\n    print(\"Testing fib4: passed!\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median([1,2,3,4]) == 2\nassert median([1,2,2,4]) == 2\nassert median([1,1,2,2]) == 2\nassert median([1,1,1,1]) == 1\nassert median([1,2,3]) == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 58
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert median([]) == None\nassert median([1,2]) == 2\nassert median([1,2,3,4]) == 2\n",
        "num_ids_2": 10,
        "num_ids_4": 34
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"Test success. Your median function is correct.\")\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median([4, 2, 1]) == 2\nassert median([5, 3, 4, 2, 1]) == 3\nassert median([5, 3, 4, 2, 1, 0]) == 3\nassert median([5, 3, 4, 2, 1, 1]) == 3.5\n",
        "num_ids_2": 30,
        "num_ids_4": 68
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median([]) == 0\nassert     median([1]) == 1\nassert     median([1,2,3]) == 2\nassert     median([1,2,3,4]) == 2.5\nassert     median([1,2,3,4,5]) == 2.5\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nmedian([1,2,3,4,5])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median([1,2,3]) == 2\nassert     median([4,5,6]) == 5\nassert     median([7,8,9]) == 7.5\nassert     median([10,11,12]) == 11\nassert     median([13,14,15]) == 14\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median([1, 5, 10, 20, 50, 75, 100]) == 50\nassert     median([1, 5, 10, 20, 50, 75, 100, -10]) == 50\nassert     median([1, 5, 10, 20, 50, 75, 100, -10, -10]) == 50\nassert     median([1, 5, 10, 20, 50, 75, 100]) == 50\nassert     median([1, 5, 10, 20, 50, 75, 100, -10]) == 50\n",
        "num_ids_2": 47,
        "num_ids_4": 97
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not is_palindrome(\"\")\nassert not is_palindrome(\"a\")\nassert is_palindrome(\"racecar\")\nassert is_palindrome(\"racecar\")\n",
        "num_ids_2": 13,
        "num_ids_4": 35
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nis_palindrome(\"Never odd or even\")\n\nis_palindrome(\"abc\")\n\nis_palindrome(\"a\")\n\nis_palindrome(\"\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_palindrome(\"A man, a plan, a canal: Panama\") == True\nassert     is_palindrome(\"race a car\") == False\nassert     is_palindrome(\"race cars\") == True\nassert     is_palindrome(\"I am a man\") == True\nassert     is_palindrome(\"\") == True\n",
        "num_ids_2": 37,
        "num_ids_4": 67
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_palindrome('') == True, \"Empty\"\nassert     is_palindrome('A man, a plan, a canal: Panama') == True, \"True\"\nassert     is_palindrome('race a car') == False, \"False\"\nassert     is_palindrome('race a car, a') == False, \"False\"\nassert     is_palindrome('race a car, A') == False, \"False\"\n",
        "num_ids_2": 43,
        "num_ids_4": 83
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"a\") is True, \"Test for a is palindrome\"\nassert     is_palindrome(\"abccba\") is True, \"Test for abccba is palindrome\"\nassert     is_palindrome(\"aab\") is False, \"Test for aab is not palindrome\"\nassert     is_palindrome(\"abcba\") is True, \"Test for abcba is palindrome\"\nassert     is_palindrome(\"abc\") is False, \"Test for abc is not palindrome\"\n",
        "num_ids_2": 50,
        "num_ids_4": 102
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_palindrome(\"\") == True, \"Empty string is a palindrome\"\nassert is_palindrome(\"a\") == False, \"One character string is not a palindrome\"\nassert is_palindrome(\"ana\") == True, \"One character string is a palindrome\"\nassert is_palindrome(\"kayak\") == True, \"One character string is a palindrome\"\n",
        "num_ids_2": 24,
        "num_ids_4": 71
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_palindrome(\"\", True) is True\nassert     is_palindrome(\"a\", True) is False\nassert     is_palindrome(\"ab\", True) is False\nassert     is_palindrome(\"aba\", True) is True\nassert     is_palindrome(\"abba\", True) is False\n",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef f(x, y):\n    \"\"\"Return the value of the polynomial\n    P(x) * P(y).\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     modp(1, 3) == 2\nassert     modp(2, 3) == 1\nassert     modp(3, 3) == 0\nassert     modp(4, 3) == 2\nassert     modp(5, 3) == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     modp(0, 2) == 0\nassert     modp(1, 2) == 1\nassert     modp(2, 2) == 1\nassert     modp(3, 2) == 1\nassert     modp(4, 2) == 0\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert modp(20, p = 21) == (20 % 21)\n\nassert modp(20, p = 21) == modp(20, p = 21)\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     modp(1, 11) == 5\nassert     modp(2, 11) == 3\nassert     modp(3, 11) == 2\nassert     modp(4, 11) == 1\nassert     modp(5, 11) == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     modp(1, 1) == 1\nassert modp(1, 2) == 0\nassert modp(2, 1) == 0\nassert modp(2, 2) == 1\nassert modp(2, 3) == -1\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     modp(2,8) == 3\nassert     modp(2,7) == 4\nassert     modp(3,7) == 5\nassert     modp(4,7) == 6\nassert     modp(5,7) == 6\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef mod_p_2(x: int, p: int):\n    return (x%p)%2\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ns = \"j\"\nprint(s)\nprint(encode_shift(s))\nprint(decode_shift(encode_shift(s)))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decode_shift(\"qzrpomhahwxvcnevamdszkxujm\") == \"qzrpomhahwxvcnevamdszkxujm\"\nassert     decode_shift(\"gsxmhvhkwtynfonhbrwgdsx\") == \"gsxmhvhkwtynfonhbrwgdsx\"\nassert     decode_shift(\"qzrpomhahwxvcnevamdszkxujm\") == \"qzrpomhahwxvcnevamdszkxujm\"\n\n",
        "num_ids_2": 94,
        "num_ids_4": 142
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode_shift(\"abcd\") == \"bcde\"\nassert     decode_shift(\"bcde\") == \"abcd\"\n",
        "num_ids_2": 32,
        "num_ids_4": 32
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     encode_shift(\"hackerrank\") == \"jqfpgqywfec\"\nassert decode_shift(\"jqfpgqywfec\") == \"hackerrank\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decode_shift(\"HELP\") == \"HELP\"\nassert     decode_shift(\"HELLO\") == \"HELLO\"\nassert     decode_shift(\"HELLO\") == \"HELLO\"\nassert     decode_shift(\"HELLO\") == \"HELLO\"\nassert     decode_shift(\"HELLO\") == \"HELLO\"\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     encode_shift(\"abcdef\") == \"bcdefa\"\nassert decode_shift(\"bcdefa\") == \"abcdef\"\nassert decode_shift(\"mnopqrstuvwxyz\") == \"azbcdegvxyz\"\nassert decode_shift(\"xafvjkplnrmotz\") == \"azbcdegvxafvjkplnrmotz\"\n\n",
        "num_ids_2": 32,
        "num_ids_4": 93
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\"\"\"\nStep 1: Create a shift cipher object with keys: \"f\", \"e\", \"d\", \"c\", \"b\", \"a\", \"k\", \"m\", \"l\", \"i\" and \"j\"\n\"\"\"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_shift(\"klpfbr\") == \"kfvb\"\nassert     decode_shift(\"aes\") == \"hgs\"\nassert     decode_shift(\"fs\") == \"s\"\nassert     decode_shift(\"o\") == \"o\"\nassert     decode_shift(\"\") == \"\"\n",
        "num_ids_2": 36,
        "num_ids_4": 64
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"Helloworld\") == \"Hll\"\nassert     remove_vowels(\"it's a bird!\") == \"its a bird\"\nprint(\"\u2705 Test passed.\")\n",
        "num_ids_2": 34,
        "num_ids_4": 55
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef change_case(text):\n    \"\"\"\n    change_case is a function that takes string and returns string with changed case.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_vowels(\"we like eggs\") == \"we like e\", \"Should return 'we like e'\"\nassert     remove_vowels(\"we like eggs and ham\") == \"we like e and h\", \"Should return 'we like e and h'\"\nassert     remove_vowels(\"we like eggs and ham and spam\") == \"we like e and h and p\", \"Should return 'we like e and h and p'\"\nassert     remove_vowels(\"we like eggs and ham and spam and ham\") == \"we like e and h and p and h\", \"Should return 'we like e and h and p and h'\"\nassert     remove_vowels(\"I like eggs and ham and spam and ham\") == \"I like e and h and p and h\", \"Should return 'I like e and h and p and h'\"\n",
        "num_ids_2": 60,
        "num_ids_4": 144
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_vowels('Hellow World!') == 'Helo World!'\nassert     remove_vowels('Python is fun!') == 'Pythin is Fun!'\nassert     remove_vowels('bye!') == 'biy'\n",
        "num_ids_2": 42,
        "num_ids_4": 59
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_vowels(\"This is a test.\") == \"Thi s a tet. \"\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_vowels('cat') == 't'\nassert     remove_vowels('aardvark') == 'r'\nassert     remove_vowels('tiger') == 't'\nassert     remove_vowels('python') == 'y'\nassert     remove_vowels('APPLE') == 'P'\n",
        "num_ids_2": 33,
        "num_ids_4": 64
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_vowels('hello') == 'hll'\nassert remove_vowels('Hello World') == 'Hlw'\nassert remove_vowels('Why are you here?') == 'Wybr'\n\nprint('You\\'ve successfully passed the remove_vowels test.')",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \"this is an example string\" == remove_vowels(\"this is an example string\")\nassert \nassert \"this is an example string\" == remove_vowels(\"this is an example string\")\nassert \n",
        "num_ids_2": 25,
        "num_ids_4": 50
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"a\") == \"\"\nassert     remove_vowels(\"A\") == \"\"\nassert     remove_vowels(\"B\") == \"\"\n",
        "num_ids_2": 24,
        "num_ids_4": 50
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not below_threshold([5,1,2], 3)\nassert below_threshold([1,2,3], 3)\n",
        "num_ids_2": 19,
        "num_ids_4": 34
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_threshold([5,2,1,4,2], 4) == False\nassert     below_threshold([5,2,1,4,2], 5) == True\nassert     below_threshold([], 0) == False\nassert     below_threshold([], 1) == True\nassert     below_threshold([-1], -1) == True\n",
        "num_ids_2": 44,
        "num_ids_4": 70
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert below_threshold([3, 4, 5, 6, 7], 3)\nassert below_threshold([3, 4, 5, 6, 7], 6) == False\nassert below_threshold([3, 4, 5, 6, 7], 1) == True\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n",
        "num_ids_2": 22,
        "num_ids_4": 64
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_threshold([], 0) == False\nassert     below_threshold([1], 0) == True\nassert     below_threshold([1,2], 0) == True\nassert     below_threshold([2,1], 0) == True\nassert     below_threshold([1,2,3,4,5], 0) == False\n",
        "num_ids_2": 27,
        "num_ids_4": 59
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(below_threshold([], 0))\nprint(below_threshold([10, 9, 8, 7], 10))\nprint(below_threshold([0, 0, 0, 0], 0))\n\nprint('\\n******* Test 8 *******')\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \"\"\"\n    return l < t\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_threshold([5,6,3,7], 5) == True\nassert below_threshold([5,6,3,7], 3) == False\n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n",
        "num_ids_2": 39,
        "num_ids_4": 39
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_below_threshold():\n    print(\"Testing below_threshold...\")\n    assert below_threshold([1,2,3,4,5], 3) == True\n    assert below_threshold([1,2,3,4,5], 5) == False\n\ntest_below_threshold()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add(3,3) == 6\nassert     add(3,4) == 7\nassert     add(2,2) == 4\nassert     add(1,1) == 2\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add(1, 1) == 2, \"Addition is wrong\"\nassert     add(1, 2) == 3, \"Addition is wrong\"\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"\\nTesting add(x,y) function...\")\n    assert add(1,1) == 2\n    assert add(1,0) == 1\n    assert add(0,1) == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(add(2, 3))\nprint(add(1, 4))\nprint(add(5, 8))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add(10,5) == 15\nassert     add(10,1) == 11\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add(2, 2) == 4\nassert     add(5, 10) == 15\n\ndef multi(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    \"\"\"\n    pass\n",
        "num_ids_2": 22,
        "num_ids_4": 22
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert same_chars('hello', 'hello') == True\nassert same_chars('hello', 'hello world') == False\nassert same_chars('hello', 'hello w') == False\n\nprint(\"YOUR CODE IS CORRECT!\")\nprint('-'*70)\n",
        "num_ids_2": 17,
        "num_ids_4": 47
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return True if len(set(s0) ^ set(s1)) == 0 else False\n\nassert same_chars(\"hello\", \"hello\") == True\nassert same_chars(\"hello\", \"olleh\") == False\n",
        "num_ids_2": 17,
        "num_ids_4": 33
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"Same_chars tests passed\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     same_chars('abcd', 'abcd')\nassert     same_chars('abc', 'abc')\nassert     same_chars('ab', 'ab')\nassert     not same_chars('ab', 'cd')\nassert     not same_chars('ab', 'ac')\n",
        "num_ids_2": 28,
        "num_ids_4": 55
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     same_chars('apple', 'apples')\nassert     not same_chars('apples', 'apples')\nassert     not same_chars('apples', 'p')\nassert     same_chars('apples', 'pe')\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     same_chars('what', 'what')\nassert not same_chars('what', 'what')\nassert     same_chars('hello', 'hello')\nassert not same_chars('hello', 'world')\nassert     same_chars('abcd', 'abcd')\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     same_chars('abcd', 'abcd') == True\nassert     same_chars('abcd', 'abde') == False\nassert     same_chars('abcd', 'abd') == False\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     same_chars('', '') == True\nassert     same_chars('', 'A') == False\nassert     same_chars('A', 'A') == True\nassert     same_chars('A', 'B') == False\nassert     same_chars('A', 'AB') == False\n",
        "num_ids_2": 27,
        "num_ids_4": 57
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     same_chars('hello', 'hello')\nassert not     same_chars('hello', 'hello world')\nassert     same_chars('hello', 'abc')\nassert     same_chars('hello', 'abc')\nassert     same_chars('', 'a')\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\nassert fib(4) == 3\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(fib(10))\nprint(fib(100))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\nassert fib(4) == 3\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"<([])>\") == True\nassert     correct_bracketing(\"<]>\") == True\nassert     correct_bracketing(\"<<[)>>\") == False\nassert     correct_bracketing(\"<]\") == False\nassert     correct_bracketing(\"<(>\") == False\n",
        "num_ids_2": 31,
        "num_ids_4": 61
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<\") is True\nassert     correct_bracketing(\"(<\") is False\nassert     correct_bracketing(\"(<\") is False\nassert     correct_bracketing(\"<>\") is True\nassert     correct_bracketing(\"<(\") is False\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<>\") == True\nassert     correct_bracketing(\"<)>\") == False\nassert     correct_bracketing(\"<<\") == True\n\ndef bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if brackets is a correct bracketing, and False if brackets is not a correct bracketing.\n    \"\"\"\n    return     correct_bracketing(brackets) == True\n",
        "num_ids_2": 29,
        "num_ids_4": 42
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing('<()>') == True\nassert correct_bracketing('<(>') == False\nassert correct_bracketing('((>') == False\n\ndef verify_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    # check if the brackets are correct\n    if correct_bracketing(brackets) == True:\n        # if the brackets are correct, we need to find if they are balanced\n        # we can just verify all the opening brackets and then\n        # check the closing bracket.\n\n        # if the brackets are not balanced, then return False\n        # we must return False before checking the closing brackets\n",
        "num_ids_2": 29,
        "num_ids_4": 42
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"<(((<>))))>\") == True\nassert     correct_bracketing(\"<()>\") == False\nassert     correct_bracketing(\"<()\") == False\n",
        "num_ids_2": 34,
        "num_ids_4": 48
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing('<()><()<(>(') is False\nassert     correct_bracketing('<{()>(<{)<{<') is True\nassert     correct_bracketing('<()><()<(>(') is False\nassert     correct_bracketing('<)><}>') is False\nassert     correct_bracketing('<)><}>') is False\n",
        "num_ids_2": 42,
        "num_ids_4": 79
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert correct_bracketing(\"<\") == True\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<[]\") == True\nassert correct_bracketing(\"<{}\") == True\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"<()><(>)>\") is True\nassert     correct_bracketing(\"<()><(>)>\") is False\nassert     correct_bracketing(\"<(>)<()><()>\") is True\nassert     correct_bracketing(\"<(>)<(>)><()>\") is False\n",
        "num_ids_2": 36,
        "num_ids_4": 77
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncorrect_bracketing(\"<([])\") == False\ncorrect_bracketing(\"<([)]\") == False\ncorrect_bracketing(\"<{([])}\") == True\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     monotonic([1, 2, 3, 2, 4]) == False\nassert     monotonic([1, 2, 3, 4, 2]) == True\nassert     monotonic([1, 2, 3, 3, 4]) == True\nassert     monotonic([1, 2, 3, 4, 3]) == True\nassert     monotonic([1, 2, 3, 4, 2, 3]) == True\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"All tests passed!\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     monotonic([-1, 1, -2, 2, -3, 3, -4, 4]) == True\nassert     monotonic([1, 2, 3, 4]) == False\nassert     monotonic([0, 0, 0, 0]) == True\nassert     monotonic([-1, -2, -3, -4, -5, -6]) == False\nassert     monotonic([0, 0, 0, 0]) == True\n",
        "num_ids_2": 46,
        "num_ids_4": 90
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     monotonic([0,1,2,3])     == True\nassert     monotonic([1,1,1])     == True\nassert     monotonic([1,2,3])     == False\n\ndef is_sorted(l: list):\n    \"\"\"Return True if list is sorted.\n    \"\"\"\n    pass\n",
        "num_ids_2": 34,
        "num_ids_4": 50
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     monotonic([1, 2, 3, 2, 4]) == True, 'Wrong. Expected True'\nassert     monotonic([5, 5, 5]) == False, 'Wrong. Expected False'\nassert     monotonic([1, 2, 3]) == False, 'Wrong. Expected False'\nassert     monotonic([]) == False, 'Wrong. Expected False'\nassert     monotonic([1, 1, 1, 1, 1, 1]) == False, 'Wrong. Expected False'\n",
        "num_ids_2": 52,
        "num_ids_4": 95
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     monotonic([1, 2, 3, 4, 5, 6, 7, 8])\nassert     not monotonic([1, 2, 3, 4, 5, 6, 7, 8])\nassert     monotonic([3, 3, 2, 1, 5, 3, 6, 7])\nassert     monotonic([3, 1, 2, 3, 4, 5, 6, 7])\nassert     monotonic([1, 2, 3, 4, 5, 6, 7])\n",
        "num_ids_2": 47,
        "num_ids_4": 93
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nl = list(range(0,4))\nprint(monotonic(l))\nprint(monotonic(l)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    # ~monotonic([1, 2, 3, 1, 5, 3, 2])\n    # ~monotonic([1, 1, 1, 1])\n    # ~monotonic([1, 1, 2, 1, 2, 1])\n    # ~monotonic([1, 1, 2, 2, 1, 2])\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_k_frequent_elements(elements: list, k: int) -> list:\n    \"\"\"\n    Return a list of elements whose frequency is >= k\n    >>> get_k_frequent_elements([1,2,2,4,3,4,4,4,4,4], 4)\n    [1, 2, 4]\n    >>> get_k_frequent_elements([1,2,2,4,3,4,4,4,4,4], 3)\n    [1, 2, 4]\n    >>> get_k_frequent_elements([], 2)\n    []\n    >>> get_k_frequent_elements([1,2,2,4,3,4,4,4,4,4], 5)\n    []\n    \"\"\"\n    count = 0\n    frequent_elements = []\n\n    for element in elements:\n        if count < k:\n            if elements.count(element) > count:\n                count = elements.count(element)\n                frequent_elements.append(element)\n        else:\n            break\n\n    return frequent_elements\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common([1,2,3], [1,2,3]) == [1,2]\nassert     common([1,2,3], [1,2,4]) == [1,2]\nassert     common([1,2,3], [1,2,4,3]) == [1,2]\nassert     common([1,2,3], [1,2,4,5,3]) == [1,2,3]\nassert     common([1,2,3], [4,5,3]) == []\n",
        "num_ids_2": 48,
        "num_ids_4": 104
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common([1,2,3], [2,3,4]) == [2,3]\nassert     common([], [1,2,3]) == []\nassert     common([], []) == []\nassert     common([1,2], [1,2,3]) == [1,2]\nassert     common([1,2,2], [1,2,3]) == [1,2]\n",
        "num_ids_2": 39,
        "num_ids_4": 71
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common([1, 1, 2, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Fail\"\nassert common([1, 1, 2, 4, 5], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5], \"Fail\"\nassert common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Fail\"\n",
        "num_ids_2": 83,
        "num_ids_4": 123
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common([1, 2, 3], [1, 2]) == [1, 2]\nassert     common([1, 2, 3], [2, 3]) == []\nassert     common([1, 2, 3], [1, 3]) == [1, 3]\nassert     common([1, 2, 3], [2, 1]) == [2, 1]\nassert     common([1, 2, 3, 4], [1, 2, 3]) == [1, 2, 3]\n",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common([1, 2, 3, 4, 5], [3, 5, 6, 7, 8]) == [3, 5]\nassert     common([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == []\n\nassert common([1, 2, 3, 4, 5], [3, 5, 6, 7, 8, 9]) == [3, 5, 6, 7]\n\n",
        "num_ids_2": 60,
        "num_ids_4": 97
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common([1,2,3], [1,2,3]) == [1,2]\nassert common([], []) == []\nassert common([], [3]) == []\nassert common([1,2,3], [4,5,6]) == []\nassert common([1,2,3], [1,2,3,4]) == [1]\n",
        "num_ids_2": 33,
        "num_ids_4": 62
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common([1, 2, 3, 4], [2, 3]) == [2, 3]\nassert common([1, 2, 3, 4], [4, 5]) == []\nassert common([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3]\nassert common([1, 2, 3, 4], [4, 5, 6, 7]) == [4, 5]\nassert common([1, 2, 3], [2, 3, 4, 5]) == []\n",
        "num_ids_2": 43,
        "num_ids_4": 97
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common([1,2,3],    [2,3,4]) == [2,3], \\\n        \"Function should return a sorted unique common elements.\"\nassert     common([1,2,3],    [1,4,5]) == [], \\\n        \"Function should return an empty list if the two lists are empty.\"\nassert     common([],    []) == [], \\\n        \"Function should return an empty list if the two lists are empty.\"\nassert     common([1,2,3],    [2,3,4,5]) == [2,3], \\\n        \"Function should return a sorted unique common elements.\"\nassert     common([1,2,3],    [1,4,5]) == [1,4], \\\n        \"Function should return a sorted unique common elements.\"\n",
        "num_ids_2": 49,
        "num_ids_4": 90
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (largest_prime_factor(6) == 2) \nassert     (largest_prime_factor(12) == 2) \nassert     (largest_prime_factor(30) == 3) \nassert     (largest_prime_factor(100) == 2) \nassert     (largest_prime_factor(90) == 3) \n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_prime_factor(12) == 3\nassert     largest_prime_factor(16) == 2\nassert     largest_prime_factor(1) == 2\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(7) == 7\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(7) == 2\nassert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(100) == 5\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(21) == 3\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef factorization(n: int):\n    \"\"\"Return the prime factors of n as a list of 2-tuples.\n    \"\"\"\n    pass\n\ndef prime_factors(n: int):\n    \"\"\"Return the prime factors of n as a list of 2-tuples.\n    \"\"\"\n    pass\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime.\n    \"\"\"\n    pass\n\ndef prime_decomposition(n: int):\n    \"\"\"Return the prime decomposition of n.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nsum_to_n(1) == 1\nsum_to_n(100) == 45\nsum_to_n(100) == 55\nsum_to_n(2000) == 10000\n\nprint(\"Exercise 8:\")\ndef int_and_bool_to_char(a: int, b: bool):\n    \"\"\"int_and_bool_to_char takes two integers and converts them to their\n    corresponding character values. If a value is a 1, then it is converted\n    to the ASCII character 'X', otherwise the ASCII character'' is used.\n    \"\"\"\n    pass\n\nassert \nint_and_bool_to_char(1, True) == 'X'\nint_and_bool_to_char(1, False) ==''\nint_and_bool_to_char(0, True) == 'X'\nint_and_bool_to_char(0, False) ==''\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(3) == 6\nassert     sum_to_n(4) == 10\nassert     sum_to_n(5) == 15\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_to_n(5) == 10\nassert     sum_to_n(0) == 0\nassert     sum_to_n(9) == 29\nassert     sum_to_n(10) == 45\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_to_n(1) == 1\nassert     sum_to_n(2) == 3\nassert     sum_to_n(100) == 5050\nassert     sum_to_n(0) == 0\nassert     sum_to_n(-100) == -5050\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_to_n(4) == 1 + 2 + 3, \"Expected sum_to_n(4) to be 1 + 2 + 3\"\nassert     sum_to_n(10) == 1 + 2 + 3 + 4, \"Expected sum_to_n(10) to be 1 + 2 + 3 + 4\"\nassert     sum_to_n(100) == 1 + 2 + 3 + 4 + 5, \"Expected sum_to_n(100) to be 1 + 2 + 3 + 4 + 5\"\n",
        "num_ids_2": 78,
        "num_ids_4": 123
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    nums = range(1, n + 1)\n    result = sum(nums)\n    return result\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_to_n(10) == 55\nassert     sum_to_n(1) == 1\nassert     sum_to_n(100) == 5050\nassert     sum_to_n(1000000) == 100000055\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(sum_to_n(3))\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"\") == True\nassert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(()())\") == True\nassert     correct_bracketing(\"(((())))\") == True\nassert     correct_bracketing(\"(((())()))\") == False\n",
        "num_ids_2": 25,
        "num_ids_4": 56
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_valid_expression(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if brackets is correct, else return False.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"()))\") == False\nassert     correct_bracketing(\"(()()\") == False\nassert     correct_bracketing(\"))()())\") == True\n",
        "num_ids_2": 27,
        "num_ids_4": 56
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert(correct_bracketing(\"(())\") == True)\n    assert(correct_bracketing(\"(()\") == False)\n    assert(correct_bracketing(\"(()()\") == True)\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not correct_bracketing(\"\") == True, \"Empty bracket\"\nassert not correct_bracketing(\"(\") == True, \"Wrong bracket\"\nassert not correct_bracketing(\"(()(()))()\") == True, \"Wrong bracket\"\nassert not correct_bracketing(\"(((()())))\") == True, \"Wrong bracket\"\n",
        "num_ids_2": 20,
        "num_ids_4": 63
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"\")\nassert     correct_bracketing(\"()\")\nassert     correct_bracketing(\"(())\")\nassert     correct_bracketing(\"())\")\nassert     correct_bracketing(\"((())\")\n",
        "num_ids_2": 21,
        "num_ids_4": 44
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert correct_bracketing(\"(\") == True\nassert correct_bracketing(\"(()\") == True\nassert correct_bracketing(\"(()()\") == True\nassert correct_bracketing(\"(()()(()))\") == True\n",
        "num_ids_2": 15,
        "num_ids_4": 42
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert derivative(3) == 0\nassert derivative(2) == 0\nassert derivative(1) == 1\nassert derivative(0) == 0\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert derivative([0, 1, 2]) == [0, 1, 0]\nassert derivative([1, 2, 3]) == [1, 1, 2]\nassert derivative([1, 2, 3, 4]) == [2, 2, 3, 0]",
        "num_ids_2": 21,
        "num_ids_4": 61
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     derivative([1, 1, 1]) == [2, 3, 4]\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_derivatives(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef newton_method(xs: list, eps: float):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    xs[i] is a local minimum, and f(xs[i]) is always 0.\n    \"\"\"\n    for i in range(len(xs)):\n        if i == 0 or xs[i] == xs[i-1]:\n            continue\n\n        xi = xs[i]\n        x_i = xs[i]\n        for j in range(i+1, len(xs)):\n            x_j = xs[j]\n            delta = xs[j] - x_i - x_j * (x_i - x_j) / (2 * (xi - x_i))\n            if abs(delta) < eps:\n                break\n            x_i = x_j\n        xs[i] = delta\n    print(xs)\n\nif __name__ == \"__main__\":\n    xs = [-1, 2, -2, 4, -10]\n    derivative(xs)\n    newton_method(xs, eps=1e-8",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     derivative([1, 2, 3]) == [2, 6, 12]\nassert     derivative([1, 2, 3, 4]) == [6, 24, 48, 24]\nassert     derivative([1, 0, 0, 1]) == [0, 0, 0, 0]\n",
        "num_ids_2": 46,
        "num_ids_4": 71
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef eval_polynomial(xs: list, v: float):\n    \"\"\" Evaluate the polynomial that is represented by xs and v.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(3))\nprint(fibfib(4))\nprint(fibfib(5))\nprint(fibfib(6))\nprint(fibfib(7))\nprint(fibfib(8))\nprint(fibfib(9))\nprint(fibfib(10))\nprint(fibfib(11))\nprint(fibfib(12))\nprint(fibfib(13))\nprint(fibfib(14))\nprint(fibfib(15))\nprint(fibfib(16))\nprint(fibfib(17))\nprint(fibfib(18))\nprint(fibfib(19))\nprint(fibfib(20))\nprint(fibfib(21))\nprint(fibfib(22))\nprint(fibfib(23))\nprint(fibfib(24))\nprint(fibfib(25))\nprint(fibfib(26))\nprint(fibfib(27))\nprint(fibfib(28))\nprint(fibfib(29))\nprint(fibfib(30))\nprint(fibfib(31))\nprint(fibfib(32))\nprint(fibfib(33))\nprint(fibfib(34))\nprint(fibfib(35))\nprint(fibfib(36))\nprint(fibfib(37))\nprint(fibfib(38))\nprint(fibfib(39))\nprint(fibfib(40))\nprint(fibfib(41))\nprint(fibfib(42))\nprint(fibfib(43))\nprint(fibfib(44))\nprint(fibfib(45))\nprint(fibfib(46))\nprint(fibfib(47))\nprint(fibfib(48))\nprint(fibfib(49))\nprint(fibfib(50))\nprint(fibfib(51))\nprint(fibfib(52))\nprint(fibfib(53))\nprint(fibfib(54))\nprint(fibfib(55))\nprint(fibfib(56))\nprint(fibfib(57))\nprint(fibfib(58))\nprint(fibfib(59))\nprint(fibfib(60))\nprint(fibfib(61))\nprint(fibfib(62))\nprint(fibfib(63))\nprint(fibfib(64))\nprint(fibfib(65))\nprint(fibfib(66))\nprint(fibfib(67))\nprint(fibfib(68))\nprint(fibfib(69))\nprint(fibfib(70))\nprint(fibfib(71))\nprint(fibfib(72))\nprint(fibfib(73))\nprint(fibfib(74))\nprint(fibfib(75))\nprint(fibfib(76))\nprint(fibfib(77))\nprint(fibfib(78))\nprint(fibfib(79))\nprint(fibfib(80))\nprint(fibfib(81))\nprint(fibfib(82))\nprint(fibfib(83))\nprint(fibfib(84))\nprint(fibfib(85))\nprint(fibfib(86))\nprint(fibfib(87))\nprint(fibfib(88))\nprint(fibfib(89))\nprint(fibfib(90))\nprint(fibfib(91))\nprint(fibfib(92))\nprint(fibfib(93))\nprint(fibfib(94))\nprint(fibfib(95))\nprint(fibfib(96))\nprint(fibfib(97))\nprint(fibfib(98))\nprint(fibfib(99))\nprint(fibfib(100))\nprint(fibfib(101))\nprint(",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fibfib(0) == 0, \"fibfib(0) == 0\"\nassert     fibfib(1) == 0, \"fibfib(1) == 0\"\nassert     fibfib(2) == 1, \"fibfib(2) == 1\"\nassert     fibfib(3) == 1, \"fibfib(3) == 1\"\nassert     fibfib(5) == 4, \"fibfib(5) == 4\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(8) == 13\nassert     fibfib(10) == 55\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef fibfib(n):\n    if n == 0: return 0\n    if n == 1: return 1\n    return fibfib(n - 1) + fibfib(n - 2)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"-\" * 80 + \"\\n\", \n    vowels_count.__doc__, \"\\n\", \n    \"-\" * 80, \"\\n\")\n\nprint(\"This function is working:\")\nprint(FIX)\nprint(\"Let's test the function:\")\nprint(vowels_count(\"AbcD\"))\nprint(vowels_count(\"aeiou\"))\nprint(vowels_count(\"IY\"))\n\n\nprint(\"\\nHere is the input string to analyze:\")\nprint(FIX)\nprint(\"The number of vowels:\", vowels_count(input(\">> \")))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     vowels_count(\"abc\") == 0, \"First test case does not pass.\"\nassert     vowels_count(\"abcdef\") == 0, \"Second test case does not pass.\"\nassert     vowels_count(\"abcdefgh\") == 1, \"Third test case does not pass.\"\nassert     vowels_count(\"ABCDEFGH\") == 4, \"Fourth test case does not pass.\"\nassert     vowels_count(\"ABCdefghi\") == 1, \"Fifth test case does not pass.\"\n",
        "num_ids_2": 45,
        "num_ids_4": 93
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nvowels_count('apple') == 5, \"Not right!\"\n\nassert \nvowels_count('apple') == 5, \"Not right!\"\n\nassert \nvowels_count('apple') == 5, \"Not right!\"\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(FIX)\nprint(vowels_count(input()))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef solve_problem(fname='in.txt'):\n    with open(fname) as f:\n        text = f.read()\n\n    tokens = text.split()\n    \n    return sum([vowels_count(t) for t in tokens])\n\nif __name__ == '__main__':\n    from pathlib import Path\n    import sys\n    def main(argv):\n        if len(argv) < 1:\n            print('Missing input file name.')\n            return 1\n        \n        fname = Path(argv[0])\n        if not fname.exists():\n            print(f'{fname} does not exist.')\n            return 1\n        \n        fname = str(fname)\n        solution = solve_problem(fname)\n        \n        print(solution)\n        return 0\n\n    sys.exit(main(sys.argv[1:])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nvowels_count('abracadabra') == 4\nvowels_count('yay') == 1\nvowels_count('yo') == 0",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert \nassert \nassert \n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef rotate_num_arr(x, y):\n    \"\"\"Rotate the digits of the integers x and y by the same number shift\n    (i.e. shift the digits left by the number shift) and return the result\n    as a tuple.\n    If the number of digits of x is longer than the number of digits of y,\n    return the first x digits of y in reverse order.\n    If the number of digits of x is shorter than the number of digits of y,\n    return the last x digits of y.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     circular_shift(123, 5) == '321'\nassert     circular_shift(123, 1) == '23'\nassert     circular_shift(123, -1) == '321'\nassert     circular_shift(123, -5) == '321'\nassert     circular_shift(123, 0) == '123'\n",
        "num_ids_2": 32,
        "num_ids_4": 66
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert str(circular_shift(12345,1)) == '12346'\nassert str(circular_shift(12345,2)) == '13245'\nassert str(circular_shift(12345,3)) == '13246'\nassert str(circular_shift(12345,4)) == '12345'\n",
        "num_ids_2": 22,
        "num_ids_4": 60
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circular_shift('3456', 1) == '6543'\nassert     circular_shift('4567', 2) == '6789'\nassert     circular_shift('3456', 3) == '7536'\nassert     circular_shift('4567', 4) == '6789'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circular_shift(\"12345\",0) == \"12345\"\nassert     circular_shift(\"12345\",1) == \"54321\"\nassert     circular_shift(\"12345\",2) == \"15432\"\nassert     circular_shift(\"12345\",3) == \"32150\"\nassert     circular_shift(\"12345\",4) == \"45215\"\n",
        "num_ids_2": 37,
        "num_ids_4": 73
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef bit_and(x, y):\n    \"\"\"Bitwise AND of x and y\n    \"\"\"\n    pass\n\ndef bit_or(x, y):\n    \"\"\"Bitwise OR of x and y\n    \"\"\"\n    pass\n\ndef bit_xor(x, y):\n    \"\"\"Bitwise exclusive OR of x and y\n    \"\"\"\n    pass\n\ndef bit_not(x):\n    \"\"\"Bitwise NOT of x\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert digitSum('') == 0\nassert digitSum('0') == 0\nassert digitSum('10') == 10\nassert digitSum('12') == 12\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digitSum('asdf') == 11, 'test 1 failed'\nassert     digitSum('12345') == 15, 'test 2 failed'\nassert     digitSum('zxcvbn') == 8, 'test 3 failed'\nassert     digitSum('1234567890') == 45, 'test 4 failed'\nassert     digitSum('qwertyuiop') == 0, 'test 5 failed'\nprint('Tests passed')\n",
        "num_ids_2": 34,
        "num_ids_4": 72
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum(\"0\") == 0, \"Wrong result for digitSum(\\\"0\\\")\"\nassert     digitSum(\"1\") == 1, \"Wrong result for digitSum(\\\"1\\\")\"\nassert     digitSum(\"42\") == 42, \"Wrong result for digitSum(\\\"42\\\")\"\nassert     digitSum(\"4255\") == 55, \"Wrong result for digitSum(\\\"4255\\\")\"\nassert     digitSum(\"a\") == 0, \"Wrong result for digitSum(\\\"a\\\")\"\n",
        "num_ids_2": 48,
        "num_ids_4": 98
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digitSum(\"dog\") == 2, \"dog should be sum 2, but got %d\" % digitSum(\"dog\")\nassert     digitSum(\"pig\") == 6, \"pig should be sum 6, but got %d\" % digitSum(\"pig\")\nassert     digitSum(\"hello\") == 0, \"hello should be sum 0, but got %d\" % digitSum(\"hello\")\nassert     digitSum(\"zebra\") == 11, \"zebra should be sum 11, but got %d\" % digitSum(\"zebra\")\n\nprint(\"All passed.\"",
        "num_ids_2": 61,
        "num_ids_4": 122
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digitSum(\"abc\") == 0\nassert     digitSum(\"ax\") == 0\nassert     digitSum(\"x\") == 0\nassert     digitSum(\"x1\") == 1\nassert     digitSum(\"xx1\") == 2\n",
        "num_ids_2": 20,
        "num_ids_4": 41
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digitSum(\"\") == 0\nassert     digitSum(\"A\") == 0\nassert     digitSum(\"123\") == 3\nassert     digitSum(\"1234567\") == 9\nassert     digitSum(\"1234567890\") == 30\n",
        "num_ids_2": 19,
        "num_ids_4": 41
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digitSum(\"Hello\") == 5\nassert     digitSum(\"123\") == 6\nassert     digitSum(\"1234\") == 9\nassert     digitSum(\"12345\") == 15\nassert     digitSum(\"1234567\") == 18\n",
        "num_ids_2": 20,
        "num_ids_4": 42
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fruit_distribution('45', '5') == 2, \\\n        'fruit_distribution should be \"2\"'\nassert     fruit_distribution('55', '5') == 0, \\\n        'fruit_distribution should be \"0\"'\nassert     fruit_distribution('10', '5') == 3, \\\n        'fruit_distribution should be \"3\"",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(fruit_distribution(\"11111\", 5)) \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fruit_distribution('0', 1) == 0\nassert     fruit_distribution('-1', 1) == 0\nassert     fruit_distribution('3', 2) == 1\nassert     fruit_distribution('-4', 3) == 2\nassert     fruit_distribution('100', 4) == 1\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fruit_distribution('3', 3) == 0\nassert     fruit_distribution('2', 2) == 1\nassert     fruit_distribution('4', 5) == 2\nassert     fruit_distribution('5', 1) == 4\nassert     fruit_distribution('0', 0) == 0\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fruit_distribution(\"2A12B\",8) == 3\nassert     fruit_distribution(\"2A10B\",8) == 1\n",
        "num_ids_2": 34,
        "num_ids_4": 34
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fruit_distribution('mango', 1) == 0\nassert fruit_distribution('mango', 3) == 2\nassert fruit_distribution('mango', 0) == 0\nassert fruit_distribution('mango', -1) == 0\n",
        "num_ids_2": 29,
        "num_ids_4": 58
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fruit_distribution(\"4\", \"7\") == 4\nassert fruit_distribution(\"5\", \"9\") == 5\nassert fruit_distribution(\"0\", \"0\") == 0\nassert fruit_distribution(\"2\", \"2\") == 2\n",
        "num_ids_2": 29,
        "num_ids_4": 57
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfruit_distribution(s = \"apples\", n = 5) == 2\nassert \nfruit_distribution(s = \"apples\", n = 10) == 2\nassert \nfruit_distribution(s = \"apples\", n = 20) == 2\nassert \nfruit_distribution(s = \"apples\", n = 4) == 1\nassert \nfruit_distribution(s = \"apples\", n = 3) == 1\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfruit_distribution(s = \"5\", n = 5) == 1 \nfruit_distribution(s = \"5\", n = 10) == 0\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pluck([6, 3, 1, 2, 4]) == [2, 0]\nassert     pluck([0, 1, 2, 3, 4]) == [0, 1]\nassert     pluck([]) == []\nassert     pluck([5]) == [5]\n\n\ndef level(tree):\n    \"\"\"\n    \"Given an array representing a tree, find its height.\n    The height of a tree is the number of nodes it has.\n    The height of an empty tree is 0.\n",
        "num_ids_2": 44,
        "num_ids_4": 65
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pluck([1, 3, 5, 10, 17, 1, 3, 5, 10, 17]) ==     [3, 0]\nassert     pluck([2, 3, 5, 10, 17, 1, 3, 5, 10, 17]) ==     [5, 3]\nassert     pluck([2, 3, 5, 10, 17, 1, 3, 5, 10, 18]) ==     [5, 4]\nassert     pluck([]) ==     [],\n",
        "num_ids_2": 66,
        "num_ids_4": 110
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    pluck([]) == []\n    pluck([1,2,3,4,5]) == [5,2]\n    pluck([3,5,7,9,10]) == [3,10]\n    pluck([5,7,9,10,3,8]) == [3,10]\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pluck([])        == []\nassert     pluck([0])        == [0, 0]\nassert     pluck([0, 1])    == [0, 0]\nassert     pluck([1, 1])    == [2, 1]\nassert     pluck([1, 0, 1]) == [2, 0]\n",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pluck([1,2,3,4,5]) == [2,0], \"Should be [2,0]\"\nassert     pluck([5,4,3,2,1]) == [4,2], \"Should be [4,2]\"\nassert     pluck([1,2,3,4,5]) == [], \"Should be []\"\nassert     pluck([5,4,3,2,1,0]) == [4,2], \"Should be [4,2]\"\nassert     pluck([5,4,3,2,1,0,1]) == [4,2], \"Should be [4,2]\"\n",
        "num_ids_2": 60,
        "num_ids_4": 116
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert pluck([1,2,3]) == [1,0]\nassert pluck([]) == []\nassert pluck([1,2,3,4]) == [1,0]\nassert pluck([1,2,3,4,5,6,7]) == [1,0]\n",
        "num_ids_2": 20,
        "num_ids_4": 47
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pluck([2, 1, 3, 4]) ==    [2, 2], \"Wrong answer\"\nassert     pluck([2, 1, 4, 3]) ==    [2, 2], \"Wrong answer\"\nassert     pluck([1, 2, 3, 4]) ==    [], \"Wrong answer\"\nassert     pluck([]) ==    [], \"Wrong answer\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")",
        "num_ids_2": 52,
        "num_ids_4": 91
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == []\nassert     pluck([1,2]) == []\nassert     pluck([1,2,3]) == [1]\nassert     pluck([1,2,3,4]) == [2]\n",
        "num_ids_2": 19,
        "num_ids_4": 47
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1, 1, 3, 3, 0, 1, 1]) == 3\nassert     search([1, 1, 2, 2, 3, 3, 0, 1, 1]) == 3\nassert     search([1, 1, 1, 2, 3, 3, 0, 1, 1]) == -1\nassert     search([-1, 1, 1, 2, 2, 3, 3, 0, 1, 1]) == -1\nassert     search([]) == -1\n",
        "num_ids_2": 46,
        "num_ids_4": 101
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [-1,3,-3,5,-5,5,-5,5,5,5,5,6]\n    print(search(lst)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsearch([1, 2, 2]) == 2\nassert search([2, 2, 3, 3, 3]) == -1\nassert search([2, 2, 2]) == 2\nassert search([1, 1, 1, 1, 2]) == 1\nassert search([1, 1, 1, 1, 1]) == -1\n",
        "num_ids_2": 20,
        "num_ids_4": 48
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(search([7, 7, 8, 8, 8, 8, 7, 7, 8, 7, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 8, 7, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 7, 8, 7, 8, 8, 8, 7, 7, 7, 8, 7, 8, 8, 8, 8, 7, 7, 7, 7, 8, 8, 8, 8, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsearch([10,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,1,3,5,",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     search([5, 4, 1, 2, 1, 3, 4]) == 5, \"wrong\"\nassert     search([3, 5, 7, 8, 9, 10, 8, 9]) == 10, \"wrong\"\nassert     search([5, 4, 1, 2, 1, 3, 4, 4]) == 5, \"wrong\"\n",
        "num_ids_2": 52,
        "num_ids_4": 79
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([-1, 2, 3, 3, 3, 3, 4, 5]) == -1\nassert search([-1, -2, -3, -4, -5]) == -1\nassert search([-1, 0, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]) == 5\nassert search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert search([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -",
        "num_ids_2": 47,
        "num_ids_4": 144
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([6,7,1,5,2,7,7,7,7]) == 6\nassert     search([1,3,7,2,2,2,5,7,7,7,7]) == 7\nassert     search([2,2,2,2,2,2,2,2,2,2,2]) == 2\n",
        "num_ids_2": 54,
        "num_ids_4": 83
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(search([1,2,2,1,4,5,5,5]))\nprint(search([1,2,2,2,2,3,3,5]))\nprint(search([0,1,3,2,5,3,4]))\nprint(search([2,4,2,2,5,3,2,2]))\nprint(search([2,2,2,3,2,2,2]))\nprint(search([2,2,2,2,2,3,3,5]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strange_sort_list([2, 7, 1, 4, 9, 5]) == [1, 2, 5, 4, 9, 7]\nassert     strange_sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     strange_sort_list([1, 1, 2, 2]) == [1, 1, 2, 2]\nassert     strange_sort_list([]) == []\nassert     strange_sort_list([4, 3, 2, 1]) == [1, 2, 3, 4]\n",
        "num_ids_2": 64,
        "num_ids_4": 105
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strange_sort_list([-10,1,2,3,4]) == [-10,1,2,3,4], \"Wrong\"\nassert     strange_sort_list([1,2,4,5,5,7,9,9,9,8]) == [1,2,4,5,5,7,9,9,8,9], \"Wrong\"\nassert     strange_sort_list([-1,-1]) == [-1,-1], \"Wrong\"\nassert     strange_sort_list([10,1,2,3,4]) == [1,2,3,4,10], \"Wrong\"\n",
        "num_ids_2": 93,
        "num_ids_4": 154
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     strange_sort_list([2, 4, 3, 6, 8, 10, 1]) == \n    [1, 2, 3, 4, 6, 8, 10]\nassert     strange_sort_list([2, 4, 3, 6, 8, 10, 1]) == \n    [1, 2, 3, 4, 6, 8, 10]\nassert     strange_sort_list([2, 4, 3, 6, 8, 10, 1]) == \n    [1, 2, 3, 4, 6, 8, 10]\n",
        "num_ids_2": 52,
        "num_ids_4": 78
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strange_sort_list([1, 2, 3]) == [1, 2, 3], 'List incorrect'\nassert     strange_sort_list([1, 0, -1]) == [-1, 0, 1], 'List incorrect'\nassert     strange_sort_list([]) == [], 'List incorrect'\n\nprint('List sort works!'",
        "num_ids_2": 57,
        "num_ids_4": 75
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strange_sort_list([3, 4, 1, 2, 5, 7, 8, 6, 4, 4]) == [1, 2, 3, 4, 5, 4, 6, 4, 7, 8]\n",
        "num_ids_2": 52,
        "num_ids_4": 52
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert strange_sort_list([1,2,3,4,5,6]) == [6,5,4,3,2,1]\nassert strange_sort_list([1,3,5,6,4,2]) == [4,5,6,2,3,1]\nassert strange_sort_list([1,2,5,7,3,4]) == [7,5,4,3,2,1]\nassert strange_sort_list([1,2,3,4,5,6,7]) == [6,5,4,3,2,1,7]\n",
        "num_ids_2": 37,
        "num_ids_4": 105
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the maximum value,\n    then minimum of the remaining integers, then maximum and so on.\n    '''\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(1, 2, 3) == 1.0, 'Wrong output 1'\nassert     triangle_area(1, 1, 1) == 1.0, 'Wrong output 2'\nassert     triangle_area(2, 3, 4) == -1.0, 'Wrong output 3'\nassert     triangle_area(4, 5, 6) == -1.0, 'Wrong output 4'\nassert     triangle_area(8, 5, 6) == -1.0, 'Wrong output 5'\n",
        "num_ids_2": 50,
        "num_ids_4": 102
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     triangle_area(5, 4, 6) == 1/2, 'Wrong result'\nassert     triangle_area(5, 4, 7) == -1, 'Triangle does not exist'\nassert     triangle_area(5, 4, 5) == -1, 'Triangle does not exist'\nassert     triangle_area(5, 4, 9) == 1/2, 'Wrong result'\nassert     triangle_area(5, 9, 4) == -1, 'Triangle does not exist'\n",
        "num_ids_2": 49,
        "num_ids_4": 98
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(0, 0, 0) == 0\nassert     triangle_area(1, 1, 1) == 1\nassert     triangle_area(1, 2, 3) == 1/2\nassert     triangle_area(1, 2, 3)!= 1/2\nassert     triangle_area(3, 4, 5) == 1/2\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntriangle_area(1, 1, 1) == 1\ntriangle_area(1, 1, 2) == 0\ntriangle_area(1, 2, 1) == 0\ntriangle_area(1, 2, 2) == 0\ntriangle_area(1, 3, 1) == 0\ntriangle_area(1, 3, 2) == 0\ntriangle_area(1, 3, 3) == 0\ntriangle_area(2, 3, 4) == 0\ntriangle_area(2, 3, 5) == 0\ntriangle_area(2, 3, 6) == 0\ntriangle_area(3, 5, 6) == 0\ntriangle_area(3, 5, 7) == 0\ntriangle_area(3, 5, 8) == 0\ntriangle_area(3, 5, 9) == 0\ntriangle_area(3, 5, 10) == 0\ntriangle_area(3, 6, 5) == 0\ntriangle_area(3, 6, 6) == 1\ntriangle_area(3, 6, 7) == 0\ntriangle_area(3, 6, 8) == 0\ntriangle_area(3, 6, 9) == 0\ntriangle_area(3, 6, 10) == 0\ntriangle_area(3, 7, 5) == 0\ntriangle_area(3, 7, 6) == 0\ntriangle_area(3, 7, 7) == 1\ntriangle_area(3, 7, 8) == 0\ntriangle_area(3, 7, 9) == 0\ntriangle_area(3, 7, 10) == 0\ntriangle_area(3, 8, 5) == 0\ntriangle_area(3, 8, 6) == 0\ntriangle_area(3, 8, 7) == 0\ntriangle_area(3, 8, 8) == 1\ntriangle_area(3, 8, 9) == 0\ntriangle_area(3, 8, 10) == 0\ntriangle_area(3, 9, 5) == 0\ntriangle_area(3, 9, 6) == 0\ntriangle_area(3, 9, 7) == 0\ntriangle_area(3, 9, 8) == 0\ntriangle_area(3, 9, 9) == 1\ntriangle_area(3, 9, 10) == 0\ntriangle_area(3, 10, 5) == 0\ntriangle_area(3, 10, 6) == 0\ntriangle_area(3, 10, 7) == 0\ntriangle_area(3, 10, 8) == 0\ntriangle_area(3, 10, 9) == 0\ntriangle_area(3, 10, 10) == 1\ntriangle_area(4, 5, 6) == 0\ntriangle_area(4, 5, 7) == 0\ntriangle_area(4, 5, 8) == 0\ntriangle_area(4, 5, 9) == 0\ntriangle_area(4, 5, 10) == 0\ntriangle_area(4, 6, 5) == 0\ntriangle_area(4, 6, 6) == 0\ntriangle_area(4, 6, 7) == 0\ntriangle_area(4, 6, 8) == 0\ntriangle_area(4, 6, 9) == 0\ntriangle_area(4, 6, 10) == 0\ntriangle_area(4, 7, 5) == 0\ntriangle_area(4, 7, 6) == 0\ntriangle_area(4, 7, 7) == 0\ntriangle_area(4, 7, 8) == 0\ntriangle_area(4, 7, 9) == 0\ntriangle_area(4, 7, 10) == 0\ntriangle_area(4, 8, 5) == 0\ntriangle_area(4, 8, 6) == 0\ntriangle_area(4, 8, 7) == 0\ntriangle_area(4, 8, 8) == 0\ntriangle_area(4, 8, 9) == 0\ntriangle_area(4, 8, 10) == 0\ntriangle_area(4, 9, 5) == 0\ntriangle_area(4, 9, 6) == 0\ntriangle_area(4, 9, 7) == 0\ntriangle_area(4, 9, 8) == 0\ntriangle_area(4, 9, 9) == 0\ntr",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     will_it_fly([2,5,4,1], 10) == True\nassert     will_it_fly([2,5,4,1], 7) == False\nassert     will_it_fly([1,5,4,3,2,1,2], 10) == True\nassert     will_it_fly([1,5,4,3,2,1,2], 1) == False\nassert     will_it_fly([5], 10) == False\n",
        "num_ids_2": 42,
        "num_ids_4": 96
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     will_it_fly([], 1) == True,'should return True for an empty list and weight 1'\nassert will_it_fly([1], 1) == False,'should return False for a list with 1 element and weight 1'\nassert will_it_fly([1,2,3], 5) == True,'should return True for a list with the sum of its elements equal to the maximum possible weight 5'\nassert will_it_fly([1,2,1,2,1,1,1,2,1,1,1,1,1,1,1,2], 14) == True,'should return True for a list with the sum of its elements equal to the maximum possible weight 14'\nassert will_it_fly([1,2,1,2,1,1,1,2,1,1,1,1,1,1,1,2], 12) == False,'should return False for a list with the sum of its elements equal to the maximum possible weight 12'\n",
        "num_ids_2": 54,
        "num_ids_4": 158
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     will_it_fly(q,4) == True, \"1\"\nassert     will_it_fly(q,2) == True, \"2\"\nassert     will_it_fly(q,1) == False, \"3\"\nassert     will_it_fly(q,3) == False, \"4\"\nassert     will_it_fly(q,10) == False, \"5\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     will_it_fly([1,2,3], 1) == True\nassert     will_it_fly([1,2,3], 2) == True\nassert     will_it_fly([1,2,3], 3) == True\nassert     will_it_fly([1,2,3], 4) == False\nassert     will_it_fly([1,2,3], 10) == True\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         will_it_fly([1,1,1,1], 2) == True\nassert         will_it_fly([1,2,1,1], 3) == False\nassert         will_it_fly([1,2,3,1], 4) == True\nassert         will_it_fly([1,2,3,4], 5) == True\n",
        "num_ids_2": 42,
        "num_ids_4": 84
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nwill_it_fly([1,2,3,3], 4) == False, \"Error in will_it_fly.\"\nassert \nwill_it_fly([1,2,3,3], 3) == False, \"Error in will_it_fly.\"\nassert \nwill_it_fly([3,5,7], 9) == False, \"Error in will_it_fly.\"\nassert \nwill_it_fly([1,2,3], 2) == True, \"Error in will_it_fly.\"\nassert \nwill_it_fly([1,2,3], 4) == False, \"Error in will_it_fly.\"\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     will_it_fly([], 1) == False\nassert     will_it_fly([1], 1) == False\nassert     will_it_fly([1], 3) == True\nassert     will_it_fly([2, 1], 5) == True\nassert     will_it_fly([1, 1, 2], 2) == False\n",
        "num_ids_2": 29,
        "num_ids_4": 61
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsmallest_change([2,2,3,4,5]) == 3\nsmallest_change([1,2,3,4,5]) == 2\nsmallest_change([5,6,7,8,1]) == 1\nsmallest_change([1,1,1,1,1,1]) == 1\nsmallest_change([1,1,1,1,1,1,1]) == 2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    #arr = [-1,-1,2,2,-1,2,2,-1,-1]\n    arr = [-1,-1,2,2,-1,2,2,-1,-1]\n    print('Original array is :', arr)\n    print('Minimum number of changes required to make the array palindromic :', smallest_change(arr))\n    print('-'*30)\n\n\n    #arr = [-1,-1,2,2,-1,2,2,-1,-1]\n    arr = [-1,-1,2,2,-1,2,2,-1,-1]\n    print('Original array is :', arr)\n    print('Minimum number of changes required to make the array palindromic :', smallest_change(arr))\n    print('-'*30)\n\n\n    #arr = [1,1,1,2,2,2,3,3,3]\n    arr = [1,1,1,2,2,2,3,3,3]\n    print('Original array is :', arr)\n    print('Minimum number of changes required to make the array palindromic :', smallest_change(arr))\n    print('-'*30)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_change([]) == 0\nassert     smallest_change([1,2]) == 1\nassert     smallest_change([1,2,3]) == 1\nassert     smallest_change([1,2,3,4,5]) == 2\nassert     smallest_change([1,2,3,4,5,6,7,8]) == 3\n",
        "num_ids_2": 25,
        "num_ids_4": 61
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_change([1,2,3,3,4,5]) == 1\nassert     smallest_change([1,2,3,4,5,6,7]) == 6\nassert     smallest_change([1,3,5,4,2,4,6]) == 3\nassert     smallest_change([1,2,3,4,5,6,7,8]) == 2\n",
        "num_ids_2": 46,
        "num_ids_4": 96
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     total_match(['shaman', 'gloria','sabrina'], ['samantha', 'gloria','sabrina']) == ['sabrina', 'gloria'], 'Should return [\"sabrina\", \"gloria\"]'\nassert     total_match(['shaman', 'gloria','sabrina'], ['shaman', 'gloria','sabrina']) == ['shaman'], 'Should return [\"shaman\"]'\nassert     total_match(['shaman', 'gloria','sabrina'], ['samantha', 'gloria','sabrina']) == ['sabrina'], 'Should return [\"sabrina\"]'\nassert     total_match(['shaman', 'gloria','sabrina'], ['shaman','sabrina', 'gloria']) == ['gloria'], 'Should return [\"gloria\"]'\nassert     total_match(['shaman', 'gloria','sabrina'], ['shaman','sabrina','shaman']) == ['shaman'], 'Should return [\"shaman\"]'\n",
        "num_ids_2": 111,
        "num_ids_4": 214
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     total_match(['foo', 'bar'], ['foo', 'bar']) == ['foo']\nassert total_match(['foo', 'bar'], ['foo']) == ['foo']\nassert total_match(['foo', 'bar'], ['bar']) == ['bar']\nassert total_match(['foo', 'bar', 'bar'], ['foo']) == ['foo']\nassert total_match(['foo', 'bar', 'bar'], ['foo', 'bar']) == ['foo', 'bar']\n",
        "num_ids_2": 46,
        "num_ids_4": 91
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     total_match([['This', 'is', 'a', 'test'], ['This', 'is', 'also', 'a', 'test']]    ,['Test', 'is', 'also', 'a', 'test'])    ==     ['This', 'is', 'a', 'test']\nassert total_match([['This', 'is', 'a', 'test'], ['This', 'is', 'also', 'a', 'test']]    ,['Test', 'is', 'also', 'a', 'test'], ['Test', 'is', 'also', 'a', 'test'])    ==     ['Test']\nassert total_match([['This', 'is', 'a', 'test'], ['This', 'is', 'also', 'a', 'test']]    ,['Test', 'is', 'also', 'a', 'test'], ['Test', 'is', 'also', 'a', 'test', 'More'])    ==     ['This', 'is', 'a', 'test', 'More']\n",
        "num_ids_2": 144,
        "num_ids_4": 234
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     total_match(['a','b','c','d'], ['a','b','c','d']) == ['a','b','c','d'], \"FAILED\"\nassert     total_match(['a','b','c','d','e'], ['a','b','c','d']) == ['a','b','c','d'], \"FAILED\"\nassert     total_match(['a','b','c','d','e'], ['a','b','c','d','e']) == ['a','b','c','d','e'], \"FAILED\"\nassert     total_match(['a','b','c','d'], ['a','b','c','d','e']) == ['a','b','c','d','e'], \"FAILED\"\nassert     total_match(['a','b','c','d','e'], ['a','b','c','d','e']) == ['a','b','c','d','e'], \"FAILED\"\n",
        "num_ids_2": 88,
        "num_ids_4": 184
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     total_match(['a','b','c','d'], ['a','b','c','d']) == ['a','b','c','d'], \"The function is working.\"\nassert     total_match(['a','b','c','d'], ['a','b']) == ['a','b'], \"The function is working.\"\nassert     total_match(['a','b','c','d'], ['a','b','c','d']) == ['a','b','c','d'], \"The function is working.\"\nassert     total_match(['a','b','c','d'], ['a','b','c']) == ['a','b','c'], \"The function is working.\"\nassert     total_match(['a','b','c','d'], ['a','b','c','d','e']) == ['a','b','c','d'], \"The function is working.\"\n",
        "num_ids_2": 80,
        "num_ids_4": 164
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     total_match(['hello', 'hi', 'bye', 'good'], ['hello', 'hi', 'bye', 'good']) == ['bye'], \\\n'Total Match should be [\"bye\"]'\nassert     total_match(['hello', 'hi', 'bye', 'good', 'bye'], ['hello', 'hi', 'bye', 'good']) == ['bye'], \\\n'Total Match should be [\"bye\"]'\nassert     total_match(['hello', 'hi', 'bye', 'good'], ['hello', 'hi', 'bye', 'good']) == ['bye'], \\\n'Total Match should be [\"bye\"]'\nassert     total_match(['hello', 'hi', 'bye', 'good', 'bye'], ['hello', 'hi', 'bye', 'good']) == ['bye'], \\\n'Total Match should be [\"bye\"]'\n",
        "num_ids_2": 81,
        "num_ids_4": 162
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert total_match([], [\"abcdef\", \"abcdef\"]) == [\"abcdef\"]\nassert total_match([\"abcdef\", \"abcdef\"], [\"abcdef\"]) == [\"abcdef\"]\nassert total_match([], [\"abcdef\", \"abcdef\", \"abcdef\", \"abcdef\"]) == [\"abcdef\"]\nassert total_match([], [\"abcdef\", \"abcdef\", \"abcdef\", \"abcdef\", \"abcdef\"]) == [\"abcdef\"]\n",
        "num_ids_2": 24,
        "num_ids_4": 77
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(9) == True, f\"is_multiply_prime(9) is wrong.\"\nassert     is_multiply_prime(18) == False, f\"is_multiply_prime(18) is wrong.\"\nassert     is_multiply_prime(125) == False, f\"is_multiply_prime(125) is wrong.\"\nassert     is_multiply_prime(12) == False, f\"is_multiply_prime(12) is wrong.\"\nassert     is_multiply_prime(4) == True, f\"is_multiply_prime(4) is wrong.\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_multiply_prime(14) == False, \"is_multiply_prime(14) should be False\"\nassert     is_multiply_prime(70) == True, \"is_multiply_prime(70) should be True\"\nassert     is_multiply_prime(13) == True, \"is_multiply_prime(13) should be True\"\nassert     is_multiply_prime(31) == True, \"is_multiply_prime(31) should be True\"\nassert     is_multiply_prime(87) == True, \"is_multiply_prime(87) should be True\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(2) == True, 'Function is not implemented correctly!'\nassert     is_multiply_prime(15) == False, 'Function is not implemented correctly!'\nassert     is_multiply_prime(16) == True, 'Function is not implemented correctly!'\n",
        "num_ids_2": 46,
        "num_ids_4": 69
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    # call to is_multiply_prime function and print the output\n    is_multiply_prime(20)\n    is_multiply_prime(100",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"\\n\\nThe solution is correct!\")\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(7) == True\nassert     is_multiply_prime(9) == True\nassert     is_multiply_prime(11) == True\nassert     is_multiply_prime(18) == False\nassert     is_multiply_prime(5) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_multiply_prime(2) == False\nassert     is_multiply_prime(17) == True\nassert     is_multiply_prime(4) == False\nassert     is_multiply_prime(50) == False\nassert     is_multiply_prime(9) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_simple_power(1, 3) == True\nassert     is_simple_power(2, 3) == True\nassert     is_simple_power(7, 9) == False\nassert     is_simple_power(0.0001, 0.0001) == False\nassert     is_simple_power(0.001, 1) == False\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(is_simple_power(2, 3)) \nprint(is_simple_power(4, 6)) \nprint(is_simple_power(11, 2)) \nprint(is_simple_power(12, 3)) \nprint(is_simple_power(25, 5)) \nprint(is_simple_power(42, 7)) \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_simple_power(9,3) == True\nassert is_simple_power(9,4) == False\n",
        "num_ids_2": 17,
        "num_ids_4": 31
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_simple_power(x=10, n=2) == True, '2 ** 10 should be 10'\nassert     is_simple_power(x=100, n=2) == True, '2 ** 100 should be 1024'\nassert     is_simple_power(x=10, n=3) == False, '3 ** 10 should not be 10'\nassert     is_simple_power(x=10, n=4) == False, '4 ** 10 should not be 16'\nassert     is_simple_power(x=10, n=5) == True, '5 ** 10 should be 1000'\n",
        "num_ids_2": 56,
        "num_ids_4": 114
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_simple_power(1, 1) == True\nassert is_simple_power(2, 4) == False\nassert is_simple_power(10, 2) == True\nassert is_simple_power(13, 3) == False\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_simple_power(4, 2) == True\nassert     is_simple_power(2, 2) == True\nassert     is_simple_power(1, 2) == False\nassert     is_simple_power(2, 5) == False\nassert     is_simple_power(4, 2) == True\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_simple_power(n = 2, x = 1) == True, \"x=1, n=2\"\nassert     is_simple_power(n = 2, x = 4) == False, \"x=4, n=2\"\nassert     is_simple_power(n = 4, x = 16) == True, \"x=16, n=4\"\nassert     is_simple_power(n = 4, x = 3) == False, \"x=3, n=4\"\nassert     is_simple_power(n = 4, x = 9) == True, \"x=9, n=4\"\n",
        "num_ids_2": 58,
        "num_ids_4": 116
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \niscube(1) == False\niscube(12) == True\niscube(27) == True\niscube(2718) == True\niscube(28) == True\niscube(2728) == True\niscube(1000) == True\niscube(29) == True\niscube(2928) == True\niscube(29280) == True\niscube(2929) == False\niscube(292800) == False\niscube(292900) == False",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert not iscube(12) == True\nassert iscube(9) == True\nassert iscube(10) == Fals",
        "num_ids_2": 13,
        "num_ids_4": 32
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(iscube(1)) # true\nprint(iscube(4)) # true\nprint(iscube(10)) # false\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not iscube(3)\nassert iscube(2)\nassert iscube(8)\nassert not iscube(8.4)\n",
        "num_ids_2": 11,
        "num_ids_4": 25
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('')\nprint('*************')\nprint('Checking the correctness of iscube function')\nprint('*************')\nprint('')\n\nassert iscube(0) is True\nassert iscube(9) is True\nassert iscube(18) is False\n",
        "num_ids_2": 12,
        "num_ids_4": 30
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncube_numbers = range(1,11)\nfor i in cube_numbers:\n    assert iscube(i)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not iscube(5)\nassert iscube(20)\nassert not iscube(30)\nassert not iscube(-5)\n",
        "num_ids_2": 11,
        "num_ids_4": 26
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     hex_key(\"AAB\") == 3\nassert     hex_key(\"2BCD\") == 6\nassert     hex_key(\"1ABC\") == 3\nassert     hex_key(\"A1B2C3D4E5F\") == 7\nassert     hex_key(\"ABBCCCD\") == 6\n",
        "num_ids_2": 25,
        "num_ids_4": 58
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"\\n******************************************************\\n\")\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     hex_key(\"A\") == 1, \"The function should count the number of hexadecimal digits that are primes.\"\nassert hex_key(\"B\") == 0, \"The function should count the number of hexadecimal digits that are primes.\"\nassert hex_key(\"0\") == 0, \"The function should count the number of hexadecimal digits that are primes.\"\nassert hex_key(\"1\") == 0, \"The function should count the number of hexadecimal digits that are primes.\"\nassert hex_key(\"8\") == 0, \"The function should count the number of hexadecimal digits that are primes.\"\n",
        "num_ids_2": 59,
        "num_ids_4": 117
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     hex_key('A') == 3\nassert     hex_key('B') == 3\nassert     hex_key('C') == 3\nassert     hex_key('D') == 3\nassert     hex_key('E') == 3\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert hex_key('') == 3\n    assert hex_key('AA') == 3\n    assert hex_key('AB') == 2\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nhex_key(\"2B\") == 3\nassert \nhex_key(\"3B\") == 2\nassert \nhex_key(\"4B\") == 2\nassert \nhex_key(\"5B\") == 2\nassert \nhex_key(\"6B\") == 1\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Pass\" if (True) else \"Fail\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(42) == \"db1\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(0) == \"0\"\n\n",
        "num_ids_2": 33,
        "num_ids_4": 49
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(1) == \"0\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(7) == \"111\"\nassert     decimal_to_binary(8) == \"1000\"\nassert     decimal_to_binary(9) == \"1001\"\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == 'db0'\nassert     decimal_to_binary(1) == 'db1'\nassert     decimal_to_binary(2) == 'db10'\nassert     decimal_to_binary(7) == 'db111'\nassert     decimal_to_binary(8) == 'db100'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(3) == \"dbdb\"\nassert     decimal_to_binary(9) == \"dbdbdbd\"\nassert     decimal_to_binary(7) == \"b\"\nassert     decimal_to_binary(11) == \"1b\"\nassert     decimal_to_binary(0) == \"0\"\n",
        "num_ids_2": 36,
        "num_ids_4": 69
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(4) == '0001'\nassert     decimal_to_binary(15) == '1100001'\nassert     decimal_to_binary(-4) == '-0001'\nassert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\n",
        "num_ids_2": 34,
        "num_ids_4": 67
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(12) == 'db0110'\nassert     decimal_to_binary(123) == 'db01111'\nassert     decimal_to_binary(-100) == 'db101100'\n\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a string which contains only '0' and '1' and then your task is to convert\n    this string to decimal number. The function should return an integer. The string contains\n    an extra couple of characters at the beginning and at the end of the string. The extra characters\n    are there to help with the format.\n    \"\"\"\n    pass\n",
        "num_ids_2": 36,
        "num_ids_4": 54
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not is_happy('abba')\nassert is_happy('abc')\nassert is_happy('aba')\n\n",
        "num_ids_2": 12,
        "num_ids_4": 28
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_happy(\"\") == False, \"Empty string\"\nassert     is_happy(\"a\") == False, \"1 letter\"\nassert     is_happy(\"aa\") == False, \"2 letters\"\nassert     is_happy(\"aaa\") == False, \"3 letters\"\nassert     is_happy(\"aaaa\") == False, \"4 letters\"\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"The function is_happy returns true for: \" + str(is_happy(\"abc\")))\nprint(\"The function is_happy returns true for: \" + str(is_happy(\"haha\")))\nprint(\"The function is_happy returns true for: \" + str(is_happy(\"aabbc\")))\nprint(\"The function is_happy returns false for: \" + str(is_happy(\"abbcb\")))\nprint(\"The function is_happy returns true for: \" + str(is_happy(\"abbc\")))\nprint(\"The function is_happy returns false for: \" + str(is_happy(\"abc\")))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \"\"\"\n    #s = \"gvjw\"\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        \n    return len(char_count) > 2 and 3 in char_count.values()\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(is_happy(\"kakak\"))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_happy(\n    'bbc') == True, 'The first string is happy'\nassert is_happy(\n    'aab') == False, 'The first string is not happy'\nassert is_happy(\n    'cabca') == False, 'The first string is not happy'\n",
        "num_ids_2": 13,
        "num_ids_4": 19
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('2.2')\ndef is_palindrome(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is a palindrome or not.\n    A string is a palindrome if the string reads the same forward and backward.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(is_happy(\"a\"))\nprint(is_happy(\"ab\"))\nprint(is_happy(\"abb\"))\nprint(is_happy(\"abc\"))\nprint(is_happy(\"abab\"))\nprint(is_happy(\"aba\"))\nprint(is_happy(\"aaab\"))\nprint(is_happy(\"abbab\"))\nprint(is_happy(\"abcabcabc\"))\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade(student_gpa) == ['E', 'D', 'D', 'D', 'C', 'C', 'B', 'B', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'D', 'E', 'E', 'E', 'E']\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'E']",
        "num_ids_2": 106,
        "num_ids_4": 106
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('The result is:', numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade(['3.0', '2.7', '4.0']) == ['A+', 'B+', 'B']\nassert numerical_letter_grade(['3.3', '2.3', '2.3']) == ['A', 'B+', 'B+']\nassert numerical_letter_grade(['4.0', '4.0', '3.0']) == ['A+', 'A+', 'B']\nassert numerical_letter_grade(['3.7', '3.3', '3.3']) == ['A+', 'B', 'C']\nassert numerical_letter_grade(['3.3', '3.7', '3.3']) == ['A', 'B+', 'C+']\n",
        "num_ids_2": 75,
        "num_ids_4": 146
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([3.0, 4.0, 5.0, 4.0, 2.0, 2.0, 2.0, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C']\nassert     numerical_letter_grade([3.0, 3.3, 3.7, 3.0, 2.7, 2.3, 2.0, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C']\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 2.7, 2.3, 2.0, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C']\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 2.7, 2.3, 2.0, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C']\nassert     numerical_letter_grade([3.0, 3.0, 3.0, 3.0, 2.7, 2.3, 2.0, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C']\n",
        "num_ids_2": 146,
        "num_ids_4": 292
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade(['4.0', '3.7', '3.3', '3.0', '2.7', '2.3', '2.0', '1.7', '1.3', '1.0', '0.7', '0.0', '0.0']) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']\n",
        "num_ids_2": 122,
        "num_ids_4": 122
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_length(100) == True\nassert prime_length(97) == True\nassert prime_length('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 21,
        "num_ids_4": 1026
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert prime_length(\"\") == False, \"Empty string\"\nassert prime_length(\"1\") == False, \"One number\"\nassert prime_length(\"1,2,3,4,5,6\") == True, \"A prime number of a length of 6\"\n",
        "num_ids_2": 17,
        "num_ids_4": 63
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prime_length('') == True\nassert     prime_length('hello') == False\nassert     prime_length('hello5') == True\n",
        "num_ids_2": 22,
        "num_ids_4": 34
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert prime_length('aa') == False\nassert prime_length('ananas') == False\nassert prime_length('aaa') == True\n",
        "num_ids_2": 13,
        "num_ids_4": 34
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     starts_one_ends(1) == 1\nassert starts_one_ends(2) == 1\nassert starts_one_ends(3) == 1\nassert starts_one_ends(4) == 1\nassert starts_one_ends(5) == 2\n",
        "num_ids_2": 26,
        "num_ids_4": 50
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(4) == 1\nassert     starts_one_ends(5) == 2\nassert     starts_one_ends(7) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     starts_one_ends(1) == 0\nassert    starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 4\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve(1) == \"0\"\nassert     solve(3) == \"11\"\nassert     solve(5) == \"101\"\nassert     solve(7) == \"111\"\nassert     solve(8) == \"1000\"\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve(0) == 0, 'Test 1 (correct)'\nassert     solve(1) == '0', 'Test 2 (correct)'\nassert     solve(10) == '1010', 'Test 3 (correct)'\nassert     solve(255) == '11111111111', 'Test 4 (correct)'\nassert     solve(10001) == '1010101010', 'Test 5 (correct)'\n",
        "num_ids_2": 35,
        "num_ids_4": 74
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == \"__main__\":\n    # get the arguments from command line\n    import sys\n    import argparse\n    # argparse is used to convert the input argument from command line into python variable.\n    # we can also pass input from the keyboard as well.\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"N\", help=\"The integer to check the digit sum\", type=int)\n    args = parser.parse_args()\n    N = args.N\n\n    print(solve(N))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('Correct! Nice job!')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nimport math\ndef solve_brute_force(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(10) == \"1010\"\nassert     solve(23) == \"1010111\"\nassert     solve(764) == \"10101010101010\"\n",
        "num_ids_2": 25,
        "num_ids_4": 57
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add([-1, -3, -4, -9, -12, -11, -8]) == [-3, -11, -8]\nassert     add([1, 2, 3, 4, 5]) == [2, 4, 5]\n",
        "num_ids_2": 59,
        "num_ids_4": 59
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_even(i):\n    return i%2 == 0\n\ndef even_list(lst):\n    \"\"\"Given a non-empty list of integers, return a new list containing only even numbers.\n    \"\"\"\n    pass\n\nassert even_list([1,2,3,4,5]) == [2,4]\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add([2,1,2,3,4,5,6]) == [2,4,6,8,10,12,14]\nassert     add([3,4,5,6,7]) == [3,6,9]\nassert     add([1,2,3]) == []\nprint('  Passed!')\n",
        "num_ids_2": 58,
        "num_ids_4": 71
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7, 8]) == [4, 6, 8, 2, 4, 6, 8, 2]\nassert     add([1, 2, 3, 4, 5, 6, 7]) == [4, 6, 8, 2, 4, 6, 8]\nassert     add([5, 6, 7, 8, 9, 10, 11, 12]) == [6, 8, 10, 2, 6, 8, 10, 2]\nassert     add([5, 6, 7, 8, 9, 10, 11, 12, 13]) == [6, 8, 10, 2, 6, 8, 10, 2]\nassert     add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n",
        "num_ids_2": 74,
        "num_ids_4": 154
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add([]) == []\nassert     add([1]) == [1]\nassert     add([1, 2]) == [1,2]\nassert     add([1, 2, 3]) == [2,4]\nassert     add([1, 2, 3, 4, 5]) == [1,4,7]\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert add([4, 3, 2, 5, 6]) == 8\n    assert add([0, 1, 2, 3, 4]) == 0\n    assert add([1, 2, 3, 4, 5]) == 9\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add([]) == []\nassert     add([1]) == [1]\nassert     add([1,2,3,4,5]) == [1,3,5]\nassert     add([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,11]\n\n\ndef sub(lst):\n    \"\"\"Given a non-empty list of integers lst, substract the odd elements from the even elements.\n    \"\"\"\n    pass\n",
        "num_ids_2": 19,
        "num_ids_4": 81
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(add([1,2,3,4,5,6]))\n\nprint('\\n'*3)\n\ndef add2(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    but if an even element at an odd index is not present in the list, add the element to the end of the list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     anti_shuffle(\"My name is Priya\") == \"prya is name My\"\nassert     anti_shuffle(\"I wanna be the best\") == \"I be the best I\"\nassert     anti_shuffle(\"She sells sea shells by the sea shore\") == \"Shi sell sea shells by the sea shore she\"\nassert     anti_shuffle(\"CodeWars\") == \"WeDOCRWe\"\n\n\n",
        "num_ids_2": 45,
        "num_ids_4": 93
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"a\") == \"a\"\nassert     anti_shuffle(\"hi\") == \"hi\"\nassert     anti_shuffle(\"hi there\") == \"here thr\"\nassert     anti_shuffle(\"wordgood\") == \"wordgood\"\n",
        "num_ids_2": 25,
        "num_ids_4": 55
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     anti_shuffle(\"The quick brown fox jumps\") == \"heT quicky brWoo fxjumps\"\nassert     anti_shuffle(\"I love dogs\") == \"eI love dols\"\nassert     anti_shuffle(\"CodeWars\") == \"cdeurow\"\nassert     anti_shuffle(\"\") == \"\"",
        "num_ids_2": 48,
        "num_ids_4": 77
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint (\">>> anti_shuffle:\", anti_shuffle(\"cat dog apple\"))\nprint (\">>> anti_shuffle:\", anti_shuffle(\"a b c\"))\nprint (\">>> anti_shuffle:\", anti_shuffle(\"a b   c\"))\nprint (\">>> anti_shuffle:\", anti_shuffle(\"a b\"))\nprint (\">>> anti_shuffle:\", anti_shuffle(\"\"))\nprint (\">>> anti_shuffle:\", anti_shuffle(\"a b c d e f\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     anti_shuffle(\"This is a test string\") == \"is a test tset\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"A sentence\") == \"ensentca frase\"\nassert     anti_shuffle(\"1, 2, 3, 4, 5, 6, 7\") == \"1234567\"\nassert     anti_shuffle(\"HackerRank.com presents \"\n                      \"at HackersRank.com\") == \"hackerrank.com presens at hackerrank\"\n",
        "num_ids_2": 33,
        "num_ids_4": 80
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert anti_shuffle('hello world') == 'world hello'\nassert anti_shuffle('hefwe aitw asdf') == 'asdf aitw hefwe'\nassert anti_shuffle('!@#$%') == '$%@#'\nassert anti_shuffle('!@#$% a') == '#$%@'\n",
        "num_ids_2": 18,
        "num_ids_4": 63
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \ndef anti_shuffle_2(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nanti_shuffle(\"I was not made for peace\") == \"Man I was not made for peace\"\n\nprint('\\n')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \n\ndef get_column(lst, x):\n    \"\"\"\n    Given lst, a nested list, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the column by columns in ascending order.\n    \"\"\"\n    pass\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_row([[0, 0], [0, 1], [1, 1], [1, 2], [2, 2]], 2) ==\\\n        [[0, 0], [0, 1], [1, 1], [1, 2], [2, 2]],\\\n        \"Wrong result for given test case!\"\nassert     get_row([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1],\n                  [1, 1, 1, 0, 0], [1, 1, 1, 1, 0]], 3) ==\\\n        [[1, 1], [0, 1], [1, 1], [1, 0], [1, 0],\n        [0, 1], [1, 1], [0, 1], [1, 1],\n        [1, 0], [1, 1], [0, 1], [1, 0],\n        [0, 1], [1, 1]],\\\n        \"Wrong result for given test case!\"\nassert     get_row([[0, 0], [0, 1], [0, 2],\n                  [1, 0], [1, 1], [1, 2]], 1) ==\\\n        [[0, 0], [0, 1], [1, 0],\n        [1, 1], [1, 2]],\\\n        \"Wrong result for given test case!\"\nassert     get_row([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1],\n                  [1, 1, 1, 0, 0], [1, 1, 1, 1, 0]], 1) ==\\\n        [[1, 0], [1, 1], [0, 1], [1, 1],\n        [1, 0], [1, 1], [0, 1], [1, 1]],\\\n        \"Wrong result for given test case!\"\nassert     get_row([[1, 1, 0, 0, 1], [0, 1, 0, 1, 1],\n                  [1, 1, 1, 0, 0], [1, 1, 1, 1, 0]], 3) ==\\\n        [[1, 1], [1, 0], [1, 1], [1, 0],\n        [0, 1], [1, 1], [0, 1], [1, 1],\n        [1, 0], [1, 1], [0, 1], [1, 0],\n        [0, 1], [1, 1]],\\\n        \"Wrong result for given test case!\"\n",
        "num_ids_2": 66,
        "num_ids_4": 117
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_row([[1, 4, 7],\n                  [2, 5, 8],\n                  [3, 6, 9]], 3) ==     [(0, 1), (1, 0), (2, 1), (2, 2), (1, 2), (0, 2)]\nassert     get_row([[1, 4, 7],\n                  [2, 5, 8],\n                  [3, 6, 9]], 2) ==     [(1, 0), (2, 0), (2, 1), (1, 1), (0, 1), (0, 2)]\nassert     get_row([[1, 4, 7],\n                  [2, 5, 8],\n                  [3, 6, 9]], 0) ==     [(0, 0), (0, 1), (0, 2), (1, 2), (1, 1), (2, 0), (2, 1), (2, 2), (2, 3)]\nassert     get_row([[1, 4, 7],\n                  [2, 5, 8],\n                  [3, 6, 9]], 4) ==     [(0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5)]\nassert     get_row([[1, 4, 7],\n                  [2, 5, 8],\n                  [3, 6, 9]], 6) ==     [(0, 4), (0, 5), (0, 6), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4)]\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    sort_array([]) == []\n    sort_array([1, 2, 3]) == [1, 2, 3]\n    sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    sort_array([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    sort_array([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sort_array([2, 1, 5, 4, 3, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    sort_array([2, 1, 5, 4, 3, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    sort_array([2, 1, 5, 4, 3, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    sort_array([2, 1, 5, 4, 3, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([3, 2, 1, 6, 4, 5, 5, 4]) == [1, 2, 3, 4, 5, 6, 5, 4]\nassert     sort_array([2, 3, 3, 3, 1, 3, 2, 1]) == [1, 1, 2, 2, 3, 3, 3, 3]\nassert     sort_array([2, 1, 2, 1, 1, 2, 1]) == [1, 1, 1, 1, 1, 2, 2]\nassert     sort_array([3, 1, 2, 1, 2, 1]) == [1, 1, 1, 2, 2, 3]\nassert sort_array([]) == []\n",
        "num_ids_2": 82,
        "num_ids_4": 152
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([5, 1, 1, 2, 0, 0]) ==    [0, 0, 1, 1, 2, 5]\nassert sort_array([5, 1, 1, 2, 0, 0]) ==    [0, 0, 1, 1, 2, 5]\nassert sort_array([5, 0, 0, 0, 1, 1]) ==    [0, 0, 1, 1, 5, 0]\nassert sort_array([5, 1, 1, 2, 0, 0]) ==    [0, 0, 1, 1, 2, 5]\nassert sort_array([1, 1, 2, 2, 3]) ==    [1, 1, 2, 2, 3]\n",
        "num_ids_2": 67,
        "num_ids_4": 133
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsort_array([1,2,3,4,5]) == [1,2,3,4,5]\nassert \nsort_array([1,1,3,3,7,9]) == [1,1,3,3,7,9]\nassert \nsort_array([1,3,5,3,7]) == [1,3,5,3,7]\nassert \nsort_array([1,5,7,8,9]) == [1,5,7,8,9]\nassert \nsort_array([3,5,9,1,4,2]) == [1,2,3,4,5,9]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([10,5,3,6,3,2,4]) == [2,3,3,5,6,10,11]\nassert sort_array([3,2,1,4,0,5,10]) == [0,1,2,3,4,5,10]\nassert sort_array([1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n\n\n\n",
        "num_ids_2": 73,
        "num_ids_4": 121
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    sort_array(array) == sorted(array)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_array([1,2,3]) == sorted([1,2,3])\nassert     sort_array([3,1,2]) == sorted([1,2,3])\nassert     sort_array([3,1,2,2]) == sorted([1,2,2,3])\nassert     sort_array([2,1,3,1]) == sorted([1,1,2,3])\nassert     sort_array([1,1,2]) == sorted([1,1,2])\n",
        "num_ids_2": 44,
        "num_ids_4": 96
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array(     [0,2,4,1,3,6,8,7,9,10,11] ) ==     [0,1,2,3,4,5,6,7,8,9,10,11]\nassert     sort_array(     [11, 9, 7, 2, 3, 5, 10, 13, 12, 1] ) ==     [1, 2, 3, 5, 7, 9, 10, 11, 12, 13, ]\nassert     sort_array(     [1, -1, 0, 1, -1, -2] ) ==     [-2, -1, -1, 0, 1, 1]\nassert sort_array([]) == []\nassert sort_array([1]) == [1]",
        "num_ids_2": 113,
        "num_ids_4": 165
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert sort_array([1, 2, 3, 4, 5, 6]) == sorted([1, 2, 3, 4, 5, 6])\nassert sort_array([1, 2, 3, 4, 5, 6, 7]) == sorted([1, 2, 3, 4, 5, 6, 7])\nassert sort_array([1, 1, 2, 2, 3, 3, 4, 4, 5]) == sorted([1, 1, 2, 2, 3, 3, 4, 4, 5])\n",
        "num_ids_2": 36,
        "num_ids_4": 118
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n\n\nassert decrypt(\"tRK7X-\") == \"TK7X-\"\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(encrypt(\"abc\"))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encrypt(1) == 2\nassert     encrypt(2) == 3\nassert     encrypt(3) == 4\nassert     encrypt(4) == 5\nassert     encrypt(5) == 6\n",
        "num_ids_2": 20,
        "num_ids_4": 40
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     encrypt(\"abc\") == \"bcd\"\nassert     encrypt(\"abc\") == \"bcd\"\nassert     encrypt(\"abc\") == \"bcd\"\nassert     encrypt(\"abc\") == \"bcd\"\nassert     encrypt(\"abc\") == \"bcd\"\n",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encrypt('abc') == 'cde'\nassert encrypt('abc') == 'bcd'\nassert encrypt('abc') == 'bcda'\nassert encrypt('abc') == 'cdb'\nassert encrypt('abc') == 'cbda'\n",
        "num_ids_2": 24,
        "num_ids_4": 46
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nencrypt(s) == 'aogmhjvqqdvffhjycx'\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(next_smallest([1, 2, 4, 5]))\nprint(next_smallest([1, 2, 5, 4]))\nprint(next_smallest([4, 5, 1, 2]))\nprint(next_smallest([1, 2, 4])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_smallest([5, 3, 2, 1]) == 1\nassert     next_smallest([10, 5, 3, 2, 1, 7, 5, 3, 2]) == 2\nassert     next_smallest([10, 5, 3, 2, 1, 7, 5, 3, 2, 9, 5, 3, 2, 1]) == 2\nassert     next_smallest([-2, 1, 2, 3, 4, 5, -6, 7]) is None\nassert     next_smallest([-2, 1, 2, 3, 4, 5, -6, 7, 8, 9]) is None\n",
        "num_ids_2": 46,
        "num_ids_4": 112
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_smallest([10, 5, 0, 1]) == 5\nassert     next_smallest([2, 1, 2]) == 2\nassert     next_smallest([3, 2, 1, 1]) == 1\nassert     next_smallest([0, 1, 2, 3]) == 0\nassert     next_smallest([5, 1, 1]) == None\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    lst = [4,5,9,12,16,23,42]\n    print(next_smallest(lst))\n    print(next_smallest([1,2,3,4,5]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n    print(next_smallest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    next_smallest([-1, -1, 2, -1, 3, 4, 5, 6, 7]) == 3\n\nassert next_smallest([0, 0, 1, 1, 2, 2, 3]) == 2\n\nassert next_smallest([2, 2, 1, 1, 2, 2, 3]) == 1\n",
        "num_ids_2": 26,
        "num_ids_4": 49
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest([1, 2, 3, 4, 5]) == 2, \"expected 2, got \" + str(next_smallest([1, 2, 3, 4, 5]))\nassert     next_smallest([-5, -4, -3, -2, -1]) == -2, \"expected -2, got \" + str(next_smallest([-5, -4, -3, -2, -1]))\nassert     next_smallest([1, 1, 1, 1, 1]) == 1, \"expected 1, got \" + str(next_smallest([1, 1, 1, 1, 1]))\n",
        "num_ids_2": 104,
        "num_ids_4": 150
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert next_smallest([3, 5, 9, 2]) == 2\nassert next_smallest([2, 7, 5, 3, 6, 4, 8, 9, 10]) == 6\nassert next_smallest([5, 5, 9, 2, 7, 5, 3, 6, 4, 8, 9, 10]) == 2\nassert next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is None\n",
        "num_ids_2": 20,
        "num_ids_4": 80
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # run the tests\n    assert next_smallest([10, 2, 5, -1, 20, 4, 1]) == -1\n    assert next_smallest([5, 4, 3, 2, 1, 5, 9, 7, 10]) == 4\n    assert next_smallest([10, 20, 1, 4]) == None\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_bored(\"I.\") == 0\n    is_bored(\"I.!\") == 0\n    is_bored(\"I??\") == 2\n    is_bored(\"I!.\") == 1\n    is_bored(\"I!I\") == 2\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!I!.\") == 3\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!I!?\") == 3\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!\") == 1\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!\") == 1\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!\") == 1\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!?\") == 1\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is_bored(\"I!I!?\") == 4\n    is",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_bored(\"I. don't care\") == 1\nassert is_bored(\"I. don't care. I don't care either\") == 2\nassert is_bored(\"I. don't care! I don't care either\") == 2\nassert is_bored(\"I. don't care. I don't care neither\") == 1\nassert is_bored(\"I. don't care. I don't care neither. I don't care either\") == 2\n",
        "num_ids_2": 37,
        "num_ids_4": 79
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_bored(\"I. am bored today.\")         == 3\nassert is_bored(\"I. am not bored today.\")     == 1\nassert is_bored(\"Are you bored today?\")     == 0\nassert is_bored(\"I am not tired!\")             == 0\nassert is_bored(\"I am not well\")             == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 66
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_bored(\"I am bored. I am bored I am bored I am bored I am bored I am bored I am bored I am bored\") == 2\n\ndef count_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    pass\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert any_int(4, 3, 2) == True\nassert any_int(3, 4, 2) == False\nassert any_int(2, 3, 4) == True\nassert any_int(4, 3, 2) == True\n",
        "num_ids_2": 17,
        "num_ids_4": 45
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     any_int(1, 2, 3) == True, 'First'\nassert any_int(1, 2.1, 3) == False, 'Second'\nassert any_int(1, 2, 4) == False, 'Third'\nassert any_int(1.2, 2.1, 4.4) == True, 'Fourth'\nassert any_int(1, 2.2, 4) == False, 'Fifth'\n",
        "num_ids_2": 39,
        "num_ids_4": 81
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     any_int(1, 1, 1) == True, '1+1=2, 1+1=2, 1+1=2'\nassert     any_int(5, 5, 5) == True, '5=5, 5=5, 5=5'\nassert     any_int(1, 2, 3) == False, '1+2=3, 1+3=4, 1+2=3, 1+2=3'\nassert     any_int(1, 2, 3) == False, '1+2=3, 1+3=4, 1+2=3, 1+2=3'\nassert     any_int(1, 2, 3) == False, '1+2=3, 1+3=4, 1+2=3, 1+2=3",
        "num_ids_2": 64,
        "num_ids_4": 146
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     any_int(1, 2, 3) == True\nassert any_int(1, 2, 3.1) == False\nassert any_int(1, 2.1, 3) == False\nassert any_int(1.1, 2, 3) == False\nassert any_int(1, 2, 3.1) == False\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1.2, 2.3, 3.4) == True\nassert     any_int(1, 2.3, 3.4) == False\nassert     any_int(1.5, 2.3, 3.4) == False\nassert     any_int(2.7, 2.3, 3.4) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 76
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     encode(\"abECc\") == \"ABcEF\"\nassert     encode(\"abE\") == \"ABE\"\nassert     encode(\"AbC\") == \"AbC\"\nassert     encode(\"aBc\") == \"abC\"\nassert     encode(\"ab\") == \"ab\"\n",
        "num_ids_2": 30,
        "num_ids_4": 59
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode(\"frodo go brrrr\") == \"FRODO GoBRRRR\"\nassert     encode(\"frodo go brrrr\") == \"FRODO GoBRRRR\"\nassert     encode(\"frodo go brrrr\") == \"FRODO GoBRRRR\"\nassert     encode(\"frodo go brrrr\") == \"FRODO GoBRRRR\"\nassert     encode(\"frodo go brrrr\") == \"FRODO GoBRRRR\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way\n    that it swaps case of all letters, and replaces all vowels in the\n    message with the letter that appears 2 places ahead of that vowel.\n    Assume only letters. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it reverses case of letters in the message. \n    Assume only letters. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode(\"the quick brown fox jumps over the lazy dog\") == \"hIqUcK buXn sPqUoV ymE lzIgD gOvEr\"\nassert     encode(\"HOW DO YOU DO IN YOUR FROWNING HEAD\") == \"hOW doyOU doyEy inRy PyInFrOwining Hdg\"\nassert     encode(\"BREATHE ME!\") == \"bIHE me!\"\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message and does the opposite\n    of encode. \n    Assume only letters. \n    \"\"\"\n    pass\n\n",
        "num_ids_2": 85,
        "num_ids_4": 104
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(skjkasdkd([10, 20, 50, 40]))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     skjkasdkd([3,3,4]) == 8\nassert     skjkasdkd([1,3,4]) == 8\nassert     skjkasdkd([1,1,4]) == 4\n",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     skjkasdkd([5, 10, 14, 2, 8, 11, 9, 6, 7, 2, 13, 11]) == 37\nassert     skjkasdkd([3, 6, 15, 16, 9, 10, 6, 3, 9, 16]) == 62\nassert     skjkasdkd([10, 3, 5, 3, 7, 4, 11, 3, 5, 2, 7]) == 23\nassert     skjkasdkd([12, 3, 5, 3, 8, 11, 9, 6, 7, 2, 13, 11]) == 60\n",
        "num_ids_2": 66,
        "num_ids_4": 134
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('You passed: ', skjkasdkd.__doc__)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     skjkasdkd([1, 2, 3]) == 9\nassert     skjkasdkd([2, 4, 6]) == 12\nassert     skjkasdkd([8, 2, 9, 6, 5]) == 30\nassert     skjkasdkd([9, 4, 8, 7, 5, 6, 7, 5, 8]) == 71\n",
        "num_ids_2": 34,
        "num_ids_4": 84
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     skjkasdkd([1, 2, 3, 4]) == 7, \"Wrong answer\"\n\ndef skjkasdkd2(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \"\"\"\n    pass\n",
        "num_ids_2": 25,
        "num_ids_4": 25
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert check_dict_case({}) == False\nassert check_dict_case({\"DIGIT\":1}) == True\nassert check_dict_case({\"c\":0}) == True\nassert check_dict_case({\"a\":\"0\"}) == False\n",
        "num_ids_2": 14,
        "num_ids_4": 46
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({}) == True\nassert     check_dict_case({'1': 'a', '2': 'b', '3': 'c'}) == True\nassert     check_dict_case({'a': '1', 'b': '2', 'c': '3'}) == True\nassert     check_dict_case({'1': 'a', '2': 'b', '3': 'C'}) == False\n",
        "num_ids_2": 42,
        "num_ids_4": 102
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_dict_case({}) == False, 'Empty dictionary'\nassert     check_dict_case({\"key1\": \"value1\"}) == False, 'Dictionary with one value'\nassert     check_dict_case({\"KEY1\": \"value1\"}) == True, 'Dictionary with two values'\nassert     check_dict_case({\"key1\": \"value1\", \"key2\": \"value2\"}) == True, 'Dictionary with multiple values'\nassert     check_dict_case({\"KEY1\": \"value1\", \"KEY2\": \"value2\"}) == False, 'Dictionary with different casing'\n",
        "num_ids_2": 45,
        "num_ids_4": 109
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_dict_case({\"a\":1, \"A\":1, \"b\":2, \"C\":3, \"d\":4}) is True,\\\n    \"wrong output for check_dict_case\"\nassert     check_dict_case({\"A\":1, \"b\":2, \"c\":3, \"D\":4, \"e\":5}) is False,\\\n    \"wrong output for check_dict_case\"\nassert     check_dict_case({\"a\":1}) is False,\\\n    \"wrong output for check_dict_case\"\nassert     check_dict_case({\"A\":1}) is True,\\\n    \"wrong output for check_dict_case\"\n",
        "num_ids_2": 76,
        "num_ids_4": 112
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_dict_case({\"hello\": \"world\"}) == True, \"Test 1 Failed\"\nassert     check_dict_case({\"hello\": \"world\", \"hello2\": \"world3\"}) == False, \"Test 2 Failed\"\nassert     check_dict_case({\"hello\": \"world\", \"hello2\": \"world3\"}) == True, \"Test 3 Failed\"\nassert     check_dict_case({\"HELLO\": \"world\", \"hello2\": \"world3\"}) == True, \"Test 4 Failed\"\nassert     check_dict_case({\"hello\": \"world\", \"HELLO\": \"world2\"}) == True, \"Test 5 Failed\"\n",
        "num_ids_2": 56,
        "num_ids_4": 122
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_dict_case({}) == False\nassert     check_dict_case({'go': 'bonjour', 'M\u00e9gane': 'bonjour'}) == True\nassert     check_dict_case({'go': 'bonjour', 'M\u00e9gane': 'Bonjour'}) == False\n\nassert     check_dict_case({}) == False\n",
        "num_ids_2": 43,
        "num_ids_4": 86
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_dict_case({'Apple':'Orange', 'Orange':'Apple', 'Cherry':'Apple', 'Apple':'Cherry', 'Cherry':'Cherry', 'Cherry':'Cherry'}) \nassert not check_dict_case({})",
        "num_ids_2": 63,
        "num_ids_4": 63
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == False, 'Empty dictionary'\nassert     check_dict_case({'a' : 1, 'b' : 2, 'c' : 3}) == False, 'Wrong key type'\nassert     check_dict_case({'a' : 1, 'b' : 2, 'c' : 3, 'd' : 4}) == True, 'Wrong keys'\n",
        "num_ids_2": 53,
        "num_ids_4": 94
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_up_to(1) == []\nassert     count_up_to(2) == [2]\nassert     count_up_to(3) == [2,3]\nassert     count_up_to(4) == [2,3]\nassert     count_up_to(5) == [2,3]\n",
        "num_ids_2": 28,
        "num_ids_4": 62
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_up_to(6) == [2, 3] \nassert     count_up_to(7) == [2, 3, 5] \nassert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(20) == [2, 3, 5, 7, 11, 13, 17, 19] \nassert     count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
        "num_ids_2": 38,
        "num_ids_4": 89
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\nassert     count_up_to(5) == [2, 3, 5]\nassert     count_up_to(7) == [2, 3, 5, 7]\nassert     count_up_to(1) == []\nassert     count_up_to(0) == []\n",
        "num_ids_2": 40,
        "num_ids_4": 74
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_up_to(6) == [2, 3, 4, 5]\nassert count_up_to(10) == [2, 3, 4, 5, 7]\nassert count_up_to(5) == [2, 3, 4]\nassert count_up_to(0) == []\n",
        "num_ids_2": 23,
        "num_ids_4": 63
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_up_to(5) == [2,3,5], \"1st incorrect array\"\nassert count_up_to(10) == [2,3,5,7], \"2nd incorrect array\"\nassert count_up_to(100) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97], \"3rd incorrect array\"\nassert count_up_to(1000) == [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,361,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997], \"4th incorrect array\"\n",
        "num_ids_2": 27,
        "num_ids_4": 121
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_up_to(1) == []\nassert count_up_to(2) == [1,2]\nassert count_up_to(3) == [2,3]\nassert count_up_to(4) == [2,3,4]\n",
        "num_ids_2": 15,
        "num_ids_4": 47
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_up_to(10) == [2,3,5,7]\ncount_up_to(20) == [2,3,5,7,11,13,17,19]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply(12, 15) == 0\nassert     multiply(12, 15) == 15\nassert     multiply(123, 15) == 15\nassert     multiply(12345, 15) == 15\nassert     multiply(123456, 15) == 15\n",
        "num_ids_2": 26,
        "num_ids_4": 53
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert multiply(5, 6) == 30\nassert multiply(1000000, 333) == 333333\nassert multiply(21, 0) == 0\nassert multiply(0, 21) == 0\n",
        "num_ids_2": 13,
        "num_ids_4": 35
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    multiply(53, 43) == 181\n    multiply(53, 71) == 240\n    multiply(61, 26) == 214\n\ndef is_divisible_by(number, divisor):\n    \"\"\"Complete the function that returns true if the number is divisible by \n    the divisor, or false if it is not.\n    \n    Note: The division operator / represents integer division.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    multiply(12, 10) == 120, 'error!'\n    multiply(12, 20) == 1220, 'error!'\n    multiply(12, 100) == 12000, 'error!'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply(7, 7) == 21\nassert     multiply(7, -7) == 21\nassert     multiply(-7, -7) == 21\nassert     multiply(7, -7) == 21\nassert     multiply(-7, 7) == 21\n",
        "num_ids_2": 27,
        "num_ids_4": 55
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply(89, 85) == 200\nassert multiply(64, 11) == 108\n",
        "num_ids_2": 23,
        "num_ids_4": 23
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply(1, 100) == 100\nassert    multiply(10, 101) == 1000\nassert    multiply(1, 10) == 10\nassert    multiply(10, 1) == 10\n\nprint(\"PASSED\"",
        "num_ids_2": 26,
        "num_ids_4": 52
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply(123, 123) == 654\nassert     multiply(123, 523) == 315\nassert     multiply(123, 92) == 96\nassert     multiply(123, 121) == 144\nassert     multiply(123, 121) == 144\n",
        "num_ids_2": 28,
        "num_ids_4": 54
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef print_identity_matrix(n):\n    \"\"\"Complete the function that prints the identity matrix \n    of size n x n. \n    \n    Assume the input is always valid.\n    \"\"\"\n    pass\n\ndef print_identity_matrix2(n):\n    \"\"\"Complete the function that prints the identity matrix of size n x n. \n    \n    Assume the input is always valid.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_upper('We promptly judged antique ivory buckles for the next prize') == 3\nassert count_upper('We promptly judged antique ivory buckles for the prize') == 3\nassert count_upper('We promptly judged antique ivory buckles for the next prize') == 3\nassert count_upper('We promptly judged antique ivory buckles for the prize') == 3\nassert count_upper('We promptly judged antique ivory buckles for the prize') == 3\n",
        "num_ids_2": 40,
        "num_ids_4": 79
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert count_upper(\"asdf\") == 4\nassert count_upper(\"qwer\") == 2\nassert count_upper(\"airgg\") == 2\n",
        "num_ids_2": 14,
        "num_ids_4": 36
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_upper(\"hAm\") == 1\nassert count_upper(\"HAm\") == 1\nassert count_upper(\"hEre\") == 1\nassert count_upper(\"here\") == 2\nassert count_upper(\"here\") == 2\n",
        "num_ids_2": 23,
        "num_ids_4": 45
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_upper('bob') == 0\nassert count_upper('bobob') == 2\nassert count_upper('bobobooo') == 3\nassert count_upper('boboboo') == 1\n",
        "num_ids_2": 14,
        "num_ids_4": 39
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    s = 'abcde'\n    print(count_upper(s))\n\n    s = 'abc'\n    print(count_upper(s)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_integer(\"12.5\") == 12, \"Wrong closest_integer\"\nassert     closest_integer(\"14.5\") == 15, \"Wrong closest_integer\"\nassert     closest_integer(\"-14.5\") == -15, \"Wrong closest_integer\"\nassert     closest_integer(\"-1\") == -1, \"Wrong closest_integer\"\nassert     closest_integer(\"1.5\") == 1, \"Wrong closest_integer\"\n",
        "num_ids_2": 46,
        "num_ids_4": 94
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Run your test cases\n    assert closest_integer(\"0\") == 0\n    assert closest_integer(\"1\") == 1\n    assert closest_integer(\"2.5\") == 2\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"2.4\") == 2\nassert     closest_integer(\"-2.4\") == -2\nassert     closest_integer(\"0.5\") == 0\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"20\") == 20\nassert     closest_integer(\"-20\") == -20\nassert     closest_integer(\"-14.5\") == -15\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\n",
        "num_ids_2": 32,
        "num_ids_4": 62
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_integer(\"13\") == 13\nassert     closest_integer(\"2.5\") == 2\nassert     closest_integer(\"11.5\") == 11\nassert     closest_integer(\"15.5\") == 15\nassert     closest_integer(\"16.5\") == 16\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"-1.5\") == -2\nassert     closest_integer(\"3.5\") == 4\n",
        "num_ids_2": 30,
        "num_ids_4": 64
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     make_a_pile(2) ==    [1, 1]\nassert     make_a_pile(5) ==    [1, 1, 1, 1, 1]\nassert     make_a_pile(10) ==    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     make_a_pile(30) ==    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     make_a_pile(10 ** 4) ==    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 44,
        "num_ids_4": 158
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1,1]\nassert     make_a_pile(3) == [1,1,1]\nassert     make_a_pile(4) == [1,1,1,1]\nassert     make_a_pile(5) == [1,1,1,1,1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_a_pile(3) ==    [1, 1, 1]\nassert     make_a_pile(4) ==    [1, 1, 1, 1]\nassert     make_a_pile(5) ==    [1, 1, 1, 1, 1]\nassert     make_a_pile(6) ==    [1, 1, 1, 1, 1, 1]\nassert     make_a_pile(7) ==    [1, 1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 44,
        "num_ids_4": 96
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_a_pile(4) == [4,3]\nassert     make_a_pile(5) == [4,3,2]\nassert     make_a_pile(6) == [4,3,2,1]\nassert     make_a_pile(7) == [4,3,2,1,1]\nassert     make_a_pile(8) == [4,3,2,1,1,1]",
        "num_ids_2": 38,
        "num_ids_4": 84
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [1, 2]\nassert     make_a_pile(4) == [3, 2]\nassert     make_a_pile(5) == [4, 1, 2]\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2,1]\nassert     make_a_pile(3) == [3,2,1]\nassert     make_a_pile(4) == [4,3,2,1]\nassert     make_a_pile(5) == [5,4,3,2,1]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    make_a_pile(2) == [1, 1]\n    make_a_pile(3) == [2, 1]\n    make_a_pile(4) == [3, 1]\n    make_a_pile(5) == [4, 1]\n    make_a_pile(6) == [5, 1]\n    make_a_pile(7) == [6, 1]\n    make_a_pile(8) == [7, 1]\n    make_a_pile(9) == [8, 1]\n    make_a_pile(10) == [9, 1]\n    make_a_pile(11) == [10, 1]\n    make_a_pile(12) == [11, 1]\n    make_a_pile(13) == [12, 1]\n    make_a_pile(14) == [13, 1]\n    make_a_pile(15) == [14, 1]\n    make_a_pile(16) == [15, 1]\n    make_a_pile(17) == [16, 1]\n    make_a_pile(18) == [17, 1]\n    make_a_pile(19) == [18, 1]\n    make_a_pile(20) == [19, 1]\n    make_a_pile(21) == [20, 1]\n    make_a_pile(22) == [21, 1]\n    make_a_pile(23) == [22, 1]\n    make_a_pile(24) == [23, 1]\n    make_a_pile(25) == [24, 1]\n    make_a_pile(26) == [25, 1]\n    make_a_pile(27) == [26, 1]\n    make_a_pile(28) == [27, 1]\n    make_a_pile(29) == [28, 1]\n    make_a_pile(30) == [29, 1]\n    make_a_pile(31) == [30, 1]\n    make_a_pile(32) == [31, 1]\n    make_a_pile(33) == [32, 1]\n    make_a_pile(34) == [33, 1]\n    make_a_pile(35) == [34, 1]\n    make_a_pile(36) == [35, 1]\n    make_a_pile(37) == [36, 1]\n    make_a_pile(38) == [37, 1]\n    make_a_pile(39) == [38, 1]\n    make_a_pile(40) == [39, 1]\n    make_a_pile(41) == [40, 1]\n    make_a_pile(42) == [41, 1]\n    make_a_pile(43) == [42, 1]\n    make_a_pile(44) == [43, 1]\n    make_a_pile(45) == [44, 1]\n    make_a_pile(46) == [45, 1]\n    make_a_pile(47) == [46, 1]\n    make_a_pile(48) == [47, 1]\n    make_a_pile(49) == [48, 1]\n    make_a_pile(50) == [49, 1]\n    make_a_pile(51) == [50, 1]\n    make_a_pile(52) == [51, 1]\n    make_a_pile(53) == [52, 1]\n    make_a_pile(54) == [53, 1]\n    make_a_pile(55) == [54, 1]\n    make_a_pile(56) == [55, 1]\n    make_a_pile(57) == [56, 1]\n    make_a_pile(58) == [57, 1]\n    make_a_pile(59) == [58, 1]\n    make_a_pile(60) == [59, 1]\n    make_a_pile(61) == [60, 1]\n    make",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nmake_a_pile(1) == [1]\nmake_a_pile(2) == [1, 1]\nmake_a_pile(3) == [1, 1, 1]\nmake_a_pile(4) == [1, 1, 1, 1]\nmake_a_pile(5) == [1, 1, 1, 1, 1]\nmake_a_pile(6) == [1, 1, 1, 1, 1, 1]\nmake_a_pile(7) == [1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(8) == [1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(9) == [1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(10) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(11) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(12) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(13) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(14) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(15) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(16) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(17) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(18) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(19) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(20) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(21) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(22) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(23) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(24) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(25) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(26) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nmake_a_pile(2",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_a_pile(5) ==  [5, 4, 3, 2]\nassert     make_a_pile(7) ==  [7, 6, 5, 4]\nassert     make_a_pile(8) ==  [8, 7, 6, 5]\nassert     make_a_pile(9) ==  [9, 8, 7, 6]\nassert     make_a_pile(10) ==  [10, 9, 8, 7]",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef numbers_string(s):\n    \"\"\"\n    You will be given a string of numbers separated by commas or spaces. Your task is\n    to split the string into numbers and return an array of the numbers.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     words_string('apples,bananas,cherries') == ['apples', 'bananas', 'cherries']\nassert     words_string('apples,bananas,cherries,oranges') == ['apples', 'bananas', 'cherries', 'oranges']\nassert     words_string('apples,bananas,cherries,oranges,kiwis') == ['apples', 'bananas', 'cherries', 'oranges', 'kiwis']\n",
        "num_ids_2": 65,
        "num_ids_4": 110
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_string('a,b,c') == ['a', 'b', 'c']\nassert     words_string('a, b, c') == ['a', 'b', 'c']\nassert     words_string('a,,, b, c') == ['a', 'b', 'c']\nassert     words_string('a, b, c') == ['a', 'b', 'c']\nassert     words_string('a,, b, c') == ['a', 'b', 'c']\n",
        "num_ids_2": 46,
        "num_ids_4": 93
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sort_012(input_list):\n    \"\"\"\n    Given an input array consisting on only 0, 1, and 2, sort the array in a single traversal.\n    Args:\n        input_list (list): list of 0, 1, 2\n    \"\"\"\n    pass\n\n\ndef sort_012_2(input_list):\n    \"\"\"\n    Given an input array consisting on only 0, 1, and 2, sort the array in a single traversal.\n    Args:\n        input_list (list): list of 0, 1, 2\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nwords_string(\"Cats and ponies\") == [\"Cats\", \"and\", \"ponies\"]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_string('hello, world') == ['hello', 'world'], 'You must do that!'\nassert words_string('hello, world and welcome') == ['hello', 'world', 'and', 'welcome'], 'You must do that!'\nassert words_string('hello, world, hello, welcome') == ['hello', 'world', 'hello', 'welcome'], 'You must do that!'\nassert words_string('hello, world and welcome and goodbye') == ['hello', 'world', 'and', 'welcome', 'and', 'goodbye'], 'You must do that!'\nassert words_string('hello, world, hello, welcome and goodbye') == ['hello', 'world', 'hello', 'welcome', 'and', 'goodbye'], 'You must do that!'\n",
        "num_ids_2": 58,
        "num_ids_4": 135
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_string('first, second, third, fourth') == ['first','second', 'third', 'fourth']\nassert words_string('first, second, third, fourth,fifth') == ['first','second', 'third', 'fourth', 'fifth']\n",
        "num_ids_2": 58,
        "num_ids_4": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     choose_num(1, 5) == 4, 'Wrong result for (1, 5): 4'\nassert     choose_num(1, 10) == -1, 'Wrong result for (1, 10): -1'\nassert     choose_num(0, 10) == -1, 'Wrong result for (0, 10): -1'\nassert     choose_num(1, 2) == 1, 'Wrong result for (1, 2): 1'\nassert     choose_num(10, 20) == 20, 'Wrong result for (10, 20): 20'\n",
        "num_ids_2": 56,
        "num_ids_4": 112
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nchoose_num(3, 4) == 3\nchoose_num(5, 11) == 5\nchoose_num(4, 8) == 8\nchoose_num(1, 10) == -1\nchoose_num(-1, -2) == -1\nchoose_num(-1, 2) == 1\nchoose_num(1, 1) == 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     choose_num(1, 3) == 2\nassert     choose_num(10, 11) == 10\nassert     choose_num(10, 12) == -1\nassert     choose_num(10, 13) == -1\n\nprint('Test passed.')\n",
        "num_ids_2": 28,
        "num_ids_4": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    choose_num(1, 2) == 2\n    choose_num(1, 100) == -1\n    choose_num(10, 20) == 20\n    choose_num(9, 20) == 19\n    choose_num(100, 200) == -1\n    choose_num(10, 11) == 10\n    choose_num(20, 100) == -1\n    choose_num(100, 1000) == -1\n    choose_num(100, 300) == 100\n    choose_num(101, 300) == -1\n    choose_num(100, 300) == 100\n    choose_num(101, 300) == -1\n    choose_num(10, 30) == 20\n    choose_num(20, 30) == 20\n    choose_num(1, 10) == 1\n    choose_num(10, 1) == 10",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     choose_num(10, 15) == 12\nassert     choose_num(15, 10) == 12\nassert     choose_num(-10, 15) == -1\nassert     choose_num(10, -15) == -1\n\n",
        "num_ids_2": 28,
        "num_ids_4": 59
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert choose_num(1, 5) == 1\nassert choose_num(2, 5) == -1\nassert choose_num(3, 5) == 2\nassert choose_num(10, 5) == -1\n",
        "num_ids_2": 15,
        "num_ids_4": 40
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nchoose_num(0, 10) == 0\nassert \nchoose_num(0, 100) == -1\nassert \nchoose_num(10, 100) == 20\nassert \nchoose_num(10, 100) == -1\nassert \nchoose_num(100, 100) == 100\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     choose_num(5, 10) == 6\nassert     choose_num(0, 10) == -1\nassert     choose_num(15, 17) == -1\nassert     choose_num(10, 20) == -1",
        "num_ids_2": 29,
        "num_ids_4": 59
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rounded_avg(1, 1) == 0\nassert rounded_avg(2, 3) == 1\nassert rounded_avg(5, 6) == 5\nassert rounded_avg(3, 4) == 1\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nrounded_avg(3, 4) == 2\nrounded_avg(2, 3) == 2\nrounded_avg(6, 7) == 5\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrounded_avg(5,7) == 6\nassert rounded_avg(1,3) == 2\nassert rounded_avg(10,10) == 10\nassert rounded_avg(10,10) == 10\nassert rounded_avg(10,5) == 7\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nrounded_avg(0, 10) == 1\nrounded_avg(0, 1) == 0\nrounded_avg(0, 2) == 1\nrounded_avg(2, 3) == 1\nrounded_avg(3, 4) == 2\nrounded_avg(5, 10) == 2\nrounded_avg(10, 11) == -1\nrounded_avg(0, 0) == 0\nrounded_avg(1, 1) == 1\nrounded_avg(1, 2) == 1\nrounded_avg(3, 2) == 2\nrounded_avg(2, 3) == 2\nrounded_avg(5, 5) == 5\nrounded_avg(10, 10) == 10\nrounded_avg(100, 100) == 100\nrounded_avg(1, 1) == 1\nrounded_avg(2, 3) == 2\nrounded_avg(3, 5) == 3\nrounded_avg(5, 5) == 5\nrounded_avg(10, 10) == 10\nrounded_avg(100, 100) == 100\nrounded_avg(1, 100) == 1\nrounded_avg(2, 1) == 2\nrounded_avg(2, 2) == 2\nrounded_avg(3, 1) == 3\nrounded_avg(3, 3) == 3\nrounded_avg(3, 4) == 3\nrounded_avg(3, 5) == 4\nrounded_avg(10, 10) == 10\nrounded_avg(100, 101) == 101\nrounded_avg(1, 101) == 1\nrounded_avg(2, 101) == 101\nrounded_avg(3, 101) == 101\nrounded_avg(4, 101) == 101\nrounded_avg(5, 101) == 101\nrounded_avg(6, 101) == 101\nrounded_avg(7, 101) == 101\nrounded_avg(8, 101) == 101\nrounded_avg(9, 101) == 101\nrounded_avg(10, 101) == 101\nrounded_avg(101, 102) == 102\nrounded_avg(1, 102) == 2\nrounded_avg(2, 102) == 2\nrounded_avg(3, 102) == 3\nrounded_avg(4, 102) == 4\nrounded_avg(5, 102) == 5\nrounded_avg(6, 102) == 5\nrounded_avg(7, 102) == 5\nrounded_avg(8, 102) == 5\nrounded_avg(9, 102) == 5\nrounded_avg(10, 102) == 5\nrounded_avg(102, 103) == 103\nrounded_avg(2, 103) == 2\nrounded_avg(3, 103) == 3\nrounded_avg(4, 103) == 4\nrounded_avg(5, 103) == 5\nrounded_avg(6, 103) == 6\nrounded_avg(7, 103) == 6\nrounded_avg(8, 103) == 6\nrounded_avg(9, 103) == 6\nrounded_avg(10, 103) == 6\nrounded_avg(103, 104) == 104\nrounded_avg(2, 104) == 2\nrounded_avg(3, 104) == 3\nrounded_avg(4, 104) == 4\nrounded_avg(5, 104) == 5\nrounded_avg(6, 104) == 6\nrounded_avg(7, 104) == 7\nrounded_avg(8, 104) == 7\nrounded_avg(9, 104) == 7\nrounded_avg(10, 104) == 7\nrounded_avg(104, 105) == 105\nrounded_avg(2, 105) == 2\nrounded_avg(3, 105) == 3\nrounded_avg(4, 105) == 4\nrounded_avg(5, 105) == 5\nrounded_avg(6, 105) == 6\nrounded_avg(7, 105) == 7\nrounded_avg(8, 105) == 7\nrounded_avg(9, 105) == 7\nrounded_avg(10, 105) == 7\nrounded_avg(105, 106) == 106\nrounded_avg(2, 106) == 2\nrounded_avg(3, 106) == 3\nrounded_avg(4, 106) == 4\nrounded",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nrounded_avg(1, 2) == 1\nassert rounded_avg(2, 3) == 1.5\nassert rounded_avg(2, 2) == 1\nassert rounded_avg(3, 4) == 1.5\nassert rounded_avg(4, 5) == 2\n",
        "num_ids_2": 18,
        "num_ids_4": 46
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nrounded_avg(5, 20) == 15\nrounded_avg(5, 10) == 5\nrounded_avg(7, 9) == 8\nrounded_avg(7, 10) == 7\nrounded_avg(10, 0) == 10\nrounded_avg(0, 10) == 0\nrounded_avg(9, 10) == -1\nrounded_avg(-1, 10) == -1\nrounded_avg(2, 10) == 2\nrounded_avg(1, 10) == 1\nrounded_avg(5, 5) == 5\nrounded_avg(5, 10) == 5\nrounded_avg(5, 7) == 5\nrounded_avg(5, 4) == 5\nrounded_avg(4, 5) == 4\nrounded_avg(2, 2) == 2\nrounded_avg(1, 1) == 1\nrounded_avg(2, 0) == 2\nrounded_avg(1, 0) == 1\nrounded_avg(0, 1) == 1\nrounded_avg(1, 2) == 2\nrounded_avg(2, 3) == 2\nrounded_avg(3, 5) == 4\nrounded_avg(5, 5) == 5\nrounded_avg(10, 10) == 10\nrounded_avg(5, 8) == 5\nrounded_avg(1, 8) == 1\nrounded_avg(2, 8) == 2\nrounded_avg(3, 8) == 3\nrounded_avg(4, 8) == 4\nrounded_avg(5, 8) == 5\nrounded_avg(6, 8) == 6\nrounded_avg(7, 8) == 7\nrounded_avg(8, 8) == 8\nrounded_avg(9, 8) == 9\nrounded_avg(10, 8) == 10\nrounded_avg(11, 8) == 10\nrounded_avg(12, 8) == 11\nrounded_avg(13, 8) == 12\nrounded_avg(14, 8) == 13\nrounded_avg(15, 8) == 14\nrounded_avg(16, 8) == 15\nrounded_avg(17, 8) == 16\nrounded_avg(18, 8) == 17\nrounded_avg(19, 8) == 18\nrounded_avg(20, 8) == 19\nrounded_avg(21, 8) == 20\nrounded_avg(22, 8) == 21\nrounded_avg(23, 8) == 22\nrounded_avg(24, 8) == 23\nrounded_avg(25, 8) == 24\nrounded_avg(26, 8) == 25\nrounded_avg(27, 8) == 26\nrounded_avg(28, 8) == 27\nrounded_avg(29, 8) == 28\nrounded_avg(30, 8) == 29\nrounded_avg(31, 8) == 30\nrounded_avg(32, 8) == 31\nrounded_avg(33, 8) == 32\nrounded_avg(34, 8) == 33\nrounded_avg(35, 8) == 34\nrounded_avg(36, 8) == 35\nrounded_avg(37, 8) == 36\nrounded_avg(38, 8) == 37\nrounded_avg(39, 8) == 38\nrounded_avg(40, 8) == 39\nrounded_avg(41, 8) == 40\nrounded_avg(42, 8) == 41\nrounded_avg(43, 8) == 42\nrounded_avg(44, 8) == 43\nrounded_avg(45, 8) == 44\nrounded_avg(46, 8) == 45\nrounded_avg(47, 8) == 46\nrounded_avg(48, 8) == 47\nrounded_avg(49, 8) == 48\nrounded_avg(50, 8) == 49\nrounded_avg(51, 8) == 50\nrounded_avg(52, 8) == 51\nrounded_avg(53, 8) == 52\nrounded_avg(54, 8) == 53\nrounded_avg(55, 8) == 54\nrounded_avg(56, 8) == 55\nrounded_avg(57, 8) == 56\nrounded_avg(58, 8) == 57\nrounded_avg(59, 8) == 58\nrounde",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrounded_avg(5,5) == 5\nassert rounded_avg(6,6) == 6\nassert rounded_avg(7,6) == 7\nassert rounded_avg(5,6) == -1\nassert rounded_avg(7,6) == 7\n",
        "num_ids_2": 16,
        "num_ids_4": 43
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert rounded_avg(5,6) == 5\nassert rounded_avg(5,7) == 6\nassert rounded_avg(5,8) == 6\nassert rounded_avg(5,9) == 6\n",
        "num_ids_2": 16,
        "num_ids_4": 42
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef all_anagrams(word):\n    \"\"\"Given a word, return a dictionary with all its anagrams in the word.\n    \n    Each entry in the dictionary should be a list of all possible anagrams\n    of the word, sorted in increasing order. For example, the dictionary\n    {\"t\": [\"te\", \"pet\"], \"p\": [\"pe\", \"po\"], \"e\": [\"p\", \"pe\"], \"k\": [\"k\", \"ek\"]}\n    should contain\n    {\"t\": [\"te\", \"pet\"], \"p\": [\"pe\", \"po\"], \"e\": [\"p\", \"pe\"], \"k\": [\"k\", \"ek\"]}.\n    \n    Note: This function can be implemented using only built-in methods.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(unique_digits([23,12,24,13]))\nprint(unique_digits([23,12,24,23]))\n\nprint(unique_digits([]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_digits([2, 2, 3, 4]) == [2, 3, 4], \"2,2,3,4 is not unique_digits([2,2,3,4]):\"\nassert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \"1,1,1,1,1,1,1,1,1,1 is not unique_digits([1,1,1,1,1,1,1,1,1,1]):\"\nassert     unique_digits([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \"1,1,1,1,1,1,1,1,1,1 is not unique_digits([1,1,1,1,1,1,1,1,1,1]):\"\nassert unique_digits([2,2,3,4]) == [2,3,4], \"2,2,3,4 is not unique_digits([2,2,3,4]):\"\nassert unique_digits([1,1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1,1,1,1], \"1,1,1,1,1,1,1,1,1,1 is not unique_digits([1,1,1,1,1,1,1,1,1,1]):\"\n",
        "num_ids_2": 148,
        "num_ids_4": 295
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_digits([]    )    ==    []\nassert     unique_digits([1])    ==    [1]\nassert     unique_digits([1, 2, 3])    ==    [1, 2, 3]\nassert     unique_digits([1, 1, 2])    ==    [1, 2]\nassert     unique_digits([4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1])    ==    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "num_ids_2": 31,
        "num_ids_4": 77
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nx = [1,2,3,4,5,6,7,8,9,10]\n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. GO YOU!\\n\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_digits([[4, 3, 2], [9, 4, 5]]) == [[4, 3, 2], [9, 4, 5]]\nassert     unique_digits([[1, 2], [3, 5], [4, 5, 6]]) == [[1, 2], [3, 5], [4, 5, 6]]\n",
        "num_ids_2": 82,
        "num_ids_4": 82
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_digits([]) == []\nassert     unique_digits([1]) == [1]\nassert     unique_digits([2, 3, 4, 5]) == [2, 3, 4, 5]\nassert     unique_digits([5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     unique_digits([2, 3, 3, 4, 5, 6, 7, 8, 8, 9, 9]) == [2, 3, 4, 5, 6, 7, 8, 9]\n",
        "num_ids_2": 25,
        "num_ids_4": 103
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_digits([1, 2, 3, 4, 5, 6, 8, 2, 8]) ==     [1, 2, 3, 4, 5, 6]\nassert unique_digits([1, 2, 3, 4, 5, 6, 8, 2, 9, 7]) ==     [1, 2, 3, 4, 5, 6]\nassert unique_digits([1, 2, 3, 4, 5, 6, 8, 9, 7]) ==     [1, 2, 3, 4, 5, 6, 8]\n",
        "num_ids_2": 83,
        "num_ids_4": 125
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_digits([1,2,3,4,5,6,7,8,9]) == sorted([1,2,3,5,6,8,9])\nassert     unique_digits([10,20,30,40,50,60,70,80,90]) == sorted([10,20,30,50,60,70,80,90])\nassert     unique_digits([91,92,93,94,95,96,97,98,99]) == sorted([91,92,93,94,95,96,97,98,99])\n",
        "num_ids_2": 88,
        "num_ids_4": 135
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     by_length([3, 5, 8, 2, 1]) == \"ThreeFiveTwo\"\nassert     by_length([8, 2, 5, 3, 1]) == \"ThreeFiveTwo\"\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nassert by_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n",
        "num_ids_2": 55,
        "num_ids_4": 159
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     by_length([]) == []\nassert     by_length([1]) == [\"One\"]\nassert     by_length([2, 1]) == [\"Two\", \"One\"]\nassert     by_length([3, 4, 5, 6, 7, 8, 9]) == [\"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n\n\nif __name__ == \"__main__\":\n    by_length([1])\n    by_length([2, 1])\n    by_length([3, 4, 5, 6, 7, 8, 9]",
        "num_ids_2": 23,
        "num_ids_4": 84
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n\n\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(f(10))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert f(5) == f(2) == f(3) == f(4) == f(5) == f(6) == f(7) == f(8) == f(9) == f(10) == f(11) == f(12) == f(13) == f(14) == f(15) == f(16) == f(17) == f(18) == f(19) == f(20) == f(21) == f(22) == f(23) == f(24) == f(25) == f(26) == f(27) == f(28) == f(29) == f(30) == f(31) == f(32) == f(33) == f(34) == f(35) == f(36) == f(37) == f(38) == f(39) == f(40) == f(41) == f(42) == f(43) == f(44) == f(45) == f(46) == f(47) == f(48) == f(49) == f(50) == f(51) == f(52) == f(53) == f(54) == f(55) == f(56) == f(57) == f(58) == f(59) == f(60) == f(61) == f(62) == f(63) == f(64) == f(65) == f(66) == f(67) == f(68) == f(69) == f(70) == f(71) == f(72) == f(73) == f(74) == f(75) == f(76) == f(77) == f(78) == f(79) == f(80) == f(81) == f(82) == f(83) == f(84) == f(85) == f(86) == f(87) == f(88) == f(89) == f(90) == f(91) == f(92) == f(93) == f(94) == f(95) == f(96) == f(97) == f(98) == f(99) == f(100) == f(101) == f(102) == f(103) == f(104) == f(105) == f(106) == f(107) == f(108) == f(109) == f(110) == f(111) == f(112) == f(113) == f(114) == f(115) == f(116) == f(117) == f(118) == f(119) == f(120) == f(121) == f(122) == f(123) == f(124) == f(125) == f(126) == f(127) == f(128) == f(129) == f(130) == f(131) == f(132) == f(133) == f(134) == f(135) == f(136) == f(137) == f(138) == f(139) == f(140) == f(141) == f(142) == f(143) == f(144) == f(145) == f(146) == f(147) == f(148) == f(149) == f(150) == f(151) == f(152) == f(153) == f(154) == f(155) == f(156) == f(157) == f(158) == f(159) == f(160) == f(161) == f(162) == f(163) == f(164) == f(165) == f(166) == f(167) == f(168) == f(169) == f(170) == f(171) == f(172) == f(173) == f(174) == f(175) == f(176) == f(177) == f(178) == f(179) == f(180) == f(181) == f(182) == f(183) == f(184) == f(185) == f(186) == f(187) == f(188) == f(189) == f(190) == f(191) == f(192) == f(193) == f(194) == f(195) == f(196) == f(197) == f(198) == f(199) == f(200) == f(201) == f(202) == f(203) == f(204) == f",
        "num_ids_2": 1026,
        "num_ids_4": 1026
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     f(1)    == [1]\nassert     f(2)    == [1,2]\nassert     f(5)    == [1, 2, 6, 24, 120]\nassert     f(10)    == [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\n",
        "num_ids_2": 26,
        "num_ids_4": 82
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     f(2) == [1,1]\nassert     f(3) == [1,2,3]\nassert     f(4) == [1,2,3,4]\nassert     f(5) == [1,2,3,4,5]\nassert     f(6) == [1,2,3,4,5,6]\n",
        "num_ids_2": 28,
        "num_ids_4": 64
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_odd_palindrome(2) == (2, 1)\nassert even_odd_palindrome(5) == (1, 2)\nassert even_odd_palindrome(6) == (2, 1)\n",
        "num_ids_2": 37,
        "num_ids_4": 55
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n\nif __name__ == '__main__':\n    input_n = 9\n    assert even_odd_palindrome(input_n) == (4, 3)\n\n    input_n = 6\n    ",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert even_odd_palindrome(1) == (0, 0)\nassert even_odd_palindrome(2) == (0, 1)\nassert even_odd_palindrome(3) == (1, 1)\nassert even_odd_palindrome(4) == (1, 2)\n",
        "num_ids_2": 21,
        "num_ids_4": 57
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(2) == (1, 1)\nassert     even_odd_palindrome(4) == (0, 2)\nassert     even_odd_palindrome(10) == (4, 6)\n\nprint(\"Testing even_odd_palindrome()...\", end=\"\")\ntest_cases = [(2, 1), (4, 0), (10, 4)]\nfor test_case in test_cases:\n    result = even_odd_palindrome(test_case[0])\n    assert result[0] == test_case[1], result\n    ",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_palindrome(5) == (1, 4)\nassert     even_odd_palindrome(9) == (1, 7)\nassert     even_odd_palindrome(1) == (1, 0)\nassert     even_odd_palindrome(2) == (0, 1)\nassert     even_odd_palindrome(3) == (1, 1)\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_odd_palindrome(7) == (0, 6)\nassert \neven_odd_palindrome(8) == (0, 6)\nassert \neven_odd_palindrome(3) == (2, 1)\nassert \neven_odd_palindrome(10) == (0, 8)\nassert \neven_odd_palindrome(11) == (1, 8)\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_nums([]) == 0\nassert     count_nums([1, 2, 3, 4, 5]) == 0\nassert count_nums([1, -2, 3, -4, 5]) == 2\nassert count_nums([-9, -9, -9, -9, -9]) == 4\nassert count_nums([-9, -9, -9, -9, -9]) == 0\n",
        "num_ids_2": 31,
        "num_ids_4": 76
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_nums2(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_nums([-1,1,2,3,-4,4,0,-1,1]) == 4, \"Should count 4 integers with a positive sum\"\nassert     count_nums([-1,1,2,3,-4,-4,4,0,-1,1]) == 2, \"Should count 2 integers with a negative sum\"\nassert     count_nums([0]) == 0, \"Should count 0 integers\"\nassert     count_nums([1]) == 1, \"Should count 1 integer\"\nassert     count_nums([1,-1,1,-2]) == 1, \"Should count 1 integer with a positive sum\"\n",
        "num_ids_2": 82,
        "num_ids_4": 120
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test 1\n    arr = [12, 61, -12]\n    assert count_nums(arr) == 3\n\n    # test 2\n    arr = [2, 10, -10, -2]\n    assert count_nums(arr) == 2\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('OK, count_nums')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint (\"\\nFunction: move_one_ball\")\nprint (\"Arguments: \" + str(move_one_ball.__doc__) + \"\\n\")\nassert move_one_ball([10, 20, 40, 30]) is False\nassert move_one_ball([]) is True\nassert move_one_ball([1, 2, 3]) is True\nassert move_one_ball([3, 5, 1, 2]) is True\n",
        "num_ids_2": 21,
        "num_ids_4": 48
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_one_ball([10, 4, 3, 8, 5, 6, 1, 2, 7]) == True\nassert     move_one_ball([4, 7, 8, 5, 6, 1, 2, 10, 3]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([1, 2, 3, 4, 5]) == True\nassert     move_one_ball([1, 2, 3, 4, 5, 6, 7]) == False\n",
        "num_ids_2": 58,
        "num_ids_4": 91
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_one_ball([1,2,3,4,5,6]) == False\nassert     move_one_ball([1,2,3,4,5,6,6]) == True\nassert     move_one_ball([]) == True\n",
        "num_ids_2": 48,
        "num_ids_4": 60
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_one_ball([4,2,3,1]) == True\nassert     move_one_ball([]) == True\nassert     move_one_ball([2,2]) == True\nassert     move_one_ball([]) == False\nassert     move_one_ball([3,1,2]) == False\n",
        "num_ids_2": 31,
        "num_ids_4": 58
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_one_ball([1, 2, 3]) == True, \"Wrong output\"\nassert     move_one_ball([3, 2, 1]) == False, \"Wrong output\"\nassert     move_one_ball([1, 2, 2]) == True, \"Wrong output\"\nassert     move_one_ball([2, 3, 4]) == True, \"Wrong output\"\nassert     move_one_ball([1, 2, 3, 4]) == True, \"Wrong output\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_one_ball([1,2,3,4]) == True, \"should return True\"\nassert     move_one_ball([1,2,3,2]) == False, \"should return False\"\nassert     move_one_ball([]) == True, \"should return True\"\n",
        "num_ids_2": 50,
        "num_ids_4": 68
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(move_one_ball([2,3,4,5])) # True\nprint(move_one_ball([])) # True\nprint(move_one_ball([2,3])) # False\nprint(move_one_ball([1,1,1])) # False\nprint(move_one_ball([1])) # True\n\ndef move_one_ball_DP(arr):\n    \"\"\"An optimal approach is to use the hash map. We can create a dictionary\n    that holds the min value of the subarray. If the current array's value is\n    greater than the min value of the subarray then we can return False. Otherwise\n    we can return True. \n    \n    We can also use a boolean variable to store the result. If the array is empty\n    then the boolean variable would be True. If the array is not empty then we\n    can check if the first element is greater than the min value of the array\n    or not. If the array has a single element then we can return the boolean\n    variable. If the array has more than 1 element then we can check if the first\n    element is greater than the min value of the array or not. If the first element\n    is greater than the min value of the array then we can return the boolean\n    variable else we have to check if the next element is greater than the min\n    value of the array or not. If the array has more than 2 elements then we have\n    to check if the first element is greater than the min value of the array or not\n    and we can check if the next element is greater than the min value of the array\n    or not. If this is all false then the boolean variable would be False. Else,\n    the boolean variable would be True.\n\n    The above approach is not optimal because it requires extra space. Since we\n    create a dictionary that stores the minimum values of the subarray, we can\n    simply call the minimum value of the array and see if it is greater than the\n    existing value in the dictionary. If the value of the dictionary is greater than\n    the minimum value of the array we can return False. If the minimum value of the\n    array is less than the existing value in the dictionary then the answer would\n    be True. \n\n    We can create another dictionary and call the min value of the array with the\n    key being the index and the value being the minimum value of the array. \n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('All tests passed')",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange([1, 2, 3], [4, 5, 6])     == \"NO\"\nassert     exchange([1, 2, 3], [4, 6, 5])     == \"NO\"\nassert     exchange([1, 2, 3], [4, 5, 5])     == \"YES\"\nassert     exchange([1, 2, 3], [4, 5, 6])     == \"YES\"\nassert     exchange([3, 2, 1], [4, 6, 5])     == \"YES\"\n",
        "num_ids_2": 48,
        "num_ids_4": 96
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,9,8]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,8,7,6,9]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,8,7,6,5,9]) == \"NO\"\nassert     exchange([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) == \"NO\"\n",
        "num_ids_2": 94,
        "num_ids_4": 188
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     exchange(lst1, lst2) == 'YES', 'Mistake in exchange()'\nassert     exchange(lst1, lst2) == 'YES', 'Mistake in exchange()'\n\n\nprint('All the tests are passed'",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    lst1 = [2, 4, 6, 8]\n    lst2 = [4, 8, 12]\n    lst3 = exchange(lst1, lst2)\n    print(lst1)\n    print(lst2)\n    print(lst3)\n    \n    lst1 = [2, 4, 6, 8]\n    lst2 = [4, 8, 12]\n    lst3 = exchange(lst1, lst2)\n    print(lst1)\n    print(lst2)\n    print(lst3)\n\n    lst1 = [2, 4, 6, 8]\n    lst2 = [4, 8, 12]\n    lst3 = exchange(lst1, lst2)\n    print(lst1)\n    print(lst2)\n    print(lst3)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     exchange([5, 7, 8, 8, 8, 8], [3, 6, 8, 6, 8, 8]) == \"YES\", \"First example\"\nassert     exchange([5, 7, 8, 8, 8, 8], [3, 6, 8, 6, 8, 9]) == \"NO\", \"Second example\"\nassert     exchange([5, 7, 8, 8, 8, 8], [3, 6, 8, 6, 9, 8]) == \"NO\", \"Third example\"\n",
        "num_ids_2": 78,
        "num_ids_4": 117
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     exchange([1,2,3,4,5], [2,3,4,5,6]) == \"YES\", \"Wrong result\"\nassert     exchange([1,2,3], [2,3,4]) == \"YES\", \"Wrong result\"\nassert     exchange([1,2,3,4], [2,3,4,5]) == \"YES\", \"Wrong result\"\nassert     exchange([1,2,3,4,5], [2,3,4,5,6]) == \"YES\", \"Wrong result\"\n\n",
        "num_ids_2": 64,
        "num_ids_4": 132
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     exchange([1,2,3,4,5], [6,7,8,9,10]) == \"NO\"\nassert     exchange([2,4,6,8], [1,3,5,7]) == \"YES\"\nassert     exchange([1,1,1], [1,2,3]) == \"YES\"\n\n\n\n\n",
        "num_ids_2": 58,
        "num_ids_4": 81
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     exchange([], []) == \"NO\"\nassert     exchange([1, 2, 3], [4, 5, 6]) == \"NO\"\nassert     exchange([2, 4, 6], [1, 3, 5]) == \"YES\"\nassert     exchange([3, 6, 9], [2, 4, 8]) == \"YES\"\n",
        "num_ids_2": 36,
        "num_ids_4": 82
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     exchange([1, 2, 3, 4, 5], [1, 3, 4, 5, 6]) == \"YES\"\nassert     exchange([1, 2, 3, 4, 5], [2, 3, 4, 6, 7]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [1, 3, 5, 6, 7]) == \"NO\"\nassert     exchange([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [2, 4, 5, 6]) == \"NO\"\n",
        "num_ids_2": 62,
        "num_ids_4": 124
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef exchange2(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram('hello') == {'h': 1, 'e': 1, 'l': 2, 'o': 1}\nassert     histogram('hello world') == {'h': 1, 'e': 2, 'l': 3, 'w': 1, 'o': 2, 'r': 1}\nassert     histogram('1234567890') == {'1': 9, '2': 9, '3': 8, '4': 7, '5': 6, '6': 5, '7': 5, '8': 4, '9': 4, '0': 4}\nassert     histogram('hello world and goodbye') == {'h': 1, 'e': 2, 'w': 2, 'o': 2, 'd': 1, 'r': 1, 'and': 1, 'g': 1}\nassert     histogram('aabb') == {'a': 2, 'b': 2}\n",
        "num_ids_2": 71,
        "num_ids_4": 187
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     histogram(\"ab\") == {\"a\": 2, \"b\": 1}\nassert     histogram(\"aabb\") == {\"a\": 2, \"b\": 3}\nassert     histogram(\"aabbc\") == {\"a\": 2, \"b\": 3, \"c\": 1}\nassert     histogram(\"\") == {}\n",
        "num_ids_2": 39,
        "num_ids_4": 74
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \n    \n    \n\n    \n    \n    \n    \n    \n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert histogram('hannah') == {'h': 1, 'a': 2, 'n': 1, 'z': 1, 'c': 1, 'o': 1, 'e': 1, 'r': 1, 'h': 1}\nassert histogram('hello world') == {'h': 1, 'e': 2, 'l': 3, 'o': 3, 'w': 1, 'r': 1, 'd': 1,'': 2}\nassert histogram('a') == {'a': 1}\nassert histogram('aa') == {'a': 2}\n",
        "num_ids_2": 58,
        "num_ids_4": 120
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     'alphabet' == histogram('alphabet'), \"Wrong solution\"\nassert     {'a': 1, 'b': 3, 'c': 1, 'd': 1, 'e': 1} == histogram('hello world'), \"Wrong solution\"\nassert     {'a': 3, 'b': 2, 'c': 2, 'd': 1} == histogram('aabb'), \"Wrong solution\"",
        "num_ids_2": 60,
        "num_ids_4": 96
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    test = \"hello world\"\n    assert histogram(test) == {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1}\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     histogram('histogram') == { 'h': 1, 'i': 1, 't': 1,'s': 2 }\nassert histogram('hello') == { 'l': 2, 'o': 2, 'h': 1 }\nassert histogram('') == {}\nassert histogram('asdasd') == { 'a': 2,'s': 2, 'd': 2 }\nprint('\"{}\" passed.'.format(histogram.__doc__))\n",
        "num_ids_2": 54,
        "num_ids_4": 89
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_delete(\"gf\", \"gg\") == (\"ggg\",True), \"Should return (ggg,True)\"\nassert     reverse_delete(\"gf\", \"fg\") == (\"fgg\",False), \"Should return (fgg,False)\"\nassert     reverse_delete(\"ggf\", \"gf\") == (\"gggg\",True), \"Should return (gggg,True)\"\nassert     reverse_delete(\"ggf\", \"fgg\") == (\"gggg\",False), \"Should return (gggg,False)\"\nassert     reverse_delete(\"gf\", \"\") == (\"gf\",False), \"Should return (gf,False)\"\n",
        "num_ids_2": 58,
        "num_ids_4": 118
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert reverse_delete('apaleotary','apple') == ('apaleotary', True)\nassert reverse_delete('akash','c') == ('akash', True)\nassert reverse_delete('apple','p') == ('app', False)\nassert reverse_delete('apple','p') == ('apple', True)\n",
        "num_ids_2": 25,
        "num_ids_4": 59
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    s, c = \"lakse\", \"nadlakse\"\n    assert(reverse_delete(s,c) == ('nadlakse', True))\n    s, c = \"Pale\", \"nPale\"\n    assert(reverse_delete(s,c) == ('nPale', True))\n    s, c = \"b\", \"\"\n    assert(reverse_delete(s,c) == ('', False))\n    s, c = \"\", \"a\"\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    s = input()\n    c = input()\n    print(reverse_delete(s,c))\n\n\"\"\"\nExample 1:\n\nInput: s = \"abc\", c = \"ayb\"\nOutput: (\"ayb\",True)\nExplanation: \"ayb\" is the reverse of \"abc\".\nExample 2:\n\nInput: s = \"abe\", c = \"ac\"\nOutput: (\"ac\",False)\nExplanation: s doesn't contain \"ac\" in the original order.\nExample 3:\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_delete('abc', 'abc') == ('cba', True)\nassert     reverse_delete('abc', 'abcdef') == ('abc', False)\nassert     reverse_delete('abc', 'bcc') == ('cab', True)\nassert     reverse_delete('abc', 'efa') == ('abc', False)\nassert     reverse_delete('abc', 'abc') == ('abc', True)\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_delete('abc','ab') == ('cba',True)\nassert     reverse_delete('abcd','ab') == ('dcba',False)\nassert     reverse_delete('abba','ba') == ('aabb',True)\nassert     reverse_delete('aaa','aa') == ('aa',True)\nassert     reverse_delete('abcd','b') == ('cba',True)",
        "num_ids_2": 37,
        "num_ids_4": 72
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nreverse_delete(\"aacb\",\"baa\") == (\"baacb\",\"True\")\nreverse_delete(\"abcba\",\"a\") == (\"abcba\",\"True\")\nreverse_delete(\"abcaa\",\"b\") == (\"abcaa\",\"False\")\nreverse_delete(\"abcaa\",\"ba\") == (\"abcaa\",\"False\")\nreverse_delete(\"abcb\",\"a\") == (\"abcb\",\"True\")\nreverse_delete(\"abc\",\"abc\") == (\"abc\",\"True\")\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert odd_count([1, 2, 3, 4, 5]) == [\"the number of odd elements in the string 1 of the input\", \"the number of odd elements in the string 2 of the input\", \"the number of odd elements in the string 3 of the input\", \"the number of odd elements in the string 4 of the input\", \"the number of odd elements in the string 5 of the input\"]\nassert odd_count([1, 2, 4, 7, 11, 13]) == [\"the number of odd elements in the string 1 of the input\", \"the number of odd elements in the string 2 of the input\", \"the number of odd elements in the string 3 of the input\", \"the number of odd elements in the string 4 of the input\", \"the number of odd elements in the string 5 of the input\", \"the number of odd elements in the string 6 of the input\"]\n",
        "num_ids_2": 90,
        "num_ids_4": 193
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_count([]) == []\nassert     odd_count([\"a\", \"b\", \"c\", \"d\"]) == [\"the number of odd elements in the string a of the input\", \"the number of odd elements in the string b of the input\", \"the number of odd elements in the string c of the input\", \"the number of odd elements in the string d of the input\"]\nassert     odd_count([\"1a\", \"1b\", \"1c\", \"1d\"]) == [\"the number of odd elements in the string 1 of the input\", \"the number of odd elements in the string 2 of the input\", \"the number of odd elements in the string 3 of the input\", \"the number of odd elements in the string 4 of the input\"]\n\nprint(\"You passed the test!\"",
        "num_ids_2": 87,
        "num_ids_4": 168
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nodd_count([\"hello\", \"world\"]) == [\"1\"]\nodd_count([\"el\", \"ee\", \"ll\", \"ii\"]) == [\"2\"]\nodd_count([\"e\", \"o\", \"o\"]) == [\"2\"]\nodd_count([\"aa\"]) == [\"0\"]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(odd_count([\"h\",\"e\",\"l\",\"l\",\"o\"]))\n\nprint(odd_count([\"b\",\"d\",\"e\",\"h\"]))\n\nprint(odd_count([\"a\",\"c\",\"f\",\"k\"]))\n\nprint(odd_count([\"z\",\"y\",\"x\"]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_count(['', '', '111', '0011', '1101', '0111', '1111', '10111']) == [4, 3, 5, 3, 2, 1, 1, 3]\nassert \nodd_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]) == [0, 0, 2, 1, 4, 2, 5, 4, 1, 0, 0, 2, 0, 2, 4, 1, 3, 2, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 2, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_count([\"4\", \"4\", \"4\", \"4\"]) == [\"1\", \"1\", \"1\", \"2\"]\nassert     odd_count([\"1\", \"5\", \"1\", \"1\"]) == [\"2\", \"1\", \"1\", \"1\"]\nassert     odd_count([\"4\", \"4\", \"4\", \"4\", \"4\"]) == [\"1\", \"1\", \"1\", \"3\", \"1\"]\nassert     odd_count([\"4\", \"4\", \"4\", \"4\", \"4\"]) == [\"1\", \"1\", \"1\", \"4\", \"3\"]\nassert     odd_count([\"4\", \"4\", \"4\", \"4\", \"4\", \"4\"]) == [\"1\", \"1\", \"1\", \"4\", \"4\", \"4\"]\n",
        "num_ids_2": 66,
        "num_ids_4": 144
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_count(['1', '2', '3', '4']) == ['1']\nassert odd_count(['1', '2', '3', '4', '5', '6', '7']) == ['5']\n\ndef even_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of even elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of even digits in the i'th string of the input.\n    \"\"\"\n    pass\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert odd_count([]) == []\nassert odd_count([\"1\"]) == [\"the number of odd elements in the string 1 of the input\"]\nassert odd_count([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"the number of odd elements in the string 1 of the input\",\n                                               \"the number of odd elements in the string 2 of the input\",\n                                               \"the number of odd elements in the string 3 of the input\",\n                                               \"the number of odd elements in the string 4 of the input\"]\nassert odd_count([\"123\", \"1234\"]) == [\"the number of odd elements in the string 1 of the input\",\n                                       \"the number of odd elements in the string 2 of the input\",\n                                       \"the number of odd elements in the string 3 of the input\",\n                                       \"the number of odd elements in the string 4 of the input\"]",
        "num_ids_2": 12,
        "num_ids_4": 74
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minSubArraySum([0,1,2,3]) == 3\nassert     minSubArraySum([2,2]) == 2\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1,2,3]) == 2\nassert     minSubArraySum([-2,-3]) == -1\n",
        "num_ids_2": 32,
        "num_ids_4": 60
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(minSubArraySum([1,1,1]))\nprint(minSubArraySum([1,2,3,7,5]))\nprint(minSubArraySum([2,3,1,1,4]))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nclass Solution(object):\n    def minSubArrayLen(self, s, nums):\n        \"\"\"\n        :type s: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        l = 0\n        r = 0\n        res = float('inf')\n        target = s\n        while r < len(nums):\n            while target > 0 and l < len(nums):\n                target -= nums[l]\n                l += 1\n            if target < 0:\n                break\n            while target > 0 and r < len(nums):\n                target += nums[r]\n                r += 1\n            res = min(res, r - l)\n        if res == float('inf'):\n            return 0\n        else:\n            return res\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint minSubArraySum([1, 1, 1]) == 1\nprint minSubArraySum([1, 2, 3]) == 1\nprint minSubArraySum([1, 2, 3, 1]) == 2\nprint minSubArraySum([1, 2, 3, 4]) == 3\nprint minSubArraySum([1, 2, 3, 4, 5]) == 4\nprint minSubArraySum([1, 2, 3, 4, 5, 6]) == 3\nprint minSubArraySum([3, 5, 2, 1, 7, 4]) == 10\nprint minSubArraySum([9, 2, 1, 4, 8]) == 6\nprint minSubArraySum([5, 1, 5, 2, 5, 2]) == 6\nprint minSubArraySum([1, 2, 3, 4, 5]) == 4\nprint minSubArraySum([1]) == 1\nprint minSubArraySum([]) == 0\nprint minSubArraySum([4,3,2,1]) == 2\nprint minSubArraySum([1,4,4]) == 1\nprint minSubArraySum([1,2,3]) == 1\nprint minSubArraySum([1,2,3,4]) == 4\nprint minSubArraySum([1,2,3,4,5]) == 4\nprint minSubArraySum([1,2,3,4,5,6]) == 5\nprint minSubArraySum([5,1,5,2,5,2]) == 6\nprint minSubArraySum([9, 2, 1, 4, 8]) == 6\nprint minSubArraySum([5, 1, 5, 2, 5, 2]) == 6\nprint minSubArraySum([1, 2, 3, 4, 5]) == 4\nprint minSubArraySum([1]) == 1\nprint minSubArraySum([]) == 0\nprint minSubArraySum([4,3,2,1]) == 2\nprint minSubArraySum([1,4,4]) == 1\nprint minSubArraySum([1,2,3]) == 1\nprint minSubArraySum([1,2,3,4]) == 4\nprint minSubArraySum([1,2,3,4,5]) == 4\nprint minSubArraySum([1,2,3,4,5,6]) == 5\nprint minSubArraySum([5,1,5,2,5,2]) == 6\nprint minSubArraySum([9, 2, 1, 4, 8]) == 6\nprint minSubArraySum([5, 1, 5, 2, 5, 2]) == 6\nprint minSubArraySum([1, 2, 3, 4, 5]) == 4\nprint minSubArraySum([1]) == 1\nprint minSubArraySum([]) == 0\nprint minSubArraySum([4,3,2,1]) == 2\nprint minSubArraySum([1,4,4]) == 1\nprint minSubArraySum([1,2,3]) == 1\nprint minSubArraySum([1,2,3,4]) == 4\nprint minSubArraySum([1,2,3,4,5]) == 4\nprint minSubArraySum([1,2,3,4,5,6]) == 5\nprint minSubArraySum([5,1,5,2,5,2]) == 6\nprint minSubArraySum([9, 2, 1, 4, 8]) == 6\nprint minSubArraySum([5, 1, 5, 2, 5, 2]) == 6\nprint minSubArraySum([1, 2, 3, 4, 5]) == 4\nprint minSubArraySum([1]) == 1\nprint minSubArraySum([]) == 0\nprint minSubArraySum([4,3,2,1]) == 2\nprint minSubArraySum([1,4,4]) == 1\nprint minSubArraySum([1,2,3]) == 1\nprint minSubArraySum([1,2,3,4]) == 4\nprint minSubArraySum([1,2,3,4,5]) == 4\nprint minSubArraySum([1,2,3,4,5,6]) == 5\nprint minSubArraySum([5,1,5,2,5,2]) == 6\nprint minSubArraySum([9, 2, 1, 4, 8]) == 6\nprint minSubArraySum([5, 1, 5, 2, 5, 2]) == 6\nprint minSubArraySum([1, 2, 3, 4, 5]) == 4\nprint minSubArraySum([1]) == 1\nprint minSubArraySum([]) =",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef test_minSubArraySum():\n    assert minSubArraySum([1, 1]) == 1\n    assert minSubArraySum([1, 1, 1]) == 1\n    assert minSubArraySum([1, 2]) == 1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_fill([\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n    ], 1) == 2\nassert     max_fill([\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n    ], 2) == 1\nassert     max_fill([\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n    ], 3) == 1\nassert     max_fill([\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n    ], 4) == 2\nassert     max_fill([\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n    ], 5) == 2\n",
        "num_ids_2": 14,
        "num_ids_4": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_fill([[0,1,1,1,1,1,1],\n                    [0,1,0,1,1,1,1],\n                    [1,1,1,1,1,1,1],\n                    [1,1,1,1,1,1,1]], 5) == 3\nassert max_fill([[0,1,1,1,1,1,1],\n                [0,1,0,1,1,1,1],\n                [1,1,1,1,1,1,1],\n                [1,1,1,1,1,1,1]], 5) == 2\nassert max_fill([[0,1,1,1,1,1,1],\n                [0,0,1,1,1,1,1],\n                [1,1,1,1,1,1,1],\n                [1,1,1,1,1,1,1]], 5) == 0\nassert max_fill([[0,1,1,1,1,1],\n                [0,0,0,1,1,1],\n                [1,1,1,1,1,1],\n                [1,1,1,1,1,1]], 5) == 1\nassert max_fill([[0,1,1,1,1,1],\n                [0,0,0,0,1,1],\n                [1,1,1,1,1,1],\n                [1,1,1,1,1,1]], 5) == 2\n",
        "num_ids_2": 43,
        "num_ids_4": 83
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    grid = [\n        [0, 0, 0, 1, 0],\n        [0, 0, 0, 1, 0],\n        [0, 0, 0, 1, 0],\n        [0, 1, 1, 1, 0],\n        [0, 0, 0, 0, 0]\n    ]\n    print(max_fill(grid, 1))\n    print(max_fill(grid, 2))\n    print(max_fill(grid, 3))\n    print(max_fill(grid, 4))\n    print(max_fill(grid, 5))\n    print(max_fill(grid, 6))\n    print(max_fill(grid, 7))\n    print(max_fill(grid, 8))\n    print(max_fill(grid, 9))\n    print(max_fill(grid, 10)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_fill([[0, 0, 0], \n                    [0, 1, 0], \n                    [0, 0, 0]], \n                    3) == 1\nassert     max_fill([[0, 0, 0], \n                    [0, 1, 0], \n                    [0, 0, 0]], \n                    2) == 0\nassert     max_fill([[0, 0, 0, 0], \n                    [0, 1, 0, 0], \n                    [0, 0, 0, 0], \n                    [0, 0, 0, 0]], \n                    3) == 0\nassert     max_fill([[1, 1, 0], \n                    [1, 0, 1], \n                    [0, 0, 0]], \n                    2) == 1\nassert     max_fill([[1, 1, 0, 0, 1], \n                    [1, 0, 0, 0, 0], \n                    [0, 1, 0, 0, 0], \n                    [0, 0, 1, 0, 0], \n                    [0, 0, 0, 1, 0]], \n                    3) == 3\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_fill_sol(grid, capacity):\n    \"\"\"\n    Your code here\n    \"\"\"\n    # make a dictionary for the cells\n    d = {}\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            d[(i,j)] = 0\n\n    # for each cell\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                # examine each cell\n                for k in range(len(grid)):\n                    for l in range(len(grid[i])):\n                        if grid[k][l] == 1:\n                            # use d[(k,l)] to record the max value\n                            d[(k,l)] = max(d[(k,l)], d[(i,j)] + 1)\n    return d[(len(grid) - 1, len(grid[i]) - 1)]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_fill([[1,1,1,0,0,0], \n                [0,1,0,1,0,1], \n                [0,0,1,1,0,0], \n                [0,1,0,1,1,0], \n                [0,0,1,1,1,0], \n                [0,0,0,0,0,0]],\n                capacity = 5) == 4\n",
        "num_ids_2": 21,
        "num_ids_4": 21
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_fill([[1, 0, 0, 0],\n                    [1, 0, 0, 0],\n                    [1, 0, 0, 0],\n                    [1, 0, 0, 0]], capacity=1) == 0\nassert     max_fill([[1, 0, 0, 0],\n                    [1, 0, 0, 0],\n                    [1, 0, 0, 0],\n                    [1, 0, 0, 0]], capacity=2) == 0\nassert     max_fill([[1, 0, 0, 0],\n                    [1, 0, 0, 0],\n                    [1, 0, 0, 0],\n                    [1, 0, 0, 0]], capacity=3) == 2\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_fill([[0, 0, 0, 0, 0, 0],\n                    [0, 1, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0]], 0) == 0, \"Wrong answer, reason unknown\"\nassert     max_fill([[0, 0, 0, 0, 0, 0],\n                    [0, 1, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0]], 1) == 1, \"Wrong answer, reason unknown\"\nassert     max_fill([[0, 0, 0, 0, 0, 0],\n                    [0, 1, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0]], 5) == 2, \"Wrong answer, reason unknown\"\nassert     max_fill([[0, 0, 0, 0, 0, 0],\n                    [0, 1, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0]], 2) == 2, \"Wrong answer, reason unknown\"\nassert     max_fill([[0, 0, 0, 0, 0, 0],\n                    [0, 1, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0],\n                    [0, 0, 0, 0, 0, 0]], 0) == 3, \"Wrong answer, reason unknown\"\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\nassert     sort_array([1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 5]) == [4, 4, 4, 4, 4, 4, 4, 5, 5, 1, 2]\nassert     sort_array([4, 4, 4, 4, 5, 4, 5, 4, 4, 4, 4, 5]) == [4, 4, 4, 4, 4, 4, 5, 5, 4, 5, 5, 4]\nassert     sort_array([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]\n",
        "num_ids_2": 82,
        "num_ids_4": 172
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([6,2,2,8,3,5,4,6,1,8]) ==[1, 2, 2, 4, 3, 5, 6, 6, 8, 8]\nassert     sort_array([6,2,2,8,3,5,4,6,1,8,9]) ==[1, 2, 2, 4, 3, 5, 6, 6, 8, 8, 9]\nassert     sort_array([2,2,1]) ==[1, 2, 2]\nassert     sort_array([6,6,1,8]) ==[1, 1, 8, 6]\nassert     sort_array([4,4,4,4]) ==[4, 4, 4, 4]\n",
        "num_ids_2": 102,
        "num_ids_4": 148
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([1,0,0,1,1,1,1,0,1,1,0,1,1]) == \\\n            [1,1,1,1,1,1,1,0,0,0,0,1,1]\nassert     sort_array([1,0,0,1,1,1,1,0,1,1,0,1,1]) == \\\n            [1,0,0,1,1,1,1,1,1,1,1,1,1]\nassert     sort_array([1,1,1,0,1,1,0,1,1,1,1,1,1]) == \\\n            [1,1,1,1,1,1,1,1,1,1,1,1,1]\n",
        "num_ids_2": 70,
        "num_ids_4": 105
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsort_array([10, 9, 10, 9]) == [10, 9, 10, 9]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([1, 2, 0, 3, 0, 4, 0, 1, 0, 3]) == [0, 0, 0, 1, 1, 2, 3, 4, 3, 3]\nassert     sort_array([1, 1, 0, 0, 0, 0, 0, 0, 2]) == [0, 0, 0, 1, 1, 2, 0, 0, 0]",
        "num_ids_2": 94,
        "num_ids_4": 94
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([10, 100, 5, 1000, 2000, 5000]) == \\\n        [5, 10, 1000, 2000, 5000, 100]\nassert     sort_array([10, 100, 5, 1000, 2000, 5000, 1, 1000]) == \\\n        [1, 10, 5, 1000, 2000, 1000, 100, 5000]\nassert     sort_array([10, 100, 5, 1000, 2000, 5000, 1, 1000, 1, 1000]) == \\\n        [1, 1, 5, 10, 10, 1, 1000, 1000, 100, 2000]\nassert     sort_array([10, 100, 5, 1000, 2000, 5000, 1, 1000, 1, 1000, 1, 1000, 1]) == \\\n        [1, 1, 1, 5, 10, 10, 1000, 1000, 100, 2000, 5000, 1, 1000]\nassert     sort_array([10, 100, 5, 1000, 2000, 5000, 1, 1000, 1, 1000, 1, 1000, 1, 10, 100]) == \\\n        [1, 1, 1, 1, 1, 5, 10, 10, 1000, 1000, 100, 2000, 5000, 1000, 100]\n",
        "num_ids_2": 46,
        "num_ids_4": 110
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1,1,0,1,0,0,1,1,0,1])    ==    [0,0,1,1,1,1,1,1,1,1]\nassert     sort_array([0,1,1,1,1,1,1])    ==    [1,1,1,1,1,1,1]\nassert     sort_array([1,1,0,1,0,0,0])    ==    [0,0,1,1,1,1,1]\nassert     sort_array([1,1,0,1,0,0,1,1])    ==    [0,0,1,1,1,1,1,1]\nassert     sort_array([1,1,0,0,1,0,0])    ==    [0,0,1,1,1,1,1]\n",
        "num_ids_2": 90,
        "num_ids_4": 172
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([9, 8, 2, 1]) == [1, 2, 8, 9], '9 8 2 1'\nassert     sort_array([9, 0, 8, 2, 1]) == [1, 2, 8, 9, 0], '9 0 8 2 1'\nassert     sort_array([9, 8, 8, 2, 1]) == [1, 2, 8, 9, 0], '9 8 8 2 1'\nassert     sort_array([9, 8, 2, 1]) == [1, 2, 8, 9], '9 8 2 1'\nassert     sort_array([9, 8, 8, 2, 1]) == [1, 2, 8, 9], '9 8 8 2 1'\n",
        "num_ids_2": 67,
        "num_ids_4": 134
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     select_words(\"ab\", 0) == []\nassert     select_words(\"ab\", 1) == [\"a\"]\nassert     select_words(\"ab\", 2) == [\"a\", \"b\"]\nassert     select_words(\"ab\", 3) == [\"a\", \"b\"]\nassert     select_words(\"ab\", 4) == [\"a\", \"b\"]\n",
        "num_ids_2": 28,
        "num_ids_4": 64
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     select_words('Hello World', 1) == [\"Hello\",\"World\"]\nassert     select_words('Hello World', 2) == [\"Hello\",\"World\"]\nassert     select_words('Hello World', 3) == [\"Hello\",\"World\"]\nassert     select_words('Hello World', 4) == [\"Hello\",\"World\"]\nassert     select_words('Hello World', 5) == []\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     select_words('hello world', 0) == []\nassert     select_words('hello world', 3) == []\nassert     select_words('hello world', 1) == ['h']\nassert     select_words('hello world', 2) == ['o', 'l', 'w', 'r', 'd']\nassert     select_words('hello world', 4) == ['e', 'l', 'l', 'o', 'w', 'r']\n",
        "num_ids_2": 28,
        "num_ids_4": 72
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     select_words(\"pwwkew\", 3) == [\"pwke\"]\nassert     select_words(\"pwwkew\", 4) == [\"pwke\"]\nassert     select_words(\"\", 1) == []\nassert     select_words(\"a\", 0) == []\nassert     select_words(\"abc\", 0) == []\n",
        "num_ids_2": 40,
        "num_ids_4": 65
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a dictionary containing the number of times each word \n    from s appears in the string s.\n    If the string s is empty then the function should return an empty dictionary.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ns = \"the quick brown fox jumps over the lazy dog\"\nn = 4\nprint(select_words(s, n))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     select_words(\"a b b a c\", 1) == [\"a\", \"b\", \"c\"]\nassert     select_words(\"a b b a c\", 0) == []\nassert     select_words(\"a b b a c\", 2) == [\"a\", \"b\"]\n",
        "num_ids_2": 42,
        "num_ids_4": 64
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    assert select_words('b  a b', 2) == ['a', 'b']\n    assert select_words('b  a b', 1) == ['a']\n    assert select_words('b  a b', 0) == []\n    assert select_words('', 0) == []\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('well') == 'o'\nassert     get_closest_vowel('why') == 'a'\nassert     get_closest_vowel('whywhy') == 'a'\nassert     get_closest_vowel('whywhywhy') == ''\n",
        "num_ids_2": 38,
        "num_ids_4": 77
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_closest_vowel(\"python\") == \"p\"\nassert     get_closest_vowel(\"python\") == \"p\"\nassert     get_closest_vowel(\"python\") == \"p\"\nassert     get_closest_vowel(\"python\") == \"p\"\nassert     get_closest_vowel(\"python\") == \"\"\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    word = \"apple\"\n    print(get_closest_vowel(word))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_closest_vowel(\"\") == \"\"\nassert     get_closest_vowel(\"hi\") == \"\"\nassert     get_closest_vowel(\"very\") == \"\"\nassert     get_closest_vowel(\"I\") == \"I\"\nassert     get_closest_vowel(\"K\") == \"K\"\n",
        "num_ids_2": 33,
        "num_ids_4": 69
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_closest_vowel('apple') == ''\nassert     get_closest_vowel('a') == ''\nassert     get_closest_vowel('banana') == 'a'\nassert     get_closest_vowel('arola') == 'e'\nassert     get_closest_vowel('glendale') == 'e'\n",
        "num_ids_2": 34,
        "num_ids_4": 74
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \n\n",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_closest_vowel(\"methinks\") == \"me\", \"Expected:'me', actual:'me'\"\nassert     get_closest_vowel(\"cow\") == \"\", \"Expected: '', actual: 'cow'\"\nassert     get_closest_vowel(\"cow\") == \"o\", \"Expected: 'o', actual: 'cow'\"\nassert     get_closest_vowel(\"toes\") == \"e\", \"Expected: 'e', actual: 'toes'\"\n",
        "num_ids_2": 60,
        "num_ids_4": 124
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(match_parens('((())()()'))\nprint(match_parens('((()))'))\nprint(match_parens('((())()'))\nprint(match_parens('()(()()()'))\nprint(match_parens('()((()()))'))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     match_parens(['(())','()']) == 'Yes'\nassert     match_parens(['((((())))))','(())))))))))))))))']) == 'No'\nassert     match_parens(['((((())))))','(()))))))))))))))))))']) == 'No'\nassert     match_parens(['((((())))))','(((())))))']) == 'Yes'",
        "num_ids_2": 46,
        "num_ids_4": 100
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     match_parens(('(',)) == 'No'\nassert     match_parens(('()',)) == 'Yes'\nassert     match_parens(('(', '()')) == 'Yes'\nassert     match_parens(('(', '()()')) == 'Yes'\nassert     match_parens(('()()', '()')) == 'No'\n",
        "num_ids_2": 32,
        "num_ids_4": 71
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     match_parens(['(())', '()()']) == 'Yes'\nassert     match_parens(['((()', '()()']) == 'No'\nassert     match_parens([]) == 'No'\nassert     match_parens(['(']) == 'No'\nassert     match_parens(['()']) == 'No'\n",
        "num_ids_2": 42,
        "num_ids_4": 70
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmaximum([3, 2, 1, -9, 4, -7, 6, 8, -7], 1) == [-7, 6, 8, -7, 4, 3, 2, 1, -9]\nassert maximum([3, 2, 1, -9, 4, -7, 6, 8, -7], 3) == [-7, 8, -7, 6, 4, 3, 2, 1, -9]\nassert maximum([3, 2, 1, -9, 4, -7, 6, 8, -7], 4) == [-7, 6, 8, -7, 4, 3, 2, 1, -9]\nassert maximum([3, 2, 1, -9, 4, -7, 6, 8, -7], 5) == [-7, 8, -7, 6, 4, 3, 2, 1, -9]\nassert maximum([3, 2, 1, -9, 4, -7, 6, 8, -7], 6) == [-7, 8, -7, 6, 4, 3, 2, 1, -9]\n",
        "num_ids_2": 52,
        "num_ids_4": 150
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert maximum([-1, 2, 3, 4, 5], 1) == [5, 4, 3, 2, 1], \"Wrong\"\nassert maximum([-1, 2, 3, 4, 5], 2) == [3, 4, 5, 2, 1], \"Wrong\"\nassert maximum([-1, 2, 3, 4, 5], 3) == [2, 3, 4, 5, 1], \"Wrong\"\nassert maximum([-1, 2, 3, 4, 5], 4) == [3, 4, 5, 2, 1], \"Wrong\"\n",
        "num_ids_2": 36,
        "num_ids_4": 102
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum([], 0) == []\nassert     maximum([1], 1) == [1]\nassert     maximum([1, 2, 3, 4, 5], 2) == [1, 2]\nassert     maximum([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4]\nassert     maximum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 23,
        "num_ids_4": 73
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum([-9, -1, -1, -1, -1, -1, 0], 4) == [-9, -1, -1, -1]\nassert     maximum([-1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0], 2) == [-1, -1]\nassert     maximum([1, 2, 3], 3) == [3]\nassert     maximum([1, 2, 3, 3, 3, 3], 3) == [3]\nassert     maximum([3, 3, 3], 3) == [3]\n",
        "num_ids_2": 82,
        "num_ids_4": 122
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum([1, 2, 3, 4, 5, 5, 5], k=5) ==     [5, 5, 5, 5, 5]\nassert maximum([], k=10) ==     []\nassert maximum([0, 1, 2, 3, 4, 5, 6], k=7) ==     [6, 6, 6, 6, 6, 6, 6]\nassert maximum([-5, -1, -7, 0, 1, 5, -8, 8, 10], k=7) ==     [8, 8, 8, 8, 8, 8, 8]\nassert maximum([1, 2, 3, 4, 5, 5, 5], k=10) ==     [5, 5, 5, 5, 5]\n",
        "num_ids_2": 48,
        "num_ids_4": 134
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum([3,2,1,5], 2) ==    [3, 5]\nassert     maximum([1,2,3,4,5,6], 4) ==    [6, 5, 4, 3]\nassert     maximum([1,2,3,4,5,6], 5) ==    [6, 5, 4, 3, 2]\nassert     maximum([1,2,3,4,5,6], 6) ==    [6, 5, 4, 3, 2, 1]\nassert     maximum([1,2,3,4,5,6], 7) ==    [6, 5, 4, 3, 2, 1, 0]\n",
        "num_ids_2": 52,
        "num_ids_4": 118
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum([2, 3, 6, 0, 7, 4, 8], 2) == [-1000, -1000], \"Wrong answer\"\nassert     maximum([-4, 5, 6, 0, 7, -8, 9, -1, 8], 1) == [-4, -1, -8, -8], \"Wrong answer\"\nassert     maximum([0, 1, 2, 3, 4, 5], 2) == [-1000, -1000], \"Wrong answer\"\nassert     maximum([-2, -1, -3, -4, -5], 2) == [-1000, -1000], \"Wrong answer\"\nassert     maximum([-2, -1, -3, -4, -5], 4) == [-2, -1, -3, -4], \"Wrong answer\"\n",
        "num_ids_2": 79,
        "num_ids_4": 144
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solution([1,2,3]) == 1\nassert     solution([2,4,6,8]) == 1\nassert     solution([1,2,3]) == 0\nassert     solution([1,4,5,7]) == 0\nassert     solution([]) == 0\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solution([1,2,3,4,5]) == 0\nassert     solution([1,2,3,4,5,6]) == 0\nassert     solution([1,2,3,4,5,6,7]) == 4\nassert     solution([1,2,3,4,5,6,7,8]) == 4\nassert     solution([1,2,3,4,5,6,7,8,9]) == 0\n",
        "num_ids_2": 38,
        "num_ids_4": 84
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solution([1,2,3,4,5,6,7,8,9,10]) == sum([2,4,6,8,10])\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12]) == sum([2,4,6,8,10,11,12])\nassert     solution([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == sum([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,",
        "num_ids_2": 86,
        "num_ids_4": 1023
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 0\nassert     solution([1, 1, 3, 5, 7, 8, 4, 6, 5]) == 8\nassert     solution([1, 1, 3, 5, 7, 8, 4, 6, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 8\nassert     solution([1, 1, 3, 5, 7, 8, 4, 6, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16]) == 14\n",
        "num_ids_2": 66,
        "num_ids_4": 172
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert solution([1,2,3,4,5,6,7]) == 10\nassert solution([1,3,5]) == 6\nassert solution([1,2,3,4,6,7,8,9]) == 20\nassert solution([1,2,3,4]) == 7\n",
        "num_ids_2": 23,
        "num_ids_4": 57
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solution([5, 1, 4, 6, 7, 3]) == 0, 'Sum of the even elements should be zero.'\nassert     solution([9, 5, 2, 8, 4, 5]) == 14, 'Should be 14'\nassert     solution([3, 7]) == 4, 'Should be 4'\nprint('You passed all tests.')\n\n",
        "num_ids_2": 57,
        "num_ids_4": 75
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solution([1,2,3,4,5]) == sum(filter(lambda i: i%2==0, lst))\nassert     solution([1,2,3,4,5]) == sum(filter(lambda i: i%2!=0, lst))\nassert     solution([3,1,2,5,4]) == sum(filter(lambda i: i%2!=0, lst))\nassert     solution([3,1,2,5,4]) == sum(filter(lambda i: i%2!=0, lst))\nassert     solution([3,1,2,5,4]) == sum(filter(lambda i: i%2!=0, lst))\n",
        "num_ids_2": 67,
        "num_ids_4": 135
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nadd_elements([10, 12, 13, 14, 18, 45, 5, 4, 8, 19], 4) == 50\nadd_elements([0, 9, 10, 99, 99], 3) == 99\nadd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 3) == 21",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (add_elements([1, 1, 1, 1, 2, 3, 4, 5], 5) == 4)\nassert     (add_elements([0, 0, 0, 0, 0], 0) == 0)\nassert     (add_elements([3, 7, 2, 5, 8, 7, 5, 2], 3) == 5)\nassert     (add_elements([7, 4, 9, 1, 2, 5, 8, 9], 4) == 9)",
        "num_ids_2": 54,
        "num_ids_4": 114
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_elements([10,9,2,5], 2) == 14\nassert     add_elements([10,9,2,5], 1) == 19\nassert     add_elements([10,9,2,5], 0) == 10\nassert     add_elements([10,9,2,5], 3) == 17\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_elements([1, 2, 3, 4, 5], 2) == 7\nassert     add_elements([4, 6, 2, 5, 8, 2, 4, 6, 9, 0, 1, 3], 4) == 10\nassert     add_elements([3, 9, 8, 5, 7, 6, 7, 8, 9], 2) == 9\nassert     add_elements([3, 9, 8, 5, 7, 6, 7, 8, 9], 1) == 8\n\n",
        "num_ids_2": 58,
        "num_ids_4": 118
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_elements([10, 9, 2, 5], 2) == 12\nassert     add_elements([1, 2, 3], 2) == 5\nassert     add_elements([10, 9, 2, 5, 4], 2) == 17\nassert     add_elements([10, 9, 2, 5, 4], 3) == 12\nassert     add_elements([10, 9, 2, 5], 1) == 20\n",
        "num_ids_2": 38,
        "num_ids_4": 82
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    test = get_odd_collatz(1)\n    print(test)\n\nassert test == [1]\n",
        "num_ids_2": 10,
        "num_ids_4": 10
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_odd_collatz(1))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_odd_collatz(1) == [1]\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1]\nassert     get_odd_collatz(3) == [2,1]\nassert     get_odd_collatz(4) == [1,2,1]\nassert     get_odd_collatz(5) == [2,1,1,1]\n",
        "num_ids_2": 32,
        "num_ids_4": 70
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(12) ==     [1, 2, 3, 5, 8, 13, 21, 34, 55]\nassert     get_odd_collatz(18) ==     [1, 2, 3, 5, 8, 13, 21, 34, 55]\nassert     get_odd_collatz(16) ==     [1, 2, 3, 5, 8, 13, 21, 34, 55]\nassert     get_odd_collatz(14) ==     [1, 2, 3, 5, 8, 13, 21, 34, 55]\nassert     get_odd_collatz(2) ==     [1, 2]\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1,2]\nassert     get_odd_collatz(5) == [5,4,2,1]\nassert     get_odd_collatz(10) == [10,8,5,2,1]\n\ndef get_sum_of_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return the sum of the odd numbers in collatz sequence.\n",
        "num_ids_2": 34,
        "num_ids_4": 80
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    n = int(input('Enter a number to see its odd collatz sequence: '))\n    result = get_odd_collatz(n)\n    print('{} is odd collatz sequence: {}'.format(n, result)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [1, 3, 2]\nassert     get_odd_collatz(4) == [1, 3, 2, 4]\nassert     get_odd_collatz(5) == [1, 3, 2, 4, 5]\n",
        "num_ids_2": 34,
        "num_ids_4": 76
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(2) == [[2], 2]\nassert     get_odd_collatz(4) == [[4], 4]\nassert     get_odd_collatz(5) == [[5], 5, 5]\nassert     get_odd_collatz(6) == [[6], 6, 6, 2]\nassert     get_odd_collatz(7) == [[7], 7, 7, 3, 5]\n",
        "num_ids_2": 36,
        "num_ids_4": 78
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(10) == [10]\nassert     get_odd_collatz(12) == [12]\nassert     get_odd_collatz(21) == [21]\nassert     get_odd_collatz(34) == [34]\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     valid_date(\"12-12-2020\") == True\nassert     valid_date(\"12-12-20\") == False\nassert     valid_date(\"12-12-2020a\") == False\nassert     valid_date(\"\") == False\nassert     valid_date(\"\") == False\n",
        "num_ids_2": 30,
        "num_ids_4": 56
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     valid_date('') == False\nassert     valid_date('   ') == False\nassert     valid_date('123') == False\nassert     valid_date('-12') == False\nassert     valid_date('-12-31') == False\n",
        "num_ids_2": 22,
        "num_ids_4": 45
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     valid_date('') == False\nassert     valid_date('01-01-2000') == True\nassert     valid_date('01-01-2015') == True\nassert     valid_date('01-31-2000') == False\nassert     valid_date('01-31-2015') == False\n",
        "num_ids_2": 26,
        "num_ids_4": 56
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef valid_date_2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The date is valid.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     valid_date('') == False\nassert    valid_date(' ') == False\nassert    valid_date('a') == False\nassert    valid_date('1-2-2020') == False\nassert    valid_date('1/2/2020') == False\n",
        "num_ids_2": 22,
        "num_ids_4": 48
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     valid_date('') == False\nassert     valid_date('-') == False\nassert     valid_date('-') == False\nassert     valid_date('-12-34') == True\nassert     valid_date('-12-32') == True\n",
        "num_ids_2": 22,
        "num_ids_4": 47
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_words('a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z') ==\n        [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n        ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'",
        "num_ids_2": 60,
        "num_ids_4": 60
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_words('A,B,C')     == ['A', 'B', 'C']\nassert     split_words('A,B,C,D')     == ['A', 'B', 'C', 'D']\nassert     split_words('a,b,c')     == ['a', 'b', 'c']\nassert     split_words('a,b,c,d')     == ['a', 'b', 'c', 'd']\nassert     split_words('a')     == ['a']\n",
        "num_ids_2": 53,
        "num_ids_4": 106
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('a,b, c,d') == ['a','b','c','d']\nassert     split_words('a,b,c, d') == ['a','b','c','d']\nassert     split_words('a,b,c,d, e') == ['a','b','c','d','e']\n",
        "num_ids_2": 50,
        "num_ids_4": 79
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(split_words('hello, world'))\nprint(split_words('hello, world.'))\nprint(split_words('hello, world.')[0])\nprint(split_words('hello, world.')[1])\nprint(split_words('hello, world.')[2])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef make_words_list(txt):\n    '''\n    Given a string, return a list of words in the string, using split() method\n    '''\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_words(\"Hello World, how are you?\") == ['hello', 'world', 'how', 'are', 'you?']\nassert     split_words(\"Hello World, how are you?\") == ['hello', 'world', 'how', 'are', 'you?']\nassert     split_words(\"Hello World, how are you?\") == ['hello', 'world', 'how', 'are', 'you?']\nassert     split_words(\"Hello World, how are you?\") == ['hello', 'world', 'how', 'are', 'you?']\nassert     split_words(\"Hello World, how are you?\") == ['hello', 'world', 'how', 'are', 'you?']\n",
        "num_ids_2": 64,
        "num_ids_4": 128
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words('a,b,c,d,e,f') == ['a', 'b', 'c', 'd', 'e', 'f']\nassert     split_words('a,b,c,d,e') == ['a', 'b', 'c', 'd', 'e']\nassert     split_words('a,b,c,d,e,') == ['a', 'b', 'c', 'd', 'e', '']\nassert     split_words('a,b,c,d,e') == ['a', 'b', 'c', 'd', 'e']\nassert     split_words('a,b,c,d,e,') == ['a', 'b', 'c', 'd', 'e', '']\n",
        "num_ids_2": 71,
        "num_ids_4": 140
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsplit_words('Houdini is a good IDE') == ['Houdini', 'is', 'a', 'good', 'IDE']\nassert split_words('gpa') == ['gpa']\nassert split_words('a,b,c') == ['a', 'b', 'c']\nassert split_words('a') == ['a']\nassert split_words('a,b,c,') == ['a', 'b', 'c']\n",
        "num_ids_2": 17,
        "num_ids_4": 51
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True\nassert     is_sorted([5,1,2,3,4]) == False\nassert     is_sorted([1,1,1,1,1]) == False\nassert     is_sorted([1,1,1,1,1,1]) == True\nassert     is_sorted([1,1,1,1,1,2,2,2,2,2,2,2,2,2]) == True\n",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    is_sorted([1,2,3]) == True\n    is_sorted([3,2,1]) == True\n    is_sorted([1,1,1]) == False\n    is_sorted([1,2,1,3]) == False\n    is_sorted([1,2,3,4]) == True\n    is_sorted([1,2,3,4,3]) == True\n    is_sorted([1,2,3,4,3,3]) == False\n    is_sorted([1,2,3,4,3,4,3]) == False\n    is_sorted([1,2,3,4,3,4,5,5]) == True\n    is_sorted([1,2,3,4,5,5,3,4]) == False\n    is_sorted([1,2,3,4,5,5,3,4,5]) == True\n    is_sorted([]) == True\n    is_sorted([1,2,3,4,5,6]) == False\n    is_sorted([1,2,3,4,5,6,6]) == False\n    is_sorted([1,2,3,4,5,6,3,4,5]) == False\n    is_sorted([1,2,3,4,5,6,3,4,5,6]) == False\n    is_sorted([1,2,3,4,5,6,3,4,5,6,1]) == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([1, 3, 2]) == False\nassert     is_sorted([1, 1, 1]) == True\nassert     is_sorted([1, 2, 1]) == False\nassert     is_sorted([1, 2, 3, 3, 2]) == False\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    #check on small case\nassert is_sorted([1,2,3,4,5]) == False\nassert is_sorted([1,2,3,4,4]) == True\n",
        "num_ids_2": 22,
        "num_ids_4": 41
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert is_sorted([2,4,6,8,10,2,4,6,8])\nassert is_sorted([1,2,3,4,5,6,7,8])\nassert not is_sorted([1,1,2,2,3,3])\n",
        "num_ids_2": 28,
        "num_ids_4": 71
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_sorted([])\nassert is_sorted([1, 2, 3, 4, 5])\nassert is_sorted([10, 20, 30, 40, 50])\nassert is_sorted([10, 20, 30, 40, 50, 5]) == False\nassert is_sorted([10, 20, 30, 40, 50, 50]) == False\n",
        "num_ids_2": 20,
        "num_ids_4": 58
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_sorted([0, 1, 2, 3, 5]) == True\nassert is_sorted([1, 2, 3, 4, 5]) == True\nassert is_sorted([5, 4, 3, 2, 1]) == False\nassert is_sorted([1, 1, 1, 1, 1]) == False\n",
        "num_ids_2": 22,
        "num_ids_4": 60
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection((1, 4), (1, 4)) == \"YES\"\nassert     intersection((1, 4), (2, 4)) == \"NO\"\nassert     intersection((1, 4), (1, 3)) == \"NO\"\n\n",
        "num_ids_2": 38,
        "num_ids_4": 57
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(intersection((1, 4), (2, 4))) == \"NO\"\nprint(intersection((1, 4), (2, 3))) == \"NO\"\nprint(intersection((1, 2), (2, 3))) == \"NO\"\nprint(intersection((1, 2), (1, 3))) == \"YES\"\nprint(intersection((1, 3), (2, 3))) == \"YES\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    interval1 = (1, 3)\n    interval2 = (2, 4)\n    print(intersection(interval1, interval2)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection((1, 3), (2, 4)) == \"YES\", \"Expected: YES\"\nassert     intersection((1, 3), (3, 5)) == \"NO\", \"Expected: NO\"\nassert     intersection((1, 3), (1, 3)) == \"YES\", \"Expected: YES\"\n",
        "num_ids_2": 50,
        "num_ids_4": 75
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(intersection((1, 3), (2, 4)))\n    print(intersection((1, 3), (2, 3)))\n    print(intersection((1, 2), (2, 3)))\n    print(intersection((0, 0), (0, 0)))\n    print(intersection((0, 0), (0, 1)))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prod_signs([1, -1, 2]) == 1\nassert     prod_signs([1, -2, 1]) == -4\nassert     prod_signs([-2, -3, 4]) == -6\nassert     prod_signs([-2, -3, 4, 1, -6]) == 2\nassert     prod_signs([-1, -3, 4, 1, -6]) == -4\n",
        "num_ids_2": 37,
        "num_ids_4": 81
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     prod_signs([0]) == 0\nassert     prod_signs([-1, 0]) == -1\nassert     prod_signs([-1, -1]) == 0\nassert     prod_signs([1, -1, 1]) == 1\nassert     prod_signs([-1, 1, -1, -1]) == 1\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prod_signs([-2, -3, -10, -7, -4, -5]) == -120\nassert     prod_signs([-2, -3, -10, -7, -4, -5, -10]) == -600\nassert     prod_signs([-2, -3, -10, -7, -4, -5, -10, -10]) == -1080\nassert     prod_signs([-2, -3, -10, -7, -4, -5, -10, -10, -10]) == -1800\nassert     prod_signs([-2, -3, -10, -7, -4, -5, -10, -10, -10, -10]) == -18000\n",
        "num_ids_2": 63,
        "num_ids_4": 138
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(prod_signs([-5, 6, 1])) # returns -13\nassert \nprint(prod_signs([-5, 6])) # returns -21\nassert \nprint(prod_signs([-5, 0, -6, -2, -2])) # returns 1\nassert \nprint(prod_signs([1, -1])) # returns 0\nassert \nprint(prod_signs([-1, -1])) # returns 0\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prod_signs([-4,-1,0,1,4]) == -1, \"Should be -1\"\nassert     prod_signs([-5,2,2,2,-3]) == -1, \"Should be -1\"\nassert     prod_signs([-5,4,3,4,2,2,1]) == 0, \"Should be 0\"\nassert     prod_signs([-5,4,3,4,2,2,1,2]) == 1, \"Should be 1\"\nassert     prod_signs([-5,4,3,4,2,2,1,2,2]) == -1, \"Should be -1\"\n",
        "num_ids_2": 60,
        "num_ids_4": 126
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     [1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert      prod_signs(    [5, -9, 1, -3, 3, -6, 5]) == -18\nassert      prod_signs(    [5, -9, 1, -3, 3, -6, 5, 1, -5, 9]) == 2\nassert      prod_signs([-5, -9, 1, -3, 3, -6, 5]) == None\nassert      prod_signs([]) == None\n\n\ndef square(arr):\n    \"\"\"\n    You are given an array arr of integers, return the length of the\n    longest square sub-array of size k.\n    Note: return None for empty arr.\n    \"\"\"\n    pass\n",
        "num_ids_2": 68,
        "num_ids_4": 109
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minPath(\n    [\n        [1, 2, 5, 1],\n        [1, 1, 1, 1],\n        [1, 1, 2, 1],\n        [1, 1, 1, 1],\n    ], 3) == [1, 1, 1]\n\nassert     minPath(\n    [\n        [1, 2, 5, 1],\n        [1, 1, 1, 1],\n        [1, 1, 2, 1],\n        [1, 1, 1, 1],\n    ], 4) == []\n\nassert     minPath(\n    [\n        [1],\n        [1],\n        [1],\n    ], 3) == []\n",
        "num_ids_2": 12,
        "num_ids_4": 18
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef minPath_2(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_minPath():\n    assert minPath([[1,2,3],[4,5,6],[7,8,9]],3) == [1,2,4,7,8,9]\n    assert minPath([[1,2,3],[4,5,6]],3) == [1,2,4,7,8,9]\n    assert minPath([[1,2,3,4,5,6,7,8,9],[11,12,13,14,15,16,17,18,19],[20,21,22,23,24,25,26,27,28],[29,30,31,32,33,34,35,36,37],[38,39,40,41,42,43,44,45,46],[47,48,49,50,51,52,53,54,55],[56,57,58,59,60,61,62,63,64],[65,66,67,68,69,70,71,72,73],[74,75,76,77,78,79,80,81,82],[83,84,85,86,87,88,89,90,91],[92,93,94,95,96,97,98,99,100],[101,102,103,104,105,106,107,108,109],[110,111,112,113,114,115,116,117,118],[119,120,121,122,123,124,125,126,127],[128,129,130,131,132,133,134,135,136],[137,138,139,140,141,142,143,144,145],[146,147,148,149,150,151,152,153,154],[155,156,157,158,159,160,161,162,163],[164,165,166,167,168,169,170,171,172],[173,174,175,176,177,178,179,180,181],[182,183,184,185,186,187,188,189,190],[191,192,193,194,195,196,197,198,199],[200,201,202,203,204,205,206,207,208],[209,210,211,212,213,214,215,216,217],[218,219,220,221,222,223,224,225,226],[227,228,229,230,231,232,233,234,235],[236,237,238,239,240,241,242,243,244],[245,246,247,248,249,250,251,252,253],[254,255,256,257,258,259,260,261,262],[263,264,265,266,267,268,269,270,271],[272,273,274,275,276,277,278,279,280],[281,282,283,284,285,286,287,288,289],[290,291,292,293,294,295,296,297,298],[299,300,301,302,303,304,305,306,307],[308,309,310,311,312,313,314,315,316],[317,318,319,320,321,322,323,324,325],[326,327,328,329,330,331,332,333,334],[335,336,337,338,339,340,341,342,343],[344,345,346,347,348,349,350,351,352],[353,354,355,356,357,358,359,360,361],[362,363,364,365,366,367,368,369,370],[371,372,373,374,375,376,377,378,379],[380,381,382,383,384,385,386,387,388],[389,390,391,392,393,394,395,396,397],[398,399,400,401,402,403,404,405,406],[407,408,409,410,411,412,413,414,415],[416,417,418,419,420,421,422,423,424],[425,426,427,428,429,430,431,432,433],[434,435,436,437,438,439,440,441,442],[443,444,445,446,447,448,449,450,451],[452,453,454,455,456,457,458,459,460],[461,462,463,464,465,466,46",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minPath([[1,3,1], [1,5,1], [4,2,1]], 3) == [1,2,1]\nassert minPath([[1,3,1], [1,5,1], [4,2,1]], 4) == [1,2,3,1]\n\ndef minPathRecursive(grid, k, visited, i, j):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \"\"\"\n    pass\n",
        "num_ids_2": 77,
        "num_ids_4": 77
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nminPath([[1,3,1],[1,5,1],[4,2,1]], 1) == [1,2,1]\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nimport unittest\n\nclass Test(unittest.TestCase):\n    '''Test Cases'''\n    data = [\n        [\n            [1, 2, 1],\n            [1, 3, 2],\n            [1, 1, 3]\n        ],\n        [\n            [1, 4, 1],\n            [1, 3, 2],\n            [1, 1, 3]\n        ]\n    ]\n    \n    outputs = [\n        [1, 1, 3],\n        [1, 2, 1]\n    ]\n\n    def test_minPath(self):\n        for test_list, expected in zip(self.data, self.outputs):\n            result = minPath(test_list, 4)\n            self.assertEqual(result, expected)\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tri(2) == [3, 1]\nassert     tri(4) == [3, 1, 2, 4, 3, 1]\nassert     tri(3) == [3, 1, 2, 4, 3, 1]\n",
        "num_ids_2": 34,
        "num_ids_4": 55
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntri(0) == []\nassert \ntri(1) == [3]\nassert \ntri(2) == [3, 1]\nassert \ntri(3) == [3, 1, 3]\nassert \ntri(4) == [3, 1, 3, 3]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tri(2) == [1, 3]\nassert     tri(4) == [1, 3, 6]\nassert     tri(3) == [1, 3, 6]\nassert     tri(2) == [1, 3]\nassert     tri(1) == [3]\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tri(3) == [1, 1, 2, 4], \"For n = 3 expected = 1, 1, 2, 4, got %s\" % str(tri(3))\nassert     tri(2) == [3, 1], \"For n = 2 expected = 3, 1, got %s\" % str(tri(2))\nassert     tri(4) == [1, 1, 2, 4], \"For n = 4 expected = 1, 1, 2, 4, got %s\" % str(tri(4))\nassert     tri(1) == [1], \"For n = 1 expected = 1, got %s\" % str(tri(1))\nassert     tri(0) == [], \"For n = 0 expected = [], got %s\" % str(tri(0))\n",
        "num_ids_2": 78,
        "num_ids_4": 152
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = int(input(\"Input number: \"))\n    result = tri(n)\n    print(result",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tri(3) == [1, 3, 4], \"TODO\"\nassert     tri(2) == [1, 3], \"TODO\"\nassert     tri(1) == [3], \"TODO\"\nassert     tri(0) == [3], \"TODO\"\nassert     tri(4) == [1, 3, 4], \"TODO\"\n",
        "num_ids_2": 38,
        "num_ids_4": 70
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndigits(1) == 0\nassert digits(2) == 0\nassert digits(3) == 0\nassert digits(4) == 0\nassert digits(5) == 0\n",
        "num_ids_2": 11,
        "num_ids_4": 27
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digits(2) == 2, \"Digits\"\nassert     digits(12) == 12, \"Digits\"\nassert     digits(41) == 3, \"Digits\"\nassert     digits(111) == 5, \"Digits\"\nassert     digits(13) == 0, \"Digits\"\n",
        "num_ids_2": 30,
        "num_ids_4": 60
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # import doctest\n    # doctest.testmod()\n    assert digits(0) == 0\n    assert digits(1) == 1\n    assert digits(3) == 3\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndigits(0) == 0\ndigits(1) == 0\ndigits(2) == 0\ndigits(3) == 0\ndigits(4) == 0\ndigits(5) == 0\ndigits(6) == 0\ndigits(7) == 0\ndigits(8) == 0\ndigits(9) == 0\ndigits(10) == 0\ndigits(11) == 1\ndigits(12) == 0\ndigits(13) == 0\ndigits(14) == 0\ndigits(15) == 0\ndigits(16) == 0\ndigits(17) == 0\ndigits(18) == 0\ndigits(19) == 0\ndigits(20) == 0\ndigits(21) == 0\ndigits(22) == 0\ndigits(23) == 0\ndigits(24) == 0\ndigits(25) == 0\ndigits(26) == 0\ndigits(27) == 0\ndigits(28) == 0\ndigits(29) == 0\ndigits(30) == 0\ndigits(31) == 0\ndigits(32) == 0\ndigits(33) == 0\ndigits(34) == 0\ndigits(35) == 0\ndigits(36) == 0\ndigits(37) == 0\ndigits(38) == 0\ndigits(39) == 0\ndigits(40) == 0\ndigits(41) == 0\ndigits(42) == 0\ndigits(43) == 0\ndigits(44) == 0\ndigits(45) == 0\ndigits(46) == 0\ndigits(47) == 0\ndigits(48) == 0\ndigits(49) == 0\ndigits(50) == 0\ndigits(51) == 0\ndigits(52) == 0\ndigits(53) == 0\ndigits(54) == 0\ndigits(55) == 0\ndigits(56) == 0\ndigits(57) == 0\ndigits(58) == 0\ndigits(59) == 0\ndigits(60) == 0\ndigits(61) == 0\ndigits(62) == 0\ndigits(63) == 0\ndigits(64) == 0\ndigits(65) == 0\ndigits(66) == 0\ndigits(67) == 0\ndigits(68) == 0\ndigits(69) == 0\ndigits(70) == 0\ndigits(71) == 1\ndigits(72) == 0\ndigits(73) == 0\ndigits(74) == 0\ndigits(75) == 0\ndigits(76) == 0\ndigits(77) == 0\ndigits(78) == 0\ndigits(79) == 0\ndigits(80) == 0\ndigits(81) == 0\ndigits(82) == 0\ndigits(83) == 0\ndigits(84) == 0\ndigits(85) == 0\ndigits(86) == 0\ndigits(87) == 0\ndigits(88) == 0\ndigits(89) == 0\ndigits(90) == 0\ndigits(91) == 0\ndigits(92) == 0\ndigits(93) == 0\ndigits(94) == 0\ndigits(95) == 0\ndigits(96) == 0\ndigits(97) == 0\ndigits(98) == 0\ndigits(99) == 0\ndigits(100) == 0\ndigits(101) == 1\ndigits(102) == 0\ndigits(103) == 0\ndigits(104) == 0\ndigits(105) == 0\ndigits(106) == 0\ndigits(107) == 0\ndigits(108) == 0\ndigits(109) == 0\ndigits(110) == 0\ndigits(111) == 0\ndigits(112) == 0\ndigits(113) == 0\ndigits(114) == 0\ndigits(115) == 0\ndigits(116) == 0\ndigits(117) == 0\ndigits(118) == 0\ndigits(119) == 0\ndigits(120) == 0\ndigits(121) == 0\ndigits(122) == 0\ndigits(123) == 0\ndigits(124) == 0\ndigits(125) == 0\ndigits(126) == 0\ndigits(127) == ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(digits(1))\nprint(digits(5))\nprint(digits(8))\nprint(digits(11))\n\n\ndef digits_sum(n):\n    \"\"\"Given a positive integer n, return the sum of the even digits.\n    Return 0 if all digits are odd.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digits(1)     == 0\nassert     digits(2)     == 0\nassert     digits(3)     == 0\nassert     digits(4)     == 0\nassert     digits(5)     == 0\n",
        "num_ids_2": 22,
        "num_ids_4": 44
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(is_nested(\"[({})]\")) # True\nprint(is_nested(\"[][]{\")) # True\nprint(is_nested(\"[[]]\")) # True\nprint(is_nested(\"[(([])]))\")) # True\nprint(is_nested(\"[([[]]]))\")) # False\nprint(is_nested(\"[({()}]\")) # False\nprint(is_nested(\"{{{(())}}}\")) # False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (is_nested('()') == True)\nassert     (is_nested('((()()' ) == False)\nassert     (is_nested('[()]') == True)\nassert     (is_nested('[[()]]') == True)\nassert     (is_nested('[()()()]') == True)\n",
        "num_ids_2": 31,
        "num_ids_4": 63
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (is_nested('[[]]') == True), \"should return True\"\nassert     (is_nested('[[]]') == False), \"should return False\"\nassert     (is_nested('[[[]]]') == True), \"should return True\"\nassert     (is_nested('[[[]]]') == False), \"should return False\"\nassert     (is_nested('[[[[]]]]') == True), \"should return True\"\n",
        "num_ids_2": 40,
        "num_ids_4": 84
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nested(\"(((((())()))))\") == True, \nassert     is_nested(\"(((((())())))))\") == False, \nassert     is_nested(\"(((((())())))))\") == False, \nassert     is_nested(\"(((((())()))))\") == True, \nassert     is_nested(\"(((((((())()))))))\") == True, \n",
        "num_ids_2": 39,
        "num_ids_4": 78
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_nested('([])') == True, 'is_nested([])'\nassert     is_nested('([)]') == False, 'is_nested([])'\nassert     is_nested('([[])') == False, 'is_nested([])'\nassert     is_nested('[[(])') == False, 'is_nested([])'\nassert     is_nested('(([))') == False, 'is_nested([])'\n",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_nested('[()]'), 'The brackets are not nested'\nassert is_nested('[[()]]'), 'The brackets are nested'\nassert not is_nested('[(])'), 'The brackets are not nested'\nassert not is_nested('(((())')\n",
        "num_ids_2": 22,
        "num_ids_4": 58
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_nested(\"()\") == True, \"Square bracket test\"\nassert     is_nested(\"(())\") == True, \"Square bracket test\"\nassert     is_nested(\"((()()))\") == True, \"Square bracket test\"\nassert     is_nested(\"((((()()))))\") == True, \"Square bracket test\"\nassert     is_nested(\"\") == False, \"Empty string test\"\n",
        "num_ids_2": 37,
        "num_ids_4": 80
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_nested('[]'), True\n    is_nested('(]'), True\n    is_nested('()') == False\n    is_nested('[)(]') == False\n    is_nested('(()(()') == False\n    is_nested(']') == False\n    is_nested('[') == False\n    is_nested('((') == False\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([1,2,3,4,5]) == 29\nassert     sum_squares([3,9,5,1]) == 29\nassert     sum_squares([1,7,8,9]) == 36\nassert     sum_squares([]) == 0\nassert     sum_squares([-1]) == 1\n",
        "num_ids_2": 38,
        "num_ids_4": 67
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_squares([-5, -2, 0, 1, 3]) == [2, 4, 0, 4, 9], \"FAILED\"\nprint(\"SUCCESS\"",
        "num_ids_2": 37,
        "num_ids_4": 37
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_squares(range(10)) == 285, \"First Test\"\nassert     sum_squares(range(50, 51)) == 63, \"Second Test\"\nassert     sum_squares(range(60, 61)) == 68, \"Third Test\"\nassert     sum_squares(range(90, 91)) == 105, \"Fourth Test\"\nassert     sum_squares(range(100, 101)) == 161, \"Fifth Test\"\nprint(\"\\033[32mAll test cases passed.\\033[0m\")",
        "num_ids_2": 40,
        "num_ids_4": 82
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 14, 'Question 1.1.a.1'\nassert     sum_squares([1, 2, 3, 4.5]) == 14, 'Question 1.1.a.2'\nassert     sum_squares([-1, -2, -3, -4]) == -45, 'Question 1.1.a.3'\nassert     sum_squares([2, 2, 2, 2]) == 16, 'Question 1.1.a.4'\nassert     sum_squares([-2, -2, -2, -2]) == -16, 'Question 1.1.a.5'\n",
        "num_ids_2": 60,
        "num_ids_4": 123
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_sums(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of numbers in the list,\n    then subtract the result of sum_squares from the result of the original list.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_squares([]) == 0, \"error: Empty list\"\nassert     sum_squares([2, 2, 2]) == 8, \"error: Single element list\"\nassert     sum_squares([2, 4, 6]) == 37, \"error: Multiple element list\"\n",
        "num_ids_2": 42,
        "num_ids_4": 66
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_squares([-3, 4, 5, -2, -4]) == 27\nassert     sum_squares([1, 2, 3, 4, 5]) == 29\nassert     sum_squares([1, 2, 3, 4, 5, 6]) == 33\nassert     sum_squares([-2, -1]) == 1\nassert     sum_squares([1, 2, 3, 4, 5]) == 55",
        "num_ids_2": 43,
        "num_ids_4": 81
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_squares([1, 2, 3]) == 14\nassert sum_squares([2, 3, 4]) == 30\nassert sum_squares([]) == 0\n",
        "num_ids_2": 31,
        "num_ids_4": 41
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_squares([1, 3, -1, -4]) == 16\nassert     sum_squares([-3, -1, 4, 8]) == 25\nassert     sum_squares([1]) == 1\nassert     sum_squares([1, 2, 3, 4, 5]) == 30\nassert     sum_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 385\n",
        "num_ids_2": 40,
        "num_ids_4": 72
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert check_if_last_char_is_a_letter(\"add\") == True\nassert check_if_last_char_is_a_letter(\"ad\") == True\nassert check_if_last_char_is_a_letter(\"addf\") == False\nassert check_if_last_char_is_a_letter(\"ab\") == False\n",
        "num_ids_2": 23,
        "num_ids_4": 64
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter('letter') == True\nassert     check_if_last_char_is_a_letter('Hey man') == False\nassert     check_if_last_char_is_a_letter('1234') == False\n",
        "num_ids_2": 43,
        "num_ids_4": 65
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_if_last_char_is_a_letter('some string') == True\nassert     check_if_last_char_is_a_letter('some_string') == False\nassert     check_if_last_char_is_a_letter('some_string abc') == False\nassert     check_if_last_char_is_a_letter('some_string -1') == False\nassert     check_if_last_char_is_a_letter('some_string') == False\n",
        "num_ids_2": 45,
        "num_ids_4": 95
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('hello world') == True, \\\n        \"check_if_last_char_is_a_letter failed\"\nassert     check_if_last_char_is_a_letter('hello world!') == False, \\\n        \"check_if_last_char_is_a_letter failed\"\nassert     check_if_last_char_is_a_letter('1hello world!') == False, \\\n        \"check_if_last_char_is_a_letter failed\"\nassert     check_if_last_char_is_a_letter('hello world! a') == False, \\\n        \"check_if_last_char_is_a_letter failed\"\nassert     check_if_last_char_is_a_letter('hello world! a') == True, \\\n        \"check_if_last_char_is_a_letter failed\"\n",
        "num_ids_2": 49,
        "num_ids_4": 101
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_if_last_char_is_a_letter(\"giraffe\") == True, \"giraffe\"\nassert     check_if_last_char_is_a_letter(\"b\") == False, \"b\"\nassert     check_if_last_char_is_a_letter(\"t\") == True, \"t\"\nassert     check_if_last_char_is_a_letter(\"c\") == False, \"c\"\nassert     check_if_last_char_is_a_letter(\"pig\") == True, \"pig\"\n",
        "num_ids_2": 54,
        "num_ids_4": 104
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncheck_if_last_char_is_a_letter('')\nassert not check_if_last_char_is_a_letter('[')\nassert not check_if_last_char_is_a_letter(']')\nassert check_if_last_char_is_a_letter('a')\nassert not check_if_last_char_is_a_letter('2')\n",
        "num_ids_2": 22,
        "num_ids_4": 59
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('apple') == True\nassert     check_if_last_char_is_a_letter('apple apple') == False\nassert     check_if_last_char_is_a_letter('asdfasdfasd') == True\nassert     check_if_last_char_is_a_letter('asdfasdfasd.asdf') == False\nassert     check_if_last_char_is_a_letter('a.a.a.a') == False\n",
        "num_ids_2": 43,
        "num_ids_4": 98
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     can_arrange([1, 2, 3, 4, 1]) == 2\nassert     can_arrange([1, 2, 3, 4, 1, 5]) == -1\nassert     can_arrange([1, 2, 1, 3, 5, 4, 7, 2]) == 2\nassert     can_arrange([1, 2, 1, 3, 5, 4, 7, 2, 1]) == 2\nassert     can_arrange([1, 2, 1, 3, 5, 4, 7, 2, 1, 1]) == -1\n",
        "num_ids_2": 43,
        "num_ids_4": 97
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    can_arrange([1, 3, 7, 8, 5, 9]) == 1\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5]) == 4\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5, 9, 1]) == 5\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5, 9, 1, 3, 7]) == -1\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5, 9, 1, 3, 7, 1]) == 6\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5, 9, 1, 3, 7, 5]) == 5\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5, 9, 1, 3, 7, 5, 9]) == -1\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5, 9, 1, 3, 7, 5, 9, 1]) == 6\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5, 9, 1, 3, 7, 5, 9, 1, 3, 7, 5]) == -1\n    can_arrange([1, 3, 7, 8, 5, 9, 8, 5, 9, 1, 3, 7, 5, 9, 1, 3, 7, 5, 9]) == -1\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     can_arrange([1, 2, 3, 3, 1, 1, 2]) == 1\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == -",
        "num_ids_2": 84,
        "num_ids_4": 84
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     can_arrange([1, 2, 3]) == 2\nassert     can_arrange([1, 2, 2]) == -1\nassert     can_arrange([1, 2, 3, 4, 5]) == 2\nassert     can_arrange([5, 4, 3, 2, 1]) == -1\nassert     can_arrange([1, 2, 3, 4, 5, 2]) == -1\n",
        "num_ids_2": 33,
        "num_ids_4": 74
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     can_arrange([1, 1, 2, 1]) == -1\nassert     can_arrange([1, 2, 1]) == 2\nassert     can_arrange([1, 1, 1, 1]) == 0\nassert     can_arrange([1, 2, 1, 2, 3, 4]) == 3\n",
        "num_ids_2": 35,
        "num_ids_4": 75
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert can_arrange([1, 2, 3, 4, 5, 6, 7]) == 3\nassert can_arrange([1, 2, 3, 4, 5, 6, 7, 7]) == -1\nassert can_arrange([1, 2, 3, 4, 5, 6, 7, 8]) == -1\nassert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\n",
        "num_ids_2": 26,
        "num_ids_4": 78
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    # run test cases\n    assert largest_smallest_integers([]) == (None, None)\n    assert largest_smallest_integers([-4, -2, -1, 0]) == (-1, 0)\n    assert largest_smallest_integers([-1, 0]) == (-1, 0)\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([5, 5, 5, 5, 5]) == (5,5), 'wrong output for 5'\nassert     largest_smallest_integers([-1, 5, -1, 3, 8]) == (3, -1), 'wrong output for -1'\nassert     largest_smallest_integers([-1, -1, -1, -1, -1]) == (None, None), 'wrong output for -1'\nassert     largest_smallest_integers([5, 5, 5, -1, 3]) == (5, 3), 'wrong output for 5'\nassert     largest_smallest_integers([1, -2, 3, -4, 5]) == (5, -4), 'wrong output for -1'\n",
        "num_ids_2": 70,
        "num_ids_4": 143
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(largest_smallest_integers([5, -3, 3, -1])) ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_smallest_integers([1, -2, 3, 4, 5]) == (-1, 5)\nassert     largest_smallest_integers([1, 1, -2, 2, 3]) == (-2, 1)\nassert     largest_smallest_integers([1, -2, -3, -4, -5]) == (1, -5)\nassert     largest_smallest_integers([1, -1, 1, 1, -1, -1, -1, 1, 1]) == (-1, 1)\nassert     largest_smallest_integers([0, 1, 2, 3, 4]) == (4, 0)\n",
        "num_ids_2": 56,
        "num_ids_4": 127
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([0, -4, -1, 4, 5, 6])    == (5, 4)\nassert     largest_smallest_integers([5, 6, 2, 1, 2, 3])    == (2, 3)\nassert     largest_smallest_integers([1])    == (1, 1)\nassert     largest_smallest_integers([5, 6, 7, 8, 1, 2])    == (1, 2)\nassert     largest_smallest_integers([-5, -2, -2, 0, 2, 1, 1])    == (1, 2)\n",
        "num_ids_2": 62,
        "num_ids_4": 112
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_smallest_integers([-1, -3, -5, -7]) == (-1, -7)\nassert     largest_smallest_integers([1, 3, 5, 7]) == (5, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (9, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (10, 1)\nassert     largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (11, 1)\n",
        "num_ids_2": 55,
        "num_ids_4": 127
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_smallest_integers([-1, -2, 3, 4, 5]) == (5, 1)\nassert     largest_smallest_integers([-1, -2, 3, 4]) == (5, 4)\nassert     largest_smallest_integers([-1, -2]) == (None, None)\nassert     largest_smallest_integers([-1, 2]) == (None, None)\nassert     largest_smallest_integers([-2, 3]) == (None, None)\n",
        "num_ids_2": 56,
        "num_ids_4": 101
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare_one(1, 1) == None\nassert compare_one(1.1, 1) == None\nassert     compare_one(\"a\", \"b\") == None\nassert     compare_one(1, \"a\") == \"a\"\nassert     compare_one(\"a\", 1) == 1\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     compare_one(1,2) == 1\nassert     compare_one(1,1.0) == 2\nassert     compare_one('1', '2') == None\nassert     compare_one('1', '1.0') == 2\nassert     compare_one(1.0, '2') == 2\n",
        "num_ids_2": 30,
        "num_ids_4": 62
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare_one(1, 2) == 2\nassert     compare_one(3, 3) == None\nassert     compare_one(1, 1.0) == 1.0\nassert     compare_one('2', 2) == None\nassert     compare_one('2', '2') == None\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare_one(2, 3) == 3\nassert     compare_one(2.0, 3) == 3\nassert     compare_one(2.0, 3.0) == 3.0\nassert     compare_one('4', '4') == None\nassert     compare_one('4', '5') == 5\n",
        "num_ids_2": 30,
        "num_ids_4": 65
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncompare_one(None, None) == None\nassert compare_one(None, 1) == None\nassert compare_one(1, None) == None\nassert compare_one(1, 1) == 1\nassert compare_one(1.1, 1) == 1.1\n",
        "num_ids_2": 15,
        "num_ids_4": 39
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     compare_one(2, 2) == None\nassert     compare_one(-3.5, -3.5) == None\nassert     compare_one('1', '2') == None\n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    \"\"\"\n    pass\n",
        "num_ids_2": 33,
        "num_ids_4": 48
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert compare_one(1, 1) == None\nassert compare_one(-1, -1) == None\nassert compare_one(1, -1) == None\nassert compare_one(1.1, 1.1) == None\n",
        "num_ids_2": 15,
        "num_ids_4": 41
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_equal_to_sum_even(10) == False, \"Should return False\"\nassert     is_equal_to_sum_even(9) == False, \"Should return False\"\nassert     is_equal_to_sum_even(10) == True, \"Should return True\"\nassert     is_equal_to_sum_even(11) == True, \"Should return True\"\nassert     is_equal_to_sum_even(12) == False, \"Should return False\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_equal_to_sum_even(12) == True\nassert is_equal_to_sum_even(1) == False\nassert is_equal_to_sum_even(9) == False\n\n\ndef is_even_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n    \"\"\"\n    pass\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_equal_to_sum_even(2)\nassert is_equal_to_sum_even(3)\nassert not is_equal_to_sum_even(4)\nassert is_equal_to_sum_even(8)\n",
        "num_ids_2": 18,
        "num_ids_4": 47
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(24) == False\nassert     is_equal_to_sum_even(26) == True\nassert     is_equal_to_sum_even(32) == True\nassert     is_equal_to_sum_even(38) == False\nassert     is_equal_to_sum_even(44) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_equal_to_sum_even(6) == False     # 6 is not an even number\nassert is_equal_to_sum_even(7) == True         # 7 can be written as the sum of exactly 4 even numbers\nassert is_equal_to_sum_even(18) == True         # 18 can be written as the sum of exactly 4 even numbers\nassert is_equal_to_sum_even(28) == False     # 28 can't be written as the sum of exactly 4 even numbers\nassert is_equal_to_sum_even(100) == False     # 100 can't be written as the sum of exactly 4 even numbers\n",
        "num_ids_2": 55,
        "num_ids_4": 116
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    is_equal_to_sum_even(4)\n    is_equal_to_sum_even(7)\n    is_equal_to_sum_even(9)\n    is_equal_to_sum_even(25)\n    is_equal_to_sum_even(17)\n\ndef is_even_number(n):\n    \"\"\"Evaluate whether the given number n is even\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_equal_to_sum_even(17) == False\nassert is_equal_to_sum_even(10) == True\n",
        "num_ids_2": 19,
        "num_ids_4": 35
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_equal_to_sum_even(11) == True\nassert is_equal_to_sum_even(17) == False\nassert is_equal_to_sum_even(16) == True\nassert is_equal_to_sum_even(14) == False\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(13) == False\nassert     is_equal_to_sum_even(16) == True\nassert     is_equal_to_sum_even(28) == True\nassert     is_equal_to_sum_even(29) == False\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert         special_factorial(1) == 1\nassert         special_factorial(2) == 2\nassert         special_factorial(3) == 6\nassert         special_factorial(4) == 24\nassert         special_factorial(5) == 120\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n",
        "num_ids_2": 24,
        "num_ids_4": 48
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(special_factorial(2))\nprint(special_factorial(5))\nprint(special_factorial(10))\nprint(special_factorial(25))\n\n\ndef sum_of_squares(n):\n    \"\"\"The sum_of_squares function will receive an integer as input and should\n    return the sum of its squares.\n\n    The sum_of_squares function will receive an integer as input and should return the sum of its squares.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert special_factorial(0) == 1\nassert special_factorial(1) == 1\nassert special_factorial(2) == 2\nassert special_factorial(3) == 6\n",
        "num_ids_2": 14,
        "num_ids_4": 36
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(6) == 720\nassert     special_factorial(11) == 5040\nassert     special_factorial(10) == 362880\nassert     special_factorial(0) == 1\n",
        "num_ids_2": 24,
        "num_ids_4": 51
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     special_factorial(3) == 6\nassert     special_factorial(7) == 5040\nassert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\n",
        "num_ids_2": 25,
        "num_ids_4": 49
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef get_index(text, word):\n    \"\"\"\n    Given a string text and a word word, \n    return the index of the first occurrence of word in text, \n    or -1 if word does not occur in text.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fix_spaces('words  and   spaces') == 'words_and_spaces'\nassert     fix_spaces('words with spaces') == 'words_with_spaces'\nassert     fix_spaces(' words and   spaces') == 'words_and_spaces'\nassert     fix_spaces('hello world') == 'hello_world'\nassert     fix_spaces('   hello world') == 'hello_world'\n",
        "num_ids_2": 45,
        "num_ids_4": 85
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fix_spaces('Hello     World  ') == 'hello_world'\nassert     fix_spaces('Hello     World') == 'hello_world'\nassert     fix_spaces('Hello     World   ') == 'hello_world'\nassert     fix_spaces('Hello     World  ') == 'hello_world'\nassert     fix_spaces('Hello  World  ') == 'hello_world'\n",
        "num_ids_2": 37,
        "num_ids_4": 75
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     file_name_check('xxd.txt') == 'No'\nassert     file_name_check('xxd.exe') == 'No'\nassert     file_name_check('xxd.dll') == 'No'\nassert     file_name_check('xxd.com') == 'No'\nassert     file_name_check('xxd.exe') == 'No'\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     file_name_check('string.txt') == 'No', 'The function does not return \"No\" for invalid file_name'\nassert     file_name_check('file.txt') == 'No', 'The function does not return \"No\" for valid file_name'\nassert     file_name_check('string') == 'No', 'The function does not return \"No\" for invalid file_name'\nassert     file_name_check('file') == 'No', 'The function does not return \"No\" for valid file_name'\nassert     file_name_check('string.') == 'No', 'The function does not return \"No\" for invalid file_name'\n",
        "num_ids_2": 64,
        "num_ids_4": 124
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     file_name_check('1233') == 'No'\nassert     file_name_check('1234.txt') == 'No'\nassert     file_name_check('0991.txt') == 'Yes'\nassert     file_name_check('999.txt') == 'Yes'\nassert     file_name_check('a2.txt') == 'No'\n",
        "num_ids_2": 34,
        "num_ids_4": 70
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef file_extension_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's extension is valid, and returns 'No' otherwise.\n    An extension is considered to be valid if and only if it is an\n    string which consists of exactly two letters from the latin alphapet \n    ('a'-'z' and 'A'-'Z') and one of the following: '.txt', '.exe', '.dll'.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \n\n",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     file_name_check('abc.txt') == 'Yes'\nassert     file_name_check('xyz.txt') == 'No'\nassert     file_name_check('abc.exe') == 'No'\nassert     file_name_check('1.txt') == 'No'\nassert     file_name_check('abc_123.txt') == 'No'\n",
        "num_ids_2": 35,
        "num_ids_4": 69
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('\\n\\nAll assertions passed!')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([1,2,3]) == 9, \"Wrong answer\"\nassert sum_squares([4,9,16]) == 65, \"Wrong answer\"\nassert sum_squares([-2,9,16,1]) == 81, \"Wrong answer\"\nassert sum_squares([-2,-9,16,1]) == 81, \"Wrong answer\"\n\n",
        "num_ids_2": 43,
        "num_ids_4": 91
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"This is sum_squares\")\nprint(sum_squares([-1,0,1,2,3,4,5,6,7,8,9,10,11]))\nprint(sum_squares([-1,0,1,2,3,4,5,6,7,8,9,10,11,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(\"This is end\")",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_squares([5, 3, 2, 8]) == 14, \"The result is wrong.\"\nassert     sum_squares([3, 2, 4, 7]) == 29, \"The result is wrong.\"\nassert     sum_squares([2, 5, 2]) == 7, \"The result is wrong.\"\n",
        "num_ids_2": 50,
        "num_ids_4": 73
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_squares([1, 2, 3]) == 6\nassert sum_squares([3, 5, 1]) == 16\nassert sum_squares([4, 3, 8]) == 24\nassert sum_squares([0, 9, -1]) == 54\n",
        "num_ids_2": 18,
        "num_ids_4": 48
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nsum_squares([9, 4, 5, 6, 3]) == 25\nsum_squares([9, 4, 5, 6, 3, 1]) == 29\nsum_squares([9, 4, 5, 6, 3, 1, 2]) == 43\nsum_squares([5, 4, 5, 6, 3, 1, 2, 8, 4, 3]) == 83\n\nprint(\"Test passed\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     words_in_sentence('The quick brown fox jumps over the lazy dog') == 'thequickbrownfoxjumpsoverthelazydog'\nassert     words_in_sentence('I love Python') == 'ilovepython'\nassert     words_in_sentence('A man, a plan, a canal, Panama') == 'amannplanacanalpanama'\nassert     words_in_sentence('abc def ghi jkl mno pqr stu vwx') == 'abcdefghijklmno'\nassert     words_in_sentence('    Hello world!') == 'helloworld'\n",
        "num_ids_2": 54,
        "num_ids_4": 121
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef index_of_first_letter_after_preceding_non_letter_at_index_i(sentence, i):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return the index of the first letter after the word at index i.\n    If the word at index i doesn't contain any letter,\n    return the index of the first letter after the word at index i+1.\n    If the word at index i+1 doesn't contain any letter,\n    return the index of the first letter after the word at index i+2.\n    If the word at index i+2 doesn't contain any letter,\n    return the index of the first letter after the word at index i+3.\n    If the word at index i+3 doesn't contain any letter,\n    return the index of the first letter after the word at index i+4.\n    In all other cases, return the index of the first letter after the word at index i.\n    Constraints:\n        * 0 <= i <= len(sentence) - 4\n    \"\"\"\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_in_sentence('Hello World') == 'Hello World'\nassert     words_in_sentence('Greetings, friends') == 'Greetings, friends'\nassert     words_in_sentence('Greetings, friends')!= 'Greetings, friends'\nassert     words_in_sentence('Greetings, friends')!= 'Greet, friends'\nassert     words_in_sentence('Hello World')!= 'Hello, World'\n",
        "num_ids_2": 40,
        "num_ids_4": 86
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"I am a programmer\") == \"a a a\"\nassert words_in_sentence(\"programmer\") == \"p p r p g r r a m a d\"\nassert words_in_sentence(\"\") == \"\"\nassert words_in_sentence(\"hello\") == \"h h\"\nassert words_in_sentence(\"hello world\") == \"h h w w l l l\"\n",
        "num_ids_2": 47,
        "num_ids_4": 75
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nwords_in_sentence(\"Hello world\") == \"Hello\"\nwords_in_sentence(\"Hello world!\") == \"Hello\"\nwords_in_sentence(\"Hello world! \") == \"Hello\"\nwords_in_sentence(\"Hello World! \") == \"Hello\"\nwords_in_sentence(\"Hello world! Hello\") == \"Hello\"\nwords_in_sentence(\"Hello world! Hello World!\") == \"Hello\"\nwords_in_sentence(\"Hello World! Hello World! \") == \"Hello\"\nwords_in_sentence(\"Hello world! Hello world! Hello\") == \"Hello\"\nwords_in_sentence(\"Hello World! Hello world! Hello World!\") == \"Hello\"\nwords_in_sentence(\"Hello World! Hello world! Hello World! \") == \"Hello\"\n\nprint(\"You passed all the tests!\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_in_sentence(\"Hi how are you\") == \"Hi how are you\", \"Should be Hi how are you\"\nassert     words_in_sentence(\"Hi how are you?\") == \"Hi how are you\", \"Should be Hi how are you?\"\nassert     words_in_sentence(\"Hi how are you! Hi how are you\") == \"Hi how are you\", \"Should be Hi how are you\"\nassert     words_in_sentence(\"Hi how are you! Hi how are you! Hi how are you! Hi how are you\") == \"Hi how are you\", \"Should be Hi how are you\"\nassert words_in_sentence(\"Hi how are you? Hi how are you! Hi how are you? Hi how are you\") == \"Hi how are you\", \"Should be Hi how are you\"\n",
        "num_ids_2": 61,
        "num_ids_4": 141
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     simplify(\"2/4\", \"2/4\") == True\nassert     simplify(\"2/4\", \"4/2\") == False\nassert     simplify(\"10/6\", \"10/6\") == True\nassert     simplify(\"10/6\", \"4/2\") == False",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     simplify(\"2\", \"2\") == True\nassert     simplify(\"1\", \"2\") == False\nassert     simplify(\"2\", \"1\") == False\nassert     simplify(\"2.1\", \"2.2\") == False\nassert     simplify(\"2.2\", \"2.3\") == True\n",
        "num_ids_2": 28,
        "num_ids_4": 60
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(simplify(\"1/2\", \"2/3\"), True)\nprint(simplify(\"5/3\", \"4/6\"), True)\nprint(simplify(\"1/2\", \"2/4\"), True)\nprint(simplify(\"1/5\", \"2/3\"), False)\nprint(simplify(\"1/2\", \"2/4\"), False)",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef convert_to_float(x):\n    \"\"\"Your task is to convert the string x, representing a fraction to float.\n    The function returns the float x, whose numerator and denominator are given by the input value.\n\n    The string x has the following format, <numerator>/<denominator> where both\n    numerator and denominator are positive whole numbers.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     simplify('1/3', '1/3') == True,'simplify(\"1/3\", \"1/3\")'\nassert     simplify('1/2', '2/3') == True,'simplify(\"1/2\", \"2/3\")'\nassert     simplify('1/2', '1/4') == False,'simplify(\"1/2\", \"1/4\")'\nassert     simplify('1/2', '3/4') == False,'simplify(\"1/2\", \"3/4\")'\nassert     simplify('1/4', '3/4') == False,'simplify(\"1/4\", \"3/4\")'\n",
        "num_ids_2": 66,
        "num_ids_4": 132
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     simplify(\"0.5\", \"4\") == False\nassert simplify(\"0.5\", \"3\") == True\nassert simplify(\"1.5\", \"2\") == True\nassert simplify(\"1.5\", \"3\") == False\nassert simplify(\"0.5\", \"1\") == True\n",
        "num_ids_2": 29,
        "num_ids_4": 55
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([10, 23, 5, 8]) == [10, 5, 8, 23]\nassert     order_by_points([15, 32, 11, 50]) == [11, 15, 50, 32]\nassert     order_by_points([41, 5, 29, 63]) == [5, 41, 29, 63]\nassert     order_by_points([8, 24, 94, 12]) == [24, 8, 12, 94]\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     order_by_points([1, 6, 3, 10, 5, 7]) == [1, 3, 5, 6, 7, 10]\nassert order_by_points([-9, 5, 2, 6, 0, 10]) == [-9, 2, 5, 6, 0, 10]\n\nprint(\"You're all set!\")",
        "num_ids_2": 70,
        "num_ids_4": 70
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([11, 4, 30, 5, 9]) == [5, 4, 30, 9, 11], \"Wrong answer\"\nassert     order_by_points([4, 20, 6, 1, 17]) == [1, 6, 20, 4, 17], \"Wrong answer\"\nassert     order_by_points([5, 1, 4, 4, 8, 9]) == [1, 4, 4, 5, 8, 9], \"Wrong answer\"\nassert     order_by_points([14, 5, 9, 10, 5]) == [5, 5, 5, 10, 14], \"Wrong answer\"\n",
        "num_ids_2": 72,
        "num_ids_4": 148
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     order_by_points([3, 9, 12, -2]) == [3, 12, -2, 9]\nassert     order_by_points([1, 3, 5, 7]) == [1, 3, 5, 7]\nassert     order_by_points([1, 3, 4, 5, 7]) == [1, 3, 4, 5, 7]\nassert     order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     order_by_points([2, 3, 4, 5, 1]) == [1, 2, 3, 4, 5]\n",
        "num_ids_2": 56,
        "num_ids_4": 118
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([34, 23, 14, 5]) == [23, 14, 34, 5]\nassert     order_by_points([11, 31, 10, 31, 77, 34, 25]) == [31, 31, 11, 10, 34, 77, 25]\n",
        "num_ids_2": 66,
        "num_ids_4": 66
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     order_by_points([80, 10, 6, 5, 73, 85, 2, 11]) == [2, 5, 6, 7, 10, 11, 85, 80]\nassert     order_by_points([1, 4, 8, 10, 2, 3, 7, 6, 5, 8, 9]) == [1, 8, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids_2": 98,
        "num_ids_4": 98
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([1,2,3,4]) == [1,2,4,3]\nassert     order_by_points([2,3,4,1]) == [1,2,4,3]\nassert     order_by_points([1,2,3,4,5]) == [1,2,3,4,5]\nassert     order_by_points([2,3,4,1,5]) == [1,2,3,4,5]\n",
        "num_ids_2": 54,
        "num_ids_4": 116
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n\nassert order_by_points([1, 3, 5, 6, 7, 8, 9, 10]) == \n            [1, 3, 5, 6, 7, 8, 9, 10]\nassert order_by_points([1, 3, 5, 6, 7, 8, 9, 10, 99]) == \n            [1, 3, 5, 6, 7, 8, 9, 10, 99]\n",
        "num_ids_2": 6,
        "num_ids_4": 60
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef stringBreak(string):\n    \"\"\"Write a function that takes a string and returns the maximum number of words \n    that can be formed using the spaces in the string.\n\n    Examples:\n    stringBreak(\"the quick brown fox jumps over the lazy dog\") --> 5\n    stringBreak(\"a word\") --> 1\n    stringBreak(\"a word \") --> 1\n    stringBreak(\"a quick fox jump over a lazy dog\") --> 5\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     specialFilter([9,1,8,9,9,3,9,7,8,8,7,6,7,7,1,4,3,3]) == 15, specialFilter([9,1,8,9,9,3,9,7,8,8,7,6,7,7,1,4,3,3])\nassert     specialFilter([1,2,3,4]) == 2, specialFilter([1,2,3,4])\nassert     specialFilter([1,2,3,4,5]) == 5, specialFilter([1,2,3,4,5])\nassert     specialFilter([]) == 0, specialFilter([])\nassert     specialFilter([1,2,3,4,5,6]) == 6, specialFilter([1,2,3,4,5,6])\n",
        "num_ids_2": 112,
        "num_ids_4": 158
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     specialFilter([12,1,11,3,4,6,9,10]) == 5\nassert     specialFilter([1,2,3,4,5,6,7,8,9]) == 9\nassert     specialFilter([100,1,1,1,1]) == 5\nassert     specialFilter([1,2,3,4,5,6,7,8,9]) == 5\n",
        "num_ids_2": 50,
        "num_ids_4": 94
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Pass\" if (specialFilter([1, 3, 5, 7, 9]) == 5) else \"Fail\")\nprint(\"Pass\" if specialFilter([4, 7, 9, 12, 1, 4]) == 6 else \"Fail\")\nprint(\"Pass\" if specialFilter([]) == 0 else \"Fail\")\nprint(\"Pass\" if specialFilter([0]) == 1 else \"Fail\")\nprint(\"Pass\" if specialFilter([0, 0]) == 0 else \"Fail\")\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    get_max_triples(2) == 1\n    get_max_triples(5) == 2\n    get_max_triples(10) == 4\n    get_max_triples(15) == 5\n    get_max_triples(20) == 6\n    get_max_triples(25) == 7\n    get_max_triples(30) == 8\n    get_max_triples(35) == 9\n    get_max_triples(40) == 10\n    get_max_triples(50) == 11\n    get_max_triples(60) == 12\n    get_max_triples(70) == 13\n    get_max_triples(80) == 14\n    get_max_triples(85) == 15\n    get_max_triples(90) == 16\n    get_max_triples(95) == 17\n    get_max_triples(100) == 18\n    get_max_triples(200) == 18\n    get_max_triples(1000) == 19\n    get_max_triples(2000) == 19\n    get_max_triples(3000) == 20\n    get_max_triples(3500) == 20\n    get_max_triples(40000) == 21\n    get_max_triples(50000) == 21\n    get_max_triples(60000) == 22\n    get_max_triples(70000) == 23\n    get_max_triples(80000) == 24\n    get_max_triples(90000) == 25\n    get_max_triples(1000000) == 26\n    get_max_triples(2000000) == 27\n    get_max_triples(3000000) == 28\n    get_max_triples(4000000) == 29\n    get_max_triples(5000000) == 30\n    get_max_triples(6000000) == 31\n    get_max_triples(7000000) == 32\n    get_max_triples(8000000) == 33\n    get_max_triples(9000000) == 34\n    get_max_triples(10000000) == 35\n    get_max_triples(20000000) == 36\n    get_max_triples(30000000) == 37\n    get_max_triples(40000000) == 38\n    get_max_triples(50000000) == 39\n    get_max_triples(60000000) == 40\n    get_max_triples(70000000) == 41\n    get_max_triples(80000000) == 42\n    get_max_triples(90000000) == 43\n    get_max_triples(100000000) == 44\n    get_max_triples(200000000) == 45\n    get_max_triples(30000000) == 46\n    get_max_triples(40000000) == 47\n    get_max_triples(50000000) == 48\n    get_max_triples(60000000) == 49\n    get_max_triples(70000000) == 50\n    get_max_triples(80000000) == 51\n    get_max_triples(90000000) == 52\n    get_max_triples(100000000) == 53\n    get_max_triples(2000000000) == 54\n    get_max_triples(300000000) == 55\n    get_max_triples(400000000) == 56\n    get_max_triples(500000000) == 57\n    get_max_triples(600000000) == 58\n    get_max_triples(700000000) == 59\n    get_max_triples(800000000) == 60\n    get_max_triples(900000000) == 61\n    get_max_triples(1000000000) == 62\n    get_max_triples(2000000000) == 63\n    get_max_triples(30000000) == 64\n    get_max_triples(40000000) == 65\n    get_max_triples(50000000) == 66\n    get_max_triples(60000000) == 67\n    get_max_triples(70000000) == 68\n    get_max_triples(80000000) == 69\n    get_max_triples(90000000) == 70\n    get_max_triples(100000000) == 71\n    get_max_triple",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    max_triples = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_triples += 1\n    return max_triple",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    get_max_triples(3) == 6\n    get_max_triples(6) == 12\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    def get_max_triples(n):\n        \"\"\"\n        You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n        \"\"\"\n        res = 0\n        for i in range(1,n+1):\n            for j in range(1,n+1):\n                if i + j >= n and (i + j) % 3 == 1:\n                    for k in range(1,n+1):\n                        if i + j + k == n and (i + j + k) % 3 == 1:\n                            res += 1\n        return res\n\n    assert get_max_triples(1) == 0, 'base case'\n    assert get_max_triples(2) == 3, 'three triples'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n\nif __name__ == '__main__':\n    import sys\n    _input = lambda: sys.stdin.readline().rstrip()\n    n = int(_input())\n    print(get_max_triples(n)",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_triples(3) == 2\nassert     get_max_triples(8) == 5\nassert     get_max_triples(1) == 0\nassert     get_max_triples(10) == 9\n\n",
        "num_ids_2": 28,
        "num_ids_4": 56
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    #test cases\n    assert bf(\"earth\", \"venus\") == (\"venus\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\")\n    assert bf(\"venus\", \"mars\") == (\"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\", \"venus\")\n    assert bf(\"earth\", \"venus\") == (\"venus\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\", \"pluto\", \"earth\")\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bf('mercury','venus') == (('mercury','venus'), \n        ('venus','mercury'), ('venus','mars'), ('venus', 'jupiter'), \n        ('venus','saturn'), ('venus', 'uranus'), ('venus', 'neptune'), \n        ('venus', 'earth'), ('mercury','mars'), ('mercury', 'jupiter'), \n        ('mercury','saturn'), ('mercury', 'uranus'), ('mercury', 'neptune'), \n        ('mercury', 'earth'), ('mars','mercury'), ('mars','venus'), \n        ('mars', 'earth'), ('mars', 'jupiter'), ('mars','saturn'), \n        ('mars', 'uranus'), ('mars', 'neptune'), ('mars', 'earth'), \n        ('jupiter','mercury'), ('jupiter','venus'), ('jupiter', 'earth'), \n        ('jupiter','mars'), ('jupiter','saturn'), ('jupiter', 'uranus'), \n        ('jupiter', 'neptune'), ('jupiter', 'earth'), ('saturn','mercury'), \n        ('saturn','venus'), ('saturn', 'earth'), ('saturn', 'jupiter'), \n        ('saturn', 'uranus'), ('saturn', 'neptune'), ('saturn', 'earth'), \n        ('uranus','mercury'), ('uranus','venus'), ('uranus', 'earth'), \n        ('uranus', 'jupiter'), ('uranus','saturn'), ('uranus', 'neptune'), \n        ('uranus', 'earth'), ('neptune','mercury'), ('neptune','venus'), \n        ('neptune', 'earth'), ('neptune', 'jupiter'), ('neptune','saturn'), \n        ('neptune', 'uranus'), ('neptune', 'neptune'), ('neptune', 'earth'), \n        ('earth','mercury'), ('earth','venus'), ('earth', 'jupiter'), \n        ('earth','saturn'), ('earth', 'uranus'), ('earth', 'neptune'), \n        ('earth', 'earth'), ('jupiter', 'earth'), ('saturn', 'earth'), \n        ('uranus', 'earth'), ('neptune', 'earth'))\n\nassert     bf('mercury','venus') == ()\nassert     bf('mercury','mars') == ()\nassert     bf('mercury','venus') == ()\n",
        "num_ids_2": 37,
        "num_ids_4": 65
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bf('Mercury', 'Venus') == (('Mercury', 'Venus'), \n    ('Mercury', 'Earth'), ('Mercury', 'Mars'), ('Mercury', 'Jupiter'), \n    ('Mercury', 'Saturn'), ('Mercury', 'Uranus'), ('Mercury', 'Neptune'), \n    ('Venus', 'Earth'), ('Venus', 'Mars'), ('Venus', 'Jupiter'), ('Venus', 'Saturn'), \n    ('Venus', 'Uranus'), ('Venus', 'Neptune'), ('Earth', 'Mars'), ('Earth', 'Jupiter'), \n    ('Earth', 'Saturn'), ('Earth', 'Uranus'), ('Earth', 'Neptune'), ('Mars', 'Jupiter'), \n    ('Mars', 'Saturn'), ('Mars', 'Uranus'), ('Mars', 'Neptune'), ('Jupiter', 'Saturn'), \n    ('Jupiter', 'Uranus'), ('Jupiter', 'Neptune'), ('Saturn', 'Uranus'), ('Saturn', 'Neptune'), \n    ('Uranus', 'Neptune')), \"Wrong result for bf()\"\nassert     bf('Mercury', 'Jupiter') == (('Mercury', 'Venus'), \n    ('Mercury', 'Earth'), ('Mercury', 'Mars'), ('Mercury', 'Jupiter'), \n    ('Mercury', 'Saturn'), ('Mercury', 'Uranus'), ('Mercury', 'Neptune'), \n    ('Venus', 'Earth'), ('Venus', 'Mars'), ('Venus', 'Jupiter'), ('Venus', 'Saturn'), \n    ('Venus', 'Uranus'), ('Venus', 'Neptune'), ('Earth', 'Mars'), ('Earth', 'Jupiter'), \n    ('Earth', 'Saturn'), ('Earth', 'Uranus'), ('Earth', 'Neptune'), ('Mars', 'Jupiter'), \n    ('Mars', 'Saturn'), ('Mars', 'Uranus'), ('Mars', 'Neptune'), ('Jupiter', 'Saturn'), \n    ('Jupiter', 'Uranus'), ('Jupiter', 'Neptune'), ('Saturn', 'Uranus'), ('Saturn', 'Neptune'), \n    ('Uranus', 'Neptune')), \"Wrong result for bf()\"\nassert     bf('Mercury', 'Saturn') == (('Mercury', 'Venus'), \n    ('Mercury', 'Earth'), ('Mercury', 'Mars'), ('Mercury', 'Jupiter'), \n    ('Mercury', 'Saturn'), ('Mercury', 'Uranus'), ('Mercury', 'Neptune'), \n    ('Venus', 'Earth'), ('Venus', 'Mars'), ('Venus', 'Jupiter'), ('Venus', 'Saturn'), \n    ('Venus', 'Uranus'), ('Venus', 'Neptune'), ('Earth', 'Mars'), ('Earth', 'Jupiter'), \n    ('Earth', 'Saturn'), ('Earth', 'Uranus'), ('Earth', 'Neptune'), ('Mars', 'Jupiter'), \n    ('Mars', 'Saturn'), ('Mars', 'Uranus'), ('Mars', 'Neptune'), ('Jupiter', 'Saturn'), \n    ('Jupiter', 'Uranus'), ('Jupiter', 'Neptune'), ('Saturn', 'Uranus'), ('Saturn', 'Neptune'), \n    ('Uranus', 'Neptune')), \"Wrong result for bf()\"\nassert     bf('Mercury', 'Uranus') == (('Mercury', 'Venus'), \n    ('Mercury', 'Earth'), ('Mercury', 'Mars'), ('Mercury', 'Jupiter'), \n    ('Mercury', 'Saturn'), ('Mercury', 'Uranus'), ('Mercury', 'Neptune'), \n    ('Venus', 'Earth'), ('Venus', 'Mars'), ('Venus', 'Jupiter'), ('Venus', 'Saturn'), \n    ('Venus', 'Uranus'), ('Venus', 'Neptune'), ('Earth', 'Mars'), ('Earth', 'Jupiter'), \n    ('Earth', 'Saturn'), ('Earth', 'Uranus'), ('Earth', 'Neptune'), ('Mars', 'Jupiter'), \n    ('Mars', 'Saturn'), ('Mars', 'Uranus'), ('Mars', 'Neptune'), ('Jupiter'",
        "num_ids_2": 46,
        "num_ids_4": 93
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     'Mercury' == bf('Mercury', 'Venus')\nassert     'Venus' == bf('Venus', 'Earth')\nassert     'Earth' == bf('Earth', 'Mars')\nassert     'Mars' == bf('Mars', 'Jupiter')\nassert     'Jupiter' == bf('Jupiter', 'Saturn')\n",
        "num_ids_2": 35,
        "num_ids_4": 66
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bf('mercury','venus') == (('mercury','venus'),)\nassert     bf('venus','venus') == ()\nassert     bf('venus','mars') == ()\nassert     bf('venus', 'earth') == ()\nassert     bf('mercury', 'earth') == (('mercury', 'earth'),)\n",
        "num_ids_2": 36,
        "num_ids_4": 62
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    planet1 = \"Mercury\"\n    planet2 = \"Mars\"\n    assert bf(planet1, planet2) == ((\"Mercury\", \"Mars\"),)\n    assert bf(\"Earth\", \"Venus\") == ((\"Earth\", \"Mars\"), (\"Earth\", \"Venus\"))\n    assert bf(\"Jupiter\", \"Saturn\") == ((\"Jupiter\", \"Saturn\"),)\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sorted_list_sum(['A', 'a', 'B', 'b']) == ['a', 'b', 'A', 'B']\nassert     sorted_list_sum(['B', 'b', 'B', 'b', 'C', 'c', 'A', 'a', 'A', 'a']) == ['b', 'a', 'A', 'b', 'c', 'C', 'b', 'A']\nassert     sorted_list_sum(['A', 'a', 'B', 'b', 'C', 'c', 'a', 'A']) == ['a', 'a', 'A', 'B', 'C', 'c', 'b', 'b']\nassert     sorted_list_sum(['A', 'a', 'a', 'A']) == ['a', 'A']\nassert     sorted_list_sum(['A', 'a', 'b', 'b', 'a', 'A', 'c', 'c', 'b', 'B', 'c', 'C']) == ['a', 'a', 'b', 'b', 'c', 'C', 'A', 'A']\n",
        "num_ids_2": 102,
        "num_ids_4": 192
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert sorted_list_sum([\"cat\", \"dog\", \"monkey\"]) == ['cat','monkey', 'dog']\nassert sorted_list_sum([\"banana\", \"apple\", \"pear\", \"cherry\"]) == ['cherry', 'apple', 'banana', 'pear']\n\nif __name__ == \"__main__\":\n    print(sorted_list_sum([\"cat\", \"dog\", \"monkey\"]))\n    print(sorted_list_sum([\"banana\", \"apple\", \"pear\", \"cherry\"]))",
        "num_ids_2": 6,
        "num_ids_4": 73
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    print(\"Expected:\", sorted_list_sum([]) == sorted_list_sum([\"a\", \"b\", \"c\", \"d\"]))\n    print(\"Expected:\", sorted_list_sum([\"a\", \"b\", \"c\", \"d\"]) == sorted_list_sum([\"a\", \"b\", \"c\", \"d\"]))\n    print(\"Expected:\", sorted_list_sum([\"apple\", \"banana\", \"carrot\", \"dog\"]) == sorted_list_sum([\"apple\", \"banana\", \"carrot\", \"dog\"]))\n    print(\"Expected:\", sorted_list_sum([\"banana\", \"dog\", \"apple\", \"carrot\"]) == sorted_list_sum([\"apple\", \"banana\", \"carrot\", \"dog\"]))\n    print(\"Expected:\", sorted_list_sum([\"apple\", \"apple\", \"apple\", \"banana\"]) == sorted_list_sum([\"apple\", \"banana\", \"apple\", \"apple\"]))\n    print(\"Expected:\", sorted_list_sum([\"banana\", \"carrot\", \"apple\", \"apple\"]) == sorted_list_sum([\"apple\", \"banana\", \"carrot\", \"apple\"]))\n\n\n\n\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sorted_list_sum(['aaa','abc','aad', 'aad', 'cad']) == ['aad', 'aad', 'aaa', 'cad', 'abc']\nassert     sorted_list_sum(['aaa','abc','adc']) == ['adc', 'aaa', 'abc']\nassert     sorted_list_sum(['abc','adc']) == ['abc', 'adc']\nassert     sorted_list_sum(['abc','aaa']) == ['abc', 'aaa']\nassert     sorted_list_sum(['abc','abc']) == ['abc', 'abc']\n",
        "num_ids_2": 76,
        "num_ids_4": 124
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sorted_list_sum(['red', 'white', 'green', 'black', 'yellow', 'orange']) == ['black', 'green', 'orange', 'white','red', 'yellow']\nassert     sorted_list_sum(['red', 'white', 'black', 'yellow', 'orange', 'green']) == ['black', 'orange','red', 'green', 'white', 'yellow']\nassert     sorted_list_sum(['red', 'white', 'black', 'yellow', 'orange', 'green','red']) == ['black', 'orange','red','red', 'green', 'yellow', 'white']\n\ndef main():\n    lst = ['red', 'white', 'green', 'black', 'yellow', 'orange', 'green']\n    sorted_list_sum(lst)\n    print('\\n' + '*'*40 + '\\n')\n\nif __name__ == '__main__':\n    main()\n",
        "num_ids_2": 94,
        "num_ids_4": 145
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     x_or_y(3, 0, 1) == 0\nassert     x_or_y(5, 0, 1) == 1\nassert     x_or_y(8, 0, 1) == 1\nassert     x_or_y(3, 1, 1) == 1\nassert     x_or_y(8, 1, 1) == 0\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     x_or_y(2, 0, 0) == 0, 'Error - x_or_y(2, 0, 0) should return 0.'\nassert     x_or_y(3, 0, 1) == 1, 'Error - x_or_y(3, 0, 1) should return 1.'\nassert     x_or_y(5, 0, 1) == 1, 'Error - x_or_y(5, 0, 1) should return 1.'\nassert     x_or_y(1, 0, 1) == 0, 'Error - x_or_y(1, 0, 1) should return 0.'\nassert     x_or_y(3, 1, 1) == 0, 'Error - x_or_y(3, 1, 1) should return 0.'\n",
        "num_ids_2": 74,
        "num_ids_4": 148
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert x_or_y(3, 0, 1) == 0\nassert x_or_y(2, 0, 1) == 0\nassert x_or_y(3, 1, 0) == 1\nassert x_or_y(2, 1, 0) == 1\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     x_or_y(2, 1, 2) == 1\nassert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(3, 1, 1) == 1\nassert     x_or_y(3, 1, 2) == 2\n\nprint(\"Test passed\")\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     x_or_y(5, 3, 7)     == 7\nassert     x_or_y(4, 3, 7)     == 3\nassert     x_or_y(5, 2, 7)     == 2\nassert     x_or_y(5, 7, 7)     == 7\n\nprint(\"The program 'x_or_y' successfully passed all the tests.\"",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     x_or_y(2,2,1) == 2\nassert    x_or_y(4,2,1) == 1\nassert    x_or_y(7,2,1) == 1\nassert    x_or_y(7,2,2) == 2\nassert    x_or_y(7,3,2) == 2\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     double_the_difference([]) == 0, \"List is empty\"\nassert     double_the_difference([1, 2, 3]) == 9, \"Odd numbers\"\nassert     double_the_difference([1, 1, 2]) == 2, \"Double odd numbers\"\n",
        "num_ids_2": 43,
        "num_ids_4": 67
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndouble_the_difference([1,2,3,4]) == 7\ndouble_the_difference([-1,2,3,-4]) == 1\ndouble_the_difference([-1]) == 0\ndouble_the_difference([]) == 0\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     double_the_difference([-1, 2, -3, 4]) == 3\nassert    double_the_difference([-1, 2, -3, -4]) == -6\n",
        "num_ids_2": 46,
        "num_ids_4": 46
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     double_the_difference([1,2,3,4,5,6,7,8]) == 61\nassert     double_the_difference([1,2,3,4,5,6,7]) == 37\nassert     double_the_difference([-1,-2,-3,-4,-5,-6,-7]) == 25\nassert     double_the_difference([1,2,3,4,5,6]) == 0\nassert     double_the_difference([]) == ",
        "num_ids_2": 54,
        "num_ids_4": 105
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndouble_the_difference([1,2,3]) == 2\ndouble_the_difference([1,2,3,4]) == 9\n\ndouble_the_difference([-2,-1,0,2,1]) == 2\n\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     double_the_difference([]    == 0) == True, 'List is empty'\nassert     double_the_difference([1, 2, 3, 4, 5]) == 30, 'Same value'\nassert     double_the_difference([1, 2, 3, -4, 5]) == 1, 'Negative value'\nassert     double_the_difference([-1, -2, -3, -4, -5]) == -30, 'Positive value'\n",
        "num_ids_2": 50,
        "num_ids_4": 113
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndouble_the_difference([1, 2, 3, 4]) == 5\nassert \ndouble_the_difference([-2, -1, 0, 1, 2]) == 5\nassert \ndouble_the_difference([0, -1, 2, -3, 4]) == 5\nassert \ndouble_the_difference([1, 2, 3, 4, 5]) == 0\nassert \ndouble_the_difference([-2, -1, 0, 1, 2, 3, 4]) == 0\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert double_the_difference([3,5,4,9]) == 14\nassert double_the_difference([1,2,3,4]) == 0\nassert double_the_difference([3,5,4,4,3,9]) == 8\nassert double_the_difference([1,1,1,1,1,1,1,1]) == 16\n",
        "num_ids_2": 22,
        "num_ids_4": 64
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (compare([1,0,1,1], [0,1,1,1]) == [1,2,1,0])\nassert     (compare([1,0,0,1], [0,1,1,1]) == [1,2,0,0])\nassert     (compare([0,0,0,0], [0,1,1,1]) == [1,0,0,0])\nassert     (compare([1,1,1,1], [1,1,1,1]) == [0,0,0,0])\nassert     (compare([0,0,0,0], [1,1,1,1]) == [1,0,0,0])\n",
        "num_ids_2": 68,
        "num_ids_4": 136
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncompare([8, 1, 2, 3, 4, 5, 6, 7, 9, 10],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert \ncompare([2, 4, 7, 9, 9, 10, 11],[2, 3, 7, 8, 8, 9, 10]) ==[0, 0, 0, 0, 0, 0, 0]\nassert \ncompare([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==[0, 0, 0, 0, 0, 0, 0, 0, 0, 0",
        "num_ids_2": 6,
        "num_ids_4": 9
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncompare([6, 4, 1, 2, 7], [5, 2, 7, 1, 2]) == \n[[0, 2], \n[1, 0], \n[2, 1], \n[3, 2], \n[4, 3]]\nassert \ncompare([5, 4, 1, 2, 7], [6, 2, 7, 1, 2]) == \n[[0, 2], \n[1, 0], \n[2, 1], \n[3, 2], \n[4, 3]]\nassert \ncompare([5, 4, 1, 2, 7], [5, 4, 1, 2, 7]) == \n[[0, 0], \n[1, 0], \n[2, 0], \n[3, 1], \n[4, 2]]\nassert \ncompare([5, 4, 1, 2, 7], [3, 4, 1, 2, 7]) == \n[[1, 1], \n[2, 1], \n[3, 0], \n[4, 2]]\nassert \ncompare([3, 4, 1, 2, 7], [5, 4, 1, 2, 7]) == \n[[0, 0], \n[1, 0], \n[2, 0], \n[3, 0], \n[4, 1]]\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare([10, 7, 11],    [9, 7, 13]) == [1, 2, 0]\nassert     compare([9, 7, 11],    [10, 7, 13]) == [1, 0, 1]\n",
        "num_ids_2": 56,
        "num_ids_4": 56
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare([37, 17, 13, 41, 22, 41, 37, 21, 33, 27, 38, 38, 26, 27, 18, 19, 14, 17, 36, 25, 39, 31, 17, 22, 26, 25, 17, 27, 26, 20, 28, 19, 17, 19, 17, 22, 26, 27, 24, 27, 23, 23, 19, 21, 26, 17, 28, 22, 18, 17, 23, 26, 24, 27, 28, 22, 27, 28, 23, 25, 20, 20, 28, 27, 25, 23, 26, 18, 22, 26, 25, 17, 26, 25, 18, 23, 24, 21, 26, 26, 24, 23, 23, 22, 22, 20, 24, 21, 26, 22, 17, 26, 26, 22, 22, 21, 22, 21, 23, 22, 23, 20, 22, 20, 25, 22, 25, 24, 21, 25, 23, 27, 25, 23, 23, 23, 25, 23, 23, 20, 22, 20, 24, 21, 24, 26, 24, 27, 26, 25, 25, 26, 25, 27, 28, 26, 28, 27, 28, 28, 26, 26, 26, 27, 25, 25, 25, 28, 27, 26, 26, 26, 27, 24, 27, 25, 26, 24, 25, 26, 24, 25, 26, 23, 25, 24, 24, 26, 26, 23, 23, 23, 23, 23, 23, 24, 23, 23, 23, 24, 22, 24, 24, 23, 26, 25, 25, 27, 26, 23, 23, 23, 25, 25, 24, 25, 27, 26, 25, 25, 25, 23, 25, 24, 25, 26, 27, 23, 25, 25, 22, 26, 27, 23, 26, 23, 22, 24, 22, 23, 25, 23, 23, 25, 23, 23, 24, 23, 23, 25, 22, 24, 25, 22, 23, 24, 25, 22, 24, 25, 23, 23, 23, 24, 23, 23, 25, 25, 25, 25, 25, 25, 25, 24, 22, 23, 23, 23, 24, 23, 23, 24, 23, 22, 24, 23, 23, 23, 23, 22, 23, 23, 22, 23, 25, 23, 23, 25, 23, 22, 22, 22, 23, 23, 25, 23, 23, 25, 24, 23, 24, 23, 22, 23, 23, 23, 24, 23, 23, 22, 24, 23, 23, 23, 22, 23, 22, 23, 23, 22, 23, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23",
        "num_ids_2": 1025,
        "num_ids_4": 1025
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncompare([1, 2, 3, 4, 5], [1, 2, 1, 4, 5]) == [0, 0, 1, 0, 2]\nassert \ncompare([5, 4, 3, 2, 1], [1, 2, 3, 4, 5]) == [1, 2, 2, 2, 1]\nassert \ncompare([1, 1, 1, 1, 1], [2, 2, 2, 2, 2]) == [0, 0, 0, 0, 0]\nassert \ncompare([10, 9, 8, 7, 6], [4, 5, 6, 4, 2]) == [0, 0, 0, 1, 2]\nassert \ncompare([1, 2, 3, 4, 5], [1, 2, 1, 4, 5]) == [0, 0, 1, 0, 2",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n    Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.StuFfed'\n    Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'Slices']) == 'Slices.Slices'\n    Strongest_Extension('Slices', ['Cheese', 'Slices']) == 'Slices.Slices'\n    Strongest_Extension('Slices', ['Slices']) == 'Slices.Slices'\n    Strongest_Extension('Slices', ['Cheese']) == 'Cheese.Slices'\n    Strongest_Extension('Slices', ['Cheese']) == 'Cheese.Slices'\n    Strongest_Extension('Slices', ['Slices']) == 'Slices.Slices'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n     Strongest_Extension( 'Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'] ) == 'Slices.SErviNGSliCes'\n     Strongest_Extension( 'Slices', ['SErviNGSliCes', 'Cheese', 'Cheese'] ) == 'Slices.SErviNGSliCes'\n     Strongest_Extension( 'Slices', ['SErviNGSliCes', 'Cheese', 'Cheese', 'Cheese'] ) == 'Slices.Cheese'\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\nassert     Strongest_Extension(\"Steak\", [\"StuFfed\", \"SErviNGSliCes\"]) == \"StuFfed.SErviNGSliCes\"\nassert     Strongest_Extension(\"Rocks\", [\"Slices\", \"Rocks\"]) == \"Slices.Rocks\"\n",
        "num_ids_2": 94,
        "num_ids_4": 125
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Gum', ['Slices', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Queens', ['Slices', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['Slices', 'SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert     Strongest_Extension('Cheese', ['Cheese', 'StuFfed', 'Slices', 'SErviNGSliCes']) == 'StuFfed'\n",
        "num_ids_2": 102,
        "num_ids_4": 208
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Species', ['Onions', 'Mushrooms', 'Tomatoes']) == 'Species.Onions'\nassert Strongest_Extension('GlutenFree', ['GlutenFree', 'Gluten', 'GlutenFree']) == 'GlutenFree.GlutenFree'\nassert Strongest_Extension('Slices', ['Slices.SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Slices.SErviNGSliCes', 'Cheese', 'StuFfed', 'Slices.SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n",
        "num_ids_2": 82,
        "num_ids_4": 171
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cycpattern_check('abcd','cdab') == True\nassert     cycpattern_check('abcd','aacd') == False\nassert     cycpattern_check('abcd','abcd') == True\n",
        "num_ids_2": 35,
        "num_ids_4": 52
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check('cab','ac') == True\nassert     cycpattern_check('abc','acb') == True\nassert     cycpattern_check('abc','cba') == False\nassert     cycpattern_check('abc','ad') == False\nassert     cycpattern_check('abc','ab') == True\n",
        "num_ids_2": 32,
        "num_ids_4": 63
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert cycpattern_check('abc', 'abc') == True\nassert cycpattern_check('abc', 'acb') == False\nassert cycpattern_check('abc', 'bac') == True\nassert cycpattern_check('abc', 'cba') == True\n",
        "num_ids_2": 18,
        "num_ids_4": 50
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cycpattern_check('abcd', 'dcba')\nassert     cycpattern_check('abcd', 'cdba')\nassert     cycpattern_check('abcd', 'cbad')\nassert     cycpattern_check('abcd', 'badc')\nassert     cycpattern_check('abcd', 'cdba')\n",
        "num_ids_2": 32,
        "num_ids_4": 64
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef rot13(st):\n    \"\"\"Create a string with the rot13 encoding.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncycpattern_check(\"cell\", \"cell\") == True\ncycpattern_check(\"cell\", \"le\") == True\ncycpattern_check(\"cell\", \"l\") == True\ncycpattern_check(\"cell\", \"cell\") == False\ncycpattern_check(\"cell\", \"leol\") == False\ncycpattern_check(\"leo\", \"leo\") == True\ncycpattern_check(\"leo\", \"le\") == True\ncycpattern_check(\"leo\", \"leo\") == False\ncycpattern_check(\"leo\", \"leol\") == False\ncycpattern_check(\"leo\", \"leol\") == False\ncycpattern_check(\"leo\", \"leol\") == False\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\", \"leol\") == True\ncycpattern_check(\"leo\"",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cycpattern_check('sunday','sun') == True\nassert     cycpattern_check('son','son') == True\nassert     cycpattern_check('sunday','sunday') == True\nassert     cycpattern_check('sunday','sun') == True\nassert     cycpattern_check('sunday','sun') == True\n",
        "num_ids_2": 32,
        "num_ids_4": 68
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \n\n\n\n\ndef test_even_odd_count():\n    \"\"\"Test for the function even_odd_count.\n    \"\"\"\n    assert even_odd_count(123) == (0, 0)\n    ",
        "num_ids_2": 6,
        "num_ids_4": 6
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_count(20) == (1,0)\nassert     even_odd_count(21) == (2,1)\nassert     even_odd_count(20) == (1,1)\nassert     even_odd_count(29) == (2,2)\nassert     even_odd_count(50) == (2,2)\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('check the correctness of even_odd_count')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # by checking if the answer returned is\n    # a list of two integers\n    assert len(even_odd_count(5445)) == 2\n    assert isinstance(even_odd_count(5445), list)\n    assert even_odd_count(5445) == (2, 3)\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_odd_count(734) == (3, 1), \"734: 3 and 1.\"\nassert     even_odd_count(133) == (1, 0), \"133: 1 and 0.\"\nassert     even_odd_count(14) == (2, 0), \"14: 2 and 0.\"\nassert     even_odd_count(1440) == (0, 0), \"1440: 0 and 0.\"\nassert     even_odd_count(7800) == (3, 1), \"7800: 3 and 1.\"\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert even_odd_count(898) == (3, 4), \"incorrect\"\nassert even_odd_count(498) == (1, 5), \"incorrect\"\nassert even_odd_count(89) == (2, 1), \"incorrect\"\nassert even_odd_count(0) == (0, 0), \"incorrect\"\n",
        "num_ids_2": 24,
        "num_ids_4": 64
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('All test cases passed'",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_odd_count(21) == ('2', '1')\nassert     even_odd_count(18) == ('1', '1')\n",
        "num_ids_2": 36,
        "num_ids_4": 36
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(40) == 'dix'\nassert     int_to_mini_roman(23) == 'twi'\nassert     int_to_mini_roman(39) == 'tve'\nassert     int_to_mini_roman(43) == 'quad'\nassert     int_to_mini_roman(91) == 'cose'\n",
        "num_ids_2": 36,
        "num_ids_4": 71
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    int_to_mini_roman(1) == \"I\"\nassert \n    int_to_mini_roman(10) == \"X\"\nassert \n    int_to_mini_roman(16) == \"XV\"\nassert \n    int_to_mini_roman(26) == \"XX\"\nassert \n    int_to_mini_roman(40) == \"XL\"\n",
        "num_ids_2": 6,
        "num_ids_4": 12
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     int_to_mini_roman(2) == 'II', 'Test failed: return is incorrect'\nassert     int_to_mini_roman(3) == 'III', 'Test failed: return is incorrect'\nassert     int_to_mini_roman(4) == 'IV', 'Test failed: return is incorrect'\nassert     int_to_mini_roman(5) == 'V', 'Test failed: return is incorrect'\nassert     int_to_mini_roman(6) == 'VI', 'Test failed: return is incorrect'\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(int_to_mini_roman(1)) == 'I'\nprint(int_to_mini_roman(4)) == 'IV'\nprint(int_to_mini_roman(5)) == 'V'\nprint(int_to_mini_roman(9)) == 'IX'\nprint(int_to_mini_roman(10)) == 'X'\nprint(int_to_mini_roman(25)) == 'XX'\nprint(int_to_mini_roman(40)) == 'XL'\nprint(int_to_mini_roman(50)) == 'L'\nprint(int_to_mini_roman(75)) == 'LX'\nprint(int_to_mini_roman(100)) == 'C'\nprint(int_to_mini_roman(400)) == 'CD'\nprint(int_to_mini_roman(500)) == 'D'\nprint(int_to_mini_roman(750)) == 'DC'\nprint(int_to_mini_roman(900)) == 'CM'\nprint(int_to_mini_roman(1000)) == 'M'\nprint(int_to_mini_roman(3500)) == 'MMM'\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert int_to_mini_roman(1) == \"I\"\nassert int_to_mini_roman(2) == \"II\"\nassert int_to_mini_roman(3) == \"III\"\nassert int_to_mini_roman(4) == \"IV\"\n",
        "num_ids_2": 19,
        "num_ids_4": 51
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(6, 7, 8) == True\nassert     right_angle_triangle(10, 11, 12) == True\nassert     right_angle_triangle(100, 100, 100) == True\nassert     right_angle_triangle(4, 4, 4) == False\n",
        "num_ids_2": 36,
        "num_ids_4": 72
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    pass\n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(right_angle_triangle(10, 5, 15))\nprint(right_angle_triangle(10, 5, 20))\nprint(right_angle_triangle(10, 5, 100))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     right_angle_triangle(1, 2, 3)\nassert not right_angle_triangle(3, 3, 4)\nassert     right_angle_triangle(4, 4, 5)\n",
        "num_ids_2": 32,
        "num_ids_4": 48
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_angle_triangle(1, 2, 3) ==     True\nassert     right_angle_triangle(1, 1, 1) ==     False\nassert     right_angle_triangle(2, 2, 2) ==     True\nassert     right_angle_triangle(3, 1, 2) ==     False\nassert     right_angle_triangle(3, 3, 4) ==     True\n",
        "num_ids_2": 38,
        "num_ids_4": 76
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_max(['a','c', 'b', 'd']) == 'b'\nassert     find_max(['a','c', 'b', 'd', 'd']) == 'b'\nassert     find_max(['a','c', 'b', 'd', 'a']) == 'a'\nassert     find_max(['a','c', 'b', 'd', 'c']) == 'c'\nassert     find_max(['a','c', 'b', 'c', 'a']) == 'a'\n",
        "num_ids_2": 49,
        "num_ids_4": 101
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_max(['abc', 'abcd', 'abf', 'jkl']) == 'jkl'\nassert find_max(['abc', 'abcd', 'abf', 'jkl', 'kab', 'kad']) == 'kab'\nassert find_max(['ab', 'a', 'abc', 'abd', 'ab', 'abc', 'abc']) == 'abc'\nassert find_max(['ab', 'a', 'abc', 'abd', 'ab', 'abc', 'abc', 'abc']) == 'abc'\n",
        "num_ids_2": 30,
        "num_ids_4": 98
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_max([\"apple\",\"apples\",\"bana\",\"banana\"]) == \"apple\"\nassert     find_max([\"banana\",\"apples\",\"banana\",\"bana\"]) == \"banana\"\nassert     find_max([\"bana\",\"apples\",\"banana\",\"bana\",\"bana\"]) == \"banana\"\nassert     find_max([\"banana\",\"bana\",\"bana\",\"apples\",\"banana\"]) == \"banana\"\nassert     find_max([\"bana\",\"bana\",\"apples\",\"banana\",\"apples\",\"banana\"]) == \"banana\"\n",
        "num_ids_2": 50,
        "num_ids_4": 108
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_max([\"Python\", \"PYTHON\", \"python\", \"thon\"]) == \"Python\"\nassert find_max([\"python\", \"thon\", \"Python\"]) == \"Python\"\nassert find_max([\"PYTHON\", \"PYTHON\"]) == \"Python\"\n\nprint(\"Test passed\"",
        "num_ids_2": 30,
        "num_ids_4": 74
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('Pass' if find_max([\"python\", \"is\", \"a\", \"snake\", \"lang\", \"Python\"]) == \"Python\" else 'Fail')\nprint('Pass' if find_max([\"Python\", \"is\", \"a\", \"snake\", \"lang\", \"Python\"]) == \"Python\" else 'Fail')\nprint('Pass' if find_max([\"Python\", \"Python\", \"Python\"]) == \"Python\" else 'Fail')\nprint('Pass' if find_max([\"hello\", \"world\", \"python\", \"is\", \"a\", \"snake\", \"lang\", \"Python\"]) == \"Python\" else 'Fail')\nprint('Pass' if find_max([\"hello\", \"world\", \"python\", \"is\", \"a\", \"snake\", \"lang\", \"Python\", \"apple\"]) == \"Python\" else 'Fail')\nprint('Pass' if find_max([\"hello\", \"world\", \"apple\", \"is\", \"a\", \"snake\", \"lang\", \"Python\"]) == \"Python\" else 'Fail')\nprint('Pass' if find_max([\"hello\", \"world\", \"apple\", \"is\", \"a\", \"snake\", \"lang\", \"Python\", \"apple\"]) == \"Python\" else 'Fail')\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_max(['hello', 'goodbye', 'why', 'hello']) == 'hello'\nassert     find_max(['hello', 'goodbye', 'why', 'hello', 'hi']) == 'hello'\nassert     find_max(['hello', 'goodbye', 'why', 'hi']) == 'hello'\nassert     find_max(['hello', 'goodbye', 'hi']) == 'hello'\nassert     find_max(['hello', 'goodbye', 'hi', 'hello', 'hi']) == 'hello'\n",
        "num_ids_2": 53,
        "num_ids_4": 100
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_max([\"supercalifragilisticexpialidocious\"]) == \"supercalifragilisticexpialidocious\"\nassert     find_max([\"supercalifragilisticexpialidocious\", \"fragilisticexpialidocious\", \"frigilisticexpialidocious\", \"super\", \"califragilisticexpialidocious\", \"expialidocious\"]) == \"frigilisticexpialidocious\"\nassert     find_max([\"supercalifragilisticexpialidocious\", \"super\", \"califragilisticexpialidocious\", \"expialidocious\", \"supercalifragilisticexpialidocious\"]) == \"supercalifragilisticexpialidocious\"",
        "num_ids_2": 111,
        "num_ids_4": 180
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_max([\"hello\", \"hi\", \"the\", \"world\", \"what\"]) == \"hello\"\nassert     find_max([\"hello\", \"hi\", \"the\", \"world\", \"what\"]) == \"world\"\nassert     find_max([\"hello\", \"hi\", \"the\", \"world\", \"what\"]) == \"what\"\nassert     find_max([\"hello\", \"hi\", \"the\", \"world\", \"what\"]) == \"hi\"\nassert     find_max([\"hello\", \"hi\", \"the\", \"world\", \"what\"]) == \"hi\"\n",
        "num_ids_2": 54,
        "num_ids_4": 108
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(find_max(['a','aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa']))\nprint(find_max(['a','aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa','b']))\nprint(find_max(['aa','bb','ccccccccccccccccc']))\nprint(find_max(['aa','bb','ccccccccccccccccc','aa','bb']))\nprint(find_max(['aa','bb','ccccccccccccccccc','aa','bb','ccccccccccccccccc'])",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    eat(7, 3, 7) == eat(7, 3, 3) == eat(7, 2, 5) == [9, 1]\n    \n    eat(1, 3, 4) == eat(1, 3, 3) == eat(1, 2, 2) == [2, 0]\n    \n    eat(8, 1, 8) == eat(8, 1, 1) == eat(8, 0, 1) == [8, 0]\n\n    eat(1, 1, 5) == eat(1, 1, 0) == eat(1, 1, 1) == [1, 1]\n    \n    eat(0, 1, 1) == eat(0, 1, 0) == eat(0, 0, 1) == [0, 1]\n\n    eat(-1, 2, 2) == eat(-1, 2, 1) == eat(-1, 1, 1) == [-1, 0]\n\n    eat(1000, 1000, 1000) == eat(1000, 1000, 999) == eat(999, 1000, 999) == [999, 0]\n    \n    eat(0, 0, 0) == eat(0, 0, 1) == eat(1, 1, 1) == []\n    \n    eat(1, 1, 1) == eat(1, 1, 0) == eat(1, 0, 0) == []\n    \n    eat(2, 2, 2) == eat(2, 1, 1) == eat(1, 1, 1) == []\n    \n    eat(2, 1, 1) == eat(1, 1, 1) == eat(0, 1, 0) == []\n    \n    eat(0, 1, 0) == eat(0, 0, 0) == eat(1, 0, 0) == []\n    \n    eat(1, 0, 0) == eat(0, 0, 0) == eat(1, 0, 1) == []\n    \n    eat(0, 0, 1) == eat(0, 1, 0) == eat(0, 0, 1) == []\n    \n    eat(1, 1, 1) == eat(1, 0, 1) == eat(0, 1, 1) == []\n    \n    eat(2, 1, 1) == eat(1, 1, 1) == eat(0, 1, 0) == []\n    \n    eat(0, 1, 0) == eat(1, 1, 0) == eat(0, 0, 0) == []\n    \n    eat(1, 1, 0) == eat(0, 1, 0) == eat(1, 0, 0) == []\n    \n    eat(1, 0, 1) == eat(0, 1, 1) == eat(1, 0, 1) == []\n    \n    eat(0, 0, 1) == eat(1, 0, 1) == eat(0, 1, 1) == []\n    \n    eat(1, 1, 1) == eat(1, 0, 1) == eat(0, 1, 0) == []\n    \n    eat(0, 0, 1) == eat(1, 0, 1) == eat(0, 1, 0) == []\n    \n    eat(1, 0, 0) == eat(0, 1, 0) == eat(1, 0, 1) == []\n    \n    eat(1, 1, 0) == eat(0, 1, 1) == eat(1, 0, 0) == []\n    \n    eat(2, 1, 1) == eat(2, 1, 0) == eat(1, 1, 0) == []\n    \n    eat(1, 0, 0) == eat(0, 1, 0) == eat(1, 0, 1) == []\n    \n    eat(0, 0, 0) == eat(0, 1, 0) == eat(1, 0, 0) == []\n    \n    eat(1, 1, 0) == eat(1, 0, 1) == eat(0, 1, 0) == []\n    \n    eat(0, 1, 0) == eat(1, 1, 0) == eat(0, 0, 0) == []\n    \n    eat(1, 0, 0) == eat(1, 1, 0) == eat(0, 0, 1) == []\n    \n    eat(0, 0, 1) == eat(1, 0, 1) == eat(0, 1, 1) == []\n    \n    eat(1, 1, 1",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eat(0, 100, 100) == [100, 100]\nassert     eat(0, 200, 200) == [200, 0]\nassert     eat(0, 500, 200) == [500, 100]\nassert     eat(0, 0, 100) == [100, 100]\nassert     eat(0, 100, 0) == [0, 0]\n",
        "num_ids_2": 34,
        "num_ids_4": 68
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    print('[ 0 ]', 'check the correctness of eat function')\n    assert eat(0, 0, 1000) == [0, 1000], 'check the correctness of eat function'\n    assert eat(100, 1000, 0) == [0, 1000], 'check the correctness of eat function'\n    assert eat(100, 1000, 100) == [0, 100], 'check the correctness of eat function'\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (eat(100, 1, 100) ==  [99,0]), 'Wrong!'\nassert     (eat(100, 2, 100) ==  [97,0]), 'Wrong!'\nassert     (eat(100, 5, 100) ==  [98,0]), 'Wrong!'\nassert     (eat(100, 6, 100) ==  [97,0]), 'Wrong!'\nassert     (eat(100, 10, 100) ==  [97,0]), 'Wrong!'\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eat(0, 0, 1000) == (1000, 1000)\nassert     eat(4, 1, 3) == (4, 2)\nassert     eat(7, 1, 5) == (7, 0)",
        "num_ids_2": 34,
        "num_ids_4": 51
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eat(0, 0, 1000)    == ([0, 0], 1000)\nassert     eat(1, 0, 1000)    == ([1, 0], 1000)\nassert     eat(3, 0, 1000)    == ([3, 0], 1000)\nassert     eat(1, 1, 1000)    == ([2, 1], 1000)\nassert     eat(3, 1, 1000)    == ([3, 1], 1000)\n",
        "num_ids_2": 40,
        "num_ids_4": 80
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (eat(1,0,1000) ==    [1, 1000]), \"Wrong\"\nassert     (eat(2,1,1000) ==    [2, 0]), \"Wrong\"\nassert     (eat(3,2,1000) ==    [2, 999]), \"Wrong\"\nassert     (eat(4,3,1000) ==    [1, 0]), \"Wrong\"\nassert     (eat(5,4,1000) ==    [1, 999]), \"Wrong\"\n",
        "num_ids_2": 46,
        "num_ids_4": 92
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    eat(0, 0, 0) == [0, 0]\n    eat(1, 0, 0) == [1, 0]\n    eat(1, 1, 1) == [2, 1]\n    eat(2, 2, 2) == [3, 2]\n    eat(3, 3, 3) == [4, 2]\n    eat(4, 4, 4) == [5, 0]\n    eat(5, 5, 5) == [6, 0]\n    eat(6, 6, 6) == [7, 0]\n    eat(7, 7, 7) == [8, 0]\n    eat(8, 8, 8) == [9, 0]\n    eat(9, 9, 9) == [10, 0]\n    eat(10, 10, 10) == [11, 0]\n    eat(11, 11, 11) == [12, 0]\n    eat(12, 12, 12) == [13, 0]\n    eat(13, 13, 13) == [14, 0]\n    eat(14, 14, 14) == [15, 0]\n    eat(15, 15, 15) == [16, 0]\n    eat(16, 16, 16) == [17, 0]\n    eat(17, 17, 17) == [18, 0]\n    eat(18, 18, 18) == [19, 0]\n    eat(19, 19, 19) == [20, 0]\n    eat(20, 20, 20) == [21, 0]\n    eat(21, 21, 21) == [22, 0]\n    eat(22, 22, 22) == [23, 0]\n    eat(23, 23, 23) == [24, 0]\n    eat(24, 24, 24) == [25, 0]\n    eat(25, 25, 25) == [26, 0]\n    eat(26, 26, 26) == [27, 0]\n    eat(27, 27, 27) == [28, 0]\n    eat(28, 28, 28) == [29, 0]\n    eat(29, 29, 29) == [30, 0]\n    eat(30, 30, 30) == [31, 0]\n    eat(31, 31, 31) == [32, 0]\n    eat(32, 32, 32) == [33, 0]\n    eat(33, 33, 33) == [34, 0]\n    eat(34, 34, 34) == [35, 0]\n    eat(35, 35, 35) == [36, 0]\n    eat(36, 36, 36) == [37, 0]\n    eat(37, 37, 37) == [38, 0]\n    eat(38, 38, 38) == [39, 0]\n    eat(39, 39, 39) == [40, 0]\n    eat(40, 40, 40) == [41, 0]\n    eat(41, 41, 41) == [42, 0]\n    eat(42, 42, 42) == [43, 0]\n    eat(43, 43, 43) == [44, 0]\n    eat(44, 44, 44) == [45, 0]\n    eat(45, 45, 45) == [46, 0]\n    eat(46, 46, 46) == [47, 0]\n    eat(47, 47, 47) == [48, 0]\n    eat(48, 48, 48) == [49, 0]\n    eat(49, 49, 49) == [50, 0]\n    eat(50, 50, 50) == [51, 0]\n    eat(51, 51, 51) == [52, 0]\n    eat(52, 52, 52) == [53, 0]\n    eat(53, 53, 53) == [54, 0]\n    eat(54, 54, 54) == [55, 0]\n    eat(55, 55, 55) == [56, 0]\n    eat(56, 56, 56) == [57, 0]\n    eat(57, 57, 57) == [58, 0]\n    eat(58, 58, 58) == [59, 0]\n    eat(59, 59, 59) == [60, 0]\n    eat(60, 60, 60) == [61, 0]\n    eat(61, 61, 61) == [62, 0]\n    eat(62, 62, 62) == [63, 0",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(eat(3, 2, 6))\n\nprint(eat(0, 3, 6))\n\nprint(eat(2, 0, 6))\n\nprint(eat(2, 5, 6))\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eat(1, 1, 0) == [1, 0], 'The first test case has failed.'\nassert     eat(0, 0, 1) == [0, 1], 'The second test case has failed.'\nassert     eat(0, 1, 1) == [0, 0], 'The third test case has failed.'\nassert     eat(1, 0, 1) == [0, 1], 'The fourth test case has failed.'\nassert     eat(100, 1, 101) == [1, 100], 'The fifth test case has failed.'\n",
        "num_ids_2": 50,
        "num_ids_4": 100
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     do_algebra([\"+\"], [\"2\"]) == 2\nassert     do_algebra([\"+\"], [\"2\", \"3\"]) == 5\nassert     do_algebra([\"+\"], [\"2\", \"3\", \"4\"]) == 7\nassert     do_algebra([\"+\"], [\"2\", \"3\", \"4\", \"5\"]) == 9\nassert     do_algebra([\"+\"], [\"2\", \"3\", \"4\", \"5\", \"6\"]) == 12\n",
        "num_ids_2": 37,
        "num_ids_4": 86
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_do_algebra():\n    assert do_algebra([ '+', '2' ], [ '2', '3' ] ) == 5\n    assert do_algebra([ '*', '2' ], [ '2', '3' ] ) == 6\n    assert do_algebra([ '-', '2' ], [ '2', '3' ] ) == -1\n    ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     do_algebra([ \"+\", 1 ], [ 3, 4 ] ) == \"5\"\nassert     do_algebra([ \"-\", 1 ], [ 3, 4 ] ) == \"-2\"\nassert     do_algebra([ \"*\", 1 ], [ 3, 4 ] ) == \"6\"\nassert     do_algebra([ \"//\", 3 ], [ 4, 5 ] ) == \"0\"\nassert     do_algebra([ \"**\", 3 ], [ 4, 5 ] ) == \"81\"",
        "num_ids_2": 44,
        "num_ids_4": 90
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     do_algebra([], []) == None, \"Oops, something is wrong!\"\nassert     do_algebra([1,2,3], [4]) == 4, \"Oops, something is wrong!\"\nassert     do_algebra([1,2,3], [4,5]) == None, \"Oops, something is wrong!\"\nassert     do_algebra([1,2,3], [4,5,6]) == None, \"Oops, something is wrong!\"\nassert     do_algebra([1,2,3,4,5], [6]) == None, \"Oops, something is wrong!\"\n",
        "num_ids_2": 50,
        "num_ids_4": 112
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndo_algebra([1, '+', 2], [3, 4, 5])\n\ndo_algebra([2, '+', 3], [1, 2, 3])\n\ndo_algebra([1, '-', 3], [2, 3, 4])\n\ndo_algebra([2, '-', 3], [1, 2, 3])\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndo_algebra([1, 2, '+', 4], ['a', 'b'])\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # string used for testing\n    s = \"abc\"\n    print(solve(s))",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert solve(\"\") == \"\", \"An empty string is correct.\"\nassert solve(\"a\") == \"A\", \"The first letter is correct.\"\nassert solve(\"z\") == \"Z\", \"The string is correct.\"\nassert solve(\"asdf\") == \"ASDF\", \"The string is correct.\"\n",
        "num_ids_2": 18,
        "num_ids_4": 51
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve(\"ABC\") == \"cba\"\nassert     solve(\"A\") == \"A\"\nassert     solve(\"\") == \"\"\nassert     solve(\"I Like You\") == \"YUieLI\"\nassert     solve(\"CamelCase\") == \"CamelC\"\n",
        "num_ids_2": 25,
        "num_ids_4": 51
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     solve('abc') == 'cba'\nassert     solve('ABC') == 'cBA'\nassert     solve('abcABC') == 'ABCCba'\nassert     solve('abcABCcd') == 'ABCcdba'\nassert     solve('abcABCcdE') == 'ABCcdEba'\n",
        "num_ids_2": 26,
        "num_ids_4": 57
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solve('Hello') == 'olleH'\nassert     solve('!') == '!'\nassert     solve('A') == 'A'\nassert     solve('') == ''\nassert     solve('a') == 'a'",
        "num_ids_2": 25,
        "num_ids_4": 47
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     solve('a') == 'a', 'case 1'\nassert     solve('A') == 'A', 'case 2'\nassert     solve('  a  ') == 'A', 'case 3'\nassert     solve('abc') == 'cba', 'case 4'\nassert     solve('abc  ') == 'cba', 'case 5'\n",
        "num_ids_2": 32,
        "num_ids_4": 67
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert solve(\"abcd\") == \"dcba\"\nassert solve(\"ab\") == \"a\"\nassert solve(\"ABC\") == \"cba\"\nassert solve(\"\") == \"\"\n",
        "num_ids_2": 15,
        "num_ids_4": 36
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert solve(\"HELLO WORLD\") == \"OLLEH WORLD\"\nassert solve(\"hello world\") == \"w olleH\"\nassert solve(\"HELLO WORLD\") == \"OLLEH WORLD\"\nassert solve(\"Hello world\") == \"w olleH\"\n",
        "num_ids_2": 19,
        "num_ids_4": 49
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(\"ab\") == \"ba\"\nassert     solve(\"Hello world\") == \"OlleH dlrow\"\nassert     solve(\"a\") == \"a\"\nassert     solve(\"\") == \"\"\nprint(\"You passed the tests!\"",
        "num_ids_2": 30,
        "num_ids_4": 51
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solve('a') == 'A', 'A: This should be \"A\", not \"a\"!'\nassert     solve('ab') == 'ba', 'B: This should be \"ba\", not \"ab\"!'\nassert     solve('123') == '321', 'C: This should be \"321\", not \"123\"!'\nassert     solve('') == '', 'D: This should be \"\", not \"\"!'\nassert     solve('!@#$%^&*()_+') == '!@#$%^&*()_+', 'E: This should be \"!@#$%^&*()_+\", not \"!@#$%^&*()_+\"!'\n",
        "num_ids_2": 52,
        "num_ids_4": 100
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert string_to_md5('text') == '5d6916b16b92f2f2bac13d546038d93b', 'wrong output'\nassert string_to_md5('') == None, 'wrong output'\nassert string_to_md5('a') == None, 'wrong output'\n",
        "num_ids_2": 43,
        "num_ids_4": 79
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_md5(\"\") == None\nassert     string_to_md5(\"test\") == \"9ac8e43bb38e3fb3438d822c4d8a8daa\"\nassert     string_to_md5(\"\\n\") == None\nassert     string_to_md5(\"test\") == \"9ac8e43bb38e3fb3438d822c4d8a8daa\"\nassert     string_to_md5(\"test\\ntest\") == \"9ac8e43bb38e3fb3438d822c4d8a8daa\"\n",
        "num_ids_2": 51,
        "num_ids_4": 104
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_md5(filename):\n    \"\"\"\n    Given a filename, return the md5 hash equivalent of the file.\n    Return None if the file does not exist.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_md5('abc') == '9ac68eabd3d7a8acf4d41b0e3f8c32b'\nassert     string_to_md5('abc') == None\nassert     string_to_md5('') == None\nassert     string_to_md5(None) == None\nassert     string_to_md5(' ') == None\n",
        "num_ids_2": 54,
        "num_ids_4": 82
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_md5('') == None\nassert     string_to_md5('abc') == '902fb3d6c51bcafad67bc18dfcc2675f'\nassert     string_to_md5('abcd') == 'a4ece0c44a26a4fc3387a83d2d8b75f2'\nassert     string_to_md5('ABC') == '902fb3d6c51bcafad67bc18dfcc2675f'\nassert     string_to_md5('1ABC') == '902fb3d6c51bcafad67bc18dfcc2675f'\n",
        "num_ids_2": 48,
        "num_ids_4": 122
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_md5('hello world') == 'a28a39b94c9892f4a7e07e582d44c89d'\nassert     string_to_md5('') == None\nassert     string_to_md5('a') == None\nassert     string_to_md5('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "num_ids_2": 52,
        "num_ids_4": 1023
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef string_to_sha1(text):\n    \"\"\"\n    Given a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    generate_integers(3,9) == [2,4,6]\n    generate_integers(1,1) == []\n    generate_integers(3,6) == [2,4,6]\n    generate_integers(1,5) == [1,2,3,4,5]\n    generate_integers(1,3) == [1,2,3]",
        "num_ids_2": 3,
        "num_ids_4": 3
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     generate_integers(10, 20) == [10, 12, 14, 16]\nassert     generate_integers(1, 3) == [1, 2]\nassert     generate_integers(3, 5) == [3, 4]\n",
        "num_ids_2": 42,
        "num_ids_4": 61
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\nassert     generate_integers(20, 10) == [20, 22, 24, 26, 28, 30]\nassert     generate_integers(10, 10) == [10, 11, 12, 13, 14, 15]\n",
        "num_ids_2": 54,
        "num_ids_4": 81
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     generate_integers(10, 20) == [10, 12, 14, 16, 18]\nassert     generate_integers(10, 10) == [10, 10]\nassert     generate_integers(1, 2) == [1, 2]\n",
        "num_ids_2": 44,
        "num_ids_4": 63
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(10, 20) == [12, 14, 16, 18]\nassert     generate_integers(3, 4) == [4, 6]\nassert     generate_integers(9, 12) == [10, 12]\n\nif __name__ == '__main__':\n    print(\"All tests passed!\")",
        "num_ids_2": 46,
        "num_ids_4": 84
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     generate_integers(20, 29) == [16, 18, 20, 22, 24]\nassert     generate_integers(1, 10) == [2, 4, 6, 8, 10]",
        "num_ids_2": 50,
        "num_ids_4": 50
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     generate_integers(1, 10) == list(range(2, 11, 2)), 'incorrect output'\n",
        "num_ids_2": 29,
        "num_ids_4": 29
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     generate_integers(4, 10) == [4, 6, 8, 0, 2, 4, 6, 8, 0]\nassert    generate_integers(3, 8) == [4, 6, 8]\nassert    generate_integers(10, 20) == [10, 12, 14, 16, 18, 20]\n\n\n\n\n",
        "num_ids_2": 54,
        "num_ids_4": 81
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n",
        "num_ids_2": 3,
        "num_ids_4": 3
    }
]