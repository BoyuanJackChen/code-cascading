[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     has_close_elements([5, 8, 10, 10, 8, 4, 0], 0.1) is True\nassert     has_close_elements([5, 8, 10, 10, 8, 4, 0], 1) is False\n\nimport math\ndef distance_between_points(x1: float, y1: float, x2: float, y2: float) -> float:\n    \"\"\" Returns the distance between two points (x1, y1) and (x2, y2) \"\"\"\n    return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2))\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert has_close_elements([1, 2, 3, 4, 5], 0) == True\nassert has_close_elements([1, 2, 3, 4, 5], 1) == False\nassert has_close_elements([1, 2, 3, 4, 5], 2) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhas_close_elements([1, 2, 3, 4], 0.1)\nhas_close_elements([1, 2, 3, 4], 1)\nhas_close_elements([1, 2, 3, 4], 2)\nhas_close_elements([1, 2, 3, 4], 3)\nhas_close_elements([1, 2, 3, 4], 4)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     has_close_elements([1, 2, 5, 6, 9], 2) is True\nassert     has_close_elements([1, 2, 5, 6, 9], 3) is False\nassert     has_close_elements([1, 2, 5, 6, 9], 4) is False\nassert     has_close_elements([1, 2, 5, 6, 9], 5) is True\nassert     has_close_elements([1, 2, 5, 6, 9], 6) is True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     has_close_elements([1, 1.01, 1.1, 1.11, 1.111], 0.999) == True\nassert     has_close_elements([1, 1.01, 1.1, 1.11, 1.111], 1) == False\n\nassert     has_close_elements([1, 1.01, 1.1, 1.11, 1.111], 0.99) == False\nassert     has_close_elements([1, 1.01, 1.1, 1.11, 1.111], 1.001) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nhas_close_elements([1, 2, 3], 2) == False\nhas_close_elements([2, 1, 3], 2) == True\n\nhas_close_elements([1, 2, 3], 5) == True\nhas_close_elements([1, 2, 3], 4) == False\nhas_close_elements([1, 2, 3], 3) == True\n\nhas_close_elements([2, 4, 5], 1) == False\nhas_close_elements([2, 4, 5], 2) == True\nhas_close_elements([2, 4, 5], 3) == False\nhas_close_elements([2, 4, 5], 4) == True\nhas_close_elements([2, 4, 5], 5) == True\nhas_close_elements([2, 4, 5], 6) == False\n\nhas_close_elements([1, 3, 4], 2) == True\nhas_close_elements([1, 3, 4], 3) == True\nhas_close_elements([1, 3, 4], 4) == False\nhas_close_elements([1, 3, 4], 5) == False\nhas_close_elements([1, 3, 4], 6) == False\n\nhas_close_elements([1, 3, 4, 5], 2) == True\nhas_close_elements([1, 3, 4, 5], 3) == True\nhas_close_elements([1, 3, 4, 5], 4) == True\nhas_close_elements([1, 3, 4, 5], 5) == False\nhas_close_elements([1, 3, 4, 5], 6) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     has_close_elements([1,2,3,4], 0.5) == False\nassert     has_close_elements([1,2,3,4], 1.5) == False\nassert     has_close_elements([1,2,3,4], 2.5) == False\nassert     has_close_elements([1,2,3,4], 3.5) == True\nassert     has_close_elements([1,2,3,4], 4.5) == True\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     has_close_elements([1, 2, 3], 3) == True\nassert     has_close_elements([1, 2, 3], 0) == False\nassert     has_close_elements([1, 1, 2, 2, 3, 3], 1.1) == True\nassert     has_close_elements([1, 1, 2, 2, 3, 3], 0.1) == False\nassert     has_close_elements([1, 2, 3], 1.2) == False\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     separate_paren_groups('((()))') ==     ['(', ')', ')']\nassert     separate_paren_groups('(())') ==     ['(', ')']\nassert     separate_paren_groups('((()()))') ==     ['(', ')', ')', ')']\nassert     separate_paren_groups('(((())))') ==     ['(', ')', ')', ')']\nassert     separate_paren_groups('((()((()())))(())())()') ==     ['(', ')', ')', '(', ')', ')']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    separate_paren_groups(\"( ( ( ( ) ) ) ) )\") == [\"( ( ( ) ) )\"]\n    separate_paren_groups(\"( ( ( ( ( ) ) ) ) ) )\") == [\"( ( ( ) ) )\", \"()\"]\n    separate_paren_groups(\"( ( ( ) ) ) ) )\") == [\"( ( ) )\", \")\"]\n    separate_paren_groups(\"( ( ) ) ) )\") == [\"( ( ) )\", \")\"]\n    separate_paren_groups(\"( ) ) ) )\") == [\"( )\", \")\"]\n    separate_paren_groups(\"( ( ) ) ) )\") == [\"( )\", \")\"]\n    separate_paren_groups(\"()\") == [\"\"]\n    separate_paren_groups(\"\") == [\"\"]\n    separate_paren_groups
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     separate_paren_groups('()())())' == ['()()()', '()', '()()'],\\\n        \"Wrong output\"\nassert     separate_paren_groups('()())())('    ) == ['()()()()', '()()', '()()()'],\\\n        \"Wrong output\"\nassert     separate_paren_groups('((()()))'        ) == ['((()()))'],\\\n        \"Wrong output\"\nassert     separate_paren_groups('(())(((()())(())))))('    ) == ['((()())(()))', '((()())(()))', '((()())(()))', '((()())(())', '((()())(())', '((()()))', '((())(())', '((())(())', '((()))', '((()))', '((())', '((()))', '((())', '((())', '((())', '()()'],\\\n        \"Wrong output\"\nassert     separate_paren_groups
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     separate_paren_groups('(a)') == ['(a)']\nassert     separate_paren_groups('a)b(c)') == ['a)b', 'c)']\nassert     separate_paren_groups('a)b(c)') == ['a)b', 'c)']\nassert     separate_paren_groups('a)b(c)') == ['a)b', 'c)']\nassert     separate_paren_groups('a)b(c)') == ['a)b', 'c)']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert separate_paren_groups(\"(1 + 2) * (3 + 4)\") == [\"(1 + 2)\", \"(3 + 4)\"]\nassert separate_paren_groups(\"(1 + 2) * (3 + 4) * (5 + 6)\") == [\"(1 + 2)\", \"(3 + 4)\", \"(5 + 6)\"]\nassert separate_paren_groups(\"(1 + 2) * (3 + 4)\") == [\"(1 + 2)\", \"(3 + 4)\"]\nassert separate_paren_groups(\"(1 + 2)\") == [\"(1 + 2)\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     separate_paren_groups(\"()((()()))\") == [\"(()())\"], \\\n\"Should be able to separate into groups of balanced parentheses\"\nassert     separate_paren_groups(\"()(()())()\") == [\"(()())\"], \\\n\"Should be able to separate into groups of balanced parentheses\"\nassert     separate_paren_groups(\"(()(()()))\") == [\"(()(()))\"], \\\n\"Should be able to separate into groups of balanced parentheses\"\nassert     separate_paren_groups(\"()(())()\") == [\"(()()))\"], \\\n\"Should be able to separate into groups of balanced parentheses\"\nassert     separate_paren_groups(\"(())())\") == [\"(())())\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     separate_paren_groups('(((()))') == ['(((()))']\nassert     separate_paren_groups('(((()()()((())))))') == ['(((()()()((())))))']\nassert     separate_paren_groups
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     separate_paren_groups('{(()())}') == ['{', '()', ')', '}']\nassert     separate_paren_groups('(((()))') == ['(((()))']\nassert     separate_paren_groups('{(())}') == ['{', '()', ')', '}']\nassert     separate_paren_groups('{(((())))}') == ['{', '(', ')', ')', '}']\nassert     separate_paren_groups('{(((()()))}') == ['{', '(', ')', '(', ')', ')', '}']\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     separate_paren_groups(\"(a) (b) (c)\") == [\"a\", \"b\", \"c\"]\nassert     separate_paren_groups(\"(a (b (c)))\") == [\"a\", \"b\", \"c\"]\nassert     separate_paren_groups(\"((a) (b) (c))\") == [\"(a)\", \"(b)\", \"(c)\"]\nassert     separate_paren_groups(\"((a) (b (c))\") == [\"((a)\", \"b\", \"(c)\"]\nassert     separate_paren_groups(\"(a (b (c))\") == [\"(a)\", \"b\", \"(c)\"]\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nseparate_paren_groups(\"(A(B(C(D)E)F)G)H(I(J)K)L\") == ['A(B(C(D)E)F)G', 'H(I(J)K)L']\nassert separate_paren_groups(\"(A(B(C(D)E)F)G)H(I(J)K)L\") == ['A(B(C(D)E)F)G', 'H(I(J)K)L']\nassert separate_paren_groups(\"(A(B(C(D)E)F)G)H\") == ['A(B(C(D)E)F)G', 'H']\nassert separate_paren_groups(\"(A(B(C(D)E)F)G)H\") == ['A(B(C(D)E)F)G', 'H']\nassert separate_paren_groups(\"A(B(C(D)E)F)G)H\") == ['A(B(C(D)E)F)G)H']\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert truncate_number(2.5) == 2\nassert truncate_number(3.5) == 3\nassert truncate_number(4.5) == 4\nassert truncate_number(5.5) == 5\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     truncate_number(5.3) == 4.3\nassert     truncate_number(3.8) == 4.2\nassert     truncate_number(3.0) == 3.0\nassert     truncate_number(0.3) == 0.3\nassert     truncate_number(1.9) == 1.9\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     truncate_number(1.5) == 1\nassert     truncate_number(2.5) == 2\nassert     truncate_number(1.4) == 1\nassert     truncate_number(1.51) == 1\nassert     truncate_number(1.99999) == 2\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert truncate_number(14.85) == 1.8\nassert truncate_number(12.78) == 1.8\nassert truncate_number(12.29) == 1.2\nassert truncate_number(12.41) == 1.2\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    assert truncate_number(0.1) == 0.1\n    assert truncate_number(0.1) == 0.1\n    assert truncate_number(0.99) == 0.1\n    assert truncate_number(0.01) == 0\n    "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     truncate_number(1.1) == 1\nassert     truncate_number(2.99) == 2\nassert     truncate_number(4.99) == 4\nassert     truncate_number(5.99) == 5\nassert     truncate_number(7.99) == 7\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     below_zero([2, 3, 4, -5]) == False\nassert     below_zero([2, 3, 4, -5, -1]) == True\n\ndef even_index_sum(operations: List[int]) -> int:\n    \"\"\"\n    Return the sum of all elements of the list, except for the last one.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     below_zero([2, 1, -3, 3, 3]) == False\nassert     below_zero([2, 1, -3, 3, -5]) == True\nassert     below_zero([2, 1, -3, 3, 4]) == False\nassert     below_zero([2, 1, -3, 3, -5]) == True\nassert     below_zero([2, 1, -3, 3, -4]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_zero(    [1, 2, 3, 4]) == False\nassert     below_zero(    [1, 2, 3, 4, 5]) == True\nassert     below_zero(    [5, 4, 3, 2, 1]) == False\nassert     below_zero([-1, -2, -3, -4]) == True\nassert     below_zero([-1, -2, -3, -4, -5]) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef convert_to_index(numbers: List[int]) -> int:\n    \"\"\"\n    Convert an integer into its index in the list.\n    Return the index of the int if it's inside the list,\n    otherwise return None.\n    \"\"\"\n    for i, num in enumerate(numbers):\n        if num == n:\n            return i\n    return None\n\nassert convert_to_index(numbers = [1, 2, 3, 4, 5]) == 3\nassert convert_to_index(numbers = [1, 2, 3, 4, 5, 6]) == None\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef is_valid_transaction(operation: int) -> bool:\n    \"\"\" You are given a list of deposit and withdrawal operations. If any operation is outside\n    the list, then it's a valid transaction. The function should return False if there are\n    any operations that do not fulfil requirements described in the list below.\n    You can assume that the list is valid, i.e. transactions are ordered, so that you can\n    check for the first and last element of the list.\n    Please consider that a transaction should be valid if the sum of deposits equals the sum of\n    withdrawals.\n\n    Requirements:\n    1. deposit can't be negative\n    2. withdrawal can't be positive\n    3. withdrawal must be smaller than the deposit\n    \"\"\"\n    pass\n\n\ndef validate_balance(balance: int) -> bool:\n    \"\"\" You are given a bank account balance. You should check if this balance meets the\n    following criteria:\n    1. If the balance is equal or greater than zero, return True.\n    2. Otherwise return False.\n    \"\"\"\n    pass\n\n\ndef validate_balance_iterative(balance: int) -> bool:\n    \"\"\" You are given a bank account balance. You should check if this balance meets the\n    following criteria:\n    1. If the balance is equal or greater than zero, return True.\n    2. Otherwise return False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_zero([0,0,0,0]) == True\nassert     below_zero([0,0,1,1]) == False\nassert     below_zero([0,0,0,1]) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     below_zero(\n            [2, -2, 2, 1, 2, -5, 2]) is True, \"Should return true\"\nassert     below_zero(\n            [1, 1, 1, 1, 1]) is False, \"Should return false\"\n\n\ndef cumulative_sum(operations: List[int]) -> List[int]:\n    \"\"\" You are given a list of deposit and withdrawal operations on a bank account that starts\n    with zero balance. Your task is to return a cumulative sum of all deposit and withdrawals.\n    For example:\n    if deposit[0] = 2 then cumulate[0] = 2\n    if deposit[1] = -2 then cumulate[1] = 3\n    if deposit[2] = 2 then cumulate[2] = 2\n    if deposit[3] = 1 then cumulate[3] = 3\n    if deposit[4] = -5 then cumulate[4] = -8\n    cumulate = [2, 3, 2, 3, -8]\n    \"\"\"\n    cumulate = []\n    for i in range(0, len(operations)):\n        if i == 0:\n            cumulate.append(operations[0])\n        else:\n            cumulate.append(cumulate[i-1] + operations[i])\n    return cumulate\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     below_zero([100,2,-3,0,0,0])     ==     True\nassert     below_zero([100,0,1,-2,0,0])     ==     False\nassert     below_zero([100,0,0,0,0,0])     ==     False\nassert     below_zero([100,1,-2,0,0,0])     ==     True\nassert     below_zero([100,0,100,1,-2,0]) ==     True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_zero([0, -1, 0, 0, -3]) == False, \"Wrong output\"\nassert     below_zero([0, -1, 0, 0, -1]) == True, \"Wrong output\"\nassert     below_zero([0, -1, 0, 0, 1]) == False, \"Wrong output\"\nassert     below_zero([0, -1, 0, 0, -5]) == False, \"Wrong output\"\nassert     below_zero([0, 0, 0, 0, 0]) == False, \"Wrong output\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     below_zero([0,0,-1]) == True\nassert     below_zero([0,0,0,1]) == False\nassert     below_zero([-2,-1,-3,4]) == False\nassert     below_zero([-2,-1,3,4]) == True\nassert     below_zero([-3,-1,0,4]) == True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mean_absolute_deviation([1, 3, 5, 2, 6, 7, 8, 9]) == 5.\nassert     mean_absolute_deviation([2, 4, 6, 8, 10, 12, 14, 16]) == 2.\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8]) == 3.\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7.\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     mean_absolute_deviation([10, 12, 14, 20]) == 5.0\nassert mean_absolute_deviation([10, 10, 10, 20]) == 0.0\nassert mean_absolute_deviation([10, 10, 12, 20]) == 2.5\n\nassert mean_absolute_deviation([-1, 2, 3, 5]) == 2\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef variance_of_a_given_list(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Variance of a given dataset.\n    Variance is the average squared difference between each element and a centerpoint\n    (mean in this case):\n    Var = average | x - x_mean |^2\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mean_absolute_deviation([1, 2, 3, 4]) == 2.25\nassert     mean_absolute_deviation([-1, -2, -3, -4]) == 2.25\nassert     mean_absolute_deviation([-0.5, -2.5, -3.5, -4.5]) == 2.5\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert mean_absolute_deviation([1, 2, 3, 4, 5]) == 1.75\nassert mean_absolute_deviation([3, 4, 5, 6, 7]) == 2.5\nassert mean_absolute_deviation([-1, -2, -3, -4, -5]) == 1.5\nassert mean_absolute_deviation([2, 1, -3, -4, -5]) == 1.75\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mean_absolute_deviation([0, 1, 2, 3, 4, 5]) == 1.0\nassert     mean_absolute_deviation([-2, -1, 0, 1, 2]) == 1.0\nassert     mean_absolute_deviation([-1, -2, -3, -4, -5]) == 2.0\nassert     mean_absolute_deviation([1, 2, 3, 4, 5, 6]) == 2.0\n\n\ndef median(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median\n    around the median of this dataset.\n    Median is the middle element of the sorted list of input numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    intersperse(numbers = [1, 2, 3, 4], delimeter = 10) == [1, 10, 2, 10, 3, 10, 4, 10]\n    intersperse(numbers = [1, 2, 3, 4], delimeter = 10) == [1, 2, 10, 10, 3, 10, 4, 10]\n    intersperse(numbers = [1, 2, 3, 4], delimeter = 10) == [1, 2, 3, 4, 10, 10, 10, 10]\n    intersperse(numbers = [1, 2, 3, 4], delimeter = 10) == [1, 2, 3, 4, 10, 10, 10, 10]\n\n\ndef fibonacci(n: int) -> int:\n    \"\"\" Return the `nth` element in the Fibonacci sequence\n\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(2)\n    1\n    >>> fibonacci(3)\n    2\n    >>> fibonacci(4)\n    3\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(6)\n    8\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(8)\n    21\n    >>> fibonacci(9)\n    34\n    >>> fibonacci(10)\n    55\n    >>> fibonacci(11)\n    89\n    >>> fibonacci(12)\n    144\n    >>> fibonacci(13)\n    233\n    >>> fibonacci(14)\n    377\n    >>> fibonacci(15)\n    610\n    >>> fibonacci(16)\n    987\n    >>> fibonacci(17)\n    1597\n    >>> fibonacci(18)\n    2584\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersperse([1,2,3],2) == [1,2,2,3]\nassert     intersperse([1,2,3],3) == [1,2,3,3,3]\nassert     intersperse([1,2,3],4) == [1,2,3,4,4]\nassert     intersperse([1,2,3],5) == [1,2,3,4,5,5]\nassert     intersperse([1,2,3],6) == [1,2,3,4,5,6,6]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    intersperse([1, 2, 3], -1) == [1, -1, 2, -1, 3]\n    intersperse([1, 2, 3], 1) == [1, 2, 1, 3]\n    intersperse([1, 2, 3], 2) == [1, 2, 2, 1, 3]\n    intersperse([1, 2, 3], 3) == [1, 2, 3, 1, 2, 3]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersperse([1,2,3,4,5,6,7], 5) ==    [1,5,2,5,3,5,4,5,6,5,7]\nassert     intersperse([], 5) ==    []\nassert     intersperse([1,2,3], 4) ==    [1,4,2,3]\nassert     intersperse([1,2,3,4], 5) ==    [1,5,2,3,4]\nassert     intersperse([1,2,3,4], 5, 2) ==    [2,1,4,3,2]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersperse([], -1) == []\nassert     intersperse([1, 2, 3], -1) == [1, -1, 2, -1, 3]\nassert     intersperse([1, 2, 3, 4, 5], -1) == [1, -1, 2, -1, 3, -1, 4, -1, 5]\nassert     intersperse([], 1) == []\nassert     intersperse([1, 2, 3], 1) == [1, 1, 2, 2, 3, 3]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert idesperse([1, 2, 3, 4], 3) == [1, 3, 3, 4, 3, 4]\nassert idesperse([1, 2, 3, 4], -3) == [1, 2, 3, 4, 1, 2, 3, 4]\nassert idesperse([1, 2, 3, 4], 1) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\nassert idesperse([1, 2, 3, 4], 0) == []\nassert idesperse([1, 2, 3, 4], -2) == []\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersperse([1,2,3,4,5], 2) == [1,2,2,3,4,5]\nassert     intersperse([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     intersperse([1,2,3,4,5], 1) == [1,2,3,4,5,1]\nassert     intersperse([1,2,3,4,5], -1) == [1,2,3,4,5,2,3,4,5,1]\nassert     intersperse([1,2,3,4,5], -2) == [1,2,3,4,5,2,3,4,5]\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert idesperse([1,2,3], 2) == [1,2,2,3]\nassert idesperse([1,2,3], 0) == [1,2,3]\nassert idesperse([1,2,3], 1) == [1,2,3,1]\nassert idesperse([1,2,3], 3) == [1,2,3,1,2,3]\nassert idesperse([1,2,3], 5) == [1,2,3,1,2,3,1,2,3]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nparse_nested_parens(\"(((())))\") == [2]\nassert\nparse_nested_parens(\"((()()))\") == [3]\nassert\nparse_nested_parens(\"(((()()()))\") == [4]\nassert\nparse_nested_parens(\"((()(())))\") == [2, 2]\nassert\nparse_nested_parens(\"((((()())))(()))\") == [3, 3, 3]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_nested_parens(\"()\") == []\nassert parse_nested_parens(\"(()())\") == [1]\nassert parse_nested_parens(\"(()(()))\") == [1, 2]\nassert parse_nested_parens(\"(((((((())()()))))))\") == [1, 2, 3, 4, 5]\nassert parse_nested_parens(\"(((((((((((()()())))))()))))))\") == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parse_nested_parens(\"(((((())()))(((()()))))\") == 5\nassert     parse_nested_parens(\"((((((()()))(((()())))))()))\") == 4\nassert     parse_nested_parens(\"((((((()()))(((()())))))()))\") == 3\nassert     parse_nested_parens(\"(((((()()))))\") == 2\nassert     parse_nested_parens(\"((()))\") == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parse_nested_parens('((()))') == [2], 'parse_nested_parens Failed'\nassert     parse_nested_parens('(()())') == [3], 'parse_nested_parens Failed'\nassert     parse_nested_parens('((()()))') == [3], 'parse_nested_parens Failed'\nassert     parse_nested_parens('((()()()))') == [4], 'parse_nested_parens Failed'\nassert     parse_nested_parens('((()())((()))(((()))))') == [5], 'parse_nested_parens Failed'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parse_nested_parens('(())') == [1]\nassert     parse_nested_parens('(())()') == [1, 1]\nassert     parse_nested_parens('((()()))') == [2, 1, 1]\nassert     parse_nested_parens('((((((()))))))') == [3, 2, 1, 1]\nassert     parse_nested_parens('(((((((((()))))))))') == [4, 3, 2, 1, 1]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_nested_parens(\"(())\") == [0]\nassert     parse_nested_parens(\"((()))\") == [0,0]\nassert     parse_nested_parens(\"(((())()))\") == [0,0,0]\nassert     parse_nested_parens(\"((()()))(()(()))\") == [0,0,0,1]\nassert     parse_nested_parens(\"(((((())())))(()))\") == [0,0,0,1,0,0,0]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_nested_parens(\"((()))\") == 2\nassert parse_nested_parens(\"((()()))\") == 3\nassert parse_nested_parens(\"(((()()))\") == 3\nassert parse_nested_parens(\"((((()()))))\") == 4\nassert parse_nested_parens(\"((((()())(()))()(()))(()(())))\") == 5\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert parse_nested_parens(\"()()\") == [0, 1]\nassert parse_nested_parens(\"()(()())\") == [0, 1, 2]\nassert parse_nested_parens(\"(()())(())\") == [0, 1, 2, 3]\nassert parse_nested_parens(\"((())())((()()))\") == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_nested_parens('(())') == [1,1]\nassert     parse_nested_parens('(())()') == [1,2]\nassert     parse_nested_parens('(()(()))') == [2,2]\nassert     parse_nested_parens('(((((()))))') == [3,3]\nassert     parse_nested_parens('(())()(())(()(()))') == [1,4]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"bd\") == [\"d\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"cb\") == [\"d\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"ad\") == [\"d\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"ab\") == [\"d\"]\nassert     filter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"cbc\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert filter_by_substring([], 'abc') == []\nassert filter_by_substring(['ABC', '123'], '123') == ['ABC']\nassert filter_by_substring(['aBC', 'a123', 'abC'], '123') == ['ABC']\nassert filter_by_substring(['abc', 'ABC', 'aBC'], 'a123') == ['ABC']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_by_substring([\"cat\", \"bats\", \"laptop\", \"laptop\", \"toy\", \"car\", \"car\", \"machine\", \"mouse\", \"mouse\", \"computer\", \"computer\"], \"bat\") == [\"bats\", \"laptop\", \"car\", \"mouse\", \"computer\"]\nassert     filter_by_substring([\"cat\", \"bats\", \"laptop\", \"laptop\", \"toy\", \"car\", \"car\", \"machine\", \"mouse\", \"mouse\", \"computer\", \"computer\"], \"bat\") == [\"bats\", \"laptop\", \"car\", \"mouse\", \"computer\"]\nassert     filter_by_substring([\"cat\", \"bat\", \"laptop\", \"laptop\", \"toy\", \"car\", \"car\", \"machine\", \"mouse\", \"mouse\", \"computer\", \"computer\"], \"bat\") == [\"bat\", \"laptop\", \"car\", \"mouse\", \"computer\"]\nassert     filter_by_substring([\"cat\", \"bat\", \"laptop\", \"laptop\", \"toy\", \"car\", \"car\", \"machine\", \"mouse\", \"mouse\", \"computer\", \"computer\"], \"to\") == [\"laptop\", \"car\", \"computer\"]\nassert     filter_by_substring([\"cat\", \"bat\", \"laptop\", \"laptop\", \"toy\", \"car\", \"car\", \"machine\", \"mouse\", \"mouse\", \"computer\", \"computer\"], \"toy\") == [\"toy\", \"car\", \"computer\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef filter_by_first_character(strings: List[str],\n                              first_character: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given character\n    \"\"\"\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_by_substring([\"succeed\", \"fails\", \"succeed\", \"fails\", \"fails\"], \"f\") == [\"fails\"]\nassert     filter_by_substring([\"succeed\", \"succeed\", \"fails\", \"fails\"], \"succeed\") == [\"succeed\"]\nassert     filter_by_substring([\"succeed\", \"fails\", \"fails\"], \"succeed\") == [\"fails\", \"succeed\"]\nassert     filter_by_substring([\"succeed\", \"succeed\", \"fails\", \"fails\"], \"f\") == [\"fails\"]\nassert     filter_by_substring([\"succeed\", \"succeed\", \"succeed\", \"succeed\", \"succeed\"], \"succeed\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_by_substring([\"aa\", \"ab\", \"ac\"], \"ac\") == [\"aa\", \"ac\"]\nassert     filter_by_substring([\"aa\", \"ab\", \"ac\"], \"bd\") == []\nassert     filter_by_substring([\"aa\", \"ab\", \"ac\"], \"ac\") == [\"aa\", \"ac\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_substring([\"hello\", \"hi\", \"bye\", \"goodbye\", \"yo\"], \"yo\") == [\"bye\", \"goodbye\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"bye\", \"goodbye\", \"yo\"], \"abc\") == []\nassert     filter_by_substring([\"hello\", \"hi\", \"bye\", \"goodbye\", \"yo\"], \"o\") == [\"bye\", \"goodbye\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"bye\", \"goodbye\", \"yo\"], \"lo\") == [\"hello\", \"hi\", \"goodbye\"]\nassert     filter_by_substring([\"hello\", \"hi\", \"bye\", \"goodbye\", \"yo\"], \"goodbye\") == [\"goodbye\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_by_substring([\"asdf\", \"asdfqwer\", \"12345\"], \"asdf\") == [\"asdf\", \"12345\"]\nassert     filter_by_substring([\"qwerty\", \"asdfqwer\", \"12345\"], \"asdf\") == [\"qwerty\", \"12345\"]\nassert     filter_by_substring([\"asdf\", \"qwerty\", \"qwerty\", \"12345\"], \"asdf\") == [\"qwerty\", \"12345\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_by_substring([\"1\",\"2\",\"3\",\"4\",\"5\"], \"2\") == [\"2\",\"3\",\"4\",\"5\"]\nassert     filter_by_substring([\"1\",\"2\",\"3\",\"4\",\"5\"], \"5\") == []\nassert     filter_by_substring([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], \"7\") == [\"7\"]\nassert     filter_by_substring([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"], \"8\") == [\"8\",\"9\"]\nassert     filter_by_substring([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"], \"8\") == [\"8\",\"9\",\"10\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    sum_product([1, 2, 3, 4]) == (1, 12)\nassert \n    sum_product([-1, 0]) == (-1, 0)\nassert \n    sum_product([-2, 3, 4, 6, 0]) == (-4, 48)\nassert \n    sum_product([-2, 3, 4, 6, 0, 7]) == (-4, 48)\nassert \n    sum_product([-2, 3, 4, 6, 0, 7, 9]) == (-4, 48)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert\n\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_product([0,0,0,0]) == (0, 0)\nassert     sum_product([0]) == (0, 0)\nassert     sum_product([1,2,3,4]) == (15, 120)\nassert     sum_product([1,2,3,4,5]) == (15, 120)\nassert     sum_product([1,2,3,4,5,6]) == (15, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (6, 15)\nassert     sum_product([1, 2, 3, 4, 5]) == (15, 120)\nassert     sum_product([-2, 1, -3, 4, -5]) == (-10, -60)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3]) == (3, 6)\nassert     sum_product([5]) == (5, 5)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4, 5, 6]) == (45, 120)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    sum_product([1, 2, 3, 4]) == (5, 24), \"Wrong value\"\n    sum_product([2, 4, 6]) == (8, 48), \"Wrong value\"\n    sum_product([]) == (0, 1), \"Wrong value\"\n    sum_product([1, 2, 3, 4, 5]) == (10, 120), \"Wrong value\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([1, 2, 3, 4]) == (15, 24)\nassert     sum_product([-1, 2, 3, 4]) == (-1, 24)\nassert     sum_product([-10, 2, 3, 4]) == (-10, 24)\nassert     sum_product([5, 6, 7, 8]) == (30, 336)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef left_multiply(numbers: List[int]) -> int:\n    \"\"\" \n    For a given list of integers, return the product of all the integers in a list multiplied by -1. \n    An empty product should be equal to 1.\n    \"\"\"\n    pass\n\n\ndef find_index(subset: List[int], target: int) -> int:\n    \"\"\"\n    For a given list of integers and a target value, return the index of the first integer in the list \n    that is greater than or equal to the target.\n    If no such integer exists, return -1.\n    \"\"\"\n    pass\n\n\ndef is_subset(subset: List[int], superset: List[int]) -> bool:\n    \"\"\" \n    Return True if subset is a subset of superset. \n    Otherwise, return False.\n    The given list subset consists of positive integers, \n    and superset consists of positive integers as well.\n    \"\"\"\n    pass\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\n    Check if a given string is a palindrome. \n    The given string is a palindrome if the reverse of the string is equal to the original string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_product([]) == (0, 1)\nassert     sum_product([2, 4, 6]) == (30, 216)\nassert     sum_product([1, 2, 3, 4]) == (14, 24)\nassert     sum_product([0, 1, 2, 3, 4, 5]) == (30, 120)\nassert     sum_product([6, 4, 2, 1, -4, 5]) == (42, -60)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_product([1,2,3,4]) == (10, 24)\nassert     sum_product([1,2,3,4,5]) == (15, 120)\nassert     sum_product([1,2,3,4,5,6]) == (15, 720)\nassert     sum_product([]) == (0, 1)\nassert     sum_product([0]) == (0, 1)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rolling_max([2,3,4,5,6]) == [4,5,6,6,6]\nassert     rolling_max([1,3,5,8,9]) == [3,5,8,8,8]\nassert     rolling_max([1,3,5,8,9,2]) == [5,8,8,8,8,8]\nassert     rolling_max([1,3,5,8,9,2,6,7,8,9]) == [9,9,9,9,9,9,9,9,9,9]\nassert     rolling_max([1,3,5,8,9,2,6,7,8,9,2,5,7,8,9,2,6,7,8,9]) == [9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rolling_max([]) == []\nassert     rolling_max([1]) == [1]\nassert     rolling_max([1, 2]) == [1, 2]\nassert     rolling_max([1, 2, 3]) == [1, 2, 3]\nassert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     rolling_max([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     rolling_max([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    rolling_max([5, 5, 5]) == [5, 5, 5]\nassert \n    rolling_max([3, 5, 1]) == [5, 5, 5]\nassert \n    rolling_max([3, 5, 5, 5, 1]) == [5, 5, 5, 5, 5]\nassert \n    rolling_max([3, 5, 5, 5, 1, 1]) == [5, 5, 5, 5, 5, 5]\nassert \n    rolling_max([1, 2, 3, 4, 5]) == [5, 5, 5, 5, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rolling_max([1,2,3,4]) == [1,2,3,4]\nassert     rolling_max([1,2,3,4,5]) == [5,5,5,5,5]\nassert     rolling_max([1,2,3,4,5,6]) == [5,5,5,5,5,6]\nassert     rolling_max([1,2,3,4,5,6,7]) == [7,7,7,7,7,7,7]\nassert     rolling_max([1,2,3,4,5,6,7,8]) == [8,8,8,8,8,8,8,8]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rolling_max([1, 2, 3, 4, 5]) == [5, 5, 5, 5, 5]\nassert     rolling_max([1, 2, 3, 4, 5, 6]) == [6, 6, 6, 6, 6, 6]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7]) == [7, 7, 7, 7, 7, 7, 7]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8]) == [8, 8, 8, 8, 8, 8, 8, 8]\nassert     rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [9, 9, 9, 9, 9, 9, 9, 9, 9]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rolling_max([2, -1, 5, -4, 0, 3, -5]) == [5, 5, 5, 5, 5, 5, 0]\nassert     rolling_max([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     rolling_max([0, 1, 2, 3, 4, 5, 4, 1, 0]) == [0, 1, 2, 3, 4, 5, 5, 5, 5]\nassert     rolling_max([0, -1, 2, 3, 4, 5, 5, 1, 0]) == [0, 1, 2, 3, 4, 5, 5, 5, 5]\nassert     rolling_max([-1, 0, 1, 2, 3, 4, 5, 5, -1]) == [0, 1, 2, 3, 4, 5, 5, 5, 5]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # test the first example\nassert rolling_max([1, 3, 5, 7, 9, 10, 17, 19, 20]) == [1, 3, 5, 7, 9, 10, 17, 19, 20]\n\n    # test the second example\nassert rolling_max([1, 3, 5, 7, 9, 10, 17, 19, 20]) == [17, 20, 20, 20, 20, 20, 20, 20, 20]\n\n    # test the third example\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     make_palindrome(\"\") == \"\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"ab\") == \"aba\"\nassert     make_palindrome(\"abc\") == \"abcba\"\nassert     make_palindrome(\"abcd\") == \"abcdba\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_palindrome(\"abcba\") == \"aabba\"\nassert     make_palindrome(\"abbaba\") == \"ababaab\"\nassert     make_palindrome(\"abcb\") == \"aabca\"\nassert     make_palindrome(\"a\") == \"a\"\nassert     make_palindrome(\"aab\") == \"aaba\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_palindrome('abcba') == 'abccba'\nassert     make_palindrome('pqr') == 'qpr'\nassert     make_palindrome('pqrstuvwxyz') == 'yzxwvutsrqponmlkjihgfedcba'\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_palindrome(\"radar\")    ==    \"rarrad\"\nassert     make_palindrome(\"abcd\")    ==    \"dcba\"\nassert     make_palindrome(\"a\")    ==    \"a\"\nassert     make_palindrome(\"ab\")    ==    \"ba\"\nassert     make_palindrome(\"zzzzzz\")    ==    \"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_palindrome(\"racecar\")    == True\nassert     is_palindrome(\"kayak\")    == False\nassert     is_palindrome(\"civic\")    == True\nassert     is_palindrome(\"happy\")    == True\nassert     is_palindrome(\"radar\")    == True\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     make_palindrome(\"abcdcba\") == \"dcbaabc\", \"Palindrome\"\nassert not make_palindrome(\"abcd\") == \"dcba\", \"Not a palindrome\""
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmake_palindrome('a') == 'a'\nmake_palindrome('ab') == 'aba'\nmake_palindrome('abcd') == 'dcba'\nmake_palindrome('abcde') == 'eabcde'\nmake_palindrome('abacd') == 'a'\nmake_palindrome('abccba') == 'bcba'\nmake_palindrome('aabcba') == 'bcba'\n\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_palindrome(\"aabaa\") == \"abaa\"\nassert     make_palindrome(\"abccba\") == \"cbaa\"\nassert     make_palindrome(\"Aa\") == \"A\"\n\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    string_xor('10101110010111100011101110010111011011100','10101110010111100011101110010111011011100') == \"110110101110111101110011010101011101\"\n    \nassert string_xor(\"10001110010111100011101110010111011011100\", \"10101110010111100011101110010111011011100\") == \"110110101110111101110011010101011101\"\n    \nassert string_xor(\"10001110010111100011101110010111011011100\", \"10101110010111100011101110010111011011100\") == \"110110101110111101110011010101011101\"\n\n\n\ndef binary_xor(a: str, b: str) -> str:\n    \"\"\" Input are two binary strings of equal length.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_xor(\"0100101\", \"1011011\") == \"1011011\"\nassert     string_xor(\"0100101\", \"0110111\") == \"1010011\"\nassert     string_xor(\"0100101\", \"0111111\") == \"1011011\"\nassert     string_xor(\"0100101\", \"0101111\") == \"1011011\"\nassert     string_xor(\"0100101\", \"0110011\") == \"1010011\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef string_xor_brute_force(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    if a == b:\n        return a\n    \n    n = max(len(a), len(b))\n    a = a.zfill(n)\n    b = b.zfill(n)\n    \n    result = \"\"\n    for i in range(n):\n        if a[i]!= b[i]:\n            result = result + a[i]\n    return result\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_xor( \"AAAAAABBBBBB\", \"BBBBBBBB\") == \"AAAAAABBBBBB\"\nassert     string_xor(\"AABBBBB\", \"BBBBBBB\") == \"AABBBBB\"\nassert     string_xor(\"AABBBBB\", \"BBBBBBB\") == \"BBBBBBB\"\nassert     string_xor
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_xor('AB', 'CD') == 'CD'\nassert     string_xor('AC', 'BC') == 'DC'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef list_xor(a: List[int], b: List[int]) -> List[int]:\n    \"\"\" Perform binary XOR on two lists and return the result.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_xor(\"01010101\",\"01010101\") == \"01010110\"\nassert     string_xor(\"01010101\",\"01010110\") == \"01010101\"\nassert     string_xor(\"01010101\",\"01010100\") == \"01010101\"\nassert     string_xor(\"01010101\",\"00110101\") == \"00110100\"\nassert     string_xor(\"01010101\",\"01010110\") == \"01010101\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_xor('a','a') == 'a'\nassert     string_xor('b','a') == 'a'\nassert     string_xor('c','b') == 'b'\nassert     string_xor('b','c') == 'c'\nassert     string_xor('a','b') == 'b'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_xor(\"AB\", \"CD\") == \"ED\"\nassert     string_xor(\"CD\", \"AB\") == \"ED\"\nassert     string_xor(\"ED\", \"AB\") == \"CD\"\nassert     string_xor(\"CD\", \"ED\") == \"AB\"\nassert     string_xor(\"AB\", \"AB\") == \" \"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     longest([\"pogoda\", \"dzien\"]) == None, \"Wrong result for list of strings\"\nassert     longest([\"pogoda\", \"dzien\", \"traffic\"]) == \"dzien\", \"Wrong result for list of strings\"\nassert     longest([\"pogoda\", \"dzien\", \"traffic\", \"szesc\"]) == \"dzien\", \"Wrong result for list of strings\"\nassert     longest([\"pogoda\", \"dzien\", \"traffic\", \"szesc\", \"szesc\"]) == \"dzien\", \"Wrong result for list of strings\"\nassert     longest([\"pogoda\", \"dzien\", \"traffic\", \"szesc\", \"szesc\"]) == \"traffic\", \"Wrong result for list of strings\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     longest([]) == None\nassert     longest(['']) == ''\nassert     longest(['a', 'ab', 'abc', 'abcd', 'abca']) == 'abc'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # 1.\n    string = [\"flower\",\"flow\",\"flight\"]\n    print(longest(string))\n\n    # 2.\n    string = [\"dog\",\"racecar\",\"car\"]\n    print(longest(string))\n\n    # 3.\n    string = []\n    print(longest(string))\n\n    # 4.\n    string = [\"short\",\"way\",\"too\",\"long\",\"mess\"]\n    print(longest(string))\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     longest([\"\"]) == None\nassert     longest([\"a\"]) == \"a\"\nassert     longest([\"ab\", \"a\"]) == \"a\"\nassert     longest([\"ab\", \"abc\"]) == \"abc\"\nassert     longest([\"ab\", \"abcd\"]) == \"abcd\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     longest([\"h\",\"e\",\"l\",\"l\",\"o\"]) == \"o\"\nassert     longest([\"h\",\"e\",\"l\",\"l\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\","
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     longest([]) == None\nassert     longest(['']) == ''\nassert     longest([\"\"]) == ''\nassert     longest([\" \"]) == ''\nassert     longest([\"f\"]) == 'f'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     longest([]) == None\nassert     longest(['']) == None\nassert     longest(['', 'a', '', 'b', '', 'c', '', 'a', 'a', '', 'b', '', 'c', '', 'd', '', '', 'e', '', 'f']) == 'f'\nassert     longest(['a', '', 'b', '', 'c', '', 'a', 'a', '', 'b', '', 'c', '', 'd', '', '', 'e', '', 'f']) == 'f'\nassert     longest(['a', '', 'b', '', 'c', '', 'd', '', 'a', 'a', '', 'b', '', 'c', '', 'e', '', '', 'f']) == 'e'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     longest([]) is None\nassert     longest(['']) is None\nassert     longest(['abc', 'abd', 'abcd']) == 'abcd'\nassert     longest(['aaa', 'abd', 'abcd']) == 'abcd'\nassert     longest(['abc', 'ab', 'abcd']) == 'ab'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     longest([\"cars\", \"cars\", \"cars\", \"cars\"]) == \"cars\"\nassert     longest([\"cars\", \"cars\", \"cars\"]) == \"cars\"\nassert     longest([\"cars\", \"cars\"]) == \"cars\"\nassert     longest([]) == None\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    \"\"\"\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    greatest_common_divisor(32, 8) == 2\n    greatest_common_divisor(20, 5) == 5\n    greatest_common_divisor(8, 4) == 2\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     greatest_common_divisor(12, 24) == 4\nassert     greatest_common_divisor(17, 17) == 17\nassert     greatest_common_divisor(9, 5) == 1\nassert     greatest_common_divisor(12, 24) == 4\nassert     greatest_common_divisor(17, 17) == 17\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     greatest_common_divisor(4, 8) == 1\nassert     greatest_common_divisor(2, 10) == 2\nassert     greatest_common_divisor(1, 5) == 1\nassert     greatest_common_divisor(3, 12) == 3\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     greatest_common_divisor(21, 8) == 1\nassert     greatest_common_divisor(2, 8) == 2\nassert     greatest_common_divisor(1, 8) == 1\nassert     greatest_common_divisor(7, 11) == 1\nassert     greatest_common_divisor(8, 11) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     greatest_common_divisor(1, 2) == 2\nassert greatest_common_divisor(2, 2) == 2\nassert greatest_common_divisor(3, 3) == 3\nassert greatest_common_divisor(4, 4) == 1\nassert greatest_common_divisor(13, 17) == 1\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_prefixes(\"abc\") == [\"a\", \"ab\"]\nassert     all_prefixes(\"bcd\") == [\"\", \"b\", \"bc\"]\nassert     all_prefixes(\"abcd\") == [\"\", \"ab\", \"abc\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_prefixes(\"the quick brown fox jumps over the lazy dog\") == ['the', 'the ', 'th', 'thi', 'thou', 'the ', 't', 'he', 'quick', 'qui', 'quis', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'quik', 'q"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_prefixes('abc') == ['a', 'ab', 'abc']\nassert     all_prefixes('abcdefg') == ['a', 'ab', 'abc', 'abf', 'abg', 'abcdef', 'abdefg']\nassert     all_prefixes('abcdefgh') == ['a', 'ab', 'abc', 'abf', 'abg', 'abcdef', 'abdefg', 'abdefgh']\nassert     all_prefixes('abcdefghij') == ['a', 'ab', 'abc', 'abf', 'abg', 'abcdef', 'abdefg', 'abdefghi']\nassert     all_prefixes('abcdefghijklmn') == ['a', 'ab', 'abc', 'abf', 'abg', 'abcdef', 'abdefg', 'abdefghi', 'abdefghij']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    all_prefixes(\"a\") == ['a']\n    all_prefixes(\"ab\") == ['a', 'ab']\n    all_prefixes(\"aba\") == ['a', 'ab', 'aba']\n    all_prefixes(\"abc\") == ['a', 'ab', 'abc']\n    all_prefixes(\"abca\") == ['a', 'ab', 'abc', 'abca']\n    all_prefixes(\"abcabc\") == ['a', 'ab', 'abc', 'abcabc']\n\nassert not all_prefixes(\"cab\")\nassert not all_prefixes(\"cab\")\n\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_prefixes(\"geeksforgeeks\") == ['geeks', 'gef', 'gek', 'gefo', 'geks', 'gekz', 'geksr']\nassert all_prefixes(\"geeksforgeeksgeeks\") == ['geeks', 'gef', 'gek', 'gefo', 'geks', 'gekz', 'geksr']\nassert all_prefixes(\"geeksforgeeksgeeksgeeks\") == ['geeks', 'gef', 'gek', 'gefo', 'geks', 'gekz', 'geksr']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_prefixes(\"hello\") == ['h', 'he', 'hel', 'hell', 'hellp', 'hellos']\nassert     all_prefixes(\"Hello\") == ['H', 'He', 'Hel', 'Help', 'Helos']\nassert     all_prefixes(\"abracadabra\") == ['a', 'ab', 'abr', 'abra', 'abrac', 'abraco', 'abracadabra']\nassert     all_prefixes(\"\") == []\nassert     all_prefixes(\"A\") == ['A']\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\", \"ac\", \"b\", \"bc\", \"c\"]\nassert all_prefixes(\"abcd\") == [\"\", \"a\", \"ab\", \"abc\", \"ac\", \"b\", \"bc\", \"c\", \"d\"]\nassert all_prefixes(\"abca\") == [\"\", \"a\", \"ab\", \"ac\", \"a\", \"bc\", \"bc\", \"ac\", \"c\"]\nassert all_prefixes(\"abcba\") == [\"\", \"a\", \"ab\", \"abc\", \"ac\", \"b\", \"bc\", \"bc\", \"ac\", \"c\", \"d\"]\nassert all_prefixes(\"abcabc\") == [\"\", \"a\", \"ab\", \"abc\", \"ac\", \"b\", \"bc\", \"bc\", \"ac\", \"c\", \"d\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_prefixes(\"leo\") == [\"leo\"]\nassert     all_prefixes(\"levin\") == [\"levi\", \"levin\"]\nassert     all_prefixes(\"levin\") == [\"levi\", \"levin\"]\nassert     all_prefixes(\"levin\") == [\"levi\", \"levin\"]\nassert     all_prefixes(\"levi\") == [\"levi\"]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_prefixes('coco') == ['coco']\nassert     all_prefixes('cocofy') == ['coco', 'cocofy', 'coco-fy', 'cocofy-', 'coco-fy-']\nassert     all_prefixes('pocofy') == ['poco', 'poco-fy', 'pocofy-', 'poco-fy-']\nassert     all_prefixes('sofhe') == ['sofhe']\nassert     all_prefixes('sofhe-') == ['sofhe','sofhe-']\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_sequence(3) == \"000 010\"\nassert     string_sequence(0) == \"\"\nassert     string_sequence(1) == \"000\"\nassert     string_sequence(2) == \"010\"\nassert     string_sequence(3) == \"000 010\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert\nassert string_sequence(1) == '0'\nassert string_sequence(2) == '0 1'\nassert string_sequence(5) == '0 1 2 3 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    string_sequence(4) == '0 1 2 3', \"Expected the sequence 0 1 2 3\"\n    string_sequence(5) == '0 1 2 3 4', \"Expected the sequence 0 1 2 3 4\"\n    string_sequence(7) == '0 1 2 3 4 5 6 7', \"Expected the sequence 0 1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_sequence(2) == \"0 1\", \"Wrong string_sequence\"\nassert string_sequence(3) == \"0 1 2\", \"Wrong string_sequence\"\nassert string_sequence(4) == \"0 1 2 3\", \"Wrong string_sequence\"\nassert string_sequence(5) == \"0 1 2 3 4\", \"Wrong string_sequence\"\nassert string_sequence(6) == \"0 1 2 3 4 5\", \"Wrong string_sequence\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_sequence(5) == '0 1 2 3 4'\nassert string_sequence(1) == '0'\nassert string_sequence(2) == '0 1'\nassert string_sequence(3) == '0 1 2'\nassert string_sequence(4) == '0 1 2 3'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_sequence(2) == \"0 1\"\nassert     string_sequence(3) == \"0 1 2\"\nassert     string_sequence(4) == \"0 1 2 3\"\nassert     string_sequence(5) == \"0 1 2 3 4\"\nassert     string_sequence(6) == \"0 1 2 3 4 5\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert string_sequence(5) == \"0 1 2 3 4\"\nassert string_sequence(1) == \"0\"\nassert string_sequence(2) == \"0 1\"\nassert string_sequence(3) == \"0 1 2\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_distinct_characters(\"abcd\") == 4\nassert count_distinct_characters(\"abcdef\") == 7\nassert count_distinct_characters(\"ABCDEF\") == 6\nassert count_distinct_characters(\"\") == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_distinct_characters(\"abA123\") == 3\nassert count_distinct_characters(\"abA123\") == 3\nassert count_distinct_characters(\"abA123\") == 3\nassert count_distinct_characters(\"abA123\") == 3\nassert count_distinct_characters(\"abA123\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"A\") == 1\nassert     count_distinct_characters(\"ab\") == 2\nassert     count_distinct_characters(\"abC\") == 2\nassert     count_distinct_characters(\"abc\") == 3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_distinct_characters(\"a\") == 1\nassert     count_distinct_characters(\"aa\") == 2\nassert     count_distinct_characters(\"aab\") == 3\nassert     count_distinct_characters(\"aabca\") == 4\n\ndef count_distinct_characters_case_insensitive(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_distinct_characters_optimized(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    using ord()\n    \"\"\"\n    return len({chr(ord(c)) for c in string})\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_distinct_characters_with_regex(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \"\"\"\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_distinct_characters('Candy') == 1\nassert     count_distinct_characters('ABAB') == 2\nassert     count_distinct_characters('ABABcaABAB') == 3\nassert     count_distinct_characters('ABCDEF') == 6\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_distinct_characters(\"\") == 0\nassert     count_distinct_characters(\"s\") == 1\nassert     count_distinct_characters(\"ab\") == 2\nassert     count_distinct_characters(\"aBc\") == 3\nassert     count_distinct_characters(\"aAbc\") == 3\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parse_music(\"o|oo|oo|oo|o|\") == [1, 2, 1, 1, 1]\nassert     parse_music(\"oo|oo|oo|oo|o|\") == [1, 2, 1, 1, 1]\nassert     parse_music(\"oo|oo|oo|oo|o|\") == [1, 2, 1, 1, 1]\nassert     parse_music(\"ooo|ooo|ooo|ooo|o|\") == [1, 2, 1, 1, 1]\nassert     parse_music(\"o|o|o|o|o|o|\") == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parse_music(\"o|o|o\") == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     parse_music(\"o|o|\") == [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\nassert     parse_music(\"o|o\") == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert     parse_music(\"o|o|o\") == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     parse_music(\"o|o|\") == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parse_music('o|o|o|o') == [4, 4, 4, 4]\nassert     parse_music('o|o|o') == [4, 4, 4, 4]\nassert     parse_music('o|o|o|') == [4, 4, 4, 4]\nassert     parse_music('o|o|o|o|o|o') == [4, 4, 4, 4, 4, 4]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nparse_music('') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert\nparse_music('.') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert parse_music('.') == [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nassert parse_music('|') == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nassert parse_music('|.') == [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parse_music('') == []\nassert parse_music('o') == []\nassert parse_music('o|') == []\nassert parse_music('o|o') == []\nassert parse_music('o|o|o|') == []\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parse_music('oo|oo|o|o|o|oo|oo|o') ==  [4, 4, 2, 2, 1, 4, 4, 1]\nassert     parse_music('oo|oo|o') ==  [4, 4, 2, 2, 1, 4, 4, 1]\nassert     parse_music('oo|o') ==  [4, 4, 2, 2, 1, 4, 4, 1]\nassert     parse_music('oo|') ==  [4, 4, 2, 2, 1, 4, 4, 1]\nassert     parse_music('o') ==  [4, 4, 2, 2, 1, 4, 4, 1]\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parse_music(\"-\") == [0, 0, 0, 0, 0, 0]\nassert     parse_music(\"-o\") == [0, 0, 0, 0, 0, 0]\nassert     parse_music(\"-o|\") == [0, 0, 0, 0, 0, 0]\nassert     parse_music(\"-o|o|\") == [0, 0, 0, 0, 0, 0]\nassert     parse_music(\"o|o|\") == [2, 2, 2, 2, 2, 2]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     how_many_times(\"this is a test string\", \"test\") == 3\nassert     how_many_times(\"this is a test string\", \"is\") == 2\nassert     how_many_times(\"this is a test string\", \"\") == 0\nassert     how_many_times(\"this is a test string\", \" string\") == 1\nassert     how_many_times(\"this is a test string\", \"string\") == 0\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     how_many_times('aaaaa', 'b') == 2\nassert     how_many_times('aaa', 'b') == 2\nassert     how_many_times('aabb', 'b') == 0\nassert     how_many_times('abab', 'ab') == 2\nassert     how_many_times('abab', 'ba') == 1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     how_many_times(\"how are you?\", \"you\") == 1\nassert     how_many_times(\"how are you?\", \"are\") == 2\nassert     how_many_times(\"how are you?\", \"you\") == 0\nassert     how_many_times(\"how are you?\", \"I\") == 0\nassert     how_many_times(\"how are you?\", \"?\") == 0"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     how_many_times('abcd', 'ab') == 1, \"how_many_times should be 1\"\nassert     how_many_times('abcd', 'cd') == 1, \"how_many_times should be 1\"\nassert     how_many_times('abcd', 'ab') == 0, \"how_many_times should be 0\"\nassert     how_many_times('abcd', 'c') == 0, \"how_many_times should be 0\"\nassert     how_many_times('abcd', 'd') == 0, \"how_many_times should be 0\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numbers('0 4 1 2 5 8') == '4 1 2 5 8 0 4'\nassert     sort_numbers('4 8 0 5 1') == '0 1 8 4 5'\nassert     sort_numbers('8 8') == '8 8'\nassert     sort_numbers('4 4') == '4 4'\nassert     sort_numbers('0') == '0'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numbers('zero one two three four five six seven eight nine') == \"one two three four five six seven eight nine zero\"\n\n\n\ndef is_palindrome(phrase: str) -> bool:\n    \"\"\" Check if a phrase is a palindrome or not.\n    Return true if the phrase is a palindrome, otherwise return false.\n    A phrase is a palindrome if the letters in the phrase appear the same number of times,\n    from left to right, as they do in the original phrase.\n    Note: ignore capitalization, spaces, punctuation and symbols.\n    \"\"\"\n    pass\n\n\ndef reverse_string(phrase: str) -> str:\n    \"\"\"Return the string with words in reverse order.\n    Use spaces to separate words.\n    Example: reverse_string(\"The quick brown fox\") should return \"el quick dah noB\"\n    \"\"\"\n    pass\n\n\ndef apply_to_each(iterable, func):\n    \"\"\" Apply func to each item in the iterable \"\"\"\n    for item in iterable:\n        func(item)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef sort_alphanumeric(message: str) -> str:\n    \"\"\" Input is a string containing words from 'a' to 'z' and 'A' to 'Z'\n    Return a string sorted in alphabetical order\n    \"\"\"\n    pass\n\n\ndef sort_punctuation(message: str) -> str:\n    \"\"\" Input is a string containing punctuations.\n    Return a string sorted in alphabetical order\n    \"\"\"\n    pass\n\n\ndef sort_words(message: str) -> str:\n    \"\"\" Input is a string containing words.\n    Return a string sorted in alphabetical order\n    \"\"\"\n    pass\n\n\ndef sort_everything(message: str) -> str:\n    \"\"\" Input is a string containing words, numbers, punctuations, and spaces.\n    Return a string sorted in alphabetical order\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numbers(\"one zero three zero five one\") \nassert     sort_numbers(\"one zero three zero five one\") \nassert     sort_numbers(\"one zero three zero five one\") \nassert     sort_numbers(\"one zero three zero five one\") \nassert not sort_numbers(\"one zero three zero five one\") \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numbers('one zero one zero one one') == 'one zero one one one'\nassert     sort_numbers('five nine seven zero four') == 'zero zero zero four zero seven five'\nassert     sort_numbers('five zero four seven nine') == 'zero zero four 0 zero 7 five'\nassert     sort_numbers('zero zero zero') == 'zero zero zero'\nassert     sort_numbers('nine nine nine') == 'zero zero nine nine'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numbers('zero nine one two three four five six seven eight') == 'one zero nine two three four five six seven eight'\nassert     sort_numbers('zero nine one two three four five six seven eight') == 'zero nine one two three four five six seven eight'\nassert     sort_numbers('zero nine one two three four five six seven eight') == 'zero nine one two three four five six seven eight'\nassert     sort_numbers('zero nine one two three four five six seven eight') == 'zero nine one two three four five six seven eight'\n\n\ndef sort_letters(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Valid choices are 'dog', 'cat', 'barn', 'bat', 'rat' and 'owl'.\n    Return the string with words sorted from smallest to largest\n    \"\"\"\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numbers('one zero two three four five six seven eight nine') == 'zero one two three four five six seven eight nine'\nassert     sort_numbers('one one zero zero zero zero') == 'zero zero zero zero one'\nassert     sort_numbers('one one one zero zero zero') == 'zero zero zero zero zero'\nassert     sort_numbers('one one one zero zero zero') == 'zero zero zero zero zero'\nassert     sort_numbers('one one one one zero zero zero') == 'zero zero zero zero zero'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert sort_numbers(\"one zero one two one two three\") == \"one two three one one\"\nassert sort_numbers(\"three five four two\") == \"two three four five\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_closest_elements([3.4, 5.1, 3.7, 8.0]) == (3.4, 3.7)\nassert find_closest_elements([-2.5, -3.2, 2.4, 3.1]) == (-2.5, 2.4)\nassert find_closest_elements([-1.2, 2.5, 0.5, -1.5]) == (-1.2, 0.5)\nassert find_closest_elements([-1.0, -1.0, 1.5, 2.5]) == (-1.0, 1.5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_closest_elements([0, 1, 2, 3]) == (0, 2)\nassert     find_closest_elements([1, 1, 1.5, 1.5, 2, 2, 2, 2, 2]) == (1, 2)\nassert     find_closest_elements([1, 1.5, 1.5, 2, 2]) == (1, 2)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6, 7]) == (1, 7)\nassert     find_closest_elements([2, 2.5, 3, 3.5, 4, 5, 6]) == (2, 5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_closest_elements([0, 2, 5, 8, 12, 18]) == (8, 18)\nassert     find_closest_elements([-2, -4, -6, -8, -10]) == (-4, -2)\nassert     find_closest_elements([-5, -4, 0, -1, -2, -3, -6]) == (-5, -2)\nassert     find_closest_elements([]) == ()\nassert     find_closest_elements([-2, -4, -6, -8, -10, 1, 2, 3, 4, 5]) == (1, 2)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_closest_elements([3.3,1.1,4.4,5.5]) == (1.1, 3.3)\nassert     find_closest_elements([-5.6,2.2,3.3,5.5,7.7]) == (2.2, 5.5)\nassert     find_closest_elements([1.2,3.3,5.5,7.7,11.8]) == (1.2, 11.8)\nassert     find_closest_elements([1.2,3.3,5.5,7.7,11.8]) == (1.2, 11.8)\n\n\ndef find_closest_number(numbers: List[float]) -> float:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return the number that is the closest to\n    each other. Return this value as a floating point.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_closest_elements([-1.0, -1.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0]) == (1.0, 2.0)\nassert     find_closest_elements([1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0]) == (1.0, 2.0)\nassert     find_closest_elements([0.0, -1.0, -1.0, 0.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0]) == (0.0, 1.0)\nassert     find_closest_elements([1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0]) == (1.0, 2.0)\nassert     find_closest_elements([-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) == (-1.0, -1.0)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_closest_elements([7, 9, 10, 9, 3, 2, 6]) == (3, 2)\nassert find_closest_elements([2, 1, 3, 4, 5, 6, 7]) == (1, 2)\nassert find_closest_elements([7, 2, 9, 1, 3, 8, 10]) == (1, 3)\nassert find_closest_elements([2, 3, 1, 5, 8, 6]) == (1, 3)\nassert find_closest_elements([9, 8, 7, 6, 5, 4, 3]) == (8, 9)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_closest_elements([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5])    == (1, 1), \\\n        \"Expected return {(1, 1)}, instead returned {(1, 1)}.\"\nassert     find_closest_elements([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5])    == (3, 4), \\\n        \"Expected return {(3, 4)}, instead returned {(3, 4)}\"\nassert     find_closest_elements([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5])    == (2, 3), \\\n        \"Expected return {(2, 3)}, instead returned {(2, 3)}\"\nassert     find_closest_elements([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5])    == (3, 4), \\\n        \"Expected return {(3, 4)}, instead returned {(3, 4)}\"\nassert     find_closest_elements([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5])    == (2, 3), \\\n        \"Expected return {(2, 3)}, instead returned {(2, 3)}\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_closest_elements([1, 2, 3, 4, 5]) == (1, 2)\nassert     find_closest_elements([6, 7, 8, 9, 10]) == (6, 9)\nassert     find_closest_elements([1, 2, 3, 4, 5, 6]) == (1, 2)\nassert     find_closest_elements([5, 6, 7, 8, 9, 10]) == (5, 6)\nassert     find_closest_elements([5, 6, 7, 8, 9, 10, 1, 2, 3]) == (1, 2)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_closest_elements([1.2, 3.3, 5.5, 10]) == (3.3, 10)\nassert     find_closest_elements([2.1, 3.1, 7.5, 10]) == (2.1, 7.5)\nassert     find_closest_elements([1, 2, 4, 5]) == (1, 2)\nassert     find_closest_elements([-2, 1, -3]) == (-2, 1)\n\n\ndef bubble_sort(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers, return the sorted list in ascending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_closest_elements([5, 5, 6, 4, 2]) == (2, 4)\nfind_closest_elements([4, 5, 6, 3, 4]) == (3, 4)\nfind_closest_elements([4, 5, 6, 3, 1]) == (3, 1)\nfind_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nfind_closest_elements([0, 1, 2, 3, 4]) == (1, 2)\nfind_closest_elements([0, 5, 6, 3, 4]) == (1, 5)\nfind_closest_elements([0, 5, 6, 3, 1]) == (1, 5)\nfind_closest_elements([0, 5, 6, 3, 2]) == (1, 5)\nfind_closest_elements([3, 4, 5, 6, 7]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 2]) == (3, 4)\nfind_closest_elements([4, 5, 6, 3, 2]) == (3, 4)\nfind_closest_elements([1, 2, 3, 4, 5]) == (1, 5)\nfind_closest_elements([0, 1, 2, 3, 4]) == (0, 1)\nfind_closest_elements([0, 5, 6, 3, 4]) == (1, 5)\nfind_closest_elements([0, 5, 6, 3, 1]) == (0, 1)\nfind_closest_elements([0, 5, 6, 3, 2]) == (0, 1)\nfind_closest_elements([0, 0, 0, 0, 0]) == (0, 0)\nfind_closest_elements([4, 5, 6, 3, 1]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 2]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 3]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 4]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 5]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 6]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 7]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 8]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 9]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 10]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 11]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 12]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 13]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 14]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 15]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 16]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 17]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 18]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 19]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 20]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 21]) == (4, 6)\nfind_closest_elements([4, 5, 6, 3, 22]) == (4, 6)\nfind_closest_elements("
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rescale_to_unit([0.6, 0.5, 0.5, 0.5, 0.5]) == [0.6, 0.5, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([0.7, 0.6, 0.5, 0.5, 0.5]) == [0.6, 0.7, 0.5, 0.5, 0.5]\nassert     rescale_to_unit([0.8, 0.7, 0.6, 0.5, 0.5]) == [0.7, 0.8, 0.6, 0.5, 0.5]\n\ndef scale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    rescale_to_unit([1, 2]) == [0.5, 0.5]\n    rescale_to_unit([1, 2, 3, 4, 5]) == [0.25, 0.25, 0.25, 0.25, 0.25]\n    rescale_to_unit([-1, -2, -3, -4, -5]) == [-0.5, -0.5, -0.5, -0.5, -0.5]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rescale_to_unit([0, 1, 4, 3, 5, 2, 6]) == \\\n        [0.2, 0.4, 0.6, 0.6, 0.8, 0.2, 0.4]\n\nassert     rescale_to_unit([0.9, 0.2, 0.4, 0.1, 0.5, 0.3, 0.4]) == \\\n        [0.09, 0.21, 0.42, 0.01, 0.45, 0.03, 0.44]\n\nassert     rescale_to_unit([0.9, 0.2, 0.4, 0.1, 0.5, 0.3, 0.4, 0.2, 0.1, 0.7, 0.9]) == \\\n        [0.08, 0.22, 0.44, 0.02, 0.45, 0.04, 0.45, 0.04, 0.42, 0.08, 0.92]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rescale_to_unit([0, 1]) == [0, 0.9999999999999997]\nassert     rescale_to_unit([0, 1, 0]) == [0, 0.9999999999999997, 0.9999999999999997]\nassert     rescale_to_unit([0, 0.5, 0.5]) == [0, 0.5, 0.5]\nassert     rescale_to_unit([0, 0, 0.5, 1, 1, 0.5, 0, 0, 0, 0]) == [0, 0, 0.5, 1, 1, 0.5, 0, 0, 0, 0]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rescale_to_unit([1, 2, 3, 4]) == [0.2, 0.4, 0.6, 0.8]\nassert     rescale_to_unit([0.2, 0.4, 0.6, 0.8]) == [1, 2, 3, 4]\nassert     rescale_to_unit([0, 2, 4]) == [0, 0.25, 0.5]\nassert     rescale_to_unit([-10, 1, 2, 5, 7]) == [0, 0.2, 0.4, 0.6, 0.8]\n\ndef linear_transform(numbers: List[float],\n                    a: float = 0.0,\n                    b: float = 1.0) -> List[float]:\n    \"\"\" Given a list of numbers and a two-element scaling factor,\n    apply a linear transformation to the list of numbers.\n    \"\"\"\n    return (numbers - a) / (b - a)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef rescale_to_range(numbers: List[float],\n    lower_bound: float,\n    upper_bound: float) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become lower_bound and the largest will become upper_bound\n    \"\"\"\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rescale_to_unit([0, 0, 0, 1, 1, 1]) == [0, 0, 0, 0.2, 0.2, 0.2]\nassert     rescale_to_unit([0, 0, 0, 0, 1, 1]) == [0, 0, 0, 0, 0.2, 0.2]\nassert     rescale_to_unit([0, 0, 0, 1, 1, 1]) == [0, 0, 0, 0.2, 0.2, 0.2]\nassert     rescale_to_unit([0, 0, 1, 1, 1, 1]) == [0, 0, 0.2, 0.2, 0.2, 0.2]\nassert     rescale_to_unit([0, 1, 1, 1, 1, 1]) == [0, 0.2, 0.2, 0.2, 0.2, 0.2]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rescale_to_unit([0.5, 1.1, 2.0]) == [0.2, 0.4, 0.6]\nassert     rescale_to_unit([0.2, 1.1, 0.4]) == [0.25, 0.6, 0.75]\nassert     rescale_to_unit([0.25, 0.6, 0.75]) == [0.5, 1.0, 0.75]\nassert     rescale_to_unit([0.5, 0.75, 0.5]) == [0.25, 0.75, 0.25]\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef filter_odd_even_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values for even integers\n        while keeping all odd integers.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_integers([\"a\", 1.0, 2, -2, 2, 3.5, \"4\", 4, -4, -4.5, False]) == [1,2,3.5,4]\n\ndef filter_strings(values: List[Any]) -> List[str]:\n    \"\"\" Filter given list of any python values only for strings\n    \"\"\"\n    pass\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert _____ == _____\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    # Test 1\n    assert filter_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # Test 2\n    assert filter_integers([1, '2', 3, 4, 5, 6, 7, 8, 9, 10]) == []\n    # Test 3\n    assert filter_integers([1, 2, 'a', 'b', 3, 4, 5, 6, 7, 8, 9, 10]) == []\n    # Test 4\n    "
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_integers([1, 2, 3, 'a', 4.0, 5]) == [1, 2, 3, 4, 5], 'Wrong return value'\nassert     filter_integers(['a', 2, 3, 4, 'b']) == ['a', 2, 3, 'b'], 'Wrong return value'\nassert     filter_integers(['1', '2', 3, 4, 5]) == [1, 2, 3, 4, 5], 'Wrong return value'\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_integers(\n        [1, 2, 3, \"\", \"\", 4, 5]) == [1, 2, 3, 4, 5]\nassert filter_integers(\n        [1, 2, \"\", \"\", \"\", 3, 4]) == []\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    assert filter_integers([1, '2', True, False]) == [1, 2]\n    assert filter_integers([1.2, '2.4', False]) == []\n    assert filter_integers([True, False]) == []\n    assert filter_integers([]) == []\n    "
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strlen('aaaaaaaa') == 5\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strlen('') == 0\nassert     strlen('abcdef') == 7\nassert     strlen('abcdefghijk') == 13\nassert     strlen('abcdefghijk') == 13\nassert     strlen('abcdefghijk') == 13\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    print('main is executed')\n    print(\"check print-1\")\n    print(strlen(''))\n    print(strlen('Hello World'))\n    print(strlen('Hello'))\n    print(strlen('hello'))\n    print(strlen('hello world'))\n    print(strlen('hello world!'))\n\n    print(\"check print-2\")\n    print(strlen('abc'))\n    print(strlen(' abc '))\n    print(strlen(' abc '))\n    print(strlen(' abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))\n    print(strlen('abc '))"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef vowel_count(string: str) -> int:\n    \"\"\" Return number of vowels in a given string\n    \"\"\"\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     strlen('') == 0\nassert strlen('abc') == 3\nassert strlen('abcdefg') == 13\nassert strlen('abcdefgabc') == 13\nassert strlen('abcdefgabc') == 13\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef strstr(haystack: str, needle: str) -> int:\n    \"\"\" Return the first index of needle in haystack\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef strstr(haystack: str, needle: str) -> int:\n    \"\"\" Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack\n    \"\"\"\n    pass\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert strlen(\"abcdefghij\") == 9\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strlen(\"hello world\") == 11\nassert     strlen(\"hello\") == 4\nassert     strlen(\"\") == 0\n\ndef get_max(a: list, b: list) -> int:\n    \"\"\" Return the max sum of two lists. \n    >>> a = [2, 4, 2, 6, 7, 5, 2, 1, 0, 2]\n    >>> b = [2, 2, 5, 2, 8, 2, 5, 7, 1, 1]\n    >>> get_max(a, b)\n    8\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_divisor(1) == 1, \"Your code did not work!\"\nassert     largest_divisor(2) == 1, \"Your code did not work!\"\nassert     largest_divisor(8) == 2, \"Your code did not work!\"\nassert     largest_divisor(12) == 2, \"Your code did not work!\"\nassert     largest_divisor(24) == 3, \"Your code did not work!\"\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_divisor(0) == 1\nassert     largest_divisor(2) == 1\nassert     largest_divisor(3) == 1\nassert     largest_divisor(4) == 1\nassert     largest_divisor(5) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert largest_divisor(0) == 1\nassert largest_divisor(3) == 1\nassert largest_divisor(12) == 2\nassert largest_divisor(18) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_divisor(4) == 1\nassert     largest_divisor(12) == 3\nassert     largest_divisor(20) == 5\nassert     largest_divisor(999) == 13\nassert     largest_divisor(100) == 1\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert largest_divisor(1) == 1\nassert largest_divisor(2) == 1\nassert largest_divisor(3) == 1\nassert largest_divisor(4) == 2\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_divisor(3) == 1, 'wrong'\nassert     largest_divisor(15) == 3, 'wrong'\nassert     largest_divisor(2) == 2, 'wrong'\nassert     largest_divisor(6) == 2, 'wrong'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_largest_divisor():\n    assert largest_divisor(10) == 5\n    assert largest_divisor(12) == 3\n    assert largest_divisor(15) == 5\n    "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef prime_factors(n: int) -> int:\n    \"\"\" Find the prime factors of a given number, n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlargest_divisor(2) == 1\nlargest_divisor(9) == 3\nlargest_divisor(12) == 2\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert factorize(1) == []\nassert factorize(2) == []\nassert factorize(3) == []\nassert factorize(4) == [2]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     factorize(1) == [1]\nassert     factorize(2) == [2]\nassert     factorize(3) == [3]\nassert     factorize(6) == [2,2]\nassert     factorize(9) == [3,3]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_prime_factors(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    factorize(1) == []\n    factorize(2) == []\n    factorize(3) == []\n    factorize(4) == []\n    factorize(5) == []\n    factorize(6) == []\n    factorize(8) == []\n    factorize(9) == []\n    factorize(10) == []\n    factorize(16) == []\n    factorize(25) == []\n    factorize(36) == []\n    factorize(50) == []\n    factorize(125) == []\n    factorize(5025) == []\n    factorize(10025) == []\n    factorize(25625) == []\n    factorize(1225625) == []\n    factorize(31625625) == []\n    factorize(311252525) == []\n    factorize(5125252525) == []\n    factorize(12325252525) == []\n    factorize(812525252525) == []\n    factorize(7812525252525) == []\n    factorize(2502525252525) == []\n    factorize(25025252525252525) == []\n    factorize(125125125125125125) == []\n    factorize(1225125125125125125) == []\n    factorize(1251225125125125125) == []\n    factorize(12251251225125125125) == []\n    factorize(125122512251251225125) == []\n    factorize(1251225122512512251225) == []\n    factorize(125122512251251225122525) == []\n    factorize(1251225122512512251225125) == []\n    factorize(1251225122512512251225125125) == []\n    factorize(1251225122512512251225125125125) == []\n    factorize(1225125122512512512512512251225125) == []\n    factorize(1225125122512512512512512251225125) == []\n    factorize(12251251225125125125125122512251225) == []\n    factorize(12251251225125125125125122512251225125) == []\n    factorize(1225125122512512512512512251225122512525) == []\n    factorize(122512512251251251251251225122512251225125) == []\n    factorize(122512512251251251251251225122512251225125125) == []\n    factorize(1225125122512512512512512251225122512251225125125) == []\n    factorize(125122512512251225125125122512251251251251225125) == []\n    factorize(125122512251251251251251225122512251251251225125) == []\n    factorize(1251225122512512512512512251225122512512512251225) == []\n    factorize(1251225122512512512512512251225122512512512251225125) == []\n    factorize(125122512251251225125125122512251251251251225122512251225) == []\n    factorize(1251225122512512251251251225122512512512251225122512251225) == []\n    factorize(12512251225125122512512512251225125125122512251225122512251225) == []\n    factorize(125122512251251225125125122512251251251225122512251225122512251225) == []\n    factorize(12251251225125122512512251225122512512251225122512251225122512251225) == []\n    factorize(12251251225125122512512251225122512512251225122512251225122512251225) == []\n    factorize(12251251225125122512512251225122512512251225122512251225122512251225125) == []"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert factorize(0) == []\nassert factorize(3) == []\nassert factorize(6) == []\nassert factorize(12) == [2,2]\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     factorize(2) == [[2]]\nassert     factorize(3) == [[3]]\nassert     factorize(4) == [[2], [2]]\nassert     factorize(5) == [[5]]\nassert     factorize(6) == [[2], [2]]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_duplicates([1, 2, 2]) == [1, 2]\nassert     remove_duplicates([1, 2, 2, 2]) == [1, 2, 2]\nassert     remove_duplicates([]) == []\nassert     remove_duplicates([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1]\nassert     remove_duplicates([1, 1, 1, 1, 2, 2, 2, 2]) == [1, 1, 1, 2, 2]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_duplicates([1,2,3,3,4,5]) == [1,2,3,4,5], 'Should return the list without duplicate elements'\nassert     remove_duplicates([1,2,3,3,4,5,5,5]) == [1,2,3,4,5], 'Should return the list without duplicate elements'\nassert     remove_duplicates([0,0,0,0]) == [0], 'Should return the list without duplicate elements'\nassert     remove_duplicates([]) == [], 'Should return an empty list'\n\n\ndef multiply(num1: int, num2: int) -> int:\n    \"\"\" Multiplication of two integers.\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert remove_duplicates([1, 2, 3, 4, 5, 6, 6, 7, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert remove_duplicates([1, 2, 3, 4, 5, 6, 6]) == [1, 2, 3, 4, 5, 6]\nassert remove_duplicates([1, 1, 1, 1, 1]) == [1]\nassert remove_duplicates([]) == []\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_duplicates([1, 1, 2, 3, 3, 4]) ==     [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4]) ==     [1, 2, 3, 4]\nassert     remove_duplicates([1, 1, 2, 2, 3, 3, 4]) ==     [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2, 2, 3, 4, 4, 4]) ==     [1, 2, 3, 4]\nassert     remove_duplicates([1, 2, 2, 3, 3, 4, 4]) ==     [1, 2, 3, 4]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_duplicates([1,2,3]) ==     [1,2,3]\nassert     remove_duplicates([1,1,2,2,3,3,4,4,5,5,6,6]) ==     [1,2,3,4,5,6]\nassert     remove_duplicates([]) ==     []\n\ndef remove_duplicates_two(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Make sure that you are not modifying the input numbers list and instead creating a new list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef merge_sort(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Sort a list of numbers using the merge sort algorithm.\n\n    Args:\n        numbers: A list of integers that are to be sorted.\n    Returns:\n        A sorted list of integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_duplicates([1,2,2]) == [1,2]\nassert     remove_duplicates([2,1,2,3,3]) == [2,3,3]\nassert     remove_duplicates([1,1,2,2]) == [1,2]\nassert     remove_duplicates([1,1,1,2,2,3]) == [1,2,3]\nassert     remove_duplicates([1,2,3,4,5,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flip_case('hello World') == 'World Hello'\nassert flip_case('Hello World') == 'World Hello'\nassert flip_case('world WORD') == 'word world'\nassert flip_case('HELLO WORLD') == 'WORLD HELLO'\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     flip_case(\"hello world\") == \"oXL ehRL dOworLD\"\nassert     flip_case(\"heLLO WoRLD\") == \"oXL ehRL dOworLD\"\nassert     flip_case(\"\") == \"\"\nassert     flip_case(\"hello world\") == \"oXL ehRL dOworLD\"\nassert     flip_case(\"HELLO WORLD\") == \"oXL ehRL dOworLD\"\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"hello world\"\nassert     concatenate([\"\"]) == \"\"\nassert     concatenate([\"foo\", \"bar\"]) == \"foo bar\"\nassert     concatenate([\"foo\"]) == \"foo\"\nassert     concatenate([\"foo\", \"bar\", \"baz\"]) == \"foobarbaz\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate([\"Hello\", \"world\"]) == \"Helloworld\"\nassert     concatenate([\"Hello\", \"world\", \"!\"]) == \"Helloworld!\"\nassert     concatenate([\"Hello\", \"world\", \"!\"]) == \"Helloworld!\"\nassert     concatenate([\"I'm\", \"a\", \"cat\"]) == \"I'maacat\"\nassert     concatenate([\"How\", \"are\", \"you\", \"today\"]) == \"Howareyoutoday\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate([]) == \"\"\nassert     concatenate(['a', 'b', 'c']) == \"abc\"\nassert     concatenate(['a', 'b', 'c', 'd', 'e']) == \"abcdee\"\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f']) == \"abcdef\"\nassert     concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == \"abcdefg\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_consonants(string: str) -> int:\n    \"\"\" Count the number of consonants in the input string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate([\"Hi\", \"there\", \"!\"]) == \"Hi there!\", \"Expected 'Hi there!' to be True\"\nassert     concatenate([\"Hi\"]) == \"Hi\", \"Expected 'Hi' to be True\"\nassert     concatenate([\"\", \"Hi\"]) == \"Hi\", \"Expected 'Hi' to be True\"\nassert     concatenate([\"Hi\", \"there\", \"!\"]) == \"Hi there!\", \"Expected 'Hi there!' to be True\"\nassert     concatenate([\"\", \"\", \"Hi\"]) == \"Hi\", \"Expected 'Hi' to be True\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate([\"hello\", \"world\"]) == \"hello world\"\nassert     concatenate([\"hello\", \"world\"]) == \"hello world\"\nassert     concatenate([\"hello\", \"world\"]) == \"hello world\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate([\"a\", \"b\", \"c\"]) == \"a,b,c\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\"]) == \"a,b,c,d\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"a,b,c,d,e\"\nassert     concatenate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"a,b,c,d,e,f\"\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_all_words(words: List[str]) -> int:\n    \"\"\" Count the total number of words in a given list\n\n        Precondition: words is a list of strings\n\n        >>> count_all_words(['abc', 'def', 'ghi'])\n        3\n        >>> count_all_words(['abc', 'def', 'ghi', 'jkl'])\n        4\n        >>> count_all_words(['this', 'is', 'a', 'test', 'of', 'functions'])\n        10\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_by_prefix([], \"foo\") == []\nassert filter_by_prefix([], \"\") == []\nassert filter_by_prefix([], \"foo\") == []\nassert filter_by_prefix([\"foo\"], \"foo\") == [\"foo\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_by_prefix([\"foo.txt\", \"bar.txt\"], \"foo\") == [\"foo.txt\"], \"foo\"\nassert     filter_by_prefix([\"foo.txt\", \"bar.txt\"], \"bar\") == [\"bar.txt\"], \"bar\"\nassert     filter_by_prefix([\"foo.txt\", \"bar.txt\"], \"foobar\") == [], \"foobar\"\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_by_prefix(['foo', 'bar', 'baz', 'bop'], 'foo') == ['foo', 'bar', 'baz']\nassert     filter_by_prefix(['foo', 'bar', 'baz', 'bop'], 'bar') == ['bar', 'baz']\nassert     filter_by_prefix(['foo', 'bar', 'baz', 'bop'], 'baz') == ['baz']\nassert     filter_by_prefix(['foo', 'bar', 'baz', 'bop'], 'bop') == ['bop']\nassert     filter_by_prefix(['foo', 'bar', 'baz', 'bop'], 'bop') == ['bop']\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\"], \"ABC\") == [\"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\"]\nassert filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], \"ABC\") == [\"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\", \"ABC\"]\nassert filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\"], \"ABCD\") == [\"ABCD\", \"ABCD\", \"ABCD\", \"ABCD\", \"ABCD\"]\nassert filter_by_prefix([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"], \"ABCD\") == [\"ABCD\", \"ABCD\", \"ABCD\", \"ABCD\", \"ABCD\", \"ABCD\", \"ABCD\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef filter_by_postfix(strings: List[str], postfix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given postfix.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_by_prefix(['apple', 'banana', 'orange', 'grape', 'watermelon'], 'apple') == ['apple']\nassert     filter_by_prefix(['apple', 'banana', 'orange', 'grape', 'watermelon'], 'pear') == []\nassert     filter_by_prefix(['apple', 'banana', 'orange', 'grape', 'watermelon'], 'berry') == []\nassert     filter_by_prefix(['apple', 'banana', 'orange', 'grape', 'watermelon'], 'orange') == ['orange']\nassert     filter_by_prefix(['apple', 'banana', 'orange', 'grape', 'watermelon'], 'water') == ['watermelon']\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert \nassert filter_by_prefix([\"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\"], \"Yes\") == [\"Yes\", \"Yes\", \"Yes\"]\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert filter_by_prefix(['foo', 'bar', 'foobar'], 'fo') == ['foo', 'bar', 'foobar']\nassert filter_by_prefix(['bar', 'foobar', 'foo'], 'fo') == []\nassert filter_by_prefix([], 'fo') == []\nassert filter_by_prefix(['bar'], 'fo') == ['bar']\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_positive([-1, 1, 2, 3, 4, -5]) == [-1, 2, 3, 4]\nassert     get_positive([-5, -1, 2, 4, 5, 6]) == [-5, 2, 4]\nassert     get_positive([-3, -1, 2, 4, 5, 6]) == [-3, 2, 4, 5]\nassert     get_positive([-1, 1, 2, -3, 4, 5]) == [-1, 2, 4]\nassert     get_positive([-5, 1, 2, 3, 4, -5]) == [-5, 2, 3, 4]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_positive([\"hello\", -1, 2, 3, -10, 50]) == [-10, 50]\nassert get_positive([\"hello\", -1, 2, 3, -10, -50]) == [-10, -50]\nassert get_positive([\"hello\", 1, 2, 3, 4, -10]) == [1, 2, 3, 4, -10]\nassert get_positive([]) == []\nassert get_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_positive([1,2,-2])     ==     [1,2]\nassert     get_positive([0,1,2,-1,-2])     ==     [1,2]\nassert     get_positive([])     ==     []\nassert     get_positive([-1,1,1])     ==     [1,1]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_positive([1, 2, -1, 0, -1, 4]) ==     [1, 2, 4]\nassert     get_positive([1, 2, -1, 0, -1, 4, 5]) ==     [1, 2, 4, 5]\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_positive([1, -1, -2, 3]) == [1, 3]\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nget_positive([1, 2, 3, 4]) == [1, 2, 3, 4]\nget_positive([-1, -2, -3, -4]) == [-1, -2, -3, -4]\nget_positive([1, 2, -3, -4]) == [-3, -4]\nget_positive([]) == []\nget_positive([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_positive([-1, 2, -3, 4, -5]) == [-1, 2, 4, -5]\nassert     get_positive([1, 2, 3, 4, 5]) == None\nassert     get_positive([-3, -2, 0, -1, 4]) == [-3, 4]\nassert     get_positive([3, -2, 0, 1, 4]) == [3, 4]\n\nif __name__ == \"__main__\":\n    pass"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_positive([1, 2, -3, 4]) == [1, 2, 4]\nassert     get_positive([1, 2, -3, -4]) == [1, 2, -4]\nassert     get_positive([]) == []\nassert     get_positive([1, 2, -3, 4, -5]) == [1, 2, 4, -5]\nassert     get_positive([1, -2, -3, 4]) == []\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_positive([2, -5, 6, 1, -3, 9]) == [2, 6, 9], \"Should return a list of only positive numbers\"\nassert     get_positive([1, -3, -8, 9, 0]) == [1, 9], \"Should return a list of only positive numbers\"\n\nprint('TEST: 4')\nprint('The result is: ', get_positive([1, -3, -8, 9, 0]))\nprint()\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_average(l: list):\n    \"\"\"Return the average of all numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_prime(4) == False\nassert     is_prime(5) == True\nassert     is_prime(11) == True\nassert     is_prime(9) == False\n\n\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_prime(17) == False\nassert     is_prime(2) == True\nassert     is_prime(1) == False\n\ndef is_prime_v2(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(4) == False\nassert     is_prime(11) == False\nassert     is_prime(21) == False\nassert     is_prime(3) == True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_prime(-1)\nassert not is_prime(0)\nassert is_prime(1)\nassert not is_prime(4)\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_prime(2) == True\nassert     is_prime(4) == False\nassert     is_prime(17) == True\nassert     is_prime(41) == False\n\ndef get_primes_from(n):\n    \"\"\"Return a list of primes smaller than or equal to n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_prime(1)     == False\nassert     is_prime(2)     == True\nassert     is_prime(3)     == True\nassert     is_prime(4)     == False\nassert     is_prime(7)     == True\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_prime(2) == True\nassert is_prime(11) == True\nassert is_prime(21) == False\nassert is_prime(9) == True\nassert is_prime(-1) == False\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_prime(5)\nassert     is_prime(10)\nassert     is_prime(11)\nassert     not is_prime(11)\nassert     not is_prime(17)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nxs = [1, 2]\nx = 1.5\nprint(find_zero(xs))\n\nxs = [-1, 2]\nx = 1.5\nprint(find_zero(xs))\n\nxs = [-1, 0, 2]\nx = 1.5\nprint(find_zero(xs))\n\nxs = [1, -1]\nx = 1.5\nprint(find_zero(xs))\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef degree(xs: list):\n    \"\"\"\n    return degree of a polynomial\n    \"\"\"\n    pass\n\n\n\ndef get_coeffs(xs: list):\n    \"\"\"\n    return coefficients of a polynomial\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nxs = [-2.5, -0.5, -0.25, 0.125, 0.25, 0.5, 0.75, 1, 1.5]\nassert \n\nx = find_zero(xs)\n\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_zero([1, -1]) == 1\nassert     find_zero([-1, 1]) == 0\nassert     find_zero([1, 1, -1]) == 1\n\n\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert abs(poly([3, 2], -2) - 4) < 1e-10\nassert abs(poly([3, 2, 1], -2) - 4) < 1e-10\nassert abs(poly([1, 1], -2) - 1) < 1e-10\nassert abs(poly([1, 1, 1], -2) - 1) < 1e-10\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_solution(xs: list, y: float):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    y is an estimated value of polynomial.\n    check_solution checks if the given values\n    of polynomial and estimated values are same or not.\n    \"\"\"\n    return \n\n\ndef cheby_roots(n):\n    \"\"\"\n    n is an even number.\n    cheby_roots returns the roots of chebyshev polynomial\n    using Gauss-Legendre method.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef solve(xs: list, x0: float):\n    \"\"\"\n    x0 is a root of the polynomial.\n    Solve the polynomial to the left of x0\n    returns x0, x1,...\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_third([1, 3, 2, 4, 2, 5, 6, 7]) ==    [1, 2, 2, 3, 4, 5, 6, 7]\nassert     sort_third([1, 2, 3, 4, 5]) ==    [1, 2, 3, 4, 5]\nassert     sort_third([]) ==    []\nassert     sort_third([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]) ==    [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]\nassert     sort_third([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]) ==    [-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_third([1,2,3,4,5,6,7,8]) == sorted([1,2,3,4,5,6,7,8])\nassert     sort_third([1,1,1,1]) == sorted([1,1,1,1])\nassert     sort_third([2,2,2,2]) == sorted([2,2,2,2])\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_third([]) == []\nassert     sort_third([1,2,3]) == [1,2,3]\nassert     sort_third([1,2,3,4,5]) == [1,2,4,5,3]\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    This function takes an integer n and returns True if n is prime, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sort_third2(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_third([1, 3, 2, 5]) ==     [2, 3, 1, 5], \"Wrong output\"\nassert     sort_third([1, 3, 5, 2]) ==     [2, 3, 1, 5], \"Wrong output\"\nassert     sort_third([1, 3, 2, 2]) ==     [2, 3, 1, 2], \"Wrong output\"\nassert     sort_third([1, 3, 3]) ==     [3, 1, 3], \"Wrong output\"\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    l1 = [1, 3, 2, 4, 5, 6, 7, 8, 9]\n    assert sort_third(l1) == l1\n    l2 = [3, 2, 5, 1, 4, 6, 8, 7, 9]\n    assert sort_third(l2) == l2"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_sort_third():\n    \"\"\"\n    some tests are made in the doctest below\n    \"\"\"\n    assert sort_third([1,2,3,4,5]) == [1,4,2,5,3]\n    assert sort_third([3,4,3,3,3]) == [3,3,3,4,3]\n    assert sort_third([5,4,3,2,1]) == [1,2,3,4,5]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique([3,2,2,1,1,1]) == [1,2,3]\nassert     unique([3,2,1,1,1,1]) == [1,2,3]\nassert     unique([3,1,1,1,1,1]) == [1,3]\n\ndef unique_count(l: list):\n    \"\"\"Return a list of unique elements and the number of times they appear in a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique([1, 1, 2, 2, 3]) == [1, 2, 3], \"1\"\nassert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"2\"\nassert     unique([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]) == \\\n        [1, 2, 3], \"3\"\n\nprint(\"Test passed\")\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_valid(s: str):\n    \"\"\"Given a string, return whether the string is valid\n\n    A string s is valid if:\n    1. It is empty or contains exactly two different lowercase English letters.\n    2. It contains no consecutive repeating letters.\n    \"\"\"\n    pass\n\n\ndef find_all_unique(s: str):\n    \"\"\"Given a string, return a list of all unique characters in the string.\n\n    Each character in the returned list should be a letter.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef only_even(l: list):\n    \"\"\"Return list of only even elements from a list\n    \"\"\"\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique([]) == []\nassert     unique([1]) == [1]\nassert     unique([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]\nassert     unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     unique([1, 2, 3, 4, 5, 1]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique([2, 3, 1, 2, 3, 2, 4, 1]) == sorted([2, 3, 1, 4])\nassert     unique([1, 2, 3, 4, 5, 5, 5]) == sorted([1, 2, 3, 4, 5])\nassert     unique([2, 2, 3, 4, 4, 5, 5]) == sorted([2, 3, 4, 5])\nassert     unique([]) == sorted([])\nassert     unique([3, 4, 4, 4, 4, 4]) == sorted([3, 4])\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique([]) == []\nassert unique([0]) == [0]\nassert unique([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]\nassert unique([0, 0, 0, 0, 0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert unique([1, 1, 2, 1, 2, 2, 2, 2, 2, 2]) == [1, 2, 2, 2, 2]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     unique([]) == []\nassert     unique(['a', 'a', 'b']) == ['a', 'b']\nassert     unique([-1, 0, 1, 2]) == [-1, 0, 1, 2]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique([1, 1, 2, 2, 3, 3, 3]) == [1, 2, 3]\nassert     unique([1, 1, 1, 2, 2, 2]) == [1, 2, 1]\nassert     unique([2, 4, 5, 3, 4, 5]) == [3, 4, 5]\nassert     unique([1, 1, 2, 2, 2, 2]) == [1, 2, 2]\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('\\nTesting: unique')\nun = unique([1,1,1,2,2,3])\nassert isinstance(un, list), 'Your unique function should return a list.'\nassert len(un) == 3, 'Your unique function should return the same number as the given list.'\nassert un == [1,2,3], 'Your unique function should return a list with unique elements.'\nprint('  Passed.')\n\nprint('\\n\\nCoding complete? Click \"Check\" to earn cool rewards!')\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_element([1,2,3,5,6,8]) == 6\nassert max_element([1,2,3,5,6,8]) == 6\nassert max_element([1,2,3,5,6,8]) == 6\nassert max_element([1,2,3,5,6,8]) == 6\nassert max_element([1,2,3,5,6,8]) == 6\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_element([]) == None, \"Empty list.\"\nassert     max_element([1,2,3]) == 3, \"Max element = 3\"\nassert     max_element([-5,3,2,1]) == -5, \"Max element = -5\"\nassert     max_element([]) == None, \"Empty list.\"\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_element([]) == None, \"Empty list\"\nassert     max_element([1,2,3,4,5]) == 5, \"Max element in the list\"\nassert     max_element([1,2,3,4,4]) == 4, \"Max element in the list\"\nassert     max_element([1,1,1,1,1]) == 1, \"Max element in the list\"\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('\\n\\n==>', '='*30, 'TEST: max_element', '='*30)\nassert max_element([1,3,2,8]) == 8\nassert max_element([1,3,2,8,10,5,6]) == 10\nassert max_element([1,3,2,8,10,5,6]) == 10\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_element([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_element([]) == None\nassert     max_element([-5,-2,-3,2]) == 3\n\nprint('Test: passed')\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(max_element([2, 1, 3, 5, 4]))\nprint(max_element([3, 4, 3, 3]))\nprint(max_element([3, 4, 3, 5]))\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    \"\"\"\n    maximum = l[0]\n    for x in l:\n        if x > maximum:\n            maximum = x\n    return maximum\n\nprint(max_element([2, 1, 3, 5, 4]))\nprint(max_element([3, 4, 3, 3]))\nprint(max_element([3, 4, 3, 5])"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \n\ndef check_list_positive_integer(l: list):\n    \"\"\" Check list of positive integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert max_element([1, 3, -1, 5, 7]) == 5\nassert max_element([1, 3, -1, 5, 7, 9]) == 7\n\nif __name__ == \"__main__\":\n    # Check for number of arguments\n    if (len(sys.argv)!= 2):\n        print(\"Usage: python problem6.py <filename>\")\n        exit(-1)\n\n    # Read input from stdin\n    input_lines = sys.stdin.readlines()\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert fizz_buzz(21) == 1\nassert fizz_buzz(42) == 1\nassert fizz_buzz(71) == 0\nassert fizz_buzz(99) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fizz_buzz(10) == 3\nassert     fizz_buzz(13) == 3\nassert     fizz_buzz(5) == 1\nassert     fizz_buzz(8) == 2\nassert     fizz_buzz(11) == 2\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nfizz_buzz(1) == 0\nfizz_buzz(100) == 1\nfizz_buzz(7) == 1\nfizz_buzz(14) == 0\nfizz_buzz(17) == 1\nfizz_buzz(27) == 1\nfizz_buzz(30) == 1\nfizz_buzz(4) == 0\nfizz_buzz(6) == 1\nfizz_buzz(16) == 1\nfizz_buzz(27) == 1\nfizz_buzz(40) == 1\nfizz_buzz(48) == 2\nfizz_buzz(51) == 0\nfizz_buzz(60) == 2\nfizz_buzz(64) == 1\nfizz_buzz(69) == 1\nfizz_buzz(72) == 0\nfizz_buzz(76) == 0\nfizz_buzz(81) == 0\nfizz_buzz(88) == 2\nfizz_buzz(89) == 1\nfizz_buzz(96) == 2\nfizz_buzz(99) == 2"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fizz_buzz(5) == 1\nassert     fizz_buzz(7) == 2\nassert     fizz_buzz(10) == 2\nassert     fizz_buzz(15) == 3\nassert     fizz_buzz(17) == 5\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert fizz_buzz(14) == 2\nassert fizz_buzz(13) == 1\nassert fizz_buzz(76) == 3\nassert fizz_buzz(77) == 3\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fizz_buzz(100) == 26\nassert fizz_buzz(100) == 26\nassert fizz_buzz(9) == 23\nassert fizz_buzz(5) == 0\nassert fizz_buzz(1) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     fizz_buzz(13) == 0, \"Should be 0\"\nassert     fizz_buzz(3) == 0, \"Should be 0\"\nassert     fizz_buzz(5) == 0, \"Should be 0\"\nassert     fizz_buzz(14) == 1, \"Should be 1\"\nassert     fizz_buzz(20) == 1, \"Should be 1\"\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fizz_buzz(fizz_buzz_tester) == 4\nprint('Test 2 passed')\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_sort_even():\n    # all the tests passed\n    assert sort_even(list(range(10))) == sorted(list(range(10)))\n    assert sort_even(list(range(-10, 10))) == sorted(list(range(-10, 10)))\n\ntest_sort_even()"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_even([]) == []\nassert     sort_even([2]) == [2]\nassert     sort_even([2,3,4,5,6,7,8,9,10,11]) == [2,4,6,8,10,11,3,5,7,9]\nassert     sort_even([1,3,5,7,9,11,13,15,17,19,21]) == [1,3,5,7,9,11,13,15,17,19,21]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_even(['d', 'c', 'b', 'a', 'a', 'a', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'b', 'c', 'd', 'a', 'a']\nassert     sort_even(['a', 'a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'd']) == ['a', 'a', 'b', 'a', 'a', 'b', 'c', 'a', 'c', 'd']\nassert     sort_even([]) == []\nassert     sort_even(['a', 'a', 'a']) == ['a', 'a', 'a']\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_even([4,2,4,6,5,6,8,9]) == [4,4,2,5,6,6,6,8,9]\nassert sort_even([2,4,6,8,9,10,3]) == [2,4,6,3,8,9,10]\nassert sort_even([10,9,8,7,6,5,4,3,2,1]) == [10,10,10,10,10,10,10,10,10,10]\nassert sort_even([2,4,6,8,9,10,3]) == [2,4,6,3,8,9,10]\nassert sort_even([2,4,6,8,9,10,3]) == [2,4,6,3,8,9,10]\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_even([4,2,1]) == [1,2,4]\nassert     sort_even([4,2,3,1]) == [1,2,3,4]\nassert     sort_even([1,2,3]) == [1,2,3]\n\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_even([1, 2, 3, 4, 5]) == sorted([1, 2, 3, 4, 5]), \"Example 1\"\nassert sort_even([2, 2, 3, 4, 4]) == sorted([2, 2, 3, 4, 4]), \"Example 2\"\nassert sort_even([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, 10]) == sorted([1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, 10]), \"Example 3\"\n\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_even([1, 2, 3, 4, 5, 6, 7, 8]) ==     [2, 4, 6, 1, 3, 5, 8, 7], \"Wrong result\"\nassert     sort_even([1, 2, 3, 4, 5, 6]) ==     [1, 2, 3, 4, 5, 6], \"Wrong result\"\nassert     sort_even([1, 2, 3]) ==     [1, 2, 3], \"Wrong result\"\nassert     sort_even([]) ==     [], \"Wrong result\"\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6, 7, 8]\n    l2 = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(f\"sort_even(l) returns {sort_even(l)}\")\n    print(f\"sort_even(l2) returns {sort_even(l2)}\")\n    \n    "
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nencode_cyclic(\"ABCD\") == \"ABCBDABC\"\nprint(\"The code is correct\")\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abc\")) == \"abc\"\nassert     decode_cyclic(encode_cyclic(\"aabb\")) == \"aabb\"\nassert     decode_cyclic(encode_cyclic(\"aabaa\")) == \"aabaa\"\nassert     decode_cyclic(encode_cyclic(\"aababa\")) == \"aababa\"\n\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     encode_cyclic(\"MELT\") == \"MELT\"\nassert decode_cyclic(\"MELT\") == \"MELT\"\nassert encode_cyclic(\"NACHAL\") == \"NACHAL\"\nassert decode_cyclic(\"NACHAL\") == \"NACHAL\"\nassert encode_cyclic(\"BAMBAD\") == \"BAMBAD\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nencode_cyclic(\"\") == \"\"\nencode_cyclic(\"a\") == \"aaa\"\nencode_cyclic(\"ab\") == \"aabb\"\nencode_cyclic(\"abc\") == \"aabbc\"\nencode_cyclic(\"aabbc\") == \"aabbc\"\nencode_cyclic(\"aabbc\") == \"aabbc\"\n\nprint(\"passed\""
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decode_cyclic(encode_cyclic(\"abcdefgh\")) == \"abcdefgh\"\nassert     decode_cyclic(encode_cyclic(\"\") == \"\"\nassert     decode_cyclic(encode_cyclic(\"a\")) == \"a\"\nassert     decode_cyclic(encode_cyclic(\"\")) == \"\"\nassert     decode_cyclic(encode_cyclic(\"f\")) == \"f\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encode_cyclic(\"abc\") == \"abc\"\nassert decode_cyclic(\"abc\") == \"abc\"\nassert encode_cyclic(\"abc\") == \"abc\"\nassert decode_cyclic(\"abc\") == \"abc\"\nassert encode_cyclic(\"aabc\") == \"abc\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert decode_cyclic(encode_cyclic(\"abcdefghijklmnopqrstuvwxyz\")) == \"abcdefghijklmnopqrstuvwxyz\"\nassert decode_cyclic(encode_cyclic(\"abcdefghijklmnopqrstuvwxyz0123456789\")) == \"abcdefghijklmnopqrstuvwxyz0123456789\"\nassert decode_cyclic(encode_cyclic(\"abcdefghijklmnopqrstuvwxyz
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\nassert     prime_fib(5) == 11\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef prime_fib2(n: int) -> int:\n    \"\"\"\n    prime_fib2 returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    pass\n\n\ndef prime_fib3(n: int) -> int:\n    \"\"\"\n    prime_fib3 returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_fib(5) == 5\nassert     prime_fib(13) == 13\nassert     prime_fib(23) == 23\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    pf_res = prime_fib(n-1) + prime_fib(n-2)\n    return pf_res\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_fib(0) == 1\nassert     prime_fib(1) == 2\nassert     prime_fib(2) == 3\nassert     prime_fib(3) == 5\nassert     prime_fib(4) == 7\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prime_fib(5) == 29, \"Your function is not correct\"\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prime_fib(1) == (2, True)\nassert prime_fib(2) == (3, True)\nassert prime_fib(3) == (5, True)\nassert prime_fib(4) == (5, True)\nassert prime_fib(5) == (13, True)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triples_sum_to_zero([-3, 0, 1, 2, -2, 1, -2, -1]) == True\nassert     triples_sum_to_zero([0, 0, 0]) == True\nassert     triples_sum_to_zero([0, 0, 0, 0]) == False\nassert     triples_sum_to_zero([0, 0, 0, 0, 0]) == True\nassert     triples_sum_to_zero([]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (triples_sum_to_zero([-3, -2, -1, 0, 1, 2, 3]) == True)\nassert     (triples_sum_to_zero([-3, -2, -1, 0, 1, 2, -2]) == False)\n\ndef sum_to_zero_util(l: list):\n    \"\"\"\n    sum_to_zero_util takes a list of integers as an input.\n    it returns the number of distinct elements that sum to zero.\n    \"\"\"\n    pass\n\nassert     (sum_to_zero_util([-3, -2, -1, 0, 1, 2, 3]) == 3)\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triples_sum_to_zero([1, 2, 3]) == False\nassert     triples_sum_to_zero([1, 1, 1, 1]) == True\nassert     triples_sum_to_zero([-3, -2, -1]) == True\nassert     triples_sum_to_zero([1, 2, 3, 4, 5]) == False\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triples_sum_to_zero([-3, -2, -1, 0, 1, 2, 3]) == True\nassert     triples_sum_to_zero([-3, -2, -1, 0, 1, 3]) == False\n\ndef list_sum_to_zero(l: list):\n    \"\"\"\n    list_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triples_sum_to_zero([-4,-2,2,1,1,2,3,4,7,8]) == True\nassert     triples_sum_to_zero([1,1,1]) == True\nassert     triples_sum_to_zero([0,-2,-2,-2,-2,0]) == False\nassert     triples_sum_to_zero([0,-2,-2,-2,0]) == False\nassert     triples_sum_to_zero([-1,-1,-1,-1,-1,-1,-1]) == True\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert triples_sum_to_zero([-3, -2, -1, 1, 2, 3]) is True\nassert triples_sum_to_zero([-3, -2, -1, 1, 3]) is False\nassert triples_sum_to_zero([-3, -2, 1, 1, 2, 3]) is False\nassert triples_sum_to_zero([-3, -2, 1, 1, 2, 3, -4, -5]) is False\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     car_race_collision(5) == 3\nassert     car_race_collision(6) == 5\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     car_race_collision(1) == 0, 'car_race_collision(1) failed'\nassert car_race_collision(2) == 1, 'car_race_collision(2) failed'\nassert car_race_collision(4) == 2, 'car_race_collision(4) failed'\nassert car_race_collision(8) == 5, 'car_race_collision(8) failed'\nassert car_race_collision(64) == 13, 'car_race_collision(64) failed'\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     car_race_collision(1) == 0\nassert     car_race_collision(2) == 0\nassert     car_race_collision(3) == 1\nassert     car_race_collision(4) == 1\nassert     car_race_collision(5) == 2\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of collisions.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     car_race_collision(2) == 0, 'OK'\nassert     car_race_collision(3) == 2, 'OK'\nassert     car_race_collision(5) == 4, 'OK'\nassert     car_race_collision(10) == 11, 'OK'\n\nprint(f'\\n car_race_collision({n}) = {car_race_collision(n)}')"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef car_race_collision_2(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     car_race_collision(1) == 0\nassert car_race_collision(2) == 0\nassert car_race_collision(3) == 1\nassert car_race_collision(10) == 3\nassert car_race_collision(20) == 4\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     incr_list([1,2,3]) ==    [2,3,4], \"incr_list should return a list with elements incremented by 1\"\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     incr_list([0,1,2]) == [1,2,3], \"incr_list failed\"\nassert     incr_list([0,1,2]) == [1,2,3], \"incr_list failed\"\n\ndef increment_all(L: list):\n    \"\"\"\n    Return a copy of L with each element incremented by 1.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     incr_list([]) == []\nassert incr_list([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 6]\nassert incr_list([2, 4, 6, 8, 10]) == [3, 5, 7, 9, 11]\nassert incr_list([]) == []\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    incr_list([2, 4, 8]) == [3, 5, 11], 'incr_list()'\nassert \n    incr_list([]) == [1], 'incr_list()'"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     incr_list([1, 2, 3]) == [2, 3, 4], \\\n                \"incr_list([1, 2, 3]) should be [2, 3, 4]\"\nassert     incr_list([1, 1, 1]) == [2, 2, 2], \\\n                \"incr_list([1, 1, 1]) should be [2, 2, 2]\"\nassert     incr_list([1, 2, 3]) == [2, 3, 4], \\\n                \"incr_list([1, 2, 3]) should be [2, 3, 4]\"\nassert     incr_list([1, 2, 3]) == [2, 3, 4], \\\n                \"incr_list([1, 2, 3]) should be [2, 3, 4]\"\nassert     incr_list([1, 2, 3, 3]) == [2, 3, 4, 4], \\\n                \"incr_list([1, 2, 3, 3]) should be [2, 3, 4, 4]\""
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nincr_list([1, 2, 3]) == [2, 3, 4]\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint (\"All done.\")\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint (\"Pass\" if (pairs_sum_to_zero([2,4,7,-1,1,2])) else \"Fail\")\nprint (\"Pass\" if not (pairs_sum_to_zero([-2,5,-3,1,-5])) else \"Fail\")\nprint (\"Pass\" if not (pairs_sum_to_zero([])) else \"Fail\")\nprint (\"Pass\" if pairs_sum_to_zero([10,11]) else \"Fail\")\nprint (\"Pass\" if pairs_sum_to_zero([10,11,10]) else \"Fail\")\nprint (\"Pass\" if pairs_sum_to_zero([2,5,5,2,10]) else \"Fail\")\n\n'''\nExpected output:\nPass\nPass\nPass\nPass\nPass\nPass\n\n'''"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pairs_sum_to_zero([]) == False, \"pairs_sum_to_zero for empty list.\"\nassert     pairs_sum_to_zero([1]) == False, \"pairs_sum_to_zero for list of length 1.\"\nassert     pairs_sum_to_zero([1,1]) == True, \"pairs_sum_to_zero for list of length 2.\"\nassert     pairs_sum_to_zero([-1,1]) == False, \"pairs_sum_to_zero for list of length 2.\"\nassert     pairs_sum_to_zero([1,-1]) == False, \"pairs_sum_to_zero for list of length 2.\"\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pairs_sum_to_zero([-4,-2,-2,2,2,2]) == True\nassert     pairs_sum_to_zero([-4,-2,-2,-2,2,2]) == False\nassert     pairs_sum_to_zero([-4,-2,-2,-2,-2,2]) == True\nassert     pairs_sum_to_zero([-4,-2,-2,-2,-2,-2]) == False\n\nprint(\"\\n\")\nprint(\"Testing pairs_sum_to_zero...\")\nprint(pairs_sum_to_zero([-4,-2,-2,2,2,2]))\nprint(pairs_sum_to_zero([-4,-2,-2,-2,2,2]))\nprint(pairs_sum_to_zero([-4,-2,-2,-2,-2,2]))\nprint(pairs_sum_to_zero([-4,-2,-2,-2,-2,-2]))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pairs_sum_to_zero([1,2,-3,4,2,-1]) == True\nassert     pairs_sum_to_zero([-5,-2,3,4,-1,1]) == True\nassert     pairs_sum_to_zero([1,2,3,4,5]) == False\nassert     pairs_sum_to_zero([-5,-2,3,4,1]) == False\nassert     pairs_sum_to_zero([1,2,-3,-1,1,1]) == False\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_base(18,2) ==     \"12\", \"example 1\"\nassert     change_base(6,4) ==     \"2\", \"example 2\"\nassert     change_base(10,16) ==     \"A\", \"example 3\"\n\ndef sum_digits(x: str):\n    \"\"\"Sum the digits of a positive integer in base 10.\n    return the sum\n    base numbers are less than 10.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef change_base_iter(x: int, base: int):\n    \"\"\"Same as change_base but using python iterative algorithm.\n    \n    Uses addition/multiplication approach with defined base.\n    \"\"\"\n    pass\n\ndef change_base_recursive(x: int, base: int):\n    \"\"\"Same as change_base but using recursion.\n\n    Uses multiplication/addition approach with defined base.\n    \"\"\"\n    pass\n\n\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    change_base(100, 2) == \"101\"\n    change_base(1234, 16) == \"fefb\"\n    change_base(100, 8) == \"daf\"\n    change_base(1234, 16) == \"3ff2e\"\n\ndef base_to_num(num: str, base: int):\n    \"\"\"change the numerical base of input string num to base.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n\ndef base_to_num_helper(num: str, base: int, prev_num: str = \"0\"):\n    \"\"\"helper function for base_to_num\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_base(1, 2) == \"11\"\nassert     change_base(11, 2) == \"101\"\nassert     change_base(10, 2) == \"1010\"\nassert     change_base(10, 3) == \"101010\"\nassert     change_base(10, 10) == \"101010\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef divide_by(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_base(4, 2) == \"0o44\"\nassert     change_base(14, 16) == \"0x14\"\nassert     change_base(-2, 16) == \"0xfe\"\nassert     change_base(-2, 2) == \"0xea\"\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_base(8, 2) == '1000', \\\n        'change_base: the input values does not match'\nassert     change_base(8, 10) == '8', \\\n        'change_base: the input values does not match'\nassert     change_base(8, 16) == '64', \\\n        'change_base: the input values does not match'\nassert     change_base(8, 2) == '1000', \\\n        'change_base: the input values does not match'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nchange_base(x, 3) == '31'\nchange_base(x, 16) == '15'\nchange_base(x, 10) == '15'\nchange_base(x, 2) == '15'\nchange_base(x, 8) == '15'\nchange_base(x, 7) == '31'\nchange_base(x, 5) == '15'\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(triangle_area(4, 10)) # == 20.0\nprint(triangle_area(3, 7)) # == 12.5\nprint(triangle_area(5, 1)) # == 10.0\nprint(triangle_area(1, 2)) # == 1.0\nprint(triangle_area(2, 1)) # == 1.0\nprint(triangle_area(1, 3)) # == 1.0\n\n\ndef triangle_area(a, b, c):\n    \"\"\"Given lengths of three sides of a triangle return its area.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_volume_from_area(area):\n    \"\"\"Given area return volume.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    assert triangle_area(1,1) == 1\n    assert triangle_area(1,2) == 1\n    assert triangle_area(2,2) == 2\n    assert triangle_area(3,2) == 2\n    "
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(1, 1) == 1\nassert     triangle_area(2, 2) == 3\nassert     triangle_area(4, 5) == 12\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     triangle_area(1, 1) == 1\nassert     triangle_area(1, 2) == 1.5\nassert     triangle_area(1, 3) == 2\nassert     triangle_area(2, 1) == 2\nassert     triangle_area(2, 2) == 4\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(1, 5) == 2.5\nassert     triangle_area(2, 5) == 5\nassert     triangle_area(3, 5) == 5.5\nassert     triangle_area(4, 5) == 6\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     triangle_area(a=2, h=3) == 5\nassert     triangle_area(a=1, h=2) == 1\nassert     triangle_area(a=2, h=1) == 2\nassert     triangle_area(a=3, h=2) == 6\nassert     triangle_area(a=3, h=1) == 3"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef fib5(n: int):\n    \"\"\"The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib5(0) -> 0\n    fib5(1) -> 1\n    fib5(2) -> 1\n    fib5(3) -> 2\n    fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4).\n    Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    return fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 2\nassert     fib4(3) == 0\nassert     fib4(4) == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fib4(3) == 0\nassert     fib4(2) == 1\nassert     fib4(1) == 0\nassert     fib4(0) == 0\nassert     fib4(100) == 8922102397\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (fib4(0) == 0)\nassert     (fib4(1) == 0)\nassert     (fib4(2) == 2)\nassert     (fib4(3) == 0)\nassert     (fib4(4) == 2)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 1\nassert     fib4(4) == 2\nassert     fib4(5) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(fib4(n=5)) # 0, 0, 2, 0, 0\nprint(fib4(n=4)) # 0, 0, 2, 0\nprint(fib4(n=3)) # 0, 0, 2\nprint(fib4(n=2)) # 0, "
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fib4(0)         == 0\nassert     fib4(1)         == 0\nassert     fib4(2)         == 1\nassert     fib4(3)         == 0\nassert     fib4(4)         == 2\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fib4(0) == 0\nassert     fib4(1) == 0\nassert     fib4(2) == 1\nassert     fib4(3) == 0\nassert     fib4(4) == 1\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median([5, 6, 9, 9, 9]) == 9, \"Wrong answer\"\nassert     median([5, 6, 9, 0, 9]) == 5, \"Wrong answer\"\nassert     median([]) == None, \"Wrong answer\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median([1,2,3,4,5]) == 3, \"Wrong median\"\nassert     median([3,4,5,6,7]) == 4, \"Wrong median\"\nassert     median([1,2,3,4,5,6,7,8,9]) == 5, \"Wrong median\"\nassert     median([1,2,3,4,5,6,7,8,9,10]) == 5, \"Wrong median\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median([]) == None, \"Empty list\"\nassert median([1,2,3]) == 2, \"Single item list\"\nassert median([1,2,3,4]) == 2, \"Sorted list\"\nassert median([1,2,3,4,5,6]) == 3, \"Normal list\"\nassert median([1,2,3,4,5,6,7,8,9]) == 3, \"Random list\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median([1, 2, 3, 4, 5]) == 4, \"Wrong median\"\nassert     median([]) == None, \"Wrong median\"\nassert     median([3, 2, 1, 5, 4]) == 2, \"Wrong median\"\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median([]) == 0.0\nassert     median([1, 2, 3]) == 2.0\nassert     median([1, 2, 3, 4]) == 2.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8]) == 3.5\nassert     median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4.5\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # run a test case\n    l = [1, 3, 4, 5, 9, 13]\n    assert median(l) == 5, \"Wrong result.\"\n    \n    l = []\n    assert median(l) == 0, \"Wrong result.\"\n\n    l = [1]\n    "
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    assert is_palindrome(\"Banas\") == True, \"Wrong result\"\n    assert is_palindrome(\"12345\") == False, \"Wrong result\"\n    assert is_palindrome(\"A man, a plan, a canal: Panama\") == True, \"Wrong result\"\n    assert is_palindrome(\"Tact Coa\") == False, \"Wrong result\""
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_palindrome(\"Nirfapati\")\nassert     not is_palindrome(\"Rohit\")\nassert     is_palindrome(\"GeeksQuiz\")\nassert     not is_palindrome(\"Geeks\")\nassert     is_palindrome(\"Nirfapati\")\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('\\nTesting the function is_palindrome with a valid string:')\nprint(is_palindrome('abcde'))\nprint(is_palindrome('abba'))\nprint(is_palindrome('ababa'))\nprint(is_palindrome('a'))\nprint(is_palindrome('abcdba'))\n\nprint('\\nTesting the function is_palindrome with an empty string:')\nprint(is_palindrome(''))\nprint(is_palindrome(None))\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert is_palindrome(\"\") == True\nassert is_palindrome(\"a\") == True\nassert is_palindrome(\"aa\") == True\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\nassert\nassert \nassert\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_substring(main_string: str, sub_string: str):\n    \"\"\"\n    Counts number of times given substring is found in main_string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmodp(2, 10) == 2\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (modp(0,5) == 0)\nassert     (modp(1,5) == 1)\nassert     (modp(2,5) == 1)\nassert     (modp(3,5) == 0)\nassert     (modp(4,5) == 1)\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     modp(0, 10) == 10\nassert     modp(1, 10) == 10\nassert     modp(2, 10) == 9\nassert     modp(3, 10) == 8\nassert     modp(4, 10) == 7\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     modp(1, 2) == 1\nassert     modp(2, 2) == 1\nassert     modp(3, 2) == 0\nassert     modp(4, 2) == 1\nassert     modp(10, 2) == 1\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     modp(10, 100) == 0\nassert     modp(10, 1000) == 20\nassert     modp(10, 10000) == 20\nassert     modp(10, 100000) == 20\nassert     modp(10, 1000000) == 20\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef modn(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decode_shift(\"zax\") == \"z\"\nassert     decode_shift(\"jzax\") == \"j\"\nassert     decode_shift(\"abzax\") == \"a\"\nassert     decode_shift(\"vaxb\") == \"v\"\n\n\ndef encode_rotate(s: str):\n    \"\"\"\n    returns encoded string by rotating each character by 3 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 3 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     encode_shift(\"1\") == \"2\"\nassert     encode_shift(\"2\") == \"3\"\nassert     encode_shift(\"3\") == \"4\"\nassert     encode_shift(\"4\") == \"a\"\nassert     encode_shift(\"0\") == \"a\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     encode_shift(\"BANANA\") == \"BABABA\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decode_shift(\"sigmod\") == \"sigmod\"\nassert     decode_shift(\"shjqt\") == \"shjqt\"\nassert     decode_shift(\"smxgj\") == \"smxgj\"\nassert     decode_shift(\"qecjb\") == \"qecjb\"\nassert     decode_shift(\"j\") == \"j\"\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decode_shift(encode_shift(\"hello\")) == \"hello\", \"encode_shift and decode_shift are not complementary\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_vowels(\"I love Python\") == \"love pytho\"\nassert     remove_vowels(\"I am a boy\") == \"iam aboy\"\nassert     remove_vowels(\"My name is Alex\") == \"myname is alex\"\nassert     remove_vowels(\"I love you\") == \"love you\"\nassert     remove_vowels(\"I love you so much\") == \"love so much you\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_vowels(\"I love Python\") == \"I lv Pythn\", \"Test 1\"\nassert     remove_vowels(\"I like Python\") == \"I lv Pythn\", \"Test 2\"\nassert     remove_vowels(\"I like Python\") == \"I lv Pythn\", \"Test 3\"\nassert     remove_vowels(\"I like Python\") == \"I lv Pythn\", \"Test 4\"\nassert     remove_vowels(\"I like Python\") == \"I lv Pythn\", \"Test 5\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_vowels(\"I'm a boy\") == \"Im a b\"\nassert     remove_vowels(\"I'm a teacher\") == \"Im a b\"\nassert     remove_vowels(\"I'm a teacher\") == \"Im a b\"\nassert     remove_vowels(\"I'm a teacher\") == \"Im a b\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert remove_vowels(\"Hello world\") == \"Hello World\"\nassert remove_vowels(\"apple\") == \"apple\"\nassert remove_vowels(\"python\") == \"python\"\nassert remove_vowels(\"am\") == \"am\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_vowels('Hello') == 'Hello'\nassert     remove_vowels('Bye') == 'Bye'\nassert     remove_vowels('Hola') == 'Hola'\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_vowels(\"hello\") == \"hll\"\nassert     remove_vowels(\"vowel\") == \"v\"\nassert     remove_vowels(\"\") == \"\"\nassert     remove_vowels(\"foo\") == \"foo\"\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\"\"\"\nTask 6\n\"\"\"\n\ndef remove_vowels_sentence(text):\n    \"\"\"\n    remove_vowels_sentence is a function that takes a sentence and returns sentence without vowels.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 51,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nbelow_threshold([4, 6, 10, 2], 5) == True\nbelow_threshold([4, 6, 10, 2], 4) == True\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     below_threshold([0, 3, -2, 1], 1) is True\nassert     below_threshold([1, -2, 3], 1) is False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     below_threshold([3,1,2,6], 3) == True\nassert     below_threshold([3,1,2,6], 0) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef above_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are above threshold t.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     below_threshold([1,2,3], 2)\nassert     below_threshold([0,1,1,2,3,1,3,4,5,7,8,3], 3)\nassert     below_threshold([-1,0,3,6,7,3,4,3,0,7,9,2,1,3,0,5], 4)\nassert not     below_threshold([-1,0,3,6,7,3,4,3,0,7,9,2,1,3,0,5], 6)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     below_threshold([1,3,4,5,6], 4) == True\nassert     below_threshold([1,2,3,4,5,6], 4) == False\nassert     below_threshold([5,3,4,5,6], 4) == False\nassert     below_threshold([1,2,3,4,5], 4) == False\n\nprint(\"\\nPass\" if below_threshold([1,3,4,5,6], 4) == True else \"Fail\")\nprint(\"Pass\" if below_threshold([1,2,3,4,5,6], 4) == False else \"Fail\")\nprint(\"Pass\" if below_threshold([5,3,4,5,6], 4) == False else \"Fail\")\nprint(\"Pass\" if below_threshold([1,2,3,4,5], 4) == False else \"Fail\")\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nbelow_threshold([10, 20, 30, 40, 50], 60) == True\nassert \nbelow_threshold([5, 2, 1], 5) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     below_threshold([1,2,3,4],2) == True\nassert     below_threshold([1,2,3,4],3) == True\nassert     below_threshold([10,20,30,40,50],40) == True\nassert     below_threshold([10,20,30,40,50],50) == False\nassert     below_threshold([10,20,30,40,50],0) == False\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbelow_threshold([], 0) == True\nbelow_threshold([2], 1) == False\nbelow_threshold([1, 2, 3, 4], 5) == False\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nadd(4, 2) == 6\nadd(1, 2) == 3\n\n\ndef is_even(n: int):\n    \"\"\"\n    Given a number n, check whether it is even or not\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(add(3, 4))\nprint(add(\"a\", 4))\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert add(1,2) == 3\nassert add(3,2) == 5\nassert add(2,3) == 5\nassert add(2,2) == 4\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nadd(0, 0) == 0\nadd(1, 1) == 2\nadd(1, 10) == 11\n\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    \"\"\"\n    return x + y\n\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef mul(x: int, y: int):\n    \"\"\"Multiply two numbers x and y\n    \"\"\"\n    pass\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add(5, 5) == 10\nassert     add(5, 10) == 15\nassert     add(10, 10) == 20\nassert     add(10, 5) == 15\nassert     add(2, 3) == 5\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     same_chars(\"abcd\", \"abcd\")\nassert     not same_chars(\"aabcd\", \"abcd\")\nassert     not same_chars(\"abcd\", \"acd\")\n\ndef substrings(s: str, n: int):\n    \"\"\"\n    Find all substrings of a string whose length is \n    equals to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     same_chars('apple', 'apple')        == True\nassert     same_chars('apple', 'apple')        == False\nassert     same_chars('apple', 'appla')        == False\nassert     same_chars('appla', 'appla')        == True\nassert     same_chars('appla', 'appla')        == True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     same_chars(\"abc\", \"abc\") == True\nassert     same_chars(\"abc\", \"cba\") == False\nassert     same_chars(\"abc\", \"aabb\") == False\nassert     same_chars(\"abc\", \"abcd\") == False\nassert     same_chars(\"ab\", \"abcd\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     same_chars(\"hello\", \"hello\") == True\nassert     same_chars(\"hello\", \"ole\") == False\nassert     same_chars(\"hello\", \"hallo\") == True\n\ndef same_chars_2(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return s0 == s1\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     same_chars(\"tea\", \"eat\")    ==     True\nassert     same_chars(\"trim\", \"train\")    ==     False\nassert     same_chars(\"clap\", \"clap\")    ==     True\nassert     same_chars(\"a\", \"aa\")    ==     False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     same_chars(\"mushroom\", \"mushroomba\") == False\nassert     same_chars(\"mushroom\", \"mushroom\") == True\nassert     same_chars(\"mushroom\", \"mushroom\") == True\n\nassert     same_chars(\"mushroom\", \"mushroom\") == True\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     same_chars(\"aa\", \"aa\") == True\nassert     same_chars(\"aa\", \"aaaaaaa\") == True\nassert     same_chars(\"aa\", \"ab\") == False\nassert     same_chars(\"aabbcc\", \"aabbcc\") == True\nassert     same_chars(\"aabbcc\", \"aabbcdd\") == False\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     same_chars('w3resource', 'w3resource') == True\nassert     same_chars('w3resource', 'w3w3w3w3w') == False\nassert     same_chars('w3resource', 'w3w3w3w3w') == False\nassert     same_chars('w3resource', 'w3w3w3w3w3') == False\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fib(5) == 5\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(fib(5))"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfib(1) == 1\nfib(2) == 1\nfib(3) == 2\nfib(4) == 3\nfib(5) == 5\nfib(10) == 55\nfib(20) == 6765\nfib(30) == 832040\nfib(40) == 102334155\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fib(0) == 0\nassert     fib(1) == 1\nassert     fib(2) == 1\nassert     fib(3) == 2\nassert     fib(4) == 3\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert fib(0) == 0\nassert fib(1) == 1\nassert fib(2) == 1\nassert fib(3) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     correct_bracketing(\"(\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"}\") == False\nassert     correct_bracketing(\"{\") == False\nassert     correct_bracketing(\"<\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"<()>\") is True, \"For <()>\"\nassert     correct_bracketing(\"<[][]>\") is True, \"For <[][]>\"\nassert     correct_bracketing(\"<{[(])>\") is False, \"For <{[(])>\"\nassert     correct_bracketing(\"<{[)]>\") is False, \"For <{[)]>\"\nassert     correct_bracketing(\"<[]>\") is True, \"For <[]>\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     correct_bracketing(\"<()>\") == True\nassert     correct_bracketing(\"<(>)\") == True\nassert     correct_bracketing(\"<[])>\") == False\nassert     correct_bracketing(\"<{[(])>\") == False\nassert     correct_bracketing(\"<(>)<\") == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"<>()\"))\n    print(correct_bracketing(\"(<\"));\n    print(correct_bracketing(\"<[([<\"));\n    print(correct_bracketing(\"<{<{<<[<[\"))\n    \n    \n    \n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         correct_bracketing(\"<\")\nassert         correct_bracketing(\"<>\")\nassert         correct_bracketing(\"<><\")\nassert         correct_bracketing(\"<><<\")\nassert         correct_bracketing(\"<><>\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     correct_bracketing(\"<()\") == False, \"<\"\nassert     correct_bracketing(\"(<\") == False, \"<\"\nassert     correct_bracketing(\"<))\") == False, \")\"\nassert     correct_bracketing(\"(<>)\") == False, \"<>\"\nassert     correct_bracketing(\"<[\") == False, \"<\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<\") == True\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<\") == True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"<\") is True\nassert     correct_bracketing(\"<}\") is False\nassert     correct_bracketing(\"<[\") is False\nassert     correct_bracketing(\"<{]\") is False\nassert     correct_bracketing(\"<[]\") is False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"<\") == False\nassert     correct_bracketing(\"<</<\") == False\nassert     correct_bracketing(\"<</<><\") == True\nassert     correct_bracketing(\"<]\") == False\nassert     correct_bracketing(\"<]</\") == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     monotonic([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     monotonic([1, 2, 3, 4, 4, 3, 2, 1]) == False\nassert     monotonic([1, 2, 3, 4, 3, 4, 2, 1]) == False\nassert     monotonic([1, 1, 2, 2, 3, 3, 4, 4]) == False\nassert     monotonic([1, 1, 2, 2, 3, 3, 4, 4, 1, 1, 2, 2, 3, 3, 4, 4]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert monotonic([1,2,3,4,5,6,7,8]) == True\nassert monotonic([1,2,3,5,6,7,8]) == False\nassert monotonic([1,2,3,4,5,8,7,6]) == False\nassert monotonic([1,1,1,1,1,1,1]) == True\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"test_monotonic: SUCCESS\")\n\nprint(\"-\"*10)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nmonotonic([1,2,3]) is True\nmonotonic([1,2,3,4]) is True\nmonotonic([1,2,3,3]) is False\nmonotonic([1,2,3,4,4]) is False\nmonotonic([1,1,1]) is True\nmonotonic([-1,-1,-1]) is True\nmonotonic([-1,-1,-2]) is False\nmonotonic([-1,-2,-1]) is False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     monotonic([1, 2, 3, 2, 1])\nassert not monotonic([1, 2, 3, 2, 1, 3, 2, 1, 3, 2])\n\nassert not monotonic([-1, -2, -3, -2, -1])\nassert monotonic([-1, -2, -3, -2, -1])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not monotonic([-3, -2, -1, 0, 1, 2, 3])\nassert not monotonic([1, 2, 3, 0, -1, -2])\nassert not monotonic([1, 1, 1, 1])\nassert monotonic([1, 2, 3, 4, 5, 6])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     monotonic([-1,-1]) == True\nassert     monotonic([-1,-1,0]) == True\nassert     monotonic([-1,-1,0,0]) == True\nassert     monotonic([-1,0,0]) == True\nassert     monotonic([-1,0,0,1]) == False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     monotonic([]) == True\nassert     monotonic([1,2]) == True\nassert     monotonic([1,1]) == True\nassert     monotonic([2,1]) == False\nassert     monotonic([1,2,3]) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common([1,2,3,4], [2,3,4,5]) == [2,3,4], 'Wrong!'\nassert common([1,2,3,4], [2,3,4,4]) == [2,3,4], 'Wrong!'\nassert common([1,2,3,4], [2,3,4,5]) == [2,3,4,5], 'Wrong!'\n\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common([1,2,3], [2,3,4]) == [1, 2]\nassert     common([1,2,3], [2,4,5]) == []\nassert     common([1,2,3], [1,2,4]) == [1, 2]\nassert     common([1,2,3,4,5,6], [1,2,4,5,7,8]) == [1, 2, 4, 5]\nassert     common([1,2,3,4,5,6], [1,2,5,7,8,9]) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common([1, 1, 2, 2], [1, 2, 2, 3]) == [1, 2]\nassert     common([1, 1, 2, 2], [1, 2, 2, 3, 3]) == [1, 2]\nassert     common([], [1, 2, 3, 4]) == []\nassert     common([1, 2, 3, 4], []) == []\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    print(common(l1, l2))"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common([0,1,2,3], [2,3,4]) == [2,3], 'Wrong!'\nassert     common([0,1,2,3], [1,2,3]) == [], 'Wrong!'\nassert     common([], [1,2,3]) == [], 'Wrong!'\nassert     common([0], [1,2,3]) == [], 'Wrong!'\nassert     common([0,1], [2,3,4]) == [], 'Wrong!'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common([2,4,7,1,5],    [1,3,6,5,7]) == [1, 2, 5, 7], \"incorrect\"\nassert     common([2,4,7,1,5],    [1,5,6,7,8]) == [1,2,5], \"incorrect\"\nassert     common([1,2,3,4],    [2,3,4,5]) == [], \"incorrect\"\nassert     common([1,2,3,4],    [2,3,4,5,6]) == [2,3,4,6], \"incorrect\"\nassert     common([1,2,3,4],    [2,3,4,5,6,7]) == [2,3,4,6], \"incorrect\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common([1, 2, 3, 4, 5, 6], [1, 2, 3, 5, 6]) == \\\n            [1, 2, 3, 5], \\\n            \"Incorrect return value!\"\n\nassert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 6]) == \\\n            [1, 2, 3, 4, 6], \\\n            \"Incorrect return value!\"\n\nassert common([1, 2, 3, 4, 5, 6], [1, 2, 3, 5, 6]) == \\\n            [1, 2, 3, 5], \\\n            \"Incorrect return value!\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_prime_factor(4) == 2\nassert     largest_prime_factor(5) == 5\nassert     largest_prime_factor(6) == 3\nassert     largest_prime_factor(999) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_prime_factor(2) == 1\nassert     largest_prime_factor(3) == 2\nassert     largest_prime_factor(17) == 11\nassert     largest_prime_factor(12) == 2\nassert     largest_prime_factor(1) == 0\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_prime_factor(100) == 2\nassert     largest_prime_factor(3) == 3\nassert     largest_prime_factor(13) == 13\nassert     largest_prime_factor(2147483647) == 2\nassert     largest_prime_factor(999999999999999999999999999999999999999999999999999999999) == 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_prime_factor(15) == 3\nassert     largest_prime_factor(9) == 3\nassert     largest_prime_factor(2) == 2\nassert     largest_prime_factor(1) == 1\nassert     largest_prime_factor(123456789) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef smallest_divisible_number(k: int, divisors: List[int]):\n    \"\"\"Return the smallest number that is divisible by all numbers in the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    \n    total = 0\n    for i in range(1, n + 1):\n        total += i\n\n    return total\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    sum_to_n(5) == 1 + 2 + 3 + 4 + 5 == 15, \"incorrect function\"\nassert \n    sum_to_n(10) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 == 55, \"incorrect function\"\nassert \n    sum_to_n(15) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 == 171, \"incorrect function\""
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    \ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef return_number(n: int):\n    \"\"\"return_number is a function that returns a random number in the range of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_to_n(5) == 15, 'Function not working.'\nassert     sum_to_n(10) == 55, 'Function not working.'\nassert     sum_to_n(20) == 65, 'Function not working.'\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     correct_bracketing(\"(())\")\nassert     correct_bracketing(\"((((((((((())))))))()))))()\")\nassert     correct_bracketing(\"(((((((((((()))))))))))()))))()\")\nassert     correct_bracketing(\"(((((((((((()))))))))))()))))()\")\nassert     correct_bracketing(\"((((((((((((()))))))))))()))))()\")\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Correctly determines if brackets match:\", correct_bracketing(\"(()\"))"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     correct_bracketing(\"(()())(())\") == True\nassert correct_bracketing(\"(()(()))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     correct_bracketing('(()())')\nassert     correct_bracketing('(((()))(())))')\nassert not correct_bracketing('(())')\nassert not correct_bracketing('((((())))))')\nassert not correct_bracketing('))')\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert correct_bracketing(\"(((())))\")\nassert not correct_bracketing(\"(((()))\")\nassert correct_bracketing(\"((()))\")\nassert not correct_bracketing(\"(((())))\")\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     correct_bracketing(\"((()))\") == False\nassert     correct_bracketing(\"(()))\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\"()(()\") == True\nassert     correct_bracketing(\"((()))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     correct_bracketing(\"(())\") == True\nassert     correct_bracketing(\"(()\") == False\nassert     correct_bracketing(\")\") == False\nassert     correct_bracketing(\"((()\") == False\nassert     correct_bracketing(\"(()))\") == False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     correct_bracketing(\"()\") == True\nassert     correct_bracketing(\"()[]{}\") == True\nassert     correct_bracketing(\"(]\") == False\nassert     correct_bracketing(\"([)]\") == False\nassert     correct_bracketing(\"((([])))\") == True\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     correct_bracketing(\"((((())))((())))\") == True, \"one ( and ) pair not working\"\nassert     correct_bracketing(\"((()))(())\") == False, \"() is not the last item\"\nassert     correct_bracketing(\"(((()))((()))\") == False, \"opening bracket before a )\"\nassert     correct_bracketing(\"(((()))(((()))))\") == False, \"wrong number of opening brackets\"\nassert     correct_bracketing(\"((((()))))\") == False, \"(((()))) is not the last item\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert derivative([1, 2, 3]) == [-3, 2, 1]\nassert derivative([1, -2, -3]) == [-4, 6, 3]"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    xs = [-4, 1, 2]\n    # derivative of xs = [-4, 4, 0]\n    print(derivative(xs))"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(derivative([1, 2, 3]))\nprint(derivative([0, 1, 0]))\nprint(derivative([0, 0, 0]))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     derivative([1, 1, 1]) == [0, 3, 6]\nassert     derivative([1, 1, 1, 1]) == [0, 4, 10, 12]\nassert     derivative([1, 2, 3, 4]) == [0, 12, 24, 36]\nassert     derivative([0, 0, 1, 1]) == [2, 2, 4]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef discriminant(a, b, c):\n    \"\"\" Calculate discriminant of a quadratic equation.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef integrate(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return integral of this polynomial in the same form.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(6) == 8\nassert     fibfib(10) == 55\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\nassert     fibfib(7) == 13\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fibfib(0) == 0\nassert fibfib(1) == 0\nassert fibfib(2) == 1\nassert fibfib(3) == 1\nassert fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fibfib(0) == 0\nassert     fibfib(1) == 0\nassert     fibfib(2) == 1\nassert     fibfib(3) == 1\nassert     fibfib(4) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fibfib(0) == 0, \"Wrong\"\nassert     fibfib(1) == 0, \"Wrong\"\nassert     fibfib(2) == 1, \"Wrong\"\nassert     fibfib(3) == 1, \"Wrong\"\nassert     fibfib(4) == 2, \"Wrong\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    return\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef vowels_count_2(s):\n    return sum(s.count(v) for v in \"aeiou\")\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    vowels_count(\"WOW\") == 5\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Vowels count\", vowels_count(\"duck\"), \"should be 3\")\nprint(\"Vowels count\", vowels_count(\"d\"), \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"a\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"d\"], \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"e\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"i\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"u\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"o\"), \"should be 2\")\nprint(\"Vowels count\", vowels_count(\"a\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"y\"), \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"b\"), \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"q\"), \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"e\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"i\"), \"should be 2\")\nprint(\"Vowels count\", vowels_count(\"u\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"o\"), \"should be 3\")\nprint(\"Vowels count\", vowels_count(\"a\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"y\"), \"should be 1\")\nprint(\"Vowels count\", vowels_count(\"\"), \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"0123\"), \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"\"), \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"a_b_c\"), \"should be 0\")\nprint(\"Vowels count\", vowels_count(\"\"), \"should be 0\")\n\nprint(\"--------------------------------------------\")\n\ndef vowels_count2(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert vowels_count('hello') == 2\nassert vowels_count('helloy') == 2\nassert vowels_count('kike') == 3\nassert vowels_count('hello') == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     vowels_count(\"abcdefg\") == 6\nassert     vowels_count(\"abcdefghijk\") == 7\nassert     vowels_count(\"abcdefghijk\") == 7\nassert     vowels_count(\"abcdefghijk\") == 7\nassert     vowels_count(\"abcdefghijk\") == 7\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(FIX)\nprint(vowels_count.__doc__)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    circular_shift(1234567890, 2) == '843210000'\n    circular_shift(1234567890, -2) == '543210000'\n    circular_shift(1234567890, 9) == '344567890'\n    circular_shift(1234567890, -9) == '543210000'\n    circular_shift(1234567890, 2) == '344567890'\n    circular_shift(1234567890, -2) == '843210000'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circular_shift(10, 2) == '12', 'Circular shift should be equal to 12'\nassert     circular_shift(10, -2) == '1', 'Circular shift should be equal to 1'\nassert     circular_shift(13, -2) == '31', 'Circular shift should be equal to 31'\nassert     circular_shift(10, 8) == '1', 'Circular shift should be equal to 1'\nassert     circular_shift(10, 13) == '10', 'Circular shift should be equal to 10'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     circular_shift(123456789, 7) == 123456789\nassert     circular_shift(123456789, -7) == 123456789\nassert     circular_shift(123456789, 9) == 123456789\nassert     circular_shift(123456789, -10) == 123456789\nassert     circular_shift(123456789, 11) == 123456789\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncircular_shift(12345, 2) == 5432\nassert\ncircular_shift(12345, 3) == 654321\nassert\ncircular_shift(12345, 4) == 412345\nassert\ncircular_shift(12345, 7) == 5432\nassert\ncircular_shift(12345, -2) == 54321\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"Pass\" if digitSum('Hello') == 13 else \"Fail\")\nprint(\"Pass\" if not digitSum('Hello') == 13 else \"Fail\")\nprint(\"Pass\" if not digitSum('Hi') == 13 else \"Fail\")\nprint(\"Pass\" if digitSum('H') == 13 else \"Fail\")\nprint(\"Pass\" if digitSum('HELLO') == 26 else \"Fail\")\nprint(\"Pass\" if digitSum('12345') == 45 else \"Fail\")\nprint(\"Pass\" if digitSum('-1') == -1 else \"Fail\")\nprint(\"Pass\" if digitSum('-1.2') == -1 else \"Fail\")\nprint(\"Pass\" if digitSum('1E-2') == 1E-2 else \"Fail\")\nprint(\"Pass\" if digitSum('+') == 0 else \"Fail\")\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digitSum(\"\") == 0\nassert digitSum(\"A\") == 1\nassert digitSum(\"AA\") == 2\nassert digitSum(\"AAAA\") == 4\nassert digitSum(\"AAAAA\") == 4\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert digitSum('Heeeellllllooo') == 15\nassert digitSum('HEeellllllooo') == 15\nassert digitSum('0') == 0\nassert digitSum('1') == 1\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digitSum('hiiiiiii') == '', 'Empty input'\nassert     digitSum('h') == '', 'Non-numeric input'\nassert     digitSum('a') == '', 'Non-ASCII input'\nassert     digitSum('\u0417') == '', 'Non-ASCII input'\nassert     digitSum('Z') == '', 'Non-ASCII input'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digitSum(\"1a2c3d4e\") == 9\nassert     digitSum(\"!a2c3d4e\") == 9\nassert     digitSum(\"1a2\") == 1\nassert     digitSum(\"\") == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digitSum(\"123\") == 7, \"Wrong\"\nassert     digitSum(\"qwe\") == 9, \"Wrong\"\nassert     digitSum(\"1221\") == 11, \"Wrong\"\nassert     digitSum(\"2147\") == 14, \"Wrong\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digitSum('sum') == 7, 'Test failed'\nassert     digitSum('!') == 1, 'Test failed'\nassert     digitSum('a') == 0, 'Test failed'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digitSum('AbC123def456ghI') == 321\nassert     digitSum('g') == 0\n\n\"\"\"Task\nWrite a function that takes a list of words (strings) as input and returns a\nstring that is all upper case letters concatenated together.\n\"\"\"\n\ndef capWords(words):\n    \"\"\"Task\n    Write a function that takes a list of words (strings) as input and returns a\n    string that is all upper case letters concatenated together.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digitSum('ABCDEF') == 9,     \"Wrong answer!\"\nassert     digitSum('JUNK') == 9,     \"Wrong answer!\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     fruit_distribution('10',1)==1\nassert     fruit_distribution('10',2)==2\nassert     fruit_distribution('10',3)==3\nassert     fruit_distribution('10',4)==4\nassert     fruit_distribution('10',5)==5\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfruit_distribution('0',1) == 0, f'The output is wrong, the correct answer is: 0. The output is: {fruit_distribution(\"0\",1)}'\nassert fruit_distribution('0',2) == 0, f'The output is wrong, the correct answer is: 0. The output is: {fruit_distribution(\"0\",2)}'\nassert fruit_distribution('10',2) == 0, f'The output is wrong, the correct answer is: 0. The output is: {fruit_distribution(\"10\",2)}'\nassert fruit_distribution('100',1) == 0, f'The output is wrong, the correct answer is: 0. The output is: {fruit_distribution(\"100\",1)}'\nassert fruit_distribution('100',2) == 0, f'The output is wrong, the correct answer is: 0. The output is: {fruit_distribution(\"100\",2)}'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfruit_distribution(\"apple5\",\"orange6\") == 1\n\n\"\"\"\nTask 3\n\"\"\"\n\ndef maximum_sum(list):\n    \"\"\"\n    Given a list of numbers return the max sum of the list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfruit_distribution('000', 1) == 1\nassert fruit_distribution('000', 0) == 0\nassert fruit_distribution('010', 1) == 0\nassert fruit_distribution('010', 2) == 2\nassert fruit_distribution('011', 1) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfruit_distribution(s = '10', n = 10) == 0, \"Should be 0\"\nassert fruit_distribution(s = '2', n = 10) == 2, \"Should be 2\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfruit_distribution(\"apples\", 5) == 1\nassert\nfruit_distribution(\"oranges\", 5) == 2\nassert\nfruit_distribution(\"mangoes\", 5) == 1\nassert\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     fruit_distribution('2', '2') == 1 \nassert     fruit_distribution('2', '2') == 1\nassert     fruit_distribution('1', '1') == 1\nassert     fruit_distribution('1', '0') == 0\nassert     fruit_distribution('0', '1') == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfruit_distribution('10',1) == 10\nassert fruit_distribution('10',2) == 6\nassert fruit_distribution('10',3) == 4\n\n\n\n\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fruit_distribution(\"22\",\"3\") == 2, fruit_distribution(\"22\",\"3\")\nassert     fruit_distribution(\"33\",\"3\") == 2, fruit_distribution(\"33\",\"3\")\nassert fruit_distribution(\"2\",\"4\") == 0, fruit_distribution(\"2\",\"4\")\nassert fruit_distribution(\"2\",\"5\") == 1, fruit_distribution(\"2\",\"5\")\nassert fruit_distribution(\"33\",\"4\") == 1, fruit_distribution(\"33\",\"4\")\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pluck([1, 2, 3, 4, 5, 6, 7]) ==     [2, 1]\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8]) ==     [8, 7]\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [9, 8]\nassert     pluck([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     [10, 9]\nassert     pluck([]) ==     []\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pluck([]) == []\nassert     pluck([1]) == [1]\nassert     pluck([1,2]) == [1, 2]\nassert     pluck([1,3,2]) == [1, 2]\nassert     pluck([1,3,2,4]) == [1, 2]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef pluck_even(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pluck([])    ==    []\nassert     pluck([1, 2, 3, 4, 5])    ==    [2, 0]\nassert     pluck([5, 10, 12, 3, 7, 9, 8, 1, 4, 6])    ==    [4, 4]\nassert     pluck([100, 200, 300, 400, 500])    ==    [100, 1]\nassert     pluck([0, 1, 3, 6, 10])    ==    [0, 1]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pluck([4,2,6,5,1,6,3,4,3,4]) == [4,1], \"Wrong\"\nassert     pluck([1,2,3,4,5,6]) == [], \"Wrong\"\nassert     pluck([1,2,3,4,5,6]) == [], \"Wrong\"\nassert     pluck([1,2,3,4,5,6]) == [], \"Wrong\"\nassert     pluck([1,2,3,4,5,6]) == [1,1], \"Wrong\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pluck([0, 2, 1, 1, 2, 2, 1, 1, 2, 0, 2]) ==    [2, 0]\nassert     pluck([2, 1, 2, 0, 1, 1]) ==    [1, 1]\nassert     pluck([1, 2, 1, 1, 2, 2, 1, 1, 2, 0, 2]) ==    [2, 0]\nassert     pluck([2, 1, 2, 0, 1, 1]) ==    [1, 1]\nassert     pluck([1, 2, 1, 1, 2, 2, 1, 1, 2, 0, 2]) ==    [2, 0]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nExample:\n\nInput: [2,2]\nOutput: 2\n'''\n'''\nExample:\n\nInput: [1,1,1]\nOutput: -1\n'''\n'''\nExample:\n\nInput: [4,2,1,2,3,1]\nOutput: 1\n'''\n'''\nExample:\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert search([]) == -1\nassert search([7,8,8,6,3,3,8]) == 8\nassert search([2,3,3,4,4,5,2,7,2,7]) == 7\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([4,3,2,1]) == 3\nassert     search([4,3,2,1,1]) == 4\nassert     search([3,2,1,1]) == -1\nassert search([1]) == -1\nassert search([]) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nsearch(lst)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([7]) == -1\nassert search([1, 2, 2, 3, 3, 3, 4]) == 3\nassert search([1, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5]) == 5\nassert search([-1, 0, -1, -1, -1, -1, 1, 2, 2, 3, 3, 3, 4]) == 4\nassert search([2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(search([]))\n    print(search([1,2,3,4,5,6,7,8,8,8]))\n    print(search([1,1,2,2,3,3,3,4,4,4]))\n    print(search([1,1,2,2,3,3,3,4,4,4]))\n    print(search([1,1,2,2,3,3,3,4,4,4]))\n    print(search([1,1,2,2,3,3,3,4,4,4]))\n    print(search([1,1,2,2,3,3,3,4,4,4])"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([3,2,1,2]) == 2\nassert     search([1,2,3,4]) == -1\nassert     search([0]) == 0\n\n\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    # f = open(\"../input.txt\")\n    f = open(\"../input.txt\", \"r\")\n    n = int(f.readline().strip())\n    lst = [int(x) for x in f.readline().strip().split(' ')]\n    result = search(lst)\n    print(result)"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     strange_sort_list([1, 2, -1, 0, 4, -5]) == [-5, 0, 1, 2, -1, 4], 'incorrect'\nassert     strange_sort_list([-2, 0, 1]) == [-2, 0, 1], 'incorrect'\nassert     strange_sort_list([]) == [], 'incorrect'\nassert     strange_sort_list([1, 2, 3, -10, -1, -2]) == [-2, -1, -10, 1, 2, 3], 'incorrect'\nprint('All test cases passed')\n\ndef strange_sort_list_bis(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     strange_sort_list([1, 2, 3, 4, 5]) ==     [1, 5, 2, 4, 3], 'Wrong'\nassert     strange_sort_list([1, 2, 3, 4, 5]) ==     [2, 1, 3, 4, 5], 'Wrong'\nassert     strange_sort_list([1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5], 'Wrong'\nassert     strange_sort_list([1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5], 'Wrong'\nassert     strange_sort_list([1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5], 'Wrong'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     strange_sort_list([0, -1, -2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2, -1, 0]\nassert     strange_sort_list([0, 1, 2, 3, 4, 5, 6]) == [-6, -5, -4, -3, -2, -1, 0]\nassert     strange_sort_list([1, 1, 1, 1, 1, 1, 1]) == [-6, -5, -4, -3, -2, -1, 0]\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     strange_sort_list([10, 6, 4, 2, 8, 12]) == [2, 4, 6, 8, 10, 12]\nassert     strange_sort_list([-10, -5, 0, 5, 10, -20]) == [-20, -10, -5, 0, 5, 10]\nassert     strange_sort_list([5, 6, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]\nassert     strange_sort_list([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1]\nassert     strange_sort_list([5, 7, 8, 6, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8]\nprint('All test cases passed.'"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     strange_sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     strange_sort_list([1, 3, 2, 4]) == [1, 2, 3, 4]\nassert     strange_sort_list([3, 4, 1, 2]) == [1, 2, 3, 4]\nassert     strange_sort_list([3, 4, 1, 2, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     strange_sort_list([3,4,5,1]) == [1,4,5,3]\nassert     strange_sort_list([2,1,5,6]) == [1,2,5,6]\nassert     strange_sort_list([9,4,5,7,3]) == [3,4,5,7,9]\nassert     strange_sort_list([2,1,5,6,3,7]) == [3,2,5,6,1,7]\nassert     strange_sort_list([3,1,5,7,2,4]) == [2,3,1,5,7,4]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     strange_sort_list([5,1,6,3,9]) == [1,3,5,5,6]\nassert     strange_sort_list([3,4,6,1,7,2]) == [1,3,3,4,4,6,6,7]\nassert     strange_sort_list([3,5,1,9,7,2]) == [1,1,2,2,3,3,5,5,7,7]\n\ndef sort_list(lst):\n    '''\n    Given a list of integers, return a list of integers\n    in ascending order.\n    '''\n    # one line (shortest)\n    # return sorted(lst)\n\n    # one line (longer)\n    return sorted(lst)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     strange_sort_list([3,2,1]) == [1,2,3], \"Wrong\"\nassert     strange_sort_list([2,1,3]) == [1,2,3], \"Wrong\"\nassert     strange_sort_list([1,2,3]) == [1,2,3], \"Wrong\"\nassert     strange_sort_list([3,1,2]) == [1,2,3], \"Wrong\"\n\nprint('You are awesome! All tests are done!'"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(3,4,5) == sqrt(10)/10\nassert triangle_area(6,3,4) == sqrt(14)/4\nassert triangle_area(8,4,4) == sqrt(20)/2\nassert triangle_area(2,2,2) == 1\nassert triangle_area(2,4,4) == sqrt(2)/2\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1,1,1) == 1\nassert     triangle_area(1,1,0) == 0\nassert     triangle_area(2,4,3) == 3.16\nassert     triangle_area(4,4,4) == 5\nassert     triangle_area(4,4,5) == -1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(3, 4, 5)    == -1\nassert     triangle_area(1, 1, 1)     == 1\nassert     triangle_area(1, 1, 2)     == 0.5\nassert     triangle_area(1, 1, 3)     == 0\nassert     triangle_area(1, 1, 4)     == 0\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert triangle_area(4, 5, 6) == 0.5\nassert triangle_area(6, 5, 4) == 0.5\nassert triangle_area(8, 5, 6) == 0.75\nassert triangle_area(3, 5, 3) == -1"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ntriangle_area(1.0, 2.0, 3.0) ==.5\nassert \ntriangle_area(1.0, 2.0, 4.0) == -1\nassert \ntriangle_area(1.0, 1.0, 3.0) == 1\nassert \ntriangle_area(1.0, 2.0, 3.0) == 1.5\nassert \ntriangle_area(1.0, 2.0, 1.0) == 1"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nTest Cases\n\nInput            Output\n1.3 4.5 3        6.46\n10 20 30        -1\n12 30 12        -1\n30 30 30        -1\n'''\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    '''\n    #calculate the semi-perimeter\n    s = (a + b + c) / 2\n    #calculate the area\n    area = sqrt(s*(s - a)*(s - b)*(s - c))\n    return round(area, 2)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     will_it_fly([1,2,3], 1) == True\nassert     will_it_fly([1,2,3], 2) == False\nassert     will_it_fly([5,2,3], 3) == False\nassert     will_it_fly([1,2,3], 4) == True\nassert     will_it_fly([1,2,3], 2) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     will_it_fly(['a','a','a','b','c','d','e'], 5) == False\nassert     will_it_fly(['a','b','c','a','b','c'], 2) == False\nassert     will_it_fly(['a','a','a','b','c','d','e','e'], 4) == True\nassert     will_it_fly(['a','a','a','b','c','d','e'], 6) == True\nassert     will_it_fly([1,1,1,2,2,2,3,3,3,3,3], 3) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nwill_it_fly(['a','b','c','b'], 1)\nwill_it_fly(['a','b','b','b','b'], 1)\nwill_it_fly(['a','a','a','b'], 1)\nwill_it_fly(['a','b','b','b','c','b'], 1)\nwill_it_fly(['a','b','b','b','b','c','c','a'], 1)\nwill_it_fly(['a','b','b','b','b','c','c','a','b'], 1)\nwill_it_fly(['a','b','b','b','b','c','c','a','b','c'], 1)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     will_it_fly([1,2,3,4,5], 6) == True\nassert     will_it_fly([1,2,3,4,5], 9) == False\nassert     will_it_fly([1,2,3,4,5], 20) == False\nassert     will_it_fly([1,2,3,4,5], 1000) == True\nassert     will_it_fly([1,2,3,4,5], 2000) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     will_it_fly([\"hello\",\"world\"], 10) == False, \"Wrong output\"\nassert     will_it_fly([\"hello\",\"world\"], 4) == True, \"Wrong output\"\nassert     will_it_fly([\"hello\",\"world\",\"hello\"], 100) == False, \"Wrong output\"\nassert     will_it_fly([\"hello\",\"world\",\"hello\",\"world\"], 100) == True, \"Wrong output\"\nassert     will_it_fly([\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\",\"world\",\"hello\"], 100) == False, \"Wrong output\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nwill_it_fly([1, 2, 3], 3) == False\nwill_it_fly([1, 2, 3], 2) == False\nwill_it_fly([1, 2, 3, 1], 3) == False\nwill_it_fly([1, 2, 3, 1], 2) == False\nwill_it_fly([1, 2, 3, 4], 3) == True\nwill_it_fly([1, 2, 3, 4], 2) == True\nwill_it_fly([1, 2, 3, 4, 1], 3) == True\nwill_it_fly([1, 2, 3, 4, 1], 2) == True\nwill_it_fly([1, 2, 3, 4, 1, 1], 3) == True\nwill_it_fly([1, 2, 3, 4, 1, 1], 2) == True\nwill_it_fly([1, 2, 3, 4, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1], 4) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1], 3) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1], 4) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 2) == False\nwill_it_fly([1, 2, 3, 4, 1, 1, 1, 1], 4) == True\nwill_it"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nwill_it_fly(palindrome_list,2)\nwill_it_fly([],10)\nwill_it_fly([1,2],1)\nwill_it_fly([1,2],3)\nwill_it_fly([1,2,2],2)\nwill_it_fly([1,2,2],5)\nwill_it_fly([1,1,1,2,2],5)\nwill_it_fly([1,1,1,2,2,2],5)\nwill_it_fly([1,2,3,4,5,6],6)\nwill_it_fly([1,2,3,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_change([2,1,3,1,4])    ==    2\nassert     smallest_change([1,3,2,2,1])    ==    0\nassert     smallest_change([1,1,1])    ==    0\nassert     smallest_change([1,1])    ==    0\nassert     smallest_change([])    ==    0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert smallest_change([5, 1, 5, 2, 5, 3, 5]) == 2\nassert smallest_change([5, 2, 5, 1, 5, 3, 5]) == 1\nassert smallest_change([1, 1, 1, 1, 1, 1, 1, 1]) == 0\nassert smallest_change([1, 2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_change([1,2,3,4,5]) == 2\nassert     smallest_change([1,2,3,4,5,6]) == 2\nassert     smallest_change([1,2,3,4,5,6,7]) == 3\nassert     smallest_change([1,2,3,4,5,6,7,8]) == 3\nassert     smallest_change([1,2,3,4,5,6,7,8,9]) == 4\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    seen_before = set()\n    seen_after = set()\n\n    for num in arr:\n        if num not in seen_before:\n            seen_after.add(num)\n        else:\n            seen_before.remove(num)\n            seen_after.remove(num)\n\n        seen_before.add(num)\n\n    return len(arr) - len(seen_after)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_change([10,2,8,6,3,0,11]) == 2, \"Should be 2\"\nassert     smallest_change([10,1,8,6,3,0,11]) == 6, \"Should be 6\"\nassert     smallest_change([10,2,8,6,3,0,11,1]) == 3, \"Should be 3\"\nassert     smallest_change([10,2,8,6,3,0,11,1,0,5]) == 0, \"Should be 0\"\n\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_change([2,1,1,1])    == 1\nassert     smallest_change([1,2,1,2])    == 3\nassert     smallest_change([1,2,1,1])    == 0\nassert     smallest_change([1,1,2,1])    == 0\nassert     smallest_change([1,1,1,2])    == 3\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     total_match(['a','b','c','d','e'], ['a', 'c', 'd', 'd']) == ['a', 'c']\nassert     total_match(['a','b','c','d','e'], ['a', 'c', 'd', 'd', 'e']) == ['a', 'c', 'e']\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    total_match(['cat','dog','chicken'],['dog','cat']) == ['cat']\n    total_match(['cat','dog','chicken'],['chicken','cat']) == ['cat']\n    total_match(['cat','dog','chicken','chicken'],['dog','chicken','cat']) == ['cat']\n    total_match(['cat','dog','chicken','chicken'],['dog','chicken','cat','cat']) == ['cat']\n    total_match(['cat','dog','chicken','chicken'],['dog','cat']) == ['dog','cat']\n    total_match(['cat','dog','chicken','chicken'],['chicken','cat','cat']) == ['chicken']\n    total_match(['cat','dog','chicken','chicken'],['dog','dog']) == ['dog']\n    total_match(['cat','dog','chicken','chicken'],['dog','dog','dog']) == ['dog']\n    total_match(['cat','dog','chicken','chicken'],['dog','dog','dog','dog']) == ['dog']\n    total_match(['cat','dog','chicken','chicken'],['dog','dog','dog','dog','dog']) == ['dog']\n    total_match(['cat','dog','chicken','chicken'],['dog','dog','dog','dog','dog','dog']) == ['dog']\n    total_match(['cat','dog','chicken','chicken'],['dog','dog','dog','dog','dog','dog','dog']) == ['dog']\n\nprint(\"You're all done! Time for some tests.\")\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert total_match(['t','o','l'], ['t','o','s','t']) == ['t'], total_match(['t','o','l'], ['t','o','s','t'])\n\ndef two_list_sum(lst1, lst2):\n    '''\n    Write a function that accepts two lists of numbers and returns the numbers that sum to 2020.\n\n    if the sum is less than 2020, return the numbers that sum to 2020.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (total_match(['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c'])\nassert     (total_match(['a', 'b', 'c', 'a'], ['a', 'b', 'c']) == ['a'])\nassert     (total_match(['a', 'b', 'c'], ['a', 'b', 'c', 'a']) == ['a', 'b', 'c'])\nassert     (total_match(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd'])\nassert     (total_match([], ['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd'])\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert total_match([], [\"hello\"]) == [\"hello\"], \"First case\"\nassert total_match([], [\"hi\", \"hello\"]) == [\"hello\"], \"Second case\"\nassert total_match([\"hello\", \"hi\", \"hi\", \"hello\", \"hi\"], [\"hello\", \"hi\"]) == [\"hello\", \"hi\"], \"Third case\"\nassert total_match([\"hi\", \"hi\", \"hello\", \"hi\", \"hi\", \"hello\"], [\"hello\", \"hi\"]) == [\"hello\", \"hi\"], \"Fourth case\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_multiply_prime(10) == False\n    is_multiply_prime(15) == True\n    is_multiply_prime(13) == False\n    is_multiply_prime(87) == False\n    is_multiply_prime(16) == True\n    is_multiply_prime(200) == False\n    is_multiply_prime(24) == False\n    is_multiply_prime(121) == False\n    is_multiply_prime(102) == False\n    is_multiply_prime(111) == True"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_multiply_prime(35) == False, \"35 is not the multiplication of 3 prime numbers\"\nassert     is_multiply_prime(35*29) == False, \"35*29 is not the multiplication of 3 prime numbers\"\nassert     is_multiply_prime(49) == True, \"49 is the multiplication of 3 prime numbers\"\nassert     is_multiply_prime(49*29) == True, \"49*29 is the multiplication of 3 prime numbers\"\nassert     is_multiply_prime(51) == False, \"51 is not the multiplication of 3 prime numbers\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_multiply_prime(3) == False, \"should be False\"\nassert     is_multiply_prime(14) == False, \"should be False\"\nassert     is_multiply_prime(27) == True, \"should be True\"\nassert     is_multiply_prime(137) == True, \"should be True\""
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_multiply_prime(9) == False, \"Is wrong\"\nassert     is_multiply_prime(24) == True, \"Is wrong\"\n\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_multiply_prime(61) == True\nassert     is_multiply_prime(9) == True\nassert     is_multiply_prime(19) == False\nassert     is_multiply_prime(1) == False\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_multiply_prime(123) == False, \"123 should be false\"\nassert is_multiply_prime(2) == True, \"2 should be true\"\nassert is_multiply_prime(1001) == False, \"1001 should be false\"\nassert is_multiply_prime(4) == True, \"4 should be true\"\nassert is_multiply_prime(127) == True, \"127 should be true\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # run tests on is_multiply_prime function\n    pas"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_simple_power(2, 2) == True, \"2 is a simple power of 2\"\nassert     is_simple_power(2, 3) == False, \"2 is not a simple power of 3\"\nassert     is_simple_power(2, 8) == True, \"2 is a simple power of 8\"\nassert     is_simple_power(5, 3) == False, \"5 is not a simple power of 3\"\nassert     is_simple_power(5, 5) == True, \"5 is a simple power of 5\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_simple_power(2, 4) == False\nassert     is_simple_power(4, 4) == True\nassert     is_simple_power(2, 1) == False\nassert     is_simple_power(4, 2) == True\nassert     is_simple_power(4, 3) == False\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_simple_power(7, 3) == True\nassert     is_simple_power(3, 4) == False\nassert     is_simple_power(4, 5) == True\nassert     is_simple_power(9, 3) == True\nassert     is_simple_power(9, 4) == True\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_simple_power(15, 3) == True, 'Wrong answer'\nassert     is_simple_power(25, 5) == False, 'Wrong answer'\nassert     is_simple_power(3, 3) == True, 'Wrong answer'\nassert     is_simple_power(3, 4) == False, 'Wrong answer'\nassert     is_simple_power(9, 3) == False, 'Wrong answer'\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_simple_power(1,3) == True, '1 is a simple power of 3'\nassert     is_simple_power(1,4) == False, '1 is not a simple power of 4'\nassert     is_simple_power(2,3) == False, '2 is not a simple power of 3'\nassert     is_simple_power(3,2) == True, '3 is a simple power of 2'\nassert     is_simple_power(3,4) == False, '3 is not a simple power of 4'\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_simple_power(45, 2) == True, \"45 is not a simple power of 2\"\nassert is_simple_power(45, 8) == True, \"45 is not a simple power of 8\"\nassert     is_simple_power(45, 16) == False, \"45 is a simple power of 16\"\nassert     is_simple_power(1, 0) == False, \"1 is a simple power of 0\"\nassert     is_simple_power(0, 0) == True, \"0 is a simple power of 0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_simple_power(4, 2) == True\n    is_simple_power(4, 4) == False\n    is_simple_power(4, 1) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     iscube(3) == True\nassert     iscube(6) == True\nassert     iscube(8) == False\nassert     iscube(16) == True\nassert     iscube(25) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not iscube(1)\nassert iscube(3)\nassert iscube(4)\nassert iscube(5)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert iscube(7)\nassert iscube(64)\nassert iscube(123456789) == False\nassert iscube(1) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     iscube(3) == True\nassert     iscube(9) == True\nassert     iscube(12) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert iscube(3) == True\nassert iscube(12) == True\nassert iscube(9) == True\nassert iscube(5) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef iseven(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is even.\n    Note: you may assume the input is always valid.\n    '''\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     hex_key('5F') ==     3\nassert     hex_key('B10') ==     3\nassert     hex_key('B6') ==     2\nassert     hex_key('5B') ==     2\nassert     hex_key('A8') ==     2\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhex_key('12abcd') == 4\nhex_key('ABCD') == 2\nhex_key('ABD') == 0\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hex_key('') == None\nassert     hex_key('2') == 2\nassert     hex_key('2G') == None\nassert     hex_key('4') == 3\nassert     hex_key('4Z') == None\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(2) == \"00\", \"Test 1 should be '00'\"\nassert     decimal_to_binary(3) == \"011\", \"Test 2 should be '011'\"\nassert     decimal_to_binary(4) == \"100\", \"Test 3 should be '100'\"\nassert     decimal_to_binary(5) == \"101\", \"Test 4 should be '101'\"\nassert     decimal_to_binary(10) == \"1010\", \"Test 5 should be '1010'\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(decimal) == 'db0db0db0'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(4) == '100'\nassert     decimal_to_binary(7) == '111'\nassert     decimal_to_binary(8) == '1000'\nassert     decimal_to_binary(127) == '111111111111111111111111111111'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(27) == \"db10101\"\nassert     decimal_to_binary(10) == \"b1\"\nassert     decimal_to_binary(12) == \"b100\"\nassert     decimal_to_binary(15) == \"b101\"\nassert     decimal_to_binary(18) == \"b10001\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    decimal_to_binary(0) == '0'\n    decimal_to_binary(1) == '1'\n    decimal_to_binary(10) == '1010'\n    decimal_to_binary(13) == '100010101'\n    assert decimal_to_binary(1000) == '10100'\n    assert decimal_to_binary(2147483647) == '100000011101111101'\n    assert decimal_to_binary(-1) == '1001'\n    assert decimal_to_binary(-10) == '-1010'\n    "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(10) == '1010'\nassert     decimal_to_binary(15) == '11101'\nassert     decimal_to_binary(16) == '110101'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_happy(\"abba\") == True\nassert is_happy(\"abbba\") == False\nassert is_happy(\"aabb\") == False\nassert is_happy(\"aa\") == False\nassert is_happy(\"\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_happy(\"abc\")\nassert is_happy(\"abcabab\")\nassert is_happy(\"abcdefgh\")\nassert not is_happy(\"abcde\")\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_happy('fdfdfd') == False\nassert is_happy('ffdfdfdf') == False\nassert is_happy('fdddfddf') == True\nassert is_happy('fdffdddf') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_happy(\"xya\") == True\nassert is_happy(\"aa\") == False\nassert is_happy(\"aaa\") == False\nassert is_happy(\"aaaabb\") == True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_happy('vvv' ) == False, \"should return False\"\nassert is_happy('vvvv' ) == True, \"should return True\"\nassert is_happy('vvvvvvvvvv' ) == False, \"should return False\"\nassert is_happy('vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == ['A+', 'A', 'A', 'A+', 'B+', 'B', 'B', 'C+', 'C', 'C', 'D+', 'D', 'D', 'E'], \"numerical_letter_grade is not correct\"\n\ndef clean_text(text):\n    \"\"\"It is a first task in the project. You have to write a function to clean a \n    string of any text. It should be able to remove spaces and punctuations,\n    except for the following:\n\n    numbers - 0 to 9\n    symbols -!,?, #, $, %, &,, (, )\n    parentheses - (, )\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n\n\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # ex1\n    grades =[4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0]\n    letter_grades = numerical_letter_grade(grades)\n    print(letter_grades)\n\n    # ex2\n    grades =[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n    letter_grades = numerical_letter_grade(grades)\n    print(letter_grades)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == 'A'\nassert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == 'A'\nassert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == 'A'\nassert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == 'A'\nassert numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]) == 'A'\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('All tests passed')"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     numerical_letter_grade([3.9, 4.0, 3.7, 4.2, 3.3, 4.1, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C']\nassert numerical_letter_grade([3.9, 4.0, 3.7, 4.2, 3.3, 4.1, 3.0]) == ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C']\n\ndef letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \"\"\"\n    pass\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     numerical_letter_grade([1.0,2.0,3.0,4.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\nassert numerical_letter_grade([1.0,2.0,3.0,4.0,4.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"]\nassert numerical_letter_grade([1.0,2.0,3.0,4.0,3.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"]\nassert numerical_letter_grade([1.0,2.0,3.0,3.0,3.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"]\nassert numerical_letter_grade([1.0,2.0,3.0,2.0,2.0]) == [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\", \"E\"]\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     numerical_letter_grade([3.3]) == 'A-'\nassert     numerical_letter_grade([2.7]) == 'B-'\nassert     numerical_letter_grade([1.7]) == 'B-'\nassert     numerical_letter_grade([2.0]) == 'B+'\nassert     numerical_letter_grade([1.3]) == 'C-'\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == \"A+\", numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0])\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == \"A\", numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0])\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == \"A-\", numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0])\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == \"B+\", numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0])\nassert     numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0]) == \"B\", numerical_letter_grade([4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0, 0.0, 0.0])\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_length('dwadwad') == True\nassert    prime_length('dwadwadg') == False\nassert    prime_length('abcdabcd') == False\nassert prime_length('abcdabcd') == False\nassert    prime_length('abcdabcd') == False"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert prime_length('hi') == True\nassert prime_length('aa') == False\nassert prime_length('ab') == False\nassert prime_length('abc') == True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(prime_length(\"abc\"))\nprint(prime_length(\"abcde\"))\nprint(prime_length(\"ABCDEF\"))\nprint(prime_length(\"ABCDEFG\"))\nprint(prime_length(\"ABCDEFGH\"))\nprint(prime_length(\"ABCDEFGHIJK\"))\nprint(prime_length(\"ABCDEFGHIJKLMNOP\"))\nprint(prime_length(\"ABCDEFGHIJKLMNOPQ\"))\nprint(prime_length(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(prime_length('4'))\nprint(prime_length('4.2'))\nprint(prime_length('24'))\nprint(prime_length('5'))\nprint(prime_length('6'))\nprint(prime_length('7'))\n\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert prime_length(\"hippo\") == True\nassert prime_length(\"Hippo\") == True\nassert prime_length(\"Hippopotamuses\") == True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert prime_length(\"36\")\nassert not prime_length(\"43\")\nassert prime_length(\"14\")\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprime_length('eseses') == False\nprime_length('a') == True\nprime_length('a') == True\n\nprint('Chekcked!')\n\n\"\"\"\nReferences:\nhttps://www.codewars.com/kata/551a8a5e26d29f5a7e00001e/train/python\nhttps://www.codewars.com/kata/5a1230f9c9d3c9c1e000001\nhttps://www.codewars.com/kata/56b8f7e63833e9f070003d6b\n\"\"\""
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(starts_one_ends(3))\nprint(starts_one_ends(4))\nprint(starts_one_ends(5))\nprint(starts_one_ends(6))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_digits(n):\n    \"\"\"\n    Given a positive integer n, return the sum of the digits of n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('  [+] TESTING starts_one_ends')\nprint('--------------------------------------------------')\nprint('')\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 1\nassert     starts_one_ends(3) == 1\nassert     starts_one_ends(4) == 2\nassert     starts_one_ends(5) == 2\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert starts_one_ends(4) == 1\nassert starts_one_ends(5) == 2\nassert starts_one_ends(10) == 3\nassert starts_one_ends(2) == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     starts_one_ends(12345) == 2\nassert     starts_one_ends(54321) == 5\nassert     starts_one_ends(1234) == 3\nassert     starts_one_ends(123) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     starts_one_ends(1) == 1\nassert     starts_one_ends(2) == 2\nassert     starts_one_ends(3) == 3\nassert     starts_one_ends(4) == 6\nassert     starts_one_ends(5) == 10\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    solve(20) == '10100'\n    solve(28) == '10011'\n    solve(100) == '10000'\n    solve(199) == '10001'\n    solve(800) == '111111'\n    solve(4) == '0000'\n    solve(2) == '00'\n    solve(3) == '000'\n    solve(1) == '1'\n    solve(15) == '101010'\n    solve(257) == '11001011'\n    solve(513) == '11000111'\n    solve(1024) == '11010001'\n    solve(2048) == '11100101'\n    solve(1024) == '11010001'\n    solve(2048) == '11100101'\n    solve
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve(234) == \"10\", \"Test case 1: expected 9, but got %s\" % (solve(234))\nassert solve(888) == \"1011\", \"Test case 2: expected 1011, but got %s\" % (solve(888))\nassert solve(4) == \"1\", \"Test case 3: expected 1, but got %s\" % (solve(4))\nassert solve(2345) == \"10010\", \"Test case 4: expected 10010, but got %s\" % (solve(2345))\nassert solve(234) == \"10\", \"Test case 5: expected 9, but got %s\" % (solve(234))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     solve(9) == \"11\", \"Expected = '11' Actual = '%s'\" % solve(9)\nassert     solve(88) == \"100\", \"Expected = '100' Actual = '%s'\" % solve(88)\nassert     solve(25) == \"101\", \"Expected = '101' Actual = '%s'\" % solve(25)\nassert     solve(10) == \"1\", \"Expected = '1' Actual = '%s'\" % solve(10)\nassert     solve(1) == \"0\", \"Expected = '0' Actual = '%s'\" % solve(1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # the test case\n    N = 5\n    assert str(solve(N)) == '5'\n    N = 10\n    assert str(solve(N)) == '1010'\n    N = 100\n    assert str(solve(N)) == '11011000011010101110101'\n    print('Congratulations, you pass this test!')"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solve(1001) == \"1001\", \"Expected: \" + \"1001\" + \", Actual: \" + solve(1001) + \".\"\nassert     solve(111) == \"1111\", \"Expected: \" + \"1111\" + \", Actual: \" + solve(111) + \".\"\nassert     solve(964) == \"1001\", \"Expected: \" + \"1001\" + \", Actual: \" + solve(964) + \".\"\nassert     solve(1605) == \"1010\", \"Expected: \" + \"1010\" + \", Actual: \" + solve(1605) + \".\"\nassert     solve(1634) == \"1010\", \"Expected: \" + \"1010\" + \", Actual: \" + solve(1634) + \".\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert isinstance(solve(10000), str)\nassert isinstance(solve(9), str)\nassert isinstance(solve(123), str)\n\nprint(solve(123))\nprint(solve(9))\nprint(solve(10000)"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(1) == \"1\"\nassert     solve(2) == \"10\"\nassert     solve(3) == \"11\"\nassert     solve(4) == \"100\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solve(19) == \"1111\", \"solve 1\"\nassert     solve(4) == \"0011\", \"solve 2\"\nassert     solve(1) == \"1\", \"solve 3\"\nassert     solve(0) == \"0\", \"solve 4\"\nassert     solve(9999) == \"1001\", \"solve 5\"\nprint(\"You passed all the tests\""
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solve(0) == \"0\"\nassert     solve(2) == \"10\"\nassert     solve(3) == \"11\"\nassert     solve(15) == \"1111\"\nassert     solve(16) == \"1010\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlst1 = [1, 3, 4, 2, 5]\nassert add(lst1) == [1, 4, 4, 2, 5]\nlst2 = [1, 4, 5, 3, 6]\nassert add(lst2) == [1, 4, 5, 5, 6]\nassert add(lst1 + lst2) == [1, 4, 4, 2, 5]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add([1, 5, 8, 2, 5, 7, 6, 3, 4, 3, 5, 6, 8, 6, 7, 9, 7, 8]) == 20\n\nif __name__ == '__main__':\n    import pytest\n    pytest.main(['test_add.py'])"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef add_list(lst):\n    \"\"\"Given a non-empty list of integers lst. return the sum of all even elements that are at odd indices.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add([5,2,1,2,3,2]) == (2,1,2,2,4,4)\nassert     add([5,2,1,2,3]) == (2,1,2,2,4)\nassert     add([5,2,1,2]) == (2,1,2,2)\n\n\n\n\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    add([1,2,3,4,5]) == [2,4,6,8,10]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add(['hi', 'bye', 'hello']) == ['bye', 'hello']\nassert     add(['hello', 'bye', 'hi']) == ['bye', 'hi']\nassert     add([2, 5, 10, 12]) == [8, 10]\n\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add([1, 2, 3, 4, 5, 6, 7]) == []\nassert add([5, 9, 7, 9, 2, 4]) == [9, 2, 4, 7, 9]\n\nif __name__ == \"__main__\":\n    input_lst = input()\n    lst = input_lst.split()\n    add(lst)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 1, 3, 3, 5, 5, 7, 7, 9, 9]\nassert     add([0, 1, 2, 3, 4, 5, 6]) == [1, 1, 3, 3, 5, 5, 6, 6]\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    assert add([1, 2, 3, 4]) == [3, 2, 4, 1]\n    assert add([3, 3]) == [3, 3, 3]\n    assert add([1, 2, 3, 4, 5]) == [3, 4, 5, 2, 1]\n    assert add([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == [4, 2, 2, 2, 4, 2, 4, 2, 2, 4, 2]\n    "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # checks that both strings are same\nassert anti_shuffle(\"x\" * 10) == 'a a a a a a a a a a a a a a a a a'\nassert anti_shuffle(\"x y z\") == 'z y z y z y z y z y z'\nassert anti_shuffle(\" \") ==''\nassert anti_shuffle(\"\") == ''\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     anti_shuffle('caffeine') == 'acfne'\nassert     anti_shuffle('red wine') == 'erredw'\nassert     anti_shuffle('tea bag') == 'dbtea'\nassert     anti_shuffle('bad') == 'bad'\nassert     anti_shuffle('abc') == 'cba'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     anti_shuffle(\"The quick brown fox jumps over the lazy dog\") == \"heT-qbouG-xeejS-vWyP-smaI\"\nassert     anti_shuffle(\"The quick brown fox jumps over the lazy dog and the fox\") == \"heT-qbouG-xeejS-vWyP-smaI-ol\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     anti_shuffle(\"I am a boy\") == \"a I b I\"\nassert     anti_shuffle(\"This is a test\") == \"e h i s a t e\"\nassert     anti_shuffle(\"Hello world\") == \"o l e l d h\"\nassert     anti_shuffle(\"123 456 789\") == \"1 2 3 4 5 6 7\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     anti_shuffle(\"he is a boy\") == \"aa bb cc aa\"\nassert     anti_shuffle(\"hello world\") == \"ooo ddd eee\"\nassert     anti_shuffle(\"a \") == \"a\"\nassert     anti_shuffle(\"\") == \"\"\nassert     anti_shuffle(\"\") == \"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef anti_shuffle(s):\n    words = s.split()\n    res = \"\"\n    for i in range(len(words)):\n        res = res + words[i] + \" \"\n    return res\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     anti_shuffle('hello how are you') == 'egohorayoyorearehow areyou'\nassert     anti_shuffle('the quick brown fox jumps over the lazy dog') == 'ehutqcokrebmwjxofsjlypdgul'\nassert     anti_shuffle('i love you') == 'iloveyouloveyou'\nassert     anti_shuffle('hannah is a lier than she looks') == 'hainannislierthanoshah'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"he   ox  qio  urp  sva e   dog\"\nassert anti_shuffle(\"a clash of KINGS\") == \"a  sc  of  KIN\"\nassert anti_shuffle(\"the quick brown fox\") == \"he  qui\"\nprint(\"Congratulations! Your anti_shuffle function is correct!\""
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nlst = [\n        [1, 3, 5],\n        [1, 4, 6],\n        [2, 4, 6],\n        [2, 5, 6],\n        [3, 5, 6],\n        [3, 6, 6]\n        ]\nx = 2\nres = get_row(lst, x)\nprint(res"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_row([[1,3,4], [6,7,8]], 1) == [[0,1],[1,2],[2,3]]\nassert     get_row([[1,3,4], [6,7,8]], 5) == [[0,1],[1,2],[2,3],[3,4]]\nassert     get_row([[1,3,4], [6,7,8]], 0) == [[0,1],[1,2],[2,3]]\nassert     get_row([[1,3,4], [6,7,8]], 2) == [[0,1],[1,2],[2,3]]\nassert     get_row([[1,3,4], [6,7,8]], 3) == [[0,1],[1,2],[2,3]]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_rows(lst, x):\n    \"\"\"\n    Given lst, a nested list,\n    find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_row([[0, 1, 1, 1],\n                [0, 0, 1, 1],\n                [0, 1, 1, 1]], 1) == [(1, 0), (1, 2), (1, 3)]\nassert     get_row([[0, 1, 1, 1],\n                [0, 0, 1, 1],\n                [0, 1, 1, 1]], 0) == [(0, 0), (0, 1), (0, 2), (0, 3)]\nassert     get_row([[0, 1, 1, 1],\n                [0, 0, 1, 1],\n                [0, 1, 1, 1]], 2) == [(1, 1), (1, 2), (1, 3)]\nassert     get_row([[0, 1, 1, 1],\n                [0, 0, 1, 1],\n                [0, 1, 1, 1]], 3) == [(2, 1), (2, 2), (2, 3)]\nassert     get_row([[0, 1, 1, 1],\n                [0, 0, 1, 1],\n                [0, 1, 1, 1]], 4) == [(3, 1), (3, 2), (3, 3)]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_row([(0, 0), (1, 2), (2, 1), (3, 0)], 1) == [(1, 2), (3, 0)]\nassert     get_row([(0, 0), (1, 2), (2, 1), (3, 0)], 0) == [(0, 0), (1, 2), (2, 1), (3, 0)]\nassert     get_row([(0, 0), (1, 2), (2, 1), (3, 0)], 3) == [(3, 0), (2, 1), (1, 2), (0, 0)]\nassert     get_row([(0, 0), (1, 2), (2, 1), (3, 0)], 2) == [(1, 2), (3, 0), (2, 1), (0, 0)]\nassert     get_row([(0, 0), (1, 2), (2, 1), (3, 0)], 4) == [(0, 0), (1, 2), (2, 1), (3, 0)]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_column(lst, x):\n    \"\"\"\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by columns in ascending order.\n    Also, sort coordinates of the column by rows in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_row([[], [], []], 0) == []\nassert     get_row([[2, 0, 3], [0, 3, 0], [0, 2, 0]], 0) == [(0, 0), (0, 1), (1, 0)]\nassert     get_row([[1, 0, 1], [0, 1, 1], [0, 2, 1]], 2) == [(1, 0), (1, 2)]\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_column(lst, y):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer y, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_array([1, 2, 3]) == sorted([1, 2, 3]) == [[1, 2, 3]]\nassert     sort_array([1, -2, 3]) == sorted([1, -2, 3]) == [[1, -2, 3]]\nassert     sort_array([1, -2, -3, 5]) == sorted([1, -2, -3, 5]) == [[1, -2, -3, 5]]\nassert     sort_array([-1, -2, -3, -4, -5]) == sorted([-1, -2, -3, -4, -5]) == [[-1, -2, -3, -4, -5]]\nassert     sort_array([-5, -4, -3, -2, -1]) == sorted([-5, -4, -3, -2, -1]) == [[-5, -4, -3, -2, -1]]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sort_array([7,2,4,5,7,9,0,1]) == [0,1,2,4,5,7,7,9]\nassert sort_array([7,2,4,5,7,9,0,1]) == [0,1,2,4,7,7,9,5]\n\nif __name__ == '__main__':\n    input_array = [7,2,4,5,7,9,0,1]\n    print(sort_array(input_array)"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([]) == []\nassert     sort_array([1]) == [1]\nassert     sort_array([1, 1]) == [1, 1]\nassert     sort_array([1, 1, 1]) == [1, 1, 1]\nassert     sort_array([1, 1, 1, 1]) == [1, 1, 1, 1]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([1,2,3,4,5]) ==     [1,2,3,4,5], \"Wrong\"\nassert     sort_array([1,2,3,4,5,6]) ==     [1,2,3,4,5,6], \"Wrong\"\nassert     sort_array([1,2,3,4,5,6,7]) ==     [1,2,3,4,5,6,7], \"Wrong\"\nassert     sort_array([1,2,3,4,5,6,7,8]) ==     [1,2,3,4,5,6,7,8], \"Wrong\"\nassert     sort_array([1,2,3,4,5,6,7,8,9]) ==     [1,2,3,4,5,6,7,8,9], \"Wrong\"\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(sort_array([1, 5, 3, 4, 5, 3, 1, 2, 5])) == None\nprint(sort_array([1, 5, 3, 4, 5, 3, 1, 2, 5])) == [1, 1, 2, 3, 4, 5, 5, 5, 5]\nprint(sort_array([1, 5, 3, 4, 5, 3, 1, 2, 5])) == [1, 1, 2, 3, 4, 5, 5, 5, 5]\nprint(sort_array([1, 5, 3, 4, 5, 3, 1, 2, 5])) == [1, 1, 2, 3, 4, 5, 5, 5, 5"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     sort_array([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     sort_array([2, 3, 5, 1, 4]) == [1, 2, 3, 4, 5]\nassert     sort_array([3, 5, 1, 2, 4]) == [1, 2, 3, 4, 5]\nassert     sort_array([4, 1, 2, 3, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    sort_array([4, 3, 2, 1]) == [1, 2, 3, 4]\n    sort_array([5, 3, 2, 1]) == [1, 2, 3, 5]\n    sort_array([4, 4, 5, 4]) == [4, 4, 5, 4]\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([]) == None\n    sort_array([1, 1, 1, 1]) == None\n    sort_array([1, 1, 2, 1]) == None\n    sort_array([1, 1, 1, 2]) == None\n    sort_array([1, 1, 2, 1]) == None\n    sort_array([1, 2, 1, 1]) == None\n    sort_array([1, 2, 1, 2]) == None\n    sort_array([1, 2, 2, 1]) == None\n    sort_array([1, 2, 2, 2]) == None\n    sort_array([1, 2, 2, 2]) == None\n    sort_array([1, 2, 2, 2]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, 2, 3, 4, 5]) == None\n    sort_array([1, "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    crypt_a = encrypt('abc')\n    crypt_b = encrypt('xyz')\n    crypt_c = encrypt('cba')\n    crypt_d = encrypt('abcdefghijklmnopqrstuvwxyz')\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(encrypt('hello'))\n\n\n\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encrypt('') == ''\nassert     encrypt('abc') == 'acb'\nassert     encrypt('a') == 'a'\nassert     encrypt('abcdefghij') == 'fedcbghij'\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string and returns the\n    original string to the original value. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     encrypt('hello') == 'prlh'\nassert     encrypt('cats') == 'vtsr'\nassert     encrypt('cats and dogs') == 'gnbztrq'\nassert     encrypt('some more stuff') == 'yzsxvf'\nassert     encrypt('whatever') == 'wuhywq'\nprint('All tests passed.')"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     encrypt(\"Plain Text\") == \"Encrypted Text\"\nassert     encrypt(\"Plain Text\") == \"Encrypted Text\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(encrypt(\"abcdefg\")) # --> \"fgabcdeh\"\n\ndef decrypt(s):\n    \"\"\"Create a function decrypt that takes a string as an argument and \n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest([1, 3, 5, 7, 9, 11, 13]) == 3\nassert next_smallest([1, 3, 5, 7, 9, 11, 13]) == 3\nassert next_smallest([1, 3, 5, 7, 9, 11, 13]) == 2\nassert next_smallest([]) == None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4]) is None\n    assert next_smallest([1, 1, 2, 2, 3, 3]) == 2\n    assert next_smallest([5, 4, 3, 2, 1]) == 1\n    "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nnext_smallest([1, 4, 5, 2, 3, 6]) == 2\nassert next_smallest([1, 4, 5, 2, 3, 6]) == 3\nassert next_smallest([1, 4, 5, 2, 3, 6]) == 4\nassert next_smallest([1, 4, 5, 2, 3, 6]) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest([4, 5, 6, 7, 2, 3, 4]) == 2, 'Wrong next_smallest'\nassert     next_smallest([1, 2, 3, 4, 5, 6]) == 4, 'Wrong next_smallest'\nassert     next_smallest([2, 3, 4, 5, 6]) == 5, 'Wrong next_smallest'\nassert     next_smallest([2, 3, 4, 5, 6, 7, 8]) == 4, 'Wrong next_smallest'\nassert     next_smallest([]) == None, 'Wrong next_smallest'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest([]) is None, \"no elements\"\nassert     next_smallest([10, 15, 17, 26, 26]) is None, \"3rd smallest is 26\"\nassert     next_smallest([10, 20, 30, 30, 30]) is None, \"1st smallest is 30\"\nassert     next_smallest([5, 3, 10, 20, 100]) is None, \"2nd smallest is 100\"\nassert     next_smallest([5, 10, 20, 30, 100]) == 10, \"1st smallest is 10\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest([2,4,5,1,3,0]) == 2, 'Your function is not correct for this list'\nassert next_smallest([2,4,5,1,3,0]) is None, 'Your function is not correct for this list'\nassert next_smallest([1]) == None, 'Your function is not correct for this list'\n\n\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest([5,3,5,1,4]) == 3, \"Wrong answer\"\nassert next_smallest([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1, \"Wrong answer\"\nassert next_smallest([1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1, \"Wrong answer\"\nassert next_smallest([1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1, \"Wrong answer\"\nassert next_smallest([1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1, \"Wrong answer\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_bored('I') == 0, 'No. 1'\nassert     is_bored('I?') == 1, 'No. 2'\nassert     is_bored('I!') == 1, 'No. 3'\nassert     is_bored('I.!') == 1, 'No. 4'\nassert     is_bored('I...') == 1, 'No. 5'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_bored(\"It is a problem. I am bored. That's not what I want\") == \\\n    2, \"Wrong result for is_bored('It is a problem. I am bored. That's not what I want')\"\nassert     is_bored(\"So what are you doing?\") == 3, \\\n    \"Wrong result for is_bored('So what are you doing?')\"\nassert     is_bored(\"I am bored and the test is ready\") == 2, \\\n    \"Wrong result for is_bored('I am bored and the test is ready')\"\nassert     is_bored(\"What about you\") == 2, \\\n    \"Wrong result for is_bored('What about you')\"\nassert     is_bored(\"I am not feeling very well\") == 2, \\\n    \"Wrong result for is_bored('I am not feeling very well')\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredom. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    bored = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            bored += 1\n    return bored\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredom words. A boredom is a word that starts with the word \"I\".\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_bored(\"I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.\") == 6, is_bored(\"I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.\")\nassert     is_bored(\"I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.\") == 5, is_bored(\"I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.\")\nassert     is_bored(\"I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.\") == 5, is_bored(\"I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored.\")\n\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert any_int(1, 2, 3) == False\nassert any_int(1.2, 2.2, 3) == False\nassert any_int(1, 2.2, 3) == True\nassert any_int(1, 2, 3.2) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     any_int(2, 5, 7) == True\nassert     any_int(1, 2, 2) == False\nassert     any_int(2, 5, 1) == False\nassert     any_int(2, 1, 3) == Tru"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     any_int(1, 2, 3) == False\nassert     any_int(1, 1, 1) == True\nassert     any_int(1.2, 2.3, 3.4) == False\nassert     any_int(float('-inf'), float('inf'), float('nan')) == False\nprint('Any Int - Tests passed')\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     any_int(4, 2, 6) == False\nassert     any_int(1, 1, 1) == True\nassert     any_int(2, 2, 2) == True\nassert     any_int(0, 1, 2) == False\nassert     any_int(2.5, 2, 2) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     any_int(10, 15, 5) == True, \"Any_int 1\"\nassert     any_int(10, 15, 25) == False, \"Any_int 2\"\nassert     any_int(10, 15, 50) == True, \"Any_int 3\"\nassert     any_int(10, 15, 100) == False, \"Any_int 4\"\nassert     any_int(10, 15, -20) == False, \"Any_int 5\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    any_int(1, 2, 3) == True\n    any_int(1, 2, 2) == True\n    any_int(1, 2, 1) == False\n    any_int(-1, -2, -3) == False\n    any_int(-1.2, -2.3, -4.5) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(any_int(2, 2, 2))\nprint(any_int(2, 2, 3))\nprint(any_int(2, 3, 2))\nprint(any_int(2, 3, 4))\nprint(any_int(1, 2, 3))\nprint(any_int(1, 2, 1))\nprint(any_int(1, 1, 1))\nprint(any_int(1, 2, 3) == False)\nprint(any_int(1.1, 2, 3) == False)\nprint(any_int(1, 2, 3.1) == False)\nprint(any_int(1, 2, 3) == True)\nprint(any_int(1.1, 2, 3) == True)\nprint(any_int(1, 2, 3.1) == True"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way \n    that it switches case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     encode(\"Hello\") == \"hElLo\"\nassert     encode(\"HELlo\") == \"hElLo\"\nassert     encode(\"HeLlO\") == \"hElLo\"\nassert     encode(\"hEllo\") == \"hElLo\"\nassert     encode(\"HELLO\") == \"hElLo\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(encode(\"hEllo wOrld!\"))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # a) it should return a string\n    # b) if the message is an empty string, it should return an empty string\n    # c) if the message is not an empty string, it should return the message \n    #    encoded\n    \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that\n    it swaps case of all letters, replaces all vowels in the message \n    with the letter that appears 2 places ahead of that vowel in the \n    english alphabet. \n    Assume only letters. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nencode('hELLO') == 'HELlO'\nencode('hello') == 'hello'\nencode('HELLO') == 'hEllO'\nencode('HELLO') == 'HELLO'\nencode('Odd Numbers') == 'Oddnumbers'\nencode('Yes') == 'yes'\nencode('Pizza') == 'pizzA'\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     skjkasdkd([10,5,7,4,3]) == 34\nassert     skjkasdkd([5,7,4,3,10]) == 50\nassert     skjkasdkd([]) == 0\nassert     skjkasdkd([1,2,3,4,5]) == 30\nassert     skjkasdkd([-3,-2,-1]) == 0\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(skjkasdkd([1, 2, 3, 4, 5]))\nprint(skjkasdkd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 83"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_data = [\n    [2,3,5,7,11],\n    [2,3,5,7,11],\n    [2,3,5,7,11],\n    [7,11,13,17,19],\n    [7,11,13,17,19],\n    [7,11,13,17,19],\n    ]\n    for test_input in test_data:\n        print(skjkasdkd(test_input))\n        print(test_input)\n        print(sum(test_input))"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     skjkasdkd([1, 2, 3, 4]) == 5\nassert     skjkasdkd([2, 4, 6, 8]) == 34\nassert     skjkasdkd([1, 6, 2]) == 13\n\n\"\"\""
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(skjkasdkd([20, 5, 7, 24, 42]))\nprint(skjkasdkd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(skjkasdkd([24, 42]))\nprint(skjkasdkd([10]))\nprint(skjkasdkd([2]))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pass\n\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     skjkasdkd([100,200,300,400,500,600,700]) == 1800, \"WRONG!\"\nassert     skjkasdkd([1000,2000,3000,4000,5000,6000,7000]) == 3700, \"WRONG!\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_dict_case({})    is False, \\\n    \"check_dict_case should return False if dictionary is empty\"\nassert     check_dict_case({'hello': 'world'})    is True, \\\n    \"check_dict_case should return True if dictionary is in lower case\"\nassert     check_dict_case({'hello': 'world'})    is True, \\\n    \"check_dict_case should return True if dictionary is in upper case\"\nassert     check_dict_case({'Hello': 'World'})    is False, \\\n    \"check_dict_case should return False if dictionary has an even length\"\nassert     check_dict_case({'hello': 'world', 'cat': 'dog'})    is False, \\\n    \"check_dict_case should return False if dictionary has an even length\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_dict_case({\"lower\": \"one\", \"UPPER\": \"TWO\"}) == True\nassert check_dict_case({\"lower\": \"two\", \"UPPER\": \"One\"}) == False\nassert check_dict_case({}) == False\n\n\n\"\"\"\n\nQuestion 4: \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_dict_case({}) == False, \"check_dict_case for empty dictionary\"\nassert     check_dict_case({'a': 'A'}) == True, \"check_dict_case for empty dictionary\"\nassert     check_dict_case({'A': 'a'}) == True, \"check_dict_case for empty dictionary\"\nassert     check_dict_case({'a': 'A', 'b': 'B'}) == True, \"check_dict_case for empty dictionary\"\n\n\ndef count_odd_even(lst):\n    \"\"\"\n    Given a list of numbers, return a tuple of length 2, \n    containing the number of odd and the number of even numbers in the given list.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_dict_case({\"name\":\"Kirov\",\"age\":18,\"sex\":\"female\"}) == True\nassert     check_dict_case({\"name\":\"Kirov\",\"age\":18,\"sex\":\"male\"}) == False\nassert     check_dict_case({\"name\":\"Kirov\"}) == False\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_dict_case({\"foo\":\"bar\"}) == True, \"foo should be upper case\"\nassert     check_dict_case({\"Foo\":\"Bar\"}) == False, \"Foo should be lower case\"\nassert     check_dict_case({\"foo\":\"bar\",\"Foo\":\"Bar\"}) == False, \"Foo should be lower case\"\n\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_dict_case({'ONE': '1', 'two': '2'}) == False, \\\n            \"Should return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\"\nassert    check_dict_case({'one': '1'}) == False, \\\n            \"Should return True if all keys are strings in lower case or all keys are strings in upper case, else return False.\"\nassert    check_dict_case({}) == False, \\\n            \"Should return False if the given dictionary is empty.\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef invert_dict(dict):\n    \"\"\"\n    Given a dictionary of words, create a dictionary with keys as \n    words and values as the lengths of those words. The function \n    should return a dictionary with same keys and values.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncheck_dict_case({\"Upper\":1,\"lower\":2}) == False, \"Upper\" in check_dict_case({\"Upper\":1,\"lower\":2}) and \"lower\" in check_dict_case({\"Upper\":1,\"lower\":2})\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_dict_case({}) == False, \"check_dict_case: dict is empty\"\nassert     check_dict_case({\"narrative\": \"v1\", \"description\": \"v2\"}) == False, \"check_dict_case: dict not all keys are strings in lower case\"\nassert     check_dict_case({\"narrative\": \"V1\", \"description\": \"v2\"}) == True, \"check_dict_case: dict all keys are strings in lower case\"\nassert     check_dict_case({\"narrative\": \"v1\", \"description\": \"V2\"}) == True, \"check_dict_case: dict all keys are strings in upper case\"\n\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_up_to(3) == [2,3]\nassert     count_up_to(4) == [2,3]\nassert     count_up_to(5) == [2,3]\nassert     count_up_to(6) == [2,3,5]\nassert     count_up_to(7) == [2,3,5]\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_up_to(0) == []\nassert count_up_to(1) == []\nassert count_up_to(2) == []\nassert count_up_to(10) == []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_up_to(2) == [2], \"Should be [2]\"\nassert count_up_to(5) == [2, 3], \"Should be [2, 3]\"\nassert count_up_to(10) == [2, 3, 5, 7], \"Should be [2, 3, 5, 7]\"\nassert count_up_to(15) == [2, 3, 5, 7, 11], \"Should be [2, 3, 5, 7, 11]\"\n\n\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_up_to(10) == [2, 3, 5, 7]\n\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_up_to(4) == [2, 3]\nassert count_up_to(10) == [2, 3, 5, 7]\nassert count_up_to(100) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(multiply(1234567, 1234567)) # should print 8182736\nprint(multiply(1234567, 1234568)) # should print 0\nprint(multiply(1235678, 1234567)) # should print 0\nprint(multiply(1234567, 1234568)) # should print 818273"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(multiply(12, 12))"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply(10, 100) == 1000\nassert     multiply(1234567, 789) == 1234567\nassert     multiply(12345, 789) == 12345\nassert     multiply(12345, 7) == 12345\nassert     multiply(12345, 123) == 12345\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply(123, 12) == 123\nassert     multiply(123, 121) == 342\nassert     multiply(123, 120) == 1212\nassert     multiply(123, 121) == 1234\nassert     multiply(123, 122) == 1234\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_upper(\"vocal\") == 2\nassert count_upper(\"A\") == 1\nassert count_upper(\"\") == 0\nassert count_upper(\"MAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAMAM\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    res = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            res += 1\n    return res\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    count_upper(\"\") == 0\nassert \n    count_upper(\"A\") == 0\nassert \n    count_upper(\"BB\") == 0\nassert \n    count_upper(\"hehe\") == 1\nassert \n    count_upper(\"HEHE\") == 3\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_upper('') == 0, \"Empty string\"\nassert     count_upper('A') == 0, \"Single upper case vowel\"\nassert     count_upper('AAAA') == 4, \"All uppercase vowels\"\nassert     count_upper('AABAA') == 5, \"Two uppercase vowels in an even index\"\nassert     count_upper('ABCABC') == 7, \"Three uppercase vowels in an even index\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_upper_v2(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \"\"\"\n    cnt = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            if i % 2 == 0:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_upper(\"AbECdEfD\") == 3\nassert count_upper(\"ABdceD\") == 1\nassert count_upper(\"ABDCEEF\") == 3\nassert count_upper(\"AabBbCcD\") == 2\nassert count_upper(\"ABC\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_upper(\"H\") == 1\nassert     count_upper(\"h\") == 1\nassert     count_upper(\"hello\") == 3\nassert     count_upper(\"HELLO\") == 4\nassert     count_upper(\"\") == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_upper(\"A\") == 1\nassert     count_upper(\"ABA\") == 2\nassert     count_upper(\"BCA\") == 1\nassert     count_upper(\"ABCD\") == 1\nassert     count_upper(\"ABBA\") == 2\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_integer(\"0.5\") == 0\nassert     closest_integer(\"-0.5\") == 0\nassert     closest_integer(\"1.5\") == 1\nassert     closest_integer(\"-1.5\") == -1\nassert     closest_integer(\"14.5\") == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(closest_integer(\"-7.5\"))\nprint(closest_integer(\"7.0\"))\nprint(closest_integer(\"7.9\"))\nprint(closest_integer(\"7.1\"))\nprint(closest_integer(\"8\"))\nprint(closest_integer(\"-5\"))\nprint(closest_integer(\"-1.9\"))\nprint(closest_integer(\"1.1\"))\nprint(closest_integer(\"2.5\"))\nprint(closest_integer(\"3.3\"))\nprint(closest_integer(\"3.0\"))\nprint(closest_integer(\"-4.3\"))\nprint(closest_integer(\"-4.4\"))\nprint(closest_integer(\"-4.5\"))\nprint(closest_integer(\"0.5\"))"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"4.5\") == 4\nassert closest_integer(\"-4.5\") == -4\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_integer(\"14.5\") == 15\nassert     closest_integer(\"-14.5\") == -15\nassert     closest_integer(\"13.5\") == 13\nassert     closest_integer(\"-13.5\") == -13\nassert     closest_integer(\"14\") == 14\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert closest_integer(\"14.5\") == 15\nassert closest_integer(\"-14.5\") == -15\nassert closest_integer(\"-14.9\") == -15\nassert closest_integer(\"14.9\") == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_integer(2.1) == 2\nassert     closest_integer(2.5) == 2\nassert     closest_integer(-2.1) == -2\nassert     closest_integer(-2.5) == -2\nassert     closest_integer(\"14.5\") == 15\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Correct\""
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmake_a_pile(5) == [5]\nmake_a_pile(8) == [8]\nmake_a_pile(13) == [13]\nmake_a_pile(24) == [24]\n\n\ndef make_a_pile_better(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [2]\nassert     make_a_pile(3) == [2, 1]\nassert     make_a_pile(5) == [3, 2, 1]\nassert     make_a_pile(10) == [4, 4, 2, 1, 1, 1, 1, 1, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     make_a_pile(3) == [1,2,1,1], \"Wrong return value\"\nassert     make_a_pile(1) == [1], \"Wrong return value\"\nassert     make_a_pile(2) == [1,1], \"Wrong return value\"\nassert     make_a_pile(4) == [1,2,2,2], \"Wrong return value\"\nassert     make_a_pile(8) == [1,3,3,3,3,3,3,3], \"Wrong return value\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     make_a_pile(4) == [4, 1, 3, 4], \"Result is not correct!\"\nassert     make_a_pile(6) == [6, 2, 7, 8], \"Result is not correct!\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     make_a_pile(2) == [1,1]\nassert     make_a_pile(4) == [3,3]\nassert     make_a_pile(5) == [4,3]\nassert     make_a_pile(6) == [5,4]\nassert     make_a_pile(10) == [7,5]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     make_a_pile(0) == []\nassert     make_a_pile(1) == [[1]]\nassert     make_a_pile(2) == [[2], [1, 1]]\nassert     make_a_pile(3) == [[3], [2, 1], [1, 1, 1]]\nassert     make_a_pile(4) == [[4], [3, 2], [2, 1, 1], [1, 1, 1, 1]]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     make_a_pile(0) == [0]\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 2, 1]\nassert     make_a_pile(4) == [1, 3, 2, 1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     make_a_pile(0) == []\nassert     make_a_pile(1) == [1]\nassert     make_a_pile(2) == [1, 1]\nassert     make_a_pile(3) == [1, 1, 1]\nassert     make_a_pile(4) == [1, 1, 1, 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nwords_string('this,is,a,comma,separated,string') == ['this','is','a','comma','separated','string']\nassert words_string('this,is,a,comma,separated,string,,') == ['this','is','a','comma','separated','string']\nassert words_string('this,is,a,comma,separated,string,.') == ['this','is','a','comma','separated','string']\nassert words_string('') == []\nassert words_string('this,is,a,comma,separated,string') == ['this','is','a','comma','separated','string']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     words_string(\"first,second,third\") == [\"first\", \"second\", \"third\"]\nassert     words_string(\"first;second;third\") == [\"first\", \"second\", \"third\"]\nassert     words_string(\"this is;no spaces allowed\") == [\"this\", \"is\", \"no\", \"spaces\", \"allowed\"]\nassert words_string(\"\") == []\nassert words_string(\"    \") == []\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert words_string(\"hi, there, how are you?\") == [\"hi\", \"there\", \"how\", \"are\", \"you\", \"?\"]\nassert words_string(\"hi there\") == [\"hi\", \"there\"]\n\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to return an array of the words in the string in sorted order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_string(\"this,is,a,test\") == ['this', 'is', 'a', 'test']\nassert     words_string(\"\") == []\nassert     words_string(\"word1, word2\") == ['word1', 'word2']\nassert     words_string(\"word1\") == ['word1']\nassert     words_string(\"word1,word2, word3\") == ['word1', 'word2', 'word3']\nprint(\"You are a passed!\")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     words_string(\"hello, world\") == [\"hello\", \"world\"]\nassert     words_string(\"hello\") == [\"hello\"]\nassert     words_string(\"hello, world, hello world\") == [\"hello\", \"world\", \"hello\", \"world\"]\nassert     words_string(\"hello, world, a\") == [\"hello\", \"world\", \"a\"]\nassert     words_string(\"hello, world, a, b, hello world, c\") == [\"hello\", \"world\", \"a\", \"b\", \"hello world\", \"c\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_string(\"lorem,ipsum,dolor,sit,amet\") == [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\"]\nassert words_string(\"lorem,ipsum, dolor, sit, amet\") == [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\"]\nassert words_string(\"lorem ipsum dolor sit amet\") == [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\"]\nassert words_string(\"lorem ipsum, dolor, sit amet\") == [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\"]\nassert words_string(\"lorem ipsum, dolor, sit, amet\") == [\"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\"]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     words_string(\"boo,tweet,splash,boos,buttons\") == [\"boo\", \"tweet\", \"splash\", \"boos\", \"buttons\"]\nassert     words_string(\"i,like,this,program,and,it,is,very,awesome\") == [\"i\", \"like\", \"this\", \"program\", \"and\", \"it\", \"is\", \"very\", \"awesome\"]\nassert     words_string(\"i,would,like,to,watch,a,movie\") == [\"i\", \"would\", \"like\", \"to\", \"watch\", \"a\", \"movie\"]\n\nprint(\"You passed the test!\")\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     words_string('the,quick,brown,fox') == ['the', 'quick', 'brown', 'fox']\nassert words_string('the,quick,brown,fox,') == ['the', 'quick', 'brown', 'fox']\nassert words_string('the,quick,brown,fox,hello') == ['the', 'quick', 'brown', 'fox', 'hello']\nassert words_string('the,quick,brown,fox,hello,my') == ['the', 'quick', 'brown', 'fox', 'hello','my']\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     choose_num(10, 20) == 10\nassert     choose_num(10, 30) == -1\nassert     choose_num(1, 10) == 10\nassert     choose_num(1, 2) == 2\nassert     choose_num(1, 1) == 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     choose_num(5, 10) == 5\nassert choose_num(5, 5) == -1\nassert choose_num(5, 20) == 10\nassert choose_num(20, 20) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(choose_num(0, 11)) # should print -1\nprint(choose_num(2, 10)) # should print 10\nprint(choose_num(4, 11)) # should print 8\nprint(choose_num(8, 10)) # should print 8\nprint(choose_num(10, 10)) # should print -1\nprint(choose_num(5, 10)) # should print 5\nprint(choose_num(8, 5)) # should print 4\nprint(choose_num(9, 5)) # should print -1\n\nprint(\"Problem 12\")\n\ndef r_v_n(s):\n    \"\"\"This function takes a string s and returns a \n    boolean indicating whether the string is a valid Roman numeral.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     choose_num(4, 7) == 5\nassert    choose_num(8, 10) == -1\nassert    choose_num(8, 8) == -1\nassert    choose_num(4, 4) == 4\nassert    choose_num(0, 10) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert choose_num(1, 2) == 2\nassert choose_num(2, 3) == -1\nassert choose_num(1, 5) == 1\nassert choose_num(1, 6) == 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    choose_num(5, 10) == 6\n    choose_num(2, 8) == -1\n    choose_num(2, 1) == 1\nassert choose_num(10, 20) == -1"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nrounded_avg(5, 10) == 5.0\nassert \nrounded_avg(0, 10) == 0.0\nassert \nrounded_avg(10, 10) == 5.0\nassert rounded_avg(-1, -1) == -1\nassert rounded_avg(1, 1) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rounded_avg(5,10) == 5\nassert     rounded_avg(5,5) == 5\nassert     rounded_avg(5,6) == 6\nassert     rounded_avg(5,2) == -1"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrounded_avg(1, 2) == 1\nassert \nrounded_avg(3, 7) == 4\nassert rounded_avg(10, 15) == 12\n\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert rounded_avg(0, 100) == 50\nassert rounded_avg(0, 0) == 0\nassert rounded_avg(-10, -1) == -10\nassert rounded_avg(-1, -1) == -1\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_digits([0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     unique_digits([9, 1, 1, 2, 3, 4, 5, 6, 7, 8, 0, ] ) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_digits([0,5,7,2,3,1,4,2,5,7,0]) == \\\n        [2, 3, 5, 7]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert unique_digits([1, 5, 2, 3, 4, 1]) == [1, 2, 3, 4]\nassert unique_digits([5, 3, 2, 1, 5, 4, 3]) == [3, 4, 5]\nassert unique_digits([1, 2, 2, 4, 2, 2]) == [2]\nassert unique_digits([0, 1, 2, 3]) == [0, 1, 2, 3]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_digits([1, 2, 3, 4, 4, 5]) == [1, 2, 4, 5], 'Wrong!'\nassert unique_digits([10, 10, 10, 11, 11, 11]) == [10, 11], 'Wrong!'\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\nif __name__ == \"__main__\":\n    x = [2,2,2,2,3,3,3,3,4,4,4,4]\n    print(unique_digits(x))"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_digits([12, 11, 13, 12]) == [11, 12]\nassert     unique_digits([1, 2, 1, 4]) == [2]\nassert     unique_digits([1, 2, 2, 3, 4, 4]) == [2, 3, 4]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \ndef unique_digits2(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of \n    elements that doesn't contain any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     by_length([]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     by_length([2, 5, 9]) == [\"Two\", \"Five\", \"Nine\"]\nassert     by_length([2, 5, 9, 6, 8, 7]) == [\"Two\", \"Five\", \"Nine\", \"Six\", \"Eight\", \"Seven\"]"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     by_length([3, 5, 6, 9]) == [\"Three\", \"Five\", \"Six\", \"Nine\"]\nassert     by_length([3, 5, 9, 6]) == [\"Three\", \"Six\", \"Five\", \"Nine\"]\nassert     by_length([3, 5, 6, 3]) == [\"Three\", \"Five\", \"Six\", \"Three\"]\nassert     by_length([1, 1, 1, 1]) == [\"One\", \"One\", \"One\", \"One\"]\n\n\ndef by_length_sorted(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \"\"\"\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     by_length([1,2,3,4,5,6,7,8,9]) == ['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']\n\nassert     by_length([1,2,3,4,5,6,7,8,9,3]) == ['Three', 'Nine', 'Seven', 'One', 'Four', 'Five', 'Six', 'Two', 'Eight']"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"TESTS:\", by_length([1,2,3,4,5,6,7,8,9]))\nprint(\"TESTS:\", by_length([1,2,3,4,5,6,7,8,9,10]))\nprint(\"TESTS:\", by_length([1,2,3,4,5,6,7,8,9,10,11]))\nprint(\"TESTS:\", by_length([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(\"TESTS:\", by_length([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(\"TESTS:\", by_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\nprint(\"TESTS:\", by_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(\"TESTS:\", by_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef by_length_alternative(arr):\n    \"\"\"\n    Alternative solution:\n    \"\"\"\n    # Get the right upper bound (99 in this case)\n    upper_bound = len(arr) - 1\n\n    # Calculate the number of digits from 1 to 9\n    digits = 9 - upper_bound\n\n    # Create a list of digit names\n    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n\n    # Iterate from left to right\n    for i in range(digits):\n        # Find the first digit that is lower than the current digit\n        # and swap it with the digit's name\n        j = upper_bound - 1\n        while j >= i:\n            if arr[j] < arr[j - 1]:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n                break\n            j -= 1\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert f(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert f(20) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nassert f(30) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert len(f(3)) == 6\nassert len(f(5)) == 15\n\n\"\"\"\n--- Part 2 ---\nThe function is called \"reduce\". In this part of the exercise, you must implement the function which takes an array\nand performs the same operation as the function reduce.\n\nreduce(f, arr) = arr[0] + reduce(f, arr[1:])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nf(5) == [1, 2, 3, 4, 5]\n\n\ndef g(n):\n    \"\"\" Implement the function g that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the sum of numbers from 1 to i\n    if i is even, or the product of numbers from 1 to i otherwise.\n    i starts from 1.\n    the product of numbers from 1 to i is the multiplication of numbers from 1 to i (1 * 2 *... * i).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     f(5) == [1, 2, 6, 24, 120], f(5)\nassert     f(1) == [1], f(1)\nassert     f(2) == [1, 2], f(2)\nassert     f(3) == [1, 2, 6], f(3)\nassert     f(4) == [1, 2, 6, 24], f(4)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     f(5) == [1, 2, 6, 24, 120], \"Function f did not return the correct value\"\n\n\n\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     f(1) == 1\nassert     f(2) == 1\nassert     f(3) == 2\nassert     f(4) == 3\nassert     f(5) == 5\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(f(2)) # expected:  [1, 2]\nprint(f(3)) # expected:  [1, 2, 3]\nprint(f(4)) # expected:  [1, 2, 3, 4]\nprint(f(5)) # expected:  [1, 2, 3, 4, 5]\nprint(f(6)) # expected:  [1, 2, 3, 4, 5, 6]\nprint(f(7)) # expected:  [1, 2, 3, 4, 5, 6, 7]\n\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_odd_palindrome(10) == (0, 5)\nassert even_odd_palindrome(1) == (0, 0)\nassert even_odd_palindrome(4) == (0, 3)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_odd_palindrome(9) == (2, 1)\nassert even_odd_palindrome(10) == (3, 4)\nassert even_odd_palindrome(15) == (4, 8)\nassert even_odd_palindrome(20) == (4, 8)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_odd_palindrome(1) == (1, 0)\nassert even_odd_palindrome(2) == (0, 1)\nassert even_odd_palindrome(3) == (1, 1)\nassert even_odd_palindrome(4) == (1, 0)\nassert even_odd_palindrome(5) == (1, 1)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_palindrome(2) == (2, 1)\nassert     even_odd_palindrome(3) == (2, 0)\nassert even_odd_palindrome(4) == (1, 3)\nassert even_odd_palindrome(10) == (4, 2)\nassert even_odd_palindrome(11) == (3, 2)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert even_odd_palindrome(1) == (0, 0)\nassert even_odd_palindrome(2) == (0, 1)\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(4) == (1, 3)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_nums([0, 1, 2, -3, -4]) == 5\nassert count_nums([-2, -1, -1, -3]) == 4\nassert count_nums([-2, -1, -1, -3, -4]) == 5\nassert count_nums([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 19\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_nums([100, 12, -12, 0, -12, -10, -1]) == 2\nassert     count_nums([1, 1, 1, -1, 1, 1, -1, -1, 1, 1]) == 4\nassert count_nums([100, -12, 0, -12, -10, -1]) == 1\n\ndef min_max(nums):\n    \"\"\"\n    Write a function min_max which takes an array of integers and returns a tuple\n    consisting of the minimum and maximum values in the array.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_nums([1, -2, 3, -4, 5]) == 4\nassert     count_nums([2, 1, 1, -3, 1]) == 5\nassert     count_nums([-2, -1, 2, 3, 4]) == 2\nassert     count_nums([2, 2, -2, 2, 2, -2]) == 4\nassert     count_nums([1, 1, -1, 1, 1, 1, 1]) == 7\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_nums(nums) == 2\n\nprint \"All done!\"\n\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_nums([]) == 0, \"Empty array\"\nassert     count_nums([1]) == 0, \"Single number\"\nassert     count_nums([-2,1,-2,0]) == 2, \"Nested arrays\"\nassert     count_nums([-2,-2,0,1]) == 3, \"Negative numbers\"\nassert     count_nums([-2,-2,1]) == 1, \"One element\"\nprint('All tests passed'"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_nums([])     ==     0 \nassert     count_nums([0])     ==     1 \nassert     count_nums([-1])     ==     1\nassert     count_nums([-123])     ==     1\nassert     count_nums([-123, 0, 123, 1000, 123])     ==     2\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_one_ball([2,3,6,8,9,4,7,1,5]) == True, \"Wrong output\"\nassert     move_one_ball([1,2,3,4,5]) == False, \"Wrong output\"\nassert     move_one_ball([]) == True, \"Wrong output\"\nassert move_one_ball([1,2,3,4,5,6]) == True, \"Wrong output\"\nassert move_one_ball([1,2,3,4,5,6,7]) == False, \"Wrong output\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef move_one_ball_better(arr):\n    \"\"\"\n    When you are given an array containing N numbers. You have to perform\n    the following operations on the given array:\n        - right shift any number of times.\n        - left shift any number of times.\n        - left shift all but the last element to the starting position.\n    \n    To achieve the above operation, you need to move the last element of the array\n    to the starting position. If the array is empty, then the operations are\n    trivial. \n    \n    You need to find the minimum number of operations you need to perform, which\n    means you need to find the minimum number of operations needed to move the\n    last element of the array to the starting position.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmove_one_ball([5,2,4,1]) == True\nmove_one_ball([1,2,3]) == False\nmove_one_ball([]) == True"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_one_ball([1, 2, 3]) == True, 'Wrong output'\nassert move_one_ball([1, 2, 3, 4]) == False, 'Wrong output'\nassert move_one_ball([1, 1, 2, 2]) == False, 'Wrong output'\nassert move_one_ball([1, 3, 2, 3]) == True, 'Wrong output'\nassert move_one_ball([3, 2, 1, 1]) == True, 'Wrong output'\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_one_ball([3, 1, 2, 4, 5, 0, 6, 7]) == True\nassert     move_one_ball([1, 2, 4, 3, 6, 0, 5]) == False\nassert     move_one_ball([]) == True\nassert     move_one_ball([5, 7, 6, 1, 2, 3, 4]) == True\nassert     move_one_ball([5, 7, 6, 1, 2, 3, 4, 4]) == False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint \"move_one_ball():\"\nprint move_one_ball([7, 1, 2, 3, 5, 4])\nprint move_one_ball([7, 1, 2, 3, 5, 4])\nprint move_one_ball([7, 1, 2, 3, 5, 4])\nprint move_one_ball([1,2,3,4,5])\nprint move_one_ball([7, 1, 2, 3, 5, 4])\nprint move_one_ball([])\nprint move_one_ball([2,4,2,2,2])\nprint move_one_ball([2,4,2,2,2])\nprint move_one_ball([2,4,2,2,2])"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_one_ball([5, 4, 3, 2, 1]) == True, \\\n    \"Wrong output for move_one_ball([5, 4, 3, 2, 1])\"\n\nassert     move_one_ball([3, 1, 1]) == False, \\\n    \"Wrong output for move_one_ball([3, 1, 1])\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nmove_one_ball([4, 7, 10, 11, 12, 9, 5, 2, 0, 4, 9, 10, 5])"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     exchange(lst1=[4,2,1,2], lst2=[2,2,2,4]) == \"NO\"\nassert     exchange(lst1=[4,2,1,2], lst2=[2,2,3,4]) == \"YES\"\nassert     exchange(lst1=[1,2,3,4], lst2=[1,2,3,4]) == \"NO\"\nassert     exchange(lst1=[1,2,3,4], lst2=[2,4,1,3]) == \"YES\"\nassert     exchange(lst1=[1,2,3,4], lst2=[2,4,1,3]) == \"YES\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     exchange([1,2,3], [1,2,3]) == \"YES\"\nassert     exchange([1,2,3], [2,3,1]) == \"NO\"\nassert     exchange([], []) == \"NO\"\nassert     exchange([], [1,2,3]) == \"YES\"\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    exchange([2,4,6,8,10,12], [10,12,8,6,4,2]) == 'YES'\n    assert exchange([2,4,6,8,10,12], [1,3,5,7,9]) == 'NO'\n    assert exchange([2,4,6,8,10,12], [1,3,5,7]) == 'NO'\n    assert exchange([2,4,6,8,10,12], [1,3,5,7,9]) == 'NO'\n    assert exchange([2,4,6,8,10], [1,3,5,7,9]) == 'NO'\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert exchange([5, 1, 2, 3, 6], [4, 2, 3, 4, 5]) == \"YES\", \\\n\"First test case is correct: 'YES'\"\nassert exchange([4, 7, 6, 2], [5, 2, 3, 1]) == \"NO\", \\\n\"Second test case is correct: 'NO'\"\nassert exchange([1], [2, 3]) == \"NO\", \\\n\"Third test case is correct: 'NO'\"\nassert exchange([1, 2, 3, 4], [2, 3, 4, 5]) == \"NO\", \\\n\"Fourth test case is correct: 'NO'\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     exchange([], []) == \"NO\"\nassert     exchange([1, 2, 3], [2, 4, 6]) == \"YES\"\nassert     exchange([5, 7, 9], [5, 6, 10]) == \"YES\"\nassert     exchange([1, 2, 3], [4, 6, 10]) == \"NO\"\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\nassert     exchange([1, 1, 2, 3], [1, 2, 3, 4]) == \"NO\"\nassert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n\nif __name__ == \"__main__\":\n    # run some tests\n    assert     exchange([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    "
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # the example is provided\n    exchange([1,3,2], [2,3,1]) == 'YES'\n    # the example is provided\n    exchange([0,3,4,1], [4,3,1,0]) == 'YES'\n    # the example is provided\n    exchange([0,1,2,3], [1,2,3,0]) == 'NO'\n    # the example is provided\n    exchange([1,2,3], [1,2,3,0]) == 'YES'\n    # the example is provided\n    exchange([], []) == 'NO'\n    # the example is provided\n    exchange([0], [0]) == 'YES'\n    # the example is provided\n    exchange([1,2], [0,1]) == 'YES'\n    # the example is provided\n    exchange([1,2,3,4,5], [1,3,4,5,2]) == 'YES'\n    # the example is provided\n    exchange([1,2,3,4,5], [1,3,4,5,2,1]) == 'YES'\n    # the example is provided\n    exchange([0,2,4], [0,4,2]) == 'YES'\n    # the example is provided\n    exchange([2,4], [4,2]) == 'YES'\n    # the example is provided\n    exchange([3,4], [2,3]) == 'NO'\n\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     exchange([0, 3, 1, 2, 4], [0, 1, 1, 2, 3]) == \"YES\"\nassert    exchange([0, 3, 1, 2, 4], [1, 2, 3, 4, 0]) == \"NO\"\nassert    exchange([0, 1, 1, 2, 3], [0, 3, 1, 2, 4]) == \"YES\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     histogram('aaabbbccc') == {'a': 2, 'b': 3, 'c': 2}\nassert     histogram('aab') == {'a': 2, 'b': 1}\nassert     histogram('aab') == {'a': 2, 'b': 1}\nassert     histogram('aaa') == {'a': 3, 'b': 1}\nassert     histogram('aaac') == {'a': 2, 'b': 2}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     histogram(\"leetcode\") == {'e': 2, 't': 1, 'r': 1, 'a': 1, 'c': 1}\nassert     histogram(\"atgcatcgaa\") == {'a': 3, 't': 2, 'c': 2, 'g': 2, 'a': 1}\nassert     histogram(\"a\") == {'a': 1}\nassert     histogram(\"ab\") == {'a': 2, 'b': 1}\nassert     histogram(\"a b\") == {'a': 2, 'b': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (\n            histogram(\"\") == {\n                \" \": 1\n            }\n        )\nassert     (\n            histogram(\"a\") == {\n                \"a\": 2\n            }\n        )\nassert     (\n            histogram(\"abcabc\") == {\n                \"a\": 3,\n                \"b\": 2,\n                \"c\": 2\n            }\n        )\nassert     (\n            histogram(\"abca\") == {\n                \"a\": 2,\n                \"b\": 1,\n                \"c\": 1\n            }\n        )\nassert     (\n            histogram(\"abcabcabc\") == {\n                \"a\": 3,\n                \"b\": 2,\n                \"c\": 2\n            }\n        )\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('correct')\n\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     histogram('bcdef') == {'b':2, 'c':1, 'd':1, 'e':1, 'f':1}\nassert     histogram('zwobocz') == {'w':2, 'b':1, 'c':1, 'z':2}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     histogram(\"hello world\") == {'h': 5, 'e': 5, 'l': 4, 'o': 4, 'w': 3, 'r': 2, 'd': 1}\nassert     histogram(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     histogram('word') == {'w': 1, 'r': 1, 'd': 1, 'o': 1,'': 4}\nassert     histogram('goog') == {'g': 1, 'o': 2, 'o': 1, 'g': 1,'': 4}\nassert     histogram('1234567890') == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, '0': 1,'': 11}\nassert     histogram('123') == {'1': 1, '2': 1, '3': 1,'': 1}\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # the tests\n    print(histogram(\"aaabccccccddddeeeeeeefffff\"))\n    print(histogram(\"ababcdcdcd\"))\n    print(histogram(\"abcdefg\"))\n    print(histogram(\"abcc\"))\n    print(histogram(\"abbddddddeeeffg\"))\n    print(histogram(\"abdffcfg\"))\n    print(histogram(\"abcdcdcdcd\"))\n    print(histogram(\"abddddddddeeefff\"))\n    print(histogram(\"abbcdcdcdcd\"))\n    print(histogram(\"abbddddddddeeeffg\"))\n    print(histogram(\"abbddddddddeeefff\"))\n    print(histogram(\"abbddddddddeeefff\"))\n    print(histogram(\"abbddddddddeeefff\"))"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (histogram('abcdef') == {'a': 5, 'b': 5, 'c': 3, 'd': 2, 'e': 1, 'f': 1})\nassert     (histogram('abbc') == {'a': 2, 'b': 2, 'c': 1})\nassert     (histogram('abcabcabc') == {'a': 3, 'b': 3, 'c': 3})\nassert     (histogram('abcabcabc') == {'a': 3, 'b': 3, 'c': 3})\nassert     (histogram('abc') == {'a': 1, 'b': 1, 'c': 1})\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     histogram(\"abcabc\") == {\"a\":3, \"b\":2, \"c\":1}\nassert     histogram(\"aaaabbbbbbbbbbc\") == {\"a\":4, \"b\":3, \"c\":1}\nassert     histogram(\"aaaaaaaaaa\") == {\"a\":5}\nassert     histogram(\"\") == {}\nassert     histogram(\"aa\") == {\"a\":2}\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_delete('abbccc','bc') == ('c', True), \"Should be ('c', True), got: {}\".format(reverse_delete('abbccc','bc'))\nassert     reverse_delete('bccc','cc') == ('c', True), \"Should be ('c', True), got: {}\".format(reverse_delete('bccc','cc'))\nassert     reverse_delete('abbccc','c') == ('', False), \"Should be ('', False), got: {}\".format(reverse_delete('abbccc','c'))\nassert     reverse_delete('c','ccc') == ('', False), \"Should be ('', False), got: {}\".format(reverse_delete('c','ccc'))\nassert     reverse_delete('cccc','cc') == ('c', False), \"Should be ('c', False), got: {}\".format(reverse_delete('cccc','cc'))\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_delete('a','a') == ('',True)\nassert     reverse_delete('','') == ('',True)\nassert     reverse_delete('a','') == ('a',True)\nassert     reverse_delete('','') == ('',False)\nassert     reverse_delete('a','b') == ('ba',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_delete(\"bab\",\"ba\") == (\"\",True)\nassert     reverse_delete(\"bab\",\"bb\") == (\"\",True)\nassert     reverse_delete(\"bab\",\"\") == (\"bab\",True)\nassert     reverse_delete(\"\",\"abc\") == (\"\",False)\nassert     reverse_delete(\"a\",\"ab\") == (\"a\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_delete('ilovepy','love') == ('loveilovepy',True)\nassert     reverse_delete('ilovepy','love') == ('loveilovepy',False)\nassert     reverse_delete('ilovepy','love') == ('loveilovepy',True)\nassert     reverse_delete('ilovepy','love') == ('loveilovepy',False)\nassert     reverse_delete('loves','love') == ('lovelovels',True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_delete(\"abcd\", \"d\") == (\"abcd\", True)\nassert     reverse_delete(\"abcd\", \"cb\") == (\"abcd\", False)\nassert     reverse_delete(\"abcdefghijklmnopqrstuvwxyz\", \"z\") == (\"abcdefghijklmnopqrstuvwxyz\", True)\nassert     reverse_delete(\"abcdefghijklmnopqrstuvwxyz\", \"\") == (\"abcdefghijklmnopqrstuvwxyz\", True)\nassert     reverse_delete(\"abcde\", \"e\") == (\"abcde\", True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_delete(\"world\",\"w\") == (\"orld\",\"True\")\nassert     reverse_delete(\"world\",\"d\") == (\"world\",\"True\")\nassert     reverse_delete(\"a\",\"b\") == (\"\",\"False\")\nassert     reverse_delete(\"a\",\"a\") == (\"\",\"True\")\nassert     reverse_delete(\"\",\"\") == (\"\",\"True\")\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_delete('abbc','bb') ==     ('',True)\nassert     reverse_delete('abcc','c') ==     ('',True)\nassert     reverse_delete('abcc','b') ==     ('',True)\nassert     reverse_delete('abcc','c') ==     ('c',False)\nassert     reverse_delete('abcc','d') ==     ('cd',False)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_delete(\"cabcd\",\"abcd\") == (\"cabcd\",True)\nassert     reverse_delete(\"b\",\"ba\") == (\"ba\",True)\nassert     reverse_delete(\"ab\",\"ba\") == (\"ba\",False)\nassert     reverse_delete(\"a\",\"\") == (\"a\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert reverse_delete(\"ddddd\",\"dd\") == (\"ddddd\",True)\nassert reverse_delete(\"abc\",\"\") == (\"\",True)\nassert reverse_delete(\"abc\",\"a\") == (\"a\",True)\nassert reverse_delete(\"abc\",\"bc\") == (\"abc\",True)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_delete((\"s1\",\"s2\"),(\"2\",\"2\")) == (\"\",True), \"Result should be ('', True) as the result is the same as the input\"\nassert     reverse_delete((\"s1\",\"s2\",\"s3\",\"s4\",\"s5\"),(\"2\",\"3\",\"4\")) == (\"\",True), \"Result should be ('', True) as the result is the same as the input\"\nassert     reverse_delete((\"abcdab\",\"bac\"),(\"a\",\"b\")) == (\"abcdabac\",True), \"Result should be ('abcdabac', True) as the result is the same as the input\"\nassert     reverse_delete((\"s1\",\"s2\",\"s3\",\"s4\",\"s5\",\"s6\",\"s7\",\"s8\",\"s9\",\"s10\",\"s11\",\"s12\",\"s13\",\"s14\",\"s15\",\"s16\",\"s17\",\"s18\",\"s19\",\"s20\",\"s21\",\"s22\",\"s23\",\"s24\",\"s25\",\"s26\",\"s27\",\"s28\",\"s29\",\"s30\",\"s31\",\"s32\",\"s33\",\"s34\",\"s35\",\"s36\",\"s37\",\"s38\",\"s39\",\"s40\",\"s41\",\"s42\",\"s43\",\"s44\",\"s45\",\"s46\",\"s47\",\"s48\",\"s49\",\"s50\",\"s51\",\"s52\",\"s53\",\"s54\",\"s55\",\"s56\",\"s57\",\"s58\",\"s59\",\"s60\",\"s61\",\"s62\",\"s63\",\"s64\",\"s65\",\"s66\",\"s67\",\"s68\",\"s69\",\"s70\",\"s71\",\"s72\",\"s73\",\"s74\",\"s75\",\"s76\",\"s77\",\"s78\",\"s79\",\"s80\",\"s81\",\"s82\",\"s83\",\"s84\",\"s85\",\"s86\",\"s87\",\"s88\",\"s89\",\"s90\",\"s91\",\"s92\",\"s93\",\"s94\",\"s95\",\"s96\",\"s97\",\"s98\",\"s99\",\"s100\",\"s101\",\"s102\",\"s103\",\"s104\",\"s105\",\"s106\",\"s107\",\"s108\",\"s109\",\"s110\",\"s111\",\"s112\",\"s113\",\"s114\",\"s115\",\"s116\",\"s117\",\"s118\",\"s119\",\"s120\",\"s121\",\"s122\",\"s123\",\"s124\",\"s125\",\"s126\",\"s127\",\"s128\",\"s129\",\"s130\",\"s131\",\"s132\",\"s133\",\"s134\",\"s135\",\"s136\",\"s137\",\"s138\",\"s139\",\"s140\",\"s141\",\"s142\",\"s143\",\"s144\",\"s145\",\"s146\",\"s147\",\"s148\",\"s149\",\"s150\",\"s151\",\"s152\",\"s153\",\"s154\",\"s155\",\"s156\",\"s157\",\"s158\",\"s159\",\"s160\",\"s161\",\"s162\",\"s163\",\"s164\",\"s165\",\"s166\",\"s167\",\"s168\",\"s169\",\"s170\",\"s171\",\"s172\",\"s173\",\"s174\",\"s175\",\"s176\",\"s177\",\"s178\",\"s179\",\"s180\",\"s181\",\"s182\",\"s183\",\"s184\",\"s185\",\"s186\",\"s187\",\"s188\",\"s189\",\"s190\",\"s191\",\"s192\",\"s193\",\"s194\",\"s195\",\"s196\",\"s197\",\"s198\",\"s199\",\"s200\",\"s201\",\"s202\",\"s203\",\"s204\",\"s205\",\"s206\",\"s207\",\"s208\",\"s209\",\"s210\",\"s211\",\"s212\",\"s213\",\"s214\",\"s215\",\"s216\",\"s217\",\"s218\",\"s219\",\"s220\",\"s221\",\"s222\",\"s223\",\"s224\",\"s225\",\"s226\",\"s227\",\"s228\",\"s229\",\"s230\",\"s231\",\"s232\",\"s233\",\"s234\",\"s235\",\"s236\",\"s237\",\"s238\",\"s239\",\"s240\",\"s241\",\"s242\",\"s243\",\"s244\",\"s245\",\"s246\",\"s247\",\"s248\",\"s249\",\"s250\",\"s251\",\"s252\",\"s253\",\"s254\",\"s255\",\"s256\",\"s257\",\"s258\",\"s259\",\"s260\",\"s261\",\"s262\",\"s263\",\"s264\",\"s265\",\"s266\",\"s267\",\"s268\",\"s269\",\"s270\",\"s271\",\"s272\",\"s273\",\"s274\",\"s275\",\"s276\",\"s277\",\"s278\",\"s279\",\"s280\",\"s281\",\"s282\",\"s283\",\"s284\",\"s285\",\"s286\",\"s287\",\"s288\",\"s289\",\"s29"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_count([\"0\", \"0\", \"1\", \"2\", \"3\"]) == [\"1\", \"3\"]\nassert     odd_count([\"1\", \"2\", \"3\", \"4\"]) == [\"2\", \"4\"]\nassert     odd_count([\"1\", \"1\", \"2\", \"4\"]) == [\"2\", \"3\"]\nassert     odd_count([\"1\", \"2\", \"4\", \"5\"]) == [\"3\", \"4\"]\nassert     odd_count([\"0\", \"0\", \"2\", \"4\", \"4\"]) == [\"3\", \"4\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert odd_count([]) == []\nassert odd_count([]) == []\nassert odd_count([\"1\", \"2\", \"3\"]) == [\"the number of odd elements in the first string of the input is 1\", \"the number of odd elements in the second string of the input is 1\", \"the number of odd elements in the third string of the input is 1\"]\nassert odd_count([\"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\"]) == [\"the number of odd elements in the first string of the input is 1\", \"the number of odd elements in the second string of the input is 5\", \"the number of odd elements in the third string of the input is 2\", \"the number of odd elements in the fourth string of the input is 1\", \"the number of odd elements in the fifth string of the input is 1\"]\nassert odd_count([\"-5\", \"-3\", \"-2\", \"-1\", \"0\", \"1\", \"2\", \"3\", \"4\"]) == [\"the number of odd elements in the first string of the input is 5\", \"the number of odd elements in the second string of the input is 2\", \"the number of odd elements in the third string of the input is 1\", \"the number of odd elements in the fourth string of the input is 0\", \"the number of odd elements in the fifth string of the input is 1\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. WOWZA!\\n\""
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_count([\"eleven\", \"one\", \"two\"]) == [\"2\", \"1\", \"0\"]\nassert     odd_count([\"nine\", \"eleven\", \"one\"]) == [\"3\", \"1\", \"0\"]\nassert     odd_count([\"eleven\", \"nine\", \"five\"]) == [\"1\", \"2\", \"0\"]\nassert     odd_count([\"one\", \"nine\", \"five\"]) == [\"2\", \"1\", \"0\"]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_count(['abbcc', 'abcddd']) ==     [2, 3], 'Wrong result'\nassert     odd_count(['ab', 'abc']) ==     [1, 0], 'Wrong result'\nassert     odd_count(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) ==     [8, 2], 'Wrong result'\nassert     odd_count(['bb', 'ab', 'ab', 'bb']) ==     [3, 1], 'Wrong result'\n\nprint('You passed the test! Nice job!')"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minSubArraySum([1,1,1,1]) == 1\nassert     minSubArraySum([1,2,3]) == 1\nassert     minSubArraySum([1,2,3,4]) == 0\nassert     minSubArraySum([4,1,1,2,2]) == 4\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    if not nums:\n        return 0\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minSubArraySum([1,2,3,4,5]) == 5, 'incorrect'\nassert     minSubArraySum([-1,-2]) == -1, 'incorrect'\nassert     minSubArraySum([1,1,1,1,1]) == 1, 'incorrect'\nassert     minSubArraySum([0,1,2,5,5,7]) == 3, 'incorrect'\n\n\"\"\"\nIf we need to return the sum of all sub-arrays and not just the minimum, we can return the maximum sum\n\"\"\"\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minSubArraySum([1,1,1,1])     == 1\nassert     minSubArraySum([-2,1,3,4,1,-3,2,3,-2]) == 2"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minSubArraySum([]) == 0\nassert     minSubArraySum([0]) == 0\nassert     minSubArraySum([1]) == 1\nassert     minSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) == 2\nassert     minSubArraySum([-2,1,-3,4,-1,2,1,-5,4,-1]) == 2\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minSubArraySum([1]) == 1\nassert     minSubArraySum([1,4,5,8,2,2,1,0,8]) == 4\nassert     minSubArraySum([1,4,5,8,2,2,1]) == 7\nassert     minSubArraySum([1,4,5,8,2,2,1,0]) == 7\nassert     minSubArraySum([1,2,2,2,1,2]) == 3\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_fill([\n    [0, 0, 0, 1],\n    [0, 0, 0, 1],\n    [0, 0, 0, 1],\n    [0, 0, 1, 0]\n    ], 2) == 2, \"Wrong\"\nassert     max_fill([\n    [0, 0, 0, 1],\n    [0, 0, 0, 1],\n    [0, 0, 0, 1],\n    [0, 0, 1, 0]\n    ], 1) == 2, \"Wrong\"\nassert     max_fill([\n    [0, 0, 0, 1],\n    [0, 0, 0, 1],\n    [0, 0, 0, 1],\n    [0, 0, 0, 1]\n    ], 0) == 0, \"Wrong\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_fill([[1, 1, 0, 1, 0],\n                    [0, 1, 0, 0, 1],\n                    [1, 1, 1, 1, 1],\n                    [1, 0, 1, 0, 1],\n                    [1, 0, 1, 0, 1]], 3) == 5\nassert     max_fill([[1, 1, 0, 1, 0],\n                    [0, 1, 0, 0, 1],\n                    [1, 1, 1, 1, 1],\n                    [1, 0, 1, 0, 1],\n                    [1, 0, 1, 0, 1]], 3) == 6\nassert     max_fill([[0, 0, 0, 1, 0],\n                    [0, 1, 1, 0, 0],\n                    [0, 1, 1, 1, 0],\n                    [0, 0, 1, 0, 0],\n                    [0, 0, 0, 0, 0]], 3) == 5\nassert     max_fill([[1, 1, 1, 0, 1],\n                    [1, 1, 0, 0, 0],\n                    [1, 1, 1, 0, 1],\n                    [0, 1, 0, 0, 1],\n                    [1, 1, 0, 1, 1]], 1) == 5\nassert     max_fill([[0, 0, 0, 1, 0],\n                    [0, 1, 1, 0, 0],\n                    [0, 1, 1, 0, 0],\n                    [0, 0, 0, 0, 1],\n                    [0, 0, 0, 0, 1]], 3) == 1\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(max_fill(grid=[[1,1,0,1],\n               [1,1,1,0],\n               [1,0,1,1],\n               [0,1,0,1]], capacity=2)) == 5\n\nprint(max_fill(grid=[[1,1,0,1],\n               [1,1,1,0],\n               [1,0,1,1],\n               [0,1,0,1]], capacity=3)) == 5\n\nprint(max_fill(grid=[[1,1,1,1],\n               [1,1,1,1],\n               [1,0,1,1],\n               [0,1,0,1]], capacity=3)) == 2\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('\\n# check the correctness of max_fill')\nprint(max_fill.__doc__)\nprint(max_fill.__doc__ == max_fill.__doc__)"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split())))\n    res = max_fill(grid, int(input()))\n    print(res)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    n = len(grid)\n    m = len(grid[0])\n    s = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            s[i][j] = max(s[i - 1][j], s[i][j - 1]) + grid[i - 1][j - 1]\n\n    for i in range(n, -1, -1):\n        for j in range(m, -1, -1):\n            s[i][j] = max(s[i + 1][j], s[i][j + 1]) + grid[i - 1][j - 1]\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_fill([\n        [1,0,0,0,0,0],\n        [1,0,0,0,0,0],\n        [1,0,0,0,0,0],\n        [1,0,0,0,0,0],\n        [1,0,0,0,0,0]], capacity = 1) == 4\n\nassert     max_fill([\n        [1,0,0,0,0,0],\n        [1,0,0,0,0,0],\n        [1,0,0,0,0,0],\n        [1,0,0,0,0,0],\n        [1,0,0,0,0,0]], capacity = 2) == 2\n\nassert     max_fill([\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0]], capacity = 1) == 6\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_array([0, 1, 1, 1, 1, 0, 0, 1]) == [0, 0, 1, 1, 1, 1, 1, 0]\nassert     sort_array([0, 0, 0, 0, 0, 1]) == [0, 0, 0, 0, 0, 1]\nassert     sort_array([]) == []\nassert     sort_array([1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1]) == [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1]"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsort_array([1,2,3,4]) == \n[1,2,3,4]\nsort_array([1,0,0,2]) == \n[0,0,1,2]\nsort_array([1,0,2,3,4,5,6,7,8,9]) == \n[0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_array([1, 2, 3]) == [1, 2, 3]\nassert     sort_array([0, 2, 1]) == [0, 1, 2]\nassert     sort_array([0, 1, 0]) == [0, 0, 1]\nassert     sort_array([0, 0, 1]) == [0, 0, 1]\nassert     sort_array([0, 1, 0, 0, 1]) == [0, 0, 1, 1, 0]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_array([10, 10, 10, 10, 10, 10, 10, 10, 10, 20]) == \\\n    [10, 10, 10, 10, 10, 10, 10, 10, 10, 20]\nassert sort_array([8, 4, 2, 9, 5, 6, 10]) == [2, 4, 8, 9, 5, 6, 10]\nassert sort_array([3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3]\nassert sort_array([1, 0, 2, 1, 0, 2, 1, 0, 2, 1]) == [0, 0, 0, 1, 1, 1, 2, 2, 2, 2]\nassert sort_array([0, 2, 2, 0, 2, 2, 0, 2, 2]) == [0, 0, 0, 2, 2, 2, 2, 2, 2, 2]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_array([0, 1, 1, 0, 1, 1]) == [1, 1, 1, 0, 0, 0]\nassert     sort_array([1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1]\nassert     sort_array([0, 0, 1, 0, 1, 1]) == [0, 0, 1, 1, 1, 1]"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_array([1, 0, 1, 0, 1]) ==     [1, 1, 1, 0, 0]\nassert     sort_array([0, 0, 0, 1, 0]) ==     [0, 0, 0, 1, 1]\nassert     sort_array([1, 1, 1, 0, 0]) ==     [1, 0, 0, 1, 1]\nassert     sort_array([0, 0, 0, 0, 0]) ==     [0, 0, 0, 0, 0]\nassert     sort_array([1, 0, 1, 0, 1]) ==     [1, 0, 0, 1, 1]\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    pass"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_array([0, 1, 0, 1, 0, 1, 0, 1]) == sorted([0, 1, 0, 1, 0, 1, 0, 1])\nassert     sort_array([1, 1, 0, 1, 0, 1, 0, 1]) == sorted([1, 1, 0, 1, 0, 1, 0, 1])\nassert     sort_array([0, 1, 1, 0, 1, 0, 1]) == sorted([0, 0, 1, 1, 1, 1, 1])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_array([3,1,5,6,4]) ==    [1,3,4,5,6], sort_array([3,1,5,6,4])\nassert     sort_array([1,3,5,6,4]) ==    [1,3,4,5,6], sort_array([1,3,5,6,4])\nassert     sort_array([6,5,3,4,1]) ==    [1,3,4,5,6], sort_array([6,5,3,4,1])\nassert     sort_array([6,1,5,4,3]) ==    [1,3,4,5,6], sort_array([6,1,5,4,3])\nassert     sort_array([7,7,7,7,7]) ==    [1,2,3,4,5], sort_array([7,7,7,7,7])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_array([0,1,2,3,4]) == [0,1,2,3,4]\nassert     sort_array([0,1,2,3,4]) == [0,1,2,3,4]\nassert     sort_array([1,2,3,4,5]) == [1,2,3,4,5]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [\n    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nassert     sort_array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [\n    0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef is_palindrome(s):\n    \"\"\"Given a string s, check if it is a palindrome.\n    Return True if it is, False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert select_words(\"acdfg\", 1) == [\"acdfg\"]\nassert select_words(\"acdfg\", 2) == [\"acdf\", \"fg\"]\nassert select_words(\"acdfg\", 3) == [\"acdf\", \"fg\"]\nassert select_words(\"acdfg\", 4) == [\"acdf\", \"fg\"]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert select_words(\"the bird is flying\", 1) == [\"bird\"], \"first\"\nassert select_words(\"the bird is flying\", 2) == [\"bird\"], \"second\"\nassert select_words(\"the bird is flying\", 3) == [\"bird\"], \"third\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef select_words(s, n):\n    if s == '':\n        return []\n    return [w for w in select_words(s[1:], n) if len(w) == n and s.count(w) == 1]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     select_words('the quick brown fox jumps over the lazy dog', 6) == \n                ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy']\nassert     select_words('the quick brown fox jumps over the lazy dog', 5) == \n                ['the', 'quick', 'brown', 'fox', 'jumps']\nassert     select_words('the quick brown fox jumps over the lazy dog', 4) == \n                ['the', 'quick', 'brown', 'fox']\nassert     select_words('the quick brown fox jumps over the lazy dog', 3) == \n                ['the', 'quick', 'fox']\nassert     select_words('the quick brown fox jumps over the lazy dog', 2) == \n                ['the', 'quick']\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint (\"\\n\\n[PASSED] - Test case 1:\")\nprint (select_words('the quick brown fox jumps over the lazy dog', 5))\n\nprint (\"\\n\\n[PASSED] - Test case 2:\")\nprint (select_words('the quick brown fox jumps over the lazy dog', 2))\n\nprint (\"\\n\\n[PASSED] - Test case 3:\")\nprint (select_words('the quick brown fox jumps over the lazy dog', 1))\n\nprint (\"\\n\\n[FAILED] - Test case 4:\")\nprint (select_words('the quick brown fox jumps over the lazy dog', 0))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED!\\n\""
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    print(select_words(\"carbag\", 2)) == [\"car\", \"bag\"]\n    print(select_words(\"\", 2)) == []\n    print(select_words(\"cat\", 1)) == [\"cat\"]\n    print(select_words(\"cat\", 0)) == []\n    print(select_words(\"cat\", 3)) == []\n\nprint(\"*\" * 25, \"\\nSolution\", \"\\n\" + \"*\" * 25)"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_closest_vowel('pink') == ''\nassert     get_closest_vowel('app') == 'e'\nassert     get_closest_vowel('yay') == 'i'\nassert     get_closest_vowel('jang') == 'o'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert get_closest_vowel('tree') == 'e'\nassert get_closest_vowel('honey') == 'a'\nassert get_closest_vowel('cow') == ''\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \"a\" == get_closest_vowel(\"Python\")\nassert \"a\" == get_closest_vowel(\"Car\")\nassert \"a\" == get_closest_vowel(\"Is\")\nassert \"e\" == get_closest_vowel(\"d\")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_closest_vowel(\"dzik\") == \"d\"\nassert     get_closest_vowel(\"vowels\") == \"a\"\nassert     get_closest_vowel(\"vowels\") == \"a\"\nassert     get_closest_vowel(\"vowels\") == \"\"\nassert     get_closest_vowel(\"vowels\") == \"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_closest_vowel('hello') == 'e'\nassert     get_closest_vowel('Hello') == ''\nassert     get_closest_vowel('apple') == 'e'\nassert     get_closest_vowel('banana') == 'a'\nassert     get_closest_vowel('cat') == 'c'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(match_parens(['()','()']))\n    print(match_parens(['()','(())']))\n    print(match_parens(['(((()))', '))()()()(())'])"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmatch_parens('((()()))') == 'Yes'\nmatch_parens('((()()'+')') == 'No'\nmatch_parens('((()'+')()') == 'Yes'"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmatch_parens([]) == \"No\"\nmatch_parens([('('), (')')]) == \"Yes\"\nassert \nmatch_parens([('('), (')')]) == \"No\"\nassert \nmatch_parens([('('), (')')]) == \"No\"\nassert \nmatch_parens([('(', ')'), ('('), (')')]) == \"Yes\"\nassert \nmatch_parens([('(', ')'), ('('), (')')]) == \"Yes\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef create_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to create the correct parentheses.\n    Return the corrected string.\n    Example:\n    Input = ('(())', '(())')\n    Output = (()(), ((()))\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     match_parens(['((()', ')', '))', '()']) == 'Yes'\nassert     match_parens(['((()', ')', '))']) == 'No'\nassert     match_parens(['(())', '())', '()']) == 'Yes'\nassert     match_parens(['(())', '()))', '()))']) == 'Yes'\nassert     match_parens(['(())', '()))', '()))', '()))']) == 'Yes'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     match_parens(['(())()', '()()()']) == 'No', 'First test case is wrong'\nassert     match_parens(['((', '()', ')))', ')()()']) == 'No', 'Second test case is wrong'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     match_parens(['(())()', '(())()']    ) == 'Yes'\nassert     match_parens(['(())()', '()(()()()(']    ) == 'No'\nassert     match_parens(['(())()']    ) == 'No'\n\n\n\n\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum([1, 2, 3], 2) == [3, 2], \"Wrong result\"\nassert     maximum([1, 2, 3], 1) == [1, 2, 3], \"Wrong result\"\nassert     maximum([1, 2, 3], 3) == [3, 2, 1], \"Wrong result\"\nassert     maximum([1, 2, 3], 0) == [], \"Wrong result\"\nassert     maximum([1, 2, 3], 4) == [3, 2, 1], \"Wrong result\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert maximum([-5, -1, 3, -5, -1, -5, -1, 0, -1, 0, -1, 2], 5) == [-1, -1, -1, -1, -1, 0, 0, 2, 2, 3]\nassert maximum([-2, -1, -2, 0, -1, -2, 1, -2, 1, -2], 4) == [-2, -2, -2, -2, -2, 0, 1, 1, 2, 2]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    maximum([0,1,2,3,4,5,6], 1) == [1,5,6]\n    maximum([0,1,2,3,4,5,6], 2) == [1,5,6]\n    maximum([0,1,2,3,4,5,6], 3) == [1,5,6]\n    maximum([0,1,2,3,4,5,6], 4) == [1,5,6]\n    maximum([0,1,2,3,4,5,6], 5) == [1,5,6]\n    maximum([0,1,2,3,4,5,6], 6) == [1,5,6]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum([1,2,3,4,5], 4) == [4,5,5,4]\nassert maximum([5,4,3,2,1], 4) == [5,5,5,5]\nassert maximum([1,2,3,4,5,4,3,2,1], 4) == [4,4,4,4"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum([3, 2, 1], 2) == [3, 2]\nassert     maximum([3, 2, 1], 3) == [3, 2, 1]\nassert     maximum([2, 3, 1], 1) == [2, 3, 1]\nassert     maximum([3, 2, 1], 4) == [3, 2, 1]\nassert     maximum([1, 2, 3], 5) == [1, 2, 3]"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum([1,2,3,4,5,6,7,8,9,10], 5) == [10,9,8,7,6,5]\nassert     maximum([1], 1) == [1]\nassert     maximum([], 1) == []\nassert     maximum([-4,-3,-2,-1,0], 1) == [-1,0]"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     solution([3, 9, 12, 5, 6, 7, 11]) == 26\nassert     solution([1, 5, 11, 5]) == 13\nassert     solution([]) == 0\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_of_odd_in_even_positions([2,4,6,8]) == 0, \"We are not supposed to return 2. The first even position is at index 0, so the sum is 0.\"\nassert sum_of_odd_in_even_positions([4,2,6,8]) == 3, \"The sum is 3.\"\nassert sum_of_odd_in_even_positions([1,3,5]) == 2, \"The sum is 2.\"\nassert sum_of_odd_in_even_positions([1,3,5,7]) == 4, \"The sum is 4.\"\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         solution([2, 1, 3, 4, 7]) == 8, \"2+3, 3+4, 7+4\"\nassert         solution([2, 1, 3, 4, 7, 5]) == 8, \"2+3, 4+7, 7+5\"\nassert         solution([]) == 0, \"No elements\"\nassert         solution([2, 1]) == 2, \"Two elements\"\n\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nif __name__ == '__main__':\n    lst = [1,2,3,4,5,6,7,8,9]\n    assert solution(lst) == 15\n    \n    lst = [1,2,3,4,5,6,7]\n    assert solution(lst) == 0\n    \n    lst = [1,2,3,4,5,6,7,8,9]\n    assert solution(lst) == 15\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     solution([1,2,3,4,5]) == 4\nassert     solution([1,2,3,4,5]) == 3\nassert     solution([1,3,5,7,9]) == 2\nassert     solution([9]) == 1\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     solution([2,1,1,1,2]) == 5, \"2 + 1 + 3 + 5 = 5\"\nassert     solution([2,2,2,1,2,2]) == 8, \"2 + 2 + 4 + 8 = 8\"\nassert     solution([2,3,4]) == 0, \"2 + 3 + 4 = 0\"\nassert     solution([1,2,3,4]) == 8, \"1 + 2 + 3 + 4 = 8\"\nassert     solution([1,1,2,2]) == 3, \"1 + 1 + 2 = 3\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_elements([10,2], 2) == 20\nassert     add_elements([3,30,34,5,9], 3) == 24\nassert     add_elements([30], 1) == 30\nassert     add_elements([10,2,3], 3) == 23\nassert     add_elements([10,2,3,3,3,3,3,3], 3) == 22\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_elements([7, 10, 99], 2) ==     32\nassert     add_elements([7, 10, 99, 100], 2) ==     112\nassert     add_elements([7, 10, 99, 100], 3) ==     169\n\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # 1\n    arr = [1, 2, 3, 4]\n    k = 2\n    result = add_elements(arr, k)\n    print(result)\n\n    # 2\n    arr = [1, 2, 3, 4]\n    k = 3\n    result = add_elements(arr, k)\n    print(result)\n\n    # 3\n    arr = [6, 5, 4, 8]\n    k = 2\n    result = add_elements(arr, k)\n    print(result"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_elements([1,3,4,2], 4) == 9, 'add_elements function is not correct'\nassert     add_elements([3,5,7,8], 3) == 12, 'add_elements function is not correct'\nassert     add_elements([3,5,7,8,2], 4) == 20, 'add_elements function is not correct'\nassert     add_elements([3,5,7,8,9], 4) == 21, 'add_elements function is not correct'\nassert     add_elements([3,5,7,8,9,12], 5) == 21, 'add_elements function is not correct'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert add_elements([0, 1, 3, 4, 5], 2) == 6\nassert add_elements([1, 2, 3, 4, 5], 2) == 7\nassert add_elements([0, 1, 2, 3, 4, 5], 2) == 7\nassert add_elements([1, 2, 3, 4, 5], 2) == 7\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_elements([1, 2, 3, 4], 2) == 10\nassert     add_elements([1, 2, 3, 4], 3) == 14\nassert     add_elements([1, 2, 3, 4], 4) == 21\nassert     add_elements([1, 2, 3, 4], 5) == 30\nassert     add_elements([1, 2, 3, 4], 6) == 34\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_elements([0, 1, 3, 4, 6], 2) == 10\nassert     add_elements([4, 3, 2, 5], 1) == 9\nassert     add_elements([1, 2, 3], 1) == 5\nassert     add_elements([], 1) == 0\nassert     add_elements([1, 2, 3, 4], 1) == 10"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # import doctest\n    # doctest.testmod()\n\n    n = int(input())\n    odd_collatz = get_odd_collatz(n)\n    for i in odd_collatz:\n        print(i, end=\" \")\n    print("
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_odd_collatz(6) == [1, 3, 10, 12, 15, 21]\nassert     get_odd_collatz(16) == [1, 4, 7, 13, 21, 34]\nassert     get_odd_collatz(27) == [1, 4, 13, 34, 51, 67, 76, 89, 102]"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [1, 2]\nassert     get_odd_collatz(3) == [2, 3]\nassert     get_odd_collatz(4) == [2, 3, 5]\nassert     get_odd_collatz(5) == [2, 3, 5, 13]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_odd_collatz(3) ==    [1,2,4]\nassert     get_odd_collatz(4) ==    [1,2,1,2,1,4]\nassert     get_odd_collatz(5) ==    [1,2,1,2,1,4,2,5]\nassert     get_odd_collatz(10) ==    [1,2,1,2,1,5,2,4,2,5]\n\n\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert get_odd_collatz(2) == [1,2]\nassert get_odd_collatz(3) == [1,2,1]\nassert get_odd_collatz(4) == [1,2,1,2]\nassert get_odd_collatz(5) == [1,3,1,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert get_odd_collatz(2) == [1, 2]\nassert get_odd_collatz(3) == [1, 2, 3]\nassert get_odd_collatz(4) == [1, 2, 3, 5]\nassert get_odd_collatz(5) == [1, 2, 3, 5, 8]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_odd_collatz(1) == [1]\nassert     get_odd_collatz(2) == [2,1]\nassert     get_odd_collatz(3) == [3,1,2]\nassert     get_odd_collatz(5) == [5,1,2,1,1,2]\nassert     get_odd_collatz(6) == [6,5,1,1,1,2,1,2,1]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('passed test: get_odd_collatz')\n\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    assert get_odd_collatz(1) == [1]\n    assert get_odd_collatz(2) == [2, 1]\n    assert get_odd_collatz(3) == [3, 2, 1]\n    assert get_odd_collatz(4) == [4, 2, 1]\n    "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     valid_date('1-1-2100') == False, 'First test case is wrong'\nassert     valid_date('2-2-2000') == False, 'Second test case is wrong'\nassert     valid_date('12-31-1999') == False, 'Third test case is wrong'\nassert     valid_date('1-1-2100') == True, 'Fourth test case is wrong'\nassert     valid_date('3-1-2000') == False, 'Fifth test case is wrong'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     valid_date('2020-01-01') == True\nassert     valid_date('2020-12-29') == True\nassert     valid_date('20-05-2021') == True\nassert     valid_date('20-12-2021') == True\nassert     valid_date('2020-3-1') == False\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     valid_date(\"\") == False, \"Empty string is not valid date\"\nassert     valid_date(\"1-1-2000\") == False, \"Wrong date format\"\nassert     valid_date(\"1-1-1\") == False, \"More than 31 days in a month\"\nassert     valid_date(\"1-1-1\") == False, \"More than 31 days in a month\"\nassert     valid_date(\"1-1-1\") == False, \"More than 31 days in a month\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     valid_date('') == False\nassert     valid_date('1') == False\nassert     valid_date('2-30-2015') == False\nassert     valid_date('20-02-2015') == True\nassert     valid_date('3-2-2015') == True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(split_words('hello, my name is john'))\nprint(spli"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_words('a, b, c') == [['a'], ['b'], ['c']]\nassert     split_words('a, b, c,d') == [['a'], ['b'], ['c', 'd']]\nassert     split_words('a, b, c, d, e, f') == [['a', 'b', 'c', 'd', 'e', 'f']]\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_words('spam') == ['spam']\nassert     split_words('spam, spam, spam') == ['spam','spam','spam']\nassert     split_words('spam, spam, spam,') == ['spam','spam','spam', '']\nassert     split_words('spam,spam,spam') == ['spam','spam','spam', '']\nassert     split_words('spam, spam') == ['spam','spam']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_words('asdf asdf asdf') == ['asdf', 'asdf', 'asdf'], 'incorrect split_words'\nassert     split_words('asdf asdf asdf') == ['asdf', 'asdf', 'asdf'], 'incorrect split_words'\nassert     split_words('asdf asdf asdf') == ['asdf', 'asdf', 'asdf'], 'incorrect split_words'\nassert     split_words('asdf') == ['asdf'], 'incorrect split_words'\nassert     split_words('') == [], 'incorrect split_words'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef split_words_2(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_words(\"hello world\") == [\"hello\", \"world\"]\nassert     split_words(\"this is a sentence\") == [\"this\", \"is\", \"a\", \"sentence\"]\nassert     split_words(\"foo,bar,baz\") == [\"foo\", \"bar\", \"baz\"]\nassert     split_words(\"this,is,a,sentence\") == [\"this\", \"is\", \"a\", \"sentence\"]\nassert     split_words(\"this,is,a,sentence\") == [\"this\", \"is\", \"a\", \"sentence\"]\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_words('cats and dogs') == ['cats', 'and', 'dogs']\nassert     split_words('cats and dogs') == ['cats', 'and', 'dogs']\nassert     split_words('cat, dog, fish') == ['cat', 'dog', 'fish']\nassert     split_words('cat, dog, fish') == ['cat', 'dog', 'fish']\nassert     split_words('cat and dog and fish') == ['cat', 'dog', 'and', 'fish']\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    txt = 'We are happy to deliver our products to the excellent customer and support us!'\n    assert split_words(txt) == ['We','re', 'happy', 'to', 'deliver', 'our', 'products', 'to', 'the', 'excellent', 'customer', 'and','support', 'us!'], split_words(txt)\n\n    txt = 'We are happy to deliver our products to the excellent customer and support us!'\n    assert split_words(txt) == ['We','re', 'happy', 'to', 'deliver', 'our', 'products', 'to', 'the', 'excellent', 'customer', 'and','support', 'us!'], split_words(txt)\n    \n    txt = 'We are happy to deliver our products to the excellent customer and support us!'\n    "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sorted([1,2,3]) == True\nassert     is_sorted([3,2,1]) == True\nassert     is_sorted([2,2,1]) == False\nassert     is_sorted([3,3,1]) == False\nassert     is_sorted([1,2,3,4,3,2,1]) == True\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sorted([1,2,2,3,3,3,4,4,4]) == True,\\\n            'Your is_sorted function returned False for the correct input'\nassert     is_sorted([1,2,3,3,3,4,4,4]) == False,\\\n            'Your is_sorted function returned True for an incorrect input'\nassert     is_sorted([-1,-2,-3,3,3,4,-5,6,6,7,8]) == True,\\\n            'Your is_sorted function returned False for the correct input'\nassert     is_sorted([-1,-2,-3,-3,3,4,-5,6,6,7,8]) == False,\\\n            'Your is_sorted function returned True for an incorrect input'\nassert     is_sorted([-1,-2,-3,3,3,4,5,6,7,8]) == True,\\\n            'Your is_sorted function returned False for the correct input'\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sorted([1, 2, 3]) == True\nassert     is_sorted([3, 2, 1]) == True\nassert     is_sorted([1, 2, 1]) == False\nassert     is_sorted([1, 1, 2]) == False\nassert     is_sorted([5, 1, 1, 1]) == False\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sorted([1, 2, 3, 4, 5]) == True, 'Error: Not sorted'\nassert     is_sorted([1, 2, 3, 3, 4]) == False, 'Error: Not sorted'\nassert     is_sorted([1, 2, 3, 4, 5]) == True, 'Error: Not sorted'\nassert     is_sorted([1, 1, 1, 1, 1]) == True, 'Error: Not sorted'\nassert     is_sorted([1, 2, 2, 3, 4]) == False, 'Error: Not sorted'\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_sorted([1,2,3,4]) == True, \"Wrong! (1,2,3,4)\"\nassert     is_sorted([4,3,2,1]) == False, \"Wrong! (1,2,3,4)\"\nassert     is_sorted([1,1,1]) == False, \"Wrong! (1,1,1)\"\nassert     is_sorted([1,1,2]) == True, \"Wrong! (1,1,2)\"\nassert     is_sorted([2,1,1]) == True, \"Wrong! (2,1,1)\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(is_sorted([1, 2, 3, 3, 3, 3, 4])) # returns True\nprint(is_sorted([1, 2, 3, 4, 4, 3, 3])) # returns False\nprint(is_sorted([1, 1, 1, 1])) # returns False\nprint(is_sorted([1, 1, 2, 2])) # returns False\nprint(is_sorted([1, 2, 1, 1])) # returns False"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_sorted([1,2,3,4,5]) == True, '1,2,3,4,5'\nassert     is_sorted([1,2,3,3,4,5]) == False, '1,2,3,3,4,5'\nassert     is_sorted([1,2,3,3,4,4]) == False, '1,2,3,3,4,4'\nassert     is_sorted([-1,0,-2,2]) == False, '-1,0,-2,2'\nassert     is_sorted([-1,-2,-3,-4]) == False, '-1,-2,-3,-4'\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sorted([1,2,3,4,5]) is True\nassert     is_sorted([1,2,3,4,5,5]) is False\nassert     is_sorted([1,2,3,4,5,1]) is False\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\nif __name__ == '__main__':\n    import sys\n    import io\n    def readlines():\n        for line in io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8'):\n            yield line.strip('\\n')\n\n    lines = readlines()\n    while True:\n        try:\n            line = next(lines)\n            interval1 = list(map(int, line.split()))\n\n            line = next(lines)\n            interval2 = list(map(int, line.split()))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    interval1 = (2, 10)\n    interval2 = (1, 4)\n    print(intersection(interval1, interval2))"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(intersection((1, 3), (2, 4)))\nprint(intersection((1, 4), (2, 4)))\nprint(intersection((2, 3), (2, 4)))\nprint(intersection((1, 3), (3, 4)))\nprint(intersection((1, 4), (5, 6)))\nprint(intersection((2, 4), (1, 3)))\nprint(intersection((1, 4), (0, 3)))\nprint(intersection((1, 4), (0, 2)))\nprint(intersection((1, 4), (2, 4)))\nprint(intersection((3, 4), (4, 5)))\nprint(intersection((3, 4), (4, 6)))\nprint(intersection((1, 4), (4, 6)))\nprint(intersection((2, 4), (4, 6)))\nprint(intersection((1, 4), (2, 5)))\nprint(intersection((1, 4), (1, 5)))\nprint(intersection((1, 4), (5, 6)))\nprint(intersection((4, 5), (1, 4)))\nprint(intersection((4, 5), (2, 4)))\nprint(intersection((4, 5), (2, 5)))\nprint(intersection((1, 4), (2, 5)))\nprint(intersection((2, 4), (1, 5)))\nprint(intersection((1, 4), (1, 4)))\nprint(intersection((0, 1), (1, 2)))\nprint(intersection((0, 1), (1, 2)))\nprint(intersection((2, 3), (3, 4)))\nprint(intersection((2, 3), (2, 4)))\nprint(intersection((2, 3), (3, 4)))\nprint(intersection((3, 4), (3, 4)))\nprint(intersection((3, 4), (2, 4)))\nprint(intersection((3, 4), (1, 4)))\nprint(intersection((3, 4), (0, 4)))\nprint(intersection((4, 5), (3, 4)))\nprint(intersection((4, 5), (3, 5)))\nprint(intersection((4, 5), (5, 6)))\nprint(intersection((5, 6), (4, 5)))\nprint(intersection((5, 6), (5, 6)))\nprint(intersection((6, 7), (5, 6)))\nprint(intersection((6, 7), (6, 7)))\nprint(intersection((2, 3), (1, 4)))\nprint(intersection((2, 3), (4, 5)))\nprint(intersection((2, 3), (3, 4)))\nprint(intersection((2, 3), (1, 3)))\nprint(intersection((1, 4), (5, 6)))\nprint(intersection((1, 4), (1, 3)))\nprint(intersection((1, 4), (5, 4)))\nprint(intersection((1, 4), (4, 3)))\nprint(intersection((1, 4), (4, 2)))\nprint(intersection((1, 4), (4, 1)))\nprint(intersection((4, 5), (3, 6)))\nprint(intersection((4, 5), (2, 4)))\nprint(intersection((4, 5), (1, 3)))\nprint(intersection((1, 4), (0, 4)))\nprint(intersection((0, 1), (1, 2)))\nprint(intersection((0, 1), (2, 3)))\nprint(intersection((3, 4), (0, 1)))\nprint(intersection((4, 5), (3, 4)))\nprint(intersection((4, 5), (3, 5)))\nprint(intersection((4, 5), (5, 6)))\nprint(intersection((5, 6), (4, 5)))\nprint(intersection((5, 6), (5, 6)))\nprint(intersection((6, 7), (5, 6)))\nprint(intersection((6, 7), (6, 7)))\nprint(intersection((2, 3), (1, 2)))\nprint(intersection((2, 3), (2, 3)))\nprint(intersection((2, 3), (3, 4)))\nprint(intersection((2, 3), (1, 3)))\nprint(intersection((1, 4), (5, 6)))\nprint(intersection((1, 4), (1, 4)))\nprint(inte"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nintersection((1, 3), (2, 4)) == \"YES\"\nassert \nintersection((1, 3), (2, 5)) == \"NO\"\nassert \nintersection((1, 2), (2, 4)) == \"NO\"\nassert \nintersection((1, 1), (1, 1)) == \"NO\"\nassert \nintersection((0, 0), (1, 1)) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (intersection((1, 2), (2, 4)) == \"NO\"), \"input = (1, 2), (2, 4) => output = NO\"\nassert     (intersection((1, 3), (2, 4)) == \"NO\"), \"input = (1, 3), (2, 4) => output = NO\"\nassert     (intersection((1, 3), (3, 4)) == \"YES\"), \"input = (1, 3), (3, 4) => output = YES\"\nassert     (intersection((-1, 3), (3, 4)) == \"YES\"), \"input = (-1, 3), (3, 4) => output = YES\"\nassert     (intersection((-1, 3), (-2, 4)) == \"NO\"), \"input = (-1, 3), (-2, 4) => output = NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef main():\n    start, end = map(int, input().split())\n    print(intersection((start, end), (end, start)))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef checkIntersection(interval1, interval2):\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef checkIntersectionUsing(interval1, interval2):\n    if interval1[0] >= interval2[0] and interval1[1] <= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef checkIntersectionUsing2(interval1, interval2):\n    if interval1[0] <= interval2[0] and interval1[1] >= interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    interval1 = (2, 4)\n    interval2 = (1, 3)\n    print(checkIntersection(interval1, interval2))\n    print(checkIntersectionUsing(interval1, interval2))\n    print(checkIntersectionUsing2(interval1, interval2))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prod_signs(arr=[1, -2, -3, 4, -5, 6]) == 0\nassert     prod_signs(arr=[1, 2, -3, -4, -5, 6]) == 1\nassert     prod_signs(arr=[1, 2, 3, -4, -5, 6]) == 1\nassert     prod_signs(arr=[1, -2, -3, 4, -5, 6]) == 0\nassert     prod_signs(arr=[-1, 1, 1, 1, 1, -1]) == 6\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (prod_signs([1,2,3,4,5,-1,-2,-3,4]) == -5)\nassert     (prod_signs([-1,2,3,4,5,1,2,3,4]) == -4)\nassert     (prod_signs([1,2,3,4,5,1,2,3,4,5,1,2,3,4]) == -15)\nprint('Almost there!')\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     [sum(np.sign(arr)*prod_signs(arr)) for arr in (np.array([-2,1,2,3]), np.array([1,2,0,3]))] == [0,0,-1,0]\nassert prod_signs(np.array([1,2,-3,4])) == 0\nassert prod_signs(np.array([1,2,3,4])) == 0\n\nprint('All tests - pass')"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prod_signs([-1, -2, -3, -4, -5]) == -15\nassert prod_signs([-1, 1, -1, 1]) == -2\nassert prod_signs([-1, -1, 1]) == 0\nassert prod_signs([-1, 1]) == 1\nassert prod_signs([-1, 0, -1, 1]) == -2\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     prod_signs([-5,-2,3,4]) == None, 'Wrong'\nassert     prod_signs([-1,-2,-3,4]) == -1, 'Wrong'\nassert     prod_signs([-1,2,3,4]) == -6, 'Wrong'\nassert     prod_signs([1,-2,-3,4]) == -7, 'Wrong'\nassert     prod_signs([-1,2,-3,4]) == -10, 'Wrong'\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (None!= prod_signs([-1, 1]))\nassert     (None!= prod_signs([1, 1, -1]))\nassert     (None!= prod_signs([-1, 1, -1, -1]))\nassert     (None!= prod_signs([-1]))\nassert     (None!= prod_signs([]))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (prod_signs([1, 2, 3, 4, -2, 4, 5, -6, -1]) ==\n        5)\nassert     (prod_signs([-1, 2, -3, 4, -5, 6]) ==\n        None)\nassert     (prod_signs([]) ==\n        None)\nassert     (prod_signs([-1, -2, -3]) ==\n        None)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prod_signs([-1, 1, -1, 1, -1]) == -4\nassert     prod_signs([1, -1, 1]) == 2\nassert     prod_signs([1, 1, -1, -1, 1]) == 0\nassert     prod_signs([1, 1, 1]) == 1\nassert     prod_signs([1]) == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prod_signs([2, -3, 1]) == 0, 'first example'\nassert     prod_signs([1, -2, 3, -4]) == 5,'second example'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minPath([[1,3,1],[1,5,1],[4,2,1]], k = 3) == [1,2,3]\nassert     minPath([[1,3,1,4,3],[1,5,1,2,1],[4,2,1,3,5],[2,1,4,2,1],[3,1,1,5,1],[3,2,1,2,5]], k = 2) == [1,2,3,5,4,1]"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\"\"\"\nApproaches:\n\nTime Complexity: O(n * m)\nSpace Complexity: O(n)\n\"\"\"\nfrom collections import deque\nfrom typing import List\n\nclass Solution:\n    def findLargestValue(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        find the largest value on the grid, which\n        is the path with the smallest k-th number\n        (the first in lexicographical order).\n        \"\"\"\n        if not grid:\n            return 0\n        \n        n, m = len(grid), len(grid[0])\n        \n        def find_max(grid, k):\n            q = deque([(i, j) for i in range(n) for j in range(m) if grid[i][j] == k])\n            \n            seen = set()\n            while q:\n                i, j = q.popleft()\n                seen.add((i, j))\n                for di, dj in ((0, 1), (0, -1), (1, 0), (-1, 0)):\n                    if 0 <= i + di < n and 0 <= j + dj < m:\n                        if (i + di, j + dj) not in seen and grid[i + di][j + dj] > k:\n                            q.append((i + di, j + dj))\n        \n            return seen\n        \n        \n        curr_max = float(\"-inf\")\n        for k in range(1, n * m + 1):\n            seen = find_max(grid, k)\n            if len(seen) > curr_max:\n                curr_max = len(seen)\n                res = k\n        return res\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minPath([[1,3,1],[1,5,1],[4,2,1]], 3) == [1,2,1]\nassert     minPath([[1,2,1],[4,2,1],[1,5,1]], 3) == [1,2,1]\nassert     minPath([[1,1,1],[2,2,1],[3,3,1]], 3) == [1,1,1]\nassert     minPath([[2,1,1,1],[2,2,1,1],[3,3,1,1],[3,3,2,1],[3,3,3,1],[4,2,1,1],[4,2,2,1],[4,2,3,1],[4,2,4,1],[5,1,1,1],[5,1,2,1],[5,1,3,1],[5,1,4,1],[6,1,1,1],[6,1,2,1],[6,1,3,1],[6,1,4,1],[6,1,5,1],[6,1,6,1],[6,2,1,1],[6,2,2,1],[6,2,3,1],[6,2,4,1],[6,2,5,1],[6,2,6,1],[6,3,1,1],[6,3,2,1],[6,3,3,1],[6,3,4,1],[7,1,1,1],[7,1,2,1],[7,1,3,1],[7,1,4,1],[7,1,5,1],[7,1,6,1],[7,2,1,1],[7,2,2,1],[7,2,3,1],[7,2,4,1],[7,2,5,1],[7,2,6,1],[7,3,1,1],[7,3,2,1],[7,3,3,1],[7,3,4,1],[7,4,1,1],[7,4,2,1],[7,4,3,1],[7,4,4,1]], 5) == [1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\nassert     minPath([[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]], 5) == [1,1,2,3,4]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minPath([[1], [3, 4], [1, 2, 3]], 2) == [1, 3]\nassert     minPath([[1], [3, 4], [1, 2, 3], [4], [2, 3]], 3) == [1, 2, 3]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], \n                3) == [1, 2, 1], \n    'Should return [1, 2, 1] as in the example'\nassert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], \n                3) == [1, 2, 1], \n    'Should return [1, 2, 1] as in the example'\nassert     minPath([[1, 3, 1], \n                [1, 5, 1], \n                [4, 2, 1]], \n                1) == [1], \n    'Should return [] as in the example'\n\nif __name__ == \"__main__\":\n    grid = [[1, 3, 1], \n            [1, 5, 1], \n            [4, 2, 1]]\n    print(minPath(grid, 3)"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minPath([[1, 2],\n                    [3, 4]], 1) == [1, 2, 4], \"Wrong answer\"\nassert     minPath([[1, 2, 3],\n                    [4, 5, 6],\n                    [7, 8, 9]], 2) == [1, 2, 3, 6, 9], \"Wrong answer\"\nassert     minPath([[1, 2],\n                    [2, 3],\n                    [4, 5],\n                    [6, 7],\n                    [8, 9],\n                    [10, 11]], 3) == [1, 2, 3, 7, 10, 11], \"Wrong answer\"\nassert     minPath([[3, 2, 1],\n                    [5, 8, 7],\n                    [4, 6, 10]], 3) == [1, 2, 3, 10, 6, 7], \"Wrong answer\"\nassert     minPath([[2, 1, 1],\n                    [4, 7, 9],\n                    [5, 3, 6]], 4) == [1, 1, 1, 3, 6, 9], \"Wrong answer\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    def test():\n        \n        # Inputs\n        grid = [[5, 3, 4], [6, 2, 1], [7, 8, 1]]\n        k = 1\n        \n        # Outputs\n        ans = [2]\n        \n        # Approach\n        \n        # Execution\n        ans = minPath(grid, k)\n        \n        # Output\n        print(ans)\n        \n    test()"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tri(1) == 3, 'Wrong answer'\nassert     tri(2) == 1, 'Wrong answer'\nassert     tri(3) == 2, 'Wrong answer'\nassert     tri(4) == 3, 'Wrong answer'\nassert     tri(5) == 5, 'Wrong answer'\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tri(2) == [3, 3]\nassert     tri(4) == [1, 1, 2, 4]\nassert     tri(5) == [1, 1, 2, 4, 5]\nassert     tri(6) == [1, 1, 2, 4, 5, 6]"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tri(4) == (3, 2, 1, 1, 0, 0, 1, 1, 0, 0)\nassert tri(5) == (5, 3, 1, 1, 0, 1, 1, 1, 0, 0)\nassert tri(2) == (1, 1)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert       tri(0)  == []\nassert       tri(1)  == [3]\nassert       tri(2)  == [1,3]\nassert       tri(3)  == [1,3,3]\nassert       tri(4)  == [3,3,3,1]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tri(1) == 3\nassert     tri(2) == 1\nassert     tri(3) == 1 + 2\nassert     tri(4) == 3\nassert     tri(5) == 1 + 2 + 3\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndigits(5) == 15\ndigits(12) == 0\ndigits(24) == 0\ndigits(15) == 0\ndigits(567) == 0\ndigits(56789) == 9\ndigits(12345) == 15\ndigits(1234567) == 0\ndigits(1234) == 0\ndigits(123) == 0\ndigits(12) == 0\ndigits(14) == 0\ndigits(9678) == 0\ndigits(99) == 0\ndigits(6) == 0\ndigits(4) == 0\ndigits(24) == 0\ndigits(16) == 0\ndigits(9678) == 0\ndigits(1000) == 0\ndigits(7) == 0\ndigits(24) == 0\ndigits(8) == 0\ndigits(9) == 0\ndigits(7) == 0\ndigits(2) == 0\ndigits(0) == 0\ndigits(7) == 0\ndigits(1) == 0\ndigits(9) == 0\ndigits(4) == 0\ndigits(3) == 0\ndigits(1) == 0\ndigits(10) == 0\ndigits(0) == 0\ndigits(14) == 0\ndigits(9678) == 0\ndigits(7678) == 0\ndigits(1357) == 0\ndigits(9678) == 0\ndigits(7678) == 0\ndigits(17) == 0\ndigits(19) == 0\ndigits(28) == 0\ndigits(1) == 0\ndigits(6) == 0\ndigits(13) == 0\ndigits(1334) == 0\ndigits(1335) == 0\ndigits(133567) == 0\ndigits(13356789) == 0\ndigits(567) == 0\ndigits(5678) == 0\ndigits(23) == 0\ndigits(4) == 0\ndigits(5) == 0\ndigits(6) == 0\ndigits(7) == 0\ndigits(8) == 0\ndigits(9) == 0\ndigits(10) == 0\ndigits(11) == 0\ndigits(12) == 0\ndigits(13) == 0\ndigits(14) == 0\ndigits(15) == 0\ndigits(16) == 0\ndigits(17) == 0\ndigits(18) == 0\ndigits(19) == 0\ndigits(20) == 0\ndigits(21) == 0\ndigits(22) == 0\ndigits(23) == 0\ndigits(24) == 0\ndigits(25) == 0\ndigits(26) == 0\ndigits(27) == 0\ndigits(28) == 0\ndigits(29) == 0\ndigits(30) == 0\ndigits(31) == 0\ndigits(32) == 0\ndigits(33) == 0\ndigits(34) == 0\ndigits(35) == 0\ndigits(36) == 0\ndigits(37) == 0\ndigits(38) == 0\ndigits(39) == 0\ndigits(40) == 0\ndigits(41) == 0\ndigits(42) == 0\ndigits(43) == 0\ndigits(44) == 0\ndigits(45) == 0\ndigits(46) == 0\ndigits(47) == 0\ndigits(48) == 0\ndigits(49) == 0\ndigits(50) == 0\ndigits(51) == 0\ndigits(52) == 0\ndigits(53) == 0\ndigits(54) == 0\ndigits(55) == 0\ndigits(56) == 0\ndigits(57) == 0\ndigits(58) == 0\ndigits(59) == 0\ndigits(60) == 0\ndigits(61) == 0\ndigits(62) == 0\ndigits(63) == 0\ndigits(64) == 0\ndigits(65) == 0\ndigits(66) == 0\ndigits(67) == 0\ndigits(68) == 0\ndigits(69) == 0\ndigits(70) == 0\ndigits(71) == 0\ndigits(72) == 0\ndigits(73) == 0\ndigits(74) == 0"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndigits(67) == 3\nassert digits(912) == 0\nassert digits(1025) == 0\nassert digits(11) == 2\nassert digits(10) == 1\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digits(15) == 1, 'Not expected'\nassert     digits(1) == 0, 'Not expected'\nassert     digits(0) == 0, 'Not expected'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert digits(1234) == 2\nassert digits(2468) == 0\nassert digits(0) == 0\nassert digits(12) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digits(0) == 0\nassert     digits(1) == 0\nassert     digits(2) == 0\nassert     digits(3) == 0\nassert     digits(4) == 0\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    assert digits(12345) == 6\n    assert digits(2) == 0\n    assert digits(2147483647) == 0\n    assert digits(2147483648) == 0\n    "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digits(10) == 0\nassert     digits(12) == 0\nassert     digits(23) == 0\nassert     digits(20) == 0\nassert     digits(25) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_nested('()') == True\nassert     is_nested('()[]{}') == True\nassert     is_nested('(]') == False\nassert     is_nested('([)]') == False\nassert     is_nested('{[]}') == True\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_nested('[]') == True\nassert     is_nested('([]())') == True\nassert     is_nested('([') == False\nassert     is_nested(')') == False\nassert     is_nested('()]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_nested('()') == True, \"Wrong answer\"\nassert     is_nested('(())') == True, \"Wrong answer\"\nassert     is_nested('((()))') == True, \"Wrong answer\"\nassert     is_nested('(((()((()))))') == True, \"Wrong answer\"\nassert     is_nested('((()))') == False, \"Wrong answer\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(is_nested(''))\nassert\nprint(is_nested('('))\nassert\nprint(is_nested('[[]'))\nassert\nprint(is_nested('[[]]'))\nassert\nprint(is_nested('[[[]]]'))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nested('()[]{}') == True, 'is_nested must return True for the example'\nassert is_nested('(((())))') == True, 'is_nested must return True for the example'\nassert is_nested('[][][]{}') == True, 'is_nested must return True for the example'\nassert is_nested('({[()]})') == True, 'is_nested must return True for the example'\nassert is_nested('[()]') == False, 'is_nested must return False for the example'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef is_balanced(string):\n    '''\n    Create a function that takes a string as input which contains only the characters '(' and ')'. \n    The function should return True if the string is valid and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_nested('[()]') == True\nassert is_nested('([])') == True\nassert is_nested('[(])') == False\nassert is_nested('([]') == False\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(is_nested('[]'))\nprint(is_nested('[][]'))\nprint(is_nested('[(])'))\nprint(is_nested('[(()[]]'))\nprint(is_nested('[([[]])'))\nprint(is_nested('[][[]]'))\nprint(is_nested('[[[[]]]]'))"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 14\nassert     sum_squares([1, -2, 3, 4]) == 29\nassert     sum_squares([2, -5, -3, -1]) == 29\nassert     sum_squares([5, -5, 5, -5, -5]) == 0\nassert     sum_squares([-5, 2, -5, 4, -5, 8]) == 41\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_squares([1, 2, 3, 4, 5]) == 32\nassert     sum_squares([-3, -2, -1, 0, 1, 2]) == 5\nassert     sum_squares([-1, -2, -3]) == 5\nassert     sum_squares([-1, -2, -3, -4, -5]) == 0\nassert     sum_squares([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef fibonacci(n):\n    \"\"\"You are given a number n.\n    You have to return a list of n integers,\n    the i-th element of which is equal to the sum of i-1 and i-2 in the fibonacci sequence.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsum_squares([1, 2, -3]) == 14\nprint(f'sum_squares({[1, 2, -3]}) -> {sum_squares([1, 2, -3])}')\nassert sum_squares([]) == 0\nprint(f'sum_squares([]) -> {sum_squares([])}')\nassert sum_squares([1, 2, -3]) == 14\nprint(f'sum_squares([1, 2, -3]) -> {sum_squares([1, 2, -3])}')\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_squares([1,2,3]) == 14, 'Wrong result'\nassert sum_squares([0,0]) == 0, 'Wrong result'\nassert sum_squares([-1,2,-3]) == 14, 'Wrong result'\n\n\ndef get_rectangle_area(a,b):\n    \"\"\"You are given lengths a and b of rectangles.\n    You need to calculate the area of the rectangle.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_squares([1,2,3,4,5]) == {1**2 + 2**2 + 3**2 + 4**2 + 5**2}, \"Wrong!\"\nassert     sum_squares([1,2,3,4,5,6]) == {1**2 + 2**2 + 3**2 + 4**2 + 5**2 + 6**2}, \"Wrong!\"\nassert     sum_squares([0,0,0,0,0,0]) == {0**2 + 0**2 + 0**2 + 0**2 + 0**2 + 0**2}, \"Wrong!\"\nassert     sum_squares([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_squares(\n            [1, 2, 3, 4, 5]\n            ) == 14\nassert sum_squares(\n            [-1, 0, -10, -100, -1000000]\n            ) == -10000\nassert sum_squares(\n            [-1, 0, -1000000, -1000000000]\n            ) == -100000000000"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_squares([]) == 0, 'Empty list'\nassert     sum_squares([0]) == 0, 'One element'\nassert     sum_squares([-1]) == 1, 'One negative element'\nassert     sum_squares([3,4,5]) == 14, 'Three positive elements'\nassert     sum_squares([1.1,2.2,3.3]) == 14.4, 'One element and one float'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_if_last_char_is_a_letter(\"\")     == True, \"No input\"\nassert     check_if_last_char_is_a_letter(\"one\") == False, \"A letter\"\nassert     check_if_last_char_is_a_letter(\"casa\") == True, \"No space\"\nassert     check_if_last_char_is_a_letter(\"sdew\") == True, \"No space\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_if_last_char_is_a_letter(\"Sandra\") == True\nassert     check_if_last_char_is_a_letter(\"gandhi\") == False\nassert     check_if_last_char_is_a_letter(\"\") == False\nassert     check_if_last_char_is_a_letter(\"c\") == False\nassert     check_if_last_char_is_a_letter(\"Hello\") == False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_if_last_char_is_a_letter('A') == True\nassert     check_if_last_char_is_a_letter('a') == True\nassert     check_if_last_char_is_a_letter('hello') == False\nassert     check_if_last_char_is_a_letter('1') == False\nassert     check_if_last_char_is_a_letter('2') == False\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_if_last_char_is_a_letter('') == False, \"Wrong\"\nassert     check_if_last_char_is_a_letter('a') == False, \"Wrong\"\nassert     check_if_last_char_is_a_letter('A') == True, \"Wrong\"\nassert     check_if_last_char_is_a_letter('abc') == True, \"Wrong\"\nassert     check_if_last_char_is_a_letter('abc1') == True, \"Wrong\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_if_last_char_is_a_letter('peter')\nassert not check_if_last_char_is_a_letter('Peter')\nassert not check_if_last_char_is_a_letter('Peters')\nassert not check_if_last_char_is_a_letter('P')\nassert not check_if_last_char_is_a_letter('p')\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_if_last_char_is_a_letter(\"apple\") == True\nassert     check_if_last_char_is_a_letter(\"abele\") == False\nassert     check_if_last_char_is_a_letter(\"elephant\") == True\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_if_last_char_is_a_letter('apple') == True\nassert     check_if_last_char_is_a_letter('Apostrophe') == False\nassert     check_if_last_char_is_a_letter('space') == False\n\n'''\nGiven a string, return a string where for every char in the original,\nthere are two chars.\n'''\ndef double_char(txt):\n    '''\n    Create a function that takes a string and returns the string\n    with each char double\n    '''\n    pass\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_if_last_char_is_a_letter(\"a bc\")\nassert not check_if_last_char_is_a_letter(\"a)bc\")\nassert not check_if_last_char_is_a_letter(\"abc\")\nassert not check_if_last_char_is_a_letter(\"abc.def\")\nassert not check_if_last_char_is_a_letter(\"abc 456\")\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    index = 0\n    for i in range(len(arr)):\n        if index == 0:\n            if arr[i] < arr[index+1]:\n                return i\n        else:\n            if arr[i] < arr[index]:\n                return i\n        index += 1\n    return -1"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(can_arrange([\"yo\", \"ok\", \"o\", \"yep\", \"n\", \"n\", \"you\", \"yep\"]))\nprint(can_arrange([\"yo\", \"ok\", \"o\", \"yep\", \"n\", \"n\", \"you\", \"yep\", \"you\"]))\nprint(can_arrange([\"yo\", \"ok\", \"o\", \"yo\", \"n\", \"n\", \"you\", \"yep\"]))\nprint(can_arrange([\"yo\", \"ok\", \"o\", \"yo\", \"n\", \"n\", \"you\", \"yep\", \"yo\"]))\nprint(can_arrange([\"yo\", \"ok\", \"o\", \"yo\", \"n\", \"n\", \"you\", \"yo\", \"yo\"]))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     can_arrange([1, 2, 3, 4, 5, 6]) == 2, 'test1'\nassert     can_arrange([1, 2, 3, 4, 5, 6, 3, 2, 1]) == 3, 'test2'\nassert     can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1, 'test3'\nassert     can_arrange([]) == -1, 'test4'\nassert     can_arrange([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10, 'test5'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef can_arrange_test():\n    arr = [4, 4, 4, 4, 4, 4, 4]\n    assert can_arrange(arr) == 4\n\n    arr = [6, 6, 6, 6, 6, 6, 6]\n    assert can_arrange(arr) == 6\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert can_arrange([2, 3, 4, 5, 6, 7]) == 5\nassert can_arrange([2, 3, 4, 5, 6, 7, 1, 2]) == 6\nassert can_arrange([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == -1\nassert can_arrange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == -1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"Test case passed.\")\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     can_arrange([1, 1, 2, 3, 5]) == 0\nassert     can_arrange([1, 2, 3, 4, 5]) == 2\nassert     can_arrange([1, 2, 3, 4, 5, 6]) == -1\nassert can_arrange([1, 1, 2, 3, 4]) == -1\nassert can_arrange([1, 1, 2, 3, 4, 5, 6]) == 4\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(can_arrange(arr))"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_smallest_integers([1,2,3]) == (1,2)\nassert     largest_smallest_integers([1,2,-3]) == (2,1)\nassert     largest_smallest_integers([1,-2,-3]) == (1,-2)\nassert     largest_smallest_integers([1,-2,3]) == (1,-3)\nassert     largest_smallest_integers([1,-2,-3,-4]) == (1,-4)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_smallest_integers([4, -6, -7, -3, -4, -8]) == (-8, -4)\nassert     largest_smallest_integers([-9, -10, -5, -10, -15]) == (-15, -10)\nassert     largest_smallest_integers([-3, -1]) == (None, None)\n\nprint(\"PASSED ALL TESTS\")"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nlst = [1, -10, -9, -8, 7, 4, -6]\nassert largest_smallest_integers(lst) == (4, -6)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_smallest_integers([2, 4, 3, 5, 2, 3]) == (3, 5), 'Should be (3, 5)'\nassert     largest_smallest_integers([3, 2, 4, 5, 3, 5]) == (3, 5), 'Should be (3, 5)'\nassert     largest_smallest_integers([-2, 4, 3, 5, -2, 3]) == (-2, 3), 'Should be (-2, 3)'\nassert     largest_smallest_integers([]) == (None, None), 'Should be (None, None)'\nassert     largest_smallest_integers([2, -4, 3, 5, 2, 3]) == (2, 3), 'Should be (2, 3)'\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert largest_smallest_integers([2, 7, 3, 2, -2, 0, 1]) == (2, -2)\nassert largest_smallest_integers([0, -5, -1, -2, -3, 1]) == (-1, 2)\nassert largest_smallest_integers([2, -3, -1]) == (2, -1)\nassert largest_smallest_integers([]) == None\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \nprint(\"PASSED!\""
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlargest_smallest_integers([1, 4, -1, 2, 5, -2, 0]) == (-1, 5)\nassert largest_smallest_integers([-1, -3, -5, -7]) == (-1, -7)\nassert largest_smallest_integers([-1, -2, -5, -7]) == (-2, -5)\nassert largest_smallest_integers([-1, -2, -3, -5, -7]) == (3, -7)\nassert largest_smallest_integers([-3, -1, -2]) == (3, -2)\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlst = [-1, 3, 2, -7, -9]\nassert largest_smallest_integers(lst) == (3, -9)\n\nlst = []\nassert largest_smallest_integers(lst) == None\n\nlst = [-3, -9, -1]\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_smallest_integers([1,2,3,4]) == (None, None)\nassert     largest_smallest_integers([-1,3,2,5]) == (3, -1)\nassert     largest_smallest_integers([1,1,1]) == (1, 1)\nassert     largest_smallest_integers([-1,1,-2,3,4,5]) == (5, -1)\nassert     largest_smallest_integers([-1,1,1,-2,3,4,5]) == (1, 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare_one(3, 6) == None, \\\n            'Your function should return None when comparing 3 and 6.'\nassert     compare_one(5.0, 1.0) == 5.0, \\\n            'Your function should return 5.0 when comparing 5.0 and 1.0.'\nassert     compare_one('3', '6') == None, \\\n            'Your function should return None when comparing \\'3\\' and \\'6\\'. '\nassert     compare_one(3, 3) == 3, \\\n            'Your function should return 3 when comparing 3 and 3.'\nassert     compare_one('5', '5.0') == 5, \\\n            'Your function should return 5 when comparing \\'5\\' and \\'5.0\\'. '\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n\"\"\"\nWrite a Python function to sum of three given numbers. However, if two values are equal,\nthen return only the first value.\n\"\"\"\ndef sum_three(a, b, c):\n    \"\"\"\n    Create a function that takes three numbers, and returns the sum of the three numbers.\n    Return None if any of the values are None.\n    Note: if two numbers are equal, return only the first one.\n    \"\"\"\n    pass\n\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"test passed\")\nprint(compare_one(4, 3)) # output: 4\nprint(compare_one(1.1, 1.2)) # output: 2.2\nprint(compare_one(\"A\", \"a\")) # output: None\nprint(compare_one(1, 1)) # output: None\nprint(compare_one(2, 2)) # output: Non"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef compare_two(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n    \"\"\"\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     compare_one(1, 2) == 1\nassert     compare_one('1', 2) == 1\nassert     compare_one('1', '2') == None\nassert     compare_one('1', '2.1') == 2.1\nassert     compare_one('1', '2.1', '3.4') == 2.1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare_one(1, 1)        ==     None,    \"Compare_one not implemented\"\nassert     compare_one(1, 2)        ==     2,    \"Compare_one incorrect\"\nassert     compare_one(1.1, 1.1)    ==     None,    \"Compare_one incorrect\"\nassert     compare_one(1, '1')        ==     None,    \"Compare_one incorrect\"\nassert     compare_one(1, 1.1)        ==     1.1,    \"Compare_one incorrect\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_equal_to_sum_even(10) == False\nassert     is_equal_to_sum_even(12) == True\nassert     is_equal_to_sum_even(16) == True\nassert     is_equal_to_sum_even(20) == False\n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_equal_to_sum_even(2) == False\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(4) == False\nassert     is_equal_to_sum_even(9) == False\nassert     is_equal_to_sum_even(14) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_equal_to_sum_even(23) == True, \"23=23\"\nassert     is_equal_to_sum_even(60) == True, \"60=60\"\nassert     is_equal_to_sum_even(71) == False, \"71=71\"\nassert     is_equal_to_sum_even(56) == False, \"56=56\"\nassert     is_equal_to_sum_even(8) == True, \"8=8\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_equal_to_sum_even(42)\nassert is_equal_to_sum_even(13)\nassert not is_equal_to_sum_even(16)\nassert not is_equal_to_sum_even(12)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('All tests passed')\n\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_equal_to_sum_even(25)\nassert not is_equal_to_sum_even(10)\nassert not is_equal_to_sum_even(15)\nassert not is_equal_to_sum_even(20)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_equal_to_sum_even(0) == True\nassert     is_equal_to_sum_even(1) == True\nassert     is_equal_to_sum_even(2) == True\nassert     is_equal_to_sum_even(3) == True\nassert     is_equal_to_sum_even(4) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_equal_to_sum_odd(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n    \"\"\"\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     special_factorial(5) == 120, \"correctness test\"\nassert     special_factorial(4) == 24, \"correctness test\"\nassert     special_factorial(3) == 6, \"correctness test\"\nassert     special_factorial(2) == 2, \"correctness test\"\nassert     special_factorial(1) == 1, \"correctness test\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     special_factorial(0) == 1\nassert     special_factorial(1) == 1\nassert     special_factorial(2) == 2\nassert     special_factorial(3) == 6\nassert     special_factorial(4) == 24\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     special_factorial(1)     == 1\nassert     special_factorial(2)     == 2\nassert     special_factorial(3)     == 6\nassert     special_factorial(4)     == 24\nassert     special_factorial(5)     == 120\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     special_factorial(5) == 120\nassert     special_factorial(15) == 5040\nassert     special_factorial(3) == 6\nassert     special_factorial(5.5) == 120.0\n\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(special_factorial(6)) == 720\nprint(special_factorial(0)) == 1\nprint(special_factorial(-1)) == \"Sorry, we don't accept negatives\"\nprint(special_factorial(1000000))\n\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef replace_with_repeat(string):\n    \"\"\"The function will receive a string as input and should return a new string\n    which is composed from the original string replaced by the repetition of the\n    original string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     fix_spaces('test') == 'test', \"Test case 1 fail.\"\nassert     fix_spaces('tst') == 'tst', \"Test case 2 fail.\"\nassert     fix_spaces('t   st') == 't-st', \"Test case 3 fail.\"\nassert     fix_spaces('t   st1') == 't-st1', \"Test case 4 fail.\"\nassert     fix_spaces('t   st2') == 't-st2', \"Test case 5 fail.\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     fix_spaces(\"h f    u    s t e    t t i t e   n f    e      s p a r t e d   \") \n== \"h_f_u_s_t_e_t_i_t_e_n_f_e_s_p_a_r_t_e_d\"\n\nassert     fix_spaces(\"h f    u    s t e    t t i t e   n f    e      s p a r t e d   \") \n== \"hf_u_s_t_e_t_i_t_e_n_f_e_s_p_a_r_t_e_d\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     fix_spaces(\" this   is   spaces   fine  \") == \"this_is_spaces_fine\"\nassert     fix_spaces(\" some  spaces  like  that  \") == \"some_spaces_like_that\"\nassert     fix_spaces(\"this  space    like that  \") == \"this_space_like_that\"\nassert     fix_spaces(\"this  space like that  \") == \"this_space_like_that\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    fix_spaces('Hi   there') == 'hi there'\n    fix_spaces('hello there') == 'hello there'\n    fix_spaces('placeholder') == 'placeholder'\nassert fix_spaces('  placeholder') == 'placeholder'\nassert fix_spaces('placeholder  ') == 'placeholder'\nassert fix_spaces('placeholder') == 'placeholder'\nassert fix_spaces('Hello, World') == 'Hello_World'\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     fix_spaces(\"the quick brown fox jumps over the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog.\"\nassert    fix_spaces(\"the quick brown fox jumps over the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog.\"\nassert     fix_spaces(\"the quick brown fox jumps over the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog.\"\nassert     fix_spaces(\"the quick brown fox jumps over the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog.\"\nassert     fix_spaces(\"the quick brown fox jumps over the lazy dog.\") == \"the_quick_brown_fox_jumps_over_the_lazy_dog.\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     fix_spaces('Javascript') == \"Javascript\"\nassert     fix_spaces('Javascript ') == \"Javascript\"\nassert     fix_spaces('JavaScript') == \"JavaScript\"\nassert     fix_spaces('JavaScript') == \"JavaScript\"\nassert     fix_spaces('JavAsc') == \"Java_asc\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nfile_name_check('txt.exe')\nfile_name_check('txt.a.exe')\nfile_name_check('txt.exe.')\nfile_name_check('txt.exe.exe')\nfile_name_check('txt.exe.exe.')\nfile_name_check('a.txt')\nfile_name_check('a.txt.')\nfile_name_check('txt.txt')\nfile_name_check('txt.txt.')\nfile_name_check('txt')\nfile_name_check('txt.')\nfile_name_check('txt')\n\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     file_name_check(\"0\") == \"No\"\nassert     file_name_check(\"0a\") == \"No\"\nassert     file_name_check(\"zz0\") == \"No\"\nassert     file_name_check(\"z.0.7\") == \"No\"\nassert     file_name_check(\"a0.txt\") == \"Yes\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert file_name_check('tasks') == 'No', 'Your function returned no.'\nassert file_name_check('tasks_2.txt') == 'Yes', 'Your function returned yes.'\nassert file_name_check('tasks_3.txt') == 'No', 'Your function returned no.'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     file_name_check('filename.txt') == 'Yes'\nassert     file_name_check('filename.exe') == 'No'\nassert     file_name_check('filename.ex') == 'No'\nassert     file_name_check('filename.dll') == 'No'\nassert     file_name_check('filename.txt.txt') == 'Yes'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert file_name_check('abc.xyz') == 'Yes'\nassert file_name_check('abc.xyz_') == 'No'\nassert file_name_check('a.b.c.xyz') == 'Yes'\nassert file_name_check('a.b.c.xyz_') == 'No'\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef validate_file_name(file_name):\n    \"\"\"Given a file name, return 'Yes' if the file name is valid, and return 'No' otherwise.\n    Assume that the file name is valid if and only if the above conditions are met.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     file_name_check('a.exe') == 'No', 'Your function should return \"No\" if the file name is incorrect.'\nassert file_name_check('test') == 'Yes', 'Your function should return \"Yes\" if the file name is correct.'\nassert file_name_check('test.txt') == 'Yes', 'Your function should return \"Yes\" if the file name is correct.'\nassert file_name_check('test_.txt') == 'Yes', 'Your function should return \"Yes\" if the file name is correct.'\nassert file_name_check('test1_txt') == 'Yes', 'Your function should return \"Yes\" if the file name is correct.'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_squares([5,4,7,2,8,3,6]) == 24, 'Wrong output for {0}'.format(str(sum_squares([5,4,7,2,8,3,6])))\nassert sum_squares([6,3,1,9,4,3]) == 25, 'Wrong output for {0}'.format(str(sum_squares([6,3,1,9,4,3])))\nassert sum_squares([5,4,7,2,8,3,6]) == 24, 'Wrong output for {0}'.format(str(sum_squares([5,4,7,2,8,3,6])))\nassert sum_squares([6,3,1,9,4,3]) == 25, 'Wrong output for {0}'.format(str(sum_squares([6,3,1,9,4,3])))\nprint('All the tests have passed'"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_squares([1,2,3,4,5]) == 25, 'Wrong answer'\nassert sum_squares([1,2,3,4,5,6]) == 30, 'Wrong answer'\nassert sum_squares([1,2,3,4,5,6,7]) == 36, 'Wrong answer'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_squares([1, 2, 3, 4]) == 14, \"Error: expected 14, got %d\" % sum_squares([1, 2, 3, 4])\nassert     sum_squares([2, 2, 2]) == 4, \"Error: expected 4, got %d\" % sum_squares([2, 2, 2])\nassert     sum_squares([3, 3, 3]) == 9, \"Error: expected 9, got %d\" % sum_squares([3, 3, 3])\nassert     sum_squares([4, 4, 4, 4, 4, 4, 4]) == 64, \"Error: expected 64, got %d\" % sum_squares([4, 4, 4, 4, 4, 4, 4])\nassert     sum_squares([1, 2, 3]) == 4, \"Error: expected 4, got %d\" % sum_squares([1, 2, 3])\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert sum_squares([1,2,3,4]) == 25\nassert sum_squares([2,4,6,8]) == 144\nassert sum_squares([1,3,5]) == 25\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum_squares([1,2,3,4,5]) == 60, \"Wrong answer\"\nprint(\"You're all set!\""
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_squares([4, 9, 16]) == 121, \"Correct\"\nassert     sum_squares([1, 2, 3]) == 9, \"Correct\"\nassert     sum_squares([8, 9, 16]) == 169, \"Correct\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_squares([2, 4, 5, 8, 10, 11]) == 385\nassert     sum_squares([3, 4, 5, 9, 10, 11]) == 338\nassert     sum_squares([0, 1, 2, 3, 4, 5]) == 0\nassert     sum_squares([]) == 0\nassert     sum_squares([1]) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     words_in_sentence('I am a boy.') == 'am a boy'\nassert     words_in_sentence('Duck Doves, Take Yellow Duck') == 'Duck Duck Duck'\nassert     words_in_sentence('Hello, World!') == 'Hello World!'\nassert     words_in_sentence('The quick brown fox jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog.'\nassert     words_in_sentence('My cat is a little' ) == 'My cat is a little'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    words_in_sentence('the quick brown fox jumps over the lazy dog') == 'the quick brown fox jumps over the lazy dog'\nassert \n    words_in_sentence('jump and eat at the same time') == 'eat at the same time'\nassert \n    words_in_sentence('the cow jumped, and the quick brown fox jumped, and the lazy dog jumped') == 'the cow jumped, the quick brown fox jumped, the lazy dog'\nassert \n    words_in_sentence('the fox jumped and the dog jumped, the quick brown fox jumped, and the lazy dog jumped') == 'the fox jumped and the dog'\nassert \n    words_in_sentence('the fox jumped, the dog jumped, the quick brown fox jumped, and the lazy dog jumped') == 'the fox jumped'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     words_in_sentence('The quick brown fox jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog.'\nassert     words_in_sentence('Bob is a good boy.') == 'Bob is a good boy.'\nassert     words_in_sentence('This is a test.') == 'This is a test.'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     words_in_sentence(\"a b c\") == \"a b c\"\nassert     words_in_sentence(\"a b a c\") == \"a b a c\"\nassert     words_in_sentence(\"a b c a\") == \"a b c a\"\nassert     words_in_sentence(\"a b c c\") == \"a b c c\"\nassert     words_in_sentence(\"a b c d\") == \"a b c d\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(words_in_sentence(\"This is a test\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert words_in_sentence(\"This is a test\") == \"test\"\n    "
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     words_in_sentence(\"a b\") == \"a b\"\nassert     words_in_sentence(\"a b c\") == \"a b c\"\nassert     words_in_sentence(\"a b c d e\") == \"a b c d e\"\nassert     words_in_sentence(\"the quick brown fox jumps over the lazy dog\") == \"the quick brown fox jumps over the lazy dog\"\nassert     words_in_sentence(\"the fox jumps over the lazy dog\") == \"the fox jumps over the lazy dog\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     words_in_sentence(    'hello hello hello hello') == \"hello hello\"\nassert     words_in_sentence(    'hello world') == \"hello world\"\nassert     words_in_sentence(    'hello') == \"hello\"\nassert     words_in_sentence(    'hello world hello') == \"hello world\"\nassert     words_in_sentence(    'hello world') == \"hello world\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     simplify(\"7/2\", \"7/2\") == True\nassert     simplify(\"2/3\", \"2/3\") == False\nassert     simplify(\"10/3\", \"10/3\") == True\n\nprint(\"TEST:\", \"Your function satisfies all requirements\")"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsimplify(\"3/4\", \"1/2\") == True\nsimplify(\"1/2\", \"2/3\") == False\nsimplify(\"1/6\", \"3/4\") == True\nsimplify(\"5/4\", \"2/3\") == True\nsimplify(\"5/6\", \"2/3\") == False\nsimplify(\"10/6\", \"2/3\") == True\nsimplify(\"2/3\", \"10/6\") == True\nsimplify(\"5/3\", \"3/4\") == False\nsimplify(\"2/3\", \"5/3\") == False\nsimplify(\"2/3\", \"4/3\") == True\nsimplify(\"2/3\", \"4/2\") == False\nsimplify(\"2/3\", \"4/5\") == False\nsimplify(\"2/3\", \"2/4\") == False\nsimplify(\"2/3\", \"2/5\") == False\nsimplify(\"2/3\", \"1/4\") == True\nsimplify(\"2/3\", \"1/5\") == False\nsimplify(\"2/3\", \"2/6\") == False\nsimplify(\"2/3\", \"1/6\") == True\nsimplify(\"2/3\", \"2/3\") == True\nsimplify(\"2/3\", \"1/3\") == True\nsimplify(\"2/3\", \"2/2\") == False\nsimplify(\"2/3\", \"1/2\") == True\nsimplify(\"2/3\", \"1/4\") == False\nsimplify(\"2/3\", \"1/5\") == True\nsimplify(\"2/3\", \"1/6\") == True\nsimplify(\"2/3\", \"1/3\") == True\nsimplify(\"2/3\", \"1/2\") == True\nsimplify(\"2/3\", \"1/4\") == True\nsimplify(\"2/3\", \"1/5\") == False\nsimplify(\"2/3\", \"1/6\") == False\nsimplify(\"2/3\", \"2/3\") == True\nsimplify(\"2/3\", \"2/2\") == False\nsimplify(\"2/3\", \"2/4\") == False\nsimplify(\"2/3\", \"2/5\") == False\nsimplify(\"2/3\", \"2/6\") == False\nsimplify(\"2/3\", \"2/3\") == True\nsimplify(\"2/3\", \"2/2\") == False\nsimplify(\"2/3\", \"2/4\") == False\nsimplify(\"2/3\", \"2/5\") == False\nsimplify(\"2/3\", \"2/6\") == True\nsimplify(\"2/3\", \"2/3\") == True\nsimplify(\"2/3\", \"2/2\") == True\nsimplify(\"2/3\", \"2/4\") == False\nsimplify(\"2/3\", \"2/5\") == False\nsimplify(\"2/3\", \"2/6\") == True\nsimplify(\"2/3\", \"1/3\") == True\nsimplify(\"2/3\", \"1/2\") == False\nsimplify(\"2/3\", \"1/4\") == False\nsimplify(\"2/3\", \"1/5\") == True\nsimplify(\"2/3\", \"1/6\") == False\nsimplify(\"2/3\", \"1/3\") == True\nsimplify(\"2/3\", \"1/2\") == True\nsimplify(\"2/3\", \"1/4\") == True\nsimplify(\"2/3\", \"1/5\") == False\nsimplify(\"2/3\", \"1/6\") == False\nsimplify(\"2/3\", \"1/3\") == True\nsimplify(\"2/3\", \"1/2\") == True\nsimplify(\"2/3\", \"1/4\") == True\nsimplify(\"2/3\", \"1/5\") == False\nsimplify(\"2/3\", \"1/6\") == False\nsimplify(\"2/3\", \"2/3\") == True\nsimplify(\"2/3\", \"2/2\") == False\nsimplify(\"2/3\", \"2/4\") == True\nsimplify(\"2/3\", \"2/5\") == Tru"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     simplify(\"1/3\", \"3/2\") == True, \"Should return True\"\nassert     simplify(\"1/3\", \"4/2\") == False, \"Should return False\"\nassert     simplify(\"1/3\", \"4/3\") == True, \"Should return True\"\nassert     simplify(\"1/3\", \"0/3\") == True, \"Should return True\"\nassert     simplify(\"1/3\", \"2/3\") == True, \"Should return True\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert simplify(simplify( \"1/2\", \"1/2\"), \"1/2\") == True\nassert simplify(simplify(\"1/2\", \"1/2\"), \"1/2\") == True\nassert simplify(simplify(\"1/4\", \"1/4\"), \"1/4\") == True\nassert simplify(simplify(\"1/4\", \"1/4\"), \"1/2\") == False\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert simplify(\"2/3\", \"3/2\") == True\nassert simplify(\"2/4\", \"3/2\") == False\nassert simplify(\"3/4\", \"3/2\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     simplify(\"3/4\", \"2/4\") == True\nassert     simplify(\"-5/7\", \"1/3\") == True\nassert     simplify(\"3/5\", \"2/4\") == False\nassert     simplify(\"0/1\", \"0/1\") == False\nassert     simplify(\"1/4\", \"2/4\") == True\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(simplify(\"-1/3\", \"-2/3\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"-1/2\", \"1/2\"))\nprint(simplify(\"2/5\", \"2/5\"))\nprint(simplify(\"4/3\", \"3/2\"))\nprint(simplify(\"-4/3\", \"3/2\"))\nprint(simplify(\"5/7\", \"5/7\"))\nprint(simplify(\"-5/7\", \"7/5\"))\nprint(simplify(\"-2/4\", \"2/4\"))\nprint(simplify(\"1/4\", \"1/4\"))\nprint(simplify(\"-1/2\", \"2/4\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"-4/3\", \"3/2\"))\nprint(simplify(\"2/4\", \"2/4\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"-2/4\", \"4/3\"))\nprint(simplify(\"-3/5\", \"3/5\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"-1/3\", \"1/3\"))\nprint(simplify(\"2/5\", \"2/5\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"-2/5\", \"5/2\"))\nprint(simplify(\"2/5\", \"2/5\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"-4/3\", \"3/2\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"-3/5\", \"5/3\"))\nprint(simplify(\"1/2\", \"1/2\"))\nprint(simplify(\"-1/2\", \"1/2\"))\nprint(simplify(\"2/5\", \"2/5\"))\nprint(simplify(\"1/3\", \"1/3\"))\nprint(simplify(\"1/5\", \"1/5\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"-4/3\", \"3/2\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"-1/2\", \"2/4\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"-4/3\", \"3/2\"))\nprint(simplify(\"2/4\", \"2/4\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"-3/5\", \"3/5\"))\nprint(simplify(\"2/4\", \"2/4\"))\nprint(simplify(\"-3/5\", \"3/5\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"-4/3\", \"3/2\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"4/3\", \"4/3\"))\nprint(simplify(\"-4/3\", \"3/2\"))\nprint(simplify(\"3/5\", \"3/5\"))\nprint(simplify(\"-4/3\", \"3/2\"))\nprint(simplify(\"-1/2\", \"2/4\"))\nprint(simplify(\"-1/4\", \"4/2\"))\nprint(simplify(\"2/4\", \"2/4\"))\nprint(simplify(\"-1/3\", \"1/3\"))\nprint(simplify(\"1/3\", \"1/3\"))\nprint(simplify(\"-1/5\", \"5/2\"))\nprint(simplify(\"1/5\", \"5/2\"))\nprint(simplif"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert simplify(\"1/2\", \"1/2\") == True\nassert simplify(\"1/2\", \"1/3\") == False\nassert simplify(\"1/3\", \"1/2\") == False\nassert simplify(\"1/3\", \"1/4\") == True\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     order_by_points([5,3,4,7,2]) == [2,4,5,7,3]\nassert     order_by_points([1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1]\nassert     order_by_points([0,0,0,0,0]) == [0,0,0,0,0]\nassert     order_by_points([1,2,3,4,5,6,7,8,9,10]) == [2,3,4,5,6,7,8,9,10,1]\nassert     order_by_points([0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     order_by_points([100, 200, 300, 600]) == [100, 200, 300, 600], \"test failed\"\nassert     order_by_points([100, 200, 300, 500]) == [100, 200, 300, 500], \"test failed\"\nassert     order_by_points([100, 200, 300, 500, 500]) == [100, 100, 200, 300, 300], \"test failed\"\nassert     order_by_points([100, 200, 300, 500, 500, 600]) == [100, 100, 100, 200, 300, 300, 300, 600], \"test failed\"\n\ndef check_if_palindrome(phrase):\n    \"\"\"\n    Write a function that checks if the given string is palindrome\n    \"\"\"\n    return\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     order_by_points([5, 21, 45, 9, 88, 15]) == [9, 15, 15, 45, 5, 88]\nassert     order_by_points([7, 39, 41, 8]) == [8, 7, 39, 41]\nassert     order_by_points([123, 14, 51]) == [51, 123, 14]\nassert     order_by_points([]) == []\nassert     order_by_points([1, 2]) == [1, 2]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert order_by_points([]) == []\nassert order_by_points([1]) == [1]\nassert order_by_points([2,3,4]) == [4,2,3]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     order_by_points([3,4,5,6,7,8,9,0,1]) == \n            [1,3,4,5,6,7,8,9,0]\nassert     order_by_points([7,9,8,4,3,5,6,2,1]) == \n            [1,2,3,4,5,6,7,8,9]\nassert     order_by_points([1,2,3,4,5,6,7,8,9]) == \n            [1,2,3,4,5,6,7,8,9]\nassert     order_by_points([3,4,5,6,7,8,9,0,1]) == \n            [0,1,3,4,5,6,7,8,9]\nassert     order_by_points([7,9,8,4,3,5,6,2,1]) == \n            [0,1,2,3,4,5,6,7,9]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     order_by_points([4, 4, 6, 6, 6, 9]) ==     [4, 6, 6, 4, 9, 4]\nassert     order_by_points([5, 5, 5, 5, 5, 5]) ==     [5, 5, 5, 5, 5, 5]\nassert     order_by_points([1, 1, 1, 1, 1, 1]) ==     [1, 1, 1, 1, 1, 1]\n\n\n\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     order_by_points([]) == []\nassert     order_by_points([0,9,7,9,5,4,5,8,8,0,9,1,5,7,0,9,7,2,0,7,8,8,0,7,8,0,4,8,2,0,8,8,0,5,7,2,2,5,7,0,4,8,0,4,5,7,0,7,1,0,7,8,0,5,1,8,8,5,5,8,0,7,7,8,0,4,5,0,0,9,1,5,7,4,0,8,0,4,5,7,2,2,5,7,0,4,8,0,4,5,7,0,7,8,0,5,7,2,2,5,7,0,4,8,0,4,5,7,0,7,1,0,7,8,0,5,1,8,8,5,5,8,0,7,7,8,0,4,5,0,0,9,1,5,7,0,9,5,7,0,4,8,0,4,5,7,2,2,5,7,0,4,8,0,4,5,7,0,7,8,0,5,1,8,8,5,5,8,0,7,7,8,0,4,5,0,0,9,1,5,7,4,0,8,0,4,5,7,2,2,5,7,0,4,8,0,4,5,7,0,7,8,0,5,7,2,2,5,7,0,4,8,0,4,5,7,2,2,5,7,0,4,5,7,0,7,8,0,5,1,8,8,5,5,8,0,7,7,8,0,4,5,0,0,9,1,5,7,4,0,8,0,4,5,7,2,2,5,7,0,4,8,0,4,5,7,2,2,5,7,0,7,8,0,5,1,8,8,5,5,8,0,7,7,8,0,4,5,0,0,9,1,5,7,0,9,5,7,0,4,8,0,4,5,7,2,2,5,7,0,4,8,0,4,5,7,0,7,8,0,5,7,2,2,5,7,0,4,8,0,4,5,7,2,2,5,7,0,7,8,0,5,1,8,8,5,5,8,0,7,7,8,0,4,5,0,0,9,1,5,7,0,9,5,7,0,4,8,0,4,5,7,2,2,5,7,0,4,8,0,4,5,7,0,7,8,0,5,7,2,2,5,7,0,4,8,0,4,5,7,2,2,5,7,0,7,8,0,5,1,8,8,5,5,8,0,7,7,8,0,4,5,0,0,9,1,5,7,0,9,5,7,0,4,8,0,4,5,7,2,2,5,7,0,4,8,0,4,5,7,0,7,8,0,5,7,2,2,5,7,0,4,8,0,4,5,7,2,2,5,7,0,7,8,0,5,1,8,8,5,5,8,0,7,7,8,0,4,5,0,0,9,1,5,7,0,9,5,7,0,4,8"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     order_by_points([1, 4, 7, 8, 9, 11, 13, 12, 15, 16, 17, 18]) == sorted(\n    [12, 13, 15, 16, 17, 18, 1, 4, 7, 8, 9, 11], key=lambda x: (sum(map(int, str(x))), x))\nassert     order_by_points([1, 4, 7, 8, 9, 11, 13, 12, 15, 16, 17, 18]) == sorted(\n    [12, 13, 15, 16, 17, 18, 1, 4, 7, 8, 9, 11], key=lambda x: (sum(map(int, str(x))), x))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     order_by_points([2,3,4,5]) ==         [2,3,4,5]\nassert     order_by_points([1,2,3,5,6,7]) ==     [1,2,3,5,6,7]\nassert     order_by_points([4,5,6,3,2,1]) ==     [1,2,3,4,5,6]\nassert     order_by_points([1,2,3]) ==         [1,2,3]\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    \n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     specialFilter([10, 3, 5, -2, -4, -1, 4, 2, 0, -7, 9]) == 3, \"Wrong\"\nassert     specialFilter([11, -3, -5, -2, -4, -1, 4, 2, 0, -7, 9]) == 4, \"Wrong\"\nassert     specialFilter([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1, \"Wrong\"\nassert     specialFilter([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9, \"Wrong\"\nassert     specialFilter([-1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 3, \"Wrong\"\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     specialFilter([12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 6, \"Wrong answer\"\nassert     specialFilter([11, 12, 13, 14, 15, 16, 17, 18, 19, 21]) == 5, \"Wrong answer\"\nassert     specialFilter([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 0, \"Wrong answer\"\nassert     specialFilter([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 1, \"Wrong answer\"\nassert     specialFilter([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \"\"\"\n    cnt = 0\n    for num in nums:\n        if (num > 10 and num % 10 == 1 and num // 10 == num) and num % 2!= 0:\n            cnt += 1\n    return cnt\n\n\nif __name__ == \"__main__\":\n    print(\"Please run from unittest\")\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     specialFilter([1, 2, 3, 4, 5, 6]) == 1\nassert     specialFilter([7, 9, 11]) == 2\nassert     specialFilter([1, 2, 3, 4, 5, 6]) == 0\nassert     specialFilter([1, 2, 3, 4, 5, 9, 11]) == 2\nassert     specialFilter([1, 3, 5, 7, 9]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     specialFilter([]) == 0\nassert     specialFilter([1, 2, 3, 4, 5]) == 2\nassert     specialFilter([9, 8, 7, 6, 5]) == 1\nassert     specialFilter([8, 9, 0, 1, 6, 5]) == 5\nassert     specialFilter([8, 9, 9, 0, 1, 6, 5]) == 6\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef oddNumbers(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are odd and last digit is odd.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     specialFilter([6,9,1,3,2,4,3,9]) == 5\nassert     specialFilter([6,2,3,9,2,1,4,3,9]) == 3\nassert     specialFilter([6,9,5,7,9,2,4,3,9]) == 2\nassert     specialFilter([1,1,1,1,1,1,1,1,1]) == 0\nassert     specialFilter([2,2,2,2,2,2,2,2,2]) == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     specialFilter([2, 5, 1, 8, 10, 3, 9]) == 2, \"Wrong answer\"\nassert     specialFilter([2, 5, 8, 3, 9, 1]) == 3, \"Wrong answer\"\nassert     specialFilter([2, 5, 8, 3, 9, 10]) == 0, \"Wrong answer\"\nassert     specialFilter([2, 5, 8, 3, 9, 1]) == 0, \"Wrong answer\"\nassert     specialFilter([9]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert\n\nif __name__ == \"__main__\":\n    for i in range(10):\n        print(i, get_max_triples(i))\n    pas"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # import random\n    # n = random.randint(1, 1000)\n    # n = 15\n    n = 3\n    print(get_max_triples(n))"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_triples(1) == 1\nassert     get_max_triples(2) == 3\nassert     get_max_triples(3) == 6\nassert     get_max_triples(4) == 12\nassert     get_max_triples(5) == 18\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('Correct solution =', get_max_triples(3))\nprint('Correct solution =', get_max_triples(8))\nprint('Correct solution =', get_max_triples(12))\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_triples(1) == 1\nassert     get_max_triples(2) == 3\nassert     get_max_triples(3) == 7\nassert     get_max_triples(4) == 13\nassert     get_max_triples(5) == 19\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_triples(1) == 0\nassert     get_max_triples(2) == 0\nassert     get_max_triples(10) == 1\nassert     get_max_triples(100) == 10\nassert     get_max_triples(1000) == 50\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_triples(4) == 7\nassert     get_max_triples(9) == 45\nassert     get_max_triples(10) == 270\nassert     get_max_triples(20) == 576\nassert     get_max_triples(30) == 1521\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_triples(2) == 3, \"Wrong result for get_max_triples(2): %s\"%(get_max_triples(2))\nassert     get_max_triples(3) == 6, \"Wrong result for get_max_triples(3): %s\"%(get_max_triples(3))\nassert     get_max_triples(4) == 10, \"Wrong result for get_max_triples(4): %s\"%(get_max_triples(4))\nassert     get_max_triples(5) == 20, \"Wrong result for get_max_triples(5): %s\"%(get_max_triples(5))\n\ndef get_max_triples_alternative(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bf('mercury','venus') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert bf('venus', 'earth') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert bf('earth','venus') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert bf('jupiter','saturn') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\nassert bf('mars', 'uranus') == ('mercury','venus', 'earth','mars', 'jupiter','saturn', 'uranus', 'neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bf('Mercury', 'Venus') ==     ('Mercury', 'Venus')\nassert     bf('Mercury', 'Earth') ==     ()\nassert     bf('Mercury', 'Mars') ==     ()\nassert     bf('Mercury', 'Jupiter') ==     ()\nassert     bf('Mercury', 'Saturn') ==     ('Saturn', 'Jupiter')\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Mercury\", \"Venus\")\nassert     bf(\"Venus\", \"Earth\") == (\"Venus\", \"Earth\")\nassert     bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\")\nassert     bf(\"Mars\", \"Jupiter\") == (\"Mars\", \"Jupiter\")\nassert     bf(\"Jupiter\", \"Saturn\") == (\"Jupiter\", \"Saturn\")\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bf('Mercury', 'Venus') == ( 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Earth', 'Mars') == ( 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Venus', 'Saturn') == ( 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\nassert     bf('Jupiter', 'Uranus') == ( 'Jupiter', 'Saturn', 'Earth', 'Mars', 'Venus', 'Neptune', 'Uranus')\nassert     bf('Saturn', 'Neptune') == ( 'Saturn', 'Earth', 'Mars', 'Jupiter', 'Venus', 'Uranus', 'Neptune')\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_animals_on_planet(planet):\n    '''\n    You have to write a function to count the number of animals \n    (birds, fish, and so on) on a planet.\n    The function should take one argument planet as a string. \n    The function should return the number of animals on that planet. \n    '''\n    pass\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bf(\"Mercury\", \"Venus\") == (\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Venus\", \"Earth\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Earth\", \"Mars\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\nassert     bf(\"Mars\", \"Uranus\") == (\"Mars\", \"Uranus\", \"Jupiter\", \"Saturn\", \"Neptune\")\nassert     bf(\"Uranus\", \"Neptune\") == (\"Uranus\", \"Neptune\", \"Jupiter\", \"Saturn\", \"Mars\")\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sorted_list_sum([]) == []\nassert sorted_list_sum([\"\"]) == [\"\"]\nassert sorted_list_sum([\"\"]) == [\"\"]\nassert sorted_list_sum([\"\"]) == [\"\"]\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sorted_list_sum2(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sorted_list_sum(['a', 'b', 'a', 'c', 'a']) == ['a', 'a', 'c', 'b']\nassert     sorted_list_sum(['a', 'b', 'a', 'c', 'a', 'a']) == ['a', 'a', 'a', 'a', 'b', 'c']\nassert     sorted_list_sum(['a', 'b', 'a', 'c', 'a', 'a', 'b', 'c']) == ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c']\nassert     sorted_list_sum(['a', 'b', 'a', 'c', 'a', 'a', 'b', 'c']) == ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c']\nassert     sorted_list_sum(['a', 'b', 'a', 'c', 'a', 'a', 'b', 'c', 'b', 'b', 'c', 'a', 'a', 'a']) == ['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'b', 'b', 'c', 'a', 'a']\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sorted_list_sum(['s', 'i', 'i', 'h', 'i','m', 'u', 'x', 'c', 'i', 'x', 'd', 'a', 'h','s', 'x', 'd','m', 'l', 'x', 'l', 'u','s', 'g', 'h', 'x', 'u', 'l', 'e', 'c','s', 't', 'x', 'x', 'u', 'l','s', 'h', 'c', 'x','s', 'x', 'g', 'x', 'u', 'x', 'l', 'x','s', 'i', 'x', 'h','s','m', 'h', 'l', 'x', 'e', 'x','s', 'a', 'x', 'c', 'x', 'l','s', 'x', 'u', 'h', 'u','s', 't', 'h', 'i','m','s', 'h', 'c', 'u', 'l', 'i', 'x', 'c', 't', 'l', 'x', 'h','s', 'g', 't','s', 'i','m', 'l', 'e', 'x','s', 't', 'i', 'h','m', 'x', 'l', 'x','s', 'x', 'l', 'g', 't', 'u', 'l', 'a', 'i', 'x','s', 'x', 'u', 'l','s', 'e', 'x','s', 'g', 'u', 'h', 'e', 'a', 'g','s', 'x', 'x', 'e','s', 'u','s', 'x', 't', 'a', 't', 'x', 'h','m', 'x', 't', 'x', 'h', 'u', 'g', 'e', 'l', 'x', 'i', 'c', 't', 'x', 'h', 't', 'x', 'g','m', 'h', 'c', 'a', 'c', 't', 'h', 'g', 't', 'l', 'e', 'l', 'e', 't', 'h','s', 'g', 't', 'x', 'l','s','m', 'x', 't', 'x', 't', 'x','m', 'e', 'i', 'u', 'g', 'l', 'e', 'h', 'l','s', 't','s', 'x','m', 'l', 'x', 'i','s', 'h', 'a', 't', 'x', 'g', 'l', 'i','s','s','s', 'i', 'x','s', 'g', 'i','s', 'a','s', 'i', 'x', 'c', 't', 'u', 'h','s', 'c', 'u', 't', 'l', 'a', 'i', 'x','s', 'u','s', 'u', 'l', 'l', 'i', 'x','s','s', 'h', 'a', 'x', 'i', 't', 'h', 'h', 'g', 'x','s', 'e', 'a','s', 'u', 'g','s', 't', 'h','s', 'l', 'g','s', 'x','s', 'h', 'l', 'a', 'i', 'i', 'x','s', 'a','s', 'g', 'a','s', 'a', 'a','s', 'e', 'a', 'x', 'e', 't', 'l', 'e', 't','s', 'a', 't', 't', 'l', 'i', 'a', 'l', 'e', 'a', 'l','s', 'h', 'x', 'l', 'x', 'e','s', 'l', 't', 'g', 'i','s','s', 'e', 'l', 'x', 'a', 'i', 'h','s','s','s', 'g', 'i','s', 't', 'x', 'h','s', 'g', 'a','s', 't','s', '"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sorted_list_sum([\"Hello\", \"the\", \"World\", \"is\", \"fool\", \"coffee\", \"was\", \"amazing\"]) == sorted_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299])\n    sorted_list_sum([\"Hello\", \"the\", \"World\", \"is\", \"fool\"]) == sorted_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 17"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sorted_list_sum([\"cat\", \"fish\", \"snake\"]) ==     [\"cat\", \"fish\", \"snake\"]\nassert sorted_list_sum([\"toi\", \"thisis\", \"toi\", \"thisisthis\", \"toi\", \"thisis\"]) ==     [\"toi\", \"thisis\", \"toi\", \"thisisthis\"]\nassert sorted_list_sum([\"thisis\", \"thisisthis\", \"thisis\", \"thisisthis\", \"thisis\", \"thisis\"]) ==     [\"thisis\", \"thisisthis\", \"thisis\", \"thisisthis\", \"thisis\", \"thisis\"]\nassert sorted_list_sum([\"thisis\", \"thisisthis\", \"thisis\", \"thisisthis\", \"thisis\", \"thisis\", \"thisis\"]) ==     [\"thisis\", \"thisisthis\", \"thisis\", \"thisisthis\", \"thisis\", \"thisis\", \"thisis\"]\n\nprint(\"The tests passed\")"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef next_prime(n):\n    \"\"\"Return the first prime number that is greater than n.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     x_or_y(3, 0, 1) == 0, \"Incorrect result for 3\"\nassert     x_or_y(4, 0, 1) == 1, \"Incorrect result for 4\"\nassert     x_or_y(5, 0, 1) == 1, \"Incorrect result for 5\"\nassert     x_or_y(6, 0, 1) == 1, \"Incorrect result for 6\"\nassert     x_or_y(7, 0, 1) == 1, \"Incorrect result for 7\"\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     x_or_y(7, 2, 1) == 1\nassert     x_or_y(13, 1, 13) == 13\nassert     x_or_y(13, 1, 2) == 1\nassert     x_or_y(1, 3, 1) == 3\nassert     x_or_y(1, 1, 2) == 2\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(x_or_y(3, 0, 1))\nprint(x_or_y(5, 0, 1))\nprint(x_or_y(10, 0, 1))\nprint(x_or_y(0, 0, 1))\nprint(x_or_y(10, 1, 0))\nprint(x_or_y(5, 1, 0))\nprint(x_or_y(2, 1, 0))\nprint(x_or_y(10, 2, 0))\nprint(x_or_y(3, 2, 0))\nprint(x_or_y(20, 2, 0))\nprint(x_or_y(2, 1, 1))\nprint(x_or_y(3, 2, 1))\nprint(x_or_y(10, 1, 1))\nprint(x_or_y(20, 1, 1))"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     x_or_y(2, 1, 1) == 1\nassert     x_or_y(2, 1, 2) == 2\nassert     x_or_y(3, 1, 2) == 1\nassert     x_or_y(4, 1, 2) == 1\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_prime(n):\n    \"\"\"A program which should return the value True if n is a prime \n    number and False otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert double_the_difference([1,2,3]) == 4, \"The output is not correct\"\nassert double_the_difference([1,2,3]) == 0, \"The output is not correct\"\nassert double_the_difference([]) == 0, \"The output is not correct\"\nassert double_the_difference([1,2,2,2,2,2]) == 4, \"The output is not correct\""
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     double_the_difference([1, 2, 3, 4]) ==     1, \\\n    \"incorrect value\"\nassert     double_the_difference([5, 6, 7, 8]) ==     25, \\\n    \"incorrect value\"\nassert     double_the_difference([-1, -2, -3, -4]) ==     0, \\\n    \"incorrect value\"\nassert     double_the_difference([-4]) ==     0, \\\n    \"incorrect value\"\nassert     double_the_difference([]) ==     0, \\\n    \"incorrect value\"\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(double_the_difference([3, 4, 5, 6])) # 23\nprint(double_the_difference([2, 1, 5, 8])) # 11\nprint(double_the_difference([])) # 0\nprint(double_the_difference([2, 4, 1, 5, 8])) # 14\nprint(double_the_difference([-1, -2, -3])) # 0\nprint(double_the_difference([-5, -4, -3, -2, -1, 1, 2, 3, 4])) # -1\nprint(double_the_difference([1, 2, -2, 3, -1, -4, 5])) # 5\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     double_the_difference([2, 3, 9]) == 14, \"double_the_difference fails\"\nassert     double_the_difference([4, 5, 16, 9]) == 42, \"double_the_difference fails\"\nassert     double_the_difference([]) == 0, \"double_the_difference fails\"\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(double_the_difference([])) \nassert 0 == 0\n\nprint(double_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nassert 30 == 30\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(double_the_difference([-2, 2, -1, -4, 3, -5, -7, 7, -9, -3, -4, -2, 0, 2])) # returns 2\nprint(double_the_difference([-2, 0, 2, -4, 7, -3])) # returns 5\nprint(double_the_difference([-2, 0, 2, -4, 7, -3, 1, 0, -5])) # returns 6\nprint(double_the_difference([-2, 0, 2, -4, 7, -3, 1, 0, -5, -6])) # returns 6\nprint(double_the_difference([0, -2, -4, 7, -3, 1, 0, -5, -6, -8])) # returns 1"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     double_the_difference([1, 2, 3]) == 3\nassert     double_the_difference([3, 4, 5]) == 21\nassert     double_the_difference([0, 0]) == 0\nassert     double_the_difference([2, 3, 4]) == 20\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     double_the_difference([2, -4, 3, -10]) == 25\nassert     double_the_difference([-2, -4, 3, -10]) == 29\nassert     double_the_difference([2, -4, -3, -10]) == -29\nassert     double_the_difference([2, -4, 3, -10, -8]) == 25\nassert     double_the_difference([2, 3, 5]) == 9\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     compare([1,1,1,2,2,2],\n                 [1,2,2,2,2,2]) == [0,0,0,0,0,0], \"Wrong Answer. Should be [0,0,0,0,0,0]\"\nassert     compare([1,2,2,1,1,1],\n                 [1,1,2,2,2,2]) == [0,0,0,0,1,1], \"Wrong Answer. Should be [0,0,0,0,1,1]\"\nassert     compare([1,2,2,1,1,1],\n                 [1,1,1,2,2,2]) == [0,0,0,0,0,0], \"Wrong Answer. Should be [0,0,0,0,0,0]\"\n\ndef compare_with_bonus(game,guess):\n    \"\"\"Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    You are given a bonus value bonus.\n    Bonus\n    If you guess correctly and the person had exactly bonus marks, you win an extra point. \n    If you guess correctly and the person had more than bonus marks, you win half of the bonus points. \n    If you guess correctly and the person had exactly 0 marks, you win no points at all.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     compare([0,1,2], [0,2,1]) == [0,1,1], \"Wrong\"\nassert     compare([1,2,3], [0,2,1]) == [1,1,0], \"Wrong\"\nassert     compare([0,0,1], [1,2,3]) == [0,0,0], \"Wrong\"\nassert     compare([5,0,3], [1,2,4]) == [2,1,0], \"Wrong\"\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert compare([[0,0],[5,4],[1,5],[7,1],[3,6],[4,3],[9,9]],[2,6]) ==[0,3,1,1,0,2]\nassert compare([[0,0],[5,4],[1,5],[7,1],[3,6],[4,3],[9,9]],[3,2]) ==[3,3,3,0,3,0,3]\nassert compare([[0,0],[5,4],[1,5],[7,1],[3,6],[4,3],[9,9]],[9,9]) ==[0,0,0,0,0,0,0]\nassert compare([[0,0],[5,4],[1,5],[7,1],[3,6],[4,3],[9,9]],[0,0]) ==[0,0,0,0,0,0,0]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     compare([6,2,5,2,6], [5,1,6,3,2]) == [2,1,1,0,0]\nassert compare([6,2,5,2,6], [5,1,6,3,2,2]) == [0,0,0,0,0]\n\nprint (\"You are all set! Now you can take a break!\")\ninput()\n\n\nprint (\"[+] Task done. Time to load the data.\")"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     compare([[0, 1, 1], [2, 1, 0]],\n                 [[0, 1, 0], [2, 1, 1]]) ==     [0, 0, 0], 'First Error!'\nassert     compare([[0, 1, 1], [2, 1, 0]],\n                 [[0, 1, 0], [3, 1, 1]]) ==     [1, 0, 1], 'Second Error!'\nassert     compare([[0, 1, 1], [2, 1, 0]],\n                 [[0, 1, 0], [0, 1, 1]]) ==     [0, 1, 1], 'Third Error!'\nassert     compare([[0, 1, 1], [2, 1, 0]],\n                 [[0, 1, 0], [2, 1, 1]]) ==     [0, 0, 0], 'Fourth Error!'\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     compare([[1,2,3,4,5,6],\n                    [2,3,4,5,6,7],\n                    [3,4,5,6,7,8],\n                    [4,5,6,7,8,9],\n                    [5,6,7,8,9,10],\n                    [6,7,8,9,10,11]],[[1,2,3,4,5,6],\n                    [2,3,4,5,6,7],\n                    [3,4,5,6,7,8],\n                    [4,5,6,7,8,9],\n                    [5,6,7,8,9,10],\n                    [6,7,8,9,10,11]])==[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]], f\"It is not correct\"\nprint(\"Test pass!\")\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert compare([1, 1, 2, 1, 0, 1, 1],\n        [1, 2, 2, 1, 2, 1, 0]) == [0, 2, 0, 1, 2, 0, 0]\nassert compare([2, 1, 2, 1, 0, 1, 1],\n        [1, 2, 2, 1, 2, 1, 0]) == [0, 2, 0, 1, 2, 0, 0]\nassert compare([2, 1, 2, 1, 0, 1, 1],\n        [1, 2, 2, 1, 2, 1, 1]) == [0, 1, 0, 1, 1, 0, 0]\nassert compare([1, 1, 2, 1, 0, 1, 1],\n        [1, 2, 2, 1, 2, 1, 0]) == [0, 1, 0, 1, 0, 0, 0]\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert compare([10, 8, 6, 5, 1], [8, 6, 5, 1, 10]) == [2, 0, 3, 3, 1]\nassert compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]\nassert compare([10, 5, 1, 5, 1], [10, 5, 1, 5, 1]) == [0, 0, 0, 0, 0]"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     compare([1,1,1], [0,1,1]) == [0,0,0]\nassert     compare([1,1,1], [0,1,0]) == [0,0,1]\nassert     compare([1,1,1], [0,1,1]) == [0,0,0]\nassert     compare([1,1,1], [1,1,0]) == [1,1,0]\nassert     compare([1,1,1], [1,0,1]) == [1,1,0]\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\", \"Check if you get the correct value\"\nassert     Strongest_Extension(\"Glucose\", [\"Cheese\"]) == \"Glucose.Cheese\", \"Check if you get the correct value\"\nassert     Strongest_Extension(\"Glucose\", [\"Cheese\"]) == \"Glucose.Cheese\", \"Check if you get the correct value\"\nassert     Strongest_Extension(\"Glucose\", [\"Cheese\"]) == \"Glucose.Cheese\", \"Check if you get the correct value\"\nassert     Strongest_Extension(\"Glucose\", [\"Cheese\"]) == \"Glucose.Cheese\", \"Check if you get the correct value\"\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Cheese', 'SErviNGSliCes', 'StuFfed']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['StuFfed', 'Cheese', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes']) == 'Slices.SErviNGSliCes'\nassert Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'Slices.SErviNGSliCes'\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef Weakest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the weakest extension and return a string in this \n    format: ClassName.WeakestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.StuFfed' since 'Slices.SErviNGSliCes' is the weakest extension \n    (its strength is 1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nclass_name = \"Slices\"\nextensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\nassert Strongest_Extension(class_name, extensions) == \"Slices.SErviNGSliCes\"\n\nclass_name = \"Lamp\"\nextensions = [\"ERbak\", \"Ellcord\", \"Foam\", \"Bubl\", \"Lampl\", \"Isol\"]\nassert Strongest_Extension(class_name, extensions) == \"Lamp.Lampl\"\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n\ndef FizzBuzz(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the fizzbuzz extensions and return a string in this \n    format: ClassName.FizzBuzzName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.FizzBuzz' since 'FizzBuzz' is the fizzbuzz extension \n    (its strength is 1).\n    \"\"\"\n    pass\n\n\n\ndef Greetings_First_Letter(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the greetings first letter extension and return a string in this \n    format: ClassName.GreetingsFirstLetterName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.GreetingsFirstLetter' since 'GreetingsFirstLetter' \n    is the greeting first letter extension (its strength is 1).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cycpattern_check(\"abc\", \"abcd\")    == True, \"First\"\nassert     cycpattern_check(\"abc\", \"acb\")    == False, \"Second\"\nassert     cycpattern_check(\"abcd\", \"abc\")    == True, \"Third\"\nassert     cycpattern_check(\"abcd\", \"acb\")    == False, \"Fourth\"\nassert     cycpattern_check(\"abc\", \"abcd\")    == True, \"Fifth\"\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cycpattern_check('helloworld','hello')     == True\nassert     cycpattern_check('helloworld','world')     == False\nassert     cycpattern_check('helloworld','world')     == True\nassert     cycpattern_check('helloworld','worl')     == False\nassert     cycpattern_check('helloworld','hello')     == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cycpattern_check(\"abcd\",\"cbad\")    == True\nassert     cycpattern_check(\"abcde\",\"cdeab\")    == False\nassert     cycpattern_check(\"abc\",\"abcb\")    == False\nassert     cycpattern_check(\"abc\",\"c\")    == False\nassert     cycpattern_check(\"\",\"c\")    == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cycpattern_check('the', 'tea') == True\nassert     cycpattern_check('ten', 'he') == True\nassert     cycpattern_check('ace', 'eccd') == False\n\ndef rot13(string):\n    \"\"\"You are given a string of letters. Return a copy of the string where every\n    character is shifted 13 spaces forwards.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cycpattern_check('ahhi','ahhi') == True\nassert     cycpattern_check('a','a') == False\nassert     cycpattern_check('', 'a') == False\nassert     cycpattern_check('acaa', 'aa') == True\nassert     cycpattern_check('acaa', 'aa') == True\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cycpattern_check('hello','hello')\nassert     cycpattern_check('hello','hi')\nassert     cycpattern_check('hello','hello hello')\nassert     cycpattern_check('hello','hello hellohello')\nassert     cycpattern_check('hello','hello hellohellohello')\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (cycpattern_check(\"waterbottle\", \"erbottlewat\") == True)\nassert     (cycpattern_check(\"waterbottle\", \"erbottlewat\") == False)\nassert     (cycpattern_check(\"waterbottle\", \"erbottlewat\") == True)\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cycpattern_check('on', 'nn') == True, 'First word should be a substring of the second word'\nassert     cycpattern_check('on', 'an') == False, 'Second word should be a substring of the first word'\nassert     cycpattern_check('on', 'o') == True, 'Second word should be a substring of the first word'\nassert     cycpattern_check('o', 'n') == False, 'Second word should be a substring of the first word'\nassert     cycpattern_check('o', 'on') == False, 'Second word should be a substring of the first word'\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_odd_count(100) == (1,1)\nassert even_odd_count(500) == (1,2)\nassert even_odd_count(33) == (1,3)\nassert even_odd_count(101) == (1,3)\nassert even_odd_count(150) == (2,1)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_odd_count(12) == (1,2)\nassert     even_odd_count(101010) == (2,5)\n\n\n\n\n\n\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_odd_count(12) == (2,0)\nassert     even_odd_count(5) == (0,2)\nassert     even_odd_count(10) == (0,2)\nassert     even_odd_count(1000) == (0,3)\nassert     even_odd_count(100) == (0,2)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_odd_count(123456) == (0, 6)\nassert     even_odd_count(123) == (1, 0)\nassert     even_odd_count(1234) == (0, 4)\nassert     even_odd_count(12) == (1, 1)\nassert     even_odd_count(10) == (0, 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Testing even_odd_count')\nprint('Expected: (0, 0), got:', even_odd_count(12))\nprint('Expected: (2, 0), got:', even_odd_count(12))\nprint('Expected: (2, 2), got:', even_odd_count(14))\nprint('Expected: (2, 2), got:', even_odd_count(25))\nprint('Expected: (0, 0), got:', even_odd_count(0))\nprint('Expected: (2, 2), got:', even_odd_count(-50))\nprint('Expected: (0, 2), got:', even_odd_count(-21))\nprint('Expected: (0, 0), got:', even_odd_count(5))\nprint()\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('check even_odd_count()... ', even_odd_count(7))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_odd_count(10) == (2, 4)\nassert even_odd_count(100) == (2, 4)\nassert even_odd_count(10022) == (4, 3)\nassert even_odd_count(22) == (0, 2)\nassert even_odd_count(-33) == (0, 3)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_odd_count(100) == (2,2)\nassert even_odd_count(11) == (1,3)\nassert even_odd_count(13) == (3,0)\nassert even_odd_count(73) == (1,1)\nassert even_odd_count(10000) == (11,9)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_odd_count(123) == (2,1)\nassert \neven_odd_count(1235) == (2,1)\nassert \neven_odd_count(12354) == (0,2)\nassert \neven_odd_count(111111) == (2,0)\nassert \neven_odd_count(1112233) == (0,3)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     int_to_mini_roman(2) == 'xx', 'Wrong result'\nassert     int_to_mini_roman(7) == 'lxx', 'Wrong result'\nassert     int_to_mini_roman(9) == 'lix', 'Wrong result'\nassert     int_to_mini_roman(24) == 'lxxiv', 'Wrong result'\nassert     int_to_mini_roman(25) == 'xl', 'Wrong result'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert     int_to_mini_roman(2) == 'II'\nassert     int_to_mini_roman(3) == 'III'\nassert     int_to_mini_roman(4) == 'IV'\nassert     int_to_mini_roman(5) == 'V'\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     int_to_mini_roman(12) == \"twelve\"\nassert     int_to_mini_roman(20) == \"twenty\"\nassert     int_to_mini_roman(90) == \"ninty\"\nassert     int_to_mini_roman(11) == \"eleven\"\nassert     int_to_mini_roman(3) == \"three\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     int_to_mini_roman(5) == \"V\"\nassert     int_to_mini_roman(14) == \"XXV\"\nassert     int_to_mini_roman(24) == \"XXIV\"\nassert     int_to_mini_roman(25) == \"XXV\"\nassert     int_to_mini_roman(31) == \"XXXI\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     int_to_mini_roman(1) == \"I\"\nassert     int_to_mini_roman(2) == \"II\"\nassert     int_to_mini_roman(3) == \"III\"\nassert     int_to_mini_roman(4) == \"IV\"\nassert     int_to_mini_roman(5) == \"V\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     int_to_mini_roman(1) == 'I'\nassert int_to_mini_roman(4) == 'IV'\nassert int_to_mini_roman(9) == 'IX'\nassert int_to_mini_roman(10) == 'X'\nassert int_to_mini_roman(89) == 'XV'\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_angle_triangle(1, 2, 3) == True\nassert     right_angle_triangle(1, 2, 4) == False\nassert     right_angle_triangle(3, 4, 5) == False\nassert     right_angle_triangle(4, 6, 5) == True\nassert     right_angle_triangle(2, 3, 4) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    if a**2 + b**2 > c**2 and c**2 + b**2 > a**2 and c**2 + a**2 > b**2:\n        if a+b>c and a+c>b and b+c>a:\n            return True\n    return False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    '''\n    pass\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_angle_triangle(3, 4, 5) == True\nassert     right_angle_triangle(4, 3, 5) == False\nassert     right_angle_triangle(3, 5, 4) == True\nassert     right_angle_triangle(4, 5, 3) == True\nassert     right_angle_triangle(5, 4, 3) == False\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_max([\"cat\", \"dog\", \"cow\"]) == \"cat\"\nassert     find_max([\"cat\", \"dog\", \"cow\", \"cat\"]) == \"cat\"\nassert     find_max([\"cat\", \"dog\", \"cow\", \"horse\", \"cat\"]) == \"cat\"\nassert     find_max([\"cat\", \"dog\", \"cow\", \"cat\", \"cat\", \"horse\"]) == \"cat\"\nassert     find_max([\"cat\", \"dog\", \"cat\", \"cat\", \"horse\", \"cat\"]) == \"cat\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_max([\"python\", \"java\", \"javascript\"]) == \"java\"\nassert     find_max([\"java\", \"python\", \"python\", \"python\"]) == \"java\"\nassert     find_max([\"python\", \"python\"]) == \"python\"\nassert     find_max([\"java\", \"java\"]) == \"java\"\nassert     find_max([]) == None\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_max([\"p\", \"d\", \"a\", \"a\"]) == \"d\"\nassert     find_max([\"p\", \"d\", \"a\", \"c\"]) == \"p\"\nassert     find_max([\"c\", \"z\", \"x\", \"o\"]) == \"c\"\nassert     find_max([\"a\", \"z\", \"x\", \"o\"]) == \"x\"\nassert     find_max([\"o\", \"z\", \"x\", \"a\"]) == \"z\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_max([\"tttttt\", \"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_max([\"hi\", \"hello\", \"python\"]) == \"hello\", \"Should return 'hello'\"\nassert     find_max([\"hello\", \"hi\", \"python\"]) == \"hello\", \"Should return 'hello'\"\nassert     find_max([\"python\", \"hi\", \"hello\"]) == \"python\", \"Should return 'python'\"\nassert     find_max([\"hi\", \"python\"]) == \"python\", \"Should return 'python'\"\nassert     find_max([\"python\", \"hi\", \"aardvark\"]) == \"python\", \"Should return 'python'\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_max([\"laptop\", \"tablet\", \"mouse\"]) == \"mouse\"\nassert     find_max([\"laptop\", \"tablet\", \"touch\"]) == \"laptop\"\nassert     find_max([\"apple\", \"grape\", \"lemon\", \"tomato\"]) == \"apple\"\nassert     find_max([\"apple\", \"grape\", \"lemon\", \"tomato\", \"grape\"]) == \"grape\"\nprint(\"All test cases are passed\")"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('All tests passed!')"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_max([\"unique\", \"words\"]) == \"unique\"\nassert     find_max([\"unique\", \"word\", \"unique\", \"words\"]) == \"unique\"\nassert     find_max([\"uniqe\", \"word\", \"unique\", \"words\"]) == \"unique\"\nassert     find_max([\"unique\", \"uniqe\", \"word\", \"unique\", \"words\"]) == \"uniqe\"\nassert     find_max([\"uniqe\", \"word\", \"unique\", \"words\", \"unique\"]) == \"uniqe\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_max([]) == None\nassert     find_max(['hello', 'goodbye', 'yes']) == 'goodbye'\nassert     find_max(['hello', 'goodbye', 'yes', 'hi']) == 'hello'\nassert     find_max(['hello', 'goodbye', 'yes', 'hi', 'hello']) == 'hello'\n\n\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_max([\"abc\", \"def\", \"z\"]) == \"abc\"\nfind_max([\"abc\", \"def\", \"d\"]) == \"abc\"\nfind_max([\"abc\", \"def\", \"a\"]) == \"a\"\nfind_max([\"abc\", \"def\", \"a\", \"c\", \"d\"]) == \"a\"\nfind_max([\"abc\", \"def\", \"a\", \"d\", \"c\"]) == \"d\"\nfind_max([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"c\"\nfind_max([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"e\"\nfind_max([\"\"]) == None\n\n\nprint(\"You've successfully passed all of our tests!\")\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eat(0, 2, 0) == (0, 0), 'test 1'\nassert     eat(0, 1, 0) == (0, 1), 'test 2'\nassert     eat(0, 2, 1) == (0, 2), 'test 3'\nassert     eat(0, 1, 2) == (2, 2), 'test 4'\nassert     eat(2, 1, 1) == (2, 1), 'test 5'\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eat(4, 5, 9) == ([0, 5], [2, 1])\nassert     eat(0, 5, 9) == ([0, 5], [2, 0])\nassert     eat(1, 5, 9) == ([1, 5], [1, 0])\nassert     eat(3, 5, 9) == ([2, 5], [2, 0])\nassert     eat(5, 5, 9) == ([3, 5], [0, 0])\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eat(0, 0, 1000) ==     [1000, 0]\nassert eat(1, 0, 1000) ==     [1000, 1]\nassert eat(2, 0, 1000) ==     [1000, 0]\nassert eat(3, 0, 1000) ==     [999, 1]\nassert eat(4, 0, 1000) ==     [999, 1]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert eat(1000, 1000, 1000) == [1000, 1000]\nassert eat(100, 100, 100) == [100, 100]\nassert eat(20, 200, 100) == [200, 100]\nassert eat(30, 300, 100) == [300, 100]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eat(0, 0, 1000) == [0, 1000]\nassert     eat(0, 0, 998) == [0, 998]\nassert     eat(0, 0, 997) == [0, 997]\nassert     eat(0, 0, 996) == [0, 996]\nassert     eat(0, 0, 995) == [0, 995]\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert eat(10, 8, 1) == [11, 1]\n    assert eat(5, 3, 3) == [7, 2]\n    assert eat(10, 10, 10) == [0, 0]\n    "
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    eat(1000, 800, 900) == (500, 900)\n    # eat(2000, 900, 500) == (500, 1000)\n    # eat(800, 200, 400) == (400, 200)\n    # eat(900, 0, 500) == (100, 500)\n    # eat(500, 0, 500) == (500, 500)\n    # eat(1000, 400, 500) == (600, 500)\n    # eat(1000, 900, 100) == (900, 100)\n    # eat(1000, 1000, 1000) == (1000, 0)\n\n\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eat(0, 0, 1000) == [1000, 0]\nassert     eat(10, 10, 1000) == [2000, 500]\nassert     eat(15, 10, 10) == [2000, 5]\n\n\ndef buy(number, need, remaining):\n    \"\"\"\n    You have a limited set of money, and you only have those money for buying in this shop.\n    You want to buy a certain amount of carrots.\n    return the amount of money you can purchase, or -1 if you don't have enough money\n    if there are not enough remaining carrots, you will buy all remaining carrots, but will still be hungry.\n    \n    Variables:\n    @number : integer\n        the number of carrots that you want to buy.\n    @need : integer\n        the number of carrots that you need to buy.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     do_algebra([], []) == 0\nassert     do_algebra([1], []) == 1\nassert     do_algebra([1,2], []) == 3\nassert     do_algebra([1,2,3], []) == 9\nassert     do_algebra([1,2,3], [3]) == 6\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    do_algebra([+], [1,2]) == 3\n    do_algebra([-], [1,2]) == -1\n    do_algebra([*], [1,2]) == 2\n    do_algebra([//], [1,2]) == 1\n    do_algebra([**], [1,2]) == 4\n    do_algebra([+**], [1,2]) == 3\n    do_algebra([-//], [1,2]) == -1\n    do_algebra([-//+], [1,2]) == -1\n    do_algebra([+//], [1,2]) == 2\n    do_algebra([//+], [1,2]) == 1\n    do_algebra([+**+], [1,2]) == 2\n    do_algebra([*//], [1,2]) == 1\n    do_algebra([*+], [1,2]) == 2\n    do_algebra([+//*], [1,2]) == 2\n    do_algebra([*//+], [1,2]) == 2\n    do_algebra([//*+], [1,2]) == 3\n    do_algebra([*//+**], [1,2]) == 1\n    do_algebra([*//+**+], [1,2]) == 1\n    do_algebra([+**//], [1,2]) == 1\n    do_algebra([+//**], [1,2]) == 1\n    do_algebra([*//+**+], [1,2]) == 1\n    do_algebra([*//+**+//], [1,2]) == 2\n    do_algebra([*//+**+//+], [1,2]) == 3\n    do_algebra([*//+**+//+**], [1,2]) == 3\n    do_algebra([//*//+**+], [1,2]) == 1\n    do_algebra([*//+//**+], [1,2]) == 1\n    do_algebra([*//+**+*], [1,2]) == 2\n    do_algebra([*//+**+**], [1,2]) == 2\n    do_algebra([*//+**+*//], [1,2]) == 1\n    do_algebra([*//+**+**//], [1,2]) == 2\n    do_algebra([+*//+**+], [1,2]) == 3\n    do_algebra([*//+**+//], [1,2]) == 3\n    do_algebra([+//*//+], [1,2]) == 2\n    do_algebra([*//+**+], [1,2]) == 2\n    do_algebra([*//+**+//], [1,2]) == 1\n    do_algebra([*//+**+**], [1,2]) == 2\n    do_algebra([*//+**+*//], [1,2]) == 1\n    do_algebra([*//+**+**//], [1,2]) == 2\n    do_algebra([*//+**+*//+], [1,2]) == 2\n    do_algebra([*//+**+**//+], [1,2]) == 2\n    do_algebra([+*//+**+], [1,2]) == 3\n    do_algebra([*//+**+//], [1,2]) == 3\n    do_algebra([+//*//+], [1,2]) == 2\n    do_algebra([*//+**+], [1,2]) == 2\n    do_algebra([*//+**+//], [1,2]) == 1\n    do_algebra([*//+**+**], [1,2]) == 2\n    do_algebra([*//+**+*//], [1,2]) == 1\n    do_algebra([*//+**+**//], [1,2]) == 2\n    do_algebra([*//+**+*//+], [1,2]) == 2\n    do_algebra([*//+**+**//+], [1,2]) == 2\n    do_algebra([+*//+**+], [1,2]) == 3\n    do_algebra([*//+*"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     do_algebra([\"+\"], [\"1\"])     == 2\nassert     do_algebra([\"+\"], [\"2\", \"3\"])     == 5\nassert     do_algebra([\"+\"], [\"2\", \"3\", \"4\"])     == 7\nassert     do_algebra([\"+\"], [\"2\", \"3\", \"4\", \"5\"])     == 10\nassert     do_algebra([\"+\"], [\"2\", \"3\", \"4\", \"5\", \"6\"])     == 16\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint \"do_algebra\"\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"====== do_algebra tests ======\")\n    # the length of operator list is equal to the length of operand list minus one\n    assert do_algebra([], []) == None\n    assert do_algebra([], [1]) == None\n    assert do_algebra([], [0]) == None\n    "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(do_algebra([+], [3, 2]))\nprint(do_algebra([-], [1]))\nprint(do_algebra([*], [4, 5, 6, 7]))\nprint(do_algebra([//], [5]))\nprint(do_algebra([**], [2, 2])"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     solve(\"AaBCc\") == \"AbCc\"\nassert solve(\"AaBCc\") == \"aAbCc\"\nassert solve(\"\") == \"\"\nassert solve(\"as\") == \"sa\"\nassert solve(\"asdf\") == \"dsa\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     solve(\"LOVELY\") == \"elOVELY\"\nassert     solve(\"zzz\") == \"zzz\"\nassert     solve(\"mYThIN\") == \"yThIN\"\nassert     solve(\"\") == \"\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert solve(\"aaa\") == \"Aaa\"\nassert solve(\"\") == \"\"\nassert solve(\"ABCD\") == \"BcDa\"\nassert solve(\"pqrst\") == \"rstu\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     solve(\"\")        ==     \"\"\nassert     solve(\"A\")        ==     \"A\"\nassert     solve(\"a\")        ==     \"a\"\nassert     solve(\"B\")        ==     \"b\"\nassert     solve(\"B\")        ==     \"b\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     solve('a1') == 'a1'\nassert     solve('a1b2') == 'b1a2'\nassert     solve('12') == '12'\nassert     solve('a') == 'a'\nassert     solve('a') == 'a'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (solve('abc') == 'abc')\nassert     (solve('ABC') == 'ABC')\nassert     (solve('abc') == 'ABC')\nassert     (solve('ABC') == 'ABC')\nassert     (solve('AAABBC') == 'AAABBC')\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_md5('test') == 'bcbcfa2bfc9cc95f8df7fb9e9e224d3d'\nassert     string_to_md5('test1') == None\nassert     string_to_md5('') == None\nassert     string_to_md5(None) == None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef string_to_md5_hash(string):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_md5(\"abc\") == 'd41d8cd98f00b204e9800998ecf8427e'\nassert     string_to_md5(\"\") == None\nassert     string_to_md5(\"123\") == 'd41d8cd98f00b204e9800998ecf8427e'\n\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_md5('a') == '36d0d5ac0f5f9ca5fd3cd897e3c1d0f6'\nassert     string_to_md5('ab') == '54d4471e3d8f8c77f5cf7dd9a1f0e873'\nassert     string_to_md5('abc') == '1a18677b1b13c2d52e35be5a9718e9d2'\nassert     string_to_md5('') == None\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_md5(\"\") is None\nassert     string_to_md5(\"test\") == \"b2c3b2f7a19a7f2a371178d3e7ac98c76\"\nassert     string_to_md5(\"test\") == \"b2c3b2f7a19a7f2a371178d3e7ac98c76\"\nassert     string_to_md5(\"a\") == \"f6adc39e039b775e26e5c134a761b02b\"\nassert     string_to_md5(\"abcd\") == \"9c6b85f1a8b7a36a82a8bfc11f7a0eba\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    def check(test_file, expected_file):\n        assert string_to_md5(test_file) == expected_file\n    \n    check(\"test.txt\", \"79f12b11be02a9bb1fc7af9c9ec6763e\")\n    check(\"test\", None)\n    check(\"\", None)\n    check(\"x\" * 1000000, None"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_md5(\"\") == None, 'No string should be empty.'\nassert     string_to_md5(\"Hello, world!\") == 'b695817c9b04e4d1b1b2686a7e6d6d7', 'Wrong string.'\nassert     string_to_md5(\"\") == None, 'No string should be empty.'\nassert     string_to_md5(\"world\") == '7f824e9aa4f9436e4990a07f5a7f2874', 'Wrong string.'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     generate_integers(1, 3) == range(2)\nassert    generate_integers(0, 5) == range(2, 6)\nassert    generate_integers(5, 10) == range(6, 11)\nassert    generate_integers(1, 10) == range(2, 11)\nprint(\"You passed the test!\")\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \"\"\"\n    if a > b:\n        return []\n\n    if a == b:\n        return list(range(a,b+1,2))\n    else:\n        return list(range(a,b+1,2)) + list(range(a+2,b+1,2))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     generate_integers(1, 10) == [2, 4, 6, 8]\nassert     generate_integers(10, 20) == [12, 14, 16, 18]\nassert     generate_integers(20, 25) == [24, 26]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     generate_integers(4, 5) == ['0', '2', '4']\nassert     generate_integers(1, 1000) == ['0', '2', '4', '6', '8', '10', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '32', '34', '36', '38', '40', '42', '44', '46', '48', '50', '52', '54', '56', '58', '60', '62', '64', '66', '68', '70', '72', '74', '76', '78', '80', '82', '84', '86', '88', '90', '92', '94', '96', '98', '100', '102', '104', '106', '108', '110', '112', '114', '116', '118', '120', '122', '124', '126', '128', '130', '132', '134', '136', '138', '140', '142', '144', '146', '148', '150', '152', '154', '156', '158', '160', '162', '164', '166', '168', '170', '172', '174', '176', '178', '180', '182', '184', '186', '188', '190', '192', '194', '196', '198', '200', '202', '204', '206', '208', '210', '212', '214', '216', '218', '220', '222', '224', '226', '228', '230', '232', '234', '236', '238', '240', '242', '244', '246', '248', '250', '252', '254', '256', '258', '260', '262', '264', '266', '268', '270', '272', '274', '276', '278', '280', '282', '284', '286', '288', '290', '292', '294', '296', '298', '300', '302', '304', '306', '308', '310', '312', '314', '316', '318', '320', '322', '324', '326', '328', '330', '332', '334', '336', '338', '340', '342', '344', '346', '348', '350', '352', '354', '356', '358', '360', '362', '364', '366', '368', '370', '372', '374', '376', '378', '380', '382', '384', '386', '388', '390', '392', '394', '396', '398', '400', '402', '404', '406', '408', '410', '412', '414', '416', '418', '420', '422', '424', '426', '428', '430', '432', '434', '436', '438', '440', '442', '444', '446', '448', '450', '452', '454', '456', '458', '460', '462', '464', '466', '468', '470', '472', '474', '476', '478', '480', '482', '484', '486', '488', '490', '492', '494', '496', '498', '500', '502', '504', '506', '508', '510', '512', '514', '516', '518', '520', '522', '524', '526', '528', '530', '532', '534', '536', '538', '540', '542', '544', '546', '548', '550', '552', '554', '556', '558', '560', '562', '564', '566', '568', '570', '572', '574', '576', '578', '580', '582', '584', '586', '588', '590', '592', '594', '596', '598', '600', '602', '604', '606', '608', '610', '612', '614', '616', '618', '620', '622', '624', '626', '628', '630', '632', '634', '636', '638', '640', '642', '644', '646', '648', '65"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     generate_integers(0,100) == [ ]\nassert     generate_integers(0,101) == [ ]\nassert     generate_integers(1,100) == [1, 3, 5, 7, 9]\nassert     generate_integers(1,101) == [1, 3, 5, 7, 9]\nassert     generate_integers(7,8) == [7]\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     generate_integers(5, 10) == [6, 8, 10]\nassert     generate_integers(1, 13) == [1, 4, 6, 8, 10, 12]\nassert     generate_integers(0, 11) == []\nassert     generate_integers(-10, -12) == [-14, -16, -18, -20, -22, -24]\nassert     generate_integers(0, 13) == []\n"
    }
]